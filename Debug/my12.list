
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024114  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ba78  08024318  08024318  00034318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803fd90  0803fd90  00050688  2**0
                  CONTENTS
  4 .ARM          00000008  0803fd90  0803fd90  0004fd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803fd98  0803fd98  00050688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803fd98  0803fd98  0004fd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803fd9c  0803fd9c  0004fd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000688  20000000  0803fda0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000375a0  20000688  08040428  00050688  2**3
                  ALLOC
 10 ._user_heap_stack 00028000  20037c28  08040428  00057c28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050688  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009ed4e  00000000  00000000  000506b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00012098  00000000  00000000  000ef404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00039810  00000000  00000000  0010149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000034e0  00000000  00000000  0013acb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006d48  00000000  00000000  0013e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000477f1  00000000  00000000  00144ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000565e4  00000000  00000000  0018c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00138e9b  00000000  00000000  001e2cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0031bb48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c994  00000000  00000000  0031bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000688 	.word	0x20000688
 800021c:	00000000 	.word	0x00000000
 8000220:	080242fc 	.word	0x080242fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000068c 	.word	0x2000068c
 800023c:	080242fc 	.word	0x080242fc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bd 	b.w	80006ac <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006ba:	b410      	push	{r4}
	dmabufno = 0;
 80006bc:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006be:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006c4:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006c6:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ce:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006d2:	4770      	bx	lr
 80006d4:	200006b0 	.word	0x200006b0
 80006d8:	20022814 	.word	0x20022814

080006dc <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006e2:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006e6:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006ea:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ec:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006ee:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006f0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	200006b0 	.word	0x200006b0
 8000704:	20022814 	.word	0x20022814

08000708 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000708:	b510      	push	{r4, lr}
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	2340      	movs	r3, #64	; 0x40
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800070c:	6b84      	ldr	r4, [r0, #56]	; 0x38
	printf("Multi-mode DMA Error\n");
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <ADC_MultiModeDMAError+0x20>)
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000710:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 800071a:	f01f ffc5 	bl	80206a8 <puts>
	HAL_ADC_ErrorCallback(hadc);
 800071e:	4620      	mov	r0, r4
}
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 8000724:	f005 b874 	b.w	8005810 <HAL_ADC_ErrorCallback>
 8000728:	080244dc 	.word	0x080244dc

0800072c <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	4616      	mov	r6, r2
 8000732:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000734:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000736:	69a2      	ldr	r2, [r4, #24]
		uint32_t Length) {
 8000738:	460d      	mov	r5, r1
 800073a:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800073c:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073e:	2a01      	cmp	r2, #1
 8000740:	d903      	bls.n	800074a <HAL_ADCEx_MultiModeStart_DBDMA+0x1e>
 8000742:	2198      	movs	r1, #152	; 0x98
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000746:	f002 fb29 	bl	8002d9c <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800074a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800074c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8000750:	d17c      	bne.n	800084c <HAL_ADCEx_MultiModeStart_DBDMA+0x120>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000752:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000756:	2b01      	cmp	r3, #1
 8000758:	d903      	bls.n	8000762 <HAL_ADCEx_MultiModeStart_DBDMA+0x36>
 800075a:	219a      	movs	r1, #154	; 0x9a
 800075c:	483e      	ldr	r0, [pc, #248]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 800075e:	f002 fb1d 	bl	8002d9c <assert_failed>
	__HAL_LOCK(hadc);
 8000762:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000766:	2b01      	cmp	r3, #1
 8000768:	d06d      	beq.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	6822      	ldr	r2, [r4, #0]
	__HAL_LOCK(hadc);
 800076c:	2101      	movs	r1, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076e:	6893      	ldr	r3, [r2, #8]
	__HAL_LOCK(hadc);
 8000770:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000774:	07d8      	lsls	r0, r3, #31
 8000776:	d414      	bmi.n	80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800077a:	4839      	ldr	r0, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 800077c:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077e:	6891      	ldr	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000780:	fba0 0303 	umull	r0, r3, r0, r3
		__HAL_ADC_ENABLE(hadc);
 8000784:	f041 0101 	orr.w	r1, r1, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000788:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 800078a:	6091      	str	r1, [r2, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000790:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000792:	9b03      	ldr	r3, [sp, #12]
 8000794:	b12b      	cbz	r3, 80007a2 <HAL_ADCEx_MultiModeStart_DBDMA+0x76>
			counter--;
 8000796:	9b03      	ldr	r3, [sp, #12]
 8000798:	3b01      	subs	r3, #1
 800079a:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 800079c:	9b03      	ldr	r3, [sp, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f9      	bne.n	8000796 <HAL_ADCEx_MultiModeStart_DBDMA+0x6a>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	07d9      	lsls	r1, r3, #31
 80007a6:	d545      	bpl.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 80007ac:	400b      	ands	r3, r1
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6423      	str	r3, [r4, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b4:	6853      	ldr	r3, [r2, #4]
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	d505      	bpl.n	80007c6 <HAL_ADCEx_MultiModeStart_DBDMA+0x9a>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c4:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007cc:	d039      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x116>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007d0:	f023 0306 	bic.w	r3, r3, #6
 80007d4:	6463      	str	r3, [r4, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d8:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007da:	f8df c098 	ldr.w	ip, [pc, #152]	; 8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007de:	f06f 0102 	mvn.w	r1, #2
		__HAL_UNLOCK(hadc);
 80007e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e6:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e8:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007f2:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f4:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f8:	6011      	str	r1, [r2, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007fa:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000804:	6053      	str	r3, [r2, #4]
			ADC->CCR |= ADC_CCR_DDS;
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
 8000808:	6853      	ldr	r3, [r2, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080a:	b1b1      	cbz	r1, 800083a <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 800080c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000810:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 8000812:	4633      	mov	r3, r6
 8000814:	9700      	str	r7, [sp, #0]
 8000816:	462a      	mov	r2, r5
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 800081a:	f006 f83f 	bl	800689c <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	6898      	ldr	r0, [r3, #8]
 8000822:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000826:	d105      	bne.n	8000834 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800082e:	609a      	str	r2, [r3, #8]
}
 8000830:	b005      	add	sp, #20
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return HAL_OK;
 8000834:	2000      	movs	r0, #0
}
 8000836:	b005      	add	sp, #20
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e7      	b.n	8000812 <HAL_ADCEx_MultiModeStart_DBDMA+0xe6>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	6463      	str	r3, [r4, #68]	; 0x44
 8000844:	e7c7      	b.n	80007d6 <HAL_ADCEx_MultiModeStart_DBDMA+0xaa>
	__HAL_LOCK(hadc);
 8000846:	2002      	movs	r0, #2
}
 8000848:	b005      	add	sp, #20
 800084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800084c:	2199      	movs	r1, #153	; 0x99
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x12c>)
 8000850:	f002 faa4 	bl	8002d9c <assert_failed>
 8000854:	e77d      	b.n	8000752 <HAL_ADCEx_MultiModeStart_DBDMA+0x26>
 8000856:	bf00      	nop
 8000858:	080244f4 	.word	0x080244f4
 800085c:	20000248 	.word	0x20000248
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	08000709 	.word	0x08000709
 800086c:	40012300 	.word	0x40012300
 8000870:	40012308 	.word	0x40012308
 8000874:	080006b1 	.word	0x080006b1
 8000878:	080006dd 	.word	0x080006dd

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b74      	ldr	r3, [pc, #464]	; (8000a50 <ADC_Conv_complete+0x1d4>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4975      	ldr	r1, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a75      	ldr	r2, [pc, #468]	; (8000a58 <ADC_Conv_complete+0x1dc>)
 8000884:	2b01      	cmp	r3, #1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000886:	4b75      	ldr	r3, [pc, #468]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000888:	6812      	ldr	r2, [r2, #0]
ADC_Conv_complete() {
 800088a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4e74      	ldr	r6, [pc, #464]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000890:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	781b      	ldrb	r3, [r3, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f502 62b8 	addeq.w	r2, r2, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 800089a:	680d      	ldr	r5, [r1, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089c:	4c71      	ldr	r4, [pc, #452]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 800089e:	f8b6 005c 	ldrh.w	r0, [r6, #92]	; 0x5c
 80008a2:	4971      	ldr	r1, [pc, #452]	; (8000a68 <ADC_Conv_complete+0x1ec>)
 80008a4:	9305      	str	r3, [sp, #20]
 80008a6:	021b      	lsls	r3, r3, #8
	if (sigsend) {		// oops overrun
 80008a8:	f8df b208 	ldr.w	fp, [pc, #520]	; 8000ab4 <ADC_Conv_complete+0x238>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80008b0:	7808      	ldrb	r0, [r1, #0]
 80008b2:	7821      	ldrb	r1, [r4, #0]
 80008b4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60d5      	str	r5, [r2, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f001 0003 	and.w	r0, r1, #3
 80008be:	3101      	adds	r1, #1
 80008c0:	4303      	orrs	r3, r0
 80008c2:	7021      	strb	r1, [r4, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8db 1000 	ldr.w	r1, [fp]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c2 3001 	strd	r3, r0, [r2, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b129      	cbz	r1, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fb3      	ldr	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2100      	movs	r1, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67b3      	str	r3, [r6, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8cb 1000 	str.w	r1, [fp]
 80008de:	f102 0c0e 	add.w	ip, r2, #14
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008e4:	4a62      	ldr	r2, [pc, #392]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80008e6:	2600      	movs	r6, #0
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	f8d2 e000 	ldr.w	lr, [r2]
 80008ee:	4a61      	ldr	r2, [pc, #388]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008f0:	4961      	ldr	r1, [pc, #388]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008f2:	6814      	ldr	r4, [r2, #0]
 80008f4:	4861      	ldr	r0, [pc, #388]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f6:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f8:	9303      	str	r3, [sp, #12]
 80008fa:	4b62      	ldr	r3, [pc, #392]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008fc:	8809      	ldrh	r1, [r1, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000906:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8000ab8 <ADC_Conv_complete+0x23c>
 800090a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000abc <ADC_Conv_complete+0x240>
 800090e:	9604      	str	r6, [sp, #16]
 8000910:	9102      	str	r1, [sp, #8]
 8000912:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000914:	f006 011f 	and.w	r1, r6, #31
		thissamp = (*adcbuf16)[i];
 8000918:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091c:	ea80 78e0 	eor.w	r8, r0, r0, asr #31
 8000920:	3601      	adds	r6, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000922:	f83a 5011 	ldrh.w	r5, [sl, r1, lsl #1]
 8000926:	441c      	add	r4, r3
		lastmeanwindiff = abs(meanwindiff);
 8000928:	eba8 78e0 	sub.w	r8, r8, r0, asr #31
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800092c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000930:	1b64      	subs	r4, r4, r5
		lastsamp[j] = thissamp;			// save last samples
 8000932:	f82a 3011 	strh.w	r3, [sl, r1, lsl #1]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000936:	1a12      	subs	r2, r2, r0
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9803      	ldr	r0, [sp, #12]
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093a:	449e      	add	lr, r3
		if (sigsend)
 800093c:	f8db 7000 	ldr.w	r7, [fp]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000940:	eb08 0500 	add.w	r5, r8, r0
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000944:	f344 104f 	sbfx	r0, r4, #5, #16
 8000948:	1a18      	subs	r0, r3, r0
 800094a:	2800      	cmp	r0, #0
 800094c:	bfb8      	it	lt
 800094e:	4240      	neglt	r0, r0
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000950:	4402      	add	r2, r0
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000952:	f342 104f 	sbfx	r0, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000956:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095a:	f849 0021 	str.w	r0, [r9, r1, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095e:	9902      	ldr	r1, [sp, #8]
 8000960:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8000964:	1859      	adds	r1, r3, r1
 8000966:	42a9      	cmp	r1, r5
 8000968:	dd04      	ble.n	8000974 <ADC_Conv_complete+0xf8>
			pretrigcnt++;
 800096a:	9901      	ldr	r1, [sp, #4]
 800096c:	3101      	adds	r1, #1
 800096e:	9101      	str	r1, [sp, #4]
 8000970:	2101      	movs	r1, #1
 8000972:	9104      	str	r1, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000974:	42ab      	cmp	r3, r5
 8000976:	dd03      	ble.n	8000980 <ADC_Conv_complete+0x104>
 8000978:	b917      	cbnz	r7, 8000980 <ADC_Conv_complete+0x104>
			sigsend = 1; // the real trigger
 800097a:	2301      	movs	r3, #1
 800097c:	f8cb 3000 	str.w	r3, [fp]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000980:	f5b6 7f36 	cmp.w	r6, #728	; 0x2d8
 8000984:	d1c6      	bne.n	8000914 <ADC_Conv_complete+0x98>
 8000986:	9b04      	ldr	r3, [sp, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d15c      	bne.n	8000a46 <ADC_Conv_complete+0x1ca>
 800098c:	4d39      	ldr	r5, [pc, #228]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 800098e:	4938      	ldr	r1, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 8000990:	602c      	str	r4, [r5, #0]
 8000992:	4d3b      	ldr	r5, [pc, #236]	; (8000a80 <ADC_Conv_complete+0x204>)
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <ADC_Conv_complete+0x20c>)
 8000996:	f8c1 e000 	str.w	lr, [r1]
 800099a:	602a      	str	r2, [r5, #0]
 800099c:	493b      	ldr	r1, [pc, #236]	; (8000a8c <ADC_Conv_complete+0x210>)
 800099e:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <ADC_Conv_complete+0x200>)
	if (sigsend) {
 80009a0:	f8db 4000 	ldr.w	r4, [fp]
		lastmeanwindiff = abs(meanwindiff);
 80009a4:	f8a3 8000 	strh.w	r8, [r3]
 80009a8:	8010      	strh	r0, [r2, #0]
 80009aa:	680b      	ldr	r3, [r1, #0]
	if (sigsend) {
 80009ac:	b334      	cbz	r4, 80009fc <ADC_Conv_complete+0x180>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d02b      	beq.n	8000a0a <ADC_Conv_complete+0x18e>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b2:	4c2b      	ldr	r4, [pc, #172]	; (8000a60 <ADC_Conv_complete+0x1e4>)
		sigprev = 1;	// remember this trigger for next packet
 80009b4:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009b6:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009ba:	6008      	str	r0, [r1, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009bc:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009be:	4403      	add	r3, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	6011      	str	r1, [r2, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009c4:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <ADC_Conv_complete+0x218>)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	d10b      	bne.n	80009ea <ADC_Conv_complete+0x16e>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d2:	4c27      	ldr	r4, [pc, #156]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		adcbgbaseacc = 0;
 80009d4:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009d6:	4830      	ldr	r0, [pc, #192]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d8:	6823      	ldr	r3, [r4, #0]
		samplecnt = 0;
 80009da:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	08db      	lsrs	r3, r3, #3
		adcbgbaseacc = 0;
 80009de:	6021      	str	r1, [r4, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009e0:	fba0 2303 	umull	r2, r3, r0, r3
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009e6:	0b9b      	lsrs	r3, r3, #14
 80009e8:	6013      	str	r3, [r2, #0]
	if (xTaskToNotify == NULL) {
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	b322      	cbz	r2, 8000a3a <ADC_Conv_complete+0x1be>
	} else if (sigsend) {
 80009f0:	f8db 2000 	ldr.w	r2, [fp]
 80009f4:	b972      	cbnz	r2, 8000a14 <ADC_Conv_complete+0x198>
}
 80009f6:	b007      	add	sp, #28
 80009f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 80009fc:	b113      	cbz	r3, 8000a04 <ADC_Conv_complete+0x188>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <ADC_Conv_complete+0x228>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
		sigprev = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	600b      	str	r3, [r1, #0]
 8000a08:	e7dc      	b.n	80009c4 <ADC_Conv_complete+0x148>
			++adcbatchid; // start a new adc batch number
 8000a0a:	9b05      	ldr	r3, [sp, #20]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <ADC_Conv_complete+0x1e0>)
 8000a0e:	3301      	adds	r3, #1
 8000a10:	7013      	strb	r3, [r2, #0]
 8000a12:	e7ce      	b.n	80009b2 <ADC_Conv_complete+0x136>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a14:	4c24      	ldr	r4, [pc, #144]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f011 fc47 	bl	80122ac <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0e8      	beq.n	80009f6 <ADC_Conv_complete+0x17a>
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
}
 8000a34:	b007      	add	sp, #28
 8000a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <ADC_Conv_complete+0x234>)
}
 8000a3c:	b007      	add	sp, #28
 8000a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a42:	f01f be31 	b.w	80206a8 <puts>
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ADC_Conv_complete+0x208>)
 8000a48:	9901      	ldr	r1, [sp, #4]
 8000a4a:	6019      	str	r1, [r3, #0]
 8000a4c:	e79e      	b.n	800098c <ADC_Conv_complete+0x110>
 8000a4e:	bf00      	nop
 8000a50:	200006b0 	.word	0x200006b0
 8000a54:	20022814 	.word	0x20022814
 8000a58:	20022828 	.word	0x20022828
 8000a5c:	200006a4 	.word	0x200006a4
 8000a60:	20022778 	.word	0x20022778
 8000a64:	200006ac 	.word	0x200006ac
 8000a68:	20000710 	.word	0x20000710
 8000a6c:	20000002 	.word	0x20000002
 8000a70:	200006a8 	.word	0x200006a8
 8000a74:	200007a8 	.word	0x200007a8
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000708 	.word	0x20000708
 8000a80:	20000724 	.word	0x20000724
 8000a84:	2000070c 	.word	0x2000070c
 8000a88:	200006c0 	.word	0x200006c0
 8000a8c:	2000071c 	.word	0x2000071c
 8000a90:	20000704 	.word	0x20000704
 8000a94:	20000714 	.word	0x20000714
 8000a98:	16816817 	.word	0x16816817
 8000a9c:	200006b4 	.word	0x200006b4
 8000aa0:	200007b0 	.word	0x200007b0
 8000aa4:	20000718 	.word	0x20000718
 8000aa8:	200007ac 	.word	0x200007ac
 8000aac:	e000ed04 	.word	0xe000ed04
 8000ab0:	080244c8 	.word	0x080244c8
 8000ab4:	20000720 	.word	0x20000720
 8000ab8:	200006c4 	.word	0x200006c4
 8000abc:	20000728 	.word	0x20000728

08000ac0 <startadc>:

void startadc() {
 8000ac0:	b538      	push	{r3, r4, r5, lr}
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
	statuspkt.adcpktssent = 0;
 8000ac2:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <startadc+0xb4>)
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <startadc+0xb8>)

	printf("Starting ADC DMA\n");
 8000ac8:	482c      	ldr	r0, [pc, #176]	; (8000b7c <startadc+0xbc>)
	statuspkt.clktrim = 108000000;
 8000aca:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000acc:	4c2c      	ldr	r4, [pc, #176]	; (8000b80 <startadc+0xc0>)
	statuspkt.adcpktssent = 0;
 8000ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad2:	f01f fde9 	bl	80206a8 <puts>
	osDelay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f00f fea8 	bl	801082c <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000adc:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae0:	f012 f8c0 	bl	8012c64 <pvPortMalloc>
 8000ae4:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d03f      	beq.n	8000b6a <startadc+0xaa>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aea:	0783      	lsls	r3, r0, #30
 8000aec:	d003      	beq.n	8000af6 <startadc+0x36>
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000aee:	4825      	ldr	r0, [pc, #148]	; (8000b84 <startadc+0xc4>)
 8000af0:	f01f fdda 	bl	80206a8 <puts>
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	1f03      	subs	r3, r0, #4
 8000af8:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000afc:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000b00:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d1fb      	bne.n	8000b00 <startadc+0x40>
 8000b08:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b0c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b10:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d1fb      	bne.n	8000b10 <startadc+0x50>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0210 	add.w	r2, r0, #16
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f500 64ba 	add.w	r4, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b20:	4819      	ldr	r0, [pc, #100]	; (8000b88 <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b22:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b26:	4d19      	ldr	r5, [pc, #100]	; (8000b8c <startadc+0xcc>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	4611      	mov	r1, r2
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b2a:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2c:	4622      	mov	r2, r4
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b30:	602c      	str	r4, [r5, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fdfb 	bl	800072c <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <startadc+0xd4>)
 8000b38:	7018      	strb	r0, [r3, #0]

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <startadc+0xd8>)
 8000b3c:	f004 fdca 	bl	80056d4 <HAL_ADC_Start>
 8000b40:	b110      	cbz	r0, 8000b48 <startadc+0x88>
		printf("ADC3 failed start\r\n");
 8000b42:	4816      	ldr	r0, [pc, #88]	; (8000b9c <startadc+0xdc>)
 8000b44:	f01f fdb0 	bl	80206a8 <puts>
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <startadc+0xe0>)
 8000b4a:	f004 fdc3 	bl	80056d4 <HAL_ADC_Start>
 8000b4e:	b110      	cbz	r0, 8000b56 <startadc+0x96>
		printf("ADC2 failed start\r\n");
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <startadc+0xe4>)
 8000b52:	f01f fda9 	bl	80206a8 <puts>
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <startadc+0xd0>)
 8000b58:	f004 fdbc 	bl	80056d4 <HAL_ADC_Start>
 8000b5c:	b900      	cbnz	r0, 8000b60 <startadc+0xa0>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
		printf("ADC1 failed start\r\n");
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <startadc+0xe8>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f01f bd9f 	b.w	80206a8 <puts>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <startadc+0xec>)
 8000b6c:	f01f fd9c 	bl	80206a8 <puts>
 8000b70:	e7fe      	b.n	8000b70 <startadc+0xb0>
 8000b72:	bf00      	nop
 8000b74:	20022778 	.word	0x20022778
 8000b78:	066ff300 	.word	0x066ff300
 8000b7c:	0802450c 	.word	0x0802450c
 8000b80:	20022828 	.word	0x20022828
 8000b84:	08024548 	.word	0x08024548
 8000b88:	2002282c 	.word	0x2002282c
 8000b8c:	20022820 	.word	0x20022820
 8000b90:	20022dd0 	.word	0x20022dd0
 8000b94:	20022830 	.word	0x20022830
 8000b98:	20022e18 	.word	0x20022e18
 8000b9c:	08024580 	.word	0x08024580
 8000ba0:	20022a8c 	.word	0x20022a8c
 8000ba4:	08024594 	.word	0x08024594
 8000ba8:	080245a8 	.word	0x080245a8
 8000bac:	08024520 	.word	0x08024520

08000bb0 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <vApplicationMallocFailedHook>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bbc:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc2:	4d03      	ldr	r5, [pc, #12]	; (8000bd0 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc4:	4c03      	ldr	r4, [pc, #12]	; (8000bd4 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bc6:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc8:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bca:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bcc:	bc30      	pop	{r4, r5}
 8000bce:	4770      	bx	lr
 8000bd0:	20000bb4 	.word	0x20000bb4
 8000bd4:	200007b4 	.word	0x200007b4

08000bd8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bd8:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bde:	4d03      	ldr	r5, [pc, #12]	; (8000bec <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be0:	4c03      	ldr	r4, [pc, #12]	; (8000bf0 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be2:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be4:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000be8:	bc30      	pop	{r4, r5}
 8000bea:	4770      	bx	lr
 8000bec:	20001408 	.word	0x20001408
 8000bf0:	20000c08 	.word	0x20000c08

08000bf4 <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7483      	strb	r3, [r0, #18]

	return (ERR_OK);
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	4770      	bx	lr

08000bfc <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000bfc:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c04:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c06:	b083      	sub	sp, #12
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460e      	mov	r6, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c0c:	4617      	mov	r7, r2
 8000c0e:	b102      	cbz	r2, 8000c12 <hc_recv+0x16>
 8000c10:	bb9b      	cbnz	r3, 8000c7a <hc_recv+0x7e>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c12:	bb47      	cbnz	r7, 8000c66 <hc_recv+0x6a>
 8000c14:	b33b      	cbz	r3, 8000c66 <hc_recv+0x6a>
		for (i = 0; i < state->Len; i++) {
 8000c16:	8a23      	ldrh	r3, [r4, #16]
 8000c18:	6967      	ldr	r7, [r4, #20]
 8000c1a:	f894 8000 	ldrb.w	r8, [r4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8095 	beq.w	8000d4e <hc_recv+0x152>
 8000c24:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8000c28:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2a:	2504      	movs	r5, #4
			if (errormsg == GEN_ERROR) {
 8000c2c:	2d04      	cmp	r5, #4
 8000c2e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8000c32:	f102 0101 	add.w	r1, r2, #1
 8000c36:	d052      	beq.n	8000cde <hc_recv+0xe2>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c38:	280d      	cmp	r0, #13
 8000c3a:	d018      	beq.n	8000c6e <hc_recv+0x72>
 8000c3c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	dcf4      	bgt.n	8000c2c <hc_recv+0x30>
	char *page = NULL;
 8000c42:	f04f 0a00 	mov.w	sl, #0
		if (errormsg == OK) {
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d163      	bne.n	8000d12 <hc_recv+0x116>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c4a:	4652      	mov	r2, sl
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4640      	mov	r0, r8
 8000c50:	47b8      	blx	r7
	if (pcb != NULL) {
 8000c52:	b116      	cbz	r6, 8000c5a <hc_recv+0x5e>
		tcp_close(pcb);
 8000c54:	4630      	mov	r0, r6
 8000c56:	f016 fff5 	bl	8017c44 <tcp_close>
		free(state->RecvData);
 8000c5a:	68e0      	ldr	r0, [r4, #12]
 8000c5c:	f01e fcd0 	bl	801f600 <free>
		free(state);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f01e fccd 	bl	801f600 <free>
}
 8000c66:	2000      	movs	r0, #0
 8000c68:	b003      	add	sp, #12
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c6e:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000c72:	280a      	cmp	r0, #10
 8000c74:	d045      	beq.n	8000d02 <hc_recv+0x106>
 8000c76:	1c4a      	adds	r2, r1, #1
 8000c78:	e7e1      	b.n	8000c3e <hc_recv+0x42>
		tcp_recved(pcb, p->tot_len);
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	8911      	ldrh	r1, [r2, #8]
 8000c7e:	f016 f8ed 	bl	8016e5c <tcp_recved>
 8000c82:	463d      	mov	r5, r7
 8000c84:	8a21      	ldrh	r1, [r4, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000c86:	2600      	movs	r6, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000c88:	896b      	ldrh	r3, [r5, #10]
 8000c8a:	68e0      	ldr	r0, [r4, #12]
 8000c8c:	4419      	add	r1, r3
 8000c8e:	3101      	adds	r1, #1
 8000c90:	f01f fd46 	bl	8020720 <realloc>
 8000c94:	60e0      	str	r0, [r4, #12]
			if (state->RecvData == NULL) {
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d04a      	beq.n	8000d30 <hc_recv+0x134>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000c9a:	8a23      	ldrh	r3, [r4, #16]
 8000c9c:	896a      	ldrh	r2, [r5, #10]
 8000c9e:	6869      	ldr	r1, [r5, #4]
 8000ca0:	4418      	add	r0, r3
 8000ca2:	f020 fc07 	bl	80214b4 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ca6:	8969      	ldrh	r1, [r5, #10]
 8000ca8:	68e3      	ldr	r3, [r4, #12]
 8000caa:	8a22      	ldrh	r2, [r4, #16]
 8000cac:	440b      	add	r3, r1
 8000cae:	549e      	strb	r6, [r3, r2]
			state->Len += temp_p->len;
 8000cb0:	896b      	ldrh	r3, [r5, #10]
 8000cb2:	8a21      	ldrh	r1, [r4, #16]
			temp_p = temp_p->next;
 8000cb4:	682d      	ldr	r5, [r5, #0]
			state->Len += temp_p->len;
 8000cb6:	4419      	add	r1, r3
 8000cb8:	b289      	uxth	r1, r1
 8000cba:	8221      	strh	r1, [r4, #16]
		while (temp_p != NULL) {
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d1e3      	bne.n	8000c88 <hc_recv+0x8c>
			temp_p = p->next;
 8000cc0:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f012 f9e6 	bl	8013094 <pbuf_free_callback>
		while (p != NULL) {
 8000cc8:	4627      	mov	r7, r4
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d0cb      	beq.n	8000c66 <hc_recv+0x6a>
			temp_p = p->next;
 8000cce:	683c      	ldr	r4, [r7, #0]
			pbuf_free_callback(p);
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f012 f9df 	bl	8013094 <pbuf_free_callback>
		while (p != NULL) {
 8000cd6:	4627      	mov	r7, r4
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d1f1      	bne.n	8000cc0 <hc_recv+0xc4>
 8000cdc:	e7c3      	b.n	8000c66 <hc_recv+0x6a>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cde:	2832      	cmp	r0, #50	; 0x32
 8000ce0:	d009      	beq.n	8000cf6 <hc_recv+0xfa>
				if (*(state->RecvData + i) == '\n')
 8000ce2:	280a      	cmp	r0, #10
 8000ce4:	d1aa      	bne.n	8000c3c <hc_recv+0x40>
		for (i = 0; i < state->Len; i++) {
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	dd12      	ble.n	8000d10 <hc_recv+0x114>
 8000cea:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cee:	460a      	mov	r2, r1
					errormsg = NOT_FOUND;
 8000cf0:	2503      	movs	r5, #3
		for (i = 0; i < state->Len; i++) {
 8000cf2:	3101      	adds	r1, #1
 8000cf4:	e7a0      	b.n	8000c38 <hc_recv+0x3c>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000cf6:	f819 0001 	ldrb.w	r0, [r9, r1]
 8000cfa:	2830      	cmp	r0, #48	; 0x30
 8000cfc:	d00f      	beq.n	8000d1e <hc_recv+0x122>
 8000cfe:	1c91      	adds	r1, r2, #2
 8000d00:	e7ef      	b.n	8000ce2 <hc_recv+0xe6>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d02:	eb09 0102 	add.w	r1, r9, r2
 8000d06:	7888      	ldrb	r0, [r1, #2]
 8000d08:	280d      	cmp	r0, #13
 8000d0a:	d01b      	beq.n	8000d44 <hc_recv+0x148>
 8000d0c:	3203      	adds	r2, #3
 8000d0e:	e796      	b.n	8000c3e <hc_recv+0x42>
					errormsg = NOT_FOUND;
 8000d10:	2503      	movs	r5, #3
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000d12:	2300      	movs	r3, #0
 8000d14:	4629      	mov	r1, r5
 8000d16:	4640      	mov	r0, r8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	47b8      	blx	r7
 8000d1c:	e799      	b.n	8000c52 <hc_recv+0x56>
						&& (*(state->RecvData + ++i) == '0'))
 8000d1e:	eb09 0002 	add.w	r0, r9, r2
 8000d22:	1cd1      	adds	r1, r2, #3
 8000d24:	7880      	ldrb	r0, [r0, #2]
 8000d26:	2830      	cmp	r0, #48	; 0x30
 8000d28:	d1db      	bne.n	8000ce2 <hc_recv+0xe6>
 8000d2a:	460a      	mov	r2, r1
					errormsg = OK;
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	e786      	b.n	8000c3e <hc_recv+0x42>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d30:	4603      	mov	r3, r0
 8000d32:	6965      	ldr	r5, [r4, #20]
 8000d34:	7820      	ldrb	r0, [r4, #0]
 8000d36:	2101      	movs	r1, #1
 8000d38:	461a      	mov	r2, r3
 8000d3a:	47a8      	blx	r5
}
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b003      	add	sp, #12
 8000d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000d44:	78c9      	ldrb	r1, [r1, #3]
 8000d46:	290a      	cmp	r1, #10
 8000d48:	d003      	beq.n	8000d52 <hc_recv+0x156>
 8000d4a:	3204      	adds	r2, #4
 8000d4c:	e777      	b.n	8000c3e <hc_recv+0x42>
	hc_errormsg errormsg = GEN_ERROR;
 8000d4e:	2504      	movs	r5, #4
 8000d50:	e7df      	b.n	8000d12 <hc_recv+0x116>
					i++;
 8000d52:	3204      	adds	r2, #4
 8000d54:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000d56:	4491      	add	r9, r2
 8000d58:	4648      	mov	r0, r9
 8000d5a:	f7ff fa7b 	bl	8000254 <strlen>
 8000d5e:	4683      	mov	fp, r0
 8000d60:	f01e fc46 	bl	801f5f0 <malloc>
					strcpy(page, state->RecvData + i);
 8000d64:	4649      	mov	r1, r9
 8000d66:	f10b 0201 	add.w	r2, fp, #1
					page = malloc(strlen(state->RecvData + i));
 8000d6a:	4682      	mov	sl, r0
					strcpy(page, state->RecvData + i);
 8000d6c:	f01e fc71 	bl	801f652 <memcpy>
					break;
 8000d70:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f43f af69 	beq.w	8000c4a <hc_recv+0x4e>
 8000d78:	e7cb      	b.n	8000d12 <hc_recv+0x116>
 8000d7a:	bf00      	nop

08000d7c <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7c:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d7e:	b570      	push	{r4, r5, r6, lr}
 8000d80:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d82:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d84:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d86:	6946      	ldr	r6, [r0, #20]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	7800      	ldrb	r0, [r0, #0]
 8000d8c:	47b0      	blx	r6
	free(state->RecvData);
 8000d8e:	68e0      	ldr	r0, [r4, #12]
 8000d90:	f01e fc36 	bl	801f600 <free>
	free(state->PostVars);
 8000d94:	68a0      	ldr	r0, [r4, #8]
 8000d96:	f01e fc33 	bl	801f600 <free>
	free(state->Page);
 8000d9a:	6860      	ldr	r0, [r4, #4]
 8000d9c:	f01e fc30 	bl	801f600 <free>
	free(state);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f01e fc2d 	bl	801f600 <free>
	printf("hc_error: err=%d\n", err);
 8000da6:	4629      	mov	r1, r5
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <hc_error+0x38>)
}
 8000daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000dae:	f01f bbf3 	b.w	8020598 <iprintf>
 8000db2:	bf00      	nop
 8000db4:	08024638 	.word	0x08024638

08000db8 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db8:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000dba:	7c83      	ldrb	r3, [r0, #18]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000dc0:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dc2:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dc4:	d909      	bls.n	8000dda <hc_poll+0x22>
 8000dc6:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc8:	4608      	mov	r0, r1
 8000dca:	f016 fd25 	bl	8017818 <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dce:	2300      	movs	r3, #0
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	7820      	ldrb	r0, [r4, #0]
 8000dd8:	47a8      	blx	r5
}
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	b083      	sub	sp, #12
 8000de8:	460d      	mov	r5, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000dea:	b19a      	cbz	r2, 8000e14 <hc_connected+0x34>
	if (pcb != NULL) {
 8000dec:	b111      	cbz	r1, 8000df4 <hc_connected+0x14>
		tcp_close(pcb);
 8000dee:	4608      	mov	r0, r1
 8000df0:	f016 ff28 	bl	8017c44 <tcp_close>
		hc_clearpcb(pcb);

		// Call return function
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	7820      	ldrb	r0, [r4, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	6965      	ldr	r5, [r4, #20]
 8000dfe:	47a8      	blx	r5

		// Free wc state
		free(state->RecvData);
 8000e00:	68e0      	ldr	r0, [r4, #12]
 8000e02:	f01e fbfd 	bl	801f600 <free>
		free(state);
 8000e06:	4620      	mov	r0, r4
 8000e08:	f01e fbfa 	bl	801f600 <free>
	free(headers);
	free(state->PostVars);			// postvars are send, so we don't need them anymore
	free(state->Page);		    	        // page is requested, so we don't need it anymore

	return (ERR_OK);
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	b003      	add	sp, #12
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state->PostVars == NULL) {
 8000e14:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 8000e18:	4640      	mov	r0, r8
 8000e1a:	f7ff fa1b 	bl	8000254 <strlen>
 8000e1e:	4606      	mov	r6, r0
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d039      	beq.n	8000e98 <hc_connected+0xb8>
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e24:	4638      	mov	r0, r7
 8000e26:	f7ff fa15 	bl	8000254 <strlen>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	f106 0065 	add.w	r0, r6, #101	; 0x65
 8000e30:	4448      	add	r0, r9
 8000e32:	f01e fbdd 	bl	801f5f0 <malloc>
		sprintf(headers,
 8000e36:	464b      	mov	r3, r9
 8000e38:	9700      	str	r7, [sp, #0]
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	491b      	ldr	r1, [pc, #108]	; (8000eac <hc_connected+0xcc>)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e3e:	4606      	mov	r6, r0
		sprintf(headers,
 8000e40:	f01f fd02 	bl	8020848 <siprintf>
	tcp_recv(pcb, hc_recv);
 8000e44:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <hc_connected+0xd0>)
 8000e46:	4628      	mov	r0, r5
 8000e48:	f016 f89c 	bl	8016f84 <tcp_recv>
	tcp_err(pcb, hc_error);
 8000e4c:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <hc_connected+0xd4>)
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f016 f8d0 	bl	8016ff4 <tcp_err>
	tcp_poll(pcb, hc_poll, 10);
 8000e54:	220a      	movs	r2, #10
 8000e56:	4918      	ldr	r1, [pc, #96]	; (8000eb8 <hc_connected+0xd8>)
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f016 f8ed 	bl	8017038 <tcp_poll>
	tcp_sent(pcb, hc_sent);
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <hc_connected+0xdc>)
 8000e60:	4628      	mov	r0, r5
 8000e62:	f016 f8ab 	bl	8016fbc <tcp_sent>
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e66:	4630      	mov	r0, r6
 8000e68:	f7ff f9f4 	bl	8000254 <strlen>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4631      	mov	r1, r6
 8000e72:	4628      	mov	r0, r5
 8000e74:	f018 ffb0 	bl	8019dd8 <tcp_write>
	tcp_output(pcb);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f019 fe07 	bl	801aa8c <tcp_output>
	free(headers);
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f01e fbbe 	bl	801f600 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e84:	68a0      	ldr	r0, [r4, #8]
 8000e86:	f01e fbbb 	bl	801f600 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e8a:	6860      	ldr	r0, [r4, #4]
 8000e8c:	f01e fbb8 	bl	801f600 <free>
}
 8000e90:	2000      	movs	r0, #0
 8000e92:	b003      	add	sp, #12
 8000e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f01e fba9 	bl	801f5f0 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	4642      	mov	r2, r8
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe0>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f01f fcd0 	bl	8020848 <siprintf>
 8000ea8:	e7cc      	b.n	8000e44 <hc_connected+0x64>
 8000eaa:	bf00      	nop
 8000eac:	080245d4 	.word	0x080245d4
 8000eb0:	08000bfd 	.word	0x08000bfd
 8000eb4:	08000d7d 	.word	0x08000d7d
 8000eb8:	08000db9 	.word	0x08000db9
 8000ebc:	08000bf5 	.word	0x08000bf5
 8000ec0:	080245bc 	.word	0x080245bc

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	460f      	mov	r7, r1
 8000ecc:	4616      	mov	r6, r2
 8000ece:	4699      	mov	r9, r3
 8000ed0:	9001      	str	r0, [sp, #4]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed2:	2018      	movs	r0, #24
 8000ed4:	f01e fb8c 	bl	801f5f0 <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f016 fddd 	bl	8017a98 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d077      	beq.n	8000fd2 <hc_open+0x10e>
 8000ee2:	fab4 f184 	clz	r1, r4
 8000ee6:	0949      	lsrs	r1, r1, #5
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	d172      	bne.n	8000fd2 <hc_open+0x10e>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000eec:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8000ffc <hc_open+0x138>
 8000ef0:	4605      	mov	r5, r0
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e1      	str	r1, [r4, #12]
	num++;
 8000ef4:	f898 2000 	ldrb.w	r2, [r8]
	state->ConnectionTimeout = 0;
 8000ef8:	74a1      	strb	r1, [r4, #18]
	num++;
 8000efa:	3201      	adds	r2, #1
	state->Len = 0;
 8000efc:	8221      	strh	r1, [r4, #16]
	state->ReturnPage = returnpage;
 8000efe:	f8c4 9014 	str.w	r9, [r4, #20]
	num++;
 8000f02:	b2d3      	uxtb	r3, r2
 8000f04:	f888 3000 	strb.w	r3, [r8]
	state->Num = num;
 8000f08:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d05e      	beq.n	8000fcc <hc_open+0x108>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	3001      	adds	r0, #1
 8000f16:	f01e fb6b 	bl	801f5f0 <malloc>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff f998 	bl	8000254 <strlen>
 8000f24:	f100 0a01 	add.w	sl, r0, #1
 8000f28:	4650      	mov	r0, sl
 8000f2a:	f01e fb61 	bl	801f5f0 <malloc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d037      	beq.n	8000fa6 <hc_open+0xe2>
 8000f36:	f1b9 0f00 	cmp.w	r9, #0
 8000f3a:	d032      	beq.n	8000fa2 <hc_open+0xde>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f3c:	4652      	mov	r2, sl
 8000f3e:	4639      	mov	r1, r7
 8000f40:	f01e fb87 	bl	801f652 <memcpy>
	if (PostVars != NULL)
 8000f44:	b356      	cbz	r6, 8000f9c <hc_open+0xd8>
		strcpy(state->PostVars, PostVars);
 8000f46:	4631      	mov	r1, r6
 8000f48:	4648      	mov	r0, r9
 8000f4a:	f01f fd22 	bl	8020992 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f4e:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f52:	4f25      	ldr	r7, [pc, #148]	; (8000fe8 <hc_open+0x124>)
 8000f54:	e000      	b.n	8000f58 <hc_open+0x94>
		// Local port in use, use port+1
		port++;
 8000f56:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f58:	4632      	mov	r2, r6
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	4628      	mov	r0, r5
		port++;
 8000f5e:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f60:	f015 fe72 	bl	8016c48 <tcp_bind>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1f6      	bne.n	8000f56 <hc_open+0x92>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f68:	4621      	mov	r1, r4
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f016 f806 	bl	8016f7c <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <hc_open+0x128>)
 8000f72:	4628      	mov	r0, r5
 8000f74:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f78:	a901      	add	r1, sp, #4
 8000f7a:	f016 ff83 	bl	8017e84 <tcp_connect>
 8000f7e:	b240      	sxtb	r0, r0
 8000f80:	f88d 000f 	strb.w	r0, [sp, #15]

	if (err != ERR_OK) {
 8000f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000f88:	bb3b      	cbnz	r3, 8000fda <hc_open+0x116>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8a:	f898 0000 	ldrb.w	r0, [r8]
}
 8000f8e:	b004      	add	sp, #16
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strcpy(state->Page, Page);
 8000f94:	4652      	mov	r2, sl
 8000f96:	4639      	mov	r1, r7
 8000f98:	f01e fb5b 	bl	801f652 <memcpy>
		state->PostVars = NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
 8000fa0:	e7d5      	b.n	8000f4e <hc_open+0x8a>
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d0f6      	beq.n	8000f94 <hc_open+0xd0>
		free(state->Page);
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f01e fb2a 	bl	801f600 <free>
		free(state->PostVars);
 8000fac:	4648      	mov	r0, r9
 8000fae:	f01e fb27 	bl	801f600 <free>
		free(state);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f01e fb24 	bl	801f600 <free>
		tcp_close(pcb);
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f016 fe43 	bl	8017c44 <tcp_close>
		printf("httpclient: no pcb memory\n");
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <hc_open+0x12c>)
 8000fc0:	f01f fb72 	bl	80206a8 <puts>
		return 0;
 8000fc4:	2000      	movs	r0, #0
}
 8000fc6:	b004      	add	sp, #16
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8000fd0:	e7a5      	b.n	8000f1e <hc_open+0x5a>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <hc_open+0x130>)
 8000fd4:	f01f fb68 	bl	80206a8 <puts>
 8000fd8:	e7fe      	b.n	8000fd8 <hc_open+0x114>
		printf("hc_open failed with %d\n", err);
 8000fda:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <hc_open+0x134>)
 8000fe0:	b249      	sxtb	r1, r1
 8000fe2:	f01f fad9 	bl	8020598 <iprintf>
 8000fe6:	e7d0      	b.n	8000f8a <hc_open+0xc6>
 8000fe8:	0803f460 	.word	0x0803f460
 8000fec:	08000de1 	.word	0x08000de1
 8000ff0:	08024678 	.word	0x08024678
 8000ff4:	0802464c 	.word	0x0802464c
 8000ff8:	08024694 	.word	0x08024694
 8000ffc:	2000145c 	.word	0x2000145c

08001000 <uart5_rxdone>:
}

// UART 5 Rx DMA complete
void uart5_rxdone() {

	printf("UART5 Rx Complete\n");
 8001000:	4801      	ldr	r0, [pc, #4]	; (8001008 <uart5_rxdone+0x8>)
 8001002:	f01f bb51 	b.w	80206a8 <puts>
 8001006:	bf00      	nop
 8001008:	08024938 	.word	0x08024938

0800100c <lcd_init>:
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_init() {
 800100c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	lcdrxoutidx = 0;		// consumer index
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <lcd_init+0x20>)
 8001010:	2400      	movs	r4, #0
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	4906      	ldr	r1, [pc, #24]	; (8001030 <lcd_init+0x24>)
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <lcd_init+0x28>)
	lcdrxoutidx = 0;		// consumer index
 8001018:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800101a:	f00c fdf3 	bl	800dc04 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 800101e:	b900      	cbnz	r0, 8001022 <lcd_init+0x16>
		printf("Err HAL_UART_Receive_DMA uart5\n");
		return (stat);
	}
}
 8001020:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_DMA uart5\n");
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <lcd_init+0x2c>)
}
 8001024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Err HAL_UART_Receive_DMA uart5\n");
 8001028:	f01f bb3e 	b.w	80206a8 <puts>
 800102c:	2000158c 	.word	0x2000158c
 8001030:	20001460 	.word	0x20001460
 8001034:	20022d50 	.word	0x20022d50
 8001038:	080247d8 	.word	0x080247d8

0800103c <lcd_newstate>:

// request a new state in the LCD state machine
int lcd_newstate(int newstate) {
 800103c:	b508      	push	{r3, lr}

	if (lcd_state == LCD_IDLE) {		// anything is allowed
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <lcd_newstate+0x28>)
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	2901      	cmp	r1, #1
 8001044:	d00c      	beq.n	8001060 <lcd_newstate+0x24>
		lcd_state = newstate;
		return (newstate);
	}

	if ((lcd_state == LCD_SENDCMD) && (newstate == LCD_IDLE)) {		// sending a var doesn't get ack'd
 8001046:	2902      	cmp	r1, #2
 8001048:	d000      	beq.n	800104c <lcd_newstate+0x10>
	if ((lcd_state == LCD_SENDCMD) && (newstate == LCD_WAITRESP)) {

		printf("lcd_newstate: refused change from %d to %d\n", lcd_state, newstate);
		return (0);	// 0 means no state changed
	}
}
 800104a:	bd08      	pop	{r3, pc}
	if ((lcd_state == LCD_SENDCMD) && (newstate == LCD_IDLE)) {		// sending a var doesn't get ack'd
 800104c:	2801      	cmp	r0, #1
 800104e:	d007      	beq.n	8001060 <lcd_newstate+0x24>
	if ((lcd_state == LCD_SENDCMD) && (newstate == LCD_WAITRESP)) {
 8001050:	2803      	cmp	r0, #3
 8001052:	d1fa      	bne.n	800104a <lcd_newstate+0xe>
 8001054:	4602      	mov	r2, r0
		printf("lcd_newstate: refused change from %d to %d\n", lcd_state, newstate);
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <lcd_newstate+0x2c>)
 8001058:	f01f fa9e 	bl	8020598 <iprintf>
		return (0);	// 0 means no state changed
 800105c:	2000      	movs	r0, #0
}
 800105e:	bd08      	pop	{r3, pc}
		lcd_state = LCD_IDLE;
 8001060:	6018      	str	r0, [r3, #0]
}
 8001062:	bd08      	pop	{r3, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	080247f8 	.word	0x080247f8

0800106c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {

	if (huart->Instance == UART5)
		;
//		printf("UART5 Tx Complete\n");
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <writelcdvar>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// send a var string to the LCD (len max 255)
// terminate with three 0xff's
int writelcdvar(char *str) {
 8001070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (lcd_state == LCD_IDLE) {		// anything is allowed
 8001074:	4f22      	ldr	r7, [pc, #136]	; (8001100 <writelcdvar+0x90>)
int writelcdvar(char *str) {
 8001076:	b082      	sub	sp, #8
	if (lcd_state == LCD_IDLE) {		// anything is allowed
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <writelcdvar+0x12>
		lcd_state = newstate;
 800107e:	2302      	movs	r3, #2
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	1e45      	subs	r5, r0, #1
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 8001084:	4e1f      	ldr	r6, [pc, #124]	; (8001104 <writelcdvar+0x94>)
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 8001086:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001108 <writelcdvar+0x98>
	while (str[i] != '\0') {
 800108a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800108e:	ac02      	add	r4, sp, #8
	osDelay(4);		// zzz
 8001090:	2004      	movs	r0, #4
	while (str[i] != '\0') {
 8001092:	b19b      	cbz	r3, 80010bc <writelcdvar+0x4c>
 8001094:	f804 3d02 	strb.w	r3, [r4, #-2]!
	osDelay(4);		// zzz
 8001098:	f00f fbc8 	bl	801082c <osDelay>
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 800109c:	4621      	mov	r1, r4
 800109e:	2201      	movs	r2, #1
 80010a0:	4630      	mov	r0, r6
 80010a2:	f00c fd5d 	bl	800db60 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d0ef      	beq.n	800108a <writelcdvar+0x1a>
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 80010aa:	4640      	mov	r0, r8
 80010ac:	ac02      	add	r4, sp, #8
 80010ae:	f01f fafb 	bl	80206a8 <puts>
	while (str[i] != '\0') {
 80010b2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	osDelay(4);		// zzz
 80010b6:	2004      	movs	r0, #4
	while (str[i] != '\0') {
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1eb      	bne.n	8001094 <writelcdvar+0x24>
 80010bc:	2403      	movs	r4, #3
 80010be:	26ff      	movs	r6, #255	; 0xff
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 80010c0:	4d10      	ldr	r5, [pc, #64]	; (8001104 <writelcdvar+0x94>)
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 80010c2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001108 <writelcdvar+0x98>
	osDelay(4);		// zzz
 80010c6:	2004      	movs	r0, #4
 80010c8:	f88d 6007 	strb.w	r6, [sp, #7]
 80010cc:	f00f fbae 	bl	801082c <osDelay>
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f10d 0107 	add.w	r1, sp, #7
 80010d6:	4628      	mov	r0, r5
 80010d8:	f00c fd42 	bl	800db60 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 80010dc:	b110      	cbz	r0, 80010e4 <writelcdvar+0x74>
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 80010de:	4640      	mov	r0, r8
 80010e0:	f01f fae2 	bl	80206a8 <puts>
 80010e4:	1e63      	subs	r3, r4, #1
	char i = 0;
	volatile int result;

	if (lcd_newstate(LCD_SENDCMD) == LCD_SENDCMD) {
		lcd_puts(str);
		for (i = 0; i < 3; i++) {
 80010e6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80010ea:	d1ec      	bne.n	80010c6 <writelcdvar+0x56>
	if (lcd_state == LCD_IDLE) {		// anything is allowed
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d101      	bne.n	80010f6 <writelcdvar+0x86>
		lcd_state = LCD_IDLE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	603b      	str	r3, [r7, #0]
			return (0);
		}
		printf("writelcdvar: LCD_SENDVAR failed\n");
	}
	return (-1);
}
 80010f6:	2000      	movs	r0, #0
 80010f8:	b002      	add	sp, #8
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20022d50 	.word	0x20022d50
 8001108:	08024824 	.word	0x08024824

0800110c <writelcdcmd>:
	if (lcd_state == LCD_IDLE) {		// anything is allowed
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <writelcdcmd+0x94>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2a01      	cmp	r2, #1
	return (lcdstatus);
}

// send a cmd string to the LCD (len max 255)
// terminate with three 0xff's
int writelcdcmd(char *str) {
 8001112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001114:	b083      	sub	sp, #12
	if (lcd_state == LCD_IDLE) {		// anything is allowed
 8001116:	d101      	bne.n	800111c <writelcdcmd+0x10>
		lcd_state = newstate;
 8001118:	2202      	movs	r2, #2
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	1e45      	subs	r5, r0, #1
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 800111e:	4e21      	ldr	r6, [pc, #132]	; (80011a4 <writelcdcmd+0x98>)
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 8001120:	4f21      	ldr	r7, [pc, #132]	; (80011a8 <writelcdcmd+0x9c>)
	while (str[i] != '\0') {
 8001122:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001126:	ac02      	add	r4, sp, #8
	osDelay(4);		// zzz
 8001128:	2004      	movs	r0, #4
	while (str[i] != '\0') {
 800112a:	b19b      	cbz	r3, 8001154 <writelcdcmd+0x48>
 800112c:	f804 3d02 	strb.w	r3, [r4, #-2]!
	osDelay(4);		// zzz
 8001130:	f00f fb7c 	bl	801082c <osDelay>
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 8001134:	4621      	mov	r1, r4
 8001136:	2201      	movs	r2, #1
 8001138:	4630      	mov	r0, r6
 800113a:	f00c fd11 	bl	800db60 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 800113e:	2800      	cmp	r0, #0
 8001140:	d0ef      	beq.n	8001122 <writelcdcmd+0x16>
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 8001142:	4638      	mov	r0, r7
 8001144:	ac02      	add	r4, sp, #8
 8001146:	f01f faaf 	bl	80206a8 <puts>
	while (str[i] != '\0') {
 800114a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	osDelay(4);		// zzz
 800114e:	2004      	movs	r0, #4
	while (str[i] != '\0') {
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1eb      	bne.n	800112c <writelcdcmd+0x20>
 8001154:	2403      	movs	r4, #3
 8001156:	26ff      	movs	r6, #255	; 0xff
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 8001158:	4d12      	ldr	r5, [pc, #72]	; (80011a4 <writelcdcmd+0x98>)
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 800115a:	4f13      	ldr	r7, [pc, #76]	; (80011a8 <writelcdcmd+0x9c>)
	osDelay(4);		// zzz
 800115c:	2004      	movs	r0, #4
 800115e:	f88d 6007 	strb.w	r6, [sp, #7]
 8001162:	f00f fb63 	bl	801082c <osDelay>
	stat = HAL_UART_Transmit_DMA(&huart5, &ch, 1);
 8001166:	2201      	movs	r2, #1
 8001168:	f10d 0107 	add.w	r1, sp, #7
 800116c:	4628      	mov	r0, r5
 800116e:	f00c fcf7 	bl	800db60 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8001172:	b110      	cbz	r0, 800117a <writelcdcmd+0x6e>
		printf("lcd_putc: Err HAL_UART_Transmoit_DMA uart5\n");
 8001174:	4638      	mov	r0, r7
 8001176:	f01f fa97 	bl	80206a8 <puts>
 800117a:	1e60      	subs	r0, r4, #1
	char i = 0;
	volatile int result;

	if (lcd_newstate(LCD_SENDCMD)) {
		lcd_puts(str);
		for (i = 0; i < 3; i++) {
 800117c:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8001180:	d1ec      	bne.n	800115c <writelcdcmd+0x50>
			lcd_putc(0xff);
		}
		if (lcd_newstate(LCD_WAITRESP) == LCD_WAITRESP) {		// we expect a response to a command
 8001182:	2003      	movs	r0, #3
 8001184:	f7ff ff5a 	bl	800103c <lcd_newstate>
 8001188:	2803      	cmp	r0, #3
 800118a:	d102      	bne.n	8001192 <writelcdcmd+0x86>
			return (0);
 800118c:	4620      	mov	r0, r4
		}
		printf("writelcdcmd: LCD_SENDCMD failed\n");
	}
	return (-1);
}
 800118e:	b003      	add	sp, #12
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("writelcdcmd: LCD_SENDCMD failed\n");
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <writelcdcmd+0xa0>)
 8001194:	f01f fa88 	bl	80206a8 <puts>
	return (-1);
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	e7f7      	b.n	800118e <writelcdcmd+0x82>
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20022d50 	.word	0x20022d50
 80011a8:	08024824 	.word	0x08024824
 80011ac:	0802494c 	.word	0x0802494c

080011b0 <setlcdtext>:
	}
	return (-1);
}

// send some text to a lcd text object
void setlcdtext(char id[], char string[]) {
 80011b0:	b500      	push	{lr}
 80011b2:	b093      	sub	sp, #76	; 0x4c
	char str[64];
	volatile int result;

	sprintf(str, "%s=\"%s\"", id, string);
 80011b4:	460b      	mov	r3, r1
 80011b6:	4602      	mov	r2, r0
 80011b8:	490a      	ldr	r1, [pc, #40]	; (80011e4 <setlcdtext+0x34>)
 80011ba:	a802      	add	r0, sp, #8
 80011bc:	f01f fb44 	bl	8020848 <siprintf>
	result = writelcdvar(str);
 80011c0:	a802      	add	r0, sp, #8
 80011c2:	f7ff ff55 	bl	8001070 <writelcdvar>
 80011c6:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 80011c8:	9b01      	ldr	r3, [sp, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	d003      	beq.n	80011d6 <setlcdtext+0x26>
		printf("setlcdtext: Cmd failed\n\r");
	}
	return (result);
 80011ce:	9b01      	ldr	r3, [sp, #4]
}
 80011d0:	b013      	add	sp, #76	; 0x4c
 80011d2:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdtext: Cmd failed\n\r");
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <setlcdtext+0x38>)
 80011d8:	f01f f9de 	bl	8020598 <iprintf>
	return (result);
 80011dc:	9b01      	ldr	r3, [sp, #4]
}
 80011de:	b013      	add	sp, #76	; 0x4c
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011e4:	08024914 	.word	0x08024914
 80011e8:	0802491c 	.word	0x0802491c

080011ec <getlcdpage>:

// request the current lcd page
// this is processed mostly by the ISR, this routine assumes success
// return -1 for error

int getlcdpage() {
 80011ec:	b500      	push	{lr}
	volatile int result;

	printf("getlcdpage:\n");
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <getlcdpage+0x30>)
int getlcdpage() {
 80011f0:	b083      	sub	sp, #12
	printf("getlcdpage:\n");
 80011f2:	f01f fa59 	bl	80206a8 <puts>

	result = writelcdcmd("sendme");
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <getlcdpage+0x34>)
 80011f8:	f7ff ff88 	bl	800110c <writelcdcmd>
 80011fc:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 80011fe:	9b01      	ldr	r3, [sp, #4]
 8001200:	3301      	adds	r3, #1
 8001202:	d003      	beq.n	800120c <getlcdpage+0x20>
		printf("getlcdpage: Cmd failed\n\r");
	}
	return (result);
 8001204:	9801      	ldr	r0, [sp, #4]
}
 8001206:	b003      	add	sp, #12
 8001208:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("getlcdpage: Cmd failed\n\r");
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <getlcdpage+0x38>)
 800120e:	f01f f9c3 	bl	8020598 <iprintf>
	return (result);
 8001212:	9801      	ldr	r0, [sp, #4]
}
 8001214:	b003      	add	sp, #12
 8001216:	f85d fb04 	ldr.w	pc, [sp], #4
 800121a:	bf00      	nop
 800121c:	080246ac 	.word	0x080246ac
 8001220:	080246b8 	.word	0x080246b8
 8001224:	080246c0 	.word	0x080246c0

08001228 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 800122c:	4a36      	ldr	r2, [pc, #216]	; (8001308 <isnexpkt+0xe0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 800122e:	b084      	sub	sp, #16
	if (lastidx != lcdrxoutidx) {		// something there
 8001230:	4f36      	ldr	r7, [pc, #216]	; (800130c <isnexpkt+0xe4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001232:	4605      	mov	r5, r0
	if (lastidx != lcdrxoutidx) {		// something there
 8001234:	6812      	ldr	r2, [r2, #0]
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001236:	460c      	mov	r4, r1
	if (lastidx != lcdrxoutidx) {		// something there
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	4293      	cmp	r3, r2
 800123c:	d051      	beq.n	80012e2 <isnexpkt+0xba>
		ch = lcdrxbuffer[lastidx];
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <isnexpkt+0xe8>)
	if (++index >= limit)
 8001240:	1c5a      	adds	r2, r3, #1
		rxtimeout = 100;
 8001242:	4e34      	ldr	r6, [pc, #208]	; (8001314 <isnexpkt+0xec>)
		ch = lcdrxbuffer[lastidx];
 8001244:	f811 8003 	ldrb.w	r8, [r1, r3]
		return (0);
 8001248:	2a80      	cmp	r2, #128	; 0x80
		rxtimeout = 100;
 800124a:	f04f 0164 	mov.w	r1, #100	; 0x64
	volatile unsigned char ch;

	rawchar = lcd_getc();
	if (rawchar >= 0) {
#if 1
		if ((rawchar >= '0') && (rawchar <= 'z'))
 800124e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
		return (0);
 8001252:	bfa8      	it	ge
 8001254:	2200      	movge	r2, #0
		rxtimeout = 100;
 8001256:	6031      	str	r1, [r6, #0]
		if ((rawchar >= '0') && (rawchar <= 'z'))
 8001258:	2b4a      	cmp	r3, #74	; 0x4a
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800125a:	603a      	str	r2, [r7, #0]
		if ((rawchar >= '0') && (rawchar <= 'z'))
 800125c:	d933      	bls.n	80012c6 <isnexpkt+0x9e>
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
 800125e:	4641      	mov	r1, r8
 8001260:	482d      	ldr	r0, [pc, #180]	; (8001318 <isnexpkt+0xf0>)
 8001262:	f01f f999 	bl	8020598 <iprintf>
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 8001266:	4f2d      	ldr	r7, [pc, #180]	; (800131c <isnexpkt+0xf4>)
		ch = rawchar & 0xff;
 8001268:	f88d 800f 	strb.w	r8, [sp, #15]
		buffer[i++] = ch;
 800126c:	783a      	ldrb	r2, [r7, #0]
 800126e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001272:	1c53      	adds	r3, r2, #1
		if (ch == 0xff) {
 8001274:	f89d 100f 	ldrb.w	r1, [sp, #15]
		buffer[i++] = ch;
 8001278:	54a8      	strb	r0, [r5, r2]
 800127a:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 800127c:	29ff      	cmp	r1, #255	; 0xff
		buffer[i++] = ch;
 800127e:	703b      	strb	r3, [r7, #0]
		if (ch == 0xff) {
 8001280:	d031      	beq.n	80012e6 <isnexpkt+0xbe>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001282:	f89d c00f 	ldrb.w	ip, [sp, #15]
			termcnt = 0;
 8001286:	2100      	movs	r1, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <isnexpkt+0xf8>)
			termcnt = 0;
 800128a:	4a26      	ldr	r2, [pc, #152]	; (8001324 <isnexpkt+0xfc>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 800128c:	f880 c000 	strb.w	ip, [r0]
			termcnt = 0;
 8001290:	7011      	strb	r1, [r2, #0]
		}

		if (i == size) { // overrun
 8001292:	42a3      	cmp	r3, r4
 8001294:	d102      	bne.n	800129c <isnexpkt+0x74>
			i = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	703b      	strb	r3, [r7, #0]
			termcnt = 0;
 800129a:	7013      	strb	r3, [r2, #0]
		}
	}
	if (rxtimeout > 0)
 800129c:	6833      	ldr	r3, [r6, #0]
 800129e:	b9c3      	cbnz	r3, 80012d2 <isnexpkt+0xaa>
		rxtimeout--;
	if (rxtimeout == 0) {
		termcnt = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <isnexpkt+0xfc>)
		for (i = 0; i < size; buffer[i++] = 0)
 80012a4:	4f1d      	ldr	r7, [pc, #116]	; (800131c <isnexpkt+0xf4>)
		termcnt = 0;
 80012a6:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 80012a8:	703b      	strb	r3, [r7, #0]
 80012aa:	b13c      	cbz	r4, 80012bc <isnexpkt+0x94>
 80012ac:	3c01      	subs	r4, #1
 80012ae:	1e6a      	subs	r2, r5, #1
 80012b0:	fa55 f484 	uxtab	r4, r5, r4
 80012b4:	f802 3f01 	strb.w	r3, [r2, #1]!
 80012b8:	42a2      	cmp	r2, r4
 80012ba:	d1fb      	bne.n	80012b4 <isnexpkt+0x8c>
			;
		i = 0;
 80012bc:	2300      	movs	r3, #0
		return (-1);
 80012be:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 80012c2:	703b      	strb	r3, [r7, #0]
		return (-1);
 80012c4:	e00a      	b.n	80012dc <isnexpkt+0xb4>
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
 80012c6:	4642      	mov	r2, r8
 80012c8:	4641      	mov	r1, r8
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <isnexpkt+0x100>)
 80012cc:	f01f f964 	bl	8020598 <iprintf>
 80012d0:	e7c9      	b.n	8001266 <isnexpkt+0x3e>
		rxtimeout--;
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6033      	str	r3, [r6, #0]
	if (rxtimeout == 0) {
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0e2      	beq.n	80012a0 <isnexpkt+0x78>
	}
	return (0);  // no char available
 80012da:	2000      	movs	r0, #0
}
 80012dc:	b004      	add	sp, #16
 80012de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e2:	4e0c      	ldr	r6, [pc, #48]	; (8001314 <isnexpkt+0xec>)
 80012e4:	e7da      	b.n	800129c <isnexpkt+0x74>
			termcnt++;
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <isnexpkt+0xfc>)
 80012e8:	7811      	ldrb	r1, [r2, #0]
 80012ea:	3101      	adds	r1, #1
 80012ec:	b2c9      	uxtb	r1, r1
			if (termcnt == 3) {
 80012ee:	2903      	cmp	r1, #3
			termcnt++;
 80012f0:	7011      	strb	r1, [r2, #0]
			if (termcnt == 3) {
 80012f2:	d1ce      	bne.n	8001292 <isnexpkt+0x6a>
				printf("isnexpkt: Found terminator\n");
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <isnexpkt+0x104>)
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	f01f f9d6 	bl	80206a8 <puts>
				i = 0;
 80012fc:	2300      	movs	r3, #0
				termcnt = 0;
 80012fe:	9a01      	ldr	r2, [sp, #4]
				index = i;
 8001300:	7838      	ldrb	r0, [r7, #0]
				termcnt = 0;
 8001302:	7013      	strb	r3, [r2, #0]
				i = 0;
 8001304:	703b      	strb	r3, [r7, #0]
				return (index);
 8001306:	e7e9      	b.n	80012dc <isnexpkt+0xb4>
 8001308:	2000158c 	.word	0x2000158c
 800130c:	20001504 	.word	0x20001504
 8001310:	2000150c 	.word	0x2000150c
 8001314:	20001594 	.word	0x20001594
 8001318:	080246f0 	.word	0x080246f0
 800131c:	20001500 	.word	0x20001500
 8001320:	20001593 	.word	0x20001593
 8001324:	20001598 	.word	0x20001598
 8001328:	080246dc 	.word	0x080246dc
 800132c:	08024700 	.word	0x08024700

08001330 <lcd_event_process>:

// Try to build an LCD RX Event packet
// returns: 0 nothing found (yet), > good event decodes, -1 error
int lcd_event_process(void) {
 8001330:	b570      	push	{r4, r5, r6, lr}
	static unsigned char eventbuffer[32];
	int i, result;

	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001332:	4c26      	ldr	r4, [pc, #152]	; (80013cc <lcd_event_process+0x9c>)
 8001334:	2120      	movs	r1, #32
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff ff76 	bl	8001228 <isnexpkt>
	if (result <= 0) {
 800133c:	1e05      	subs	r5, r0, #0
 800133e:	dd17      	ble.n	8001370 <lcd_event_process+0x40>
		return (result);		// 0 = nothing found, -1 = timeout
	} else // got a packet of something
	{

		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001340:	7821      	ldrb	r1, [r4, #0]
 8001342:	2923      	cmp	r1, #35	; 0x23
 8001344:	d916      	bls.n	8001374 <lcd_event_process+0x44>
			lcdstatus = eventbuffer[0];
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
				printf("lcd_event_process: LCD Sent Error status 0x%02x\n\r", eventbuffer[0]);
		} else  // this is either a touch event or a response to a query packet
		{
			switch (eventbuffer[0]) {
 8001346:	2965      	cmp	r1, #101	; 0x65
 8001348:	d031      	beq.n	80013ae <lcd_event_process+0x7e>
 800134a:	2966      	cmp	r1, #102	; 0x66
 800134c:	d020      	beq.n	8001390 <lcd_event_process+0x60>
				lcdpevent = 0xff;		// notify lcd page event happened
				pagenum = eventbuffer[1];
				printf("lcd_event_process: Got Page event, Page=%d\n", pagenum);
				break;
			default:
				printf("lcd_event_process: unknown response received\n");
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <lcd_event_process+0xa0>)
 8001350:	f01f f9aa 	bl	80206a8 <puts>
				i = 0;
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001354:	7821      	ldrb	r1, [r4, #0]
 8001356:	29ff      	cmp	r1, #255	; 0xff
 8001358:	d007      	beq.n	800136a <lcd_event_process+0x3a>
					printf(" 0x%02x", eventbuffer[i++]);
 800135a:	4e1e      	ldr	r6, [pc, #120]	; (80013d4 <lcd_event_process+0xa4>)
 800135c:	4630      	mov	r0, r6
 800135e:	f01f f91b 	bl	8020598 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001362:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001366:	29ff      	cmp	r1, #255	; 0xff
 8001368:	d1f8      	bne.n	800135c <lcd_event_process+0x2c>
				}
				printf("\n");
 800136a:	200a      	movs	r0, #10
 800136c:	f01f f92c 	bl	80205c8 <putchar>
				break;
			} // end case
		}
	}
}
 8001370:	4628      	mov	r0, r5
 8001372:	bd70      	pop	{r4, r5, r6, pc}
			lcdtouched = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	4c18      	ldr	r4, [pc, #96]	; (80013d8 <lcd_event_process+0xa8>)
			lcdpevent = 0;
 8001378:	4818      	ldr	r0, [pc, #96]	; (80013dc <lcd_event_process+0xac>)
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
 800137a:	2901      	cmp	r1, #1
			lcdstatus = eventbuffer[0];
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <lcd_event_process+0xb0>)
			lcdtouched = 0;
 800137e:	7023      	strb	r3, [r4, #0]
			lcdpevent = 0;
 8001380:	7003      	strb	r3, [r0, #0]
			lcdstatus = eventbuffer[0];
 8001382:	7011      	strb	r1, [r2, #0]
			if (eventbuffer[0] != NEX_SOK)		// returned status from instruction was not OK
 8001384:	d0f4      	beq.n	8001370 <lcd_event_process+0x40>
				printf("lcd_event_process: LCD Sent Error status 0x%02x\n\r", eventbuffer[0]);
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <lcd_event_process+0xb4>)
 8001388:	f01f f906 	bl	8020598 <iprintf>
}
 800138c:	4628      	mov	r0, r5
 800138e:	bd70      	pop	{r4, r5, r6, pc}
				pagenum = eventbuffer[1];
 8001390:	7862      	ldrb	r2, [r4, #1]
				lcdtouched = 0;
 8001392:	2400      	movs	r4, #0
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <lcd_event_process+0xa8>)
				lcdpevent = 0xff;		// notify lcd page event happened
 8001396:	20ff      	movs	r0, #255	; 0xff
 8001398:	4910      	ldr	r1, [pc, #64]	; (80013dc <lcd_event_process+0xac>)
				lcdtouched = 0;
 800139a:	701c      	strb	r4, [r3, #0]
				pagenum = eventbuffer[1];
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <lcd_event_process+0xb8>)
				lcdpevent = 0xff;		// notify lcd page event happened
 800139e:	7008      	strb	r0, [r1, #0]
				pagenum = eventbuffer[1];
 80013a0:	701a      	strb	r2, [r3, #0]
				printf("lcd_event_process: Got Page event, Page=%d\n", pagenum);
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <lcd_event_process+0xbc>)
 80013a4:	7819      	ldrb	r1, [r3, #0]
 80013a6:	f01f f8f7 	bl	8020598 <iprintf>
}
 80013aa:	4628      	mov	r0, r5
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
				printf("lcd_event_process: Got Touch event\n");
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <lcd_event_process+0xc0>)
				lcdtouched = 0xff;		// its a touch
 80013b0:	24ff      	movs	r4, #255	; 0xff
				printf("lcd_event_process: Got Touch event\n");
 80013b2:	f01f f979 	bl	80206a8 <puts>
				lcdtouched = 0xff;		// its a touch
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <lcd_event_process+0xa8>)
				dimtimer = DIMTIME;
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <lcd_event_process+0xc4>)
 80013ba:	f64e 2060 	movw	r0, #60000	; 0xea60
				lcdtouched = 0xff;		// its a touch
 80013be:	7014      	strb	r4, [r2, #0]
				lcdpevent = 0;
 80013c0:	2200      	movs	r2, #0
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <lcd_event_process+0xac>)
				dimtimer = DIMTIME;
 80013c4:	6008      	str	r0, [r1, #0]
}
 80013c6:	4628      	mov	r0, r5
				lcdpevent = 0;
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	200014e0 	.word	0x200014e0
 80013d0:	080247a0 	.word	0x080247a0
 80013d4:	080247d0 	.word	0x080247d0
 80013d8:	20001591 	.word	0x20001591
 80013dc:	20001508 	.word	0x20001508
 80013e0:	20001590 	.word	0x20001590
 80013e4:	0802471c 	.word	0x0802471c
 80013e8:	20001592 	.word	0x20001592
 80013ec:	08024774 	.word	0x08024774
 80013f0:	08024750 	.word	0x08024750
 80013f4:	20000004 	.word	0x20000004

080013f8 <processnex>:
void processnex(void) {

	char ackbuf[24];
	volatile int count, result;

	if (dimtimer)		// lcd auto dim
 80013f8:	4a34      	ldr	r2, [pc, #208]	; (80014cc <processnex+0xd4>)
 80013fa:	6813      	ldr	r3, [r2, #0]
void processnex(void) {
 80013fc:	b530      	push	{r4, r5, lr}
 80013fe:	b083      	sub	sp, #12
	if (dimtimer)		// lcd auto dim
 8001400:	b10b      	cbz	r3, 8001406 <processnex+0xe>
		dimtimer--;
 8001402:	3b01      	subs	r3, #1
 8001404:	6013      	str	r3, [r2, #0]
	while (DMARXBUFSIZE - DMA1_Stream0->NDTR != lcdrxoutidx) {		// something waiting in Rx buffer
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <processnex+0xd8>)
 8001408:	4932      	ldr	r1, [pc, #200]	; (80014d4 <processnex+0xdc>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	680a      	ldr	r2, [r1, #0]
 800140e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001412:	4293      	cmp	r3, r2
 8001414:	d01b      	beq.n	800144e <processnex+0x56>
	if (++index >= limit)
 8001416:	1c53      	adds	r3, r2, #1
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy it to lcd rx buffer
 8001418:	4d2f      	ldr	r5, [pc, #188]	; (80014d8 <processnex+0xe0>)
 800141a:	4c30      	ldr	r4, [pc, #192]	; (80014dc <processnex+0xe4>)
		return (count);
 800141c:	2001      	movs	r0, #1
		return (0);
 800141e:	2b80      	cmp	r3, #128	; 0x80
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy it to lcd rx buffer
 8001420:	5cad      	ldrb	r5, [r5, r2]
		return (0);
 8001422:	bfa8      	it	ge
 8001424:	2300      	movge	r3, #0
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy it to lcd rx buffer
 8001426:	54a5      	strb	r5, [r4, r2]
		lcdrxoutidx = cycinc(lcdrxoutidx, LCDRXBUFSIZE);	// cyclic bump lcd rx index
 8001428:	600b      	str	r3, [r1, #0]

	count = lcd_rxdma();		// copy any dma'd rx chars into lcdbuf

//		printf("lcd_rxdma copied %d\n", count);

	switch (lcd_state) {
 800142a:	4c2d      	ldr	r4, [pc, #180]	; (80014e0 <processnex+0xe8>)
	count = lcd_rxdma();		// copy any dma'd rx chars into lcdbuf
 800142c:	9000      	str	r0, [sp, #0]
	switch (lcd_state) {
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	2b06      	cmp	r3, #6
 8001432:	d845      	bhi.n	80014c0 <processnex+0xc8>
 8001434:	e8df f003 	tbb	[pc, r3]
 8001438:	150e0604 	.word	0x150e0604
 800143c:	4427      	.short	0x4427
 800143e:	31          	.byte	0x31
 800143f:	00          	.byte	0x00

	case 0:				/// from init
		lcd_state = LCD_IDLE;
 8001440:	2301      	movs	r3, #1
 8001442:	6023      	str	r3, [r4, #0]
	case LCD_IDLE:
		if (count > 0) {		// new data in the rx buffer
 8001444:	9b00      	ldr	r3, [sp, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dc33      	bgt.n	80014b2 <processnex+0xba>
	}
	default:
		printf("processnex case lost\n");
		break;
	}
}
 800144a:	b003      	add	sp, #12
 800144c:	bd30      	pop	{r4, r5, pc}
	return (-1);
 800144e:	f04f 30ff 	mov.w	r0, #4294967295
 8001452:	e7ea      	b.n	800142a <processnex+0x32>
		printf("LCD_SENDCMD -> LCD_WAITRESP\n");
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <processnex+0xec>)
 8001456:	f01f f927 	bl	80206a8 <puts>
		lcd_state = LCD_WAITRESP;
 800145a:	2303      	movs	r3, #3
 800145c:	6023      	str	r3, [r4, #0]
}
 800145e:	b003      	add	sp, #12
 8001460:	bd30      	pop	{r4, r5, pc}
		result = lcd_event_process();
 8001462:	f7ff ff65 	bl	8001330 <lcd_event_process>
 8001466:	9001      	str	r0, [sp, #4]
		if (result > 0) {	// wait until a complete event packet or timeout
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc05      	bgt.n	800147a <processnex+0x82>
			if (result < 0) {	// timeout or error
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	daea      	bge.n	800144a <processnex+0x52>
				printf("LCD_WAITRESP TIMEOUT\n");
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <processnex+0xf0>)
 8001476:	f01f f917 	bl	80206a8 <puts>
				printf("LCD_WAITRESP -> LCD_IDLE\n");
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <processnex+0xf4>)
 800147c:	f01f f914 	bl	80206a8 <puts>
				lcd_state = LCD_IDLE;
 8001480:	2301      	movs	r3, #1
 8001482:	6023      	str	r3, [r4, #0]
 8001484:	e7e1      	b.n	800144a <processnex+0x52>
		printf("LCD_CMDTIMEOUT\n");
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <processnex+0xf8>)
 8001488:	f01f f90e 	bl	80206a8 <puts>
		printf("LCD_CMDTIMEOUT -> LCD_IDLE\n");
 800148c:	4819      	ldr	r0, [pc, #100]	; (80014f4 <processnex+0xfc>)
 800148e:	f01f f90b 	bl	80206a8 <puts>
		lcd_state = LCD_IDLE;
 8001492:	2301      	movs	r3, #1
 8001494:	6023      	str	r3, [r4, #0]
}
 8001496:	b003      	add	sp, #12
 8001498:	bd30      	pop	{r4, r5, pc}
		result = lcd_event_process();
 800149a:	f7ff ff49 	bl	8001330 <lcd_event_process>
 800149e:	9001      	str	r0, [sp, #4]
		if (result != 0) {	// wait until a complete event packet or timeout
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0d1      	beq.n	800144a <processnex+0x52>
			printf("LCD_GOTRX -> LCD_IDLE\n");
 80014a6:	4814      	ldr	r0, [pc, #80]	; (80014f8 <processnex+0x100>)
 80014a8:	f01f f8fe 	bl	80206a8 <puts>
			lcd_state = LCD_IDLE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	6023      	str	r3, [r4, #0]
 80014b0:	e7cb      	b.n	800144a <processnex+0x52>
			printf("LCD_IDLE -> LCD_GOTRX\n");
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <processnex+0x104>)
 80014b4:	f01f f8f8 	bl	80206a8 <puts>
			lcd_state = LCD_GOTRX;
 80014b8:	2306      	movs	r3, #6
 80014ba:	6023      	str	r3, [r4, #0]
}
 80014bc:	b003      	add	sp, #12
 80014be:	bd30      	pop	{r4, r5, pc}
		printf("processnex case lost\n");
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <processnex+0x108>)
}
 80014c2:	b003      	add	sp, #12
 80014c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printf("processnex case lost\n");
 80014c8:	f01f b8ee 	b.w	80206a8 <puts>
 80014cc:	20000004 	.word	0x20000004
 80014d0:	40026010 	.word	0x40026010
 80014d4:	2000158c 	.word	0x2000158c
 80014d8:	20001460 	.word	0x20001460
 80014dc:	2000150c 	.word	0x2000150c
 80014e0:	20000008 	.word	0x20000008
 80014e4:	08024880 	.word	0x08024880
 80014e8:	080248e4 	.word	0x080248e4
 80014ec:	080248c8 	.word	0x080248c8
 80014f0:	0802489c 	.word	0x0802489c
 80014f4:	080248ac 	.word	0x080248ac
 80014f8:	08024868 	.word	0x08024868
 80014fc:	08024850 	.word	0x08024850
 8001500:	080248fc 	.word	0x080248fc

08001504 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <netif_status_callbk_fn+0x8>)
 8001506:	f01f b8cf 	b.w	80206a8 <puts>
 800150a:	bf00      	nop
 800150c:	08024f5c 	.word	0x08024f5c

08001510 <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8001510:	4801      	ldr	r0, [pc, #4]	; (8001518 <Callback01+0x8>)
 8001512:	f01f b8c9 	b.w	80206a8 <puts>
 8001516:	bf00      	nop
 8001518:	0802496c 	.word	0x0802496c

0800151c <StarLPTask>:
{
 800151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[32] = { "empty" };
 8001520:	2300      	movs	r3, #0
{
 8001522:	b09d      	sub	sp, #116	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 8001524:	4eab      	ldr	r6, [pc, #684]	; (80017d4 <StarLPTask+0x2b8>)
	char str[32] = { "empty" };
 8001526:	4aac      	ldr	r2, [pc, #688]	; (80017d8 <StarLPTask+0x2bc>)
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001528:	4cac      	ldr	r4, [pc, #688]	; (80017dc <StarLPTask+0x2c0>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 800152a:	67b3      	str	r3, [r6, #120]	; 0x78
	char str[32] = { "empty" };
 800152c:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8001530:	67f3      	str	r3, [r6, #124]	; 0x7c
	char str[32] = { "empty" };
 8001532:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
 8001536:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800153a:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
	char str[32] = { "empty" };
 800153e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
 8001542:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
 8001546:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
 800154a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
	while (main_init_done == 0)	// wait from main to complete the initilisation
 800154e:	6823      	ldr	r3, [r4, #0]
	char str[32] = { "empty" };
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	900a      	str	r0, [sp, #40]	; 0x28
 8001556:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	while (main_init_done == 0)	// wait from main to complete the initilisation
 800155a:	b92b      	cbnz	r3, 8001568 <StarLPTask+0x4c>
		osDelay(100);
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	f00f f965 	bl	801082c <osDelay>
	while (main_init_done == 0)	// wait from main to complete the initilisation
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f9      	beq.n	800155c <StarLPTask+0x40>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, BUILDNO, statuspkt.majorversion, statuspkt.minorversion,
 8001568:	f8b6 e05c 	ldrh.w	lr, [r6, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 800156c:	f644 6925 	movw	r9, #20005	; 0x4e25
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, BUILDNO, statuspkt.majorversion, statuspkt.minorversion,
 8001570:	f896 c070 	ldrb.w	ip, [r6, #112]	; 0x70
	uint16_t onesectimer = 0;
 8001574:	f04f 0800 	mov.w	r8, #0
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, BUILDNO, statuspkt.majorversion, statuspkt.minorversion,
 8001578:	f896 7071 	ldrb.w	r7, [r6, #113]	; 0x71
 800157c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 8001580:	4d97      	ldr	r5, [pc, #604]	; (80017e0 <StarLPTask+0x2c4>)
	uint16_t tenmstimer = 0;
 8001582:	4644      	mov	r4, r8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, TESTING Sw S/N=%d, Ver %d.%d, UDP Target=%s %s\"",
 8001584:	4897      	ldr	r0, [pc, #604]	; (80017e4 <StarLPTask+0x2c8>)
 8001586:	4998      	ldr	r1, [pc, #608]	; (80017e8 <StarLPTask+0x2cc>)
 8001588:	4b98      	ldr	r3, [pc, #608]	; (80017ec <StarLPTask+0x2d0>)
 800158a:	4a99      	ldr	r2, [pc, #612]	; (80017f0 <StarLPTask+0x2d4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f8cd e004 	str.w	lr, [sp, #4]
 8001594:	f8cd 9008 	str.w	r9, [sp, #8]
 8001598:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8001880 <StarLPTask+0x364>
 800159c:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8001884 <StarLPTask+0x368>
 80015a0:	e9cd c703 	strd	ip, r7, [sp, #12]
 80015a4:	e9cd 0505 	strd	r0, r5, [sp, #20]
 80015a8:	6808      	ldr	r0, [r1, #0]
 80015aa:	4992      	ldr	r1, [pc, #584]	; (80017f4 <StarLPTask+0x2d8>)
 80015ac:	9000      	str	r0, [sp, #0]
 80015ae:	4892      	ldr	r0, [pc, #584]	; (80017f8 <StarLPTask+0x2dc>)
 80015b0:	f01f f94a 	bl	8020848 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80015b4:	4891      	ldr	r0, [pc, #580]	; (80017fc <StarLPTask+0x2e0>)
 80015b6:	f00a f91d 	bl	800b7f4 <HAL_TIM_Base_Start>
 80015ba:	4d91      	ldr	r5, [pc, #580]	; (8001800 <StarLPTask+0x2e4>)
	lptask_init_done = 1;		// this lp task has done its initialisation
 80015bc:	4b91      	ldr	r3, [pc, #580]	; (8001804 <StarLPTask+0x2e8>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80015c2:	4891      	ldr	r0, [pc, #580]	; (8001808 <StarLPTask+0x2ec>)
		tenmstimer++;
 80015c4:	3401      	adds	r4, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80015c6:	f007 fb2d 	bl	8008c24 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80015ca:	200a      	movs	r0, #10
 80015cc:	f00f f92e 	bl	801082c <osDelay>
		globaladcnoise = abs(meanwindiff);
 80015d0:	4b8e      	ldr	r3, [pc, #568]	; (800180c <StarLPTask+0x2f0>)
		if (ledhang) {	// trigger led
 80015d2:	4f8f      	ldr	r7, [pc, #572]	; (8001810 <StarLPTask+0x2f4>)
		tenmstimer++;
 80015d4:	b2a4      	uxth	r4, r4
		globaladcnoise = abs(meanwindiff);
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
		if (ledhang) {	// trigger led
 80015da:	683a      	ldr	r2, [r7, #0]
		globaladcnoise = abs(meanwindiff);
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bfb8      	it	lt
 80015e0:	425b      	neglt	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80015e2:	09d9      	lsrs	r1, r3, #7
		globaladcnoise = abs(meanwindiff);
 80015e4:	f8cb 3000 	str.w	r3, [fp]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80015e8:	1d0b      	adds	r3, r1, #4
 80015ea:	498a      	ldr	r1, [pc, #552]	; (8001814 <StarLPTask+0x2f8>)
 80015ec:	800b      	strh	r3, [r1, #0]
		if (ledhang) {	// trigger led
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d04f      	beq.n	8001692 <StarLPTask+0x176>
			ledhang--;
 80015f2:	1e53      	subs	r3, r2, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80015f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f8:	2201      	movs	r2, #1
 80015fa:	4887      	ldr	r0, [pc, #540]	; (8001818 <StarLPTask+0x2fc>)
			ledhang--;
 80015fc:	603b      	str	r3, [r7, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80015fe:	f006 fe73 	bl	80082e8 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8001602:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 8001604:	f8d9 3000 	ldr.w	r3, [r9]
 8001608:	429a      	cmp	r2, r3
 800160a:	d14c      	bne.n	80016a6 <StarLPTask+0x18a>
			processnex();		// process Nextion
 800160c:	f7ff fef4 	bl	80013f8 <processnex>
		if (tenmstimer % 10 == 0) {
 8001610:	4b82      	ldr	r3, [pc, #520]	; (800181c <StarLPTask+0x300>)
 8001612:	fba3 2304 	umull	r2, r3, r3, r4
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800161c:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8001620:	b29b      	uxth	r3, r3
 8001622:	b99b      	cbnz	r3, 800164c <StarLPTask+0x130>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <StarLPTask+0x304>)
 8001626:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f103 0219 	add.w	r2, r3, #25
 800162e:	4291      	cmp	r1, r2
 8001630:	f200 8146 	bhi.w	80018c0 <StarLPTask+0x3a4>
				if (jabbertimeout) {
 8001634:	4a7b      	ldr	r2, [pc, #492]	; (8001824 <StarLPTask+0x308>)
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	b10b      	cbz	r3, 800163e <StarLPTask+0x122>
					jabbertimeout--;		// de-arm count
 800163a:	3b01      	subs	r3, #1
 800163c:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 800163e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8001640:	4a77      	ldr	r2, [pc, #476]	; (8001820 <StarLPTask+0x304>)
 8001642:	6013      	str	r3, [r2, #0]
			if (gainchanged == 0) {		// gain not just changed
 8001644:	9b08      	ldr	r3, [sp, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8150 	beq.w	80018ec <StarLPTask+0x3d0>
		if (tenmstimer % 100 == 0) {		// every second
 800164c:	4b76      	ldr	r3, [pc, #472]	; (8001828 <StarLPTask+0x30c>)
 800164e:	fba3 2304 	umull	r2, r3, r3, r4
 8001652:	2264      	movs	r2, #100	; 0x64
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	fb02 4313 	mls	r3, r2, r3, r4
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 815a 	beq.w	8001916 <StarLPTask+0x3fa>
		if (tenmstimer % 1000 == 0) {		// every 10 seconds
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <StarLPTask+0x310>)
 8001664:	fba3 3704 	umull	r3, r7, r3, r4
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	09bf      	lsrs	r7, r7, #6
 800166e:	fb03 4717 	mls	r7, r3, r7, r4
 8001672:	b2bf      	uxth	r7, r7
 8001674:	2f00      	cmp	r7, #0
 8001676:	f000 8107 	beq.w	8001888 <StarLPTask+0x36c>
		if (tenmstimer > 3000) {		// reset timer after 30 seconds
 800167a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800167e:	429c      	cmp	r4, r3
 8001680:	d857      	bhi.n	8001732 <StarLPTask+0x216>
		if (onesectimer > 900) {			// 15 mins
 8001682:	f5b8 7f61 	cmp.w	r8, #900	; 0x384
 8001686:	d99c      	bls.n	80015c2 <StarLPTask+0xa6>
			requestapisn();	//update s/n and udp target (reboot on fail)
 8001688:	f003 fe2e 	bl	80052e8 <requestapisn>
			onesectimer = 0;
 800168c:	f04f 0800 	mov.w	r8, #0
 8001690:	e797      	b.n	80015c2 <StarLPTask+0xa6>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8001692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001696:	4860      	ldr	r0, [pc, #384]	; (8001818 <StarLPTask+0x2fc>)
 8001698:	f006 fe26 	bl	80082e8 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800169c:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
 800169e:	f8d9 3000 	ldr.w	r3, [r9]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d0b2      	beq.n	800160c <StarLPTask+0xf0>
			trigs = statuspkt.trigcount;
 80016a6:	6ff7      	ldr	r7, [r6, #124]	; 0x7c
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80016a8:	2108      	movs	r1, #8
 80016aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016ae:	4a60      	ldr	r2, [pc, #384]	; (8001830 <StarLPTask+0x314>)
 80016b0:	9100      	str	r1, [sp, #0]
 80016b2:	2100      	movs	r1, #0
			trigs = statuspkt.trigcount;
 80016b4:	f8c9 7000 	str.w	r7, [r9]
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80016b8:	485e      	ldr	r0, [pc, #376]	; (8001834 <StarLPTask+0x318>)
 80016ba:	f004 fc0b 	bl	8005ed4 <HAL_DAC_Start_DMA>
				printf("sem wait 1a\n");
 80016be:	4f5e      	ldr	r7, [pc, #376]	; (8001838 <StarLPTask+0x31c>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80016c0:	e001      	b.n	80016c6 <StarLPTask+0x1aa>
				printf("sem wait 1a\n");
 80016c2:	f01e fff1 	bl	80206a8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80016c6:	2101      	movs	r1, #1
 80016c8:	6828      	ldr	r0, [r5, #0]
 80016ca:	f00f fe4b 	bl	8011364 <xQueueSemaphoreTake>
 80016ce:	2801      	cmp	r0, #1
				printf("sem wait 1a\n");
 80016d0:	4638      	mov	r0, r7
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80016d2:	d1f6      	bne.n	80016c2 <StarLPTask+0x1a6>
			strcpy(str, ctime(&epochtime));		// ctime
 80016d4:	4859      	ldr	r0, [pc, #356]	; (800183c <StarLPTask+0x320>)
 80016d6:	4657      	mov	r7, sl
 80016d8:	f01d fe4e 	bl	801f378 <ctime>
 80016dc:	4601      	mov	r1, r0
 80016de:	4650      	mov	r0, sl
 80016e0:	f01f f941 	bl	8020966 <stpcpy>
			n = 0;
 80016e4:	2100      	movs	r1, #0
 80016e6:	eba0 000a 	sub.w	r0, r0, sl
 80016ea:	46a4      	mov	ip, r4
			i = 0;
 80016ec:	460b      	mov	r3, r1
			while (i < strlen(str)) {
 80016ee:	4283      	cmp	r3, r0
				i++;
 80016f0:	f103 0301 	add.w	r3, r3, #1
			while (i < strlen(str)) {
 80016f4:	d20d      	bcs.n	8001712 <StarLPTask+0x1f6>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80016f6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80016fa:	2a0a      	cmp	r2, #10
 80016fc:	d0f7      	beq.n	80016ee <StarLPTask+0x1d2>
 80016fe:	2a0d      	cmp	r2, #13
 8001700:	d0f5      	beq.n	80016ee <StarLPTask+0x1d2>
					trigtimestr[n++] = str[i];
 8001702:	4c4f      	ldr	r4, [pc, #316]	; (8001840 <StarLPTask+0x324>)
			while (i < strlen(str)) {
 8001704:	4283      	cmp	r3, r0
				i++;
 8001706:	f103 0301 	add.w	r3, r3, #1
					trigtimestr[n++] = str[i];
 800170a:	5462      	strb	r2, [r4, r1]
 800170c:	f101 0101 	add.w	r1, r1, #1
			while (i < strlen(str)) {
 8001710:	d3f1      	bcc.n	80016f6 <StarLPTask+0x1da>
			trigtimestr[n] = '\0';
 8001712:	2300      	movs	r3, #0
 8001714:	4f4a      	ldr	r7, [pc, #296]	; (8001840 <StarLPTask+0x324>)
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8001716:	6828      	ldr	r0, [r5, #0]
 8001718:	4664      	mov	r4, ip
			trigtimestr[n] = '\0';
 800171a:	547b      	strb	r3, [r7, r1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800171c:	461a      	mov	r2, r3
 800171e:	4619      	mov	r1, r3
 8001720:	f00f fb9a 	bl	8010e58 <xQueueGenericSend>
 8001724:	2801      	cmp	r0, #1
 8001726:	f43f af71 	beq.w	800160c <StarLPTask+0xf0>
				printf("semaphore 1a release failed\n");
 800172a:	4846      	ldr	r0, [pc, #280]	; (8001844 <StarLPTask+0x328>)
 800172c:	f01e ffbc 	bl	80206a8 <puts>
 8001730:	e76c      	b.n	800160c <StarLPTask+0xf0>
		strftime (buffer,sizeof(buffer),"%a %e %h %Y ",timeinfo);
 8001732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001734:	2128      	movs	r1, #40	; 0x28
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <StarLPTask+0x32c>)
 8001738:	a812      	add	r0, sp, #72	; 0x48
 800173a:	f01f fe97 	bl	802146c <strftime>
		setlcdtext("t1.txt", buffer);
 800173e:	a912      	add	r1, sp, #72	; 0x48
 8001740:	4842      	ldr	r0, [pc, #264]	; (800184c <StarLPTask+0x330>)
 8001742:	f7ff fd35 	bl	80011b0 <setlcdtext>
			if (gpsgood == 0) {	// gps is not talking to us
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <StarLPTask+0x334>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 818b 	beq.w	8001a66 <StarLPTask+0x54a>
			if (psensor == MPL115A2) {
 8001750:	4b40      	ldr	r3, [pc, #256]	; (8001854 <StarLPTask+0x338>)
			gpsgood = 0;			// reset the good flag
 8001752:	2200      	movs	r2, #0
 8001754:	493e      	ldr	r1, [pc, #248]	; (8001850 <StarLPTask+0x334>)
			if (psensor == MPL115A2) {
 8001756:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8001758:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 800175a:	2b01      	cmp	r3, #1
 800175c:	f000 8197 	beq.w	8001a8e <StarLPTask+0x572>
			} else if (psensor == MPL3115A2) {
 8001760:	2b02      	cmp	r3, #2
 8001762:	f000 81bf 	beq.w	8001ae4 <StarLPTask+0x5c8>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <StarLPTask+0x33c>)
 8001768:	f644 6225 	movw	r2, #20005	; 0x4e25
 800176c:	f8b6 105c 	ldrh.w	r1, [r6, #92]	; 0x5c
			tenmstimer = 0;
 8001770:	2400      	movs	r4, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8001778:	f3c3 4707 	ubfx	r7, r3, #16, #8
 800177c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f8cd c008 	str.w	ip, [sp, #8]
 8001786:	e9cd 0700 	strd	r0, r7, [sp]
 800178a:	4834      	ldr	r0, [pc, #208]	; (800185c <StarLPTask+0x340>)
 800178c:	f01e ff04 	bl	8020598 <iprintf>
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%04d, temp:%02d.%03d, time:%s\n", trigs,
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <StarLPTask+0x344>)
 8001792:	4926      	ldr	r1, [pc, #152]	; (800182c <StarLPTask+0x310>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f8db 3000 	ldr.w	r3, [fp]
 800179a:	fba1 1202 	umull	r1, r2, r1, r2
 800179e:	4931      	ldr	r1, [pc, #196]	; (8001864 <StarLPTask+0x348>)
 80017a0:	0997      	lsrs	r7, r2, #6
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <StarLPTask+0x34c>)
 80017a4:	f8b1 c000 	ldrh.w	ip, [r1]
 80017a8:	6810      	ldr	r0, [r2, #0]
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <StarLPTask+0x350>)
 80017ac:	f8d9 1000 	ldr.w	r1, [r9]
 80017b0:	9205      	str	r2, [sp, #20]
 80017b2:	f00c 0207 	and.w	r2, ip, #7
 80017b6:	e9cd 0703 	strd	r0, r7, [sp, #12]
 80017ba:	482d      	ldr	r0, [pc, #180]	; (8001870 <StarLPTask+0x354>)
 80017bc:	4f2d      	ldr	r7, [pc, #180]	; (8001874 <StarLPTask+0x358>)
 80017be:	6800      	ldr	r0, [r0, #0]
 80017c0:	683f      	ldr	r7, [r7, #0]
 80017c2:	e9cd 7001 	strd	r7, r0, [sp, #4]
 80017c6:	482c      	ldr	r0, [pc, #176]	; (8001878 <StarLPTask+0x35c>)
 80017c8:	8800      	ldrh	r0, [r0, #0]
 80017ca:	9000      	str	r0, [sp, #0]
 80017cc:	482b      	ldr	r0, [pc, #172]	; (800187c <StarLPTask+0x360>)
 80017ce:	f01e fee3 	bl	8020598 <iprintf>
 80017d2:	e756      	b.n	8001682 <StarLPTask+0x166>
 80017d4:	20022778 	.word	0x20022778
 80017d8:	08024318 	.word	0x08024318
 80017dc:	200015ec 	.word	0x200015ec
 80017e0:	20023428 	.word	0x20023428
 80017e4:	20023440 	.word	0x20023440
 80017e8:	1ff0f428 	.word	0x1ff0f428
 80017ec:	1ff0f424 	.word	0x1ff0f424
 80017f0:	1ff0f420 	.word	0x1ff0f420
 80017f4:	08024a08 	.word	0x08024a08
 80017f8:	20000080 	.word	0x20000080
 80017fc:	20023248 	.word	0x20023248
 8001800:	20022f4c 	.word	0x20022f4c
 8001804:	200015e8 	.word	0x200015e8
 8001808:	20022b24 	.word	0x20022b24
 800180c:	20000708 	.word	0x20000708
 8001810:	20000704 	.word	0x20000704
 8001814:	20000000 	.word	0x20000000
 8001818:	40020c00 	.word	0x40020c00
 800181c:	cccccccd 	.word	0xcccccccd
 8001820:	200015dc 	.word	0x200015dc
 8001824:	200006bc 	.word	0x200006bc
 8001828:	51eb851f 	.word	0x51eb851f
 800182c:	10624dd3 	.word	0x10624dd3
 8001830:	08024f74 	.word	0x08024f74
 8001834:	20022e70 	.word	0x20022e70
 8001838:	08024a64 	.word	0x08024a64
 800183c:	20023370 	.word	0x20023370
 8001840:	20000214 	.word	0x20000214
 8001844:	08024a70 	.word	0x08024a70
 8001848:	08024c08 	.word	0x08024c08
 800184c:	08024c18 	.word	0x08024c18
 8001850:	20001608 	.word	0x20001608
 8001854:	2000163c 	.word	0x2000163c
 8001858:	20022ba8 	.word	0x20022ba8
 800185c:	08024c64 	.word	0x08024c64
 8001860:	200233d8 	.word	0x200233d8
 8001864:	20000242 	.word	0x20000242
 8001868:	200233dc 	.word	0x200233dc
 800186c:	20000050 	.word	0x20000050
 8001870:	200233e4 	.word	0x200233e4
 8001874:	200233e0 	.word	0x200233e0
 8001878:	20000002 	.word	0x20000002
 800187c:	08024c80 	.word	0x08024c80
 8001880:	200006b8 	.word	0x200006b8
 8001884:	200015fc 	.word	0x200015fc
			getlcdpage();
 8001888:	f7ff fcb0 	bl	80011ec <getlcdpage>
			if (agc) {
 800188c:	4b9f      	ldr	r3, [pc, #636]	; (8001b0c <StarLPTask+0x5f0>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80db 	beq.w	8001a4c <StarLPTask+0x530>
				trigsin10sec = trigs - prevtrigs;
 8001896:	4b9e      	ldr	r3, [pc, #632]	; (8001b10 <StarLPTask+0x5f4>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8001898:	499e      	ldr	r1, [pc, #632]	; (8001b14 <StarLPTask+0x5f8>)
				trigsin10sec = trigs - prevtrigs;
 800189a:	f8d9 2000 	ldr.w	r2, [r9]
 800189e:	681b      	ldr	r3, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80018a0:	8809      	ldrh	r1, [r1, #0]
				trigsin10sec = trigs - prevtrigs;
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	489c      	ldr	r0, [pc, #624]	; (8001b18 <StarLPTask+0x5fc>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80018a6:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 80018a8:	6003      	str	r3, [r0, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80018aa:	d802      	bhi.n	80018b2 <StarLPTask+0x396>
					if (trigsin10sec < MINTRIGS10S)
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f240 8122 	bls.w	8001af6 <StarLPTask+0x5da>
				if (trigsin10sec > MAXTRIGS10S)
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	f200 80f4 	bhi.w	8001aa0 <StarLPTask+0x584>
				prevtrigs = trigs;
 80018b8:	4b95      	ldr	r3, [pc, #596]	; (8001b10 <StarLPTask+0x5f4>)
			gainchanged = 0;
 80018ba:	9708      	str	r7, [sp, #32]
				prevtrigs = trigs;
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e6dc      	b.n	800167a <StarLPTask+0x15e>
				statuspkt.jabcnt++;
 80018c0:	f8b6 2086 	ldrh.w	r2, [r6, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 80018c4:	2101      	movs	r1, #1
 80018c6:	4895      	ldr	r0, [pc, #596]	; (8001b1c <StarLPTask+0x600>)
				statuspkt.jabcnt++;
 80018c8:	440a      	add	r2, r1
				jabbertimeout = 1;		// 100mS seconds pause
 80018ca:	6001      	str	r1, [r0, #0]
				statuspkt.jabcnt++;
 80018cc:	b292      	uxth	r2, r2
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 80018ce:	4894      	ldr	r0, [pc, #592]	; (8001b20 <StarLPTask+0x604>)
				statuspkt.jabcnt++;
 80018d0:	f8a6 2086 	strh.w	r2, [r6, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 80018d4:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80018d6:	1ac9      	subs	r1, r1, r3
 80018d8:	f01e fe5e 	bl	8020598 <iprintf>
				if (agc) {
 80018dc:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <StarLPTask+0x5f0>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 80f5 	bne.w	8001ad0 <StarLPTask+0x5b4>
				jabtrigcnt = statuspkt.trigcount;
 80018e6:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 80018e8:	4a8e      	ldr	r2, [pc, #568]	; (8001b24 <StarLPTask+0x608>)
 80018ea:	6013      	str	r3, [r2, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 80018ec:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <StarLPTask+0x60c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <StarLPTask+0x610>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1ad3      	subs	r3, r2, r3
				if (n > 5) {				// too many triggers in 100mS
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	f340 80aa 	ble.w	8001a50 <StarLPTask+0x534>
					if (trigthresh < 4095)
 80018fc:	4885      	ldr	r0, [pc, #532]	; (8001b14 <StarLPTask+0x5f8>)
 80018fe:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001902:	8803      	ldrh	r3, [r0, #0]
 8001904:	428b      	cmp	r3, r1
 8001906:	d801      	bhi.n	800190c <StarLPTask+0x3f0>
						trigthresh++;
 8001908:	3301      	adds	r3, #1
 800190a:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 800190c:	2300      	movs	r3, #0
 800190e:	9308      	str	r3, [sp, #32]
 8001910:	4b86      	ldr	r3, [pc, #536]	; (8001b2c <StarLPTask+0x610>)
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e69a      	b.n	800164c <StarLPTask+0x130>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8001916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191a:	4885      	ldr	r0, [pc, #532]	; (8001b30 <StarLPTask+0x614>)
 800191c:	f006 fcfe 	bl	800831c <HAL_GPIO_TogglePin>
			  timeinfo = localtime (&epochtime);
 8001920:	4884      	ldr	r0, [pc, #528]	; (8001b34 <StarLPTask+0x618>)
 8001922:	f01d fd55 	bl	801f3d0 <localtime>
			  timeinfo->tm_hour = (timeinfo->tm_hour + 10) % 24;
 8001926:	6887      	ldr	r7, [r0, #8]
			  timeinfo = localtime (&epochtime);
 8001928:	4603      	mov	r3, r0
 800192a:	9009      	str	r0, [sp, #36]	; 0x24
			  timeinfo->tm_hour = (timeinfo->tm_hour + 10) % 24;
 800192c:	370a      	adds	r7, #10
 800192e:	4882      	ldr	r0, [pc, #520]	; (8001b38 <StarLPTask+0x61c>)
			  strftime (buffer,sizeof(buffer),"%H:%M:%S",timeinfo);
 8001930:	4a82      	ldr	r2, [pc, #520]	; (8001b3c <StarLPTask+0x620>)
 8001932:	2128      	movs	r1, #40	; 0x28
			  timeinfo->tm_hour = (timeinfo->tm_hour + 10) % 24;
 8001934:	fb80 c007 	smull	ip, r0, r0, r7
 8001938:	ea4f 7ce7 	mov.w	ip, r7, asr #31
 800193c:	ebcc 0ca0 	rsb	ip, ip, r0, asr #2
			  strftime (buffer,sizeof(buffer),"%H:%M:%S",timeinfo);
 8001940:	a812      	add	r0, sp, #72	; 0x48
			  timeinfo->tm_hour = (timeinfo->tm_hour + 10) % 24;
 8001942:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001946:	eba7 0ccc 	sub.w	ip, r7, ip, lsl #3
 800194a:	f8c3 c008 	str.w	ip, [r3, #8]
			  strftime (buffer,sizeof(buffer),"%H:%M:%S",timeinfo);
 800194e:	f01f fd8d 	bl	802146c <strftime>
			  setlcdtext("t0.txt", buffer);
 8001952:	a912      	add	r1, sp, #72	; 0x48
 8001954:	487a      	ldr	r0, [pc, #488]	; (8001b40 <StarLPTask+0x624>)
 8001956:	f7ff fc2b 	bl	80011b0 <setlcdtext>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800195a:	e001      	b.n	8001960 <StarLPTask+0x444>
				printf("sem wait 1b\n");
 800195c:	f01e fea4 	bl	80206a8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8001960:	2101      	movs	r1, #1
 8001962:	6828      	ldr	r0, [r5, #0]
 8001964:	f00f fcfe 	bl	8011364 <xQueueSemaphoreTake>
 8001968:	2801      	cmp	r0, #1
				printf("sem wait 1b\n");
 800196a:	4876      	ldr	r0, [pc, #472]	; (8001b44 <StarLPTask+0x628>)
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800196c:	d1f6      	bne.n	800195c <StarLPTask+0x440>
			strcpy(str, ctime(&epochtime));
 800196e:	4871      	ldr	r0, [pc, #452]	; (8001b34 <StarLPTask+0x618>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001970:	2700      	movs	r7, #0
			strcpy(str, ctime(&epochtime));
 8001972:	f01d fd01 	bl	801f378 <ctime>
 8001976:	4601      	mov	r1, r0
 8001978:	4650      	mov	r0, sl
 800197a:	f01e fff4 	bl	8020966 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800197e:	ab1c      	add	r3, sp, #112	; 0x70
 8001980:	eba0 000a 	sub.w	r0, r0, sl
			sprintf(nowtimestr, "\"%s\"", str);
 8001984:	4652      	mov	r2, sl
 8001986:	4970      	ldr	r1, [pc, #448]	; (8001b48 <StarLPTask+0x62c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8001988:	4403      	add	r3, r0
			sprintf(nowtimestr, "\"%s\"", str);
 800198a:	4870      	ldr	r0, [pc, #448]	; (8001b4c <StarLPTask+0x630>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800198c:	f803 7c49 	strb.w	r7, [r3, #-73]
			sprintf(nowtimestr, "\"%s\"", str);
 8001990:	f01e ff5a 	bl	8020848 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8001994:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <StarLPTask+0x634>)
 8001996:	4a6f      	ldr	r2, [pc, #444]	; (8001b54 <StarLPTask+0x638>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	496e      	ldr	r1, [pc, #440]	; (8001b58 <StarLPTask+0x63c>)
 800199e:	486f      	ldr	r0, [pc, #444]	; (8001b5c <StarLPTask+0x640>)
 80019a0:	f01e ff52 	bl	8020848 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 80019a4:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <StarLPTask+0x644>)
 80019a6:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <StarLPTask+0x648>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	496a      	ldr	r1, [pc, #424]	; (8001b58 <StarLPTask+0x63c>)
 80019ae:	486e      	ldr	r0, [pc, #440]	; (8001b68 <StarLPTask+0x64c>)
 80019b0:	f01e ff4a 	bl	8020848 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80019b4:	4b6d      	ldr	r3, [pc, #436]	; (8001b6c <StarLPTask+0x650>)
			sprintf(statstr,
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <StarLPTask+0x654>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80019b8:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 80019bc:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80019be:	2b00      	cmp	r3, #0
			sprintf(statstr,
 80019c0:	4f54      	ldr	r7, [pc, #336]	; (8001b14 <StarLPTask+0x5f8>)
 80019c2:	6e72      	ldr	r2, [r6, #100]	; 0x64
 80019c4:	f3c1 010b 	ubfx	r1, r1, #0, #12
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80019c8:	bfb8      	it	lt
 80019ca:	425b      	neglt	r3, r3
			sprintf(statstr,
 80019cc:	883f      	ldrh	r7, [r7, #0]
 80019ce:	6ff0      	ldr	r0, [r6, #124]	; 0x7c
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	9703      	str	r7, [sp, #12]
 80019d6:	9000      	str	r0, [sp, #0]
 80019d8:	4866      	ldr	r0, [pc, #408]	; (8001b74 <StarLPTask+0x658>)
 80019da:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80019de:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <StarLPTask+0x65c>)
 80019e0:	4966      	ldr	r1, [pc, #408]	; (8001b7c <StarLPTask+0x660>)
 80019e2:	f01e ff31 	bl	8020848 <siprintf>
			if (gpslocked) {
 80019e6:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <StarLPTask+0x664>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03f      	beq.n	8001a6e <StarLPTask+0x552>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 80019ee:	7ef2      	ldrb	r2, [r6, #27]
 80019f0:	69f3      	ldr	r3, [r6, #28]
 80019f2:	6a30      	ldr	r0, [r6, #32]
 80019f4:	4963      	ldr	r1, [pc, #396]	; (8001b84 <StarLPTask+0x668>)
 80019f6:	9000      	str	r0, [sp, #0]
 80019f8:	4863      	ldr	r0, [pc, #396]	; (8001b88 <StarLPTask+0x66c>)
 80019fa:	f01e ff25 	bl	8020848 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80019fe:	2300      	movs	r3, #0
 8001a00:	6828      	ldr	r0, [r5, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	f00f fa27 	bl	8010e58 <xQueueGenericSend>
 8001a0a:	2801      	cmp	r0, #1
 8001a0c:	d002      	beq.n	8001a14 <StarLPTask+0x4f8>
				printf("semaphore 1b release failed\n");
 8001a0e:	485f      	ldr	r0, [pc, #380]	; (8001b8c <StarLPTask+0x670>)
 8001a10:	f01e fe4a 	bl	80206a8 <puts>
			onesectimer++;
 8001a14:	f108 0801 	add.w	r8, r8, #1
				printf("sem wait 1c\n");
 8001a18:	4f5d      	ldr	r7, [pc, #372]	; (8001b90 <StarLPTask+0x674>)
			onesectimer++;
 8001a1a:	fa1f f888 	uxth.w	r8, r8
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001a1e:	e001      	b.n	8001a24 <StarLPTask+0x508>
				printf("sem wait 1c\n");
 8001a20:	f01e fe42 	bl	80206a8 <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001a24:	2119      	movs	r1, #25
 8001a26:	6828      	ldr	r0, [r5, #0]
 8001a28:	f00f fc9c 	bl	8011364 <xQueueSemaphoreTake>
 8001a2c:	2801      	cmp	r0, #1
				printf("sem wait 1c\n");
 8001a2e:	4638      	mov	r0, r7
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8001a30:	d1f6      	bne.n	8001a20 <StarLPTask+0x504>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8001a32:	2300      	movs	r3, #0
 8001a34:	6828      	ldr	r0, [r5, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f00f fa0d 	bl	8010e58 <xQueueGenericSend>
 8001a3e:	2801      	cmp	r0, #1
 8001a40:	f43f ae0f 	beq.w	8001662 <StarLPTask+0x146>
				printf("semaphore 1c release failed\n");
 8001a44:	4853      	ldr	r0, [pc, #332]	; (8001b94 <StarLPTask+0x678>)
 8001a46:	f01e fe2f 	bl	80206a8 <puts>
 8001a4a:	e60a      	b.n	8001662 <StarLPTask+0x146>
			gainchanged = 0;
 8001a4c:	9308      	str	r3, [sp, #32]
 8001a4e:	e614      	b.n	800167a <StarLPTask+0x15e>
				if (n == 0) {		// no triggers in last 100mS
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f af5b 	bne.w	800190c <StarLPTask+0x3f0>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8001a56:	492f      	ldr	r1, [pc, #188]	; (8001b14 <StarLPTask+0x5f8>)
 8001a58:	880b      	ldrh	r3, [r1, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	f67f af56 	bls.w	800190c <StarLPTask+0x3f0>
						trigthresh--;
 8001a60:	3b01      	subs	r3, #1
 8001a62:	800b      	strh	r3, [r1, #0]
 8001a64:	e752      	b.n	800190c <StarLPTask+0x3f0>
				printf("GPS serial comms problem?\n");
 8001a66:	484c      	ldr	r0, [pc, #304]	; (8001b98 <StarLPTask+0x67c>)
 8001a68:	f01e fe1e 	bl	80206a8 <puts>
 8001a6c:	e670      	b.n	8001750 <StarLPTask+0x234>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 8001a6e:	4f4b      	ldr	r7, [pc, #300]	; (8001b9c <StarLPTask+0x680>)
 8001a70:	f8df c114 	ldr.w	ip, [pc, #276]	; 8001b88 <StarLPTask+0x66c>
 8001a74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001a76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001a7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001a80:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001a84:	f8cc 0000 	str.w	r0, [ip]
 8001a88:	f8ac 1004 	strh.w	r1, [ip, #4]
 8001a8c:	e7b7      	b.n	80019fe <StarLPTask+0x4e2>
				if (getpressure115() != HAL_OK) {
 8001a8e:	f001 fc73 	bl	8003378 <getpressure115>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	f43f ae67 	beq.w	8001766 <StarLPTask+0x24a>
					printf("MPL115A2 error\n\r");
 8001a98:	4841      	ldr	r0, [pc, #260]	; (8001ba0 <StarLPTask+0x684>)
 8001a9a:	f01e fd7d 	bl	8020598 <iprintf>
 8001a9e:	e662      	b.n	8001766 <StarLPTask+0x24a>
					gainchanged = bumppga(-1);
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f001 fc26 	bl	80032f4 <bumppga>
 8001aa8:	b203      	sxth	r3, r0
 8001aaa:	9308      	str	r3, [sp, #32]
				prevtrigs = trigs;
 8001aac:	f8d9 3000 	ldr.w	r3, [r9]
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <StarLPTask+0x5f4>)
 8001ab2:	6013      	str	r3, [r2, #0]
				if (gainchanged > 0) {	// increased gain
 8001ab4:	9b08      	ldr	r3, [sp, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f77f addf 	ble.w	800167a <StarLPTask+0x15e>
					if (trigthresh < (4095 - 10))
 8001abc:	4915      	ldr	r1, [pc, #84]	; (8001b14 <StarLPTask+0x5f8>)
 8001abe:	f640 72f4 	movw	r2, #4084	; 0xff4
 8001ac2:	880b      	ldrh	r3, [r1, #0]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f63f add8 	bhi.w	800167a <StarLPTask+0x15e>
						trigthresh += 5;
 8001aca:	3305      	adds	r3, #5
 8001acc:	800b      	strh	r3, [r1, #0]
 8001ace:	e5d4      	b.n	800167a <StarLPTask+0x15e>
					gainchanged = bumppga(-1);	// decrease gain
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f001 fc0e 	bl	80032f4 <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8001ad8:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 8001ada:	b202      	sxth	r2, r0
 8001adc:	9208      	str	r2, [sp, #32]
				jabtrigcnt = statuspkt.trigcount;
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <StarLPTask+0x608>)
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e5af      	b.n	8001644 <StarLPTask+0x128>
				if (getpressure3115() != HAL_OK) {
 8001ae4:	f001 fddc 	bl	80036a0 <getpressure3115>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	f43f ae3c 	beq.w	8001766 <StarLPTask+0x24a>
					printf("MPL3115A2 error\n\r");
 8001aee:	482d      	ldr	r0, [pc, #180]	; (8001ba4 <StarLPTask+0x688>)
 8001af0:	f01e fd52 	bl	8020598 <iprintf>
 8001af4:	e637      	b.n	8001766 <StarLPTask+0x24a>
						gainchanged = bumppga(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f001 fbfc 	bl	80032f4 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <StarLPTask+0x5fc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b0a      	cmp	r3, #10
 8001b02:	d8cd      	bhi.n	8001aa0 <StarLPTask+0x584>
						gainchanged = bumppga(1);
 8001b04:	b203      	sxth	r3, r0
 8001b06:	9308      	str	r3, [sp, #32]
 8001b08:	e7d0      	b.n	8001aac <StarLPTask+0x590>
 8001b0a:	bf00      	nop
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	200015f0 	.word	0x200015f0
 8001b14:	20000002 	.word	0x20000002
 8001b18:	20001600 	.word	0x20001600
 8001b1c:	200006bc 	.word	0x200006bc
 8001b20:	08024a8c 	.word	0x08024a8c
 8001b24:	200015dc 	.word	0x200015dc
 8001b28:	2000070c 	.word	0x2000070c
 8001b2c:	200015e4 	.word	0x200015e4
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	20023370 	.word	0x20023370
 8001b38:	2aaaaaab 	.word	0x2aaaaaab
 8001b3c:	08024a9c 	.word	0x08024a9c
 8001b40:	08024aa8 	.word	0x08024aa8
 8001b44:	08024ab0 	.word	0x08024ab0
 8001b48:	08024abc 	.word	0x08024abc
 8001b4c:	20000050 	.word	0x20000050
 8001b50:	200233d8 	.word	0x200233d8
 8001b54:	200233dc 	.word	0x200233dc
 8001b58:	08024ac4 	.word	0x08024ac4
 8001b5c:	20000208 	.word	0x20000208
 8001b60:	200233e4 	.word	0x200233e4
 8001b64:	200233e0 	.word	0x200233e0
 8001b68:	20000070 	.word	0x20000070
 8001b6c:	20000708 	.word	0x20000708
 8001b70:	200006b4 	.word	0x200006b4
 8001b74:	20000100 	.word	0x20000100
 8001b78:	20000214 	.word	0x20000214
 8001b7c:	08024acc 	.word	0x08024acc
 8001b80:	2000164d 	.word	0x2000164d
 8001b84:	08024b74 	.word	0x08024b74
 8001b88:	20000010 	.word	0x20000010
 8001b8c:	08024bc4 	.word	0x08024bc4
 8001b90:	08024be0 	.word	0x08024be0
 8001b94:	08024bec 	.word	0x08024bec
 8001b98:	08024c20 	.word	0x08024c20
 8001b9c:	08024b9c 	.word	0x08024b9c
 8001ba0:	08024c3c 	.word	0x08024c3c
 8001ba4:	08024c50 	.word	0x08024c50

08001ba8 <_write>:
	if (file == 1) {
 8001ba8:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8001baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bac:	460c      	mov	r4, r1
 8001bae:	4617      	mov	r7, r2
	if (file == 1) {
 8001bb0:	d00e      	beq.n	8001bd0 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	dd0a      	ble.n	8001bcc <_write+0x24>
 8001bb6:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8001bb8:	4d0b      	ldr	r5, [pc, #44]	; (8001be8 <_write+0x40>)
 8001bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f00c fce6 	bl	800e594 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bc8:	42b4      	cmp	r4, r6
 8001bca:	d1f6      	bne.n	8001bba <_write+0x12>
}
 8001bcc:	4638      	mov	r0, r7
 8001bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	ddfb      	ble.n	8001bcc <_write+0x24>
 8001bd4:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8001bd6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bda:	f001 f8e1 	bl	8002da0 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001bde:	42ac      	cmp	r4, r5
 8001be0:	d1f9      	bne.n	8001bd6 <_write+0x2e>
}
 8001be2:	4638      	mov	r0, r7
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20022d50 	.word	0x20022d50

08001bec <rebootme>:
void rebootme() {
 8001bec:	b508      	push	{r3, lr}
		osDelay(2000);
 8001bee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf2:	f00e fe1b 	bl	801082c <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bfa:	4905      	ldr	r1, [pc, #20]	; (8001c10 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bfe:	68ca      	ldr	r2, [r1, #12]
 8001c00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <rebootme+0x20>
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	05fa0004 	.word	0x05fa0004

08001c18 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8001c18:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8001c1c:	074a      	lsls	r2, r1, #29
 8001c1e:	d409      	bmi.n	8001c34 <netif_link_callbk_fn+0x1c>
void netif_link_callbk_fn(struct netif *netif) {
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <netif_link_callbk_fn+0x2c>)
 8001c26:	f01e fcb7 	bl	8020598 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8001c2a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001c2e:	075b      	lsls	r3, r3, #29
 8001c30:	d503      	bpl.n	8001c3a <netif_link_callbk_fn+0x22>
}
 8001c32:	bd10      	pop	{r4, pc}
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <netif_link_callbk_fn+0x30>)
 8001c36:	f01e bcaf 	b.w	8020598 <iprintf>
			printf("LAN interface appears disconnected, rebooting...\n");
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <netif_link_callbk_fn+0x34>)
 8001c3c:	f01e fd34 	bl	80206a8 <puts>
			rebootme();
 8001c40:	f7ff ffd4 	bl	8001bec <rebootme>
 8001c44:	08024f08 	.word	0x08024f08
 8001c48:	08024ee8 	.word	0x08024ee8
 8001c4c:	08024f28 	.word	0x08024f28

08001c50 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	f004 b9c7 	b.w	8005fe4 <HAL_DAC_Stop_DMA>
 8001c56:	bf00      	nop

08001c58 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8001c5a:	6803      	ldr	r3, [r0, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d008      	beq.n	8001c74 <HAL_TIM_IC_CaptureCallback+0x1c>
	} else if (htim->Instance == TIM4) {
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d000      	beq.n	8001c6a <HAL_TIM_IC_CaptureCallback+0x12>
}
 8001c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Timer4 callback\n");
 8001c6a:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x70>)
}
 8001c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8001c70:	f01e bd1a 	b.w	80206a8 <puts>
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001c74:	4c15      	ldr	r4, [pc, #84]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x74>)
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001c7c:	7ba2      	ldrb	r2, [r4, #14]
 8001c7e:	4d15      	ldr	r5, [pc, #84]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001c80:	3201      	adds	r2, #1
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001c82:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x80>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001c84:	fba3 6302 	umull	r6, r3, r3, r2
		diff = lastcap;
 8001c88:	4e14      	ldr	r6, [pc, #80]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001c90:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8001c94:	702b      	strb	r3, [r5, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8001c96:	f006 fb41 	bl	800831c <HAL_GPIO_TogglePin>
 8001c9a:	4d11      	ldr	r5, [pc, #68]	; (8001ce0 <HAL_TIM_IC_CaptureCallback+0x88>)
	uint32_t sum = 0;
 8001c9c:	2100      	movs	r1, #0
		diff = lastcap;
 8001c9e:	6837      	ldr	r7, [r6, #0]
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
		data[i] = data[i + 1];		// old data is low index
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8001cac:	4283      	cmp	r3, r0
		sum += data[i];
 8001cae:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8001cb0:	d1f9      	bne.n	8001ca6 <HAL_TIM_IC_CaptureCallback+0x4e>
	sum += new;
 8001cb2:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_TIM_IC_CaptureCallback+0x8c>)
	data[15] = new;		// new data at the end
 8001cb6:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8001cb8:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001cba:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8001cbc:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8001cbe:	6033      	str	r3, [r6, #0]
}
 8001cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	08024990 	.word	0x08024990
 8001ccc:	20022778 	.word	0x20022778
 8001cd0:	88888889 	.word	0x88888889
 8001cd4:	20000710 	.word	0x20000710
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	200015e0 	.word	0x200015e0
 8001ce0:	2000159c 	.word	0x2000159c
 8001ce4:	20022824 	.word	0x20022824

08001ce8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8001ce8:	6803      	ldr	r3, [r0, #0]
 8001cea:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d011      	beq.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x2c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02e      	beq.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x6c>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d02d      	beq.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x70>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x36>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		return;
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02b      	beq.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x7e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8001d0e:	4821      	ldr	r0, [pc, #132]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d10:	f01e bcca 	b.w	80206a8 <puts>
		rtos_debug_timer++;
 8001d14:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4770      	bx	lr
		printf("T3 PeriodElapsedCallback\n");
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d20:	f01e bcc2 	b.w	80206a8 <puts>
{
 8001d24:	b510      	push	{r4, lr}
		t1sec++;
 8001d26:	491e      	ldr	r1, [pc, #120]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		statuspkt.sysuptime++;
 8001d28:	4c1e      	ldr	r4, [pc, #120]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
		t1sec++;
 8001d2a:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8001d2e:	481e      	ldr	r0, [pc, #120]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
		t1sec++;
 8001d30:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8001d32:	3301      	adds	r3, #1
		if (netup)
 8001d34:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8001d36:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8001d38:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8001d3a:	b110      	cbz	r0, 8001d42 <HAL_TIM_PeriodElapsedCallback+0x5a>
			statuspkt.netuptime++;
 8001d3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001d3e:	3301      	adds	r3, #1
 8001d40:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b983      	cbnz	r3, 8001d6a <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8001d4a:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8001d4c:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8001d4e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
  /* USER CODE END Callback 1 */
}
 8001d52:	bd10      	pop	{r4, pc}
		ADC_Conv_complete();			// It is a one-shot
 8001d54:	f7fe bd92 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	4815      	ldr	r0, [pc, #84]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001d62:	f01e bc19 	b.w	8020598 <iprintf>
    HAL_IncTick();
 8001d66:	f003 bb09 	b.w	800537c <HAL_IncTick>
			statuspkt.gpsuptime++;
 8001d6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch();
 8001d70:	f001 f834 	bl	8002ddc <calcepoch>
				epochvalid = 1;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001d76:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();
 8001d78:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8001d7c:	701a      	strb	r2, [r3, #0]
}
 8001d7e:	bd10      	pop	{r4, pc}
 8001d80:	40002000 	.word	0x40002000
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40001000 	.word	0x40001000
 8001d90:	40001800 	.word	0x40001800
 8001d94:	080249e0 	.word	0x080249e0
 8001d98:	200015f4 	.word	0x200015f4
 8001d9c:	080249c4 	.word	0x080249c4
 8001da0:	200015f8 	.word	0x200015f8
 8001da4:	20022778 	.word	0x20022778
 8001da8:	2000070a 	.word	0x2000070a
 8001dac:	2000164d 	.word	0x2000164d
 8001db0:	2000164c 	.word	0x2000164c
 8001db4:	20022824 	.word	0x20022824
 8001db8:	080249a0 	.word	0x080249a0

08001dbc <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8001dbc:	4c02      	ldr	r4, [pc, #8]	; (8001dc8 <Error_Handler+0xc>)
{
 8001dbe:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f01e fc71 	bl	80206a8 <puts>
 8001dc6:	e7fb      	b.n	8001dc0 <Error_Handler+0x4>
 8001dc8:	08024978 	.word	0x08024978

08001dcc <SystemClock_Config>:
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dce:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd0:	2234      	movs	r2, #52	; 0x34
 8001dd2:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dda:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ddc:	f01d fc5d 	bl	801f69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de0:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de2:	2290      	movs	r2, #144	; 0x90
 8001de4:	a814      	add	r0, sp, #80	; 0x50
 8001de6:	4619      	mov	r1, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001dea:	2709      	movs	r7, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dec:	2501      	movs	r5, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001df2:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df6:	f01d fc50 	bl	801f69a <memset>
  HAL_PWR_EnableBkUpAccess();
 8001dfa:	f007 fd51 	bl	80098a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <SystemClock_Config+0xe4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <SystemClock_Config+0xe8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001e06:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001e0a:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e0c:	2104      	movs	r1, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e10:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001e14:	9200      	str	r2, [sp, #0]
 8001e16:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001e1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e20:	22d8      	movs	r2, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e22:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e24:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e26:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e2e:	9707      	str	r7, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e30:	950c      	str	r5, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001e36:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e38:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e3a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e3c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001e3e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e40:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f007 fd70 	bl	8009928 <HAL_RCC_OscConfig>
 8001e48:	bb78      	cbnz	r0, 8001eaa <SystemClock_Config+0xde>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e4a:	f007 fd31 	bl	80098b0 <HAL_PWREx_EnableOverDrive>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	bb58      	cbnz	r0, 8001eaa <SystemClock_Config+0xde>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e52:	210f      	movs	r1, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e54:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5e:	9102      	str	r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e60:	a802      	add	r0, sp, #8
 8001e62:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e64:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e6a:	f008 f835 	bl	8009ed8 <HAL_RCC_ClockConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b9d8      	cbnz	r0, 8001eaa <SystemClock_Config+0xde>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001e72:	4f11      	ldr	r7, [pc, #68]	; (8001eb8 <SystemClock_Config+0xec>)
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e74:	26c0      	movs	r6, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001e76:	2103      	movs	r1, #3
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001e78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001e7e:	951e      	str	r5, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001e80:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001e82:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001e84:	9714      	str	r7, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e86:	9619      	str	r6, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001e88:	911c      	str	r1, [sp, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001e8a:	9233      	str	r2, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001e8c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e90:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001e94:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001e98:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e9c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea0:	f008 f982 	bl	800a1a8 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	b908      	cbnz	r0, 8001eaa <SystemClock_Config+0xde>
}
 8001ea6:	b039      	add	sp, #228	; 0xe4
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8001eaa:	f7ff ff87 	bl	8001dbc <Error_Handler>
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	0022df80 	.word	0x0022df80

08001ebc <main>:
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0dc      	sub	sp, #368	; 0x170
 8001ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ec4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ec8:	4bb5      	ldr	r3, [pc, #724]	; (80021a0 <main+0x2e4>)
 8001eca:	2400      	movs	r4, #0
 8001ecc:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ed4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ede:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee4:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ee8:	4dae      	ldr	r5, [pc, #696]	; (80021a4 <main+0x2e8>)
  HAL_Init();
 8001eea:	f003 fa35 	bl	8005358 <HAL_Init>
  SystemClock_Config();
 8001eee:	f7ff ff6d 	bl	8001dcc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	9455      	str	r4, [sp, #340]	; 0x154
 8001ef4:	9456      	str	r4, [sp, #344]	; 0x158
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001efc:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2601      	movs	r6, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f02:	9459      	str	r4, [sp, #356]	; 0x164
  GPIO_InitStruct.Pin = probe1_Pin;
 8001f04:	4689      	mov	r9, r1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f08:	f04f 0802 	mov.w	r8, #2
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001f0c:	48a6      	ldr	r0, [pc, #664]	; (80021a8 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0e:	2703      	movs	r7, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f10:	f043 0310 	orr.w	r3, r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f14:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80021d0 <main+0x314>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f18:	632b      	str	r3, [r5, #48]	; 0x30
 8001f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	9303      	str	r3, [sp, #12]
 8001f22:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	632b      	str	r3, [r5, #48]	; 0x30
 8001f2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	9304      	str	r3, [sp, #16]
 8001f34:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	632b      	str	r3, [r5, #48]	; 0x30
 8001f3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	9305      	str	r3, [sp, #20]
 8001f46:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4e:	632b      	str	r3, [r5, #48]	; 0x30
 8001f50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	9306      	str	r3, [sp, #24]
 8001f58:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	632b      	str	r3, [r5, #48]	; 0x30
 8001f62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	9307      	str	r3, [sp, #28]
 8001f6a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	632b      	str	r3, [r5, #48]	; 0x30
 8001f74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	9308      	str	r3, [sp, #32]
 8001f7c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f84:	632b      	str	r3, [r5, #48]	; 0x30
 8001f86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	632b      	str	r3, [r5, #48]	; 0x30
 8001f98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8001fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8001fa2:	f006 f9a1 	bl	80082e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001fa6:	4622      	mov	r2, r4
 8001fa8:	f644 0181 	movw	r1, #18561	; 0x4881
 8001fac:	487f      	ldr	r0, [pc, #508]	; (80021ac <main+0x2f0>)
 8001fae:	f006 f99b 	bl	80082e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	f24d 4101 	movw	r1, #54273	; 0xd401
 8001fb8:	487d      	ldr	r0, [pc, #500]	; (80021b0 <main+0x2f4>)
 8001fba:	f006 f995 	bl	80082e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001fc4:	487b      	ldr	r0, [pc, #492]	; (80021b4 <main+0x2f8>)
 8001fc6:	f006 f98f 	bl	80082e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001fca:	4622      	mov	r2, r4
 8001fcc:	2144      	movs	r1, #68	; 0x44
 8001fce:	487a      	ldr	r0, [pc, #488]	; (80021b8 <main+0x2fc>)
 8001fd0:	f006 f98a 	bl	80082e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	4641      	mov	r1, r8
 8001fd8:	4876      	ldr	r0, [pc, #472]	; (80021b4 <main+0x2f8>)
 8001fda:	f006 f985 	bl	80082e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001fde:	f642 138a 	movw	r3, #10634	; 0x298a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe2:	a955      	add	r1, sp, #340	; 0x154
 8001fe4:	4872      	ldr	r0, [pc, #456]	; (80021b0 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001fe6:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	9756      	str	r7, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fec:	f005 ffc6 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	a955      	add	r1, sp, #340	; 0x154
 8001ff6:	4871      	ldr	r0, [pc, #452]	; (80021bc <main+0x300>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ff8:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffc:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002000:	f005 ffbc 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002004:	f643 433c 	movw	r3, #15420	; 0x3c3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002008:	a955      	add	r1, sp, #340	; 0x154
 800200a:	4867      	ldr	r0, [pc, #412]	; (80021a8 <main+0x2ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800200c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002012:	f005 ffb3 	bl	8007f7c <HAL_GPIO_Init>
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002016:	a955      	add	r1, sp, #340	; 0x154
 8002018:	4863      	ldr	r0, [pc, #396]	; (80021a8 <main+0x2ec>)
  GPIO_InitStruct.Pin = probe1_Pin;
 800201a:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002026:	f005 ffa9 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f240 3301 	movw	r3, #769	; 0x301
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	a955      	add	r1, sp, #340	; 0x154
 8002030:	4862      	ldr	r0, [pc, #392]	; (80021bc <main+0x300>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8002032:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002038:	f005 ffa0 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 800203c:	f644 0381 	movw	r3, #18561	; 0x4881
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	a955      	add	r1, sp, #340	; 0x154
 8002042:	485a      	ldr	r0, [pc, #360]	; (80021ac <main+0x2f0>)
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8002044:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f005 ff96 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002050:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	a955      	add	r1, sp, #340	; 0x154
 8002054:	4855      	ldr	r0, [pc, #340]	; (80021ac <main+0x2f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002056:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002058:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f005 ff8e 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002060:	f24d 433b 	movw	r3, #54331	; 0xd43b
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002064:	a955      	add	r1, sp, #340	; 0x154
 8002066:	4854      	ldr	r0, [pc, #336]	; (80021b8 <main+0x2fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002068:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206e:	f005 ff85 	bl	8007f7c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002072:	a955      	add	r1, sp, #340	; 0x154
 8002074:	484e      	ldr	r0, [pc, #312]	; (80021b0 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002076:	f8cd 9154 	str.w	r9, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800207a:	f8cd a158 	str.w	sl, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002080:	f005 ff7c 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 8002084:	f24d 4301 	movw	r3, #54273	; 0xd401
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002088:	a955      	add	r1, sp, #340	; 0x154
 800208a:	4849      	ldr	r0, [pc, #292]	; (80021b0 <main+0x2f4>)
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|XBEE_RST_Pin
 800208c:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002094:	f005 ff72 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002098:	f240 4385 	movw	r3, #1157	; 0x485
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209c:	a955      	add	r1, sp, #340	; 0x154
 800209e:	4845      	ldr	r0, [pc, #276]	; (80021b4 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 80020a0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a2:	9756      	str	r7, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	f005 ff69 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 80020aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ae:	a955      	add	r1, sp, #340	; 0x154
 80020b0:	4840      	ldr	r0, [pc, #256]	; (80021b4 <main+0x2f8>)
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 80020b2:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ba:	f005 ff5f 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 80020be:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c0:	a955      	add	r1, sp, #340	; 0x154
 80020c2:	483d      	ldr	r0, [pc, #244]	; (80021b8 <main+0x2fc>)
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 80020c4:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	9458      	str	r4, [sp, #352]	; 0x160
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020cc:	f005 ff56 	bl	8007f7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020d0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020d2:	a955      	add	r1, sp, #340	; 0x154
 80020d4:	4838      	ldr	r0, [pc, #224]	; (80021b8 <main+0x2fc>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020d6:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	9456      	str	r4, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	9457      	str	r4, [sp, #348]	; 0x15c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f005 ff4e 	bl	8007f7c <HAL_GPIO_Init>
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80020e0:	a955      	add	r1, sp, #340	; 0x154
 80020e2:	4834      	ldr	r0, [pc, #208]	; (80021b4 <main+0x2f8>)
  GPIO_InitStruct.Pin = probe2_Pin;
 80020e4:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	9656      	str	r6, [sp, #344]	; 0x158
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ea:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	f8cd 8160 	str.w	r8, [sp, #352]	; 0x160
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f005 ff44 	bl	8007f7c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020f6:	4622      	mov	r2, r4
 80020f8:	4621      	mov	r1, r4
 80020fa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002100:	632b      	str	r3, [r5, #48]	; 0x30
 8002102:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800210c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800210e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002112:	632b      	str	r3, [r5, #48]	; 0x30
 8002114:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800211e:	f003 fd99 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002122:	200b      	movs	r0, #11
 8002124:	f003 fddc 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8002128:	4622      	mov	r2, r4
 800212a:	2106      	movs	r1, #6
 800212c:	200c      	movs	r0, #12
 800212e:	f003 fd91 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002132:	200c      	movs	r0, #12
 8002134:	f003 fdd4 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8002138:	4622      	mov	r2, r4
 800213a:	2106      	movs	r1, #6
 800213c:	2010      	movs	r0, #16
 800213e:	f003 fd89 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002142:	2010      	movs	r0, #16
 8002144:	f003 fdcc 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002148:	4622      	mov	r2, r4
 800214a:	4621      	mov	r1, r4
 800214c:	202f      	movs	r0, #47	; 0x2f
 800214e:	f003 fd81 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002152:	202f      	movs	r0, #47	; 0x2f
 8002154:	f003 fdc4 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8002158:	4622      	mov	r2, r4
 800215a:	2106      	movs	r1, #6
 800215c:	2039      	movs	r0, #57	; 0x39
 800215e:	f003 fd79 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002162:	2039      	movs	r0, #57	; 0x39
 8002164:	f003 fdbc 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8002168:	4622      	mov	r2, r4
 800216a:	4641      	mov	r1, r8
 800216c:	203c      	movs	r0, #60	; 0x3c
 800216e:	f003 fd71 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002172:	203c      	movs	r0, #60	; 0x3c
 8002174:	f003 fdb4 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  hmdios.Instance = MDIOS;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <main+0x304>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <main+0x308>)
  if (HAL_MDIOS_Init(&hmdios) != HAL_OK)
 800217c:	4618      	mov	r0, r3
  hmdios.Instance = MDIOS;
 800217e:	601a      	str	r2, [r3, #0]
  hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 8002180:	e9c3 4401 	strd	r4, r4, [r3, #4]
  if (HAL_MDIOS_Init(&hmdios) != HAL_OK)
 8002184:	f006 fd54 	bl	8008c30 <HAL_MDIOS_Init>
 8002188:	2800      	cmp	r0, #0
 800218a:	f040 8490 	bne.w	8002aae <main+0xbf2>
 800218e:	4603      	mov	r3, r0
  huart2.Instance = USART2;
 8002190:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <main+0x30c>)
  huart2.Init.BaudRate = 115200;
 8002192:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <main+0x310>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002198:	250c      	movs	r5, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	60a0      	str	r0, [r4, #8]
 800219c:	e01a      	b.n	80021d4 <main+0x318>
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021800 	.word	0x40021800
 80021bc:	40020800 	.word	0x40020800
 80021c0:	20022e60 	.word	0x20022e60
 80021c4:	40017800 	.word	0x40017800
 80021c8:	20023128 	.word	0x20023128
 80021cc:	40004400 	.word	0x40004400
 80021d0:	10110000 	.word	0x10110000
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80021d4:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d6:	6165      	str	r5, [r4, #20]
  huart2.Init.BaudRate = 115200;
 80021d8:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80021dc:	461a      	mov	r2, r3
 80021de:	4619      	mov	r1, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e0:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80021ec:	f00c fb4a 	bl	800e884 <HAL_RS485Ex_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2800      	cmp	r0, #0
 80021f4:	f040 845b 	bne.w	8002aae <main+0xbf2>
  hadc1.Instance = ADC1;
 80021f8:	4caf      	ldr	r4, [pc, #700]	; (80024b8 <main+0x5fc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021fa:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hadc1.Instance = ADC1;
 80021fe:	49af      	ldr	r1, [pc, #700]	; (80024bc <main+0x600>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002200:	4aaf      	ldr	r2, [pc, #700]	; (80024c0 <main+0x604>)
  ADC_MultiModeTypeDef multimode = {0};
 8002202:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002204:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002206:	9345      	str	r3, [sp, #276]	; 0x114
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002208:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800220a:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800220c:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800220e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002212:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002214:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002216:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002218:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800221c:	6163      	str	r3, [r4, #20]
  hadc1.Instance = ADC1;
 800221e:	6021      	str	r1, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002220:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002222:	6065      	str	r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002224:	9346      	str	r3, [sp, #280]	; 0x118
 8002226:	9347      	str	r3, [sp, #284]	; 0x11c
 8002228:	9348      	str	r3, [sp, #288]	; 0x120
  ADC_MultiModeTypeDef multimode = {0};
 800222a:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800222e:	f003 f8c9 	bl	80053c4 <HAL_ADC_Init>
 8002232:	2800      	cmp	r0, #0
 8002234:	f040 843b 	bne.w	8002aae <main+0xbf2>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8002238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 800223c:	2217      	movs	r2, #23
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800223e:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002240:	a922      	add	r1, sp, #136	; 0x88
 8002242:	4620      	mov	r0, r4
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8002244:	9323      	str	r3, [sp, #140]	; 0x8c
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8002246:	9222      	str	r2, [sp, #136]	; 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002248:	f003 fc86 	bl	8005b58 <HAL_ADCEx_MultiModeConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2800      	cmp	r0, #0
 8002250:	f040 842d 	bne.w	8002aae <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002254:	4620      	mov	r0, r4
 8002256:	a945      	add	r1, sp, #276	; 0x114
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002258:	9347      	str	r3, [sp, #284]	; 0x11c
  sConfig.Channel = ADC_CHANNEL_3;
 800225a:	9745      	str	r7, [sp, #276]	; 0x114
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800225c:	9646      	str	r6, [sp, #280]	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225e:	f003 fb8f 	bl	8005980 <HAL_ADC_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2800      	cmp	r0, #0
 8002266:	f040 8422 	bne.w	8002aae <main+0xbf2>
  hadc2.Instance = ADC2;
 800226a:	4c96      	ldr	r4, [pc, #600]	; (80024c4 <main+0x608>)
 800226c:	4a96      	ldr	r2, [pc, #600]	; (80024c8 <main+0x60c>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800226e:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002270:	9341      	str	r3, [sp, #260]	; 0x104
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002272:	6123      	str	r3, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002274:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002278:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800227a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800227e:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002280:	9342      	str	r3, [sp, #264]	; 0x108
 8002282:	9343      	str	r3, [sp, #268]	; 0x10c
 8002284:	9344      	str	r3, [sp, #272]	; 0x110
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002286:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 8002288:	61e6      	str	r6, [r4, #28]
  hadc2.Instance = ADC2;
 800228a:	6022      	str	r2, [r4, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800228c:	e9c4 5301 	strd	r5, r3, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002290:	f003 f898 	bl	80053c4 <HAL_ADC_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2800      	cmp	r0, #0
 8002298:	f040 8409 	bne.w	8002aae <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800229c:	4620      	mov	r0, r4
 800229e:	a941      	add	r1, sp, #260	; 0x104
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022a0:	9343      	str	r3, [sp, #268]	; 0x10c
  sConfig.Channel = ADC_CHANNEL_3;
 80022a2:	9741      	str	r7, [sp, #260]	; 0x104
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022a4:	9642      	str	r6, [sp, #264]	; 0x108
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80022a6:	f003 fb6b 	bl	8005980 <HAL_ADC_ConfigChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2800      	cmp	r0, #0
 80022ae:	f040 83fe 	bne.w	8002aae <main+0xbf2>
  hadc3.Instance = ADC3;
 80022b2:	4c86      	ldr	r4, [pc, #536]	; (80024cc <main+0x610>)
 80022b4:	4a86      	ldr	r2, [pc, #536]	; (80024d0 <main+0x614>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80022b6:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022b8:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ba:	6123      	str	r3, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80022bc:	f884 3020 	strb.w	r3, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c0:	60e3      	str	r3, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80022c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022c6:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022c8:	9340      	str	r3, [sp, #256]	; 0x100
  hadc3.Init.ContinuousConvMode = ENABLE;
 80022ca:	61a6      	str	r6, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 80022cc:	61e6      	str	r6, [r4, #28]
  hadc3.Instance = ADC3;
 80022ce:	6022      	str	r2, [r4, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80022d0:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022d4:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022d8:	f003 f874 	bl	80053c4 <HAL_ADC_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2800      	cmp	r0, #0
 80022e0:	f040 83e5 	bne.w	8002aae <main+0xbf2>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022e4:	4620      	mov	r0, r4
 80022e6:	a93d      	add	r1, sp, #244	; 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022e8:	933f      	str	r3, [sp, #252]	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ea:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022ee:	f003 fb47 	bl	8005980 <HAL_ADC_ConfigChannel>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	f040 83db 	bne.w	8002aae <main+0xbf2>
  hrng.Instance = RNG;
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <main+0x618>)
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <main+0x61c>)
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80022fc:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 80022fe:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002300:	f008 fc32 	bl	800ab68 <HAL_RNG_Init>
 8002304:	2800      	cmp	r0, #0
 8002306:	f040 83d2 	bne.w	8002aae <main+0xbf2>
  htim6.Instance = TIM6;
 800230a:	4c74      	ldr	r4, [pc, #464]	; (80024dc <main+0x620>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 800230e:	4a74      	ldr	r2, [pc, #464]	; (80024e0 <main+0x624>)
  htim6.Init.Prescaler = 10800;
 8002310:	f642 2730 	movw	r7, #10800	; 0x2a30
  htim6.Init.Period = 10000;
 8002314:	f242 7510 	movw	r5, #10000	; 0x2710
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002318:	2680      	movs	r6, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800231a:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	60a3      	str	r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231e:	9321      	str	r3, [sp, #132]	; 0x84
  htim6.Init.Period = 10000;
 8002320:	60e5      	str	r5, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002322:	61a6      	str	r6, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  htim6.Init.Prescaler = 10800;
 8002328:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800232c:	f00a f858 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2800      	cmp	r0, #0
 8002334:	f040 83bb 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002338:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800233a:	a91f      	add	r1, sp, #124	; 0x7c
 800233c:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	9321      	str	r3, [sp, #132]	; 0x84
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002340:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002342:	f00b fb1b 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2800      	cmp	r0, #0
 800234a:	f040 83b0 	bne.w	8002aae <main+0xbf2>
  htim3.Instance = TIM3;
 800234e:	4c65      	ldr	r4, [pc, #404]	; (80024e4 <main+0x628>)
 8002350:	4a65      	ldr	r2, [pc, #404]	; (80024e8 <main+0x62c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	9039      	str	r0, [sp, #228]	; 0xe4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002354:	9055      	str	r0, [sp, #340]	; 0x154
 8002356:	9056      	str	r0, [sp, #344]	; 0x158
 8002358:	9057      	str	r0, [sp, #348]	; 0x15c
 800235a:	9058      	str	r0, [sp, #352]	; 0x160
 800235c:	9059      	str	r0, [sp, #356]	; 0x164
 800235e:	905a      	str	r0, [sp, #360]	; 0x168
 8002360:	905b      	str	r0, [sp, #364]	; 0x16c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002362:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 10800;
 8002364:	6067      	str	r7, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002368:	61a6      	str	r6, [r4, #24]
  htim3.Instance = TIM3;
 800236a:	6022      	str	r2, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800236c:	933c      	str	r3, [sp, #240]	; 0xf0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236e:	931e      	str	r3, [sp, #120]	; 0x78
  htim3.Init.Period = 10000;
 8002370:	e9c4 3502 	strd	r3, r5, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002374:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800237c:	f00a f830 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002380:	2800      	cmp	r0, #0
 8002382:	f040 8394 	bne.w	8002aae <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800238a:	a939      	add	r1, sp, #228	; 0xe4
 800238c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238e:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002390:	f009 fb38 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 8002394:	2800      	cmp	r0, #0
 8002396:	f040 838a 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800239a:	4620      	mov	r0, r4
 800239c:	f00a f99c 	bl	800c6d8 <HAL_TIM_PWM_Init>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	f040 8384 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a6:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023a8:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023aa:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ac:	4620      	mov	r0, r4
 80023ae:	f00b fae5 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	f040 837b 	bne.w	8002aae <main+0xbf2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b8:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 10;
 80023ba:	230a      	movs	r3, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023bc:	9057      	str	r0, [sp, #348]	; 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023be:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c0:	9059      	str	r0, [sp, #356]	; 0x164
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c2:	a955      	add	r1, sp, #340	; 0x154
 80023c4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c6:	9555      	str	r5, [sp, #340]	; 0x154
  sConfigOC.Pulse = 10;
 80023c8:	9356      	str	r3, [sp, #344]	; 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ca:	f00a fce7 	bl	800cd9c <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4605      	mov	r5, r0
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f040 836c 	bne.w	8002aae <main+0xbf2>
  HAL_TIM_MspPostInit(&htim3);
 80023d6:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 80023d8:	4c44      	ldr	r4, [pc, #272]	; (80024ec <main+0x630>)
  HAL_TIM_MspPostInit(&htim3);
 80023da:	f001 fed7 	bl	800418c <HAL_TIM_MspPostInit>
  htim7.Init.Period = 9600;
 80023de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  htim7.Instance = TIM7;
 80023e2:	4a43      	ldr	r2, [pc, #268]	; (80024f0 <main+0x634>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023e4:	4620      	mov	r0, r4
  htim7.Init.Period = 9600;
 80023e6:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023e8:	61a6      	str	r6, [r4, #24]
  htim7.Instance = TIM7;
 80023ea:	6022      	str	r2, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	951b      	str	r5, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f2:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023f6:	f009 fff3 	bl	800c3e0 <HAL_TIM_Base_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2800      	cmp	r0, #0
 80023fe:	f040 8356 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002402:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002404:	4620      	mov	r0, r4
 8002406:	a919      	add	r1, sp, #100	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	931b      	str	r3, [sp, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800240a:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800240c:	f00b fab6 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8002410:	4603      	mov	r3, r0
 8002412:	2800      	cmp	r0, #0
 8002414:	f040 834b 	bne.w	8002aae <main+0xbf2>
  htim1.Instance = TIM1;
 8002418:	4a36      	ldr	r2, [pc, #216]	; (80024f4 <main+0x638>)
  htim1.Init.Period = 65535;
 800241a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  htim1.Instance = TIM1;
 800241e:	4836      	ldr	r0, [pc, #216]	; (80024f8 <main+0x63c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002420:	9335      	str	r3, [sp, #212]	; 0xd4
  htim1.Instance = TIM1;
 8002422:	6010      	str	r0, [r2, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002424:	4610      	mov	r0, r2
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002426:	6193      	str	r3, [r2, #24]
  htim1.Init.Period = 65535;
 8002428:	60d1      	str	r1, [r2, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	9338      	str	r3, [sp, #224]	; 0xe0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242c:	9318      	str	r3, [sp, #96]	; 0x60
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	e9c2 3301 	strd	r3, r3, [r2, #4]
  htim1.Init.RepetitionCounter = 0;
 8002432:	e9c2 3304 	strd	r3, r3, [r2, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243a:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800243e:	f009 ffcf 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002442:	2800      	cmp	r0, #0
 8002444:	f040 8333 	bne.w	8002aae <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800244c:	a935      	add	r1, sp, #212	; 0xd4
 800244e:	4829      	ldr	r0, [pc, #164]	; (80024f4 <main+0x638>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002450:	9735      	str	r7, [sp, #212]	; 0xd4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002452:	f009 fad7 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 8002456:	2800      	cmp	r0, #0
 8002458:	f040 8329 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245c:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800245e:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002460:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002464:	4823      	ldr	r0, [pc, #140]	; (80024f4 <main+0x638>)
 8002466:	f00b fa89 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4602      	mov	r2, r0
 800246c:	2800      	cmp	r0, #0
 800246e:	f040 831e 	bne.w	8002aae <main+0xbf2>
  hcrc.Instance = CRC;
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <main+0x640>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002474:	2501      	movs	r5, #1
  hcrc.Instance = CRC;
 8002476:	4922      	ldr	r1, [pc, #136]	; (8002500 <main+0x644>)
 8002478:	8098      	strh	r0, [r3, #4]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800247a:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 800247c:	6019      	str	r1, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800247e:	621d      	str	r5, [r3, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002480:	e9c3 2205 	strd	r2, r2, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002484:	f003 fc40 	bl	8005d08 <HAL_CRC_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2800      	cmp	r0, #0
 800248c:	f040 830f 	bne.w	8002aae <main+0xbf2>
  htim2.Instance = TIM2;
 8002490:	4c1c      	ldr	r4, [pc, #112]	; (8002504 <main+0x648>)
 8002492:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 4000000000;
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <main+0x64c>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002498:	ae49      	add	r6, sp, #292	; 0x124
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800249c:	9049      	str	r0, [sp, #292]	; 0x124
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800249e:	4620      	mov	r0, r4
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024a0:	9331      	str	r3, [sp, #196]	; 0xc4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a4:	61a3      	str	r3, [r4, #24]
  htim2.Instance = TIM2;
 80024a6:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4000000000;
 80024a8:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	9330      	str	r3, [sp, #192]	; 0xc0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024ac:	934a      	str	r3, [sp, #296]	; 0x128
 80024ae:	934b      	str	r3, [sp, #300]	; 0x12c
 80024b0:	934c      	str	r3, [sp, #304]	; 0x130
 80024b2:	934d      	str	r3, [sp, #308]	; 0x134
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	9315      	str	r3, [sp, #84]	; 0x54
 80024b6:	e029      	b.n	800250c <main+0x650>
 80024b8:	20022dd0 	.word	0x20022dd0
 80024bc:	40012000 	.word	0x40012000
 80024c0:	0f000001 	.word	0x0f000001
 80024c4:	20022a8c 	.word	0x20022a8c
 80024c8:	40012100 	.word	0x40012100
 80024cc:	20022e18 	.word	0x20022e18
 80024d0:	40012200 	.word	0x40012200
 80024d4:	20022fd4 	.word	0x20022fd4
 80024d8:	50060800 	.word	0x50060800
 80024dc:	20022f50 	.word	0x20022f50
 80024e0:	40001000 	.word	0x40001000
 80024e4:	20022c4c 	.word	0x20022c4c
 80024e8:	40000400 	.word	0x40000400
 80024ec:	20023248 	.word	0x20023248
 80024f0:	40001400 	.word	0x40001400
 80024f4:	20022f90 	.word	0x20022f90
 80024f8:	40010000 	.word	0x40010000
 80024fc:	20022b34 	.word	0x20022b34
 8002500:	40023000 	.word	0x40023000
 8002504:	200230e8 	.word	0x200230e8
 8002508:	ee6b2800 	.word	0xee6b2800
  TIM_IC_InitTypeDef sConfigIC = {0};
 800250c:	9334      	str	r3, [sp, #208]	; 0xd0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002516:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  TIM_IC_InitTypeDef sConfigIC = {0};
 800251a:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800251e:	f009 ff5f 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002522:	2800      	cmp	r0, #0
 8002524:	f040 82c3 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002528:	a92d      	add	r1, sp, #180	; 0xb4
 800252a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	972d      	str	r7, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800252e:	f009 fa69 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 8002532:	2800      	cmp	r0, #0
 8002534:	f040 82bb 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002538:	4620      	mov	r0, r4
 800253a:	f00a f98b 	bl	800c854 <HAL_TIM_IC_Init>
 800253e:	2800      	cmp	r0, #0
 8002540:	f040 82b5 	bne.w	8002aae <main+0xbf2>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002544:	2704      	movs	r7, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002546:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002548:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800254a:	4631      	mov	r1, r6
  sSlaveConfig.TriggerFilter = 0;
 800254c:	904d      	str	r0, [sp, #308]	; 0x134
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800254e:	4620      	mov	r0, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002550:	9749      	str	r7, [sp, #292]	; 0x124
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002552:	934a      	str	r3, [sp, #296]	; 0x128
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002554:	f009 fd26 	bl	800bfa4 <HAL_TIM_SlaveConfigSynchro>
 8002558:	2800      	cmp	r0, #0
 800255a:	f040 82a8 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002560:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002564:	4620      	mov	r0, r4
 8002566:	f00b fa09 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2800      	cmp	r0, #0
 800256e:	f040 829e 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002572:	4602      	mov	r2, r0
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002574:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002576:	a931      	add	r1, sp, #196	; 0xc4
 8002578:	4620      	mov	r0, r4
  sConfigIC.ICFilter = 0;
 800257a:	9334      	str	r3, [sp, #208]	; 0xd0
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800257c:	e9cd 5332 	strd	r5, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	f00a fe36 	bl	800d1f0 <HAL_TIM_IC_ConfigChannel>
 8002584:	2800      	cmp	r0, #0
 8002586:	f040 8292 	bne.w	8002aae <main+0xbf2>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800258a:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800258c:	463a      	mov	r2, r7
 800258e:	4620      	mov	r0, r4
 8002590:	a931      	add	r1, sp, #196	; 0xc4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002592:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002594:	f00a fe2c 	bl	800d1f0 <HAL_TIM_IC_ConfigChannel>
 8002598:	2800      	cmp	r0, #0
 800259a:	f040 8288 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800259e:	a931      	add	r1, sp, #196	; 0xc4
 80025a0:	2208      	movs	r2, #8
 80025a2:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025a4:	9532      	str	r5, [sp, #200]	; 0xc8
 80025a6:	46a9      	mov	r9, r5
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80025a8:	f00a fe22 	bl	800d1f0 <HAL_TIM_IC_ConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2800      	cmp	r0, #0
 80025b0:	f040 827d 	bne.w	8002aae <main+0xbf2>
  huart6.Instance = USART6;
 80025b4:	4cc4      	ldr	r4, [pc, #784]	; (80028c8 <main+0xa0c>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80025b6:	2130      	movs	r1, #48	; 0x30
  huart6.Instance = USART6;
 80025b8:	48c4      	ldr	r0, [pc, #784]	; (80028cc <main+0xa10>)
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80025ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80025be:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  huart6.Init.BaudRate = 9600;
 80025c2:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025c6:	250c      	movs	r5, #12
  huart6.Instance = USART6;
 80025c8:	6020      	str	r0, [r4, #0]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80025ca:	6261      	str	r1, [r4, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80025cc:	4620      	mov	r0, r4
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80025ce:	63a2      	str	r2, [r4, #56]	; 0x38
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80025d0:	4619      	mov	r1, r3
 80025d2:	461a      	mov	r2, r3
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025d4:	60a3      	str	r3, [r4, #8]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d6:	6223      	str	r3, [r4, #32]
  huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80025d8:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  huart6.Init.BaudRate = 9600;
 80025dc:	6067      	str	r7, [r4, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025de:	6165      	str	r5, [r4, #20]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025e0:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80025e8:	f00c f94c 	bl	800e884 <HAL_RS485Ex_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2800      	cmp	r0, #0
 80025f0:	f040 825d 	bne.w	8002aae <main+0xbf2>
  hdac.Instance = DAC;
 80025f4:	4cb6      	ldr	r4, [pc, #728]	; (80028d0 <main+0xa14>)
 80025f6:	4ab7      	ldr	r2, [pc, #732]	; (80028d4 <main+0xa18>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80025f8:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 80025fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80025fc:	930c      	str	r3, [sp, #48]	; 0x30
  hdac.Instance = DAC;
 80025fe:	6022      	str	r2, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002600:	f003 fc44 	bl	8005e8c <HAL_DAC_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2800      	cmp	r0, #0
 8002608:	f040 8251 	bne.w	8002aae <main+0xbf2>
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800260c:	f04f 0c14 	mov.w	ip, #20
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002610:	4620      	mov	r0, r4
 8002612:	461a      	mov	r2, r3
 8002614:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002616:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8002618:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800261c:	f003 fd6a 	bl	80060f4 <HAL_DAC_ConfigChannel>
 8002620:	4680      	mov	r8, r0
 8002622:	2800      	cmp	r0, #0
 8002624:	f040 8243 	bne.w	8002aae <main+0xbf2>
  hi2c1.Instance = I2C1;
 8002628:	4cab      	ldr	r4, [pc, #684]	; (80028d8 <main+0xa1c>)
  MX_FATFS_Init();
 800262a:	f00c ff1d 	bl	800f468 <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 800262e:	4aab      	ldr	r2, [pc, #684]	; (80028dc <main+0xa20>)
  hi2c1.Init.Timing = 0x20404768;
 8002630:	4bab      	ldr	r3, [pc, #684]	; (80028e0 <main+0xa24>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002632:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 8002634:	f8c4 8008 	str.w	r8, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002638:	e9c4 9803 	strd	r9, r8, [r4, #12]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800263c:	e9c4 8805 	strd	r8, r8, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002640:	e9c4 8807 	strd	r8, r8, [r4, #28]
  hi2c1.Init.Timing = 0x20404768;
 8002644:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002648:	f005 ffe6 	bl	8008618 <HAL_I2C_Init>
 800264c:	4601      	mov	r1, r0
 800264e:	2800      	cmp	r0, #0
 8002650:	f040 822d 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002654:	4620      	mov	r0, r4
 8002656:	f006 fa43 	bl	8008ae0 <HAL_I2CEx_ConfigAnalogFilter>
 800265a:	4601      	mov	r1, r0
 800265c:	2800      	cmp	r0, #0
 800265e:	f040 8226 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002662:	4620      	mov	r0, r4
 8002664:	f006 fa8e 	bl	8008b84 <HAL_I2CEx_ConfigDigitalFilter>
 8002668:	2800      	cmp	r0, #0
 800266a:	f040 8220 	bne.w	8002aae <main+0xbf2>
  huart4.Instance = UART4;
 800266e:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <main+0xa28>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002670:	f44f 7240 	mov.w	r2, #768	; 0x300
  huart4.Instance = UART4;
 8002674:	499c      	ldr	r1, [pc, #624]	; (80028e8 <main+0xa2c>)
  huart4.Init.BaudRate = 115200;
 8002676:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267a:	6258      	str	r0, [r3, #36]	; 0x24
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800267c:	619a      	str	r2, [r3, #24]
  huart4.Instance = UART4;
 800267e:	6019      	str	r1, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002680:	f8c3 8004 	str.w	r8, [r3, #4]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002684:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002688:	e9c3 0504 	strd	r0, r5, [r3, #16]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268c:	e9c3 0007 	strd	r0, r0, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002690:	4618      	mov	r0, r3
 8002692:	f00c f821 	bl	800e6d8 <HAL_UART_Init>
 8002696:	4602      	mov	r2, r0
 8002698:	2800      	cmp	r0, #0
 800269a:	f040 8208 	bne.w	8002aae <main+0xbf2>
  huart5.Instance = UART5;
 800269e:	4b93      	ldr	r3, [pc, #588]	; (80028ec <main+0xa30>)
 80026a0:	4993      	ldr	r1, [pc, #588]	; (80028f0 <main+0xa34>)
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026a2:	4618      	mov	r0, r3
  huart5.Init.BaudRate = 9600; // 115200;
 80026a4:	605f      	str	r7, [r3, #4]
  huart5.Instance = UART5;
 80026a6:	6019      	str	r1, [r3, #0]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80026a8:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80026ac:	e9c3 2504 	strd	r2, r5, [r3, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b4:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026b8:	f00c f80e 	bl	800e6d8 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2800      	cmp	r0, #0
 80026c0:	f040 81f5 	bne.w	8002aae <main+0xbf2>
  huart7.Instance = UART7;
 80026c4:	4c8b      	ldr	r4, [pc, #556]	; (80028f4 <main+0xa38>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80026c6:	461a      	mov	r2, r3
  huart7.Instance = UART7;
 80026c8:	4f8b      	ldr	r7, [pc, #556]	; (80028f8 <main+0xa3c>)
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80026ca:	4619      	mov	r1, r3
 80026cc:	4620      	mov	r0, r4
  huart7.Init.BaudRate = 115200;
 80026ce:	f8c4 8004 	str.w	r8, [r4, #4]
  huart7.Instance = UART7;
 80026d2:	6027      	str	r7, [r4, #0]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80026d4:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80026d8:	e9c4 3504 	strd	r3, r5, [r4, #16]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80026dc:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80026e4:	f00c f8ce 	bl	800e884 <HAL_RS485Ex_Init>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f040 81e0 	bne.w	8002aae <main+0xbf2>
  huart3.Instance = USART3;
 80026ee:	4b83      	ldr	r3, [pc, #524]	; (80028fc <main+0xa40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026f0:	2400      	movs	r4, #0
  huart3.Instance = USART3;
 80026f2:	4883      	ldr	r0, [pc, #524]	; (8002900 <main+0xa44>)
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80026f4:	4622      	mov	r2, r4
 80026f6:	4621      	mov	r1, r4
  huart3.Instance = USART3;
 80026f8:	6018      	str	r0, [r3, #0]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80026fa:	4618      	mov	r0, r3
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026fc:	609c      	str	r4, [r3, #8]
  huart3.Init.BaudRate = 115200;
 80026fe:	f8c3 8004 	str.w	r8, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002702:	615d      	str	r5, [r3, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002704:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270c:	e9c3 4408 	strd	r4, r4, [r3, #32]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8002710:	f00c f864 	bl	800e7dc <HAL_MultiProcessor_Init>
 8002714:	2800      	cmp	r0, #0
 8002716:	f040 81ca 	bne.w	8002aae <main+0xbf2>
  hspi4.Instance = SPI4;
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <main+0xa48>)
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800271c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi4.Instance = SPI4;
 8002720:	4979      	ldr	r1, [pc, #484]	; (8002908 <main+0xa4c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002722:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002726:	f44f 7940 	mov.w	r9, #768	; 0x300
  hspi4.Init.CRCPolynomial = 7;
 800272a:	2707      	movs	r7, #7
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800272c:	2408      	movs	r4, #8
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800272e:	6098      	str	r0, [r3, #8]
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002730:	6318      	str	r0, [r3, #48]	; 0x30
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002732:	619a      	str	r2, [r3, #24]
  hspi4.Instance = SPI4;
 8002734:	6019      	str	r1, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002736:	605d      	str	r5, [r3, #4]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002738:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi4.Init.CRCPolynomial = 7;
 800273c:	62df      	str	r7, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800273e:	635c      	str	r4, [r3, #52]	; 0x34
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002740:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002744:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800274c:	4618      	mov	r0, r3
 800274e:	f008 fab1 	bl	800acb4 <HAL_SPI_Init>
 8002752:	4602      	mov	r2, r0
 8002754:	2800      	cmp	r0, #0
 8002756:	f040 81aa 	bne.w	8002aae <main+0xbf2>
  hspi3.Instance = SPI3;
 800275a:	4b6c      	ldr	r3, [pc, #432]	; (800290c <main+0xa50>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800275c:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi3.Instance = SPI3;
 8002760:	496b      	ldr	r1, [pc, #428]	; (8002910 <main+0xa54>)
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002762:	f8c3 900c 	str.w	r9, [r3, #12]
  hspi3.Instance = SPI3;
 8002766:	6019      	str	r1, [r3, #0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002768:	f8c3 8018 	str.w	r8, [r3, #24]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800276c:	e9c3 0001 	strd	r0, r0, [r3, #4]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002770:	4618      	mov	r0, r3
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002772:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002776:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi3.Init.CRCPolynomial = 7;
 800277a:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800277e:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002782:	f008 fa97 	bl	800acb4 <HAL_SPI_Init>
 8002786:	4602      	mov	r2, r0
 8002788:	2800      	cmp	r0, #0
 800278a:	f040 8190 	bne.w	8002aae <main+0xbf2>
  hspi2.Instance = SPI2;
 800278e:	4b61      	ldr	r3, [pc, #388]	; (8002914 <main+0xa58>)
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002790:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
  hspi2.Instance = SPI2;
 8002794:	f8df e198 	ldr.w	lr, [pc, #408]	; 8002930 <main+0xa74>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002798:	2138      	movs	r1, #56	; 0x38
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800279a:	f8c3 8018 	str.w	r8, [r3, #24]
  hspi2.Instance = SPI2;
 800279e:	f8c3 e000 	str.w	lr, [r3]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80027a2:	f8c3 c00c 	str.w	ip, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027a6:	61d9      	str	r1, [r3, #28]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027a8:	e9c3 5001 	strd	r5, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ac:	e9c3 0004 	strd	r0, r0, [r3, #16]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027b0:	4618      	mov	r0, r3
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b2:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi2.Init.CRCPolynomial = 7;
 80027b6:	e9c3 270a 	strd	r2, r7, [r3, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ba:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027be:	f008 fa79 	bl	800acb4 <HAL_SPI_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2800      	cmp	r0, #0
 80027c6:	f040 8172 	bne.w	8002aae <main+0xbf2>
  hi2c4.Instance = I2C4;
 80027ca:	4c53      	ldr	r4, [pc, #332]	; (8002918 <main+0xa5c>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027cc:	2501      	movs	r5, #1
  hi2c4.Instance = I2C4;
 80027ce:	4a53      	ldr	r2, [pc, #332]	; (800291c <main+0xa60>)
  hi2c4.Init.Timing = 0x20404768;
 80027d0:	4f43      	ldr	r7, [pc, #268]	; (80028e0 <main+0xa24>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80027d2:	4620      	mov	r0, r4
  hi2c4.Init.OwnAddress1 = 0;
 80027d4:	60a3      	str	r3, [r4, #8]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027d6:	6223      	str	r3, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d8:	60e5      	str	r5, [r4, #12]
  hi2c4.Init.OwnAddress2 = 0;
 80027da:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027de:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c4.Init.Timing = 0x20404768;
 80027e2:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80027e6:	f005 ff17 	bl	8008618 <HAL_I2C_Init>
 80027ea:	4601      	mov	r1, r0
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f040 815e 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027f2:	4620      	mov	r0, r4
 80027f4:	f006 f974 	bl	8008ae0 <HAL_I2CEx_ConfigAnalogFilter>
 80027f8:	4601      	mov	r1, r0
 80027fa:	2800      	cmp	r0, #0
 80027fc:	f040 8157 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002800:	4620      	mov	r0, r4
 8002802:	f006 f9bf 	bl	8008b84 <HAL_I2CEx_ConfigDigitalFilter>
 8002806:	4603      	mov	r3, r0
 8002808:	2800      	cmp	r0, #0
 800280a:	f040 8150 	bne.w	8002aae <main+0xbf2>
  hi2c2.Instance = I2C2;
 800280e:	4c44      	ldr	r4, [pc, #272]	; (8002920 <main+0xa64>)
 8002810:	4a44      	ldr	r2, [pc, #272]	; (8002924 <main+0xa68>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002812:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x20404768;
 8002814:	6067      	str	r7, [r4, #4]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002816:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 8002818:	6022      	str	r2, [r4, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281a:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 800281e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002822:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002826:	f005 fef7 	bl	8008618 <HAL_I2C_Init>
 800282a:	4601      	mov	r1, r0
 800282c:	2800      	cmp	r0, #0
 800282e:	f040 813e 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002832:	4620      	mov	r0, r4
 8002834:	f006 f954 	bl	8008ae0 <HAL_I2CEx_ConfigAnalogFilter>
 8002838:	4601      	mov	r1, r0
 800283a:	2800      	cmp	r0, #0
 800283c:	f040 8137 	bne.w	8002aae <main+0xbf2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002840:	4620      	mov	r0, r4
 8002842:	f006 f99f 	bl	8008b84 <HAL_I2CEx_ConfigDigitalFilter>
 8002846:	2800      	cmp	r0, #0
 8002848:	f040 8131 	bne.w	8002aae <main+0xbf2>
  htim4.Instance = TIM4;
 800284c:	4c36      	ldr	r4, [pc, #216]	; (8002928 <main+0xa6c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	2300      	movs	r3, #0
  htim4.Init.Period = 1100;
 8002850:	f240 424c 	movw	r2, #1100	; 0x44c
  htim4.Instance = TIM4;
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <main+0xa70>)
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002856:	2780      	movs	r7, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002858:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 800285a:	6021      	str	r1, [r4, #0]
  htim4.Init.Period = 1100;
 800285c:	60e2      	str	r2, [r4, #12]
  htim4.Init.Prescaler = 0;
 800285e:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002860:	9329      	str	r3, [sp, #164]	; 0xa4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002862:	934e      	str	r3, [sp, #312]	; 0x138
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	6123      	str	r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002868:	932c      	str	r3, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286a:	9312      	str	r3, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 800286c:	934f      	str	r3, [sp, #316]	; 0x13c
 800286e:	9350      	str	r3, [sp, #320]	; 0x140
 8002870:	9351      	str	r3, [sp, #324]	; 0x144
 8002872:	9352      	str	r3, [sp, #328]	; 0x148
 8002874:	9353      	str	r3, [sp, #332]	; 0x14c
 8002876:	9354      	str	r3, [sp, #336]	; 0x150
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002878:	61a7      	str	r7, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002882:	f009 fdad 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002886:	2800      	cmp	r0, #0
 8002888:	f040 8111 	bne.w	8002aae <main+0xbf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002890:	a929      	add	r1, sp, #164	; 0xa4
 8002892:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002894:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002898:	f009 f8b4 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 800289c:	2800      	cmp	r0, #0
 800289e:	f040 8106 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80028a2:	4620      	mov	r0, r4
 80028a4:	f009 fe5a 	bl	800c55c <HAL_TIM_OC_Init>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	f040 8100 	bne.w	8002aae <main+0xbf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80028ae:	2530      	movs	r5, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b0:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028b2:	a910      	add	r1, sp, #64	; 0x40
 80028b4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80028b6:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028b8:	f00b f860 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 80028bc:	4603      	mov	r3, r0
 80028be:	2800      	cmp	r0, #0
 80028c0:	f040 80f5 	bne.w	8002aae <main+0xbf2>
 80028c4:	e036      	b.n	8002934 <main+0xa78>
 80028c6:	bf00      	nop
 80028c8:	20022fe4 	.word	0x20022fe4
 80028cc:	40011400 	.word	0x40011400
 80028d0:	20022e70 	.word	0x20022e70
 80028d4:	40007400 	.word	0x40007400
 80028d8:	20022ad4 	.word	0x20022ad4
 80028dc:	40005400 	.word	0x40005400
 80028e0:	20404768 	.word	0x20404768
 80028e4:	20023064 	.word	0x20023064
 80028e8:	40004c00 	.word	0x40004c00
 80028ec:	20022d50 	.word	0x20022d50
 80028f0:	40005000 	.word	0x40005000
 80028f4:	2002294c 	.word	0x2002294c
 80028f8:	40007800 	.word	0x40007800
 80028fc:	20022a0c 	.word	0x20022a0c
 8002900:	40004800 	.word	0x40004800
 8002904:	20022e88 	.word	0x20022e88
 8002908:	40013400 	.word	0x40013400
 800290c:	20022c8c 	.word	0x20022c8c
 8002910:	40003c00 	.word	0x40003c00
 8002914:	200228e8 	.word	0x200228e8
 8002918:	2002283c 	.word	0x2002283c
 800291c:	40006000 	.word	0x40006000
 8002920:	20022b58 	.word	0x20022b58
 8002924:	40005800 	.word	0x40005800
 8002928:	200229cc 	.word	0x200229cc
 800292c:	40000800 	.word	0x40000800
 8002930:	40003800 	.word	0x40003800
  sConfigOC.Pulse = 550;
 8002934:	f240 2c26 	movw	ip, #550	; 0x226
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002938:	9050      	str	r0, [sp, #320]	; 0x140
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800293a:	2208      	movs	r2, #8
 800293c:	a94e      	add	r1, sp, #312	; 0x138
 800293e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002940:	954e      	str	r5, [sp, #312]	; 0x138
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002942:	9352      	str	r3, [sp, #328]	; 0x148
  sConfigOC.Pulse = 550;
 8002944:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002948:	f00a f8a8 	bl	800ca9c <HAL_TIM_OC_ConfigChannel>
 800294c:	4605      	mov	r5, r0
 800294e:	2800      	cmp	r0, #0
 8002950:	f040 80ad 	bne.w	8002aae <main+0xbf2>
  HAL_TIM_MspPostInit(&htim4);
 8002954:	4620      	mov	r0, r4
 8002956:	f001 fc19 	bl	800418c <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <main+0xbf8>)
 800295c:	4956      	ldr	r1, [pc, #344]	; (8002ab8 <main+0xbfc>)
  htim14.Init.Period = 10800;
 800295e:	f642 2230 	movw	r2, #10800	; 0x2a30
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002962:	4618      	mov	r0, r3
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	611d      	str	r5, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002966:	619f      	str	r7, [r3, #24]
  htim14.Instance = TIM14;
 8002968:	6019      	str	r1, [r3, #0]
  htim14.Init.Period = 10800;
 800296a:	60da      	str	r2, [r3, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	e9c3 5501 	strd	r5, r5, [r3, #4]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002970:	f009 fd36 	bl	800c3e0 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2800      	cmp	r0, #0
 8002978:	f040 8099 	bne.w	8002aae <main+0xbf2>
  htim5.Instance = TIM5;
 800297c:	4c4f      	ldr	r4, [pc, #316]	; (8002abc <main+0xc00>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800297e:	2110      	movs	r1, #16
  htim5.Init.Period = 4;
 8002980:	2204      	movs	r2, #4
  htim5.Instance = TIM5;
 8002982:	4f4f      	ldr	r7, [pc, #316]	; (8002ac0 <main+0xc04>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002984:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002986:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 0;
 8002988:	6063      	str	r3, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298a:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298c:	61a3      	str	r3, [r4, #24]
  htim5.Instance = TIM5;
 800298e:	6027      	str	r7, [r4, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002990:	9328      	str	r3, [sp, #160]	; 0xa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	930f      	str	r3, [sp, #60]	; 0x3c
  htim5.Init.Period = 4;
 8002994:	e9c4 1202 	strd	r1, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002998:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80029a0:	f009 fd1e 	bl	800c3e0 <HAL_TIM_Base_Init>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	f040 8082 	bne.w	8002aae <main+0xbf2>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80029aa:	a925      	add	r1, sp, #148	; 0x94
 80029ac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ae:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80029b2:	f009 f827 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d178      	bne.n	8002aae <main+0xbf2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029bc:	4620      	mov	r0, r4
 80029be:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029c4:	f00a ffda 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 80029c8:	4605      	mov	r5, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d16f      	bne.n	8002aae <main+0xbf2>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80029ce:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80029d0:	4602      	mov	r2, r0
 80029d2:	2107      	movs	r1, #7
 80029d4:	2026      	movs	r0, #38	; 0x26
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80029d6:	f043 0308 	orr.w	r3, r3, #8
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80029da:	4c3a      	ldr	r4, [pc, #232]	; (8002ac4 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80029dc:	603b      	str	r3, [r7, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80029de:	f003 f939 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029e2:	2026      	movs	r0, #38	; 0x26
 80029e4:	f003 f97c 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80029e8:	462a      	mov	r2, r5
 80029ea:	2106      	movs	r1, #6
 80029ec:	2047      	movs	r0, #71	; 0x47
 80029ee:	f003 f931 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80029f2:	2047      	movs	r0, #71	; 0x47
 80029f4:	f003 f974 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80029f8:	462a      	mov	r2, r5
 80029fa:	2106      	movs	r1, #6
 80029fc:	2012      	movs	r0, #18
 80029fe:	f003 f929 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a02:	2012      	movs	r0, #18
 8002a04:	f003 f96c 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002a08:	462a      	mov	r2, r5
 8002a0a:	2106      	movs	r1, #6
 8002a0c:	2028      	movs	r0, #40	; 0x28
 8002a0e:	f003 f921 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a12:	2028      	movs	r0, #40	; 0x28
 8002a14:	f003 f964 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8002a18:	462a      	mov	r2, r5
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	202d      	movs	r0, #45	; 0x2d
 8002a1e:	f003 f919 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a22:	202d      	movs	r0, #45	; 0x2d
 8002a24:	f003 f95c 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002a28:	a83d      	add	r0, sp, #244	; 0xf4
  osMutexDef(myMutex01);
 8002a2a:	e9cd 553d 	strd	r5, r5, [sp, #244]	; 0xf4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002a2e:	f00d ff23 	bl	8010878 <osMutexCreate>
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <main+0xc0c>)
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002a34:	2101      	movs	r1, #1
  osSemaphoreDef(ssicontent);
 8002a36:	9541      	str	r5, [sp, #260]	; 0x104
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8002a38:	6018      	str	r0, [r3, #0]
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002a3a:	a841      	add	r0, sp, #260	; 0x104
  osSemaphoreDef(ssicontent);
 8002a3c:	9542      	str	r5, [sp, #264]	; 0x108
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002a3e:	f00d ff77 	bl	8010930 <osSemaphoreCreate>
  osTimerDef(myTimer01, Callback01);
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <main+0xc10>)
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a44:	462a      	mov	r2, r5
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8002a46:	6020      	str	r0, [r4, #0]
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a48:	2101      	movs	r1, #1
 8002a4a:	a845      	add	r0, sp, #276	; 0x114
  osMessageQDef(myQueue01, 256, uint16_t);
 8002a4c:	4c20      	ldr	r4, [pc, #128]	; (8002ad0 <main+0xc14>)
  osTimerDef(myTimer01, Callback01);
 8002a4e:	9345      	str	r3, [sp, #276]	; 0x114
 8002a50:	9546      	str	r5, [sp, #280]	; 0x118
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a52:	f00d fef3 	bl	801083c <osTimerCreate>
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <main+0xc18>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002a58:	f104 0710 	add.w	r7, r4, #16
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a5c:	6018      	str	r0, [r3, #0]
  osMessageQDef(myQueue01, 256, uint16_t);
 8002a5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002a66:	4630      	mov	r0, r6
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f00d ffb9 	bl	80109e0 <osMessageCreate>
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <main+0xc1c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002a70:	ae4e      	add	r6, sp, #312	; 0x138
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002a72:	342c      	adds	r4, #44	; 0x2c
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8002a74:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8002a76:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a7a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002a7e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a82:	4629      	mov	r1, r5
 8002a84:	a84e      	add	r0, sp, #312	; 0x138
 8002a86:	f00d fea7 	bl	80107d8 <osThreadCreate>
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <main+0xc20>)
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002a8c:	ae55      	add	r6, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a8e:	6018      	str	r0, [r3, #0]
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 1024);
 8002a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a94:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a98:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	a855      	add	r0, sp, #340	; 0x154
 8002aa0:	f00d fe9a 	bl	80107d8 <osThreadCreate>
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <main+0xc24>)
 8002aa6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002aa8:	f00d fe88 	bl	80107bc <osKernelStart>
 8002aac:	e7fe      	b.n	8002aac <main+0xbf0>
    Error_Handler();
 8002aae:	f7ff f985 	bl	8001dbc <Error_Handler>
 8002ab2:	bf00      	nop
 8002ab4:	20023208 	.word	0x20023208
 8002ab8:	40002000 	.word	0x40002000
 8002abc:	20022bac 	.word	0x20022bac
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	20022f4c 	.word	0x20022f4c
 8002ac8:	20023288 	.word	0x20023288
 8002acc:	08001511 	.word	0x08001511
 8002ad0:	08024338 	.word	0x08024338
 8002ad4:	20022fd0 	.word	0x20022fd0
 8002ad8:	200230e4 	.word	0x200230e4
 8002adc:	20022838 	.word	0x20022838
 8002ae0:	20022b20 	.word	0x20022b20

08002ae4 <StartDefaultTask>:
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	b085      	sub	sp, #20
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002ae8:	f644 6625 	movw	r6, #20005	; 0x4e25
  MX_USB_DEVICE_Init();
 8002aec:	f01c f9c6 	bl	801ee7c <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002af0:	250a      	movs	r5, #10
  MX_LWIP_Init();
 8002af2:	f00c fcdd 	bl	800f4b0 <MX_LWIP_Init>
	printf("\n\n-------------------------------------------------------------------\n");
 8002af6:	4882      	ldr	r0, [pc, #520]	; (8002d00 <StartDefaultTask+0x21c>)
 8002af8:	f01d fdd6 	bl	80206a8 <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8002afc:	2400      	movs	r4, #0
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <StartDefaultTask+0x220>)
 8002b00:	4a81      	ldr	r2, [pc, #516]	; (8002d08 <StartDefaultTask+0x224>)
 8002b02:	4982      	ldr	r1, [pc, #520]	; (8002d0c <StartDefaultTask+0x228>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	6809      	ldr	r1, [r1, #0]
 8002b0a:	4881      	ldr	r0, [pc, #516]	; (8002d10 <StartDefaultTask+0x22c>)
 8002b0c:	9400      	str	r4, [sp, #0]
 8002b0e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002b12:	f01d fd41 	bl	8020598 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <StartDefaultTask+0x230>)
 8002b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b1c:	075b      	lsls	r3, r3, #29
 8002b1e:	d41d      	bmi.n	8002b5c <StartDefaultTask+0x78>
		printf("LAN interface appears disconnected\n\r");
 8002b20:	487d      	ldr	r0, [pc, #500]	; (8002d18 <StartDefaultTask+0x234>)
 8002b22:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002b24:	4d7d      	ldr	r5, [pc, #500]	; (8002d1c <StartDefaultTask+0x238>)
		printf("LAN interface appears disconnected\n\r");
 8002b26:	f01d fd37 	bl	8020598 <iprintf>
			osDelay(50);
 8002b2a:	2032      	movs	r0, #50	; 0x32
 8002b2c:	f00d fe7e 	bl	801082c <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002b30:	2201      	movs	r2, #1
 8002b32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b36:	4628      	mov	r0, r5
 8002b38:	f005 fbd6 	bl	80082e8 <HAL_GPIO_WritePin>
			osDelay(50);
 8002b3c:	2032      	movs	r0, #50	; 0x32
 8002b3e:	f00d fe75 	bl	801082c <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f005 fbcd 	bl	80082e8 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8002b4e:	3c01      	subs	r4, #1
 8002b50:	d1eb      	bne.n	8002b2a <StartDefaultTask+0x46>
		printf("************* REBOOTING **************\n");
 8002b52:	4873      	ldr	r0, [pc, #460]	; (8002d20 <StartDefaultTask+0x23c>)
 8002b54:	f01d fda8 	bl	80206a8 <puts>
		rebootme();
 8002b58:	f7ff f848 	bl	8001bec <rebootme>
	netif = netif_default;
 8002b5c:	4b71      	ldr	r3, [pc, #452]	; (8002d24 <StartDefaultTask+0x240>)
	globalfreeze = 0;		// Allow UDP streaming
 8002b5e:	4a72      	ldr	r2, [pc, #456]	; (8002d28 <StartDefaultTask+0x244>)
	netif = netif_default;
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4f72      	ldr	r7, [pc, #456]	; (8002d2c <StartDefaultTask+0x248>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002b64:	4618      	mov	r0, r3
 8002b66:	4972      	ldr	r1, [pc, #456]	; (8002d30 <StartDefaultTask+0x24c>)
	globalfreeze = 0;		// Allow UDP streaming
 8002b68:	6014      	str	r4, [r2, #0]
	netif = netif_default;
 8002b6a:	603b      	str	r3, [r7, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8002b6c:	f013 f98c 	bl	8015e88 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8002b70:	6838      	ldr	r0, [r7, #0]
 8002b72:	4970      	ldr	r1, [pc, #448]	; (8002d34 <StartDefaultTask+0x250>)
 8002b74:	f013 f944 	bl	8015e00 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <StartDefaultTask+0x254>)
	statuspkt.adctrigoff = TRIG_THRES;
 8002b7a:	2164      	movs	r1, #100	; 0x64
	statuspkt.bconf = 0x80000000;	// board config word
 8002b7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	statuspkt.uid = BUILDNO;		// 16 bits
 8002b80:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8002b84:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8002b88:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8002b8c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8002b8e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8002b90:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8002b92:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8002b94:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8002b98:	f8a3 1060 	strh.w	r1, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002b9c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8002b9e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002ba0:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0x80000000;	// board config word
 8002ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002ba8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8002bac:	4963      	ldr	r1, [pc, #396]	; (8002d3c <StartDefaultTask+0x258>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002bae:	f042 0201 	orr.w	r2, r2, #1
	t2cap[0] = 44444444;
 8002bb2:	4c63      	ldr	r4, [pc, #396]	; (8002d40 <StartDefaultTask+0x25c>)
	printf("*** TESTING BUILD USED ***\n");
 8002bb4:	4863      	ldr	r0, [pc, #396]	; (8002d44 <StartDefaultTask+0x260>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8002bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8002bba:	600c      	str	r4, [r1, #0]
	printf("*** TESTING BUILD USED ***\n");
 8002bbc:	f01d fd74 	bl	80206a8 <puts>
	stat = setupneo();
 8002bc0:	f000 fa16 	bl	8002ff0 <setupneo>
	if (stat != HAL_OK) {
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	f040 8097 	bne.w	8002cf8 <StartDefaultTask+0x214>
	initsplat();
 8002bca:	f000 fe91 	bl	80038f0 <initsplat>
	printf("Setting up timers\n");
 8002bce:	485e      	ldr	r0, [pc, #376]	; (8002d48 <StartDefaultTask+0x264>)
 8002bd0:	f01d fd6a 	bl	80206a8 <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <StartDefaultTask+0x268>)
 8002bd8:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002bda:	4c5d      	ldr	r4, [pc, #372]	; (8002d50 <StartDefaultTask+0x26c>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002bdc:	6810      	ldr	r0, [r2, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f00e f93a 	bl	8010e58 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8002be4:	485b      	ldr	r0, [pc, #364]	; (8002d54 <StartDefaultTask+0x270>)
 8002be6:	f008 fe87 	bl	800b8f8 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8002bea:	2200      	movs	r2, #0
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	f00a fc6e 	bl	800d4d0 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	f00a fc69 	bl	800d4d0 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8002bfe:	2200      	movs	r2, #0
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	210c      	movs	r1, #12
 8002c04:	f00a fc64 	bl	800d4d0 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f00a fde8 	bl	800d7e0 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8002c10:	2104      	movs	r1, #4
 8002c12:	4620      	mov	r0, r4
 8002c14:	f00a fde4 	bl	800d7e0 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8002c18:	210c      	movs	r1, #12
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f00a fde0 	bl	800d7e0 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8002c20:	4620      	mov	r0, r4
 8002c22:	2301      	movs	r3, #1
 8002c24:	4a45      	ldr	r2, [pc, #276]	; (8002d3c <StartDefaultTask+0x258>)
 8002c26:	2108      	movs	r1, #8
 8002c28:	f00a fcb0 	bl	800d58c <HAL_TIM_IC_Start_DMA>
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d15c      	bne.n	8002cec <StartDefaultTask+0x208>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	2108      	movs	r1, #8
	myip = ip.addr;
 8002c38:	4c47      	ldr	r4, [pc, #284]	; (8002d58 <StartDefaultTask+0x274>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8002c3a:	f00a fc49 	bl	800d4d0 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8002c3e:	683b      	ldr	r3, [r7, #0]
	printf("*****************************************\n");
 8002c40:	4846      	ldr	r0, [pc, #280]	; (8002d5c <StartDefaultTask+0x278>)
	ip = dhcp->offered_ip_addr;
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 8002c44:	4e46      	ldr	r6, [pc, #280]	; (8002d60 <StartDefaultTask+0x27c>)
	myip = ip.addr;
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 8002c4a:	f01d fd2d 	bl	80206a8 <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002c4e:	6821      	ldr	r1, [r4, #0]
 8002c50:	4844      	ldr	r0, [pc, #272]	; (8002d64 <StartDefaultTask+0x280>)
 8002c52:	0e0a      	lsrs	r2, r1, #24
 8002c54:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 8002c58:	4c43      	ldr	r4, [pc, #268]	; (8002d68 <StartDefaultTask+0x284>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002c60:	b2c9      	uxtb	r1, r1
 8002c62:	f01d fc99 	bl	8020598 <iprintf>
	printf("*****************************************\n");
 8002c66:	483d      	ldr	r0, [pc, #244]	; (8002d5c <StartDefaultTask+0x278>)
 8002c68:	f01d fd1e 	bl	80206a8 <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8002c6c:	f002 fb0c 	bl	8005288 <initialapisn>
	osDelay(1000);
 8002c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c74:	f00d fdda 	bl	801082c <osDelay>
	printf("Starting httpd web server\n");
 8002c78:	483c      	ldr	r0, [pc, #240]	; (8002d6c <StartDefaultTask+0x288>)
 8002c7a:	f01d fd15 	bl	80206a8 <puts>
	httpd_init();		// start the www server
 8002c7e:	f011 fafd 	bl	801427c <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8002c82:	f002 faad 	bl	80051e0 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8002c86:	483a      	ldr	r0, [pc, #232]	; (8002d70 <StartDefaultTask+0x28c>)
 8002c88:	f01d fd0e 	bl	80206a8 <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4629      	mov	r1, r5
 8002c90:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	4837      	ldr	r0, [pc, #220]	; (8002d74 <StartDefaultTask+0x290>)
 8002c98:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <StartDefaultTask+0x294>)
 8002c9a:	f003 f91b 	bl	8005ed4 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 8002c9e:	4837      	ldr	r0, [pc, #220]	; (8002d7c <StartDefaultTask+0x298>)
 8002ca0:	f008 fda8 	bl	800b7f4 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8002ca4:	f00f f994 	bl	8011fd0 <xTaskGetCurrentTaskHandle>
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <StartDefaultTask+0x29c>)
 8002caa:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8002cac:	f001 fee4 	bl	8004a78 <locateudp>
 8002cb0:	6030      	str	r0, [r6, #0]
	printf("initilising LCD\n");
 8002cb2:	4834      	ldr	r0, [pc, #208]	; (8002d84 <StartDefaultTask+0x2a0>)
 8002cb4:	f01d fcf8 	bl	80206a8 <puts>
	lcd_init();
 8002cb8:	f7fe f9a8 	bl	800100c <lcd_init>
	main_init_done = 1; // let lptask now main has initialised
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <StartDefaultTask+0x2a4>)
 8002cbe:	2201      	movs	r2, #1
	printf("Waiting for lptask to start\n");
 8002cc0:	4832      	ldr	r0, [pc, #200]	; (8002d8c <StartDefaultTask+0x2a8>)
	main_init_done = 1; // let lptask now main has initialised
 8002cc2:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8002cc4:	f01d fcf0 	bl	80206a8 <puts>
	while (lptask_init_done == 0)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	b92b      	cbnz	r3, 8002cd8 <StartDefaultTask+0x1f4>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8002ccc:	2064      	movs	r0, #100	; 0x64
 8002cce:	f00d fdad 	bl	801082c <osDelay>
	while (lptask_init_done == 0)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f9      	beq.n	8002ccc <StartDefaultTask+0x1e8>
	startadc();		// start the ADC DMA loop
 8002cd8:	f7fd fef2 	bl	8000ac0 <startadc>
		startudp(uip);		// should never return
 8002cdc:	6830      	ldr	r0, [r6, #0]
 8002cde:	f001 feff 	bl	8004ae0 <startudp>
		printf("UDP stream exited!!!\n\r");
 8002ce2:	482b      	ldr	r0, [pc, #172]	; (8002d90 <StartDefaultTask+0x2ac>)
 8002ce4:	f01d fc58 	bl	8020598 <iprintf>
		rebootme();
 8002ce8:	f7fe ff80 	bl	8001bec <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8002cec:	4601      	mov	r1, r0
 8002cee:	4829      	ldr	r0, [pc, #164]	; (8002d94 <StartDefaultTask+0x2b0>)
 8002cf0:	f01d fc52 	bl	8020598 <iprintf>
		Error_Handler();
 8002cf4:	f7ff f862 	bl	8001dbc <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8002cf8:	4827      	ldr	r0, [pc, #156]	; (8002d98 <StartDefaultTask+0x2b4>)
 8002cfa:	f01d fc4d 	bl	8020598 <iprintf>
 8002cfe:	e764      	b.n	8002bca <StartDefaultTask+0xe6>
 8002d00:	08024cdc 	.word	0x08024cdc
 8002d04:	1ff0f428 	.word	0x1ff0f428
 8002d08:	1ff0f424 	.word	0x1ff0f424
 8002d0c:	1ff0f420 	.word	0x1ff0f420
 8002d10:	08024d24 	.word	0x08024d24
 8002d14:	20023900 	.word	0x20023900
 8002d18:	08024d5c 	.word	0x08024d5c
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	08024d84 	.word	0x08024d84
 8002d24:	200361e4 	.word	0x200361e4
 8002d28:	20023438 	.word	0x20023438
 8002d2c:	20022834 	.word	0x20022834
 8002d30:	08001c19 	.word	0x08001c19
 8002d34:	08001505 	.word	0x08001505
 8002d38:	20022778 	.word	0x20022778
 8002d3c:	20022824 	.word	0x20022824
 8002d40:	02a62b1c 	.word	0x02a62b1c
 8002d44:	08024dac 	.word	0x08024dac
 8002d48:	08024de8 	.word	0x08024de8
 8002d4c:	20022f4c 	.word	0x20022f4c
 8002d50:	200230e8 	.word	0x200230e8
 8002d54:	20022f50 	.word	0x20022f50
 8002d58:	20022ba8 	.word	0x20022ba8
 8002d5c:	08024e18 	.word	0x08024e18
 8002d60:	20022ba4 	.word	0x20022ba4
 8002d64:	08024e44 	.word	0x08024e44
 8002d68:	200015e8 	.word	0x200015e8
 8002d6c:	08024e6c 	.word	0x08024e6c
 8002d70:	08024e88 	.word	0x08024e88
 8002d74:	20022e70 	.word	0x20022e70
 8002d78:	08024f74 	.word	0x08024f74
 8002d7c:	20023248 	.word	0x20023248
 8002d80:	200007b0 	.word	0x200007b0
 8002d84:	08024ea4 	.word	0x08024ea4
 8002d88:	200015ec 	.word	0x200015ec
 8002d8c:	08024eb4 	.word	0x08024eb4
 8002d90:	08024ed0 	.word	0x08024ed0
 8002d94:	08024dfc 	.word	0x08024dfc
 8002d98:	08024dc8 	.word	0x08024dc8

08002d9c <assert_failed>:
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002da0:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8002da2:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8002da4:	b083      	sub	sp, #12
 8002da6:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8002da8:	d009      	beq.n	8002dbe <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8002daa:	230a      	movs	r3, #10
 8002dac:	2201      	movs	r2, #1
 8002dae:	a901      	add	r1, sp, #4
 8002db0:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <__io_putchar+0x34>)
 8002db2:	f00b fbef 	bl	800e594 <HAL_UART_Transmit>

	return ch;
	}
}
 8002db6:	9801      	ldr	r0, [sp, #4]
 8002db8:	b003      	add	sp, #12
 8002dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dbe:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4905      	ldr	r1, [pc, #20]	; (8002dd8 <__io_putchar+0x38>)
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <__io_putchar+0x34>)
 8002dc6:	f00b fbe5 	bl	800e594 <HAL_UART_Transmit>
}
 8002dca:	9801      	ldr	r0, [sp, #4]
 8002dcc:	b003      	add	sp, #12
 8002dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd2:	bf00      	nop
 8002dd4:	20023128 	.word	0x20023128
 8002dd8:	08025688 	.word	0x08025688

08002ddc <calcepoch>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002ddc:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <calcepoch+0x40>)
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch() {
 8002dde:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002de0:	8914      	ldrh	r4, [r2, #8]
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002de2:	f04f 35ff 	mov.w	r5, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002de6:	7a91      	ldrb	r1, [r2, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <calcepoch+0x44>)
 8002dea:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002dee:	4429      	add	r1, r5
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002df0:	621d      	str	r5, [r3, #32]

	epochtime = mktime(getgpstime());
 8002df2:	4618      	mov	r0, r3
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8002df4:	7ad5      	ldrb	r5, [r2, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8002df6:	615c      	str	r4, [r3, #20]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8002df8:	6119      	str	r1, [r3, #16]
	now.tm_hour = statuspkt.NavPvt.hour;
 8002dfa:	7b14      	ldrb	r4, [r2, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8002dfc:	7b51      	ldrb	r1, [r2, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8002dfe:	7b92      	ldrb	r2, [r2, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 8002e00:	e9c3 4502 	strd	r4, r5, [r3, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8002e04:	e9c3 2100 	strd	r2, r1, [r3]
	epochtime = mktime(getgpstime());
 8002e08:	f01c fd2a 	bl	801f860 <mktime>
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <calcepoch+0x48>)
 8002e0e:	4602      	mov	r2, r0
	return ((uint32_t) epochtime + (10 * 60 * 60));		// add ten hours
#else
    return((uint32_t)epochtime);
#endif

}
 8002e10:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8002e14:	e9c3 2100 	strd	r2, r1, [r3]
}
 8002e18:	4410      	add	r0, r2
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20022778 	.word	0x20022778
 8002e20:	200232f0 	.word	0x200232f0
 8002e24:	20023370 	.word	0x20023370

08002e28 <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8002e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002e2c:	4c20      	ldr	r4, [pc, #128]	; (8002eb0 <disableNmea+0x88>)
void disableNmea() {
 8002e2e:	b08e      	sub	sp, #56	; 0x38
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002e30:	4f20      	ldr	r7, [pc, #128]	; (8002eb4 <disableNmea+0x8c>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002e32:	ae04      	add	r6, sp, #16
 8002e34:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3a:	4635      	mov	r5, r6
 8002e3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e42:	e894 0003 	ldmia.w	r4, {r0, r1}
			{ 0xF0, 0x06 }, { 0xF0, 0x02 }, { 0xF0, 0x07 }, { 0xF0, 0x03 }, { 0xF0, 0x04 }, { 0xF0, 0x0E },
			{ 0xF0, 0x0F }, { 0xF0, 0x05 }, { 0xF0, 0x08 }, { 0xF1, 0x00 }, { 0xF1, 0x01 }, { 0xF1, 0x03 },
			{ 0xF1, 0x04 }, { 0xF1, 0x05 }, { 0xF1, 0x06 }, };

	// CFG-MSG packet buffer
	byte packet[] = { 0xB5, // sync char 1
 8002e46:	f104 0208 	add.w	r2, r4, #8
 8002e4a:	ab01      	add	r3, sp, #4
 8002e4c:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8002e50:	e886 0003 	stmia.w	r6, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8002e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e56:	0c16      	lsrs	r6, r2, #16
 8002e58:	c303      	stmia	r3!, {r0, r1}
 8002e5a:	f823 2b02 	strh.w	r2, [r3], #2
 8002e5e:	701e      	strb	r6, [r3, #0]
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8002e60:	2600      	movs	r6, #0
		packet[packetSize - 1] = 0x00;
 8002e62:	2200      	movs	r2, #0
			packet[payloadOffset + j] = messages[i][j];
 8002e64:	f895 c000 	ldrb.w	ip, [r5]
 8002e68:	7868      	ldrb	r0, [r5, #1]
 8002e6a:	f10d 0106 	add.w	r1, sp, #6
		packet[packetSize - 1] = 0x00;
 8002e6e:	4613      	mov	r3, r2
		packet[packetSize - 2] = 0x00;
 8002e70:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8002e74:	f88d 600e 	strb.w	r6, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8002e78:	f88d c00a 	strb.w	ip, [sp, #10]
 8002e7c:	f88d 000b 	strb.w	r0, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8002e80:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002e84:	4403      	add	r3, r0
		for (byte j = 0; j < packetSize - 4; j++) {
 8002e86:	428c      	cmp	r4, r1
			packet[packetSize - 2] += packet[2 + j];
 8002e88:	b2db      	uxtb	r3, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8002e8a:	441a      	add	r2, r3
			packet[packetSize - 2] += packet[2 + j];
 8002e8c:	f88d 300d 	strb.w	r3, [sp, #13]
			packet[packetSize - 1] += packet[packetSize - 2];
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f88d 200e 	strb.w	r2, [sp, #14]
		for (byte j = 0; j < packetSize - 4; j++) {
 8002e96:	d1f3      	bne.n	8002e80 <disableNmea+0x58>
 8002e98:	3502      	adds	r5, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002e9a:	2364      	movs	r3, #100	; 0x64
 8002e9c:	220b      	movs	r2, #11
 8002e9e:	a901      	add	r1, sp, #4
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	f00b fb77 	bl	800e594 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8002ea6:	45a8      	cmp	r8, r5
 8002ea8:	d1db      	bne.n	8002e62 <disableNmea+0x3a>
		}

		sendPacket(packet, packetSize);
	}
}
 8002eaa:	b00e      	add	sp, #56	; 0x38
 8002eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb0:	08024398 	.word	0x08024398
 8002eb4:	20022fe4 	.word	0x20022fe4

08002eb8 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8002eb8:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <changeFrequency+0x20>)
void changeFrequency() {
 8002ebc:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8002ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec0:	466c      	mov	r4, sp
 8002ec2:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002ec4:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8002ec6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002ec8:	4669      	mov	r1, sp
 8002eca:	2364      	movs	r3, #100	; 0x64
 8002ecc:	4803      	ldr	r0, [pc, #12]	; (8002edc <changeFrequency+0x24>)
 8002ece:	f00b fb61 	bl	800e594 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	bf00      	nop
 8002ed8:	080243e8 	.word	0x080243e8
 8002edc:	20022fe4 	.word	0x20022fe4

08002ee0 <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8002ee0:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8002ee2:	4d09      	ldr	r5, [pc, #36]	; (8002f08 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8002ee4:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8002ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee8:	ac01      	add	r4, sp, #4
 8002eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002ef4:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8002ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002efa:	222c      	movs	r2, #44	; 0x2c
 8002efc:	a901      	add	r1, sp, #4
 8002efe:	4803      	ldr	r0, [pc, #12]	; (8002f0c <disableUnnecessaryChannels+0x2c>)
 8002f00:	f00b fb48 	bl	800e594 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8002f04:	b00d      	add	sp, #52	; 0x34
 8002f06:	bd30      	pop	{r4, r5, pc}
 8002f08:	080243f8 	.word	0x080243f8
 8002f0c:	20022fe4 	.word	0x20022fe4

08002f10 <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 8002f10:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <enableNavPvt+0x24>)
void enableNavPvt() {
 8002f14:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f16:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8002f18:	ac01      	add	r4, sp, #4
 8002f1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f1c:	c403      	stmia	r4!, {r0, r1}
 8002f1e:	0c15      	lsrs	r5, r2, #16
 8002f20:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f24:	a901      	add	r1, sp, #4
 8002f26:	220b      	movs	r2, #11
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8002f2a:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f2c:	f00b fb32 	bl	800e594 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8002f30:	b005      	add	sp, #20
 8002f32:	bd30      	pop	{r4, r5, pc}
 8002f34:	08024424 	.word	0x08024424
 8002f38:	20022fe4 	.word	0x20022fe4

08002f3c <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8002f3c:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002f3e:	4d09      	ldr	r5, [pc, #36]	; (8002f64 <enableNaTP5+0x28>)
void enableNaTP5() {
 8002f40:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f44:	466c      	mov	r4, sp
 8002f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4c:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f50:	2364      	movs	r3, #100	; 0x64
 8002f52:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8002f54:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8002f58:	4669      	mov	r1, sp
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <enableNaTP5+0x2c>)
 8002f5c:	f00b fb1a 	bl	800e594 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8002f60:	b00b      	add	sp, #44	; 0x2c
 8002f62:	bd30      	pop	{r4, r5, pc}
 8002f64:	08024430 	.word	0x08024430
 8002f68:	20022fe4 	.word	0x20022fe4

08002f6c <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8002f6c:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8002f6e:	4d1c      	ldr	r5, [pc, #112]	; (8002fe0 <IsPacketReady+0x74>)
 8002f70:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d809      	bhi.n	8002f8a <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <IsPacketReady+0x78>)
 8002f78:	4619      	mov	r1, r3
 8002f7a:	5cd2      	ldrb	r2, [r2, r3]
 8002f7c:	4282      	cmp	r2, r0
 8002f7e:	d00e      	beq.n	8002f9e <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 8002f80:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 8002f82:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8002f84:	70eb      	strb	r3, [r5, #3]
}
 8002f86:	bc70      	pop	{r4, r5, r6}
 8002f88:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 8002f8a:	2b5b      	cmp	r3, #91	; 0x5b
 8002f8c:	d8f9      	bhi.n	8002f82 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4e15      	ldr	r6, [pc, #84]	; (8002fe8 <IsPacketReady+0x7c>)
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 8002f96:	2a5c      	cmp	r2, #92	; 0x5c
 8002f98:	d006      	beq.n	8002fa8 <IsPacketReady+0x3c>
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	e7f1      	b.n	8002f82 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <IsPacketReady+0x7c>)
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	5442      	strb	r2, [r0, r1]
 8002fa6:	e7ec      	b.n	8002f82 <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	1c71      	adds	r1, r6, #1
 8002fac:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 8002fb0:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 8002fb2:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 8002fb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002fb8:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8002fba:	428c      	cmp	r4, r1
		CK_A = CK_A + PACKETstore[i];
 8002fbc:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8002fbe:	441a      	add	r2, r3
 8002fc0:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8002fc2:	d1f7      	bne.n	8002fb4 <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 8002fc4:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	d1d9      	bne.n	8002f80 <IsPacketReady+0x14>
 8002fcc:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d1d5      	bne.n	8002f80 <IsPacketReady+0x14>
					gpsgood = 1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <IsPacketReady+0x80>)
					return true;
 8002fd8:	4618      	mov	r0, r3
					gpsgood = 1;
 8002fda:	6013      	str	r3, [r2, #0]
					return true;
 8002fdc:	e7d3      	b.n	8002f86 <IsPacketReady+0x1a>
 8002fde:	bf00      	nop
 8002fe0:	20000234 	.word	0x20000234
 8002fe4:	080256dc 	.word	0x080256dc
 8002fe8:	2002337c 	.word	0x2002337c
 8002fec:	20001608 	.word	0x20001608

08002ff0 <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 8002ff0:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8002ff2:	f7ff ff19 	bl	8002e28 <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4912      	ldr	r1, [pc, #72]	; (8003044 <setupneo+0x54>)
 8002ffa:	4813      	ldr	r0, [pc, #76]	; (8003048 <setupneo+0x58>)
 8002ffc:	f00a fe02 	bl	800dc04 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8003000:	4604      	mov	r4, r0
 8003002:	b9d0      	cbnz	r0, 800303a <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8003004:	4811      	ldr	r0, [pc, #68]	; (800304c <setupneo+0x5c>)
 8003006:	f01d fac7 	bl	8020598 <iprintf>

	changeFrequency();
 800300a:	f7ff ff55 	bl	8002eb8 <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 800300e:	4810      	ldr	r0, [pc, #64]	; (8003050 <setupneo+0x60>)
 8003010:	f01d fb4a 	bl	80206a8 <puts>
	disableUnnecessaryChannels();
 8003014:	f7ff ff64 	bl	8002ee0 <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <setupneo+0x64>)
 800301a:	f01d fabd 	bl	8020598 <iprintf>
	enableNavPvt();
 800301e:	f7ff ff77 	bl	8002f10 <enableNavPvt>
	osDelay(100);
 8003022:	2064      	movs	r0, #100	; 0x64
 8003024:	f00d fc02 	bl	801082c <osDelay>
// Enable Time pulse
	enableNaTP5();
 8003028:	f7ff ff88 	bl	8002f3c <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 800302e:	480b      	ldr	r0, [pc, #44]	; (800305c <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003030:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8003032:	f01d fab1 	bl	8020598 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8003036:	4620      	mov	r0, r4
 8003038:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <setupneo+0x70>)
 800303c:	f01d fb34 	bl	80206a8 <puts>
}
 8003040:	4620      	mov	r0, r4
 8003042:	bd10      	pop	{r4, pc}
 8003044:	2000160c 	.word	0x2000160c
 8003048:	20022fe4 	.word	0x20022fe4
 800304c:	08025700 	.word	0x08025700
 8003050:	08025730 	.word	0x08025730
 8003054:	08025758 	.word	0x08025758
 8003058:	20022778 	.word	0x20022778
 800305c:	0802577c 	.word	0x0802577c
 8003060:	080256e0 	.word	0x080256e0

08003064 <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 8003064:	6803      	ldr	r3, [r0, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_UART_RxCpltCallback+0x64>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_UART_RxCpltCallback+0x18>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		if (huart->Instance == UART5) {
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_UART_RxCpltCallback+0x68>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d002      	beq.n	8003078 <HAL_UART_RxCpltCallback+0x14>
			uart5_rxdone();
		}
		else
		printf("USART unknown uart int\n");
 8003072:	4817      	ldr	r0, [pc, #92]	; (80030d0 <HAL_UART_RxCpltCallback+0x6c>)
 8003074:	f01d bb18 	b.w	80206a8 <puts>
			uart5_rxdone();
 8003078:	f7fd bfc2 	b.w	8001000 <uart5_rxdone>
		data = rxdatabuf[0];
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_UART_RxCpltCallback+0x70>)
		flag = 1;
 800307e:	2101      	movs	r1, #1
 8003080:	4a15      	ldr	r2, [pc, #84]	; (80030d8 <HAL_UART_RxCpltCallback+0x74>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003082:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4c15      	ldr	r4, [pc, #84]	; (80030dc <HAL_UART_RxCpltCallback+0x78>)
		if (IsPacketReady(data)) {
 8003088:	4618      	mov	r0, r3
		flag = 1;
 800308a:	6011      	str	r1, [r2, #0]
		data = rxdatabuf[0];
 800308c:	7023      	strb	r3, [r4, #0]
		if (IsPacketReady(data)) {
 800308e:	f7ff ff6d 	bl	8002f6c <IsPacketReady>
 8003092:	b180      	cbz	r0, 80030b6 <HAL_UART_RxCpltCallback+0x52>
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_UART_RxCpltCallback+0x7c>)
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_UART_RxCpltCallback+0x80>)
 8003098:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 800309c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 80030a0:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 80030a2:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 80030a6:	d1f9      	bne.n	800309c <HAL_UART_RxCpltCallback+0x38>
			if (statuspkt.NavPvt.flags & 1) { // locked
 80030a8:	4c0f      	ldr	r4, [pc, #60]	; (80030e8 <HAL_UART_RxCpltCallback+0x84>)
 80030aa:	7e63      	ldrb	r3, [r4, #25]
 80030ac:	f013 0301 	ands.w	r3, r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_UART_RxCpltCallback+0x54>
				gpslocked = 0;
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <HAL_UART_RxCpltCallback+0x88>)
 80030b4:	7013      	strb	r3, [r2, #0]
	}
}
 80030b6:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 80030b8:	f7ff fe90 	bl	8002ddc <calcepoch>
				gpslocked = 1;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_UART_RxCpltCallback+0x88>)
 80030be:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch();// should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 80030c0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 80030c4:	701a      	strb	r2, [r3, #0]
}
 80030c6:	bd10      	pop	{r4, pc}
 80030c8:	40011400 	.word	0x40011400
 80030cc:	40005000 	.word	0x40005000
 80030d0:	080256c4 	.word	0x080256c4
 80030d4:	2000160c 	.word	0x2000160c
 80030d8:	20001604 	.word	0x20001604
 80030dc:	20023378 	.word	0x20023378
 80030e0:	20023381 	.word	0x20023381
 80030e4:	2002277b 	.word	0x2002277b
 80030e8:	20022778 	.word	0x20022778
 80030ec:	2000164d 	.word	0x2000164d

080030f0 <HAL_UART_ErrorCallback>:

HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
	HAL_StatusTypeDef stat;
	uint8_t ch;

	if (huart->Instance == USART6) { 		// GPS  UART
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <HAL_UART_ErrorCallback+0x40>)
 80030f2:	6803      	ldr	r3, [r0, #0]
 80030f4:	4293      	cmp	r3, r2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80030f6:	b510      	push	{r4, lr}
 80030f8:	4604      	mov	r4, r0
	if (huart->Instance == USART6) { 		// GPS  UART
 80030fa:	d013      	beq.n	8003124 <HAL_UART_ErrorCallback+0x34>
	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
	}
	if (huart->Instance == UART5) { 			//LCD UART
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_UART_ErrorCallback+0x44>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d008      	beq.n	8003114 <HAL_UART_ErrorCallback+0x24>
	printf("LCD UART_Err Callback %0lx\n", huart->ErrorCode);
	lcd_init();
	}
	// whatever the error try to clear it blindly
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003102:	2402      	movs	r4, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003104:	2004      	movs	r0, #4
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003106:	2108      	movs	r1, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003108:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_FEFLAG(huart);
 800310a:	621c      	str	r4, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800310c:	6218      	str	r0, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800310e:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003110:	621a      	str	r2, [r3, #32]
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8003112:	bd10      	pop	{r4, pc}
	printf("LCD UART_Err Callback %0lx\n", huart->ErrorCode);
 8003114:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003116:	4808      	ldr	r0, [pc, #32]	; (8003138 <HAL_UART_ErrorCallback+0x48>)
 8003118:	f01d fa3e 	bl	8020598 <iprintf>
	lcd_init();
 800311c:	f7fd ff76 	bl	800100c <lcd_init>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	e7ee      	b.n	8003102 <HAL_UART_ErrorCallback+0x12>
	printf("GPS UART_Err Callback %0lx\n", huart->ErrorCode);
 8003124:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <HAL_UART_ErrorCallback+0x4c>)
 8003128:	f01d fa36 	bl	8020598 <iprintf>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	e7e5      	b.n	80030fc <HAL_UART_ErrorCallback+0xc>
 8003130:	40011400 	.word	0x40011400
 8003134:	40005000 	.word	0x40005000
 8003138:	080256a8 	.word	0x080256a8
 800313c:	0802568c 	.word	0x0802568c

08003140 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003146:	4c1c      	ldr	r4, [pc, #112]	; (80031b8 <cycleleds+0x78>)
 8003148:	ae01      	add	r6, sp, #4
 800314a:	f10d 070e 	add.w	r7, sp, #14
	const uint16_t pattern[] = {
 800314e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003150:	4633      	mov	r3, r6
 8003152:	4635      	mov	r5, r6
 8003154:	c303      	stmia	r3!, {r0, r1}
 8003156:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003158:	f835 1b02 	ldrh.w	r1, [r5], #2
 800315c:	2200      	movs	r2, #0
 800315e:	4620      	mov	r0, r4
 8003160:	f005 f8c2 	bl	80082e8 <HAL_GPIO_WritePin>
		osDelay(140);
 8003164:	208c      	movs	r0, #140	; 0x8c
 8003166:	f00d fb61 	bl	801082c <osDelay>
	for (i = 0; i < 5; i++) {
 800316a:	42bd      	cmp	r5, r7
 800316c:	d1f4      	bne.n	8003158 <cycleleds+0x18>
	}
	osDelay(600);
 800316e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003172:	4634      	mov	r4, r6
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8003174:	4f10      	ldr	r7, [pc, #64]	; (80031b8 <cycleleds+0x78>)
	osDelay(600);
 8003176:	f00d fb59 	bl	801082c <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800317a:	f834 1b02 	ldrh.w	r1, [r4], #2
 800317e:	2201      	movs	r2, #1
 8003180:	4638      	mov	r0, r7
 8003182:	f005 f8b1 	bl	80082e8 <HAL_GPIO_WritePin>
		osDelay(140);
 8003186:	208c      	movs	r0, #140	; 0x8c
 8003188:	f00d fb50 	bl	801082c <osDelay>
	for (i = 0; i < 5; i++) {
 800318c:	42ac      	cmp	r4, r5
 800318e:	d1f4      	bne.n	800317a <cycleleds+0x3a>
	}
	osDelay(500);
 8003190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003194:	4d08      	ldr	r5, [pc, #32]	; (80031b8 <cycleleds+0x78>)
	osDelay(500);
 8003196:	f00d fb49 	bl	801082c <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800319a:	f836 1b02 	ldrh.w	r1, [r6], #2
 800319e:	2200      	movs	r2, #0
 80031a0:	4628      	mov	r0, r5
 80031a2:	f005 f8a1 	bl	80082e8 <HAL_GPIO_WritePin>
		osDelay(140);
 80031a6:	208c      	movs	r0, #140	; 0x8c
 80031a8:	f00d fb40 	bl	801082c <osDelay>
	for (i = 0; i < 5; i++) {
 80031ac:	42b4      	cmp	r4, r6
 80031ae:	d1f4      	bne.n	800319a <cycleleds+0x5a>
	}
}
 80031b0:	b005      	add	sp, #20
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b4:	08024458 	.word	0x08024458
 80031b8:	40020c00 	.word	0x40020c00

080031bc <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4604      	mov	r4, r0
	osDelay(5);
 80031c0:	2005      	movs	r0, #5
 80031c2:	f00d fb33 	bl	801082c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80031c6:	2201      	movs	r2, #1
 80031c8:	2104      	movs	r1, #4
 80031ca:	4814      	ldr	r0, [pc, #80]	; (800321c <setpgagain+0x60>)
 80031cc:	f005 f88c 	bl	80082e8 <HAL_GPIO_WritePin>
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 80031d0:	f004 0407 	and.w	r4, r4, #7
	osDelay(5);
 80031d4:	2005      	movs	r0, #5
	pgagain = 0x4000 | (gain & 0x07);
 80031d6:	4d12      	ldr	r5, [pc, #72]	; (8003220 <setpgagain+0x64>)
	osDelay(5);
 80031d8:	f00d fb28 	bl	801082c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80031dc:	2200      	movs	r2, #0
 80031de:	2104      	movs	r1, #4
 80031e0:	480e      	ldr	r0, [pc, #56]	; (800321c <setpgagain+0x60>)
 80031e2:	f005 f881 	bl	80082e8 <HAL_GPIO_WritePin>
	pgagain = 0x4000 | (gain & 0x07);
 80031e6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	osDelay(5);
 80031ea:	2005      	movs	r0, #5
 80031ec:	f00d fb1e 	bl	801082c <osDelay>
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 80031f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f4:	2201      	movs	r2, #1
 80031f6:	4629      	mov	r1, r5
 80031f8:	480a      	ldr	r0, [pc, #40]	; (8003224 <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 80031fa:	802c      	strh	r4, [r5, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 80031fc:	f007 fe94 	bl	800af28 <HAL_SPI_Transmit>
 8003200:	b110      	cbz	r0, 8003208 <setpgagain+0x4c>
		printf("setpgagain: SPI Error\n");
 8003202:	4809      	ldr	r0, [pc, #36]	; (8003228 <setpgagain+0x6c>)
 8003204:	f01d fa50 	bl	80206a8 <puts>
	}
	osDelay(5);
 8003208:	2005      	movs	r0, #5
 800320a:	f00d fb0f 	bl	801082c <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800320e:	2201      	movs	r2, #1
 8003210:	2104      	movs	r1, #4
 8003212:	4802      	ldr	r0, [pc, #8]	; (800321c <setpgagain+0x60>)
}
 8003214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003218:	f005 b866 	b.w	80082e8 <HAL_GPIO_WritePin>
 800321c:	40021800 	.word	0x40021800
 8003220:	20000242 	.word	0x20000242
 8003224:	200228e8 	.word	0x200228e8
 8003228:	08025a34 	.word	0x08025a34

0800322c <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 800322c:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800322e:	2201      	movs	r2, #1
int initpga() {
 8003230:	b084      	sub	sp, #16
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003232:	2104      	movs	r1, #4
 8003234:	482b      	ldr	r0, [pc, #172]	; (80032e4 <initpga+0xb8>)
 8003236:	f005 f857 	bl	80082e8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 800323a:	2200      	movs	r2, #0
 800323c:	2104      	movs	r1, #4
 800323e:	4829      	ldr	r0, [pc, #164]	; (80032e4 <initpga+0xb8>)
 8003240:	f005 f852 	bl	80082e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8003244:	2032      	movs	r0, #50	; 0x32
 8003246:	f00d faf1 	bl	801082c <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800324a:	2201      	movs	r2, #1
 800324c:	2104      	movs	r1, #4
 800324e:	4825      	ldr	r0, [pc, #148]	; (80032e4 <initpga+0xb8>)
 8003250:	f005 f84a 	bl	80082e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8003254:	2032      	movs	r0, #50	; 0x32
 8003256:	f00d fae9 	bl	801082c <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800325a:	2200      	movs	r2, #0
 800325c:	2104      	movs	r1, #4
 800325e:	4821      	ldr	r0, [pc, #132]	; (80032e4 <initpga+0xb8>)
 8003260:	f005 f842 	bl	80082e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 8003264:	2400      	movs	r4, #0
 8003266:	a904      	add	r1, sp, #16
 8003268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326c:	2201      	movs	r2, #1
 800326e:	481e      	ldr	r0, [pc, #120]	; (80032e8 <initpga+0xbc>)
 8003270:	f821 4d0c 	strh.w	r4, [r1, #-12]!
 8003274:	f007 fe58 	bl	800af28 <HAL_SPI_Transmit>
 8003278:	bb70      	cbnz	r0, 80032d8 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 800327a:	9002      	str	r0, [sp, #8]
 800327c:	9b02      	ldr	r3, [sp, #8]
 800327e:	2b31      	cmp	r3, #49	; 0x31
 8003280:	dc05      	bgt.n	800328e <initpga+0x62>
 8003282:	9b02      	ldr	r3, [sp, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	9b02      	ldr	r3, [sp, #8]
 800328a:	2b31      	cmp	r3, #49	; 0x31
 800328c:	ddf9      	ble.n	8003282 <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 800328e:	2201      	movs	r2, #1
 8003290:	2104      	movs	r1, #4
 8003292:	4814      	ldr	r0, [pc, #80]	; (80032e4 <initpga+0xb8>)
 8003294:	f005 f828 	bl	80082e8 <HAL_GPIO_WritePin>
	osDelay(50);
 8003298:	2032      	movs	r0, #50	; 0x32
 800329a:	f00d fac7 	bl	801082c <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800329e:	2200      	movs	r2, #0
 80032a0:	2104      	movs	r1, #4
 80032a2:	4810      	ldr	r0, [pc, #64]	; (80032e4 <initpga+0xb8>)
 80032a4:	f005 f820 	bl	80082e8 <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 80032a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ac:	2201      	movs	r2, #1
 80032ae:	490f      	ldr	r1, [pc, #60]	; (80032ec <initpga+0xc0>)
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <initpga+0xbc>)
 80032b2:	f007 fe39 	bl	800af28 <HAL_SPI_Transmit>
 80032b6:	b978      	cbnz	r0, 80032d8 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 80032b8:	9003      	str	r0, [sp, #12]
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	2b31      	cmp	r3, #49	; 0x31
 80032be:	dc05      	bgt.n	80032cc <initpga+0xa0>
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	9303      	str	r3, [sp, #12]
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	2b31      	cmp	r3, #49	; 0x31
 80032ca:	ddf9      	ble.n	80032c0 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7ff ff75 	bl	80031bc <setpgagain>
	return (0);
 80032d2:	2000      	movs	r0, #0
}
 80032d4:	b004      	add	sp, #16
 80032d6:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <initpga+0xc4>)
 80032da:	f01d f95d 	bl	8020598 <iprintf>
		return (1);
 80032de:	2001      	movs	r0, #1
}
 80032e0:	b004      	add	sp, #16
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	40021800 	.word	0x40021800
 80032e8:	200228e8 	.word	0x200228e8
 80032ec:	08025a4c 	.word	0x08025a4c
 80032f0:	08025858 	.word	0x08025858

080032f4 <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <bumppga+0x48>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 80032f8:	b510      	push	{r4, lr}
	gain = pgagain & 0x7;
 80032fa:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 80032fe:	b082      	sub	sp, #8
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003300:	1e04      	subs	r4, r0, #0
	gain = pgagain & 0x7;
 8003302:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8003304:	9b01      	ldr	r3, [sp, #4]
 8003306:	da04      	bge.n	8003312 <bumppga+0x1e>
 8003308:	2b00      	cmp	r3, #0
 800330a:	bfd4      	ite	le
 800330c:	2300      	movle	r3, #0
 800330e:	2301      	movgt	r3, #1
 8003310:	b13b      	cbz	r3, 8003322 <bumppga+0x2e>
 8003312:	2c00      	cmp	r4, #0
 8003314:	9b01      	ldr	r3, [sp, #4]
 8003316:	dd07      	ble.n	8003328 <bumppga+0x34>
 8003318:	2b06      	cmp	r3, #6
 800331a:	bfcc      	ite	gt
 800331c:	2300      	movgt	r3, #0
 800331e:	2301      	movle	r3, #1
 8003320:	b913      	cbnz	r3, 8003328 <bumppga+0x34>
		gain = gain + i;
		setpgagain(gain);
		return(i);
	}
return(0);
 8003322:	4618      	mov	r0, r3
}
 8003324:	b002      	add	sp, #8
 8003326:	bd10      	pop	{r4, pc}
		gain = gain + i;
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	4423      	add	r3, r4
 800332c:	9301      	str	r3, [sp, #4]
		setpgagain(gain);
 800332e:	9801      	ldr	r0, [sp, #4]
 8003330:	f7ff ff44 	bl	80031bc <setpgagain>
		return(i);
 8003334:	4620      	mov	r0, r4
}
 8003336:	b002      	add	sp, #8
 8003338:	bd10      	pop	{r4, pc}
 800333a:	bf00      	nop
 800333c:	20000242 	.word	0x20000242

08003340 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 8003340:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8003342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 8003346:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8003348:	2301      	movs	r3, #1
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <initdualmux+0x2c>)
 800334c:	9000      	str	r0, [sp, #0]
 800334e:	2188      	movs	r1, #136	; 0x88
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <initdualmux+0x30>)
 8003352:	f005 fa45 	bl	80087e0 <HAL_I2C_Master_Transmit>
 8003356:	b910      	cbnz	r0, 800335e <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 8003358:	b003      	add	sp, #12
 800335a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <initdualmux+0x34>)
}
 8003360:	b003      	add	sp, #12
 8003362:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8003366:	f01d b917 	b.w	8020598 <iprintf>
 800336a:	bf00      	nop
 800336c:	20000240 	.word	0x20000240
 8003370:	20022ad4 	.word	0x20022ad4
 8003374:	0802583c 	.word	0x0802583c

08003378 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8003378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800337c:	ed2d 8b02 	vpush	{d8}
 8003380:	b091      	sub	sp, #68	; 0x44
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8003382:	2112      	movs	r1, #18
 8003384:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003388:	2302      	movs	r3, #2
 800338a:	aa10      	add	r2, sp, #64	; 0x40
 800338c:	4878      	ldr	r0, [pc, #480]	; (8003570 <getpressure115+0x1f8>)
 800338e:	f822 1d2c 	strh.w	r1, [r2, #-44]!
 8003392:	21c0      	movs	r1, #192	; 0xc0
 8003394:	9500      	str	r5, [sp, #0]
 8003396:	f005 fa23 	bl	80087e0 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 800339a:	4607      	mov	r7, r0
 800339c:	2800      	cmp	r0, #0
 800339e:	f040 80c4 	bne.w	800352a <getpressure115+0x1b2>
		return (result);
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
 80033a2:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 80033a4:	2004      	movs	r0, #4
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 80033a6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003570 <getpressure115+0x1f8>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80033aa:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800359c <getpressure115+0x224>
	osDelay(4);		// conversion time max 3mS
 80033ae:	f00d fa3d 	bl	801082c <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 80033b2:	aa0e      	add	r2, sp, #56	; 0x38
 80033b4:	2301      	movs	r3, #1
 80033b6:	9502      	str	r5, [sp, #8]
 80033b8:	4640      	mov	r0, r8
 80033ba:	1911      	adds	r1, r2, r4
 80033bc:	b2a2      	uxth	r2, r4
 80033be:	e9cd 1300 	strd	r1, r3, [sp]
 80033c2:	21c1      	movs	r1, #193	; 0xc1
 80033c4:	f005 fab2 	bl	800892c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80033c8:	4606      	mov	r6, r0
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f040 809f 	bne.w	800350e <getpressure115+0x196>
	for (i = 0; i < 4; i++) {
 80033d0:	3401      	adds	r4, #1
 80033d2:	2c04      	cmp	r4, #4
 80033d4:	d1ed      	bne.n	80033b2 <getpressure115+0x3a>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 80033d6:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 80033da:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 80033dc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	tr = (data[2] * 256 + data[3]) >> 6;
 80033e0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 80033e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 80033e8:	eb02 2204 	add.w	r2, r2, r4, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80033ec:	4c61      	ldr	r4, [pc, #388]	; (8003574 <getpressure115+0x1fc>)
	pr = (data[0] * 256 + data[1]) >> 6;
 80033ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80033f2:	4961      	ldr	r1, [pc, #388]	; (8003578 <getpressure115+0x200>)
	tr = (data[2] * 256 + data[3]) >> 6;
 80033f4:	1192      	asrs	r2, r2, #6
	temperature = t;
	tempfrac = (t - temperature) * 100;

//	printf("\ntemperature1 = %d.%d  ", temperature, tempfrac);
//	printf("\ntemperature2 = %f  ", t);
	tempfrac = tempfrac * 100;	// now 10,000
 80033f6:	4d61      	ldr	r5, [pc, #388]	; (800357c <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 80033f8:	099b      	lsrs	r3, r3, #6
	tr = (data[2] * 256 + data[3]) >> 6;
 80033fa:	ee08 2a10 	vmov	s16, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80033fe:	4a60      	ldr	r2, [pc, #384]	; (8003580 <getpressure115+0x208>)
	p = pr;
 8003400:	ee07 3a90 	vmov	s15, r3
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003404:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <getpressure115+0x20c>)
	t = tr;
 8003406:	eeb8 6b48 	vcvt.f64.u32	d6, s16
	p = pr;
 800340a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 800340e:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 8003412:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003416:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800341a:	ed94 4b00 	vldr	d4, [r4]
 800341e:	ed91 5b00 	vldr	d5, [r1]
 8003422:	ed9d 1b08 	vldr	d1, [sp, #32]
 8003426:	ed92 7b00 	vldr	d7, [r2]
 800342a:	eea4 5b06 	vfma.f64	d5, d4, d6
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800342e:	4c56      	ldr	r4, [pc, #344]	; (8003588 <getpressure115+0x210>)
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003430:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 8003434:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8003438:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8003540 <getpressure115+0x1c8>
 800343c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8003548 <getpressure115+0x1d0>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8003440:	eea5 7b01 	vfma.f64	d7, d5, d1
 8003444:	eea2 7b03 	vfma.f64	d7, d2, d3
 8003448:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800344c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003450:	eea7 6b04 	vfma.f64	d6, d7, d4
 8003454:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 8003458:	ed9d 0b08 	vldr	d0, [sp, #32]
 800345c:	f01d f968 	bl	8020730 <modf>
	t = tr * -0.1706 + 112.27; //C
 8003460:	eeb8 7bc8 	vcvt.f64.s32	d7, s16

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003464:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tempfrac = tempfrac * 100;	// now 10,000
 8003468:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 800346a:	4b48      	ldr	r3, [pc, #288]	; (800358c <getpressure115+0x214>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800346c:	4848      	ldr	r0, [pc, #288]	; (8003590 <getpressure115+0x218>)
	pressure = (uint32_t) n;
 800346e:	4949      	ldr	r1, [pc, #292]	; (8003594 <getpressure115+0x21c>)
	t = tr * -0.1706 + 112.27; //C
 8003470:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003550 <getpressure115+0x1d8>
 8003474:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8003558 <getpressure115+0x1e0>
	ffrac = modf(p, &n);
 8003478:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 800347c:	ed9d 3b0c 	vldr	d3, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8003480:	eea7 6b05 	vfma.f64	d6, d7, d5
	pressure = (uint32_t) n;
 8003484:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003488:	ed9d 4b06 	vldr	d4, [sp, #24]
 800348c:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8003560 <getpressure115+0x1e8>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8003490:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8003568 <getpressure115+0x1f0>
	pressure = (uint32_t) n;
 8003494:	ed81 3a00 	vstr	s6, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003498:	ee24 4b00 	vmul.f64	d4, d4, d0
	t = tr * -0.1706 + 112.27; //C
 800349c:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	temperature = t;
 80034a0:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 80034a4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 80034ac:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80034b0:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034b4:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 80034b8:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80034bc:	ed84 4a00 	vstr	s8, [r4]
	tempfrac = (t - temperature) * 100;
 80034c0:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 80034c4:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034c8:	feb8 6b46 	vrinta.f64	d6, d6
 80034cc:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 80034d0:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034d4:	ee16 3a90 	vmov	r3, s13
 80034d8:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80034dc:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034e0:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 80034e4:	ee15 6a10 	vmov	r6, s10
 80034e8:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034ec:	feb8 7b47 	vrinta.f64	d7, d7
 80034f0:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 80034f4:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80034f6:	ee17 2a10 	vmov	r2, s14
 80034fa:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80034fe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 8003502:	4638      	mov	r0, r7
 8003504:	b011      	add	sp, #68	; 0x44
 8003506:	ecbd 8b02 	vpop	{d8}
 800350a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800350e:	4601      	mov	r1, r0
 8003510:	4648      	mov	r0, r9
 8003512:	f01d f841 	bl	8020598 <iprintf>
			if (i == 3)
 8003516:	2c03      	cmp	r4, #3
 8003518:	f47f af5a 	bne.w	80033d0 <getpressure115+0x58>
 800351c:	4637      	mov	r7, r6
}
 800351e:	4638      	mov	r0, r7
 8003520:	b011      	add	sp, #68	; 0x44
 8003522:	ecbd 8b02 	vpop	{d8}
 8003526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 800352a:	481b      	ldr	r0, [pc, #108]	; (8003598 <getpressure115+0x220>)
 800352c:	f01d f834 	bl	8020598 <iprintf>
}
 8003530:	4638      	mov	r0, r7
 8003532:	b011      	add	sp, #68	; 0x44
 8003534:	ecbd 8b02 	vpop	{d8}
 8003538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800353c:	f3af 8000 	nop.w
 8003540:	04411044 	.word	0x04411044
 8003544:	3fb04411 	.word	0x3fb04411
 8003548:	00000000 	.word	0x00000000
 800354c:	40490000 	.word	0x40490000
 8003550:	86594af5 	.word	0x86594af5
 8003554:	bfc5d638 	.word	0xbfc5d638
 8003558:	ae147ae1 	.word	0xae147ae1
 800355c:	405c1147 	.word	0x405c1147
 8003560:	00000000 	.word	0x00000000
 8003564:	40590000 	.word	0x40590000
 8003568:	00000000 	.word	0x00000000
 800356c:	40af4000 	.word	0x40af4000
 8003570:	20022ad4 	.word	0x20022ad4
 8003574:	20001630 	.word	0x20001630
 8003578:	20001620 	.word	0x20001620
 800357c:	200233d8 	.word	0x200233d8
 8003580:	20001618 	.word	0x20001618
 8003584:	20001628 	.word	0x20001628
 8003588:	200233e4 	.word	0x200233e4
 800358c:	200233dc 	.word	0x200233dc
 8003590:	20022778 	.word	0x20022778
 8003594:	200233e0 	.word	0x200233e0
 8003598:	080257a4 	.word	0x080257a4
 800359c:	080257c8 	.word	0x080257c8

080035a0 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 80035a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 80035a4:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
HAL_StatusTypeDef initpressure115(void) {
 80035a8:	b086      	sub	sp, #24

//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
 80035aa:	2400      	movs	r4, #0
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80035ac:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80035b0:	2701      	movs	r7, #1
 80035b2:	4e33      	ldr	r6, [pc, #204]	; (8003680 <initpressure115+0xe0>)
		data[i] = 0x5A;
 80035b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80035b8:	ab04      	add	r3, sp, #16
 80035ba:	1d22      	adds	r2, r4, #4
 80035bc:	21c0      	movs	r1, #192	; 0xc0
 80035be:	4630      	mov	r0, r6
 80035c0:	4423      	add	r3, r4
 80035c2:	b292      	uxth	r2, r2
 80035c4:	3401      	adds	r4, #1
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80035ce:	f005 f9ad 	bl	800892c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80035d2:	4605      	mov	r5, r0
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d142      	bne.n	800365e <initpressure115+0xbe>
	for (i = 0; i < 8; i++) {
 80035d8:	2c08      	cmp	r4, #8
 80035da:	d1ed      	bne.n	80035b8 <initpressure115+0x18>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 80035dc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80035e0:	2c5a      	cmp	r4, #90	; 0x5a
 80035e2:	d044      	beq.n	800366e <initpressure115+0xce>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 80035e4:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 80035e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 80035ec:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 80035f0:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 80035f4:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 80035f8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 80035fc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8003600:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 8003604:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 8003608:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 800360a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 800360e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 8003612:	ee04 0a10 	vmov	s8, r0
 8003616:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 800361a:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 800361c:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 8003620:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 8003622:	4818      	ldr	r0, [pc, #96]	; (8003684 <initpressure115+0xe4>)
	b2 = (double) b2co / 16384;
 8003624:	ee05 1a10 	vmov	s10, r1
 8003628:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <initpressure115+0xe8>)
	c12 /= (double) 4194304.0;
 800362e:	ee06 2a10 	vmov	s12, r2
 8003632:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <initpressure115+0xec>)
	a0 = (double) a0co / 8;
 8003638:	ee07 3a10 	vmov	s14, r3
 800363c:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <initpressure115+0xf0>)
	b1 = (double) b1co / 8192;
 8003642:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 8003646:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 800364a:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 800364e:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8003652:	f7ff fe91 	bl	8003378 <getpressure115>
	return (HAL_OK);
}
 8003656:	4628      	mov	r0, r5
 8003658:	b006      	add	sp, #24
 800365a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 800365e:	4601      	mov	r1, r0
 8003660:	480c      	ldr	r0, [pc, #48]	; (8003694 <initpressure115+0xf4>)
 8003662:	f01c ff99 	bl	8020598 <iprintf>
}
 8003666:	4628      	mov	r0, r5
 8003668:	b006      	add	sp, #24
 800366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 800366e:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8003670:	4809      	ldr	r0, [pc, #36]	; (8003698 <initpressure115+0xf8>)
 8003672:	f01c ff91 	bl	8020598 <iprintf>
}
 8003676:	4628      	mov	r0, r5
 8003678:	b006      	add	sp, #24
 800367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800367e:	bf00      	nop
 8003680:	20022ad4 	.word	0x20022ad4
 8003684:	20001620 	.word	0x20001620
 8003688:	20001628 	.word	0x20001628
 800368c:	20001630 	.word	0x20001630
 8003690:	20001618 	.word	0x20001618
 8003694:	08025870 	.word	0x08025870
 8003698:	080258a0 	.word	0x080258a0
 800369c:	00000000 	.word	0x00000000

080036a0 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	b08a      	sub	sp, #40	; 0x28
	int i, trys;
	HAL_StatusTypeDef result;
	uint32_t p, t;
	double fp, fn, ffrac;

	data[0] = 0x55;
 80036a6:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 80036a8:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80036aa:	4f4b      	ldr	r7, [pc, #300]	; (80037d8 <getpressure3115+0x138>)
	data[0] = 0x55;
 80036ac:	ae0a      	add	r6, sp, #40	; 0x28
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80036ae:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80037f4 <getpressure3115+0x154>
	data[0] = 0x55;
 80036b2:	f806 3d10 	strb.w	r3, [r6, #-16]!
		osDelay(10);
 80036b6:	200a      	movs	r0, #10
 80036b8:	f00d f8b8 	bl	801082c <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80036bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036c0:	2301      	movs	r3, #1
 80036c2:	9600      	str	r6, [sp, #0]
 80036c4:	9202      	str	r2, [sp, #8]
 80036c6:	21c0      	movs	r1, #192	; 0xc0
 80036c8:	2200      	movs	r2, #0
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	4638      	mov	r0, r7
 80036ce:	f005 f92d 	bl	800892c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80036d2:	4604      	mov	r4, r0
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d165      	bne.n	80037a4 <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 80036d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (trys = 0; trys < 4; trys++) {
 80036dc:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 80036de:	071b      	lsls	r3, r3, #28
 80036e0:	d401      	bmi.n	80036e6 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 80036e2:	2d04      	cmp	r5, #4
 80036e4:	d1e7      	bne.n	80036b6 <getpressure3115+0x16>
 80036e6:	2501      	movs	r5, #1
 80036e8:	af08      	add	r7, sp, #32
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80036ea:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80036ee:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80037d8 <getpressure3115+0x138>
 80036f2:	46a8      	mov	r8, r5
 80036f4:	2301      	movs	r3, #1
 80036f6:	b2aa      	uxth	r2, r5
 80036f8:	f8cd a008 	str.w	sl, [sp, #8]
 80036fc:	21c0      	movs	r1, #192	; 0xc0
 80036fe:	f8cd 8004 	str.w	r8, [sp, #4]
 8003702:	4648      	mov	r0, r9
 8003704:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8003706:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8003708:	f005 f910 	bl	800892c <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800370c:	4604      	mov	r4, r0
 800370e:	2800      	cmp	r0, #0
 8003710:	d152      	bne.n	80037b8 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8003712:	f89d 3018 	ldrb.w	r3, [sp, #24]
	for (i = 1; i < 6; i++) {
 8003716:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8003718:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 800371c:	d1ea      	bne.n	80036f4 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 800371e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21

//	pressure = p >> 2;  	// these are in Pascals not KPa as required
//	pressfrac = (p & 3) * 25;		// these are in Pascals not KPa as required

	fp = p / 4000.0;
	ffrac = modf(fp, &fn);
 8003722:	a804      	add	r0, sp, #16
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8003724:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8003728:	0212      	lsls	r2, r2, #8
 800372a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800372e:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8003732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8003736:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 800373a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 800373e:	4313      	orrs	r3, r2
	statuspkt.temppress = t << 20 | p;								// update status packet
 8003740:	4a26      	ldr	r2, [pc, #152]	; (80037dc <getpressure3115+0x13c>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8003742:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;
 8003746:	091b      	lsrs	r3, r3, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8003748:	112d      	asrs	r5, r5, #4
	fp = p / 4000.0;
 800374a:	ee07 3a90 	vmov	s15, r3
	statuspkt.temppress = t << 20 | p;								// update status packet
 800374e:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
	fp = p / 4000.0;
 8003752:	eeb8 0be7 	vcvt.f64.s32	d0, s15
	statuspkt.temppress = t << 20 | p;								// update status packet
 8003756:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	fp = p / 4000.0;
 800375a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80037c8 <getpressure3115+0x128>
	ffrac = modf(fp, &fn);
 800375e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8003762:	f01c ffe5 	bl	8020730 <modf>
	pressure = (uint32_t) fn;
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8003766:	f005 010f 	and.w	r1, r5, #15
 800376a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800376e:	481c      	ldr	r0, [pc, #112]	; (80037e0 <getpressure3115+0x140>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <getpressure3115+0x144>)
	temperature = t >> 4;
 8003772:	092d      	lsrs	r5, r5, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8003774:	fb03 f301 	mul.w	r3, r3, r1
	temperature = t >> 4;
 8003778:	491b      	ldr	r1, [pc, #108]	; (80037e8 <getpressure3115+0x148>)
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 800377a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80037d0 <getpressure3115+0x130>
	pressure = (uint32_t) fn;
 800377e:	ed9d 6b04 	vldr	d6, [sp, #16]
	tempfrac = (t & 0x0F) * 625 * 100;
 8003782:	6003      	str	r3, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8003784:	4620      	mov	r0, r4
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003786:	ee20 0b07 	vmul.f64	d0, d0, d7
	pressure = (uint32_t) fn;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <getpressure3115+0x14c>)
	temperature = t >> 4;
 800378c:	600d      	str	r5, [r1, #0]
	pressure = (uint32_t) fn;
 800378e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 8003792:	eebc 0bc0 	vcvt.u32.f64	s0, d0
	pressure = (uint32_t) fn;
 8003796:	ed83 6a00 	vstr	s12, [r3]
	pressfrac = (uint32_t) (ffrac * 100000);  // eg frac 101.03 = frac 3, 101.52 = 52
 800379a:	ed82 0a00 	vstr	s0, [r2]
}
 800379e:	b00a      	add	sp, #40	; 0x28
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80037a4:	4601      	mov	r1, r0
 80037a6:	4640      	mov	r0, r8
 80037a8:	f01c fef6 	bl	8020598 <iprintf>
			if (trys == 3)
 80037ac:	2d03      	cmp	r5, #3
 80037ae:	d193      	bne.n	80036d8 <getpressure3115+0x38>
}
 80037b0:	4620      	mov	r0, r4
 80037b2:	b00a      	add	sp, #40	; 0x28
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 80037b8:	4601      	mov	r1, r0
 80037ba:	480d      	ldr	r0, [pc, #52]	; (80037f0 <getpressure3115+0x150>)
 80037bc:	f01c feec 	bl	8020598 <iprintf>
}
 80037c0:	4620      	mov	r0, r4
 80037c2:	b00a      	add	sp, #40	; 0x28
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	00000000 	.word	0x00000000
 80037cc:	40af4000 	.word	0x40af4000
 80037d0:	00000000 	.word	0x00000000
 80037d4:	40f86a00 	.word	0x40f86a00
 80037d8:	20022ad4 	.word	0x20022ad4
 80037dc:	20022778 	.word	0x20022778
 80037e0:	200233d8 	.word	0x200233d8
 80037e4:	200233e4 	.word	0x200233e4
 80037e8:	200233dc 	.word	0x200233dc
 80037ec:	200233e0 	.word	0x200233e0
 80037f0:	08025814 	.word	0x08025814
 80037f4:	080257ec 	.word	0x080257ec

080037f8 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 80037f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fa:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 80037fc:	2501      	movs	r5, #1
 80037fe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003802:	220c      	movs	r2, #12
 8003804:	a808      	add	r0, sp, #32
 8003806:	462b      	mov	r3, r5
 8003808:	9602      	str	r6, [sp, #8]
 800380a:	21c0      	movs	r1, #192	; 0xc0
 800380c:	9000      	str	r0, [sp, #0]
 800380e:	9501      	str	r5, [sp, #4]
 8003810:	482f      	ldr	r0, [pc, #188]	; (80038d0 <initpressure3115+0xd8>)
 8003812:	f005 f88b 	bl	800892c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8003816:	b938      	cbnz	r0, 8003828 <initpressure3115+0x30>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8003818:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800381c:	2bc4      	cmp	r3, #196	; 0xc4
 800381e:	d00a      	beq.n	8003836 <initpressure3115+0x3e>
		return (HAL_ERROR);
 8003820:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8003822:	4620      	mov	r0, r4
 8003824:	b00b      	add	sp, #44	; 0x2c
 8003826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003828:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 800382a:	482a      	ldr	r0, [pc, #168]	; (80038d4 <initpressure3115+0xdc>)
 800382c:	f01c feb4 	bl	8020598 <iprintf>
}
 8003830:	4620      	mov	r0, r4
 8003832:	b00b      	add	sp, #44	; 0x2c
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8003836:	4f28      	ldr	r7, [pc, #160]	; (80038d8 <initpressure3115+0xe0>)
 8003838:	aa0a      	add	r2, sp, #40	; 0x28
 800383a:	9600      	str	r6, [sp, #0]
 800383c:	2302      	movs	r3, #2
 800383e:	89bc      	ldrh	r4, [r7, #12]
 8003840:	21c0      	movs	r1, #192	; 0xc0
 8003842:	4823      	ldr	r0, [pc, #140]	; (80038d0 <initpressure3115+0xd8>)
 8003844:	f822 4d14 	strh.w	r4, [r2, #-20]!
 8003848:	f004 ffca 	bl	80087e0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800384c:	4604      	mov	r4, r0
 800384e:	bb78      	cbnz	r0, 80038b0 <initpressure3115+0xb8>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8003850:	8a39      	ldrh	r1, [r7, #16]
 8003852:	aa0a      	add	r2, sp, #40	; 0x28
 8003854:	9600      	str	r6, [sp, #0]
 8003856:	2302      	movs	r3, #2
 8003858:	f822 1d10 	strh.w	r1, [r2, #-16]!
 800385c:	21c0      	movs	r1, #192	; 0xc0
 800385e:	481c      	ldr	r0, [pc, #112]	; (80038d0 <initpressure3115+0xd8>)
 8003860:	f004 ffbe 	bl	80087e0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8003864:	4604      	mov	r4, r0
 8003866:	bb38      	cbnz	r0, 80038b8 <initpressure3115+0xc0>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8003868:	8ab9      	ldrh	r1, [r7, #20]
 800386a:	aa0a      	add	r2, sp, #40	; 0x28
 800386c:	9600      	str	r6, [sp, #0]
 800386e:	2302      	movs	r3, #2
 8003870:	f822 1d0c 	strh.w	r1, [r2, #-12]!
 8003874:	21c0      	movs	r1, #192	; 0xc0
 8003876:	4816      	ldr	r0, [pc, #88]	; (80038d0 <initpressure3115+0xd8>)
 8003878:	f004 ffb2 	bl	80087e0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800387c:	4604      	mov	r4, r0
 800387e:	b9f8      	cbnz	r0, 80038c0 <initpressure3115+0xc8>
	osDelay(100);	// allow chip to start up sampling
 8003880:	2064      	movs	r0, #100	; 0x64
 8003882:	f00c ffd3 	bl	801082c <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8003886:	aa08      	add	r2, sp, #32
 8003888:	462b      	mov	r3, r5
 800388a:	21c0      	movs	r1, #192	; 0xc0
 800388c:	9200      	str	r2, [sp, #0]
 800388e:	462a      	mov	r2, r5
 8003890:	480f      	ldr	r0, [pc, #60]	; (80038d0 <initpressure3115+0xd8>)
 8003892:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003896:	f005 f849 	bl	800892c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 800389a:	4604      	mov	r4, r0
 800389c:	b9a0      	cbnz	r0, 80038c8 <initpressure3115+0xd0>
	result = getpressure3115();
 800389e:	f7ff feff 	bl	80036a0 <getpressure3115>
	if (result != HAL_OK) {
 80038a2:	4604      	mov	r4, r0
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d0bc      	beq.n	8003822 <initpressure3115+0x2a>
		printf("MPL3115A2 getpressure failed\n\r");
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <initpressure3115+0xe4>)
 80038aa:	f01c fe75 	bl	8020598 <iprintf>
 80038ae:	e7b8      	b.n	8003822 <initpressure3115+0x2a>
		printf("I2C HAL returned error 2b\n\r");
 80038b0:	480b      	ldr	r0, [pc, #44]	; (80038e0 <initpressure3115+0xe8>)
 80038b2:	f01c fe71 	bl	8020598 <iprintf>
		return (result);
 80038b6:	e7b4      	b.n	8003822 <initpressure3115+0x2a>
		printf("I2C HAL returned error 3\n\r");
 80038b8:	480a      	ldr	r0, [pc, #40]	; (80038e4 <initpressure3115+0xec>)
 80038ba:	f01c fe6d 	bl	8020598 <iprintf>
		return (result);
 80038be:	e7b0      	b.n	8003822 <initpressure3115+0x2a>
		printf("I2C HAL returned error 4\n\r");
 80038c0:	4809      	ldr	r0, [pc, #36]	; (80038e8 <initpressure3115+0xf0>)
 80038c2:	f01c fe69 	bl	8020598 <iprintf>
		return (result);
 80038c6:	e7ac      	b.n	8003822 <initpressure3115+0x2a>
		printf("I2C HAL returned error 5\n\r");
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <initpressure3115+0xf4>)
 80038ca:	f01c fe65 	bl	8020598 <iprintf>
		return (result);
 80038ce:	e7a8      	b.n	8003822 <initpressure3115+0x2a>
 80038d0:	20022ad4 	.word	0x20022ad4
 80038d4:	0802583c 	.word	0x0802583c
 80038d8:	08024458 	.word	0x08024458
 80038dc:	08025938 	.word	0x08025938
 80038e0:	080258c8 	.word	0x080258c8
 80038e4:	080258e4 	.word	0x080258e4
 80038e8:	08025900 	.word	0x08025900
 80038ec:	0802591c 	.word	0x0802591c

080038f0 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80038f0:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 80038f2:	f7ff fc25 	bl	8003140 <cycleleds>
	osDelay(500);
 80038f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038fa:	f00c ff97 	bl	801082c <osDelay>
	printf("Initsplat: LED cycle\n");
 80038fe:	4827      	ldr	r0, [pc, #156]	; (800399c <initsplat+0xac>)
 8003900:	f01c fed2 	bl	80206a8 <puts>

	printf("Initsplat: Dual Mux\n\r");
 8003904:	4826      	ldr	r0, [pc, #152]	; (80039a0 <initsplat+0xb0>)
 8003906:	f01c fe47 	bl	8020598 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 800390a:	4c26      	ldr	r4, [pc, #152]	; (80039a4 <initsplat+0xb4>)
	initdualmux();
 800390c:	f7ff fd18 	bl	8003340 <initdualmux>
	osDelay(500);
 8003910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003914:	f00c ff8a 	bl	801082c <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 8003918:	4823      	ldr	r0, [pc, #140]	; (80039a8 <initsplat+0xb8>)
 800391a:	f01c fec5 	bl	80206a8 <puts>
	initpga();
 800391e:	f7ff fc85 	bl	800322c <initpga>
	osDelay(500);
 8003922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003926:	f00c ff81 	bl	801082c <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 800392a:	4820      	ldr	r0, [pc, #128]	; (80039ac <initsplat+0xbc>)
 800392c:	f01c fe34 	bl	8020598 <iprintf>
	psensor = PNONE;
 8003930:	2300      	movs	r3, #0
 8003932:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8003934:	f7ff ff60 	bl	80037f8 <initpressure3115>
 8003938:	b1e8      	cbz	r0, 8003976 <initsplat+0x86>
		printf("MPL3115A2 pressure sensor present\n\r");
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2<<3);
	} else {
		if (initpressure115() == HAL_OK) {
 800393a:	f7ff fe31 	bl	80035a0 <initpressure115>
 800393e:	b140      	cbz	r0, 8003952 <initsplat+0x62>
			printf("MPL115A2 pressure sensor present\n\r");
			psensor = MPL115A2;		// assume MPL115 fitted instead
			statuspkt.bconf |= (MPL115A2<<3);
		} else {
			printf("NO pressure sensor present\n\r");
 8003940:	481b      	ldr	r0, [pc, #108]	; (80039b0 <initsplat+0xc0>)
 8003942:	f01c fe29 	bl	8020598 <iprintf>
		}
	}
	osDelay(500);
 8003946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800394a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 800394e:	f00c bf6d 	b.w	801082c <osDelay>
			printf("MPL115A2 pressure sensor present\n\r");
 8003952:	4818      	ldr	r0, [pc, #96]	; (80039b4 <initsplat+0xc4>)
 8003954:	f01c fe20 	bl	8020598 <iprintf>
			statuspkt.bconf |= (MPL115A2<<3);
 8003958:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <initsplat+0xc8>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800395a:	2101      	movs	r1, #1
	osDelay(500);
 800395c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2<<3);
 8003960:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8003964:	6021      	str	r1, [r4, #0]
			statuspkt.bconf |= (MPL115A2<<3);
 8003966:	f043 0308 	orr.w	r3, r3, #8
}
 800396a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			statuspkt.bconf |= (MPL115A2<<3);
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8003972:	f00c bf5b 	b.w	801082c <osDelay>
		printf("MPL3115A2 pressure sensor present\n\r");
 8003976:	4811      	ldr	r0, [pc, #68]	; (80039bc <initsplat+0xcc>)
 8003978:	f01c fe0e 	bl	8020598 <iprintf>
		statuspkt.bconf |= (MPL3115A2<<3);
 800397c:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <initsplat+0xc8>)
		psensor = MPL3115A2;
 800397e:	2102      	movs	r1, #2
	osDelay(500);
 8003980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		statuspkt.bconf |= (MPL3115A2<<3);
 8003984:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8003988:	6021      	str	r1, [r4, #0]
		statuspkt.bconf |= (MPL3115A2<<3);
 800398a:	f043 0310 	orr.w	r3, r3, #16
}
 800398e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		statuspkt.bconf |= (MPL3115A2<<3);
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8003996:	f00c bf49 	b.w	801082c <osDelay>
 800399a:	bf00      	nop
 800399c:	08025958 	.word	0x08025958
 80039a0:	08025970 	.word	0x08025970
 80039a4:	2000163c 	.word	0x2000163c
 80039a8:	08025988 	.word	0x08025988
 80039ac:	080259ac 	.word	0x080259ac
 80039b0:	08025a14 	.word	0x08025a14
 80039b4:	080259f0 	.word	0x080259f0
 80039b8:	20022778 	.word	0x20022778
 80039bc:	080259cc 	.word	0x080259cc

080039c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	210f      	movs	r1, #15
 80039c6:	f06f 0001 	mvn.w	r0, #1
{
 80039ca:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 80039ce:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80039d4:	641c      	str	r4, [r3, #64]	; 0x40
 80039d6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80039d8:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 80039dc:	9400      	str	r4, [sp, #0]
 80039de:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80039e2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80039e6:	645c      	str	r4, [r3, #68]	; 0x44
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039f2:	f002 f92f 	bl	8005c54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2106      	movs	r1, #6
 80039fa:	2005      	movs	r0, #5
 80039fc:	f002 f92a 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a00:	2005      	movs	r0, #5
 8003a02:	f002 f96d 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2106      	movs	r1, #6
 8003a0a:	2051      	movs	r0, #81	; 0x51
 8003a0c:	f002 f922 	bl	8005c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003a10:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a12:	b002      	add	sp, #8
 8003a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003a18:	f002 b962 	b.w	8005ce0 <HAL_NVIC_EnableIRQ>
 8003a1c:	40023800 	.word	0x40023800

08003a20 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003a20:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_ADC_MspInit+0x124>)
 8003a22:	6803      	ldr	r3, [r0, #0]
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8003a26:	4293      	cmp	r3, r2
{
 8003a28:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003a32:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003a36:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hadc->Instance==ADC1)
 8003a38:	d007      	beq.n	8003a4a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003a3a:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <HAL_ADC_MspInit+0x128>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d063      	beq.n	8003b08 <HAL_ADC_MspInit+0xe8>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_ADC_MspInit+0x12c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d043      	beq.n	8003ace <HAL_ADC_MspInit+0xae>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003a46:	b00d      	add	sp, #52	; 0x34
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_ADC_MspInit+0x130>)
 8003a4c:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a4e:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a50:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 8003a56:	4d3f      	ldr	r5, [pc, #252]	; (8003b54 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a60:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003a64:	9201      	str	r2, [sp, #4]
 8003a66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a72:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a74:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	4837      	ldr	r0, [pc, #220]	; (8003b58 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a7a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	f004 fa7c 	bl	8007f7c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8003a84:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <HAL_ADC_MspInit+0x13c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a8e:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a92:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a94:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a98:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8003a9c:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a9e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003aa0:	2204      	movs	r2, #4
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003aa2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003aa6:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa8:	60ac      	str	r4, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003aac:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003aae:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8003ab0:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ab2:	e9c5 c005 	strd	ip, r0, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ab6:	4628      	mov	r0, r5
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ab8:	e9c5 7107 	strd	r7, r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003abc:	f002 fb9c 	bl	80061f8 <HAL_DMA_Init>
 8003ac0:	b108      	cbz	r0, 8003ac6 <HAL_ADC_MspInit+0xa6>
      Error_Handler();
 8003ac2:	f7fe f97b 	bl	8001dbc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ac6:	63b5      	str	r5, [r6, #56]	; 0x38
 8003ac8:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8003aca:	b00d      	add	sp, #52	; 0x34
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ad0:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad2:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	481f      	ldr	r0, [pc, #124]	; (8003b58 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003ae6:	9205      	str	r2, [sp, #20]
 8003ae8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003af4:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003afa:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	9306      	str	r3, [sp, #24]
 8003afe:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b00:	f004 fa3c 	bl	8007f7c <HAL_GPIO_Init>
}
 8003b04:	b00d      	add	sp, #52	; 0x34
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_ADC_MspInit+0x130>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b0a:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b0c:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	4811      	ldr	r0, [pc, #68]	; (8003b58 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
 8003b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003b20:	9203      	str	r2, [sp, #12]
 8003b22:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b2e:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b30:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b34:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f004 fa1f 	bl	8007f7c <HAL_GPIO_Init>
}
 8003b3e:	b00d      	add	sp, #52	; 0x34
 8003b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40012000 	.word	0x40012000
 8003b48:	40012100 	.word	0x40012100
 8003b4c:	40012200 	.word	0x40012200
 8003b50:	40023800 	.word	0x40023800
 8003b54:	20022eec 	.word	0x20022eec
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	40026470 	.word	0x40026470

08003b60 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003b60:	6802      	ldr	r2, [r0, #0]
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_CRC_MspInit+0x28>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d000      	beq.n	8003b6a <HAL_CRC_MspInit+0xa>
 8003b68:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b6a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8003b72:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003b84:	b002      	add	sp, #8
 8003b86:	4770      	bx	lr
 8003b88:	40023000 	.word	0x40023000

08003b8c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_DAC_MspInit+0xb0>)
 8003b8e:	6802      	ldr	r2, [r0, #0]
{
 8003b90:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8003b92:	429a      	cmp	r2, r3
{
 8003b94:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b96:	f04f 0400 	mov.w	r4, #0
 8003b9a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003b9e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003ba2:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC)
 8003ba4:	d001      	beq.n	8003baa <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003ba6:	b009      	add	sp, #36	; 0x24
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8003baa:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003bae:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bb0:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb2:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8003bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb6:	a903      	add	r1, sp, #12
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003bb8:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC_CLK_ENABLE();
 8003bbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003bc8:	9201      	str	r2, [sp, #4]
 8003bca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bd6:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	4818      	ldr	r0, [pc, #96]	; (8003c40 <HAL_DAC_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bde:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	9302      	str	r3, [sp, #8]
    hdma_dac1.Instance = DMA1_Stream5;
 8003be2:	4d18      	ldr	r5, [pc, #96]	; (8003c44 <HAL_DAC_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	f004 f9c9 	bl	8007f7c <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 8003bea:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bec:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003bee:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003bf2:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003bf4:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 8003bf6:	602b      	str	r3, [r5, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bfc:	60ec      	str	r4, [r5, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003bfe:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003c00:	612f      	str	r7, [r5, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8003c02:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c04:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003c08:	4628      	mov	r0, r5
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c0a:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003c0e:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8003c12:	e9c5 1209 	strd	r1, r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003c16:	f002 faef 	bl	80061f8 <HAL_DMA_Init>
 8003c1a:	b958      	cbnz	r0, 8003c34 <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003c1c:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2106      	movs	r1, #6
 8003c22:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003c24:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8003c26:	f002 f815 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c2a:	2036      	movs	r0, #54	; 0x36
 8003c2c:	f002 f858 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 8003c30:	b009      	add	sp, #36	; 0x24
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003c34:	f7fe f8c2 	bl	8001dbc <Error_Handler>
 8003c38:	e7f0      	b.n	8003c1c <HAL_DAC_MspInit+0x90>
 8003c3a:	bf00      	nop
 8003c3c:	40007400 	.word	0x40007400
 8003c40:	40020000 	.word	0x40020000
 8003c44:	20022cf0 	.word	0x20022cf0
 8003c48:	40026088 	.word	0x40026088

08003c4c <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8003c4c:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4e:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8003c50:	493d      	ldr	r1, [pc, #244]	; (8003d48 <HAL_I2C_MspInit+0xfc>)
{
 8003c52:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8003c54:	428a      	cmp	r2, r1
{
 8003c56:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003c5c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8003c60:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 8003c62:	d007      	beq.n	8003c74 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_I2C_MspInit+0x100>)
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d04c      	beq.n	8003d04 <HAL_I2C_MspInit+0xb8>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_I2C_MspInit+0x104>)
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d025      	beq.n	8003cbc <HAL_I2C_MspInit+0x70>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003c70:	b00c      	add	sp, #48	; 0x30
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c74:	4c37      	ldr	r4, [pc, #220]	; (8003d54 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c76:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c78:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003c7a:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c80:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c82:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	6323      	str	r3, [r4, #48]	; 0x30
 8003c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8c:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c8e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c90:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c96:	4830      	ldr	r0, [pc, #192]	; (8003d58 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003c9c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c9e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca2:	f004 f96b 	bl	8007f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cac:	6423      	str	r3, [r4, #64]	; 0x40
 8003cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb4:	9302      	str	r3, [sp, #8]
 8003cb6:	9b02      	ldr	r3, [sp, #8]
}
 8003cb8:	b00c      	add	sp, #48	; 0x30
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cbc:	4c25      	ldr	r4, [pc, #148]	; (8003d54 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cbe:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc0:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003cc2:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc8:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cca:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ccc:	f043 0320 	orr.w	r3, r3, #32
 8003cd0:	6323      	str	r3, [r4, #48]	; 0x30
 8003cd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd4:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003cd6:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cd8:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cdc:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cde:	481f      	ldr	r0, [pc, #124]	; (8003d5c <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ce0:	9305      	str	r3, [sp, #20]
 8003ce2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003ce4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003ce6:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cea:	f004 f947 	bl	8007f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	6423      	str	r3, [r4, #64]	; 0x40
 8003cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	9306      	str	r3, [sp, #24]
 8003cfe:	9b06      	ldr	r3, [sp, #24]
}
 8003d00:	b00c      	add	sp, #48	; 0x30
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d04:	4c13      	ldr	r4, [pc, #76]	; (8003d54 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d06:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d08:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d0a:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d0e:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d10:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d12:	f043 0320 	orr.w	r3, r3, #32
 8003d16:	6323      	str	r3, [r4, #48]	; 0x30
 8003d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1a:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d1c:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d20:	480e      	ldr	r0, [pc, #56]	; (8003d5c <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d22:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d2a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d2c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d2e:	f004 f925 	bl	8007f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d38:	6423      	str	r3, [r4, #64]	; 0x40
 8003d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d40:	9304      	str	r3, [sp, #16]
 8003d42:	9b04      	ldr	r3, [sp, #16]
}
 8003d44:	b00c      	add	sp, #48	; 0x30
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	40005400 	.word	0x40005400
 8003d4c:	40005800 	.word	0x40005800
 8003d50:	40006000 	.word	0x40006000
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	40021400 	.word	0x40021400

08003d60 <HAL_MDIOS_MspInit>:
* @retval None
*/
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef* hmdios)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hmdios->Instance==MDIOS)
 8003d60:	6802      	ldr	r2, [r0, #0]
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_MDIOS_MspInit+0x74>)
{
 8003d64:	b570      	push	{r4, r5, r6, lr}
  if(hmdios->Instance==MDIOS)
 8003d66:	429a      	cmp	r2, r3
{
 8003d68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003d72:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003d76:	9407      	str	r4, [sp, #28]
  if(hmdios->Instance==MDIOS)
 8003d78:	d001      	beq.n	8003d7e <HAL_MDIOS_MspInit+0x1e>
  /* USER CODE BEGIN MDIOS_MspInit 1 */

  /* USER CODE END MDIOS_MspInit 1 */
  }

}
 8003d7a:	b008      	add	sp, #32
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003d7e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8003d84:	f44f 6688 	mov.w	r6, #1088	; 0x440
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d88:	2503      	movs	r5, #3
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8c:	a903      	add	r1, sp, #12
    __HAL_RCC_MDIO_CLK_ENABLE();
 8003d8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
 8003d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d9a:	9201      	str	r2, [sp, #4]
 8003d9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003da6:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dac:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <HAL_MDIOS_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8003db2:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003db8:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dbc:	f004 f8de 	bl	8007f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	2106      	movs	r1, #6
 8003dc4:	206d      	movs	r0, #109	; 0x6d
 8003dc6:	f001 ff45 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 8003dca:	206d      	movs	r0, #109	; 0x6d
 8003dcc:	f001 ff88 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 8003dd0:	b008      	add	sp, #32
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	40017800 	.word	0x40017800
 8003dd8:	40020000 	.word	0x40020000

08003ddc <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8003ddc:	6802      	ldr	r2, [r0, #0]
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RNG_MspInit+0x24>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d000      	beq.n	8003de6 <HAL_RNG_MspInit+0xa>
 8003de4:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RNG_MspInit+0x28>)
{
 8003de8:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8003dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003dfc:	b002      	add	sp, #8
 8003dfe:	4770      	bx	lr
 8003e00:	50060800 	.word	0x50060800
 8003e04:	40023800 	.word	0x40023800

08003e08 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8003e08:	6803      	ldr	r3, [r0, #0]
 8003e0a:	4a56      	ldr	r2, [pc, #344]	; (8003f64 <HAL_SPI_MspInit+0x15c>)
{
 8003e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 8003e10:	4293      	cmp	r3, r2
{
 8003e12:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f04f 0400 	mov.w	r4, #0
 8003e18:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003e1c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003e20:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8003e22:	d008      	beq.n	8003e36 <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8003e24:	4a50      	ldr	r2, [pc, #320]	; (8003f68 <HAL_SPI_MspInit+0x160>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d05c      	beq.n	8003ee4 <HAL_SPI_MspInit+0xdc>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8003e2a:	4a50      	ldr	r2, [pc, #320]	; (8003f6c <HAL_SPI_MspInit+0x164>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d037      	beq.n	8003ea0 <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e30:	b00e      	add	sp, #56	; 0x38
 8003e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e38:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003e3c:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e40:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e42:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e50:	9201      	str	r2, [sp, #4]
 8003e52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e56:	f042 0204 	orr.w	r2, r2, #4
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5e:	f002 0204 	and.w	r2, r2, #4
 8003e62:	9202      	str	r2, [sp, #8]
 8003e64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e68:	f042 0208 	orr.w	r2, r2, #8
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e70:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e72:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e76:	483f      	ldr	r0, [pc, #252]	; (8003f74 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7a:	9303      	str	r3, [sp, #12]
 8003e7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e7e:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e82:	f004 f87b 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e86:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e88:	a909      	add	r1, sp, #36	; 0x24
 8003e8a:	483b      	ldr	r0, [pc, #236]	; (8003f78 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e92:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e96:	f004 f871 	bl	8007f7c <HAL_GPIO_Init>
}
 8003e9a:	b00e      	add	sp, #56	; 0x38
 8003e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003ea2:	2074      	movs	r0, #116	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea4:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ea6:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003eac:	2405      	movs	r4, #5
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003eae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003eba:	9207      	str	r2, [sp, #28]
 8003ebc:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec0:	f042 0210 	orr.w	r2, r2, #16
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003ec8:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eca:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ece:	482b      	ldr	r0, [pc, #172]	; (8003f7c <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ed2:	9308      	str	r3, [sp, #32]
 8003ed4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003ed6:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eda:	f004 f84f 	bl	8007f7c <HAL_GPIO_Init>
}
 8003ede:	b00e      	add	sp, #56	; 0x38
 8003ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ee8:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eea:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003eee:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef0:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ef2:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
 8003efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003f02:	9204      	str	r2, [sp, #16]
 8003f04:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	4332      	orrs	r2, r6
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f0e:	4032      	ands	r2, r6
 8003f10:	9205      	str	r2, [sp, #20]
 8003f12:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	4302      	orrs	r2, r0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f1c:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1e:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f20:	4817      	ldr	r0, [pc, #92]	; (8003f80 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f24:	9306      	str	r3, [sp, #24]
 8003f26:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003f2a:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	f004 f826 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f34:	a909      	add	r1, sp, #36	; 0x24
 8003f36:	480f      	ldr	r0, [pc, #60]	; (8003f74 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f3c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f44:	f004 f81a 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f48:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4a:	a909      	add	r1, sp, #36	; 0x24
 8003f4c:	480c      	ldr	r0, [pc, #48]	; (8003f80 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f52:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f54:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f58:	f004 f810 	bl	8007f7c <HAL_GPIO_Init>
}
 8003f5c:	b00e      	add	sp, #56	; 0x38
 8003f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f62:	bf00      	nop
 8003f64:	40003800 	.word	0x40003800
 8003f68:	40003c00 	.word	0x40003c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020800 	.word	0x40020800
 8003f78:	40020c00 	.word	0x40020c00
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40020400 	.word	0x40020400

08003f84 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003f84:	4a75      	ldr	r2, [pc, #468]	; (800415c <HAL_TIM_Base_MspInit+0x1d8>)
 8003f86:	6803      	ldr	r3, [r0, #0]
{
 8003f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8003f8c:	4293      	cmp	r3, r2
{
 8003f8e:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003f98:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8003f9c:	940f      	str	r4, [sp, #60]	; 0x3c
  if(htim_base->Instance==TIM1)
 8003f9e:	d023      	beq.n	8003fe8 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	d044      	beq.n	8004032 <HAL_TIM_Base_MspInit+0xae>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003fa8:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <HAL_TIM_Base_MspInit+0x1dc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	f000 809d 	beq.w	80040ea <HAL_TIM_Base_MspInit+0x166>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8003fb0:	4a6c      	ldr	r2, [pc, #432]	; (8004164 <HAL_TIM_Base_MspInit+0x1e0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d025      	beq.n	8004002 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8003fb6:	4a6c      	ldr	r2, [pc, #432]	; (8004168 <HAL_TIM_Base_MspInit+0x1e4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	f000 80a9 	beq.w	8004110 <HAL_TIM_Base_MspInit+0x18c>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8003fbe:	4a6b      	ldr	r2, [pc, #428]	; (800416c <HAL_TIM_Base_MspInit+0x1e8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f000 80b8 	beq.w	8004136 <HAL_TIM_Base_MspInit+0x1b2>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003fc6:	4a6a      	ldr	r2, [pc, #424]	; (8004170 <HAL_TIM_Base_MspInit+0x1ec>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d027      	beq.n	800401c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8003fcc:	4a69      	ldr	r2, [pc, #420]	; (8004174 <HAL_TIM_Base_MspInit+0x1f0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d114      	bne.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003fd2:	4b69      	ldr	r3, [pc, #420]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003fe6:	e009      	b.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
 8003fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	9b01      	ldr	r3, [sp, #4]
}
 8003ffc:	b011      	add	sp, #68	; 0x44
 8003ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004002:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
 8004004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004006:	f042 0204 	orr.w	r2, r2, #4
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	9306      	str	r3, [sp, #24]
 8004014:	9b06      	ldr	r3, [sp, #24]
}
 8004016:	b011      	add	sp, #68	; 0x44
 8004018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800401c:	4b56      	ldr	r3, [pc, #344]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
 800401e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	9309      	str	r3, [sp, #36]	; 0x24
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	e7e4      	b.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004032:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004036:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800403c:	2020      	movs	r0, #32
    __HAL_RCC_TIM2_CLK_ENABLE();
 800403e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004042:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8004046:	4e4d      	ldr	r6, [pc, #308]	; (800417c <HAL_TIM_Base_MspInit+0x1f8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004048:	433a      	orrs	r2, r7
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
 800404c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404e:	403a      	ands	r2, r7
 8004050:	9202      	str	r2, [sp, #8]
 8004052:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	433a      	orrs	r2, r7
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
 800405a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405c:	403a      	ands	r2, r7
 800405e:	9203      	str	r2, [sp, #12]
 8004060:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004064:	ea42 0208 	orr.w	r2, r2, r8
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800406c:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004072:	4843      	ldr	r0, [pc, #268]	; (8004180 <HAL_TIM_Base_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004074:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	9304      	str	r3, [sp, #16]
 8004078:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	f003 ff7d 	bl	8007f7c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	a90b      	add	r1, sp, #44	; 0x2c
 8004084:	483f      	ldr	r0, [pc, #252]	; (8004184 <HAL_TIM_Base_MspInit+0x200>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004086:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004088:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004090:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004098:	f003 ff70 	bl	8007f7c <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800409c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8004188 <HAL_TIM_Base_MspInit+0x204>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80040a8:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80040ac:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80040ae:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040b2:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b4:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80040b6:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040b8:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80040bc:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040c0:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80040c4:	f002 f898 	bl	80061f8 <HAL_DMA_Init>
 80040c8:	b108      	cbz	r0, 80040ce <HAL_TIM_Base_MspInit+0x14a>
      Error_Handler();
 80040ca:	f7fd fe77 	bl	8001dbc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80040ce:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80040d0:	2200      	movs	r2, #0
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80040d2:	62ee      	str	r6, [r5, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80040d4:	2106      	movs	r1, #6
 80040d6:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80040d8:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80040da:	f001 fdbb 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040de:	201c      	movs	r0, #28
 80040e0:	f001 fdfe 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 80040e4:	b011      	add	sp, #68	; 0x44
 80040e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80040ec:	4622      	mov	r2, r4
 80040ee:	2106      	movs	r1, #6
 80040f0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040f2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80040f4:	f044 0402 	orr.w	r4, r4, #2
 80040f8:	641c      	str	r4, [r3, #64]	; 0x40
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	9305      	str	r3, [sp, #20]
 8004102:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004104:	f001 fda6 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004108:	201d      	movs	r0, #29
 800410a:	f001 fde9 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
 800410e:	e775      	b.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004112:	4622      	mov	r2, r4
 8004114:	2105      	movs	r1, #5
 8004116:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004118:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800411a:	f044 0408 	orr.w	r4, r4, #8
 800411e:	641c      	str	r4, [r3, #64]	; 0x40
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	9307      	str	r3, [sp, #28]
 8004128:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800412a:	f001 fd93 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800412e:	2032      	movs	r0, #50	; 0x32
 8004130:	f001 fdd6 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
 8004134:	e762      	b.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_TIM_Base_MspInit+0x1f4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004138:	4622      	mov	r2, r4
 800413a:	2106      	movs	r1, #6
 800413c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800413e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004140:	f044 0410 	orr.w	r4, r4, #16
 8004144:	641c      	str	r4, [r3, #64]	; 0x40
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004150:	f001 fd80 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004154:	2036      	movs	r0, #54	; 0x36
 8004156:	f001 fdc3 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
 800415a:	e74f      	b.n	8003ffc <HAL_TIM_Base_MspInit+0x78>
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40001000 	.word	0x40001000
 8004170:	40001400 	.word	0x40001400
 8004174:	40002000 	.word	0x40002000
 8004178:	40023800 	.word	0x40023800
 800417c:	20022bec 	.word	0x20022bec
 8004180:	40020000 	.word	0x40020000
 8004184:	40020400 	.word	0x40020400
 8004188:	40026028 	.word	0x40026028

0800418c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 800418c:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8004190:	491c      	ldr	r1, [pc, #112]	; (8004204 <HAL_TIM_MspPostInit+0x78>)
{
 8004192:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8004194:	428a      	cmp	r2, r1
{
 8004196:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800419c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80041a0:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 80041a2:	d019      	beq.n	80041d8 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_TIM_MspPostInit+0x7c>)
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80041aa:	b009      	add	sp, #36	; 0x24
 80041ac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ae:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041b4:	f44f 7580 	mov.w	r5, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041bc:	4813      	ldr	r0, [pc, #76]	; (800420c <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041be:	4322      	orrs	r2, r4
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041c4:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c6:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041ca:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d0:	f003 fed4 	bl	8007f7c <HAL_GPIO_Init>
}
 80041d4:	b009      	add	sp, #36	; 0x24
 80041d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041dc:	2580      	movs	r5, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041de:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	480c      	ldr	r0, [pc, #48]	; (8004214 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e4:	f042 0204 	orr.w	r2, r2, #4
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041ec:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ee:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041f4:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041fa:	f003 febf 	bl	8007f7c <HAL_GPIO_Init>
}
 80041fe:	b009      	add	sp, #36	; 0x24
 8004200:	bd30      	pop	{r4, r5, pc}
 8004202:	bf00      	nop
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40020400 	.word	0x40020400
 8004210:	40023800 	.word	0x40023800
 8004214:	40020800 	.word	0x40020800

08004218 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
 8004218:	4aa3      	ldr	r2, [pc, #652]	; (80044a8 <HAL_UART_MspInit+0x290>)
 800421a:	6803      	ldr	r3, [r0, #0]
{
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(huart->Instance==UART4)
 8004220:	4293      	cmp	r3, r2
{
 8004222:	b096      	sub	sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	f04f 0400 	mov.w	r4, #0
 8004228:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800422c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8004230:	9415      	str	r4, [sp, #84]	; 0x54
  if(huart->Instance==UART4)
 8004232:	d036      	beq.n	80042a2 <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8004234:	4a9d      	ldr	r2, [pc, #628]	; (80044ac <HAL_UART_MspInit+0x294>)
 8004236:	4605      	mov	r5, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d07b      	beq.n	8004334 <HAL_UART_MspInit+0x11c>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 800423c:	4a9c      	ldr	r2, [pc, #624]	; (80044b0 <HAL_UART_MspInit+0x298>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f000 80ee 	beq.w	8004420 <HAL_UART_MspInit+0x208>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004244:	4a9b      	ldr	r2, [pc, #620]	; (80044b4 <HAL_UART_MspInit+0x29c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	f000 810d 	beq.w	8004466 <HAL_UART_MspInit+0x24e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800424c:	4a9a      	ldr	r2, [pc, #616]	; (80044b8 <HAL_UART_MspInit+0x2a0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d006      	beq.n	8004260 <HAL_UART_MspInit+0x48>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8004252:	4a9a      	ldr	r2, [pc, #616]	; (80044bc <HAL_UART_MspInit+0x2a4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f000 8147 	beq.w	80044e8 <HAL_UART_MspInit+0x2d0>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800425a:	b016      	add	sp, #88	; 0x58
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8004260:	4b97      	ldr	r3, [pc, #604]	; (80044c0 <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004262:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004266:	2612      	movs	r6, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004268:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 800426a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800426c:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800426e:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 8004270:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800427c:	920c      	str	r2, [sp, #48]	; 0x30
 800427e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800428a:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800428c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004290:	488c      	ldr	r0, [pc, #560]	; (80044c4 <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004292:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004294:	930d      	str	r3, [sp, #52]	; 0x34
 8004296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004298:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800429c:	f003 fe6e 	bl	8007f7c <HAL_GPIO_Init>
 80042a0:	e7db      	b.n	800425a <HAL_UART_MspInit+0x42>
    __HAL_RCC_UART4_CLK_ENABLE();
 80042a2:	4b87      	ldr	r3, [pc, #540]	; (80044c0 <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80042a6:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042aa:	2603      	movs	r6, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 80042ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042ae:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 80042b2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80042be:	9201      	str	r2, [sp, #4]
 80042c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042cc:	f002 0201 	and.w	r2, r2, #1
 80042d0:	9202      	str	r2, [sp, #8]
 80042d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d6:	433a      	orrs	r2, r7
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	403a      	ands	r2, r7
 80042de:	9203      	str	r2, [sp, #12]
 80042e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e4:	f042 0204 	orr.w	r2, r2, #4
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80042ec:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ee:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f2:	4875      	ldr	r0, [pc, #468]	; (80044c8 <HAL_UART_MspInit+0x2b0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f4:	9712      	str	r7, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042fa:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f003 fe3d 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004306:	a911      	add	r1, sp, #68	; 0x44
 8004308:	4870      	ldr	r0, [pc, #448]	; (80044cc <HAL_UART_MspInit+0x2b4>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800430a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004310:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004314:	f003 fe32 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004318:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	a911      	add	r1, sp, #68	; 0x44
 800431e:	486c      	ldr	r0, [pc, #432]	; (80044d0 <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004324:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004326:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432a:	f003 fe27 	bl	8007f7c <HAL_GPIO_Init>
}
 800432e:	b016      	add	sp, #88	; 0x58
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8004334:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004336:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800433a:	2708      	movs	r7, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800433c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8004340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004346:	a911      	add	r1, sp, #68	; 0x44
 8004348:	4860      	ldr	r0, [pc, #384]	; (80044cc <HAL_UART_MspInit+0x2b4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800434a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800434e:	4e61      	ldr	r6, [pc, #388]	; (80044d4 <HAL_UART_MspInit+0x2bc>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
 8004352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004354:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004358:	9205      	str	r2, [sp, #20]
 800435a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435e:	ea42 0209 	orr.w	r2, r2, r9
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	ea02 0209 	and.w	r2, r2, r9
 800436a:	9206      	str	r2, [sp, #24]
 800436c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004370:	f042 0204 	orr.w	r2, r2, #4
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004378:	9715      	str	r7, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800437a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800437e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004386:	9307      	str	r3, [sp, #28]
 8004388:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438e:	f003 fdf5 	bl	8007f7c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004392:	a911      	add	r1, sp, #68	; 0x44
 8004394:	484e      	ldr	r0, [pc, #312]	; (80044d0 <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004398:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439c:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80043a0:	4f4d      	ldr	r7, [pc, #308]	; (80044d8 <HAL_UART_MspInit+0x2c0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a2:	f003 fdeb 	bl	8007f7c <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80043a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80043ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80043b2:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043b4:	6132      	str	r2, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80043b6:	61f3      	str	r3, [r6, #28]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043bc:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80043c4:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80043c8:	f001 ff16 	bl	80061f8 <HAL_DMA_Init>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	f040 80de 	bne.w	800458e <HAL_UART_MspInit+0x376>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80043d2:	4c42      	ldr	r4, [pc, #264]	; (80044dc <HAL_UART_MspInit+0x2c4>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d4:	2300      	movs	r3, #0
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80043d6:	4842      	ldr	r0, [pc, #264]	; (80044e0 <HAL_UART_MspInit+0x2c8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80043d8:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043dc:	2140      	movs	r1, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80043e2:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80043e4:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80043e6:	66ee      	str	r6, [r5, #108]	; 0x6c
 80043e8:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ea:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ec:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f0:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f4:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043f8:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80043fc:	f001 fefc 	bl	80061f8 <HAL_DMA_Init>
 8004400:	b108      	cbz	r0, 8004406 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8004402:	f7fd fcdb 	bl	8001dbc <Error_Handler>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2107      	movs	r1, #7
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800440a:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 800440c:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800440e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8004410:	f001 fc20 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004414:	2035      	movs	r0, #53	; 0x35
 8004416:	f001 fc63 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 800441a:	b016      	add	sp, #88	; 0x58
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8004422:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004428:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART7_CLK_ENABLE();
 800442a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800442c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800442e:	2408      	movs	r4, #8
    __HAL_RCC_UART7_CLK_ENABLE();
 8004430:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
 8004436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004438:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800443c:	9208      	str	r2, [sp, #32]
 800443e:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800444a:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800444c:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004450:	4824      	ldr	r0, [pc, #144]	; (80044e4 <HAL_UART_MspInit+0x2cc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004454:	9309      	str	r3, [sp, #36]	; 0x24
 8004456:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004458:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800445c:	f003 fd8e 	bl	8007f7c <HAL_GPIO_Init>
}
 8004460:	b016      	add	sp, #88	; 0x58
 8004462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_UART_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004468:	2070      	movs	r0, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446c:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800446e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004470:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004472:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8004474:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
 800447a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004480:	920a      	str	r2, [sp, #40]	; 0x28
 8004482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800448e:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004490:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004494:	480b      	ldr	r0, [pc, #44]	; (80044c4 <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	9612      	str	r6, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004498:	930b      	str	r3, [sp, #44]	; 0x2c
 800449a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800449c:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a0:	f003 fd6c 	bl	8007f7c <HAL_GPIO_Init>
 80044a4:	e6d9      	b.n	800425a <HAL_UART_MspInit+0x42>
 80044a6:	bf00      	nop
 80044a8:	40004c00 	.word	0x40004c00
 80044ac:	40005000 	.word	0x40005000
 80044b0:	40007800 	.word	0x40007800
 80044b4:	40004400 	.word	0x40004400
 80044b8:	40004800 	.word	0x40004800
 80044bc:	40011400 	.word	0x40011400
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	200231a8 	.word	0x200231a8
 80044d8:	40026010 	.word	0x40026010
 80044dc:	2002328c 	.word	0x2002328c
 80044e0:	400260b8 	.word	0x400260b8
 80044e4:	40021400 	.word	0x40021400
    __HAL_RCC_USART6_CLK_ENABLE();
 80044e8:	4b2c      	ldr	r3, [pc, #176]	; (800459c <HAL_UART_MspInit+0x384>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044ea:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044ee:	2708      	movs	r7, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_USART6_CLK_ENABLE();
 80044f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044fa:	a911      	add	r1, sp, #68	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80044fc:	4e28      	ldr	r6, [pc, #160]	; (80045a0 <HAL_UART_MspInit+0x388>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80044fe:	f042 0220 	orr.w	r2, r2, #32
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	f002 0220 	and.w	r2, r2, #32
 800450a:	920e      	str	r2, [sp, #56]	; 0x38
 800450c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800450e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
 8004516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004518:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800451c:	920f      	str	r2, [sp, #60]	; 0x3c
 800451e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004522:	f042 0204 	orr.w	r2, r2, #4
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800452a:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800452c:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004530:	481c      	ldr	r0, [pc, #112]	; (80045a4 <HAL_UART_MspInit+0x38c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004532:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004536:	9310      	str	r3, [sp, #64]	; 0x40
 8004538:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800453a:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800453e:	f003 fd1d 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004542:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004544:	a911      	add	r1, sp, #68	; 0x44
 8004546:	4818      	ldr	r0, [pc, #96]	; (80045a8 <HAL_UART_MspInit+0x390>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004548:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454e:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004550:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004554:	f003 fd12 	bl	8007f7c <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004558:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800455c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80045ac <HAL_UART_MspInit+0x394>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004560:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004564:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800456c:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800456e:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004570:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004572:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004576:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800457a:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800457e:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004582:	f001 fe39 	bl	80061f8 <HAL_DMA_Init>
 8004586:	b928      	cbnz	r0, 8004594 <HAL_UART_MspInit+0x37c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004588:	66ee      	str	r6, [r5, #108]	; 0x6c
 800458a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800458c:	e665      	b.n	800425a <HAL_UART_MspInit+0x42>
      Error_Handler();
 800458e:	f7fd fc15 	bl	8001dbc <Error_Handler>
 8004592:	e71e      	b.n	80043d2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8004594:	f7fd fc12 	bl	8001dbc <Error_Handler>
 8004598:	e7f6      	b.n	8004588 <HAL_UART_MspInit+0x370>
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	20022888 	.word	0x20022888
 80045a4:	40021800 	.word	0x40021800
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40026428 	.word	0x40026428

080045b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80045b2:	4601      	mov	r1, r0
{
 80045b4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	202b      	movs	r0, #43	; 0x2b
 80045ba:	f001 fb4b 	bl	8005c54 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80045be:	202b      	movs	r0, #43	; 0x2b
 80045c0:	f001 fb8e 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045c6:	a901      	add	r1, sp, #4
 80045c8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 80045ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80045cc:	4e14      	ldr	r6, [pc, #80]	; (8004620 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80045ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 80045d2:	4c14      	ldr	r4, [pc, #80]	; (8004624 <HAL_InitTick+0x74>)
 80045d4:	4d14      	ldr	r5, [pc, #80]	; (8004628 <HAL_InitTick+0x78>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045e2:	f005 fdbf 	bl	800a164 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80045e6:	f005 fd9d 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000 / 1000) - 1;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80045ea:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80045ec:	0043      	lsls	r3, r0, #1
  htim12.Init.Period = (1000000 / 1000) - 1;
 80045ee:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim12.Instance = TIM12;
 80045f2:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80045f4:	fba6 0303 	umull	r0, r3, r6, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80045f8:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80045fa:	0c9b      	lsrs	r3, r3, #18
 80045fc:	3b01      	subs	r3, #1
  htim12.Init.ClockDivision = 0;
 80045fe:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8004602:	e9c4 3201 	strd	r3, r2, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8004606:	f007 feeb 	bl	800c3e0 <HAL_TIM_Base_Init>
 800460a:	b110      	cbz	r0, 8004612 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 800460c:	2001      	movs	r0, #1
}
 800460e:	b008      	add	sp, #32
 8004610:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8004612:	4620      	mov	r0, r4
 8004614:	f007 f970 	bl	800b8f8 <HAL_TIM_Base_Start_IT>
}
 8004618:	b008      	add	sp, #32
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	431bde83 	.word	0x431bde83
 8004624:	200233e8 	.word	0x200233e8
 8004628:	40001800 	.word	0x40001800

0800462c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop

08004630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004630:	e7fe      	b.n	8004630 <HardFault_Handler>
 8004632:	bf00      	nop

08004634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004634:	e7fe      	b.n	8004634 <MemManage_Handler>
 8004636:	bf00      	nop

08004638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004638:	e7fe      	b.n	8004638 <BusFault_Handler>
 800463a:	bf00      	nop

0800463c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800463c:	e7fe      	b.n	800463c <UsageFault_Handler>
 800463e:	bf00      	nop

08004640 <RCC_IRQHandler>:
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <DMA1_Stream0_IRQHandler+0x8>)
 8004646:	f002 b853 	b.w	80066f0 <HAL_DMA_IRQHandler>
 800464a:	bf00      	nop
 800464c:	200231a8 	.word	0x200231a8

08004650 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <DMA1_Stream1_IRQHandler+0x8>)
 8004652:	f002 b84d 	b.w	80066f0 <HAL_DMA_IRQHandler>
 8004656:	bf00      	nop
 8004658:	20022bec 	.word	0x20022bec

0800465c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <DMA1_Stream5_IRQHandler+0x8>)
 800465e:	f002 b847 	b.w	80066f0 <HAL_DMA_IRQHandler>
 8004662:	bf00      	nop
 8004664:	20022cf0 	.word	0x20022cf0

08004668 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800466a:	4805      	ldr	r0, [pc, #20]	; (8004680 <ADC_IRQHandler+0x18>)
 800466c:	f001 f8d2 	bl	8005814 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004670:	4804      	ldr	r0, [pc, #16]	; (8004684 <ADC_IRQHandler+0x1c>)
 8004672:	f001 f8cf 	bl	8005814 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 800467c:	f001 b8ca 	b.w	8005814 <HAL_ADC_IRQHandler>
 8004680:	20022dd0 	.word	0x20022dd0
 8004684:	20022a8c 	.word	0x20022a8c
 8004688:	20022e18 	.word	0x20022e18

0800468c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <TIM2_IRQHandler+0x8>)
 800468e:	f007 bd73 	b.w	800c178 <HAL_TIM_IRQHandler>
 8004692:	bf00      	nop
 8004694:	200230e8 	.word	0x200230e8

08004698 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <TIM3_IRQHandler+0x8>)
 800469a:	f007 bd6d 	b.w	800c178 <HAL_TIM_IRQHandler>
 800469e:	bf00      	nop
 80046a0:	20022c4c 	.word	0x20022c4c

080046a4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046a4:	4801      	ldr	r0, [pc, #4]	; (80046ac <USART2_IRQHandler+0x8>)
 80046a6:	f009 bb8f 	b.w	800ddc8 <HAL_UART_IRQHandler>
 80046aa:	bf00      	nop
 80046ac:	20023128 	.word	0x20023128

080046b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046b4:	f003 be48 	b.w	8008348 <HAL_GPIO_EXTI_IRQHandler>

080046b8 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 80046ba:	f007 bd5d 	b.w	800c178 <HAL_TIM_IRQHandler>
 80046be:	bf00      	nop
 80046c0:	200233e8 	.word	0x200233e8

080046c4 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 80046c6:	f007 bd57 	b.w	800c178 <HAL_TIM_IRQHandler>
 80046ca:	bf00      	nop
 80046cc:	20023208 	.word	0x20023208

080046d0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <DMA1_Stream7_IRQHandler+0x8>)
 80046d2:	f002 b80d 	b.w	80066f0 <HAL_DMA_IRQHandler>
 80046d6:	bf00      	nop
 80046d8:	2002328c 	.word	0x2002328c

080046dc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <TIM5_IRQHandler+0x8>)
 80046de:	f007 bd4b 	b.w	800c178 <HAL_TIM_IRQHandler>
 80046e2:	bf00      	nop
 80046e4:	20022bac 	.word	0x20022bac

080046e8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <UART5_IRQHandler+0x8>)
 80046ea:	f009 bb6d 	b.w	800ddc8 <HAL_UART_IRQHandler>
 80046ee:	bf00      	nop
 80046f0:	20022d50 	.word	0x20022d50

080046f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80046f6:	4804      	ldr	r0, [pc, #16]	; (8004708 <TIM6_DAC_IRQHandler+0x14>)
 80046f8:	f001 fcce 	bl	8006098 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80046fc:	4803      	ldr	r0, [pc, #12]	; (800470c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8004702:	f007 bd39 	b.w	800c178 <HAL_TIM_IRQHandler>
 8004706:	bf00      	nop
 8004708:	20022e70 	.word	0x20022e70
 800470c:	20022f50 	.word	0x20022f50

08004710 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <DMA2_Stream1_IRQHandler+0x8>)
 8004712:	f001 bfed 	b.w	80066f0 <HAL_DMA_IRQHandler>
 8004716:	bf00      	nop
 8004718:	20022888 	.word	0x20022888

0800471c <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <DMA2_Stream4_IRQHandler+0x8>)
 800471e:	f001 bfe7 	b.w	80066f0 <HAL_DMA_IRQHandler>
 8004722:	bf00      	nop
 8004724:	20022eec 	.word	0x20022eec

08004728 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <ETH_IRQHandler+0x8>)
 800472a:	f002 bf33 	b.w	8007594 <HAL_ETH_IRQHandler>
 800472e:	bf00      	nop
 8004730:	20025218 	.word	0x20025218

08004734 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <OTG_FS_IRQHandler+0x8>)
 8004736:	f004 bbe5 	b.w	8008f04 <HAL_PCD_IRQHandler>
 800473a:	bf00      	nop
 800473c:	20037824 	.word	0x20037824

08004740 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <USART6_IRQHandler+0x8>)
 8004742:	f009 bb41 	b.w	800ddc8 <HAL_UART_IRQHandler>
 8004746:	bf00      	nop
 8004748:	20022fe4 	.word	0x20022fe4

0800474c <FPU_IRQHandler>:
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop

08004750 <MDIOS_IRQHandler>:
void MDIOS_IRQHandler(void)
{
  /* USER CODE BEGIN MDIOS_IRQn 0 */

  /* USER CODE END MDIOS_IRQn 0 */
  HAL_MDIOS_IRQHandler(&hmdios);
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <MDIOS_IRQHandler+0x8>)
 8004752:	f004 bac1 	b.w	8008cd8 <HAL_MDIOS_IRQHandler>
 8004756:	bf00      	nop
 8004758:	20022e60 	.word	0x20022e60

0800475c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800475c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800475e:	1e16      	subs	r6, r2, #0
 8004760:	dd07      	ble.n	8004772 <_read+0x16>
 8004762:	460c      	mov	r4, r1
 8004764:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8004766:	f3af 8000 	nop.w
 800476a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800476e:	42a5      	cmp	r5, r4
 8004770:	d1f9      	bne.n	8004766 <_read+0xa>
	}

	return len;
}
 8004772:	4630      	mov	r0, r6
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	bf00      	nop

08004778 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8004780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004784:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004786:	604b      	str	r3, [r1, #4]
}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <_isatty>:

int _isatty(int file) {
	return 1;
}
 800478c:	2001      	movs	r0, #1
 800478e:	4770      	bx	lr

08004790 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8004790:	2000      	movs	r0, #0
 8004792:	4770      	bx	lr

08004794 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004794:	490d      	ldr	r1, [pc, #52]	; (80047cc <_sbrk+0x38>)
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8004798:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 800479a:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <_sbrk+0x40>)
 800479e:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 80047a0:	b183      	cbz	r3, 80047c4 <_sbrk+0x30>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80047a2:	4418      	add	r0, r3
 80047a4:	4290      	cmp	r0, r2
 80047a6:	d804      	bhi.n	80047b2 <_sbrk+0x1e>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 80047a8:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b0:	4770      	bx	lr
		errno = ENOMEM;
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <_sbrk+0x44>)
 80047b4:	210c      	movs	r1, #12
		return (void*) -1;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047ba:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 80047be:	6011      	str	r1, [r2, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80047c4:	4c05      	ldr	r4, [pc, #20]	; (80047dc <_sbrk+0x48>)
 80047c6:	4623      	mov	r3, r4
 80047c8:	600c      	str	r4, [r1, #0]
 80047ca:	e7ea      	b.n	80047a2 <_sbrk+0xe>
 80047cc:	20001644 	.word	0x20001644
 80047d0:	20080000 	.word	0x20080000
 80047d4:	00008000 	.word	0x00008000
 80047d8:	2003634c 	.word	0x2003634c
 80047dc:	20037c28 	.word	0x20037c28

080047e0 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e0:	4a0f      	ldr	r2, [pc, #60]	; (8004820 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80047e8:	490f      	ldr	r1, [pc, #60]	; (8004828 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047ea:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80047ee:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80047f4:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80047f6:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047f8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 80047fc:	4e0b      	ldr	r6, [pc, #44]	; (800482c <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 80047fe:	f040 0001 	orr.w	r0, r0, #1
 8004802:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8004804:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	4001      	ands	r1, r0
 800480a:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 800480c:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004814:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8004816:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004818:	6095      	str	r5, [r2, #8]
#endif
}
 800481a:	bc70      	pop	{r4, r5, r6}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000ed00 	.word	0xe000ed00
 8004824:	40023800 	.word	0x40023800
 8004828:	fef6ffff 	.word	0xfef6ffff
 800482c:	24003010 	.word	0x24003010

08004830 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8004830:	680b      	ldr	r3, [r1, #0]
 8004832:	b113      	cbz	r3, 800483a <dnsfound+0xa>
		ip_ready = -1;
	} else
		ip_ready = ipaddr->addr;
 8004834:	4a03      	ldr	r2, [pc, #12]	; (8004844 <dnsfound+0x14>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	4770      	bx	lr
		ip_ready = -1;
 800483a:	4b02      	ldr	r3, [pc, #8]	; (8004844 <dnsfound+0x14>)
 800483c:	f04f 32ff 	mov.w	r2, #4294967295
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	4770      	bx	lr
 8004844:	20001650 	.word	0x20001650

08004848 <myreboot>:
	printf("%s, ... rebooting\n", msg);
 8004848:	4601      	mov	r1, r0
 800484a:	480a      	ldr	r0, [pc, #40]	; (8004874 <myreboot+0x2c>)
void myreboot(char *msg) {
 800484c:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800484e:	f01b fea3 	bl	8020598 <iprintf>
	osDelay(2000);
 8004852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004856:	f00b ffe9 	bl	801082c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800485a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800485e:	4906      	ldr	r1, [pc, #24]	; (8004878 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004862:	68ca      	ldr	r2, [r1, #12]
 8004864:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004868:	4313      	orrs	r3, r2
 800486a:	60cb      	str	r3, [r1, #12]
 800486c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <myreboot+0x28>
 8004874:	08025b0c 	.word	0x08025b0c
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	05fa0004 	.word	0x05fa0004

08004880 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8004880:	b500      	push	{lr}
 8004882:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004884:	f241 3388 	movw	r3, #5000	; 0x1388
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <sendudp+0x68>)
 800488a:	f016 ff9f 	bl	801b7cc <udp_sendto>
 800488e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8004892:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004896:	b25b      	sxtb	r3, r3
 8004898:	b93b      	cbnz	r3, 80048aa <sendudp+0x2a>
		busycount = 0;
 800489a:	4a14      	ldr	r2, [pc, #80]	; (80048ec <sendudp+0x6c>)
 800489c:	6013      	str	r3, [r2, #0]
	return (err);
 800489e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80048a2:	b240      	sxtb	r0, r0
 80048a4:	b003      	add	sp, #12
 80048a6:	f85d fb04 	ldr.w	pc, [sp], #4
		stats_display(); // this needs stats in LwIP enabling to do anything
 80048aa:	f012 f8eb 	bl	8016a84 <stats_display>
		printf("sendudp: err %i\n", err);
 80048ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80048b2:	480f      	ldr	r0, [pc, #60]	; (80048f0 <sendudp+0x70>)
 80048b4:	b249      	sxtb	r1, r1
 80048b6:	f01b fe6f 	bl	8020598 <iprintf>
		vTaskDelay(100); //some delay!
 80048ba:	2064      	movs	r0, #100	; 0x64
 80048bc:	f00d fa38 	bl	8011d30 <vTaskDelay>
		if (err == ERR_MEM) {
 80048c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048c4:	2bff      	cmp	r3, #255	; 0xff
 80048c6:	d00c      	beq.n	80048e2 <sendudp+0x62>
		if (err == ERR_USE) {
 80048c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048cc:	2bf8      	cmp	r3, #248	; 0xf8
 80048ce:	d1e6      	bne.n	800489e <sendudp+0x1e>
			if (busycount++ > 10)
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <sendudp+0x6c>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	2b0a      	cmp	r3, #10
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	dde0      	ble.n	800489e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80048dc:	4805      	ldr	r0, [pc, #20]	; (80048f4 <sendudp+0x74>)
 80048de:	f7ff ffb3 	bl	8004848 <myreboot>
			myreboot("sendudp: out of mem");
 80048e2:	4805      	ldr	r0, [pc, #20]	; (80048f8 <sendudp+0x78>)
 80048e4:	f7ff ffb0 	bl	8004848 <myreboot>
 80048e8:	2002343c 	.word	0x2002343c
 80048ec:	20001648 	.word	0x20001648
 80048f0:	08025b20 	.word	0x08025b20
 80048f4:	08025b48 	.word	0x08025b48
 80048f8:	08025b34 	.word	0x08025b34

080048fc <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80048fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004900:	4c25      	ldr	r4, [pc, #148]	; (8004998 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004902:	4617      	mov	r7, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004904:	4a25      	ldr	r2, [pc, #148]	; (800499c <sendstatus+0xa0>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8004906:	b082      	sub	sp, #8
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004908:	f9b4 4000 	ldrsh.w	r4, [r4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800490c:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004910:	8815      	ldrh	r5, [r2, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004912:	ea84 7ee4 	eor.w	lr, r4, r4, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004916:	4e22      	ldr	r6, [pc, #136]	; (80049a0 <sendstatus+0xa4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <sendstatus+0xa8>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800491a:	ebae 7ee4 	sub.w	lr, lr, r4, asr #31
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800491e:	1b64      	subs	r4, r4, r5
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004920:	f8d6 c000 	ldr.w	ip, [r6]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004924:	2c00      	cmp	r4, #0
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8004926:	4e20      	ldr	r6, [pc, #128]	; (80049a8 <sendstatus+0xac>)
 8004928:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80049b8 <sendstatus+0xbc>
 8004932:	bfb8      	it	lt
 8004934:	4264      	neglt	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004936:	4d1d      	ldr	r5, [pc, #116]	; (80049ac <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004938:	0312      	lsls	r2, r2, #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800493a:	f8a6 e072 	strh.w	lr, [r6, #114]	; 0x72
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 800493e:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004942:	f8b8 e000 	ldrh.w	lr, [r8]
 8004946:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800494a:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800494c:	4474      	add	r4, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800494e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80049bc <sendstatus+0xc0>
 8004952:	022d      	lsls	r5, r5, #8
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8004954:	f8a6 c062 	strh.w	ip, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004958:	f89e e000 	ldrb.w	lr, [lr]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800495c:	4314      	orrs	r4, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800495e:	f8d6 c074 	ldr.w	ip, [r6, #116]	; 0x74
 8004962:	b2ad      	uxth	r5, r5
 8004964:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <sendstatus+0xb4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8004966:	b2a4      	uxth	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004968:	ea45 050e 	orr.w	r5, r5, lr
 800496c:	ea0c 0202 	and.w	r2, ip, r2
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8004970:	f8d1 c004 	ldr.w	ip, [r1, #4]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004974:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004976:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <sendstatus+0xb8>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8004978:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800497a:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800497e:	f88c 0003 	strb.w	r0, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8004982:	4638      	mov	r0, r7
 8004984:	f7ff ff7c 	bl	8004880 <sendudp>
 8004988:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 800498c:	6833      	ldr	r3, [r6, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	6033      	str	r3, [r6, #0]
}
 8004992:	b002      	add	sp, #8
 8004994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004998:	20000708 	.word	0x20000708
 800499c:	200006c0 	.word	0x200006c0
 80049a0:	200006b4 	.word	0x200006b4
 80049a4:	20000242 	.word	0x20000242
 80049a8:	20022778 	.word	0x20022778
 80049ac:	200006bc 	.word	0x200006bc
 80049b0:	ffff0000 	.word	0xffff0000
 80049b4:	2002343c 	.word	0x2002343c
 80049b8:	20000002 	.word	0x20000002
 80049bc:	200006a4 	.word	0x200006a4

080049c0 <sendtimedstatus>:
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80049c0:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <sendtimedstatus+0x28>)
 80049c4:	4d09      	ldr	r5, [pc, #36]	; (80049ec <sendtimedstatus+0x2c>)
 80049c6:	681c      	ldr	r4, [r3, #0]
 80049c8:	682e      	ldr	r6, [r5, #0]
 80049ca:	42b4      	cmp	r4, r6
 80049cc:	d001      	beq.n	80049d2 <sendtimedstatus+0x12>
 80049ce:	07e3      	lsls	r3, r4, #31
 80049d0:	d501      	bpl.n	80049d6 <sendtimedstatus+0x16>
}
 80049d2:	bc70      	pop	{r4, r5, r6}
 80049d4:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 80049d6:	4613      	mov	r3, r2
		talive = t1sec;
 80049d8:	602c      	str	r4, [r5, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 80049da:	460a      	mov	r2, r1
 80049dc:	4601      	mov	r1, r0
 80049de:	2002      	movs	r0, #2
}
 80049e0:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 80049e2:	f7ff bf8b 	b.w	80048fc <sendstatus>
 80049e6:	bf00      	nop
 80049e8:	200015f8 	.word	0x200015f8
 80049ec:	20001654 	.word	0x20001654

080049f0 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
//	osDelay(500);
	ip_ready = 0;
 80049f6:	2400      	movs	r4, #0
	printf("DNS Resolving %s ", name);
 80049f8:	4819      	ldr	r0, [pc, #100]	; (8004a60 <dnslookup+0x70>)
 80049fa:	4629      	mov	r1, r5
	ip_ready = 0;
 80049fc:	4e19      	ldr	r6, [pc, #100]	; (8004a64 <dnslookup+0x74>)
	printf("DNS Resolving %s ", name);
 80049fe:	f01b fdcb 	bl	8020598 <iprintf>
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004a02:	4628      	mov	r0, r5
 8004a04:	4639      	mov	r1, r7
 8004a06:	4623      	mov	r3, r4
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <dnslookup+0x78>)
	ip_ready = 0;
 8004a0a:	6034      	str	r4, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8004a0c:	f010 f9e8 	bl	8014de0 <dns_gethostbyname>
 8004a10:	4605      	mov	r5, r0

	switch (err) {
 8004a12:	3005      	adds	r0, #5
 8004a14:	d007      	beq.n	8004a26 <dnslookup+0x36>
 8004a16:	b90d      	cbnz	r5, 8004a1c <dnslookup+0x2c>
	default:
		printf("****** gethostbyname failed *****\n ");
		break;
	}
	return (err);
}
 8004a18:	4628      	mov	r0, r5
 8004a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("****** gethostbyname failed *****\n ");
 8004a1c:	4813      	ldr	r0, [pc, #76]	; (8004a6c <dnslookup+0x7c>)
 8004a1e:	f01b fdbb 	bl	8020598 <iprintf>
}
 8004a22:	4628      	mov	r0, r5
 8004a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8004a26:	4812      	ldr	r0, [pc, #72]	; (8004a70 <dnslookup+0x80>)
 8004a28:	2414      	movs	r4, #20
 8004a2a:	f01b fdb5 	bl	8020598 <iprintf>
 8004a2e:	e001      	b.n	8004a34 <dnslookup+0x44>
		for (i = 0; i < 20; i++) {
 8004a30:	3c01      	subs	r4, #1
 8004a32:	d0f3      	beq.n	8004a1c <dnslookup+0x2c>
			osDelay(1000);		// give it 20 seconds
 8004a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a38:	f00b fef8 	bl	801082c <osDelay>
			printf(".");
 8004a3c:	202e      	movs	r0, #46	; 0x2e
 8004a3e:	f01b fdc3 	bl	80205c8 <putchar>
			if (ip_ready) {
 8004a42:	6833      	ldr	r3, [r6, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f3      	beq.n	8004a30 <dnslookup+0x40>
				if (ip_ready == -1) {
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	d003      	beq.n	8004a54 <dnslookup+0x64>
				return (ERR_OK);
 8004a4c:	2500      	movs	r5, #0
				ip->addr = ip_ready;
 8004a4e:	603b      	str	r3, [r7, #0]
}
 8004a50:	4628      	mov	r0, r5
 8004a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					ip->addr = "127.0.0.1";	// safe ?
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <dnslookup+0x84>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004a56:	f06f 0502 	mvn.w	r5, #2
					ip->addr = "127.0.0.1";	// safe ?
 8004a5a:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8004a5c:	e7dc      	b.n	8004a18 <dnslookup+0x28>
 8004a5e:	bf00      	nop
 8004a60:	08025a68 	.word	0x08025a68
 8004a64:	20001650 	.word	0x20001650
 8004a68:	08004831 	.word	0x08004831
 8004a6c:	08025aa4 	.word	0x08025aa4
 8004a70:	08025a7c 	.word	0x08025a7c
 8004a74:	08025a98 	.word	0x08025a98

08004a78 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8004a78:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8004a7a:	4913      	ldr	r1, [pc, #76]	; (8004ac8 <locateudp+0x50>)
{
 8004a7c:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 8004a7e:	4813      	ldr	r0, [pc, #76]	; (8004acc <locateudp+0x54>)
 8004a80:	f01b fd8a 	bl	8020598 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8004a84:	4912      	ldr	r1, [pc, #72]	; (8004ad0 <locateudp+0x58>)
 8004a86:	4810      	ldr	r0, [pc, #64]	; (8004ac8 <locateudp+0x50>)
 8004a88:	f7ff ffb2 	bl	80049f0 <dnslookup>
 8004a8c:	b240      	sxtb	r0, r0
 8004a8e:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8004a92:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004a96:	b10b      	cbz	r3, 8004a9c <locateudp+0x24>
		rebootme();
 8004a98:	f7fd f8a8 	bl	8001bec <rebootme>

	ip = udpdestip.addr;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004a9e:	490d      	ldr	r1, [pc, #52]	; (8004ad4 <locateudp+0x5c>)
	ip = udpdestip.addr;
 8004aa0:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8004aa2:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <locateudp+0x60>)
 8004aa4:	0e22      	lsrs	r2, r4, #24
 8004aa6:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004aaa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004aae:	9201      	str	r2, [sp, #4]
 8004ab0:	b2e2      	uxtb	r2, r4
 8004ab2:	9500      	str	r5, [sp, #0]
 8004ab4:	f01b fec8 	bl	8020848 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <locateudp+0x60>)
 8004aba:	4808      	ldr	r0, [pc, #32]	; (8004adc <locateudp+0x64>)
 8004abc:	f01b fd6c 	bl	8020598 <iprintf>
	return (ip);
}
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	b005      	add	sp, #20
 8004ac4:	bd30      	pop	{r4, r5, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20023440 	.word	0x20023440
 8004acc:	08025ac8 	.word	0x08025ac8
 8004ad0:	2002343c 	.word	0x2002343c
 8004ad4:	08025ae8 	.word	0x08025ae8
 8004ad8:	20023428 	.word	0x20023428
 8004adc:	08025af8 	.word	0x08025af8

08004ae0 <startudp>:

void startudp(uint32_t ip) {
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	b087      	sub	sp, #28
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004ae6:	f00d fa73 	bl	8011fd0 <xTaskGetCurrentTaskHandle>
 8004aea:	4b6d      	ldr	r3, [pc, #436]	; (8004ca0 <startudp+0x1c0>)
 8004aec:	6018      	str	r0, [r3, #0]
	osDelay(1000);
 8004aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004af2:	f00b fe9b 	bl	801082c <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8004af6:	f016 ff3b 	bl	801b970 <udp_new>
	if (pcb == NULL) {
 8004afa:	2800      	cmp	r0, #0
 8004afc:	f000 80c1 	beq.w	8004c82 <startudp+0x1a2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4967      	ldr	r1, [pc, #412]	; (8004ca4 <startudp+0x1c4>)
 8004b06:	4680      	mov	r8, r0
 8004b08:	f016 fcd0 	bl	801b4ac <udp_bind>
 8004b0c:	4681      	mov	r9, r0
 8004b0e:	b118      	cbz	r0, 8004b18 <startudp+0x38>
		printf("startudp: udp_bind failed!\n");
 8004b10:	4865      	ldr	r0, [pc, #404]	; (8004ca8 <startudp+0x1c8>)
 8004b12:	f01b fdc9 	bl	80206a8 <puts>
 8004b16:	e7fe      	b.n	8004b16 <startudp+0x36>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004b18:	2241      	movs	r2, #65	; 0x41
 8004b1a:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8004b1e:	2036      	movs	r0, #54	; 0x36
 8004b20:	f011 fb0a 	bl	8016138 <pbuf_alloc>

	if (p1 == NULL) {
 8004b24:	9002      	str	r0, [sp, #8]
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f000 80af 	beq.w	8004c8a <startudp+0x1aa>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8004b2c:	4c5f      	ldr	r4, [pc, #380]	; (8004cac <startudp+0x1cc>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004b2e:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 8004b30:	9d02      	ldr	r5, [sp, #8]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004b32:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8004b36:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004b38:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8004b3a:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8004b3c:	f011 fafc 	bl	8016138 <pbuf_alloc>
	if (p2 == NULL) {
 8004b40:	9003      	str	r0, [sp, #12]
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f000 80a9 	beq.w	8004c9a <startudp+0x1ba>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004b48:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004b4a:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004b4c:	9c03      	ldr	r4, [sp, #12]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004b4e:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004b50:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004b54:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8004b56:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8004b58:	f011 faee 	bl	8016138 <pbuf_alloc>
	if (ps == NULL) {
 8004b5c:	9001      	str	r0, [sp, #4]
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	f000 8099 	beq.w	8004c96 <startudp+0x1b6>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8004b64:	4f52      	ldr	r7, [pc, #328]	; (8004cb0 <startudp+0x1d0>)

	osDelay(5000);
 8004b66:	f241 3088 	movw	r0, #5000	; 0x1388
	ps->payload = &statuspkt;	// point at status / GPS data
 8004b6a:	9b01      	ldr	r3, [sp, #4]
 8004b6c:	4e51      	ldr	r6, [pc, #324]	; (8004cb4 <startudp+0x1d4>)
 8004b6e:	605f      	str	r7, [r3, #4]
	osDelay(5000);
 8004b70:	f00b fe5c 	bl	801082c <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <startudp+0x1d8>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004b76:	2101      	movs	r1, #1
 8004b78:	4a50      	ldr	r2, [pc, #320]	; (8004cbc <startudp+0x1dc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004b7a:	4851      	ldr	r0, [pc, #324]	; (8004cc0 <startudp+0x1e0>)
	statuspkt.auxstatus1 = 0;
 8004b7c:	f8c7 9074 	str.w	r9, [r7, #116]	; 0x74
 8004b80:	4d50      	ldr	r5, [pc, #320]	; (8004cc4 <startudp+0x1e4>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 8004b82:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 8004b86:	f8df b168 	ldr.w	fp, [pc, #360]	; 8004cf0 <startudp+0x210>
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004b8a:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8004b8e:	7011      	strb	r1, [r2, #0]
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8004b90:	f8c7 9080 	str.w	r9, [r7, #128]	; 0x80

		//    memcpy (p1->payload, (lastbuf == 0) ? testbuf : testbuf, ADCBUFLEN);

		/* Wait to be notified */
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
 8004b94:	4c4c      	ldr	r4, [pc, #304]	; (8004cc8 <startudp+0x1e8>)
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8004b96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8004b9a:	f01b fd85 	bl	80206a8 <puts>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET /*PB11*/);	// debug pin
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f003 fb9f 	bl	80082e8 <HAL_GPIO_WritePin>
#endif

		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8004baa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bae:	2001      	movs	r0, #1
 8004bb0:	f00d fb48 	bl	8012244 <ulTaskNotifyTake>
 8004bb4:	4681      	mov	r9, r0
#ifdef TESTING
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f003 fb93 	bl	80082e8 <HAL_GPIO_WritePin>
#endif

		if (ulNotificationValue > 0) {		// we were notified
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	d055      	beq.n	8004c74 <startudp+0x194>
			sigsend = 0;
 8004bc8:	2200      	movs	r2, #0
			/* if we have a trigger, send a sample packet */
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004bca:	782b      	ldrb	r3, [r5, #0]
			sigsend = 0;
 8004bcc:	6032      	str	r2, [r6, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0e5      	beq.n	8004b9e <startudp+0xbe>
 8004bd2:	f8db 3000 	ldr.w	r3, [fp]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e1      	bne.n	8004b9e <startudp+0xbe>
 8004bda:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <startudp+0x1ec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1dd      	bne.n	8004b9e <startudp+0xbe>

				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET /*PB11*/);	// debug pin
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004be2:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <startudp+0x1f0>)
 8004be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	bf08      	it	eq
 8004bee:	4601      	moveq	r1, r0

				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004bf0:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8004bf2:	468a      	mov	sl, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8004bf4:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	684b      	ldr	r3, [r1, #4]
 8004bfa:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	684a      	ldr	r2, [r1, #4]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	684a      	ldr	r2, [r1, #4]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	7093      	strb	r3, [r2, #2]

				while (pd->ref != 1) {	// old packet not finished with yet
 8004c0c:	7b89      	ldrb	r1, [r1, #14]
 8004c0e:	2901      	cmp	r1, #1
 8004c10:	d008      	beq.n	8004c24 <startudp+0x144>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8004c12:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8004cf4 <startudp+0x214>
 8004c16:	4648      	mov	r0, r9
 8004c18:	f01b fcbe 	bl	8020598 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8004c1c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8004c20:	2901      	cmp	r1, #1
 8004c22:	d1f8      	bne.n	8004c16 <startudp+0x136>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <startudp+0x1f4>)
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	f7ff fe27 	bl	8004880 <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <startudp+0x1f8>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8004c34:	f88d 0017 	strb.w	r0, [sp, #23]
				if (sendendstatus > 0) {
 8004c38:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 8004c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8004c44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c48:	3301      	adds	r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	603b      	str	r3, [r7, #0]
				if (sendendstatus > 0) {
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d0a1      	beq.n	8004b9e <startudp+0xbe>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <startudp+0x1fc>)
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	9901      	ldr	r1, [sp, #4]
 8004c60:	2001      	movs	r0, #1
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	f7ff fe4a 	bl	80048fc <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <startudp+0x1f8>)
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8004c6c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	e794      	b.n	8004b9e <startudp+0xbe>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 8004c74:	4b19      	ldr	r3, [pc, #100]	; (8004cdc <startudp+0x1fc>)
 8004c76:	4641      	mov	r1, r8
 8004c78:	9801      	ldr	r0, [sp, #4]
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	f7ff fea0 	bl	80049c0 <sendtimedstatus>
 8004c80:	e78d      	b.n	8004b9e <startudp+0xbe>
		printf("startudp: udp_new failed!\n");
 8004c82:	4817      	ldr	r0, [pc, #92]	; (8004ce0 <startudp+0x200>)
 8004c84:	f01b fd10 	bl	80206a8 <puts>
 8004c88:	e7fe      	b.n	8004c88 <startudp+0x1a8>
		printf("startudp: p1 buf_alloc failed!\n");
 8004c8a:	4816      	ldr	r0, [pc, #88]	; (8004ce4 <startudp+0x204>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8004c8c:	b007      	add	sp, #28
 8004c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8004c92:	f01b bd09 	b.w	80206a8 <puts>
 8004c96:	4814      	ldr	r0, [pc, #80]	; (8004ce8 <startudp+0x208>)
 8004c98:	e7f8      	b.n	8004c8c <startudp+0x1ac>
		printf("startudp: p2 buf_alloc failed!\n");
 8004c9a:	4814      	ldr	r0, [pc, #80]	; (8004cec <startudp+0x20c>)
 8004c9c:	e7f6      	b.n	8004c8c <startudp+0x1ac>
 8004c9e:	bf00      	nop
 8004ca0:	200007b0 	.word	0x200007b0
 8004ca4:	0803f460 	.word	0x0803f460
 8004ca8:	08025b80 	.word	0x08025b80
 8004cac:	20022828 	.word	0x20022828
 8004cb0:	20022778 	.word	0x20022778
 8004cb4:	20000720 	.word	0x20000720
 8004cb8:	dec0edfe 	.word	0xdec0edfe
 8004cbc:	2000070a 	.word	0x2000070a
 8004cc0:	08025bfc 	.word	0x08025bfc
 8004cc4:	2000164d 	.word	0x2000164d
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	20023438 	.word	0x20023438
 8004cd0:	200006b0 	.word	0x200006b0
 8004cd4:	2002343c 	.word	0x2002343c
 8004cd8:	20000718 	.word	0x20000718
 8004cdc:	200006a4 	.word	0x200006a4
 8004ce0:	08025b64 	.word	0x08025b64
 8004ce4:	08025b9c 	.word	0x08025b9c
 8004ce8:	08025bdc 	.word	0x08025bdc
 8004cec:	08025bbc 	.word	0x08025bbc
 8004cf0:	200006bc 	.word	0x200006bc
 8004cf4:	08025c30 	.word	0x08025c30

08004cf8 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	460f      	mov	r7, r1
//  LOCK_TCPIP_CORE();

	HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8004cfe:	4854      	ldr	r0, [pc, #336]	; (8004e50 <tag_callback+0x158>)
 8004d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d04:	f003 fb0a 	bl	800831c <HAL_GPIO_TogglePin>
 8004d08:	4c52      	ldr	r4, [pc, #328]	; (8004e54 <tag_callback+0x15c>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8004d0a:	4d53      	ldr	r5, [pc, #332]	; (8004e58 <tag_callback+0x160>)
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004d0c:	e001      	b.n	8004d12 <tag_callback+0x1a>
		printf("sem wait 2\n");
 8004d0e:	f01b fccb 	bl	80206a8 <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004d12:	2101      	movs	r1, #1
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	f00c fb25 	bl	8011364 <xQueueSemaphoreTake>
 8004d1a:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8004d1c:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d1f5      	bne.n	8004d0e <tag_callback+0x16>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8004d22:	1f32      	subs	r2, r6, #4
 8004d24:	2a07      	cmp	r2, #7
 8004d26:	d819      	bhi.n	8004d5c <tag_callback+0x64>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8004d28:	494c      	ldr	r1, [pc, #304]	; (8004e5c <tag_callback+0x164>)
 8004d2a:	4093      	lsls	r3, r2
 8004d2c:	4a4c      	ldr	r2, [pc, #304]	; (8004e60 <tag_callback+0x168>)
 8004d2e:	7809      	ldrb	r1, [r1, #0]
 8004d30:	400b      	ands	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8004d34:	bb43      	cbnz	r3, 8004d88 <tag_callback+0x90>
			strcpy(newstring, "0");
 8004d36:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <tag_callback+0x16c>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	f00c f888 	bl	8010e58 <xQueueGenericSend>
 8004d48:	2801      	cmp	r0, #1
 8004d4a:	d002      	beq.n	8004d52 <tag_callback+0x5a>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8004d4c:	4846      	ldr	r0, [pc, #280]	; (8004e68 <tag_callback+0x170>)
 8004d4e:	f01b fcab 	bl	80206a8 <puts>
	}
	return (strlen(newstring));
 8004d52:	4638      	mov	r0, r7
}
 8004d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8004d58:	f7fb ba7c 	b.w	8000254 <strlen>
		switch (index) {
 8004d5c:	2e14      	cmp	r6, #20
 8004d5e:	d871      	bhi.n	8004e44 <tag_callback+0x14c>
 8004d60:	e8df f006 	tbb	[pc, r6]
 8004d64:	0b6b5257 	.word	0x0b6b5257
 8004d68:	70707070 	.word	0x70707070
 8004d6c:	70707070 	.word	0x70707070
 8004d70:	323d5c67 	.word	0x323d5c67
 8004d74:	161b2025 	.word	0x161b2025
 8004d78:	48          	.byte	0x48
 8004d79:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8004d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d7e:	4834      	ldr	r0, [pc, #208]	; (8004e50 <tag_callback+0x158>)
 8004d80:	f003 faa0 	bl	80082c4 <HAL_GPIO_ReadPin>
 8004d84:	2801      	cmp	r0, #1
 8004d86:	d1d6      	bne.n	8004d36 <tag_callback+0x3e>
			strcpy(newstring, "1");
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <tag_callback+0x174>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	803b      	strh	r3, [r7, #0]
 8004d8e:	e7d5      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, gpsstr);		// GPS Status
 8004d90:	4937      	ldr	r1, [pc, #220]	; (8004e70 <tag_callback+0x178>)
 8004d92:	4638      	mov	r0, r7
 8004d94:	f01b fdfd 	bl	8020992 <strcpy>
			break;
 8004d98:	e7d0      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, statstr);		// Detector Status
 8004d9a:	4936      	ldr	r1, [pc, #216]	; (8004e74 <tag_callback+0x17c>)
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f01b fdf8 	bl	8020992 <strcpy>
			break;
 8004da2:	e7cb      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, snstr);			// Detector ID
 8004da4:	4934      	ldr	r1, [pc, #208]	; (8004e78 <tag_callback+0x180>)
 8004da6:	4638      	mov	r0, r7
 8004da8:	f01b fdf3 	bl	8020992 <strcpy>
			break;
 8004dac:	e7c6      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8004dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004db2:	4832      	ldr	r0, [pc, #200]	; (8004e7c <tag_callback+0x184>)
 8004db4:	f003 fa86 	bl	80082c4 <HAL_GPIO_ReadPin>
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <tag_callback+0x16c>)
 8004dba:	4a2c      	ldr	r2, [pc, #176]	; (8004e6c <tag_callback+0x174>)
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	bf08      	it	eq
 8004dc0:	4613      	moveq	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	803b      	strh	r3, [r7, #0]
			break;
 8004dc6:	e7b9      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <tag_callback+0x188>)
 8004dca:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <tag_callback+0x174>)
 8004dcc:	8811      	ldrh	r1, [r2, #0]
 8004dce:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <tag_callback+0x16c>)
 8004dd0:	f011 0f04 	tst.w	r1, #4
 8004dd4:	bf08      	it	eq
 8004dd6:	4613      	moveq	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	803b      	strh	r3, [r7, #0]
			break;
 8004ddc:	e7ae      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <tag_callback+0x188>)
 8004de0:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <tag_callback+0x174>)
 8004de2:	8811      	ldrh	r1, [r2, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <tag_callback+0x16c>)
 8004de6:	f011 0f02 	tst.w	r1, #2
 8004dea:	bf08      	it	eq
 8004dec:	4613      	moveq	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	803b      	strh	r3, [r7, #0]
			break;
 8004df2:	e7a3      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8004df4:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <tag_callback+0x18c>)
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <tag_callback+0x174>)
 8004df8:	8811      	ldrh	r1, [r2, #0]
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <tag_callback+0x16c>)
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	bf08      	it	eq
 8004e00:	4613      	moveq	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	803b      	strh	r3, [r7, #0]
			break;
 8004e06:	e799      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, pressstr);		// pressure
 8004e08:	491f      	ldr	r1, [pc, #124]	; (8004e88 <tag_callback+0x190>)
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f01b fdc1 	bl	8020992 <strcpy>
			break;
 8004e10:	e794      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, tempstr);		// temperature
 8004e12:	491e      	ldr	r1, [pc, #120]	; (8004e8c <tag_callback+0x194>)
 8004e14:	4638      	mov	r0, r7
 8004e16:	f01b fdbc 	bl	8020992 <strcpy>
			break;
 8004e1a:	e78f      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8004e1c:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <tag_callback+0x188>)
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <tag_callback+0x174>)
 8004e20:	8811      	ldrh	r1, [r2, #0]
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <tag_callback+0x16c>)
 8004e24:	f011 0f01 	tst.w	r1, #1
 8004e28:	bf08      	it	eq
 8004e2a:	4613      	moveq	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	803b      	strh	r3, [r7, #0]
			break;
 8004e30:	e784      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, "5");
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <tag_callback+0x198>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	803b      	strh	r3, [r7, #0]
			break;
 8004e38:	e780      	b.n	8004d3c <tag_callback+0x44>
			strcpy(newstring, nowtimestr);
 8004e3a:	4916      	ldr	r1, [pc, #88]	; (8004e94 <tag_callback+0x19c>)
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f01b fda8 	bl	8020992 <strcpy>
			break;
 8004e42:	e77b      	b.n	8004d3c <tag_callback+0x44>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8004e44:	4632      	mov	r2, r6
 8004e46:	4914      	ldr	r1, [pc, #80]	; (8004e98 <tag_callback+0x1a0>)
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f01b fcfd 	bl	8020848 <siprintf>
			break;
 8004e4e:	e775      	b.n	8004d3c <tag_callback+0x44>
 8004e50:	40020c00 	.word	0x40020c00
 8004e54:	20022f4c 	.word	0x20022f4c
 8004e58:	08025fb4 	.word	0x08025fb4
 8004e5c:	20000240 	.word	0x20000240
 8004e60:	20023484 	.word	0x20023484
 8004e64:	0803f01c 	.word	0x0803f01c
 8004e68:	08025fe0 	.word	0x08025fe0
 8004e6c:	08025aa0 	.word	0x08025aa0
 8004e70:	20000010 	.word	0x20000010
 8004e74:	20000100 	.word	0x20000100
 8004e78:	20000080 	.word	0x20000080
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	20000242 	.word	0x20000242
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	20000070 	.word	0x20000070
 8004e8c:	20000208 	.word	0x20000208
 8004e90:	0803d118 	.word	0x0803d118
 8004e94:	20000050 	.word	0x20000050
 8004e98:	08025fc0 	.word	0x08025fc0

08004e9c <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8004e9e:	4d38      	ldr	r5, [pc, #224]	; (8004f80 <returnpage+0xe4>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8004ea0:	b08d      	sub	sp, #52	; 0x34
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8004ea8:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8004eaa:	f88d 100e 	strb.w	r1, [sp, #14]
 8004eae:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8004eb2:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8004eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb8:	682d      	ldr	r5, [r5, #0]
 8004eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ebc:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8004ebe:	b10f      	cbz	r7, 8004ec4 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8004ec0:	b00d      	add	sp, #52	; 0x34
 8004ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8004ec4:	aa06      	add	r2, sp, #24
 8004ec6:	a905      	add	r1, sp, #20
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <returnpage+0xe8>)
 8004eca:	4630      	mov	r0, r6
 8004ecc:	9201      	str	r2, [sp, #4]
 8004ece:	aa04      	add	r2, sp, #16
 8004ed0:	9100      	str	r1, [sp, #0]
 8004ed2:	492d      	ldr	r1, [pc, #180]	; (8004f88 <returnpage+0xec>)
 8004ed4:	f01b fcd8 	bl	8020888 <siscanf>
		if (nconv != EOF) {
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d02d      	beq.n	8004f38 <returnpage+0x9c>
			switch (nconv) {
 8004edc:	1e43      	subs	r3, r0, #1
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d839      	bhi.n	8004f56 <returnpage+0xba>
 8004ee2:	e8df f003 	tbb	[pc, r3]
 8004ee6:	0b18      	.short	0x0b18
 8004ee8:	0202      	.short	0x0202
				if (p1 == 1) {		// reboot
 8004eea:	9b05      	ldr	r3, [sp, #20]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d037      	beq.n	8004f60 <returnpage+0xc4>
				if (p1 == 2) {		// freeze the UDP streaming
 8004ef0:	9b05      	ldr	r3, [sp, #20]
 8004ef2:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 8004ef4:	4b25      	ldr	r3, [pc, #148]	; (8004f8c <returnpage+0xf0>)
				if (p1 == 2) {		// freeze the UDP streaming
 8004ef6:	d03d      	beq.n	8004f74 <returnpage+0xd8>
					globalfreeze = 0;
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
				strcpy(udp_target, SERVER_DESTINATION);
 8004efc:	4c24      	ldr	r4, [pc, #144]	; (8004f90 <returnpage+0xf4>)
 8004efe:	4d21      	ldr	r5, [pc, #132]	; (8004f84 <returnpage+0xe8>)
 8004f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f02:	6028      	str	r0, [r5, #0]
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	6069      	str	r1, [r5, #4]
 8004f08:	6128      	str	r0, [r5, #16]
 8004f0a:	60aa      	str	r2, [r5, #8]
 8004f0c:	60eb      	str	r3, [r5, #12]
				printf("Server -> Target UDP host: %s\n", udp_target);
 8004f0e:	491d      	ldr	r1, [pc, #116]	; (8004f84 <returnpage+0xe8>)
 8004f10:	4820      	ldr	r0, [pc, #128]	; (8004f94 <returnpage+0xf8>)
 8004f12:	f01b fb41 	bl	8020598 <iprintf>
				if (statuspkt.uid != sn)
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <returnpage+0xfc>)
 8004f18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f1c:	9904      	ldr	r1, [sp, #16]
 8004f1e:	4291      	cmp	r1, r2
 8004f20:	d0ce      	beq.n	8004ec0 <returnpage+0x24>
					statuspkt.uid = sn;
 8004f22:	9a04      	ldr	r2, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8004f24:	481d      	ldr	r0, [pc, #116]	; (8004f9c <returnpage+0x100>)
					statuspkt.uid = sn;
 8004f26:	b292      	uxth	r2, r2
 8004f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8004f2c:	f8b3 105c 	ldrh.w	r1, [r3, #92]	; 0x5c
 8004f30:	f01b fb32 	bl	8020598 <iprintf>
}
 8004f34:	b00d      	add	sp, #52	; 0x34
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8004f38:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8004f3c:	ac0c      	add	r4, sp, #48	; 0x30
 8004f3e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004f42:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004f46:	4816      	ldr	r0, [pc, #88]	; (8004fa0 <returnpage+0x104>)
 8004f48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f4c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004f50:	f01b fb22 	bl	8020598 <iprintf>
}
 8004f54:	e7b4      	b.n	8004ec0 <returnpage+0x24>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8004f56:	4601      	mov	r1, r0
 8004f58:	4812      	ldr	r0, [pc, #72]	; (8004fa4 <returnpage+0x108>)
 8004f5a:	f01b fb1d 	bl	8020598 <iprintf>
				break;
 8004f5e:	e7af      	b.n	8004ec0 <returnpage+0x24>
					printf("Server -> commands a reboot...\n");
 8004f60:	4811      	ldr	r0, [pc, #68]	; (8004fa8 <returnpage+0x10c>)
 8004f62:	f01b fba1 	bl	80206a8 <puts>
					osDelay(2000);
 8004f66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004f6a:	f00b fc5f 	bl	801082c <osDelay>
					rebootme();
 8004f6e:	f7fc fe3d 	bl	8001bec <rebootme>
 8004f72:	e7bd      	b.n	8004ef0 <returnpage+0x54>
					globalfreeze = 1;
 8004f74:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8004f76:	480d      	ldr	r0, [pc, #52]	; (8004fac <returnpage+0x110>)
					globalfreeze = 1;
 8004f78:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 8004f7a:	f01b fb95 	bl	80206a8 <puts>
 8004f7e:	e7bd      	b.n	8004efc <returnpage+0x60>
 8004f80:	08024470 	.word	0x08024470
 8004f84:	20023440 	.word	0x20023440
 8004f88:	08025dec 	.word	0x08025dec
 8004f8c:	20023438 	.word	0x20023438
 8004f90:	08025e40 	.word	0x08025e40
 8004f94:	08025e54 	.word	0x08025e54
 8004f98:	20022778 	.word	0x20022778
 8004f9c:	08025e74 	.word	0x08025e74
 8004fa0:	08025ec0 	.word	0x08025ec0
 8004fa4:	08025e94 	.word	0x08025e94
 8004fa8:	08025df8 	.word	0x08025df8
 8004fac:	08025e18 	.word	0x08025e18

08004fb0 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	a903      	add	r1, sp, #12
 8004fbe:	220a      	movs	r2, #10
		char **http_cgi_param_vals) {
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8004fc4:	f01c fb18 	bl	80215f8 <strtol>
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8004fc8:	4632      	mov	r2, r6
 8004fca:	4603      	mov	r3, r0
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8004fcc:	4605      	mov	r5, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8004fce:	4621      	mov	r1, r4
 8004fd0:	486a      	ldr	r0, [pc, #424]	; (800517c <httpd_cgi_handler+0x1cc>)
 8004fd2:	f01b fae1 	bl	8020598 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	dd3c      	ble.n	8005054 <httpd_cgi_handler+0xa4>
 8004fda:	2400      	movs	r4, #0
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8004fdc:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 80051ac <httpd_cgi_handler+0x1fc>
 8004fe0:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80051b0 <httpd_cgi_handler+0x200>
 8004fe4:	f1a5 010c 	sub.w	r1, r5, #12
 8004fe8:	2201      	movs	r2, #1
		switch (j) {
 8004fea:	f1a5 030a 	sub.w	r3, r5, #10
			j -= 11;	// now offset 0
 8004fee:	f1a5 080b 	sub.w	r8, r5, #11
 8004ff2:	408a      	lsls	r2, r1
		switch (j) {
 8004ff4:	2b0e      	cmp	r3, #14
 8004ff6:	d830      	bhi.n	800505a <httpd_cgi_handler+0xaa>
 8004ff8:	e8df f003 	tbb	[pc, r3]
 8004ffc:	080894a5 	.word	0x080894a5
 8005000:	08080808 	.word	0x08080808
 8005004:	4b5d0808 	.word	0x4b5d0808
 8005008:	7f39      	.short	0x7f39
 800500a:	6f          	.byte	0x6f
 800500b:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	b252      	sxtb	r2, r2
 8005010:	f999 3000 	ldrsb.w	r3, [r9]
			j -= 11;	// now offset 0
 8005014:	4645      	mov	r5, r8
			if (((*http_cgi_param_vals)[i]) == '0') {
 8005016:	5d08      	ldrb	r0, [r1, r4]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005018:	ea42 0103 	orr.w	r1, r2, r3
			if (((*http_cgi_param_vals)[i]) == '0') {
 800501c:	2830      	cmp	r0, #48	; 0x30
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 800501e:	4858      	ldr	r0, [pc, #352]	; (8005180 <httpd_cgi_handler+0x1d0>)
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005020:	b2c9      	uxtb	r1, r1
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8005022:	bf04      	itt	eq
 8005024:	ea23 0202 	biceq.w	r2, r3, r2
 8005028:	b2d1      	uxtbeq	r1, r2
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 800502a:	4a56      	ldr	r2, [pc, #344]	; (8005184 <httpd_cgi_handler+0x1d4>)
 800502c:	f001 0302 	and.w	r3, r1, #2
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005030:	f889 1000 	strb.w	r1, [r9]
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005034:	6013      	str	r3, [r2, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005036:	f01b faaf 	bl	8020598 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 800503a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800503e:	2301      	movs	r3, #1
 8005040:	464a      	mov	r2, r9
 8005042:	2188      	movs	r1, #136	; 0x88
 8005044:	9000      	str	r0, [sp, #0]
 8005046:	4850      	ldr	r0, [pc, #320]	; (8005188 <httpd_cgi_handler+0x1d8>)
 8005048:	f003 fbca 	bl	80087e0 <HAL_I2C_Master_Transmit>
 800504c:	b958      	cbnz	r0, 8005066 <httpd_cgi_handler+0xb6>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800504e:	3401      	adds	r4, #1
 8005050:	42a6      	cmp	r6, r4
 8005052:	d1c7      	bne.n	8004fe4 <httpd_cgi_handler+0x34>
}
 8005054:	b005      	add	sp, #20
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 800505a:	f8da 1000 	ldr.w	r1, [sl]
 800505e:	4658      	mov	r0, fp
 8005060:	f01b fa9a 	bl	8020598 <iprintf>
			break;
 8005064:	e7f3      	b.n	800504e <httpd_cgi_handler+0x9e>
				printf("I2C HAL returned error 1\n\r");
 8005066:	4849      	ldr	r0, [pc, #292]	; (800518c <httpd_cgi_handler+0x1dc>)
 8005068:	f01b fa96 	bl	8020598 <iprintf>
 800506c:	e7ef      	b.n	800504e <httpd_cgi_handler+0x9e>
 800506e:	4d48      	ldr	r5, [pc, #288]	; (8005190 <httpd_cgi_handler+0x1e0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	882b      	ldrh	r3, [r5, #0]
 8005074:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005076:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005078:	f043 0001 	orr.w	r0, r3, #1
 800507c:	2a30      	cmp	r2, #48	; 0x30
 800507e:	bf08      	it	eq
 8005080:	f023 0001 	biceq.w	r0, r3, #1
			setpgagain(val);
 8005084:	f7fe f89a 	bl	80031bc <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005088:	42a6      	cmp	r6, r4
 800508a:	dcf1      	bgt.n	8005070 <httpd_cgi_handler+0xc0>
}
 800508c:	b005      	add	sp, #20
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	4d3f      	ldr	r5, [pc, #252]	; (8005190 <httpd_cgi_handler+0x1e0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	882b      	ldrh	r3, [r5, #0]
 8005098:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800509a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 800509c:	f043 0002 	orr.w	r0, r3, #2
 80050a0:	2a30      	cmp	r2, #48	; 0x30
 80050a2:	bf08      	it	eq
 80050a4:	f023 0002 	biceq.w	r0, r3, #2
			setpgagain(val);
 80050a8:	f7fe f888 	bl	80031bc <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050ac:	42a6      	cmp	r6, r4
 80050ae:	dcf1      	bgt.n	8005094 <httpd_cgi_handler+0xe4>
}
 80050b0:	b005      	add	sp, #20
 80050b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b6:	4d36      	ldr	r5, [pc, #216]	; (8005190 <httpd_cgi_handler+0x1e0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	882b      	ldrh	r3, [r5, #0]
 80050bc:	5d12      	ldrb	r2, [r2, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050be:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 80050c0:	f043 0004 	orr.w	r0, r3, #4
 80050c4:	2a30      	cmp	r2, #48	; 0x30
 80050c6:	bf08      	it	eq
 80050c8:	f023 0004 	biceq.w	r0, r3, #4
			setpgagain(val);
 80050cc:	f7fe f876 	bl	80031bc <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	dcf1      	bgt.n	80050b8 <httpd_cgi_handler+0x108>
}
 80050d4:	b005      	add	sp, #20
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	1e62      	subs	r2, r4, #1
 80050de:	492d      	ldr	r1, [pc, #180]	; (8005194 <httpd_cgi_handler+0x1e4>)
 80050e0:	441a      	add	r2, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80050e2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050e6:	3401      	adds	r4, #1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80050e8:	3b30      	subs	r3, #48	; 0x30
 80050ea:	bf18      	it	ne
 80050ec:	2301      	movne	r3, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050ee:	42a6      	cmp	r6, r4
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80050f0:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80050f2:	dcf6      	bgt.n	80050e2 <httpd_cgi_handler+0x132>
}
 80050f4:	b005      	add	sp, #20
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80050fa:	4d27      	ldr	r5, [pc, #156]	; (8005198 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '1')
 80050fc:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80050fe:	2201      	movs	r2, #1
 8005100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005104:	4628      	mov	r0, r5
			if (((*http_cgi_param_vals)[i]) == '1')
 8005106:	5d1b      	ldrb	r3, [r3, r4]
 8005108:	4414      	add	r4, r2
 800510a:	2b31      	cmp	r3, #49	; 0x31
 800510c:	d004      	beq.n	8005118 <httpd_cgi_handler+0x168>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 800510e:	f003 f8eb 	bl	80082e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005112:	42a6      	cmp	r6, r4
 8005114:	dcf2      	bgt.n	80050fc <httpd_cgi_handler+0x14c>
 8005116:	e79d      	b.n	8005054 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8005118:	2200      	movs	r2, #0
 800511a:	f003 f8e5 	bl	80082e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800511e:	42a6      	cmp	r6, r4
 8005120:	dcec      	bgt.n	80050fc <httpd_cgi_handler+0x14c>
 8005122:	e797      	b.n	8005054 <httpd_cgi_handler+0xa4>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005124:	4d1d      	ldr	r5, [pc, #116]	; (800519c <httpd_cgi_handler+0x1ec>)
				stats_display(); // this needs stats in LwIP enabling to do anything
 8005126:	f011 fcad 	bl	8016a84 <stats_display>
			if (((*http_cgi_param_vals)[i]) == '0')
 800512a:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800512c:	2201      	movs	r2, #1
 800512e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			if (((*http_cgi_param_vals)[i]) == '0')
 8005132:	5d1b      	ldrb	r3, [r3, r4]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8005134:	4628      	mov	r0, r5
 8005136:	4414      	add	r4, r2
			if (((*http_cgi_param_vals)[i]) == '0')
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	d018      	beq.n	800516e <httpd_cgi_handler+0x1be>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800513c:	f003 f8d4 	bl	80082e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005140:	42a6      	cmp	r6, r4
 8005142:	dcf0      	bgt.n	8005126 <httpd_cgi_handler+0x176>
 8005144:	e786      	b.n	8005054 <httpd_cgi_handler+0xa4>
			printf("Reboot command from wwww\n");
 8005146:	4816      	ldr	r0, [pc, #88]	; (80051a0 <httpd_cgi_handler+0x1f0>)
 8005148:	f01b faae 	bl	80206a8 <puts>
			osDelay(1000);
 800514c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005150:	f00b fb6c 	bl	801082c <osDelay>
 8005154:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005158:	4912      	ldr	r1, [pc, #72]	; (80051a4 <httpd_cgi_handler+0x1f4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <httpd_cgi_handler+0x1f8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800515c:	68ca      	ldr	r2, [r1, #12]
 800515e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]
 8005166:	f3bf 8f4f 	dsb	sy
    __NOP();
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <httpd_cgi_handler+0x1ba>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 800516e:	2200      	movs	r2, #0
 8005170:	f003 f8ba 	bl	80082e8 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005174:	42a6      	cmp	r6, r4
 8005176:	dcd6      	bgt.n	8005126 <httpd_cgi_handler+0x176>
 8005178:	e76c      	b.n	8005054 <httpd_cgi_handler+0xa4>
 800517a:	bf00      	nop
 800517c:	08025ca0 	.word	0x08025ca0
 8005180:	08025ce8 	.word	0x08025ce8
 8005184:	20001638 	.word	0x20001638
 8005188:	20022ad4 	.word	0x20022ad4
 800518c:	0802583c 	.word	0x0802583c
 8005190:	20000242 	.word	0x20000242
 8005194:	2000000c 	.word	0x2000000c
 8005198:	40021000 	.word	0x40021000
 800519c:	40020c00 	.word	0x40020c00
 80051a0:	08025ccc 	.word	0x08025ccc
 80051a4:	e000ed00 	.word	0xe000ed00
 80051a8:	05fa0004 	.word	0x05fa0004
 80051ac:	08025d04 	.word	0x08025d04
 80051b0:	20000240 	.word	0x20000240

080051b4 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80051b4:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 80051b6:	4802      	ldr	r0, [pc, #8]	; (80051c0 <httpd_post_receive_data+0xc>)
 80051b8:	f01b fa76 	bl	80206a8 <puts>
}
 80051bc:	2000      	movs	r0, #0
 80051be:	bd08      	pop	{r3, pc}
 80051c0:	08025d50 	.word	0x08025d50

080051c4 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 80051c4:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 80051c6:	4802      	ldr	r0, [pc, #8]	; (80051d0 <httpd_post_begin+0xc>)
 80051c8:	f01b fa6e 	bl	80206a8 <puts>
}
 80051cc:	2000      	movs	r0, #0
 80051ce:	bd08      	pop	{r3, pc}
 80051d0:	08025d24 	.word	0x08025d24

080051d4 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <httpd_post_finished+0x8>)
 80051d6:	f01b ba67 	b.w	80206a8 <puts>
 80051da:	bf00      	nop
 80051dc:	08025d38 	.word	0x08025d38

080051e0 <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80051e0:	4803      	ldr	r0, [pc, #12]	; (80051f0 <init_httpd_ssi+0x10>)
 80051e2:	2215      	movs	r2, #21
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80051e6:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80051e8:	f00f f890 	bl	801430c <http_set_ssi_handler>
}
 80051ec:	bd08      	pop	{r3, pc}
 80051ee:	bf00      	nop
 80051f0:	08004cf9 	.word	0x08004cf9
 80051f4:	2000024c 	.word	0x2000024c

080051f8 <httpclient>:

void httpclient(char Page[64]) {
 80051f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 80051fa:	4910      	ldr	r1, [pc, #64]	; (800523c <httpclient+0x44>)
void httpclient(char Page[64]) {
 80051fc:	b084      	sub	sp, #16
 80051fe:	4605      	mov	r5, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8005200:	480f      	ldr	r0, [pc, #60]	; (8005240 <httpclient+0x48>)
 8005202:	f7ff fbf5 	bl	80049f0 <dnslookup>
	if (err != ERR_OK)
 8005206:	b108      	cbz	r0, 800520c <httpclient+0x14>
		rebootme();
 8005208:	f7fc fcf0 	bl	8001bec <rebootme>
	ip = remoteip.addr;
 800520c:	4c0b      	ldr	r4, [pc, #44]	; (800523c <httpclient+0x44>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800520e:	490c      	ldr	r1, [pc, #48]	; (8005240 <httpclient+0x48>)
	ip = remoteip.addr;
 8005210:	6822      	ldr	r2, [r4, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8005212:	480c      	ldr	r0, [pc, #48]	; (8005244 <httpclient+0x4c>)
 8005214:	0e13      	lsrs	r3, r2, #24
 8005216:	f3c2 4607 	ubfx	r6, r2, #16, #8
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005220:	9600      	str	r6, [sp, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	f01b f9b8 	bl	8020598 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8005228:	4629      	mov	r1, r5
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <httpclient+0x50>)
 800522c:	2200      	movs	r2, #0
 800522e:	6820      	ldr	r0, [r4, #0]
 8005230:	f7fb fe48 	bl	8000ec4 <hc_open>
 8005234:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8005236:	b004      	add	sp, #16
 8005238:	bd70      	pop	{r4, r5, r6, pc}
 800523a:	bf00      	nop
 800523c:	20001658 	.word	0x20001658
 8005240:	08025e40 	.word	0x08025e40
 8005244:	08025c78 	.word	0x08025c78
 8005248:	08004e9d 	.word	0x08004e9d

0800524c <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800524c:	4909      	ldr	r1, [pc, #36]	; (8005274 <apisn+0x28>)
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <apisn+0x2c>)
 8005250:	6809      	ldr	r1, [r1, #0]
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <apisn+0x30>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6812      	ldr	r2, [r2, #0]
void apisn() {
 8005258:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800525a:	4c09      	ldr	r4, [pc, #36]	; (8005280 <apisn+0x34>)
void apisn() {
 800525c:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800525e:	4620      	mov	r0, r4
 8005260:	9100      	str	r1, [sp, #0]
 8005262:	4908      	ldr	r1, [pc, #32]	; (8005284 <apisn+0x38>)
 8005264:	f01b faf0 	bl	8020848 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8005268:	4620      	mov	r0, r4
}
 800526a:	b002      	add	sp, #8
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 8005270:	f7ff bfc2 	b.w	80051f8 <httpclient>
 8005274:	1ff0f428 	.word	0x1ff0f428
 8005278:	1ff0f424 	.word	0x1ff0f424
 800527c:	1ff0f420 	.word	0x1ff0f420
 8005280:	2000165c 	.word	0x2000165c
 8005284:	08025c60 	.word	0x08025c60

08005288 <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8005288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
 800528c:	2401      	movs	r4, #1
 800528e:	4f13      	ldr	r7, [pc, #76]	; (80052dc <initialapisn+0x54>)
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8005290:	f644 6625 	movw	r6, #20005	; 0x4e25
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8005294:	4d12      	ldr	r5, [pc, #72]	; (80052e0 <initialapisn+0x58>)
		apisn();
		osDelay(5000);

		i++;
		if (i > 10) {
			printf("************* ABORTED **************\n");
 8005296:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80052e4 <initialapisn+0x5c>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 800529a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800529e:	4621      	mov	r1, r4
 80052a0:	4628      	mov	r0, r5
		i++;
 80052a2:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80052a4:	429e      	cmp	r6, r3
 80052a6:	d116      	bne.n	80052d6 <initialapisn+0x4e>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80052a8:	f01b f976 	bl	8020598 <iprintf>
		apisn();
 80052ac:	f7ff ffce 	bl	800524c <apisn>
		osDelay(5000);
 80052b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80052b4:	f00b faba 	bl	801082c <osDelay>
		if (i > 10) {
 80052b8:	2c0a      	cmp	r4, #10
 80052ba:	ddee      	ble.n	800529a <initialapisn+0x12>
			printf("************* ABORTED **************\n");
 80052bc:	4640      	mov	r0, r8
 80052be:	f01b f9f3 	bl	80206a8 <puts>
			rebootme();
 80052c2:	f7fc fc93 	bl	8001bec <rebootme>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80052c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80052ce:	429e      	cmp	r6, r3
		i++;
 80052d0:	f104 0401 	add.w	r4, r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80052d4:	d0e8      	beq.n	80052a8 <initialapisn+0x20>
		}
	}
}
 80052d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052da:	bf00      	nop
 80052dc:	20022778 	.word	0x20022778
 80052e0:	08025d6c 	.word	0x08025d6c
 80052e4:	08025d9c 	.word	0x08025d9c

080052e8 <requestapisn>:

void requestapisn() {
 80052e8:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 80052ea:	4804      	ldr	r0, [pc, #16]	; (80052fc <requestapisn+0x14>)
 80052ec:	f01b f9dc 	bl	80206a8 <puts>
	httpclient(stmuid);		// get sn and targ
 80052f0:	4803      	ldr	r0, [pc, #12]	; (8005300 <requestapisn+0x18>)
}
 80052f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 80052f6:	f7ff bf7f 	b.w	80051f8 <httpclient>
 80052fa:	bf00      	nop
 80052fc:	08025dc4 	.word	0x08025dc4
 8005300:	2000165c 	.word	0x2000165c

08005304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800533c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800530a:	e003      	b.n	8005314 <LoopCopyDataInit>

0800530c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800530e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005312:	3104      	adds	r1, #4

08005314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005314:	480b      	ldr	r0, [pc, #44]	; (8005344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800531a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800531c:	d3f6      	bcc.n	800530c <CopyDataInit>
  ldr  r2, =_sbss
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005320:	e002      	b.n	8005328 <LoopFillZerobss>

08005322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005324:	f842 3b04 	str.w	r3, [r2], #4

08005328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800532a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800532c:	d3f9      	bcc.n	8005322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800532e:	f7ff fa57 	bl	80047e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005332:	f01a f829 	bl	801f388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005336:	f7fc fdc1 	bl	8001ebc <main>
  bx  lr    
 800533a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800533c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005340:	0803fda0 	.word	0x0803fda0
  ldr  r0, =_sdata
 8005344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005348:	20000688 	.word	0x20000688
  ldr  r2, =_sbss
 800534c:	20000688 	.word	0x20000688
  ldr  r3, = _ebss
 8005350:	20037c28 	.word	0x20037c28

08005354 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005354:	e7fe      	b.n	8005354 <CAN1_RX0_IRQHandler>
	...

08005358 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005358:	4a07      	ldr	r2, [pc, #28]	; (8005378 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800535a:	2003      	movs	r0, #3
{
 800535c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005366:	f000 fc59 	bl	8005c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536a:	2000      	movs	r0, #0
 800536c:	f7ff f920 	bl	80045b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005370:	f7fe fb26 	bl	80039c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8005374:	2000      	movs	r0, #0
 8005376:	bd08      	pop	{r3, pc}
 8005378:	40023c00 	.word	0x40023c00

0800537c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800537c:	4a03      	ldr	r2, [pc, #12]	; (800538c <HAL_IncTick+0x10>)
 800537e:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_IncTick+0x14>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	440b      	add	r3, r1
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20023488 	.word	0x20023488
 8005390:	200002a4 	.word	0x200002a4

08005394 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <HAL_GetTick+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20023488 	.word	0x20023488

080053a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80053a4:	f7ff fff6 	bl	8005394 <HAL_GetTick>
 80053a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053aa:	1c63      	adds	r3, r4, #1
 80053ac:	d002      	beq.n	80053b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_Delay+0x20>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053b4:	f7ff ffee 	bl	8005394 <HAL_GetTick>
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	42a0      	cmp	r0, r4
 80053bc:	d3fa      	bcc.n	80053b4 <HAL_Delay+0x14>
  {
  }
}
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200002a4 	.word	0x200002a4

080053c4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f000 813f 	beq.w	8005648 <HAL_ADC_Init+0x284>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80053ca:	49b2      	ldr	r1, [pc, #712]	; (8005694 <HAL_ADC_Init+0x2d0>)
 80053cc:	4ab2      	ldr	r2, [pc, #712]	; (8005698 <HAL_ADC_Init+0x2d4>)
{
 80053ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80053d0:	6803      	ldr	r3, [r0, #0]
 80053d2:	4604      	mov	r4, r0
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf18      	it	ne
 80053d8:	4293      	cmpne	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_ADC_Init+0x22>
 80053dc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80053e0:	4293      	cmp	r3, r2
 80053e2:	f040 8133 	bne.w	800564c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80053ec:	f040 8138 	bne.w	8005660 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80053f6:	f040 813d 	bne.w	8005674 <HAL_ADC_Init+0x2b0>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d861      	bhi.n	80054c4 <HAL_ADC_Init+0x100>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005400:	69a3      	ldr	r3, [r4, #24]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d858      	bhi.n	80054b8 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8005406:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005408:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 800540c:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8005410:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005414:	bf18      	it	ne
 8005416:	2900      	cmpne	r1, #0
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8005422:	bf0c      	ite	eq
 8005424:	2300      	moveq	r3, #0
 8005426:	f003 0301 	andne.w	r3, r3, #1
 800542a:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800542e:	bf0c      	ite	eq
 8005430:	2300      	moveq	r3, #0
 8005432:	f003 0301 	andne.w	r3, r3, #1
 8005436:	b123      	cbz	r3, 8005442 <HAL_ADC_Init+0x7e>
 8005438:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 800543c:	2a01      	cmp	r2, #1
 800543e:	f200 8140 	bhi.w	80056c2 <HAL_ADC_Init+0x2fe>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8005448:	d159      	bne.n	80054fe <HAL_ADC_Init+0x13a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800544a:	69e3      	ldr	r3, [r4, #28]
 800544c:	3b01      	subs	r3, #1
 800544e:	2b0f      	cmp	r3, #15
 8005450:	d84b      	bhi.n	80054ea <HAL_ADC_Init+0x126>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8005452:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005456:	2b01      	cmp	r3, #1
 8005458:	d825      	bhi.n	80054a6 <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d83a      	bhi.n	80054d6 <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005460:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d814      	bhi.n	8005492 <HAL_ADC_Init+0xce>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005468:	4b8c      	ldr	r3, [pc, #560]	; (800569c <HAL_ADC_Init+0x2d8>)
 800546a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800546c:	429a      	cmp	r2, r3
 800546e:	d004      	beq.n	800547a <HAL_ADC_Init+0xb6>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8005470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005472:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005476:	f040 8119 	bne.w	80056ac <HAL_ADC_Init+0x2e8>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800547a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800547c:	2d00      	cmp	r5, #0
 800547e:	f000 80d8 	beq.w	8005632 <HAL_ADC_Init+0x26e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005484:	06db      	lsls	r3, r3, #27
 8005486:	d544      	bpl.n	8005512 <HAL_ADC_Init+0x14e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005488:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800548a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800548c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8005490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005492:	f240 1157 	movw	r1, #343	; 0x157
 8005496:	4882      	ldr	r0, [pc, #520]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 8005498:	f7fd fc80 	bl	8002d9c <assert_failed>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800549c:	4b7f      	ldr	r3, [pc, #508]	; (800569c <HAL_ADC_Init+0x2d8>)
 800549e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d1e5      	bne.n	8005470 <HAL_ADC_Init+0xac>
 80054a4:	e7e9      	b.n	800547a <HAL_ADC_Init+0xb6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80054a6:	f240 1155 	movw	r1, #341	; 0x155
 80054aa:	487d      	ldr	r0, [pc, #500]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80054ac:	f7fd fc76 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80054b0:	6963      	ldr	r3, [r4, #20]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d9d4      	bls.n	8005460 <HAL_ADC_Init+0x9c>
 80054b6:	e00e      	b.n	80054d6 <HAL_ADC_Init+0x112>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80054b8:	f240 1151 	movw	r1, #337	; 0x151
 80054bc:	4878      	ldr	r0, [pc, #480]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80054be:	f7fd fc6d 	bl	8002d9c <assert_failed>
 80054c2:	e7a0      	b.n	8005406 <HAL_ADC_Init+0x42>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80054c4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80054c8:	4875      	ldr	r0, [pc, #468]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80054ca:	f7fd fc67 	bl	8002d9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80054ce:	69a3      	ldr	r3, [r4, #24]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d998      	bls.n	8005406 <HAL_ADC_Init+0x42>
 80054d4:	e7f0      	b.n	80054b8 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80054d6:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80054da:	4871      	ldr	r0, [pc, #452]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80054dc:	f7fd fc5e 	bl	8002d9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80054e0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d9bf      	bls.n	8005468 <HAL_ADC_Init+0xa4>
 80054e8:	e7d3      	b.n	8005492 <HAL_ADC_Init+0xce>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80054ea:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80054ee:	486c      	ldr	r0, [pc, #432]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80054f0:	f7fd fc54 	bl	8002d9c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80054f4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d9ae      	bls.n	800545a <HAL_ADC_Init+0x96>
 80054fc:	e7d3      	b.n	80054a6 <HAL_ADC_Init+0xe2>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80054fe:	f240 1153 	movw	r1, #339	; 0x153
 8005502:	4867      	ldr	r0, [pc, #412]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 8005504:	f7fd fc4a 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005508:	69e3      	ldr	r3, [r4, #28]
 800550a:	3b01      	subs	r3, #1
 800550c:	2b0f      	cmp	r3, #15
 800550e:	d9a0      	bls.n	8005452 <HAL_ADC_Init+0x8e>
 8005510:	e7eb      	b.n	80054ea <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8005512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005514:	4a63      	ldr	r2, [pc, #396]	; (80056a4 <HAL_ADC_Init+0x2e0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005516:	4964      	ldr	r1, [pc, #400]	; (80056a8 <HAL_ADC_Init+0x2e4>)
    ADC_STATE_CLR_SET(hadc->State,
 8005518:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800551a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800551c:	4d5f      	ldr	r5, [pc, #380]	; (800569c <HAL_ADC_Init+0x2d8>)
    ADC_STATE_CLR_SET(hadc->State,
 800551e:	f042 0202 	orr.w	r2, r2, #2
 8005522:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005524:	684a      	ldr	r2, [r1, #4]
 8005526:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800552a:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800552c:	684a      	ldr	r2, [r1, #4]
 800552e:	6860      	ldr	r0, [r4, #4]
 8005530:	4302      	orrs	r2, r0
 8005532:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005534:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005536:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800553c:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005540:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005542:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005544:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005548:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800554c:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800554e:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005550:	6858      	ldr	r0, [r3, #4]
 8005552:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8005556:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	ea41 010c 	orr.w	r1, r1, ip
 800555e:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005566:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	ea42 0207 	orr.w	r2, r2, r7
 800556e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005570:	f000 8086 	beq.w	8005680 <HAL_ADC_Init+0x2bc>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005574:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005576:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005578:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800557c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4316      	orrs	r6, r2
 8005582:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005584:	6899      	ldr	r1, [r3, #8]
 8005586:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800558a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	4302      	orrs	r2, r0
 8005590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005592:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005594:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005596:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800559a:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800559e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80055a6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f000 8085 	beq.w	80056b8 <HAL_ADC_Init+0x2f4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80055ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055b0:	3a01      	subs	r2, #1
 80055b2:	2a07      	cmp	r2, #7
 80055b4:	d907      	bls.n	80055c6 <HAL_ADC_Init+0x202>
 80055b6:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80055ba:	4839      	ldr	r0, [pc, #228]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 80055bc:	f7fd fbee 	bl	8002d9c <assert_failed>
 80055c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	3a01      	subs	r2, #1
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80055cc:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80055d4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80055dc:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80055e0:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055e2:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055e4:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055e8:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055ec:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055ee:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055f0:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f2:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055f4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80055f6:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80055fa:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055fc:	689d      	ldr	r5, [r3, #8]
 80055fe:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8005602:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005604:	6899      	ldr	r1, [r3, #8]
 8005606:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 800560a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005612:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800561a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800561c:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800561e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800562a:	2300      	movs	r3, #0
 800562c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8005632:	4620      	mov	r0, r4
 8005634:	f7fe f9f4 	bl	8003a20 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005638:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800563a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800563c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005640:	06db      	lsls	r3, r3, #27
 8005642:	f53f af21 	bmi.w	8005488 <HAL_ADC_Init+0xc4>
 8005646:	e764      	b.n	8005512 <HAL_ADC_Init+0x14e>
    return HAL_ERROR;
 8005648:	2001      	movs	r0, #1
}
 800564a:	4770      	bx	lr
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800564c:	f240 114d 	movw	r1, #333	; 0x14d
 8005650:	4813      	ldr	r0, [pc, #76]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 8005652:	f7fd fba3 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800565c:	f43f aec8 	beq.w	80053f0 <HAL_ADC_Init+0x2c>
 8005660:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8005664:	480e      	ldr	r0, [pc, #56]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 8005666:	f7fd fb99 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8005670:	f43f aec3 	beq.w	80053fa <HAL_ADC_Init+0x36>
 8005674:	f240 114f 	movw	r1, #335	; 0x14f
 8005678:	4809      	ldr	r0, [pc, #36]	; (80056a0 <HAL_ADC_Init+0x2dc>)
 800567a:	f7fd fb8f 	bl	8002d9c <assert_failed>
 800567e:	e6bc      	b.n	80053fa <HAL_ADC_Init+0x36>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005686:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	e77f      	b.n	8005592 <HAL_ADC_Init+0x1ce>
 8005692:	bf00      	nop
 8005694:	40012000 	.word	0x40012000
 8005698:	40012100 	.word	0x40012100
 800569c:	0f000001 	.word	0x0f000001
 80056a0:	08025ff8 	.word	0x08025ff8
 80056a4:	ffffeefd 	.word	0xffffeefd
 80056a8:	40012300 	.word	0x40012300
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80056ac:	f240 115b 	movw	r1, #347	; 0x15b
 80056b0:	4807      	ldr	r0, [pc, #28]	; (80056d0 <HAL_ADC_Init+0x30c>)
 80056b2:	f7fd fb73 	bl	8002d9c <assert_failed>
 80056b6:	e6e0      	b.n	800547a <HAL_ADC_Init+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e78d      	b.n	80055de <HAL_ADC_Init+0x21a>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80056c2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80056c6:	4802      	ldr	r0, [pc, #8]	; (80056d0 <HAL_ADC_Init+0x30c>)
 80056c8:	f7fd fb68 	bl	8002d9c <assert_failed>
 80056cc:	e6b9      	b.n	8005442 <HAL_ADC_Init+0x7e>
 80056ce:	bf00      	nop
 80056d0:	08025ff8 	.word	0x08025ff8

080056d4 <HAL_ADC_Start>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80056d4:	6983      	ldr	r3, [r0, #24]
  __IO uint32_t counter = 0;
 80056d6:	2200      	movs	r2, #0
{
 80056d8:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80056da:	2b01      	cmp	r3, #1
{
 80056dc:	b082      	sub	sp, #8
 80056de:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80056e0:	9201      	str	r2, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80056e2:	d904      	bls.n	80056ee <HAL_ADC_Start+0x1a>
 80056e4:	f240 21df 	movw	r1, #735	; 0x2df
 80056e8:	4840      	ldr	r0, [pc, #256]	; (80057ec <HAL_ADC_Start+0x118>)
 80056ea:	f7fd fb57 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80056ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80056f0:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80056f4:	d173      	bne.n	80057de <HAL_ADC_Start+0x10a>
  __HAL_LOCK(hadc);
 80056f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d06c      	beq.n	80057d8 <HAL_ADC_Start+0x104>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056fe:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8005700:	2101      	movs	r1, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005702:	6893      	ldr	r3, [r2, #8]
  __HAL_LOCK(hadc);
 8005704:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005708:	07d9      	lsls	r1, r3, #31
 800570a:	d414      	bmi.n	8005736 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800570c:	4b38      	ldr	r3, [pc, #224]	; (80057f0 <HAL_ADC_Start+0x11c>)
 800570e:	4839      	ldr	r0, [pc, #228]	; (80057f4 <HAL_ADC_Start+0x120>)
 8005710:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8005712:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005714:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8005718:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800571c:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800571e:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005724:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8005726:	9b01      	ldr	r3, [sp, #4]
 8005728:	b12b      	cbz	r3, 8005736 <HAL_ADC_Start+0x62>
      counter--;
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	3b01      	subs	r3, #1
 800572e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f9      	bne.n	800572a <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005736:	6893      	ldr	r3, [r2, #8]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d524      	bpl.n	8005786 <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 800573c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800573e:	4b2e      	ldr	r3, [pc, #184]	; (80057f8 <HAL_ADC_Start+0x124>)
 8005740:	400b      	ands	r3, r1
 8005742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005746:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005748:	6853      	ldr	r3, [r2, #4]
 800574a:	0558      	lsls	r0, r3, #21
 800574c:	d505      	bpl.n	800575a <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800574e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005750:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005758:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800575a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800575c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005760:	d026      	beq.n	80057b0 <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005762:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005764:	f023 0306 	bic.w	r3, r3, #6
 8005768:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800576a:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800576e:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <HAL_ADC_Start+0x128>)
    __HAL_UNLOCK(hadc);
 8005772:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005776:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	06c9      	lsls	r1, r1, #27
 800577c:	d106      	bne.n	800578c <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800577e:	6890      	ldr	r0, [r2, #8]
 8005780:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005784:	d016      	beq.n	80057b4 <HAL_ADC_Start+0xe0>
  return HAL_OK;
 8005786:	2000      	movs	r0, #0
}
 8005788:	b002      	add	sp, #8
 800578a:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800578c:	491c      	ldr	r1, [pc, #112]	; (8005800 <HAL_ADC_Start+0x12c>)
 800578e:	428a      	cmp	r2, r1
 8005790:	d016      	beq.n	80057c0 <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005792:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005794:	06db      	lsls	r3, r3, #27
 8005796:	d4f6      	bmi.n	8005786 <HAL_ADC_Start+0xb2>
 8005798:	491a      	ldr	r1, [pc, #104]	; (8005804 <HAL_ADC_Start+0x130>)
 800579a:	428a      	cmp	r2, r1
 800579c:	d1f3      	bne.n	8005786 <HAL_ADC_Start+0xb2>
 800579e:	6888      	ldr	r0, [r1, #8]
 80057a0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80057a4:	d1ef      	bne.n	8005786 <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057a6:	688b      	ldr	r3, [r1, #8]
 80057a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ac:	608b      	str	r3, [r1, #8]
 80057ae:	e7eb      	b.n	8005788 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 80057b0:	6463      	str	r3, [r4, #68]	; 0x44
 80057b2:	e7da      	b.n	800576a <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057b4:	6893      	ldr	r3, [r2, #8]
 80057b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	6093      	str	r3, [r2, #8]
}
 80057bc:	b002      	add	sp, #8
 80057be:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057c0:	6893      	ldr	r3, [r2, #8]
 80057c2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80057c6:	d103      	bne.n	80057d0 <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057c8:	6893      	ldr	r3, [r2, #8]
 80057ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ce:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <HAL_ADC_Start+0x128>)
  return HAL_OK;
 80057d2:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	e7d7      	b.n	8005788 <HAL_ADC_Start+0xb4>
  __HAL_LOCK(hadc);
 80057d8:	2002      	movs	r0, #2
}
 80057da:	b002      	add	sp, #8
 80057dc:	bd10      	pop	{r4, pc}
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80057de:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80057e2:	4802      	ldr	r0, [pc, #8]	; (80057ec <HAL_ADC_Start+0x118>)
 80057e4:	f7fd fada 	bl	8002d9c <assert_failed>
 80057e8:	e785      	b.n	80056f6 <HAL_ADC_Start+0x22>
 80057ea:	bf00      	nop
 80057ec:	08025ff8 	.word	0x08025ff8
 80057f0:	20000248 	.word	0x20000248
 80057f4:	431bde83 	.word	0x431bde83
 80057f8:	fffff8fe 	.word	0xfffff8fe
 80057fc:	40012300 	.word	0x40012300
 8005800:	40012000 	.word	0x40012000
 8005804:	40012200 	.word	0x40012200

08005808 <HAL_ADC_ConvCpltCallback>:
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop

0800580c <HAL_ADC_LevelOutOfWindowCallback>:
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <HAL_ADC_ErrorCallback>:
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop

08005814 <HAL_ADC_IRQHandler>:
{
 8005814:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005816:	6983      	ldr	r3, [r0, #24]
{
 8005818:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800581a:	2b01      	cmp	r3, #1
 800581c:	d904      	bls.n	8005828 <HAL_ADC_IRQHandler+0x14>
 800581e:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8005822:	4856      	ldr	r0, [pc, #344]	; (800597c <HAL_ADC_IRQHandler+0x168>)
 8005824:	f7fd faba 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005828:	69e3      	ldr	r3, [r4, #28]
 800582a:	3b01      	subs	r3, #1
 800582c:	2b0f      	cmp	r3, #15
 800582e:	f200 808f 	bhi.w	8005950 <HAL_ADC_IRQHandler+0x13c>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005832:	6963      	ldr	r3, [r4, #20]
 8005834:	2b02      	cmp	r3, #2
 8005836:	f200 8085 	bhi.w	8005944 <HAL_ADC_IRQHandler+0x130>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800583e:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005840:	0790      	lsls	r0, r2, #30
 8005842:	d513      	bpl.n	800586c <HAL_ADC_IRQHandler+0x58>
 8005844:	068a      	lsls	r2, r1, #26
 8005846:	d511      	bpl.n	800586c <HAL_ADC_IRQHandler+0x58>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800584a:	06d5      	lsls	r5, r2, #27
 800584c:	d403      	bmi.n	8005856 <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800584e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005854:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800585c:	d058      	beq.n	8005910 <HAL_ADC_IRQHandler+0xfc>
    HAL_ADC_ConvCpltCallback(hadc);
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff ffd2 	bl	8005808 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f06f 0212 	mvn.w	r2, #18
 800586a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800586c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800586e:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8005870:	0752      	lsls	r2, r2, #29
 8005872:	d513      	bpl.n	800589c <HAL_ADC_IRQHandler+0x88>
 8005874:	060d      	lsls	r5, r1, #24
 8005876:	d511      	bpl.n	800589c <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005878:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800587a:	06d0      	lsls	r0, r2, #27
 800587c:	d403      	bmi.n	8005886 <HAL_ADC_IRQHandler+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800587e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005884:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800588c:	d022      	beq.n	80058d4 <HAL_ADC_IRQHandler+0xc0>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f960 	bl	8005b54 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f06f 020c 	mvn.w	r2, #12
 800589a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800589c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800589e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80058a0:	0650      	lsls	r0, r2, #25
 80058a2:	d504      	bpl.n	80058ae <HAL_ADC_IRQHandler+0x9a>
 80058a4:	07ca      	lsls	r2, r1, #31
 80058a6:	d502      	bpl.n	80058ae <HAL_ADC_IRQHandler+0x9a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	07d5      	lsls	r5, r2, #31
 80058ac:	d456      	bmi.n	800595c <HAL_ADC_IRQHandler+0x148>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80058ae:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80058b0:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 80058b2:	0690      	lsls	r0, r2, #26
 80058b4:	d50d      	bpl.n	80058d2 <HAL_ADC_IRQHandler+0xbe>
 80058b6:	014a      	lsls	r2, r1, #5
 80058b8:	d50b      	bpl.n	80058d2 <HAL_ADC_IRQHandler+0xbe>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058bc:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80058c0:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058c2:	f042 0202 	orr.w	r2, r2, #2
 80058c6:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058c8:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80058ca:	f7ff ffa1 	bl	8005810 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	601d      	str	r5, [r3, #0]
}
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80058d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80058d6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80058da:	d14b      	bne.n	8005974 <HAL_ADC_IRQHandler+0x160>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058dc:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80058de:	0552      	lsls	r2, r2, #21
 80058e0:	d4d5      	bmi.n	800588e <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80058e2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80058e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80058e8:	d1d1      	bne.n	800588e <HAL_ADC_IRQHandler+0x7a>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80058ea:	69a2      	ldr	r2, [r4, #24]
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	d1ce      	bne.n	800588e <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80058f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058fe:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005902:	05dd      	lsls	r5, r3, #23
 8005904:	d4c3      	bmi.n	800588e <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	6423      	str	r3, [r4, #64]	; 0x40
 800590e:	e7be      	b.n	800588e <HAL_ADC_IRQHandler+0x7a>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005910:	69a2      	ldr	r2, [r4, #24]
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1a3      	bne.n	800585e <HAL_ADC_IRQHandler+0x4a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005918:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800591c:	d002      	beq.n	8005924 <HAL_ADC_IRQHandler+0x110>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800591e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005920:	0550      	lsls	r0, r2, #21
 8005922:	d49c      	bmi.n	800585e <HAL_ADC_IRQHandler+0x4a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	f022 0220 	bic.w	r2, r2, #32
 800592a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800592c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800592e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005932:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005936:	04d9      	lsls	r1, r3, #19
 8005938:	d491      	bmi.n	800585e <HAL_ADC_IRQHandler+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800593a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	6423      	str	r3, [r4, #64]	; 0x40
 8005942:	e78c      	b.n	800585e <HAL_ADC_IRQHandler+0x4a>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8005944:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 8005948:	480c      	ldr	r0, [pc, #48]	; (800597c <HAL_ADC_IRQHandler+0x168>)
 800594a:	f7fd fa27 	bl	8002d9c <assert_failed>
 800594e:	e774      	b.n	800583a <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8005950:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8005954:	4809      	ldr	r0, [pc, #36]	; (800597c <HAL_ADC_IRQHandler+0x168>)
 8005956:	f7fd fa21 	bl	8002d9c <assert_failed>
 800595a:	e76a      	b.n	8005832 <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800595c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800595e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005964:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005966:	f7ff ff51 	bl	800580c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f06f 0201 	mvn.w	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e79c      	b.n	80058ae <HAL_ADC_IRQHandler+0x9a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005974:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8005976:	0551      	lsls	r1, r2, #21
 8005978:	d489      	bmi.n	800588e <HAL_ADC_IRQHandler+0x7a>
 800597a:	e7af      	b.n	80058dc <HAL_ADC_IRQHandler+0xc8>
 800597c:	08025ff8 	.word	0x08025ff8

08005980 <HAL_ADC_ConfigChannel>:
{
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	460d      	mov	r5, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005984:	4a6e      	ldr	r2, [pc, #440]	; (8005b40 <HAL_ADC_ConfigChannel+0x1c0>)
{
 8005986:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8005988:	2100      	movs	r1, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800598a:	682b      	ldr	r3, [r5, #0]
{
 800598c:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800598e:	9101      	str	r1, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005990:	4293      	cmp	r3, r2
 8005992:	bf18      	it	ne
 8005994:	2b12      	cmpne	r3, #18
 8005996:	d902      	bls.n	800599e <HAL_ADC_ConfigChannel+0x1e>
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d143      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800599e:	686b      	ldr	r3, [r5, #4]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d848      	bhi.n	8005a38 <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80059a6:	68ab      	ldr	r3, [r5, #8]
 80059a8:	2b07      	cmp	r3, #7
 80059aa:	d84d      	bhi.n	8005a48 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 80059ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d052      	beq.n	8005a5a <HAL_ADC_ConfigChannel+0xda>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80059b4:	682f      	ldr	r7, [r5, #0]
  __HAL_LOCK(hadc);
 80059b6:	2201      	movs	r2, #1
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	fa1f fc87 	uxth.w	ip, r7
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80059be:	2f09      	cmp	r7, #9
  __HAL_LOCK(hadc);
 80059c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 80059c4:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 80059c8:	68aa      	ldr	r2, [r5, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80059ca:	d949      	bls.n	8005a60 <HAL_ADC_ConfigChannel+0xe0>
 80059cc:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80059d0:	d046      	beq.n	8005a60 <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059d2:	3e1e      	subs	r6, #30
 80059d4:	2007      	movs	r0, #7
 80059d6:	68d9      	ldr	r1, [r3, #12]
 80059d8:	40b0      	lsls	r0, r6
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059da:	f8df e164 	ldr.w	lr, [pc, #356]	; 8005b40 <HAL_ADC_ConfigChannel+0x1c0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059de:	ea21 0100 	bic.w	r1, r1, r0
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059e2:	4577      	cmp	r7, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80059e4:	60d9      	str	r1, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059e6:	f000 809c 	beq.w	8005b22 <HAL_ADC_ConfigChannel+0x1a2>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059ea:	fa02 f606 	lsl.w	r6, r2, r6
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	4316      	orrs	r6, r2
 80059f2:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80059f4:	6869      	ldr	r1, [r5, #4]
 80059f6:	2906      	cmp	r1, #6
 80059f8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80059fc:	d841      	bhi.n	8005a82 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059fe:	3a05      	subs	r2, #5
 8005a00:	201f      	movs	r0, #31
 8005a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a04:	4090      	lsls	r0, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a06:	fa0c f202 	lsl.w	r2, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a0a:	ea21 0100 	bic.w	r1, r1, r0
 8005a0e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a12:	430a      	orrs	r2, r1
 8005a14:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a16:	4a4b      	ldr	r2, [pc, #300]	; (8005b44 <HAL_ADC_ConfigChannel+0x1c4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d044      	beq.n	8005aa6 <HAL_ADC_ConfigChannel+0x126>
  __HAL_UNLOCK(hadc);
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005a22:	b003      	add	sp, #12
 8005a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005a26:	f240 615d 	movw	r1, #1629	; 0x65d
 8005a2a:	4847      	ldr	r0, [pc, #284]	; (8005b48 <HAL_ADC_ConfigChannel+0x1c8>)
 8005a2c:	f7fd f9b6 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005a30:	686b      	ldr	r3, [r5, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d9b6      	bls.n	80059a6 <HAL_ADC_ConfigChannel+0x26>
 8005a38:	f240 615e 	movw	r1, #1630	; 0x65e
 8005a3c:	4842      	ldr	r0, [pc, #264]	; (8005b48 <HAL_ADC_ConfigChannel+0x1c8>)
 8005a3e:	f7fd f9ad 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005a42:	68ab      	ldr	r3, [r5, #8]
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	d9b1      	bls.n	80059ac <HAL_ADC_ConfigChannel+0x2c>
 8005a48:	f240 615f 	movw	r1, #1631	; 0x65f
 8005a4c:	483e      	ldr	r0, [pc, #248]	; (8005b48 <HAL_ADC_ConfigChannel+0x1c8>)
 8005a4e:	f7fd f9a5 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hadc);
 8005a52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d1ac      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x34>
 8005a5a:	2002      	movs	r0, #2
}
 8005a5c:	b003      	add	sp, #12
 8005a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a60:	2007      	movs	r0, #7
 8005a62:	6919      	ldr	r1, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a64:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a66:	fa00 f606 	lsl.w	r6, r0, r6
 8005a6a:	ea21 0606 	bic.w	r6, r1, r6
  if (sConfig->Rank < 7)
 8005a6e:	6869      	ldr	r1, [r5, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a70:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005a72:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a74:	691e      	ldr	r6, [r3, #16]
 8005a76:	ea46 0602 	orr.w	r6, r6, r2
 8005a7a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8005a7e:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8005a80:	d9bd      	bls.n	80059fe <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13)
 8005a82:	290c      	cmp	r1, #12
 8005a84:	d838      	bhi.n	8005af8 <HAL_ADC_ConfigChannel+0x178>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a86:	f1a2 0023 	sub.w	r0, r2, #35	; 0x23
 8005a8a:	251f      	movs	r5, #31
 8005a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a8e:	4085      	lsls	r5, r0
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a90:	fa0c f200 	lsl.w	r2, ip, r0
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a94:	ea21 0105 	bic.w	r1, r1, r5
 8005a98:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a9c:	4310      	orrs	r0, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a9e:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <HAL_ADC_ConfigChannel+0x1c4>)
 8005aa0:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005aa2:	6318      	str	r0, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005aa4:	d1ba      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
 8005aa6:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8005aaa:	d033      	beq.n	8005b14 <HAL_ADC_ConfigChannel+0x194>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005aac:	2f12      	cmp	r7, #18
 8005aae:	d03d      	beq.n	8005b2c <HAL_ADC_ConfigChannel+0x1ac>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ab0:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <HAL_ADC_ConfigChannel+0x1c0>)
 8005ab2:	429f      	cmp	r7, r3
 8005ab4:	d140      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x1b8>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ab6:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <HAL_ADC_ConfigChannel+0x1cc>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ab8:	4921      	ldr	r1, [pc, #132]	; (8005b40 <HAL_ADC_ConfigChannel+0x1c0>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005aba:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005abc:	428f      	cmp	r7, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ac2:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ac4:	d1aa      	bne.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ac6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <HAL_ADC_ConfigChannel+0x1d0>)
 8005acc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	0c9b      	lsrs	r3, r3, #18
 8005adc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d098      	beq.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8005aea:	9b01      	ldr	r3, [sp, #4]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f9      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x16a>
 8005af6:	e791      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005af8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8005afc:	251f      	movs	r5, #31
 8005afe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005b00:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b02:	fa0c f201 	lsl.w	r2, ip, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b06:	ea20 0005 	bic.w	r0, r0, r5
 8005b0a:	62d8      	str	r0, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b12:	e780      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005b14:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8005b18:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005b1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8005b20:	e77c      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005b22:	68de      	ldr	r6, [r3, #12]
 8005b24:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8005b28:	60de      	str	r6, [r3, #12]
 8005b2a:	e763      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x74>
    ADC->CCR |= ADC_CCR_VBATE;
 8005b2c:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <HAL_ADC_ConfigChannel+0x1cc>)
 8005b2e:	6853      	ldr	r3, [r2, #4]
 8005b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b34:	6053      	str	r3, [r2, #4]
 8005b36:	e771      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b38:	2f11      	cmp	r7, #17
 8005b3a:	d0bc      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0x136>
 8005b3c:	e76e      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x9c>
 8005b3e:	bf00      	nop
 8005b40:	10000012 	.word	0x10000012
 8005b44:	40012000 	.word	0x40012000
 8005b48:	08025ff8 	.word	0x08025ff8
 8005b4c:	40012300 	.word	0x40012300
 8005b50:	20000248 	.word	0x20000248

08005b54 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005b58:	680a      	ldr	r2, [r1, #0]
 8005b5a:	2a19      	cmp	r2, #25
{
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005b62:	d93e      	bls.n	8005be2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8005b64:	f240 3193 	movw	r1, #915	; 0x393
 8005b68:	4829      	ldr	r0, [pc, #164]	; (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005b6a:	f7fd f917 	bl	8002d9c <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005b74:	d13d      	bne.n	8005bf2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	bf18      	it	ne
 8005b82:	2b00      	cmpne	r3, #0
 8005b84:	bf14      	ite	ne
 8005b86:	2201      	movne	r2, #1
 8005b88:	2200      	moveq	r2, #0
 8005b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8e:	bf0c      	ite	eq
 8005b90:	2200      	moveq	r2, #0
 8005b92:	f002 0201 	andne.w	r2, r2, #1
 8005b96:	b112      	cbz	r2, 8005b9e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9c:	d131      	bne.n	8005c02 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b9e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d02b      	beq.n	8005bfe <HAL_ADCEx_MultiModeConfigChannel+0xa6>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005ba6:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba8:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005baa:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005bac:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8005bae:	f022 021f 	bic.w	r2, r2, #31
 8005bb2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	6826      	ldr	r6, [r4, #0]
 8005bb8:	4332      	orrs	r2, r6
 8005bba:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005bc2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	6866      	ldr	r6, [r4, #4]
 8005bc8:	4332      	orrs	r2, r6
 8005bca:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005bd2:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8005bd4:	68a4      	ldr	r4, [r4, #8]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4322      	orrs	r2, r4
 8005bda:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8005bdc:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8005be2:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8005be4:	40d3      	lsrs	r3, r2
 8005be6:	07db      	lsls	r3, r3, #31
 8005be8:	d5bc      	bpl.n	8005b64 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8005bea:	6863      	ldr	r3, [r4, #4]
 8005bec:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8005bf0:	d0c1      	beq.n	8005b76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005bf2:	f44f 7165 	mov.w	r1, #916	; 0x394
 8005bf6:	4806      	ldr	r0, [pc, #24]	; (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005bf8:	f7fd f8d0 	bl	8002d9c <assert_failed>
 8005bfc:	e7bb      	b.n	8005b76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8005bfe:	2002      	movs	r0, #2
}
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8005c02:	f240 3195 	movw	r1, #917	; 0x395
 8005c06:	4802      	ldr	r0, [pc, #8]	; (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8005c08:	f7fd f8c8 	bl	8002d9c <assert_failed>
 8005c0c:	e7c7      	b.n	8005b9e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8005c0e:	bf00      	nop
 8005c10:	08026030 	.word	0x08026030
 8005c14:	40012300 	.word	0x40012300
 8005c18:	02e602e7 	.word	0x02e602e7

08005c1c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005c1c:	1ec3      	subs	r3, r0, #3
 8005c1e:	2b04      	cmp	r3, #4
{
 8005c20:	b510      	push	{r4, lr}
 8005c22:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005c24:	d903      	bls.n	8005c2e <HAL_NVIC_SetPriorityGrouping+0x12>
 8005c26:	2192      	movs	r1, #146	; 0x92
 8005c28:	4807      	ldr	r0, [pc, #28]	; (8005c48 <HAL_NVIC_SetPriorityGrouping+0x2c>)
 8005c2a:	f7fd f8b7 	bl	8002d9c <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c2e:	4907      	ldr	r1, [pc, #28]	; (8005c4c <HAL_NVIC_SetPriorityGrouping+0x30>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c30:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c34:	0224      	lsls	r4, r4, #8
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c38:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c3a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c3e:	4002      	ands	r2, r0
 8005c40:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c42:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005c44:	60cc      	str	r4, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005c46:	bd10      	pop	{r4, pc}
 8005c48:	0802606c 	.word	0x0802606c
 8005c4c:	e000ed00 	.word	0xe000ed00
 8005c50:	05fa0000 	.word	0x05fa0000

08005c54 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005c54:	2a0f      	cmp	r2, #15
{ 
 8005c56:	b570      	push	{r4, r5, r6, lr}
 8005c58:	4616      	mov	r6, r2
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005c5e:	d832      	bhi.n	8005cc6 <HAL_NVIC_SetPriority+0x72>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005c60:	2c0f      	cmp	r4, #15
 8005c62:	d82b      	bhi.n	8005cbc <HAL_NVIC_SetPriority+0x68>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c64:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <HAL_NVIC_SetPriority+0x7c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c6c:	f1c3 0107 	rsb	r1, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c70:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c72:	2904      	cmp	r1, #4
 8005c74:	bf28      	it	cs
 8005c76:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c78:	2a06      	cmp	r2, #6
 8005c7a:	d917      	bls.n	8005cac <HAL_NVIC_SetPriority+0x58>
 8005c7c:	3b03      	subs	r3, #3
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	409a      	lsls	r2, r3
 8005c84:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8005c8c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8005c92:	ea24 0202 	bic.w	r2, r4, r2
 8005c96:	fa02 f203 	lsl.w	r2, r2, r3
 8005c9a:	ea42 0206 	orr.w	r2, r2, r6
 8005c9e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8005ca2:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8005ca4:	db05      	blt.n	8005cb2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_NVIC_SetPriority+0x80>)
 8005ca8:	555a      	strb	r2, [r3, r5]
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cac:	2600      	movs	r6, #0
 8005cae:	4633      	mov	r3, r6
 8005cb0:	e7ea      	b.n	8005c88 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb2:	f005 050f 	and.w	r5, r5, #15
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_NVIC_SetPriority+0x84>)
 8005cb8:	555a      	strb	r2, [r3, r5]
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005cbc:	21ab      	movs	r1, #171	; 0xab
 8005cbe:	4807      	ldr	r0, [pc, #28]	; (8005cdc <HAL_NVIC_SetPriority+0x88>)
 8005cc0:	f7fd f86c 	bl	8002d9c <assert_failed>
 8005cc4:	e7ce      	b.n	8005c64 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005cc6:	21aa      	movs	r1, #170	; 0xaa
 8005cc8:	4804      	ldr	r0, [pc, #16]	; (8005cdc <HAL_NVIC_SetPriority+0x88>)
 8005cca:	f7fd f867 	bl	8002d9c <assert_failed>
 8005cce:	e7c7      	b.n	8005c60 <HAL_NVIC_SetPriority+0xc>
 8005cd0:	e000ed00 	.word	0xe000ed00
 8005cd4:	e000e400 	.word	0xe000e400
 8005cd8:	e000ed14 	.word	0xe000ed14
 8005cdc:	0802606c 	.word	0x0802606c

08005ce0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	db08      	blt.n	8005cf6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ce4:	f000 011f 	and.w	r1, r0, #31
 8005ce8:	2301      	movs	r3, #1
 8005cea:	0940      	lsrs	r0, r0, #5
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_NVIC_EnableIRQ+0x20>)
 8005cee:	408b      	lsls	r3, r1
 8005cf0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005cf4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005cf6:	21be      	movs	r1, #190	; 0xbe
 8005cf8:	4802      	ldr	r0, [pc, #8]	; (8005d04 <HAL_NVIC_EnableIRQ+0x24>)
 8005cfa:	f7fd b84f 	b.w	8002d9c <assert_failed>
 8005cfe:	bf00      	nop
 8005d00:	e000e100 	.word	0xe000e100
 8005d04:	0802606c 	.word	0x0802606c

08005d08 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d077      	beq.n	8005dfc <HAL_CRC_Init+0xf4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005d0c:	4b3c      	ldr	r3, [pc, #240]	; (8005e00 <HAL_CRC_Init+0xf8>)
 8005d0e:	6802      	ldr	r2, [r0, #0]
 8005d10:	429a      	cmp	r2, r3
{
 8005d12:	b510      	push	{r4, lr}
 8005d14:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8005d16:	d003      	beq.n	8005d20 <HAL_CRC_Init+0x18>
 8005d18:	2170      	movs	r1, #112	; 0x70
 8005d1a:	483a      	ldr	r0, [pc, #232]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005d1c:	f7fd f83e 	bl	8002d9c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d20:	7f63      	ldrb	r3, [r4, #29]
 8005d22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d045      	beq.n	8005db6 <HAL_CRC_Init+0xae>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005d2a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d2c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005d2e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d30:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005d32:	d830      	bhi.n	8005d96 <HAL_CRC_Init+0x8e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d135      	bne.n	8005da4 <HAL_CRC_Init+0x9c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <HAL_CRC_Init+0x100>)
 8005d3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	f022 0218 	bic.w	r2, r2, #24
 8005d44:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8005d46:	7962      	ldrb	r2, [r4, #5]
 8005d48:	2a01      	cmp	r2, #1
 8005d4a:	d904      	bls.n	8005d56 <HAL_CRC_Init+0x4e>
 8005d4c:	2190      	movs	r1, #144	; 0x90
 8005d4e:	482d      	ldr	r0, [pc, #180]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005d50:	f7fd f824 	bl	8002d9c <assert_failed>
 8005d54:	7962      	ldrb	r2, [r4, #5]
 8005d56:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	d136      	bne.n	8005dca <HAL_CRC_Init+0xc2>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d60:	611a      	str	r2, [r3, #16]
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8005d62:	6962      	ldr	r2, [r4, #20]
 8005d64:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005d68:	d135      	bne.n	8005dd6 <HAL_CRC_Init+0xce>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d6a:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005d6c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d6e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8005d72:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005d74:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d78:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005d7a:	d138      	bne.n	8005dee <HAL_CRC_Init+0xe6>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d7c:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005d7e:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005d84:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d86:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005d88:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d8a:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005d8c:	d82a      	bhi.n	8005de4 <HAL_CRC_Init+0xdc>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d8e:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005d90:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8005d92:	7763      	strb	r3, [r4, #29]
}
 8005d94:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005d96:	217e      	movs	r1, #126	; 0x7e
 8005d98:	481a      	ldr	r0, [pc, #104]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005d9a:	f7fc ffff 	bl	8002d9c <assert_failed>
 8005d9e:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0c9      	beq.n	8005d38 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005da4:	68e2      	ldr	r2, [r4, #12]
 8005da6:	4620      	mov	r0, r4
 8005da8:	68a1      	ldr	r1, [r4, #8]
 8005daa:	f000 f82f 	bl	8005e0c <HAL_CRCEx_Polynomial_Set>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0c9      	beq.n	8005d46 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8005db2:	2001      	movs	r0, #1
}
 8005db4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8005db6:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7fd fed1 	bl	8003b60 <HAL_CRC_MspInit>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005dbe:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005dc0:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005dc2:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005dc4:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005dc6:	d9b5      	bls.n	8005d34 <HAL_CRC_Init+0x2c>
 8005dc8:	e7e5      	b.n	8005d96 <HAL_CRC_Init+0x8e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8005dce:	6962      	ldr	r2, [r4, #20]
 8005dd0:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8005dd4:	d0c9      	beq.n	8005d6a <HAL_CRC_Init+0x62>
 8005dd6:	219c      	movs	r1, #156	; 0x9c
 8005dd8:	480a      	ldr	r0, [pc, #40]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005dda:	f7fc ffdf 	bl	8002d9c <assert_failed>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	6962      	ldr	r2, [r4, #20]
 8005de2:	e7c2      	b.n	8005d6a <HAL_CRC_Init+0x62>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005de4:	21a5      	movs	r1, #165	; 0xa5
 8005de6:	4807      	ldr	r0, [pc, #28]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005de8:	f7fc ffd8 	bl	8002d9c <assert_failed>
 8005dec:	e7cf      	b.n	8005d8e <HAL_CRC_Init+0x86>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8005dee:	4805      	ldr	r0, [pc, #20]	; (8005e04 <HAL_CRC_Init+0xfc>)
 8005df0:	21a0      	movs	r1, #160	; 0xa0
 8005df2:	f7fc ffd3 	bl	8002d9c <assert_failed>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	69a0      	ldr	r0, [r4, #24]
 8005dfa:	e7bf      	b.n	8005d7c <HAL_CRC_Init+0x74>
    return HAL_ERROR;
 8005dfc:	2001      	movs	r0, #1
}
 8005dfe:	4770      	bx	lr
 8005e00:	40023000 	.word	0x40023000
 8005e04:	080260a8 	.word	0x080260a8
 8005e08:	04c11db7 	.word	0x04c11db7

08005e0c <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005e0c:	f032 0318 	bics.w	r3, r2, #24
{
 8005e10:	b530      	push	{r4, r5, lr}
 8005e12:	4605      	mov	r5, r0
 8005e14:	b083      	sub	sp, #12
 8005e16:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005e18:	d005      	beq.n	8005e26 <HAL_CRCEx_Polynomial_Set+0x1a>
 8005e1a:	215f      	movs	r1, #95	; 0x5f
 8005e1c:	481a      	ldr	r0, [pc, #104]	; (8005e88 <HAL_CRCEx_Polynomial_Set+0x7c>)
 8005e1e:	9201      	str	r2, [sp, #4]
 8005e20:	f7fc ffbc 	bl	8002d9c <assert_failed>
 8005e24:	9a01      	ldr	r2, [sp, #4]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005e26:	231e      	movs	r3, #30
 8005e28:	e002      	b.n	8005e30 <HAL_CRCEx_Polynomial_Set+0x24>
 8005e2a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005e2e:	d320      	bcc.n	8005e72 <HAL_CRCEx_Polynomial_Set+0x66>
 8005e30:	fa24 f103 	lsr.w	r1, r4, r3
 8005e34:	07c9      	lsls	r1, r1, #31
 8005e36:	d5f8      	bpl.n	8005e2a <HAL_CRCEx_Polynomial_Set+0x1e>
  {
  }

  switch (PolyLength)
 8005e38:	2a18      	cmp	r2, #24
 8005e3a:	d81c      	bhi.n	8005e76 <HAL_CRCEx_Polynomial_Set+0x6a>
 8005e3c:	e8df f002 	tbb	[pc, r2]
 8005e40:	1b1b1b0f 	.word	0x1b1b1b0f
 8005e44:	1b1b1b1b 	.word	0x1b1b1b1b
 8005e48:	1b1b1b21 	.word	0x1b1b1b21
 8005e4c:	1b1b1b1b 	.word	0x1b1b1b1b
 8005e50:	1b1b1b0d 	.word	0x1b1b1b0d
 8005e54:	1b1b1b1b 	.word	0x1b1b1b1b
 8005e58:	1e          	.byte	0x1e
 8005e59:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005e5a:	2b07      	cmp	r3, #7
 8005e5c:	d80b      	bhi.n	8005e76 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005e5e:	6829      	ldr	r1, [r5, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005e60:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005e62:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005e64:	688b      	ldr	r3, [r1, #8]
 8005e66:	f023 0318 	bic.w	r3, r3, #24
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	608a      	str	r2, [r1, #8]
  }
  /* Return function status */
  return status;
}
 8005e6e:	b003      	add	sp, #12
 8005e70:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	d0f3      	beq.n	8005e5e <HAL_CRCEx_Polynomial_Set+0x52>
      status =  HAL_ERROR;
 8005e76:	2001      	movs	r0, #1
}
 8005e78:	b003      	add	sp, #12
 8005e7a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d9ee      	bls.n	8005e5e <HAL_CRCEx_Polynomial_Set+0x52>
 8005e80:	e7f9      	b.n	8005e76 <HAL_CRCEx_Polynomial_Set+0x6a>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	d9eb      	bls.n	8005e5e <HAL_CRCEx_Polynomial_Set+0x52>
 8005e86:	e7f6      	b.n	8005e76 <HAL_CRCEx_Polynomial_Set+0x6a>
 8005e88:	080260e0 	.word	0x080260e0

08005e8c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8005e8c:	b1d8      	cbz	r0, 8005ec6 <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_DAC_Init+0x40>)
 8005e90:	6802      	ldr	r2, [r0, #0]
 8005e92:	429a      	cmp	r2, r3
{ 
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8005e98:	d004      	beq.n	8005ea4 <HAL_DAC_Init+0x18>
 8005e9a:	f240 1113 	movw	r1, #275	; 0x113
 8005e9e:	480c      	ldr	r0, [pc, #48]	; (8005ed0 <HAL_DAC_Init+0x44>)
 8005ea0:	f7fc ff7c 	bl	8002d9c <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005ea4:	7923      	ldrb	r3, [r4, #4]
 8005ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eaa:	b13b      	cbz	r3, 8005ebc <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005eac:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eae:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005eb0:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eb2:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8005eb4:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005eb6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005eb8:	7122      	strb	r2, [r4, #4]
}
 8005eba:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 8005ebc:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f7fd fe64 	bl	8003b8c <HAL_DAC_MspInit>
 8005ec4:	e7f2      	b.n	8005eac <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8005ec6:	2001      	movs	r0, #1
}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40007400 	.word	0x40007400
 8005ed0:	0802611c 	.word	0x0802611c

08005ed4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	4699      	mov	r9, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8005eda:	f031 0310 	bics.w	r3, r1, #16
{
 8005ede:	460f      	mov	r7, r1
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	9e08      	ldr	r6, [sp, #32]
  assert_param(IS_DAC_CHANNEL(Channel));
 8005ee6:	d156      	bne.n	8005f96 <HAL_DAC_Start_DMA+0xc2>
  assert_param(IS_DAC_ALIGN(Alignment));
 8005ee8:	f036 0304 	bics.w	r3, r6, #4
 8005eec:	d001      	beq.n	8005ef2 <HAL_DAC_Start_DMA+0x1e>
 8005eee:	2e08      	cmp	r6, #8
 8005ef0:	d146      	bne.n	8005f80 <HAL_DAC_Start_DMA+0xac>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005ef2:	7962      	ldrb	r2, [r4, #5]
 8005ef4:	2a01      	cmp	r2, #1
 8005ef6:	d04b      	beq.n	8005f90 <HAL_DAC_Start_DMA+0xbc>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ef8:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8005efa:	2201      	movs	r2, #1
 8005efc:	6825      	ldr	r5, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005efe:	7123      	strb	r3, [r4, #4]
  __HAL_LOCK(hdac);
 8005f00:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005f02:	682b      	ldr	r3, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 8005f04:	b9cf      	cbnz	r7, 8005f3a <HAL_DAC_Start_DMA+0x66>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f06:	68a0      	ldr	r0, [r4, #8]
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f0c:	4a2e      	ldr	r2, [pc, #184]	; (8005fc8 <HAL_DAC_Start_DMA+0xf4>)
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8005f0e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f10:	492e      	ldr	r1, [pc, #184]	; (8005fcc <HAL_DAC_Start_DMA+0xf8>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f12:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f14:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <HAL_DAC_Start_DMA+0xfc>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f16:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f18:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8005f1a:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8005f1c:	d050      	beq.n	8005fc0 <HAL_DAC_Start_DMA+0xec>
 8005f1e:	2e08      	cmp	r6, #8
 8005f20:	d04b      	beq.n	8005fba <HAL_DAC_Start_DMA+0xe6>
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d03d      	beq.n	8005fa2 <HAL_DAC_Start_DMA+0xce>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005f26:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f28:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005f2e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8005f32:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005f34:	f000 fb26 	bl	8006584 <HAL_DMA_Start_IT>
 8005f38:	e017      	b.n	8005f6a <HAL_DAC_Start_DMA+0x96>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f3a:	68e0      	ldr	r0, [r4, #12]
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f40:	4a24      	ldr	r2, [pc, #144]	; (8005fd4 <HAL_DAC_Start_DMA+0x100>)
    switch(Alignment)
 8005f42:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005f44:	4924      	ldr	r1, [pc, #144]	; (8005fd8 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005f46:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005f48:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <HAL_DAC_Start_DMA+0x108>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005f4a:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005f4c:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8005f4e:	602b      	str	r3, [r5, #0]
    switch(Alignment)
 8005f50:	d030      	beq.n	8005fb4 <HAL_DAC_Start_DMA+0xe0>
 8005f52:	2e08      	cmp	r6, #8
 8005f54:	d02b      	beq.n	8005fae <HAL_DAC_Start_DMA+0xda>
 8005f56:	b33e      	cbz	r6, 8005fa8 <HAL_DAC_Start_DMA+0xd4>
  if(Channel == DAC_CHANNEL_1)
 8005f58:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f5a:	682e      	ldr	r6, [r5, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	4641      	mov	r1, r8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005f60:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005f64:	602e      	str	r6, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005f66:	f000 fb0d 	bl	8006584 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005f6e:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f70:	6815      	ldr	r5, [r2, #0]
 8005f72:	40b9      	lsls	r1, r7
  
  /* Return function status */
  return HAL_OK;
 8005f74:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f76:	4329      	orrs	r1, r5
 8005f78:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hdac);
 8005f7a:	7163      	strb	r3, [r4, #5]
}
 8005f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8005f80:	f240 210e 	movw	r1, #526	; 0x20e
 8005f84:	4816      	ldr	r0, [pc, #88]	; (8005fe0 <HAL_DAC_Start_DMA+0x10c>)
 8005f86:	f7fc ff09 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hdac);
 8005f8a:	7962      	ldrb	r2, [r4, #5]
 8005f8c:	2a01      	cmp	r2, #1
 8005f8e:	d1b3      	bne.n	8005ef8 <HAL_DAC_Start_DMA+0x24>
 8005f90:	2002      	movs	r0, #2
}
 8005f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8005f96:	f240 210d 	movw	r1, #525	; 0x20d
 8005f9a:	4811      	ldr	r0, [pc, #68]	; (8005fe0 <HAL_DAC_Start_DMA+0x10c>)
 8005f9c:	f7fc fefe 	bl	8002d9c <assert_failed>
 8005fa0:	e7a2      	b.n	8005ee8 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005fa2:	f105 0208 	add.w	r2, r5, #8
        break;
 8005fa6:	e7bf      	b.n	8005f28 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005fa8:	f105 0214 	add.w	r2, r5, #20
        break;
 8005fac:	e7d5      	b.n	8005f5a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005fae:	f105 021c 	add.w	r2, r5, #28
        break;
 8005fb2:	e7d2      	b.n	8005f5a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005fb4:	f105 0218 	add.w	r2, r5, #24
        break;
 8005fb8:	e7cf      	b.n	8005f5a <HAL_DAC_Start_DMA+0x86>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005fba:	f105 0210 	add.w	r2, r5, #16
        break;
 8005fbe:	e7b3      	b.n	8005f28 <HAL_DAC_Start_DMA+0x54>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005fc0:	f105 020c 	add.w	r2, r5, #12
        break;
 8005fc4:	e7b0      	b.n	8005f28 <HAL_DAC_Start_DMA+0x54>
 8005fc6:	bf00      	nop
 8005fc8:	08006059 	.word	0x08006059
 8005fcc:	0800606d 	.word	0x0800606d
 8005fd0:	0800607d 	.word	0x0800607d
 8005fd4:	080061c5 	.word	0x080061c5
 8005fd8:	080061d5 	.word	0x080061d5
 8005fdc:	080061e1 	.word	0x080061e1
 8005fe0:	0802611c 	.word	0x0802611c

08005fe4 <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8005fe4:	f031 0310 	bics.w	r3, r1, #16
{
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	460c      	mov	r4, r1
 8005fec:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8005fee:	d116      	bne.n	800601e <HAL_DAC_Stop_DMA+0x3a>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005ff0:	6803      	ldr	r3, [r0, #0]
 8005ff2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005ff6:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 8005ffc:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006000:	ea20 0006 	bic.w	r0, r0, r6
 8006004:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	ea22 0201 	bic.w	r2, r2, r1
 800600c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800600e:	b9cc      	cbnz	r4, 8006044 <HAL_DAC_Stop_DMA+0x60>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8006010:	68a8      	ldr	r0, [r5, #8]
 8006012:	f000 fb11 	bl	8006638 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8006016:	b9d0      	cbnz	r0, 800604e <HAL_DAC_Stop_DMA+0x6a>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8006018:	2301      	movs	r3, #1
 800601a:	712b      	strb	r3, [r5, #4]
  }

  /* Return function status */
  return status;
}
 800601c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800601e:	f44f 7121 	mov.w	r1, #644	; 0x284
 8006022:	480c      	ldr	r0, [pc, #48]	; (8006054 <HAL_DAC_Stop_DMA+0x70>)
 8006024:	f7fc feba 	bl	8002d9c <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800602e:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8006034:	40a2      	lsls	r2, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006036:	ea21 0100 	bic.w	r1, r1, r0
 800603a:	6019      	str	r1, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800603c:	681c      	ldr	r4, [r3, #0]
 800603e:	ea24 0402 	bic.w	r4, r4, r2
 8006042:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8006044:	68e8      	ldr	r0, [r5, #12]
 8006046:	f000 faf7 	bl	8006638 <HAL_DMA_Abort>
  if(status != HAL_OK)
 800604a:	2800      	cmp	r0, #0
 800604c:	d0e4      	beq.n	8006018 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 800604e:	2304      	movs	r3, #4
 8006050:	712b      	strb	r3, [r5, #4]
}
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	0802611c 	.word	0x0802611c

08006058 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006058:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800605a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800605c:	4620      	mov	r0, r4
 800605e:	f7fb fdf7 	bl	8001c50 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006062:	2301      	movs	r3, #1
 8006064:	7123      	strb	r3, [r4, #4]
}
 8006066:	bd10      	pop	{r4, pc}

08006068 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop

0800606c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800606c:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800606e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006070:	f7ff fffa 	bl	8006068 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006074:	bd08      	pop	{r3, pc}
 8006076:	bf00      	nop

08006078 <HAL_DAC_ErrorCallbackCh1>:
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800607c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800607e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006080:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006082:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006084:	f043 0304 	orr.w	r3, r3, #4
 8006088:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800608a:	f7ff fff5 	bl	8006078 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800608e:	2301      	movs	r3, #1
 8006090:	7123      	strb	r3, [r4, #4]
}
 8006092:	bd10      	pop	{r4, pc}

08006094 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006098:	6803      	ldr	r3, [r0, #0]
 800609a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609c:	0491      	lsls	r1, r2, #18
{
 800609e:	b510      	push	{r4, lr}
 80060a0:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80060a2:	d415      	bmi.n	80060d0 <HAL_DAC_IRQHandler+0x38>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80060a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	d400      	bmi.n	80060ac <HAL_DAC_IRQHandler+0x14>
}
 80060aa:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 80060ac:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80060ae:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80060b2:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 80060b4:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80060b6:	6922      	ldr	r2, [r4, #16]
 80060b8:	f042 0202 	orr.w	r2, r2, #2
 80060bc:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80060be:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80060c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80060ca:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80060cc:	f000 b878 	b.w	80061c0 <HAL_DACEx_DMAUnderrunCallbackCh2>
    hdac->State = HAL_DAC_STATE_ERROR;
 80060d0:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80060d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 80060d6:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80060d8:	6902      	ldr	r2, [r0, #16]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80060e0:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060e8:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80060ea:	f7ff ffd3 	bl	8006094 <HAL_DAC_DMAUnderrunCallbackCh1>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	e7d8      	b.n	80060a4 <HAL_DAC_IRQHandler+0xc>
 80060f2:	bf00      	nop

080060f4 <HAL_DAC_ConfigChannel>:
{
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	460e      	mov	r6, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80060f8:	6809      	ldr	r1, [r1, #0]
{
 80060fa:	4604      	mov	r4, r0
 80060fc:	4615      	mov	r5, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80060fe:	f031 0304 	bics.w	r3, r1, #4
 8006102:	f021 0008 	bic.w	r0, r1, #8
 8006106:	f021 0210 	bic.w	r2, r1, #16
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	2824      	cmp	r0, #36	; 0x24
 8006112:	bf0c      	ite	eq
 8006114:	2300      	moveq	r3, #0
 8006116:	f003 0301 	andne.w	r3, r3, #1
 800611a:	293c      	cmp	r1, #60	; 0x3c
 800611c:	bf0c      	ite	eq
 800611e:	2300      	moveq	r3, #0
 8006120:	f003 0301 	andne.w	r3, r3, #1
 8006124:	2a0c      	cmp	r2, #12
 8006126:	bf0c      	ite	eq
 8006128:	2300      	moveq	r3, #0
 800612a:	f003 0301 	andne.w	r3, r3, #1
 800612e:	b11b      	cbz	r3, 8006138 <HAL_DAC_ConfigChannel+0x44>
 8006130:	f021 0120 	bic.w	r1, r1, #32
 8006134:	2914      	cmp	r1, #20
 8006136:	d135      	bne.n	80061a4 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006138:	6873      	ldr	r3, [r6, #4]
 800613a:	f033 0302 	bics.w	r3, r3, #2
 800613e:	d12b      	bne.n	8006198 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8006140:	f035 0310 	bics.w	r3, r5, #16
 8006144:	d11e      	bne.n	8006184 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8006146:	7963      	ldrb	r3, [r4, #5]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d023      	beq.n	8006194 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 = hdac->Instance->CR;
 800614c:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800614e:	2702      	movs	r7, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006150:	f640 70fe 	movw	r0, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006154:	e9d6 3200 	ldrd	r3, r2, [r6]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006158:	7127      	strb	r7, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800615a:	fa00 f605 	lsl.w	r6, r0, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800615e:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8006160:	6808      	ldr	r0, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006162:	22c0      	movs	r2, #192	; 0xc0
  hdac->State = HAL_DAC_STATE_READY;
 8006164:	2701      	movs	r7, #1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006166:	ea20 0006 	bic.w	r0, r0, r6
  tmpreg1 |= tmpreg2 << Channel;
 800616a:	40ab      	lsls	r3, r5
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800616c:	40aa      	lsls	r2, r5
  __HAL_UNLOCK(hdac);
 800616e:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << Channel;
 8006170:	4303      	orrs	r3, r0
  return HAL_OK;
 8006172:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 8006174:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006176:	680d      	ldr	r5, [r1, #0]
 8006178:	ea25 0502 	bic.w	r5, r5, r2
 800617c:	600d      	str	r5, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800617e:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006180:	7166      	strb	r6, [r4, #5]
}
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006184:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8006188:	4809      	ldr	r0, [pc, #36]	; (80061b0 <HAL_DAC_ConfigChannel+0xbc>)
 800618a:	f7fc fe07 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hdac);
 800618e:	7963      	ldrb	r3, [r4, #5]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d1db      	bne.n	800614c <HAL_DAC_ConfigChannel+0x58>
 8006194:	2002      	movs	r0, #2
}
 8006196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8006198:	f240 315b 	movw	r1, #859	; 0x35b
 800619c:	4804      	ldr	r0, [pc, #16]	; (80061b0 <HAL_DAC_ConfigChannel+0xbc>)
 800619e:	f7fc fdfd 	bl	8002d9c <assert_failed>
 80061a2:	e7cd      	b.n	8006140 <HAL_DAC_ConfigChannel+0x4c>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80061a4:	f240 315a 	movw	r1, #858	; 0x35a
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <HAL_DAC_ConfigChannel+0xbc>)
 80061aa:	f7fc fdf7 	bl	8002d9c <assert_failed>
 80061ae:	e7c3      	b.n	8006138 <HAL_DAC_ConfigChannel+0x44>
 80061b0:	0802611c 	.word	0x0802611c

080061b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop

080061b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop

080061bc <HAL_DACEx_ErrorCallbackCh2>:
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop

080061c0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80061c4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff fff3 	bl	80061b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80061ce:	2301      	movs	r3, #1
 80061d0:	7123      	strb	r3, [r4, #4]
}
 80061d2:	bd10      	pop	{r4, pc}

080061d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80061d4:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80061d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80061d8:	f7ff ffee 	bl	80061b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80061dc:	bd08      	pop	{r3, pc}
 80061de:	bf00      	nop

080061e0 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80061e0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061e4:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80061e6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061e8:	f043 0304 	orr.w	r3, r3, #4
 80061ec:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80061ee:	f7ff ffe5 	bl	80061bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80061f2:	2301      	movs	r3, #1
 80061f4:	7123      	strb	r3, [r4, #4]
}
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80061fc:	f7ff f8ca 	bl	8005394 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006200:	2c00      	cmp	r4, #0
 8006202:	f000 812b 	beq.w	800645c <HAL_DMA_Init+0x264>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	4605      	mov	r5, r0
 800620a:	4bbd      	ldr	r3, [pc, #756]	; (8006500 <HAL_DMA_Init+0x308>)
 800620c:	48bd      	ldr	r0, [pc, #756]	; (8006504 <HAL_DMA_Init+0x30c>)
 800620e:	49be      	ldr	r1, [pc, #760]	; (8006508 <HAL_DMA_Init+0x310>)
 8006210:	429a      	cmp	r2, r3
 8006212:	bf18      	it	ne
 8006214:	4282      	cmpne	r2, r0
 8006216:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	428a      	cmp	r2, r1
 8006222:	bf0c      	ite	eq
 8006224:	2300      	moveq	r3, #0
 8006226:	f003 0301 	andne.w	r3, r3, #1
 800622a:	3130      	adds	r1, #48	; 0x30
 800622c:	4282      	cmp	r2, r0
 800622e:	bf0c      	ite	eq
 8006230:	2300      	moveq	r3, #0
 8006232:	f003 0301 	andne.w	r3, r3, #1
 8006236:	3030      	adds	r0, #48	; 0x30
 8006238:	428a      	cmp	r2, r1
 800623a:	bf0c      	ite	eq
 800623c:	2300      	moveq	r3, #0
 800623e:	f003 0301 	andne.w	r3, r3, #1
 8006242:	3130      	adds	r1, #48	; 0x30
 8006244:	4282      	cmp	r2, r0
 8006246:	bf0c      	ite	eq
 8006248:	2300      	moveq	r3, #0
 800624a:	f003 0301 	andne.w	r3, r3, #1
 800624e:	3030      	adds	r0, #48	; 0x30
 8006250:	428a      	cmp	r2, r1
 8006252:	bf0c      	ite	eq
 8006254:	2300      	moveq	r3, #0
 8006256:	f003 0301 	andne.w	r3, r3, #1
 800625a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800625e:	4282      	cmp	r2, r0
 8006260:	bf0c      	ite	eq
 8006262:	2300      	moveq	r3, #0
 8006264:	f003 0301 	andne.w	r3, r3, #1
 8006268:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800626c:	428a      	cmp	r2, r1
 800626e:	bf0c      	ite	eq
 8006270:	2300      	moveq	r3, #0
 8006272:	f003 0301 	andne.w	r3, r3, #1
 8006276:	3130      	adds	r1, #48	; 0x30
 8006278:	4282      	cmp	r2, r0
 800627a:	bf0c      	ite	eq
 800627c:	2300      	moveq	r3, #0
 800627e:	f003 0301 	andne.w	r3, r3, #1
 8006282:	3030      	adds	r0, #48	; 0x30
 8006284:	428a      	cmp	r2, r1
 8006286:	bf0c      	ite	eq
 8006288:	2300      	moveq	r3, #0
 800628a:	f003 0301 	andne.w	r3, r3, #1
 800628e:	3130      	adds	r1, #48	; 0x30
 8006290:	4282      	cmp	r2, r0
 8006292:	bf0c      	ite	eq
 8006294:	2300      	moveq	r3, #0
 8006296:	f003 0301 	andne.w	r3, r3, #1
 800629a:	3030      	adds	r0, #48	; 0x30
 800629c:	428a      	cmp	r2, r1
 800629e:	bf0c      	ite	eq
 80062a0:	2300      	moveq	r3, #0
 80062a2:	f003 0301 	andne.w	r3, r3, #1
 80062a6:	3130      	adds	r1, #48	; 0x30
 80062a8:	4282      	cmp	r2, r0
 80062aa:	bf0c      	ite	eq
 80062ac:	2300      	moveq	r3, #0
 80062ae:	f003 0301 	andne.w	r3, r3, #1
 80062b2:	428a      	cmp	r2, r1
 80062b4:	bf0c      	ite	eq
 80062b6:	2300      	moveq	r3, #0
 80062b8:	f003 0301 	andne.w	r3, r3, #1
 80062bc:	b11b      	cbz	r3, 80062c6 <HAL_DMA_Init+0xce>
 80062be:	4b93      	ldr	r3, [pc, #588]	; (800650c <HAL_DMA_Init+0x314>)
 80062c0:	429a      	cmp	r2, r3
 80062c2:	f040 8140 	bne.w	8006546 <HAL_DMA_Init+0x34e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d0:	bf18      	it	ne
 80062d2:	2b00      	cmpne	r3, #0
 80062d4:	bf14      	ite	ne
 80062d6:	2201      	movne	r2, #1
 80062d8:	2200      	moveq	r2, #0
 80062da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062de:	bf0c      	ite	eq
 80062e0:	2200      	moveq	r2, #0
 80062e2:	f002 0201 	andne.w	r2, r2, #1
 80062e6:	b11a      	cbz	r2, 80062f0 <HAL_DMA_Init+0xf8>
 80062e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80062ec:	f040 8130 	bne.w	8006550 <HAL_DMA_Init+0x358>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80062f0:	68a3      	ldr	r3, [r4, #8]
 80062f2:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80062f6:	d002      	beq.n	80062fe <HAL_DMA_Init+0x106>
 80062f8:	2b80      	cmp	r3, #128	; 0x80
 80062fa:	f040 80b1 	bne.w	8006460 <HAL_DMA_Init+0x268>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80062fe:	68e3      	ldr	r3, [r4, #12]
 8006300:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8006304:	f040 8091 	bne.w	800642a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800630e:	f040 8082 	bne.w	8006416 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006312:	6963      	ldr	r3, [r4, #20]
 8006314:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006318:	d003      	beq.n	8006322 <HAL_DMA_Init+0x12a>
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631e:	f040 80a9 	bne.w	8006474 <HAL_DMA_Init+0x27c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006322:	69a3      	ldr	r3, [r4, #24]
 8006324:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006328:	d003      	beq.n	8006332 <HAL_DMA_Init+0x13a>
 800632a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632e:	f040 80ab 	bne.w	8006488 <HAL_DMA_Init+0x290>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006332:	69e3      	ldr	r3, [r4, #28]
 8006334:	f033 0220 	bics.w	r2, r3, #32
 8006338:	d003      	beq.n	8006342 <HAL_DMA_Init+0x14a>
 800633a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633e:	f040 80ad 	bne.w	800649c <HAL_DMA_Init+0x2a4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006342:	6a23      	ldr	r3, [r4, #32]
 8006344:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006348:	f040 80b1 	bne.w	80064ae <HAL_DMA_Init+0x2b6>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800634c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634e:	f033 0204 	bics.w	r2, r3, #4
 8006352:	d174      	bne.n	800643e <HAL_DMA_Init+0x246>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006354:	2b00      	cmp	r3, #0
 8006356:	d14c      	bne.n	80063f2 <HAL_DMA_Init+0x1fa>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006358:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800635a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800635c:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800635e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8006362:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8006364:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800636e:	e005      	b.n	800637c <HAL_DMA_Init+0x184>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006370:	f7ff f810 	bl	8005394 <HAL_GetTick>
 8006374:	1b40      	subs	r0, r0, r5
 8006376:	2805      	cmp	r0, #5
 8006378:	d869      	bhi.n	800644e <HAL_DMA_Init+0x256>
 800637a:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	07d1      	lsls	r1, r2, #31
 8006380:	d4f6      	bmi.n	8006370 <HAL_DMA_Init+0x178>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006382:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8006386:	68e1      	ldr	r1, [r4, #12]
 8006388:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800638a:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800638c:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006390:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006392:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8006394:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006396:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800639a:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800639c:	4d5c      	ldr	r5, [pc, #368]	; (8006510 <HAL_DMA_Init+0x318>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800639e:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063a0:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063a2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80063a6:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063a8:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063aa:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063ae:	f000 8083 	beq.w	80064b8 <HAL_DMA_Init+0x2c0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063b4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063b6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063ba:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4d55      	ldr	r5, [pc, #340]	; (8006514 <HAL_DMA_Init+0x31c>)
  hdma->Instance->FCR = tmp;
 80063c0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063c2:	3a10      	subs	r2, #16
 80063c4:	4954      	ldr	r1, [pc, #336]	; (8006518 <HAL_DMA_Init+0x320>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063c6:	4855      	ldr	r0, [pc, #340]	; (800651c <HAL_DMA_Init+0x324>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063c8:	fba5 5202 	umull	r5, r2, r5, r2
 80063cc:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80063ce:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063d0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063d4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80063d6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063dc:	bf88      	it	hi
 80063de:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063e0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e2:	4083      	lsls	r3, r0
  return HAL_OK;
 80063e4:	4610      	mov	r0, r2
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063e6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ea:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80063ec:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80063f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	f200 8095 	bhi.w	8006524 <HAL_DMA_Init+0x32c>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80063fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063fc:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8006400:	f040 8095 	bne.w	800652e <HAL_DMA_Init+0x336>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006404:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006406:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800640a:	d0a5      	beq.n	8006358 <HAL_DMA_Init+0x160>
 800640c:	21c9      	movs	r1, #201	; 0xc9
 800640e:	4844      	ldr	r0, [pc, #272]	; (8006520 <HAL_DMA_Init+0x328>)
 8006410:	f7fc fcc4 	bl	8002d9c <assert_failed>
 8006414:	e7a0      	b.n	8006358 <HAL_DMA_Init+0x160>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006416:	21bd      	movs	r1, #189	; 0xbd
 8006418:	4841      	ldr	r0, [pc, #260]	; (8006520 <HAL_DMA_Init+0x328>)
 800641a:	f7fc fcbf 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800641e:	6963      	ldr	r3, [r4, #20]
 8006420:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8006424:	f47f af79 	bne.w	800631a <HAL_DMA_Init+0x122>
 8006428:	e77b      	b.n	8006322 <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800642a:	21bc      	movs	r1, #188	; 0xbc
 800642c:	483c      	ldr	r0, [pc, #240]	; (8006520 <HAL_DMA_Init+0x328>)
 800642e:	f7fc fcb5 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8006438:	f43f af6b 	beq.w	8006312 <HAL_DMA_Init+0x11a>
 800643c:	e7eb      	b.n	8006416 <HAL_DMA_Init+0x21e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800643e:	21c2      	movs	r1, #194	; 0xc2
 8006440:	4837      	ldr	r0, [pc, #220]	; (8006520 <HAL_DMA_Init+0x328>)
 8006442:	f7fc fcab 	bl	8002d9c <assert_failed>
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8006448:	2b00      	cmp	r3, #0
 800644a:	d085      	beq.n	8006358 <HAL_DMA_Init+0x160>
 800644c:	e7d1      	b.n	80063f2 <HAL_DMA_Init+0x1fa>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800644e:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006450:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8006452:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006454:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006456:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800645c:	2001      	movs	r0, #1
}
 800645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006460:	21bb      	movs	r1, #187	; 0xbb
 8006462:	482f      	ldr	r0, [pc, #188]	; (8006520 <HAL_DMA_Init+0x328>)
 8006464:	f7fc fc9a 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006468:	68e3      	ldr	r3, [r4, #12]
 800646a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800646e:	f43f af4b 	beq.w	8006308 <HAL_DMA_Init+0x110>
 8006472:	e7da      	b.n	800642a <HAL_DMA_Init+0x232>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006474:	21be      	movs	r1, #190	; 0xbe
 8006476:	482a      	ldr	r0, [pc, #168]	; (8006520 <HAL_DMA_Init+0x328>)
 8006478:	f7fc fc90 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800647c:	69a3      	ldr	r3, [r4, #24]
 800647e:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8006482:	f47f af52 	bne.w	800632a <HAL_DMA_Init+0x132>
 8006486:	e754      	b.n	8006332 <HAL_DMA_Init+0x13a>
 8006488:	21bf      	movs	r1, #191	; 0xbf
 800648a:	4825      	ldr	r0, [pc, #148]	; (8006520 <HAL_DMA_Init+0x328>)
 800648c:	f7fc fc86 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006490:	69e3      	ldr	r3, [r4, #28]
 8006492:	f033 0220 	bics.w	r2, r3, #32
 8006496:	f47f af50 	bne.w	800633a <HAL_DMA_Init+0x142>
 800649a:	e752      	b.n	8006342 <HAL_DMA_Init+0x14a>
 800649c:	21c0      	movs	r1, #192	; 0xc0
 800649e:	4820      	ldr	r0, [pc, #128]	; (8006520 <HAL_DMA_Init+0x328>)
 80064a0:	f7fc fc7c 	bl	8002d9c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80064a4:	6a23      	ldr	r3, [r4, #32]
 80064a6:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80064aa:	f43f af4f 	beq.w	800634c <HAL_DMA_Init+0x154>
 80064ae:	21c1      	movs	r1, #193	; 0xc1
 80064b0:	481b      	ldr	r0, [pc, #108]	; (8006520 <HAL_DMA_Init+0x328>)
 80064b2:	f7fc fc73 	bl	8002d9c <assert_failed>
 80064b6:	e749      	b.n	800634c <HAL_DMA_Init+0x154>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064b8:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80064bc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064be:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80064c2:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064c6:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80064c8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80064ca:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064cc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80064d0:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064d2:	2d00      	cmp	r5, #0
 80064d4:	f43f af72 	beq.w	80063bc <HAL_DMA_Init+0x1c4>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064d8:	b376      	cbz	r6, 8006538 <HAL_DMA_Init+0x340>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064da:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80064de:	d041      	beq.n	8006564 <HAL_DMA_Init+0x36c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064e0:	2f02      	cmp	r7, #2
 80064e2:	d905      	bls.n	80064f0 <HAL_DMA_Init+0x2f8>
 80064e4:	2f03      	cmp	r7, #3
 80064e6:	f47f af69 	bne.w	80063bc <HAL_DMA_Init+0x1c4>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ea:	01ea      	lsls	r2, r5, #7
 80064ec:	f57f af66 	bpl.w	80063bc <HAL_DMA_Init+0x1c4>
        hdma->State = HAL_DMA_STATE_READY;
 80064f0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064f2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80064f4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064f6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80064f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064fe:	bf00      	nop
 8006500:	40026010 	.word	0x40026010
 8006504:	40026028 	.word	0x40026028
 8006508:	40026040 	.word	0x40026040
 800650c:	400264b8 	.word	0x400264b8
 8006510:	e010803f 	.word	0xe010803f
 8006514:	aaaaaaab 	.word	0xaaaaaaab
 8006518:	fffffc00 	.word	0xfffffc00
 800651c:	0802618c 	.word	0x0802618c
 8006520:	08026154 	.word	0x08026154
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006524:	21c7      	movs	r1, #199	; 0xc7
 8006526:	4816      	ldr	r0, [pc, #88]	; (8006580 <HAL_DMA_Init+0x388>)
 8006528:	f7fc fc38 	bl	8002d9c <assert_failed>
 800652c:	e765      	b.n	80063fa <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800652e:	21c8      	movs	r1, #200	; 0xc8
 8006530:	4813      	ldr	r0, [pc, #76]	; (8006580 <HAL_DMA_Init+0x388>)
 8006532:	f7fc fc33 	bl	8002d9c <assert_failed>
 8006536:	e765      	b.n	8006404 <HAL_DMA_Init+0x20c>
    switch (tmp)
 8006538:	2f01      	cmp	r7, #1
 800653a:	d00e      	beq.n	800655a <HAL_DMA_Init+0x362>
 800653c:	d3d5      	bcc.n	80064ea <HAL_DMA_Init+0x2f2>
 800653e:	2f02      	cmp	r7, #2
 8006540:	f47f af3c 	bne.w	80063bc <HAL_DMA_Init+0x1c4>
 8006544:	e7d1      	b.n	80064ea <HAL_DMA_Init+0x2f2>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8006546:	21b9      	movs	r1, #185	; 0xb9
 8006548:	480d      	ldr	r0, [pc, #52]	; (8006580 <HAL_DMA_Init+0x388>)
 800654a:	f7fc fc27 	bl	8002d9c <assert_failed>
 800654e:	e6ba      	b.n	80062c6 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8006550:	21ba      	movs	r1, #186	; 0xba
 8006552:	480b      	ldr	r0, [pc, #44]	; (8006580 <HAL_DMA_Init+0x388>)
 8006554:	f7fc fc22 	bl	8002d9c <assert_failed>
 8006558:	e6ca      	b.n	80062f0 <HAL_DMA_Init+0xf8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800655a:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800655e:	f47f af2d 	bne.w	80063bc <HAL_DMA_Init+0x1c4>
 8006562:	e7c5      	b.n	80064f0 <HAL_DMA_Init+0x2f8>
    switch (tmp)
 8006564:	2f03      	cmp	r7, #3
 8006566:	f63f af29 	bhi.w	80063bc <HAL_DMA_Init+0x1c4>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <HAL_DMA_Init+0x378>)
 800656c:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8006570:	080064f1 	.word	0x080064f1
 8006574:	080064eb 	.word	0x080064eb
 8006578:	080064f1 	.word	0x080064f1
 800657c:	0800655b 	.word	0x0800655b
 8006580:	08026154 	.word	0x08026154

08006584 <HAL_DMA_Start_IT>:
{
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	461d      	mov	r5, r3
 800658a:	460f      	mov	r7, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800658c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8006590:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006592:	1e69      	subs	r1, r5, #1
{
 8006594:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006596:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006598:	4299      	cmp	r1, r3
 800659a:	d83a      	bhi.n	8006612 <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 800659c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d03f      	beq.n	8006624 <HAL_DMA_Start_IT+0xa0>
 80065a4:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80065a6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80065aa:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 80065ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80065b0:	d129      	bne.n	8006606 <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065b2:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b4:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065bc:	6563      	str	r3, [r4, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065be:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065c0:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065c2:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c8:	600b      	str	r3, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 80065ca:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065cc:	d02d      	beq.n	800662a <HAL_DMA_Start_IT+0xa6>
    hdma->Instance->PAR = SrcAddress;
 80065ce:	608f      	str	r7, [r1, #8]
    hdma->Instance->M0AR = DstAddress;
 80065d0:	f8c1 800c 	str.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065d4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80065d6:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 80065d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065da:	4083      	lsls	r3, r0
 80065dc:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065de:	680b      	ldr	r3, [r1, #0]
 80065e0:	f043 0316 	orr.w	r3, r3, #22
 80065e4:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80065e6:	694b      	ldr	r3, [r1, #20]
 80065e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ec:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80065ee:	b11a      	cbz	r2, 80065f8 <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 80065f0:	680b      	ldr	r3, [r1, #0]
 80065f2:	f043 0308 	orr.w	r3, r3, #8
 80065f6:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 80065f8:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	600b      	str	r3, [r1, #0]
}
 8006602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8006606:	2300      	movs	r3, #0
    status = HAL_BUSY;
 8006608:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800660a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800660e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006612:	f240 11cd 	movw	r1, #461	; 0x1cd
 8006616:	4807      	ldr	r0, [pc, #28]	; (8006634 <HAL_DMA_Start_IT+0xb0>)
 8006618:	f7fc fbc0 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hdma);
 800661c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006620:	2b01      	cmp	r3, #1
 8006622:	d1bf      	bne.n	80065a4 <HAL_DMA_Start_IT+0x20>
 8006624:	2002      	movs	r0, #2
}
 8006626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->Instance->PAR = DstAddress;
 800662a:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 800662e:	60cf      	str	r7, [r1, #12]
 8006630:	e7d0      	b.n	80065d4 <HAL_DMA_Start_IT+0x50>
 8006632:	bf00      	nop
 8006634:	08026154 	.word	0x08026154

08006638 <HAL_DMA_Abort>:
{
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800663c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800663e:	f7fe fea9 	bl	8005394 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006642:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006646:	2b02      	cmp	r3, #2
 8006648:	d006      	beq.n	8006658 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800664a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800664c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800664e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006650:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006652:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006656:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800665c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	f022 0216 	bic.w	r2, r2, #22
 8006664:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800666c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800666e:	b339      	cbz	r1, 80066c0 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	f022 0208 	bic.w	r2, r2, #8
 8006676:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006680:	e005      	b.n	800668e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006682:	f7fe fe87 	bl	8005394 <HAL_GetTick>
 8006686:	1b40      	subs	r0, r0, r5
 8006688:	2805      	cmp	r0, #5
 800668a:	d80f      	bhi.n	80066ac <HAL_DMA_Abort+0x74>
 800668c:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f013 0301 	ands.w	r3, r3, #1
 8006694:	d1f5      	bne.n	8006682 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006696:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006698:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800669a:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800669c:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800669e:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066a0:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 80066a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80066a6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066ae:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80066b0:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066b2:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80066b4:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 80066b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80066be:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d1d4      	bne.n	8006670 <HAL_DMA_Abort+0x38>
 80066c6:	e7d7      	b.n	8006678 <HAL_DMA_Abort+0x40>

080066c8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066c8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80066cc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ce:	2a02      	cmp	r2, #2
 80066d0:	d003      	beq.n	80066da <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066d2:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80066d4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066d8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80066da:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80066dc:	2105      	movs	r1, #5
  return HAL_OK;
 80066de:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 80066e0:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80066e4:	6813      	ldr	r3, [r2, #0]
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop

080066f0 <HAL_DMA_IRQHandler>:
{
 80066f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 80066f6:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066f8:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80066fa:	4966      	ldr	r1, [pc, #408]	; (8006894 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 80066fc:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80066fe:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006700:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8006704:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8006706:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006708:	422a      	tst	r2, r5
 800670a:	d003      	beq.n	8006714 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800670c:	6821      	ldr	r1, [r4, #0]
 800670e:	6808      	ldr	r0, [r1, #0]
 8006710:	0740      	lsls	r0, r0, #29
 8006712:	d459      	bmi.n	80067c8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006714:	2201      	movs	r2, #1
 8006716:	409a      	lsls	r2, r3
 8006718:	422a      	tst	r2, r5
 800671a:	d003      	beq.n	8006724 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800671c:	6821      	ldr	r1, [r4, #0]
 800671e:	6949      	ldr	r1, [r1, #20]
 8006720:	0608      	lsls	r0, r1, #24
 8006722:	d474      	bmi.n	800680e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006724:	2204      	movs	r2, #4
 8006726:	409a      	lsls	r2, r3
 8006728:	422a      	tst	r2, r5
 800672a:	d003      	beq.n	8006734 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800672c:	6821      	ldr	r1, [r4, #0]
 800672e:	6809      	ldr	r1, [r1, #0]
 8006730:	0789      	lsls	r1, r1, #30
 8006732:	d466      	bmi.n	8006802 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006734:	2210      	movs	r2, #16
 8006736:	409a      	lsls	r2, r3
 8006738:	422a      	tst	r2, r5
 800673a:	d003      	beq.n	8006744 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	6808      	ldr	r0, [r1, #0]
 8006740:	0700      	lsls	r0, r0, #28
 8006742:	d44b      	bmi.n	80067dc <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006744:	2220      	movs	r2, #32
 8006746:	409a      	lsls	r2, r3
 8006748:	422a      	tst	r2, r5
 800674a:	d014      	beq.n	8006776 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800674c:	6821      	ldr	r1, [r4, #0]
 800674e:	6808      	ldr	r0, [r1, #0]
 8006750:	06c0      	lsls	r0, r0, #27
 8006752:	d510      	bpl.n	8006776 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006754:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006756:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800675a:	2a05      	cmp	r2, #5
 800675c:	d063      	beq.n	8006826 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800675e:	680b      	ldr	r3, [r1, #0]
 8006760:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006764:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006766:	d07e      	beq.n	8006866 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006768:	0319      	lsls	r1, r3, #12
 800676a:	f140 8089 	bpl.w	8006880 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800676e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006770:	b10b      	cbz	r3, 8006776 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8006772:	4620      	mov	r0, r4
 8006774:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006778:	b323      	cbz	r3, 80067c4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800677a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800677c:	07da      	lsls	r2, r3, #31
 800677e:	d51a      	bpl.n	80067b6 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8006780:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8006782:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8006786:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 800678a:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8006794:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e002      	b.n	80067a0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	07db      	lsls	r3, r3, #31
 800679e:	d504      	bpl.n	80067aa <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	3301      	adds	r3, #1
 80067a4:	42b3      	cmp	r3, r6
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	d9f7      	bls.n	800679a <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80067aa:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80067ac:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80067ae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80067b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80067b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067b8:	b123      	cbz	r3, 80067c4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80067ba:	4620      	mov	r0, r4
}
 80067bc:	b003      	add	sp, #12
 80067be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80067c2:	4718      	bx	r3
}
 80067c4:	b003      	add	sp, #12
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80067c8:	6808      	ldr	r0, [r1, #0]
 80067ca:	f020 0004 	bic.w	r0, r0, #4
 80067ce:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80067d0:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80067d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	6562      	str	r2, [r4, #84]	; 0x54
 80067da:	e79b      	b.n	8006714 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80067dc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067de:	680a      	ldr	r2, [r1, #0]
 80067e0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067e4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067e6:	d118      	bne.n	800681a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067e8:	05d2      	lsls	r2, r2, #23
 80067ea:	d403      	bmi.n	80067f4 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067ec:	680a      	ldr	r2, [r1, #0]
 80067ee:	f022 0208 	bic.w	r2, r2, #8
 80067f2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80067f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	d0a4      	beq.n	8006744 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80067fa:	4620      	mov	r0, r4
 80067fc:	4790      	blx	r2
 80067fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006800:	e7a0      	b.n	8006744 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006802:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006804:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006806:	f042 0204 	orr.w	r2, r2, #4
 800680a:	6562      	str	r2, [r4, #84]	; 0x54
 800680c:	e792      	b.n	8006734 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800680e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006810:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006812:	f042 0202 	orr.w	r2, r2, #2
 8006816:	6562      	str	r2, [r4, #84]	; 0x54
 8006818:	e784      	b.n	8006724 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800681a:	0311      	lsls	r1, r2, #12
 800681c:	d5ea      	bpl.n	80067f4 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800681e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006820:	2a00      	cmp	r2, #0
 8006822:	d1ea      	bne.n	80067fa <HAL_DMA_IRQHandler+0x10a>
 8006824:	e78e      	b.n	8006744 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006826:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006828:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800682a:	f022 0216 	bic.w	r2, r2, #22
 800682e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006830:	694a      	ldr	r2, [r1, #20]
 8006832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006836:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006838:	b338      	cbz	r0, 800688a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800683a:	680a      	ldr	r2, [r1, #0]
 800683c:	f022 0208 	bic.w	r2, r2, #8
 8006840:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006842:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 8006844:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8006846:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800684c:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800684e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8006850:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8006854:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8006858:	2a00      	cmp	r2, #0
 800685a:	d0b3      	beq.n	80067c4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 800685c:	4620      	mov	r0, r4
}
 800685e:	b003      	add	sp, #12
 8006860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8006864:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006866:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800686a:	d180      	bne.n	800676e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800686c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800686e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006870:	f022 0210 	bic.w	r2, r2, #16
 8006874:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8006876:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800687a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800687e:	e776      	b.n	800676e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8006880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af75 	bne.w	8006772 <HAL_DMA_IRQHandler+0x82>
 8006888:	e775      	b.n	8006776 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800688a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800688c:	2a00      	cmp	r2, #0
 800688e:	d1d4      	bne.n	800683a <HAL_DMA_IRQHandler+0x14a>
 8006890:	e7d7      	b.n	8006842 <HAL_DMA_IRQHandler+0x152>
 8006892:	bf00      	nop
 8006894:	20000248 	.word	0x20000248
 8006898:	1b4e81b5 	.word	0x1b4e81b5

0800689c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	9d08      	ldr	r5, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80068a2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 80068a6:	460f      	mov	r7, r1
 80068a8:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80068aa:	1e69      	subs	r1, r5, #1
{
 80068ac:	4690      	mov	r8, r2
 80068ae:	4699      	mov	r9, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80068b0:	42b1      	cmp	r1, r6
 80068b2:	d861      	bhi.n	8006978 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068b4:	68a0      	ldr	r0, [r4, #8]
 80068b6:	2880      	cmp	r0, #128	; 0x80
 80068b8:	d065      	beq.n	8006986 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80068ba:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80068be:	2901      	cmp	r1, #1
 80068c0:	d07d      	beq.n	80069be <HAL_DMAEx_MultiBufferStart_IT+0x122>
 80068c2:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068c4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80068c8:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 80068ca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80068ce:	d14d      	bne.n	800696c <HAL_DMAEx_MultiBufferStart_IT+0xd0>
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80068d0:	6821      	ldr	r1, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80068d4:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068d6:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80068d8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068dc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80068de:	680b      	ldr	r3, [r1, #0]
 80068e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068e4:	600b      	str	r3, [r1, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 80068e6:	f8c1 9010 	str.w	r9, [r1, #16]
  hdma->Instance->NDTR = DataLength;
 80068ea:	604d      	str	r5, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068ec:	d051      	beq.n	8006992 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80068ee:	608f      	str	r7, [r1, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80068f0:	f8c1 800c 	str.w	r8, [r1, #12]
 80068f4:	4b91      	ldr	r3, [pc, #580]	; (8006b3c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80068f6:	4a92      	ldr	r2, [pc, #584]	; (8006b40 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80068f8:	4d92      	ldr	r5, [pc, #584]	; (8006b44 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80068fa:	4299      	cmp	r1, r3
 80068fc:	bf18      	it	ne
 80068fe:	4291      	cmpne	r1, r2
 8006900:	4891      	ldr	r0, [pc, #580]	; (8006b48 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006902:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	42a9      	cmp	r1, r5
 800690e:	bf0c      	ite	eq
 8006910:	2300      	moveq	r3, #0
 8006912:	f003 0301 	andne.w	r3, r3, #1
 8006916:	4281      	cmp	r1, r0
 8006918:	bf0c      	ite	eq
 800691a:	2300      	moveq	r3, #0
 800691c:	f003 0301 	andne.w	r3, r3, #1
 8006920:	4291      	cmp	r1, r2
 8006922:	d93a      	bls.n	800699a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d174      	bne.n	8006a12 <HAL_DMAEx_MultiBufferStart_IT+0x176>
 8006928:	4b88      	ldr	r3, [pc, #544]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800692a:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800692c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800692e:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006930:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006932:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006934:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006936:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006938:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800693a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800693c:	4b83      	ldr	r3, [pc, #524]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800693e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006940:	680b      	ldr	r3, [r1, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006942:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006944:	f043 0316 	orr.w	r3, r3, #22
 8006948:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800694a:	694b      	ldr	r3, [r1, #20]
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	614b      	str	r3, [r1, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006952:	2a00      	cmp	r2, #0
 8006954:	d036      	beq.n	80069c4 <HAL_DMAEx_MultiBufferStart_IT+0x128>
      hdma->Instance->CR  |= DMA_IT_HT;
 8006956:	680b      	ldr	r3, [r1, #0]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma); 
 800695e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	600b      	str	r3, [r1, #0]
}
 8006968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hdma);	  
 800696c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800696e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8006970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8006974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006978:	4875      	ldr	r0, [pc, #468]	; (8006b50 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800697a:	21a2      	movs	r1, #162	; 0xa2
 800697c:	f7fc fa0e 	bl	8002d9c <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006980:	68a0      	ldr	r0, [r4, #8]
 8006982:	2880      	cmp	r0, #128	; 0x80
 8006984:	d199      	bne.n	80068ba <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006986:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800698a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800698c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8006992:	f8c1 8008 	str.w	r8, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8006996:	60cf      	str	r7, [r1, #12]
 8006998:	e7ac      	b.n	80068f4 <HAL_DMAEx_MultiBufferStart_IT+0x58>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800699a:	4a6e      	ldr	r2, [pc, #440]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800699c:	4291      	cmp	r1, r2
 800699e:	d915      	bls.n	80069cc <HAL_DMAEx_MultiBufferStart_IT+0x130>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d15a      	bne.n	8006a5a <HAL_DMAEx_MultiBufferStart_IT+0x1be>
 80069a4:	4b69      	ldr	r3, [pc, #420]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80069a6:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80069a8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069aa:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069ac:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80069ae:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80069b0:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069b2:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069b4:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80069b6:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069b8:	4b64      	ldr	r3, [pc, #400]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	e7c0      	b.n	8006940 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
  __HAL_LOCK(hdma);
 80069be:	2002      	movs	r0, #2
}
 80069c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1c5      	bne.n	8006956 <HAL_DMAEx_MultiBufferStart_IT+0xba>
 80069ca:	e7c8      	b.n	800695e <HAL_DMAEx_MultiBufferStart_IT+0xc2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069cc:	4a62      	ldr	r2, [pc, #392]	; (8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80069ce:	4291      	cmp	r1, r2
 80069d0:	d90f      	bls.n	80069f2 <HAL_DMAEx_MultiBufferStart_IT+0x156>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 8140 	bne.w	8006c58 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 80069d8:	4b60      	ldr	r3, [pc, #384]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80069da:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80069dc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069de:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069e0:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80069e2:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80069e4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069e6:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069e8:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80069ea:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069ec:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80069ee:	60da      	str	r2, [r3, #12]
 80069f0:	e7a6      	b.n	8006940 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f040 80bc 	bne.w	8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>
 80069f8:	4b58      	ldr	r3, [pc, #352]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80069fa:	2020      	movs	r0, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80069fc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80069fe:	2508      	movs	r5, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a00:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006a02:	2004      	movs	r0, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a04:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a06:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a08:	609d      	str	r5, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006a0a:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a0c:	4b53      	ldr	r3, [pc, #332]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	e796      	b.n	8006940 <HAL_DMAEx_MultiBufferStart_IT+0xa4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a12:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006a14:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8006a18:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	bf18      	it	ne
 8006a20:	4281      	cmpne	r1, r0
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	4291      	cmp	r1, r2
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	f003 0301 	andne.w	r3, r3, #1
 8006a32:	b11b      	cbz	r3, 8006a3c <HAL_DMAEx_MultiBufferStart_IT+0x1a0>
 8006a34:	4b4b      	ldr	r3, [pc, #300]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006a36:	4299      	cmp	r1, r3
 8006a38:	f040 818a 	bne.w	8006d50 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006a3c:	4b43      	ldr	r3, [pc, #268]	; (8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006a3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a46:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a4a:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006a4c:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a50:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006a52:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006a54:	60dd      	str	r5, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006a56:	60d8      	str	r0, [r3, #12]
 8006a58:	e770      	b.n	800693c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a5a:	4b43      	ldr	r3, [pc, #268]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006a5c:	3a30      	subs	r2, #48	; 0x30
 8006a5e:	4840      	ldr	r0, [pc, #256]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006a60:	4299      	cmp	r1, r3
 8006a62:	bf18      	it	ne
 8006a64:	4281      	cmpne	r1, r0
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	4291      	cmp	r1, r2
 8006a6e:	bf0c      	ite	eq
 8006a70:	2300      	moveq	r3, #0
 8006a72:	f003 0301 	andne.w	r3, r3, #1
 8006a76:	b11b      	cbz	r3, 8006a80 <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 8006a78:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	f040 81e4 	bne.w	8006e48 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8006a80:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006a86:	4a38      	ldr	r2, [pc, #224]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006a88:	4838      	ldr	r0, [pc, #224]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	bf18      	it	ne
 8006a8e:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a90:	f8c2 53e0 	str.w	r5, [r2, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a94:	bf14      	ite	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	2300      	moveq	r3, #0
 8006a9a:	4281      	cmp	r1, r0
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2300      	moveq	r3, #0
 8006aa0:	f003 0301 	andne.w	r3, r3, #1
 8006aa4:	b11b      	cbz	r3, 8006aae <HAL_DMAEx_MultiBufferStart_IT+0x212>
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	f040 81e6 	bne.w	8006e7a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8006aae:	f44f 6580 	mov.w	r5, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006ab2:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006ab4:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006ab6:	482d      	ldr	r0, [pc, #180]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	bf18      	it	ne
 8006abc:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006abe:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	4281      	cmp	r1, r0
 8006aca:	bf0c      	ite	eq
 8006acc:	2300      	moveq	r3, #0
 8006ace:	f003 0301 	andne.w	r3, r3, #1
 8006ad2:	b11b      	cbz	r3, 8006adc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8006ad4:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	f040 81ff 	bne.w	8006eda <HAL_DMAEx_MultiBufferStart_IT+0x63e>
 8006adc:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006ae0:	4b21      	ldr	r3, [pc, #132]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006ae4:	4821      	ldr	r0, [pc, #132]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	bf18      	it	ne
 8006aea:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006aec:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006af0:	bf14      	ite	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	2300      	moveq	r3, #0
 8006af6:	4281      	cmp	r1, r0
 8006af8:	bf0c      	ite	eq
 8006afa:	2300      	moveq	r3, #0
 8006afc:	f003 0301 	andne.w	r3, r3, #1
 8006b00:	b11b      	cbz	r3, 8006b0a <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006b04:	4299      	cmp	r1, r3
 8006b06:	f040 81d0 	bne.w	8006eaa <HAL_DMAEx_MultiBufferStart_IT+0x60e>
 8006b0a:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006b12:	4816      	ldr	r0, [pc, #88]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8006b14:	4299      	cmp	r1, r3
 8006b16:	bf18      	it	ne
 8006b18:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006b1a:	f842 5c20 	str.w	r5, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	4281      	cmp	r1, r0
 8006b26:	bf0c      	ite	eq
 8006b28:	2300      	moveq	r3, #0
 8006b2a:	f003 0301 	andne.w	r3, r3, #1
 8006b2e:	b11b      	cbz	r3, 8006b38 <HAL_DMAEx_MultiBufferStart_IT+0x29c>
 8006b30:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8006b32:	4299      	cmp	r1, r3
 8006b34:	f040 81e9 	bne.w	8006f0a <HAL_DMAEx_MultiBufferStart_IT+0x66e>
 8006b38:	2240      	movs	r2, #64	; 0x40
 8006b3a:	e73d      	b.n	80069b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8006b3c:	40026470 	.word	0x40026470
 8006b40:	40026070 	.word	0x40026070
 8006b44:	40026010 	.word	0x40026010
 8006b48:	40026410 	.word	0x40026410
 8006b4c:	40026400 	.word	0x40026400
 8006b50:	08026194 	.word	0x08026194
 8006b54:	400260b8 	.word	0x400260b8
 8006b58:	40026058 	.word	0x40026058
 8006b5c:	40026000 	.word	0x40026000
 8006b60:	40026428 	.word	0x40026428
 8006b64:	40026488 	.word	0x40026488
 8006b68:	40026028 	.word	0x40026028
 8006b6c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006b70:	4b73      	ldr	r3, [pc, #460]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006b72:	4874      	ldr	r0, [pc, #464]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006b74:	4a74      	ldr	r2, [pc, #464]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006b76:	4299      	cmp	r1, r3
 8006b78:	bf18      	it	ne
 8006b7a:	4281      	cmpne	r1, r0
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	4291      	cmp	r1, r2
 8006b84:	bf0c      	ite	eq
 8006b86:	2300      	moveq	r3, #0
 8006b88:	f003 0301 	andne.w	r3, r3, #1
 8006b8c:	b11b      	cbz	r3, 8006b96 <HAL_DMAEx_MultiBufferStart_IT+0x2fa>
 8006b8e:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006b90:	4299      	cmp	r1, r3
 8006b92:	f040 81d2 	bne.w	8006f3a <HAL_DMAEx_MultiBufferStart_IT+0x69e>
 8006b96:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006b9a:	4b6a      	ldr	r3, [pc, #424]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006b9c:	4a68      	ldr	r2, [pc, #416]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006b9e:	4d6a      	ldr	r5, [pc, #424]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	bf18      	it	ne
 8006ba4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006ba6:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006bb0:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006bb2:	42a9      	cmp	r1, r5
 8006bb4:	bf0c      	ite	eq
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	f003 0301 	andne.w	r3, r3, #1
 8006bbc:	b11b      	cbz	r3, 8006bc6 <HAL_DMAEx_MultiBufferStart_IT+0x32a>
 8006bbe:	4b63      	ldr	r3, [pc, #396]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	f040 8205 	bne.w	8006fd0 <HAL_DMAEx_MultiBufferStart_IT+0x734>
 8006bc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006bca:	4b5e      	ldr	r3, [pc, #376]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006bcc:	4a5c      	ldr	r2, [pc, #368]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006bce:	4d5e      	ldr	r5, [pc, #376]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	bf18      	it	ne
 8006bd4:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006bd6:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006be0:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006be2:	42a9      	cmp	r1, r5
 8006be4:	bf0c      	ite	eq
 8006be6:	2300      	moveq	r3, #0
 8006be8:	f003 0301 	andne.w	r3, r3, #1
 8006bec:	b11b      	cbz	r3, 8006bf6 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 8006bee:	4b57      	ldr	r3, [pc, #348]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	f040 8253 	bne.w	800709c <HAL_DMAEx_MultiBufferStart_IT+0x800>
 8006bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006bfa:	4b51      	ldr	r3, [pc, #324]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006bfc:	4a51      	ldr	r2, [pc, #324]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006bfe:	4d52      	ldr	r5, [pc, #328]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006c00:	4299      	cmp	r1, r3
 8006c02:	bf18      	it	ne
 8006c04:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006c06:	f842 0c20 	str.w	r0, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	42a9      	cmp	r1, r5
 8006c12:	bf0c      	ite	eq
 8006c14:	2300      	moveq	r3, #0
 8006c16:	f003 0301 	andne.w	r3, r3, #1
 8006c1a:	b11b      	cbz	r3, 8006c24 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	f040 820e 	bne.w	8007040 <HAL_DMAEx_MultiBufferStart_IT+0x7a4>
 8006c24:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006c28:	4b46      	ldr	r3, [pc, #280]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006c2a:	4a45      	ldr	r2, [pc, #276]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006c2c:	4d46      	ldr	r5, [pc, #280]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	bf18      	it	ne
 8006c32:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006c34:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006c38:	bf14      	ite	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006c3e:	6090      	str	r0, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006c40:	42a9      	cmp	r1, r5
 8006c42:	bf0c      	ite	eq
 8006c44:	2300      	moveq	r3, #0
 8006c46:	f003 0301 	andne.w	r3, r3, #1
 8006c4a:	b11b      	cbz	r3, 8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 8006c4c:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	f040 8250 	bne.w	80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x858>
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	e6d9      	b.n	8006a0c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006c58:	4b3a      	ldr	r3, [pc, #232]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006c5a:	3230      	adds	r2, #48	; 0x30
 8006c5c:	4838      	ldr	r0, [pc, #224]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	bf18      	it	ne
 8006c62:	4281      	cmpne	r1, r0
 8006c64:	bf14      	ite	ne
 8006c66:	2301      	movne	r3, #1
 8006c68:	2300      	moveq	r3, #0
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	f003 0301 	andne.w	r3, r3, #1
 8006c74:	b11b      	cbz	r3, 8006c7e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8006c76:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	f040 8178 	bne.w	8006f6e <HAL_DMAEx_MultiBufferStart_IT+0x6d2>
 8006c7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006c82:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006c84:	4a2f      	ldr	r2, [pc, #188]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006c86:	4d30      	ldr	r5, [pc, #192]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	bf18      	it	ne
 8006c8c:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006c8e:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	42a9      	cmp	r1, r5
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2300      	moveq	r3, #0
 8006c9e:	f003 0301 	andne.w	r3, r3, #1
 8006ca2:	b11b      	cbz	r3, 8006cac <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8006ca4:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	f040 817a 	bne.w	8006fa0 <HAL_DMAEx_MultiBufferStart_IT+0x704>
 8006cac:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006cb0:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006cb2:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006cb4:	4d24      	ldr	r5, [pc, #144]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	bf18      	it	ne
 8006cba:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006cbc:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006cc6:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006cc8:	42a9      	cmp	r1, r5
 8006cca:	bf0c      	ite	eq
 8006ccc:	2300      	moveq	r3, #0
 8006cce:	f003 0301 	andne.w	r3, r3, #1
 8006cd2:	b11b      	cbz	r3, 8006cdc <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	f040 81ca 	bne.w	8007070 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>
 8006cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006ce0:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006ce2:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006ce4:	4d18      	ldr	r5, [pc, #96]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bf18      	it	ne
 8006cea:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006cec:	f842 0c1c 	str.w	r0, [r2, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	42a9      	cmp	r1, r5
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	f003 0301 	andne.w	r3, r3, #1
 8006d00:	b11b      	cbz	r3, 8006d0a <HAL_DMAEx_MultiBufferStart_IT+0x46e>
 8006d02:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006d04:	4299      	cmp	r1, r3
 8006d06:	f040 817b 	bne.w	8007000 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8006d0a:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>)
 8006d10:	4a0b      	ldr	r2, [pc, #44]	; (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>)
 8006d12:	4d0d      	ldr	r5, [pc, #52]	; (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>)
 8006d14:	4299      	cmp	r1, r3
 8006d16:	bf18      	it	ne
 8006d18:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d1a:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006d24:	60d0      	str	r0, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006d26:	42a9      	cmp	r1, r5
 8006d28:	bf0c      	ite	eq
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	f003 0301 	andne.w	r3, r3, #1
 8006d30:	b11b      	cbz	r3, 8006d3a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>)
 8006d34:	4299      	cmp	r1, r3
 8006d36:	f040 81c7 	bne.w	80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8006d3a:	2240      	movs	r2, #64	; 0x40
 8006d3c:	e656      	b.n	80069ec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8006d3e:	bf00      	nop
 8006d40:	40026428 	.word	0x40026428
 8006d44:	40026028 	.word	0x40026028
 8006d48:	40026088 	.word	0x40026088
 8006d4c:	40026488 	.word	0x40026488
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d50:	3b48      	subs	r3, #72	; 0x48
 8006d52:	3018      	adds	r0, #24
 8006d54:	3218      	adds	r2, #24
 8006d56:	4299      	cmp	r1, r3
 8006d58:	bf18      	it	ne
 8006d5a:	4281      	cmpne	r1, r0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	4291      	cmp	r1, r2
 8006d64:	bf0c      	ite	eq
 8006d66:	2300      	moveq	r3, #0
 8006d68:	f003 0301 	andne.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 81e2 	beq.w	8007136 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 8006d72:	4baf      	ldr	r3, [pc, #700]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006d74:	4299      	cmp	r1, r3
 8006d76:	f000 81de 	beq.w	8007136 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 8006d7a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d7e:	4bad      	ldr	r3, [pc, #692]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006d80:	4aad      	ldr	r2, [pc, #692]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006d82:	4dae      	ldr	r5, [pc, #696]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006d84:	4299      	cmp	r1, r3
 8006d86:	bf18      	it	ne
 8006d88:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006d8a:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d8e:	bf14      	ite	ne
 8006d90:	2301      	movne	r3, #1
 8006d92:	2300      	moveq	r3, #0
 8006d94:	42a9      	cmp	r1, r5
 8006d96:	bf0c      	ite	eq
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	f003 0301 	andne.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 81c6 	beq.w	8007130 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8006da4:	4ba2      	ldr	r3, [pc, #648]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006da6:	4299      	cmp	r1, r3
 8006da8:	f000 81c2 	beq.w	8007130 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8006dac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006db0:	4ba0      	ldr	r3, [pc, #640]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006db2:	4aa1      	ldr	r2, [pc, #644]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006db4:	4da1      	ldr	r5, [pc, #644]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006db6:	4299      	cmp	r1, r3
 8006db8:	bf18      	it	ne
 8006dba:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006dbc:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	42a9      	cmp	r1, r5
 8006dc8:	bf0c      	ite	eq
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	f003 0301 	andne.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81aa 	beq.w	800712a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 8006dd6:	4b96      	ldr	r3, [pc, #600]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	f000 81a6 	beq.w	800712a <HAL_DMAEx_MultiBufferStart_IT+0x88e>
 8006dde:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006de2:	4b94      	ldr	r3, [pc, #592]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006de4:	4a94      	ldr	r2, [pc, #592]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006de6:	4d95      	ldr	r5, [pc, #596]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006de8:	4299      	cmp	r1, r3
 8006dea:	bf18      	it	ne
 8006dec:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006dee:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006df2:	bf14      	ite	ne
 8006df4:	2301      	movne	r3, #1
 8006df6:	2300      	moveq	r3, #0
 8006df8:	42a9      	cmp	r1, r5
 8006dfa:	bf0c      	ite	eq
 8006dfc:	2300      	moveq	r3, #0
 8006dfe:	f003 0301 	andne.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 818e 	beq.w	8007124 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006e08:	4b89      	ldr	r3, [pc, #548]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	f000 818a 	beq.w	8007124 <HAL_DMAEx_MultiBufferStart_IT+0x888>
 8006e10:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006e14:	4b87      	ldr	r3, [pc, #540]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006e16:	4a88      	ldr	r2, [pc, #544]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006e18:	4d88      	ldr	r5, [pc, #544]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	bf18      	it	ne
 8006e1e:	4291      	cmpne	r1, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006e20:	f8c2 03cc 	str.w	r0, [r2, #972]	; 0x3cc
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006e24:	bf14      	ite	ne
 8006e26:	2301      	movne	r3, #1
 8006e28:	2300      	moveq	r3, #0
 8006e2a:	42a9      	cmp	r1, r5
 8006e2c:	bf0c      	ite	eq
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	f003 0301 	andne.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8172 	beq.w	800711e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8006e3a:	4b7d      	ldr	r3, [pc, #500]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	f000 816e 	beq.w	800711e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8006e42:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006e46:	e579      	b.n	800693c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006e48:	3b48      	subs	r3, #72	; 0x48
 8006e4a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8006e4e:	3218      	adds	r2, #24
 8006e50:	4299      	cmp	r1, r3
 8006e52:	bf18      	it	ne
 8006e54:	4281      	cmpne	r1, r0
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	4291      	cmp	r1, r2
 8006e5e:	bf0c      	ite	eq
 8006e60:	2300      	moveq	r3, #0
 8006e62:	f003 0301 	andne.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 816b 	beq.w	8007142 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 8006e6c:	4b70      	ldr	r3, [pc, #448]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	f000 8167 	beq.w	8007142 <HAL_DMAEx_MultiBufferStart_IT+0x8a6>
 8006e74:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8006e78:	e604      	b.n	8006a84 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e7a:	4b6f      	ldr	r3, [pc, #444]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006e7c:	486d      	ldr	r0, [pc, #436]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006e7e:	4a6f      	ldr	r2, [pc, #444]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006e80:	4299      	cmp	r1, r3
 8006e82:	bf18      	it	ne
 8006e84:	4281      	cmpne	r1, r0
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	4291      	cmp	r1, r2
 8006e8e:	bf0c      	ite	eq
 8006e90:	2300      	moveq	r3, #0
 8006e92:	f003 0301 	andne.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8159 	beq.w	800714e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	f000 8155 	beq.w	800714e <HAL_DMAEx_MultiBufferStart_IT+0x8b2>
 8006ea4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8006ea8:	e603      	b.n	8006ab2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006eaa:	4b62      	ldr	r3, [pc, #392]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006eac:	4862      	ldr	r0, [pc, #392]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006eae:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	bf18      	it	ne
 8006eb4:	4281      	cmpne	r1, r0
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	4291      	cmp	r1, r2
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	f003 0301 	andne.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 813e 	beq.w	8007148 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8006ecc:	4b58      	ldr	r3, [pc, #352]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006ece:	4299      	cmp	r1, r3
 8006ed0:	f000 813a 	beq.w	8007148 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 8006ed4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8006ed8:	e619      	b.n	8006b0e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006eda:	4b56      	ldr	r3, [pc, #344]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006edc:	4856      	ldr	r0, [pc, #344]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006ede:	4a57      	ldr	r2, [pc, #348]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	bf18      	it	ne
 8006ee4:	4281      	cmpne	r1, r0
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	4291      	cmp	r1, r2
 8006eee:	bf0c      	ite	eq
 8006ef0:	2300      	moveq	r3, #0
 8006ef2:	f003 0301 	andne.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 812c 	beq.w	8007154 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8006efc:	4b4c      	ldr	r3, [pc, #304]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006efe:	4299      	cmp	r1, r3
 8006f00:	f000 8128 	beq.w	8007154 <HAL_DMAEx_MultiBufferStart_IT+0x8b8>
 8006f04:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8006f08:	e5ea      	b.n	8006ae0 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f0a:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006f0c:	484a      	ldr	r0, [pc, #296]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006f0e:	4a4b      	ldr	r2, [pc, #300]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006f10:	4299      	cmp	r1, r3
 8006f12:	bf18      	it	ne
 8006f14:	4281      	cmpne	r1, r0
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	4291      	cmp	r1, r2
 8006f1e:	bf0c      	ite	eq
 8006f20:	2300      	moveq	r3, #0
 8006f22:	f003 0301 	andne.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8108 	beq.w	800713c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8006f2c:	4b40      	ldr	r3, [pc, #256]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	f000 8104 	beq.w	800713c <HAL_DMAEx_MultiBufferStart_IT+0x8a0>
 8006f34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006f38:	e53e      	b.n	80069b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f3a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006f3e:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8006f42:	3218      	adds	r2, #24
 8006f44:	4299      	cmp	r1, r3
 8006f46:	bf18      	it	ne
 8006f48:	4281      	cmpne	r1, r0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	4291      	cmp	r1, r2
 8006f52:	bf0c      	ite	eq
 8006f54:	2300      	moveq	r3, #0
 8006f56:	f003 0301 	andne.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80fd 	beq.w	800715a <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 8006f60:	4b33      	ldr	r3, [pc, #204]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006f62:	4299      	cmp	r1, r3
 8006f64:	f000 80f9 	beq.w	800715a <HAL_DMAEx_MultiBufferStart_IT+0x8be>
 8006f68:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006f6c:	e615      	b.n	8006b9a <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
 8006f6e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006f72:	3018      	adds	r0, #24
 8006f74:	3218      	adds	r2, #24
 8006f76:	4299      	cmp	r1, r3
 8006f78:	bf18      	it	ne
 8006f7a:	4281      	cmpne	r1, r0
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	4291      	cmp	r1, r2
 8006f84:	bf0c      	ite	eq
 8006f86:	2300      	moveq	r3, #0
 8006f88:	f003 0301 	andne.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80ea 	beq.w	8007166 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8006f92:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006f94:	4299      	cmp	r1, r3
 8006f96:	f000 80e6 	beq.w	8007166 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8006f9a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8006f9e:	e670      	b.n	8006c82 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006fa0:	4b25      	ldr	r3, [pc, #148]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006fa2:	4824      	ldr	r0, [pc, #144]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006fa4:	4a25      	ldr	r2, [pc, #148]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	bf18      	it	ne
 8006faa:	4281      	cmpne	r1, r0
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	f003 0301 	andne.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80de 	beq.w	800717e <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 8006fc2:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	f000 80da 	beq.w	800717e <HAL_DMAEx_MultiBufferStart_IT+0x8e2>
 8006fca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006fce:	e66f      	b.n	8006cb0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8006fd0:	4b18      	ldr	r3, [pc, #96]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8006fd2:	4819      	ldr	r0, [pc, #100]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8006fd4:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8006fd6:	4299      	cmp	r1, r3
 8006fd8:	bf18      	it	ne
 8006fda:	4281      	cmpne	r1, r0
 8006fdc:	bf14      	ite	ne
 8006fde:	2301      	movne	r3, #1
 8006fe0:	2300      	moveq	r3, #0
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	f003 0301 	andne.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80c0 	beq.w	8007172 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	f000 80bc 	beq.w	8007172 <HAL_DMAEx_MultiBufferStart_IT+0x8d6>
 8006ffa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006ffe:	e5e4      	b.n	8006bca <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <HAL_DMAEx_MultiBufferStart_IT+0x79c>)
 8007002:	480c      	ldr	r0, [pc, #48]	; (8007034 <HAL_DMAEx_MultiBufferStart_IT+0x798>)
 8007004:	4a0d      	ldr	r2, [pc, #52]	; (800703c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>)
 8007006:	4299      	cmp	r1, r3
 8007008:	bf18      	it	ne
 800700a:	4281      	cmpne	r1, r0
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	4291      	cmp	r1, r2
 8007014:	bf0c      	ite	eq
 8007016:	2300      	moveq	r3, #0
 8007018:	f003 0301 	andne.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80b4 	beq.w	800718a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8007022:	4b03      	ldr	r3, [pc, #12]	; (8007030 <HAL_DMAEx_MultiBufferStart_IT+0x794>)
 8007024:	4299      	cmp	r1, r3
 8007026:	f000 80b0 	beq.w	800718a <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 800702a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800702e:	e66e      	b.n	8006d0e <HAL_DMAEx_MultiBufferStart_IT+0x472>
 8007030:	400264a0 	.word	0x400264a0
 8007034:	40026440 	.word	0x40026440
 8007038:	40026040 	.word	0x40026040
 800703c:	400260a0 	.word	0x400260a0
 8007040:	4b55      	ldr	r3, [pc, #340]	; (8007198 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007042:	4856      	ldr	r0, [pc, #344]	; (800719c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007044:	4a56      	ldr	r2, [pc, #344]	; (80071a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007046:	4299      	cmp	r1, r3
 8007048:	bf18      	it	ne
 800704a:	4281      	cmpne	r1, r0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	4291      	cmp	r1, r2
 8007054:	bf0c      	ite	eq
 8007056:	2300      	moveq	r3, #0
 8007058:	f003 0301 	andne.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8085 	beq.w	800716c <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 8007062:	4b50      	ldr	r3, [pc, #320]	; (80071a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007064:	4299      	cmp	r1, r3
 8007066:	f000 8081 	beq.w	800716c <HAL_DMAEx_MultiBufferStart_IT+0x8d0>
 800706a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800706e:	e5db      	b.n	8006c28 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007070:	4b4a      	ldr	r3, [pc, #296]	; (800719c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 8007072:	4849      	ldr	r0, [pc, #292]	; (8007198 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 8007074:	4a4a      	ldr	r2, [pc, #296]	; (80071a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007076:	4299      	cmp	r1, r3
 8007078:	bf18      	it	ne
 800707a:	4281      	cmpne	r1, r0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	4291      	cmp	r1, r2
 8007084:	bf0c      	ite	eq
 8007086:	2300      	moveq	r3, #0
 8007088:	f003 0301 	andne.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d079      	beq.n	8007184 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 8007090:	4b44      	ldr	r3, [pc, #272]	; (80071a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007092:	4299      	cmp	r1, r3
 8007094:	d076      	beq.n	8007184 <HAL_DMAEx_MultiBufferStart_IT+0x8e8>
 8007096:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800709a:	e621      	b.n	8006ce0 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800709c:	4b3e      	ldr	r3, [pc, #248]	; (8007198 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 800709e:	483f      	ldr	r0, [pc, #252]	; (800719c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80070a0:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80070a2:	4299      	cmp	r1, r3
 80070a4:	bf18      	it	ne
 80070a6:	4281      	cmpne	r1, r0
 80070a8:	bf14      	ite	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	2300      	moveq	r3, #0
 80070ae:	4291      	cmp	r1, r2
 80070b0:	bf0c      	ite	eq
 80070b2:	2300      	moveq	r3, #0
 80070b4:	f003 0301 	andne.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05d      	beq.n	8007178 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 80070bc:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80070be:	4299      	cmp	r1, r3
 80070c0:	d05a      	beq.n	8007178 <HAL_DMAEx_MultiBufferStart_IT+0x8dc>
 80070c2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80070c6:	e598      	b.n	8006bfa <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80070ca:	4833      	ldr	r0, [pc, #204]	; (8007198 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80070cc:	4a34      	ldr	r2, [pc, #208]	; (80071a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80070ce:	4299      	cmp	r1, r3
 80070d0:	bf18      	it	ne
 80070d2:	4281      	cmpne	r1, r0
 80070d4:	bf14      	ite	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	2300      	moveq	r3, #0
 80070da:	4291      	cmp	r1, r2
 80070dc:	bf0c      	ite	eq
 80070de:	2300      	moveq	r3, #0
 80070e0:	f003 0301 	andne.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d053      	beq.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80070e8:	4b2e      	ldr	r3, [pc, #184]	; (80071a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80070ea:	4299      	cmp	r1, r3
 80070ec:	d050      	beq.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 80070ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80070f2:	e47b      	b.n	80069ec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 80070f4:	4b29      	ldr	r3, [pc, #164]	; (800719c <HAL_DMAEx_MultiBufferStart_IT+0x900>)
 80070f6:	4828      	ldr	r0, [pc, #160]	; (8007198 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>)
 80070f8:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80070fa:	4299      	cmp	r1, r3
 80070fc:	bf18      	it	ne
 80070fe:	4281      	cmpne	r1, r0
 8007100:	bf14      	ite	ne
 8007102:	2301      	movne	r3, #1
 8007104:	2300      	moveq	r3, #0
 8007106:	4291      	cmp	r1, r2
 8007108:	bf0c      	ite	eq
 800710a:	2300      	moveq	r3, #0
 800710c:	f003 0301 	andne.w	r3, r3, #1
 8007110:	b333      	cbz	r3, 8007160 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007114:	4299      	cmp	r1, r3
 8007116:	d023      	beq.n	8007160 <HAL_DMAEx_MultiBufferStart_IT+0x8c4>
 8007118:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800711c:	e476      	b.n	8006a0c <HAL_DMAEx_MultiBufferStart_IT+0x170>
 800711e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007122:	e40b      	b.n	800693c <HAL_DMAEx_MultiBufferStart_IT+0xa0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007124:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007128:	e674      	b.n	8006e14 <HAL_DMAEx_MultiBufferStart_IT+0x578>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800712a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800712e:	e658      	b.n	8006de2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007130:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007134:	e63c      	b.n	8006db0 <HAL_DMAEx_MultiBufferStart_IT+0x514>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007136:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800713a:	e620      	b.n	8006d7e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800713c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007140:	e43a      	b.n	80069b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007142:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
 8007146:	e49d      	b.n	8006a84 <HAL_DMAEx_MultiBufferStart_IT+0x1e8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007148:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800714c:	e4df      	b.n	8006b0e <HAL_DMAEx_MultiBufferStart_IT+0x272>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800714e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8007152:	e4ae      	b.n	8006ab2 <HAL_DMAEx_MultiBufferStart_IT+0x216>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007154:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 8007158:	e4c2      	b.n	8006ae0 <HAL_DMAEx_MultiBufferStart_IT+0x244>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800715a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800715e:	e51c      	b.n	8006b9a <HAL_DMAEx_MultiBufferStart_IT+0x2fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007164:	e452      	b.n	8006a0c <HAL_DMAEx_MultiBufferStart_IT+0x170>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007166:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800716a:	e58a      	b.n	8006c82 <HAL_DMAEx_MultiBufferStart_IT+0x3e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800716c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007170:	e55a      	b.n	8006c28 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007176:	e528      	b.n	8006bca <HAL_DMAEx_MultiBufferStart_IT+0x32e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007178:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800717c:	e53d      	b.n	8006bfa <HAL_DMAEx_MultiBufferStart_IT+0x35e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800717e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007182:	e595      	b.n	8006cb0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007184:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007188:	e5aa      	b.n	8006ce0 <HAL_DMAEx_MultiBufferStart_IT+0x444>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800718a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800718e:	e5be      	b.n	8006d0e <HAL_DMAEx_MultiBufferStart_IT+0x472>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007190:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007194:	e42a      	b.n	80069ec <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8007196:	bf00      	nop
 8007198:	40026040 	.word	0x40026040
 800719c:	40026440 	.word	0x40026440
 80071a0:	400260a0 	.word	0x400260a0
 80071a4:	400264a0 	.word	0x400264a0

080071a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80071a8:	b530      	push	{r4, r5, lr}
 80071aa:	4605      	mov	r5, r0
 80071ac:	b083      	sub	sp, #12
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80071ae:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80071b2:	2200      	movs	r2, #0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80071b4:	682b      	ldr	r3, [r5, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071b6:	2001      	movs	r0, #1
  __IO uint32_t tmpreg = 0;
 80071b8:	9201      	str	r2, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80071ba:	591a      	ldr	r2, [r3, r4]
 80071bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071c0:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 80071c2:	591b      	ldr	r3, [r3, r4]
 80071c4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071c6:	f7fe f8eb 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	9a01      	ldr	r2, [sp, #4]
 80071ce:	511a      	str	r2, [r3, r4]
}
 80071d0:	b003      	add	sp, #12
 80071d2:	bd30      	pop	{r4, r5, pc}

080071d4 <ETH_MACDMAConfig>:
{
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80071d8:	2900      	cmp	r1, #0
 80071da:	d164      	bne.n	80072a6 <ETH_MACDMAConfig+0xd2>
 80071dc:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 80071e0:	430b      	orrs	r3, r1
 80071e2:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  tmpreg = (heth->Instance)->MACCR;
 80071e6:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80071e8:	2001      	movs	r0, #1
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80071ea:	69e5      	ldr	r5, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 80071ec:	6816      	ldr	r6, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80071ee:	4b32      	ldr	r3, [pc, #200]	; (80072b8 <ETH_MACDMAConfig+0xe4>)
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80071f0:	2d00      	cmp	r5, #0
    tmpreg = (heth->Instance)->DMAOMR;
 80071f2:	f241 0518 	movw	r5, #4120	; 0x1018
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80071f6:	ea03 0306 	and.w	r3, r3, r6
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80071fa:	f04f 0600 	mov.w	r6, #0
 80071fe:	ea43 0301 	orr.w	r3, r3, r1
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007202:	bf14      	ite	ne
 8007204:	4631      	movne	r1, r6
 8007206:	f44f 6180 	moveq.w	r1, #1024	; 0x400
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800720a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800720c:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800720e:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007210:	f7fe f8c6 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8007214:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007216:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007218:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800721a:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800721c:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800721e:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007220:	f7fe f8be 	bl	80053a0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8007224:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8007226:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800722a:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800722c:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800722e:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007230:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8007232:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8007234:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8007236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800723a:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800723c:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800723e:	f7fe f8af 	bl	80053a0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8007242:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007244:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8007246:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007248:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800724a:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800724c:	f7fe f8a8 	bl	80053a0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8007250:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007252:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8007254:	4919      	ldr	r1, [pc, #100]	; (80072bc <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8007256:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8007258:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800725a:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800725c:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <ETH_MACDMAConfig+0xec>)
 800725e:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8007260:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8007262:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007264:	f7fe f89c 	bl	80053a0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8007268:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800726a:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800726c:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <ETH_MACDMAConfig+0xf0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800726e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007274:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8007276:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007278:	f7fe f892 	bl	80053a0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800727c:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800727e:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8007280:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007284:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8007286:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007288:	d105      	bne.n	8007296 <ETH_MACDMAConfig+0xc2>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800728a:	f241 011c 	movw	r1, #4124	; 0x101c
 800728e:	4a0e      	ldr	r2, [pc, #56]	; (80072c8 <ETH_MACDMAConfig+0xf4>)
 8007290:	5858      	ldr	r0, [r3, r1]
 8007292:	4302      	orrs	r2, r0
 8007294:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007296:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8007298:	490c      	ldr	r1, [pc, #48]	; (80072cc <ETH_MACDMAConfig+0xf8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800729a:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800729c:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <ETH_MACDMAConfig+0xfc>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800729e:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80072a0:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80072a2:	6013      	str	r3, [r2, #0]
}
 80072a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80072a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 80072aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072ae:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 80072b2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80072b6:	e796      	b.n	80071e6 <ETH_MACDMAConfig+0x12>
 80072b8:	ff20810f 	.word	0xff20810f
 80072bc:	f8de3f23 	.word	0xf8de3f23
 80072c0:	02200004 	.word	0x02200004
 80072c4:	02c12080 	.word	0x02c12080
 80072c8:	00010040 	.word	0x00010040
 80072cc:	40028040 	.word	0x40028040
 80072d0:	40028044 	.word	0x40028044

080072d4 <HAL_ETH_DMATxDescListInit>:
{
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80072d8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80072dc:	2c01      	cmp	r4, #1
 80072de:	d03f      	beq.n	8007360 <HAL_ETH_DMATxDescListInit+0x8c>
 80072e0:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80072e2:	2402      	movs	r4, #2
  heth->TxDesc = DMATxDescTab;
 80072e4:	62c1      	str	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(heth);
 80072e6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80072ea:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 80072ee:	b34b      	cbz	r3, 8007344 <HAL_ETH_DMATxDescListInit+0x70>
 80072f0:	f103 3eff 	add.w	lr, r3, #4294967295
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80072f4:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80072f8:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 80072fc:	460c      	mov	r4, r1
 80072fe:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007304:	e007      	b.n	8007316 <HAL_ETH_DMATxDescListInit+0x42>
  for(i=0; i < TxBuffCount; i++)
 8007306:	42b3      	cmp	r3, r6
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8007308:	60e6      	str	r6, [r4, #12]
 800730a:	f105 0501 	add.w	r5, r5, #1
 800730e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8007312:	4634      	mov	r4, r6
  for(i=0; i < TxBuffCount; i++)
 8007314:	d016      	beq.n	8007344 <HAL_ETH_DMATxDescListInit+0x70>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8007316:	f104 0620 	add.w	r6, r4, #32
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800731a:	f8c4 c000 	str.w	ip, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800731e:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	d103      	bne.n	800732e <HAL_ETH_DMATxDescListInit+0x5a>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8007326:	6827      	ldr	r7, [r4, #0]
 8007328:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800732c:	6027      	str	r7, [r4, #0]
    if(i < (TxBuffCount-1))
 800732e:	4575      	cmp	r5, lr
 8007330:	d3e9      	bcc.n	8007306 <HAL_ETH_DMATxDescListInit+0x32>
 8007332:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8007336:	60e1      	str	r1, [r4, #12]
 8007338:	3501      	adds	r5, #1
 800733a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800733e:	42b3      	cmp	r3, r6
 8007340:	4634      	mov	r4, r6
 8007342:	d1e8      	bne.n	8007316 <HAL_ETH_DMATxDescListInit+0x42>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007344:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 8007346:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007348:	f241 0210 	movw	r2, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 800734c:	2401      	movs	r4, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800734e:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 8007350:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 8007352:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007356:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800735a:	4610      	mov	r0, r2
 800735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 8007360:	2202      	movs	r2, #2
}
 8007362:	4610      	mov	r0, r2
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007368 <HAL_ETH_DMARxDescListInit>:
{
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800736a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800736e:	2c01      	cmp	r4, #1
 8007370:	d038      	beq.n	80073e4 <HAL_ETH_DMARxDescListInit+0x7c>
 8007372:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8007374:	2402      	movs	r4, #2
  heth->RxDesc = DMARxDescTab; 
 8007376:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8007378:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800737c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8007380:	b31b      	cbz	r3, 80073ca <HAL_ETH_DMARxDescListInit+0x62>
 8007382:	f103 3eff 	add.w	lr, r3, #4294967295
 8007386:	460c      	mov	r4, r1
 8007388:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800738c:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800738e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8007392:	f244 57f4 	movw	r7, #17908	; 0x45f4
 8007396:	e007      	b.n	80073a8 <HAL_ETH_DMARxDescListInit+0x40>
  for(i=0; i < RxBuffCount; i++)
 8007398:	42b3      	cmp	r3, r6
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800739a:	60e6      	str	r6, [r4, #12]
 800739c:	f105 0501 	add.w	r5, r5, #1
 80073a0:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80073a4:	4634      	mov	r4, r6
  for(i=0; i < RxBuffCount; i++)
 80073a6:	d010      	beq.n	80073ca <HAL_ETH_DMARxDescListInit+0x62>
    if(i < (RxBuffCount-1))
 80073a8:	4575      	cmp	r5, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80073aa:	f8c4 c000 	str.w	ip, [r4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80073ae:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80073b2:	e9c4 7201 	strd	r7, r2, [r4, #4]
    if(i < (RxBuffCount-1))
 80073b6:	d3ef      	bcc.n	8007398 <HAL_ETH_DMARxDescListInit+0x30>
 80073b8:	f104 0620 	add.w	r6, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80073bc:	60e1      	str	r1, [r4, #12]
 80073be:	3501      	adds	r5, #1
 80073c0:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < RxBuffCount; i++)
 80073c4:	42b3      	cmp	r3, r6
 80073c6:	4634      	mov	r4, r6
 80073c8:	d1ee      	bne.n	80073a8 <HAL_ETH_DMARxDescListInit+0x40>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80073ca:	6805      	ldr	r5, [r0, #0]
  __HAL_UNLOCK(heth);
 80073cc:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80073ce:	f241 020c 	movw	r2, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 80073d2:	2401      	movs	r4, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80073d4:	50a9      	str	r1, [r5, r2]
  return HAL_OK;
 80073d6:	461a      	mov	r2, r3
  heth->State= HAL_ETH_STATE_READY;
 80073d8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80073dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80073e0:	4610      	mov	r0, r2
 80073e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(heth);
 80073e4:	2202      	movs	r2, #2
}
 80073e6:	4610      	mov	r0, r2
 80073e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ea:	bf00      	nop

080073ec <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80073ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d065      	beq.n	80074c0 <HAL_ETH_TransmitFrame+0xd4>
 80073f4:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 80073f6:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 80073f8:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80073fa:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 80073fe:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 8007402:	2900      	cmp	r1, #0
 8007404:	d033      	beq.n	800746e <HAL_ETH_TransmitFrame+0x82>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8007408:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800740a:	681c      	ldr	r4, [r3, #0]
 800740c:	2c00      	cmp	r4, #0
 800740e:	db59      	blt.n	80074c4 <HAL_ETH_TransmitFrame+0xd8>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007410:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8007414:	4281      	cmp	r1, r0
 8007416:	d931      	bls.n	800747c <HAL_ETH_TransmitFrame+0x90>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007418:	4d31      	ldr	r5, [pc, #196]	; (80074e0 <HAL_ETH_TransmitFrame+0xf4>)
 800741a:	fba5 4501 	umull	r4, r5, r5, r1
 800741e:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007420:	fb00 1015 	mls	r0, r0, r5, r1
 8007424:	b340      	cbz	r0, 8007478 <HAL_ETH_TransmitFrame+0x8c>
      bufcount++;
 8007426:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8007428:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 800742c:	4c2d      	ldr	r4, [pc, #180]	; (80074e4 <HAL_ETH_TransmitFrame+0xf8>)
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800742e:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007430:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8007434:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8007438:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800743a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800743e:	681c      	ldr	r4, [r3, #0]
 8007440:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8007444:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 8007446:	2800      	cmp	r0, #0
 8007448:	d044      	beq.n	80074d4 <HAL_ETH_TransmitFrame+0xe8>
      if (i == (bufcount-1))
 800744a:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800744c:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800744e:	d104      	bne.n	800745a <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007450:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007452:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007454:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007458:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800745a:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 800745c:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800745e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8007462:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007464:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007466:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8007468:	d1e9      	bne.n	800743e <HAL_ETH_TransmitFrame+0x52>
 800746a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800746c:	e013      	b.n	8007496 <HAL_ETH_TransmitFrame+0xaa>
    heth->State = HAL_ETH_STATE_READY;
 800746e:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007472:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8007476:	4770      	bx	lr
  if (bufcount == 1)
 8007478:	2d01      	cmp	r5, #1
 800747a:	d1d5      	bne.n	8007428 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800747c:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800747e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007482:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007484:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007488:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800748a:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007492:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007494:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	f241 0114 	movw	r1, #4116	; 0x1014
 800749c:	5858      	ldr	r0, [r3, r1]
 800749e:	0740      	lsls	r0, r0, #29
 80074a0:	d505      	bpl.n	80074ae <HAL_ETH_TransmitFrame+0xc2>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80074a2:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 80074a4:	f241 0004 	movw	r0, #4100	; 0x1004
 80074a8:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80074aa:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 80074ac:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 80074ae:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 80074b0:	2101      	movs	r1, #1
  return HAL_OK;
 80074b2:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 80074b4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80074b8:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80074bc:	bcf0      	pop	{r4, r5, r6, r7}
 80074be:	4770      	bx	lr
  __HAL_LOCK(heth);
 80074c0:	2002      	movs	r0, #2
}
 80074c2:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80074c4:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 80074c6:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80074c8:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80074cc:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80074d0:	bcf0      	pop	{r4, r5, r6, r7}
 80074d2:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80074d4:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80074d6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80074d8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80074dc:	601c      	str	r4, [r3, #0]
 80074de:	e7bc      	b.n	800745a <HAL_ETH_TransmitFrame+0x6e>
 80074e0:	ac02b00b 	.word	0xac02b00b
 80074e4:	fffffa0c 	.word	0xfffffa0c

080074e8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80074e8:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 80074ec:	2a01      	cmp	r2, #1
 80074ee:	d032      	beq.n	8007556 <HAL_ETH_GetReceivedFrame_IT+0x6e>
 80074f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80074f2:	4603      	mov	r3, r0
 80074f4:	2101      	movs	r1, #1
  uint32_t descriptorscancounter = 0;
 80074f6:	2000      	movs	r0, #0
{
 80074f8:	b470      	push	{r4, r5, r6}
  heth->State = HAL_ETH_STATE_BUSY;
 80074fa:	2402      	movs	r4, #2
  __HAL_LOCK(heth);
 80074fc:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.SegCount = 1;   
 8007500:	460d      	mov	r5, r1
  heth->State = HAL_ETH_STATE_BUSY;
 8007502:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007506:	6811      	ldr	r1, [r2, #0]
 8007508:	2900      	cmp	r1, #0
 800750a:	db17      	blt.n	800753c <HAL_ETH_GetReceivedFrame_IT+0x54>
 800750c:	2804      	cmp	r0, #4
    descriptorscancounter++;
 800750e:	f100 0001 	add.w	r0, r0, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007512:	d013      	beq.n	800753c <HAL_ETH_GetReceivedFrame_IT+0x54>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8007514:	6811      	ldr	r1, [r2, #0]
 8007516:	68d4      	ldr	r4, [r2, #12]
 8007518:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800751c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007520:	d014      	beq.n	800754c <HAL_ETH_GetReceivedFrame_IT+0x64>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8007522:	6816      	ldr	r6, [r2, #0]
 8007524:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007526:	f416 7f40 	tst.w	r6, #768	; 0x300
 800752a:	f101 0101 	add.w	r1, r1, #1
 800752e:	d114      	bne.n	800755a <HAL_ETH_GetReceivedFrame_IT+0x72>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007530:	4622      	mov	r2, r4
      (heth->RxFrameInfos.SegCount)++;
 8007532:	6399      	str	r1, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8007534:	629c      	str	r4, [r3, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007536:	6811      	ldr	r1, [r2, #0]
 8007538:	2900      	cmp	r1, #0
 800753a:	dae7      	bge.n	800750c <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 800753c:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 800753e:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8007540:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8007548:	bc70      	pop	{r4, r5, r6}
 800754a:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800754e:	4622      	mov	r2, r4
      heth->RxFrameInfos.SegCount = 1;   
 8007550:	639d      	str	r5, [r3, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007552:	629c      	str	r4, [r3, #40]	; 0x28
 8007554:	e7ef      	b.n	8007536 <HAL_ETH_GetReceivedFrame_IT+0x4e>
  __HAL_LOCK(heth);
 8007556:	2002      	movs	r0, #2
}
 8007558:	4770      	bx	lr
      if ((heth->RxFrameInfos.SegCount) == 1)
 800755a:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800755c:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8007560:	d010      	beq.n	8007584 <HAL_ETH_GetReceivedFrame_IT+0x9c>
 8007562:	6b19      	ldr	r1, [r3, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007564:	6812      	ldr	r2, [r2, #0]
      heth->State = HAL_ETH_STATE_READY;
 8007566:	2501      	movs	r5, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007568:	6888      	ldr	r0, [r1, #8]
      __HAL_UNLOCK(heth);
 800756a:	2100      	movs	r1, #0
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800756c:	f3c2 420d 	ubfx	r2, r2, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007570:	629c      	str	r4, [r3, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007572:	6418      	str	r0, [r3, #64]	; 0x40
      return HAL_OK;
 8007574:	4608      	mov	r0, r1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007576:	3a04      	subs	r2, #4
      heth->State = HAL_ETH_STATE_READY;
 8007578:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800757c:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_OK;
 8007582:	e7e1      	b.n	8007548 <HAL_ETH_GetReceivedFrame_IT+0x60>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8007584:	4611      	mov	r1, r2
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
 8007588:	e7ec      	b.n	8007564 <HAL_ETH_GetReceivedFrame_IT+0x7c>
 800758a:	bf00      	nop

0800758c <HAL_ETH_TxCpltCallback>:
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop

08007590 <HAL_ETH_ErrorCallback>:
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop

08007594 <HAL_ETH_IRQHandler>:
{
 8007594:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007596:	6803      	ldr	r3, [r0, #0]
 8007598:	f241 0614 	movw	r6, #4116	; 0x1014
{
 800759c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800759e:	599d      	ldr	r5, [r3, r6]
 80075a0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80075a4:	d123      	bne.n	80075ee <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80075a6:	599a      	ldr	r2, [r3, r6]
 80075a8:	07d2      	lsls	r2, r2, #31
 80075aa:	d416      	bmi.n	80075da <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80075ac:	f241 0514 	movw	r5, #4116	; 0x1014
 80075b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075b4:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80075b6:	595b      	ldr	r3, [r3, r5]
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	d400      	bmi.n	80075be <HAL_ETH_IRQHandler+0x2a>
}
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff ffe6 	bl	8007590 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80075c4:	6821      	ldr	r1, [r4, #0]
 80075c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 80075ca:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 80075cc:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80075ce:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 80075d0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80075d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 80075da:	f7ff ffd7 	bl	800758c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80075de:	2201      	movs	r2, #1
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80075e4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80075e8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80075ec:	e7de      	b.n	80075ac <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 80075ee:	f008 f933 	bl	800f858 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 80075f6:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 80075f8:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80075fa:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80075fc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8007600:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007604:	e7d2      	b.n	80075ac <HAL_ETH_IRQHandler+0x18>
 8007606:	bf00      	nop

08007608 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007608:	8a03      	ldrh	r3, [r0, #16]
 800760a:	2b20      	cmp	r3, #32
{
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007614:	d833      	bhi.n	800767e <HAL_ETH_ReadPHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007616:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800761a:	2b82      	cmp	r3, #130	; 0x82
 800761c:	d038      	beq.n	8007690 <HAL_ETH_ReadPHYRegister+0x88>
  tmpreg = heth->Instance->MACMIIAR;
 800761e:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007620:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007622:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007624:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007628:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800762c:	8a22      	ldrh	r2, [r4, #16]
 800762e:	f043 0301 	orr.w	r3, r3, #1
  tmpreg = heth->Instance->MACMIIAR;
 8007632:	6901      	ldr	r1, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007634:	02d2      	lsls	r2, r2, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8007636:	f001 011c 	and.w	r1, r1, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800763a:	b292      	uxth	r2, r2
 800763c:	430b      	orrs	r3, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800763e:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 8007640:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8007642:	f7fd fea7 	bl	8005394 <HAL_GetTick>
 8007646:	4605      	mov	r5, r0
 8007648:	e004      	b.n	8007654 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800764e:	f010 0001 	ands.w	r0, r0, #1
 8007652:	d00d      	beq.n	8007670 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007654:	f7fd fe9e 	bl	8005394 <HAL_GetTick>
 8007658:	1b40      	subs	r0, r0, r5
 800765a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800765e:	d3f4      	bcc.n	800764a <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8007660:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8007662:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007664:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8007666:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800766a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800766e:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007670:	695b      	ldr	r3, [r3, #20]
  heth->State = HAL_ETH_STATE_READY;
 8007672:	2201      	movs	r2, #1
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007674:	b29b      	uxth	r3, r3
 8007676:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8007678:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800767c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800767e:	f240 5116 	movw	r1, #1302	; 0x516
 8007682:	4804      	ldr	r0, [pc, #16]	; (8007694 <HAL_ETH_ReadPHYRegister+0x8c>)
 8007684:	f7fb fb8a 	bl	8002d9c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007688:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800768c:	2b82      	cmp	r3, #130	; 0x82
 800768e:	d1c6      	bne.n	800761e <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8007690:	2002      	movs	r0, #2
}
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	080261d0 	.word	0x080261d0

08007698 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8007698:	8a03      	ldrh	r3, [r0, #16]
 800769a:	2b20      	cmp	r3, #32
{
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4604      	mov	r4, r0
 80076a0:	460d      	mov	r5, r1
 80076a2:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80076a4:	d832      	bhi.n	800770c <HAL_ETH_WritePHYRegister+0x74>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80076a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076aa:	2b42      	cmp	r3, #66	; 0x42
 80076ac:	d037      	beq.n	800771e <HAL_ETH_WritePHYRegister+0x86>
  tmpreg = heth->Instance->MACMIIAR;
 80076ae:	6821      	ldr	r1, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80076b0:	01ab      	lsls	r3, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80076b2:	2242      	movs	r2, #66	; 0x42
 80076b4:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80076b6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80076ba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80076be:	8a22      	ldrh	r2, [r4, #16]
 80076c0:	f043 0303 	orr.w	r3, r3, #3
  tmpreg = heth->Instance->MACMIIAR;
 80076c4:	6908      	ldr	r0, [r1, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80076c6:	02d2      	lsls	r2, r2, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80076c8:	614e      	str	r6, [r1, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80076ca:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80076ce:	b292      	uxth	r2, r2
 80076d0:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80076d2:	4313      	orrs	r3, r2
  heth->Instance->MACMIIAR = tmpreg;
 80076d4:	610b      	str	r3, [r1, #16]
  tickstart = HAL_GetTick();
 80076d6:	f7fd fe5d 	bl	8005394 <HAL_GetTick>
 80076da:	4605      	mov	r5, r0
 80076dc:	e004      	b.n	80076e8 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6918      	ldr	r0, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80076e2:	f010 0001 	ands.w	r0, r0, #1
 80076e6:	d00d      	beq.n	8007704 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80076e8:	f7fd fe54 	bl	8005394 <HAL_GetTick>
 80076ec:	1b40      	subs	r0, r0, r5
 80076ee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80076f2:	d3f4      	bcc.n	80076de <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 80076f4:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 80076f6:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80076f8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80076fa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80076fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8007702:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8007704:	2301      	movs	r3, #1
 8007706:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800770a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800770c:	f240 515e 	movw	r1, #1374	; 0x55e
 8007710:	4804      	ldr	r0, [pc, #16]	; (8007724 <HAL_ETH_WritePHYRegister+0x8c>)
 8007712:	f7fb fb43 	bl	8002d9c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007716:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800771a:	2b42      	cmp	r3, #66	; 0x42
 800771c:	d1c7      	bne.n	80076ae <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800771e:	2002      	movs	r0, #2
}
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	bf00      	nop
 8007724:	080261d0 	.word	0x080261d0

08007728 <HAL_ETH_Init>:
{
 8007728:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800772a:	2300      	movs	r3, #0
{
 800772c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800772e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8007730:	2800      	cmp	r0, #0
 8007732:	f000 80bb 	beq.w	80078ac <HAL_ETH_Init+0x184>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007736:	6843      	ldr	r3, [r0, #4]
 8007738:	4604      	mov	r4, r0
 800773a:	2b01      	cmp	r3, #1
 800773c:	f200 8092 	bhi.w	8007864 <HAL_ETH_Init+0x13c>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007740:	69a3      	ldr	r3, [r4, #24]
 8007742:	2b01      	cmp	r3, #1
 8007744:	f200 8085 	bhi.w	8007852 <HAL_ETH_Init+0x12a>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007748:	69e3      	ldr	r3, [r4, #28]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d878      	bhi.n	8007840 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800774e:	6a23      	ldr	r3, [r4, #32]
 8007750:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007754:	f040 8095 	bne.w	8007882 <HAL_ETH_Init+0x15a>
  if(heth->State == HAL_ETH_STATE_RESET)
 8007758:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800775c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8088 	beq.w	8007876 <HAL_ETH_Init+0x14e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007766:	4b90      	ldr	r3, [pc, #576]	; (80079a8 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007768:	6821      	ldr	r1, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800776a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800776c:	488f      	ldr	r0, [pc, #572]	; (80079ac <HAL_ETH_Init+0x284>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800776e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007776:	645a      	str	r2, [r3, #68]	; 0x44
 8007778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007782:	6843      	ldr	r3, [r0, #4]
 8007784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007788:	6043      	str	r3, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800778a:	6843      	ldr	r3, [r0, #4]
 800778c:	6a22      	ldr	r2, [r4, #32]
 800778e:	4313      	orrs	r3, r2
 8007790:	6043      	str	r3, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8007792:	680b      	ldr	r3, [r1, #0]
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 800779a:	f7fd fdfb 	bl	8005394 <HAL_GetTick>
 800779e:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80077a0:	e005      	b.n	80077ae <HAL_ETH_Init+0x86>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80077a2:	f7fd fdf7 	bl	8005394 <HAL_GetTick>
 80077a6:	1b40      	subs	r0, r0, r5
 80077a8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80077ac:	d875      	bhi.n	800789a <HAL_ETH_Init+0x172>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	07d0      	lsls	r0, r2, #31
 80077b8:	d4f3      	bmi.n	80077a2 <HAL_ETH_Init+0x7a>
  tempreg = (heth->Instance)->MACMIIAR;
 80077ba:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80077bc:	f002 fcac 	bl	800a118 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80077c0:	4b7b      	ldr	r3, [pc, #492]	; (80079b0 <HAL_ETH_Init+0x288>)
 80077c2:	4a7c      	ldr	r2, [pc, #496]	; (80079b4 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80077c4:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80077c8:	4403      	add	r3, r0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d972      	bls.n	80078b4 <HAL_ETH_Init+0x18c>
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80077ce:	4b7a      	ldr	r3, [pc, #488]	; (80079b8 <HAL_ETH_Init+0x290>)
 80077d0:	4a7a      	ldr	r2, [pc, #488]	; (80079bc <HAL_ETH_Init+0x294>)
 80077d2:	4403      	add	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d87a      	bhi.n	80078ce <HAL_ETH_Init+0x1a6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80077d8:	f045 050c 	orr.w	r5, r5, #12
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80077dc:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80077de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077e2:	2100      	movs	r1, #0
 80077e4:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80077e6:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80077e8:	f7ff ff56 	bl	8007698 <HAL_ETH_WritePHYRegister>
 80077ec:	4605      	mov	r5, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d163      	bne.n	80078ba <HAL_ETH_Init+0x192>
  HAL_Delay(PHY_RESET_DELAY);
 80077f2:	20ff      	movs	r0, #255	; 0xff
 80077f4:	f7fd fdd4 	bl	80053a0 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80077f8:	6863      	ldr	r3, [r4, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d176      	bne.n	80078ec <HAL_ETH_Init+0x1c4>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007804:	f040 8098 	bne.w	8007938 <HAL_ETH_Init+0x210>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8007808:	68e3      	ldr	r3, [r4, #12]
 800780a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800780e:	f040 808c 	bne.w	800792a <HAL_ETH_Init+0x202>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007812:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007814:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007816:	2100      	movs	r1, #0
 8007818:	4620      	mov	r0, r4
 800781a:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800781e:	b292      	uxth	r2, r2
 8007820:	f7ff ff3a 	bl	8007698 <HAL_ETH_WritePHYRegister>
 8007824:	2800      	cmp	r0, #0
 8007826:	d148      	bne.n	80078ba <HAL_ETH_Init+0x192>
    HAL_Delay(PHY_CONFIG_DELAY);
 8007828:	f640 70ff 	movw	r0, #4095	; 0xfff
 800782c:	f7fd fdb8 	bl	80053a0 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8007830:	2100      	movs	r1, #0
 8007832:	4620      	mov	r0, r4
 8007834:	f7ff fcce 	bl	80071d4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8007838:	2301      	movs	r3, #1
 800783a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800783e:	e032      	b.n	80078a6 <HAL_ETH_Init+0x17e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8007840:	21e0      	movs	r1, #224	; 0xe0
 8007842:	485f      	ldr	r0, [pc, #380]	; (80079c0 <HAL_ETH_Init+0x298>)
 8007844:	f7fb faaa 	bl	8002d9c <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007848:	6a23      	ldr	r3, [r4, #32]
 800784a:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800784e:	d083      	beq.n	8007758 <HAL_ETH_Init+0x30>
 8007850:	e017      	b.n	8007882 <HAL_ETH_Init+0x15a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8007852:	21df      	movs	r1, #223	; 0xdf
 8007854:	485a      	ldr	r0, [pc, #360]	; (80079c0 <HAL_ETH_Init+0x298>)
 8007856:	f7fb faa1 	bl	8002d9c <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800785a:	69e3      	ldr	r3, [r4, #28]
 800785c:	2b01      	cmp	r3, #1
 800785e:	f67f af76 	bls.w	800774e <HAL_ETH_Init+0x26>
 8007862:	e7ed      	b.n	8007840 <HAL_ETH_Init+0x118>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8007864:	21de      	movs	r1, #222	; 0xde
 8007866:	4856      	ldr	r0, [pc, #344]	; (80079c0 <HAL_ETH_Init+0x298>)
 8007868:	f7fb fa98 	bl	8002d9c <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800786c:	69a3      	ldr	r3, [r4, #24]
 800786e:	2b01      	cmp	r3, #1
 8007870:	f67f af6a 	bls.w	8007748 <HAL_ETH_Init+0x20>
 8007874:	e7ed      	b.n	8007852 <HAL_ETH_Init+0x12a>
    heth->Lock = HAL_UNLOCKED;
 8007876:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800787a:	4620      	mov	r0, r4
 800787c:	f007 ff5e 	bl	800f73c <HAL_ETH_MspInit>
 8007880:	e771      	b.n	8007766 <HAL_ETH_Init+0x3e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8007882:	21e1      	movs	r1, #225	; 0xe1
 8007884:	484e      	ldr	r0, [pc, #312]	; (80079c0 <HAL_ETH_Init+0x298>)
 8007886:	f7fb fa89 	bl	8002d9c <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800788a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800788e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007892:	2b00      	cmp	r3, #0
 8007894:	f47f af67 	bne.w	8007766 <HAL_ETH_Init+0x3e>
 8007898:	e7ed      	b.n	8007876 <HAL_ETH_Init+0x14e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800789a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 800789c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800789e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80078a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80078a6:	4628      	mov	r0, r5
 80078a8:	b003      	add	sp, #12
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80078ac:	2501      	movs	r5, #1
}
 80078ae:	4628      	mov	r0, r5
 80078b0:	b003      	add	sp, #12
 80078b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80078b4:	f045 0508 	orr.w	r5, r5, #8
 80078b8:	e790      	b.n	80077dc <HAL_ETH_Init+0xb4>
      heth->State = HAL_ETH_STATE_READY;
 80078ba:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80078bc:	4620      	mov	r0, r4
 80078be:	2101      	movs	r1, #1
 80078c0:	f7ff fc88 	bl	80071d4 <ETH_MACDMAConfig>
}
 80078c4:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 80078c6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 80078ca:	b003      	add	sp, #12
 80078cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80078ce:	4b3d      	ldr	r3, [pc, #244]	; (80079c4 <HAL_ETH_Init+0x29c>)
 80078d0:	4a3d      	ldr	r2, [pc, #244]	; (80079c8 <HAL_ETH_Init+0x2a0>)
 80078d2:	4403      	add	r3, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d981      	bls.n	80077dc <HAL_ETH_Init+0xb4>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80078d8:	4b3c      	ldr	r3, [pc, #240]	; (80079cc <HAL_ETH_Init+0x2a4>)
 80078da:	4a3d      	ldr	r2, [pc, #244]	; (80079d0 <HAL_ETH_Init+0x2a8>)
 80078dc:	4403      	add	r3, r0
 80078de:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80078e0:	bf94      	ite	ls
 80078e2:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80078e6:	f045 0510 	orrhi.w	r5, r5, #16
 80078ea:	e777      	b.n	80077dc <HAL_ETH_Init+0xb4>
    tickstart = HAL_GetTick();
 80078ec:	f7fd fd52 	bl	8005394 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80078f0:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80078f4:	4607      	mov	r7, r0
 80078f6:	e002      	b.n	80078fe <HAL_ETH_Init+0x1d6>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80078f8:	9b00      	ldr	r3, [sp, #0]
 80078fa:	0759      	lsls	r1, r3, #29
 80078fc:	d422      	bmi.n	8007944 <HAL_ETH_Init+0x21c>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80078fe:	466a      	mov	r2, sp
 8007900:	2101      	movs	r1, #1
 8007902:	4620      	mov	r0, r4
 8007904:	f7ff fe80 	bl	8007608 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007908:	f7fd fd44 	bl	8005394 <HAL_GetTick>
 800790c:	1bc0      	subs	r0, r0, r7
 800790e:	42b0      	cmp	r0, r6
 8007910:	d9f2      	bls.n	80078f8 <HAL_ETH_Init+0x1d0>
        ETH_MACDMAConfig(heth, err);
 8007912:	2101      	movs	r1, #1
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff fc5d 	bl	80071d4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800791a:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800791c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800791e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8007920:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8007924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8007928:	e7bd      	b.n	80078a6 <HAL_ETH_Init+0x17e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800792a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800792e:	4824      	ldr	r0, [pc, #144]	; (80079c0 <HAL_ETH_Init+0x298>)
 8007930:	f7fb fa34 	bl	8002d9c <assert_failed>
 8007934:	68e3      	ldr	r3, [r4, #12]
 8007936:	e76c      	b.n	8007812 <HAL_ETH_Init+0xea>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007938:	f240 11c5 	movw	r1, #453	; 0x1c5
 800793c:	4820      	ldr	r0, [pc, #128]	; (80079c0 <HAL_ETH_Init+0x298>)
 800793e:	f7fb fa2d 	bl	8002d9c <assert_failed>
 8007942:	e761      	b.n	8007808 <HAL_ETH_Init+0xe0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007948:	2100      	movs	r1, #0
 800794a:	4620      	mov	r0, r4
 800794c:	f7ff fea4 	bl	8007698 <HAL_ETH_WritePHYRegister>
 8007950:	2800      	cmp	r0, #0
 8007952:	d1b2      	bne.n	80078ba <HAL_ETH_Init+0x192>
    tickstart = HAL_GetTick();
 8007954:	f7fd fd1e 	bl	8005394 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007958:	f241 3688 	movw	r6, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800795c:	4607      	mov	r7, r0
 800795e:	e002      	b.n	8007966 <HAL_ETH_Init+0x23e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	069a      	lsls	r2, r3, #26
 8007964:	d40a      	bmi.n	800797c <HAL_ETH_Init+0x254>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007966:	466a      	mov	r2, sp
 8007968:	2101      	movs	r1, #1
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff fe4c 	bl	8007608 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007970:	f7fd fd10 	bl	8005394 <HAL_GetTick>
 8007974:	1bc0      	subs	r0, r0, r7
 8007976:	42b0      	cmp	r0, r6
 8007978:	d9f2      	bls.n	8007960 <HAL_ETH_Init+0x238>
 800797a:	e7ca      	b.n	8007912 <HAL_ETH_Init+0x1ea>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800797c:	466a      	mov	r2, sp
 800797e:	211f      	movs	r1, #31
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff fe41 	bl	8007608 <HAL_ETH_ReadPHYRegister>
 8007986:	2800      	cmp	r0, #0
 8007988:	d197      	bne.n	80078ba <HAL_ETH_Init+0x192>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800798a:	9b00      	ldr	r3, [sp, #0]
 800798c:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8007990:	bf18      	it	ne
 8007992:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007996:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007998:	bf4c      	ite	mi
 800799a:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 800799c:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80079a0:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	e744      	b.n	8007830 <HAL_ETH_Init+0x108>
 80079a6:	bf00      	nop
 80079a8:	40023800 	.word	0x40023800
 80079ac:	40013800 	.word	0x40013800
 80079b0:	feced300 	.word	0xfeced300
 80079b4:	00e4e1bf 	.word	0x00e4e1bf
 80079b8:	fde9f140 	.word	0xfde9f140
 80079bc:	017d783f 	.word	0x017d783f
 80079c0:	080261d0 	.word	0x080261d0
 80079c4:	fc6c7900 	.word	0xfc6c7900
 80079c8:	026259ff 	.word	0x026259ff
 80079cc:	fa0a1f00 	.word	0xfa0a1f00
 80079d0:	02faf07f 	.word	0x02faf07f

080079d4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 80079d4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d039      	beq.n	8007a50 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80079dc:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80079de:	2202      	movs	r2, #2
{  
 80079e0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0;
 80079e2:	2500      	movs	r5, #0
{  
 80079e4:	b082      	sub	sp, #8
  heth->State = HAL_ETH_STATE_BUSY;
 80079e6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80079ea:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80079ec:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 80079ee:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80079f0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 80079f2:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80079f6:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80079f8:	f042 0208 	orr.w	r2, r2, #8
 80079fc:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a02:	f7fd fccd 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007a06:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a08:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8007a0e:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	f042 0204 	orr.w	r2, r2, #4
 8007a16:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a1c:	f7fd fcc0 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007a20:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007a22:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007a24:	9a00      	ldr	r2, [sp, #0]
 8007a26:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007a28:	f7ff fbbe 	bl	80071a8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8007a32:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007a34:	58d1      	ldr	r1, [r2, r3]
 8007a36:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8007a3a:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007a3c:	58d1      	ldr	r1, [r2, r3]
 8007a3e:	f041 0102 	orr.w	r1, r1, #2
 8007a42:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8007a44:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007a48:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007a50:	2002      	movs	r0, #2
}
 8007a52:	4770      	bx	lr

08007a54 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8007a54:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d039      	beq.n	8007ad0 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007a5c:	6803      	ldr	r3, [r0, #0]
 8007a5e:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8007a62:	2102      	movs	r1, #2
{  
 8007a64:	b570      	push	{r4, r5, r6, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 8007a66:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8007a6a:	2601      	movs	r6, #1
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007a6c:	5899      	ldr	r1, [r3, r2]
{  
 8007a6e:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8007a70:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8007a74:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007a76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007a7a:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a7c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007a7e:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007a80:	5899      	ldr	r1, [r3, r2]
 8007a82:	f021 0102 	bic.w	r1, r1, #2
 8007a86:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8007a88:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	f022 0204 	bic.w	r2, r2, #4
 8007a90:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a96:	f7fd fc83 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007a9a:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8007a9c:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8007a9e:	9a01      	ldr	r2, [sp, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8007aa2:	f7ff fb81 	bl	80071a8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007aa6:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8007aa8:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007aaa:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	f022 0208 	bic.w	r2, r2, #8
 8007ab2:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ab8:	f7fd fc72 	bl	80053a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8007abc:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8007abe:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8007ac4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007ac8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8007acc:	b002      	add	sp, #8
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8007ad0:	2002      	movs	r0, #2
}
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_ETH_ConfigMAC>:
{
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8007ad6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	f000 8242 	beq.w	8007f64 <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007ae0:	6883      	ldr	r3, [r0, #8]
 8007ae2:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 8007ae4:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 8007ae6:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007ae8:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007aec:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8007aee:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 8007af2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007af6:	f040 8207 	bne.w	8007f08 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8007afa:	68eb      	ldr	r3, [r5, #12]
 8007afc:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007b00:	f040 8114 	bne.w	8007d2c <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	f000 8119 	beq.w	8007d3c <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007b10:	f040 8139 	bne.w	8007d86 <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007b14:	6863      	ldr	r3, [r4, #4]
 8007b16:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007b1a:	f040 816b 	bne.w	8007df4 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007b24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b28:	d002      	beq.n	8007b30 <HAL_ETH_ConfigMAC+0x5c>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 821c 	bne.w	8007f68 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8007b30:	68e3      	ldr	r3, [r4, #12]
 8007b32:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007b36:	f040 8152 	bne.w	8007dde <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007b40:	f040 8142 	bne.w	8007dc8 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007b44:	6963      	ldr	r3, [r4, #20]
 8007b46:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007b4a:	f040 8132 	bne.w	8007db2 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8007b4e:	69a3      	ldr	r3, [r4, #24]
 8007b50:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007b54:	f040 8122 	bne.w	8007d9c <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8007b58:	69e3      	ldr	r3, [r4, #28]
 8007b5a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007b5e:	f040 81a3 	bne.w	8007ea8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007b62:	6a23      	ldr	r3, [r4, #32]
 8007b64:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007b68:	f040 818e 	bne.w	8007e88 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8007b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6e:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8007b72:	f040 8193 	bne.w	8007e9c <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8007b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b78:	f033 0310 	bics.w	r3, r3, #16
 8007b7c:	f040 8179 	bne.w	8007e72 <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8007b80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b82:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007b86:	f040 819a 	bne.w	8007ebe <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b8c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8007b90:	d003      	beq.n	8007b9a <HAL_ETH_ConfigMAC+0xc6>
 8007b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b96:	f040 81d3 	bne.w	8007f40 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ba0:	2a40      	cmp	r2, #64	; 0x40
 8007ba2:	d002      	beq.n	8007baa <HAL_ETH_ConfigMAC+0xd6>
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	f040 81b5 	bne.w	8007f14 <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8007baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bac:	f033 0320 	bics.w	r3, r3, #32
 8007bb0:	f040 80de 	bne.w	8007d70 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8007bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bb6:	f033 0308 	bics.w	r3, r3, #8
 8007bba:	f040 80cf 	bne.w	8007d5c <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	f200 80a5 	bhi.w	8007d10 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007bc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bc8:	f240 4204 	movw	r2, #1028	; 0x404
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	bf18      	it	ne
 8007bd0:	2b10      	cmpne	r3, #16
 8007bd2:	d003      	beq.n	8007bdc <HAL_ETH_ConfigMAC+0x108>
 8007bd4:	f033 0304 	bics.w	r3, r3, #4
 8007bd8:	f040 81be 	bne.w	8007f58 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8007bdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007bde:	f033 0202 	bics.w	r2, r3, #2
 8007be2:	d004      	beq.n	8007bee <HAL_ETH_ConfigMAC+0x11a>
 8007be4:	f240 4202 	movw	r2, #1026	; 0x402
 8007be8:	4293      	cmp	r3, r2
 8007bea:	f040 819e 	bne.w	8007f2a <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007bee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf4:	f080 816e 	bcs.w	8007ed4 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8007bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bfa:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007bfe:	f040 8173 	bne.w	8007ee8 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007c02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007c04:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007c08:	f040 8178 	bne.w	8007efc <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8007c0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007c0e:	f033 0308 	bics.w	r3, r3, #8
 8007c12:	f040 8123 	bne.w	8007e5c <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c18:	f033 0304 	bics.w	r3, r3, #4
 8007c1c:	f040 8113 	bne.w	8007e46 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007c20:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007c22:	f033 0302 	bics.w	r3, r3, #2
 8007c26:	f040 8103 	bne.w	8007e30 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8007c2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007c2c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007c30:	f040 80f3 	bne.w	8007e1a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007c34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3a:	f080 80e8 	bcs.w	8007e0e <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 8007c3e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c40:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 8007c42:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007c46:	430b      	orrs	r3, r1
 8007c48:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	6962      	ldr	r2, [r4, #20]
 8007c50:	4333      	orrs	r3, r6
 8007c52:	69a6      	ldr	r6, [r4, #24]
 8007c54:	430b      	orrs	r3, r1
 8007c56:	69e1      	ldr	r1, [r4, #28]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	6a22      	ldr	r2, [r4, #32]
 8007c5c:	4333      	orrs	r3, r6
 8007c5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c64:	4313      	orrs	r3, r2
 8007c66:	68aa      	ldr	r2, [r5, #8]
 8007c68:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 8007c6a:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 8007c6c:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 8007c6e:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 8007c70:	68e9      	ldr	r1, [r5, #12]
 8007c72:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007c74:	4abf      	ldr	r2, [pc, #764]	; (8007f74 <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 8007c76:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8007c78:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8007c7a:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8007c7e:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007c80:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 8007c82:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c84:	f7fd fb8c 	bl	80053a0 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007c88:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c8a:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 8007c8e:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007c90:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8007c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 8007c94:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 8007c96:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8007c98:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8007c9c:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8007c9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 8007ca0:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 8007ca2:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 8007ca4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8007ca6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 8007ca8:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 8007caa:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007cac:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 8007cae:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cb0:	f7fd fb76 	bl	80053a0 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 8007cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8007cb8:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007cbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 8007cc4:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007cca:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 8007ccc:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007cce:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8007cd0:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cd2:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8007cd4:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8007cd6:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8007cd8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8007cdc:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8007cde:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8007ce0:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 8007ce2:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ce4:	f7fd fb5c 	bl	80053a0 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007ce8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cea:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007cec:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 8007cee:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007cf0:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 8007cf2:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8007cf4:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8007cf6:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8007cf8:	f7fd fb52 	bl	80053a0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8007d00:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 8007d02:	2201      	movs	r2, #1
  return HAL_OK;  
 8007d04:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8007d06:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8007d0a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007d10:	f240 6123 	movw	r1, #1571	; 0x623
 8007d14:	4898      	ldr	r0, [pc, #608]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007d16:	f7fb f841 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d1c:	f240 4204 	movw	r2, #1028	; 0x404
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bf18      	it	ne
 8007d24:	2b10      	cmpne	r3, #16
 8007d26:	f47f af55 	bne.w	8007bd4 <HAL_ETH_ConfigMAC+0x100>
 8007d2a:	e757      	b.n	8007bdc <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8007d2c:	f240 610e 	movw	r1, #1550	; 0x60e
 8007d30:	4891      	ldr	r0, [pc, #580]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007d32:	f7fb f833 	bl	8002d9c <assert_failed>
  if (macconf != NULL)
 8007d36:	2c00      	cmp	r4, #0
 8007d38:	f47f aee7 	bne.w	8007b0a <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 8007d3c:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d3e:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007d40:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 8007d42:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007d44:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 8007d46:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8007d4a:	4323      	orrs	r3, r4
 8007d4c:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8007d4e:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8007d50:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d52:	f7fd fb25 	bl	80053a0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	601c      	str	r4, [r3, #0]
 8007d5a:	e7d1      	b.n	8007d00 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8007d5c:	f240 6122 	movw	r1, #1570	; 0x622
 8007d60:	4885      	ldr	r0, [pc, #532]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007d62:	f7fb f81b 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8007d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	f67f af2c 	bls.w	8007bc6 <HAL_ETH_ConfigMAC+0xf2>
 8007d6e:	e7cf      	b.n	8007d10 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8007d70:	f240 6121 	movw	r1, #1569	; 0x621
 8007d74:	4880      	ldr	r0, [pc, #512]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007d76:	f7fb f811 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8007d7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d7c:	f033 0308 	bics.w	r3, r3, #8
 8007d80:	f43f af1d 	beq.w	8007bbe <HAL_ETH_ConfigMAC+0xea>
 8007d84:	e7ea      	b.n	8007d5c <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8007d86:	f240 6113 	movw	r1, #1555	; 0x613
 8007d8a:	487b      	ldr	r0, [pc, #492]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007d8c:	f7fb f806 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007d90:	6863      	ldr	r3, [r4, #4]
 8007d92:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007d96:	f43f aec2 	beq.w	8007b1e <HAL_ETH_ConfigMAC+0x4a>
 8007d9a:	e02b      	b.n	8007df4 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8007d9c:	f240 6119 	movw	r1, #1561	; 0x619
 8007da0:	4875      	ldr	r0, [pc, #468]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007da2:	f7fa fffb 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8007da6:	69e3      	ldr	r3, [r4, #28]
 8007da8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007dac:	f43f aed9 	beq.w	8007b62 <HAL_ETH_ConfigMAC+0x8e>
 8007db0:	e07a      	b.n	8007ea8 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007db2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8007db6:	4870      	ldr	r0, [pc, #448]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007db8:	f7fa fff0 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8007dbc:	69a3      	ldr	r3, [r4, #24]
 8007dbe:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007dc2:	f43f aec9 	beq.w	8007b58 <HAL_ETH_ConfigMAC+0x84>
 8007dc6:	e7e9      	b.n	8007d9c <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007dc8:	f240 6117 	movw	r1, #1559	; 0x617
 8007dcc:	486a      	ldr	r0, [pc, #424]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007dce:	f7fa ffe5 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8007dd2:	6963      	ldr	r3, [r4, #20]
 8007dd4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007dd8:	f43f aeb9 	beq.w	8007b4e <HAL_ETH_ConfigMAC+0x7a>
 8007ddc:	e7e9      	b.n	8007db2 <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8007dde:	f240 6116 	movw	r1, #1558	; 0x616
 8007de2:	4865      	ldr	r0, [pc, #404]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007de4:	f7fa ffda 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8007de8:	6923      	ldr	r3, [r4, #16]
 8007dea:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007dee:	f43f aea9 	beq.w	8007b44 <HAL_ETH_ConfigMAC+0x70>
 8007df2:	e7e9      	b.n	8007dc8 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8007df4:	f240 6114 	movw	r1, #1556	; 0x614
 8007df8:	485f      	ldr	r0, [pc, #380]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007dfa:	f7fa ffcf 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8007dfe:	68a3      	ldr	r3, [r4, #8]
 8007e00:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8007e04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e08:	f47f ae8f 	bne.w	8007b2a <HAL_ETH_ConfigMAC+0x56>
 8007e0c:	e690      	b.n	8007b30 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007e0e:	f240 612d 	movw	r1, #1581	; 0x62d
 8007e12:	4859      	ldr	r0, [pc, #356]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e14:	f7fa ffc2 	bl	8002d9c <assert_failed>
 8007e18:	e711      	b.n	8007c3e <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8007e1a:	f240 612c 	movw	r1, #1580	; 0x62c
 8007e1e:	4856      	ldr	r0, [pc, #344]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e20:	f7fa ffbc 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8007e24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2a:	f4ff af08 	bcc.w	8007c3e <HAL_ETH_ConfigMAC+0x16a>
 8007e2e:	e7ee      	b.n	8007e0e <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007e30:	f240 612b 	movw	r1, #1579	; 0x62b
 8007e34:	4850      	ldr	r0, [pc, #320]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e36:	f7fa ffb1 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8007e3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007e3c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8007e40:	f43f aef8 	beq.w	8007c34 <HAL_ETH_ConfigMAC+0x160>
 8007e44:	e7e9      	b.n	8007e1a <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007e46:	f240 612a 	movw	r1, #1578	; 0x62a
 8007e4a:	484b      	ldr	r0, [pc, #300]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e4c:	f7fa ffa6 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8007e50:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007e52:	f033 0302 	bics.w	r3, r3, #2
 8007e56:	f43f aee8 	beq.w	8007c2a <HAL_ETH_ConfigMAC+0x156>
 8007e5a:	e7e9      	b.n	8007e30 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8007e5c:	f240 6129 	movw	r1, #1577	; 0x629
 8007e60:	4845      	ldr	r0, [pc, #276]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e62:	f7fa ff9b 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8007e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e68:	f033 0304 	bics.w	r3, r3, #4
 8007e6c:	f43f aed8 	beq.w	8007c20 <HAL_ETH_ConfigMAC+0x14c>
 8007e70:	e7e9      	b.n	8007e46 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8007e72:	f240 611d 	movw	r1, #1565	; 0x61d
 8007e76:	4840      	ldr	r0, [pc, #256]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e78:	f7fa ff90 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8007e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e7e:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007e82:	f43f ae82 	beq.w	8007b8a <HAL_ETH_ConfigMAC+0xb6>
 8007e86:	e01a      	b.n	8007ebe <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007e88:	f240 611b 	movw	r1, #1563	; 0x61b
 8007e8c:	483a      	ldr	r0, [pc, #232]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007e8e:	f7fa ff85 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8007e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e94:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8007e98:	f43f ae6d 	beq.w	8007b76 <HAL_ETH_ConfigMAC+0xa2>
 8007e9c:	f240 611c 	movw	r1, #1564	; 0x61c
 8007ea0:	4835      	ldr	r0, [pc, #212]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007ea2:	f7fa ff7b 	bl	8002d9c <assert_failed>
 8007ea6:	e666      	b.n	8007b76 <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8007ea8:	f240 611a 	movw	r1, #1562	; 0x61a
 8007eac:	4832      	ldr	r0, [pc, #200]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007eae:	f7fa ff75 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8007eb2:	6a23      	ldr	r3, [r4, #32]
 8007eb4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007eb8:	f43f ae58 	beq.w	8007b6c <HAL_ETH_ConfigMAC+0x98>
 8007ebc:	e7e4      	b.n	8007e88 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8007ebe:	f240 611e 	movw	r1, #1566	; 0x61e
 8007ec2:	482d      	ldr	r0, [pc, #180]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007ec4:	f7fa ff6a 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007eca:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8007ece:	f47f ae60 	bne.w	8007b92 <HAL_ETH_ConfigMAC+0xbe>
 8007ed2:	e662      	b.n	8007b9a <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007ed4:	f240 6126 	movw	r1, #1574	; 0x626
 8007ed8:	4827      	ldr	r0, [pc, #156]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007eda:	f7fa ff5f 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8007ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ee0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007ee4:	f43f ae8d 	beq.w	8007c02 <HAL_ETH_ConfigMAC+0x12e>
 8007ee8:	f240 6127 	movw	r1, #1575	; 0x627
 8007eec:	4822      	ldr	r0, [pc, #136]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007eee:	f7fa ff55 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8007ef2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007ef4:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007ef8:	f43f ae88 	beq.w	8007c0c <HAL_ETH_ConfigMAC+0x138>
 8007efc:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8007f00:	481d      	ldr	r0, [pc, #116]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f02:	f7fa ff4b 	bl	8002d9c <assert_failed>
 8007f06:	e681      	b.n	8007c0c <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8007f08:	f240 610d 	movw	r1, #1549	; 0x60d
 8007f0c:	481a      	ldr	r0, [pc, #104]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f0e:	f7fa ff45 	bl	8002d9c <assert_failed>
 8007f12:	e5f2      	b.n	8007afa <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007f14:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8007f18:	4817      	ldr	r0, [pc, #92]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f1a:	f7fa ff3f 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8007f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f20:	f033 0320 	bics.w	r3, r3, #32
 8007f24:	f43f ae46 	beq.w	8007bb4 <HAL_ETH_ConfigMAC+0xe0>
 8007f28:	e722      	b.n	8007d70 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8007f2a:	f240 6125 	movw	r1, #1573	; 0x625
 8007f2e:	4812      	ldr	r0, [pc, #72]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f30:	f7fa ff34 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8007f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3a:	f4ff ae5d 	bcc.w	8007bf8 <HAL_ETH_ConfigMAC+0x124>
 8007f3e:	e7c9      	b.n	8007ed4 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8007f40:	f240 611f 	movw	r1, #1567	; 0x61f
 8007f44:	480c      	ldr	r0, [pc, #48]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f46:	f7fa ff29 	bl	8002d9c <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8007f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f50:	2a40      	cmp	r2, #64	; 0x40
 8007f52:	f47f ae27 	bne.w	8007ba4 <HAL_ETH_ConfigMAC+0xd0>
 8007f56:	e628      	b.n	8007baa <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8007f58:	f240 6124 	movw	r1, #1572	; 0x624
 8007f5c:	4806      	ldr	r0, [pc, #24]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f5e:	f7fa ff1d 	bl	8002d9c <assert_failed>
 8007f62:	e63b      	b.n	8007bdc <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 8007f64:	2002      	movs	r0, #2
}
 8007f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8007f68:	f240 6115 	movw	r1, #1557	; 0x615
 8007f6c:	4802      	ldr	r0, [pc, #8]	; (8007f78 <HAL_ETH_ConfigMAC+0x4a4>)
 8007f6e:	f7fa ff15 	bl	8002d9c <assert_failed>
 8007f72:	e5dd      	b.n	8007b30 <HAL_ETH_ConfigMAC+0x5c>
 8007f74:	ff20810f 	.word	0xff20810f
 8007f78:	080261d0 	.word	0x080261d0

08007f7c <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007f7c:	4bbf      	ldr	r3, [pc, #764]	; (800827c <HAL_GPIO_Init+0x300>)
 8007f7e:	4ac0      	ldr	r2, [pc, #768]	; (8008280 <HAL_GPIO_Init+0x304>)
 8007f80:	4290      	cmp	r0, r2
 8007f82:	bf18      	it	ne
 8007f84:	4298      	cmpne	r0, r3
{
 8007f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007f8a:	bf18      	it	ne
 8007f8c:	2301      	movne	r3, #1
{
 8007f8e:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007f90:	bf08      	it	eq
 8007f92:	2300      	moveq	r3, #0
{
 8007f94:	4681      	mov	r9, r0
 8007f96:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	d026      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007f9c:	4bb9      	ldr	r3, [pc, #740]	; (8008284 <HAL_GPIO_Init+0x308>)
 8007f9e:	4298      	cmp	r0, r3
 8007fa0:	d023      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fa6:	4298      	cmp	r0, r3
 8007fa8:	d01f      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fae:	4298      	cmp	r0, r3
 8007fb0:	d01b      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	d017      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	d013      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	d00f      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fca:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd2:	4290      	cmp	r0, r2
 8007fd4:	bf18      	it	ne
 8007fd6:	4298      	cmpne	r0, r3
 8007fd8:	d007      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fde:	4298      	cmp	r0, r3
 8007fe0:	d003      	beq.n	8007fea <HAL_GPIO_Init+0x6e>
 8007fe2:	21b1      	movs	r1, #177	; 0xb1
 8007fe4:	48a8      	ldr	r0, [pc, #672]	; (8008288 <HAL_GPIO_Init+0x30c>)
 8007fe6:	f7fa fed9 	bl	8002d9c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8007fea:	f8bb 3000 	ldrh.w	r3, [fp]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8116 	beq.w	8008220 <HAL_GPIO_Init+0x2a4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007ff4:	f8db 2004 	ldr.w	r2, [fp, #4]
 8007ff8:	4ba4      	ldr	r3, [pc, #656]	; (800828c <HAL_GPIO_Init+0x310>)
 8007ffa:	4ca5      	ldr	r4, [pc, #660]	; (8008290 <HAL_GPIO_Init+0x314>)
 8007ffc:	f1a2 0011 	sub.w	r0, r2, #17
 8008000:	429a      	cmp	r2, r3
 8008002:	bf18      	it	ne
 8008004:	2a03      	cmpne	r2, #3
 8008006:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800800a:	bf8c      	ite	hi
 800800c:	2301      	movhi	r3, #1
 800800e:	2300      	movls	r3, #0
 8008010:	42a2      	cmp	r2, r4
 8008012:	bf0c      	ite	eq
 8008014:	2300      	moveq	r3, #0
 8008016:	f003 0301 	andne.w	r3, r3, #1
 800801a:	4a9e      	ldr	r2, [pc, #632]	; (8008294 <HAL_GPIO_Init+0x318>)
 800801c:	2801      	cmp	r0, #1
 800801e:	bf94      	ite	ls
 8008020:	2300      	movls	r3, #0
 8008022:	f003 0301 	andhi.w	r3, r3, #1
 8008026:	4291      	cmp	r1, r2
 8008028:	bf0c      	ite	eq
 800802a:	2300      	moveq	r3, #0
 800802c:	f003 0301 	andne.w	r3, r3, #1
 8008030:	b11b      	cbz	r3, 800803a <HAL_GPIO_Init+0xbe>
 8008032:	4b99      	ldr	r3, [pc, #612]	; (8008298 <HAL_GPIO_Init+0x31c>)
 8008034:	4299      	cmp	r1, r3
 8008036:	f040 8116 	bne.w	8008266 <HAL_GPIO_Init+0x2ea>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800803a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800803e:	2b02      	cmp	r3, #2
 8008040:	f200 80f3 	bhi.w	800822a <HAL_GPIO_Init+0x2ae>
{
 8008044:	f04f 0800 	mov.w	r8, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008048:	f8df a274 	ldr.w	sl, [pc, #628]	; 80082c0 <HAL_GPIO_Init+0x344>
 800804c:	e005      	b.n	800805a <HAL_GPIO_Init+0xde>
  for(position = 0; position < GPIO_NUMBER; position++)
 800804e:	f108 0801 	add.w	r8, r8, #1
 8008052:	f1b8 0f10 	cmp.w	r8, #16
 8008056:	f000 80c2 	beq.w	80081de <HAL_GPIO_Init+0x262>
    ioposition = ((uint32_t)0x01) << position;
 800805a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800805c:	f8db 5000 	ldr.w	r5, [fp]
    ioposition = ((uint32_t)0x01) << position;
 8008060:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008064:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8008066:	42ac      	cmp	r4, r5
 8008068:	d1f1      	bne.n	800804e <HAL_GPIO_Init+0xd2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800806a:	f8db 1004 	ldr.w	r1, [fp, #4]
 800806e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8008072:	2203      	movs	r2, #3
 8008074:	f021 0010 	bic.w	r0, r1, #16
 8008078:	40ba      	lsls	r2, r7
 800807a:	1e43      	subs	r3, r0, #1
 800807c:	43d6      	mvns	r6, r2
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800807e:	2b01      	cmp	r3, #1
 8008080:	d819      	bhi.n	80080b6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008082:	f8db 300c 	ldr.w	r3, [fp, #12]
 8008086:	2b03      	cmp	r3, #3
 8008088:	f200 80ac 	bhi.w	80081e4 <HAL_GPIO_Init+0x268>
        temp = GPIOx->OSPEEDR; 
 800808c:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008090:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008094:	f3c1 1300 	ubfx	r3, r1, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008098:	ea02 0e06 	and.w	lr, r2, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800809c:	fa03 f308 	lsl.w	r3, r3, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 80080a0:	ea4c 020e 	orr.w	r2, ip, lr
        GPIOx->OSPEEDR = temp;
 80080a4:	f8c9 2008 	str.w	r2, [r9, #8]
        temp = GPIOx->OTYPER;
 80080a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80080ac:	ea22 0404 	bic.w	r4, r2, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80080b0:	431c      	orrs	r4, r3
        GPIOx->OTYPER = temp;
 80080b2:	f8c9 4004 	str.w	r4, [r9, #4]
      temp = GPIOx->PUPDR;
 80080b6:	f8d9 400c 	ldr.w	r4, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080ba:	2802      	cmp	r0, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80080bc:	f8db 3008 	ldr.w	r3, [fp, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80080c0:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80080c4:	fa03 f307 	lsl.w	r3, r3, r7
 80080c8:	ea43 0304 	orr.w	r3, r3, r4
      GPIOx->PUPDR = temp;
 80080cc:	f8c9 300c 	str.w	r3, [r9, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080d0:	d117      	bne.n	8008102 <HAL_GPIO_Init+0x186>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80080d2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80080d6:	2b0f      	cmp	r3, #15
 80080d8:	f200 8094 	bhi.w	8008204 <HAL_GPIO_Init+0x288>
        temp = GPIOx->AFR[position >> 3];
 80080dc:	ea4f 00d8 	mov.w	r0, r8, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80080e0:	f008 0e07 	and.w	lr, r8, #7
 80080e4:	f04f 0c0f 	mov.w	ip, #15
 80080e8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80080ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80080f0:	6a04      	ldr	r4, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80080f2:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80080f6:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80080fa:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80080fe:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3] = temp;
 8008100:	6203      	str	r3, [r0, #32]
      temp = GPIOx->MODER;
 8008102:	f8d9 2000 	ldr.w	r2, [r9]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008106:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800810a:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800810c:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800810e:	00cf      	lsls	r7, r1, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008110:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->MODER = temp;
 8008114:	f8c9 3000 	str.w	r3, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008118:	d599      	bpl.n	800804e <HAL_GPIO_Init+0xd2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800811a:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 800811e:	f028 0703 	bic.w	r7, r8, #3
 8008122:	4c5e      	ldr	r4, [pc, #376]	; (800829c <HAL_GPIO_Init+0x320>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008124:	f008 0303 	and.w	r3, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008128:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800812c:	220f      	movs	r2, #15
 800812e:	443c      	add	r4, r7
 8008130:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008132:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8008136:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800813a:	409a      	lsls	r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800813c:	4f50      	ldr	r7, [pc, #320]	; (8008280 <HAL_GPIO_Init+0x304>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800813e:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008142:	45b9      	cmp	r9, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008144:	9003      	str	r0, [sp, #12]
 8008146:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8008148:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800814a:	ea20 0202 	bic.w	r2, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800814e:	d01f      	beq.n	8008190 <HAL_GPIO_Init+0x214>
 8008150:	9801      	ldr	r0, [sp, #4]
 8008152:	2800      	cmp	r0, #0
 8008154:	d051      	beq.n	80081fa <HAL_GPIO_Init+0x27e>
 8008156:	484b      	ldr	r0, [pc, #300]	; (8008284 <HAL_GPIO_Init+0x308>)
 8008158:	4581      	cmp	r9, r0
 800815a:	d05c      	beq.n	8008216 <HAL_GPIO_Init+0x29a>
 800815c:	4850      	ldr	r0, [pc, #320]	; (80082a0 <HAL_GPIO_Init+0x324>)
 800815e:	4581      	cmp	r9, r0
 8008160:	d068      	beq.n	8008234 <HAL_GPIO_Init+0x2b8>
 8008162:	4850      	ldr	r0, [pc, #320]	; (80082a4 <HAL_GPIO_Init+0x328>)
 8008164:	4581      	cmp	r9, r0
 8008166:	d06a      	beq.n	800823e <HAL_GPIO_Init+0x2c2>
 8008168:	484f      	ldr	r0, [pc, #316]	; (80082a8 <HAL_GPIO_Init+0x32c>)
 800816a:	4581      	cmp	r9, r0
 800816c:	d071      	beq.n	8008252 <HAL_GPIO_Init+0x2d6>
 800816e:	484f      	ldr	r0, [pc, #316]	; (80082ac <HAL_GPIO_Init+0x330>)
 8008170:	4581      	cmp	r9, r0
 8008172:	d073      	beq.n	800825c <HAL_GPIO_Init+0x2e0>
 8008174:	484e      	ldr	r0, [pc, #312]	; (80082b0 <HAL_GPIO_Init+0x334>)
 8008176:	4581      	cmp	r9, r0
 8008178:	d066      	beq.n	8008248 <HAL_GPIO_Init+0x2cc>
 800817a:	484e      	ldr	r0, [pc, #312]	; (80082b4 <HAL_GPIO_Init+0x338>)
 800817c:	4581      	cmp	r9, r0
 800817e:	d077      	beq.n	8008270 <HAL_GPIO_Init+0x2f4>
 8008180:	484d      	ldr	r0, [pc, #308]	; (80082b8 <HAL_GPIO_Init+0x33c>)
 8008182:	4581      	cmp	r9, r0
 8008184:	bf0c      	ite	eq
 8008186:	2009      	moveq	r0, #9
 8008188:	200a      	movne	r0, #10
 800818a:	fa00 f303 	lsl.w	r3, r0, r3
 800818e:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008190:	4b4a      	ldr	r3, [pc, #296]	; (80082bc <HAL_GPIO_Init+0x340>)
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008192:	03ce      	lsls	r6, r1, #15
        SYSCFG->EXTICR[position >> 2] = temp;
 8008194:	60a2      	str	r2, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8008196:	ea6f 0205 	mvn.w	r2, r5
        temp = EXTI->IMR;
 800819a:	681b      	ldr	r3, [r3, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800819c:	f108 0801 	add.w	r8, r8, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80081a0:	4846      	ldr	r0, [pc, #280]	; (80082bc <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 80081a2:	bf4c      	ite	mi
 80081a4:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 80081a6:	4013      	andpl	r3, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081a8:	038c      	lsls	r4, r1, #14
        EXTI->IMR = temp;
 80081aa:	6003      	str	r3, [r0, #0]
        temp = EXTI->EMR;
 80081ac:	6843      	ldr	r3, [r0, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80081ae:	4843      	ldr	r0, [pc, #268]	; (80082bc <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 80081b0:	bf4c      	ite	mi
 80081b2:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 80081b4:	4013      	andpl	r3, r2
        EXTI->EMR = temp;
 80081b6:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081b8:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081ba:	02c8      	lsls	r0, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80081bc:	483f      	ldr	r0, [pc, #252]	; (80082bc <HAL_GPIO_Init+0x340>)
          temp |= iocurrent;
 80081be:	bf4c      	ite	mi
 80081c0:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 80081c2:	4013      	andpl	r3, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081c4:	0289      	lsls	r1, r1, #10
        EXTI->RTSR = temp;
 80081c6:	6083      	str	r3, [r0, #8]
        temp = EXTI->FTSR;
 80081c8:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
 80081ca:	bf54      	ite	pl
 80081cc:	ea02 0503 	andpl.w	r5, r2, r3
        {
          temp |= iocurrent;
 80081d0:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR = temp;
 80081d2:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <HAL_GPIO_Init+0x340>)
  for(position = 0; position < GPIO_NUMBER; position++)
 80081d4:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 80081d8:	60dd      	str	r5, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80081da:	f47f af3e 	bne.w	800805a <HAL_GPIO_Init+0xde>
      }
    }
  }
}
 80081de:	b005      	add	sp, #20
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80081e4:	21c6      	movs	r1, #198	; 0xc6
 80081e6:	4828      	ldr	r0, [pc, #160]	; (8008288 <HAL_GPIO_Init+0x30c>)
 80081e8:	f7fa fdd8 	bl	8002d9c <assert_failed>
 80081ec:	f8db 1004 	ldr.w	r1, [fp, #4]
 80081f0:	f8db 300c 	ldr.w	r3, [fp, #12]
 80081f4:	f021 0010 	bic.w	r0, r1, #16
 80081f8:	e748      	b.n	800808c <HAL_GPIO_Init+0x110>
 80081fa:	2001      	movs	r0, #1
 80081fc:	fa00 f303 	lsl.w	r3, r0, r3
 8008200:	431a      	orrs	r2, r3
 8008202:	e7c5      	b.n	8008190 <HAL_GPIO_Init+0x214>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8008204:	21de      	movs	r1, #222	; 0xde
 8008206:	4820      	ldr	r0, [pc, #128]	; (8008288 <HAL_GPIO_Init+0x30c>)
 8008208:	f7fa fdc8 	bl	8002d9c <assert_failed>
 800820c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008210:	f8db 1004 	ldr.w	r1, [fp, #4]
 8008214:	e762      	b.n	80080dc <HAL_GPIO_Init+0x160>
 8008216:	2002      	movs	r0, #2
 8008218:	fa00 f303 	lsl.w	r3, r0, r3
 800821c:	431a      	orrs	r2, r3
 800821e:	e7b7      	b.n	8008190 <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8008220:	21b2      	movs	r1, #178	; 0xb2
 8008222:	4819      	ldr	r0, [pc, #100]	; (8008288 <HAL_GPIO_Init+0x30c>)
 8008224:	f7fa fdba 	bl	8002d9c <assert_failed>
 8008228:	e6e4      	b.n	8007ff4 <HAL_GPIO_Init+0x78>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800822a:	21b4      	movs	r1, #180	; 0xb4
 800822c:	4816      	ldr	r0, [pc, #88]	; (8008288 <HAL_GPIO_Init+0x30c>)
 800822e:	f7fa fdb5 	bl	8002d9c <assert_failed>
 8008232:	e707      	b.n	8008044 <HAL_GPIO_Init+0xc8>
 8008234:	2003      	movs	r0, #3
 8008236:	fa00 f303 	lsl.w	r3, r0, r3
 800823a:	431a      	orrs	r2, r3
 800823c:	e7a8      	b.n	8008190 <HAL_GPIO_Init+0x214>
 800823e:	2004      	movs	r0, #4
 8008240:	fa00 f303 	lsl.w	r3, r0, r3
 8008244:	431a      	orrs	r2, r3
 8008246:	e7a3      	b.n	8008190 <HAL_GPIO_Init+0x214>
 8008248:	2007      	movs	r0, #7
 800824a:	fa00 f303 	lsl.w	r3, r0, r3
 800824e:	431a      	orrs	r2, r3
 8008250:	e79e      	b.n	8008190 <HAL_GPIO_Init+0x214>
 8008252:	2005      	movs	r0, #5
 8008254:	fa00 f303 	lsl.w	r3, r0, r3
 8008258:	431a      	orrs	r2, r3
 800825a:	e799      	b.n	8008190 <HAL_GPIO_Init+0x214>
 800825c:	2006      	movs	r0, #6
 800825e:	fa00 f303 	lsl.w	r3, r0, r3
 8008262:	431a      	orrs	r2, r3
 8008264:	e794      	b.n	8008190 <HAL_GPIO_Init+0x214>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8008266:	21b3      	movs	r1, #179	; 0xb3
 8008268:	4807      	ldr	r0, [pc, #28]	; (8008288 <HAL_GPIO_Init+0x30c>)
 800826a:	f7fa fd97 	bl	8002d9c <assert_failed>
 800826e:	e6e4      	b.n	800803a <HAL_GPIO_Init+0xbe>
 8008270:	2008      	movs	r0, #8
 8008272:	fa00 f303 	lsl.w	r3, r0, r3
 8008276:	431a      	orrs	r2, r3
 8008278:	e78a      	b.n	8008190 <HAL_GPIO_Init+0x214>
 800827a:	bf00      	nop
 800827c:	40020400 	.word	0x40020400
 8008280:	40020000 	.word	0x40020000
 8008284:	40020800 	.word	0x40020800
 8008288:	08026208 	.word	0x08026208
 800828c:	10210000 	.word	0x10210000
 8008290:	10220000 	.word	0x10220000
 8008294:	10110000 	.word	0x10110000
 8008298:	10120000 	.word	0x10120000
 800829c:	40013800 	.word	0x40013800
 80082a0:	40020c00 	.word	0x40020c00
 80082a4:	40021000 	.word	0x40021000
 80082a8:	40021400 	.word	0x40021400
 80082ac:	40021800 	.word	0x40021800
 80082b0:	40021c00 	.word	0x40021c00
 80082b4:	40022000 	.word	0x40022000
 80082b8:	40022400 	.word	0x40022400
 80082bc:	40013c00 	.word	0x40013c00
 80082c0:	40023800 	.word	0x40023800

080082c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80082c8:	460c      	mov	r4, r1
 80082ca:	b129      	cbz	r1, 80082d8 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80082cc:	692b      	ldr	r3, [r5, #16]
 80082ce:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80082d0:	bf14      	ite	ne
 80082d2:	2001      	movne	r0, #1
 80082d4:	2000      	moveq	r0, #0
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80082d8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <HAL_GPIO_ReadPin+0x20>)
 80082de:	f7fa fd5d 	bl	8002d9c <assert_failed>
 80082e2:	e7f3      	b.n	80082cc <HAL_GPIO_ReadPin+0x8>
 80082e4:	08026208 	.word	0x08026208

080082e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4606      	mov	r6, r0
 80082ec:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80082ee:	460c      	mov	r4, r1
 80082f0:	b161      	cbz	r1, 800830c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80082f2:	2d01      	cmp	r5, #1
 80082f4:	d803      	bhi.n	80082fe <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 80082f6:	b905      	cbnz	r5, 80082fa <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80082f8:	0424      	lsls	r4, r4, #16
 80082fa:	61b4      	str	r4, [r6, #24]
  }
}
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80082fe:	f240 119b 	movw	r1, #411	; 0x19b
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <HAL_GPIO_WritePin+0x30>)
 8008304:	f7fa fd4a 	bl	8002d9c <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008308:	61b4      	str	r4, [r6, #24]
}
 800830a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800830c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <HAL_GPIO_WritePin+0x30>)
 8008312:	f7fa fd43 	bl	8002d9c <assert_failed>
 8008316:	e7ec      	b.n	80082f2 <HAL_GPIO_WritePin+0xa>
 8008318:	08026208 	.word	0x08026208

0800831c <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008320:	460c      	mov	r4, r1
 8008322:	b129      	cbz	r1, 8008330 <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008324:	6943      	ldr	r3, [r0, #20]
 8008326:	420b      	tst	r3, r1
 8008328:	d008      	beq.n	800833c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800832a:	040c      	lsls	r4, r1, #16
 800832c:	6184      	str	r4, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800832e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008330:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8008334:	4802      	ldr	r0, [pc, #8]	; (8008340 <HAL_GPIO_TogglePin+0x24>)
 8008336:	f7fa fd31 	bl	8002d9c <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800833a:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800833c:	61ac      	str	r4, [r5, #24]
}
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	08026208 	.word	0x08026208

08008344 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008348:	4a04      	ldr	r2, [pc, #16]	; (800835c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800834a:	6951      	ldr	r1, [r2, #20]
 800834c:	4201      	tst	r1, r0
 800834e:	d100      	bne.n	8008352 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008350:	4770      	bx	lr
{
 8008352:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008354:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008356:	f7ff fff5 	bl	8008344 <HAL_GPIO_EXTI_Callback>
}
 800835a:	bd08      	pop	{r3, pc}
 800835c:	40013c00 	.word	0x40013c00

08008360 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8008360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008364:	4680      	mov	r8, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008366:	4d25      	ldr	r5, [pc, #148]	; (80083fc <I2C_TransferConfig+0x9c>)
 8008368:	4825      	ldr	r0, [pc, #148]	; (8008400 <I2C_TransferConfig+0xa0>)
{
 800836a:	460e      	mov	r6, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800836c:	f8d8 1000 	ldr.w	r1, [r8]
{
 8008370:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008372:	4a24      	ldr	r2, [pc, #144]	; (8008404 <I2C_TransferConfig+0xa4>)
{
 8008374:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008376:	4281      	cmp	r1, r0
 8008378:	bf18      	it	ne
 800837a:	42a9      	cmpne	r1, r5
{
 800837c:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800837e:	bf14      	ite	ne
 8008380:	2001      	movne	r0, #1
 8008382:	2000      	moveq	r0, #0
 8008384:	4291      	cmp	r1, r2
 8008386:	bf0c      	ite	eq
 8008388:	2000      	moveq	r0, #0
 800838a:	f000 0001 	andne.w	r0, r0, #1
 800838e:	b110      	cbz	r0, 8008396 <I2C_TransferConfig+0x36>
 8008390:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <I2C_TransferConfig+0xa8>)
 8008392:	4299      	cmp	r1, r3
 8008394:	d126      	bne.n	80083e4 <I2C_TransferConfig+0x84>
  assert_param(IS_TRANSFER_MODE(Mode));
 8008396:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800839a:	d002      	beq.n	80083a2 <I2C_TransferConfig+0x42>
 800839c:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80083a0:	d126      	bne.n	80083f0 <I2C_TransferConfig+0x90>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80083a2:	4b1a      	ldr	r3, [pc, #104]	; (800840c <I2C_TransferConfig+0xac>)
 80083a4:	429d      	cmp	r5, r3
 80083a6:	d00a      	beq.n	80083be <I2C_TransferConfig+0x5e>
 80083a8:	f425 6380 	bic.w	r3, r5, #1024	; 0x400
 80083ac:	4a18      	ldr	r2, [pc, #96]	; (8008410 <I2C_TransferConfig+0xb0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d005      	beq.n	80083be <I2C_TransferConfig+0x5e>
 80083b2:	b125      	cbz	r5, 80083be <I2C_TransferConfig+0x5e>
 80083b4:	f641 01c2 	movw	r1, #6338	; 0x18c2
 80083b8:	4816      	ldr	r0, [pc, #88]	; (8008414 <I2C_TransferConfig+0xb4>)
 80083ba:	f7fa fcef 	bl	8002d9c <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80083be:	f8d8 1000 	ldr.w	r1, [r8]
 80083c2:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083c6:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <I2C_TransferConfig+0xb8>)
 80083cc:	431c      	orrs	r4, r3
 80083ce:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
 80083d2:	684d      	ldr	r5, [r1, #4]
 80083d4:	ea44 0307 	orr.w	r3, r4, r7
 80083d8:	ea25 0502 	bic.w	r5, r5, r2
 80083dc:	432b      	orrs	r3, r5
 80083de:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80083e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80083e4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80083e8:	480a      	ldr	r0, [pc, #40]	; (8008414 <I2C_TransferConfig+0xb4>)
 80083ea:	f7fa fcd7 	bl	8002d9c <assert_failed>
 80083ee:	e7d2      	b.n	8008396 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_MODE(Mode));
 80083f0:	f641 01c1 	movw	r1, #6337	; 0x18c1
 80083f4:	4807      	ldr	r0, [pc, #28]	; (8008414 <I2C_TransferConfig+0xb4>)
 80083f6:	f7fa fcd1 	bl	8002d9c <assert_failed>
 80083fa:	e7d2      	b.n	80083a2 <I2C_TransferConfig+0x42>
 80083fc:	40005800 	.word	0x40005800
 8008400:	40005400 	.word	0x40005400
 8008404:	40005c00 	.word	0x40005c00
 8008408:	40006000 	.word	0x40006000
 800840c:	80004000 	.word	0x80004000
 8008410:	80002000 	.word	0x80002000
 8008414:	08026244 	.word	0x08026244
 8008418:	03ff63ff 	.word	0x03ff63ff

0800841c <I2C_IsAcknowledgeFailed.part.1>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4605      	mov	r5, r0
 8008420:	460c      	mov	r4, r1
 8008422:	4616      	mov	r6, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008424:	6828      	ldr	r0, [r5, #0]
 8008426:	e001      	b.n	800842c <I2C_IsAcknowledgeFailed.part.1+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8008428:	1c63      	adds	r3, r4, #1
 800842a:	d120      	bne.n	800846e <I2C_IsAcknowledgeFailed.part.1+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	0699      	lsls	r1, r3, #26
 8008430:	d5fa      	bpl.n	8008428 <I2C_IsAcknowledgeFailed.part.1+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008432:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008434:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008436:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008438:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800843a:	6983      	ldr	r3, [r0, #24]
 800843c:	079a      	lsls	r2, r3, #30
 800843e:	d501      	bpl.n	8008444 <I2C_IsAcknowledgeFailed.part.1+0x28>
    hi2c->Instance->TXDR = 0x00U;
 8008440:	2300      	movs	r3, #0
 8008442:	6283      	str	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008444:	6983      	ldr	r3, [r0, #24]
 8008446:	07db      	lsls	r3, r3, #31
 8008448:	d524      	bpl.n	8008494 <I2C_IsAcknowledgeFailed.part.1+0x78>
    I2C_RESET_CR2(hi2c);
 800844a:	6843      	ldr	r3, [r0, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800844c:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 800844e:	4c14      	ldr	r4, [pc, #80]	; (80084a0 <I2C_IsAcknowledgeFailed.part.1+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 8008450:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8008452:	4023      	ands	r3, r4
 8008454:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008456:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8008458:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800845c:	f043 0304 	orr.w	r3, r3, #4
 8008460:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008462:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008466:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800846a:	2001      	movs	r0, #1
 800846c:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800846e:	f7fc ff91 	bl	8005394 <HAL_GetTick>
 8008472:	1b80      	subs	r0, r0, r6
 8008474:	4284      	cmp	r4, r0
 8008476:	d301      	bcc.n	800847c <I2C_IsAcknowledgeFailed.part.1+0x60>
 8008478:	2c00      	cmp	r4, #0
 800847a:	d1d3      	bne.n	8008424 <I2C_IsAcknowledgeFailed.part.1+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800847c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800847e:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008480:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008482:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8008484:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008488:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800848a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800848e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8008492:	e7ea      	b.n	800846a <I2C_IsAcknowledgeFailed.part.1+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008494:	6983      	ldr	r3, [r0, #24]
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	6183      	str	r3, [r0, #24]
 800849c:	e7d5      	b.n	800844a <I2C_IsAcknowledgeFailed.part.1+0x2e>
 800849e:	bf00      	nop
 80084a0:	fe00e800 	.word	0xfe00e800

080084a4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4605      	mov	r5, r0
 80084a8:	460c      	mov	r4, r1
 80084aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084ac:	e001      	b.n	80084b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80084ae:	1c61      	adds	r1, r4, #1
 80084b0:	d111      	bne.n	80084d6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	0792      	lsls	r2, r2, #30
 80084b8:	d40b      	bmi.n	80084d2 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	06d8      	lsls	r0, r3, #27
 80084be:	d5f6      	bpl.n	80084ae <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 80084c0:	4632      	mov	r2, r6
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff ffa9 	bl	800841c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0ef      	beq.n	80084ae <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 80084ce:	2001      	movs	r0, #1
}
 80084d0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80084d2:	2000      	movs	r0, #0
}
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d6:	f7fc ff5d 	bl	8005394 <HAL_GetTick>
 80084da:	1b80      	subs	r0, r0, r6
 80084dc:	42a0      	cmp	r0, r4
 80084de:	d801      	bhi.n	80084e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80084e0:	2c00      	cmp	r4, #0
 80084e2:	d1e6      	bne.n	80084b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084e6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e8:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80084ea:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084ec:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80084ee:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084f2:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084f4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	bf00      	nop

08008500 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	4605      	mov	r5, r0
 8008504:	460c      	mov	r4, r1
 8008506:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008508:	e00b      	b.n	8008522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	06db      	lsls	r3, r3, #27
 800850e:	d502      	bpl.n	8008516 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8008510:	f7ff ff84 	bl	800841c <I2C_IsAcknowledgeFailed.part.1>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008514:	b9d8      	cbnz	r0, 800854e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008516:	f7fc ff3d 	bl	8005394 <HAL_GetTick>
 800851a:	1b80      	subs	r0, r0, r6
 800851c:	42a0      	cmp	r0, r4
 800851e:	d809      	bhi.n	8008534 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8008520:	b144      	cbz	r4, 8008534 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	4632      	mov	r2, r6
 8008526:	4621      	mov	r1, r4
 8008528:	4628      	mov	r0, r5
 800852a:	699f      	ldr	r7, [r3, #24]
 800852c:	06bf      	lsls	r7, r7, #26
 800852e:	d5ec      	bpl.n	800850a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8008530:	2000      	movs	r0, #0
}
 8008532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008534:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008536:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008538:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800853a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800853c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800853e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008542:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008544:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008548:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800854c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800854e:	2001      	movs	r0, #1
}
 8008550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008552:	bf00      	nop

08008554 <I2C_WaitOnFlagUntilTimeout>:
{
 8008554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	4680      	mov	r8, r0
 800855a:	460f      	mov	r7, r1
 800855c:	4616      	mov	r6, r2
 800855e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008560:	f8d8 4000 	ldr.w	r4, [r8]
 8008564:	e001      	b.n	800856a <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8008566:	1c6b      	adds	r3, r5, #1
 8008568:	d10a      	bne.n	8008580 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800856a:	69a0      	ldr	r0, [r4, #24]
 800856c:	ea37 0300 	bics.w	r3, r7, r0
 8008570:	bf0c      	ite	eq
 8008572:	2001      	moveq	r0, #1
 8008574:	2000      	movne	r0, #0
 8008576:	42b0      	cmp	r0, r6
 8008578:	d0f5      	beq.n	8008566 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800857a:	2000      	movs	r0, #0
}
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008580:	f7fc ff08 	bl	8005394 <HAL_GetTick>
 8008584:	9b06      	ldr	r3, [sp, #24]
 8008586:	1ac0      	subs	r0, r0, r3
 8008588:	42a8      	cmp	r0, r5
 800858a:	d801      	bhi.n	8008590 <I2C_WaitOnFlagUntilTimeout+0x3c>
 800858c:	2d00      	cmp	r5, #0
 800858e:	d1e7      	bne.n	8008560 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008590:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008594:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008596:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8008598:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800859a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800859c:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085a0:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085a4:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a8:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
 80085ac:	e7e6      	b.n	800857c <I2C_WaitOnFlagUntilTimeout+0x28>
 80085ae:	bf00      	nop

080085b0 <I2C_RequestMemoryRead>:
{
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	461d      	mov	r5, r3
 80085b4:	b082      	sub	sp, #8
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085b6:	4b17      	ldr	r3, [pc, #92]	; (8008614 <I2C_RequestMemoryRead+0x64>)
{
 80085b8:	4604      	mov	r4, r0
 80085ba:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085bc:	b2ea      	uxtb	r2, r5
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	f7ff fecd 	bl	8008360 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c6:	4620      	mov	r0, r4
 80085c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80085cc:	f7ff ff6a 	bl	80084a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80085d0:	b9c8      	cbnz	r0, 8008606 <I2C_RequestMemoryRead+0x56>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085d2:	2d01      	cmp	r5, #1
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	d10e      	bne.n	80085f6 <I2C_RequestMemoryRead+0x46>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085d8:	b2f6      	uxtb	r6, r6
 80085da:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	4620      	mov	r0, r4
 80085e0:	2200      	movs	r2, #0
 80085e2:	2140      	movs	r1, #64	; 0x40
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	f7ff ffb4 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80085ec:	3000      	adds	r0, #0
 80085ee:	bf18      	it	ne
 80085f0:	2001      	movne	r0, #1
}
 80085f2:	b002      	add	sp, #8
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085f6:	0a30      	lsrs	r0, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085fc:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085fe:	4620      	mov	r0, r4
 8008600:	f7ff ff50 	bl	80084a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008604:	b110      	cbz	r0, 800860c <I2C_RequestMemoryRead+0x5c>
    return HAL_ERROR;
 8008606:	2001      	movs	r0, #1
}
 8008608:	b002      	add	sp, #8
 800860a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800860c:	b2f6      	uxtb	r6, r6
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	629e      	str	r6, [r3, #40]	; 0x28
 8008612:	e7e3      	b.n	80085dc <I2C_RequestMemoryRead+0x2c>
 8008614:	80002000 	.word	0x80002000

08008618 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008618:	2800      	cmp	r0, #0
 800861a:	f000 80c8 	beq.w	80087ae <HAL_I2C_Init+0x196>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800861e:	6802      	ldr	r2, [r0, #0]
 8008620:	4969      	ldr	r1, [pc, #420]	; (80087c8 <HAL_I2C_Init+0x1b0>)
{
 8008622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008624:	4b69      	ldr	r3, [pc, #420]	; (80087cc <HAL_I2C_Init+0x1b4>)
 8008626:	4604      	mov	r4, r0
 8008628:	4869      	ldr	r0, [pc, #420]	; (80087d0 <HAL_I2C_Init+0x1b8>)
 800862a:	429a      	cmp	r2, r3
 800862c:	bf18      	it	ne
 800862e:	4282      	cmpne	r2, r0
 8008630:	bf14      	ite	ne
 8008632:	2301      	movne	r3, #1
 8008634:	2300      	moveq	r3, #0
 8008636:	428a      	cmp	r2, r1
 8008638:	bf0c      	ite	eq
 800863a:	2300      	moveq	r3, #0
 800863c:	f003 0301 	andne.w	r3, r3, #1
 8008640:	b11b      	cbz	r3, 800864a <HAL_I2C_Init+0x32>
 8008642:	4b64      	ldr	r3, [pc, #400]	; (80087d4 <HAL_I2C_Init+0x1bc>)
 8008644:	429a      	cmp	r2, r3
 8008646:	f040 80b4 	bne.w	80087b2 <HAL_I2C_Init+0x19a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008650:	d268      	bcs.n	8008724 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	3b01      	subs	r3, #1
 8008656:	2b01      	cmp	r3, #1
 8008658:	d856      	bhi.n	8008708 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008660:	f040 809b 	bne.w	800879a <HAL_I2C_Init+0x182>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008664:	6963      	ldr	r3, [r4, #20]
 8008666:	2bff      	cmp	r3, #255	; 0xff
 8008668:	f200 808d 	bhi.w	8008786 <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800866c:	69a3      	ldr	r3, [r4, #24]
 800866e:	2b07      	cmp	r3, #7
 8008670:	d87e      	bhi.n	8008770 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8008672:	69e3      	ldr	r3, [r4, #28]
 8008674:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008678:	d170      	bne.n	800875c <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800867a:	6a23      	ldr	r3, [r4, #32]
 800867c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008680:	d160      	bne.n	8008744 <HAL_I2C_Init+0x12c>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008682:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800868a:	2b00      	cmp	r3, #0
 800868c:	d054      	beq.n	8008738 <HAL_I2C_Init+0x120>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800868e:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008690:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008692:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008696:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800869a:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 800869c:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800869e:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 80086a2:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80086a4:	f020 0001 	bic.w	r0, r0, #1
 80086a8:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086aa:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086ac:	6899      	ldr	r1, [r3, #8]
 80086ae:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80086b2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086b4:	d032      	beq.n	800871c <HAL_I2C_Init+0x104>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086ba:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086bc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086be:	d102      	bne.n	80086c6 <HAL_I2C_Init+0xae>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80086c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086c6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086c8:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086ca:	4843      	ldr	r0, [pc, #268]	; (80087d8 <HAL_I2C_Init+0x1c0>)
  hi2c->State = HAL_I2C_STATE_READY;
 80086cc:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086ce:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086d0:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086d2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086d6:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086d8:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086da:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086dc:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086de:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086e2:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086e8:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086ea:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 80086ec:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80086ee:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086f0:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	f042 0201 	orr.w	r2, r2, #1
 80086f8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086fa:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086fc:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008700:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008702:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008708:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800870c:	4833      	ldr	r0, [pc, #204]	; (80087dc <HAL_I2C_Init+0x1c4>)
 800870e:	f7fa fb45 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8008718:	d0a4      	beq.n	8008664 <HAL_I2C_Init+0x4c>
 800871a:	e03e      	b.n	800879a <HAL_I2C_Init+0x182>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800871c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008720:	609a      	str	r2, [r3, #8]
 8008722:	e7d0      	b.n	80086c6 <HAL_I2C_Init+0xae>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008724:	f240 11df 	movw	r1, #479	; 0x1df
 8008728:	482c      	ldr	r0, [pc, #176]	; (80087dc <HAL_I2C_Init+0x1c4>)
 800872a:	f7fa fb37 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	3b01      	subs	r3, #1
 8008732:	2b01      	cmp	r3, #1
 8008734:	d991      	bls.n	800865a <HAL_I2C_Init+0x42>
 8008736:	e7e7      	b.n	8008708 <HAL_I2C_Init+0xf0>
    hi2c->Lock = HAL_UNLOCKED;
 8008738:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800873c:	4620      	mov	r0, r4
 800873e:	f7fb fa85 	bl	8003c4c <HAL_I2C_MspInit>
 8008742:	e7a4      	b.n	800868e <HAL_I2C_Init+0x76>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008744:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008748:	4824      	ldr	r0, [pc, #144]	; (80087dc <HAL_I2C_Init+0x1c4>)
 800874a:	f7fa fb27 	bl	8002d9c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800874e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008756:	2b00      	cmp	r3, #0
 8008758:	d199      	bne.n	800868e <HAL_I2C_Init+0x76>
 800875a:	e7ed      	b.n	8008738 <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800875c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8008760:	481e      	ldr	r0, [pc, #120]	; (80087dc <HAL_I2C_Init+0x1c4>)
 8008762:	f7fa fb1b 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8008766:	6a23      	ldr	r3, [r4, #32]
 8008768:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800876c:	d089      	beq.n	8008682 <HAL_I2C_Init+0x6a>
 800876e:	e7e9      	b.n	8008744 <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008770:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008774:	4819      	ldr	r0, [pc, #100]	; (80087dc <HAL_I2C_Init+0x1c4>)
 8008776:	f7fa fb11 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800877a:	69e3      	ldr	r3, [r4, #28]
 800877c:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008780:	f43f af7b 	beq.w	800867a <HAL_I2C_Init+0x62>
 8008784:	e7ea      	b.n	800875c <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8008786:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800878a:	4814      	ldr	r0, [pc, #80]	; (80087dc <HAL_I2C_Init+0x1c4>)
 800878c:	f7fa fb06 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8008790:	69a3      	ldr	r3, [r4, #24]
 8008792:	2b07      	cmp	r3, #7
 8008794:	f67f af6d 	bls.w	8008672 <HAL_I2C_Init+0x5a>
 8008798:	e7ea      	b.n	8008770 <HAL_I2C_Init+0x158>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800879a:	f240 11e1 	movw	r1, #481	; 0x1e1
 800879e:	480f      	ldr	r0, [pc, #60]	; (80087dc <HAL_I2C_Init+0x1c4>)
 80087a0:	f7fa fafc 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80087a4:	6963      	ldr	r3, [r4, #20]
 80087a6:	2bff      	cmp	r3, #255	; 0xff
 80087a8:	f67f af60 	bls.w	800866c <HAL_I2C_Init+0x54>
 80087ac:	e7eb      	b.n	8008786 <HAL_I2C_Init+0x16e>
    return HAL_ERROR;
 80087ae:	2001      	movs	r0, #1
}
 80087b0:	4770      	bx	lr
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80087b2:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087b6:	4809      	ldr	r0, [pc, #36]	; (80087dc <HAL_I2C_Init+0x1c4>)
 80087b8:	f7fa faf0 	bl	8002d9c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c2:	f4ff af46 	bcc.w	8008652 <HAL_I2C_Init+0x3a>
 80087c6:	e7ad      	b.n	8008724 <HAL_I2C_Init+0x10c>
 80087c8:	40005c00 	.word	0x40005c00
 80087cc:	40005400 	.word	0x40005400
 80087d0:	40005800 	.word	0x40005800
 80087d4:	40006000 	.word	0x40006000
 80087d8:	02008000 	.word	0x02008000
 80087dc:	08026244 	.word	0x08026244

080087e0 <HAL_I2C_Master_Transmit>:
{
 80087e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80087e4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 80087e8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ea:	2c20      	cmp	r4, #32
 80087ec:	d169      	bne.n	80088c2 <HAL_I2C_Master_Transmit+0xe2>
    __HAL_LOCK(hi2c);
 80087ee:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80087f2:	2c01      	cmp	r4, #1
 80087f4:	d065      	beq.n	80088c2 <HAL_I2C_Master_Transmit+0xe2>
 80087f6:	f04f 0901 	mov.w	r9, #1
 80087fa:	4604      	mov	r4, r0
 80087fc:	4698      	mov	r8, r3
 80087fe:	4615      	mov	r5, r2
 8008800:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
 8008804:	460f      	mov	r7, r1
    tickstart = HAL_GetTick();
 8008806:	f7fc fdc5 	bl	8005394 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800880a:	464a      	mov	r2, r9
    tickstart = HAL_GetTick();
 800880c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800880e:	9000      	str	r0, [sp, #0]
 8008810:	2319      	movs	r3, #25
 8008812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008816:	4620      	mov	r0, r4
 8008818:	f7ff fe9c 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 800881c:	2800      	cmp	r0, #0
 800881e:	d154      	bne.n	80088ca <HAL_I2C_Master_Transmit+0xea>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008820:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008822:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8008824:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008826:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800882a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800882e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008830:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008834:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008836:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008838:	2bff      	cmp	r3, #255	; 0xff
 800883a:	d954      	bls.n	80088e6 <HAL_I2C_Master_Transmit+0x106>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800883c:	4839      	ldr	r0, [pc, #228]	; (8008924 <HAL_I2C_Master_Transmit+0x144>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800883e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008844:	4639      	mov	r1, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008846:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008848:	9000      	str	r0, [sp, #0]
 800884a:	4620      	mov	r0, r4
 800884c:	f7ff fd88 	bl	8008360 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008852:	4632      	mov	r2, r6
 8008854:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008856:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d050      	beq.n	8008900 <HAL_I2C_Master_Transmit+0x120>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800885e:	f7ff fe21 	bl	80084a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008862:	2800      	cmp	r0, #0
 8008864:	d131      	bne.n	80088ca <HAL_I2C_Master_Transmit+0xea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008866:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008868:	6822      	ldr	r2, [r4, #0]
 800886a:	f811 5b01 	ldrb.w	r5, [r1], #1
      hi2c->XferSize--;
 800886e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008870:	6295      	str	r5, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8008872:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008874:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8008876:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008878:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 800887a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800887c:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 800887e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008880:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008882:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8008884:	b289      	uxth	r1, r1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e2      	bne.n	8008850 <HAL_I2C_Master_Transmit+0x70>
 800888a:	2900      	cmp	r1, #0
 800888c:	d0e0      	beq.n	8008850 <HAL_I2C_Master_Transmit+0x70>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800888e:	4602      	mov	r2, r0
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	2180      	movs	r1, #128	; 0x80
 8008894:	9600      	str	r6, [sp, #0]
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff fe5c 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800889c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088a0:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088a6:	4639      	mov	r1, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088a8:	b978      	cbnz	r0, 80088ca <HAL_I2C_Master_Transmit+0xea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088aa:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088ae:	4662      	mov	r2, ip
 80088b0:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088b2:	45e6      	cmp	lr, ip
 80088b4:	d90d      	bls.n	80088d2 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088b6:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088ba:	9500      	str	r5, [sp, #0]
 80088bc:	f7ff fd50 	bl	8008360 <I2C_TransferConfig>
 80088c0:	e7c6      	b.n	8008850 <HAL_I2C_Master_Transmit+0x70>
    return HAL_BUSY;
 80088c2:	2002      	movs	r0, #2
}
 80088c4:	b003      	add	sp, #12
 80088c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80088ca:	2001      	movs	r0, #1
}
 80088cc:	b003      	add	sp, #12
 80088ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 80088d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088d8:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80088da:	b292      	uxth	r2, r2
 80088dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	f7ff fd3e 	bl	8008360 <I2C_TransferConfig>
 80088e4:	e7b4      	b.n	8008850 <HAL_I2C_Master_Transmit+0x70>
      hi2c->XferSize = hi2c->XferCount;
 80088e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80088e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088ec:	4d0d      	ldr	r5, [pc, #52]	; (8008924 <HAL_I2C_Master_Transmit+0x144>)
 80088ee:	4639      	mov	r1, r7
      hi2c->XferSize = hi2c->XferCount;
 80088f0:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80088f2:	4620      	mov	r0, r4
 80088f4:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80088f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	f7ff fd31 	bl	8008360 <I2C_TransferConfig>
 80088fe:	e7a7      	b.n	8008850 <HAL_I2C_Master_Transmit+0x70>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008900:	f7ff fdfe 	bl	8008500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008904:	2800      	cmp	r0, #0
 8008906:	d1e0      	bne.n	80088ca <HAL_I2C_Master_Transmit+0xea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800890c:	4d06      	ldr	r5, [pc, #24]	; (8008928 <HAL_I2C_Master_Transmit+0x148>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800890e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	402a      	ands	r2, r5
 8008914:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008916:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800891a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800891e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008922:	e7cf      	b.n	80088c4 <HAL_I2C_Master_Transmit+0xe4>
 8008924:	80002000 	.word	0x80002000
 8008928:	fe00e800 	.word	0xfe00e800

0800892c <HAL_I2C_Mem_Read>:
{
 800892c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	4698      	mov	r8, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008932:	3b01      	subs	r3, #1
{
 8008934:	b083      	sub	sp, #12
 8008936:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008938:	2b01      	cmp	r3, #1
{
 800893a:	460e      	mov	r6, r1
 800893c:	4692      	mov	sl, r2
 800893e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008942:	d904      	bls.n	800894e <HAL_I2C_Mem_Read+0x22>
 8008944:	f640 1174 	movw	r1, #2420	; 0x974
 8008948:	4862      	ldr	r0, [pc, #392]	; (8008ad4 <HAL_I2C_Mem_Read+0x1a8>)
 800894a:	f7fa fa27 	bl	8002d9c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800894e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008952:	2b20      	cmp	r3, #32
 8008954:	d11c      	bne.n	8008990 <HAL_I2C_Mem_Read+0x64>
    if ((pData == NULL) || (Size == 0U))
 8008956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008958:	b1f3      	cbz	r3, 8008998 <HAL_I2C_Mem_Read+0x6c>
 800895a:	f1b9 0f00 	cmp.w	r9, #0
 800895e:	d01b      	beq.n	8008998 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 8008960:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008964:	2b01      	cmp	r3, #1
 8008966:	d013      	beq.n	8008990 <HAL_I2C_Mem_Read+0x64>
 8008968:	2501      	movs	r5, #1
 800896a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800896e:	f7fc fd11 	bl	8005394 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008972:	462a      	mov	r2, r5
 8008974:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008976:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008978:	2319      	movs	r3, #25
 800897a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff fde8 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 8008984:	4683      	mov	fp, r0
 8008986:	b170      	cbz	r0, 80089a6 <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8008988:	2001      	movs	r0, #1
}
 800898a:	b003      	add	sp, #12
 800898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8008990:	2002      	movs	r0, #2
}
 8008992:	b003      	add	sp, #12
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008998:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800899c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800899e:	6463      	str	r3, [r4, #68]	; 0x44
}
 80089a0:	b003      	add	sp, #12
 80089a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089a6:	2040      	movs	r0, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 80089a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089aa:	990e      	ldr	r1, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089ac:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 80089b0:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089b2:	4652      	mov	r2, sl
    hi2c->XferISR   = NULL;
 80089b4:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089b8:	4643      	mov	r3, r8
 80089ba:	9100      	str	r1, [sp, #0]
 80089bc:	4631      	mov	r1, r6
 80089be:	9701      	str	r7, [sp, #4]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089c0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089c8:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ca:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80089ce:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089d2:	f7ff fded 	bl	80085b0 <I2C_RequestMemoryRead>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d14a      	bne.n	8008a70 <HAL_I2C_Mem_Read+0x144>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089dc:	2bff      	cmp	r3, #255	; 0xff
 80089de:	d955      	bls.n	8008a8c <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089e0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80089e2:	483d      	ldr	r0, [pc, #244]	; (8008ad8 <HAL_I2C_Mem_Read+0x1ac>)
 80089e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089e8:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80089ec:	9000      	str	r0, [sp, #0]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff fcb6 	bl	8008360 <I2C_TransferConfig>
 80089f4:	e003      	b.n	80089fe <HAL_I2C_Mem_Read+0xd2>
    while (hi2c->XferCount > 0U);
 80089f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d053      	beq.n	8008aa6 <HAL_I2C_Mem_Read+0x17a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80089fe:	9700      	str	r7, [sp, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a04:	2104      	movs	r1, #4
 8008a06:	4620      	mov	r0, r4
 8008a08:	f7ff fda4 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d1bb      	bne.n	8008988 <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a16:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008a18:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008a1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008a1c:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8008a1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8008a20:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8008a22:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008a24:	3501      	adds	r5, #1
      hi2c->XferSize--;
 8008a26:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008a28:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a2a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008a2c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a2e:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8008a30:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1df      	bne.n	80089f6 <HAL_I2C_Mem_Read+0xca>
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d0dd      	beq.n	80089f6 <HAL_I2C_Mem_Read+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a3e:	2180      	movs	r1, #128	; 0x80
 8008a40:	9700      	str	r7, [sp, #0]
 8008a42:	4620      	mov	r0, r4
 8008a44:	f7ff fd86 	bl	8008554 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a48:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a4c:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a52:	4631      	mov	r1, r6
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d197      	bne.n	8008988 <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a58:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a5c:	4662      	mov	r2, ip
 8008a5e:	4620      	mov	r0, r4
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a60:	45e6      	cmp	lr, ip
 8008a62:	d909      	bls.n	8008a78 <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a64:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a68:	9500      	str	r5, [sp, #0]
 8008a6a:	f7ff fc79 	bl	8008360 <I2C_TransferConfig>
 8008a6e:	e7c2      	b.n	80089f6 <HAL_I2C_Mem_Read+0xca>
      __HAL_UNLOCK(hi2c);
 8008a70:	f884 b040 	strb.w	fp, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008a74:	4628      	mov	r0, r5
 8008a76:	e78c      	b.n	8008992 <HAL_I2C_Mem_Read+0x66>
          hi2c->XferSize = hi2c->XferCount;
 8008a78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a7e:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008a80:	b292      	uxth	r2, r2
 8008a82:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	f7ff fc6b 	bl	8008360 <I2C_TransferConfig>
 8008a8a:	e7b4      	b.n	80089f6 <HAL_I2C_Mem_Read+0xca>
      hi2c->XferSize = hi2c->XferCount;
 8008a8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a92:	4d11      	ldr	r5, [pc, #68]	; (8008ad8 <HAL_I2C_Mem_Read+0x1ac>)
 8008a94:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 8008a96:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008a98:	4620      	mov	r0, r4
 8008a9a:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8008a9c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008a9e:	b2d2      	uxtb	r2, r2
 8008aa0:	f7ff fc5e 	bl	8008360 <I2C_TransferConfig>
 8008aa4:	e7ab      	b.n	80089fe <HAL_I2C_Mem_Read+0xd2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aa6:	463a      	mov	r2, r7
 8008aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7ff fd28 	bl	8008500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f47f af69 	bne.w	8008988 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8008aba:	4d08      	ldr	r5, [pc, #32]	; (8008adc <HAL_I2C_Mem_Read+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008abc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	402a      	ands	r2, r5
 8008ac2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008ac4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008ac8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008acc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008ad0:	e75f      	b.n	8008992 <HAL_I2C_Mem_Read+0x66>
 8008ad2:	bf00      	nop
 8008ad4:	08026244 	.word	0x08026244
 8008ad8:	80002400 	.word	0x80002400
 8008adc:	fe00e800 	.word	0xfe00e800

08008ae0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8008ae6:	4823      	ldr	r0, [pc, #140]	; (8008b74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8008ae8:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	4922      	ldr	r1, [pc, #136]	; (8008b78 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 8008aee:	429a      	cmp	r2, r3
 8008af0:	bf18      	it	ne
 8008af2:	4282      	cmpne	r2, r0
 8008af4:	bf14      	ite	ne
 8008af6:	2301      	movne	r3, #1
 8008af8:	2300      	moveq	r3, #0
 8008afa:	428a      	cmp	r2, r1
 8008afc:	bf0c      	ite	eq
 8008afe:	2300      	moveq	r3, #0
 8008b00:	f003 0301 	andne.w	r3, r3, #1
 8008b04:	b113      	cbz	r3, 8008b0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8008b06:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d12c      	bne.n	8008b66 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008b0c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8008b10:	d124      	bne.n	8008b5c <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b12:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b20      	cmp	r3, #32
 8008b1a:	d11d      	bne.n	8008b58 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b1c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008b20:	2a01      	cmp	r2, #1
 8008b22:	d019      	beq.n	8008b58 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b24:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b26:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b28:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008b2e:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8008b30:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8008b32:	f021 0101 	bic.w	r1, r1, #1
 8008b36:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b38:	6811      	ldr	r1, [r2, #0]
 8008b3a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008b3e:	6011      	str	r1, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b40:	6811      	ldr	r1, [r2, #0]
 8008b42:	430d      	orrs	r5, r1
 8008b44:	6015      	str	r5, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008b46:	6811      	ldr	r1, [r2, #0]
 8008b48:	f041 0101 	orr.w	r1, r1, #1
 8008b4c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008b52:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8008b58:	2002      	movs	r0, #2
}
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008b5c:	2160      	movs	r1, #96	; 0x60
 8008b5e:	4808      	ldr	r0, [pc, #32]	; (8008b80 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8008b60:	f7fa f91c 	bl	8002d9c <assert_failed>
 8008b64:	e7d5      	b.n	8008b12 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b66:	215f      	movs	r1, #95	; 0x5f
 8008b68:	4805      	ldr	r0, [pc, #20]	; (8008b80 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8008b6a:	f7fa f917 	bl	8002d9c <assert_failed>
 8008b6e:	e7cd      	b.n	8008b0c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8008b70:	40005400 	.word	0x40005400
 8008b74:	40005800 	.word	0x40005800
 8008b78:	40005c00 	.word	0x40005c00
 8008b7c:	40006000 	.word	0x40006000
 8008b80:	0802627c 	.word	0x0802627c

08008b84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b88:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 8008b8a:	4822      	ldr	r0, [pc, #136]	; (8008c14 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 8008b8c:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	4921      	ldr	r1, [pc, #132]	; (8008c18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008b92:	429a      	cmp	r2, r3
 8008b94:	bf18      	it	ne
 8008b96:	4282      	cmpne	r2, r0
 8008b98:	bf14      	ite	ne
 8008b9a:	2301      	movne	r3, #1
 8008b9c:	2300      	moveq	r3, #0
 8008b9e:	428a      	cmp	r2, r1
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2300      	moveq	r3, #0
 8008ba4:	f003 0301 	andne.w	r3, r3, #1
 8008ba8:	b113      	cbz	r3, 8008bb0 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d12a      	bne.n	8008c06 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008bb0:	2d0f      	cmp	r5, #15
 8008bb2:	d823      	bhi.n	8008bfc <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bb4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d11c      	bne.n	8008bf8 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bbe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008bc2:	2a01      	cmp	r2, #1
 8008bc4:	d018      	beq.n	8008bf8 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bc6:	6822      	ldr	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bc8:	2124      	movs	r1, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bca:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bcc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008bd0:	6811      	ldr	r1, [r2, #0]

    return HAL_OK;
 8008bd2:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8008bd4:	f021 0101 	bic.w	r1, r1, #1
 8008bd8:	6011      	str	r1, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8008bda:	6811      	ldr	r1, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8008bdc:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8008be0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8008be4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008be6:	6811      	ldr	r1, [r2, #0]
 8008be8:	f041 0101 	orr.w	r1, r1, #1
 8008bec:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008bf2:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8008bf8:	2002      	movs	r0, #2
}
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008bfc:	218e      	movs	r1, #142	; 0x8e
 8008bfe:	4808      	ldr	r0, [pc, #32]	; (8008c20 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8008c00:	f7fa f8cc 	bl	8002d9c <assert_failed>
 8008c04:	e7d6      	b.n	8008bb4 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008c06:	218d      	movs	r1, #141	; 0x8d
 8008c08:	4805      	ldr	r0, [pc, #20]	; (8008c20 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8008c0a:	f7fa f8c7 	bl	8002d9c <assert_failed>
 8008c0e:	e7cf      	b.n	8008bb0 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8008c10:	40005400 	.word	0x40005400
 8008c14:	40005800 	.word	0x40005800
 8008c18:	40005c00 	.word	0x40005c00
 8008c1c:	40006000 	.word	0x40006000
 8008c20:	0802627c 	.word	0x0802627c

08008c24 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008c24:	6803      	ldr	r3, [r0, #0]
 8008c26:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8008c2a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	4770      	bx	lr

08008c30 <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d03c      	beq.n	8008cae <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008c34:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <HAL_MDIOS_Init+0x8c>)
 8008c36:	6802      	ldr	r2, [r0, #0]
 8008c38:	429a      	cmp	r2, r3
{
 8008c3a:	b570      	push	{r4, r5, r6, lr}
 8008c3c:	4604      	mov	r4, r0
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8008c3e:	d003      	beq.n	8008c48 <HAL_MDIOS_Init+0x18>
 8008c40:	21c7      	movs	r1, #199	; 0xc7
 8008c42:	481f      	ldr	r0, [pc, #124]	; (8008cc0 <HAL_MDIOS_Init+0x90>)
 8008c44:	f7fa f8aa 	bl	8002d9c <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	2b1f      	cmp	r3, #31
 8008c4c:	d826      	bhi.n	8008c9c <HAL_MDIOS_Init+0x6c>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008c54:	d119      	bne.n	8008c8a <HAL_MDIOS_Init+0x5a>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 8008c56:	7b63      	ldrb	r3, [r4, #13]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d01d      	beq.n	8008c98 <HAL_MDIOS_Init+0x68>
 8008c5c:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008c5e:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 8008c60:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8008c62:	b333      	cbz	r3, 8008cb2 <HAL_MDIOS_Init+0x82>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 8008c64:	6825      	ldr	r5, [r4, #0]
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 8008c66:	2601      	movs	r6, #1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008c68:	68a3      	ldr	r3, [r4, #8]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8008c6a:	2202      	movs	r2, #2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008c6c:	6861      	ldr	r1, [r4, #4]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8008c6e:	7322      	strb	r2, [r4, #12]
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008c70:	4333      	orrs	r3, r6
  tmpcr = hmdios->Instance->CR;
 8008c72:	6828      	ldr	r0, [r5, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008c74:	4a13      	ldr	r2, [pc, #76]	; (8008cc4 <HAL_MDIOS_Init+0x94>)
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008c76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 8008c7a:	2100      	movs	r1, #0
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8008c7c:	4002      	ands	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8008c7e:	4608      	mov	r0, r1
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8008c80:	4313      	orrs	r3, r2
  hmdios->Instance->CR = tmpcr;
 8008c82:	602b      	str	r3, [r5, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 8008c84:	7326      	strb	r6, [r4, #12]
  __HAL_UNLOCK(hmdios);
 8008c86:	7361      	strb	r1, [r4, #13]

}
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8008c8a:	21c9      	movs	r1, #201	; 0xc9
 8008c8c:	480c      	ldr	r0, [pc, #48]	; (8008cc0 <HAL_MDIOS_Init+0x90>)
 8008c8e:	f7fa f885 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hmdios);
 8008c92:	7b63      	ldrb	r3, [r4, #13]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d1e1      	bne.n	8008c5c <HAL_MDIOS_Init+0x2c>
 8008c98:	2002      	movs	r0, #2
}
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 8008c9c:	21c8      	movs	r1, #200	; 0xc8
 8008c9e:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <HAL_MDIOS_Init+0x90>)
 8008ca0:	f7fa f87c 	bl	8002d9c <assert_failed>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008caa:	d0d4      	beq.n	8008c56 <HAL_MDIOS_Init+0x26>
 8008cac:	e7ed      	b.n	8008c8a <HAL_MDIOS_Init+0x5a>
    return HAL_ERROR;
 8008cae:	2001      	movs	r0, #1
}
 8008cb0:	4770      	bx	lr
    HAL_MDIOS_MspInit(hmdios);
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7fb f854 	bl	8003d60 <HAL_MDIOS_MspInit>
 8008cb8:	e7d4      	b.n	8008c64 <HAL_MDIOS_Init+0x34>
 8008cba:	bf00      	nop
 8008cbc:	40017800 	.word	0x40017800
 8008cc0:	080262b8 	.word	0x080262b8
 8008cc4:	ffffe07e 	.word	0xffffe07e

08008cc8 <HAL_MDIOS_WriteCpltCallback>:
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <HAL_MDIOS_ReadCpltCallback>:
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop

08008cd0 <HAL_MDIOS_ErrorCallback>:
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop

08008cd4 <HAL_MDIOS_WakeUpCallback>:
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 8008cd8:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 8008cda:	6803      	ldr	r3, [r0, #0]
{
 8008cdc:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	0795      	lsls	r5, r2, #30
 8008ce2:	d501      	bpl.n	8008ce8 <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 8008ce4:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 8008ce6:	bb22      	cbnz	r2, 8008d32 <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	0750      	lsls	r0, r2, #29
 8008cec:	d502      	bpl.n	8008cf4 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 8008cee:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d130      	bne.n	8008d56 <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	0711      	lsls	r1, r2, #28
 8008cf8:	d502      	bpl.n	8008d00 <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	075a      	lsls	r2, r3, #29
 8008cfe:	d10b      	bne.n	8008d18 <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8008d00:	4d1e      	ldr	r5, [pc, #120]	; (8008d7c <HAL_MDIOS_IRQHandler+0xa4>)
 8008d02:	696b      	ldr	r3, [r5, #20]
 8008d04:	01db      	lsls	r3, r3, #7
 8008d06:	d400      	bmi.n	8008d0a <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f7ff ffe2 	bl	8008cd4 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 8008d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d14:	616b      	str	r3, [r5, #20]
}
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 8008d18:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8008d1a:	4d18      	ldr	r5, [pc, #96]	; (8008d7c <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 8008d1c:	f7ff ffd8 	bl	8008cd0 <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 8008d20:	6822      	ldr	r2, [r4, #0]
 8008d22:	6993      	ldr	r3, [r2, #24]
 8008d24:	f043 0307 	orr.w	r3, r3, #7
 8008d28:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 8008d2a:	696b      	ldr	r3, [r5, #20]
 8008d2c:	01db      	lsls	r3, r3, #7
 8008d2e:	d5eb      	bpl.n	8008d08 <HAL_MDIOS_IRQHandler+0x30>
 8008d30:	e7eb      	b.n	8008d0a <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 8008d32:	f7ff ffc9 	bl	8008cc8 <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 8008d36:	f44f 7121 	mov.w	r1, #644	; 0x284
 8008d3a:	4811      	ldr	r0, [pc, #68]	; (8008d80 <HAL_MDIOS_IRQHandler+0xa8>)
 8008d3c:	f7fa f82e 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hmdios);
 8008d40:	7b63      	ldrb	r3, [r4, #13]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	d0cf      	beq.n	8008ce8 <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 8008d48:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008d4c:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 8008d4e:	6898      	ldr	r0, [r3, #8]
 8008d50:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 8008d52:	7362      	strb	r2, [r4, #13]
 8008d54:	e7c8      	b.n	8008ce8 <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff ffb8 	bl	8008ccc <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 8008d5c:	f240 219b 	movw	r1, #667	; 0x29b
 8008d60:	4807      	ldr	r0, [pc, #28]	; (8008d80 <HAL_MDIOS_IRQHandler+0xa8>)
 8008d62:	f7fa f81b 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hmdios);
 8008d66:	7b63      	ldrb	r3, [r4, #13]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	d0c2      	beq.n	8008cf4 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 8008d6e:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 8008d72:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 8008d74:	6918      	ldr	r0, [r3, #16]
 8008d76:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 8008d78:	7362      	strb	r2, [r4, #13]
 8008d7a:	e7bb      	b.n	8008cf4 <HAL_MDIOS_IRQHandler+0x1c>
 8008d7c:	40013c00 	.word	0x40013c00
 8008d80:	080262b8 	.word	0x080262b8

08008d84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d86:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f000 8098 	beq.w	8008ebe <HAL_PCD_Init+0x13a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8008d8e:	6805      	ldr	r5, [r0, #0]
 8008d90:	4604      	mov	r4, r0
 8008d92:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
 8008d96:	d007      	beq.n	8008da8 <HAL_PCD_Init+0x24>
 8008d98:	4b4d      	ldr	r3, [pc, #308]	; (8008ed0 <HAL_PCD_Init+0x14c>)
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	d004      	beq.n	8008da8 <HAL_PCD_Init+0x24>
 8008d9e:	2187      	movs	r1, #135	; 0x87
 8008da0:	484c      	ldr	r0, [pc, #304]	; (8008ed4 <HAL_PCD_Init+0x150>)
 8008da2:	f7f9 fffb 	bl	8002d9c <assert_failed>
 8008da6:	6825      	ldr	r5, [r4, #0]

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008da8:	f894 33bd 	ldrb.w	r3, [r4, #957]	; 0x3bd
 8008dac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008db0:	b343      	cbz	r3, 8008e04 <HAL_PCD_Init+0x80>
 8008db2:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008db4:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008db6:	466f      	mov	r7, sp
 8008db8:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8008dba:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008dbe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dc0:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008dc2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8008dc6:	bf08      	it	eq
 8008dc8:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8008dca:	f005 fee1 	bl	800eb90 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dce:	f855 eb10 	ldr.w	lr, [r5], #16
 8008dd2:	46ac      	mov	ip, r5
 8008dd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008dd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008dda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008dde:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008de0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008de4:	e887 0003 	stmia.w	r7, {r0, r1}
 8008de8:	4670      	mov	r0, lr
 8008dea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008dee:	f005 fe09 	bl	800ea04 <USB_CoreInit>
 8008df2:	4607      	mov	r7, r0
 8008df4:	b168      	cbz	r0, 8008e12 <HAL_PCD_Init+0x8e>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8008df6:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008df8:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008dfa:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008dfc:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8008e00:	b00b      	add	sp, #44	; 0x2c
 8008e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_PCD_MspInit(hpcd);
 8008e04:	4620      	mov	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8008e06:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008e0a:	f016 f913 	bl	801f034 <HAL_PCD_MspInit>
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	e7d0      	b.n	8008db4 <HAL_PCD_Init+0x30>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e12:	4601      	mov	r1, r0
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	f005 fec3 	bl	800eba0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e1a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8008e1e:	f1bc 0f00 	cmp.w	ip, #0
 8008e22:	d02b      	beq.n	8008e7c <HAL_PCD_Init+0xf8>
 8008e24:	4638      	mov	r0, r7
    hpcd->IN_ep[i].is_in = 1U;
 8008e26:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e28:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8008e2a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e2e:	1c41      	adds	r1, r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 8008e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8008e34:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008e38:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e3c:	b2c8      	uxtb	r0, r1
    hpcd->IN_ep[i].is_in = 1U;
 8008e3e:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e42:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e48:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e4a:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4e:	d3ec      	bcc.n	8008e2a <HAL_PCD_Init+0xa6>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e50:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8008e52:	4611      	mov	r1, r2
 8008e54:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e58:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8008e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8008e5e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e62:	b2c2      	uxtb	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8008e64:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e68:	4562      	cmp	r2, ip
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e6a:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e72:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e76:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e7a:	d3eb      	bcc.n	8008e54 <HAL_PCD_Init+0xd0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e7c:	466f      	mov	r7, sp
 8008e7e:	f8d4 c000 	ldr.w	ip, [r4]
 8008e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008e8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e8e:	e887 0003 	stmia.w	r7, {r0, r1}
 8008e92:	4660      	mov	r0, ip
 8008e94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8008e98:	f005 fe9a 	bl	800ebd0 <USB_DevInit>
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d1a9      	bne.n	8008df6 <HAL_PCD_Init+0x72>
  hpcd->State = HAL_PCD_STATE_READY;
 8008ea2:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8008ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8008ea6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8008eaa:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008eac:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8008eb0:	d009      	beq.n	8008ec6 <HAL_PCD_Init+0x142>
  (void)USB_DevDisconnect(hpcd->Instance);
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	f006 fa58 	bl	800f368 <USB_DevDisconnect>
}
 8008eb8:	4628      	mov	r0, r5
 8008eba:	b00b      	add	sp, #44	; 0x2c
 8008ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008ebe:	2501      	movs	r5, #1
}
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	b00b      	add	sp, #44	; 0x2c
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fcd4 	bl	8009874 <HAL_PCDEx_ActivateLPM>
 8008ecc:	e7f1      	b.n	8008eb2 <HAL_PCD_Init+0x12e>
 8008ece:	bf00      	nop
 8008ed0:	40040000 	.word	0x40040000
 8008ed4:	080262f4 	.word	0x080262f4

08008ed8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8008ed8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d00e      	beq.n	8008efe <HAL_PCD_Start+0x26>
 8008ee0:	2301      	movs	r3, #1
{
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8008ee6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008ee8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8008eec:	f006 fa30 	bl	800f350 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	f005 fe45 	bl	800eb80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8008efc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008efe:	2002      	movs	r0, #2
}
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f08:	6806      	ldr	r6, [r0, #0]
{
 8008f0a:	b089      	sub	sp, #36	; 0x24
 8008f0c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f006 fa68 	bl	800f3e4 <USB_GetMode>
 8008f14:	b110      	cbz	r0, 8008f1c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8008f16:	b009      	add	sp, #36	; 0x24
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	f006 fa2e 	bl	800f380 <USB_ReadInterrupts>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d0f6      	beq.n	8008f16 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	f006 fa29 	bl	800f380 <USB_ReadInterrupts>
 8008f2e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f32:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f34:	d003      	beq.n	8008f3e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f36:	6943      	ldr	r3, [r0, #20]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f3e:	f006 fa1f 	bl	800f380 <USB_ReadInterrupts>
 8008f42:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f46:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f48:	d011      	beq.n	8008f6e <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f4a:	6983      	ldr	r3, [r0, #24]
 8008f4c:	f023 0310 	bic.w	r3, r3, #16
 8008f50:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8008f52:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f54:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008f58:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d07d      	beq.n	800905c <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008f60:	2b06      	cmp	r3, #6
 8008f62:	f000 82ae 	beq.w	80094c2 <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f66:	6983      	ldr	r3, [r0, #24]
 8008f68:	f043 0310 	orr.w	r3, r3, #16
 8008f6c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f6e:	f006 fa07 	bl	800f380 <USB_ReadInterrupts>
 8008f72:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f76:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f78:	f040 8169 	bne.w	800924e <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008f7c:	f006 fa00 	bl	800f380 <USB_ReadInterrupts>
 8008f80:	0347      	lsls	r7, r0, #13
 8008f82:	f100 80a8 	bmi.w	80090d6 <HAL_PCD_IRQHandler+0x1d2>
 8008f86:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f006 f9f8 	bl	800f380 <USB_ReadInterrupts>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f2c0 8083 	blt.w	800909c <HAL_PCD_IRQHandler+0x198>
 8008f96:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f98:	f006 f9f2 	bl	800f380 <USB_ReadInterrupts>
 8008f9c:	0500      	lsls	r0, r0, #20
 8008f9e:	d44a      	bmi.n	8009036 <HAL_PCD_IRQHandler+0x132>
 8008fa0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008fa2:	f006 f9ed 	bl	800f380 <USB_ReadInterrupts>
 8008fa6:	0102      	lsls	r2, r0, #4
 8008fa8:	d513      	bpl.n	8008fd2 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008faa:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8008fac:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008fb0:	6953      	ldr	r3, [r2, #20]
 8008fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d146      	bne.n	800904a <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008fbc:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8008fbe:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008fc0:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008fc2:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8008fc6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008fca:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008fce:	f016 f99f 	bl	801f310 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008fd2:	6820      	ldr	r0, [r4, #0]
 8008fd4:	f006 f9d4 	bl	800f380 <USB_ReadInterrupts>
 8008fd8:	04c3      	lsls	r3, r0, #19
 8008fda:	f100 8191 	bmi.w	8009300 <HAL_PCD_IRQHandler+0x3fc>
 8008fde:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008fe0:	f006 f9ce 	bl	800f380 <USB_ReadInterrupts>
 8008fe4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008fe8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008fea:	f040 8172 	bne.w	80092d2 <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008fee:	f006 f9c7 	bl	800f380 <USB_ReadInterrupts>
 8008ff2:	0707      	lsls	r7, r0, #28
 8008ff4:	f100 8164 	bmi.w	80092c0 <HAL_PCD_IRQHandler+0x3bc>
 8008ff8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008ffa:	f006 f9c1 	bl	800f380 <USB_ReadInterrupts>
 8008ffe:	02c6      	lsls	r6, r0, #11
 8009000:	f100 81d9 	bmi.w	80093b6 <HAL_PCD_IRQHandler+0x4b2>
 8009004:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009006:	f006 f9bb 	bl	800f380 <USB_ReadInterrupts>
 800900a:	0285      	lsls	r5, r0, #10
 800900c:	f100 81c9 	bmi.w	80093a2 <HAL_PCD_IRQHandler+0x49e>
 8009010:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009012:	f006 f9b5 	bl	800f380 <USB_ReadInterrupts>
 8009016:	0040      	lsls	r0, r0, #1
 8009018:	d454      	bmi.n	80090c4 <HAL_PCD_IRQHandler+0x1c0>
 800901a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800901c:	f006 f9b0 	bl	800f380 <USB_ReadInterrupts>
 8009020:	0741      	lsls	r1, r0, #29
 8009022:	f57f af78 	bpl.w	8008f16 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800902a:	076a      	lsls	r2, r5, #29
 800902c:	d411      	bmi.n	8009052 <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	432a      	orrs	r2, r5
 8009032:	605a      	str	r2, [r3, #4]
 8009034:	e76f      	b.n	8008f16 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009036:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800903a:	07d9      	lsls	r1, r3, #31
 800903c:	d42a      	bmi.n	8009094 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800903e:	6820      	ldr	r0, [r4, #0]
 8009040:	6943      	ldr	r3, [r0, #20]
 8009042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009046:	6143      	str	r3, [r0, #20]
 8009048:	e7ab      	b.n	8008fa2 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 800904a:	4620      	mov	r0, r4
 800904c:	f016 f876 	bl	801f13c <HAL_PCD_SuspendCallback>
 8009050:	e7bf      	b.n	8008fd2 <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 8009052:	4620      	mov	r0, r4
 8009054:	f016 f89a 	bl	801f18c <HAL_PCD_DisconnectCallback>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	e7e8      	b.n	800902e <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800905c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009060:	421f      	tst	r7, r3
 8009062:	d080      	beq.n	8008f66 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009064:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009068:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800906c:	4630      	mov	r0, r6
 800906e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009072:	463a      	mov	r2, r7
 8009074:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8009078:	f006 f8ea 	bl	800f250 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800907c:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009080:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009084:	443a      	add	r2, r7
 8009086:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009088:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800908a:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800908e:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 8009092:	e768      	b.n	8008f66 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8009094:	4620      	mov	r0, r4
 8009096:	f016 f851 	bl	801f13c <HAL_PCD_SuspendCallback>
 800909a:	e7d0      	b.n	800903e <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 800909c:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090a0:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80090a4:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80090ae:	f000 81dc 	beq.w	800946a <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 80090b2:	4620      	mov	r0, r4
 80090b4:	f016 f85a 	bl	801f16c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	6943      	ldr	r3, [r0, #20]
 80090bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090c0:	6143      	str	r3, [r0, #20]
 80090c2:	e769      	b.n	8008f98 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 80090c4:	4620      	mov	r0, r4
 80090c6:	f016 f85d 	bl	801f184 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80090ca:	6820      	ldr	r0, [r4, #0]
 80090cc:	6943      	ldr	r3, [r0, #20]
 80090ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090d2:	6143      	str	r3, [r0, #20]
 80090d4:	e7a2      	b.n	800901c <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80090d6:	6820      	ldr	r0, [r4, #0]
 80090d8:	f006 f95e 	bl	800f398 <USB_ReadDevAllInEpInterrupt>
 80090dc:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 80090e0:	4681      	mov	r9, r0
 80090e2:	2800      	cmp	r0, #0
 80090e4:	f43f af51 	beq.w	8008f8a <HAL_PCD_IRQHandler+0x86>
 80090e8:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80090ec:	46a0      	mov	r8, r4
      epnum = 0U;
 80090ee:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80090f2:	9505      	str	r5, [sp, #20]
 80090f4:	e9cd 3603 	strd	r3, r6, [sp, #12]
 80090f8:	e007      	b.n	800910a <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 80090fa:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80090fe:	f10a 0a01 	add.w	sl, sl, #1
 8009102:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 8009106:	f000 8160 	beq.w	80093ca <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800910a:	f019 0f01 	tst.w	r9, #1
 800910e:	d0f4      	beq.n	80090fa <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009110:	fa5f f68a 	uxtb.w	r6, sl
 8009114:	4658      	mov	r0, fp
 8009116:	4631      	mov	r1, r6
 8009118:	f006 f950 	bl	800f3bc <USB_ReadDevInEPInterrupt>
 800911c:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800911e:	07e8      	lsls	r0, r5, #31
 8009120:	d518      	bpl.n	8009154 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009122:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009124:	2701      	movs	r7, #1
 8009126:	f00a 010f 	and.w	r1, sl, #15
 800912a:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800912c:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009130:	fa07 f101 	lsl.w	r1, r7, r1
 8009134:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009138:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 800913c:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800913e:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8009142:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009144:	4613      	mov	r3, r2
 8009146:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8009148:	f000 8196 	beq.w	8009478 <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800914c:	4631      	mov	r1, r6
 800914e:	4620      	mov	r0, r4
 8009150:	f015 ffd0 	bl	801f0f4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009154:	0729      	lsls	r1, r5, #28
 8009156:	d504      	bpl.n	8009162 <HAL_PCD_IRQHandler+0x25e>
 8009158:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800915a:	2208      	movs	r2, #8
 800915c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8009160:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009162:	06ea      	lsls	r2, r5, #27
 8009164:	d504      	bpl.n	8009170 <HAL_PCD_IRQHandler+0x26c>
 8009166:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009168:	2210      	movs	r2, #16
 800916a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800916e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009170:	066b      	lsls	r3, r5, #25
 8009172:	d504      	bpl.n	800917e <HAL_PCD_IRQHandler+0x27a>
 8009174:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009176:	2240      	movs	r2, #64	; 0x40
 8009178:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800917c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800917e:	07af      	lsls	r7, r5, #30
 8009180:	d504      	bpl.n	800918c <HAL_PCD_IRQHandler+0x288>
 8009182:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009184:	2202      	movs	r2, #2
 8009186:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800918a:	609a      	str	r2, [r3, #8]
 800918c:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800918e:	062d      	lsls	r5, r5, #24
 8009190:	46bb      	mov	fp, r7
 8009192:	d5b2      	bpl.n	80090fa <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8009194:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 8009198:	4293      	cmp	r3, r2
 800919a:	d8ae      	bhi.n	80090fa <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800919c:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 800919e:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091a2:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80091a6:	4285      	cmp	r5, r0
 80091a8:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091aa:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 80091ae:	bf28      	it	cs
 80091b0:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091b2:	9106      	str	r1, [sp, #24]
 80091b4:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 80091b6:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80091ba:	b289      	uxth	r1, r1
 80091bc:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 80091c0:	d335      	bcc.n	800922e <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80091c2:	b3a2      	cbz	r2, 800922e <HAL_PCD_IRQHandler+0x32a>
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d232      	bcs.n	800922e <HAL_PCD_IRQHandler+0x32a>
 80091c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80091cc:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80091d0:	f8dd a018 	ldr.w	sl, [sp, #24]
 80091d4:	e00b      	b.n	80091ee <HAL_PCD_IRQHandler+0x2ea>
 80091d6:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80091da:	429a      	cmp	r2, r3
 80091dc:	eba2 0503 	sub.w	r5, r2, r3
 80091e0:	f240 8182 	bls.w	80094e8 <HAL_PCD_IRQHandler+0x5e4>
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	f000 817f 	beq.w	80094e8 <HAL_PCD_IRQHandler+0x5e4>
 80091ea:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 80091ee:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80091f0:	4632      	mov	r2, r6
 80091f2:	bf28      	it	cs
 80091f4:	4605      	movcs	r5, r0
 80091f6:	7c20      	ldrb	r0, [r4, #16]
 80091f8:	b2ab      	uxth	r3, r5
 80091fa:	9000      	str	r0, [sp, #0]
 80091fc:	4638      	mov	r0, r7
 80091fe:	f006 f811 	bl	800f224 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009202:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8009206:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800920a:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 800920c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009210:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8009212:	4429      	add	r1, r5
    ep->xfer_count += len;
 8009214:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009216:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800921a:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 800921e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009222:	d2d8      	bcs.n	80091d6 <HAL_PCD_IRQHandler+0x2d2>
 8009224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009228:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 800922c:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 800922e:	4293      	cmp	r3, r2
 8009230:	f0c0 815e 	bcc.w	80094f0 <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009234:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009238:	f00a 020f 	and.w	r2, sl, #15
 800923c:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800923e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009240:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009242:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009246:	ea23 0302 	bic.w	r3, r3, r2
 800924a:	634b      	str	r3, [r1, #52]	; 0x34
 800924c:	e755      	b.n	80090fa <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800924e:	f006 f89b 	bl	800f388 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8009252:	4607      	mov	r7, r0
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	2f00      	cmp	r7, #0
 8009258:	f43f ae90 	beq.w	8008f7c <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 8009264:	e004      	b.n	8009270 <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 8009266:	087f      	lsrs	r7, r7, #1
        epnum++;
 8009268:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800926c:	f43f ae86 	beq.w	8008f7c <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8009270:	07f9      	lsls	r1, r7, #31
 8009272:	d5f8      	bpl.n	8009266 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009274:	fa5f fb88 	uxtb.w	fp, r8
 8009278:	4659      	mov	r1, fp
 800927a:	f006 f895 	bl	800f3a8 <USB_ReadDevOutEPInterrupt>
 800927e:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009280:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009282:	f019 0f01 	tst.w	r9, #1
 8009286:	f040 80a3 	bne.w	80093d0 <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800928a:	f019 0f08 	tst.w	r9, #8
 800928e:	f040 80c4 	bne.w	800941a <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009292:	f019 0f10 	tst.w	r9, #16
 8009296:	d003      	beq.n	80092a0 <HAL_PCD_IRQHandler+0x39c>
 8009298:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800929c:	2210      	movs	r2, #16
 800929e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092a0:	f019 0f20 	tst.w	r9, #32
 80092a4:	d003      	beq.n	80092ae <HAL_PCD_IRQHandler+0x3aa>
 80092a6:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092aa:	2220      	movs	r2, #32
 80092ac:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80092ae:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80092b2:	d0d8      	beq.n	8009266 <HAL_PCD_IRQHandler+0x362>
 80092b4:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80092b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80092bc:	609a      	str	r2, [r3, #8]
 80092be:	e7d2      	b.n	8009266 <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 80092c0:	4620      	mov	r0, r4
 80092c2:	f015 ff21 	bl	801f108 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80092c6:	6820      	ldr	r0, [r4, #0]
 80092c8:	6943      	ldr	r3, [r0, #20]
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	6143      	str	r3, [r0, #20]
 80092d0:	e693      	b.n	8008ffa <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 80092d2:	f006 f88b 	bl	800f3ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80092d6:	6820      	ldr	r0, [r4, #0]
 80092d8:	f005 fd5a 	bl	800ed90 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80092dc:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80092de:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80092e0:	f000 ff1a 	bl	800a118 <HAL_RCC_GetHCLKFreq>
 80092e4:	7b22      	ldrb	r2, [r4, #12]
 80092e6:	4601      	mov	r1, r0
 80092e8:	4628      	mov	r0, r5
 80092ea:	f005 fbc9 	bl	800ea80 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80092ee:	4620      	mov	r0, r4
 80092f0:	f015 ff0e 	bl	801f110 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	6943      	ldr	r3, [r0, #20]
 80092f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092fc:	6143      	str	r3, [r0, #20]
 80092fe:	e676      	b.n	8008fee <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009300:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8009304:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009306:	6820      	ldr	r0, [r4, #0]
 8009308:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009310:	f005 fd2c 	bl	800ed6c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009314:	6860      	ldr	r0, [r4, #4]
 8009316:	b308      	cbz	r0, 800935c <HAL_PCD_IRQHandler+0x458>
 8009318:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800931c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009320:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009322:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009328:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800932a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800932e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009332:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8009336:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800933a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800933e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009342:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009346:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800934a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800934e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009352:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009356:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800935a:	d1e1      	bne.n	8009320 <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800935c:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800935e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009360:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009364:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009366:	2a00      	cmp	r2, #0
 8009368:	d075      	beq.n	8009456 <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800936a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800936e:	f043 030b 	orr.w	r3, r3, #11
 8009372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009378:	f043 030b 	orr.w	r3, r3, #11
 800937c:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800937e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009382:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009386:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009388:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800938c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800938e:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009392:	f006 f841 	bl	800f418 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	6943      	ldr	r3, [r0, #20]
 800939a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800939e:	6143      	str	r3, [r0, #20]
 80093a0:	e61e      	b.n	8008fe0 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80093a2:	4620      	mov	r0, r4
 80093a4:	2100      	movs	r1, #0
 80093a6:	f015 fee5 	bl	801f174 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093aa:	6820      	ldr	r0, [r4, #0]
 80093ac:	6943      	ldr	r3, [r0, #20]
 80093ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093b2:	6143      	str	r3, [r0, #20]
 80093b4:	e62d      	b.n	8009012 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80093b6:	4620      	mov	r0, r4
 80093b8:	2100      	movs	r1, #0
 80093ba:	f015 fedf 	bl	801f17c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80093be:	6820      	ldr	r0, [r4, #0]
 80093c0:	6943      	ldr	r3, [r0, #20]
 80093c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093c6:	6143      	str	r3, [r0, #20]
 80093c8:	e61d      	b.n	8009006 <HAL_PCD_IRQHandler+0x102>
 80093ca:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 80093ce:	e5dc      	b.n	8008f8a <HAL_PCD_IRQHandler+0x86>
 80093d0:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80093d4:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093d6:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80093da:	f04f 0c01 	mov.w	ip, #1
 80093de:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 80093e2:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093e4:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80093e6:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093ea:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093ee:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80093f0:	d05a      	beq.n	80094a8 <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80093f2:	4a5e      	ldr	r2, [pc, #376]	; (800956c <HAL_PCD_IRQHandler+0x668>)
 80093f4:	4594      	cmp	ip, r2
 80093f6:	d07d      	beq.n	80094f4 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80093f8:	f1b8 0f00 	cmp.w	r8, #0
 80093fc:	d107      	bne.n	800940e <HAL_PCD_IRQHandler+0x50a>
 80093fe:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009402:	b923      	cbnz	r3, 800940e <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009404:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009408:	4641      	mov	r1, r8
 800940a:	f006 f805 	bl	800f418 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800940e:	4620      	mov	r0, r4
 8009410:	4659      	mov	r1, fp
 8009412:	f015 fe65 	bl	801f0e0 <HAL_PCD_DataOutStageCallback>
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	e737      	b.n	800928a <HAL_PCD_IRQHandler+0x386>
 800941a:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800941e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009422:	f04f 0c08 	mov.w	ip, #8
 8009426:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800942a:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800942c:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009430:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009432:	484f      	ldr	r0, [pc, #316]	; (8009570 <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009434:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009436:	4282      	cmp	r2, r0
 8009438:	d931      	bls.n	800949e <HAL_PCD_IRQHandler+0x59a>
 800943a:	040a      	lsls	r2, r1, #16
 800943c:	d502      	bpl.n	8009444 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800943e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009442:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009444:	4620      	mov	r0, r4
 8009446:	f015 fe45 	bl	801f0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800944a:	6921      	ldr	r1, [r4, #16]
 800944c:	2901      	cmp	r1, #1
 800944e:	f000 8084 	beq.w	800955a <HAL_PCD_IRQHandler+0x656>
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	e71d      	b.n	8009292 <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	f242 032b 	movw	r3, #8235	; 0x202b
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f043 030b 	orr.w	r3, r3, #11
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	e789      	b.n	800937e <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 800946a:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800946c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800946e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009472:	f015 ff4d 	bl	801f310 <HAL_PCDEx_LPM_Callback>
 8009476:	e61f      	b.n	80090b8 <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009478:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 800947c:	4413      	add	r3, r2
 800947e:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009482:	f1ba 0f00 	cmp.w	sl, #0
 8009486:	f47f ae61 	bne.w	800914c <HAL_PCD_IRQHandler+0x248>
 800948a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800948c:	2b00      	cmp	r3, #0
 800948e:	f47f ae5d 	bne.w	800914c <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009492:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	f005 ffbe 	bl	800f418 <USB_EP0_OutStart>
 800949c:	e656      	b.n	800914c <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 800949e:	4620      	mov	r0, r4
 80094a0:	f015 fe18 	bl	801f0d4 <HAL_PCD_SetupStageCallback>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	e6f4      	b.n	8009292 <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094a8:	070a      	lsls	r2, r1, #28
 80094aa:	d52a      	bpl.n	8009502 <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094ac:	4a30      	ldr	r2, [pc, #192]	; (8009570 <HAL_PCD_IRQHandler+0x66c>)
 80094ae:	4594      	cmp	ip, r2
 80094b0:	f67f aeeb 	bls.w	800928a <HAL_PCD_IRQHandler+0x386>
 80094b4:	0409      	lsls	r1, r1, #16
 80094b6:	f57f aee8 	bpl.w	800928a <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	e6e3      	b.n	800928a <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094c2:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80094c6:	2208      	movs	r2, #8
 80094c8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80094cc:	4630      	mov	r0, r6
 80094ce:	f005 febf 	bl	800f250 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094d2:	f3c7 130a 	ubfx	r3, r7, #4, #11
 80094d6:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 80094da:	6820      	ldr	r0, [r4, #0]
 80094dc:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80094e0:	440b      	add	r3, r1
 80094e2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80094e6:	e53e      	b.n	8008f66 <HAL_PCD_IRQHandler+0x62>
 80094e8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094ec:	6827      	ldr	r7, [r4, #0]
 80094ee:	e69e      	b.n	800922e <HAL_PCD_IRQHandler+0x32a>
 80094f0:	46bb      	mov	fp, r7
 80094f2:	e602      	b.n	80090fa <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094f4:	040a      	lsls	r2, r1, #16
 80094f6:	d4e0      	bmi.n	80094ba <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80094f8:	0689      	lsls	r1, r1, #26
 80094fa:	d588      	bpl.n	800940e <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094fc:	2220      	movs	r2, #32
 80094fe:	609a      	str	r2, [r3, #8]
 8009500:	e785      	b.n	800940e <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009502:	068a      	lsls	r2, r1, #26
 8009504:	d42f      	bmi.n	8009566 <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009506:	f011 0f28 	tst.w	r1, #40	; 0x28
 800950a:	f47f aebe 	bne.w	800928a <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800950e:	4a18      	ldr	r2, [pc, #96]	; (8009570 <HAL_PCD_IRQHandler+0x66c>)
 8009510:	4594      	cmp	ip, r2
 8009512:	d901      	bls.n	8009518 <HAL_PCD_IRQHandler+0x614>
 8009514:	0409      	lsls	r1, r1, #16
 8009516:	d4d0      	bmi.n	80094ba <HAL_PCD_IRQHandler+0x5b6>
 8009518:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800951c:	6919      	ldr	r1, [r3, #16]
 800951e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009522:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800952a:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800952e:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009532:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8009534:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800953c:	f1b8 0f00 	cmp.w	r8, #0
 8009540:	f47f af65 	bne.w	800940e <HAL_PCD_IRQHandler+0x50a>
 8009544:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009548:	2b00      	cmp	r3, #0
 800954a:	f47f af60 	bne.w	800940e <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800954e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009552:	2101      	movs	r1, #1
 8009554:	f005 ff60 	bl	800f418 <USB_EP0_OutStart>
 8009558:	e759      	b.n	800940e <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800955a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800955e:	6820      	ldr	r0, [r4, #0]
 8009560:	f005 ff5a 	bl	800f418 <USB_EP0_OutStart>
 8009564:	e775      	b.n	8009452 <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009566:	2220      	movs	r2, #32
 8009568:	609a      	str	r2, [r3, #8]
 800956a:	e68e      	b.n	800928a <HAL_PCD_IRQHandler+0x386>
 800956c:	4f54310a 	.word	0x4f54310a
 8009570:	4f54300a 	.word	0x4f54300a

08009574 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009574:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009578:	2a01      	cmp	r2, #1
 800957a:	d00d      	beq.n	8009598 <HAL_PCD_SetAddress+0x24>
 800957c:	2201      	movs	r2, #1
{
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8009582:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009586:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009588:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800958c:	f005 fece 	bl	800f32c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009590:	2000      	movs	r0, #0
 8009592:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009596:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009598:	2002      	movs	r0, #2
}
 800959a:	4770      	bx	lr

0800959c <HAL_PCD_EP_Open>:
{
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80095a2:	0609      	lsls	r1, r1, #24
 80095a4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80095a8:	ea4f 0585 	mov.w	r5, r5, lsl #2
 80095ac:	d422      	bmi.n	80095f4 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095ae:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 80095b2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80095b6:	2600      	movs	r6, #0
 80095b8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095bc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80095be:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 80095c2:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095c4:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80095c6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80095c8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80095ca:	b105      	cbz	r5, 80095ce <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80095cc:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d101      	bne.n	80095d6 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80095d6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d015      	beq.n	800960a <HAL_PCD_EP_Open+0x6e>
 80095de:	4604      	mov	r4, r0
 80095e0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80095e2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80095e4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80095e8:	f005 fbde 	bl	800eda8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095ec:	2000      	movs	r0, #0
 80095ee:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80095f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 80095f4:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 80095fc:	2701      	movs	r7, #1
 80095fe:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009602:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009604:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8009608:	e7db      	b.n	80095c2 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800960a:	2002      	movs	r0, #2
}
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960e:	bf00      	nop

08009610 <HAL_PCD_EP_Close>:
{
 8009610:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009614:	0609      	lsls	r1, r1, #24
{
 8009616:	b538      	push	{r3, r4, r5, lr}
 8009618:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800961c:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8009620:	d419      	bmi.n	8009656 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009622:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8009626:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800962a:	2400      	movs	r4, #0
 800962c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009630:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009632:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009636:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8009638:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800963c:	2b01      	cmp	r3, #1
 800963e:	d019      	beq.n	8009674 <HAL_PCD_EP_Close+0x64>
 8009640:	4604      	mov	r4, r0
 8009642:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009644:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009646:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800964a:	f005 fbef 	bl	800ee2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800964e:	2000      	movs	r0, #0
 8009650:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009654:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009656:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800965a:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 800965e:	2501      	movs	r5, #1
 8009660:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009664:	4401      	add	r1, r0
    ep->is_in = 1U;
 8009666:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800966a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800966c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009670:	2b01      	cmp	r3, #1
 8009672:	d1e5      	bne.n	8009640 <HAL_PCD_EP_Close+0x30>
 8009674:	2002      	movs	r0, #2
}
 8009676:	bd38      	pop	{r3, r4, r5, pc}

08009678 <HAL_PCD_EP_Receive>:
{
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 800967e:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009680:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009682:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009686:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800968a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800968e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8009692:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8009696:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800969a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800969e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80096a2:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 80096a6:	6903      	ldr	r3, [r0, #16]
 80096a8:	6800      	ldr	r0, [r0, #0]
 80096aa:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80096ac:	bf08      	it	eq
 80096ae:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80096b2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096b4:	b11d      	cbz	r5, 80096be <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096b6:	f005 fc19 	bl	800eeec <USB_EPStartXfer>
}
 80096ba:	2000      	movs	r0, #0
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096be:	f005 fd29 	bl	800f114 <USB_EP0StartXfer>
}
 80096c2:	2000      	movs	r0, #0
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	bf00      	nop

080096c8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80096c8:	f001 010f 	and.w	r1, r1, #15
 80096cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80096d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 80096d4:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop

080096dc <HAL_PCD_EP_Transmit>:
{
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 80096e2:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 80096e4:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096e6:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80096e8:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ec:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 80096f0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096f4:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 80096f6:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 80096f8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 80096fa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80096fe:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8009700:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8009704:	6903      	ldr	r3, [r0, #16]
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800970a:	bf08      	it	eq
 800970c:	64e2      	streq	r2, [r4, #76]	; 0x4c
 800970e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009710:	b11d      	cbz	r5, 800971a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009712:	f005 fbeb 	bl	800eeec <USB_EPStartXfer>
}
 8009716:	2000      	movs	r0, #0
 8009718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800971a:	f005 fcfb 	bl	800f114 <USB_EP0StartXfer>
}
 800971e:	2000      	movs	r0, #0
 8009720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009722:	bf00      	nop

08009724 <HAL_PCD_EP_SetStall>:
{
 8009724:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009726:	6843      	ldr	r3, [r0, #4]
 8009728:	f001 050f 	and.w	r5, r1, #15
 800972c:	429d      	cmp	r5, r3
 800972e:	d81f      	bhi.n	8009770 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8009730:	060b      	lsls	r3, r1, #24
 8009732:	d41f      	bmi.n	8009774 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8009734:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009738:	241c      	movs	r4, #28
    ep->is_in = 0U;
 800973a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800973c:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8009740:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8009744:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009748:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800974c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800974e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009750:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009752:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009756:	429a      	cmp	r2, r3
 8009758:	d01e      	beq.n	8009798 <HAL_PCD_EP_SetStall+0x74>
 800975a:	4604      	mov	r4, r0
 800975c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009760:	6800      	ldr	r0, [r0, #0]
 8009762:	f005 fd87 	bl	800f274 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009766:	b1cd      	cbz	r5, 800979c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8009768:	2000      	movs	r0, #0
 800976a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800976e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009770:	2001      	movs	r0, #1
}
 8009772:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009774:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8009776:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800977a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800977c:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8009780:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009784:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800978a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800978c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800978e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009790:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009794:	429a      	cmp	r2, r3
 8009796:	d1e0      	bne.n	800975a <HAL_PCD_EP_SetStall+0x36>
 8009798:	2002      	movs	r0, #2
}
 800979a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800979c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80097a0:	7c21      	ldrb	r1, [r4, #16]
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	f005 fe38 	bl	800f418 <USB_EP0_OutStart>
 80097a8:	e7de      	b.n	8009768 <HAL_PCD_EP_SetStall+0x44>
 80097aa:	bf00      	nop

080097ac <HAL_PCD_EP_ClrStall>:
{
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80097b2:	6843      	ldr	r3, [r0, #4]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d821      	bhi.n	80097fc <HAL_PCD_EP_ClrStall+0x50>
 80097b8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80097bc:	0609      	lsls	r1, r1, #24
 80097be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80097c2:	d41d      	bmi.n	8009800 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80097c8:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80097cc:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097ce:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 80097d0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80097d4:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80097d8:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80097da:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80097dc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80097de:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d01c      	beq.n	8009820 <HAL_PCD_EP_ClrStall+0x74>
 80097e6:	4604      	mov	r4, r0
 80097e8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097ea:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80097ec:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097f0:	f005 fd70 	bl	800f2d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097f4:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 80097f8:	4628      	mov	r0, r5
}
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80097fc:	2001      	movs	r0, #1
}
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8009800:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009804:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8009806:	2501      	movs	r5, #1
 8009808:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800980c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800980e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8009812:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8009814:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8009816:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009818:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800981c:	2b01      	cmp	r3, #1
 800981e:	d1e2      	bne.n	80097e6 <HAL_PCD_EP_ClrStall+0x3a>
 8009820:	2002      	movs	r0, #2
}
 8009822:	bd38      	pop	{r3, r4, r5, pc}

08009824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009824:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009826:	6805      	ldr	r5, [r0, #0]
 8009828:	0412      	lsls	r2, r2, #16
 800982a:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 800982c:	b1c1      	cbz	r1, 8009860 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800982e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8009830:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009832:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009836:	d00b      	beq.n	8009850 <HAL_PCDEx_SetTxFiFo+0x2c>
 8009838:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800983a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800983e:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009840:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8009844:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009846:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009848:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800984a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800984e:	d3f4      	bcc.n	800983a <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009850:	3140      	adds	r1, #64	; 0x40
 8009852:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8009854:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009856:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800985a:	604c      	str	r4, [r1, #4]
}
 800985c:	bc30      	pop	{r4, r5}
 800985e:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009860:	4314      	orrs	r4, r2
}
 8009862:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009864:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8009866:	bc30      	pop	{r4, r5}
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop

0800986c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800986c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800986e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009870:	6259      	str	r1, [r3, #36]	; 0x24
}
 8009872:	4770      	bx	lr

08009874 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009874:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8009876:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009878:	4a08      	ldr	r2, [pc, #32]	; (800989c <HAL_PCDEx_ActivateLPM+0x28>)
{
 800987a:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 800987c:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8009880:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009882:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8009884:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009886:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 800988a:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 800988e:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009890:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009892:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009894:	430a      	orrs	r2, r1
}
 8009896:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009898:	655a      	str	r2, [r3, #84]	; 0x54
}
 800989a:	4770      	bx	lr
 800989c:	10000003 	.word	0x10000003

080098a0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098a0:	4a02      	ldr	r2, [pc, #8]	; (80098ac <HAL_PWR_EnableBkUpAccess+0xc>)
 80098a2:	6813      	ldr	r3, [r2, #0]
 80098a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098a8:	6013      	str	r3, [r2, #0]
}
 80098aa:	4770      	bx	lr
 80098ac:	40007000 	.word	0x40007000

080098b0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80098b0:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80098b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80098b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 80098ba:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80098bc:	6411      	str	r1, [r2, #64]	; 0x40
{
 80098be:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80098c0:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098c2:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 80098c4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80098c8:	9201      	str	r2, [sp, #4]
 80098ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098d2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80098d4:	f7fb fd5e 	bl	8005394 <HAL_GetTick>
 80098d8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098da:	e005      	b.n	80098e8 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80098dc:	f7fb fd5a 	bl	8005394 <HAL_GetTick>
 80098e0:	1b40      	subs	r0, r0, r5
 80098e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80098e6:	d817      	bhi.n	8009918 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	03da      	lsls	r2, r3, #15
 80098ec:	d5f6      	bpl.n	80098dc <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80098ee:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80098f0:	4d0c      	ldr	r5, [pc, #48]	; (8009924 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80098f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f6:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80098f8:	f7fb fd4c 	bl	8005394 <HAL_GetTick>
 80098fc:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80098fe:	e005      	b.n	800990c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009900:	f7fb fd48 	bl	8005394 <HAL_GetTick>
 8009904:	1b00      	subs	r0, r0, r4
 8009906:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800990a:	d805      	bhi.n	8009918 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800990c:	686b      	ldr	r3, [r5, #4]
 800990e:	039b      	lsls	r3, r3, #14
 8009910:	d5f6      	bpl.n	8009900 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8009912:	2000      	movs	r0, #0
}
 8009914:	b003      	add	sp, #12
 8009916:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8009918:	2003      	movs	r0, #3
}
 800991a:	b003      	add	sp, #12
 800991c:	bd30      	pop	{r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	40023800 	.word	0x40023800
 8009924:	40007000 	.word	0x40007000

08009928 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009928:	2800      	cmp	r0, #0
 800992a:	f000 81f0 	beq.w	8009d0e <HAL_RCC_OscConfig+0x3e6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800992e:	6803      	ldr	r3, [r0, #0]
 8009930:	2b0f      	cmp	r3, #15
{
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	4604      	mov	r4, r0
 8009938:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800993a:	f200 80be 	bhi.w	8009aba <HAL_RCC_OscConfig+0x192>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800993e:	07dd      	lsls	r5, r3, #31
 8009940:	d534      	bpl.n	80099ac <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8009948:	d003      	beq.n	8009952 <HAL_RCC_OscConfig+0x2a>
 800994a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800994e:	f040 817f 	bne.w	8009c50 <HAL_RCC_OscConfig+0x328>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009952:	4ab3      	ldr	r2, [pc, #716]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009954:	6893      	ldr	r3, [r2, #8]
 8009956:	f003 030c 	and.w	r3, r3, #12
 800995a:	2b04      	cmp	r3, #4
 800995c:	d01d      	beq.n	800999a <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800995e:	6893      	ldr	r3, [r2, #8]
 8009960:	f003 030c 	and.w	r3, r3, #12
 8009964:	2b08      	cmp	r3, #8
 8009966:	d015      	beq.n	8009994 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009968:	6863      	ldr	r3, [r4, #4]
 800996a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996e:	f000 817f 	beq.w	8009c70 <HAL_RCC_OscConfig+0x348>
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 81ae 	beq.w	8009cd4 <HAL_RCC_OscConfig+0x3ac>
 8009978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800997c:	4ba8      	ldr	r3, [pc, #672]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	f000 820b 	beq.w	8009d9a <HAL_RCC_OscConfig+0x472>
 8009984:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e172      	b.n	8009c7a <HAL_RCC_OscConfig+0x352>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009994:	6853      	ldr	r3, [r2, #4]
 8009996:	0258      	lsls	r0, r3, #9
 8009998:	d5e6      	bpl.n	8009968 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800999a:	4ba1      	ldr	r3, [pc, #644]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	0399      	lsls	r1, r3, #14
 80099a0:	d503      	bpl.n	80099aa <HAL_RCC_OscConfig+0x82>
 80099a2:	6863      	ldr	r3, [r4, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8126 	beq.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
 80099aa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099ac:	079f      	lsls	r7, r3, #30
 80099ae:	d450      	bmi.n	8009a52 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099b0:	071a      	lsls	r2, r3, #28
 80099b2:	d51a      	bpl.n	80099ea <HAL_RCC_OscConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80099b4:	6963      	ldr	r3, [r4, #20]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	f200 8141 	bhi.w	8009c3e <HAL_RCC_OscConfig+0x316>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 8124 	beq.w	8009c0a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80099c2:	4b97      	ldr	r3, [pc, #604]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 80099c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099c6:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80099ce:	f7fb fce1 	bl	8005394 <HAL_GetTick>
 80099d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099d4:	e005      	b.n	80099e2 <HAL_RCC_OscConfig+0xba>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099d6:	f7fb fcdd 	bl	8005394 <HAL_GetTick>
 80099da:	1b80      	subs	r0, r0, r6
 80099dc:	2802      	cmp	r0, #2
 80099de:	f200 816b 	bhi.w	8009cb8 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80099e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80099e4:	079b      	lsls	r3, r3, #30
 80099e6:	d5f6      	bpl.n	80099d6 <HAL_RCC_OscConfig+0xae>
 80099e8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099ea:	075e      	lsls	r6, r3, #29
 80099ec:	f140 808b 	bpl.w	8009b06 <HAL_RCC_OscConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d906      	bls.n	8009a04 <HAL_RCC_OscConfig+0xdc>
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d004      	beq.n	8009a04 <HAL_RCC_OscConfig+0xdc>
 80099fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80099fe:	4889      	ldr	r0, [pc, #548]	; (8009c24 <HAL_RCC_OscConfig+0x2fc>)
 8009a00:	f7f9 f9cc 	bl	8002d9c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a04:	4b86      	ldr	r3, [pc, #536]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a08:	00d5      	lsls	r5, r2, #3
 8009a0a:	f100 8182 	bmi.w	8009d12 <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8009a10:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009a16:	641a      	str	r2, [r3, #64]	; 0x40
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009a22:	4b81      	ldr	r3, [pc, #516]	; (8009c28 <HAL_RCC_OscConfig+0x300>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	05d0      	lsls	r0, r2, #23
 8009a28:	f140 8135 	bpl.w	8009c96 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a2c:	68a3      	ldr	r3, [r4, #8]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d04d      	beq.n	8009ace <HAL_RCC_OscConfig+0x1a6>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 816f 	beq.w	8009d16 <HAL_RCC_OscConfig+0x3ee>
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	4b79      	ldr	r3, [pc, #484]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a3e:	f000 81b4 	beq.w	8009daa <HAL_RCC_OscConfig+0x482>
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	671a      	str	r2, [r3, #112]	; 0x70
 8009a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a4a:	f022 0204 	bic.w	r2, r2, #4
 8009a4e:	671a      	str	r2, [r3, #112]	; 0x70
 8009a50:	e042      	b.n	8009ad8 <HAL_RCC_OscConfig+0x1b0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	f200 80d2 	bhi.w	8009bfe <HAL_RCC_OscConfig+0x2d6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	2b1f      	cmp	r3, #31
 8009a5e:	f200 8150 	bhi.w	8009d02 <HAL_RCC_OscConfig+0x3da>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a62:	4b6f      	ldr	r3, [pc, #444]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	f012 0f0c 	tst.w	r2, #12
 8009a6a:	f000 80bd 	beq.w	8009be8 <HAL_RCC_OscConfig+0x2c0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	f002 020c 	and.w	r2, r2, #12
 8009a74:	2a08      	cmp	r2, #8
 8009a76:	f000 80b3 	beq.w	8009be0 <HAL_RCC_OscConfig+0x2b8>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a7a:	68e3      	ldr	r3, [r4, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8166 	beq.w	8009d4e <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_ENABLE();
 8009a82:	4b67      	ldr	r3, [pc, #412]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009a84:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a86:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009a8e:	f7fb fc81 	bl	8005394 <HAL_GetTick>
 8009a92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a94:	e005      	b.n	8009aa2 <HAL_RCC_OscConfig+0x17a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a96:	f7fb fc7d 	bl	8005394 <HAL_GetTick>
 8009a9a:	1b80      	subs	r0, r0, r6
 8009a9c:	2802      	cmp	r0, #2
 8009a9e:	f200 810b 	bhi.w	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aa2:	682b      	ldr	r3, [r5, #0]
 8009aa4:	0798      	lsls	r0, r3, #30
 8009aa6:	d5f6      	bpl.n	8009a96 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	6922      	ldr	r2, [r4, #16]
 8009aac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009ab0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	e77a      	b.n	80099b0 <HAL_RCC_OscConfig+0x88>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8009aba:	f240 1165 	movw	r1, #357	; 0x165
 8009abe:	4859      	ldr	r0, [pc, #356]	; (8009c24 <HAL_RCC_OscConfig+0x2fc>)
 8009ac0:	f7f9 f96c 	bl	8002d9c <assert_failed>
 8009ac4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ac6:	07dd      	lsls	r5, r3, #31
 8009ac8:	f57f af70 	bpl.w	80099ac <HAL_RCC_OscConfig+0x84>
 8009acc:	e739      	b.n	8009942 <HAL_RCC_OscConfig+0x1a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ace:	4a54      	ldr	r2, [pc, #336]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009ad0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ad8:	f7fb fc5c 	bl	8005394 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009adc:	4e50      	ldr	r6, [pc, #320]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
      tickstart = HAL_GetTick();
 8009ade:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ae0:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ae4:	e006      	b.n	8009af4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ae6:	f7fb fc55 	bl	8005394 <HAL_GetTick>
 8009aea:	eba0 0008 	sub.w	r0, r0, r8
 8009aee:	42b8      	cmp	r0, r7
 8009af0:	f200 80e2 	bhi.w	8009cb8 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009af4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009af6:	079a      	lsls	r2, r3, #30
 8009af8:	d5f5      	bpl.n	8009ae6 <HAL_RCC_OscConfig+0x1be>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009afa:	b125      	cbz	r5, 8009b06 <HAL_RCC_OscConfig+0x1de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009afc:	4a48      	ldr	r2, [pc, #288]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009afe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009b06:	69a0      	ldr	r0, [r4, #24]
 8009b08:	2802      	cmp	r0, #2
 8009b0a:	f200 80a7 	bhi.w	8009c5c <HAL_RCC_OscConfig+0x334>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d062      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x2b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b12:	4a43      	ldr	r2, [pc, #268]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009b14:	6893      	ldr	r3, [r2, #8]
 8009b16:	f003 030c 	and.w	r3, r3, #12
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	f000 814d 	beq.w	8009dba <HAL_RCC_OscConfig+0x492>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b20:	2802      	cmp	r0, #2
 8009b22:	f040 8128 	bne.w	8009d76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009b26:	69e3      	ldr	r3, [r4, #28]
 8009b28:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8009b2c:	f040 8195 	bne.w	8009e5a <HAL_RCC_OscConfig+0x532>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009b30:	6a23      	ldr	r3, [r4, #32]
 8009b32:	3b02      	subs	r3, #2
 8009b34:	2b3d      	cmp	r3, #61	; 0x3d
 8009b36:	f200 818a 	bhi.w	8009e4e <HAL_RCC_OscConfig+0x526>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3c:	3b32      	subs	r3, #50	; 0x32
 8009b3e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8009b42:	f200 8172 	bhi.w	8009e2a <HAL_RCC_OscConfig+0x502>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009b46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b48:	2a08      	cmp	r2, #8
 8009b4a:	f240 8167 	bls.w	8009e1c <HAL_RCC_OscConfig+0x4f4>
 8009b4e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009b52:	4834      	ldr	r0, [pc, #208]	; (8009c24 <HAL_RCC_OscConfig+0x2fc>)
 8009b54:	f7f9 f922 	bl	8002d9c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b5a:	3b02      	subs	r3, #2
 8009b5c:	2b0d      	cmp	r3, #13
 8009b5e:	f200 8170 	bhi.w	8009e42 <HAL_RCC_OscConfig+0x51a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b64:	3b02      	subs	r3, #2
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	f200 8165 	bhi.w	8009e36 <HAL_RCC_OscConfig+0x50e>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b6c:	4b2c      	ldr	r3, [pc, #176]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009b6e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b70:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8009b72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009b76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009b78:	f7fb fc0c 	bl	8005394 <HAL_GetTick>
 8009b7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7e:	e005      	b.n	8009b8c <HAL_RCC_OscConfig+0x264>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b80:	f7fb fc08 	bl	8005394 <HAL_GetTick>
 8009b84:	1b80      	subs	r0, r0, r6
 8009b86:	2802      	cmp	r0, #2
 8009b88:	f200 8096 	bhi.w	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	0199      	lsls	r1, r3, #6
 8009b90:	d4f6      	bmi.n	8009b80 <HAL_RCC_OscConfig+0x258>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b92:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009b96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 8009b9e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8009ba2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ba4:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ba6:	4c1e      	ldr	r4, [pc, #120]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ba8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009bac:	3a01      	subs	r2, #1
 8009bae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8009bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bb6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009bc0:	f7fb fbe8 	bl	8005394 <HAL_GetTick>
 8009bc4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bc6:	e004      	b.n	8009bd2 <HAL_RCC_OscConfig+0x2aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bc8:	f7fb fbe4 	bl	8005394 <HAL_GetTick>
 8009bcc:	1b40      	subs	r0, r0, r5
 8009bce:	2802      	cmp	r0, #2
 8009bd0:	d872      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	019a      	lsls	r2, r3, #6
 8009bd6:	d5f7      	bpl.n	8009bc8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8009bd8:	2000      	movs	r0, #0
}
 8009bda:	b002      	add	sp, #8
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	025e      	lsls	r6, r3, #9
 8009be4:	f53f af49 	bmi.w	8009a7a <HAL_RCC_OscConfig+0x152>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009be8:	4b0d      	ldr	r3, [pc, #52]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	079d      	lsls	r5, r3, #30
 8009bee:	d567      	bpl.n	8009cc0 <HAL_RCC_OscConfig+0x398>
 8009bf0:	68e3      	ldr	r3, [r4, #12]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d064      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x398>
        return HAL_ERROR;
 8009bf6:	2001      	movs	r0, #1
}
 8009bf8:	b002      	add	sp, #8
 8009bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009bfe:	f240 119d 	movw	r1, #413	; 0x19d
 8009c02:	4808      	ldr	r0, [pc, #32]	; (8009c24 <HAL_RCC_OscConfig+0x2fc>)
 8009c04:	f7f9 f8ca 	bl	8002d9c <assert_failed>
 8009c08:	e727      	b.n	8009a5a <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_LSI_DISABLE();
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <HAL_RCC_OscConfig+0x2f8>)
 8009c0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c0e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8009c10:	f022 0201 	bic.w	r2, r2, #1
 8009c14:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009c16:	f7fb fbbd 	bl	8005394 <HAL_GetTick>
 8009c1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c1c:	e00b      	b.n	8009c36 <HAL_RCC_OscConfig+0x30e>
 8009c1e:	bf00      	nop
 8009c20:	40023800 	.word	0x40023800
 8009c24:	0802632c 	.word	0x0802632c
 8009c28:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c2c:	f7fb fbb2 	bl	8005394 <HAL_GetTick>
 8009c30:	1b80      	subs	r0, r0, r6
 8009c32:	2802      	cmp	r0, #2
 8009c34:	d840      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009c38:	079f      	lsls	r7, r3, #30
 8009c3a:	d4f7      	bmi.n	8009c2c <HAL_RCC_OscConfig+0x304>
 8009c3c:	e6d4      	b.n	80099e8 <HAL_RCC_OscConfig+0xc0>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009c3e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009c42:	4889      	ldr	r0, [pc, #548]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009c44:	f7f9 f8aa 	bl	8002d9c <assert_failed>
 8009c48:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0dd      	beq.n	8009c0a <HAL_RCC_OscConfig+0x2e2>
 8009c4e:	e6b8      	b.n	80099c2 <HAL_RCC_OscConfig+0x9a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8009c50:	f240 116b 	movw	r1, #363	; 0x16b
 8009c54:	4884      	ldr	r0, [pc, #528]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009c56:	f7f9 f8a1 	bl	8002d9c <assert_failed>
 8009c5a:	e67a      	b.n	8009952 <HAL_RCC_OscConfig+0x2a>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009c5c:	4882      	ldr	r0, [pc, #520]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009c5e:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8009c62:	f7f9 f89b 	bl	8002d9c <assert_failed>
 8009c66:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f47f af52 	bne.w	8009b12 <HAL_RCC_OscConfig+0x1ea>
 8009c6e:	e7b3      	b.n	8009bd8 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c70:	4a7e      	ldr	r2, [pc, #504]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
 8009c72:	6813      	ldr	r3, [r2, #0]
 8009c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009c7a:	f7fb fb8b 	bl	8005394 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c7e:	4d7b      	ldr	r5, [pc, #492]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
        tickstart = HAL_GetTick();
 8009c80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c82:	e004      	b.n	8009c8e <HAL_RCC_OscConfig+0x366>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c84:	f7fb fb86 	bl	8005394 <HAL_GetTick>
 8009c88:	1b80      	subs	r0, r0, r6
 8009c8a:	2864      	cmp	r0, #100	; 0x64
 8009c8c:	d814      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c8e:	682b      	ldr	r3, [r5, #0]
 8009c90:	039a      	lsls	r2, r3, #14
 8009c92:	d5f7      	bpl.n	8009c84 <HAL_RCC_OscConfig+0x35c>
 8009c94:	e689      	b.n	80099aa <HAL_RCC_OscConfig+0x82>
      PWR->CR1 |= PWR_CR1_DBP;
 8009c96:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c98:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8009c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009ca0:	f7fb fb78 	bl	8005394 <HAL_GetTick>
 8009ca4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ca6:	6833      	ldr	r3, [r6, #0]
 8009ca8:	05d9      	lsls	r1, r3, #23
 8009caa:	f53f aebf 	bmi.w	8009a2c <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cae:	f7fb fb71 	bl	8005394 <HAL_GetTick>
 8009cb2:	1bc0      	subs	r0, r0, r7
 8009cb4:	2864      	cmp	r0, #100	; 0x64
 8009cb6:	d9f6      	bls.n	8009ca6 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8009cb8:	2003      	movs	r0, #3
}
 8009cba:	b002      	add	sp, #8
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cc0:	4a6a      	ldr	r2, [pc, #424]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
 8009cc2:	6921      	ldr	r1, [r4, #16]
 8009cc4:	6813      	ldr	r3, [r2, #0]
 8009cc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009cca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cd2:	e66d      	b.n	80099b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cd4:	4b65      	ldr	r3, [pc, #404]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cd8:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ce6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009ce8:	f7fb fb54 	bl	8005394 <HAL_GetTick>
 8009cec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cee:	e004      	b.n	8009cfa <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cf0:	f7fb fb50 	bl	8005394 <HAL_GetTick>
 8009cf4:	1b80      	subs	r0, r0, r6
 8009cf6:	2864      	cmp	r0, #100	; 0x64
 8009cf8:	d8de      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cfa:	682b      	ldr	r3, [r5, #0]
 8009cfc:	039b      	lsls	r3, r3, #14
 8009cfe:	d4f7      	bmi.n	8009cf0 <HAL_RCC_OscConfig+0x3c8>
 8009d00:	e653      	b.n	80099aa <HAL_RCC_OscConfig+0x82>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009d02:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8009d06:	4858      	ldr	r0, [pc, #352]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009d08:	f7f9 f848 	bl	8002d9c <assert_failed>
 8009d0c:	e6a9      	b.n	8009a62 <HAL_RCC_OscConfig+0x13a>
    return HAL_ERROR;
 8009d0e:	2001      	movs	r0, #1
}
 8009d10:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8009d12:	2500      	movs	r5, #0
 8009d14:	e685      	b.n	8009a22 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d16:	4b55      	ldr	r3, [pc, #340]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d1e:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d20:	f022 0201 	bic.w	r2, r2, #1
 8009d24:	671a      	str	r2, [r3, #112]	; 0x70
 8009d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d28:	f022 0204 	bic.w	r2, r2, #4
 8009d2c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009d2e:	f7fb fb31 	bl	8005394 <HAL_GetTick>
 8009d32:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d34:	e004      	b.n	8009d40 <HAL_RCC_OscConfig+0x418>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d36:	f7fb fb2d 	bl	8005394 <HAL_GetTick>
 8009d3a:	1bc0      	subs	r0, r0, r7
 8009d3c:	4540      	cmp	r0, r8
 8009d3e:	d8bb      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d40:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009d42:	079b      	lsls	r3, r3, #30
 8009d44:	d4f7      	bmi.n	8009d36 <HAL_RCC_OscConfig+0x40e>
    if (pwrclkchanged == SET)
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	f43f aedd 	beq.w	8009b06 <HAL_RCC_OscConfig+0x1de>
 8009d4c:	e6d6      	b.n	8009afc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 8009d4e:	4b47      	ldr	r3, [pc, #284]	; (8009e6c <HAL_RCC_OscConfig+0x544>)
 8009d50:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d52:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009d5a:	f7fb fb1b 	bl	8005394 <HAL_GetTick>
 8009d5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d60:	e004      	b.n	8009d6c <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d62:	f7fb fb17 	bl	8005394 <HAL_GetTick>
 8009d66:	1b80      	subs	r0, r0, r6
 8009d68:	2802      	cmp	r0, #2
 8009d6a:	d8a5      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	0799      	lsls	r1, r3, #30
 8009d70:	d4f7      	bmi.n	8009d62 <HAL_RCC_OscConfig+0x43a>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	e61c      	b.n	80099b0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_PLL_DISABLE();
 8009d76:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d78:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8009d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009d80:	f7fb fb08 	bl	8005394 <HAL_GetTick>
 8009d84:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d86:	e004      	b.n	8009d92 <HAL_RCC_OscConfig+0x46a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d88:	f7fb fb04 	bl	8005394 <HAL_GetTick>
 8009d8c:	1b40      	subs	r0, r0, r5
 8009d8e:	2802      	cmp	r0, #2
 8009d90:	d892      	bhi.n	8009cb8 <HAL_RCC_OscConfig+0x390>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	019b      	lsls	r3, r3, #6
 8009d96:	d4f7      	bmi.n	8009d88 <HAL_RCC_OscConfig+0x460>
 8009d98:	e71e      	b.n	8009bd8 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e767      	b.n	8009c7a <HAL_RCC_OscConfig+0x352>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009daa:	f042 0204 	orr.w	r2, r2, #4
 8009dae:	671a      	str	r2, [r3, #112]	; 0x70
 8009db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	671a      	str	r2, [r3, #112]	; 0x70
 8009db8:	e68e      	b.n	8009ad8 <HAL_RCC_OscConfig+0x1b0>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dba:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8009dbc:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dbe:	f43f af1b 	beq.w	8009bf8 <HAL_RCC_OscConfig+0x2d0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dc2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dc6:	69e1      	ldr	r1, [r4, #28]
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	f47f af14 	bne.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dce:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd2:	6a21      	ldr	r1, [r4, #32]
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	f47f af0e 	bne.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009dda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009de0:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009de2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8009de6:	f47f af06 	bne.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dec:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009df4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8009df8:	f47f aefd 	bne.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009dfc:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 8009e00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009e02:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8009e06:	f47f aef6 	bne.w	8009bf6 <HAL_RCC_OscConfig+0x2ce>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e0c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e10:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
    return HAL_ERROR;
 8009e14:	bf14      	ite	ne
 8009e16:	2001      	movne	r0, #1
 8009e18:	2000      	moveq	r0, #0
 8009e1a:	e6ed      	b.n	8009bf8 <HAL_RCC_OscConfig+0x2d0>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009e1c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8009e20:	40d3      	lsrs	r3, r2
 8009e22:	07d8      	lsls	r0, r3, #31
 8009e24:	f53f ae98 	bmi.w	8009b58 <HAL_RCC_OscConfig+0x230>
 8009e28:	e691      	b.n	8009b4e <HAL_RCC_OscConfig+0x226>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009e2a:	f240 2157 	movw	r1, #599	; 0x257
 8009e2e:	480e      	ldr	r0, [pc, #56]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009e30:	f7f8 ffb4 	bl	8002d9c <assert_failed>
 8009e34:	e687      	b.n	8009b46 <HAL_RCC_OscConfig+0x21e>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8009e36:	f240 215b 	movw	r1, #603	; 0x25b
 8009e3a:	480b      	ldr	r0, [pc, #44]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009e3c:	f7f8 ffae 	bl	8002d9c <assert_failed>
 8009e40:	e694      	b.n	8009b6c <HAL_RCC_OscConfig+0x244>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009e42:	f240 2159 	movw	r1, #601	; 0x259
 8009e46:	4808      	ldr	r0, [pc, #32]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009e48:	f7f8 ffa8 	bl	8002d9c <assert_failed>
 8009e4c:	e689      	b.n	8009b62 <HAL_RCC_OscConfig+0x23a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009e4e:	f240 2156 	movw	r1, #598	; 0x256
 8009e52:	4805      	ldr	r0, [pc, #20]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009e54:	f7f8 ffa2 	bl	8002d9c <assert_failed>
 8009e58:	e66f      	b.n	8009b3a <HAL_RCC_OscConfig+0x212>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009e5a:	f240 2155 	movw	r1, #597	; 0x255
 8009e5e:	4802      	ldr	r0, [pc, #8]	; (8009e68 <HAL_RCC_OscConfig+0x540>)
 8009e60:	f7f8 ff9c 	bl	8002d9c <assert_failed>
 8009e64:	e664      	b.n	8009b30 <HAL_RCC_OscConfig+0x208>
 8009e66:	bf00      	nop
 8009e68:	0802632c 	.word	0x0802632c
 8009e6c:	40023800 	.word	0x40023800

08009e70 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e70:	4916      	ldr	r1, [pc, #88]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8009e72:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e74:	688b      	ldr	r3, [r1, #8]
 8009e76:	f003 030c 	and.w	r3, r3, #12
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d01b      	beq.n	8009eb6 <HAL_RCC_GetSysClockFreq+0x46>
 8009e7e:	2b08      	cmp	r3, #8
 8009e80:	d117      	bne.n	8009eb2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e82:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009e84:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e8a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009e8c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8009e90:	d113      	bne.n	8009eba <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e92:	480f      	ldr	r0, [pc, #60]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x60>)
 8009e94:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009e98:	fba1 0100 	umull	r0, r1, r1, r0
 8009e9c:	f7f6 fa88 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x5c>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8009eac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009eb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8009eb2:	4807      	ldr	r0, [pc, #28]	; (8009ed0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8009eb4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8009eb6:	4807      	ldr	r0, [pc, #28]	; (8009ed4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8009eb8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eba:	4806      	ldr	r0, [pc, #24]	; (8009ed4 <HAL_RCC_GetSysClockFreq+0x64>)
 8009ebc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	fba1 0100 	umull	r0, r1, r1, r0
 8009ec6:	f7f6 fa73 	bl	80003b0 <__aeabi_uldivmod>
 8009eca:	e7e9      	b.n	8009ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	00f42400 	.word	0x00f42400
 8009ed4:	007a1200 	.word	0x007a1200

08009ed8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	f000 80e6 	beq.w	800a0aa <HAL_RCC_ClockConfig+0x1d2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009ede:	6803      	ldr	r3, [r0, #0]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	2b0e      	cmp	r3, #14
{
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009eec:	f200 80c9 	bhi.w	800a082 <HAL_RCC_ClockConfig+0x1aa>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009ef0:	2d0f      	cmp	r5, #15
 8009ef2:	f200 80b6 	bhi.w	800a062 <HAL_RCC_ClockConfig+0x18a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ef6:	4a82      	ldr	r2, [pc, #520]	; (800a100 <HAL_RCC_ClockConfig+0x228>)
 8009ef8:	6813      	ldr	r3, [r2, #0]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	42ab      	cmp	r3, r5
 8009f00:	f0c0 80d5 	bcc.w	800a0ae <HAL_RCC_ClockConfig+0x1d6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	0798      	lsls	r0, r3, #30
 8009f08:	d532      	bpl.n	8009f70 <HAL_RCC_ClockConfig+0x98>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f0a:	0759      	lsls	r1, r3, #29
 8009f0c:	d504      	bpl.n	8009f18 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f0e:	497d      	ldr	r1, [pc, #500]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 8009f10:	688a      	ldr	r2, [r1, #8]
 8009f12:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8009f16:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f18:	071a      	lsls	r2, r3, #28
 8009f1a:	d504      	bpl.n	8009f26 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f1c:	4979      	ldr	r1, [pc, #484]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 8009f1e:	688a      	ldr	r2, [r1, #8]
 8009f20:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8009f24:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009f26:	68a1      	ldr	r1, [r4, #8]
 8009f28:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8009f2c:	f021 0620 	bic.w	r6, r1, #32
 8009f30:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8009f34:	bf14      	ite	ne
 8009f36:	2201      	movne	r2, #1
 8009f38:	2200      	moveq	r2, #0
 8009f3a:	2e90      	cmp	r6, #144	; 0x90
 8009f3c:	bf0c      	ite	eq
 8009f3e:	2200      	moveq	r2, #0
 8009f40:	f002 0201 	andne.w	r2, r2, #1
 8009f44:	29f0      	cmp	r1, #240	; 0xf0
 8009f46:	bf0c      	ite	eq
 8009f48:	2200      	moveq	r2, #0
 8009f4a:	f002 0201 	andne.w	r2, r2, #1
 8009f4e:	28a0      	cmp	r0, #160	; 0xa0
 8009f50:	bf0c      	ite	eq
 8009f52:	2200      	moveq	r2, #0
 8009f54:	f002 0201 	andne.w	r2, r2, #1
 8009f58:	b122      	cbz	r2, 8009f64 <HAL_RCC_ClockConfig+0x8c>
 8009f5a:	f021 0210 	bic.w	r2, r1, #16
 8009f5e:	2ac0      	cmp	r2, #192	; 0xc0
 8009f60:	f040 80c6 	bne.w	800a0f0 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f64:	4867      	ldr	r0, [pc, #412]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 8009f66:	6882      	ldr	r2, [r0, #8]
 8009f68:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009f6c:	4311      	orrs	r1, r2
 8009f6e:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f70:	07df      	lsls	r7, r3, #31
 8009f72:	d527      	bpl.n	8009fc4 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	f200 8090 	bhi.w	800a09c <HAL_RCC_ClockConfig+0x1c4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f7c:	4a61      	ldr	r2, [pc, #388]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f7e:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f80:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f82:	f000 8087 	beq.w	800a094 <HAL_RCC_ClockConfig+0x1bc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	f000 809f 	beq.w	800a0ca <HAL_RCC_ClockConfig+0x1f2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f8c:	0791      	lsls	r1, r2, #30
 8009f8e:	d575      	bpl.n	800a07c <HAL_RCC_ClockConfig+0x1a4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f90:	495c      	ldr	r1, [pc, #368]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f92:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f96:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f98:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f9a:	f022 0203 	bic.w	r2, r2, #3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009fa2:	f7fb f9f7 	bl	8005394 <HAL_GetTick>
 8009fa6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fa8:	e005      	b.n	8009fb6 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009faa:	f7fb f9f3 	bl	8005394 <HAL_GetTick>
 8009fae:	1bc0      	subs	r0, r0, r7
 8009fb0:	4540      	cmp	r0, r8
 8009fb2:	f200 8088 	bhi.w	800a0c6 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fb6:	68b3      	ldr	r3, [r6, #8]
 8009fb8:	6862      	ldr	r2, [r4, #4]
 8009fba:	f003 030c 	and.w	r3, r3, #12
 8009fbe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009fc2:	d1f2      	bne.n	8009faa <HAL_RCC_ClockConfig+0xd2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009fc4:	4a4e      	ldr	r2, [pc, #312]	; (800a100 <HAL_RCC_ClockConfig+0x228>)
 8009fc6:	6813      	ldr	r3, [r2, #0]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	d909      	bls.n	8009fe4 <HAL_RCC_ClockConfig+0x10c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fd0:	6813      	ldr	r3, [r2, #0]
 8009fd2:	f023 030f 	bic.w	r3, r3, #15
 8009fd6:	432b      	orrs	r3, r5
 8009fd8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	42ab      	cmp	r3, r5
 8009fe2:	d14b      	bne.n	800a07c <HAL_RCC_ClockConfig+0x1a4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	075a      	lsls	r2, r3, #29
 8009fe8:	d512      	bpl.n	800a010 <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009fea:	68e1      	ldr	r1, [r4, #12]
 8009fec:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 8009ff0:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 8009ff4:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 8009ff8:	bf18      	it	ne
 8009ffa:	2a00      	cmpne	r2, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_RCC_ClockConfig+0x12c>
 8009ffe:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800a002:	d16d      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a004:	483f      	ldr	r0, [pc, #252]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 800a006:	6882      	ldr	r2, [r0, #8]
 800a008:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800a00c:	430a      	orrs	r2, r1
 800a00e:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a010:	071b      	lsls	r3, r3, #28
 800a012:	d513      	bpl.n	800a03c <HAL_RCC_ClockConfig+0x164>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a014:	6922      	ldr	r2, [r4, #16]
 800a016:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800a01a:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800a01e:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800a022:	bf18      	it	ne
 800a024:	2b00      	cmpne	r3, #0
 800a026:	d002      	beq.n	800a02e <HAL_RCC_ClockConfig+0x156>
 800a028:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a02c:	d151      	bne.n	800a0d2 <HAL_RCC_ClockConfig+0x1fa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a02e:	4935      	ldr	r1, [pc, #212]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 800a030:	688b      	ldr	r3, [r1, #8]
 800a032:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a036:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a03a:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a03c:	f7ff ff18 	bl	8009e70 <HAL_RCC_GetSysClockFreq>
 800a040:	4b30      	ldr	r3, [pc, #192]	; (800a104 <HAL_RCC_ClockConfig+0x22c>)
 800a042:	4c31      	ldr	r4, [pc, #196]	; (800a108 <HAL_RCC_ClockConfig+0x230>)
 800a044:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick(uwTickPrio);
 800a046:	4931      	ldr	r1, [pc, #196]	; (800a10c <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a048:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a04c:	4a30      	ldr	r2, [pc, #192]	; (800a110 <HAL_RCC_ClockConfig+0x238>)
 800a04e:	5ce3      	ldrb	r3, [r4, r3]
 800a050:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800a054:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a056:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800a058:	f7fa faaa 	bl	80045b0 <HAL_InitTick>
  return HAL_OK;
 800a05c:	2000      	movs	r0, #0
}
 800a05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a062:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800a066:	482b      	ldr	r0, [pc, #172]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a068:	f7f8 fe98 	bl	8002d9c <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <HAL_RCC_ClockConfig+0x228>)
 800a06e:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a070:	6819      	ldr	r1, [r3, #0]
 800a072:	f021 010f 	bic.w	r1, r1, #15
 800a076:	430d      	orrs	r5, r1
 800a078:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a07a:	681b      	ldr	r3, [r3, #0]
    return HAL_ERROR;
 800a07c:	2001      	movs	r0, #1
}
 800a07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800a082:	f240 21df 	movw	r1, #735	; 0x2df
 800a086:	4823      	ldr	r0, [pc, #140]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a088:	f7f8 fe88 	bl	8002d9c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800a08c:	2d0f      	cmp	r5, #15
 800a08e:	f67f af32 	bls.w	8009ef6 <HAL_RCC_ClockConfig+0x1e>
 800a092:	e7e6      	b.n	800a062 <HAL_RCC_ClockConfig+0x18a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a094:	0396      	lsls	r6, r2, #14
 800a096:	f53f af7b 	bmi.w	8009f90 <HAL_RCC_ClockConfig+0xb8>
 800a09a:	e7ef      	b.n	800a07c <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a09c:	f240 310b 	movw	r1, #779	; 0x30b
 800a0a0:	481c      	ldr	r0, [pc, #112]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a0a2:	f7f8 fe7b 	bl	8002d9c <assert_failed>
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	e768      	b.n	8009f7c <HAL_RCC_ClockConfig+0xa4>
    return HAL_ERROR;
 800a0aa:	2001      	movs	r0, #1
}
 800a0ac:	4770      	bx	lr
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	f023 030f 	bic.w	r3, r3, #15
 800a0b4:	432b      	orrs	r3, r5
 800a0b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0b8:	6813      	ldr	r3, [r2, #0]
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	42ab      	cmp	r3, r5
 800a0c0:	f43f af20 	beq.w	8009f04 <HAL_RCC_ClockConfig+0x2c>
 800a0c4:	e7da      	b.n	800a07c <HAL_RCC_ClockConfig+0x1a4>
        return HAL_TIMEOUT;
 800a0c6:	2003      	movs	r0, #3
 800a0c8:	e7d9      	b.n	800a07e <HAL_RCC_ClockConfig+0x1a6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0ca:	0190      	lsls	r0, r2, #6
 800a0cc:	f53f af60 	bmi.w	8009f90 <HAL_RCC_ClockConfig+0xb8>
 800a0d0:	e7d4      	b.n	800a07c <HAL_RCC_ClockConfig+0x1a4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a0d2:	f240 314f 	movw	r1, #847	; 0x34f
 800a0d6:	480f      	ldr	r0, [pc, #60]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a0d8:	f7f8 fe60 	bl	8002d9c <assert_failed>
 800a0dc:	6922      	ldr	r2, [r4, #16]
 800a0de:	e7a6      	b.n	800a02e <HAL_RCC_ClockConfig+0x156>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a0e0:	f44f 7152 	mov.w	r1, #840	; 0x348
 800a0e4:	480b      	ldr	r0, [pc, #44]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a0e6:	f7f8 fe59 	bl	8002d9c <assert_failed>
 800a0ea:	68e1      	ldr	r1, [r4, #12]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	e789      	b.n	800a004 <HAL_RCC_ClockConfig+0x12c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a0f0:	f44f 7141 	mov.w	r1, #772	; 0x304
 800a0f4:	4807      	ldr	r0, [pc, #28]	; (800a114 <HAL_RCC_ClockConfig+0x23c>)
 800a0f6:	f7f8 fe51 	bl	8002d9c <assert_failed>
 800a0fa:	68a1      	ldr	r1, [r4, #8]
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	e731      	b.n	8009f64 <HAL_RCC_ClockConfig+0x8c>
 800a100:	40023c00 	.word	0x40023c00
 800a104:	40023800 	.word	0x40023800
 800a108:	08025a50 	.word	0x08025a50
 800a10c:	200002a8 	.word	0x200002a8
 800a110:	20000248 	.word	0x20000248
 800a114:	0802632c 	.word	0x0802632c

0800a118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800a118:	4b01      	ldr	r3, [pc, #4]	; (800a120 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	20000248 	.word	0x20000248

0800a124 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a124:	4b04      	ldr	r3, [pc, #16]	; (800a138 <HAL_RCC_GetPCLK1Freq+0x14>)
 800a126:	4a05      	ldr	r2, [pc, #20]	; (800a13c <HAL_RCC_GetPCLK1Freq+0x18>)
 800a128:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a12a:	4905      	ldr	r1, [pc, #20]	; (800a140 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a12c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800a130:	6808      	ldr	r0, [r1, #0]
 800a132:	5cd3      	ldrb	r3, [r2, r3]
}
 800a134:	40d8      	lsrs	r0, r3
 800a136:	4770      	bx	lr
 800a138:	40023800 	.word	0x40023800
 800a13c:	08025a60 	.word	0x08025a60
 800a140:	20000248 	.word	0x20000248

0800a144 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a144:	4b04      	ldr	r3, [pc, #16]	; (800a158 <HAL_RCC_GetPCLK2Freq+0x14>)
 800a146:	4a05      	ldr	r2, [pc, #20]	; (800a15c <HAL_RCC_GetPCLK2Freq+0x18>)
 800a148:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800a14a:	4905      	ldr	r1, [pc, #20]	; (800a160 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a14c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a150:	6808      	ldr	r0, [r1, #0]
 800a152:	5cd3      	ldrb	r3, [r2, r3]
}
 800a154:	40d8      	lsrs	r0, r3
 800a156:	4770      	bx	lr
 800a158:	40023800 	.word	0x40023800
 800a15c:	08025a60 	.word	0x08025a60
 800a160:	20000248 	.word	0x20000248

0800a164 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a166:	220f      	movs	r2, #15
 800a168:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	f002 0203 	and.w	r2, r2, #3
 800a170:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a178:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800a180:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	08db      	lsrs	r3, r3, #3
{
 800a186:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a188:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a18c:	4c05      	ldr	r4, [pc, #20]	; (800a1a4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a18e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a190:	6823      	ldr	r3, [r4, #0]
}
 800a192:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	600b      	str	r3, [r1, #0]
}
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40023800 	.word	0x40023800
 800a1a4:	40023c00 	.word	0x40023c00

0800a1a8 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a1a8:	4a54      	ldr	r2, [pc, #336]	; (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a1aa:	6803      	ldr	r3, [r0, #0]
 800a1ac:	401a      	ands	r2, r3
{
 800a1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	f000 8349 	beq.w	800a84e <HAL_RCCEx_PeriphCLKConfig+0x6a6>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a1bc:	f013 0601 	ands.w	r6, r3, #1
 800a1c0:	d00f      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1c4:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800a1c8:	f040 834c 	bne.w	800a864 <HAL_RCCEx_PeriphCLKConfig+0x6bc>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1cc:	4a4c      	ldr	r2, [pc, #304]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1ce:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1d2:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1d4:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1d6:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800a1da:	6090      	str	r0, [r2, #8]
 800a1dc:	6890      	ldr	r0, [r2, #8]
 800a1de:	4301      	orrs	r1, r0
 800a1e0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1e2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800a1e6:	d014      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a1e8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a1ea:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800a1ee:	f040 836f 	bne.w	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x728>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1f2:	4943      	ldr	r1, [pc, #268]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x158>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1f4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1f8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800a1fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a200:	ea42 0205 	orr.w	r2, r2, r5
 800a204:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a208:	f000 8327 	beq.w	800a85a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a20c:	fab5 f585 	clz	r5, r5
 800a210:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a212:	02da      	lsls	r2, r3, #11
 800a214:	d514      	bpl.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800a216:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a218:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800a21c:	f040 8351 	bne.w	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a220:	4837      	ldr	r0, [pc, #220]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a222:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a226:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a22a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a22e:	ea42 0201 	orr.w	r2, r2, r1
 800a232:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a236:	f000 8313 	beq.w	800a860 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800a23a:	2900      	cmp	r1, #0
 800a23c:	bf08      	it	eq
 800a23e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800a240:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a244:	bf18      	it	ne
 800a246:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a248:	069f      	lsls	r7, r3, #26
 800a24a:	f140 8099 	bpl.w	800a380 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a24e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a250:	492c      	ldr	r1, [pc, #176]	; (800a304 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a252:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a256:	bf18      	it	ne
 800a258:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800a25c:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800a260:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800a264:	4828      	ldr	r0, [pc, #160]	; (800a308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a266:	bf14      	ite	ne
 800a268:	2301      	movne	r3, #1
 800a26a:	2300      	moveq	r3, #0
 800a26c:	458c      	cmp	ip, r1
 800a26e:	bf0c      	ite	eq
 800a270:	2300      	moveq	r3, #0
 800a272:	f003 0301 	andne.w	r3, r3, #1
 800a276:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800a27a:	f8df c098 	ldr.w	ip, [pc, #152]	; 800a314 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a27e:	4287      	cmp	r7, r0
 800a280:	bf0c      	ite	eq
 800a282:	2300      	moveq	r3, #0
 800a284:	f003 0301 	andne.w	r3, r3, #1
 800a288:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800a28c:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800a290:	4561      	cmp	r1, ip
 800a292:	bf0c      	ite	eq
 800a294:	2300      	moveq	r3, #0
 800a296:	f003 0301 	andne.w	r3, r3, #1
 800a29a:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800a29e:	4287      	cmp	r7, r0
 800a2a0:	bf0c      	ite	eq
 800a2a2:	2300      	moveq	r3, #0
 800a2a4:	f003 0301 	andne.w	r3, r3, #1
 800a2a8:	4f18      	ldr	r7, [pc, #96]	; (800a30c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2aa:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800a2ae:	4561      	cmp	r1, ip
 800a2b0:	bf0c      	ite	eq
 800a2b2:	2300      	moveq	r3, #0
 800a2b4:	f003 0301 	andne.w	r3, r3, #1
 800a2b8:	42b9      	cmp	r1, r7
 800a2ba:	bf0c      	ite	eq
 800a2bc:	2300      	moveq	r3, #0
 800a2be:	f003 0301 	andne.w	r3, r3, #1
 800a2c2:	4281      	cmp	r1, r0
 800a2c4:	bf0c      	ite	eq
 800a2c6:	2300      	moveq	r3, #0
 800a2c8:	f003 0301 	andne.w	r3, r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f040 823f 	bne.w	800a750 <HAL_RCCEx_PeriphCLKConfig+0x5a8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2d2:	4a0b      	ldr	r2, [pc, #44]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x158>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2d6:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a2d8:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2da:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a2de:	6411      	str	r1, [r2, #64]	; 0x40
 800a2e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a2e2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2f0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a2f2:	f7fb f84f 	bl	8005394 <HAL_GetTick>
 800a2f6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a2f8:	e015      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a2fa:	bf00      	nop
 800a2fc:	1dfffff9 	.word	0x1dfffff9
 800a300:	40023800 	.word	0x40023800
 800a304:	00020300 	.word	0x00020300
 800a308:	00040300 	.word	0x00040300
 800a30c:	00140300 	.word	0x00140300
 800a310:	40007000 	.word	0x40007000
 800a314:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a318:	f7fb f83c 	bl	8005394 <HAL_GetTick>
 800a31c:	eba0 0008 	sub.w	r0, r0, r8
 800a320:	2864      	cmp	r0, #100	; 0x64
 800a322:	f200 8211 	bhi.w	800a748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	05d8      	lsls	r0, r3, #23
 800a32a:	d5f5      	bpl.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a32c:	4ac4      	ldr	r2, [pc, #784]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a32e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a330:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a332:	f403 7040 	and.w	r0, r3, #768	; 0x300

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a336:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 800a33a:	d011      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a33c:	4281      	cmp	r1, r0
 800a33e:	d00f      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a340:	6f11      	ldr	r1, [r2, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a342:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a344:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800a348:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 800a34c:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a34e:	6f17      	ldr	r7, [r2, #112]	; 0x70
 800a350:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 800a354:	6717      	str	r7, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a356:	6711      	str	r1, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a358:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a35a:	07c9      	lsls	r1, r1, #31
 800a35c:	f100 8388 	bmi.w	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a360:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800a364:	f000 82a4 	beq.w	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a368:	49b5      	ldr	r1, [pc, #724]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a36a:	688a      	ldr	r2, [r1, #8]
 800a36c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a370:	608a      	str	r2, [r1, #8]
 800a372:	4ab3      	ldr	r2, [pc, #716]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a378:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a37a:	430b      	orrs	r3, r1
 800a37c:	6713      	str	r3, [r2, #112]	; 0x70
 800a37e:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a380:	06df      	lsls	r7, r3, #27
 800a382:	d510      	bpl.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800a384:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800a386:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800a38a:	f040 82a8 	bne.w	800a8de <HAL_RCCEx_PeriphCLKConfig+0x736>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a38e:	4aac      	ldr	r2, [pc, #688]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a390:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800a394:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800a398:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800a39c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800a3a0:	4339      	orrs	r1, r7
 800a3a2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3a6:	0458      	lsls	r0, r3, #17
 800a3a8:	d50f      	bpl.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800a3aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a3ac:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800a3b0:	d003      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a3b2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a3b6:	f040 8264 	bne.w	800a882 <HAL_RCCEx_PeriphCLKConfig+0x6da>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3ba:	48a1      	ldr	r0, [pc, #644]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a3bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a3c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3ca:	0419      	lsls	r1, r3, #16
 800a3cc:	d50f      	bpl.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800a3ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a3d0:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800a3d4:	d003      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x236>
 800a3d6:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800a3da:	f040 8259 	bne.w	800a890 <HAL_RCCEx_PeriphCLKConfig+0x6e8>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3de:	4898      	ldr	r0, [pc, #608]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a3e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a3e4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3ee:	03da      	lsls	r2, r3, #15
 800a3f0:	d50f      	bpl.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800a3f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a3f4:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800a3f8:	d003      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a3fa:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a3fe:	f040 824f 	bne.w	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a402:	488f      	ldr	r0, [pc, #572]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a404:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a408:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a40c:	430a      	orrs	r2, r1
 800a40e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a412:	039f      	lsls	r7, r3, #14
 800a414:	d50f      	bpl.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800a416:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a418:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800a41c:	d003      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800a41e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a422:	f040 8226 	bne.w	800a872 <HAL_RCCEx_PeriphCLKConfig+0x6ca>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a426:	4886      	ldr	r0, [pc, #536]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a428:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a42c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800a430:	430a      	orrs	r2, r1
 800a432:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a436:	0658      	lsls	r0, r3, #25
 800a438:	d50b      	bpl.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800a43a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a43c:	2903      	cmp	r1, #3
 800a43e:	f200 8290 	bhi.w	800a962 <HAL_RCCEx_PeriphCLKConfig+0x7ba>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a442:	487f      	ldr	r0, [pc, #508]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a444:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a448:	f022 0203 	bic.w	r2, r2, #3
 800a44c:	430a      	orrs	r2, r1
 800a44e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a452:	0619      	lsls	r1, r3, #24
 800a454:	d50c      	bpl.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800a456:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a458:	f031 020c 	bics.w	r2, r1, #12
 800a45c:	f040 828f 	bne.w	800a97e <HAL_RCCEx_PeriphCLKConfig+0x7d6>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a460:	4877      	ldr	r0, [pc, #476]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a462:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a466:	f022 020c 	bic.w	r2, r2, #12
 800a46a:	430a      	orrs	r2, r1
 800a46c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a470:	05da      	lsls	r2, r3, #23
 800a472:	d50c      	bpl.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800a474:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a476:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800a47a:	f040 8288 	bne.w	800a98e <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a47e:	4870      	ldr	r0, [pc, #448]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a480:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a484:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a488:	430a      	orrs	r2, r1
 800a48a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a48e:	059f      	lsls	r7, r3, #22
 800a490:	d50c      	bpl.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800a492:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a494:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800a498:	f040 8291 	bne.w	800a9be <HAL_RCCEx_PeriphCLKConfig+0x816>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a49c:	4868      	ldr	r0, [pc, #416]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a49e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a4a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4ac:	0558      	lsls	r0, r3, #21
 800a4ae:	d50c      	bpl.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800a4b0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a4b2:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800a4b6:	f040 828a 	bne.w	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x826>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4ba:	4861      	ldr	r0, [pc, #388]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4bc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a4c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4ca:	0519      	lsls	r1, r3, #20
 800a4cc:	d50c      	bpl.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800a4ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a4d0:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800a4d4:	f040 8283 	bne.w	800a9de <HAL_RCCEx_PeriphCLKConfig+0x836>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4d8:	4859      	ldr	r0, [pc, #356]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a4de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4e8:	04da      	lsls	r2, r3, #19
 800a4ea:	d50c      	bpl.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800a4ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a4ee:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800a4f2:	f040 827c 	bne.w	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x846>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a4f6:	4852      	ldr	r0, [pc, #328]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a4f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a4fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a500:	430a      	orrs	r2, r1
 800a502:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a506:	049f      	lsls	r7, r3, #18
 800a508:	d50c      	bpl.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800a50a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800a50c:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800a510:	f040 824d 	bne.w	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a514:	484a      	ldr	r0, [pc, #296]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a516:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a51a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a51e:	430a      	orrs	r2, r1
 800a520:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a524:	0258      	lsls	r0, r3, #9
 800a526:	d50c      	bpl.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800a528:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a52a:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800a52e:	f040 81dd 	bne.w	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a532:	4843      	ldr	r0, [pc, #268]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a534:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a538:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800a53c:	430a      	orrs	r2, r1
 800a53e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a542:	0299      	lsls	r1, r3, #10
 800a544:	d510      	bpl.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800a546:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a548:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800a54c:	f040 81d6 	bne.w	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x754>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a550:	483b      	ldr	r0, [pc, #236]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800a552:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a556:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800a55a:	bf08      	it	eq
 800a55c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a55e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800a562:	430a      	orrs	r2, r1
 800a564:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800a568:	f013 0f08 	tst.w	r3, #8
 800a56c:	bf18      	it	ne
 800a56e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a570:	035a      	lsls	r2, r3, #13
 800a572:	d50c      	bpl.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800a574:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a576:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800a57a:	f040 8210 	bne.w	800a99e <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a57e:	4830      	ldr	r0, [pc, #192]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a580:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a584:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a588:	430a      	orrs	r2, r1
 800a58a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a58e:	021f      	lsls	r7, r3, #8
 800a590:	d50d      	bpl.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800a592:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a596:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800a59a:	f040 81b7 	bne.w	800a90c <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a59e:	4828      	ldr	r0, [pc, #160]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5a0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a5a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a5ae:	0158      	lsls	r0, r3, #5
 800a5b0:	d50d      	bpl.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800a5b2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a5b6:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800a5ba:	f040 81b0 	bne.w	800a91e <HAL_RCCEx_PeriphCLKConfig+0x776>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a5be:	4820      	ldr	r0, [pc, #128]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5c0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800a5c4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5ce:	0119      	lsls	r1, r3, #4
 800a5d0:	d50d      	bpl.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800a5d2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a5d6:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800a5da:	f040 81b1 	bne.w	800a940 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a5de:	4818      	ldr	r0, [pc, #96]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a5e0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a5e4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a5ee:	00da      	lsls	r2, r3, #3
 800a5f0:	d50d      	bpl.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800a5f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a5f6:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800a5fa:	f040 81aa 	bne.w	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a5fe:	4910      	ldr	r1, [pc, #64]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a600:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800a604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a608:	4313      	orrs	r3, r2
 800a60a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a60e:	2e01      	cmp	r6, #1
 800a610:	f000 80a9 	beq.w	800a766 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a61a:	f000 80a4 	beq.w	800a766 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a61e:	2d01      	cmp	r5, #1
 800a620:	d003      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x482>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800a622:	2000      	movs	r0, #0
}
 800a624:	b003      	add	sp, #12
 800a626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800a62a:	4b05      	ldr	r3, [pc, #20]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a62c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a62e:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800a630:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a634:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a636:	f7fa fead 	bl	8005394 <HAL_GetTick>
 800a63a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a63c:	e007      	b.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a63e:	bf00      	nop
 800a640:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a644:	f7fa fea6 	bl	8005394 <HAL_GetTick>
 800a648:	1b80      	subs	r0, r0, r6
 800a64a:	2864      	cmp	r0, #100	; 0x64
 800a64c:	d87c      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	009f      	lsls	r7, r3, #2
 800a652:	d4f7      	bmi.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	3b32      	subs	r3, #50	; 0x32
 800a658:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800a65c:	d904      	bls.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800a65e:	f240 2146 	movw	r1, #582	; 0x246
 800a662:	48b3      	ldr	r0, [pc, #716]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a664:	f7f8 fb9a 	bl	8002d9c <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	031d      	lsls	r5, r3, #12
 800a66c:	d501      	bpl.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a66e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a670:	b11a      	cbz	r2, 800a67a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a672:	02d8      	lsls	r0, r3, #11
 800a674:	d526      	bpl.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a676:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a678:	bb22      	cbnz	r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800a67a:	69a3      	ldr	r3, [r4, #24]
 800a67c:	3b02      	subs	r3, #2
 800a67e:	2b0d      	cmp	r3, #13
 800a680:	f200 8259 	bhi.w	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800a684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a686:	1e59      	subs	r1, r3, #1
 800a688:	291f      	cmp	r1, #31
 800a68a:	f200 824c 	bhi.w	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a68e:	4aa9      	ldr	r2, [pc, #676]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a690:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a692:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a696:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a69a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a69e:	69a0      	ldr	r0, [r4, #24]
 800a6a0:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800a6a4:	4333      	orrs	r3, r6
 800a6a6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800a6aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a6ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a6b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800a6b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a6ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a6be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a6c2:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a6c4:	0299      	lsls	r1, r3, #10
 800a6c6:	d504      	bpl.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800a6c8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a6ca:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800a6ce:	f000 8215 	beq.w	800aafc <HAL_RCCEx_PeriphCLKConfig+0x954>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a6d2:	071a      	lsls	r2, r3, #28
 800a6d4:	d526      	bpl.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800a6d6:	69e3      	ldr	r3, [r4, #28]
 800a6d8:	3b02      	subs	r3, #2
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d904      	bls.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800a6de:	f240 2171 	movw	r1, #625	; 0x271
 800a6e2:	4893      	ldr	r0, [pc, #588]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a6e4:	f7f8 fb5a 	bl	8002d9c <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800a6e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a6ea:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800a6ee:	f040 8228 	bne.w	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6f2:	4a90      	ldr	r2, [pc, #576]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a6f4:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6f6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a6fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a6fe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800a702:	69e4      	ldr	r4, [r4, #28]
 800a704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a708:	430b      	orrs	r3, r1
 800a70a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800a70e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800a712:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a716:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800a71a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a71e:	4303      	orrs	r3, r0
 800a720:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800a724:	4b83      	ldr	r3, [pc, #524]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a726:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a728:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800a72a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a730:	f7fa fe30 	bl	8005394 <HAL_GetTick>
 800a734:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	f53f af72 	bmi.w	800a622 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a73e:	f7fa fe29 	bl	8005394 <HAL_GetTick>
 800a742:	1b40      	subs	r0, r0, r5
 800a744:	2864      	cmp	r0, #100	; 0x64
 800a746:	d9f6      	bls.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x58e>
        return HAL_TIMEOUT;
 800a748:	2003      	movs	r0, #3
}
 800a74a:	b003      	add	sp, #12
 800a74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a750:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a754:	4b78      	ldr	r3, [pc, #480]	; (800a938 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 800a756:	429a      	cmp	r2, r3
 800a758:	f43f adbb 	beq.w	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800a75c:	21b9      	movs	r1, #185	; 0xb9
 800a75e:	4874      	ldr	r0, [pc, #464]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a760:	f7f8 fb1c 	bl	8002d9c <assert_failed>
 800a764:	e5b5      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_PLLI2S_DISABLE();
 800a766:	4b73      	ldr	r3, [pc, #460]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a768:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a76a:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800a76c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800a770:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a772:	f7fa fe0f 	bl	8005394 <HAL_GetTick>
 800a776:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a778:	e004      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a77a:	f7fa fe0b 	bl	8005394 <HAL_GetTick>
 800a77e:	1bc0      	subs	r0, r0, r7
 800a780:	2864      	cmp	r0, #100	; 0x64
 800a782:	d8e1      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a784:	6833      	ldr	r3, [r6, #0]
 800a786:	011b      	lsls	r3, r3, #4
 800a788:	d4f7      	bmi.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800a78a:	6863      	ldr	r3, [r4, #4]
 800a78c:	3b32      	subs	r3, #50	; 0x32
 800a78e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800a792:	f200 80ee 	bhi.w	800a972 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	07df      	lsls	r7, r3, #31
 800a79a:	d503      	bpl.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800a79c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	f000 8150 	beq.w	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a7a4:	031e      	lsls	r6, r3, #12
 800a7a6:	d504      	bpl.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800a7a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a7aa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800a7ae:	f000 8126 	beq.w	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x856>
 800a7b2:	02d8      	lsls	r0, r3, #11
 800a7b4:	d504      	bpl.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x618>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a7b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a7b8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a7bc:	f000 811f 	beq.w	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x856>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7c0:	01d9      	lsls	r1, r3, #7
 800a7c2:	d514      	bpl.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x646>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800a7c4:	6927      	ldr	r7, [r4, #16]
 800a7c6:	2f03      	cmp	r7, #3
 800a7c8:	f200 8175 	bhi.w	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7cc:	4959      	ldr	r1, [pc, #356]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a7ce:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a7d0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a7d4:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a7d8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800a7dc:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800a7e0:	4332      	orrs	r2, r6
 800a7e2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800a7e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a7ea:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a7ee:	019a      	lsls	r2, r3, #6
 800a7f0:	d51a      	bpl.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x680>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	f200 8173 	bhi.w	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x938>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	3b02      	subs	r3, #2
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	f200 8168 	bhi.w	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800a804:	68e2      	ldr	r2, [r4, #12]
 800a806:	1e93      	subs	r3, r2, #2
 800a808:	2b0d      	cmp	r3, #13
 800a80a:	f200 815c 	bhi.w	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	6861      	ldr	r1, [r4, #4]
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	68a0      	ldr	r0, [r4, #8]
 800a816:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800a81a:	4946      	ldr	r1, [pc, #280]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a81c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800a820:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800a828:	4b42      	ldr	r3, [pc, #264]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a82a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a82c:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800a82e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a832:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800a834:	f7fa fdae 	bl	8005394 <HAL_GetTick>
 800a838:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a83a:	e004      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a83c:	f7fa fdaa 	bl	8005394 <HAL_GetTick>
 800a840:	1bc0      	subs	r0, r0, r7
 800a842:	2864      	cmp	r0, #100	; 0x64
 800a844:	d880      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a846:	6833      	ldr	r3, [r6, #0]
 800a848:	011b      	lsls	r3, r3, #4
 800a84a:	d5f7      	bpl.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800a84c:	e6e7      	b.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x476>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a84e:	2174      	movs	r1, #116	; 0x74
 800a850:	4837      	ldr	r0, [pc, #220]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a852:	f7f8 faa3 	bl	8002d9c <assert_failed>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	e4b0      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 800a85a:	2500      	movs	r5, #0
      plli2sused = 1;
 800a85c:	2601      	movs	r6, #1
 800a85e:	e4d8      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 800a860:	2601      	movs	r6, #1
 800a862:	e4ed      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800a864:	217a      	movs	r1, #122	; 0x7a
 800a866:	4832      	ldr	r0, [pc, #200]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a868:	f7f8 fa98 	bl	8002d9c <assert_failed>
 800a86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	e4ac      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800a872:	f240 111b 	movw	r1, #283	; 0x11b
 800a876:	482e      	ldr	r0, [pc, #184]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a878:	f7f8 fa90 	bl	8002d9c <assert_failed>
 800a87c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	e5d1      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800a882:	21fd      	movs	r1, #253	; 0xfd
 800a884:	482a      	ldr	r0, [pc, #168]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a886:	f7f8 fa89 	bl	8002d9c <assert_failed>
 800a88a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	e594      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x212>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800a890:	f240 1107 	movw	r1, #263	; 0x107
 800a894:	4826      	ldr	r0, [pc, #152]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a896:	f7f8 fa81 	bl	8002d9c <assert_failed>
 800a89a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	e59e      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800a8a0:	f240 1111 	movw	r1, #273	; 0x111
 800a8a4:	4822      	ldr	r0, [pc, #136]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8a6:	f7f8 fa79 	bl	8002d9c <assert_failed>
 800a8aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	e5a8      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8b0:	4820      	ldr	r0, [pc, #128]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800a8b2:	4922      	ldr	r1, [pc, #136]	; (800a93c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800a8b4:	6882      	ldr	r2, [r0, #8]
 800a8b6:	4019      	ands	r1, r3
 800a8b8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	6082      	str	r2, [r0, #8]
 800a8c0:	e557      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800a8c2:	219e      	movs	r1, #158	; 0x9e
 800a8c4:	481a      	ldr	r0, [pc, #104]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8c6:	f7f8 fa69 	bl	8002d9c <assert_failed>
 800a8ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	e4a7      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800a8d0:	218a      	movs	r1, #138	; 0x8a
 800a8d2:	4817      	ldr	r0, [pc, #92]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8d4:	f7f8 fa62 	bl	8002d9c <assert_failed>
 800a8d8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	e489      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800a8de:	21f3      	movs	r1, #243	; 0xf3
 800a8e0:	4813      	ldr	r0, [pc, #76]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8e2:	f7f8 fa5b 	bl	8002d9c <assert_failed>
 800a8e6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	e550      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800a8ec:	f240 1175 	movw	r1, #373	; 0x175
 800a8f0:	480f      	ldr	r0, [pc, #60]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a8f2:	f7f8 fa53 	bl	8002d9c <assert_failed>
 800a8f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	e61a      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800a8fc:	f240 117f 	movw	r1, #383	; 0x17f
 800a900:	480b      	ldr	r0, [pc, #44]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a902:	f7f8 fa4b 	bl	8002d9c <assert_failed>
 800a906:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	e621      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800a90c:	f240 11a1 	movw	r1, #417	; 0x1a1
 800a910:	4807      	ldr	r0, [pc, #28]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a912:	f7f8 fa43 	bl	8002d9c <assert_failed>
 800a916:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	e63f      	b.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800a91e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800a922:	4803      	ldr	r0, [pc, #12]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800a924:	f7f8 fa3a 	bl	8002d9c <assert_failed>
 800a928:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	e646      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a930:	08026364 	.word	0x08026364
 800a934:	40023800 	.word	0x40023800
 800a938:	001c0300 	.word	0x001c0300
 800a93c:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800a940:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800a944:	4886      	ldr	r0, [pc, #536]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a946:	f7f8 fa29 	bl	8002d9c <assert_failed>
 800a94a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	e645      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800a952:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800a956:	4882      	ldr	r0, [pc, #520]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a958:	f7f8 fa20 	bl	8002d9c <assert_failed>
 800a95c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a960:	e64d      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x456>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800a962:	f240 1125 	movw	r1, #293	; 0x125
 800a966:	487e      	ldr	r0, [pc, #504]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a968:	f7f8 fa18 	bl	8002d9c <assert_failed>
 800a96c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	e567      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800a972:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800a976:	487a      	ldr	r0, [pc, #488]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a978:	f7f8 fa10 	bl	8002d9c <assert_failed>
 800a97c:	e70b      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800a97e:	f240 112f 	movw	r1, #303	; 0x12f
 800a982:	4877      	ldr	r0, [pc, #476]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a984:	f7f8 fa0a 	bl	8002d9c <assert_failed>
 800a988:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	e568      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800a98e:	f240 1139 	movw	r1, #313	; 0x139
 800a992:	4873      	ldr	r0, [pc, #460]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a994:	f7f8 fa02 	bl	8002d9c <assert_failed>
 800a998:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	e56f      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800a99e:	f240 1197 	movw	r1, #407	; 0x197
 800a9a2:	486f      	ldr	r0, [pc, #444]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9a4:	f7f8 f9fa 	bl	8002d9c <assert_failed>
 800a9a8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	e5e7      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800a9ae:	f240 116b 	movw	r1, #363	; 0x16b
 800a9b2:	486b      	ldr	r0, [pc, #428]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9b4:	f7f8 f9f2 	bl	8002d9c <assert_failed>
 800a9b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	e5aa      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800a9be:	f240 1143 	movw	r1, #323	; 0x143
 800a9c2:	4867      	ldr	r0, [pc, #412]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9c4:	f7f8 f9ea 	bl	8002d9c <assert_failed>
 800a9c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	e566      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800a9ce:	f240 114d 	movw	r1, #333	; 0x14d
 800a9d2:	4863      	ldr	r0, [pc, #396]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9d4:	f7f8 f9e2 	bl	8002d9c <assert_failed>
 800a9d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	e56d      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800a9de:	f240 1157 	movw	r1, #343	; 0x157
 800a9e2:	485f      	ldr	r0, [pc, #380]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9e4:	f7f8 f9da 	bl	8002d9c <assert_failed>
 800a9e8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	e574      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800a9ee:	f240 1161 	movw	r1, #353	; 0x161
 800a9f2:	485b      	ldr	r0, [pc, #364]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9f4:	f7f8 f9d2 	bl	8002d9c <assert_failed>
 800a9f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	e57b      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	3b02      	subs	r3, #2
 800aa02:	2b0d      	cmp	r3, #13
 800aa04:	d851      	bhi.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x902>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800aa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa08:	1e5e      	subs	r6, r3, #1
 800aa0a:	2e1f      	cmp	r6, #31
 800aa0c:	d845      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa0e:	4a55      	ldr	r2, [pc, #340]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa10:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa12:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aa16:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aa1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa1e:	68e1      	ldr	r1, [r4, #12]
 800aa20:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800aa24:	433b      	orrs	r3, r7
 800aa26:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800aa2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800aa2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aa32:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800aa36:	f023 031f 	bic.w	r3, r3, #31
 800aa3a:	4333      	orrs	r3, r6
 800aa3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	e6bd      	b.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x618>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800aa44:	68a7      	ldr	r7, [r4, #8]
 800aa46:	1eba      	subs	r2, r7, #2
 800aa48:	2a05      	cmp	r2, #5
 800aa4a:	d84f      	bhi.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x944>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa4c:	4945      	ldr	r1, [pc, #276]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa4e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aa50:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aa54:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa58:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800aa5c:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800aa60:	4332      	orrs	r2, r6
 800aa62:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800aa66:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800aa6a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800aa6e:	e699      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa70:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa72:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800aa76:	f7fa fc8d 	bl	8005394 <HAL_GetTick>
 800aa7a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa7c:	e006      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa7e:	f7fa fc89 	bl	8005394 <HAL_GetTick>
 800aa82:	eba0 0009 	sub.w	r0, r0, r9
 800aa86:	4540      	cmp	r0, r8
 800aa88:	f63f ae5e 	bhi.w	800a748 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa8e:	079b      	lsls	r3, r3, #30
 800aa90:	d5f5      	bpl.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 800aa92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa94:	f403 7040 	and.w	r0, r3, #768	; 0x300
 800aa98:	e462      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800aa9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800aa9e:	4830      	ldr	r0, [pc, #192]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aaa0:	f7f8 f97c 	bl	8002d9c <assert_failed>
 800aaa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa6:	1e5e      	subs	r6, r3, #1
 800aaa8:	e7b1      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x866>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800aaaa:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800aaae:	482c      	ldr	r0, [pc, #176]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aab0:	f7f8 f974 	bl	8002d9c <assert_failed>
 800aab4:	e7a7      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x85e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800aab6:	f240 2107 	movw	r1, #519	; 0x207
 800aaba:	4829      	ldr	r0, [pc, #164]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aabc:	f7f8 f96e 	bl	8002d9c <assert_failed>
 800aac0:	6927      	ldr	r7, [r4, #16]
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	e682      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x624>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800aac6:	f44f 7106 	mov.w	r1, #536	; 0x218
 800aaca:	4825      	ldr	r0, [pc, #148]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aacc:	f7f8 f966 	bl	8002d9c <assert_failed>
 800aad0:	68e2      	ldr	r2, [r4, #12]
 800aad2:	e69c      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800aad4:	f240 2117 	movw	r1, #535	; 0x217
 800aad8:	4821      	ldr	r0, [pc, #132]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aada:	f7f8 f95f 	bl	8002d9c <assert_failed>
 800aade:	e691      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800aae0:	f240 2116 	movw	r1, #534	; 0x216
 800aae4:	481e      	ldr	r0, [pc, #120]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aae6:	f7f8 f959 	bl	8002d9c <assert_failed>
 800aaea:	e686      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800aaec:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800aaf0:	481b      	ldr	r0, [pc, #108]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aaf2:	f7f8 f953 	bl	8002d9c <assert_failed>
 800aaf6:	68a7      	ldr	r7, [r4, #8]
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	e7a7      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800aafc:	6a26      	ldr	r6, [r4, #32]
 800aafe:	2e03      	cmp	r6, #3
 800ab00:	d826      	bhi.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ab02:	4918      	ldr	r1, [pc, #96]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ab04:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ab06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ab0a:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ab0e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800ab12:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800ab16:	4302      	orrs	r2, r0
 800ab18:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800ab1c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800ab20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800ab24:	e5d5      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800ab26:	f240 214f 	movw	r1, #591	; 0x24f
 800ab2a:	480d      	ldr	r0, [pc, #52]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab2c:	f7f8 f936 	bl	8002d9c <assert_failed>
 800ab30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ab32:	1e59      	subs	r1, r3, #1
 800ab34:	e5ab      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800ab36:	f240 214d 	movw	r1, #589	; 0x24d
 800ab3a:	4809      	ldr	r0, [pc, #36]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab3c:	f7f8 f92e 	bl	8002d9c <assert_failed>
 800ab40:	e5a0      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800ab42:	4807      	ldr	r0, [pc, #28]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab44:	f240 2172 	movw	r1, #626	; 0x272
 800ab48:	f7f8 f928 	bl	8002d9c <assert_failed>
 800ab4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ab4e:	e5d0      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800ab50:	f240 2162 	movw	r1, #610	; 0x262
 800ab54:	4802      	ldr	r0, [pc, #8]	; (800ab60 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab56:	f7f8 f921 	bl	8002d9c <assert_failed>
 800ab5a:	6a26      	ldr	r6, [r4, #32]
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	e7d0      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800ab60:	08026364 	.word	0x08026364
 800ab64:	40023800 	.word	0x40023800

0800ab68 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ab68:	b1f8      	cbz	r0, 800abaa <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800ab6a:	6802      	ldr	r2, [r0, #0]
{
 800ab6c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800ab6e:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <HAL_RNG_Init+0x48>)
 800ab70:	4604      	mov	r4, r0
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d003      	beq.n	800ab7e <HAL_RNG_Init+0x16>
 800ab76:	21a3      	movs	r1, #163	; 0xa3
 800ab78:	480e      	ldr	r0, [pc, #56]	; (800abb4 <HAL_RNG_Init+0x4c>)
 800ab7a:	f7f8 f90f 	bl	8002d9c <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ab7e:	7963      	ldrb	r3, [r4, #5]
 800ab80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab84:	b163      	cbz	r3, 800aba0 <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ab86:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800ab88:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ab8a:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800ab8c:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800ab8e:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800ab90:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800ab92:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800ab94:	f043 0304 	orr.w	r3, r3, #4
 800ab98:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800ab9a:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ab9c:	60a2      	str	r2, [r4, #8]
}
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800aba0:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7f9 f91a 	bl	8003ddc <HAL_RNG_MspInit>
 800aba8:	e7ed      	b.n	800ab86 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800abaa:	2001      	movs	r0, #1
}
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	50060800 	.word	0x50060800
 800abb4:	080263a0 	.word	0x080263a0

0800abb8 <SPI_WaitFifoStateUntilTimeout.part.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800abb8:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abba:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abbe:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abc0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abc4:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800abc8:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abca:	d013      	beq.n	800abf4 <SPI_WaitFifoStateUntilTimeout.part.1+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abcc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800abce:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800abd2:	d107      	bne.n	800abe4 <SPI_WaitFifoStateUntilTimeout.part.1+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800abd4:	6811      	ldr	r1, [r2, #0]
 800abd6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800abda:	6011      	str	r1, [r2, #0]
 800abdc:	6811      	ldr	r1, [r2, #0]
 800abde:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800abe2:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abe4:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abe6:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800abe8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800abea:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800abee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800abf2:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abf4:	6899      	ldr	r1, [r3, #8]
 800abf6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800abfa:	d002      	beq.n	800ac02 <SPI_WaitFifoStateUntilTimeout.part.1+0x4a>
 800abfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac00:	d1e4      	bne.n	800abcc <SPI_WaitFifoStateUntilTimeout.part.1+0x14>
          __HAL_SPI_DISABLE(hspi);
 800ac02:	6811      	ldr	r1, [r2, #0]
 800ac04:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800ac08:	6011      	str	r1, [r2, #0]
 800ac0a:	e7df      	b.n	800abcc <SPI_WaitFifoStateUntilTimeout.part.1+0x14>

0800ac0c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	4605      	mov	r5, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	e001      	b.n	800ac1c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800ac18:	1c62      	adds	r2, r4, #1
 800ac1a:	d104      	bne.n	800ac26 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac1c:	6898      	ldr	r0, [r3, #8]
 800ac1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac22:	d1f9      	bne.n	800ac18 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
}
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ac26:	f7fa fbb5 	bl	8005394 <HAL_GetTick>
 800ac2a:	1b80      	subs	r0, r0, r6
 800ac2c:	4284      	cmp	r4, r0
 800ac2e:	d8f1      	bhi.n	800ac14 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x8>
 800ac30:	4628      	mov	r0, r5
}
 800ac32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac36:	f7ff bfbf 	b.w	800abb8 <SPI_WaitFifoStateUntilTimeout.part.1>
 800ac3a:	bf00      	nop

0800ac3c <SPI_WaitFifoStateUntilTimeout.constprop.10>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460c      	mov	r4, r1
 800ac42:	4615      	mov	r5, r2
 800ac44:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800ac46:	6831      	ldr	r1, [r6, #0]
 800ac48:	e005      	b.n	800ac56 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ac4a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800ac4e:	d100      	bne.n	800ac52 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ac50:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ac52:	1c6b      	adds	r3, r5, #1
 800ac54:	d103      	bne.n	800ac5e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x22>
  while ((hspi->Instance->SR & Fifo) != State)
 800ac56:	6888      	ldr	r0, [r1, #8]
 800ac58:	4020      	ands	r0, r4
 800ac5a:	d1f6      	bne.n	800ac4a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
      }
    }
  }

  return HAL_OK;
}
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ac5e:	f7fa fb99 	bl	8005394 <HAL_GetTick>
 800ac62:	1bc0      	subs	r0, r0, r7
 800ac64:	4285      	cmp	r5, r0
 800ac66:	d8ee      	bhi.n	800ac46 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xa>
 800ac68:	4630      	mov	r0, r6
}
 800ac6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac6e:	f7ff bfa3 	b.w	800abb8 <SPI_WaitFifoStateUntilTimeout.part.1>
 800ac72:	bf00      	nop

0800ac74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	460d      	mov	r5, r1
 800ac78:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ac80:	462a      	mov	r2, r5
{
 800ac82:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac84:	f7ff ffda 	bl	800ac3c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800ac88:	b970      	cbnz	r0, 800aca8 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac8a:	4632      	mov	r2, r6
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f7ff ffbc 	bl	800ac0c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 800ac94:	b940      	cbnz	r0, 800aca8 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac96:	4633      	mov	r3, r6
 800ac98:	462a      	mov	r2, r5
 800ac9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7ff ffcc 	bl	800ac3c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800aca4:	b900      	cbnz	r0, 800aca8 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aca8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800acaa:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acac:	f043 0320 	orr.w	r3, r3, #32
 800acb0:	6623      	str	r3, [r4, #96]	; 0x60
}
 800acb2:	bd70      	pop	{r4, r5, r6, pc}

0800acb4 <HAL_SPI_Init>:
  if (hspi == NULL)
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f000 80f9 	beq.w	800aeac <HAL_SPI_Init+0x1f8>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800acba:	6802      	ldr	r2, [r0, #0]
 800acbc:	4b94      	ldr	r3, [pc, #592]	; (800af10 <HAL_SPI_Init+0x25c>)
 800acbe:	4995      	ldr	r1, [pc, #596]	; (800af14 <HAL_SPI_Init+0x260>)
 800acc0:	429a      	cmp	r2, r3
 800acc2:	bf18      	it	ne
 800acc4:	428a      	cmpne	r2, r1
 800acc6:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800acca:	bf14      	ite	ne
 800accc:	2301      	movne	r3, #1
 800acce:	2300      	moveq	r3, #0
{
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800acd4:	4d90      	ldr	r5, [pc, #576]	; (800af18 <HAL_SPI_Init+0x264>)
 800acd6:	4604      	mov	r4, r0
 800acd8:	4890      	ldr	r0, [pc, #576]	; (800af1c <HAL_SPI_Init+0x268>)
 800acda:	42aa      	cmp	r2, r5
 800acdc:	bf0c      	ite	eq
 800acde:	2300      	moveq	r3, #0
 800ace0:	f003 0301 	andne.w	r3, r3, #1
 800ace4:	4282      	cmp	r2, r0
 800ace6:	bf0c      	ite	eq
 800ace8:	2300      	moveq	r3, #0
 800acea:	f003 0301 	andne.w	r3, r3, #1
 800acee:	428a      	cmp	r2, r1
 800acf0:	bf0c      	ite	eq
 800acf2:	2300      	moveq	r3, #0
 800acf4:	f003 0301 	andne.w	r3, r3, #1
 800acf8:	b11b      	cbz	r3, 800ad02 <HAL_SPI_Init+0x4e>
 800acfa:	4b89      	ldr	r3, [pc, #548]	; (800af20 <HAL_SPI_Init+0x26c>)
 800acfc:	429a      	cmp	r2, r3
 800acfe:	f040 80ee 	bne.w	800aede <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ad02:	6863      	ldr	r3, [r4, #4]
 800ad04:	b13b      	cbz	r3, 800ad16 <HAL_SPI_Init+0x62>
 800ad06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad0a:	d004      	beq.n	800ad16 <HAL_SPI_Init+0x62>
 800ad0c:	f240 1145 	movw	r1, #325	; 0x145
 800ad10:	4884      	ldr	r0, [pc, #528]	; (800af24 <HAL_SPI_Init+0x270>)
 800ad12:	f7f8 f843 	bl	8002d9c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800ad1c:	d003      	beq.n	800ad26 <HAL_SPI_Init+0x72>
 800ad1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad22:	f040 80c5 	bne.w	800aeb0 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800ad26:	68e2      	ldr	r2, [r4, #12]
 800ad28:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800ad2c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800ad30:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800ad34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad38:	bf18      	it	ne
 800ad3a:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800ad3e:	bf14      	ite	ne
 800ad40:	2301      	movne	r3, #1
 800ad42:	2300      	moveq	r3, #0
 800ad44:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ad48:	bf0c      	ite	eq
 800ad4a:	2300      	moveq	r3, #0
 800ad4c:	f003 0301 	andne.w	r3, r3, #1
 800ad50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad54:	bf0c      	ite	eq
 800ad56:	2300      	moveq	r3, #0
 800ad58:	f003 0301 	andne.w	r3, r3, #1
 800ad5c:	b12b      	cbz	r3, 800ad6a <HAL_SPI_Init+0xb6>
 800ad5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad62:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ad66:	f040 80cc 	bne.w	800af02 <HAL_SPI_Init+0x24e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800ad6a:	69a3      	ldr	r3, [r4, #24]
 800ad6c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800ad70:	d003      	beq.n	800ad7a <HAL_SPI_Init+0xc6>
 800ad72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad76:	f040 80a1 	bne.w	800aebc <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ad7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad7c:	f033 0308 	bics.w	r3, r3, #8
 800ad80:	d17f      	bne.n	800ae82 <HAL_SPI_Init+0x1ce>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ad82:	69e3      	ldr	r3, [r4, #28]
 800ad84:	f023 0318 	bic.w	r3, r3, #24
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	d002      	beq.n	800ad92 <HAL_SPI_Init+0xde>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f040 80b2 	bne.w	800aef6 <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800ad92:	6a23      	ldr	r3, [r4, #32]
 800ad94:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ad98:	d169      	bne.n	800ae6e <HAL_SPI_Init+0x1ba>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ad9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad9c:	f033 0210 	bics.w	r2, r3, #16
 800ada0:	d17b      	bne.n	800ae9a <HAL_SPI_Init+0x1e6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ada2:	b943      	cbnz	r3, 800adb6 <HAL_SPI_Init+0x102>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	f033 0302 	bics.w	r3, r3, #2
 800adaa:	f040 809e 	bne.w	800aeea <HAL_SPI_Init+0x236>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800adae:	6963      	ldr	r3, [r4, #20]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	f200 808e 	bhi.w	800aed2 <HAL_SPI_Init+0x21e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adb6:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800adb8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adbc:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800adbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d04d      	beq.n	800ae62 <HAL_SPI_Init+0x1ae>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adc6:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800adc8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800adca:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800adcc:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800add0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800add4:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800add8:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800adda:	bf94      	ite	ls
 800addc:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 800ade0:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 800ade2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ade6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800adea:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800adec:	d135      	bne.n	800ae5a <HAL_SPI_Init+0x1a6>
 800adee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800adf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800adf2:	b92b      	cbnz	r3, 800ae00 <HAL_SPI_Init+0x14c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adf4:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800adf8:	bf8c      	ite	hi
 800adfa:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800adfc:	2301      	movls	r3, #1
 800adfe:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae00:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae02:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	6920      	ldr	r0, [r4, #16]
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6961      	ldr	r1, [r4, #20]
 800ae0e:	4303      	orrs	r3, r0
 800ae10:	430b      	orrs	r3, r1
 800ae12:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800ae16:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae1a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae1e:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae22:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae24:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae26:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800ae2a:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae2c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae30:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae32:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 800ae36:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae3a:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae3e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae40:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae42:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae44:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae46:	69d3      	ldr	r3, [r2, #28]
 800ae48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae4c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae4e:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ae52:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 800ae56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	461e      	mov	r6, r3
 800ae5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae60:	e7c6      	b.n	800adf0 <HAL_SPI_Init+0x13c>
    hspi->Lock = HAL_UNLOCKED;
 800ae62:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7f8 ffce 	bl	8003e08 <HAL_SPI_MspInit>
 800ae6c:	e7ab      	b.n	800adc6 <HAL_SPI_Init+0x112>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800ae6e:	f240 114b 	movw	r1, #331	; 0x14b
 800ae72:	482c      	ldr	r0, [pc, #176]	; (800af24 <HAL_SPI_Init+0x270>)
 800ae74:	f7f7 ff92 	bl	8002d9c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ae78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae7a:	f033 0210 	bics.w	r2, r3, #16
 800ae7e:	d090      	beq.n	800ada2 <HAL_SPI_Init+0xee>
 800ae80:	e00b      	b.n	800ae9a <HAL_SPI_Init+0x1e6>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ae82:	f240 1149 	movw	r1, #329	; 0x149
 800ae86:	4827      	ldr	r0, [pc, #156]	; (800af24 <HAL_SPI_Init+0x270>)
 800ae88:	f7f7 ff88 	bl	8002d9c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ae8c:	69e3      	ldr	r3, [r4, #28]
 800ae8e:	f023 0318 	bic.w	r3, r3, #24
 800ae92:	2b20      	cmp	r3, #32
 800ae94:	f47f af7a 	bne.w	800ad8c <HAL_SPI_Init+0xd8>
 800ae98:	e77b      	b.n	800ad92 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ae9a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800ae9e:	4821      	ldr	r0, [pc, #132]	; (800af24 <HAL_SPI_Init+0x270>)
 800aea0:	f7f7 ff7c 	bl	8002d9c <assert_failed>
 800aea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d185      	bne.n	800adb6 <HAL_SPI_Init+0x102>
 800aeaa:	e77b      	b.n	800ada4 <HAL_SPI_Init+0xf0>
    return HAL_ERROR;
 800aeac:	2001      	movs	r0, #1
}
 800aeae:	4770      	bx	lr
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800aeb0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800aeb4:	481b      	ldr	r0, [pc, #108]	; (800af24 <HAL_SPI_Init+0x270>)
 800aeb6:	f7f7 ff71 	bl	8002d9c <assert_failed>
 800aeba:	e734      	b.n	800ad26 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800aebc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800aec0:	4818      	ldr	r0, [pc, #96]	; (800af24 <HAL_SPI_Init+0x270>)
 800aec2:	f7f7 ff6b 	bl	8002d9c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800aec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aec8:	f033 0308 	bics.w	r3, r3, #8
 800aecc:	f43f af59 	beq.w	800ad82 <HAL_SPI_Init+0xce>
 800aed0:	e7d7      	b.n	800ae82 <HAL_SPI_Init+0x1ce>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800aed2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800aed6:	4813      	ldr	r0, [pc, #76]	; (800af24 <HAL_SPI_Init+0x270>)
 800aed8:	f7f7 ff60 	bl	8002d9c <assert_failed>
 800aedc:	e76b      	b.n	800adb6 <HAL_SPI_Init+0x102>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800aede:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800aee2:	4810      	ldr	r0, [pc, #64]	; (800af24 <HAL_SPI_Init+0x270>)
 800aee4:	f7f7 ff5a 	bl	8002d9c <assert_failed>
 800aee8:	e70b      	b.n	800ad02 <HAL_SPI_Init+0x4e>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800aeea:	f240 114f 	movw	r1, #335	; 0x14f
 800aeee:	480d      	ldr	r0, [pc, #52]	; (800af24 <HAL_SPI_Init+0x270>)
 800aef0:	f7f7 ff54 	bl	8002d9c <assert_failed>
 800aef4:	e75b      	b.n	800adae <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800aef6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800aefa:	480a      	ldr	r0, [pc, #40]	; (800af24 <HAL_SPI_Init+0x270>)
 800aefc:	f7f7 ff4e 	bl	8002d9c <assert_failed>
 800af00:	e747      	b.n	800ad92 <HAL_SPI_Init+0xde>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800af02:	f240 1147 	movw	r1, #327	; 0x147
 800af06:	4807      	ldr	r0, [pc, #28]	; (800af24 <HAL_SPI_Init+0x270>)
 800af08:	f7f7 ff48 	bl	8002d9c <assert_failed>
 800af0c:	e72d      	b.n	800ad6a <HAL_SPI_Init+0xb6>
 800af0e:	bf00      	nop
 800af10:	40013000 	.word	0x40013000
 800af14:	40003800 	.word	0x40003800
 800af18:	40003c00 	.word	0x40003c00
 800af1c:	40013400 	.word	0x40013400
 800af20:	40015400 	.word	0x40015400
 800af24:	080263d8 	.word	0x080263d8

0800af28 <HAL_SPI_Transmit>:
{
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800af2e:	6883      	ldr	r3, [r0, #8]
{
 800af30:	b082      	sub	sp, #8
 800af32:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800af34:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800af38:	4688      	mov	r8, r1
 800af3a:	4617      	mov	r7, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800af3c:	f040 8081 	bne.w	800b042 <HAL_SPI_Transmit+0x11a>
  __HAL_LOCK(hspi);
 800af40:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800af44:	2b01      	cmp	r3, #1
 800af46:	f000 8086 	beq.w	800b056 <HAL_SPI_Transmit+0x12e>
 800af4a:	2301      	movs	r3, #1
 800af4c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800af50:	f7fa fa20 	bl	8005394 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800af54:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800af58:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d009      	beq.n	800af72 <HAL_SPI_Transmit+0x4a>
    errorcode = HAL_BUSY;
 800af5e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800af60:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800af62:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800af64:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800af68:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800af6c:	b002      	add	sp, #8
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	d072      	beq.n	800b05e <HAL_SPI_Transmit+0x136>
 800af78:	fab7 f387 	clz	r3, r7
 800af7c:	095b      	lsrs	r3, r3, #5
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d16d      	bne.n	800b05e <HAL_SPI_Transmit+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af82:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af84:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af86:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af8c:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800af90:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af94:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af96:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800af9a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800af9c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800af9e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800afa2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 800afa6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afa8:	d103      	bne.n	800afb2 <HAL_SPI_Transmit+0x8a>
    SPI_1LINE_TX(hspi);
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afb0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	0652      	lsls	r2, r2, #25
 800afb6:	d403      	bmi.n	800afc0 <HAL_SPI_Transmit+0x98>
    __HAL_SPI_ENABLE(hspi);
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	f1a7 0701 	sub.w	r7, r7, #1
 800afc4:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afc6:	68e2      	ldr	r2, [r4, #12]
 800afc8:	fab7 f787 	clz	r7, r7
 800afcc:	097f      	lsrs	r7, r7, #5
 800afce:	2900      	cmp	r1, #0
 800afd0:	bf08      	it	eq
 800afd2:	2701      	moveq	r7, #1
 800afd4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800afd8:	d94c      	bls.n	800b074 <HAL_SPI_Transmit+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afda:	b147      	cbz	r7, 800afee <HAL_SPI_Transmit+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800afdc:	4642      	mov	r2, r8
 800afde:	f832 1b02 	ldrh.w	r1, [r2], #2
 800afe2:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800afe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800afe6:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800afe8:	3b01      	subs	r3, #1
 800afea:	b29b      	uxth	r3, r3
 800afec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800afee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	b183      	cbz	r3, 800b016 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	0790      	lsls	r0, r2, #30
 800affa:	d532      	bpl.n	800b062 <HAL_SPI_Transmit+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800affc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800affe:	f831 2b02 	ldrh.w	r2, [r1], #2
 800b002:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b004:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b006:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b008:	3b01      	subs	r3, #1
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b00e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b010:	b29b      	uxth	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1ee      	bne.n	800aff4 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b016:	4632      	mov	r2, r6
 800b018:	4629      	mov	r1, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	f7ff fe2a 	bl	800ac74 <SPI_EndRxTxTransaction>
 800b020:	b108      	cbz	r0, 800b026 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b022:	2320      	movs	r3, #32
 800b024:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	b933      	cbnz	r3, 800b038 <HAL_SPI_Transmit+0x110>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	68d3      	ldr	r3, [r2, #12]
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	6893      	ldr	r3, [r2, #8]
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b038:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b03a:	3000      	adds	r0, #0
 800b03c:	bf18      	it	ne
 800b03e:	2001      	movne	r0, #1
error:
 800b040:	e78e      	b.n	800af60 <HAL_SPI_Transmit+0x38>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800b042:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800b046:	4827      	ldr	r0, [pc, #156]	; (800b0e4 <HAL_SPI_Transmit+0x1bc>)
 800b048:	f7f7 fea8 	bl	8002d9c <assert_failed>
  __HAL_LOCK(hspi);
 800b04c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b050:	2b01      	cmp	r3, #1
 800b052:	f47f af7a 	bne.w	800af4a <HAL_SPI_Transmit+0x22>
 800b056:	2002      	movs	r0, #2
}
 800b058:	b002      	add	sp, #8
 800b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 800b05e:	2001      	movs	r0, #1
 800b060:	e77e      	b.n	800af60 <HAL_SPI_Transmit+0x38>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b062:	f7fa f997 	bl	8005394 <HAL_GetTick>
 800b066:	1b80      	subs	r0, r0, r6
 800b068:	42a8      	cmp	r0, r5
 800b06a:	d3c0      	bcc.n	800afee <HAL_SPI_Transmit+0xc6>
 800b06c:	1c69      	adds	r1, r5, #1
 800b06e:	d0be      	beq.n	800afee <HAL_SPI_Transmit+0xc6>
          errorcode = HAL_TIMEOUT;
 800b070:	2003      	movs	r0, #3
 800b072:	e775      	b.n	800af60 <HAL_SPI_Transmit+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b074:	b16f      	cbz	r7, 800b092 <HAL_SPI_Transmit+0x16a>
      if (hspi->TxXferCount > 1U)
 800b076:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b078:	2a01      	cmp	r2, #1
 800b07a:	d92f      	bls.n	800b0dc <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b07c:	4642      	mov	r2, r8
 800b07e:	e015      	b.n	800b0ac <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b080:	780a      	ldrb	r2, [r1, #0]
 800b082:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800b084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800b086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b088:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800b08a:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800b08c:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800b08e:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800b090:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b092:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b094:	b29b      	uxth	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d0bd      	beq.n	800b016 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	0792      	lsls	r2, r2, #30
 800b0a0:	d514      	bpl.n	800b0cc <HAL_SPI_Transmit+0x1a4>
        if (hspi->TxXferCount > 1U)
 800b0a2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b0a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0a6:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0a8:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 800b0aa:	d9e9      	bls.n	800b080 <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0ac:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b0b0:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b0b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0b4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b0b6:	3b02      	subs	r3, #2
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800b0bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0a8      	beq.n	800b016 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	0792      	lsls	r2, r2, #30
 800b0ca:	d4ea      	bmi.n	800b0a2 <HAL_SPI_Transmit+0x17a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0cc:	f7fa f962 	bl	8005394 <HAL_GetTick>
 800b0d0:	1b80      	subs	r0, r0, r6
 800b0d2:	42a8      	cmp	r0, r5
 800b0d4:	d3dd      	bcc.n	800b092 <HAL_SPI_Transmit+0x16a>
 800b0d6:	1c6b      	adds	r3, r5, #1
 800b0d8:	d0db      	beq.n	800b092 <HAL_SPI_Transmit+0x16a>
 800b0da:	e7c9      	b.n	800b070 <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0dc:	f898 2000 	ldrb.w	r2, [r8]
 800b0e0:	e7cf      	b.n	800b082 <HAL_SPI_Transmit+0x15a>
 800b0e2:	bf00      	nop
 800b0e4:	080263d8 	.word	0x080263d8

0800b0e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0e8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0ea:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0ec:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0ee:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800b0f2:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0f4:	4a0f      	ldr	r2, [pc, #60]	; (800b134 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0f6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b0f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b0fa:	6844      	ldr	r4, [r0, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 800b0fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800b100:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b102:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b106:	4d0c      	ldr	r5, [pc, #48]	; (800b138 <TIM_OC5_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b108:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b10a:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 800b10c:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b110:	d00a      	beq.n	800b128 <TIM_OC5_SetConfig+0x40>
 800b112:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b116:	42a8      	cmp	r0, r5
 800b118:	d006      	beq.n	800b128 <TIM_OC5_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b11a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b11c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b11e:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800b120:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b122:	6203      	str	r3, [r0, #32]
}
 800b124:	bcf0      	pop	{r4, r5, r6, r7}
 800b126:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b128:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b12c:	694d      	ldr	r5, [r1, #20]
 800b12e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800b132:	e7f2      	b.n	800b11a <TIM_OC5_SetConfig+0x32>
 800b134:	fffeff8f 	.word	0xfffeff8f
 800b138:	40010000 	.word	0x40010000

0800b13c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b13c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b13e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b140:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b142:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b146:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b148:	4a0f      	ldr	r2, [pc, #60]	; (800b188 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b14a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800b14c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b14e:	6844      	ldr	r4, [r0, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 800b154:	6d47      	ldr	r7, [r0, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b156:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b15a:	4d0c      	ldr	r5, [pc, #48]	; (800b18c <TIM_OC6_SetConfig+0x50>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b15c:	403a      	ands	r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b15e:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b160:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b164:	d00a      	beq.n	800b17c <TIM_OC6_SetConfig+0x40>
 800b166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b16a:	42a8      	cmp	r0, r5
 800b16c:	d006      	beq.n	800b17c <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b16e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b170:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800b172:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800b174:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b176:	6203      	str	r3, [r0, #32]
}
 800b178:	bcf0      	pop	{r4, r5, r6, r7}
 800b17a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b17c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b180:	694d      	ldr	r5, [r1, #20]
 800b182:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b186:	e7f2      	b.n	800b16e <TIM_OC6_SetConfig+0x32>
 800b188:	feff8fff 	.word	0xfeff8fff
 800b18c:	40010000 	.word	0x40010000

0800b190 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b190:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b192:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <TIM_OC1_SetConfig+0xb4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b194:	f022 0201 	bic.w	r2, r2, #1
{
 800b198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b19c:	460e      	mov	r6, r1
  tmpccer |= OC_Config->OCPolarity;
 800b19e:	6889      	ldr	r1, [r1, #8]
{
 800b1a0:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b1a2:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1a4:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b1a6:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b1a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b1ac:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800b1ae:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1b2:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1b4:	4a24      	ldr	r2, [pc, #144]	; (800b248 <TIM_OC1_SetConfig+0xb8>)
  tmpccer |= OC_Config->OCPolarity;
 800b1b6:	430d      	orrs	r5, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1b8:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b1ba:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1be:	d00a      	beq.n	800b1d6 <TIM_OC1_SetConfig+0x46>
 800b1c0:	4b22      	ldr	r3, [pc, #136]	; (800b24c <TIM_OC1_SetConfig+0xbc>)
 800b1c2:	4298      	cmp	r0, r3
 800b1c4:	d007      	beq.n	800b1d6 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800b1c6:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b1c8:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b1cc:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800b1ce:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800b1d0:	6225      	str	r5, [r4, #32]
}
 800b1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b1d6:	68f2      	ldr	r2, [r6, #12]
 800b1d8:	f032 0308 	bics.w	r3, r2, #8
 800b1dc:	d12a      	bne.n	800b234 <TIM_OC1_SetConfig+0xa4>
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1de:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b1e2:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800b1e4:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b1e6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1ea:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b1ee:	d117      	bne.n	800b220 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b1f0:	6973      	ldr	r3, [r6, #20]
 800b1f2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b1f6:	d106      	bne.n	800b206 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1f8:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b1fc:	69b1      	ldr	r1, [r6, #24]
 800b1fe:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b200:	ea42 0803 	orr.w	r8, r2, r3
 800b204:	e7df      	b.n	800b1c6 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b206:	f241 7199 	movw	r1, #6041	; 0x1799
 800b20a:	4811      	ldr	r0, [pc, #68]	; (800b250 <TIM_OC1_SetConfig+0xc0>)
 800b20c:	f7f7 fdc6 	bl	8002d9c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b210:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800b214:	69b1      	ldr	r1, [r6, #24]
 800b216:	6973      	ldr	r3, [r6, #20]
 800b218:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800b21a:	ea42 0803 	orr.w	r8, r2, r3
 800b21e:	e7d2      	b.n	800b1c6 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b220:	f241 7198 	movw	r1, #6040	; 0x1798
 800b224:	480a      	ldr	r0, [pc, #40]	; (800b250 <TIM_OC1_SetConfig+0xc0>)
 800b226:	f7f7 fdb9 	bl	8002d9c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b22a:	6973      	ldr	r3, [r6, #20]
 800b22c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b230:	d0e2      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x68>
 800b232:	e7e8      	b.n	800b206 <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b234:	f241 718b 	movw	r1, #6027	; 0x178b
 800b238:	4805      	ldr	r0, [pc, #20]	; (800b250 <TIM_OC1_SetConfig+0xc0>)
 800b23a:	f7f7 fdaf 	bl	8002d9c <assert_failed>
 800b23e:	68f2      	ldr	r2, [r6, #12]
 800b240:	e7cd      	b.n	800b1de <TIM_OC1_SetConfig+0x4e>
 800b242:	bf00      	nop
 800b244:	fffeff8c 	.word	0xfffeff8c
 800b248:	40010000 	.word	0x40010000
 800b24c:	40010400 	.word	0x40010400
 800b250:	08026410 	.word	0x08026410

0800b254 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b254:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b256:	4b2e      	ldr	r3, [pc, #184]	; (800b310 <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b262:	6889      	ldr	r1, [r1, #8]
{
 800b264:	4604      	mov	r4, r0
  tmpccmrx |= OC_Config->OCMode;
 800b266:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b268:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b26a:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b26c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800b270:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800b272:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b276:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b278:	4a26      	ldr	r2, [pc, #152]	; (800b314 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b27a:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b27e:	4290      	cmp	r0, r2
  tmpccmrx |= OC_Config->OCMode;
 800b280:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b284:	d00a      	beq.n	800b29c <TIM_OC3_SetConfig+0x48>
 800b286:	4b24      	ldr	r3, [pc, #144]	; (800b318 <TIM_OC3_SetConfig+0xc4>)
 800b288:	4298      	cmp	r0, r3
 800b28a:	d007      	beq.n	800b29c <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800b28c:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b28e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b292:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800b294:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800b296:	6225      	str	r5, [r4, #32]
}
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b29c:	68f2      	ldr	r2, [r6, #12]
 800b29e:	f032 0308 	bics.w	r3, r2, #8
 800b2a2:	d12d      	bne.n	800b300 <TIM_OC3_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2a4:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b2a8:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2aa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b2ae:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2b2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b2b6:	d119      	bne.n	800b2ec <TIM_OC3_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b2b8:	6973      	ldr	r3, [r6, #20]
 800b2ba:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b2be:	d107      	bne.n	800b2d0 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2c0:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2c4:	69b1      	ldr	r1, [r6, #24]
 800b2c6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b2ca:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800b2ce:	e7dd      	b.n	800b28c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b2d0:	f641 012f 	movw	r1, #6191	; 0x182f
 800b2d4:	4811      	ldr	r0, [pc, #68]	; (800b31c <TIM_OC3_SetConfig+0xc8>)
 800b2d6:	f7f7 fd61 	bl	8002d9c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2da:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2de:	69b1      	ldr	r1, [r6, #24]
 800b2e0:	6973      	ldr	r3, [r6, #20]
 800b2e2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b2e6:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800b2ea:	e7cf      	b.n	800b28c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b2ec:	f641 012e 	movw	r1, #6190	; 0x182e
 800b2f0:	480a      	ldr	r0, [pc, #40]	; (800b31c <TIM_OC3_SetConfig+0xc8>)
 800b2f2:	f7f7 fd53 	bl	8002d9c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b2f6:	6973      	ldr	r3, [r6, #20]
 800b2f8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800b2fc:	d0e0      	beq.n	800b2c0 <TIM_OC3_SetConfig+0x6c>
 800b2fe:	e7e7      	b.n	800b2d0 <TIM_OC3_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b300:	f641 0121 	movw	r1, #6177	; 0x1821
 800b304:	4805      	ldr	r0, [pc, #20]	; (800b31c <TIM_OC3_SetConfig+0xc8>)
 800b306:	f7f7 fd49 	bl	8002d9c <assert_failed>
 800b30a:	68f2      	ldr	r2, [r6, #12]
 800b30c:	e7ca      	b.n	800b2a4 <TIM_OC3_SetConfig+0x50>
 800b30e:	bf00      	nop
 800b310:	fffeff8c 	.word	0xfffeff8c
 800b314:	40010000 	.word	0x40010000
 800b318:	40010400 	.word	0x40010400
 800b31c:	08026410 	.word	0x08026410

0800b320 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b320:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b322:	4b1b      	ldr	r3, [pc, #108]	; (800b390 <TIM_OC4_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b324:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
{
 800b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32a:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b32c:	6889      	ldr	r1, [r1, #8]
{
 800b32e:	4604      	mov	r4, r0
 800b330:	b083      	sub	sp, #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b332:	683e      	ldr	r6, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b334:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b336:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b338:	6842      	ldr	r2, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 800b33a:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 800b33e:	69c0      	ldr	r0, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b340:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b344:	4913      	ldr	r1, [pc, #76]	; (800b394 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b346:	4003      	ands	r3, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b348:	428c      	cmp	r4, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34e:	d009      	beq.n	800b364 <TIM_OC4_SetConfig+0x44>
 800b350:	4b11      	ldr	r3, [pc, #68]	; (800b398 <TIM_OC4_SetConfig+0x78>)
 800b352:	429c      	cmp	r4, r3
 800b354:	d006      	beq.n	800b364 <TIM_OC4_SetConfig+0x44>
  TIMx->CCR4 = OC_Config->Pulse;
 800b356:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800b358:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b35a:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800b35c:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800b35e:	6225      	str	r5, [r4, #32]
}
 800b360:	b003      	add	sp, #12
 800b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800b36a:	d104      	bne.n	800b376 <TIM_OC4_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b36c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b370:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800b374:	e7ef      	b.n	800b356 <TIM_OC4_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b376:	f641 016d 	movw	r1, #6253	; 0x186d
 800b37a:	4808      	ldr	r0, [pc, #32]	; (800b39c <TIM_OC4_SetConfig+0x7c>)
 800b37c:	9201      	str	r2, [sp, #4]
 800b37e:	f7f7 fd0d 	bl	8002d9c <assert_failed>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b38a:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800b38e:	e7e2      	b.n	800b356 <TIM_OC4_SetConfig+0x36>
 800b390:	feff8cff 	.word	0xfeff8cff
 800b394:	40010000 	.word	0x40010000
 800b398:	40010400 	.word	0x40010400
 800b39c:	08026410 	.word	0x08026410

0800b3a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a2:	6803      	ldr	r3, [r0, #0]
{
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	4606      	mov	r6, r0

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b3a8:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b3aa:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b3ac:	4aac      	ldr	r2, [pc, #688]	; (800b660 <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b3ae:	2830      	cmp	r0, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3b0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b3b4:	6825      	ldr	r5, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b3b6:	ea41 0100 	orr.w	r1, r1, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b3ba:	ea02 0201 	and.w	r2, r2, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b3be:	ea42 0205 	orr.w	r2, r2, r5
  htim->Instance->SMCR = tmpsmcr;
 800b3c2:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800b3c4:	f000 80c9 	beq.w	800b55a <TIM_SlaveTimer_SetConfig+0x1ba>
 800b3c8:	f240 80c2 	bls.w	800b550 <TIM_SlaveTimer_SetConfig+0x1b0>
 800b3cc:	2850      	cmp	r0, #80	; 0x50
 800b3ce:	f000 8159 	beq.w	800b684 <TIM_SlaveTimer_SetConfig+0x2e4>
 800b3d2:	d958      	bls.n	800b486 <TIM_SlaveTimer_SetConfig+0xe6>
 800b3d4:	2860      	cmp	r0, #96	; 0x60
 800b3d6:	f000 80ee 	beq.w	800b5b6 <TIM_SlaveTimer_SetConfig+0x216>
 800b3da:	2870      	cmp	r0, #112	; 0x70
 800b3dc:	f040 80e9 	bne.w	800b5b2 <TIM_SlaveTimer_SetConfig+0x212>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b3e0:	4aa0      	ldr	r2, [pc, #640]	; (800b664 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b3e2:	49a1      	ldr	r1, [pc, #644]	; (800b668 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	bf18      	it	ne
 800b3e8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b3ec:	489f      	ldr	r0, [pc, #636]	; (800b66c <TIM_SlaveTimer_SetConfig+0x2cc>)
 800b3ee:	bf14      	ite	ne
 800b3f0:	2201      	movne	r2, #1
 800b3f2:	2200      	moveq	r2, #0
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2200      	moveq	r2, #0
 800b3fa:	f002 0201 	andne.w	r2, r2, #1
 800b3fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b402:	4283      	cmp	r3, r0
 800b404:	bf0c      	ite	eq
 800b406:	2200      	moveq	r2, #0
 800b408:	f002 0201 	andne.w	r2, r2, #1
 800b40c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b410:	428b      	cmp	r3, r1
 800b412:	bf0c      	ite	eq
 800b414:	2200      	moveq	r2, #0
 800b416:	f002 0201 	andne.w	r2, r2, #1
 800b41a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b41e:	4283      	cmp	r3, r0
 800b420:	bf0c      	ite	eq
 800b422:	2200      	moveq	r2, #0
 800b424:	f002 0201 	andne.w	r2, r2, #1
 800b428:	428b      	cmp	r3, r1
 800b42a:	bf0c      	ite	eq
 800b42c:	2200      	moveq	r2, #0
 800b42e:	f002 0201 	andne.w	r2, r2, #1
 800b432:	b11a      	cbz	r2, 800b43c <TIM_SlaveTimer_SetConfig+0x9c>
 800b434:	4a8e      	ldr	r2, [pc, #568]	; (800b670 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800b436:	4293      	cmp	r3, r2
 800b438:	f040 81bf 	bne.w	800b7ba <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800b43c:	68e3      	ldr	r3, [r4, #12]
 800b43e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b442:	f040 819c 	bne.w	800b77e <TIM_SlaveTimer_SetConfig+0x3de>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	2b0a      	cmp	r3, #10
 800b44a:	bf18      	it	ne
 800b44c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b450:	d003      	beq.n	800b45a <TIM_SlaveTimer_SetConfig+0xba>
 800b452:	f033 0302 	bics.w	r3, r3, #2
 800b456:	f040 8198 	bne.w	800b78a <TIM_SlaveTimer_SetConfig+0x3ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b45a:	6921      	ldr	r1, [r4, #16]
 800b45c:	290f      	cmp	r1, #15
 800b45e:	d905      	bls.n	800b46c <TIM_SlaveTimer_SetConfig+0xcc>
 800b460:	f641 1114 	movw	r1, #6420	; 0x1914
 800b464:	4883      	ldr	r0, [pc, #524]	; (800b674 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800b466:	f7f7 fc99 	bl	8002d9c <assert_failed>
 800b46a:	6921      	ldr	r1, [r4, #16]
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b46c:	6835      	ldr	r5, [r6, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800b46e:	2000      	movs	r0, #0
 800b470:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b472:	68aa      	ldr	r2, [r5, #8]
 800b474:	68a4      	ldr	r4, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b476:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b47a:	4323      	orrs	r3, r4
 800b47c:	4313      	orrs	r3, r2

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b47e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b482:	60ab      	str	r3, [r5, #8]
}
 800b484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800b486:	2840      	cmp	r0, #64	; 0x40
 800b488:	f040 8093 	bne.w	800b5b2 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b48c:	4a75      	ldr	r2, [pc, #468]	; (800b664 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b48e:	4976      	ldr	r1, [pc, #472]	; (800b668 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800b490:	4293      	cmp	r3, r2
 800b492:	bf18      	it	ne
 800b494:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b498:	4874      	ldr	r0, [pc, #464]	; (800b66c <TIM_SlaveTimer_SetConfig+0x2cc>)
 800b49a:	bf14      	ite	ne
 800b49c:	2201      	movne	r2, #1
 800b49e:	2200      	moveq	r2, #0
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf0c      	ite	eq
 800b4a4:	2200      	moveq	r2, #0
 800b4a6:	f002 0201 	andne.w	r2, r2, #1
 800b4aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4ae:	4283      	cmp	r3, r0
 800b4b0:	bf0c      	ite	eq
 800b4b2:	2200      	moveq	r2, #0
 800b4b4:	f002 0201 	andne.w	r2, r2, #1
 800b4b8:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	bf0c      	ite	eq
 800b4c0:	2200      	moveq	r2, #0
 800b4c2:	f002 0201 	andne.w	r2, r2, #1
 800b4c6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b4ca:	4283      	cmp	r3, r0
 800b4cc:	bf0c      	ite	eq
 800b4ce:	2200      	moveq	r2, #0
 800b4d0:	f002 0201 	andne.w	r2, r2, #1
 800b4d4:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	bf0c      	ite	eq
 800b4dc:	2200      	moveq	r2, #0
 800b4de:	f002 0201 	andne.w	r2, r2, #1
 800b4e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4e6:	4283      	cmp	r3, r0
 800b4e8:	bf0c      	ite	eq
 800b4ea:	2200      	moveq	r2, #0
 800b4ec:	f002 0201 	andne.w	r2, r2, #1
 800b4f0:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf0c      	ite	eq
 800b4f8:	2200      	moveq	r2, #0
 800b4fa:	f002 0201 	andne.w	r2, r2, #1
 800b4fe:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800b502:	4283      	cmp	r3, r0
 800b504:	bf0c      	ite	eq
 800b506:	2200      	moveq	r2, #0
 800b508:	f002 0201 	andne.w	r2, r2, #1
 800b50c:	428b      	cmp	r3, r1
 800b50e:	bf0c      	ite	eq
 800b510:	2200      	moveq	r2, #0
 800b512:	f002 0201 	andne.w	r2, r2, #1
 800b516:	b11a      	cbz	r2, 800b520 <TIM_SlaveTimer_SetConfig+0x180>
 800b518:	4a57      	ldr	r2, [pc, #348]	; (800b678 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	f040 8159 	bne.w	800b7d2 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	2b0f      	cmp	r3, #15
 800b524:	f200 811e 	bhi.w	800b764 <TIM_SlaveTimer_SetConfig+0x3c4>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	f000 8118 	beq.w	800b760 <TIM_SlaveTimer_SetConfig+0x3c0>
      tmpccer = htim->Instance->CCER;
 800b530:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800b532:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b534:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800b536:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b538:	6a19      	ldr	r1, [r3, #32]
 800b53a:	f021 0101 	bic.w	r1, r1, #1
 800b53e:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b540:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b542:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b546:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800b54a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b54c:	621c      	str	r4, [r3, #32]
}
 800b54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800b550:	2810      	cmp	r0, #16
 800b552:	d002      	beq.n	800b55a <TIM_SlaveTimer_SetConfig+0x1ba>
 800b554:	2820      	cmp	r0, #32
 800b556:	d000      	beq.n	800b55a <TIM_SlaveTimer_SetConfig+0x1ba>
 800b558:	bb58      	cbnz	r0, 800b5b2 <TIM_SlaveTimer_SetConfig+0x212>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b55a:	4a42      	ldr	r2, [pc, #264]	; (800b664 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b55c:	4942      	ldr	r1, [pc, #264]	; (800b668 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	bf18      	it	ne
 800b562:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b566:	4d41      	ldr	r5, [pc, #260]	; (800b66c <TIM_SlaveTimer_SetConfig+0x2cc>)
 800b568:	4c44      	ldr	r4, [pc, #272]	; (800b67c <TIM_SlaveTimer_SetConfig+0x2dc>)
 800b56a:	bf14      	ite	ne
 800b56c:	2201      	movne	r2, #1
 800b56e:	2200      	moveq	r2, #0
 800b570:	4843      	ldr	r0, [pc, #268]	; (800b680 <TIM_SlaveTimer_SetConfig+0x2e0>)
 800b572:	428b      	cmp	r3, r1
 800b574:	bf0c      	ite	eq
 800b576:	2200      	moveq	r2, #0
 800b578:	f002 0201 	andne.w	r2, r2, #1
 800b57c:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800b580:	42ab      	cmp	r3, r5
 800b582:	bf0c      	ite	eq
 800b584:	2200      	moveq	r2, #0
 800b586:	f002 0201 	andne.w	r2, r2, #1
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	bf0c      	ite	eq
 800b58e:	2200      	moveq	r2, #0
 800b590:	f002 0201 	andne.w	r2, r2, #1
 800b594:	4283      	cmp	r3, r0
 800b596:	bf0c      	ite	eq
 800b598:	2200      	moveq	r2, #0
 800b59a:	f002 0201 	andne.w	r2, r2, #1
 800b59e:	428b      	cmp	r3, r1
 800b5a0:	bf0c      	ite	eq
 800b5a2:	2200      	moveq	r2, #0
 800b5a4:	f002 0201 	andne.w	r2, r2, #1
 800b5a8:	b11a      	cbz	r2, 800b5b2 <TIM_SlaveTimer_SetConfig+0x212>
 800b5aa:	4a31      	ldr	r2, [pc, #196]	; (800b670 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	f040 80df 	bne.w	800b770 <TIM_SlaveTimer_SetConfig+0x3d0>
  return HAL_OK;
 800b5b2:	2000      	movs	r0, #0
}
 800b5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b5b6:	4a2b      	ldr	r2, [pc, #172]	; (800b664 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800b5b8:	492b      	ldr	r1, [pc, #172]	; (800b668 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	bf18      	it	ne
 800b5be:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b5c2:	482a      	ldr	r0, [pc, #168]	; (800b66c <TIM_SlaveTimer_SetConfig+0x2cc>)
 800b5c4:	bf14      	ite	ne
 800b5c6:	2201      	movne	r2, #1
 800b5c8:	2200      	moveq	r2, #0
 800b5ca:	428b      	cmp	r3, r1
 800b5cc:	bf0c      	ite	eq
 800b5ce:	2200      	moveq	r2, #0
 800b5d0:	f002 0201 	andne.w	r2, r2, #1
 800b5d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d8:	4283      	cmp	r3, r0
 800b5da:	bf0c      	ite	eq
 800b5dc:	2200      	moveq	r2, #0
 800b5de:	f002 0201 	andne.w	r2, r2, #1
 800b5e2:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b5e6:	428b      	cmp	r3, r1
 800b5e8:	bf0c      	ite	eq
 800b5ea:	2200      	moveq	r2, #0
 800b5ec:	f002 0201 	andne.w	r2, r2, #1
 800b5f0:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b5f4:	4283      	cmp	r3, r0
 800b5f6:	bf0c      	ite	eq
 800b5f8:	2200      	moveq	r2, #0
 800b5fa:	f002 0201 	andne.w	r2, r2, #1
 800b5fe:	428b      	cmp	r3, r1
 800b600:	bf0c      	ite	eq
 800b602:	2200      	moveq	r2, #0
 800b604:	f002 0201 	andne.w	r2, r2, #1
 800b608:	b11a      	cbz	r2, 800b612 <TIM_SlaveTimer_SetConfig+0x272>
 800b60a:	4a19      	ldr	r2, [pc, #100]	; (800b670 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	f040 80ce 	bne.w	800b7ae <TIM_SlaveTimer_SetConfig+0x40e>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	2b0a      	cmp	r3, #10
 800b616:	bf18      	it	ne
 800b618:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b61c:	d003      	beq.n	800b626 <TIM_SlaveTimer_SetConfig+0x286>
 800b61e:	f033 0302 	bics.w	r3, r3, #2
 800b622:	f040 80be 	bne.w	800b7a2 <TIM_SlaveTimer_SetConfig+0x402>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b626:	6925      	ldr	r5, [r4, #16]
 800b628:	2d0f      	cmp	r5, #15
 800b62a:	d905      	bls.n	800b638 <TIM_SlaveTimer_SetConfig+0x298>
 800b62c:	f641 114a 	movw	r1, #6474	; 0x194a
 800b630:	4810      	ldr	r0, [pc, #64]	; (800b674 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800b632:	f7f7 fbb3 	bl	8002d9c <assert_failed>
 800b636:	6925      	ldr	r5, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b638:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800b63a:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b63c:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b63e:	6a1c      	ldr	r4, [r3, #32]
 800b640:	f024 0410 	bic.w	r4, r4, #16
 800b644:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b646:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b648:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b64a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b64e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b652:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b656:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b65a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800b65c:	621a      	str	r2, [r3, #32]
}
 800b65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b660:	fffefff8 	.word	0xfffefff8
 800b664:	40010000 	.word	0x40010000
 800b668:	40000400 	.word	0x40000400
 800b66c:	40000800 	.word	0x40000800
 800b670:	40001800 	.word	0x40001800
 800b674:	08026410 	.word	0x08026410
 800b678:	40002000 	.word	0x40002000
 800b67c:	40000c00 	.word	0x40000c00
 800b680:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b684:	4a56      	ldr	r2, [pc, #344]	; (800b7e0 <TIM_SlaveTimer_SetConfig+0x440>)
 800b686:	4957      	ldr	r1, [pc, #348]	; (800b7e4 <TIM_SlaveTimer_SetConfig+0x444>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	bf18      	it	ne
 800b68c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800b690:	4855      	ldr	r0, [pc, #340]	; (800b7e8 <TIM_SlaveTimer_SetConfig+0x448>)
 800b692:	bf14      	ite	ne
 800b694:	2201      	movne	r2, #1
 800b696:	2200      	moveq	r2, #0
 800b698:	428b      	cmp	r3, r1
 800b69a:	bf0c      	ite	eq
 800b69c:	2200      	moveq	r2, #0
 800b69e:	f002 0201 	andne.w	r2, r2, #1
 800b6a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6a6:	4283      	cmp	r3, r0
 800b6a8:	bf0c      	ite	eq
 800b6aa:	2200      	moveq	r2, #0
 800b6ac:	f002 0201 	andne.w	r2, r2, #1
 800b6b0:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800b6b4:	428b      	cmp	r3, r1
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2200      	moveq	r2, #0
 800b6ba:	f002 0201 	andne.w	r2, r2, #1
 800b6be:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800b6c2:	4283      	cmp	r3, r0
 800b6c4:	bf0c      	ite	eq
 800b6c6:	2200      	moveq	r2, #0
 800b6c8:	f002 0201 	andne.w	r2, r2, #1
 800b6cc:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800b6d0:	428b      	cmp	r3, r1
 800b6d2:	bf0c      	ite	eq
 800b6d4:	2200      	moveq	r2, #0
 800b6d6:	f002 0201 	andne.w	r2, r2, #1
 800b6da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6de:	4283      	cmp	r3, r0
 800b6e0:	bf0c      	ite	eq
 800b6e2:	2200      	moveq	r2, #0
 800b6e4:	f002 0201 	andne.w	r2, r2, #1
 800b6e8:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2200      	moveq	r2, #0
 800b6f2:	f002 0201 	andne.w	r2, r2, #1
 800b6f6:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800b6fa:	4283      	cmp	r3, r0
 800b6fc:	bf0c      	ite	eq
 800b6fe:	2200      	moveq	r2, #0
 800b700:	f002 0201 	andne.w	r2, r2, #1
 800b704:	428b      	cmp	r3, r1
 800b706:	bf0c      	ite	eq
 800b708:	2200      	moveq	r2, #0
 800b70a:	f002 0201 	andne.w	r2, r2, #1
 800b70e:	b112      	cbz	r2, 800b716 <TIM_SlaveTimer_SetConfig+0x376>
 800b710:	4a36      	ldr	r2, [pc, #216]	; (800b7ec <TIM_SlaveTimer_SetConfig+0x44c>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d157      	bne.n	800b7c6 <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	2b0a      	cmp	r3, #10
 800b71a:	bf18      	it	ne
 800b71c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b720:	d002      	beq.n	800b728 <TIM_SlaveTimer_SetConfig+0x388>
 800b722:	f033 0302 	bics.w	r3, r3, #2
 800b726:	d136      	bne.n	800b796 <TIM_SlaveTimer_SetConfig+0x3f6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b728:	6927      	ldr	r7, [r4, #16]
 800b72a:	2f0f      	cmp	r7, #15
 800b72c:	d905      	bls.n	800b73a <TIM_SlaveTimer_SetConfig+0x39a>
 800b72e:	f641 113c 	movw	r1, #6460	; 0x193c
 800b732:	482f      	ldr	r0, [pc, #188]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b734:	f7f7 fb32 	bl	8002d9c <assert_failed>
 800b738:	6927      	ldr	r7, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b73a:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 800b73c:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b73e:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800b740:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b742:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b744:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b748:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b74c:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b74e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b750:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b756:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b75a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b75c:	6219      	str	r1, [r3, #32]
}
 800b75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800b760:	2001      	movs	r0, #1
}
 800b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b764:	f641 1121 	movw	r1, #6433	; 0x1921
 800b768:	4821      	ldr	r0, [pc, #132]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b76a:	f7f7 fb17 	bl	8002d9c <assert_failed>
 800b76e:	e6db      	b.n	800b528 <TIM_SlaveTimer_SetConfig+0x188>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b770:	f641 1159 	movw	r1, #6489	; 0x1959
 800b774:	481e      	ldr	r0, [pc, #120]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b776:	f7f7 fb11 	bl	8002d9c <assert_failed>
  return HAL_OK;
 800b77a:	2000      	movs	r0, #0
}
 800b77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800b77e:	f641 1112 	movw	r1, #6418	; 0x1912
 800b782:	481b      	ldr	r0, [pc, #108]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b784:	f7f7 fb0a 	bl	8002d9c <assert_failed>
 800b788:	e65d      	b.n	800b446 <TIM_SlaveTimer_SetConfig+0xa6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b78a:	f641 1113 	movw	r1, #6419	; 0x1913
 800b78e:	4818      	ldr	r0, [pc, #96]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b790:	f7f7 fb04 	bl	8002d9c <assert_failed>
 800b794:	e661      	b.n	800b45a <TIM_SlaveTimer_SetConfig+0xba>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b796:	f641 113b 	movw	r1, #6459	; 0x193b
 800b79a:	4815      	ldr	r0, [pc, #84]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b79c:	f7f7 fafe 	bl	8002d9c <assert_failed>
 800b7a0:	e7c2      	b.n	800b728 <TIM_SlaveTimer_SetConfig+0x388>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b7a2:	f641 1149 	movw	r1, #6473	; 0x1949
 800b7a6:	4812      	ldr	r0, [pc, #72]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b7a8:	f7f7 faf8 	bl	8002d9c <assert_failed>
 800b7ac:	e73b      	b.n	800b626 <TIM_SlaveTimer_SetConfig+0x286>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b7ae:	f641 1148 	movw	r1, #6472	; 0x1948
 800b7b2:	480f      	ldr	r0, [pc, #60]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b7b4:	f7f7 faf2 	bl	8002d9c <assert_failed>
 800b7b8:	e72b      	b.n	800b612 <TIM_SlaveTimer_SetConfig+0x272>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b7ba:	f641 1111 	movw	r1, #6417	; 0x1911
 800b7be:	480c      	ldr	r0, [pc, #48]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b7c0:	f7f7 faec 	bl	8002d9c <assert_failed>
 800b7c4:	e63a      	b.n	800b43c <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b7c6:	f641 113a 	movw	r1, #6458	; 0x193a
 800b7ca:	4809      	ldr	r0, [pc, #36]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b7cc:	f7f7 fae6 	bl	8002d9c <assert_failed>
 800b7d0:	e7a1      	b.n	800b716 <TIM_SlaveTimer_SetConfig+0x376>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b7d2:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 800b7d6:	4806      	ldr	r0, [pc, #24]	; (800b7f0 <TIM_SlaveTimer_SetConfig+0x450>)
 800b7d8:	f7f7 fae0 	bl	8002d9c <assert_failed>
 800b7dc:	e6a0      	b.n	800b520 <TIM_SlaveTimer_SetConfig+0x180>
 800b7de:	bf00      	nop
 800b7e0:	40010000 	.word	0x40010000
 800b7e4:	40000400 	.word	0x40000400
 800b7e8:	40000800 	.word	0x40000800
 800b7ec:	40002000 	.word	0x40002000
 800b7f0:	08026410 	.word	0x08026410

0800b7f4 <HAL_TIM_Base_Start>:
{
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b7f8:	4b38      	ldr	r3, [pc, #224]	; (800b8dc <HAL_TIM_Base_Start+0xe8>)
 800b7fa:	4839      	ldr	r0, [pc, #228]	; (800b8e0 <HAL_TIM_Base_Start+0xec>)
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	4939      	ldr	r1, [pc, #228]	; (800b8e4 <HAL_TIM_Base_Start+0xf0>)
 800b800:	429a      	cmp	r2, r3
 800b802:	bf18      	it	ne
 800b804:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800b808:	4d37      	ldr	r5, [pc, #220]	; (800b8e8 <HAL_TIM_Base_Start+0xf4>)
 800b80a:	bf14      	ite	ne
 800b80c:	2301      	movne	r3, #1
 800b80e:	2300      	moveq	r3, #0
 800b810:	4282      	cmp	r2, r0
 800b812:	bf0c      	ite	eq
 800b814:	2300      	moveq	r3, #0
 800b816:	f003 0301 	andne.w	r3, r3, #1
 800b81a:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800b81e:	428a      	cmp	r2, r1
 800b820:	bf0c      	ite	eq
 800b822:	2300      	moveq	r3, #0
 800b824:	f003 0301 	andne.w	r3, r3, #1
 800b828:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b82c:	42aa      	cmp	r2, r5
 800b82e:	bf0c      	ite	eq
 800b830:	2300      	moveq	r3, #0
 800b832:	f003 0301 	andne.w	r3, r3, #1
 800b836:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800b83a:	4282      	cmp	r2, r0
 800b83c:	bf0c      	ite	eq
 800b83e:	2300      	moveq	r3, #0
 800b840:	f003 0301 	andne.w	r3, r3, #1
 800b844:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800b848:	428a      	cmp	r2, r1
 800b84a:	bf0c      	ite	eq
 800b84c:	2300      	moveq	r3, #0
 800b84e:	f003 0301 	andne.w	r3, r3, #1
 800b852:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800b856:	42aa      	cmp	r2, r5
 800b858:	bf0c      	ite	eq
 800b85a:	2300      	moveq	r3, #0
 800b85c:	f003 0301 	andne.w	r3, r3, #1
 800b860:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800b864:	4282      	cmp	r2, r0
 800b866:	bf0c      	ite	eq
 800b868:	2300      	moveq	r3, #0
 800b86a:	f003 0301 	andne.w	r3, r3, #1
 800b86e:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800b872:	428a      	cmp	r2, r1
 800b874:	bf0c      	ite	eq
 800b876:	2300      	moveq	r3, #0
 800b878:	f003 0301 	andne.w	r3, r3, #1
 800b87c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b880:	42aa      	cmp	r2, r5
 800b882:	bf0c      	ite	eq
 800b884:	2300      	moveq	r3, #0
 800b886:	f003 0301 	andne.w	r3, r3, #1
 800b88a:	4282      	cmp	r2, r0
 800b88c:	bf0c      	ite	eq
 800b88e:	2300      	moveq	r3, #0
 800b890:	f003 0301 	andne.w	r3, r3, #1
 800b894:	428a      	cmp	r2, r1
 800b896:	bf0c      	ite	eq
 800b898:	2300      	moveq	r3, #0
 800b89a:	f003 0301 	andne.w	r3, r3, #1
 800b89e:	b113      	cbz	r3, 800b8a6 <HAL_TIM_Base_Start+0xb2>
 800b8a0:	4b12      	ldr	r3, [pc, #72]	; (800b8ec <HAL_TIM_Base_Start+0xf8>)
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d113      	bne.n	800b8ce <HAL_TIM_Base_Start+0xda>
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a6:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8a8:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <HAL_TIM_Base_Start+0xfc>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b8aa:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8ae:	6891      	ldr	r1, [r2, #8]
 800b8b0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8b2:	2b06      	cmp	r3, #6
 800b8b4:	d006      	beq.n	800b8c4 <HAL_TIM_Base_Start+0xd0>
 800b8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ba:	d003      	beq.n	800b8c4 <HAL_TIM_Base_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 800b8bc:	6813      	ldr	r3, [r2, #0]
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800b8c4:	2301      	movs	r3, #1
}
 800b8c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b8c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b8cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b8ce:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800b8d2:	4808      	ldr	r0, [pc, #32]	; (800b8f4 <HAL_TIM_Base_Start+0x100>)
 800b8d4:	f7f7 fa62 	bl	8002d9c <assert_failed>
 800b8d8:	6822      	ldr	r2, [r4, #0]
 800b8da:	e7e4      	b.n	800b8a6 <HAL_TIM_Base_Start+0xb2>
 800b8dc:	40010000 	.word	0x40010000
 800b8e0:	40000400 	.word	0x40000400
 800b8e4:	40000800 	.word	0x40000800
 800b8e8:	40000c00 	.word	0x40000c00
 800b8ec:	40002000 	.word	0x40002000
 800b8f0:	00010007 	.word	0x00010007
 800b8f4:	08026410 	.word	0x08026410

0800b8f8 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b8f8:	6802      	ldr	r2, [r0, #0]
 800b8fa:	4938      	ldr	r1, [pc, #224]	; (800b9dc <HAL_TIM_Base_Start_IT+0xe4>)
{
 800b8fc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b8fe:	4b38      	ldr	r3, [pc, #224]	; (800b9e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800b900:	4c38      	ldr	r4, [pc, #224]	; (800b9e4 <HAL_TIM_Base_Start_IT+0xec>)
 800b902:	429a      	cmp	r2, r3
 800b904:	bf18      	it	ne
 800b906:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800b90a:	4d37      	ldr	r5, [pc, #220]	; (800b9e8 <HAL_TIM_Base_Start_IT+0xf0>)
 800b90c:	bf14      	ite	ne
 800b90e:	2301      	movne	r3, #1
 800b910:	2300      	moveq	r3, #0
 800b912:	42a2      	cmp	r2, r4
 800b914:	bf0c      	ite	eq
 800b916:	2300      	moveq	r3, #0
 800b918:	f003 0301 	andne.w	r3, r3, #1
 800b91c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800b920:	428a      	cmp	r2, r1
 800b922:	bf0c      	ite	eq
 800b924:	2300      	moveq	r3, #0
 800b926:	f003 0301 	andne.w	r3, r3, #1
 800b92a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800b92e:	42aa      	cmp	r2, r5
 800b930:	bf0c      	ite	eq
 800b932:	2300      	moveq	r3, #0
 800b934:	f003 0301 	andne.w	r3, r3, #1
 800b938:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800b93c:	42a2      	cmp	r2, r4
 800b93e:	bf0c      	ite	eq
 800b940:	2300      	moveq	r3, #0
 800b942:	f003 0301 	andne.w	r3, r3, #1
 800b946:	f504 3498 	add.w	r4, r4, #77824	; 0x13000
 800b94a:	428a      	cmp	r2, r1
 800b94c:	bf0c      	ite	eq
 800b94e:	2300      	moveq	r3, #0
 800b950:	f003 0301 	andne.w	r3, r3, #1
 800b954:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800b958:	42aa      	cmp	r2, r5
 800b95a:	bf0c      	ite	eq
 800b95c:	2300      	moveq	r3, #0
 800b95e:	f003 0301 	andne.w	r3, r3, #1
 800b962:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800b966:	42a2      	cmp	r2, r4
 800b968:	bf0c      	ite	eq
 800b96a:	2300      	moveq	r3, #0
 800b96c:	f003 0301 	andne.w	r3, r3, #1
 800b970:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800b974:	428a      	cmp	r2, r1
 800b976:	bf0c      	ite	eq
 800b978:	2300      	moveq	r3, #0
 800b97a:	f003 0301 	andne.w	r3, r3, #1
 800b97e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b982:	42aa      	cmp	r2, r5
 800b984:	bf0c      	ite	eq
 800b986:	2300      	moveq	r3, #0
 800b988:	f003 0301 	andne.w	r3, r3, #1
 800b98c:	42a2      	cmp	r2, r4
 800b98e:	bf0c      	ite	eq
 800b990:	2300      	moveq	r3, #0
 800b992:	f003 0301 	andne.w	r3, r3, #1
 800b996:	428a      	cmp	r2, r1
 800b998:	bf0c      	ite	eq
 800b99a:	2300      	moveq	r3, #0
 800b99c:	f003 0301 	andne.w	r3, r3, #1
 800b9a0:	b113      	cbz	r3, 800b9a8 <HAL_TIM_Base_Start_IT+0xb0>
 800b9a2:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <HAL_TIM_Base_Start_IT+0xf4>)
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d111      	bne.n	800b9cc <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9a8:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9aa:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <HAL_TIM_Base_Start_IT+0xf8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9ac:	f041 0101 	orr.w	r1, r1, #1
 800b9b0:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9b2:	6891      	ldr	r1, [r2, #8]
 800b9b4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b6:	2b06      	cmp	r3, #6
 800b9b8:	d006      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0xd0>
 800b9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9be:	d003      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800b9c0:	6813      	ldr	r3, [r2, #0]
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	6013      	str	r3, [r2, #0]
}
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b9ce:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b9d2:	4808      	ldr	r0, [pc, #32]	; (800b9f4 <HAL_TIM_Base_Start_IT+0xfc>)
 800b9d4:	f7f7 f9e2 	bl	8002d9c <assert_failed>
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	e7e5      	b.n	800b9a8 <HAL_TIM_Base_Start_IT+0xb0>
 800b9dc:	40000800 	.word	0x40000800
 800b9e0:	40010000 	.word	0x40010000
 800b9e4:	40000400 	.word	0x40000400
 800b9e8:	40000c00 	.word	0x40000c00
 800b9ec:	40002000 	.word	0x40002000
 800b9f0:	00010007 	.word	0x00010007
 800b9f4:	08026410 	.word	0x08026410

0800b9f8 <HAL_TIM_OC_MspInit>:
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop

0800b9fc <HAL_TIM_PWM_MspInit>:
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop

0800ba00 <HAL_TIM_IC_MspInit>:
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop

0800ba04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800ba04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	f000 81c8 	beq.w	800bd9e <HAL_TIM_ConfigClockSource+0x39a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ba0e:	680a      	ldr	r2, [r1, #0]
 800ba10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800ba14:	bf18      	it	ne
 800ba16:	f5b2 5f00 	cmpne.w	r2, #8192	; 0x2000
{
 800ba1a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ba1c:	bf14      	ite	ne
 800ba1e:	2301      	movne	r3, #1
 800ba20:	2300      	moveq	r3, #0
 800ba22:	f032 0630 	bics.w	r6, r2, #48	; 0x30
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800ba2a:	f04f 0001 	mov.w	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ba2e:	f04f 0102 	mov.w	r1, #2
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ba32:	bf08      	it	eq
 800ba34:	2300      	moveq	r3, #0
  __HAL_LOCK(htim);
 800ba36:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ba3a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ba3e:	b113      	cbz	r3, 800ba46 <HAL_TIM_ConfigClockSource+0x42>
 800ba40:	2e40      	cmp	r6, #64	; 0x40
 800ba42:	f040 8242 	bne.w	800beca <HAL_TIM_ConfigClockSource+0x4c6>
  tmpsmcr = htim->Instance->SMCR;
 800ba46:	6823      	ldr	r3, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800ba48:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba4a:	49a5      	ldr	r1, [pc, #660]	; (800bce0 <HAL_TIM_ConfigClockSource+0x2dc>)
  tmpsmcr = htim->Instance->SMCR;
 800ba4c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba4e:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800ba52:	6099      	str	r1, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800ba54:	f000 81d3 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x3fa>
 800ba58:	f240 81a3 	bls.w	800bda2 <HAL_TIM_ConfigClockSource+0x39e>
 800ba5c:	2a70      	cmp	r2, #112	; 0x70
 800ba5e:	f000 814d 	beq.w	800bcfc <HAL_TIM_ConfigClockSource+0x2f8>
 800ba62:	d84c      	bhi.n	800bafe <HAL_TIM_ConfigClockSource+0xfa>
 800ba64:	2a50      	cmp	r2, #80	; 0x50
 800ba66:	f000 8095 	beq.w	800bb94 <HAL_TIM_ConfigClockSource+0x190>
 800ba6a:	2a60      	cmp	r2, #96	; 0x60
 800ba6c:	f040 812f 	bne.w	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ba70:	4a9c      	ldr	r2, [pc, #624]	; (800bce4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ba72:	499d      	ldr	r1, [pc, #628]	; (800bce8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	bf18      	it	ne
 800ba78:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ba7c:	489b      	ldr	r0, [pc, #620]	; (800bcec <HAL_TIM_ConfigClockSource+0x2e8>)
 800ba7e:	bf14      	ite	ne
 800ba80:	2201      	movne	r2, #1
 800ba82:	2200      	moveq	r2, #0
 800ba84:	428b      	cmp	r3, r1
 800ba86:	bf0c      	ite	eq
 800ba88:	2200      	moveq	r2, #0
 800ba8a:	f002 0201 	andne.w	r2, r2, #1
 800ba8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba92:	4283      	cmp	r3, r0
 800ba94:	bf0c      	ite	eq
 800ba96:	2200      	moveq	r2, #0
 800ba98:	f002 0201 	andne.w	r2, r2, #1
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf0c      	ite	eq
 800baa0:	2200      	moveq	r2, #0
 800baa2:	f002 0201 	andne.w	r2, r2, #1
 800baa6:	b11a      	cbz	r2, 800bab0 <HAL_TIM_ConfigClockSource+0xac>
 800baa8:	4a91      	ldr	r2, [pc, #580]	; (800bcf0 <HAL_TIM_ConfigClockSource+0x2ec>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	f040 8201 	bne.w	800beb2 <HAL_TIM_ConfigClockSource+0x4ae>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bab0:	686b      	ldr	r3, [r5, #4]
 800bab2:	2b0a      	cmp	r3, #10
 800bab4:	bf18      	it	ne
 800bab6:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800baba:	d003      	beq.n	800bac4 <HAL_TIM_ConfigClockSource+0xc0>
 800babc:	f033 0302 	bics.w	r3, r3, #2
 800bac0:	f040 8216 	bne.w	800bef0 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bac4:	68ee      	ldr	r6, [r5, #12]
 800bac6:	2e0f      	cmp	r6, #15
 800bac8:	f200 823f 	bhi.w	800bf4a <HAL_TIM_ConfigClockSource+0x546>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad0:	6a18      	ldr	r0, [r3, #32]
 800bad2:	f020 0010 	bic.w	r0, r0, #16
 800bad6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bad8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800bada:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800badc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bae4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800bae8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800baec:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800baee:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800baf0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800baf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800baf6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800bafa:	609a      	str	r2, [r3, #8]
 800bafc:	e0e7      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800bafe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bb02:	f000 808d 	beq.w	800bc20 <HAL_TIM_ConfigClockSource+0x21c>
 800bb06:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bb0a:	f040 80e0 	bne.w	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bb0e:	4a75      	ldr	r2, [pc, #468]	; (800bce4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bb10:	4975      	ldr	r1, [pc, #468]	; (800bce8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	bf18      	it	ne
 800bb16:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bb1a:	4874      	ldr	r0, [pc, #464]	; (800bcec <HAL_TIM_ConfigClockSource+0x2e8>)
 800bb1c:	bf14      	ite	ne
 800bb1e:	2201      	movne	r2, #1
 800bb20:	2200      	moveq	r2, #0
 800bb22:	428b      	cmp	r3, r1
 800bb24:	bf0c      	ite	eq
 800bb26:	2200      	moveq	r2, #0
 800bb28:	f002 0201 	andne.w	r2, r2, #1
 800bb2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb30:	4283      	cmp	r3, r0
 800bb32:	bf0c      	ite	eq
 800bb34:	2200      	moveq	r2, #0
 800bb36:	f002 0201 	andne.w	r2, r2, #1
 800bb3a:	428b      	cmp	r3, r1
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2200      	moveq	r2, #0
 800bb40:	f002 0201 	andne.w	r2, r2, #1
 800bb44:	b11a      	cbz	r2, 800bb4e <HAL_TIM_ConfigClockSource+0x14a>
 800bb46:	4a6a      	ldr	r2, [pc, #424]	; (800bcf0 <HAL_TIM_ConfigClockSource+0x2ec>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	f040 81b8 	bne.w	800bebe <HAL_TIM_ConfigClockSource+0x4ba>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bb4e:	68ab      	ldr	r3, [r5, #8]
 800bb50:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bb54:	f040 8207 	bne.w	800bf66 <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bb58:	686b      	ldr	r3, [r5, #4]
 800bb5a:	2b0a      	cmp	r3, #10
 800bb5c:	bf18      	it	ne
 800bb5e:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bb62:	d003      	beq.n	800bb6c <HAL_TIM_ConfigClockSource+0x168>
 800bb64:	f033 0302 	bics.w	r3, r3, #2
 800bb68:	f040 81bc 	bne.w	800bee4 <HAL_TIM_ConfigClockSource+0x4e0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bb6c:	68e8      	ldr	r0, [r5, #12]
 800bb6e:	280f      	cmp	r0, #15
 800bb70:	f200 81dd 	bhi.w	800bf2e <HAL_TIM_ConfigClockSource+0x52a>
      TIM_ETR_SetConfig(htim->Instance,
 800bb74:	6822      	ldr	r2, [r4, #0]
 800bb76:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800bb78:	6891      	ldr	r1, [r2, #8]
 800bb7a:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb7c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800bb80:	432b      	orrs	r3, r5
 800bb82:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb84:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800bb88:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb8a:	6893      	ldr	r3, [r2, #8]
 800bb8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb90:	6093      	str	r3, [r2, #8]
      break;
 800bb92:	e09c      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bb94:	4a53      	ldr	r2, [pc, #332]	; (800bce4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bb96:	4954      	ldr	r1, [pc, #336]	; (800bce8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	bf18      	it	ne
 800bb9c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bba0:	4852      	ldr	r0, [pc, #328]	; (800bcec <HAL_TIM_ConfigClockSource+0x2e8>)
 800bba2:	bf14      	ite	ne
 800bba4:	2201      	movne	r2, #1
 800bba6:	2200      	moveq	r2, #0
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	bf0c      	ite	eq
 800bbac:	2200      	moveq	r2, #0
 800bbae:	f002 0201 	andne.w	r2, r2, #1
 800bbb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbb6:	4283      	cmp	r3, r0
 800bbb8:	bf0c      	ite	eq
 800bbba:	2200      	moveq	r2, #0
 800bbbc:	f002 0201 	andne.w	r2, r2, #1
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	bf0c      	ite	eq
 800bbc4:	2200      	moveq	r2, #0
 800bbc6:	f002 0201 	andne.w	r2, r2, #1
 800bbca:	b11a      	cbz	r2, 800bbd4 <HAL_TIM_ConfigClockSource+0x1d0>
 800bbcc:	4a48      	ldr	r2, [pc, #288]	; (800bcf0 <HAL_TIM_ConfigClockSource+0x2ec>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	f040 8169 	bne.w	800bea6 <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bbd4:	686b      	ldr	r3, [r5, #4]
 800bbd6:	2b0a      	cmp	r3, #10
 800bbd8:	bf18      	it	ne
 800bbda:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bbde:	d003      	beq.n	800bbe8 <HAL_TIM_ConfigClockSource+0x1e4>
 800bbe0:	f033 0302 	bics.w	r3, r3, #2
 800bbe4:	f040 818a 	bne.w	800befc <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bbe8:	68ee      	ldr	r6, [r5, #12]
 800bbea:	2e0f      	cmp	r6, #15
 800bbec:	f200 81b4 	bhi.w	800bf58 <HAL_TIM_ConfigClockSource+0x554>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800bbf4:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbf6:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbf8:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbfc:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800bc00:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc02:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc04:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc0a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800bc0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc10:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800bc12:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc18:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800bc1c:	609a      	str	r2, [r3, #8]
 800bc1e:	e056      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bc20:	4a30      	ldr	r2, [pc, #192]	; (800bce4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bc22:	4831      	ldr	r0, [pc, #196]	; (800bce8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	bf18      	it	ne
 800bc28:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bc2c:	492f      	ldr	r1, [pc, #188]	; (800bcec <HAL_TIM_ConfigClockSource+0x2e8>)
 800bc2e:	4d31      	ldr	r5, [pc, #196]	; (800bcf4 <HAL_TIM_ConfigClockSource+0x2f0>)
 800bc30:	bf14      	ite	ne
 800bc32:	2201      	movne	r2, #1
 800bc34:	2200      	moveq	r2, #0
 800bc36:	4283      	cmp	r3, r0
 800bc38:	bf0c      	ite	eq
 800bc3a:	2200      	moveq	r2, #0
 800bc3c:	f002 0201 	andne.w	r2, r2, #1
 800bc40:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800bc44:	428b      	cmp	r3, r1
 800bc46:	bf0c      	ite	eq
 800bc48:	2200      	moveq	r2, #0
 800bc4a:	f002 0201 	andne.w	r2, r2, #1
 800bc4e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800bc52:	42ab      	cmp	r3, r5
 800bc54:	bf0c      	ite	eq
 800bc56:	2200      	moveq	r2, #0
 800bc58:	f002 0201 	andne.w	r2, r2, #1
 800bc5c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800bc60:	4283      	cmp	r3, r0
 800bc62:	bf0c      	ite	eq
 800bc64:	2200      	moveq	r2, #0
 800bc66:	f002 0201 	andne.w	r2, r2, #1
 800bc6a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800bc6e:	428b      	cmp	r3, r1
 800bc70:	bf0c      	ite	eq
 800bc72:	2200      	moveq	r2, #0
 800bc74:	f002 0201 	andne.w	r2, r2, #1
 800bc78:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800bc7c:	42ab      	cmp	r3, r5
 800bc7e:	bf0c      	ite	eq
 800bc80:	2200      	moveq	r2, #0
 800bc82:	f002 0201 	andne.w	r2, r2, #1
 800bc86:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800bc8a:	4283      	cmp	r3, r0
 800bc8c:	bf0c      	ite	eq
 800bc8e:	2200      	moveq	r2, #0
 800bc90:	f002 0201 	andne.w	r2, r2, #1
 800bc94:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800bc98:	428b      	cmp	r3, r1
 800bc9a:	bf0c      	ite	eq
 800bc9c:	2200      	moveq	r2, #0
 800bc9e:	f002 0201 	andne.w	r2, r2, #1
 800bca2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800bca6:	42ab      	cmp	r3, r5
 800bca8:	bf0c      	ite	eq
 800bcaa:	2200      	moveq	r2, #0
 800bcac:	f002 0201 	andne.w	r2, r2, #1
 800bcb0:	4283      	cmp	r3, r0
 800bcb2:	bf0c      	ite	eq
 800bcb4:	2200      	moveq	r2, #0
 800bcb6:	f002 0201 	andne.w	r2, r2, #1
 800bcba:	428b      	cmp	r3, r1
 800bcbc:	bf0c      	ite	eq
 800bcbe:	2200      	moveq	r2, #0
 800bcc0:	f002 0201 	andne.w	r2, r2, #1
 800bcc4:	b11a      	cbz	r2, 800bcce <HAL_TIM_ConfigClockSource+0x2ca>
 800bcc6:	4a0c      	ldr	r2, [pc, #48]	; (800bcf8 <HAL_TIM_ConfigClockSource+0x2f4>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	f040 8158 	bne.w	800bf7e <HAL_TIM_ConfigClockSource+0x57a>
  __HAL_UNLOCK(htim);
 800bcce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800bcd0:	2201      	movs	r2, #1
  return HAL_OK;
 800bcd2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800bcd4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bcd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
 800bcde:	bf00      	nop
 800bce0:	fffe0088 	.word	0xfffe0088
 800bce4:	40010000 	.word	0x40010000
 800bce8:	40000400 	.word	0x40000400
 800bcec:	40000800 	.word	0x40000800
 800bcf0:	40010400 	.word	0x40010400
 800bcf4:	40000c00 	.word	0x40000c00
 800bcf8:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bcfc:	4aa3      	ldr	r2, [pc, #652]	; (800bf8c <HAL_TIM_ConfigClockSource+0x588>)
 800bcfe:	49a4      	ldr	r1, [pc, #656]	; (800bf90 <HAL_TIM_ConfigClockSource+0x58c>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	bf18      	it	ne
 800bd04:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bd08:	48a2      	ldr	r0, [pc, #648]	; (800bf94 <HAL_TIM_ConfigClockSource+0x590>)
 800bd0a:	bf14      	ite	ne
 800bd0c:	2201      	movne	r2, #1
 800bd0e:	2200      	moveq	r2, #0
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf0c      	ite	eq
 800bd14:	2200      	moveq	r2, #0
 800bd16:	f002 0201 	andne.w	r2, r2, #1
 800bd1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd1e:	4283      	cmp	r3, r0
 800bd20:	bf0c      	ite	eq
 800bd22:	2200      	moveq	r2, #0
 800bd24:	f002 0201 	andne.w	r2, r2, #1
 800bd28:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	bf0c      	ite	eq
 800bd30:	2200      	moveq	r2, #0
 800bd32:	f002 0201 	andne.w	r2, r2, #1
 800bd36:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800bd3a:	4283      	cmp	r3, r0
 800bd3c:	bf0c      	ite	eq
 800bd3e:	2200      	moveq	r2, #0
 800bd40:	f002 0201 	andne.w	r2, r2, #1
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf0c      	ite	eq
 800bd48:	2200      	moveq	r2, #0
 800bd4a:	f002 0201 	andne.w	r2, r2, #1
 800bd4e:	b11a      	cbz	r2, 800bd58 <HAL_TIM_ConfigClockSource+0x354>
 800bd50:	4a91      	ldr	r2, [pc, #580]	; (800bf98 <HAL_TIM_ConfigClockSource+0x594>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	f040 80de 	bne.w	800bf14 <HAL_TIM_ConfigClockSource+0x510>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bd58:	68ab      	ldr	r3, [r5, #8]
 800bd5a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bd5e:	f040 8108 	bne.w	800bf72 <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bd62:	686b      	ldr	r3, [r5, #4]
 800bd64:	2b0a      	cmp	r3, #10
 800bd66:	bf18      	it	ne
 800bd68:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800bd6c:	d003      	beq.n	800bd76 <HAL_TIM_ConfigClockSource+0x372>
 800bd6e:	f033 0302 	bics.w	r3, r3, #2
 800bd72:	f040 80c9 	bne.w	800bf08 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bd76:	68e8      	ldr	r0, [r5, #12]
 800bd78:	280f      	cmp	r0, #15
 800bd7a:	f200 80d1 	bhi.w	800bf20 <HAL_TIM_ConfigClockSource+0x51c>
      TIM_ETR_SetConfig(htim->Instance,
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800bd82:	6891      	ldr	r1, [r2, #8]
 800bd84:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd86:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800bd8a:	432b      	orrs	r3, r5
 800bd8c:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd8e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800bd92:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800bd94:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800bd9a:	6093      	str	r3, [r2, #8]
      break;
 800bd9c:	e797      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
  __HAL_LOCK(htim);
 800bd9e:	2002      	movs	r0, #2
}
 800bda0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800bda2:	2a10      	cmp	r2, #16
 800bda4:	d004      	beq.n	800bdb0 <HAL_TIM_ConfigClockSource+0x3ac>
 800bda6:	d96d      	bls.n	800be84 <HAL_TIM_ConfigClockSource+0x480>
 800bda8:	2a20      	cmp	r2, #32
 800bdaa:	d001      	beq.n	800bdb0 <HAL_TIM_ConfigClockSource+0x3ac>
 800bdac:	2a30      	cmp	r2, #48	; 0x30
 800bdae:	d18e      	bne.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800bdb0:	4976      	ldr	r1, [pc, #472]	; (800bf8c <HAL_TIM_ConfigClockSource+0x588>)
 800bdb2:	4877      	ldr	r0, [pc, #476]	; (800bf90 <HAL_TIM_ConfigClockSource+0x58c>)
 800bdb4:	428b      	cmp	r3, r1
 800bdb6:	bf18      	it	ne
 800bdb8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bdbc:	4e75      	ldr	r6, [pc, #468]	; (800bf94 <HAL_TIM_ConfigClockSource+0x590>)
 800bdbe:	bf14      	ite	ne
 800bdc0:	2101      	movne	r1, #1
 800bdc2:	2100      	moveq	r1, #0
 800bdc4:	4283      	cmp	r3, r0
 800bdc6:	bf0c      	ite	eq
 800bdc8:	2100      	moveq	r1, #0
 800bdca:	f001 0101 	andne.w	r1, r1, #1
 800bdce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800bdd2:	42b3      	cmp	r3, r6
 800bdd4:	bf0c      	ite	eq
 800bdd6:	2100      	moveq	r1, #0
 800bdd8:	f001 0101 	andne.w	r1, r1, #1
 800bddc:	4283      	cmp	r3, r0
 800bdde:	bf0c      	ite	eq
 800bde0:	2100      	moveq	r1, #0
 800bde2:	f001 0101 	andne.w	r1, r1, #1
 800bde6:	b111      	cbz	r1, 800bdee <HAL_TIM_ConfigClockSource+0x3ea>
 800bde8:	496c      	ldr	r1, [pc, #432]	; (800bf9c <HAL_TIM_ConfigClockSource+0x598>)
 800bdea:	428b      	cmp	r3, r1
 800bdec:	d153      	bne.n	800be96 <HAL_TIM_ConfigClockSource+0x492>
  tmpsmcr = TIMx->SMCR;
 800bdee:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdf0:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdf4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdf8:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	e767      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bdfe:	4a63      	ldr	r2, [pc, #396]	; (800bf8c <HAL_TIM_ConfigClockSource+0x588>)
 800be00:	4963      	ldr	r1, [pc, #396]	; (800bf90 <HAL_TIM_ConfigClockSource+0x58c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	bf18      	it	ne
 800be06:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800be0a:	4862      	ldr	r0, [pc, #392]	; (800bf94 <HAL_TIM_ConfigClockSource+0x590>)
 800be0c:	bf14      	ite	ne
 800be0e:	2201      	movne	r2, #1
 800be10:	2200      	moveq	r2, #0
 800be12:	428b      	cmp	r3, r1
 800be14:	bf0c      	ite	eq
 800be16:	2200      	moveq	r2, #0
 800be18:	f002 0201 	andne.w	r2, r2, #1
 800be1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be20:	4283      	cmp	r3, r0
 800be22:	bf0c      	ite	eq
 800be24:	2200      	moveq	r2, #0
 800be26:	f002 0201 	andne.w	r2, r2, #1
 800be2a:	428b      	cmp	r3, r1
 800be2c:	bf0c      	ite	eq
 800be2e:	2200      	moveq	r2, #0
 800be30:	f002 0201 	andne.w	r2, r2, #1
 800be34:	b112      	cbz	r2, 800be3c <HAL_TIM_ConfigClockSource+0x438>
 800be36:	4a59      	ldr	r2, [pc, #356]	; (800bf9c <HAL_TIM_ConfigClockSource+0x598>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d126      	bne.n	800be8a <HAL_TIM_ConfigClockSource+0x486>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800be3c:	686b      	ldr	r3, [r5, #4]
 800be3e:	2b0a      	cmp	r3, #10
 800be40:	bf18      	it	ne
 800be42:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800be46:	d002      	beq.n	800be4e <HAL_TIM_ConfigClockSource+0x44a>
 800be48:	f033 0302 	bics.w	r3, r3, #2
 800be4c:	d144      	bne.n	800bed8 <HAL_TIM_ConfigClockSource+0x4d4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800be4e:	68ee      	ldr	r6, [r5, #12]
 800be50:	2e0f      	cmp	r6, #15
 800be52:	d873      	bhi.n	800bf3c <HAL_TIM_ConfigClockSource+0x538>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800be58:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be5a:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be5c:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be60:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800be64:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be66:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be68:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be6e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800be72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be74:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800be76:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800be78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be7c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800be80:	609a      	str	r2, [r3, #8]
 800be82:	e724      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
  switch (sClockSourceConfig->ClockSource)
 800be84:	2a00      	cmp	r2, #0
 800be86:	d093      	beq.n	800bdb0 <HAL_TIM_ConfigClockSource+0x3ac>
 800be88:	e721      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800be8a:	f241 2169 	movw	r1, #4713	; 0x1269
 800be8e:	4844      	ldr	r0, [pc, #272]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800be90:	f7f6 ff84 	bl	8002d9c <assert_failed>
 800be94:	e7d2      	b.n	800be3c <HAL_TIM_ConfigClockSource+0x438>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800be96:	f241 217c 	movw	r1, #4732	; 0x127c
 800be9a:	4841      	ldr	r0, [pc, #260]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800be9c:	f7f6 ff7e 	bl	8002d9c <assert_failed>
 800bea0:	682a      	ldr	r2, [r5, #0]
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	e7a3      	b.n	800bdee <HAL_TIM_ConfigClockSource+0x3ea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bea6:	f241 2149 	movw	r1, #4681	; 0x1249
 800beaa:	483d      	ldr	r0, [pc, #244]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800beac:	f7f6 ff76 	bl	8002d9c <assert_failed>
 800beb0:	e690      	b.n	800bbd4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800beb2:	f241 2159 	movw	r1, #4697	; 0x1259
 800beb6:	483a      	ldr	r0, [pc, #232]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800beb8:	f7f6 ff70 	bl	8002d9c <assert_failed>
 800bebc:	e5f8      	b.n	800bab0 <HAL_TIM_ConfigClockSource+0xac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bebe:	f241 2135 	movw	r1, #4661	; 0x1235
 800bec2:	4837      	ldr	r0, [pc, #220]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bec4:	f7f6 ff6a 	bl	8002d9c <assert_failed>
 800bec8:	e641      	b.n	800bb4e <HAL_TIM_ConfigClockSource+0x14a>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800beca:	f241 210a 	movw	r1, #4618	; 0x120a
 800bece:	4834      	ldr	r0, [pc, #208]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bed0:	f7f6 ff64 	bl	8002d9c <assert_failed>
 800bed4:	682a      	ldr	r2, [r5, #0]
 800bed6:	e5b6      	b.n	800ba46 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bed8:	f241 216c 	movw	r1, #4716	; 0x126c
 800bedc:	4830      	ldr	r0, [pc, #192]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bede:	f7f6 ff5d 	bl	8002d9c <assert_failed>
 800bee2:	e7b4      	b.n	800be4e <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bee4:	f241 2139 	movw	r1, #4665	; 0x1239
 800bee8:	482d      	ldr	r0, [pc, #180]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800beea:	f7f6 ff57 	bl	8002d9c <assert_failed>
 800beee:	e63d      	b.n	800bb6c <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bef0:	f241 215c 	movw	r1, #4700	; 0x125c
 800bef4:	482a      	ldr	r0, [pc, #168]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bef6:	f7f6 ff51 	bl	8002d9c <assert_failed>
 800befa:	e5e3      	b.n	800bac4 <HAL_TIM_ConfigClockSource+0xc0>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800befc:	f241 214c 	movw	r1, #4684	; 0x124c
 800bf00:	4827      	ldr	r0, [pc, #156]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf02:	f7f6 ff4b 	bl	8002d9c <assert_failed>
 800bf06:	e66f      	b.n	800bbe8 <HAL_TIM_ConfigClockSource+0x1e4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bf08:	f241 2121 	movw	r1, #4641	; 0x1221
 800bf0c:	4824      	ldr	r0, [pc, #144]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf0e:	f7f6 ff45 	bl	8002d9c <assert_failed>
 800bf12:	e730      	b.n	800bd76 <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800bf14:	f241 211d 	movw	r1, #4637	; 0x121d
 800bf18:	4821      	ldr	r0, [pc, #132]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf1a:	f7f6 ff3f 	bl	8002d9c <assert_failed>
 800bf1e:	e71b      	b.n	800bd58 <HAL_TIM_ConfigClockSource+0x354>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf20:	481f      	ldr	r0, [pc, #124]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf22:	f241 2122 	movw	r1, #4642	; 0x1222
 800bf26:	f7f6 ff39 	bl	8002d9c <assert_failed>
 800bf2a:	68e8      	ldr	r0, [r5, #12]
 800bf2c:	e727      	b.n	800bd7e <HAL_TIM_ConfigClockSource+0x37a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf2e:	481c      	ldr	r0, [pc, #112]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf30:	f241 213a 	movw	r1, #4666	; 0x123a
 800bf34:	f7f6 ff32 	bl	8002d9c <assert_failed>
 800bf38:	68e8      	ldr	r0, [r5, #12]
 800bf3a:	e61b      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf3c:	f241 216d 	movw	r1, #4717	; 0x126d
 800bf40:	4817      	ldr	r0, [pc, #92]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf42:	f7f6 ff2b 	bl	8002d9c <assert_failed>
 800bf46:	68ee      	ldr	r6, [r5, #12]
 800bf48:	e784      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x450>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf4a:	f241 215d 	movw	r1, #4701	; 0x125d
 800bf4e:	4814      	ldr	r0, [pc, #80]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf50:	f7f6 ff24 	bl	8002d9c <assert_failed>
 800bf54:	68ee      	ldr	r6, [r5, #12]
 800bf56:	e5b9      	b.n	800bacc <HAL_TIM_ConfigClockSource+0xc8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bf58:	f241 214d 	movw	r1, #4685	; 0x124d
 800bf5c:	4810      	ldr	r0, [pc, #64]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf5e:	f7f6 ff1d 	bl	8002d9c <assert_failed>
 800bf62:	68ee      	ldr	r6, [r5, #12]
 800bf64:	e644      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x1ec>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bf66:	f241 2138 	movw	r1, #4664	; 0x1238
 800bf6a:	480d      	ldr	r0, [pc, #52]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf6c:	f7f6 ff16 	bl	8002d9c <assert_failed>
 800bf70:	e5f2      	b.n	800bb58 <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bf72:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 800bf76:	480a      	ldr	r0, [pc, #40]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf78:	f7f6 ff10 	bl	8002d9c <assert_failed>
 800bf7c:	e6f1      	b.n	800bd62 <HAL_TIM_ConfigClockSource+0x35e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bf7e:	f241 2116 	movw	r1, #4630	; 0x1216
 800bf82:	4807      	ldr	r0, [pc, #28]	; (800bfa0 <HAL_TIM_ConfigClockSource+0x59c>)
 800bf84:	f7f6 ff0a 	bl	8002d9c <assert_failed>
 800bf88:	e6a1      	b.n	800bcce <HAL_TIM_ConfigClockSource+0x2ca>
 800bf8a:	bf00      	nop
 800bf8c:	40010000 	.word	0x40010000
 800bf90:	40000400 	.word	0x40000400
 800bf94:	40000800 	.word	0x40000800
 800bf98:	40001800 	.word	0x40001800
 800bf9c:	40010400 	.word	0x40010400
 800bfa0:	08026410 	.word	0x08026410

0800bfa4 <HAL_TIM_SlaveConfigSynchro>:
{
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800bfa8:	4b39      	ldr	r3, [pc, #228]	; (800c090 <HAL_TIM_SlaveConfigSynchro+0xec>)
 800bfaa:	483a      	ldr	r0, [pc, #232]	; (800c094 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800bfac:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800bfae:	6822      	ldr	r2, [r4, #0]
 800bfb0:	4939      	ldr	r1, [pc, #228]	; (800c098 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	bf18      	it	ne
 800bfb6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800bfba:	4e38      	ldr	r6, [pc, #224]	; (800c09c <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800bfbc:	bf14      	ite	ne
 800bfbe:	2301      	movne	r3, #1
 800bfc0:	2300      	moveq	r3, #0
 800bfc2:	4282      	cmp	r2, r0
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2300      	moveq	r3, #0
 800bfc8:	f003 0301 	andne.w	r3, r3, #1
 800bfcc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800bfd0:	428a      	cmp	r2, r1
 800bfd2:	bf0c      	ite	eq
 800bfd4:	2300      	moveq	r3, #0
 800bfd6:	f003 0301 	andne.w	r3, r3, #1
 800bfda:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800bfde:	42b2      	cmp	r2, r6
 800bfe0:	bf0c      	ite	eq
 800bfe2:	2300      	moveq	r3, #0
 800bfe4:	f003 0301 	andne.w	r3, r3, #1
 800bfe8:	4282      	cmp	r2, r0
 800bfea:	bf0c      	ite	eq
 800bfec:	2300      	moveq	r3, #0
 800bfee:	f003 0301 	andne.w	r3, r3, #1
 800bff2:	428a      	cmp	r2, r1
 800bff4:	bf0c      	ite	eq
 800bff6:	2300      	moveq	r3, #0
 800bff8:	f003 0301 	andne.w	r3, r3, #1
 800bffc:	b113      	cbz	r3, 800c004 <HAL_TIM_SlaveConfigSynchro+0x60>
 800bffe:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800c000:	429a      	cmp	r2, r3
 800c002:	d138      	bne.n	800c076 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	1f1a      	subs	r2, r3, #4
 800c008:	2a03      	cmp	r2, #3
 800c00a:	d902      	bls.n	800c012 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800c00c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c010:	d12b      	bne.n	800c06a <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c012:	686b      	ldr	r3, [r5, #4]
 800c014:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c018:	2b40      	cmp	r3, #64	; 0x40
 800c01a:	d000      	beq.n	800c01e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c01c:	bb8b      	cbnz	r3, 800c082 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800c01e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d01f      	beq.n	800c066 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800c026:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c028:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c02a:	4629      	mov	r1, r5
 800c02c:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800c02e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800c032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c036:	f7ff f9b3 	bl	800b3a0 <TIM_SlaveTimer_SetConfig>
 800c03a:	b968      	cbnz	r0, 800c058 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c044:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c04c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800c04e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c052:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c056:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(htim);
 800c058:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800c05a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800c05e:	4630      	mov	r0, r6
    __HAL_UNLOCK(htim);
 800c060:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800c064:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800c066:	2002      	movs	r0, #2
}
 800c068:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800c06a:	f241 21bc 	movw	r1, #4796	; 0x12bc
 800c06e:	480d      	ldr	r0, [pc, #52]	; (800c0a4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c070:	f7f6 fe94 	bl	8002d9c <assert_failed>
 800c074:	e7cd      	b.n	800c012 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800c076:	f241 21bb 	movw	r1, #4795	; 0x12bb
 800c07a:	480a      	ldr	r0, [pc, #40]	; (800c0a4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c07c:	f7f6 fe8e 	bl	8002d9c <assert_failed>
 800c080:	e7c0      	b.n	800c004 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800c082:	f241 21bd 	movw	r1, #4797	; 0x12bd
 800c086:	4807      	ldr	r0, [pc, #28]	; (800c0a4 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800c088:	f7f6 fe88 	bl	8002d9c <assert_failed>
 800c08c:	e7c7      	b.n	800c01e <HAL_TIM_SlaveConfigSynchro+0x7a>
 800c08e:	bf00      	nop
 800c090:	40010000 	.word	0x40010000
 800c094:	40000400 	.word	0x40000400
 800c098:	40000800 	.word	0x40000800
 800c09c:	40000c00 	.word	0x40000c00
 800c0a0:	40001800 	.word	0x40001800
 800c0a4:	08026410 	.word	0x08026410

0800c0a8 <HAL_TIM_OC_DelayElapsedCallback>:
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop

0800c0ac <TIM_DMACaptureCplt>:
{
 800c0ac:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c0b0:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c0b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c0b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c0b8:	4282      	cmp	r2, r0
 800c0ba:	d00f      	beq.n	800c0dc <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c0bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0be:	4283      	cmp	r3, r0
 800c0c0:	d01b      	beq.n	800c0fa <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c0c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0c4:	4283      	cmp	r3, r0
 800c0c6:	d010      	beq.n	800c0ea <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c0c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0ca:	4283      	cmp	r3, r0
 800c0cc:	d005      	beq.n	800c0da <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7f5 fdc2 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	7723      	strb	r3, [r4, #28]
}
 800c0d8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0da:	2308      	movs	r3, #8
 800c0dc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7f5 fdba 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	7723      	strb	r3, [r4, #28]
}
 800c0e8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0ea:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800c0ec:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0ee:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c0f0:	f7f5 fdb2 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	7723      	strb	r3, [r4, #28]
}
 800c0f8:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0fa:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800c0fc:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0fe:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800c100:	f7f5 fdaa 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c104:	2300      	movs	r3, #0
 800c106:	7723      	strb	r3, [r4, #28]
}
 800c108:	bd10      	pop	{r4, pc}
 800c10a:	bf00      	nop

0800c10c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop

0800c110 <TIM_DMACaptureHalfCplt>:
{
 800c110:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c112:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800c114:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c116:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800c118:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c11c:	4282      	cmp	r2, r0
 800c11e:	d00f      	beq.n	800c140 <TIM_DMACaptureHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c120:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c122:	4283      	cmp	r3, r0
 800c124:	d01b      	beq.n	800c15e <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c128:	4283      	cmp	r3, r0
 800c12a:	d010      	beq.n	800c14e <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c12c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c12e:	4283      	cmp	r3, r0
 800c130:	d005      	beq.n	800c13e <TIM_DMACaptureHalfCplt+0x2e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c132:	4620      	mov	r0, r4
 800c134:	f7ff ffea 	bl	800c10c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c138:	2300      	movs	r3, #0
 800c13a:	7723      	strb	r3, [r4, #28]
}
 800c13c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c13e:	2308      	movs	r3, #8
 800c140:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c142:	4620      	mov	r0, r4
 800c144:	f7ff ffe2 	bl	800c10c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c148:	2300      	movs	r3, #0
 800c14a:	7723      	strb	r3, [r4, #28]
}
 800c14c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c14e:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c150:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c152:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c154:	f7ff ffda 	bl	800c10c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c158:	2300      	movs	r3, #0
 800c15a:	7723      	strb	r3, [r4, #28]
}
 800c15c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c15e:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c160:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c162:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800c164:	f7ff ffd2 	bl	800c10c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c168:	2300      	movs	r3, #0
 800c16a:	7723      	strb	r3, [r4, #28]
}
 800c16c:	bd10      	pop	{r4, pc}
 800c16e:	bf00      	nop

0800c170 <HAL_TIM_PWM_PulseFinishedCallback>:
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <HAL_TIM_TriggerCallback>:
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop

0800c178 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c178:	6803      	ldr	r3, [r0, #0]
 800c17a:	691a      	ldr	r2, [r3, #16]
 800c17c:	0791      	lsls	r1, r2, #30
{
 800c17e:	b510      	push	{r4, lr}
 800c180:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c182:	d502      	bpl.n	800c18a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	0792      	lsls	r2, r2, #30
 800c188:	d468      	bmi.n	800c25c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c18a:	691a      	ldr	r2, [r3, #16]
 800c18c:	0752      	lsls	r2, r2, #29
 800c18e:	d502      	bpl.n	800c196 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c190:	68da      	ldr	r2, [r3, #12]
 800c192:	0750      	lsls	r0, r2, #29
 800c194:	d44f      	bmi.n	800c236 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c196:	691a      	ldr	r2, [r3, #16]
 800c198:	0711      	lsls	r1, r2, #28
 800c19a:	d502      	bpl.n	800c1a2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c19c:	68da      	ldr	r2, [r3, #12]
 800c19e:	0712      	lsls	r2, r2, #28
 800c1a0:	d437      	bmi.n	800c212 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1a2:	691a      	ldr	r2, [r3, #16]
 800c1a4:	06d0      	lsls	r0, r2, #27
 800c1a6:	d502      	bpl.n	800c1ae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1a8:	68da      	ldr	r2, [r3, #12]
 800c1aa:	06d1      	lsls	r1, r2, #27
 800c1ac:	d41e      	bmi.n	800c1ec <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1ae:	691a      	ldr	r2, [r3, #16]
 800c1b0:	07d2      	lsls	r2, r2, #31
 800c1b2:	d502      	bpl.n	800c1ba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	07d0      	lsls	r0, r2, #31
 800c1b8:	d469      	bmi.n	800c28e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	0611      	lsls	r1, r2, #24
 800c1be:	d502      	bpl.n	800c1c6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	0612      	lsls	r2, r2, #24
 800c1c4:	d46b      	bmi.n	800c29e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	05d0      	lsls	r0, r2, #23
 800c1ca:	d502      	bpl.n	800c1d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	0611      	lsls	r1, r2, #24
 800c1d0:	d46d      	bmi.n	800c2ae <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	0652      	lsls	r2, r2, #25
 800c1d6:	d502      	bpl.n	800c1de <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1d8:	68da      	ldr	r2, [r3, #12]
 800c1da:	0650      	lsls	r0, r2, #25
 800c1dc:	d46f      	bmi.n	800c2be <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c1de:	691a      	ldr	r2, [r3, #16]
 800c1e0:	0691      	lsls	r1, r2, #26
 800c1e2:	d502      	bpl.n	800c1ea <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	0692      	lsls	r2, r2, #26
 800c1e8:	d449      	bmi.n	800c27e <HAL_TIM_IRQHandler+0x106>
}
 800c1ea:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1ec:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1f0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1f4:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1fa:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c1fe:	d16f      	bne.n	800c2e0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c200:	f7ff ff52 	bl	800c0a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c204:	4620      	mov	r0, r4
 800c206:	f7ff ffb3 	bl	800c170 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c20a:	2200      	movs	r2, #0
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	7722      	strb	r2, [r4, #28]
 800c210:	e7cd      	b.n	800c1ae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c212:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c216:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c218:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c21a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c21c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c21e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c220:	079b      	lsls	r3, r3, #30
 800c222:	d15a      	bne.n	800c2da <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c224:	f7ff ff40 	bl	800c0a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c228:	4620      	mov	r0, r4
 800c22a:	f7ff ffa1 	bl	800c170 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c22e:	2200      	movs	r2, #0
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	7722      	strb	r2, [r4, #28]
 800c234:	e7b5      	b.n	800c1a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c236:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c23a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800c23c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c23e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c240:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c242:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c244:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c248:	d144      	bne.n	800c2d4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c24a:	f7ff ff2d 	bl	800c0a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff ff8e 	bl	800c170 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c254:	2200      	movs	r2, #0
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	7722      	strb	r2, [r4, #28]
 800c25a:	e79c      	b.n	800c196 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c25c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c260:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c262:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c264:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c266:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c268:	0799      	lsls	r1, r3, #30
 800c26a:	d130      	bne.n	800c2ce <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26c:	f7ff ff1c 	bl	800c0a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c270:	4620      	mov	r0, r4
 800c272:	f7ff ff7d 	bl	800c170 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c276:	2200      	movs	r2, #0
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	7722      	strb	r2, [r4, #28]
 800c27c:	e785      	b.n	800c18a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c27e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c282:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c284:	611a      	str	r2, [r3, #16]
}
 800c286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c28a:	f001 bc63 	b.w	800db54 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c28e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c292:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c294:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c296:	f7f5 fd27 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	e78d      	b.n	800c1ba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c29e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c2a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c2a6:	f001 fc57 	bl	800db58 <HAL_TIMEx_BreakCallback>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	e78b      	b.n	800c1c6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c2b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c2b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c2b6:	f001 fc51 	bl	800db5c <HAL_TIMEx_Break2Callback>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	e789      	b.n	800c1d2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2be:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c2c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c2c6:	f7ff ff55 	bl	800c174 <HAL_TIM_TriggerCallback>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	e787      	b.n	800c1de <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800c2ce:	f7f5 fcc3 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 800c2d2:	e7d0      	b.n	800c276 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800c2d4:	f7f5 fcc0 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 800c2d8:	e7bc      	b.n	800c254 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800c2da:	f7f5 fcbd 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 800c2de:	e7a6      	b.n	800c22e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e0:	f7f5 fcba 	bl	8001c58 <HAL_TIM_IC_CaptureCallback>
 800c2e4:	e791      	b.n	800c20a <HAL_TIM_IRQHandler+0x92>
 800c2e6:	bf00      	nop

0800c2e8 <HAL_TIM_ErrorCallback>:
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop

0800c2ec <TIM_DMAError>:
{
 800c2ec:	b508      	push	{r3, lr}
  htim->State = HAL_TIM_STATE_READY;
 800c2ee:	2201      	movs	r2, #1
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  HAL_TIM_ErrorCallback(htim);
 800c2f2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800c2f8:	f7ff fff6 	bl	800c2e8 <HAL_TIM_ErrorCallback>
}
 800c2fc:	bd08      	pop	{r3, pc}
 800c2fe:	bf00      	nop

0800c300 <TIM_Base_SetConfig>:
{
 800c300:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c302:	4e32      	ldr	r6, [pc, #200]	; (800c3cc <TIM_Base_SetConfig+0xcc>)
 800c304:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c308:	4f31      	ldr	r7, [pc, #196]	; (800c3d0 <TIM_Base_SetConfig+0xd0>)
 800c30a:	eba0 0606 	sub.w	r6, r0, r6
  tmpcr1 = TIMx->CR1;
 800c30e:	6803      	ldr	r3, [r0, #0]
 800c310:	eba0 0707 	sub.w	r7, r0, r7
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c314:	fab6 f686 	clz	r6, r6
 800c318:	fab7 f787 	clz	r7, r7
 800c31c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800c320:	ea4f 1757 	mov.w	r7, r7, lsr #5
 800c324:	d025      	beq.n	800c372 <TIM_Base_SetConfig+0x72>
 800c326:	bb26      	cbnz	r6, 800c372 <TIM_Base_SetConfig+0x72>
 800c328:	4a2a      	ldr	r2, [pc, #168]	; (800c3d4 <TIM_Base_SetConfig+0xd4>)
 800c32a:	4290      	cmp	r0, r2
 800c32c:	d03e      	beq.n	800c3ac <TIM_Base_SetConfig+0xac>
 800c32e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c332:	4290      	cmp	r0, r2
 800c334:	d03a      	beq.n	800c3ac <TIM_Base_SetConfig+0xac>
 800c336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c33a:	4290      	cmp	r0, r2
 800c33c:	d03b      	beq.n	800c3b6 <TIM_Base_SetConfig+0xb6>
 800c33e:	2f00      	cmp	r7, #0
 800c340:	d139      	bne.n	800c3b6 <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c342:	4a25      	ldr	r2, [pc, #148]	; (800c3d8 <TIM_Base_SetConfig+0xd8>)
 800c344:	4290      	cmp	r0, r2
 800c346:	d018      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c348:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c34c:	4290      	cmp	r0, r2
 800c34e:	d014      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c350:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c354:	4290      	cmp	r0, r2
 800c356:	d010      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c358:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c35c:	4290      	cmp	r0, r2
 800c35e:	d00c      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c360:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c364:	4290      	cmp	r0, r2
 800c366:	d008      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c368:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c36c:	4290      	cmp	r0, r2
 800c36e:	d108      	bne.n	800c382 <TIM_Base_SetConfig+0x82>
 800c370:	e003      	b.n	800c37a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c376:	684d      	ldr	r5, [r1, #4]
 800c378:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800c37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c37e:	68cd      	ldr	r5, [r1, #12]
 800c380:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c382:	694a      	ldr	r2, [r1, #20]
 800c384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c388:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c38a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800c38c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800c38e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c390:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c392:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c394:	b926      	cbnz	r6, 800c3a0 <TIM_Base_SetConfig+0xa0>
 800c396:	b91f      	cbnz	r7, 800c3a0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 800c398:	2301      	movs	r3, #1
}
 800c39a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800c39c:	6143      	str	r3, [r0, #20]
}
 800c39e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800c3a0:	690b      	ldr	r3, [r1, #16]
 800c3a2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c3a4:	2301      	movs	r3, #1
}
 800c3a6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800c3a8:	6143      	str	r3, [r0, #20]
}
 800c3aa:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c3b0:	684a      	ldr	r2, [r1, #4]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	e7e1      	b.n	800c37a <TIM_Base_SetConfig+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3b6:	4a09      	ldr	r2, [pc, #36]	; (800c3dc <TIM_Base_SetConfig+0xdc>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c3bc:	684c      	ldr	r4, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3be:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800c3c0:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3c4:	d0d9      	beq.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c3c6:	2f00      	cmp	r7, #0
 800c3c8:	d1d7      	bne.n	800c37a <TIM_Base_SetConfig+0x7a>
 800c3ca:	e7ba      	b.n	800c342 <TIM_Base_SetConfig+0x42>
 800c3cc:	40010000 	.word	0x40010000
 800c3d0:	40010400 	.word	0x40010400
 800c3d4:	40000400 	.word	0x40000400
 800c3d8:	40014000 	.word	0x40014000
 800c3dc:	40000c00 	.word	0x40000c00

0800c3e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	f000 8097 	beq.w	800c514 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c3e6:	6802      	ldr	r2, [r0, #0]
 800c3e8:	4956      	ldr	r1, [pc, #344]	; (800c544 <HAL_TIM_Base_Init+0x164>)
{
 800c3ea:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c3ec:	4b56      	ldr	r3, [pc, #344]	; (800c548 <HAL_TIM_Base_Init+0x168>)
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4856      	ldr	r0, [pc, #344]	; (800c54c <HAL_TIM_Base_Init+0x16c>)
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	bf18      	it	ne
 800c3f6:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c3fa:	4d55      	ldr	r5, [pc, #340]	; (800c550 <HAL_TIM_Base_Init+0x170>)
 800c3fc:	bf14      	ite	ne
 800c3fe:	2301      	movne	r3, #1
 800c400:	2300      	moveq	r3, #0
 800c402:	4282      	cmp	r2, r0
 800c404:	bf0c      	ite	eq
 800c406:	2300      	moveq	r3, #0
 800c408:	f003 0301 	andne.w	r3, r3, #1
 800c40c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c410:	428a      	cmp	r2, r1
 800c412:	bf0c      	ite	eq
 800c414:	2300      	moveq	r3, #0
 800c416:	f003 0301 	andne.w	r3, r3, #1
 800c41a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c41e:	42aa      	cmp	r2, r5
 800c420:	bf0c      	ite	eq
 800c422:	2300      	moveq	r3, #0
 800c424:	f003 0301 	andne.w	r3, r3, #1
 800c428:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c42c:	4282      	cmp	r2, r0
 800c42e:	bf0c      	ite	eq
 800c430:	2300      	moveq	r3, #0
 800c432:	f003 0301 	andne.w	r3, r3, #1
 800c436:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c43a:	428a      	cmp	r2, r1
 800c43c:	bf0c      	ite	eq
 800c43e:	2300      	moveq	r3, #0
 800c440:	f003 0301 	andne.w	r3, r3, #1
 800c444:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c448:	42aa      	cmp	r2, r5
 800c44a:	bf0c      	ite	eq
 800c44c:	2300      	moveq	r3, #0
 800c44e:	f003 0301 	andne.w	r3, r3, #1
 800c452:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c456:	4282      	cmp	r2, r0
 800c458:	bf0c      	ite	eq
 800c45a:	2300      	moveq	r3, #0
 800c45c:	f003 0301 	andne.w	r3, r3, #1
 800c460:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c464:	428a      	cmp	r2, r1
 800c466:	bf0c      	ite	eq
 800c468:	2300      	moveq	r3, #0
 800c46a:	f003 0301 	andne.w	r3, r3, #1
 800c46e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c472:	42aa      	cmp	r2, r5
 800c474:	bf0c      	ite	eq
 800c476:	2300      	moveq	r3, #0
 800c478:	f003 0301 	andne.w	r3, r3, #1
 800c47c:	4282      	cmp	r2, r0
 800c47e:	bf0c      	ite	eq
 800c480:	2300      	moveq	r3, #0
 800c482:	f003 0301 	andne.w	r3, r3, #1
 800c486:	428a      	cmp	r2, r1
 800c488:	bf0c      	ite	eq
 800c48a:	2300      	moveq	r3, #0
 800c48c:	f003 0301 	andne.w	r3, r3, #1
 800c490:	b113      	cbz	r3, 800c498 <HAL_TIM_Base_Init+0xb8>
 800c492:	4b30      	ldr	r3, [pc, #192]	; (800c554 <HAL_TIM_Base_Init+0x174>)
 800c494:	429a      	cmp	r2, r3
 800c496:	d14f      	bne.n	800c538 <HAL_TIM_Base_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c498:	68a2      	ldr	r2, [r4, #8]
 800c49a:	f032 0310 	bics.w	r3, r2, #16
 800c49e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800c4a2:	bf14      	ite	ne
 800c4a4:	2301      	movne	r3, #1
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	2920      	cmp	r1, #32
 800c4aa:	bf0c      	ite	eq
 800c4ac:	2300      	moveq	r3, #0
 800c4ae:	f003 0301 	andne.w	r3, r3, #1
 800c4b2:	b10b      	cbz	r3, 800c4b8 <HAL_TIM_Base_Init+0xd8>
 800c4b4:	2a40      	cmp	r2, #64	; 0x40
 800c4b6:	d139      	bne.n	800c52c <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c4be:	d002      	beq.n	800c4c6 <HAL_TIM_Base_Init+0xe6>
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d128      	bne.n	800c518 <HAL_TIM_Base_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c4c6:	69a3      	ldr	r3, [r4, #24]
 800c4c8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c4cc:	d116      	bne.n	800c4fc <HAL_TIM_Base_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c4d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c4d6:	b15b      	cbz	r3, 800c4f0 <HAL_TIM_Base_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4da:	6820      	ldr	r0, [r4, #0]
 800c4dc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c4de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4e2:	f7ff ff0d 	bl	800c300 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c4e6:	2301      	movs	r3, #1
  return HAL_OK;
 800c4e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c4ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c4f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f7f7 fd45 	bl	8003f84 <HAL_TIM_Base_MspInit>
 800c4fa:	e7ed      	b.n	800c4d8 <HAL_TIM_Base_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c4fc:	f44f 718c 	mov.w	r1, #280	; 0x118
 800c500:	4815      	ldr	r0, [pc, #84]	; (800c558 <HAL_TIM_Base_Init+0x178>)
 800c502:	f7f6 fc4b 	bl	8002d9c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c506:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c50a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e2      	bne.n	800c4d8 <HAL_TIM_Base_Init+0xf8>
 800c512:	e7ed      	b.n	800c4f0 <HAL_TIM_Base_Init+0x110>
    return HAL_ERROR;
 800c514:	2001      	movs	r0, #1
}
 800c516:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c518:	f240 1117 	movw	r1, #279	; 0x117
 800c51c:	480e      	ldr	r0, [pc, #56]	; (800c558 <HAL_TIM_Base_Init+0x178>)
 800c51e:	f7f6 fc3d 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c522:	69a3      	ldr	r3, [r4, #24]
 800c524:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c528:	d0d1      	beq.n	800c4ce <HAL_TIM_Base_Init+0xee>
 800c52a:	e7e7      	b.n	800c4fc <HAL_TIM_Base_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c52c:	f44f 718b 	mov.w	r1, #278	; 0x116
 800c530:	4809      	ldr	r0, [pc, #36]	; (800c558 <HAL_TIM_Base_Init+0x178>)
 800c532:	f7f6 fc33 	bl	8002d9c <assert_failed>
 800c536:	e7bf      	b.n	800c4b8 <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c538:	f240 1115 	movw	r1, #277	; 0x115
 800c53c:	4806      	ldr	r0, [pc, #24]	; (800c558 <HAL_TIM_Base_Init+0x178>)
 800c53e:	f7f6 fc2d 	bl	8002d9c <assert_failed>
 800c542:	e7a9      	b.n	800c498 <HAL_TIM_Base_Init+0xb8>
 800c544:	40000800 	.word	0x40000800
 800c548:	40010000 	.word	0x40010000
 800c54c:	40000400 	.word	0x40000400
 800c550:	40000c00 	.word	0x40000c00
 800c554:	40002000 	.word	0x40002000
 800c558:	08026410 	.word	0x08026410

0800c55c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f000 8097 	beq.w	800c690 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c562:	6802      	ldr	r2, [r0, #0]
 800c564:	4956      	ldr	r1, [pc, #344]	; (800c6c0 <HAL_TIM_OC_Init+0x164>)
{
 800c566:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c568:	4b56      	ldr	r3, [pc, #344]	; (800c6c4 <HAL_TIM_OC_Init+0x168>)
 800c56a:	4604      	mov	r4, r0
 800c56c:	4856      	ldr	r0, [pc, #344]	; (800c6c8 <HAL_TIM_OC_Init+0x16c>)
 800c56e:	429a      	cmp	r2, r3
 800c570:	bf18      	it	ne
 800c572:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c576:	4d55      	ldr	r5, [pc, #340]	; (800c6cc <HAL_TIM_OC_Init+0x170>)
 800c578:	bf14      	ite	ne
 800c57a:	2301      	movne	r3, #1
 800c57c:	2300      	moveq	r3, #0
 800c57e:	4282      	cmp	r2, r0
 800c580:	bf0c      	ite	eq
 800c582:	2300      	moveq	r3, #0
 800c584:	f003 0301 	andne.w	r3, r3, #1
 800c588:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c58c:	428a      	cmp	r2, r1
 800c58e:	bf0c      	ite	eq
 800c590:	2300      	moveq	r3, #0
 800c592:	f003 0301 	andne.w	r3, r3, #1
 800c596:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c59a:	42aa      	cmp	r2, r5
 800c59c:	bf0c      	ite	eq
 800c59e:	2300      	moveq	r3, #0
 800c5a0:	f003 0301 	andne.w	r3, r3, #1
 800c5a4:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c5a8:	4282      	cmp	r2, r0
 800c5aa:	bf0c      	ite	eq
 800c5ac:	2300      	moveq	r3, #0
 800c5ae:	f003 0301 	andne.w	r3, r3, #1
 800c5b2:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c5b6:	428a      	cmp	r2, r1
 800c5b8:	bf0c      	ite	eq
 800c5ba:	2300      	moveq	r3, #0
 800c5bc:	f003 0301 	andne.w	r3, r3, #1
 800c5c0:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c5c4:	42aa      	cmp	r2, r5
 800c5c6:	bf0c      	ite	eq
 800c5c8:	2300      	moveq	r3, #0
 800c5ca:	f003 0301 	andne.w	r3, r3, #1
 800c5ce:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c5d2:	4282      	cmp	r2, r0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	2300      	moveq	r3, #0
 800c5d8:	f003 0301 	andne.w	r3, r3, #1
 800c5dc:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c5e0:	428a      	cmp	r2, r1
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2300      	moveq	r3, #0
 800c5e6:	f003 0301 	andne.w	r3, r3, #1
 800c5ea:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c5ee:	42aa      	cmp	r2, r5
 800c5f0:	bf0c      	ite	eq
 800c5f2:	2300      	moveq	r3, #0
 800c5f4:	f003 0301 	andne.w	r3, r3, #1
 800c5f8:	4282      	cmp	r2, r0
 800c5fa:	bf0c      	ite	eq
 800c5fc:	2300      	moveq	r3, #0
 800c5fe:	f003 0301 	andne.w	r3, r3, #1
 800c602:	428a      	cmp	r2, r1
 800c604:	bf0c      	ite	eq
 800c606:	2300      	moveq	r3, #0
 800c608:	f003 0301 	andne.w	r3, r3, #1
 800c60c:	b113      	cbz	r3, 800c614 <HAL_TIM_OC_Init+0xb8>
 800c60e:	4b30      	ldr	r3, [pc, #192]	; (800c6d0 <HAL_TIM_OC_Init+0x174>)
 800c610:	429a      	cmp	r2, r3
 800c612:	d14f      	bne.n	800c6b4 <HAL_TIM_OC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c614:	68a2      	ldr	r2, [r4, #8]
 800c616:	f032 0310 	bics.w	r3, r2, #16
 800c61a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800c61e:	bf14      	ite	ne
 800c620:	2301      	movne	r3, #1
 800c622:	2300      	moveq	r3, #0
 800c624:	2920      	cmp	r1, #32
 800c626:	bf0c      	ite	eq
 800c628:	2300      	moveq	r3, #0
 800c62a:	f003 0301 	andne.w	r3, r3, #1
 800c62e:	b10b      	cbz	r3, 800c634 <HAL_TIM_OC_Init+0xd8>
 800c630:	2a40      	cmp	r2, #64	; 0x40
 800c632:	d139      	bne.n	800c6a8 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c63a:	d002      	beq.n	800c642 <HAL_TIM_OC_Init+0xe6>
 800c63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c640:	d128      	bne.n	800c694 <HAL_TIM_OC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c642:	69a3      	ldr	r3, [r4, #24]
 800c644:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c648:	d116      	bne.n	800c678 <HAL_TIM_OC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c64a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c64e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c652:	b15b      	cbz	r3, 800c66c <HAL_TIM_OC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800c654:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c656:	6820      	ldr	r0, [r4, #0]
 800c658:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c65a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c65e:	f7ff fe4f 	bl	800c300 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c662:	2301      	movs	r3, #1
  return HAL_OK;
 800c664:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c66c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800c670:	4620      	mov	r0, r4
 800c672:	f7ff f9c1 	bl	800b9f8 <HAL_TIM_OC_MspInit>
 800c676:	e7ed      	b.n	800c654 <HAL_TIM_OC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c678:	f44f 7119 	mov.w	r1, #612	; 0x264
 800c67c:	4815      	ldr	r0, [pc, #84]	; (800c6d4 <HAL_TIM_OC_Init+0x178>)
 800c67e:	f7f6 fb8d 	bl	8002d9c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c682:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1e2      	bne.n	800c654 <HAL_TIM_OC_Init+0xf8>
 800c68e:	e7ed      	b.n	800c66c <HAL_TIM_OC_Init+0x110>
    return HAL_ERROR;
 800c690:	2001      	movs	r0, #1
}
 800c692:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c694:	f240 2163 	movw	r1, #611	; 0x263
 800c698:	480e      	ldr	r0, [pc, #56]	; (800c6d4 <HAL_TIM_OC_Init+0x178>)
 800c69a:	f7f6 fb7f 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c69e:	69a3      	ldr	r3, [r4, #24]
 800c6a0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c6a4:	d0d1      	beq.n	800c64a <HAL_TIM_OC_Init+0xee>
 800c6a6:	e7e7      	b.n	800c678 <HAL_TIM_OC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c6a8:	f240 2162 	movw	r1, #610	; 0x262
 800c6ac:	4809      	ldr	r0, [pc, #36]	; (800c6d4 <HAL_TIM_OC_Init+0x178>)
 800c6ae:	f7f6 fb75 	bl	8002d9c <assert_failed>
 800c6b2:	e7bf      	b.n	800c634 <HAL_TIM_OC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6b4:	f240 2161 	movw	r1, #609	; 0x261
 800c6b8:	4806      	ldr	r0, [pc, #24]	; (800c6d4 <HAL_TIM_OC_Init+0x178>)
 800c6ba:	f7f6 fb6f 	bl	8002d9c <assert_failed>
 800c6be:	e7a9      	b.n	800c614 <HAL_TIM_OC_Init+0xb8>
 800c6c0:	40000800 	.word	0x40000800
 800c6c4:	40010000 	.word	0x40010000
 800c6c8:	40000400 	.word	0x40000400
 800c6cc:	40000c00 	.word	0x40000c00
 800c6d0:	40002000 	.word	0x40002000
 800c6d4:	08026410 	.word	0x08026410

0800c6d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f000 8097 	beq.w	800c80c <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6de:	6802      	ldr	r2, [r0, #0]
 800c6e0:	4956      	ldr	r1, [pc, #344]	; (800c83c <HAL_TIM_PWM_Init+0x164>)
{
 800c6e2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6e4:	4b56      	ldr	r3, [pc, #344]	; (800c840 <HAL_TIM_PWM_Init+0x168>)
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	4856      	ldr	r0, [pc, #344]	; (800c844 <HAL_TIM_PWM_Init+0x16c>)
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	bf18      	it	ne
 800c6ee:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c6f2:	4d55      	ldr	r5, [pc, #340]	; (800c848 <HAL_TIM_PWM_Init+0x170>)
 800c6f4:	bf14      	ite	ne
 800c6f6:	2301      	movne	r3, #1
 800c6f8:	2300      	moveq	r3, #0
 800c6fa:	4282      	cmp	r2, r0
 800c6fc:	bf0c      	ite	eq
 800c6fe:	2300      	moveq	r3, #0
 800c700:	f003 0301 	andne.w	r3, r3, #1
 800c704:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c708:	428a      	cmp	r2, r1
 800c70a:	bf0c      	ite	eq
 800c70c:	2300      	moveq	r3, #0
 800c70e:	f003 0301 	andne.w	r3, r3, #1
 800c712:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c716:	42aa      	cmp	r2, r5
 800c718:	bf0c      	ite	eq
 800c71a:	2300      	moveq	r3, #0
 800c71c:	f003 0301 	andne.w	r3, r3, #1
 800c720:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c724:	4282      	cmp	r2, r0
 800c726:	bf0c      	ite	eq
 800c728:	2300      	moveq	r3, #0
 800c72a:	f003 0301 	andne.w	r3, r3, #1
 800c72e:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c732:	428a      	cmp	r2, r1
 800c734:	bf0c      	ite	eq
 800c736:	2300      	moveq	r3, #0
 800c738:	f003 0301 	andne.w	r3, r3, #1
 800c73c:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c740:	42aa      	cmp	r2, r5
 800c742:	bf0c      	ite	eq
 800c744:	2300      	moveq	r3, #0
 800c746:	f003 0301 	andne.w	r3, r3, #1
 800c74a:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c74e:	4282      	cmp	r2, r0
 800c750:	bf0c      	ite	eq
 800c752:	2300      	moveq	r3, #0
 800c754:	f003 0301 	andne.w	r3, r3, #1
 800c758:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c75c:	428a      	cmp	r2, r1
 800c75e:	bf0c      	ite	eq
 800c760:	2300      	moveq	r3, #0
 800c762:	f003 0301 	andne.w	r3, r3, #1
 800c766:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c76a:	42aa      	cmp	r2, r5
 800c76c:	bf0c      	ite	eq
 800c76e:	2300      	moveq	r3, #0
 800c770:	f003 0301 	andne.w	r3, r3, #1
 800c774:	4282      	cmp	r2, r0
 800c776:	bf0c      	ite	eq
 800c778:	2300      	moveq	r3, #0
 800c77a:	f003 0301 	andne.w	r3, r3, #1
 800c77e:	428a      	cmp	r2, r1
 800c780:	bf0c      	ite	eq
 800c782:	2300      	moveq	r3, #0
 800c784:	f003 0301 	andne.w	r3, r3, #1
 800c788:	b113      	cbz	r3, 800c790 <HAL_TIM_PWM_Init+0xb8>
 800c78a:	4b30      	ldr	r3, [pc, #192]	; (800c84c <HAL_TIM_PWM_Init+0x174>)
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d14f      	bne.n	800c830 <HAL_TIM_PWM_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c790:	68a2      	ldr	r2, [r4, #8]
 800c792:	f032 0310 	bics.w	r3, r2, #16
 800c796:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800c79a:	bf14      	ite	ne
 800c79c:	2301      	movne	r3, #1
 800c79e:	2300      	moveq	r3, #0
 800c7a0:	2920      	cmp	r1, #32
 800c7a2:	bf0c      	ite	eq
 800c7a4:	2300      	moveq	r3, #0
 800c7a6:	f003 0301 	andne.w	r3, r3, #1
 800c7aa:	b10b      	cbz	r3, 800c7b0 <HAL_TIM_PWM_Init+0xd8>
 800c7ac:	2a40      	cmp	r2, #64	; 0x40
 800c7ae:	d139      	bne.n	800c824 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c7b6:	d002      	beq.n	800c7be <HAL_TIM_PWM_Init+0xe6>
 800c7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7bc:	d128      	bne.n	800c810 <HAL_TIM_PWM_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c7be:	69a3      	ldr	r3, [r4, #24]
 800c7c0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c7c4:	d116      	bne.n	800c7f4 <HAL_TIM_PWM_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c7ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7ce:	b15b      	cbz	r3, 800c7e8 <HAL_TIM_PWM_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7da:	f7ff fd91 	bl	800c300 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c7de:	2301      	movs	r3, #1
  return HAL_OK;
 800c7e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c7e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c7e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7ff f905 	bl	800b9fc <HAL_TIM_PWM_MspInit>
 800c7f2:	e7ed      	b.n	800c7d0 <HAL_TIM_PWM_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c7f4:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800c7f8:	4815      	ldr	r0, [pc, #84]	; (800c850 <HAL_TIM_PWM_Init+0x178>)
 800c7fa:	f7f6 facf 	bl	8002d9c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c7fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c802:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1e2      	bne.n	800c7d0 <HAL_TIM_PWM_Init+0xf8>
 800c80a:	e7ed      	b.n	800c7e8 <HAL_TIM_PWM_Init+0x110>
    return HAL_ERROR;
 800c80c:	2001      	movs	r0, #1
}
 800c80e:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c810:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800c814:	480e      	ldr	r0, [pc, #56]	; (800c850 <HAL_TIM_PWM_Init+0x178>)
 800c816:	f7f6 fac1 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c81a:	69a3      	ldr	r3, [r4, #24]
 800c81c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c820:	d0d1      	beq.n	800c7c6 <HAL_TIM_PWM_Init+0xee>
 800c822:	e7e7      	b.n	800c7f4 <HAL_TIM_PWM_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c824:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800c828:	4809      	ldr	r0, [pc, #36]	; (800c850 <HAL_TIM_PWM_Init+0x178>)
 800c82a:	f7f6 fab7 	bl	8002d9c <assert_failed>
 800c82e:	e7bf      	b.n	800c7b0 <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c830:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800c834:	4806      	ldr	r0, [pc, #24]	; (800c850 <HAL_TIM_PWM_Init+0x178>)
 800c836:	f7f6 fab1 	bl	8002d9c <assert_failed>
 800c83a:	e7a9      	b.n	800c790 <HAL_TIM_PWM_Init+0xb8>
 800c83c:	40000800 	.word	0x40000800
 800c840:	40010000 	.word	0x40010000
 800c844:	40000400 	.word	0x40000400
 800c848:	40000c00 	.word	0x40000c00
 800c84c:	40002000 	.word	0x40002000
 800c850:	08026410 	.word	0x08026410

0800c854 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800c854:	2800      	cmp	r0, #0
 800c856:	f000 8097 	beq.w	800c988 <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c85a:	6802      	ldr	r2, [r0, #0]
 800c85c:	4956      	ldr	r1, [pc, #344]	; (800c9b8 <HAL_TIM_IC_Init+0x164>)
{
 800c85e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c860:	4b56      	ldr	r3, [pc, #344]	; (800c9bc <HAL_TIM_IC_Init+0x168>)
 800c862:	4604      	mov	r4, r0
 800c864:	4856      	ldr	r0, [pc, #344]	; (800c9c0 <HAL_TIM_IC_Init+0x16c>)
 800c866:	429a      	cmp	r2, r3
 800c868:	bf18      	it	ne
 800c86a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800c86e:	4d55      	ldr	r5, [pc, #340]	; (800c9c4 <HAL_TIM_IC_Init+0x170>)
 800c870:	bf14      	ite	ne
 800c872:	2301      	movne	r3, #1
 800c874:	2300      	moveq	r3, #0
 800c876:	4282      	cmp	r2, r0
 800c878:	bf0c      	ite	eq
 800c87a:	2300      	moveq	r3, #0
 800c87c:	f003 0301 	andne.w	r3, r3, #1
 800c880:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800c884:	428a      	cmp	r2, r1
 800c886:	bf0c      	ite	eq
 800c888:	2300      	moveq	r3, #0
 800c88a:	f003 0301 	andne.w	r3, r3, #1
 800c88e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800c892:	42aa      	cmp	r2, r5
 800c894:	bf0c      	ite	eq
 800c896:	2300      	moveq	r3, #0
 800c898:	f003 0301 	andne.w	r3, r3, #1
 800c89c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800c8a0:	4282      	cmp	r2, r0
 800c8a2:	bf0c      	ite	eq
 800c8a4:	2300      	moveq	r3, #0
 800c8a6:	f003 0301 	andne.w	r3, r3, #1
 800c8aa:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800c8ae:	428a      	cmp	r2, r1
 800c8b0:	bf0c      	ite	eq
 800c8b2:	2300      	moveq	r3, #0
 800c8b4:	f003 0301 	andne.w	r3, r3, #1
 800c8b8:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800c8bc:	42aa      	cmp	r2, r5
 800c8be:	bf0c      	ite	eq
 800c8c0:	2300      	moveq	r3, #0
 800c8c2:	f003 0301 	andne.w	r3, r3, #1
 800c8c6:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800c8ca:	4282      	cmp	r2, r0
 800c8cc:	bf0c      	ite	eq
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	f003 0301 	andne.w	r3, r3, #1
 800c8d4:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800c8d8:	428a      	cmp	r2, r1
 800c8da:	bf0c      	ite	eq
 800c8dc:	2300      	moveq	r3, #0
 800c8de:	f003 0301 	andne.w	r3, r3, #1
 800c8e2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800c8e6:	42aa      	cmp	r2, r5
 800c8e8:	bf0c      	ite	eq
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	f003 0301 	andne.w	r3, r3, #1
 800c8f0:	4282      	cmp	r2, r0
 800c8f2:	bf0c      	ite	eq
 800c8f4:	2300      	moveq	r3, #0
 800c8f6:	f003 0301 	andne.w	r3, r3, #1
 800c8fa:	428a      	cmp	r2, r1
 800c8fc:	bf0c      	ite	eq
 800c8fe:	2300      	moveq	r3, #0
 800c900:	f003 0301 	andne.w	r3, r3, #1
 800c904:	b113      	cbz	r3, 800c90c <HAL_TIM_IC_Init+0xb8>
 800c906:	4b30      	ldr	r3, [pc, #192]	; (800c9c8 <HAL_TIM_IC_Init+0x174>)
 800c908:	429a      	cmp	r2, r3
 800c90a:	d14f      	bne.n	800c9ac <HAL_TIM_IC_Init+0x158>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c90c:	68a2      	ldr	r2, [r4, #8]
 800c90e:	f032 0310 	bics.w	r3, r2, #16
 800c912:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800c916:	bf14      	ite	ne
 800c918:	2301      	movne	r3, #1
 800c91a:	2300      	moveq	r3, #0
 800c91c:	2920      	cmp	r1, #32
 800c91e:	bf0c      	ite	eq
 800c920:	2300      	moveq	r3, #0
 800c922:	f003 0301 	andne.w	r3, r3, #1
 800c926:	b10b      	cbz	r3, 800c92c <HAL_TIM_IC_Init+0xd8>
 800c928:	2a40      	cmp	r2, #64	; 0x40
 800c92a:	d139      	bne.n	800c9a0 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c92c:	6923      	ldr	r3, [r4, #16]
 800c92e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c932:	d002      	beq.n	800c93a <HAL_TIM_IC_Init+0xe6>
 800c934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c938:	d128      	bne.n	800c98c <HAL_TIM_IC_Init+0x138>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c93a:	69a3      	ldr	r3, [r4, #24]
 800c93c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c940:	d116      	bne.n	800c970 <HAL_TIM_IC_Init+0x11c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c942:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c946:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c94a:	b15b      	cbz	r3, 800c964 <HAL_TIM_IC_Init+0x110>
  htim->State = HAL_TIM_STATE_BUSY;
 800c94c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c94e:	6820      	ldr	r0, [r4, #0]
 800c950:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c952:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c956:	f7ff fcd3 	bl	800c300 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c95a:	2301      	movs	r3, #1
  return HAL_OK;
 800c95c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c95e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c962:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c964:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800c968:	4620      	mov	r0, r4
 800c96a:	f7ff f849 	bl	800ba00 <HAL_TIM_IC_MspInit>
 800c96e:	e7ed      	b.n	800c94c <HAL_TIM_IC_Init+0xf8>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c970:	f240 61e7 	movw	r1, #1767	; 0x6e7
 800c974:	4815      	ldr	r0, [pc, #84]	; (800c9cc <HAL_TIM_IC_Init+0x178>)
 800c976:	f7f6 fa11 	bl	8002d9c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c97a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800c97e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e2      	bne.n	800c94c <HAL_TIM_IC_Init+0xf8>
 800c986:	e7ed      	b.n	800c964 <HAL_TIM_IC_Init+0x110>
    return HAL_ERROR;
 800c988:	2001      	movs	r0, #1
}
 800c98a:	4770      	bx	lr
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c98c:	f240 61e6 	movw	r1, #1766	; 0x6e6
 800c990:	480e      	ldr	r0, [pc, #56]	; (800c9cc <HAL_TIM_IC_Init+0x178>)
 800c992:	f7f6 fa03 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c996:	69a3      	ldr	r3, [r4, #24]
 800c998:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c99c:	d0d1      	beq.n	800c942 <HAL_TIM_IC_Init+0xee>
 800c99e:	e7e7      	b.n	800c970 <HAL_TIM_IC_Init+0x11c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c9a0:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800c9a4:	4809      	ldr	r0, [pc, #36]	; (800c9cc <HAL_TIM_IC_Init+0x178>)
 800c9a6:	f7f6 f9f9 	bl	8002d9c <assert_failed>
 800c9aa:	e7bf      	b.n	800c92c <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c9ac:	f240 61e4 	movw	r1, #1764	; 0x6e4
 800c9b0:	4806      	ldr	r0, [pc, #24]	; (800c9cc <HAL_TIM_IC_Init+0x178>)
 800c9b2:	f7f6 f9f3 	bl	8002d9c <assert_failed>
 800c9b6:	e7a9      	b.n	800c90c <HAL_TIM_IC_Init+0xb8>
 800c9b8:	40000800 	.word	0x40000800
 800c9bc:	40010000 	.word	0x40010000
 800c9c0:	40000400 	.word	0x40000400
 800c9c4:	40000c00 	.word	0x40000c00
 800c9c8:	40002000 	.word	0x40002000
 800c9cc:	08026410 	.word	0x08026410

0800c9d0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9d0:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9d2:	4b2e      	ldr	r3, [pc, #184]	; (800ca8c <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9d4:	f022 0210 	bic.w	r2, r2, #16
{
 800c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9dc:	460e      	mov	r6, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9de:	6889      	ldr	r1, [r1, #8]
{
 800c9e0:	4604      	mov	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9e2:	6837      	ldr	r7, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9e4:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800c9e6:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c9e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c9ec:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c9ee:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9f2:	4013      	ands	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9f4:	4a26      	ldr	r2, [pc, #152]	; (800ca90 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9f6:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9fa:	4290      	cmp	r0, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9fc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca00:	d00a      	beq.n	800ca18 <TIM_OC2_SetConfig+0x48>
 800ca02:	4b24      	ldr	r3, [pc, #144]	; (800ca94 <TIM_OC2_SetConfig+0xc4>)
 800ca04:	4298      	cmp	r0, r3
 800ca06:	d007      	beq.n	800ca18 <TIM_OC2_SetConfig+0x48>
  TIMx->CCR2 = OC_Config->Pulse;
 800ca08:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ca0a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ca0e:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ca10:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ca12:	6225      	str	r5, [r4, #32]
}
 800ca14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ca18:	68f2      	ldr	r2, [r6, #12]
 800ca1a:	f032 0308 	bics.w	r3, r2, #8
 800ca1e:	d12d      	bne.n	800ca7c <TIM_OC2_SetConfig+0xac>
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca20:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca24:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca26:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca2a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca2e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca32:	d119      	bne.n	800ca68 <TIM_OC2_SetConfig+0x98>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca34:	6973      	ldr	r3, [r6, #20]
 800ca36:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca3a:	d107      	bne.n	800ca4c <TIM_OC2_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca3c:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca40:	69b1      	ldr	r1, [r6, #24]
 800ca42:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ca46:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800ca4a:	e7dd      	b.n	800ca08 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca4c:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800ca50:	4811      	ldr	r0, [pc, #68]	; (800ca98 <TIM_OC2_SetConfig+0xc8>)
 800ca52:	f7f6 f9a3 	bl	8002d9c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca56:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca5a:	69b1      	ldr	r1, [r6, #24]
 800ca5c:	6973      	ldr	r3, [r6, #20]
 800ca5e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ca62:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800ca66:	e7cf      	b.n	800ca08 <TIM_OC2_SetConfig+0x38>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca68:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800ca6c:	480a      	ldr	r0, [pc, #40]	; (800ca98 <TIM_OC2_SetConfig+0xc8>)
 800ca6e:	f7f6 f995 	bl	8002d9c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca72:	6973      	ldr	r3, [r6, #20]
 800ca74:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca78:	d0e0      	beq.n	800ca3c <TIM_OC2_SetConfig+0x6c>
 800ca7a:	e7e7      	b.n	800ca4c <TIM_OC2_SetConfig+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ca7c:	f241 71d6 	movw	r1, #6102	; 0x17d6
 800ca80:	4805      	ldr	r0, [pc, #20]	; (800ca98 <TIM_OC2_SetConfig+0xc8>)
 800ca82:	f7f6 f98b 	bl	8002d9c <assert_failed>
 800ca86:	68f2      	ldr	r2, [r6, #12]
 800ca88:	e7ca      	b.n	800ca20 <TIM_OC2_SetConfig+0x50>
 800ca8a:	bf00      	nop
 800ca8c:	feff8cff 	.word	0xfeff8cff
 800ca90:	40010000 	.word	0x40010000
 800ca94:	40010400 	.word	0x40010400
 800ca98:	08026410 	.word	0x08026410

0800ca9c <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800ca9c:	2a14      	cmp	r2, #20
{
 800ca9e:	b570      	push	{r4, r5, r6, lr}
 800caa0:	4615      	mov	r5, r2
 800caa2:	4604      	mov	r4, r0
 800caa4:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800caa6:	f240 808f 	bls.w	800cbc8 <HAL_TIM_OC_ConfigChannel+0x12c>
 800caaa:	2a3c      	cmp	r2, #60	; 0x3c
 800caac:	f040 8091 	bne.w	800cbd2 <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	f023 0210 	bic.w	r2, r3, #16
 800cab6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800caba:	2a40      	cmp	r2, #64	; 0x40
 800cabc:	bf18      	it	ne
 800cabe:	2b00      	cmpne	r3, #0
 800cac0:	d003      	beq.n	800caca <HAL_TIM_OC_ConfigChannel+0x2e>
 800cac2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cac6:	f040 8137 	bne.w	800cd38 <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800caca:	68b3      	ldr	r3, [r6, #8]
 800cacc:	f033 0302 	bics.w	r3, r3, #2
 800cad0:	f040 8085 	bne.w	800cbde <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800cad4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cad8:	2b01      	cmp	r3, #1
 800cada:	f000 808a 	beq.w	800cbf2 <HAL_TIM_OC_ConfigChannel+0x156>
 800cade:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cae0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800cae2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cae6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800caea:	2d14      	cmp	r5, #20
 800caec:	d864      	bhi.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
 800caee:	e8df f015 	tbh	[pc, r5, lsl #1]
 800caf2:	0015      	.short	0x0015
 800caf4:	00630063 	.word	0x00630063
 800caf8:	00820063 	.word	0x00820063
 800cafc:	00630063 	.word	0x00630063
 800cb00:	00b50063 	.word	0x00b50063
 800cb04:	00630063 	.word	0x00630063
 800cb08:	00d90063 	.word	0x00d90063
 800cb0c:	00630063 	.word	0x00630063
 800cb10:	00fd0063 	.word	0x00fd0063
 800cb14:	00630063 	.word	0x00630063
 800cb18:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	4b97      	ldr	r3, [pc, #604]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800cb20:	4a97      	ldr	r2, [pc, #604]	; (800cd80 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800cb22:	4298      	cmp	r0, r3
 800cb24:	bf18      	it	ne
 800cb26:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cb2a:	4996      	ldr	r1, [pc, #600]	; (800cd84 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800cb2c:	bf14      	ite	ne
 800cb2e:	2301      	movne	r3, #1
 800cb30:	2300      	moveq	r3, #0
 800cb32:	4290      	cmp	r0, r2
 800cb34:	bf0c      	ite	eq
 800cb36:	2300      	moveq	r3, #0
 800cb38:	f003 0301 	andne.w	r3, r3, #1
 800cb3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb40:	4288      	cmp	r0, r1
 800cb42:	bf0c      	ite	eq
 800cb44:	2300      	moveq	r3, #0
 800cb46:	f003 0301 	andne.w	r3, r3, #1
 800cb4a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cb4e:	4290      	cmp	r0, r2
 800cb50:	bf0c      	ite	eq
 800cb52:	2300      	moveq	r3, #0
 800cb54:	f003 0301 	andne.w	r3, r3, #1
 800cb58:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cb5c:	4288      	cmp	r0, r1
 800cb5e:	bf0c      	ite	eq
 800cb60:	2300      	moveq	r3, #0
 800cb62:	f003 0301 	andne.w	r3, r3, #1
 800cb66:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800cb6a:	4290      	cmp	r0, r2
 800cb6c:	bf0c      	ite	eq
 800cb6e:	2300      	moveq	r3, #0
 800cb70:	f003 0301 	andne.w	r3, r3, #1
 800cb74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb78:	4288      	cmp	r0, r1
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2300      	moveq	r3, #0
 800cb7e:	f003 0301 	andne.w	r3, r3, #1
 800cb82:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800cb86:	4290      	cmp	r0, r2
 800cb88:	bf0c      	ite	eq
 800cb8a:	2300      	moveq	r3, #0
 800cb8c:	f003 0301 	andne.w	r3, r3, #1
 800cb90:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800cb94:	4288      	cmp	r0, r1
 800cb96:	bf0c      	ite	eq
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	f003 0301 	andne.w	r3, r3, #1
 800cb9e:	4290      	cmp	r0, r2
 800cba0:	bf0c      	ite	eq
 800cba2:	2300      	moveq	r3, #0
 800cba4:	f003 0301 	andne.w	r3, r3, #1
 800cba8:	b11b      	cbz	r3, 800cbb2 <HAL_TIM_OC_ConfigChannel+0x116>
 800cbaa:	4b77      	ldr	r3, [pc, #476]	; (800cd88 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800cbac:	4298      	cmp	r0, r3
 800cbae:	f040 80de 	bne.w	800cd6e <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	f7fe faec 	bl	800b190 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800cbb8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800cbba:	2201      	movs	r2, #1
  return HAL_OK;
 800cbbc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800cbbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cbc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800cbc8:	4b70      	ldr	r3, [pc, #448]	; (800cd8c <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800cbca:	40d3      	lsrs	r3, r2
 800cbcc:	07db      	lsls	r3, r3, #31
 800cbce:	f53f af6f 	bmi.w	800cab0 <HAL_TIM_OC_ConfigChannel+0x14>
 800cbd2:	f640 5155 	movw	r1, #3413	; 0xd55
 800cbd6:	486e      	ldr	r0, [pc, #440]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cbd8:	f7f6 f8e0 	bl	8002d9c <assert_failed>
 800cbdc:	e768      	b.n	800cab0 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800cbde:	f640 5157 	movw	r1, #3415	; 0xd57
 800cbe2:	486b      	ldr	r0, [pc, #428]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cbe4:	f7f6 f8da 	bl	8002d9c <assert_failed>
  __HAL_LOCK(htim);
 800cbe8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	f47f af76 	bne.w	800cade <HAL_TIM_OC_ConfigChannel+0x42>
 800cbf2:	2002      	movs	r0, #2
}
 800cbf4:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cbf6:	6820      	ldr	r0, [r4, #0]
 800cbf8:	4b60      	ldr	r3, [pc, #384]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800cbfa:	4a61      	ldr	r2, [pc, #388]	; (800cd80 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800cbfc:	4298      	cmp	r0, r3
 800cbfe:	bf18      	it	ne
 800cc00:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cc04:	495f      	ldr	r1, [pc, #380]	; (800cd84 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800cc06:	bf14      	ite	ne
 800cc08:	2301      	movne	r3, #1
 800cc0a:	2300      	moveq	r3, #0
 800cc0c:	4290      	cmp	r0, r2
 800cc0e:	bf0c      	ite	eq
 800cc10:	2300      	moveq	r3, #0
 800cc12:	f003 0301 	andne.w	r3, r3, #1
 800cc16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc1a:	4288      	cmp	r0, r1
 800cc1c:	bf0c      	ite	eq
 800cc1e:	2300      	moveq	r3, #0
 800cc20:	f003 0301 	andne.w	r3, r3, #1
 800cc24:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cc28:	4290      	cmp	r0, r2
 800cc2a:	bf0c      	ite	eq
 800cc2c:	2300      	moveq	r3, #0
 800cc2e:	f003 0301 	andne.w	r3, r3, #1
 800cc32:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cc36:	4288      	cmp	r0, r1
 800cc38:	bf0c      	ite	eq
 800cc3a:	2300      	moveq	r3, #0
 800cc3c:	f003 0301 	andne.w	r3, r3, #1
 800cc40:	4290      	cmp	r0, r2
 800cc42:	bf0c      	ite	eq
 800cc44:	2300      	moveq	r3, #0
 800cc46:	f003 0301 	andne.w	r3, r3, #1
 800cc4a:	b11b      	cbz	r3, 800cc54 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800cc4c:	4b51      	ldr	r3, [pc, #324]	; (800cd94 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800cc4e:	4298      	cmp	r0, r3
 800cc50:	f040 8086 	bne.w	800cd60 <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc54:	4631      	mov	r1, r6
 800cc56:	f7ff febb 	bl	800c9d0 <TIM_OC2_SetConfig>
      break;
 800cc5a:	e7ad      	b.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800cc5c:	6820      	ldr	r0, [r4, #0]
 800cc5e:	4b47      	ldr	r3, [pc, #284]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800cc60:	4a47      	ldr	r2, [pc, #284]	; (800cd80 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800cc62:	4298      	cmp	r0, r3
 800cc64:	bf18      	it	ne
 800cc66:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cc6a:	4946      	ldr	r1, [pc, #280]	; (800cd84 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800cc6c:	bf14      	ite	ne
 800cc6e:	2301      	movne	r3, #1
 800cc70:	2300      	moveq	r3, #0
 800cc72:	4290      	cmp	r0, r2
 800cc74:	bf0c      	ite	eq
 800cc76:	2300      	moveq	r3, #0
 800cc78:	f003 0301 	andne.w	r3, r3, #1
 800cc7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc80:	4288      	cmp	r0, r1
 800cc82:	bf0c      	ite	eq
 800cc84:	2300      	moveq	r3, #0
 800cc86:	f003 0301 	andne.w	r3, r3, #1
 800cc8a:	4290      	cmp	r0, r2
 800cc8c:	bf0c      	ite	eq
 800cc8e:	2300      	moveq	r3, #0
 800cc90:	f003 0301 	andne.w	r3, r3, #1
 800cc94:	b113      	cbz	r3, 800cc9c <HAL_TIM_OC_ConfigChannel+0x200>
 800cc96:	4b40      	ldr	r3, [pc, #256]	; (800cd98 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800cc98:	4298      	cmp	r0, r3
 800cc9a:	d15a      	bne.n	800cd52 <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc9c:	4631      	mov	r1, r6
 800cc9e:	f7fe fad9 	bl	800b254 <TIM_OC3_SetConfig>
      break;
 800cca2:	e789      	b.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800cca4:	6820      	ldr	r0, [r4, #0]
 800cca6:	4b35      	ldr	r3, [pc, #212]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800cca8:	4a35      	ldr	r2, [pc, #212]	; (800cd80 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800ccaa:	4298      	cmp	r0, r3
 800ccac:	bf18      	it	ne
 800ccae:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800ccb2:	4934      	ldr	r1, [pc, #208]	; (800cd84 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800ccb4:	bf14      	ite	ne
 800ccb6:	2301      	movne	r3, #1
 800ccb8:	2300      	moveq	r3, #0
 800ccba:	4290      	cmp	r0, r2
 800ccbc:	bf0c      	ite	eq
 800ccbe:	2300      	moveq	r3, #0
 800ccc0:	f003 0301 	andne.w	r3, r3, #1
 800ccc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccc8:	4288      	cmp	r0, r1
 800ccca:	bf0c      	ite	eq
 800cccc:	2300      	moveq	r3, #0
 800ccce:	f003 0301 	andne.w	r3, r3, #1
 800ccd2:	4290      	cmp	r0, r2
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2300      	moveq	r3, #0
 800ccd8:	f003 0301 	andne.w	r3, r3, #1
 800ccdc:	b113      	cbz	r3, 800cce4 <HAL_TIM_OC_ConfigChannel+0x248>
 800ccde:	4b2e      	ldr	r3, [pc, #184]	; (800cd98 <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800cce0:	4298      	cmp	r0, r3
 800cce2:	d12f      	bne.n	800cd44 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cce4:	4631      	mov	r1, r6
 800cce6:	f7fe fb1b 	bl	800b320 <TIM_OC4_SetConfig>
      break;
 800ccea:	e765      	b.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800ccec:	6820      	ldr	r0, [r4, #0]
 800ccee:	4b23      	ldr	r3, [pc, #140]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800ccf0:	4298      	cmp	r0, r3
 800ccf2:	d003      	beq.n	800ccfc <HAL_TIM_OC_ConfigChannel+0x260>
 800ccf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccf8:	4298      	cmp	r0, r3
 800ccfa:	d116      	bne.n	800cd2a <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	f7fe f9f3 	bl	800b0e8 <TIM_OC5_SetConfig>
      break;
 800cd02:	e759      	b.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	4b1d      	ldr	r3, [pc, #116]	; (800cd7c <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800cd08:	4298      	cmp	r0, r3
 800cd0a:	d003      	beq.n	800cd14 <HAL_TIM_OC_ConfigChannel+0x278>
 800cd0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd10:	4298      	cmp	r0, r3
 800cd12:	d103      	bne.n	800cd1c <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd14:	4631      	mov	r1, r6
 800cd16:	f7fe fa11 	bl	800b13c <TIM_OC6_SetConfig>
      break;
 800cd1a:	e74d      	b.n	800cbb8 <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800cd1c:	481c      	ldr	r0, [pc, #112]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd1e:	f640 5195 	movw	r1, #3477	; 0xd95
 800cd22:	f7f6 f83b 	bl	8002d9c <assert_failed>
 800cd26:	6820      	ldr	r0, [r4, #0]
 800cd28:	e7f4      	b.n	800cd14 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800cd2a:	4819      	ldr	r0, [pc, #100]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd2c:	f640 518b 	movw	r1, #3467	; 0xd8b
 800cd30:	f7f6 f834 	bl	8002d9c <assert_failed>
 800cd34:	6820      	ldr	r0, [r4, #0]
 800cd36:	e7e1      	b.n	800ccfc <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800cd38:	f640 5156 	movw	r1, #3414	; 0xd56
 800cd3c:	4814      	ldr	r0, [pc, #80]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd3e:	f7f6 f82d 	bl	8002d9c <assert_failed>
 800cd42:	e6c2      	b.n	800caca <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800cd44:	4812      	ldr	r0, [pc, #72]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd46:	f640 5181 	movw	r1, #3457	; 0xd81
 800cd4a:	f7f6 f827 	bl	8002d9c <assert_failed>
 800cd4e:	6820      	ldr	r0, [r4, #0]
 800cd50:	e7c8      	b.n	800cce4 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800cd52:	480f      	ldr	r0, [pc, #60]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd54:	f640 5177 	movw	r1, #3447	; 0xd77
 800cd58:	f7f6 f820 	bl	8002d9c <assert_failed>
 800cd5c:	6820      	ldr	r0, [r4, #0]
 800cd5e:	e79d      	b.n	800cc9c <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cd60:	480b      	ldr	r0, [pc, #44]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd62:	f640 516d 	movw	r1, #3437	; 0xd6d
 800cd66:	f7f6 f819 	bl	8002d9c <assert_failed>
 800cd6a:	6820      	ldr	r0, [r4, #0]
 800cd6c:	e772      	b.n	800cc54 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cd6e:	4808      	ldr	r0, [pc, #32]	; (800cd90 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800cd70:	f640 5163 	movw	r1, #3427	; 0xd63
 800cd74:	f7f6 f812 	bl	8002d9c <assert_failed>
 800cd78:	6820      	ldr	r0, [r4, #0]
 800cd7a:	e71a      	b.n	800cbb2 <HAL_TIM_OC_ConfigChannel+0x116>
 800cd7c:	40010000 	.word	0x40010000
 800cd80:	40000400 	.word	0x40000400
 800cd84:	40000800 	.word	0x40000800
 800cd88:	40002000 	.word	0x40002000
 800cd8c:	00111111 	.word	0x00111111
 800cd90:	08026410 	.word	0x08026410
 800cd94:	40001800 	.word	0x40001800
 800cd98:	40010400 	.word	0x40010400

0800cd9c <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800cd9c:	2a14      	cmp	r2, #20
{
 800cd9e:	b570      	push	{r4, r5, r6, lr}
 800cda0:	4616      	mov	r6, r2
 800cda2:	4604      	mov	r4, r0
 800cda4:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800cda6:	f240 809f 	bls.w	800cee8 <HAL_TIM_PWM_ConfigChannel+0x14c>
 800cdaa:	2a3c      	cmp	r2, #60	; 0x3c
 800cdac:	f040 80a1 	bne.w	800cef2 <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800cdb0:	682a      	ldr	r2, [r5, #0]
 800cdb2:	4b97      	ldr	r3, [pc, #604]	; (800d010 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	2b60      	cmp	r3, #96	; 0x60
 800cdb8:	d005      	beq.n	800cdc6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800cdba:	f022 0210 	bic.w	r2, r2, #16
 800cdbe:	4b95      	ldr	r3, [pc, #596]	; (800d014 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	f040 819e 	bne.w	800d102 <HAL_TIM_PWM_ConfigChannel+0x366>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800cdc6:	68ab      	ldr	r3, [r5, #8]
 800cdc8:	f033 0302 	bics.w	r3, r3, #2
 800cdcc:	f040 8097 	bne.w	800cefe <HAL_TIM_PWM_ConfigChannel+0x162>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800cdd0:	692b      	ldr	r3, [r5, #16]
 800cdd2:	f033 0304 	bics.w	r3, r3, #4
 800cdd6:	f040 809c 	bne.w	800cf12 <HAL_TIM_PWM_ConfigChannel+0x176>
  __HAL_LOCK(htim);
 800cdda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	f000 80a1 	beq.w	800cf26 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800cde4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cde6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800cde8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cdec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800cdf0:	2e14      	cmp	r6, #20
 800cdf2:	d871      	bhi.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800cdf4:	e8df f016 	tbh	[pc, r6, lsl #1]
 800cdf8:	00700015 	.word	0x00700015
 800cdfc:	00700070 	.word	0x00700070
 800ce00:	00700099 	.word	0x00700099
 800ce04:	00700070 	.word	0x00700070
 800ce08:	007000da 	.word	0x007000da
 800ce0c:	00700070 	.word	0x00700070
 800ce10:	00700120 	.word	0x00700120
 800ce14:	00700070 	.word	0x00700070
 800ce18:	00700152 	.word	0x00700152
 800ce1c:	00700070 	.word	0x00700070
 800ce20:	016b      	.short	0x016b
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ce22:	6820      	ldr	r0, [r4, #0]
 800ce24:	4b7c      	ldr	r3, [pc, #496]	; (800d018 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800ce26:	4a7d      	ldr	r2, [pc, #500]	; (800d01c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800ce28:	4298      	cmp	r0, r3
 800ce2a:	bf18      	it	ne
 800ce2c:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800ce30:	497b      	ldr	r1, [pc, #492]	; (800d020 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800ce32:	bf14      	ite	ne
 800ce34:	2301      	movne	r3, #1
 800ce36:	2300      	moveq	r3, #0
 800ce38:	4290      	cmp	r0, r2
 800ce3a:	bf0c      	ite	eq
 800ce3c:	2300      	moveq	r3, #0
 800ce3e:	f003 0301 	andne.w	r3, r3, #1
 800ce42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce46:	4288      	cmp	r0, r1
 800ce48:	bf0c      	ite	eq
 800ce4a:	2300      	moveq	r3, #0
 800ce4c:	f003 0301 	andne.w	r3, r3, #1
 800ce50:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ce54:	4290      	cmp	r0, r2
 800ce56:	bf0c      	ite	eq
 800ce58:	2300      	moveq	r3, #0
 800ce5a:	f003 0301 	andne.w	r3, r3, #1
 800ce5e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800ce62:	4288      	cmp	r0, r1
 800ce64:	bf0c      	ite	eq
 800ce66:	2300      	moveq	r3, #0
 800ce68:	f003 0301 	andne.w	r3, r3, #1
 800ce6c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800ce70:	4290      	cmp	r0, r2
 800ce72:	bf0c      	ite	eq
 800ce74:	2300      	moveq	r3, #0
 800ce76:	f003 0301 	andne.w	r3, r3, #1
 800ce7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce7e:	4288      	cmp	r0, r1
 800ce80:	bf0c      	ite	eq
 800ce82:	2300      	moveq	r3, #0
 800ce84:	f003 0301 	andne.w	r3, r3, #1
 800ce88:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ce8c:	4290      	cmp	r0, r2
 800ce8e:	bf0c      	ite	eq
 800ce90:	2300      	moveq	r3, #0
 800ce92:	f003 0301 	andne.w	r3, r3, #1
 800ce96:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800ce9a:	4288      	cmp	r0, r1
 800ce9c:	bf0c      	ite	eq
 800ce9e:	2300      	moveq	r3, #0
 800cea0:	f003 0301 	andne.w	r3, r3, #1
 800cea4:	4290      	cmp	r0, r2
 800cea6:	bf0c      	ite	eq
 800cea8:	2300      	moveq	r3, #0
 800ceaa:	f003 0301 	andne.w	r3, r3, #1
 800ceae:	b11b      	cbz	r3, 800ceb8 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800ceb0:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800ceb2:	4298      	cmp	r0, r3
 800ceb4:	f040 814e 	bne.w	800d154 <HAL_TIM_PWM_ConfigChannel+0x3b8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ceb8:	4629      	mov	r1, r5
 800ceba:	f7fe f969 	bl	800b190 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cebe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cec0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cec2:	6999      	ldr	r1, [r3, #24]
 800cec4:	f041 0108 	orr.w	r1, r1, #8
 800cec8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ceca:	6999      	ldr	r1, [r3, #24]
 800cecc:	f021 0104 	bic.w	r1, r1, #4
 800ced0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	4302      	orrs	r2, r0
 800ced6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800ced8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ceda:	2201      	movs	r2, #1
  return HAL_OK;
 800cedc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800cede:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cee2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800cee8:	4b4f      	ldr	r3, [pc, #316]	; (800d028 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800ceea:	40d3      	lsrs	r3, r2
 800ceec:	07db      	lsls	r3, r3, #31
 800ceee:	f53f af5f 	bmi.w	800cdb0 <HAL_TIM_PWM_ConfigChannel+0x14>
 800cef2:	f640 611c 	movw	r1, #3612	; 0xe1c
 800cef6:	484d      	ldr	r0, [pc, #308]	; (800d02c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800cef8:	f7f5 ff50 	bl	8002d9c <assert_failed>
 800cefc:	e758      	b.n	800cdb0 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800cefe:	f640 611e 	movw	r1, #3614	; 0xe1e
 800cf02:	484a      	ldr	r0, [pc, #296]	; (800d02c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800cf04:	f7f5 ff4a 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800cf08:	692b      	ldr	r3, [r5, #16]
 800cf0a:	f033 0304 	bics.w	r3, r3, #4
 800cf0e:	f43f af64 	beq.w	800cdda <HAL_TIM_PWM_ConfigChannel+0x3e>
 800cf12:	f640 611f 	movw	r1, #3615	; 0xe1f
 800cf16:	4845      	ldr	r0, [pc, #276]	; (800d02c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800cf18:	f7f5 ff40 	bl	8002d9c <assert_failed>
  __HAL_LOCK(htim);
 800cf1c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	f47f af5f 	bne.w	800cde4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800cf26:	2002      	movs	r0, #2
}
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cf2a:	6820      	ldr	r0, [r4, #0]
 800cf2c:	4b3a      	ldr	r3, [pc, #232]	; (800d018 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800cf2e:	4a3b      	ldr	r2, [pc, #236]	; (800d01c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800cf30:	4298      	cmp	r0, r3
 800cf32:	bf18      	it	ne
 800cf34:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cf38:	4939      	ldr	r1, [pc, #228]	; (800d020 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800cf3a:	bf14      	ite	ne
 800cf3c:	2301      	movne	r3, #1
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	4290      	cmp	r0, r2
 800cf42:	bf0c      	ite	eq
 800cf44:	2300      	moveq	r3, #0
 800cf46:	f003 0301 	andne.w	r3, r3, #1
 800cf4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4e:	4288      	cmp	r0, r1
 800cf50:	bf0c      	ite	eq
 800cf52:	2300      	moveq	r3, #0
 800cf54:	f003 0301 	andne.w	r3, r3, #1
 800cf58:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800cf5c:	4290      	cmp	r0, r2
 800cf5e:	bf0c      	ite	eq
 800cf60:	2300      	moveq	r3, #0
 800cf62:	f003 0301 	andne.w	r3, r3, #1
 800cf66:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800cf6a:	4288      	cmp	r0, r1
 800cf6c:	bf0c      	ite	eq
 800cf6e:	2300      	moveq	r3, #0
 800cf70:	f003 0301 	andne.w	r3, r3, #1
 800cf74:	4290      	cmp	r0, r2
 800cf76:	bf0c      	ite	eq
 800cf78:	2300      	moveq	r3, #0
 800cf7a:	f003 0301 	andne.w	r3, r3, #1
 800cf7e:	b11b      	cbz	r3, 800cf88 <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800cf80:	4b2b      	ldr	r3, [pc, #172]	; (800d030 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800cf82:	4298      	cmp	r0, r3
 800cf84:	f040 80df 	bne.w	800d146 <HAL_TIM_PWM_ConfigChannel+0x3aa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf88:	4629      	mov	r1, r5
 800cf8a:	f7ff fd21 	bl	800c9d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf8e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf90:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf92:	6999      	ldr	r1, [r3, #24]
 800cf94:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800cf98:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf9a:	6999      	ldr	r1, [r3, #24]
 800cf9c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800cfa0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfa2:	699a      	ldr	r2, [r3, #24]
 800cfa4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800cfa8:	619a      	str	r2, [r3, #24]
      break;
 800cfaa:	e795      	b.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800cfb0:	4a1a      	ldr	r2, [pc, #104]	; (800d01c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800cfb2:	4298      	cmp	r0, r3
 800cfb4:	bf18      	it	ne
 800cfb6:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800cfba:	4919      	ldr	r1, [pc, #100]	; (800d020 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800cfbc:	bf14      	ite	ne
 800cfbe:	2301      	movne	r3, #1
 800cfc0:	2300      	moveq	r3, #0
 800cfc2:	4290      	cmp	r0, r2
 800cfc4:	bf0c      	ite	eq
 800cfc6:	2300      	moveq	r3, #0
 800cfc8:	f003 0301 	andne.w	r3, r3, #1
 800cfcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	bf0c      	ite	eq
 800cfd4:	2300      	moveq	r3, #0
 800cfd6:	f003 0301 	andne.w	r3, r3, #1
 800cfda:	4290      	cmp	r0, r2
 800cfdc:	bf0c      	ite	eq
 800cfde:	2300      	moveq	r3, #0
 800cfe0:	f003 0301 	andne.w	r3, r3, #1
 800cfe4:	b11b      	cbz	r3, 800cfee <HAL_TIM_PWM_ConfigChannel+0x252>
 800cfe6:	4b13      	ldr	r3, [pc, #76]	; (800d034 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800cfe8:	4298      	cmp	r0, r3
 800cfea:	f040 80a5 	bne.w	800d138 <HAL_TIM_PWM_ConfigChannel+0x39c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfee:	4629      	mov	r1, r5
 800cff0:	f7fe f930 	bl	800b254 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cff4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cff6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cff8:	69d9      	ldr	r1, [r3, #28]
 800cffa:	f041 0108 	orr.w	r1, r1, #8
 800cffe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d000:	69d9      	ldr	r1, [r3, #28]
 800d002:	f021 0104 	bic.w	r1, r1, #4
 800d006:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d008:	69da      	ldr	r2, [r3, #28]
 800d00a:	4302      	orrs	r2, r0
 800d00c:	61da      	str	r2, [r3, #28]
      break;
 800d00e:	e763      	b.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800d010:	fffeffef 	.word	0xfffeffef
 800d014:	00010040 	.word	0x00010040
 800d018:	40010000 	.word	0x40010000
 800d01c:	40000400 	.word	0x40000400
 800d020:	40000800 	.word	0x40000800
 800d024:	40002000 	.word	0x40002000
 800d028:	00111111 	.word	0x00111111
 800d02c:	08026410 	.word	0x08026410
 800d030:	40001800 	.word	0x40001800
 800d034:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	4b4a      	ldr	r3, [pc, #296]	; (800d164 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d03c:	4a4a      	ldr	r2, [pc, #296]	; (800d168 <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800d03e:	4298      	cmp	r0, r3
 800d040:	bf18      	it	ne
 800d042:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d046:	4949      	ldr	r1, [pc, #292]	; (800d16c <HAL_TIM_PWM_ConfigChannel+0x3d0>)
 800d048:	bf14      	ite	ne
 800d04a:	2301      	movne	r3, #1
 800d04c:	2300      	moveq	r3, #0
 800d04e:	4290      	cmp	r0, r2
 800d050:	bf0c      	ite	eq
 800d052:	2300      	moveq	r3, #0
 800d054:	f003 0301 	andne.w	r3, r3, #1
 800d058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d05c:	4288      	cmp	r0, r1
 800d05e:	bf0c      	ite	eq
 800d060:	2300      	moveq	r3, #0
 800d062:	f003 0301 	andne.w	r3, r3, #1
 800d066:	4290      	cmp	r0, r2
 800d068:	bf0c      	ite	eq
 800d06a:	2300      	moveq	r3, #0
 800d06c:	f003 0301 	andne.w	r3, r3, #1
 800d070:	b113      	cbz	r3, 800d078 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800d072:	4b3f      	ldr	r3, [pc, #252]	; (800d170 <HAL_TIM_PWM_ConfigChannel+0x3d4>)
 800d074:	4298      	cmp	r0, r3
 800d076:	d158      	bne.n	800d12a <HAL_TIM_PWM_ConfigChannel+0x38e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d078:	4629      	mov	r1, r5
 800d07a:	f7fe f951 	bl	800b320 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d07e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d080:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d082:	69d9      	ldr	r1, [r3, #28]
 800d084:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d088:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d08a:	69d9      	ldr	r1, [r3, #28]
 800d08c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d090:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d092:	69da      	ldr	r2, [r3, #28]
 800d094:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d098:	61da      	str	r2, [r3, #28]
      break;
 800d09a:	e71d      	b.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	4b31      	ldr	r3, [pc, #196]	; (800d164 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d0a0:	4298      	cmp	r0, r3
 800d0a2:	d003      	beq.n	800d0ac <HAL_TIM_PWM_ConfigChannel+0x310>
 800d0a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0a8:	4298      	cmp	r0, r3
 800d0aa:	d137      	bne.n	800d11c <HAL_TIM_PWM_ConfigChannel+0x380>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f7fe f81b 	bl	800b0e8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d0b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d0b4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d0b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0b8:	f041 0108 	orr.w	r1, r1, #8
 800d0bc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d0be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0c0:	f021 0104 	bic.w	r1, r1, #4
 800d0c4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d0c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0c8:	4302      	orrs	r2, r0
 800d0ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d0cc:	e704      	b.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d0ce:	6820      	ldr	r0, [r4, #0]
 800d0d0:	4b24      	ldr	r3, [pc, #144]	; (800d164 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800d0d2:	4298      	cmp	r0, r3
 800d0d4:	d003      	beq.n	800d0de <HAL_TIM_PWM_ConfigChannel+0x342>
 800d0d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0da:	4298      	cmp	r0, r3
 800d0dc:	d117      	bne.n	800d10e <HAL_TIM_PWM_ConfigChannel+0x372>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d0de:	4629      	mov	r1, r5
 800d0e0:	f7fe f82c 	bl	800b13c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d0e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d0e6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d0e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0ea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800d0ee:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d0f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d0f2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800d0f6:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d0f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800d0fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d100:	e6ea      	b.n	800ced8 <HAL_TIM_PWM_ConfigChannel+0x13c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d102:	f640 611d 	movw	r1, #3613	; 0xe1d
 800d106:	481b      	ldr	r0, [pc, #108]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d108:	f7f5 fe48 	bl	8002d9c <assert_failed>
 800d10c:	e65b      	b.n	800cdc6 <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d10e:	4819      	ldr	r0, [pc, #100]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d110:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800d114:	f7f5 fe42 	bl	8002d9c <assert_failed>
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	e7e0      	b.n	800d0de <HAL_TIM_PWM_ConfigChannel+0x342>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d11c:	4815      	ldr	r0, [pc, #84]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d11e:	f640 616f 	movw	r1, #3695	; 0xe6f
 800d122:	f7f5 fe3b 	bl	8002d9c <assert_failed>
 800d126:	6820      	ldr	r0, [r4, #0]
 800d128:	e7c0      	b.n	800d0ac <HAL_TIM_PWM_ConfigChannel+0x310>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d12a:	4812      	ldr	r0, [pc, #72]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d12c:	f640 615e 	movw	r1, #3678	; 0xe5e
 800d130:	f7f5 fe34 	bl	8002d9c <assert_failed>
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	e79f      	b.n	800d078 <HAL_TIM_PWM_ConfigChannel+0x2dc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d138:	480e      	ldr	r0, [pc, #56]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d13a:	f640 614d 	movw	r1, #3661	; 0xe4d
 800d13e:	f7f5 fe2d 	bl	8002d9c <assert_failed>
 800d142:	6820      	ldr	r0, [r4, #0]
 800d144:	e753      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x252>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d146:	480b      	ldr	r0, [pc, #44]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d148:	f640 613c 	movw	r1, #3644	; 0xe3c
 800d14c:	f7f5 fe26 	bl	8002d9c <assert_failed>
 800d150:	6820      	ldr	r0, [r4, #0]
 800d152:	e719      	b.n	800cf88 <HAL_TIM_PWM_ConfigChannel+0x1ec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d154:	4807      	ldr	r0, [pc, #28]	; (800d174 <HAL_TIM_PWM_ConfigChannel+0x3d8>)
 800d156:	f640 612b 	movw	r1, #3627	; 0xe2b
 800d15a:	f7f5 fe1f 	bl	8002d9c <assert_failed>
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	e6aa      	b.n	800ceb8 <HAL_TIM_PWM_ConfigChannel+0x11c>
 800d162:	bf00      	nop
 800d164:	40010000 	.word	0x40010000
 800d168:	40000400 	.word	0x40000400
 800d16c:	40000800 	.word	0x40000800
 800d170:	40010400 	.word	0x40010400
 800d174:	08026410 	.word	0x08026410

0800d178 <TIM_TI1_SetConfig>:
{
 800d178:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d17a:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d17c:	4e1b      	ldr	r6, [pc, #108]	; (800d1ec <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d17e:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d182:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d184:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d186:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800d188:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d18a:	d01d      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d18c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d190:	d01a      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d192:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800d196:	42b0      	cmp	r0, r6
 800d198:	d016      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d19a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d19e:	42b0      	cmp	r0, r6
 800d1a0:	d012      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d1a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800d1a6:	42b0      	cmp	r0, r6
 800d1a8:	d00e      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d1aa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800d1ae:	42b0      	cmp	r0, r6
 800d1b0:	d00a      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d1b2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800d1b6:	42b0      	cmp	r0, r6
 800d1b8:	d006      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
 800d1ba:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800d1be:	42b0      	cmp	r0, r6
 800d1c0:	d002      	beq.n	800d1c8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d1c2:	f044 0201 	orr.w	r2, r4, #1
 800d1c6:	e002      	b.n	800d1ce <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d1c8:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800d1cc:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d1ce:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1d0:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d1d8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d1dc:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d1de:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d1e0:	4313      	orrs	r3, r2
}
 800d1e2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800d1e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800d1e6:	6201      	str	r1, [r0, #32]
}
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	40010000 	.word	0x40010000

0800d1f0 <HAL_TIM_IC_ConfigChannel>:
{
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d1f2:	4bb1      	ldr	r3, [pc, #708]	; (800d4b8 <HAL_TIM_IC_ConfigChannel+0x2c8>)
{
 800d1f4:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d1f6:	6801      	ldr	r1, [r0, #0]
{
 800d1f8:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d1fa:	4fb0      	ldr	r7, [pc, #704]	; (800d4bc <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800d1fc:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d1fe:	4299      	cmp	r1, r3
 800d200:	bf18      	it	ne
 800d202:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800d206:	48ae      	ldr	r0, [pc, #696]	; (800d4c0 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800d208:	4aae      	ldr	r2, [pc, #696]	; (800d4c4 <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800d20a:	bf14      	ite	ne
 800d20c:	2301      	movne	r3, #1
 800d20e:	2300      	moveq	r3, #0
 800d210:	42b9      	cmp	r1, r7
 800d212:	bf0c      	ite	eq
 800d214:	2300      	moveq	r3, #0
 800d216:	f003 0301 	andne.w	r3, r3, #1
 800d21a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800d21e:	4281      	cmp	r1, r0
 800d220:	bf0c      	ite	eq
 800d222:	2300      	moveq	r3, #0
 800d224:	f003 0301 	andne.w	r3, r3, #1
 800d228:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800d22c:	4291      	cmp	r1, r2
 800d22e:	bf0c      	ite	eq
 800d230:	2300      	moveq	r3, #0
 800d232:	f003 0301 	andne.w	r3, r3, #1
 800d236:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800d23a:	42b9      	cmp	r1, r7
 800d23c:	bf0c      	ite	eq
 800d23e:	2300      	moveq	r3, #0
 800d240:	f003 0301 	andne.w	r3, r3, #1
 800d244:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800d248:	4281      	cmp	r1, r0
 800d24a:	bf0c      	ite	eq
 800d24c:	2300      	moveq	r3, #0
 800d24e:	f003 0301 	andne.w	r3, r3, #1
 800d252:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d256:	4291      	cmp	r1, r2
 800d258:	bf0c      	ite	eq
 800d25a:	2300      	moveq	r3, #0
 800d25c:	f003 0301 	andne.w	r3, r3, #1
 800d260:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d264:	42b9      	cmp	r1, r7
 800d266:	bf0c      	ite	eq
 800d268:	2300      	moveq	r3, #0
 800d26a:	f003 0301 	andne.w	r3, r3, #1
 800d26e:	4281      	cmp	r1, r0
 800d270:	bf0c      	ite	eq
 800d272:	2300      	moveq	r3, #0
 800d274:	f003 0301 	andne.w	r3, r3, #1
 800d278:	4291      	cmp	r1, r2
 800d27a:	bf0c      	ite	eq
 800d27c:	2300      	moveq	r3, #0
 800d27e:	f003 0301 	andne.w	r3, r3, #1
 800d282:	b11b      	cbz	r3, 800d28c <HAL_TIM_IC_ConfigChannel+0x9c>
 800d284:	4b90      	ldr	r3, [pc, #576]	; (800d4c8 <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800d286:	4299      	cmp	r1, r3
 800d288:	f040 80fb 	bne.w	800d482 <HAL_TIM_IC_ConfigChannel+0x292>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	f033 0202 	bics.w	r2, r3, #2
 800d292:	d001      	beq.n	800d298 <HAL_TIM_IC_ConfigChannel+0xa8>
 800d294:	2b0a      	cmp	r3, #10
 800d296:	d16d      	bne.n	800d374 <HAL_TIM_IC_ConfigChannel+0x184>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800d298:	6863      	ldr	r3, [r4, #4]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d872      	bhi.n	800d386 <HAL_TIM_IC_ConfigChannel+0x196>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800d2a0:	68a3      	ldr	r3, [r4, #8]
 800d2a2:	f033 030c 	bics.w	r3, r3, #12
 800d2a6:	d177      	bne.n	800d398 <HAL_TIM_IC_ConfigChannel+0x1a8>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800d2a8:	68e3      	ldr	r3, [r4, #12]
 800d2aa:	2b0f      	cmp	r3, #15
 800d2ac:	d87c      	bhi.n	800d3a8 <HAL_TIM_IC_ConfigChannel+0x1b8>
  __HAL_LOCK(htim);
 800d2ae:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	f000 8082 	beq.w	800d3bc <HAL_TIM_IC_ConfigChannel+0x1cc>
 800d2b8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(htim);
 800d2be:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800d2c6:	2e00      	cmp	r6, #0
 800d2c8:	d07a      	beq.n	800d3c0 <HAL_TIM_IC_ConfigChannel+0x1d0>
 800d2ca:	4b7b      	ldr	r3, [pc, #492]	; (800d4b8 <HAL_TIM_IC_ConfigChannel+0x2c8>)
 800d2cc:	497b      	ldr	r1, [pc, #492]	; (800d4bc <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800d2ce:	4298      	cmp	r0, r3
 800d2d0:	bf18      	it	ne
 800d2d2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d2d6:	4a7a      	ldr	r2, [pc, #488]	; (800d4c0 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800d2d8:	bf14      	ite	ne
 800d2da:	2301      	movne	r3, #1
 800d2dc:	2300      	moveq	r3, #0
 800d2de:	4288      	cmp	r0, r1
 800d2e0:	bf0c      	ite	eq
 800d2e2:	2300      	moveq	r3, #0
 800d2e4:	f003 0301 	andne.w	r3, r3, #1
 800d2e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2ec:	4290      	cmp	r0, r2
 800d2ee:	bf0c      	ite	eq
 800d2f0:	2300      	moveq	r3, #0
 800d2f2:	f003 0301 	andne.w	r3, r3, #1
 800d2f6:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800d2fa:	4288      	cmp	r0, r1
 800d2fc:	bf0c      	ite	eq
 800d2fe:	2300      	moveq	r3, #0
 800d300:	f003 0301 	andne.w	r3, r3, #1
 800d304:	4290      	cmp	r0, r2
 800d306:	bf0c      	ite	eq
 800d308:	2300      	moveq	r3, #0
 800d30a:	f003 0301 	andne.w	r3, r3, #1
  else if (Channel == TIM_CHANNEL_2)
 800d30e:	2e04      	cmp	r6, #4
 800d310:	d065      	beq.n	800d3de <HAL_TIM_IC_ConfigChannel+0x1ee>
  else if (Channel == TIM_CHANNEL_3)
 800d312:	2e08      	cmp	r6, #8
 800d314:	f000 8091 	beq.w	800d43a <HAL_TIM_IC_ConfigChannel+0x24a>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f040 80b8 	bne.w	800d48e <HAL_TIM_IC_ConfigChannel+0x29e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d31e:	6a01      	ldr	r1, [r0, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800d320:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d322:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800d326:	6867      	ldr	r7, [r4, #4]
 800d328:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d32a:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d32c:	6201      	str	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d32e:	69c1      	ldr	r1, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d330:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800d332:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d334:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d338:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d33c:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d33e:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d342:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d344:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d348:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d34a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d34e:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800d350:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 800d352:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d354:	69c2      	ldr	r2, [r0, #28]
 800d356:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d35a:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d35c:	69c3      	ldr	r3, [r0, #28]
 800d35e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800d362:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800d364:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d366:	2201      	movs	r2, #1
  return HAL_OK;
 800d368:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800d36a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d36e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800d374:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800d378:	4854      	ldr	r0, [pc, #336]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d37a:	f7f5 fd0f 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800d37e:	6863      	ldr	r3, [r4, #4]
 800d380:	3b01      	subs	r3, #1
 800d382:	2b02      	cmp	r3, #2
 800d384:	d98c      	bls.n	800d2a0 <HAL_TIM_IC_ConfigChannel+0xb0>
 800d386:	f640 51b9 	movw	r1, #3513	; 0xdb9
 800d38a:	4850      	ldr	r0, [pc, #320]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d38c:	f7f5 fd06 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800d390:	68a3      	ldr	r3, [r4, #8]
 800d392:	f033 030c 	bics.w	r3, r3, #12
 800d396:	d087      	beq.n	800d2a8 <HAL_TIM_IC_ConfigChannel+0xb8>
 800d398:	f640 51ba 	movw	r1, #3514	; 0xdba
 800d39c:	484b      	ldr	r0, [pc, #300]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d39e:	f7f5 fcfd 	bl	8002d9c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800d3a2:	68e3      	ldr	r3, [r4, #12]
 800d3a4:	2b0f      	cmp	r3, #15
 800d3a6:	d982      	bls.n	800d2ae <HAL_TIM_IC_ConfigChannel+0xbe>
 800d3a8:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800d3ac:	4847      	ldr	r0, [pc, #284]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d3ae:	f7f5 fcf5 	bl	8002d9c <assert_failed>
  __HAL_LOCK(htim);
 800d3b2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	f47f af7e 	bne.w	800d2b8 <HAL_TIM_IC_ConfigChannel+0xc8>
 800d3bc:	2002      	movs	r0, #2
}
 800d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800d3c0:	e9d4 1200 	ldrd	r1, r2, [r4]
 800d3c4:	68e3      	ldr	r3, [r4, #12]
 800d3c6:	f7ff fed7 	bl	800d178 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d3ca:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d3cc:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d3ce:	6999      	ldr	r1, [r3, #24]
 800d3d0:	f021 010c 	bic.w	r1, r1, #12
 800d3d4:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	4302      	orrs	r2, r0
 800d3da:	619a      	str	r2, [r3, #24]
 800d3dc:	e7c2      	b.n	800d364 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d3de:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d3e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800d3e6:	4288      	cmp	r0, r1
 800d3e8:	bf18      	it	ne
 800d3ea:	4290      	cmpne	r0, r2
 800d3ec:	d001      	beq.n	800d3f2 <HAL_TIM_IC_ConfigChannel+0x202>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d15b      	bne.n	800d4aa <HAL_TIM_IC_ConfigChannel+0x2ba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3f2:	6a01      	ldr	r1, [r0, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800d3f4:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3f6:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800d3fa:	6867      	ldr	r7, [r4, #4]
 800d3fc:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d3fe:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d400:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d402:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d404:	0312      	lsls	r2, r2, #12
  tmpccer = TIMx->CCER;
 800d406:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d408:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d40c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d410:	b292      	uxth	r2, r2
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d412:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d416:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d418:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d41c:	4333      	orrs	r3, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d41e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d422:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800d424:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800d426:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d428:	6982      	ldr	r2, [r0, #24]
 800d42a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d42e:	6182      	str	r2, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d430:	6983      	ldr	r3, [r0, #24]
 800d432:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800d436:	6183      	str	r3, [r0, #24]
 800d438:	e794      	b.n	800d364 <HAL_TIM_IC_ConfigChannel+0x174>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d12e      	bne.n	800d49c <HAL_TIM_IC_ConfigChannel+0x2ac>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d43e:	6a06      	ldr	r6, [r0, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800d440:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d442:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800d446:	6861      	ldr	r1, [r4, #4]
 800d448:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d44a:	021b      	lsls	r3, r3, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d44c:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d44e:	69c7      	ldr	r7, [r0, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d450:	0112      	lsls	r2, r2, #4
  tmpccer = TIMx->CCER;
 800d452:	6a06      	ldr	r6, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d454:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d458:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d45c:	b2d2      	uxtb	r2, r2
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d45e:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d462:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800d464:	4339      	orrs	r1, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d466:	4333      	orrs	r3, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d468:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d46c:	430a      	orrs	r2, r1
  TIMx->CCMR2 = tmpccmr2;
 800d46e:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800d470:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d472:	69c2      	ldr	r2, [r0, #28]
 800d474:	f022 020c 	bic.w	r2, r2, #12
 800d478:	61c2      	str	r2, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d47a:	69c3      	ldr	r3, [r0, #28]
 800d47c:	4323      	orrs	r3, r4
 800d47e:	61c3      	str	r3, [r0, #28]
 800d480:	e770      	b.n	800d364 <HAL_TIM_IC_ConfigChannel+0x174>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d482:	f640 51b7 	movw	r1, #3511	; 0xdb7
 800d486:	4811      	ldr	r0, [pc, #68]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d488:	f7f5 fc88 	bl	8002d9c <assert_failed>
 800d48c:	e6fe      	b.n	800d28c <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d48e:	480f      	ldr	r0, [pc, #60]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d490:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800d494:	f7f5 fc82 	bl	8002d9c <assert_failed>
 800d498:	6828      	ldr	r0, [r5, #0]
 800d49a:	e740      	b.n	800d31e <HAL_TIM_IC_ConfigChannel+0x12e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d49c:	480b      	ldr	r0, [pc, #44]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d49e:	f640 51e3 	movw	r1, #3555	; 0xde3
 800d4a2:	f7f5 fc7b 	bl	8002d9c <assert_failed>
 800d4a6:	6828      	ldr	r0, [r5, #0]
 800d4a8:	e7c9      	b.n	800d43e <HAL_TIM_IC_ConfigChannel+0x24e>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d4aa:	4808      	ldr	r0, [pc, #32]	; (800d4cc <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800d4ac:	f640 51d3 	movw	r1, #3539	; 0xdd3
 800d4b0:	f7f5 fc74 	bl	8002d9c <assert_failed>
 800d4b4:	6828      	ldr	r0, [r5, #0]
 800d4b6:	e79c      	b.n	800d3f2 <HAL_TIM_IC_ConfigChannel+0x202>
 800d4b8:	40010000 	.word	0x40010000
 800d4bc:	40000400 	.word	0x40000400
 800d4c0:	40000800 	.word	0x40000800
 800d4c4:	40000c00 	.word	0x40000c00
 800d4c8:	40002000 	.word	0x40002000
 800d4cc:	08026410 	.word	0x08026410

0800d4d0 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800d4d0:	4b2b      	ldr	r3, [pc, #172]	; (800d580 <TIM_CCxChannelCmd+0xb0>)
 800d4d2:	4298      	cmp	r0, r3
{
 800d4d4:	b530      	push	{r4, r5, lr}
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	b083      	sub	sp, #12
 800d4da:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800d4dc:	d031      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d4de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d4e2:	d02e      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d4e4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800d4e8:	4298      	cmp	r0, r3
 800d4ea:	d02a      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d4ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4f0:	4298      	cmp	r0, r3
 800d4f2:	d026      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d4f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	d022      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d4fc:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800d500:	4298      	cmp	r0, r3
 800d502:	d01e      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d504:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800d508:	4298      	cmp	r0, r3
 800d50a:	d01a      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d50c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d510:	4298      	cmp	r0, r3
 800d512:	d016      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d518:	4298      	cmp	r0, r3
 800d51a:	d012      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d51c:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800d520:	4298      	cmp	r0, r3
 800d522:	d00e      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d528:	4298      	cmp	r0, r3
 800d52a:	d00a      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d52c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d530:	4298      	cmp	r0, r3
 800d532:	d006      	beq.n	800d542 <TIM_CCxChannelCmd+0x72>
 800d534:	f641 21c2 	movw	r1, #6850	; 0x1ac2
 800d538:	4812      	ldr	r0, [pc, #72]	; (800d584 <TIM_CCxChannelCmd+0xb4>)
 800d53a:	9201      	str	r2, [sp, #4]
 800d53c:	f7f5 fc2e 	bl	8002d9c <assert_failed>
 800d540:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800d542:	2d14      	cmp	r5, #20
 800d544:	d910      	bls.n	800d568 <TIM_CCxChannelCmd+0x98>
 800d546:	2d3c      	cmp	r5, #60	; 0x3c
 800d548:	d112      	bne.n	800d570 <TIM_CCxChannelCmd+0xa0>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d54a:	f005 051f 	and.w	r5, r5, #31
 800d54e:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d550:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d552:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d554:	fa02 f505 	lsl.w	r5, r2, r5
  TIMx->CCER &= ~tmp;
 800d558:	ea23 0301 	bic.w	r3, r3, r1
 800d55c:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d55e:	6a22      	ldr	r2, [r4, #32]
 800d560:	4315      	orrs	r5, r2
 800d562:	6225      	str	r5, [r4, #32]
}
 800d564:	b003      	add	sp, #12
 800d566:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800d568:	4b07      	ldr	r3, [pc, #28]	; (800d588 <TIM_CCxChannelCmd+0xb8>)
 800d56a:	40eb      	lsrs	r3, r5
 800d56c:	07db      	lsls	r3, r3, #31
 800d56e:	d4ec      	bmi.n	800d54a <TIM_CCxChannelCmd+0x7a>
 800d570:	f641 21c3 	movw	r1, #6851	; 0x1ac3
 800d574:	4803      	ldr	r0, [pc, #12]	; (800d584 <TIM_CCxChannelCmd+0xb4>)
 800d576:	9201      	str	r2, [sp, #4]
 800d578:	f7f5 fc10 	bl	8002d9c <assert_failed>
 800d57c:	9a01      	ldr	r2, [sp, #4]
 800d57e:	e7e4      	b.n	800d54a <TIM_CCxChannelCmd+0x7a>
 800d580:	40010000 	.word	0x40010000
 800d584:	08026410 	.word	0x08026410
 800d588:	00111111 	.word	0x00111111

0800d58c <HAL_TIM_IC_Start_DMA>:
{
 800d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58e:	4604      	mov	r4, r0
 800d590:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d592:	4883      	ldr	r0, [pc, #524]	; (800d7a0 <HAL_TIM_IC_Start_DMA+0x214>)
{
 800d594:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d596:	6821      	ldr	r1, [r4, #0]
 800d598:	4281      	cmp	r1, r0
 800d59a:	f000 8083 	beq.w	800d6a4 <HAL_TIM_IC_Start_DMA+0x118>
 800d59e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800d5a2:	d053      	beq.n	800d64c <HAL_TIM_IC_Start_DMA+0xc0>
 800d5a4:	487f      	ldr	r0, [pc, #508]	; (800d7a4 <HAL_TIM_IC_Start_DMA+0x218>)
 800d5a6:	4281      	cmp	r1, r0
 800d5a8:	d050      	beq.n	800d64c <HAL_TIM_IC_Start_DMA+0xc0>
 800d5aa:	487f      	ldr	r0, [pc, #508]	; (800d7a8 <HAL_TIM_IC_Start_DMA+0x21c>)
 800d5ac:	4281      	cmp	r1, r0
 800d5ae:	d04d      	beq.n	800d64c <HAL_TIM_IC_Start_DMA+0xc0>
 800d5b0:	487e      	ldr	r0, [pc, #504]	; (800d7ac <HAL_TIM_IC_Start_DMA+0x220>)
 800d5b2:	4281      	cmp	r1, r0
 800d5b4:	d04a      	beq.n	800d64c <HAL_TIM_IC_Start_DMA+0xc0>
 800d5b6:	487e      	ldr	r0, [pc, #504]	; (800d7b0 <HAL_TIM_IC_Start_DMA+0x224>)
 800d5b8:	4281      	cmp	r1, r0
 800d5ba:	d073      	beq.n	800d6a4 <HAL_TIM_IC_Start_DMA+0x118>
 800d5bc:	487d      	ldr	r0, [pc, #500]	; (800d7b4 <HAL_TIM_IC_Start_DMA+0x228>)
 800d5be:	4281      	cmp	r1, r0
 800d5c0:	f000 80d5 	beq.w	800d76e <HAL_TIM_IC_Start_DMA+0x1e2>
 800d5c4:	487c      	ldr	r0, [pc, #496]	; (800d7b8 <HAL_TIM_IC_Start_DMA+0x22c>)
 800d5c6:	4281      	cmp	r1, r0
 800d5c8:	f040 80d6 	bne.w	800d778 <HAL_TIM_IC_Start_DMA+0x1ec>
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	f000 80c4 	beq.w	800d75a <HAL_TIM_IC_Start_DMA+0x1ce>
 800d5d2:	f640 0115 	movw	r1, #2069	; 0x815
 800d5d6:	4879      	ldr	r0, [pc, #484]	; (800d7bc <HAL_TIM_IC_Start_DMA+0x230>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800d5d8:	4e72      	ldr	r6, [pc, #456]	; (800d7a4 <HAL_TIM_IC_Start_DMA+0x218>)
 800d5da:	4f73      	ldr	r7, [pc, #460]	; (800d7a8 <HAL_TIM_IC_Start_DMA+0x21c>)
 800d5dc:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d5e0:	f7f5 fbdc 	bl	8002d9c <assert_failed>
 800d5e4:	6820      	ldr	r0, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800d5e6:	496e      	ldr	r1, [pc, #440]	; (800d7a0 <HAL_TIM_IC_Start_DMA+0x214>)
 800d5e8:	4288      	cmp	r0, r1
 800d5ea:	bf18      	it	ne
 800d5ec:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800d5f0:	bf14      	ite	ne
 800d5f2:	2101      	movne	r1, #1
 800d5f4:	2100      	moveq	r1, #0
 800d5f6:	42b0      	cmp	r0, r6
 800d5f8:	bf0c      	ite	eq
 800d5fa:	2100      	moveq	r1, #0
 800d5fc:	f001 0101 	andne.w	r1, r1, #1
 800d600:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800d604:	42b8      	cmp	r0, r7
 800d606:	bf0c      	ite	eq
 800d608:	2100      	moveq	r1, #0
 800d60a:	f001 0101 	andne.w	r1, r1, #1
 800d60e:	42b0      	cmp	r0, r6
 800d610:	bf0c      	ite	eq
 800d612:	2100      	moveq	r1, #0
 800d614:	f001 0101 	andne.w	r1, r1, #1
 800d618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61c:	2900      	cmp	r1, #0
 800d61e:	f040 8098 	bne.w	800d752 <HAL_TIM_IC_Start_DMA+0x1c6>
  if (htim->State == HAL_TIM_STATE_BUSY)
 800d622:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800d626:	b2c0      	uxtb	r0, r0
 800d628:	2802      	cmp	r0, #2
 800d62a:	d039      	beq.n	800d6a0 <HAL_TIM_IC_Start_DMA+0x114>
  else if (htim->State == HAL_TIM_STATE_READY)
 800d62c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800d630:	2901      	cmp	r1, #1
 800d632:	d03e      	beq.n	800d6b2 <HAL_TIM_IC_Start_DMA+0x126>
 800d634:	6820      	ldr	r0, [r4, #0]
  switch (Channel)
 800d636:	2d0c      	cmp	r5, #12
 800d638:	d820      	bhi.n	800d67c <HAL_TIM_IC_Start_DMA+0xf0>
 800d63a:	e8df f005 	tbb	[pc, r5]
 800d63e:	1f0b      	.short	0x1f0b
 800d640:	1f411f1f 	.word	0x1f411f1f
 800d644:	1f571f1f 	.word	0x1f571f1f
 800d648:	1f1f      	.short	0x1f1f
 800d64a:	6d          	.byte	0x6d
 800d64b:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d64c:	f035 010c 	bics.w	r1, r5, #12
 800d650:	d1bf      	bne.n	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
 800d652:	e7e6      	b.n	800d622 <HAL_TIM_IC_Start_DMA+0x96>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d654:	6a66      	ldr	r6, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d656:	f100 0134 	add.w	r1, r0, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d65a:	4f59      	ldr	r7, [pc, #356]	; (800d7c0 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d65c:	f8df c17c 	ldr.w	ip, [pc, #380]	; 800d7dc <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d660:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d662:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d664:	4f57      	ldr	r7, [pc, #348]	; (800d7c4 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800d666:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d66a:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800d66c:	f7f8 ff8a 	bl	8006584 <HAL_DMA_Start_IT>
 800d670:	bb18      	cbnz	r0, 800d6ba <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d672:	6820      	ldr	r0, [r4, #0]
 800d674:	68c3      	ldr	r3, [r0, #12]
 800d676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d67a:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d67c:	4629      	mov	r1, r5
 800d67e:	2201      	movs	r2, #1
 800d680:	f7ff ff26 	bl	800d4d0 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d684:	6822      	ldr	r2, [r4, #0]
 800d686:	4b50      	ldr	r3, [pc, #320]	; (800d7c8 <HAL_TIM_IC_Start_DMA+0x23c>)
 800d688:	6891      	ldr	r1, [r2, #8]
 800d68a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d68c:	2b06      	cmp	r3, #6
 800d68e:	d05d      	beq.n	800d74c <HAL_TIM_IC_Start_DMA+0x1c0>
 800d690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d694:	d05a      	beq.n	800d74c <HAL_TIM_IC_Start_DMA+0x1c0>
    __HAL_TIM_ENABLE(htim);
 800d696:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d698:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800d69a:	f043 0301 	orr.w	r3, r3, #1
 800d69e:	6013      	str	r3, [r2, #0]
}
 800d6a0:	b003      	add	sp, #12
 800d6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d6a4:	2d14      	cmp	r5, #20
 800d6a6:	d894      	bhi.n	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
 800d6a8:	4948      	ldr	r1, [pc, #288]	; (800d7cc <HAL_TIM_IC_Start_DMA+0x240>)
 800d6aa:	40e9      	lsrs	r1, r5
 800d6ac:	07c9      	lsls	r1, r1, #31
 800d6ae:	d4b8      	bmi.n	800d622 <HAL_TIM_IC_Start_DMA+0x96>
 800d6b0:	e78f      	b.n	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800d6b2:	2a00      	cmp	r2, #0
 800d6b4:	d146      	bne.n	800d744 <HAL_TIM_IC_Start_DMA+0x1b8>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d044      	beq.n	800d744 <HAL_TIM_IC_Start_DMA+0x1b8>
      return HAL_ERROR;
 800d6ba:	2001      	movs	r0, #1
}
 800d6bc:	b003      	add	sp, #12
 800d6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d6c2:	f100 0138 	add.w	r1, r0, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6c6:	4f3e      	ldr	r7, [pc, #248]	; (800d7c0 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6c8:	f8df c110 	ldr.w	ip, [pc, #272]	; 800d7dc <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d6cc:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6ce:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d6d0:	4f3c      	ldr	r7, [pc, #240]	; (800d7c4 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6d2:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d6d6:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800d6d8:	f7f8 ff54 	bl	8006584 <HAL_DMA_Start_IT>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1ec      	bne.n	800d6ba <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	68c3      	ldr	r3, [r0, #12]
 800d6e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d6e8:	60c3      	str	r3, [r0, #12]
      break;
 800d6ea:	e7c7      	b.n	800d67c <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800d6ee:	f100 013c 	add.w	r1, r0, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6f2:	4f33      	ldr	r7, [pc, #204]	; (800d7c0 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6f4:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d7dc <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800d6f8:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d6fa:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d6fc:	4f31      	ldr	r7, [pc, #196]	; (800d7c4 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800d6fe:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d702:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800d704:	f7f8 ff3e 	bl	8006584 <HAL_DMA_Start_IT>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d1d6      	bne.n	800d6ba <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d70c:	6820      	ldr	r0, [r4, #0]
 800d70e:	68c3      	ldr	r3, [r0, #12]
 800d710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d714:	60c3      	str	r3, [r0, #12]
      break;
 800d716:	e7b1      	b.n	800d67c <HAL_TIM_IC_Start_DMA+0xf0>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d718:	6b26      	ldr	r6, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800d71a:	f100 0140 	add.w	r1, r0, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d71e:	4f28      	ldr	r7, [pc, #160]	; (800d7c0 <HAL_TIM_IC_Start_DMA+0x234>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d720:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800d7dc <HAL_TIM_IC_Start_DMA+0x250>
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800d724:	4630      	mov	r0, r6
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800d726:	6437      	str	r7, [r6, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d728:	4f26      	ldr	r7, [pc, #152]	; (800d7c4 <HAL_TIM_IC_Start_DMA+0x238>)
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800d72a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d72e:	64f7      	str	r7, [r6, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800d730:	f7f8 ff28 	bl	8006584 <HAL_DMA_Start_IT>
 800d734:	2800      	cmp	r0, #0
 800d736:	d1c0      	bne.n	800d6ba <HAL_TIM_IC_Start_DMA+0x12e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	68c3      	ldr	r3, [r0, #12]
 800d73c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d740:	60c3      	str	r3, [r0, #12]
      break;
 800d742:	e79b      	b.n	800d67c <HAL_TIM_IC_Start_DMA+0xf0>
      htim->State = HAL_TIM_STATE_BUSY;
 800d744:	2102      	movs	r1, #2
 800d746:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800d74a:	e773      	b.n	800d634 <HAL_TIM_IC_Start_DMA+0xa8>
  return HAL_OK;
 800d74c:	2000      	movs	r0, #0
}
 800d74e:	b003      	add	sp, #12
 800d750:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800d752:	4917      	ldr	r1, [pc, #92]	; (800d7b0 <HAL_TIM_IC_Start_DMA+0x224>)
 800d754:	4288      	cmp	r0, r1
 800d756:	f43f af64 	beq.w	800d622 <HAL_TIM_IC_Start_DMA+0x96>
 800d75a:	f640 0116 	movw	r1, #2070	; 0x816
 800d75e:	4817      	ldr	r0, [pc, #92]	; (800d7bc <HAL_TIM_IC_Start_DMA+0x230>)
 800d760:	e9cd 2300 	strd	r2, r3, [sp]
 800d764:	f7f5 fb1a 	bl	8002d9c <assert_failed>
 800d768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d76c:	e759      	b.n	800d622 <HAL_TIM_IC_Start_DMA+0x96>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d76e:	f035 0104 	bics.w	r1, r5, #4
 800d772:	f47f af2e 	bne.w	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
 800d776:	e7f0      	b.n	800d75a <HAL_TIM_IC_Start_DMA+0x1ce>
 800d778:	4815      	ldr	r0, [pc, #84]	; (800d7d0 <HAL_TIM_IC_Start_DMA+0x244>)
 800d77a:	4281      	cmp	r1, r0
 800d77c:	f43f af26 	beq.w	800d5cc <HAL_TIM_IC_Start_DMA+0x40>
 800d780:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800d784:	4281      	cmp	r1, r0
 800d786:	d0f2      	beq.n	800d76e <HAL_TIM_IC_Start_DMA+0x1e2>
 800d788:	4812      	ldr	r0, [pc, #72]	; (800d7d4 <HAL_TIM_IC_Start_DMA+0x248>)
 800d78a:	4281      	cmp	r1, r0
 800d78c:	f43f af1e 	beq.w	800d5cc <HAL_TIM_IC_Start_DMA+0x40>
 800d790:	4811      	ldr	r0, [pc, #68]	; (800d7d8 <HAL_TIM_IC_Start_DMA+0x24c>)
 800d792:	4281      	cmp	r1, r0
 800d794:	f47f af1d 	bne.w	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
 800d798:	2d00      	cmp	r5, #0
 800d79a:	f47f af1a 	bne.w	800d5d2 <HAL_TIM_IC_Start_DMA+0x46>
 800d79e:	e7dc      	b.n	800d75a <HAL_TIM_IC_Start_DMA+0x1ce>
 800d7a0:	40010000 	.word	0x40010000
 800d7a4:	40000400 	.word	0x40000400
 800d7a8:	40000800 	.word	0x40000800
 800d7ac:	40000c00 	.word	0x40000c00
 800d7b0:	40010400 	.word	0x40010400
 800d7b4:	40014000 	.word	0x40014000
 800d7b8:	40014400 	.word	0x40014400
 800d7bc:	08026410 	.word	0x08026410
 800d7c0:	0800c111 	.word	0x0800c111
 800d7c4:	0800c2ed 	.word	0x0800c2ed
 800d7c8:	00010007 	.word	0x00010007
 800d7cc:	00111111 	.word	0x00111111
 800d7d0:	40014800 	.word	0x40014800
 800d7d4:	40001c00 	.word	0x40001c00
 800d7d8:	40002000 	.word	0x40002000
 800d7dc:	0800c0ad 	.word	0x0800c0ad

0800d7e0 <HAL_TIM_IC_Stop_DMA>:
{
 800d7e0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d7e2:	4a5a      	ldr	r2, [pc, #360]	; (800d94c <HAL_TIM_IC_Stop_DMA+0x16c>)
{
 800d7e4:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d7e6:	6803      	ldr	r3, [r0, #0]
{
 800d7e8:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	f000 808e 	beq.w	800d90c <HAL_TIM_IC_Stop_DMA+0x12c>
 800d7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7f4:	d04a      	beq.n	800d88c <HAL_TIM_IC_Stop_DMA+0xac>
 800d7f6:	4a56      	ldr	r2, [pc, #344]	; (800d950 <HAL_TIM_IC_Stop_DMA+0x170>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d047      	beq.n	800d88c <HAL_TIM_IC_Stop_DMA+0xac>
 800d7fc:	4a55      	ldr	r2, [pc, #340]	; (800d954 <HAL_TIM_IC_Stop_DMA+0x174>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d044      	beq.n	800d88c <HAL_TIM_IC_Stop_DMA+0xac>
 800d802:	4a55      	ldr	r2, [pc, #340]	; (800d958 <HAL_TIM_IC_Stop_DMA+0x178>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d041      	beq.n	800d88c <HAL_TIM_IC_Stop_DMA+0xac>
 800d808:	4a54      	ldr	r2, [pc, #336]	; (800d95c <HAL_TIM_IC_Stop_DMA+0x17c>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d07e      	beq.n	800d90c <HAL_TIM_IC_Stop_DMA+0x12c>
 800d80e:	4a54      	ldr	r2, [pc, #336]	; (800d960 <HAL_TIM_IC_Stop_DMA+0x180>)
 800d810:	4293      	cmp	r3, r2
 800d812:	f000 8082 	beq.w	800d91a <HAL_TIM_IC_Stop_DMA+0x13a>
 800d816:	4a53      	ldr	r2, [pc, #332]	; (800d964 <HAL_TIM_IC_Stop_DMA+0x184>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	f040 8083 	bne.w	800d924 <HAL_TIM_IC_Stop_DMA+0x144>
 800d81e:	b325      	cbz	r5, 800d86a <HAL_TIM_IC_Stop_DMA+0x8a>
 800d820:	f640 019a 	movw	r1, #2202	; 0x89a
 800d824:	4850      	ldr	r0, [pc, #320]	; (800d968 <HAL_TIM_IC_Stop_DMA+0x188>)
 800d826:	f7f5 fab9 	bl	8002d9c <assert_failed>
 800d82a:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800d82c:	4a47      	ldr	r2, [pc, #284]	; (800d94c <HAL_TIM_IC_Stop_DMA+0x16c>)
 800d82e:	4948      	ldr	r1, [pc, #288]	; (800d950 <HAL_TIM_IC_Stop_DMA+0x170>)
 800d830:	4293      	cmp	r3, r2
 800d832:	bf18      	it	ne
 800d834:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d838:	4846      	ldr	r0, [pc, #280]	; (800d954 <HAL_TIM_IC_Stop_DMA+0x174>)
 800d83a:	bf14      	ite	ne
 800d83c:	2201      	movne	r2, #1
 800d83e:	2200      	moveq	r2, #0
 800d840:	428b      	cmp	r3, r1
 800d842:	bf0c      	ite	eq
 800d844:	2200      	moveq	r2, #0
 800d846:	f002 0201 	andne.w	r2, r2, #1
 800d84a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d84e:	4283      	cmp	r3, r0
 800d850:	bf0c      	ite	eq
 800d852:	2200      	moveq	r2, #0
 800d854:	f002 0201 	andne.w	r2, r2, #1
 800d858:	428b      	cmp	r3, r1
 800d85a:	bf0c      	ite	eq
 800d85c:	2200      	moveq	r2, #0
 800d85e:	f002 0201 	andne.w	r2, r2, #1
 800d862:	b142      	cbz	r2, 800d876 <HAL_TIM_IC_Stop_DMA+0x96>
 800d864:	4a3d      	ldr	r2, [pc, #244]	; (800d95c <HAL_TIM_IC_Stop_DMA+0x17c>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d005      	beq.n	800d876 <HAL_TIM_IC_Stop_DMA+0x96>
 800d86a:	f640 019b 	movw	r1, #2203	; 0x89b
 800d86e:	483e      	ldr	r0, [pc, #248]	; (800d968 <HAL_TIM_IC_Stop_DMA+0x188>)
 800d870:	f7f5 fa94 	bl	8002d9c <assert_failed>
 800d874:	6823      	ldr	r3, [r4, #0]
  switch (Channel)
 800d876:	2d0c      	cmp	r5, #12
 800d878:	d814      	bhi.n	800d8a4 <HAL_TIM_IC_Stop_DMA+0xc4>
 800d87a:	e8df f005 	tbb	[pc, r5]
 800d87e:	130b      	.short	0x130b
 800d880:	133e1313 	.word	0x133e1313
 800d884:	13351313 	.word	0x13351313
 800d888:	1313      	.short	0x1313
 800d88a:	2c          	.byte	0x2c
 800d88b:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d88c:	f035 020c 	bics.w	r2, r5, #12
 800d890:	d1c6      	bne.n	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d892:	e7f0      	b.n	800d876 <HAL_TIM_IC_Stop_DMA+0x96>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d894:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d896:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d89c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d89e:	f7f8 ff13 	bl	80066c8 <HAL_DMA_Abort_IT>
 800d8a2:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f7ff fe11 	bl	800d4d0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	f241 1211 	movw	r2, #4369	; 0x1111
 800d8b4:	6a19      	ldr	r1, [r3, #32]
 800d8b6:	4211      	tst	r1, r2
 800d8b8:	d108      	bne.n	800d8cc <HAL_TIM_IC_Stop_DMA+0xec>
 800d8ba:	6a19      	ldr	r1, [r3, #32]
 800d8bc:	f240 4244 	movw	r2, #1092	; 0x444
 800d8c0:	4211      	tst	r1, r2
 800d8c2:	d103      	bne.n	800d8cc <HAL_TIM_IC_Stop_DMA+0xec>
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800d8cc:	2301      	movs	r3, #1
}
 800d8ce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800d8d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d8d6:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d8d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d8da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d8de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d8e0:	f7f8 fef2 	bl	80066c8 <HAL_DMA_Abort_IT>
 800d8e4:	6823      	ldr	r3, [r4, #0]
      break;
 800d8e6:	e7dd      	b.n	800d8a4 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d8e8:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d8ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d8ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d8f0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d8f2:	f7f8 fee9 	bl	80066c8 <HAL_DMA_Abort_IT>
 800d8f6:	6823      	ldr	r3, [r4, #0]
      break;
 800d8f8:	e7d4      	b.n	800d8a4 <HAL_TIM_IC_Stop_DMA+0xc4>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d8fa:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d8fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d902:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d904:	f7f8 fee0 	bl	80066c8 <HAL_DMA_Abort_IT>
 800d908:	6823      	ldr	r3, [r4, #0]
      break;
 800d90a:	e7cb      	b.n	800d8a4 <HAL_TIM_IC_Stop_DMA+0xc4>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800d90c:	2d14      	cmp	r5, #20
 800d90e:	d887      	bhi.n	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d910:	4a16      	ldr	r2, [pc, #88]	; (800d96c <HAL_TIM_IC_Stop_DMA+0x18c>)
 800d912:	40ea      	lsrs	r2, r5
 800d914:	07d2      	lsls	r2, r2, #31
 800d916:	d4ae      	bmi.n	800d876 <HAL_TIM_IC_Stop_DMA+0x96>
 800d918:	e782      	b.n	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d91a:	f035 0304 	bics.w	r3, r5, #4
 800d91e:	f47f af7f 	bne.w	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d922:	e7a2      	b.n	800d86a <HAL_TIM_IC_Stop_DMA+0x8a>
 800d924:	4a12      	ldr	r2, [pc, #72]	; (800d970 <HAL_TIM_IC_Stop_DMA+0x190>)
 800d926:	4293      	cmp	r3, r2
 800d928:	f43f af79 	beq.w	800d81e <HAL_TIM_IC_Stop_DMA+0x3e>
 800d92c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800d930:	4293      	cmp	r3, r2
 800d932:	d0f2      	beq.n	800d91a <HAL_TIM_IC_Stop_DMA+0x13a>
 800d934:	4a0f      	ldr	r2, [pc, #60]	; (800d974 <HAL_TIM_IC_Stop_DMA+0x194>)
 800d936:	4293      	cmp	r3, r2
 800d938:	f43f af71 	beq.w	800d81e <HAL_TIM_IC_Stop_DMA+0x3e>
 800d93c:	4a0e      	ldr	r2, [pc, #56]	; (800d978 <HAL_TIM_IC_Stop_DMA+0x198>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	f47f af6e 	bne.w	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d944:	2d00      	cmp	r5, #0
 800d946:	f47f af6b 	bne.w	800d820 <HAL_TIM_IC_Stop_DMA+0x40>
 800d94a:	e78e      	b.n	800d86a <HAL_TIM_IC_Stop_DMA+0x8a>
 800d94c:	40010000 	.word	0x40010000
 800d950:	40000400 	.word	0x40000400
 800d954:	40000800 	.word	0x40000800
 800d958:	40000c00 	.word	0x40000c00
 800d95c:	40010400 	.word	0x40010400
 800d960:	40014000 	.word	0x40014000
 800d964:	40014400 	.word	0x40014400
 800d968:	08026410 	.word	0x08026410
 800d96c:	00111111 	.word	0x00111111
 800d970:	40014800 	.word	0x40014800
 800d974:	40001c00 	.word	0x40001c00
 800d978:	40002000 	.word	0x40002000

0800d97c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d980:	4604      	mov	r4, r0
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d982:	4b6d      	ldr	r3, [pc, #436]	; (800db38 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
 800d984:	486d      	ldr	r0, [pc, #436]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 800d986:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d988:	6822      	ldr	r2, [r4, #0]
 800d98a:	496d      	ldr	r1, [pc, #436]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 800d98c:	429a      	cmp	r2, r3
 800d98e:	bf18      	it	ne
 800d990:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d994:	4e6b      	ldr	r6, [pc, #428]	; (800db44 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 800d996:	bf14      	ite	ne
 800d998:	2301      	movne	r3, #1
 800d99a:	2300      	moveq	r3, #0
 800d99c:	4282      	cmp	r2, r0
 800d99e:	bf0c      	ite	eq
 800d9a0:	2300      	moveq	r3, #0
 800d9a2:	f003 0301 	andne.w	r3, r3, #1
 800d9a6:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d9aa:	428a      	cmp	r2, r1
 800d9ac:	bf0c      	ite	eq
 800d9ae:	2300      	moveq	r3, #0
 800d9b0:	f003 0301 	andne.w	r3, r3, #1
 800d9b4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d9b8:	42b2      	cmp	r2, r6
 800d9ba:	bf0c      	ite	eq
 800d9bc:	2300      	moveq	r3, #0
 800d9be:	f003 0301 	andne.w	r3, r3, #1
 800d9c2:	4282      	cmp	r2, r0
 800d9c4:	bf0c      	ite	eq
 800d9c6:	2300      	moveq	r3, #0
 800d9c8:	f003 0301 	andne.w	r3, r3, #1
 800d9cc:	428a      	cmp	r2, r1
 800d9ce:	bf0c      	ite	eq
 800d9d0:	2300      	moveq	r3, #0
 800d9d2:	f003 0301 	andne.w	r3, r3, #1
 800d9d6:	b11b      	cbz	r3, 800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800d9d8:	4b5b      	ldr	r3, [pc, #364]	; (800db48 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	f040 808c 	bne.w	800daf8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d9e6:	2b40      	cmp	r3, #64	; 0x40
 800d9e8:	d002      	beq.n	800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f040 808a 	bne.w	800db04 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d9f0:	68ab      	ldr	r3, [r5, #8]
 800d9f2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d9f6:	d173      	bne.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 800d9f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d078      	beq.n	800daf2 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da00:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800da02:	2102      	movs	r1, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da04:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800db38 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  __HAL_LOCK(htim);
 800da08:	2301      	movs	r3, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da0a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800db48 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  htim->State = HAL_TIM_STATE_BUSY;
 800da0e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da12:	eba2 0009 	sub.w	r0, r2, r9
 800da16:	eba2 0108 	sub.w	r1, r2, r8
  tmpcr2 = htim->Instance->CR2;
 800da1a:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da1c:	fab0 f080 	clz	r0, r0
  __HAL_LOCK(htim);
 800da20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da24:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 800da28:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da2a:	0940      	lsrs	r0, r0, #5
 800da2c:	0949      	lsrs	r1, r1, #5
 800da2e:	ea50 0301 	orrs.w	r3, r0, r1
 800da32:	d135      	bne.n	800daa0 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 800da34:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da36:	430b      	orrs	r3, r1
 800da38:	4840      	ldr	r0, [pc, #256]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800da3a:	4941      	ldr	r1, [pc, #260]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800da3c:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da40:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800da44:	bf08      	it	eq
 800da46:	f043 0301 	orreq.w	r3, r3, #1
 800da4a:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800db44 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>
 800da4e:	4282      	cmp	r2, r0
 800da50:	bf08      	it	eq
 800da52:	f043 0301 	orreq.w	r3, r3, #1
 800da56:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800da5a:	428a      	cmp	r2, r1
 800da5c:	bf08      	it	eq
 800da5e:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da62:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da64:	4562      	cmp	r2, ip
 800da66:	bf08      	it	eq
 800da68:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da6c:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da6e:	4282      	cmp	r2, r0
 800da70:	bf08      	it	eq
 800da72:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 800da76:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da78:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da7c:	d102      	bne.n	800da84 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800da7e:	4b33      	ldr	r3, [pc, #204]	; (800db4c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 800da80:	429a      	cmp	r2, r3
 800da82:	d104      	bne.n	800da8e <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da84:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da86:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da8a:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da8c:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800da8e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800da90:	2201      	movs	r2, #1

  return HAL_OK;
 800da92:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800da94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800da98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800da9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800daa0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800daa4:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 800daa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daac:	bf18      	it	ne
 800daae:	2b00      	cmpne	r3, #0
 800dab0:	bf14      	ite	ne
 800dab2:	f04f 0c01 	movne.w	ip, #1
 800dab6:	f04f 0c00 	moveq.w	ip, #0
 800daba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dabe:	bf0c      	ite	eq
 800dac0:	f04f 0c00 	moveq.w	ip, #0
 800dac4:	f00c 0c01 	andne.w	ip, ip, #1
 800dac8:	f1bc 0f00 	cmp.w	ip, #0
 800dacc:	d002      	beq.n	800dad4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800dace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800dad2:	d11d      	bne.n	800db10 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dad4:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dad8:	4603      	mov	r3, r0
 800dada:	ea47 070e 	orr.w	r7, r7, lr
 800dade:	e7aa      	b.n	800da36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dae0:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800dae4:	481a      	ldr	r0, [pc, #104]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800dae6:	f7f5 f959 	bl	8002d9c <assert_failed>
  __HAL_LOCK(htim);
 800daea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d186      	bne.n	800da00 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800daf2:	2002      	movs	r0, #2
}
 800daf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800daf8:	f240 6166 	movw	r1, #1638	; 0x666
 800dafc:	4814      	ldr	r0, [pc, #80]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800dafe:	f7f5 f94d 	bl	8002d9c <assert_failed>
 800db02:	e76d      	b.n	800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800db04:	f240 6167 	movw	r1, #1639	; 0x667
 800db08:	4811      	ldr	r0, [pc, #68]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800db0a:	f7f5 f947 	bl	8002d9c <assert_failed>
 800db0e:	e76f      	b.n	800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800db10:	f240 617a 	movw	r1, #1658	; 0x67a
 800db14:	480e      	ldr	r0, [pc, #56]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800db16:	f7f5 f941 	bl	8002d9c <assert_failed>
 800db1a:	6822      	ldr	r2, [r4, #0]
 800db1c:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800db20:	eba2 0309 	sub.w	r3, r2, r9
 800db24:	eba2 0c08 	sub.w	ip, r2, r8
 800db28:	4258      	negs	r0, r3
 800db2a:	4158      	adcs	r0, r3
 800db2c:	f1dc 0100 	rsbs	r1, ip, #0
 800db30:	eb41 010c 	adc.w	r1, r1, ip
 800db34:	e7ce      	b.n	800dad4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 800db36:	bf00      	nop
 800db38:	40010000 	.word	0x40010000
 800db3c:	40000400 	.word	0x40000400
 800db40:	40000800 	.word	0x40000800
 800db44:	40000c00 	.word	0x40000c00
 800db48:	40010400 	.word	0x40010400
 800db4c:	40001800 	.word	0x40001800
 800db50:	08026448 	.word	0x08026448

0800db54 <HAL_TIMEx_CommutCallback>:
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop

0800db58 <HAL_TIMEx_BreakCallback>:
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop

0800db5c <HAL_TIMEx_Break2Callback>:
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop

0800db60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db62:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800db64:	2e20      	cmp	r6, #32
 800db66:	d13b      	bne.n	800dbe0 <HAL_UART_Transmit_DMA+0x80>
  {
    if ((pData == NULL) || (Size == 0U))
 800db68:	2900      	cmp	r1, #0
 800db6a:	d03b      	beq.n	800dbe4 <HAL_UART_Transmit_DMA+0x84>
 800db6c:	fab2 f782 	clz	r7, r2
 800db70:	097f      	lsrs	r7, r7, #5
 800db72:	2f00      	cmp	r7, #0
 800db74:	d136      	bne.n	800dbe4 <HAL_UART_Transmit_DMA+0x84>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800db76:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 800db7a:	2c01      	cmp	r4, #1
 800db7c:	d030      	beq.n	800dbe0 <HAL_UART_Transmit_DMA+0x80>
 800db7e:	4613      	mov	r3, r2
 800db80:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db82:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 800db84:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 800db86:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
    huart->TxXferCount = Size;
 800db8a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800db8e:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db90:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->TxXferSize  = Size;
 800db92:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db96:	6742      	str	r2, [r0, #116]	; 0x74
    __HAL_LOCK(huart);
 800db98:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
 800db9c:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 800db9e:	f1be 0f00 	cmp.w	lr, #0
 800dba2:	d012      	beq.n	800dbca <HAL_UART_Transmit_DMA+0x6a>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dba4:	f8df c054 	ldr.w	ip, [pc, #84]	; 800dbfc <HAL_UART_Transmit_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dba8:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dbaa:	4813      	ldr	r0, [pc, #76]	; (800dbf8 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dbac:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dbb0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800dc00 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dbb4:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dbb8:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 800dbba:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dbbe:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dbc2:	f7f8 fcdf 	bl	8006584 <HAL_DMA_Start_IT>
 800dbc6:	b978      	cbnz	r0, 800dbe8 <HAL_UART_Transmit_DMA+0x88>
 800dbc8:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dbca:	2340      	movs	r3, #64	; 0x40

    __HAL_UNLOCK(huart);
 800dbcc:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dbce:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 800dbd0:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbd2:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 800dbd4:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbdc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800dbe0:	2002      	movs	r0, #2
}
 800dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800dbe4:	2001      	movs	r0, #1
}
 800dbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbe8:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800dbea:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800dbee:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dbf0:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800dbf2:	676e      	str	r6, [r5, #116]	; 0x74
}
 800dbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	0800dcc9 	.word	0x0800dcc9
 800dbfc:	0800dcf9 	.word	0x0800dcf9
 800dc00:	0800dd4d 	.word	0x0800dd4d

0800dc04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc08:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800dc0a:	2e20      	cmp	r6, #32
 800dc0c:	d149      	bne.n	800dca2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc0e:	2900      	cmp	r1, #0
 800dc10:	d04a      	beq.n	800dca8 <HAL_UART_Receive_DMA+0xa4>
 800dc12:	fab2 f782 	clz	r7, r2
 800dc16:	097f      	lsrs	r7, r7, #5
 800dc18:	2f00      	cmp	r7, #0
 800dc1a:	d145      	bne.n	800dca8 <HAL_UART_Receive_DMA+0xa4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800dc1c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d03e      	beq.n	800dca2 <HAL_UART_Receive_DMA+0x9e>
 800dc24:	4613      	mov	r3, r2
 800dc26:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc28:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 800dc2a:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc2e:	67c7      	str	r7, [r0, #124]	; 0x7c
 800dc30:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 800dc32:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800dc34:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 800dc38:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc3c:	6782      	str	r2, [r0, #120]	; 0x78
 800dc3e:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 800dc42:	f1be 0f00 	cmp.w	lr, #0
 800dc46:	d015      	beq.n	800dc74 <HAL_UART_Receive_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc48:	481c      	ldr	r0, [pc, #112]	; (800dcbc <HAL_UART_Receive_DMA+0xb8>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc4a:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc4c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800dcc0 <HAL_UART_Receive_DMA+0xbc>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc50:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc54:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800dcc4 <HAL_UART_Receive_DMA+0xc0>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc58:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc5c:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 800dc5e:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc62:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc66:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc6a:	f7f8 fc8b 	bl	8006584 <HAL_DMA_Start_IT>
 800dc6e:	b9f0      	cbnz	r0, 800dcae <HAL_UART_Receive_DMA+0xaa>
 800dc70:	f8d5 c000 	ldr.w	ip, [r5]
      }
    }
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc74:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 800dc78:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 800dc7e:	f885 0070 	strb.w	r0, [r5, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc82:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc86:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800dc8a:	f043 0301 	orr.w	r3, r3, #1
 800dc8e:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc92:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800dc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc9a:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800dca2:	2002      	movs	r0, #2
}
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800dca8:	2001      	movs	r0, #1
}
 800dcaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcae:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800dcb0:	f885 7070 	strb.w	r7, [r5, #112]	; 0x70
        return HAL_ERROR;
 800dcb4:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcb6:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800dcb8:	676e      	str	r6, [r5, #116]	; 0x74
        return HAL_ERROR;
 800dcba:	e7f3      	b.n	800dca4 <HAL_UART_Receive_DMA+0xa0>
 800dcbc:	0800dd05 	.word	0x0800dd05
 800dcc0:	0800dd41 	.word	0x0800dd41
 800dcc4:	0800dd4d 	.word	0x0800dd4d

0800dcc8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dcc8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dcca:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dccc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dcce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcd2:	d00c      	beq.n	800dcee <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcd4:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcdc:	689a      	ldr	r2, [r3, #8]
 800dcde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dce2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dcec:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800dcee:	f7f3 f9bd 	bl	800106c <HAL_UART_TxCpltCallback>
}
 800dcf2:	bd08      	pop	{r3, pc}

0800dcf4 <HAL_UART_TxHalfCpltCallback>:
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop

0800dcf8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcf8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dcfa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800dcfc:	f7ff fffa 	bl	800dcf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd00:	bd08      	pop	{r3, pc}
 800dd02:	bf00      	nop

0800dd04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dd04:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dd06:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd08:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd0e:	d011      	beq.n	800dd34 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd10:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800dd12:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd14:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800dd16:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd20:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd22:	689a      	ldr	r2, [r3, #8]
 800dd24:	f022 0201 	bic.w	r2, r2, #1
 800dd28:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd2a:	689a      	ldr	r2, [r3, #8]
 800dd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd30:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800dd32:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800dd34:	f7f5 f996 	bl	8003064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd38:	bd08      	pop	{r3, pc}
 800dd3a:	bf00      	nop

0800dd3c <HAL_UART_RxHalfCpltCallback>:
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop

0800dd40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd40:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800dd42:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800dd44:	f7ff fffa 	bl	800dd3c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd48:	bd08      	pop	{r3, pc}
 800dd4a:	bf00      	nop

0800dd4c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd4c:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd4e:	681a      	ldr	r2, [r3, #0]
{
 800dd50:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dd52:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd54:	6f98      	ldr	r0, [r3, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd56:	6891      	ldr	r1, [r2, #8]
 800dd58:	0609      	lsls	r1, r1, #24
 800dd5a:	d501      	bpl.n	800dd60 <UART_DMAError+0x14>
 800dd5c:	2c21      	cmp	r4, #33	; 0x21
 800dd5e:	d01b      	beq.n	800dd98 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dd60:	6891      	ldr	r1, [r2, #8]
 800dd62:	0649      	lsls	r1, r1, #25
 800dd64:	d501      	bpl.n	800dd6a <UART_DMAError+0x1e>
 800dd66:	2822      	cmp	r0, #34	; 0x22
 800dd68:	d007      	beq.n	800dd7a <UART_DMAError+0x2e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd6a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd6c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd6e:	f042 0210 	orr.w	r2, r2, #16
 800dd72:	67da      	str	r2, [r3, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800dd74:	f7f5 f9bc 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd78:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800dd7a:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800dd7c:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800dd7e:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd82:	6811      	ldr	r1, [r2, #0]
 800dd84:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800dd88:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd8a:	6891      	ldr	r1, [r2, #8]
 800dd8c:	f021 0101 	bic.w	r1, r1, #1
 800dd90:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 800dd92:	6618      	str	r0, [r3, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800dd94:	679c      	str	r4, [r3, #120]	; 0x78
 800dd96:	e7e8      	b.n	800dd6a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800dd98:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800dd9a:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800dd9c:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dda0:	6811      	ldr	r1, [r2, #0]
 800dda2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800dda6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800dda8:	675c      	str	r4, [r3, #116]	; 0x74
 800ddaa:	e7d9      	b.n	800dd60 <UART_DMAError+0x14>

0800ddac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ddac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800ddae:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800ddb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddb6:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800ddb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800ddbc:	f7f5 f998 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddc0:	bd08      	pop	{r3, pc}
 800ddc2:	bf00      	nop

0800ddc4 <HAL_UARTEx_WakeupCallback>:
}
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop

0800ddc8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddc8:	6803      	ldr	r3, [r0, #0]
{
 800ddca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddcc:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddce:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ddd2:	6819      	ldr	r1, [r3, #0]
{
 800ddd4:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800ddd6:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddd8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800ddda:	d052      	beq.n	800de82 <HAL_UART_IRQHandler+0xba>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dddc:	f015 0001 	ands.w	r0, r5, #1
 800dde0:	d058      	beq.n	800de94 <HAL_UART_IRQHandler+0xcc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dde2:	07d5      	lsls	r5, r2, #31
 800dde4:	d507      	bpl.n	800ddf6 <HAL_UART_IRQHandler+0x2e>
 800dde6:	05ce      	lsls	r6, r1, #23
 800dde8:	d505      	bpl.n	800ddf6 <HAL_UART_IRQHandler+0x2e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddea:	2501      	movs	r5, #1
 800ddec:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddee:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800ddf0:	f045 0501 	orr.w	r5, r5, #1
 800ddf4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddf6:	0795      	lsls	r5, r2, #30
 800ddf8:	d474      	bmi.n	800dee4 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddfa:	0755      	lsls	r5, r2, #29
 800ddfc:	d501      	bpl.n	800de02 <HAL_UART_IRQHandler+0x3a>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d17a      	bne.n	800def8 <HAL_UART_IRQHandler+0x130>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de02:	0716      	lsls	r6, r2, #28
 800de04:	d503      	bpl.n	800de0e <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800de06:	068d      	lsls	r5, r1, #26
 800de08:	d47d      	bmi.n	800df06 <HAL_UART_IRQHandler+0x13e>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d17b      	bne.n	800df06 <HAL_UART_IRQHandler+0x13e>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de0e:	0510      	lsls	r0, r2, #20
 800de10:	d508      	bpl.n	800de24 <HAL_UART_IRQHandler+0x5c>
 800de12:	014e      	lsls	r6, r1, #5
 800de14:	d506      	bpl.n	800de24 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800de1a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de1c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800de1e:	f040 0020 	orr.w	r0, r0, #32
 800de22:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de24:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800de26:	2800      	cmp	r0, #0
 800de28:	d04b      	beq.n	800dec2 <HAL_UART_IRQHandler+0xfa>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800de2a:	0695      	lsls	r5, r2, #26
 800de2c:	d501      	bpl.n	800de32 <HAL_UART_IRQHandler+0x6a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800de2e:	0688      	lsls	r0, r1, #26
 800de30:	d474      	bmi.n	800df1c <HAL_UART_IRQHandler+0x154>
      errorcode = huart->ErrorCode;
 800de32:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de34:	6899      	ldr	r1, [r3, #8]
 800de36:	0649      	lsls	r1, r1, #25
 800de38:	d402      	bmi.n	800de40 <HAL_UART_IRQHandler+0x78>
 800de3a:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800de3e:	d074      	beq.n	800df2a <HAL_UART_IRQHandler+0x162>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de40:	681a      	ldr	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800de42:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800de44:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4c:	689a      	ldr	r2, [r3, #8]
 800de4e:	f022 0201 	bic.w	r2, r2, #1
 800de52:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800de54:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de56:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 800de58:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de5a:	0652      	lsls	r2, r2, #25
 800de5c:	d55a      	bpl.n	800df14 <HAL_UART_IRQHandler+0x14c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de5e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800de60:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de66:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800de68:	2900      	cmp	r1, #0
 800de6a:	d053      	beq.n	800df14 <HAL_UART_IRQHandler+0x14c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de6c:	4b31      	ldr	r3, [pc, #196]	; (800df34 <HAL_UART_IRQHandler+0x16c>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de6e:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de70:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de72:	f7f8 fc29 	bl	80066c8 <HAL_DMA_Abort_IT>
 800de76:	b320      	cbz	r0, 800dec2 <HAL_UART_IRQHandler+0xfa>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800de7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800de80:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800de82:	0696      	lsls	r6, r2, #26
 800de84:	d509      	bpl.n	800de9a <HAL_UART_IRQHandler+0xd2>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800de86:	068e      	lsls	r6, r1, #26
 800de88:	d507      	bpl.n	800de9a <HAL_UART_IRQHandler+0xd2>
      if (huart->RxISR != NULL)
 800de8a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800de8c:	b1cb      	cbz	r3, 800dec2 <HAL_UART_IRQHandler+0xfa>
}
 800de8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800de92:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800de94:	f411 7f90 	tst.w	r1, #288	; 0x120
 800de98:	d1a3      	bne.n	800dde2 <HAL_UART_IRQHandler+0x1a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de9a:	02d6      	lsls	r6, r2, #11
 800de9c:	d409      	bmi.n	800deb2 <HAL_UART_IRQHandler+0xea>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800de9e:	0616      	lsls	r6, r2, #24
 800dea0:	d510      	bpl.n	800dec4 <HAL_UART_IRQHandler+0xfc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dea2:	060d      	lsls	r5, r1, #24
 800dea4:	d50e      	bpl.n	800dec4 <HAL_UART_IRQHandler+0xfc>
    if (huart->TxISR != NULL)
 800dea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dea8:	b15b      	cbz	r3, 800dec2 <HAL_UART_IRQHandler+0xfa>
      huart->TxISR(huart);
 800deaa:	4620      	mov	r0, r4
}
 800deac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800deb0:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800deb2:	0268      	lsls	r0, r5, #9
 800deb4:	d5f3      	bpl.n	800de9e <HAL_UART_IRQHandler+0xd6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800deb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800deba:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800debc:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800debe:	f7ff ff81 	bl	800ddc4 <HAL_UARTEx_WakeupCallback>
}
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dec4:	0650      	lsls	r0, r2, #25
 800dec6:	d5fc      	bpl.n	800dec2 <HAL_UART_IRQHandler+0xfa>
 800dec8:	064a      	lsls	r2, r1, #25
 800deca:	d5fa      	bpl.n	800dec2 <HAL_UART_IRQHandler+0xfa>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800decc:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dece:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ded0:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ded2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ded4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ded8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800deda:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800dedc:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800dede:	f7f3 f8c5 	bl	800106c <HAL_UART_TxCpltCallback>
}
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d08c      	beq.n	800de02 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dee8:	2502      	movs	r5, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800deea:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deec:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deee:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800def0:	f045 0504 	orr.w	r5, r5, #4
 800def4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800def6:	d584      	bpl.n	800de02 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800def8:	2504      	movs	r5, #4
 800defa:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800defc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800defe:	f045 0502 	orr.w	r5, r5, #2
 800df02:	67e5      	str	r5, [r4, #124]	; 0x7c
 800df04:	e77d      	b.n	800de02 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df06:	2008      	movs	r0, #8
 800df08:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df0a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800df0c:	f040 0008 	orr.w	r0, r0, #8
 800df10:	67e0      	str	r0, [r4, #124]	; 0x7c
 800df12:	e77c      	b.n	800de0e <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 800df14:	4620      	mov	r0, r4
 800df16:	f7f5 f8eb 	bl	80030f0 <HAL_UART_ErrorCallback>
}
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800df1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800df1e:	2a00      	cmp	r2, #0
 800df20:	d087      	beq.n	800de32 <HAL_UART_IRQHandler+0x6a>
          huart->RxISR(huart);
 800df22:	4620      	mov	r0, r4
 800df24:	4790      	blx	r2
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	e783      	b.n	800de32 <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7f5 f8e0 	bl	80030f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df30:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	0800ddad 	.word	0x0800ddad

0800df38 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800df38:	4bba      	ldr	r3, [pc, #744]	; (800e224 <UART_SetConfig+0x2ec>)
 800df3a:	6842      	ldr	r2, [r0, #4]
 800df3c:	429a      	cmp	r2, r3
{
 800df3e:	b570      	push	{r4, r5, r6, lr}
 800df40:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800df42:	f200 80bf 	bhi.w	800e0c4 <UART_SetConfig+0x18c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800df4c:	d002      	beq.n	800df54 <UART_SetConfig+0x1c>
 800df4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df52:	d17c      	bne.n	800e04e <UART_SetConfig+0x116>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800df54:	68e3      	ldr	r3, [r4, #12]
 800df56:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800df5a:	f040 8082 	bne.w	800e062 <UART_SetConfig+0x12a>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800df5e:	6a23      	ldr	r3, [r4, #32]
 800df60:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800df64:	f040 8087 	bne.w	800e076 <UART_SetConfig+0x13e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800df6e:	d002      	beq.n	800df76 <UART_SetConfig+0x3e>
 800df70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800df74:	d165      	bne.n	800e042 <UART_SetConfig+0x10a>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800df76:	6963      	ldr	r3, [r4, #20]
 800df78:	f033 020c 	bics.w	r2, r3, #12
 800df7c:	d148      	bne.n	800e010 <UART_SetConfig+0xd8>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d046      	beq.n	800e010 <UART_SetConfig+0xd8>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800df82:	69a3      	ldr	r3, [r4, #24]
 800df84:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800df88:	d14b      	bne.n	800e022 <UART_SetConfig+0xea>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800df8a:	69e0      	ldr	r0, [r4, #28]
 800df8c:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800df90:	d150      	bne.n	800e034 <UART_SetConfig+0xfc>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	6921      	ldr	r1, [r4, #16]
 800df96:	68a2      	ldr	r2, [r4, #8]
 800df98:	681e      	ldr	r6, [r3, #0]
 800df9a:	430a      	orrs	r2, r1
 800df9c:	4da2      	ldr	r5, [pc, #648]	; (800e228 <UART_SetConfig+0x2f0>)
 800df9e:	6961      	ldr	r1, [r4, #20]
 800dfa0:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfa2:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfa4:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dfa6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfa8:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800dfaa:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfac:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800dfae:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfb0:	4d9e      	ldr	r5, [pc, #632]	; (800e22c <UART_SetConfig+0x2f4>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfb2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfb4:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfb6:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfb8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dfbc:	ea42 0206 	orr.w	r2, r2, r6
 800dfc0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dfc2:	689a      	ldr	r2, [r3, #8]
 800dfc4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800dfc8:	ea41 0102 	orr.w	r1, r1, r2
 800dfcc:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfce:	d07f      	beq.n	800e0d0 <UART_SetConfig+0x198>
 800dfd0:	4a97      	ldr	r2, [pc, #604]	; (800e230 <UART_SetConfig+0x2f8>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d055      	beq.n	800e082 <UART_SetConfig+0x14a>
 800dfd6:	4a97      	ldr	r2, [pc, #604]	; (800e234 <UART_SetConfig+0x2fc>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	f000 80f1 	beq.w	800e1c0 <UART_SetConfig+0x288>
 800dfde:	4a96      	ldr	r2, [pc, #600]	; (800e238 <UART_SetConfig+0x300>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	f000 813b 	beq.w	800e25c <UART_SetConfig+0x324>
 800dfe6:	4a95      	ldr	r2, [pc, #596]	; (800e23c <UART_SetConfig+0x304>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	f000 8091 	beq.w	800e110 <UART_SetConfig+0x1d8>
 800dfee:	4a94      	ldr	r2, [pc, #592]	; (800e240 <UART_SetConfig+0x308>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	f000 80fd 	beq.w	800e1f0 <UART_SetConfig+0x2b8>
 800dff6:	4a93      	ldr	r2, [pc, #588]	; (800e244 <UART_SetConfig+0x30c>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	f000 8160 	beq.w	800e2be <UART_SetConfig+0x386>
 800dffe:	4a92      	ldr	r2, [pc, #584]	; (800e248 <UART_SetConfig+0x310>)
 800e000:	4293      	cmp	r3, r2
 800e002:	f000 816e 	beq.w	800e2e2 <UART_SetConfig+0x3aa>
  huart->RxISR = NULL;
 800e006:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 800e008:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800e00a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e010:	f640 21c4 	movw	r1, #2756	; 0xac4
 800e014:	488d      	ldr	r0, [pc, #564]	; (800e24c <UART_SetConfig+0x314>)
 800e016:	f7f4 fec1 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e01a:	69a3      	ldr	r3, [r4, #24]
 800e01c:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800e020:	d0b3      	beq.n	800df8a <UART_SetConfig+0x52>
 800e022:	488a      	ldr	r0, [pc, #552]	; (800e24c <UART_SetConfig+0x314>)
 800e024:	f640 21c5 	movw	r1, #2757	; 0xac5
 800e028:	f7f4 feb8 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e02c:	69e0      	ldr	r0, [r4, #28]
 800e02e:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800e032:	d0ae      	beq.n	800df92 <UART_SetConfig+0x5a>
 800e034:	4885      	ldr	r0, [pc, #532]	; (800e24c <UART_SetConfig+0x314>)
 800e036:	f640 21c6 	movw	r1, #2758	; 0xac6
 800e03a:	f7f4 feaf 	bl	8002d9c <assert_failed>
 800e03e:	69e0      	ldr	r0, [r4, #28]
 800e040:	e7a7      	b.n	800df92 <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e042:	f640 21c3 	movw	r1, #2755	; 0xac3
 800e046:	4881      	ldr	r0, [pc, #516]	; (800e24c <UART_SetConfig+0x314>)
 800e048:	f7f4 fea8 	bl	8002d9c <assert_failed>
 800e04c:	e793      	b.n	800df76 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e04e:	f640 21bf 	movw	r1, #2751	; 0xabf
 800e052:	487e      	ldr	r0, [pc, #504]	; (800e24c <UART_SetConfig+0x314>)
 800e054:	f7f4 fea2 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e058:	68e3      	ldr	r3, [r4, #12]
 800e05a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e05e:	f43f af7e 	beq.w	800df5e <UART_SetConfig+0x26>
 800e062:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800e066:	4879      	ldr	r0, [pc, #484]	; (800e24c <UART_SetConfig+0x314>)
 800e068:	f7f4 fe98 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e06c:	6a23      	ldr	r3, [r4, #32]
 800e06e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800e072:	f43f af79 	beq.w	800df68 <UART_SetConfig+0x30>
 800e076:	f640 21c1 	movw	r1, #2753	; 0xac1
 800e07a:	4874      	ldr	r0, [pc, #464]	; (800e24c <UART_SetConfig+0x314>)
 800e07c:	f7f4 fe8e 	bl	8002d9c <assert_failed>
 800e080:	e772      	b.n	800df68 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e082:	4b73      	ldr	r3, [pc, #460]	; (800e250 <UART_SetConfig+0x318>)
 800e084:	4a73      	ldr	r2, [pc, #460]	; (800e254 <UART_SetConfig+0x31c>)
 800e086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e08a:	f003 030c 	and.w	r3, r3, #12
 800e08e:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e090:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e094:	d024      	beq.n	800e0e0 <UART_SetConfig+0x1a8>
    switch (clocksource)
 800e096:	2b08      	cmp	r3, #8
 800e098:	d8b5      	bhi.n	800e006 <UART_SetConfig+0xce>
 800e09a:	a201      	add	r2, pc, #4	; (adr r2, 800e0a0 <UART_SetConfig+0x168>)
 800e09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a0:	0800e1af 	.word	0x0800e1af
 800e0a4:	0800e13f 	.word	0x0800e13f
 800e0a8:	0800e297 	.word	0x0800e297
 800e0ac:	0800e007 	.word	0x0800e007
 800e0b0:	0800e207 	.word	0x0800e207
 800e0b4:	0800e007 	.word	0x0800e007
 800e0b8:	0800e007 	.word	0x0800e007
 800e0bc:	0800e007 	.word	0x0800e007
 800e0c0:	0800e1e1 	.word	0x0800e1e1
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e0c4:	f640 21be 	movw	r1, #2750	; 0xabe
 800e0c8:	4860      	ldr	r0, [pc, #384]	; (800e24c <UART_SetConfig+0x314>)
 800e0ca:	f7f4 fe67 	bl	8002d9c <assert_failed>
 800e0ce:	e73a      	b.n	800df46 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0d0:	4b5f      	ldr	r3, [pc, #380]	; (800e250 <UART_SetConfig+0x318>)
 800e0d2:	4a61      	ldr	r2, [pc, #388]	; (800e258 <UART_SetConfig+0x320>)
 800e0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d8:	f003 0303 	and.w	r3, r3, #3
 800e0dc:	5cd3      	ldrb	r3, [r2, r3]
 800e0de:	e7d7      	b.n	800e090 <UART_SetConfig+0x158>
    switch (clocksource)
 800e0e0:	2b08      	cmp	r3, #8
 800e0e2:	d890      	bhi.n	800e006 <UART_SetConfig+0xce>
 800e0e4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ec <UART_SetConfig+0x1b4>)
 800e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ea:	bf00      	nop
 800e0ec:	0800e219 	.word	0x0800e219
 800e0f0:	0800e16b 	.word	0x0800e16b
 800e0f4:	0800e277 	.word	0x0800e277
 800e0f8:	0800e007 	.word	0x0800e007
 800e0fc:	0800e21f 	.word	0x0800e21f
 800e100:	0800e007 	.word	0x0800e007
 800e104:	0800e007 	.word	0x0800e007
 800e108:	0800e007 	.word	0x0800e007
 800e10c:	0800e287 	.word	0x0800e287
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e110:	4b4f      	ldr	r3, [pc, #316]	; (800e250 <UART_SetConfig+0x318>)
 800e112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e11e:	d06f      	beq.n	800e200 <UART_SetConfig+0x2c8>
 800e120:	d93f      	bls.n	800e1a2 <UART_SetConfig+0x26a>
 800e122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e126:	f000 80a3 	beq.w	800e270 <UART_SetConfig+0x338>
 800e12a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e12e:	d054      	beq.n	800e1da <UART_SetConfig+0x2a2>
 800e130:	e769      	b.n	800e006 <UART_SetConfig+0xce>
 800e132:	2b00      	cmp	r3, #0
 800e134:	f47f af67 	bne.w	800e006 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e138:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e13c:	d015      	beq.n	800e16a <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e13e:	f7fc f801 	bl	800a144 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e142:	6862      	ldr	r2, [r4, #4]
 800e144:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e148:	fbb3 f3f2 	udiv	r3, r3, r2
 800e14c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e14e:	f1a3 0110 	sub.w	r1, r3, #16
 800e152:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e156:	4291      	cmp	r1, r2
 800e158:	f63f af55 	bhi.w	800e006 <UART_SetConfig+0xce>
      huart->Instance->BRR = usartdiv;
 800e15c:	6822      	ldr	r2, [r4, #0]
 800e15e:	2000      	movs	r0, #0
 800e160:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800e162:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e164:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e168:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800e16a:	f7fb ffeb 	bl	800a144 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e16e:	6862      	ldr	r2, [r4, #4]
 800e170:	0853      	lsrs	r3, r2, #1
 800e172:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e176:	fbb3 f3f2 	udiv	r3, r3, r2
 800e17a:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e17c:	f1a3 0110 	sub.w	r1, r3, #16
 800e180:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e184:	4291      	cmp	r1, r2
 800e186:	f63f af3e 	bhi.w	800e006 <UART_SetConfig+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e18a:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e18e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800e192:	6821      	ldr	r1, [r4, #0]
 800e194:	2000      	movs	r0, #0
 800e196:	4313      	orrs	r3, r2
 800e198:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 800e19a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e19c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f47f af2f 	bne.w	800e006 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e1ac:	d034      	beq.n	800e218 <UART_SetConfig+0x2e0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1ae:	f7fb ffb9 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e1b2:	6862      	ldr	r2, [r4, #4]
 800e1b4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1bc:	b29b      	uxth	r3, r3
        break;
 800e1be:	e7c6      	b.n	800e14e <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1c0:	4b23      	ldr	r3, [pc, #140]	; (800e250 <UART_SetConfig+0x318>)
 800e1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e1ca:	2b10      	cmp	r3, #16
 800e1cc:	d018      	beq.n	800e200 <UART_SetConfig+0x2c8>
 800e1ce:	d9e8      	bls.n	800e1a2 <UART_SetConfig+0x26a>
 800e1d0:	2b20      	cmp	r3, #32
 800e1d2:	d04d      	beq.n	800e270 <UART_SetConfig+0x338>
 800e1d4:	2b30      	cmp	r3, #48	; 0x30
 800e1d6:	f47f af16 	bne.w	800e006 <UART_SetConfig+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e1de:	d052      	beq.n	800e286 <UART_SetConfig+0x34e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e1e0:	6862      	ldr	r2, [r4, #4]
 800e1e2:	0853      	lsrs	r3, r2, #1
 800e1e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1ec:	b29b      	uxth	r3, r3
        break;
 800e1ee:	e7ae      	b.n	800e14e <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1f0:	4b17      	ldr	r3, [pc, #92]	; (800e250 <UART_SetConfig+0x318>)
 800e1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1fe:	d152      	bne.n	800e2a6 <UART_SetConfig+0x36e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e200:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e204:	d00b      	beq.n	800e21e <UART_SetConfig+0x2e6>
        pclk = HAL_RCC_GetSysClockFreq();
 800e206:	f7fb fe33 	bl	8009e70 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e20a:	6862      	ldr	r2, [r4, #4]
 800e20c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e210:	fbb3 f3f2 	udiv	r3, r3, r2
 800e214:	b29b      	uxth	r3, r3
        break;
 800e216:	e79a      	b.n	800e14e <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e218:	f7fb ff84 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
 800e21c:	e7a7      	b.n	800e16e <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetSysClockFreq();
 800e21e:	f7fb fe27 	bl	8009e70 <HAL_RCC_GetSysClockFreq>
 800e222:	e7a4      	b.n	800e16e <UART_SetConfig+0x236>
 800e224:	019bfcc0 	.word	0x019bfcc0
 800e228:	efff69f3 	.word	0xefff69f3
 800e22c:	40011000 	.word	0x40011000
 800e230:	40004400 	.word	0x40004400
 800e234:	40004800 	.word	0x40004800
 800e238:	40004c00 	.word	0x40004c00
 800e23c:	40005000 	.word	0x40005000
 800e240:	40011400 	.word	0x40011400
 800e244:	40007800 	.word	0x40007800
 800e248:	40007c00 	.word	0x40007c00
 800e24c:	08026498 	.word	0x08026498
 800e250:	40023800 	.word	0x40023800
 800e254:	08026488 	.word	0x08026488
 800e258:	08026484 	.word	0x08026484
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e25c:	4b2a      	ldr	r3, [pc, #168]	; (800e308 <UART_SetConfig+0x3d0>)
 800e25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e262:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e266:	2b40      	cmp	r3, #64	; 0x40
 800e268:	d0ca      	beq.n	800e200 <UART_SetConfig+0x2c8>
 800e26a:	d99a      	bls.n	800e1a2 <UART_SetConfig+0x26a>
 800e26c:	2b80      	cmp	r3, #128	; 0x80
 800e26e:	d123      	bne.n	800e2b8 <UART_SetConfig+0x380>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e270:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e274:	d10f      	bne.n	800e296 <UART_SetConfig+0x35e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e276:	6862      	ldr	r2, [r4, #4]
 800e278:	4b24      	ldr	r3, [pc, #144]	; (800e30c <UART_SetConfig+0x3d4>)
 800e27a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e27e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e282:	b29b      	uxth	r3, r3
        break;
 800e284:	e77a      	b.n	800e17c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e286:	6862      	ldr	r2, [r4, #4]
 800e288:	0853      	lsrs	r3, r2, #1
 800e28a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e28e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e292:	b29b      	uxth	r3, r3
        break;
 800e294:	e772      	b.n	800e17c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e296:	6862      	ldr	r2, [r4, #4]
 800e298:	4b1d      	ldr	r3, [pc, #116]	; (800e310 <UART_SetConfig+0x3d8>)
 800e29a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e29e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2a2:	b29b      	uxth	r3, r3
        break;
 800e2a4:	e753      	b.n	800e14e <UART_SetConfig+0x216>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2a6:	f67f af44 	bls.w	800e132 <UART_SetConfig+0x1fa>
 800e2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ae:	d0df      	beq.n	800e270 <UART_SetConfig+0x338>
 800e2b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2b4:	d091      	beq.n	800e1da <UART_SetConfig+0x2a2>
 800e2b6:	e6a6      	b.n	800e006 <UART_SetConfig+0xce>
 800e2b8:	2bc0      	cmp	r3, #192	; 0xc0
 800e2ba:	d08e      	beq.n	800e1da <UART_SetConfig+0x2a2>
 800e2bc:	e6a3      	b.n	800e006 <UART_SetConfig+0xce>
 800e2be:	4b12      	ldr	r3, [pc, #72]	; (800e308 <UART_SetConfig+0x3d0>)
 800e2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2cc:	d098      	beq.n	800e200 <UART_SetConfig+0x2c8>
 800e2ce:	f67f af68 	bls.w	800e1a2 <UART_SetConfig+0x26a>
 800e2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2d6:	d0cb      	beq.n	800e270 <UART_SetConfig+0x338>
 800e2d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e2dc:	f43f af7d 	beq.w	800e1da <UART_SetConfig+0x2a2>
 800e2e0:	e691      	b.n	800e006 <UART_SetConfig+0xce>
 800e2e2:	4b09      	ldr	r3, [pc, #36]	; (800e308 <UART_SetConfig+0x3d0>)
 800e2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e2ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2f0:	d086      	beq.n	800e200 <UART_SetConfig+0x2c8>
 800e2f2:	f67f af56 	bls.w	800e1a2 <UART_SetConfig+0x26a>
 800e2f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2fa:	d0b9      	beq.n	800e270 <UART_SetConfig+0x338>
 800e2fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e300:	f43f af6b 	beq.w	800e1da <UART_SetConfig+0x2a2>
 800e304:	e67f      	b.n	800e006 <UART_SetConfig+0xce>
 800e306:	bf00      	nop
 800e308:	40023800 	.word	0x40023800
 800e30c:	01e84800 	.word	0x01e84800
 800e310:	00f42400 	.word	0x00f42400

0800e314 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e316:	2bff      	cmp	r3, #255	; 0xff
{
 800e318:	b510      	push	{r4, lr}
 800e31a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e31c:	d87d      	bhi.n	800e41a <UART_AdvFeatureConfig+0x106>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e31e:	07da      	lsls	r2, r3, #31
 800e320:	d50a      	bpl.n	800e338 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e322:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e324:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800e328:	f040 8097 	bne.w	800e45a <UART_AdvFeatureConfig+0x146>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e32c:	6820      	ldr	r0, [r4, #0]
 800e32e:	6842      	ldr	r2, [r0, #4]
 800e330:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e334:	430a      	orrs	r2, r1
 800e336:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e338:	0798      	lsls	r0, r3, #30
 800e33a:	d50a      	bpl.n	800e352 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800e33c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e33e:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800e342:	f040 8092 	bne.w	800e46a <UART_AdvFeatureConfig+0x156>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e346:	6820      	ldr	r0, [r4, #0]
 800e348:	6842      	ldr	r2, [r0, #4]
 800e34a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e34e:	430a      	orrs	r2, r1
 800e350:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e352:	0759      	lsls	r1, r3, #29
 800e354:	d50a      	bpl.n	800e36c <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800e356:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e358:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800e35c:	f040 808d 	bne.w	800e47a <UART_AdvFeatureConfig+0x166>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e360:	6820      	ldr	r0, [r4, #0]
 800e362:	6842      	ldr	r2, [r0, #4]
 800e364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e368:	430a      	orrs	r2, r1
 800e36a:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e36c:	071a      	lsls	r2, r3, #28
 800e36e:	d50a      	bpl.n	800e386 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e372:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800e376:	f040 8088 	bne.w	800e48a <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e37a:	6820      	ldr	r0, [r4, #0]
 800e37c:	6842      	ldr	r2, [r0, #4]
 800e37e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e382:	430a      	orrs	r2, r1
 800e384:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e386:	06d8      	lsls	r0, r3, #27
 800e388:	d50a      	bpl.n	800e3a0 <UART_AdvFeatureConfig+0x8c>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800e38a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e38c:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800e390:	f040 8083 	bne.w	800e49a <UART_AdvFeatureConfig+0x186>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e394:	6820      	ldr	r0, [r4, #0]
 800e396:	6882      	ldr	r2, [r0, #8]
 800e398:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e39c:	430a      	orrs	r2, r1
 800e39e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3a0:	0699      	lsls	r1, r3, #26
 800e3a2:	d509      	bpl.n	800e3b8 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800e3a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e3a6:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800e3aa:	d17e      	bne.n	800e4aa <UART_AdvFeatureConfig+0x196>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3ac:	6820      	ldr	r0, [r4, #0]
 800e3ae:	6882      	ldr	r2, [r0, #8]
 800e3b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e3b8:	065a      	lsls	r2, r3, #25
 800e3ba:	d521      	bpl.n	800e400 <UART_AdvFeatureConfig+0xec>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800e3bc:	4b46      	ldr	r3, [pc, #280]	; (800e4d8 <UART_AdvFeatureConfig+0x1c4>)
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	4846      	ldr	r0, [pc, #280]	; (800e4dc <UART_AdvFeatureConfig+0x1c8>)
 800e3c2:	4947      	ldr	r1, [pc, #284]	; (800e4e0 <UART_AdvFeatureConfig+0x1cc>)
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	bf18      	it	ne
 800e3c8:	4282      	cmpne	r2, r0
 800e3ca:	bf14      	ite	ne
 800e3cc:	2301      	movne	r3, #1
 800e3ce:	2300      	moveq	r3, #0
 800e3d0:	428a      	cmp	r2, r1
 800e3d2:	bf0c      	ite	eq
 800e3d4:	2300      	moveq	r3, #0
 800e3d6:	f003 0301 	andne.w	r3, r3, #1
 800e3da:	b113      	cbz	r3, 800e3e2 <UART_AdvFeatureConfig+0xce>
 800e3dc:	4b41      	ldr	r3, [pc, #260]	; (800e4e4 <UART_AdvFeatureConfig+0x1d0>)
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d16b      	bne.n	800e4ba <UART_AdvFeatureConfig+0x1a6>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800e3e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e3e4:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800e3e8:	d130      	bne.n	800e44c <UART_AdvFeatureConfig+0x138>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3ea:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3ec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3f0:	684b      	ldr	r3, [r1, #4]
 800e3f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e3f6:	ea43 0302 	orr.w	r3, r3, r2
 800e3fa:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3fc:	d01b      	beq.n	800e436 <UART_AdvFeatureConfig+0x122>
 800e3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e400:	061b      	lsls	r3, r3, #24
 800e402:	d509      	bpl.n	800e418 <UART_AdvFeatureConfig+0x104>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800e404:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e406:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800e40a:	d10d      	bne.n	800e428 <UART_AdvFeatureConfig+0x114>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e40c:	6821      	ldr	r1, [r4, #0]
 800e40e:	684b      	ldr	r3, [r1, #4]
 800e410:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e414:	4313      	orrs	r3, r2
 800e416:	604b      	str	r3, [r1, #4]
}
 800e418:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e41a:	f640 3143 	movw	r1, #2883	; 0xb43
 800e41e:	4832      	ldr	r0, [pc, #200]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e420:	f7f4 fcbc 	bl	8002d9c <assert_failed>
 800e424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e426:	e77a      	b.n	800e31e <UART_AdvFeatureConfig+0xa>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800e428:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 800e42c:	482e      	ldr	r0, [pc, #184]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e42e:	f7f4 fcb5 	bl	8002d9c <assert_failed>
 800e432:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e434:	e7ea      	b.n	800e40c <UART_AdvFeatureConfig+0xf8>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800e436:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e438:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800e43c:	d143      	bne.n	800e4c6 <UART_AdvFeatureConfig+0x1b2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e43e:	684a      	ldr	r2, [r1, #4]
 800e440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e442:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e446:	4302      	orrs	r2, r0
 800e448:	604a      	str	r2, [r1, #4]
 800e44a:	e7d9      	b.n	800e400 <UART_AdvFeatureConfig+0xec>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800e44c:	f640 3173 	movw	r1, #2931	; 0xb73
 800e450:	4825      	ldr	r0, [pc, #148]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e452:	f7f4 fca3 	bl	8002d9c <assert_failed>
 800e456:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e458:	e7c7      	b.n	800e3ea <UART_AdvFeatureConfig+0xd6>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800e45a:	f640 3148 	movw	r1, #2888	; 0xb48
 800e45e:	4822      	ldr	r0, [pc, #136]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e460:	f7f4 fc9c 	bl	8002d9c <assert_failed>
 800e464:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800e468:	e760      	b.n	800e32c <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800e46a:	f640 314f 	movw	r1, #2895	; 0xb4f
 800e46e:	481e      	ldr	r0, [pc, #120]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e470:	f7f4 fc94 	bl	8002d9c <assert_failed>
 800e474:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e478:	e765      	b.n	800e346 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800e47a:	f640 3156 	movw	r1, #2902	; 0xb56
 800e47e:	481a      	ldr	r0, [pc, #104]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e480:	f7f4 fc8c 	bl	8002d9c <assert_failed>
 800e484:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e488:	e76a      	b.n	800e360 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800e48a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800e48e:	4816      	ldr	r0, [pc, #88]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e490:	f7f4 fc84 	bl	8002d9c <assert_failed>
 800e494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e498:	e76f      	b.n	800e37a <UART_AdvFeatureConfig+0x66>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800e49a:	f640 3164 	movw	r1, #2916	; 0xb64
 800e49e:	4812      	ldr	r0, [pc, #72]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e4a0:	f7f4 fc7c 	bl	8002d9c <assert_failed>
 800e4a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a8:	e774      	b.n	800e394 <UART_AdvFeatureConfig+0x80>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800e4aa:	f640 316b 	movw	r1, #2923	; 0xb6b
 800e4ae:	480e      	ldr	r0, [pc, #56]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e4b0:	f7f4 fc74 	bl	8002d9c <assert_failed>
 800e4b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4b8:	e778      	b.n	800e3ac <UART_AdvFeatureConfig+0x98>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800e4ba:	f640 3172 	movw	r1, #2930	; 0xb72
 800e4be:	480a      	ldr	r0, [pc, #40]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e4c0:	f7f4 fc6c 	bl	8002d9c <assert_failed>
 800e4c4:	e78d      	b.n	800e3e2 <UART_AdvFeatureConfig+0xce>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800e4c6:	f640 3178 	movw	r1, #2936	; 0xb78
 800e4ca:	4807      	ldr	r0, [pc, #28]	; (800e4e8 <UART_AdvFeatureConfig+0x1d4>)
 800e4cc:	f7f4 fc66 	bl	8002d9c <assert_failed>
 800e4d0:	6821      	ldr	r1, [r4, #0]
 800e4d2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e4d4:	e7b3      	b.n	800e43e <UART_AdvFeatureConfig+0x12a>
 800e4d6:	bf00      	nop
 800e4d8:	40011000 	.word	0x40011000
 800e4dc:	40004400 	.word	0x40004400
 800e4e0:	40004800 	.word	0x40004800
 800e4e4:	40011400 	.word	0x40011400
 800e4e8:	08026498 	.word	0x08026498

0800e4ec <UART_WaitOnFlagUntilTimeout>:
{
 800e4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f0:	9d08      	ldr	r5, [sp, #32]
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	4616      	mov	r6, r2
 800e4f8:	4699      	mov	r9, r3
 800e4fa:	6804      	ldr	r4, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4fc:	e001      	b.n	800e502 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800e4fe:	1c68      	adds	r0, r5, #1
 800e500:	d10a      	bne.n	800e518 <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e502:	69e0      	ldr	r0, [r4, #28]
 800e504:	ea37 0300 	bics.w	r3, r7, r0
 800e508:	bf0c      	ite	eq
 800e50a:	2001      	moveq	r0, #1
 800e50c:	2000      	movne	r0, #0
 800e50e:	42b0      	cmp	r0, r6
 800e510:	d0f5      	beq.n	800e4fe <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800e512:	2000      	movs	r0, #0
}
 800e514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e518:	f7f6 ff3c 	bl	8005394 <HAL_GetTick>
 800e51c:	eba0 0009 	sub.w	r0, r0, r9
 800e520:	fab5 f285 	clz	r2, r5
 800e524:	42a8      	cmp	r0, r5
 800e526:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800e52a:	d81e      	bhi.n	800e56a <UART_WaitOnFlagUntilTimeout+0x7e>
 800e52c:	b9ea      	cbnz	r2, 800e56a <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e52e:	f8d8 4000 	ldr.w	r4, [r8]
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	0759      	lsls	r1, r3, #29
 800e536:	d5e4      	bpl.n	800e502 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e538:	69e3      	ldr	r3, [r4, #28]
 800e53a:	051b      	lsls	r3, r3, #20
 800e53c:	d5e1      	bpl.n	800e502 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e53e:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800e542:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800e544:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e546:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e548:	6821      	ldr	r1, [r4, #0]
 800e54a:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800e54e:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e550:	68a1      	ldr	r1, [r4, #8]
 800e552:	f021 0101 	bic.w	r1, r1, #1
 800e556:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800e558:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800e55c:	f888 2070 	strb.w	r2, [r8, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800e560:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e564:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          return HAL_TIMEOUT;
 800e568:	e7d4      	b.n	800e514 <UART_WaitOnFlagUntilTimeout+0x28>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e56a:	f8d8 3000 	ldr.w	r3, [r8]
        huart->gState = HAL_UART_STATE_READY;
 800e56e:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800e570:	2400      	movs	r4, #0
 800e572:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e57a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e57c:	689a      	ldr	r2, [r3, #8]
 800e57e:	f022 0201 	bic.w	r2, r2, #1
 800e582:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800e584:	f8c8 1074 	str.w	r1, [r8, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800e588:	f888 4070 	strb.w	r4, [r8, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800e58c:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800e590:	e7c0      	b.n	800e514 <UART_WaitOnFlagUntilTimeout+0x28>
 800e592:	bf00      	nop

0800e594 <HAL_UART_Transmit>:
{
 800e594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e598:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800e59a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800e59c:	b084      	sub	sp, #16
  if (huart->gState == HAL_UART_STATE_READY)
 800e59e:	2b20      	cmp	r3, #32
 800e5a0:	d145      	bne.n	800e62e <HAL_UART_Transmit+0x9a>
 800e5a2:	460d      	mov	r5, r1
    if ((pData == NULL) || (Size == 0U))
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d046      	beq.n	800e636 <HAL_UART_Transmit+0xa2>
 800e5a8:	fab2 f682 	clz	r6, r2
 800e5ac:	9203      	str	r2, [sp, #12]
 800e5ae:	0976      	lsrs	r6, r6, #5
 800e5b0:	2e00      	cmp	r6, #0
 800e5b2:	d140      	bne.n	800e636 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800e5b4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d037      	beq.n	800e62e <HAL_UART_Transmit+0x9a>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5be:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800e5c0:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5c2:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800e5c4:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5c8:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800e5ca:	f7f6 fee3 	bl	8005394 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5ce:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800e5d0:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 800e5d2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 800e5d8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800e5dc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5e0:	d03d      	beq.n	800e65e <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 800e5e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800e5e6:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800e5e8:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800e5ea:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800e5ee:	b96b      	cbnz	r3, 800e60c <HAL_UART_Transmit+0x78>
 800e5f0:	e029      	b.n	800e646 <HAL_UART_Transmit+0xb2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e5f2:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e5f6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800e5f8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e604:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800e608:	b29b      	uxth	r3, r3
 800e60a:	b1e3      	cbz	r3, 800e646 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e60c:	9700      	str	r7, [sp, #0]
 800e60e:	4643      	mov	r3, r8
 800e610:	2200      	movs	r2, #0
 800e612:	2180      	movs	r1, #128	; 0x80
 800e614:	4620      	mov	r0, r4
 800e616:	f7ff ff69 	bl	800e4ec <UART_WaitOnFlagUntilTimeout>
 800e61a:	b980      	cbnz	r0, 800e63e <HAL_UART_Transmit+0xaa>
 800e61c:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800e61e:	2d00      	cmp	r5, #0
 800e620:	d1e7      	bne.n	800e5f2 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e622:	f836 2b02 	ldrh.w	r2, [r6], #2
 800e626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e62a:	629a      	str	r2, [r3, #40]	; 0x28
 800e62c:	e7e4      	b.n	800e5f8 <HAL_UART_Transmit+0x64>
    return HAL_BUSY;
 800e62e:	2002      	movs	r0, #2
}
 800e630:	b004      	add	sp, #16
 800e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800e636:	2001      	movs	r0, #1
}
 800e638:	b004      	add	sp, #16
 800e63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
 800e63e:	2003      	movs	r0, #3
}
 800e640:	b004      	add	sp, #16
 800e642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e646:	9700      	str	r7, [sp, #0]
 800e648:	4643      	mov	r3, r8
 800e64a:	2200      	movs	r2, #0
 800e64c:	2140      	movs	r1, #64	; 0x40
 800e64e:	4620      	mov	r0, r4
 800e650:	f7ff ff4c 	bl	800e4ec <UART_WaitOnFlagUntilTimeout>
 800e654:	2800      	cmp	r0, #0
 800e656:	d1f2      	bne.n	800e63e <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800e658:	2320      	movs	r3, #32
 800e65a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800e65c:	e7e8      	b.n	800e630 <HAL_UART_Transmit+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1be      	bne.n	800e5e2 <HAL_UART_Transmit+0x4e>
 800e664:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800e666:	461d      	mov	r5, r3
 800e668:	e7bb      	b.n	800e5e2 <HAL_UART_Transmit+0x4e>
 800e66a:	bf00      	nop

0800e66c <UART_CheckIdleState>:
{
 800e66c:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e66e:	2500      	movs	r5, #0
{
 800e670:	4604      	mov	r4, r0
 800e672:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e674:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800e676:	f7f6 fe8d 	bl	8005394 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e67a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800e67c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	0712      	lsls	r2, r2, #28
 800e682:	d40b      	bmi.n	800e69c <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	075b      	lsls	r3, r3, #29
 800e688:	d417      	bmi.n	800e6ba <UART_CheckIdleState+0x4e>
  __HAL_UNLOCK(huart);
 800e68a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e68c:	2220      	movs	r2, #32
  return HAL_OK;
 800e68e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e690:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800e692:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800e696:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800e698:	b002      	add	sp, #8
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e69c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	4633      	mov	r3, r6
 800e6a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6a8:	9000      	str	r0, [sp, #0]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f7ff ff1e 	bl	800e4ec <UART_WaitOnFlagUntilTimeout>
 800e6b0:	b978      	cbnz	r0, 800e6d2 <UART_CheckIdleState+0x66>
 800e6b2:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	075b      	lsls	r3, r3, #29
 800e6b8:	d5e7      	bpl.n	800e68a <UART_CheckIdleState+0x1e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6ba:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800e6be:	4633      	mov	r3, r6
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6c6:	9000      	str	r0, [sp, #0]
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f7ff ff0f 	bl	800e4ec <UART_WaitOnFlagUntilTimeout>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d0db      	beq.n	800e68a <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 800e6d2:	2003      	movs	r0, #3
}
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}

0800e6d8 <HAL_UART_Init>:
  if (huart == NULL)
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d06c      	beq.n	800e7b6 <HAL_UART_Init+0xde>
 800e6dc:	6802      	ldr	r2, [r0, #0]
 800e6de:	493a      	ldr	r1, [pc, #232]	; (800e7c8 <HAL_UART_Init+0xf0>)
{
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	4b3a      	ldr	r3, [pc, #232]	; (800e7cc <HAL_UART_Init+0xf4>)
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	483a      	ldr	r0, [pc, #232]	; (800e7d0 <HAL_UART_Init+0xf8>)
 800e6e8:	4d3a      	ldr	r5, [pc, #232]	; (800e7d4 <HAL_UART_Init+0xfc>)
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	bf18      	it	ne
 800e6ee:	4282      	cmpne	r2, r0
 800e6f0:	f5a0 6040 	sub.w	r0, r0, #3072	; 0xc00
 800e6f4:	bf14      	ite	ne
 800e6f6:	2301      	movne	r3, #1
 800e6f8:	2300      	moveq	r3, #0
 800e6fa:	428a      	cmp	r2, r1
 800e6fc:	bf0c      	ite	eq
 800e6fe:	2300      	moveq	r3, #0
 800e700:	f003 0301 	andne.w	r3, r3, #1
 800e704:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800e708:	42aa      	cmp	r2, r5
 800e70a:	bf0c      	ite	eq
 800e70c:	2300      	moveq	r3, #0
 800e70e:	f003 0301 	andne.w	r3, r3, #1
 800e712:	f5a5 4518 	sub.w	r5, r5, #38912	; 0x9800
 800e716:	4282      	cmp	r2, r0
 800e718:	bf0c      	ite	eq
 800e71a:	2300      	moveq	r3, #0
 800e71c:	f003 0301 	andne.w	r3, r3, #1
 800e720:	f500 5060 	add.w	r0, r0, #14336	; 0x3800
 800e724:	428a      	cmp	r2, r1
 800e726:	bf0c      	ite	eq
 800e728:	2300      	moveq	r3, #0
 800e72a:	f003 0301 	andne.w	r3, r3, #1
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e72e:	69a1      	ldr	r1, [r4, #24]
 800e730:	42aa      	cmp	r2, r5
 800e732:	bf0c      	ite	eq
 800e734:	2300      	moveq	r3, #0
 800e736:	f003 0301 	andne.w	r3, r3, #1
 800e73a:	4282      	cmp	r2, r0
 800e73c:	bf0c      	ite	eq
 800e73e:	2300      	moveq	r3, #0
 800e740:	f003 0301 	andne.w	r3, r3, #1
 800e744:	bb19      	cbnz	r1, 800e78e <HAL_UART_Init+0xb6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800e746:	2b00      	cmp	r3, #0
 800e748:	d137      	bne.n	800e7ba <HAL_UART_Init+0xe2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e74a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e74c:	b34b      	cbz	r3, 800e7a2 <HAL_UART_Init+0xca>
  __HAL_UART_DISABLE(huart);
 800e74e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e750:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e752:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e754:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800e756:	6813      	ldr	r3, [r2, #0]
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e75e:	f7ff fbeb 	bl	800df38 <UART_SetConfig>
 800e762:	2801      	cmp	r0, #1
 800e764:	d01b      	beq.n	800e79e <HAL_UART_Init+0xc6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e768:	bb0b      	cbnz	r3, 800e7ae <HAL_UART_Init+0xd6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e76a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e76c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e77c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	f042 0201 	orr.w	r2, r2, #1
 800e784:	601a      	str	r2, [r3, #0]
}
 800e786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800e78a:	f7ff bf6f 	b.w	800e66c <UART_CheckIdleState>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0db      	beq.n	800e74a <HAL_UART_Init+0x72>
 800e792:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800e796:	4810      	ldr	r0, [pc, #64]	; (800e7d8 <HAL_UART_Init+0x100>)
 800e798:	f7f4 fb00 	bl	8002d9c <assert_failed>
 800e79c:	e7d5      	b.n	800e74a <HAL_UART_Init+0x72>
}
 800e79e:	2001      	movs	r0, #1
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800e7a2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7f5 fd36 	bl	8004218 <HAL_UART_MspInit>
 800e7ac:	e7cf      	b.n	800e74e <HAL_UART_Init+0x76>
    UART_AdvFeatureConfig(huart);
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f7ff fdb0 	bl	800e314 <UART_AdvFeatureConfig>
 800e7b4:	e7d9      	b.n	800e76a <HAL_UART_Init+0x92>
}
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	4770      	bx	lr
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800e7ba:	f240 112f 	movw	r1, #303	; 0x12f
 800e7be:	4806      	ldr	r0, [pc, #24]	; (800e7d8 <HAL_UART_Init+0x100>)
 800e7c0:	f7f4 faec 	bl	8002d9c <assert_failed>
 800e7c4:	e7c1      	b.n	800e74a <HAL_UART_Init+0x72>
 800e7c6:	bf00      	nop
 800e7c8:	40004c00 	.word	0x40004c00
 800e7cc:	40011400 	.word	0x40011400
 800e7d0:	40005000 	.word	0x40005000
 800e7d4:	40011000 	.word	0x40011000
 800e7d8:	08026498 	.word	0x08026498

0800e7dc <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d04d      	beq.n	800e87c <HAL_MultiProcessor_Init+0xa0>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800e7e0:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	4615      	mov	r5, r2
 800e7ea:	460e      	mov	r6, r1
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800e7ec:	d130      	bne.n	800e850 <HAL_MultiProcessor_Init+0x74>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e7ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e7f0:	b343      	cbz	r3, 800e844 <HAL_MultiProcessor_Init+0x68>
  __HAL_UART_DISABLE(huart);
 800e7f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e7f4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7f6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e7f8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800e7fa:	6813      	ldr	r3, [r2, #0]
 800e7fc:	f023 0301 	bic.w	r3, r3, #1
 800e800:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e802:	f7ff fb99 	bl	800df38 <UART_SetConfig>
 800e806:	2801      	cmp	r0, #1
 800e808:	d02b      	beq.n	800e862 <HAL_MultiProcessor_Init+0x86>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d131      	bne.n	800e874 <HAL_MultiProcessor_Init+0x98>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e810:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800e812:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e816:	685a      	ldr	r2, [r3, #4]
 800e818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e81c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e81e:	689a      	ldr	r2, [r3, #8]
 800e820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e824:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800e826:	d01e      	beq.n	800e866 <HAL_MultiProcessor_Init+0x8a>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800e828:	6819      	ldr	r1, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e82a:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800e82c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800e830:	4329      	orrs	r1, r5
 800e832:	6019      	str	r1, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	f042 0201 	orr.w	r2, r2, #1
}
 800e83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800e83e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e840:	f7ff bf14 	b.w	800e66c <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800e844:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800e848:	4620      	mov	r0, r4
 800e84a:	f7f5 fce5 	bl	8004218 <HAL_UART_MspInit>
 800e84e:	e7d0      	b.n	800e7f2 <HAL_MultiProcessor_Init+0x16>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800e850:	f240 211b 	movw	r1, #539	; 0x21b
 800e854:	480a      	ldr	r0, [pc, #40]	; (800e880 <HAL_MultiProcessor_Init+0xa4>)
 800e856:	f7f4 faa1 	bl	8002d9c <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e85a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1c8      	bne.n	800e7f2 <HAL_MultiProcessor_Init+0x16>
 800e860:	e7f0      	b.n	800e844 <HAL_MultiProcessor_Init+0x68>
}
 800e862:	2001      	movs	r0, #1
 800e864:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800e866:	6859      	ldr	r1, [r3, #4]
 800e868:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800e86c:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800e870:	605e      	str	r6, [r3, #4]
 800e872:	e7d9      	b.n	800e828 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800e874:	4620      	mov	r0, r4
 800e876:	f7ff fd4d 	bl	800e314 <UART_AdvFeatureConfig>
 800e87a:	e7c9      	b.n	800e810 <HAL_MultiProcessor_Init+0x34>
}
 800e87c:	2001      	movs	r0, #1
 800e87e:	4770      	bx	lr
 800e880:	08026498 	.word	0x08026498

0800e884 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800e884:	2800      	cmp	r0, #0
 800e886:	f000 8092 	beq.w	800e9ae <HAL_RS485Ex_Init+0x12a>
{
 800e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800e88e:	4c4b      	ldr	r4, [pc, #300]	; (800e9bc <HAL_RS485Ex_Init+0x138>)
 800e890:	461d      	mov	r5, r3
 800e892:	460e      	mov	r6, r1
 800e894:	6803      	ldr	r3, [r0, #0]
 800e896:	494a      	ldr	r1, [pc, #296]	; (800e9c0 <HAL_RS485Ex_Init+0x13c>)
 800e898:	4617      	mov	r7, r2
 800e89a:	4a4a      	ldr	r2, [pc, #296]	; (800e9c4 <HAL_RS485Ex_Init+0x140>)
 800e89c:	4680      	mov	r8, r0
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	bf18      	it	ne
 800e8a2:	428b      	cmpne	r3, r1
 800e8a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8a8:	bf14      	ite	ne
 800e8aa:	2401      	movne	r4, #1
 800e8ac:	2400      	moveq	r4, #0
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	bf0c      	ite	eq
 800e8b2:	2400      	moveq	r4, #0
 800e8b4:	f004 0401 	andne.w	r4, r4, #1
 800e8b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf0c      	ite	eq
 800e8c0:	2400      	moveq	r4, #0
 800e8c2:	f004 0401 	andne.w	r4, r4, #1
 800e8c6:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	bf0c      	ite	eq
 800e8ce:	2400      	moveq	r4, #0
 800e8d0:	f004 0401 	andne.w	r4, r4, #1
 800e8d4:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800e8d8:	428b      	cmp	r3, r1
 800e8da:	bf0c      	ite	eq
 800e8dc:	2400      	moveq	r4, #0
 800e8de:	f004 0401 	andne.w	r4, r4, #1
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	bf0c      	ite	eq
 800e8e6:	2400      	moveq	r4, #0
 800e8e8:	f004 0401 	andne.w	r4, r4, #1
 800e8ec:	b11c      	cbz	r4, 800e8f6 <HAL_RS485Ex_Init+0x72>
 800e8ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d15d      	bne.n	800e9b2 <HAL_RS485Ex_Init+0x12e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800e8f6:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800e8fa:	d14a      	bne.n	800e992 <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800e8fc:	2f1f      	cmp	r7, #31
 800e8fe:	d841      	bhi.n	800e984 <HAL_RS485Ex_Init+0x100>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800e900:	2d1f      	cmp	r5, #31
 800e902:	d836      	bhi.n	800e972 <HAL_RS485Ex_Init+0xee>

  if (huart->gState == HAL_UART_STATE_RESET)
 800e904:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800e908:	b36b      	cbz	r3, 800e966 <HAL_RS485Ex_Init+0xe2>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e90a:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800e90e:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e910:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800e912:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800e916:	6813      	ldr	r3, [r2, #0]
 800e918:	f023 0301 	bic.w	r3, r3, #1
 800e91c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e91e:	f7ff fb0b 	bl	800df38 <UART_SetConfig>
 800e922:	2801      	cmp	r0, #1
 800e924:	d03c      	beq.n	800e9a0 <HAL_RS485Ex_Init+0x11c>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e926:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d13b      	bne.n	800e9a6 <HAL_RS485Ex_Init+0x122>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800e92e:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800e932:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800e934:	4a24      	ldr	r2, [pc, #144]	; (800e9c8 <HAL_RS485Ex_Init+0x144>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e936:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800e938:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800e93a:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800e93e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800e942:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800e944:	6899      	ldr	r1, [r3, #8]
 800e946:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800e94a:	430e      	orrs	r6, r1
 800e94c:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800e94e:	6819      	ldr	r1, [r3, #0]
 800e950:	400a      	ands	r2, r1
 800e952:	4317      	orrs	r7, r2
 800e954:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	f042 0201 	orr.w	r2, r2, #1
}
 800e95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800e960:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e962:	f7ff be83 	b.w	800e66c <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 800e966:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800e96a:	4640      	mov	r0, r8
 800e96c:	f7f5 fc54 	bl	8004218 <HAL_UART_MspInit>
 800e970:	e7cb      	b.n	800e90a <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800e972:	21aa      	movs	r1, #170	; 0xaa
 800e974:	4815      	ldr	r0, [pc, #84]	; (800e9cc <HAL_RS485Ex_Init+0x148>)
 800e976:	f7f4 fa11 	bl	8002d9c <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e97a:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1c3      	bne.n	800e90a <HAL_RS485Ex_Init+0x86>
 800e982:	e7f0      	b.n	800e966 <HAL_RS485Ex_Init+0xe2>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800e984:	21a7      	movs	r1, #167	; 0xa7
 800e986:	4811      	ldr	r0, [pc, #68]	; (800e9cc <HAL_RS485Ex_Init+0x148>)
 800e988:	f7f4 fa08 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800e98c:	2d1f      	cmp	r5, #31
 800e98e:	d9b9      	bls.n	800e904 <HAL_RS485Ex_Init+0x80>
 800e990:	e7ef      	b.n	800e972 <HAL_RS485Ex_Init+0xee>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800e992:	21a4      	movs	r1, #164	; 0xa4
 800e994:	480d      	ldr	r0, [pc, #52]	; (800e9cc <HAL_RS485Ex_Init+0x148>)
 800e996:	f7f4 fa01 	bl	8002d9c <assert_failed>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800e99a:	2f1f      	cmp	r7, #31
 800e99c:	d9b0      	bls.n	800e900 <HAL_RS485Ex_Init+0x7c>
 800e99e:	e7f1      	b.n	800e984 <HAL_RS485Ex_Init+0x100>
}
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_AdvFeatureConfig(huart);
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	f7ff fcb4 	bl	800e314 <UART_AdvFeatureConfig>
 800e9ac:	e7bf      	b.n	800e92e <HAL_RS485Ex_Init+0xaa>
}
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800e9b2:	21a1      	movs	r1, #161	; 0xa1
 800e9b4:	4805      	ldr	r0, [pc, #20]	; (800e9cc <HAL_RS485Ex_Init+0x148>)
 800e9b6:	f7f4 f9f1 	bl	8002d9c <assert_failed>
 800e9ba:	e79c      	b.n	800e8f6 <HAL_RS485Ex_Init+0x72>
 800e9bc:	40011000 	.word	0x40011000
 800e9c0:	40004400 	.word	0x40004400
 800e9c4:	40004800 	.word	0x40004800
 800e9c8:	fc00ffff 	.word	0xfc00ffff
 800e9cc:	080264d4 	.word	0x080264d4

0800e9d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ea00 <USB_CoreReset+0x30>)
 800e9d2:	e001      	b.n	800e9d8 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	d010      	beq.n	800e9fa <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9d8:	6902      	ldr	r2, [r0, #16]
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	dafa      	bge.n	800e9d4 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e9de:	6903      	ldr	r3, [r0, #16]
 800e9e0:	4a07      	ldr	r2, [pc, #28]	; (800ea00 <USB_CoreReset+0x30>)
 800e9e2:	f043 0301 	orr.w	r3, r3, #1
 800e9e6:	6103      	str	r3, [r0, #16]
 800e9e8:	e001      	b.n	800e9ee <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 800e9ea:	3a01      	subs	r2, #1
 800e9ec:	d005      	beq.n	800e9fa <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e9ee:	6903      	ldr	r3, [r0, #16]
 800e9f0:	f013 0301 	ands.w	r3, r3, #1
 800e9f4:	d1f9      	bne.n	800e9ea <USB_CoreReset+0x1a>

  return HAL_OK;
 800e9f6:	4618      	mov	r0, r3
}
 800e9f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 800e9fa:	2003      	movs	r0, #3
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	00030d40 	.word	0x00030d40

0800ea04 <USB_CoreInit>:
{
 800ea04:	b084      	sub	sp, #16
 800ea06:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 800ea0a:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea0c:	2d01      	cmp	r5, #1
{
 800ea0e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ea12:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea14:	d121      	bne.n	800ea5a <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ea16:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ea18:	4b18      	ldr	r3, [pc, #96]	; (800ea7c <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ea1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800ea1e:	9811      	ldr	r0, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ea20:	638a      	str	r2, [r1, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800ea22:	2801      	cmp	r0, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ea24:	68ca      	ldr	r2, [r1, #12]
 800ea26:	ea03 0302 	and.w	r3, r3, r2
 800ea2a:	60cb      	str	r3, [r1, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ea2c:	68cb      	ldr	r3, [r1, #12]
 800ea2e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ea32:	60cb      	str	r3, [r1, #12]
    if (cfg.use_external_vbus == 1U)
 800ea34:	d01c      	beq.n	800ea70 <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800ea36:	4608      	mov	r0, r1
 800ea38:	f7ff ffca 	bl	800e9d0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800ea3c:	9b08      	ldr	r3, [sp, #32]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d107      	bne.n	800ea52 <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ea42:	688b      	ldr	r3, [r1, #8]
 800ea44:	f043 0306 	orr.w	r3, r3, #6
 800ea48:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ea4a:	688b      	ldr	r3, [r1, #8]
 800ea4c:	f043 0320 	orr.w	r3, r3, #32
 800ea50:	608b      	str	r3, [r1, #8]
}
 800ea52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea56:	b004      	add	sp, #16
 800ea58:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ea5a:	68c3      	ldr	r3, [r0, #12]
 800ea5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea60:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800ea62:	f7ff ffb5 	bl	800e9d0 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ea66:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800ea68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea6c:	638b      	str	r3, [r1, #56]	; 0x38
 800ea6e:	e7e5      	b.n	800ea3c <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ea70:	68cb      	ldr	r3, [r1, #12]
 800ea72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea76:	60cb      	str	r3, [r1, #12]
 800ea78:	e7dd      	b.n	800ea36 <USB_CoreInit+0x32>
 800ea7a:	bf00      	nop
 800ea7c:	ffbdffbf 	.word	0xffbdffbf

0800ea80 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800ea80:	2a02      	cmp	r2, #2
{
 800ea82:	4603      	mov	r3, r0
 800ea84:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800ea86:	d00c      	beq.n	800eaa2 <USB_SetTurnaroundTime+0x22>
 800ea88:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea8c:	68d9      	ldr	r1, [r3, #12]
}
 800ea8e:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea90:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800ea94:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ea96:	68da      	ldr	r2, [r3, #12]
 800ea98:	4322      	orrs	r2, r4
}
 800ea9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ea9e:	60da      	str	r2, [r3, #12]
}
 800eaa0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800eaa2:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <USB_SetTurnaroundTime+0xc8>)
 800eaa4:	4829      	ldr	r0, [pc, #164]	; (800eb4c <USB_SetTurnaroundTime+0xcc>)
 800eaa6:	440a      	add	r2, r1
 800eaa8:	4282      	cmp	r2, r0
 800eaaa:	d93a      	bls.n	800eb22 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800eaac:	4a28      	ldr	r2, [pc, #160]	; (800eb50 <USB_SetTurnaroundTime+0xd0>)
 800eaae:	4829      	ldr	r0, [pc, #164]	; (800eb54 <USB_SetTurnaroundTime+0xd4>)
 800eab0:	440a      	add	r2, r1
 800eab2:	4282      	cmp	r2, r0
 800eab4:	d932      	bls.n	800eb1c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800eab6:	4a28      	ldr	r2, [pc, #160]	; (800eb58 <USB_SetTurnaroundTime+0xd8>)
 800eab8:	4828      	ldr	r0, [pc, #160]	; (800eb5c <USB_SetTurnaroundTime+0xdc>)
 800eaba:	440a      	add	r2, r1
 800eabc:	4282      	cmp	r2, r0
 800eabe:	d933      	bls.n	800eb28 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800eac0:	4a27      	ldr	r2, [pc, #156]	; (800eb60 <USB_SetTurnaroundTime+0xe0>)
 800eac2:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 800eac6:	440a      	add	r2, r1
 800eac8:	30a0      	adds	r0, #160	; 0xa0
 800eaca:	4282      	cmp	r2, r0
 800eacc:	d92f      	bls.n	800eb2e <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800eace:	4a25      	ldr	r2, [pc, #148]	; (800eb64 <USB_SetTurnaroundTime+0xe4>)
 800ead0:	4825      	ldr	r0, [pc, #148]	; (800eb68 <USB_SetTurnaroundTime+0xe8>)
 800ead2:	440a      	add	r2, r1
 800ead4:	4282      	cmp	r2, r0
 800ead6:	d92d      	bls.n	800eb34 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ead8:	4a24      	ldr	r2, [pc, #144]	; (800eb6c <USB_SetTurnaroundTime+0xec>)
 800eada:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 800eade:	440a      	add	r2, r1
 800eae0:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 800eae4:	4282      	cmp	r2, r0
 800eae6:	d928      	bls.n	800eb3a <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800eae8:	4a21      	ldr	r2, [pc, #132]	; (800eb70 <USB_SetTurnaroundTime+0xf0>)
 800eaea:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 800eaee:	440a      	add	r2, r1
 800eaf0:	f500 7020 	add.w	r0, r0, #640	; 0x280
 800eaf4:	4282      	cmp	r2, r0
 800eaf6:	d9c7      	bls.n	800ea88 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eaf8:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <USB_SetTurnaroundTime+0xf4>)
 800eafa:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 800eafe:	440a      	add	r2, r1
 800eb00:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eb04:	4282      	cmp	r2, r0
 800eb06:	d91b      	bls.n	800eb40 <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eb08:	4a1b      	ldr	r2, [pc, #108]	; (800eb78 <USB_SetTurnaroundTime+0xf8>)
 800eb0a:	4c1c      	ldr	r4, [pc, #112]	; (800eb7c <USB_SetTurnaroundTime+0xfc>)
 800eb0c:	440a      	add	r2, r1
 800eb0e:	42a2      	cmp	r2, r4
 800eb10:	bf8c      	ite	hi
 800eb12:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 800eb16:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 800eb1a:	e7b7      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb1c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800eb20:	e7b4      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb22:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800eb26:	e7b1      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb28:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800eb2c:	e7ae      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb2e:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800eb32:	e7ab      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb34:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800eb38:	e7a8      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb3a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800eb3e:	e7a5      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb40:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800eb44:	e7a2      	b.n	800ea8c <USB_SetTurnaroundTime+0xc>
 800eb46:	bf00      	nop
 800eb48:	ff275340 	.word	0xff275340
 800eb4c:	000c34ff 	.word	0x000c34ff
 800eb50:	ff1b1e40 	.word	0xff1b1e40
 800eb54:	000f423f 	.word	0x000f423f
 800eb58:	ff0bdc00 	.word	0xff0bdc00
 800eb5c:	00124f7f 	.word	0x00124f7f
 800eb60:	fef98c80 	.word	0xfef98c80
 800eb64:	fee5b660 	.word	0xfee5b660
 800eb68:	0016e35f 	.word	0x0016e35f
 800eb6c:	feced300 	.word	0xfeced300
 800eb70:	feb35bc0 	.word	0xfeb35bc0
 800eb74:	fe91ca00 	.word	0xfe91ca00
 800eb78:	fe5954e0 	.word	0xfe5954e0
 800eb7c:	00419cdf 	.word	0x00419cdf

0800eb80 <USB_EnableGlobalInt>:
{
 800eb80:	4602      	mov	r2, r0
}
 800eb82:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eb84:	6893      	ldr	r3, [r2, #8]
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	6093      	str	r3, [r2, #8]
}
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <USB_DisableGlobalInt>:
{
 800eb90:	4602      	mov	r2, r0
}
 800eb92:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eb94:	6893      	ldr	r3, [r2, #8]
 800eb96:	f023 0301 	bic.w	r3, r3, #1
 800eb9a:	6093      	str	r3, [r2, #8]
}
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <USB_SetCurrentMode>:
{
 800eba0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eba2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800eba4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eba6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ebaa:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ebac:	d00b      	beq.n	800ebc6 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800ebae:	b941      	cbnz	r1, 800ebc2 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ebb0:	68c3      	ldr	r3, [r0, #12]
 800ebb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebb6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800ebb8:	2032      	movs	r0, #50	; 0x32
 800ebba:	f7f6 fbf1 	bl	80053a0 <HAL_Delay>
  return HAL_OK;
 800ebbe:	2000      	movs	r0, #0
}
 800ebc0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800ebc2:	2001      	movs	r0, #1
}
 800ebc4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ebc6:	68c3      	ldr	r3, [r0, #12]
 800ebc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebcc:	60c3      	str	r3, [r0, #12]
 800ebce:	e7f3      	b.n	800ebb8 <USB_SetCurrentMode+0x18>

0800ebd0 <USB_DevInit>:
{
 800ebd0:	b084      	sub	sp, #16
 800ebd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 800ebd6:	2400      	movs	r4, #0
{
 800ebd8:	ae08      	add	r6, sp, #32
 800ebda:	4605      	mov	r5, r0
 800ebdc:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    USBx->DIEPTXF[i] = 0U;
 800ebe0:	4620      	mov	r0, r4
{
 800ebe2:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ebe6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ebe8:	9e08      	ldr	r6, [sp, #32]
 800ebea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    USBx->DIEPTXF[i] = 0U;
 800ebec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800ebf0:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 800ebf2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 800ebf6:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 800ebf8:	6058      	str	r0, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ebfa:	d1f7      	bne.n	800ebec <USB_DevInit+0x1c>
 800ebfc:	f505 6700 	add.w	r7, r5, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800ec00:	2900      	cmp	r1, #0
 800ec02:	f040 809e 	bne.w	800ed42 <USB_DevInit+0x172>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f043 0302 	orr.w	r3, r3, #2
 800ec0c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ec0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ec10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec14:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ec16:	682b      	ldr	r3, [r5, #0]
 800ec18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec1c:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec24:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 800ec26:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec28:	f1bc 0f01 	cmp.w	ip, #1
  USBx_PCGCCTL = 0U;
 800ec2c:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ec30:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 800ec34:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx_DEVICE->DCFG |= speed;
 800ec38:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec3c:	d03b      	beq.n	800ecb6 <USB_DevInit+0xe6>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ec3e:	f1bc 0f03 	cmp.w	ip, #3
 800ec42:	d038      	beq.n	800ecb6 <USB_DevInit+0xe6>
  USBx_DEVICE->DCFG |= speed;
 800ec44:	f043 0303 	orr.w	r3, r3, #3
 800ec48:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec4c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800ec50:	4b43      	ldr	r3, [pc, #268]	; (800ed60 <USB_DevInit+0x190>)
 800ec52:	612a      	str	r2, [r5, #16]
 800ec54:	e001      	b.n	800ec5a <USB_DevInit+0x8a>
    if (++count > 200000U)
 800ec56:	3b01      	subs	r3, #1
 800ec58:	d07a      	beq.n	800ed50 <USB_DevInit+0x180>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec5a:	6928      	ldr	r0, [r5, #16]
 800ec5c:	f010 0020 	ands.w	r0, r0, #32
 800ec60:	d1f9      	bne.n	800ec56 <USB_DevInit+0x86>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec62:	2210      	movs	r2, #16
 800ec64:	4b3e      	ldr	r3, [pc, #248]	; (800ed60 <USB_DevInit+0x190>)
 800ec66:	612a      	str	r2, [r5, #16]
 800ec68:	e001      	b.n	800ec6e <USB_DevInit+0x9e>
    if (++count > 200000U)
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	d06e      	beq.n	800ed4c <USB_DevInit+0x17c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec6e:	692a      	ldr	r2, [r5, #16]
 800ec70:	06d2      	lsls	r2, r2, #27
 800ec72:	d4fa      	bmi.n	800ec6a <USB_DevInit+0x9a>
  USBx_DEVICE->DIEPMSK = 0U;
 800ec74:	2200      	movs	r2, #0
 800ec76:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ec78:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ec7a:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec7c:	b316      	cbz	r6, 800ecc4 <USB_DevInit+0xf4>
 800ec7e:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec82:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ec86:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec8a:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec8c:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ec90:	e009      	b.n	800eca6 <USB_DevInit+0xd6>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec92:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec96:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec98:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec9c:	f8c3 e008 	str.w	lr, [r3, #8]
 800eca0:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eca2:	42b2      	cmp	r2, r6
 800eca4:	d031      	beq.n	800ed0a <USB_DevInit+0x13a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eca6:	681c      	ldr	r4, [r3, #0]
 800eca8:	2c00      	cmp	r4, #0
 800ecaa:	daf2      	bge.n	800ec92 <USB_DevInit+0xc2>
      if (i == 0U)
 800ecac:	2a00      	cmp	r2, #0
 800ecae:	d054      	beq.n	800ed5a <USB_DevInit+0x18a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ecb0:	f8c3 8000 	str.w	r8, [r3]
 800ecb4:	e7ef      	b.n	800ec96 <USB_DevInit+0xc6>
    if (cfg.speed == USBD_HS_SPEED)
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	d0c6      	beq.n	800ec48 <USB_DevInit+0x78>
  USBx_DEVICE->DCFG |= speed;
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
 800ecc2:	e7c3      	b.n	800ec4c <USB_DevInit+0x7c>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ecc4:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800ecc6:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ecc8:	f06f 4480 	mvn.w	r4, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800eccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ecce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecd2:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800ecd4:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ecd6:	616c      	str	r4, [r5, #20]
  if (cfg.dma_enable == 0U)
 800ecd8:	b91a      	cbnz	r2, 800ece2 <USB_DevInit+0x112>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ecda:	69ab      	ldr	r3, [r5, #24]
 800ecdc:	f043 0310 	orr.w	r3, r3, #16
 800ece0:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ece2:	69ac      	ldr	r4, [r5, #24]
 800ece4:	4b1f      	ldr	r3, [pc, #124]	; (800ed64 <USB_DevInit+0x194>)
  if (cfg.Sof_enable != 0U)
 800ece6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ece8:	4323      	orrs	r3, r4
 800ecea:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 800ecec:	b11a      	cbz	r2, 800ecf6 <USB_DevInit+0x126>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ecee:	69ab      	ldr	r3, [r5, #24]
 800ecf0:	f043 0308 	orr.w	r3, r3, #8
 800ecf4:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ecf6:	2901      	cmp	r1, #1
 800ecf8:	d103      	bne.n	800ed02 <USB_DevInit+0x132>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ecfa:	69aa      	ldr	r2, [r5, #24]
 800ecfc:	4b1a      	ldr	r3, [pc, #104]	; (800ed68 <USB_DevInit+0x198>)
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	61ab      	str	r3, [r5, #24]
}
 800ed02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed06:	b004      	add	sp, #16
 800ed08:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed0a:	2400      	movs	r4, #0
 800ed0c:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ed10:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed14:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ed18:	46a4      	mov	ip, r4
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed1a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ed1e:	e009      	b.n	800ed34 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ed20:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed24:	3401      	adds	r4, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ed26:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ed2a:	f8c3 e008 	str.w	lr, [r3, #8]
 800ed2e:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed30:	4294      	cmp	r4, r2
 800ed32:	d0c7      	beq.n	800ecc4 <USB_DevInit+0xf4>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed34:	681e      	ldr	r6, [r3, #0]
 800ed36:	2e00      	cmp	r6, #0
 800ed38:	daf2      	bge.n	800ed20 <USB_DevInit+0x150>
      if (i == 0U)
 800ed3a:	b15c      	cbz	r4, 800ed54 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ed3c:	f8c3 8000 	str.w	r8, [r3]
 800ed40:	e7f0      	b.n	800ed24 <USB_DevInit+0x154>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ed42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ed44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed48:	63ab      	str	r3, [r5, #56]	; 0x38
 800ed4a:	e76c      	b.n	800ec26 <USB_DevInit+0x56>
    ret = HAL_ERROR;
 800ed4c:	2001      	movs	r0, #1
 800ed4e:	e791      	b.n	800ec74 <USB_DevInit+0xa4>
    ret = HAL_ERROR;
 800ed50:	2001      	movs	r0, #1
 800ed52:	e786      	b.n	800ec62 <USB_DevInit+0x92>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed54:	f8c3 9000 	str.w	r9, [r3]
 800ed58:	e7e4      	b.n	800ed24 <USB_DevInit+0x154>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ed5a:	f8c3 9000 	str.w	r9, [r3]
 800ed5e:	e79a      	b.n	800ec96 <USB_DevInit+0xc6>
 800ed60:	00030d40 	.word	0x00030d40
 800ed64:	803c3800 	.word	0x803c3800
 800ed68:	40000004 	.word	0x40000004

0800ed6c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed6c:	0189      	lsls	r1, r1, #6
 800ed6e:	4a07      	ldr	r2, [pc, #28]	; (800ed8c <USB_FlushTxFifo+0x20>)
 800ed70:	f041 0120 	orr.w	r1, r1, #32
 800ed74:	6101      	str	r1, [r0, #16]
 800ed76:	e001      	b.n	800ed7c <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 800ed78:	3a01      	subs	r2, #1
 800ed7a:	d005      	beq.n	800ed88 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed7c:	6903      	ldr	r3, [r0, #16]
 800ed7e:	f013 0320 	ands.w	r3, r3, #32
 800ed82:	d1f9      	bne.n	800ed78 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800ed84:	4618      	mov	r0, r3
 800ed86:	4770      	bx	lr
      return HAL_TIMEOUT;
 800ed88:	2003      	movs	r0, #3
}
 800ed8a:	4770      	bx	lr
 800ed8c:	00030d40 	.word	0x00030d40

0800ed90 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ed90:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ed94:	f013 0006 	ands.w	r0, r3, #6
 800ed98:	d004      	beq.n	800eda4 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ed9a:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800ed9e:	bf14      	ite	ne
 800eda0:	2002      	movne	r0, #2
 800eda2:	200f      	moveq	r0, #15
}
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop

0800eda8 <USB_ActivateEndpoint>:
{
 800eda8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800edaa:	780a      	ldrb	r2, [r1, #0]
 800edac:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 800edae:	784d      	ldrb	r5, [r1, #1]
 800edb0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800edb4:	f002 060f 	and.w	r6, r2, #15
 800edb8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800edbc:	2d01      	cmp	r5, #1
 800edbe:	fa03 f306 	lsl.w	r3, r3, r6
 800edc2:	d017      	beq.n	800edf4 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800edc4:	69e2      	ldr	r2, [r4, #28]
 800edc6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800edca:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800edcc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800edd0:	041b      	lsls	r3, r3, #16
 800edd2:	d40c      	bmi.n	800edee <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800edd4:	688a      	ldr	r2, [r1, #8]
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <USB_ActivateEndpoint+0x80>)
 800edd8:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eddc:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800edde:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 800ede2:	4313      	orrs	r3, r2
 800ede4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800ede8:	430b      	orrs	r3, r1
 800edea:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800edee:	2000      	movs	r0, #0
 800edf0:	bc70      	pop	{r4, r5, r6}
 800edf2:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800edf4:	69e5      	ldr	r5, [r4, #28]
 800edf6:	432b      	orrs	r3, r5
 800edf8:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800edfa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800edfe:	041c      	lsls	r4, r3, #16
 800ee00:	d4f5      	bmi.n	800edee <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee02:	688c      	ldr	r4, [r1, #8]
 800ee04:	4b08      	ldr	r3, [pc, #32]	; (800ee28 <USB_ActivateEndpoint+0x80>)
 800ee06:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ee0a:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee0c:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800ee10:	4323      	orrs	r3, r4
 800ee12:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 800ee16:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800ee1a:	430a      	orrs	r2, r1
}
 800ee1c:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ee1e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 800ee22:	2000      	movs	r0, #0
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	10008000 	.word	0x10008000

0800ee2c <USB_DeactivateEndpoint>:
{
 800ee2c:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 800ee2e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ee30:	7849      	ldrb	r1, [r1, #1]
 800ee32:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800ee36:	2901      	cmp	r1, #1
 800ee38:	d02a      	beq.n	800ee90 <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee3a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800ee3e:	2900      	cmp	r1, #0
 800ee40:	db19      	blt.n	800ee76 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee42:	f003 010f 	and.w	r1, r3, #15
 800ee46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ee4a:	4c26      	ldr	r4, [pc, #152]	; (800eee4 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee4c:	408b      	lsls	r3, r1
 800ee4e:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800ee52:	43db      	mvns	r3, r3
 800ee54:	4019      	ands	r1, r3
 800ee56:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee5a:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800ee5e:	400b      	ands	r3, r1
 800ee60:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800ee64:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ee66:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800ee6a:	401c      	ands	r4, r3
 800ee6c:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 800ee70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee74:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ee76:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800ee7a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800ee7e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ee82:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 800ee86:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800ee8a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 800ee8e:	e7d8      	b.n	800ee42 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee90:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800ee94:	2900      	cmp	r1, #0
 800ee96:	da0b      	bge.n	800eeb0 <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee98:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800ee9c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800eea0:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800eea4:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 800eea8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800eeac:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eeb0:	f003 040f 	and.w	r4, r3, #15
 800eeb4:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eeb6:	490c      	ldr	r1, [pc, #48]	; (800eee8 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eeb8:	40a3      	lsls	r3, r4
 800eeba:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800eebe:	43db      	mvns	r3, r3
 800eec0:	401c      	ands	r4, r3
 800eec2:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eec6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800eeca:	4023      	ands	r3, r4
}
 800eecc:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800eed0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800eed4:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eed6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800eeda:	4019      	ands	r1, r3
 800eedc:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	eff37800 	.word	0xeff37800
 800eee8:	ec337800 	.word	0xec337800

0800eeec <USB_EPStartXfer>:
{
 800eeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800eef0:	784f      	ldrb	r7, [r1, #1]
 800eef2:	780b      	ldrb	r3, [r1, #0]
 800eef4:	2f01      	cmp	r7, #1
 800eef6:	694c      	ldr	r4, [r1, #20]
 800eef8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800eefc:	78ce      	ldrb	r6, [r1, #3]
 800eefe:	d055      	beq.n	800efac <USB_EPStartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef00:	f503 6730 	add.w	r7, r3, #2816	; 0xb00
 800ef04:	f8df e208 	ldr.w	lr, [pc, #520]	; 800f110 <USB_EPStartXfer+0x224>
 800ef08:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef0c:	4d7e      	ldr	r5, [pc, #504]	; (800f108 <USB_EPStartXfer+0x21c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef0e:	ea0c 0e0e 	and.w	lr, ip, lr
 800ef12:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ef16:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef1a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800ef1e:	ea0e 0505 	and.w	r5, lr, r5
 800ef22:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 800ef24:	b38c      	cbz	r4, 800ef8a <USB_EPStartXfer+0x9e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ef26:	eb04 050c 	add.w	r5, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef2a:	4c78      	ldr	r4, [pc, #480]	; (800f10c <USB_EPStartXfer+0x220>)
 800ef2c:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 800ef30:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ef32:	f105 35ff 	add.w	r5, r5, #4294967295
 800ef36:	fbb5 f5fc 	udiv	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef3a:	ea04 4ec5 	and.w	lr, r4, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ef3e:	b2ad      	uxth	r5, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef40:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ef44:	fb0c f405 	mul.w	r4, ip, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef48:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ef4c:	693d      	ldr	r5, [r7, #16]
 800ef4e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800ef52:	ea44 0405 	orr.w	r4, r4, r5
 800ef56:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800ef58:	d023      	beq.n	800efa2 <USB_EPStartXfer+0xb6>
    if (ep->type == EP_TYPE_ISOC)
 800ef5a:	2e01      	cmp	r6, #1
 800ef5c:	d10c      	bne.n	800ef78 <USB_EPStartXfer+0x8c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef5e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800ef62:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ef66:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ef6a:	bf0c      	ite	eq
 800ef6c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ef70:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800ef74:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef78:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ef7c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ef80:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800ef84:	2000      	movs	r0, #0
 800ef86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ef8a:	693d      	ldr	r5, [r7, #16]
 800ef8c:	f3cc 0412 	ubfx	r4, ip, #0, #19
    if (dma == 1U)
 800ef90:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ef92:	ea44 0405 	orr.w	r4, r4, r5
 800ef96:	613c      	str	r4, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef98:	693c      	ldr	r4, [r7, #16]
 800ef9a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800ef9e:	613c      	str	r4, [r7, #16]
    if (dma == 1U)
 800efa0:	d1db      	bne.n	800ef5a <USB_EPStartXfer+0x6e>
      if ((uint32_t)ep->xfer_buff != 0U)
 800efa2:	68ca      	ldr	r2, [r1, #12]
 800efa4:	2a00      	cmp	r2, #0
 800efa6:	d0d8      	beq.n	800ef5a <USB_EPStartXfer+0x6e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800efa8:	617a      	str	r2, [r7, #20]
 800efaa:	e7d6      	b.n	800ef5a <USB_EPStartXfer+0x6e>
 800efac:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800efb0:	b3ec      	cbz	r4, 800f02e <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efb2:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800efb6:	f3c4 0c12 	ubfx	ip, r4, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efba:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800efbe:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efc0:	eb08 0e04 	add.w	lr, r8, r4
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efc4:	f8df a148 	ldr.w	sl, [pc, #328]	; 800f110 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efc8:	f10e 3eff 	add.w	lr, lr, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efcc:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efd0:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800f108 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efd4:	f8c5 a010 	str.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efdc:	fbbe f8f8 	udiv	r8, lr, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efe0:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efe4:	f8df e124 	ldr.w	lr, [pc, #292]	; 800f10c <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efe8:	f8c5 9010 	str.w	r9, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800efec:	ea0e 4ec8 	and.w	lr, lr, r8, lsl #19
 800eff0:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800eff4:	ea4e 0e08 	orr.w	lr, lr, r8
 800eff8:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800effc:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800f000:	ea4c 0c0e 	orr.w	ip, ip, lr
 800f004:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800f008:	d052      	beq.n	800f0b0 <USB_EPStartXfer+0x1c4>
    if (dma == 1U)
 800f00a:	2a01      	cmp	r2, #1
 800f00c:	d05a      	beq.n	800f0c4 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f00e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f012:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f016:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f01a:	780b      	ldrb	r3, [r1, #0]
 800f01c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800f020:	f003 030f 	and.w	r3, r3, #15
 800f024:	409f      	lsls	r7, r3
 800f026:	4317      	orrs	r7, r2
 800f028:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 800f02c:	e7aa      	b.n	800ef84 <USB_EPStartXfer+0x98>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f02e:	f8d5 e010 	ldr.w	lr, [r5, #16]
    if (dma == 1U)
 800f032:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f034:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800f108 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f038:	4f35      	ldr	r7, [pc, #212]	; (800f110 <USB_EPStartXfer+0x224>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f03a:	ea0e 0c0c 	and.w	ip, lr, ip
 800f03e:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f042:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f046:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800f04a:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f04e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f052:	ea0c 0707 	and.w	r7, ip, r7
 800f056:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f058:	d034      	beq.n	800f0c4 <USB_EPStartXfer+0x1d8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f05a:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f05e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f060:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f064:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800f068:	d18c      	bne.n	800ef84 <USB_EPStartXfer+0x98>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f06a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800f06e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f072:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f076:	bf0c      	ite	eq
 800f078:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f07c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800f080:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 800f084:	2a00      	cmp	r2, #0
 800f086:	f47f af7d 	bne.w	800ef84 <USB_EPStartXfer+0x98>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f08a:	b2a2      	uxth	r2, r4
 800f08c:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 800f08e:	0892      	lsrs	r2, r2, #2
 800f090:	f43f af78 	beq.w	800ef84 <USB_EPStartXfer+0x98>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f094:	780c      	ldrb	r4, [r1, #0]
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f096:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f098:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800f09c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f0a0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f0a4:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800f0a8:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0aa:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f0ac:	d1fa      	bne.n	800f0a4 <USB_EPStartXfer+0x1b8>
 800f0ae:	e769      	b.n	800ef84 <USB_EPStartXfer+0x98>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0b0:	692f      	ldr	r7, [r5, #16]
    if (dma == 1U)
 800f0b2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0b4:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800f0b8:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f0ba:	692f      	ldr	r7, [r5, #16]
 800f0bc:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800f0c0:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800f0c2:	d11a      	bne.n	800f0fa <USB_EPStartXfer+0x20e>
      if ((uint32_t)ep->dma_addr != 0U)
 800f0c4:	690a      	ldr	r2, [r1, #16]
 800f0c6:	b102      	cbz	r2, 800f0ca <USB_EPStartXfer+0x1de>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f0c8:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800f0ca:	2e01      	cmp	r6, #1
 800f0cc:	d10c      	bne.n	800f0e8 <USB_EPStartXfer+0x1fc>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0ce:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f0d2:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0d6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f0da:	bf0c      	ite	eq
 800f0dc:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f0e0:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800f0e4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0e8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
}
 800f0ec:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0ee:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f0f2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800f0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0fa:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 800f0fe:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800f102:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 800f106:	e7b0      	b.n	800f06a <USB_EPStartXfer+0x17e>
 800f108:	e007ffff 	.word	0xe007ffff
 800f10c:	1ff80000 	.word	0x1ff80000
 800f110:	fff80000 	.word	0xfff80000

0800f114 <USB_EP0StartXfer>:
{
 800f114:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 800f116:	784b      	ldrb	r3, [r1, #1]
 800f118:	780c      	ldrb	r4, [r1, #0]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	694d      	ldr	r5, [r1, #20]
 800f11e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800f122:	d026      	beq.n	800f172 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f124:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800f128:	4f3c      	ldr	r7, [pc, #240]	; (800f21c <USB_EP0StartXfer+0x108>)
 800f12a:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f12c:	4e3c      	ldr	r6, [pc, #240]	; (800f220 <USB_EP0StartXfer+0x10c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f12e:	4007      	ands	r7, r0
 800f130:	6888      	ldr	r0, [r1, #8]
 800f132:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f134:	691f      	ldr	r7, [r3, #16]
 800f136:	403e      	ands	r6, r7
 800f138:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len > 0U)
 800f13a:	b105      	cbz	r5, 800f13e <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800f13c:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f13e:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f140:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800f144:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f146:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800f14a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f14c:	691d      	ldr	r5, [r3, #16]
 800f14e:	ea40 0005 	orr.w	r0, r0, r5
 800f152:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800f154:	d008      	beq.n	800f168 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f156:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800f15a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f15e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800f162:	2000      	movs	r0, #0
 800f164:	bcf0      	pop	{r4, r5, r6, r7}
 800f166:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 800f168:	68ca      	ldr	r2, [r1, #12]
 800f16a:	2a00      	cmp	r2, #0
 800f16c:	d0f3      	beq.n	800f156 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f16e:	615a      	str	r2, [r3, #20]
 800f170:	e7f1      	b.n	800f156 <USB_EP0StartXfer+0x42>
 800f172:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800f176:	2d00      	cmp	r5, #0
 800f178:	d033      	beq.n	800f1e2 <USB_EP0StartXfer+0xce>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f17a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800f17e:	4f27      	ldr	r7, [pc, #156]	; (800f21c <USB_EP0StartXfer+0x108>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f180:	4e27      	ldr	r6, [pc, #156]	; (800f220 <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f182:	ea0c 0707 	and.w	r7, ip, r7
      if (ep->xfer_len > ep->maxpacket)
 800f186:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f18a:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f18c:	45ac      	cmp	ip, r5
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f18e:	691f      	ldr	r7, [r3, #16]
 800f190:	ea06 0607 	and.w	r6, r6, r7
 800f194:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f196:	d202      	bcs.n	800f19e <USB_EP0StartXfer+0x8a>
        ep->xfer_len = ep->maxpacket;
 800f198:	4665      	mov	r5, ip
 800f19a:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f19e:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f1a0:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800f1a4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1a6:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800f1aa:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f1ac:	691e      	ldr	r6, [r3, #16]
 800f1ae:	ea45 0506 	orr.w	r5, r5, r6
 800f1b2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800f1b4:	d026      	beq.n	800f204 <USB_EP0StartXfer+0xf0>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1b6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800f1ba:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1c0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800f1c4:	2a00      	cmp	r2, #0
 800f1c6:	d0cc      	beq.n	800f162 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1c8:	780a      	ldrb	r2, [r1, #0]
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 800f1d0:	f002 020f 	and.w	r2, r2, #15
 800f1d4:	4093      	lsls	r3, r2
 800f1d6:	430b      	orrs	r3, r1
}
 800f1d8:	bcf0      	pop	{r4, r5, r6, r7}
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f1da:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800f1de:	2000      	movs	r0, #0
 800f1e0:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1e2:	691f      	ldr	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1e4:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1e8:	4e0d      	ldr	r6, [pc, #52]	; (800f220 <USB_EP0StartXfer+0x10c>)
    if (dma == 1U)
 800f1ea:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f1ec:	ea06 0607 	and.w	r6, r6, r7
 800f1f0:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f1f2:	691e      	ldr	r6, [r3, #16]
 800f1f4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800f1f8:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f1fa:	691e      	ldr	r6, [r3, #16]
 800f1fc:	ea05 0506 	and.w	r5, r5, r6
 800f200:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800f202:	d1d8      	bne.n	800f1b6 <USB_EP0StartXfer+0xa2>
      if ((uint32_t)ep->dma_addr != 0U)
 800f204:	690a      	ldr	r2, [r1, #16]
 800f206:	b102      	cbz	r2, 800f20a <USB_EP0StartXfer+0xf6>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f208:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f20a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800f20e:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f210:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f214:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800f218:	bcf0      	pop	{r4, r5, r6, r7}
 800f21a:	4770      	bx	lr
 800f21c:	fff80000 	.word	0xfff80000
 800f220:	e007ffff 	.word	0xe007ffff

0800f224 <USB_WritePacket>:
{
 800f224:	b410      	push	{r4}
 800f226:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800f22a:	b96c      	cbnz	r4, 800f248 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f22c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f22e:	089b      	lsrs	r3, r3, #2
 800f230:	d00a      	beq.n	800f248 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f232:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800f236:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f23a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f23e:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800f242:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f244:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f246:	d1fa      	bne.n	800f23e <USB_WritePacket+0x1a>
}
 800f248:	2000      	movs	r0, #0
 800f24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f250:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800f252:	0892      	lsrs	r2, r2, #2
 800f254:	d00c      	beq.n	800f270 <USB_ReadPacket+0x20>
{
 800f256:	b410      	push	{r4}
 800f258:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800f25c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f260:	6823      	ldr	r3, [r4, #0]
 800f262:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800f266:	4281      	cmp	r1, r0
 800f268:	d1fa      	bne.n	800f260 <USB_ReadPacket+0x10>
}
 800f26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f26e:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800f270:	4608      	mov	r0, r1
}
 800f272:	4770      	bx	lr

0800f274 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800f274:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f276:	784a      	ldrb	r2, [r1, #1]
 800f278:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f27c:	3300      	adds	r3, #0
 800f27e:	bf18      	it	ne
 800f280:	2301      	movne	r3, #1
 800f282:	2a01      	cmp	r2, #1
 800f284:	d012      	beq.n	800f2ac <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f286:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f28a:	2a00      	cmp	r2, #0
 800f28c:	db06      	blt.n	800f29c <USB_EPSetStall+0x28>
 800f28e:	b12b      	cbz	r3, 800f29c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f290:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f298:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f29c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f2a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f2a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2ac:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	db06      	blt.n	800f2c2 <USB_EPSetStall+0x4e>
 800f2b4:	b12b      	cbz	r3, 800f2c2 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f2b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f2ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f2be:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f2c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f2c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f2ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop

0800f2d4 <USB_EPClearStall>:
{
 800f2d4:	78cb      	ldrb	r3, [r1, #3]
 800f2d6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800f2d8:	7849      	ldrb	r1, [r1, #1]
 800f2da:	3b02      	subs	r3, #2
 800f2dc:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f2e0:	2901      	cmp	r1, #1
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	d011      	beq.n	800f30a <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f2e6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f2ea:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f2ec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800f2f0:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f2f4:	d901      	bls.n	800f2fa <USB_EPClearStall+0x26>
}
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f2fa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f2fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f302:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f306:	2000      	movs	r0, #0
 800f308:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f30a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f30e:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f310:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800f314:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f318:	d8ed      	bhi.n	800f2f6 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f31a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f31e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f322:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f326:	2000      	movs	r0, #0
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop

0800f32c <USB_SetDevAddress>:
{
 800f32c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f32e:	0109      	lsls	r1, r1, #4
}
 800f330:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f332:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f336:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f33a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800f33e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f342:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800f346:	4311      	orrs	r1, r2
 800f348:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop

0800f350 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f350:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800f354:	2003      	movs	r0, #3
{
 800f356:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f358:	6853      	ldr	r3, [r2, #4]
 800f35a:	f023 0302 	bic.w	r3, r3, #2
 800f35e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f360:	f7f6 f81e 	bl	80053a0 <HAL_Delay>
}
 800f364:	2000      	movs	r0, #0
 800f366:	bd08      	pop	{r3, pc}

0800f368 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f368:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800f36c:	2003      	movs	r0, #3
{
 800f36e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f370:	6853      	ldr	r3, [r2, #4]
 800f372:	f043 0302 	orr.w	r3, r3, #2
 800f376:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f378:	f7f6 f812 	bl	80053a0 <HAL_Delay>
}
 800f37c:	2000      	movs	r0, #0
 800f37e:	bd08      	pop	{r3, pc}

0800f380 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f380:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f382:	6980      	ldr	r0, [r0, #24]
}
 800f384:	4010      	ands	r0, r2
 800f386:	4770      	bx	lr

0800f388 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f388:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800f38c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f390:	69c0      	ldr	r0, [r0, #28]
 800f392:	4018      	ands	r0, r3
}
 800f394:	0c00      	lsrs	r0, r0, #16
 800f396:	4770      	bx	lr

0800f398 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f398:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800f39c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f3a0:	69c0      	ldr	r0, [r0, #28]
 800f3a2:	4018      	ands	r0, r3
}
 800f3a4:	b280      	uxth	r0, r0
 800f3a6:	4770      	bx	lr

0800f3a8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f3a8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f3ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f3b0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f3b4:	6940      	ldr	r0, [r0, #20]
}
 800f3b6:	4010      	ands	r0, r2
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop

0800f3bc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f3bc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3c0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800f3c4:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f3c6:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800f3ca:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f3cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3ce:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f3d2:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3d4:	6880      	ldr	r0, [r0, #8]
}
 800f3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f3da:	01db      	lsls	r3, r3, #7
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	430b      	orrs	r3, r1
}
 800f3e0:	4018      	ands	r0, r3
 800f3e2:	4770      	bx	lr

0800f3e4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f3e4:	6940      	ldr	r0, [r0, #20]
}
 800f3e6:	f000 0001 	and.w	r0, r0, #1
 800f3ea:	4770      	bx	lr

0800f3ec <USB_ActivateSetup>:
{
 800f3ec:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3ee:	4a09      	ldr	r2, [pc, #36]	; (800f414 <USB_ActivateSetup+0x28>)
}
 800f3f0:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3f2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800f3f6:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3f8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800f3fc:	4022      	ands	r2, r4
}
 800f3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f402:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f406:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f40a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f40e:	604b      	str	r3, [r1, #4]
}
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	fffff800 	.word	0xfffff800

0800f418 <USB_EP0_OutStart>:
{
 800f418:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f41a:	4c12      	ldr	r4, [pc, #72]	; (800f464 <USB_EP0_OutStart+0x4c>)
 800f41c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f420:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f422:	42a5      	cmp	r5, r4
 800f424:	d903      	bls.n	800f42e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f426:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	db16      	blt.n	800f45c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f42e:	2400      	movs	r4, #0
  if (dma == 1U)
 800f430:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f432:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f434:	691c      	ldr	r4, [r3, #16]
 800f436:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f43a:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f43c:	691c      	ldr	r4, [r3, #16]
 800f43e:	f044 0418 	orr.w	r4, r4, #24
 800f442:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f444:	691c      	ldr	r4, [r3, #16]
 800f446:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800f44a:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800f44c:	d106      	bne.n	800f45c <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f44e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f450:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f454:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f458:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f45c:	2000      	movs	r0, #0
 800f45e:	bc30      	pop	{r4, r5}
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	4f54300a 	.word	0x4f54300a

0800f468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f468:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f46a:	4903      	ldr	r1, [pc, #12]	; (800f478 <MX_FATFS_Init+0x10>)
 800f46c:	4803      	ldr	r0, [pc, #12]	; (800f47c <MX_FATFS_Init+0x14>)
 800f46e:	f001 f97f 	bl	8010770 <FATFS_LinkDriver>
 800f472:	4b03      	ldr	r3, [pc, #12]	; (800f480 <MX_FATFS_Init+0x18>)
 800f474:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f476:	bd08      	pop	{r3, pc}
 800f478:	2002348c 	.word	0x2002348c
 800f47c:	200002b0 	.word	0x200002b0
 800f480:	20023490 	.word	0x20023490

0800f484 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800f484:	4b02      	ldr	r3, [pc, #8]	; (800f490 <USER_initialize+0xc>)
 800f486:	2201      	movs	r2, #1
 800f488:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f48a:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	200002ac 	.word	0x200002ac

0800f494 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 800f494:	2000      	movs	r0, #0
 800f496:	4770      	bx	lr

0800f498 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800f498:	2001      	movs	r0, #1
 800f49a:	4770      	bx	lr

0800f49c <USER_write>:
 800f49c:	2000      	movs	r0, #0
 800f49e:	4770      	bx	lr

0800f4a0 <USER_status>:
 800f4a0:	4b02      	ldr	r3, [pc, #8]	; (800f4ac <USER_status+0xc>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	701a      	strb	r2, [r3, #0]
 800f4a6:	7818      	ldrb	r0, [r3, #0]
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	200002ac 	.word	0x200002ac

0800f4b0 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f4b0:	2100      	movs	r1, #0
{
 800f4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 800f4b4:	4608      	mov	r0, r1
{
 800f4b6:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 800f4b8:	f003 fdac 	bl	8013014 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800f4bc:	2400      	movs	r4, #0
  netmask.addr = 0;
 800f4be:	4f20      	ldr	r7, [pc, #128]	; (800f540 <MX_LWIP_Init+0x90>)
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f4c0:	4b20      	ldr	r3, [pc, #128]	; (800f544 <MX_LWIP_Init+0x94>)
 800f4c2:	4e21      	ldr	r6, [pc, #132]	; (800f548 <MX_LWIP_Init+0x98>)
 800f4c4:	463a      	mov	r2, r7
 800f4c6:	9302      	str	r3, [sp, #8]
 800f4c8:	9400      	str	r4, [sp, #0]
  ipaddr.addr = 0;
 800f4ca:	4820      	ldr	r0, [pc, #128]	; (800f54c <MX_LWIP_Init+0x9c>)
  netmask.addr = 0;
 800f4cc:	603c      	str	r4, [r7, #0]
  gw.addr = 0;
 800f4ce:	4d20      	ldr	r5, [pc, #128]	; (800f550 <MX_LWIP_Init+0xa0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f4d0:	4601      	mov	r1, r0
 800f4d2:	4f20      	ldr	r7, [pc, #128]	; (800f554 <MX_LWIP_Init+0xa4>)
 800f4d4:	462b      	mov	r3, r5
  ipaddr.addr = 0;
 800f4d6:	6004      	str	r4, [r0, #0]
  gw.addr = 0;
 800f4d8:	602c      	str	r4, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f4da:	4630      	mov	r0, r6
 800f4dc:	9701      	str	r7, [sp, #4]
 800f4de:	f006 fb97 	bl	8015c10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f006 fc40 	bl	8015d68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f4e8:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f4ec:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 800f4ee:	075b      	lsls	r3, r3, #29
 800f4f0:	d422      	bmi.n	800f538 <MX_LWIP_Init+0x88>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f4f2:	f006 fc61 	bl	8015db8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800f4f6:	4918      	ldr	r1, [pc, #96]	; (800f558 <MX_LWIP_Init+0xa8>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800f4f8:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800f4fa:	4813      	ldr	r0, [pc, #76]	; (800f548 <MX_LWIP_Init+0x98>)
 800f4fc:	f006 fcc4 	bl	8015e88 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 800f500:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800f502:	2101      	movs	r1, #1
 800f504:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 800f506:	4f15      	ldr	r7, [pc, #84]	; (800f55c <MX_LWIP_Init+0xac>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800f508:	4d15      	ldr	r5, [pc, #84]	; (800f560 <MX_LWIP_Init+0xb0>)
  osSemaphoreDef(Netif_SEM);
 800f50a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800f50e:	f001 fa0f 	bl	8010930 <osSemaphoreCreate>
 800f512:	4b14      	ldr	r3, [pc, #80]	; (800f564 <MX_LWIP_Init+0xb4>)
  link_arg.semaphore = Netif_LinkSemaphore;
 800f514:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800f516:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 800f518:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800f51a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f51c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f51e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800f526:	4639      	mov	r1, r7
 800f528:	a807      	add	r0, sp, #28
 800f52a:	f001 f955 	bl	80107d8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800f52e:	4806      	ldr	r0, [pc, #24]	; (800f548 <MX_LWIP_Init+0x98>)
 800f530:	f00d fbe0 	bl	801ccf4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f534:	b00f      	add	sp, #60	; 0x3c
 800f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800f538:	f006 fc1c 	bl	8015d74 <netif_set_up>
 800f53c:	e7db      	b.n	800f4f6 <MX_LWIP_Init+0x46>
 800f53e:	bf00      	nop
 800f540:	20023940 	.word	0x20023940
 800f544:	08012f8d 	.word	0x08012f8d
 800f548:	20023900 	.word	0x20023900
 800f54c:	2002393c 	.word	0x2002393c
 800f550:	20023944 	.word	0x20023944
 800f554:	0800f865 	.word	0x0800f865
 800f558:	0800fa55 	.word	0x0800fa55
 800f55c:	200238f8 	.word	0x200238f8
 800f560:	08024484 	.word	0x08024484
 800f564:	2000169c 	.word	0x2000169c

0800f568 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f56c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800f620 <low_level_output+0xb8>
{
 800f570:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800f572:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800f574:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 800f578:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 800f57a:	2900      	cmp	r1, #0
 800f57c:	d048      	beq.n	800f610 <low_level_output+0xa8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f57e:	6822      	ldr	r2, [r4, #0]
 800f580:	2a00      	cmp	r2, #0
 800f582:	db1f      	blt.n	800f5c4 <low_level_output+0x5c>
  bufferoffset = 0;
 800f584:	2000      	movs	r0, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f586:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 800f58a:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800f58c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800f590:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f592:	1816      	adds	r6, r2, r0
 800f594:	454e      	cmp	r6, r9
 800f596:	d803      	bhi.n	800f5a0 <low_level_output+0x38>
 800f598:	e027      	b.n	800f5ea <low_level_output+0x82>
 800f59a:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f59c:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f59e:	d923      	bls.n	800f5e8 <low_level_output+0x80>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f5a0:	eba9 0500 	sub.w	r5, r9, r0
 800f5a4:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f5a8:	4418      	add	r0, r3

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f5aa:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800f5ae:	4439      	add	r1, r7
 800f5b0:	462a      	mov	r2, r5
 800f5b2:	f010 f84e 	bl	801f652 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f5b6:	68e4      	ldr	r4, [r4, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 800f5b8:	2000      	movs	r0, #0
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f5ba:	442f      	add	r7, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f5bc:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f5be:	44a8      	add	r8, r5
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f5c0:	4283      	cmp	r3, r0
 800f5c2:	daea      	bge.n	800f59a <low_level_output+0x32>
        errval = ERR_USE;
 800f5c4:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f5c8:	f8da 3000 	ldr.w	r3, [sl]
 800f5cc:	f241 0214 	movw	r2, #4116	; 0x1014
 800f5d0:	5899      	ldr	r1, [r3, r2]
 800f5d2:	0689      	lsls	r1, r1, #26
 800f5d4:	d505      	bpl.n	800f5e2 <low_level_output+0x7a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f5d6:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f5d8:	f241 0104 	movw	r1, #4100	; 0x1004
 800f5dc:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f5de:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800f5e0:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 800f5e2:	b003      	add	sp, #12
 800f5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f5e8:	4632      	mov	r2, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f5ea:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f5ee:	4418      	add	r0, r3
 800f5f0:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800f5f2:	4490      	add	r8, r2
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f5f4:	4439      	add	r1, r7
 800f5f6:	f010 f82c 	bl	801f652 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800f5fa:	f8db b000 	ldr.w	fp, [fp]
 800f5fe:	9b01      	ldr	r3, [sp, #4]
 800f600:	f1bb 0f00 	cmp.w	fp, #0
 800f604:	d005      	beq.n	800f612 <low_level_output+0xaa>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f606:	6822      	ldr	r2, [r4, #0]
 800f608:	4630      	mov	r0, r6
 800f60a:	2a00      	cmp	r2, #0
 800f60c:	dabe      	bge.n	800f58c <low_level_output+0x24>
 800f60e:	e7d9      	b.n	800f5c4 <low_level_output+0x5c>
  uint32_t framelength = 0;
 800f610:	4688      	mov	r8, r1
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f612:	4641      	mov	r1, r8
 800f614:	4802      	ldr	r0, [pc, #8]	; (800f620 <low_level_output+0xb8>)
 800f616:	f7f7 fee9 	bl	80073ec <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800f61a:	2000      	movs	r0, #0
 800f61c:	e7d4      	b.n	800f5c8 <low_level_output+0x60>
 800f61e:	bf00      	nop
 800f620:	20025218 	.word	0x20025218

0800f624 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800f624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f628:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800f738 <ethernetif_input+0x114>
 800f62c:	b083      	sub	sp, #12
 800f62e:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f630:	4b3f      	ldr	r3, [pc, #252]	; (800f730 <ethernetif_input+0x10c>)
 800f632:	f04f 31ff 	mov.w	r1, #4294967295
 800f636:	6818      	ldr	r0, [r3, #0]
 800f638:	f001 f9a4 	bl	8010984 <osSemaphoreWait>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d1f7      	bne.n	800f630 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800f640:	483c      	ldr	r0, [pc, #240]	; (800f734 <ethernetif_input+0x110>)
 800f642:	f00f fbf7 	bl	801ee34 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800f646:	483c      	ldr	r0, [pc, #240]	; (800f738 <ethernetif_input+0x114>)
 800f648:	f7f7 ff4e 	bl	80074e8 <HAL_ETH_GetReceivedFrame_IT>
 800f64c:	4604      	mov	r4, r0
 800f64e:	2800      	cmp	r0, #0
 800f650:	d169      	bne.n	800f726 <ethernetif_input+0x102>
  len = heth.RxFrameInfos.length;
 800f652:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
  if (len > 0)
 800f656:	bb71      	cbnz	r1, 800f6b6 <ethernetif_input+0x92>
  struct pbuf *p = NULL;
 800f658:	2300      	movs	r3, #0
 800f65a:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f65c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f660:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f664:	b140      	cbz	r0, 800f678 <ethernetif_input+0x54>
 800f666:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f668:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f66a:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f66c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f670:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f672:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f674:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f676:	d1f7      	bne.n	800f668 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 800f678:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800f67a:	f8da 3000 	ldr.w	r3, [sl]
 800f67e:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 800f682:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800f686:	5899      	ldr	r1, [r3, r2]
 800f688:	0609      	lsls	r1, r1, #24
 800f68a:	d505      	bpl.n	800f698 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f68c:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 800f68e:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f692:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800f694:	2200      	movs	r2, #0
 800f696:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 800f698:	9800      	ldr	r0, [sp, #0]
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d043      	beq.n	800f726 <ethernetif_input+0x102>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f69e:	9901      	ldr	r1, [sp, #4]
 800f6a0:	690b      	ldr	r3, [r1, #16]
 800f6a2:	4798      	blx	r3
 800f6a4:	b918      	cbnz	r0, 800f6ae <ethernetif_input+0x8a>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 800f6a6:	4823      	ldr	r0, [pc, #140]	; (800f734 <ethernetif_input+0x110>)
 800f6a8:	f00f fbca 	bl	801ee40 <sys_mutex_unlock>
 800f6ac:	e7c8      	b.n	800f640 <ethernetif_input+0x1c>
            pbuf_free(p);
 800f6ae:	9800      	ldr	r0, [sp, #0]
 800f6b0:	f006 fcd4 	bl	801605c <pbuf_free>
 800f6b4:	e7f7      	b.n	800f6a6 <ethernetif_input+0x82>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f6b6:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f6ba:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f6be:	f006 fd3b 	bl	8016138 <pbuf_alloc>
  if (p != NULL)
 800f6c2:	9000      	str	r0, [sp, #0]
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d0c7      	beq.n	800f658 <ethernetif_input+0x34>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f6c8:	46a8      	mov	r8, r5
    bufferoffset = 0;
 800f6ca:	4621      	mov	r1, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f6cc:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 800f6d0:	4683      	mov	fp, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f6d2:	f240 59f4 	movw	r9, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800f6d6:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      payloadoffset = 0;
 800f6da:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f6dc:	1854      	adds	r4, r2, r1
 800f6de:	454c      	cmp	r4, r9
 800f6e0:	d914      	bls.n	800f70c <ethernetif_input+0xe8>
      payloadoffset = 0;
 800f6e2:	4643      	mov	r3, r8
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f6e4:	eba9 0701 	sub.w	r7, r9, r1
 800f6e8:	f8db 0004 	ldr.w	r0, [fp, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f6ec:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f6f0:	4419      	add	r1, r3
 800f6f2:	4428      	add	r0, r5
 800f6f4:	463a      	mov	r2, r7
 800f6f6:	f00f ffac 	bl	801f652 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f6fa:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f6fc:	454c      	cmp	r4, r9
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800f6fe:	443d      	add	r5, r7
        bufferoffset = 0;
 800f700:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800f704:	68b3      	ldr	r3, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f706:	d8ed      	bhi.n	800f6e4 <ethernetif_input+0xc0>
 800f708:	4698      	mov	r8, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f70a:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800f70c:	f8db 0004 	ldr.w	r0, [fp, #4]
 800f710:	4441      	add	r1, r8
 800f712:	4428      	add	r0, r5
 800f714:	f00f ff9d 	bl	801f652 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800f718:	f8db b000 	ldr.w	fp, [fp]
 800f71c:	4621      	mov	r1, r4
 800f71e:	f1bb 0f00 	cmp.w	fp, #0
 800f722:	d1d8      	bne.n	800f6d6 <ethernetif_input+0xb2>
 800f724:	e79a      	b.n	800f65c <ethernetif_input+0x38>
        UNLOCK_TCPIP_CORE();
 800f726:	4803      	ldr	r0, [pc, #12]	; (800f734 <ethernetif_input+0x110>)
 800f728:	f00f fb8a 	bl	801ee40 <sys_mutex_unlock>
 800f72c:	e780      	b.n	800f630 <ethernetif_input+0xc>
 800f72e:	bf00      	nop
 800f730:	200016a0 	.word	0x200016a0
 800f734:	20026a70 	.word	0x20026a70
 800f738:	20025218 	.word	0x20025218

0800f73c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800f73c:	6802      	ldr	r2, [r0, #0]
 800f73e:	4b41      	ldr	r3, [pc, #260]	; (800f844 <HAL_ETH_MspInit+0x108>)
{
 800f740:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800f742:	429a      	cmp	r2, r3
{
 800f744:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f746:	f04f 0400 	mov.w	r4, #0
 800f74a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800f74e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800f752:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800f754:	d001      	beq.n	800f75a <HAL_ETH_MspInit+0x1e>
}
 800f756:	b00d      	add	sp, #52	; 0x34
 800f758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800f75a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f75e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f760:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f762:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800f764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f766:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f768:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 800f76a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800f76e:	631a      	str	r2, [r3, #48]	; 0x30
 800f770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f772:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800f776:	9200      	str	r2, [sp, #0]
 800f778:	9a00      	ldr	r2, [sp, #0]
 800f77a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f77c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f780:	631a      	str	r2, [r3, #48]	; 0x30
 800f782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f784:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800f788:	9201      	str	r2, [sp, #4]
 800f78a:	9a01      	ldr	r2, [sp, #4]
 800f78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f78e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800f792:	631a      	str	r2, [r3, #48]	; 0x30
 800f794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f796:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800f79a:	9202      	str	r2, [sp, #8]
 800f79c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f79e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7a0:	f042 0204 	orr.w	r2, r2, #4
 800f7a4:	631a      	str	r2, [r3, #48]	; 0x30
 800f7a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7a8:	f002 0204 	and.w	r2, r2, #4
 800f7ac:	9203      	str	r2, [sp, #12]
 800f7ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7b2:	f042 0201 	orr.w	r2, r2, #1
 800f7b6:	631a      	str	r2, [r3, #48]	; 0x30
 800f7b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ba:	f002 0201 	and.w	r2, r2, #1
 800f7be:	9204      	str	r2, [sp, #16]
 800f7c0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f7c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7c4:	433a      	orrs	r2, r7
 800f7c6:	631a      	str	r2, [r3, #48]	; 0x30
 800f7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ca:	403a      	ands	r2, r7
 800f7cc:	9205      	str	r2, [sp, #20]
 800f7ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f7d6:	631a      	str	r2, [r3, #48]	; 0x30
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f7da:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7e0:	4819      	ldr	r0, [pc, #100]	; (800f848 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7e2:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f7e4:	9306      	str	r3, [sp, #24]
 800f7e6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f7e8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7ec:	f7f8 fbc6 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f7f0:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7f2:	a907      	add	r1, sp, #28
 800f7f4:	4815      	ldr	r0, [pc, #84]	; (800f84c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f7f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7fa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f7fc:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f800:	f7f8 fbbc 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800f804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800f808:	a907      	add	r1, sp, #28
 800f80a:	4811      	ldr	r0, [pc, #68]	; (800f850 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800f80c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f80e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f810:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f812:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800f816:	f7f8 fbb1 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800f81a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f81e:	a907      	add	r1, sp, #28
 800f820:	480c      	ldr	r0, [pc, #48]	; (800f854 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800f822:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f824:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f826:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f828:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f82c:	f7f8 fba6 	bl	8007f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 800f830:	4622      	mov	r2, r4
 800f832:	2106      	movs	r1, #6
 800f834:	203d      	movs	r0, #61	; 0x3d
 800f836:	f7f6 fa0d 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f83a:	203d      	movs	r0, #61	; 0x3d
 800f83c:	f7f6 fa50 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 800f840:	b00d      	add	sp, #52	; 0x34
 800f842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f844:	40028000 	.word	0x40028000
 800f848:	40020800 	.word	0x40020800
 800f84c:	40020000 	.word	0x40020000
 800f850:	40020400 	.word	0x40020400
 800f854:	40021800 	.word	0x40021800

0800f858 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800f858:	4b01      	ldr	r3, [pc, #4]	; (800f860 <HAL_ETH_RxCpltCallback+0x8>)
 800f85a:	6818      	ldr	r0, [r3, #0]
 800f85c:	f001 b8be 	b.w	80109dc <osSemaphoreRelease>
 800f860:	200016a0 	.word	0x200016a0

0800f864 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f868:	4604      	mov	r4, r0
{
 800f86a:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f000 8099 	beq.w	800f9a4 <ethernetif_init+0x140>
  uint32_t regvalue = 0;
 800f872:	f04f 0800 	mov.w	r8, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f876:	f247 4073 	movw	r0, #29811	; 0x7473
  MACAddr[0] = 0x00;
 800f87a:	a90c      	add	r1, sp, #48	; 0x30
 800f87c:	4b4d      	ldr	r3, [pc, #308]	; (800f9b4 <ethernetif_init+0x150>)
  heth.Instance = ETH;
 800f87e:	4d4e      	ldr	r5, [pc, #312]	; (800f9b8 <ethernetif_init+0x154>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f880:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  heth.Instance = ETH;
 800f884:	4a4d      	ldr	r2, [pc, #308]	; (800f9bc <ethernetif_init+0x158>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800f886:	f8df e168 	ldr.w	lr, [pc, #360]	; 800f9f0 <ethernetif_init+0x18c>
 800f88a:	4f4d      	ldr	r7, [pc, #308]	; (800f9c0 <ethernetif_init+0x15c>)
  netif->name[0] = IFNAME0;
 800f88c:	86e0      	strh	r0, [r4, #54]	; 0x36
  uint32_t regvalue = 0;
 800f88e:	f8cd 8000 	str.w	r8, [sp]
  MACAddr[0] = 0x00;
 800f892:	f841 3d2c 	str.w	r3, [r1, #-44]!
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800f896:	683e      	ldr	r6, [r7, #0]
 800f898:	f8de 3000 	ldr.w	r3, [lr]
 800f89c:	4849      	ldr	r0, [pc, #292]	; (800f9c4 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 800f89e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f8a0:	2201      	movs	r2, #1
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800f8a2:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800f8a4:	f8a5 8010 	strh.w	r8, [r5, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f8a8:	606a      	str	r2, [r5, #4]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800f8aa:	6806      	ldr	r6, [r0, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f8ac:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800f9f4 <ethernetif_init+0x190>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 800f8b0:	4073      	eors	r3, r6
 800f8b2:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800f8b6:	683f      	ldr	r7, [r7, #0]
 800f8b8:	f8de 3000 	ldr.w	r3, [lr]
 800f8bc:	f8d0 c000 	ldr.w	ip, [r0]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f8c0:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800f8c2:	407b      	eors	r3, r7

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f8c4:	4f40      	ldr	r7, [pc, #256]	; (800f9c8 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 800f8c6:	f8c4 8014 	str.w	r8, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800f8ca:	ea83 030c 	eor.w	r3, r3, ip
  netif->linkoutput = low_level_output;
 800f8ce:	61a7      	str	r7, [r4, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800f8d0:	6169      	str	r1, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 800f8d2:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f8d6:	f8c5 9020 	str.w	r9, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 800f8da:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f8de:	f7f7 ff23 	bl	8007728 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800f8e2:	b928      	cbnz	r0, 800f8f0 <ethernetif_init+0x8c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f8e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f8e8:	f043 0304 	orr.w	r3, r3, #4
 800f8ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	4a36      	ldr	r2, [pc, #216]	; (800f9cc <ethernetif_init+0x168>)
 800f8f4:	4936      	ldr	r1, [pc, #216]	; (800f9d0 <ethernetif_init+0x16c>)
  osSemaphoreDef(SEM);
 800f8f6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800f8f8:	482f      	ldr	r0, [pc, #188]	; (800f9b8 <ethernetif_init+0x154>)
 800f8fa:	f7f7 fceb 	bl	80072d4 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800f8fe:	2304      	movs	r3, #4
 800f900:	4a34      	ldr	r2, [pc, #208]	; (800f9d4 <ethernetif_init+0x170>)
 800f902:	4935      	ldr	r1, [pc, #212]	; (800f9d8 <ethernetif_init+0x174>)
 800f904:	482c      	ldr	r0, [pc, #176]	; (800f9b8 <ethernetif_init+0x154>)
 800f906:	f7f7 fd2f 	bl	8007368 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f90a:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f90c:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f90e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 800f912:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f916:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f918:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f91c:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f920:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f922:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f924:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f928:	785e      	ldrb	r6, [r3, #1]
 800f92a:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f92e:	789e      	ldrb	r6, [r3, #2]
 800f930:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f934:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 800f936:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f938:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f93c:	791e      	ldrb	r6, [r3, #4]
 800f93e:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f942:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f944:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f948:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 800f94c:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f94e:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 800f950:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f952:	f000 ffed 	bl	8010930 <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f956:	4e21      	ldr	r6, [pc, #132]	; (800f9dc <ethernetif_init+0x178>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f958:	4b21      	ldr	r3, [pc, #132]	; (800f9e0 <ethernetif_init+0x17c>)
 800f95a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f95c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f95e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f960:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f964:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800f968:	4621      	mov	r1, r4
 800f96a:	a805      	add	r0, sp, #20
 800f96c:	f000 ff34 	bl	80107d8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800f970:	4811      	ldr	r0, [pc, #68]	; (800f9b8 <ethernetif_init+0x154>)
 800f972:	f7f8 f82f 	bl	80079d4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800f976:	466a      	mov	r2, sp
 800f978:	211d      	movs	r1, #29
 800f97a:	480f      	ldr	r0, [pc, #60]	; (800f9b8 <ethernetif_init+0x154>)
 800f97c:	f7f7 fe44 	bl	8007608 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800f980:	9b00      	ldr	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f982:	211d      	movs	r1, #29
 800f984:	480c      	ldr	r0, [pc, #48]	; (800f9b8 <ethernetif_init+0x154>)
  regvalue |= (PHY_ISFR_INT4);
 800f986:	f043 030b 	orr.w	r3, r3, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f98a:	461a      	mov	r2, r3
  regvalue |= (PHY_ISFR_INT4);
 800f98c:	9300      	str	r3, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800f98e:	f7f7 fe83 	bl	8007698 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800f992:	466a      	mov	r2, sp
 800f994:	211d      	movs	r1, #29
 800f996:	4808      	ldr	r0, [pc, #32]	; (800f9b8 <ethernetif_init+0x154>)
 800f998:	f7f7 fe36 	bl	8007608 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800f99c:	4638      	mov	r0, r7
 800f99e:	b00d      	add	sp, #52	; 0x34
 800f9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f9a4:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <ethernetif_init+0x180>)
 800f9a6:	f240 2237 	movw	r2, #567	; 0x237
 800f9aa:	490f      	ldr	r1, [pc, #60]	; (800f9e8 <ethernetif_init+0x184>)
 800f9ac:	480f      	ldr	r0, [pc, #60]	; (800f9ec <ethernetif_init+0x188>)
 800f9ae:	f010 fdf3 	bl	8020598 <iprintf>
 800f9b2:	e75e      	b.n	800f872 <ethernetif_init+0xe>
 800f9b4:	00e18000 	.word	0x00e18000
 800f9b8:	20025218 	.word	0x20025218
 800f9bc:	40028000 	.word	0x40028000
 800f9c0:	1ff0f424 	.word	0x1ff0f424
 800f9c4:	1ff0f428 	.word	0x1ff0f428
 800f9c8:	0800f569 	.word	0x0800f569
 800f9cc:	20025260 	.word	0x20025260
 800f9d0:	20023948 	.word	0x20023948
 800f9d4:	200239c8 	.word	0x200239c8
 800f9d8:	20025198 	.word	0x20025198
 800f9dc:	080244a0 	.word	0x080244a0
 800f9e0:	200016a0 	.word	0x200016a0
 800f9e4:	08026518 	.word	0x08026518
 800f9e8:	08026534 	.word	0x08026534
 800f9ec:	08026544 	.word	0x08026544
 800f9f0:	1ff0f420 	.word	0x1ff0f420
 800f9f4:	0801d7fd 	.word	0x0801d7fd

0800f9f8 <sys_now>:
 800f9f8:	f7f5 bccc 	b.w	8005394 <HAL_GetTick>

0800f9fc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	b082      	sub	sp, #8
  uint32_t regvalue = 0;
 800fa00:	2300      	movs	r3, #0
{
 800fa02:	4606      	mov	r6, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800fa04:	4d11      	ldr	r5, [pc, #68]	; (800fa4c <ethernetif_set_link+0x50>)
  uint32_t regvalue = 0;
 800fa06:	ac02      	add	r4, sp, #8
 800fa08:	f844 3d04 	str.w	r3, [r4, #-4]!
 800fa0c:	e005      	b.n	800fa1a <ethernetif_set_link+0x1e>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800fa0e:	b9cb      	cbnz	r3, 800fa44 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800fa10:	0753      	lsls	r3, r2, #29
 800fa12:	d414      	bmi.n	800fa3e <ethernetif_set_link+0x42>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800fa14:	20c8      	movs	r0, #200	; 0xc8
 800fa16:	f000 ff09 	bl	801082c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7f7 fdf2 	bl	8007608 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800fa24:	6830      	ldr	r0, [r6, #0]
    regvalue &= PHY_LINKED_STATUS;
 800fa26:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800fa28:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 800fa2c:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800fa30:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 800fa32:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800fa34:	d5eb      	bpl.n	800fa0e <ethernetif_set_link+0x12>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800fa36:	0752      	lsls	r2, r2, #29
 800fa38:	d5ec      	bpl.n	800fa14 <ethernetif_set_link+0x18>
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1ea      	bne.n	800fa14 <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 800fa3e:	f006 fa09 	bl	8015e54 <netif_set_link_down>
 800fa42:	e7e7      	b.n	800fa14 <ethernetif_set_link+0x18>
      netif_set_link_up(link_arg->netif);
 800fa44:	f006 f9e0 	bl	8015e08 <netif_set_link_up>
 800fa48:	e7e4      	b.n	800fa14 <ethernetif_set_link+0x18>
 800fa4a:	bf00      	nop
 800fa4c:	20025218 	.word	0x20025218

0800fa50 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop

0800fa54 <ethernetif_update_config>:
{
 800fa54:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 800fa56:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 800fa5a:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 800fa5c:	2100      	movs	r1, #0
{
 800fa5e:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 800fa60:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 800fa62:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 800fa64:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 800fa66:	d539      	bpl.n	800fadc <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800fa68:	4c32      	ldr	r4, [pc, #200]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fa6a:	6863      	ldr	r3, [r4, #4]
 800fa6c:	b9e3      	cbnz	r3, 800faa8 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800fa6e:	68a3      	ldr	r3, [r4, #8]
 800fa70:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800fa74:	d141      	bne.n	800fafa <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800fa76:	68e3      	ldr	r3, [r4, #12]
 800fa78:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800fa7c:	d136      	bne.n	800faec <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800fa7e:	68a2      	ldr	r2, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800fa80:	08db      	lsrs	r3, r3, #3
 800fa82:	2100      	movs	r1, #0
 800fa84:	482b      	ldr	r0, [pc, #172]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fa86:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800fa8a:	b292      	uxth	r2, r2
 800fa8c:	f7f7 fe04 	bl	8007698 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800fa90:	2100      	movs	r1, #0
 800fa92:	4828      	ldr	r0, [pc, #160]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fa94:	f7f8 f81e 	bl	8007ad4 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 800fa98:	4826      	ldr	r0, [pc, #152]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fa9a:	f7f7 ff9b 	bl	80079d4 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f7ff ffd6 	bl	800fa50 <ethernetif_notify_conn_changed>
}
 800faa4:	b002      	add	sp, #8
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800faa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800faac:	4620      	mov	r0, r4
 800faae:	f7f7 fdf3 	bl	8007698 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800fab2:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 800fab4:	f7f5 fc6e 	bl	8005394 <HAL_GetTick>
 800fab8:	9000      	str	r0, [sp, #0]
 800faba:	e002      	b.n	800fac2 <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800fabc:	9b01      	ldr	r3, [sp, #4]
 800fabe:	069a      	lsls	r2, r3, #26
 800fac0:	d425      	bmi.n	800fb0e <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800fac2:	aa01      	add	r2, sp, #4
 800fac4:	2101      	movs	r1, #1
 800fac6:	4630      	mov	r0, r6
 800fac8:	f7f7 fd9e 	bl	8007608 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 800facc:	f7f5 fc62 	bl	8005394 <HAL_GetTick>
 800fad0:	9b00      	ldr	r3, [sp, #0]
 800fad2:	1ac0      	subs	r0, r0, r3
 800fad4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fad8:	d9f0      	bls.n	800fabc <ethernetif_update_config+0x68>
    error :
 800fada:	e7c8      	b.n	800fa6e <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 800fadc:	4815      	ldr	r0, [pc, #84]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fade:	f7f7 ffb9 	bl	8007a54 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 800fae2:	4628      	mov	r0, r5
 800fae4:	f7ff ffb4 	bl	800fa50 <ethernetif_notify_conn_changed>
}
 800fae8:	b002      	add	sp, #8
 800faea:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800faec:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800faf0:	4811      	ldr	r0, [pc, #68]	; (800fb38 <ethernetif_update_config+0xe4>)
 800faf2:	f7f3 f953 	bl	8002d9c <assert_failed>
 800faf6:	68e3      	ldr	r3, [r4, #12]
 800faf8:	e7c1      	b.n	800fa7e <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800fafa:	f240 21df 	movw	r1, #735	; 0x2df
 800fafe:	480e      	ldr	r0, [pc, #56]	; (800fb38 <ethernetif_update_config+0xe4>)
 800fb00:	f7f3 f94c 	bl	8002d9c <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800fb04:	68e3      	ldr	r3, [r4, #12]
 800fb06:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800fb0a:	d0b8      	beq.n	800fa7e <ethernetif_update_config+0x2a>
 800fb0c:	e7ee      	b.n	800faec <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800fb0e:	aa01      	add	r2, sp, #4
 800fb10:	211f      	movs	r1, #31
 800fb12:	4808      	ldr	r0, [pc, #32]	; (800fb34 <ethernetif_update_config+0xe0>)
 800fb14:	f7f7 fd78 	bl	8007608 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800fb18:	9b01      	ldr	r3, [sp, #4]
 800fb1a:	f013 0210 	ands.w	r2, r3, #16
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800fb1e:	bf18      	it	ne
 800fb20:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 800fb24:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 800fb26:	bf4c      	ite	mi
 800fb28:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 800fb2a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800fb2e:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 800fb30:	60a3      	str	r3, [r4, #8]
 800fb32:	e7ad      	b.n	800fa90 <ethernetif_update_config+0x3c>
 800fb34:	20025218 	.word	0x20025218
 800fb38:	08026518 	.word	0x08026518

0800fb3c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb3c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800fb40:	b183      	cbz	r3, 800fb64 <USBD_CDC_EP0_RxReady+0x28>
{
 800fb42:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb44:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb48:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800fb4c:	28ff      	cmp	r0, #255	; 0xff
 800fb4e:	d007      	beq.n	800fb60 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	4621      	mov	r1, r4
 800fb54:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800fb58:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800fb5a:	23ff      	movs	r3, #255	; 0xff
 800fb5c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800fb60:	2000      	movs	r0, #0
 800fb62:	bd10      	pop	{r4, pc}
 800fb64:	2000      	movs	r0, #0
 800fb66:	4770      	bx	lr

0800fb68 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fb68:	2343      	movs	r3, #67	; 0x43
 800fb6a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800fb6c:	4800      	ldr	r0, [pc, #0]	; (800fb70 <USBD_CDC_GetFSCfgDesc+0x8>)
 800fb6e:	4770      	bx	lr
 800fb70:	200002fc 	.word	0x200002fc

0800fb74 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fb74:	2343      	movs	r3, #67	; 0x43
 800fb76:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800fb78:	4800      	ldr	r0, [pc, #0]	; (800fb7c <USBD_CDC_GetHSCfgDesc+0x8>)
 800fb7a:	4770      	bx	lr
 800fb7c:	20000340 	.word	0x20000340

0800fb80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fb80:	2343      	movs	r3, #67	; 0x43
 800fb82:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800fb84:	4800      	ldr	r0, [pc, #0]	; (800fb88 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800fb86:	4770      	bx	lr
 800fb88:	20000390 	.word	0x20000390

0800fb8c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fb8c:	230a      	movs	r3, #10
 800fb8e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800fb90:	4800      	ldr	r0, [pc, #0]	; (800fb94 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800fb92:	4770      	bx	lr
 800fb94:	20000384 	.word	0x20000384

0800fb98 <USBD_CDC_DataOut>:
{
 800fb98:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb9a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800fb9e:	b174      	cbz	r4, 800fbbe <USBD_CDC_DataOut+0x26>
 800fba0:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fba2:	f00f fbb1 	bl	801f308 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fba6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800fbaa:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fbae:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800fbb8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800fbba:	2000      	movs	r0, #0
}
 800fbbc:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800fbbe:	2003      	movs	r0, #3
}
 800fbc0:	bd38      	pop	{r3, r4, r5, pc}
 800fbc2:	bf00      	nop

0800fbc4 <USBD_CDC_DataIn>:
{
 800fbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800fbc6:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800fbca:	b1a7      	cbz	r7, 800fbf6 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fbcc:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	460a      	mov	r2, r1
 800fbd4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800fbd8:	69ae      	ldr	r6, [r5, #24]
 800fbda:	b976      	cbnz	r6, 800fbfa <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800fbe0:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbe2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800fbe6:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800fbea:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800fbec:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbf0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800fbf2:	4620      	mov	r0, r4
}
 800fbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800fbf6:	2003      	movs	r0, #3
}
 800fbf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800fbfa:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800fbfe:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800fc02:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800fc06:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800fc0a:	fbb6 f4fc 	udiv	r4, r6, ip
 800fc0e:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fc12:	2c00      	cmp	r4, #0
 800fc14:	d1e2      	bne.n	800fbdc <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800fc16:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fc18:	4623      	mov	r3, r4
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	f00f fb58 	bl	801f2d0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800fc20:	4620      	mov	r0, r4
}
 800fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc24 <USBD_CDC_Setup>:
{
 800fc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc28:	780b      	ldrb	r3, [r1, #0]
{
 800fc2a:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800fc2c:	2700      	movs	r7, #0
{
 800fc2e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc30:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800fc34:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc36:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800fc3a:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800fc3e:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc42:	d01c      	beq.n	800fc7e <USBD_CDC_Setup+0x5a>
 800fc44:	2a20      	cmp	r2, #32
 800fc46:	d112      	bne.n	800fc6e <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 800fc48:	88cd      	ldrh	r5, [r1, #6]
 800fc4a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800fc4e:	2d00      	cmp	r5, #0
 800fc50:	d147      	bne.n	800fce2 <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fc52:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800fc56:	462a      	mov	r2, r5
 800fc58:	4660      	mov	r0, ip
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800fc5e:	4628      	mov	r0, r5
}
 800fc60:	b002      	add	sp, #8
 800fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d049      	beq.n	800fd02 <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 800fc6e:	4630      	mov	r0, r6
 800fc70:	4621      	mov	r1, r4
 800fc72:	f000 fd05 	bl	8010680 <USBD_CtlError>
      ret = USBD_FAIL;
 800fc76:	2003      	movs	r0, #3
}
 800fc78:	b002      	add	sp, #8
 800fc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800fc7e:	784b      	ldrb	r3, [r1, #1]
 800fc80:	2b0b      	cmp	r3, #11
 800fc82:	d8f4      	bhi.n	800fc6e <USBD_CDC_Setup+0x4a>
 800fc84:	a201      	add	r2, pc, #4	; (adr r2, 800fc8c <USBD_CDC_Setup+0x68>)
 800fc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8a:	bf00      	nop
 800fc8c:	0800fc67 	.word	0x0800fc67
 800fc90:	0800fcc5 	.word	0x0800fcc5
 800fc94:	0800fc6f 	.word	0x0800fc6f
 800fc98:	0800fc6f 	.word	0x0800fc6f
 800fc9c:	0800fc6f 	.word	0x0800fc6f
 800fca0:	0800fc6f 	.word	0x0800fc6f
 800fca4:	0800fc6f 	.word	0x0800fc6f
 800fca8:	0800fc6f 	.word	0x0800fc6f
 800fcac:	0800fc6f 	.word	0x0800fc6f
 800fcb0:	0800fc6f 	.word	0x0800fc6f
 800fcb4:	0800fccd 	.word	0x0800fccd
 800fcb8:	0800fcbd 	.word	0x0800fcbd
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fcbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fcc0:	2b03      	cmp	r3, #3
 800fcc2:	d1d4      	bne.n	800fc6e <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 800fcc4:	2000      	movs	r0, #0
}
 800fcc6:	b002      	add	sp, #8
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fccc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fcd0:	2b03      	cmp	r3, #3
 800fcd2:	d1cc      	bne.n	800fc6e <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	f10d 0105 	add.w	r1, sp, #5
 800fcda:	f000 fd03 	bl	80106e4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fcde:	2000      	movs	r0, #0
 800fce0:	e7ca      	b.n	800fc78 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 800fce2:	061b      	lsls	r3, r3, #24
 800fce4:	d514      	bpl.n	800fd10 <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fce6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800fcea:	462a      	mov	r2, r5
 800fcec:	4660      	mov	r0, ip
 800fcee:	4641      	mov	r1, r8
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fcf4:	88e2      	ldrh	r2, [r4, #6]
 800fcf6:	4641      	mov	r1, r8
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f000 fcf3 	bl	80106e4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fcfe:	4638      	mov	r0, r7
 800fd00:	e7ba      	b.n	800fc78 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fd02:	2202      	movs	r2, #2
 800fd04:	f10d 0106 	add.w	r1, sp, #6
 800fd08:	f000 fcec 	bl	80106e4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	e7b3      	b.n	800fc78 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800fd10:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fd14:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 800fd16:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fd1a:	4641      	mov	r1, r8
 800fd1c:	f000 fcf8 	bl	8010710 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800fd20:	4638      	mov	r0, r7
 800fd22:	e7a9      	b.n	800fc78 <USBD_CDC_Setup+0x54>

0800fd24 <USBD_CDC_DeInit>:
{
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fd28:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fd2a:	2181      	movs	r1, #129	; 0x81
 800fd2c:	f00f fa84 	bl	801f238 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fd30:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fd32:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fd34:	4620      	mov	r0, r4
 800fd36:	f00f fa7f 	bl	801f238 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fd3a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fd3e:	4620      	mov	r0, r4
 800fd40:	2182      	movs	r1, #130	; 0x82
 800fd42:	f00f fa79 	bl	801f238 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800fd46:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fd4a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800fd4c:	b14b      	cbz	r3, 800fd62 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fd4e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fd56:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800fd5a:	f00f fc51 	bl	801f600 <free>
    pdev->pClassData = NULL;
 800fd5e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800fd62:	2000      	movs	r0, #0
 800fd64:	bd38      	pop	{r3, r4, r5, pc}
 800fd66:	bf00      	nop

0800fd68 <USBD_CDC_Init>:
{
 800fd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fd6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fd72:	f00f fc3d 	bl	801f5f0 <malloc>
  if (hcdc == NULL)
 800fd76:	4605      	mov	r5, r0
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	d04a      	beq.n	800fe12 <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd7c:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd7e:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800fd80:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd84:	b393      	cbz	r3, 800fdec <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd86:	2340      	movs	r3, #64	; 0x40
 800fd88:	2181      	movs	r1, #129	; 0x81
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f00f fa41 	bl	801f214 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd92:	4631      	mov	r1, r6
 800fd94:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd96:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd98:	2202      	movs	r2, #2
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f00f fa3a 	bl	801f214 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fda0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fda2:	2203      	movs	r2, #3
 800fda4:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fda6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdaa:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fdac:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdb0:	2308      	movs	r3, #8
 800fdb2:	f00f fa2f 	bl	801f214 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fdb6:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fdb8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800fdbc:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fdbe:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdc6:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800fdca:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fdce:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 800fdd0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdda:	f1b8 0f00 	cmp.w	r8, #0
 800fdde:	d011      	beq.n	800fe04 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fde0:	2340      	movs	r3, #64	; 0x40
 800fde2:	f00f fa83 	bl	801f2ec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800fde6:	4630      	mov	r0, r6
}
 800fde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fdec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdf0:	2181      	movs	r1, #129	; 0x81
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f00f fa0d 	bl	801f214 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fdfa:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe02:	e7c9      	b.n	800fd98 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe08:	f00f fa70 	bl	801f2ec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800fe0c:	4640      	mov	r0, r8
}
 800fe0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 800fe12:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fe16:	2002      	movs	r0, #2
}
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe1c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800fe1c:	b119      	cbz	r1, 800fe26 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800fe1e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fe22:	2000      	movs	r0, #0
 800fe24:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800fe26:	2003      	movs	r0, #3
}
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop

0800fe2c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fe2c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800fe30:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800fe32:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fe36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800fe3a:	4770      	bx	lr

0800fe3c <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800fe3c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800fe40:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800fe42:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800fe46:	4770      	bx	lr

0800fe48 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fe48:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800fe4c:	b18a      	cbz	r2, 800fe72 <USBD_CDC_ReceivePacket+0x2a>
 800fe4e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800fe52:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe54:	7c04      	ldrb	r4, [r0, #16]
 800fe56:	b12c      	cbz	r4, 800fe64 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe58:	2340      	movs	r3, #64	; 0x40
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	f00f fa46 	bl	801f2ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe60:	2000      	movs	r0, #0
}
 800fe62:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe68:	2101      	movs	r1, #1
 800fe6a:	f00f fa3f 	bl	801f2ec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800fe6e:	4620      	mov	r0, r4
}
 800fe70:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800fe72:	2003      	movs	r0, #3
}
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop

0800fe78 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fe78:	4603      	mov	r3, r0
 800fe7a:	b1a8      	cbz	r0, 800fea8 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800fe7c:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800fe80:	b110      	cbz	r0, 800fe88 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800fe82:	2000      	movs	r0, #0
 800fe84:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800fe88:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800fe8c:	b110      	cbz	r0, 800fe94 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fe94:	b109      	cbz	r1, 800fe9a <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 800fe96:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe9a:	2101      	movs	r1, #1
  pdev->id = id;
 800fe9c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fe9e:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fea0:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 800fea4:	f00f b976 	b.w	801f194 <USBD_LL_Init>

  return ret;
}
 800fea8:	2003      	movs	r0, #3
 800feaa:	4770      	bx	lr

0800feac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800feac:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800feae:	2400      	movs	r4, #0
{
 800feb0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800feb2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800feb6:	b159      	cbz	r1, 800fed0 <USBD_RegisterClass+0x24>
 800feb8:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800feba:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800febe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800fec0:	f10d 0006 	add.w	r0, sp, #6
 800fec4:	4798      	blx	r3
 800fec6:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 800feca:	4620      	mov	r0, r4
 800fecc:	b003      	add	sp, #12
 800fece:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800fed0:	2403      	movs	r4, #3
 800fed2:	e7fa      	b.n	800feca <USBD_RegisterClass+0x1e>

0800fed4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fed4:	f00f b990 	b.w	801f1f8 <USBD_LL_Start>

0800fed8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800fed8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fedc:	b10b      	cbz	r3, 800fee2 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4718      	bx	r3
  }

  return ret;
}
 800fee2:	2003      	movs	r0, #3
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop

0800fee8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fee8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800feea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800feee:	b10b      	cbz	r3, 800fef4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	4798      	blx	r3
  }

  return USBD_OK;
}
 800fef4:	2000      	movs	r0, #0
 800fef6:	bd08      	pop	{r3, pc}

0800fef8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fef8:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fefa:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800fefe:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ff00:	4628      	mov	r0, r5
 800ff02:	f000 fba9 	bl	8010658 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800ff06:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800ff0a:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800ff0c:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 800ff10:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800ff14:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800ff18:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800ff1a:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800ff1e:	d015      	beq.n	800ff4c <USBD_LL_SetupStage+0x54>
 800ff20:	d30e      	bcc.n	800ff40 <USBD_LL_SetupStage+0x48>
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d105      	bne.n	800ff32 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff26:	4629      	mov	r1, r5
 800ff28:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800ff2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff2e:	f000 baf5 	b.w	801051c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff32:	4620      	mov	r0, r4
 800ff34:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800ff38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff3c:	f00f b98a 	b.w	801f254 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ff40:	4629      	mov	r1, r5
 800ff42:	4620      	mov	r0, r4
}
 800ff44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ff48:	f000 b8fe 	b.w	8010148 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4620      	mov	r0, r4
}
 800ff50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff54:	f000 baaa 	b.w	80104ac <USBD_StdItfReq>

0800ff58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff58:	b570      	push	{r4, r5, r6, lr}
 800ff5a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ff5c:	b931      	cbnz	r1, 800ff6c <USBD_LL_DataOutStage+0x14>
 800ff5e:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff60:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800ff64:	2903      	cmp	r1, #3
 800ff66:	d00c      	beq.n	800ff82 <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800ff68:	2000      	movs	r0, #0
}
 800ff6a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800ff6c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ff70:	6992      	ldr	r2, [r2, #24]
 800ff72:	b1da      	cbz	r2, 800ffac <USBD_LL_DataOutStage+0x54>
 800ff74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d117      	bne.n	800ffac <USBD_LL_DataOutStage+0x54>
}
 800ff7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ff80:	4710      	bx	r2
 800ff82:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 800ff84:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800ff88:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d80f      	bhi.n	800ffb0 <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ff90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ff94:	691b      	ldr	r3, [r3, #16]
 800ff96:	b123      	cbz	r3, 800ffa2 <USBD_LL_DataOutStage+0x4a>
 800ff98:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ff9c:	2a03      	cmp	r2, #3
 800ff9e:	d100      	bne.n	800ffa2 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 800ffa0:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f000 fbcc 	bl	8010740 <USBD_CtlSendStatus>
  return USBD_OK;
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	e7de      	b.n	800ff6a <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 800ffac:	2003      	movs	r0, #3
}
 800ffae:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800ffb0:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ffb2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800ffb4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ffb8:	bf28      	it	cs
 800ffba:	461a      	movcs	r2, r3
 800ffbc:	f000 fbb8 	bl	8010730 <USBD_CtlContinueRx>
  return USBD_OK;
 800ffc0:	4628      	mov	r0, r5
}
 800ffc2:	bd70      	pop	{r4, r5, r6, pc}

0800ffc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ffca:	b951      	cbnz	r1, 800ffe2 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ffcc:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 800ffd0:	2d02      	cmp	r5, #2
 800ffd2:	d016      	beq.n	8010002 <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ffd4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800ffd8:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d00d      	beq.n	800fffa <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800ffde:	b002      	add	sp, #8
 800ffe0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800ffe2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ffe6:	695b      	ldr	r3, [r3, #20]
 800ffe8:	b33b      	cbz	r3, 801003a <USBD_LL_DataInStage+0x76>
 800ffea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ffee:	2a03      	cmp	r2, #3
 800fff0:	d123      	bne.n	801003a <USBD_LL_DataInStage+0x76>
}
 800fff2:	b002      	add	sp, #8
 800fff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fff8:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 800fffa:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 800fffe:	b002      	add	sp, #8
 8010000:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8010002:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 8010006:	42b5      	cmp	r5, r6
 8010008:	d81a      	bhi.n	8010040 <USBD_LL_DataInStage+0x7c>
        if ((pep->maxpacket == pep->rem_length) &&
 801000a:	d027      	beq.n	801005c <USBD_LL_DataInStage+0x98>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801000c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	b12b      	cbz	r3, 8010020 <USBD_LL_DataInStage+0x5c>
 8010014:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8010018:	2a03      	cmp	r2, #3
 801001a:	d101      	bne.n	8010020 <USBD_LL_DataInStage+0x5c>
            pdev->pClass->EP0_TxSent(pdev);
 801001c:	4620      	mov	r0, r4
 801001e:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010020:	2180      	movs	r1, #128	; 0x80
 8010022:	4620      	mov	r0, r4
 8010024:	f00f f916 	bl	801f254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010028:	4620      	mov	r0, r4
 801002a:	f000 fb95 	bl	8010758 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 801002e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8010032:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8010034:	2b01      	cmp	r3, #1
 8010036:	d1d2      	bne.n	800ffde <USBD_LL_DataInStage+0x1a>
 8010038:	e7df      	b.n	800fffa <USBD_LL_DataInStage+0x36>
    return USBD_FAIL;
 801003a:	2003      	movs	r0, #3
}
 801003c:	b002      	add	sp, #8
 801003e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8010040:	1bad      	subs	r5, r5, r6
 8010042:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010044:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8010046:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010048:	462a      	mov	r2, r5
 801004a:	f000 fb59 	bl	8010700 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801004e:	9b01      	ldr	r3, [sp, #4]
 8010050:	4620      	mov	r0, r4
 8010052:	461a      	mov	r2, r3
 8010054:	4619      	mov	r1, r3
 8010056:	f00f f949 	bl	801f2ec <USBD_LL_PrepareReceive>
 801005a:	e7bb      	b.n	800ffd4 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 801005c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801005e:	4295      	cmp	r5, r2
 8010060:	d8d4      	bhi.n	801000c <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 8010062:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8010066:	42aa      	cmp	r2, r5
 8010068:	d2d0      	bcs.n	801000c <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801006a:	460a      	mov	r2, r1
 801006c:	9101      	str	r1, [sp, #4]
 801006e:	f000 fb47 	bl	8010700 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010072:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010074:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8010076:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801007a:	461a      	mov	r2, r3
 801007c:	4619      	mov	r1, r3
 801007e:	f00f f935 	bl	801f2ec <USBD_LL_PrepareReceive>
 8010082:	e7a7      	b.n	800ffd4 <USBD_LL_DataInStage+0x10>

08010084 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8010084:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010086:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8010088:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010090:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010094:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8010098:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 801009a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 801009e:	b11b      	cbz	r3, 80100a8 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80100a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80100a8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80100aa:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80100ac:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80100ae:	4620      	mov	r0, r4
 80100b0:	462b      	mov	r3, r5
 80100b2:	4611      	mov	r1, r2
 80100b4:	f00f f8ae 	bl	801f214 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80100b8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80100bc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80100c0:	462b      	mov	r3, r5
 80100c2:	2200      	movs	r2, #0
 80100c4:	2180      	movs	r1, #128	; 0x80
 80100c6:	4620      	mov	r0, r4
 80100c8:	f00f f8a4 	bl	801f214 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80100cc:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80100ce:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 80100d0:	2000      	movs	r0, #0
 80100d2:	bd70      	pop	{r4, r5, r6, pc}

080100d4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80100d4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80100d6:	2000      	movs	r0, #0
 80100d8:	4770      	bx	lr
 80100da:	bf00      	nop

080100dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80100dc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100de:	2104      	movs	r1, #4

  return USBD_OK;
}
 80100e0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80100e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100e6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80100ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80100ee:	4770      	bx	lr

080100f0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80100f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100f4:	2b04      	cmp	r3, #4
 80100f6:	d103      	bne.n	8010100 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80100f8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80100fc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8010100:	2000      	movs	r0, #0
 8010102:	4770      	bx	lr

08010104 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010104:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010108:	2a03      	cmp	r2, #3
 801010a:	d001      	beq.n	8010110 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 801010c:	2000      	movs	r0, #0
 801010e:	4770      	bx	lr
{
 8010110:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8010112:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	b103      	cbz	r3, 801011c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 801011a:	4798      	blx	r3
}
 801011c:	2000      	movs	r0, #0
 801011e:	bd08      	pop	{r3, pc}

08010120 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8010120:	2000      	movs	r0, #0
 8010122:	4770      	bx	lr

08010124 <USBD_LL_IsoOUTIncomplete>:
 8010124:	2000      	movs	r0, #0
 8010126:	4770      	bx	lr

08010128 <USBD_LL_DevConnected>:
 8010128:	2000      	movs	r0, #0
 801012a:	4770      	bx	lr

0801012c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801012c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 801012e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010132:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8010136:	b12a      	cbz	r2, 8010144 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010138:	6852      	ldr	r2, [r2, #4]
 801013a:	7901      	ldrb	r1, [r0, #4]
{
 801013c:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801013e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8010140:	2000      	movs	r0, #0
 8010142:	bd08      	pop	{r3, pc}
 8010144:	2000      	movs	r0, #0
 8010146:	4770      	bx	lr

08010148 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010148:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801014a:	780b      	ldrb	r3, [r1, #0]
{
 801014c:	b082      	sub	sp, #8
 801014e:	460d      	mov	r5, r1
 8010150:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010156:	2b20      	cmp	r3, #32
 8010158:	d028      	beq.n	80101ac <USBD_StdDevReq+0x64>
 801015a:	2b40      	cmp	r3, #64	; 0x40
 801015c:	d026      	beq.n	80101ac <USBD_StdDevReq+0x64>
 801015e:	b15b      	cbz	r3, 8010178 <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010160:	2180      	movs	r1, #128	; 0x80
 8010162:	4620      	mov	r0, r4
 8010164:	f00f f876 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010168:	2100      	movs	r1, #0
 801016a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 801016c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801016e:	f00f f871 	bl	801f254 <USBD_LL_StallEP>
}
 8010172:	4628      	mov	r0, r5
 8010174:	b002      	add	sp, #8
 8010176:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010178:	784b      	ldrb	r3, [r1, #1]
 801017a:	2b09      	cmp	r3, #9
 801017c:	d8f0      	bhi.n	8010160 <USBD_StdDevReq+0x18>
 801017e:	a201      	add	r2, pc, #4	; (adr r2, 8010184 <USBD_StdDevReq+0x3c>)
 8010180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010184:	08010223 	.word	0x08010223
 8010188:	08010251 	.word	0x08010251
 801018c:	08010161 	.word	0x08010161
 8010190:	0801026d 	.word	0x0801026d
 8010194:	08010161 	.word	0x08010161
 8010198:	08010279 	.word	0x08010279
 801019c:	080102bb 	.word	0x080102bb
 80101a0:	08010161 	.word	0x08010161
 80101a4:	080102df 	.word	0x080102df
 80101a8:	080101c1 	.word	0x080101c1
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80101b0:	4629      	mov	r1, r5
 80101b2:	4620      	mov	r0, r4
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	4798      	blx	r3
 80101b8:	4605      	mov	r5, r0
}
 80101ba:	4628      	mov	r0, r5
 80101bc:	b002      	add	sp, #8
 80101be:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 80101c0:	7889      	ldrb	r1, [r1, #2]
 80101c2:	4eae      	ldr	r6, [pc, #696]	; (801047c <USBD_StdDevReq+0x334>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101c4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80101c6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101c8:	f200 8114 	bhi.w	80103f4 <USBD_StdDevReq+0x2ac>
  switch (pdev->dev_state)
 80101cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	f000 811c 	beq.w	801040e <USBD_StdDevReq+0x2c6>
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	f040 812a 	bne.w	8010430 <USBD_StdDevReq+0x2e8>
    if (cfgidx == 0U)
 80101dc:	2900      	cmp	r1, #0
 80101de:	f000 814f 	beq.w	8010480 <USBD_StdDevReq+0x338>
    else if (cfgidx != pdev->dev_config)
 80101e2:	6841      	ldr	r1, [r0, #4]
 80101e4:	2901      	cmp	r1, #1
 80101e6:	f000 8130 	beq.w	801044a <USBD_StdDevReq+0x302>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80101ea:	b2c9      	uxtb	r1, r1
 80101ec:	f7ff fe7c 	bl	800fee8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80101f0:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80101f2:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 80101f4:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80101f6:	f7ff fe6f 	bl	800fed8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80101fa:	4605      	mov	r5, r0
 80101fc:	2800      	cmp	r0, #0
 80101fe:	f000 8124 	beq.w	801044a <USBD_StdDevReq+0x302>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010202:	2180      	movs	r1, #128	; 0x80
 8010204:	4620      	mov	r0, r4
 8010206:	f00f f825 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801020a:	2100      	movs	r1, #0
 801020c:	4620      	mov	r0, r4
 801020e:	f00f f821 	bl	801f254 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010212:	7921      	ldrb	r1, [r4, #4]
 8010214:	4620      	mov	r0, r4
 8010216:	f7ff fe67 	bl	800fee8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801021a:	2302      	movs	r3, #2
 801021c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010220:	e7a7      	b.n	8010172 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8010222:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010226:	2203      	movs	r2, #3
 8010228:	3b01      	subs	r3, #1
 801022a:	2b02      	cmp	r3, #2
 801022c:	d898      	bhi.n	8010160 <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 801022e:	88cb      	ldrh	r3, [r1, #6]
 8010230:	2b02      	cmp	r3, #2
 8010232:	d195      	bne.n	8010160 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010234:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8010236:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801023a:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 801023c:	b103      	cbz	r3, 8010240 <USBD_StdDevReq+0xf8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801023e:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010240:	2202      	movs	r2, #2
 8010242:	f104 010c 	add.w	r1, r4, #12
 8010246:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010248:	2500      	movs	r5, #0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801024a:	f000 fa4b 	bl	80106e4 <USBD_CtlSendData>
 801024e:	e790      	b.n	8010172 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8010250:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010254:	3b01      	subs	r3, #1
 8010256:	2b02      	cmp	r3, #2
 8010258:	d882      	bhi.n	8010160 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801025a:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 801025c:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801025e:	2b01      	cmp	r3, #1
 8010260:	d187      	bne.n	8010172 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8010262:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010266:	f000 fa6b 	bl	8010740 <USBD_CtlSendStatus>
 801026a:	e782      	b.n	8010172 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801026c:	884b      	ldrh	r3, [r1, #2]
 801026e:	2b01      	cmp	r3, #1
 8010270:	f000 80f0 	beq.w	8010454 <USBD_StdDevReq+0x30c>
  USBD_StatusTypeDef ret = USBD_OK;
 8010274:	2500      	movs	r5, #0
 8010276:	e77c      	b.n	8010172 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010278:	888b      	ldrh	r3, [r1, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	f47f af70 	bne.w	8010160 <USBD_StdDevReq+0x18>
 8010280:	88ce      	ldrh	r6, [r1, #6]
 8010282:	2e00      	cmp	r6, #0
 8010284:	f47f af6c 	bne.w	8010160 <USBD_StdDevReq+0x18>
 8010288:	884d      	ldrh	r5, [r1, #2]
 801028a:	2d7f      	cmp	r5, #127	; 0x7f
 801028c:	f63f af68 	bhi.w	8010160 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010290:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010294:	2b03      	cmp	r3, #3
 8010296:	f43f af63 	beq.w	8010160 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801029a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 801029c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80102a0:	f00f f808 	bl	801f2b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 fa4b 	bl	8010740 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80102aa:	2d00      	cmp	r5, #0
 80102ac:	f000 80fa 	beq.w	80104a4 <USBD_StdDevReq+0x35c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102b0:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 80102b2:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102b4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80102b8:	e75b      	b.n	8010172 <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 80102ba:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80102bc:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 80102be:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 80102c0:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 80102c4:	3b01      	subs	r3, #1
 80102c6:	2b0e      	cmp	r3, #14
 80102c8:	d86d      	bhi.n	80103a6 <USBD_StdDevReq+0x25e>
 80102ca:	e8df f003 	tbb	[pc, r3]
 80102ce:	5b53      	.short	0x5b53
 80102d0:	4a6c6c37 	.word	0x4a6c6c37
 80102d4:	6c6c6c3f 	.word	0x6c6c6c3f
 80102d8:	6c6c6c6c 	.word	0x6c6c6c6c
 80102dc:	1c          	.byte	0x1c
 80102dd:	00          	.byte	0x00
  if (req->wLength != 1U)
 80102de:	88ca      	ldrh	r2, [r1, #6]
 80102e0:	2a01      	cmp	r2, #1
 80102e2:	f47f af3d 	bne.w	8010160 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80102e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f43f af38 	beq.w	8010160 <USBD_StdDevReq+0x18>
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	f240 80b5 	bls.w	8010460 <USBD_StdDevReq+0x318>
 80102f6:	2b03      	cmp	r3, #3
 80102f8:	f47f af32 	bne.w	8010160 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80102fc:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 80102fe:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010300:	f000 f9f0 	bl	80106e4 <USBD_CtlSendData>
 8010304:	e735      	b.n	8010172 <USBD_StdDevReq+0x2a>
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010306:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801030a:	69db      	ldr	r3, [r3, #28]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d04a      	beq.n	80103a6 <USBD_StdDevReq+0x25e>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010310:	f10d 0106 	add.w	r1, sp, #6
 8010314:	7c20      	ldrb	r0, [r4, #16]
 8010316:	4798      	blx	r3
    if (req->wLength != 0U)
 8010318:	88eb      	ldrh	r3, [r5, #6]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d073      	beq.n	8010406 <USBD_StdDevReq+0x2be>
      if (len != 0U)
 801031e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010322:	2a00      	cmp	r2, #0
 8010324:	d03f      	beq.n	80103a6 <USBD_StdDevReq+0x25e>
        len = MIN(len, req->wLength);
 8010326:	4293      	cmp	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010328:	4601      	mov	r1, r0
 801032a:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 801032c:	bf28      	it	cs
 801032e:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010330:	461a      	mov	r2, r3
        len = MIN(len, req->wLength);
 8010332:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010336:	f000 f9d5 	bl	80106e4 <USBD_CtlSendData>
 801033a:	e79b      	b.n	8010274 <USBD_StdDevReq+0x12c>
    switch ((uint8_t)(req->wValue))
 801033c:	b2d2      	uxtb	r2, r2
 801033e:	2a05      	cmp	r2, #5
 8010340:	d831      	bhi.n	80103a6 <USBD_StdDevReq+0x25e>
 8010342:	e8df f002 	tbb	[pc, r2]
 8010346:	512b      	.short	0x512b
 8010348:	393f454b 	.word	0x393f454b
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801034c:	7c03      	ldrb	r3, [r0, #16]
 801034e:	bb53      	cbnz	r3, 80103a6 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010350:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010354:	f10d 0006 	add.w	r0, sp, #6
 8010358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801035c:	2307      	movs	r3, #7
 801035e:	7043      	strb	r3, [r0, #1]
 8010360:	e7da      	b.n	8010318 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010362:	7c03      	ldrb	r3, [r0, #16]
 8010364:	b9fb      	cbnz	r3, 80103a6 <USBD_StdDevReq+0x25e>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010366:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801036a:	f10d 0006 	add.w	r0, sp, #6
 801036e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010370:	4798      	blx	r3
 8010372:	e7d1      	b.n	8010318 <USBD_StdDevReq+0x1d0>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010374:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010378:	f10d 0106 	add.w	r1, sp, #6
 801037c:	7c00      	ldrb	r0, [r0, #16]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4798      	blx	r3
 8010382:	e7c9      	b.n	8010318 <USBD_StdDevReq+0x1d0>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010384:	7c02      	ldrb	r2, [r0, #16]
 8010386:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801038a:	2a00      	cmp	r2, #0
 801038c:	d16f      	bne.n	801046e <USBD_StdDevReq+0x326>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801038e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010390:	f10d 0006 	add.w	r0, sp, #6
 8010394:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010396:	2302      	movs	r3, #2
 8010398:	7043      	strb	r3, [r0, #1]
 801039a:	e7bd      	b.n	8010318 <USBD_StdDevReq+0x1d0>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801039c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1b4      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103a6:	2180      	movs	r1, #128	; 0x80
 80103a8:	4620      	mov	r0, r4
 80103aa:	f00e ff53 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103ae:	4620      	mov	r0, r4
 80103b0:	2100      	movs	r1, #0
 80103b2:	f00e ff4f 	bl	801f254 <USBD_LL_StallEP>
 80103b6:	e75d      	b.n	8010274 <USBD_StdDevReq+0x12c>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80103b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1a6      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
 80103c2:	e7f0      	b.n	80103a6 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80103c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1a0      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
 80103ce:	e7ea      	b.n	80103a6 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80103d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d19a      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
 80103da:	e7e4      	b.n	80103a6 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80103dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d194      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
 80103e6:	e7de      	b.n	80103a6 <USBD_StdDevReq+0x25e>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80103e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80103ec:	689b      	ldr	r3, [r3, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d18e      	bne.n	8010310 <USBD_StdDevReq+0x1c8>
 80103f2:	e7d8      	b.n	80103a6 <USBD_StdDevReq+0x25e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f4:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 80103f6:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f8:	f00e ff2c 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103fc:	4620      	mov	r0, r4
 80103fe:	2100      	movs	r1, #0
 8010400:	f00e ff28 	bl	801f254 <USBD_LL_StallEP>
 8010404:	e6b5      	b.n	8010172 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f99a 	bl	8010740 <USBD_CtlSendStatus>
 801040c:	e732      	b.n	8010274 <USBD_StdDevReq+0x12c>
    if (cfgidx != 0U)
 801040e:	b1e1      	cbz	r1, 801044a <USBD_StdDevReq+0x302>
      pdev->dev_config = cfgidx;
 8010410:	2101      	movs	r1, #1
 8010412:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010414:	f7ff fd60 	bl	800fed8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8010418:	4605      	mov	r5, r0
 801041a:	2800      	cmp	r0, #0
 801041c:	d03b      	beq.n	8010496 <USBD_StdDevReq+0x34e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801041e:	2180      	movs	r1, #128	; 0x80
 8010420:	4620      	mov	r0, r4
 8010422:	f00e ff17 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010426:	4620      	mov	r0, r4
 8010428:	2100      	movs	r1, #0
 801042a:	f00e ff13 	bl	801f254 <USBD_LL_StallEP>
 801042e:	e6a0      	b.n	8010172 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010430:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8010432:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010434:	f00e ff0e 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010438:	2100      	movs	r1, #0
 801043a:	4620      	mov	r0, r4
 801043c:	f00e ff0a 	bl	801f254 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010440:	7831      	ldrb	r1, [r6, #0]
 8010442:	4620      	mov	r0, r4
 8010444:	f7ff fd50 	bl	800fee8 <USBD_ClrClassConfig>
 8010448:	e693      	b.n	8010172 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 801044a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 801044c:	2500      	movs	r5, #0
      (void)USBD_CtlSendStatus(pdev);
 801044e:	f000 f977 	bl	8010740 <USBD_CtlSendStatus>
 8010452:	e68e      	b.n	8010172 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8010454:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 8010458:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 801045a:	f000 f971 	bl	8010740 <USBD_CtlSendStatus>
 801045e:	e688      	b.n	8010172 <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 8010460:	2500      	movs	r5, #0
 8010462:	4601      	mov	r1, r0
 8010464:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010468:	f000 f93c 	bl	80106e4 <USBD_CtlSendData>
 801046c:	e681      	b.n	8010172 <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801046e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010470:	f10d 0006 	add.w	r0, sp, #6
 8010474:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010476:	2302      	movs	r3, #2
 8010478:	7043      	strb	r3, [r0, #1]
 801047a:	e74d      	b.n	8010318 <USBD_StdDevReq+0x1d0>
 801047c:	200016a4 	.word	0x200016a4
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010480:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8010482:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010484:	460d      	mov	r5, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010486:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801048a:	f7ff fd2d 	bl	800fee8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801048e:	4620      	mov	r0, r4
 8010490:	f000 f956 	bl	8010740 <USBD_CtlSendStatus>
 8010494:	e66d      	b.n	8010172 <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 8010496:	4620      	mov	r0, r4
 8010498:	f000 f952 	bl	8010740 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801049c:	2303      	movs	r3, #3
 801049e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80104a2:	e666      	b.n	8010172 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80104a4:	2301      	movs	r3, #1
 80104a6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80104aa:	e662      	b.n	8010172 <USBD_StdDevReq+0x2a>

080104ac <USBD_StdItfReq>:
{
 80104ac:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104ae:	780b      	ldrb	r3, [r1, #0]
{
 80104b0:	460d      	mov	r5, r1
 80104b2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80104b8:	2b20      	cmp	r3, #32
 80104ba:	d00d      	beq.n	80104d8 <USBD_StdItfReq+0x2c>
 80104bc:	2b40      	cmp	r3, #64	; 0x40
 80104be:	d00b      	beq.n	80104d8 <USBD_StdItfReq+0x2c>
 80104c0:	b153      	cbz	r3, 80104d8 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 80104c2:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80104c4:	2180      	movs	r1, #128	; 0x80
 80104c6:	4620      	mov	r0, r4
 80104c8:	f00e fec4 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80104cc:	4620      	mov	r0, r4
 80104ce:	4631      	mov	r1, r6
 80104d0:	f00e fec0 	bl	801f254 <USBD_LL_StallEP>
}
 80104d4:	4630      	mov	r0, r6
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 80104d8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80104dc:	3b01      	subs	r3, #1
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d8ef      	bhi.n	80104c2 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80104e2:	792b      	ldrb	r3, [r5, #4]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d80f      	bhi.n	8010508 <USBD_StdItfReq+0x5c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80104e8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80104ec:	4629      	mov	r1, r5
 80104ee:	4620      	mov	r0, r4
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80104f4:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80104f6:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1eb      	bne.n	80104d4 <USBD_StdItfReq+0x28>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d1e9      	bne.n	80104d4 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 8010500:	4620      	mov	r0, r4
 8010502:	f000 f91d 	bl	8010740 <USBD_CtlSendStatus>
 8010506:	e7e5      	b.n	80104d4 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010508:	2180      	movs	r1, #128	; 0x80
 801050a:	4620      	mov	r0, r4
 801050c:	f00e fea2 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010510:	2100      	movs	r1, #0
 8010512:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8010514:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8010516:	f00e fe9d 	bl	801f254 <USBD_LL_StallEP>
 801051a:	e7db      	b.n	80104d4 <USBD_StdItfReq+0x28>

0801051c <USBD_StdEPReq>:
{
 801051c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801051e:	780b      	ldrb	r3, [r1, #0]
{
 8010520:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010526:	2b20      	cmp	r3, #32
 8010528:	d027      	beq.n	801057a <USBD_StdEPReq+0x5e>
 801052a:	2b40      	cmp	r3, #64	; 0x40
 801052c:	d025      	beq.n	801057a <USBD_StdEPReq+0x5e>
 801052e:	460c      	mov	r4, r1
 8010530:	b14b      	cbz	r3, 8010546 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010532:	2180      	movs	r1, #128	; 0x80
 8010534:	4628      	mov	r0, r5
 8010536:	f00e fe8d 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801053a:	4628      	mov	r0, r5
 801053c:	2100      	movs	r1, #0
 801053e:	f00e fe89 	bl	801f254 <USBD_LL_StallEP>
}
 8010542:	2000      	movs	r0, #0
 8010544:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8010546:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8010548:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 801054a:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 801054c:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801054e:	d03d      	beq.n	80105cc <USBD_StdEPReq+0xb0>
 8010550:	d31a      	bcc.n	8010588 <USBD_StdEPReq+0x6c>
 8010552:	2b03      	cmp	r3, #3
 8010554:	d1ed      	bne.n	8010532 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8010556:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801055a:	2b02      	cmp	r3, #2
 801055c:	d04d      	beq.n	80105fa <USBD_StdEPReq+0xde>
 801055e:	2b03      	cmp	r3, #3
 8010560:	d1e7      	bne.n	8010532 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010562:	8863      	ldrh	r3, [r4, #2]
 8010564:	b92b      	cbnz	r3, 8010572 <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010566:	064a      	lsls	r2, r1, #25
 8010568:	d003      	beq.n	8010572 <USBD_StdEPReq+0x56>
 801056a:	88e3      	ldrh	r3, [r4, #6]
 801056c:	b90b      	cbnz	r3, 8010572 <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801056e:	f00e fe71 	bl	801f254 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8010572:	4628      	mov	r0, r5
 8010574:	f000 f8e4 	bl	8010740 <USBD_CtlSendStatus>
        break;
 8010578:	e7e3      	b.n	8010542 <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801057a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 801057e:	4628      	mov	r0, r5
 8010580:	689b      	ldr	r3, [r3, #8]
}
 8010582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010586:	4718      	bx	r3
      switch (pdev->dev_state)
 8010588:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801058c:	2b02      	cmp	r3, #2
 801058e:	d03d      	beq.n	801060c <USBD_StdEPReq+0xf0>
 8010590:	2b03      	cmp	r3, #3
 8010592:	d1ce      	bne.n	8010532 <USBD_StdEPReq+0x16>
 8010594:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8010598:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801059a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801059e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 80105a2:	d445      	bmi.n	8010630 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80105a4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d0c2      	beq.n	8010532 <USBD_StdEPReq+0x16>
 80105ac:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80105b0:	2414      	movs	r4, #20
 80105b2:	fb04 0403 	mla	r4, r4, r3, r0
 80105b6:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d144      	bne.n	8010648 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 80105be:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105c0:	4621      	mov	r1, r4
 80105c2:	4628      	mov	r0, r5
 80105c4:	2202      	movs	r2, #2
 80105c6:	f000 f88d 	bl	80106e4 <USBD_CtlSendData>
          break;
 80105ca:	e7ba      	b.n	8010542 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80105cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d012      	beq.n	80105fa <USBD_StdEPReq+0xde>
 80105d4:	2b03      	cmp	r3, #3
 80105d6:	d1ac      	bne.n	8010532 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80105d8:	8863      	ldrh	r3, [r4, #2]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1b1      	bne.n	8010542 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80105de:	064e      	lsls	r6, r1, #25
 80105e0:	d001      	beq.n	80105e6 <USBD_StdEPReq+0xca>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80105e2:	f00e fe45 	bl	801f270 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 80105e6:	4628      	mov	r0, r5
 80105e8:	f000 f8aa 	bl	8010740 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80105ec:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 80105f0:	4621      	mov	r1, r4
 80105f2:	4628      	mov	r0, r5
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	4798      	blx	r3
 80105f8:	e7a3      	b.n	8010542 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80105fa:	064b      	lsls	r3, r1, #25
 80105fc:	d099      	beq.n	8010532 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80105fe:	f00e fe29 	bl	801f254 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010602:	4628      	mov	r0, r5
 8010604:	2180      	movs	r1, #128	; 0x80
 8010606:	f00e fe25 	bl	801f254 <USBD_LL_StallEP>
 801060a:	e79a      	b.n	8010542 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801060c:	0648      	lsls	r0, r1, #25
 801060e:	d190      	bne.n	8010532 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010610:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8010612:	f04f 0400 	mov.w	r4, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010616:	4628      	mov	r0, r5
 8010618:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801061c:	bf4c      	ite	mi
 801061e:	f105 0314 	addmi.w	r3, r5, #20
 8010622:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010626:	4619      	mov	r1, r3
        pep->status = 0x0000U;
 8010628:	601c      	str	r4, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801062a:	f000 f85b 	bl	80106e4 <USBD_CtlSendData>
        break;
 801062e:	e788      	b.n	8010542 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010632:	2b00      	cmp	r3, #0
 8010634:	f43f af7d 	beq.w	8010532 <USBD_StdEPReq+0x16>
 8010638:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801063c:	1c5c      	adds	r4, r3, #1
 801063e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010642:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010646:	e7b8      	b.n	80105ba <USBD_StdEPReq+0x9e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010648:	4628      	mov	r0, r5
 801064a:	f00e fe1f 	bl	801f28c <USBD_LL_IsStallEP>
 801064e:	b108      	cbz	r0, 8010654 <USBD_StdEPReq+0x138>
            pep->status = 0x0001U;
 8010650:	2301      	movs	r3, #1
 8010652:	e7b4      	b.n	80105be <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 8010654:	6020      	str	r0, [r4, #0]
 8010656:	e7b3      	b.n	80105c0 <USBD_StdEPReq+0xa4>

08010658 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8010658:	780b      	ldrb	r3, [r1, #0]
 801065a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 801065c:	784b      	ldrb	r3, [r1, #1]
 801065e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010660:	78ca      	ldrb	r2, [r1, #3]
 8010662:	788b      	ldrb	r3, [r1, #2]
 8010664:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8010668:	8043      	strh	r3, [r0, #2]
 801066a:	794a      	ldrb	r2, [r1, #5]
 801066c:	790b      	ldrb	r3, [r1, #4]
 801066e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8010672:	8083      	strh	r3, [r0, #4]
 8010674:	79ca      	ldrb	r2, [r1, #7]
 8010676:	798b      	ldrb	r3, [r1, #6]
 8010678:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 801067c:	80c3      	strh	r3, [r0, #6]
}
 801067e:	4770      	bx	lr

08010680 <USBD_CtlError>:
{
 8010680:	b510      	push	{r4, lr}
 8010682:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010684:	2180      	movs	r1, #128	; 0x80
 8010686:	f00e fde5 	bl	801f254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801068a:	2100      	movs	r1, #0
 801068c:	4620      	mov	r0, r4
}
 801068e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8010692:	f00e bddf 	b.w	801f254 <USBD_LL_StallEP>
 8010696:	bf00      	nop

08010698 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8010698:	b300      	cbz	r0, 80106dc <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801069a:	7803      	ldrb	r3, [r0, #0]
{
 801069c:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801069e:	b1f3      	cbz	r3, 80106de <USBD_GetString+0x46>
 80106a0:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 80106a2:	2300      	movs	r3, #0
  {
    len++;
 80106a4:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80106a6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 80106aa:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 80106ac:	2d00      	cmp	r5, #0
 80106ae:	d1f9      	bne.n	80106a4 <USBD_GetString+0xc>
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 80106b4:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80106b6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80106b8:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80106ba:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80106bc:	7804      	ldrb	r4, [r0, #0]
 80106be:	b15c      	cbz	r4, 80106d8 <USBD_GetString+0x40>
  idx++;
 80106c0:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80106c2:	2500      	movs	r5, #0
    idx++;
 80106c4:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80106c6:	54cc      	strb	r4, [r1, r3]
    idx++;
 80106c8:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80106ca:	b2d2      	uxtb	r2, r2
    idx++;
 80106cc:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80106ce:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80106d0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80106d4:	2c00      	cmp	r4, #0
 80106d6:	d1f5      	bne.n	80106c4 <USBD_GetString+0x2c>
}
 80106d8:	bc30      	pop	{r4, r5}
 80106da:	4770      	bx	lr
 80106dc:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80106de:	2302      	movs	r3, #2
 80106e0:	e7e8      	b.n	80106b4 <USBD_GetString+0x1c>
 80106e2:	bf00      	nop

080106e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80106e4:	b570      	push	{r4, r5, r6, lr}
 80106e6:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106e8:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106ea:	460a      	mov	r2, r1
 80106ec:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 80106ee:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106f0:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 80106f2:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106f4:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106f8:	f00e fdea 	bl	801f2d0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80106fc:	2000      	movs	r0, #0
 80106fe:	bd70      	pop	{r4, r5, r6, pc}

08010700 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010700:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010702:	4613      	mov	r3, r2
 8010704:	460a      	mov	r2, r1
 8010706:	2100      	movs	r1, #0
 8010708:	f00e fde2 	bl	801f2d0 <USBD_LL_Transmit>

  return USBD_OK;
}
 801070c:	2000      	movs	r0, #0
 801070e:	bd08      	pop	{r3, pc}

08010710 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010710:	b570      	push	{r4, r5, r6, lr}
 8010712:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010714:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010716:	460a      	mov	r2, r1
 8010718:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 801071a:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801071e:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 8010720:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010724:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010728:	f00e fde0 	bl	801f2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801072c:	2000      	movs	r0, #0
 801072e:	bd70      	pop	{r4, r5, r6, pc}

08010730 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010730:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010732:	4613      	mov	r3, r2
 8010734:	460a      	mov	r2, r1
 8010736:	2100      	movs	r1, #0
 8010738:	f00e fdd8 	bl	801f2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801073c:	2000      	movs	r0, #0
 801073e:	bd08      	pop	{r3, pc}

08010740 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010740:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010742:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010744:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010746:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801074a:	4619      	mov	r1, r3
 801074c:	461a      	mov	r2, r3
 801074e:	f00e fdbf 	bl	801f2d0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010752:	2000      	movs	r0, #0
 8010754:	bd08      	pop	{r3, pc}
 8010756:	bf00      	nop

08010758 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010758:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801075a:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801075c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801075e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010762:	4619      	mov	r1, r3
 8010764:	461a      	mov	r2, r3
 8010766:	f00e fdc1 	bl	801f2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801076a:	2000      	movs	r0, #0
 801076c:	bd08      	pop	{r3, pc}
 801076e:	bf00      	nop

08010770 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8010770:	4b11      	ldr	r3, [pc, #68]	; (80107b8 <FATFS_LinkDriver+0x48>)
 8010772:	7a5a      	ldrb	r2, [r3, #9]
 8010774:	b10a      	cbz	r2, 801077a <FATFS_LinkDriver+0xa>
  uint8_t ret = 1;
 8010776:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8010778:	4770      	bx	lr
{
 801077a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801077c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8010780:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010784:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8010786:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 801078a:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 801078c:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 801078e:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8010790:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8010794:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8010796:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 801079a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 801079c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 801079e:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 80107a0:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80107a2:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80107a4:	b2c0      	uxtb	r0, r0
 80107a6:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 80107a8:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 80107aa:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 80107ac:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 80107ae:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 80107b2:	708f      	strb	r7, [r1, #2]
}
 80107b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107b6:	bf00      	nop
 80107b8:	200016a8 	.word	0x200016a8

080107bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80107bc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80107be:	f001 f929 	bl	8011a14 <vTaskStartScheduler>
  
  return osOK;
}
 80107c2:	2000      	movs	r0, #0
 80107c4:	bd08      	pop	{r3, pc}
 80107c6:	bf00      	nop

080107c8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107c8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80107cc:	b90b      	cbnz	r3, 80107d2 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80107ce:	f001 b971 	b.w	8011ab4 <xTaskGetTickCount>
    return xTaskGetTickCountFromISR();
 80107d2:	f001 b975 	b.w	8011ac0 <xTaskGetTickCountFromISR>
 80107d6:	bf00      	nop

080107d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80107d8:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80107da:	6945      	ldr	r5, [r0, #20]
{
 80107dc:	460b      	mov	r3, r1
 80107de:	b086      	sub	sp, #24
 80107e0:	6902      	ldr	r2, [r0, #16]
 80107e2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80107e6:	e9d0 1600 	ldrd	r1, r6, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80107ea:	b16d      	cbz	r5, 8010808 <osThreadCreate+0x30>
 80107ec:	6980      	ldr	r0, [r0, #24]
 80107ee:	b158      	cbz	r0, 8010808 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 80107f0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80107f2:	bf14      	ite	ne
 80107f4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80107f6:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80107f8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80107fc:	9400      	str	r4, [sp, #0]
 80107fe:	4630      	mov	r0, r6
 8010800:	f001 f896 	bl	8011930 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8010804:	b006      	add	sp, #24
 8010806:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8010808:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801080a:	ad05      	add	r5, sp, #20
 801080c:	b292      	uxth	r2, r2
 801080e:	4630      	mov	r0, r6
    fpriority += (priority - osPriorityIdle);
 8010810:	bf14      	ite	ne
 8010812:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010814:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010816:	9501      	str	r5, [sp, #4]
 8010818:	9400      	str	r4, [sp, #0]
 801081a:	f001 f8c7 	bl	80119ac <xTaskCreate>
 801081e:	2801      	cmp	r0, #1
 8010820:	bf0c      	ite	eq
 8010822:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8010824:	2000      	movne	r0, #0
}
 8010826:	b006      	add	sp, #24
 8010828:	bd70      	pop	{r4, r5, r6, pc}
 801082a:	bf00      	nop

0801082c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801082c:	2800      	cmp	r0, #0
 801082e:	bf08      	it	eq
 8010830:	2001      	moveq	r0, #1
{
 8010832:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010834:	f001 fa7c 	bl	8011d30 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010838:	2000      	movs	r0, #0
 801083a:	bd08      	pop	{r3, pc}

0801083c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 801083c:	f1a1 0101 	sub.w	r1, r1, #1
 8010840:	4613      	mov	r3, r2
 8010842:	b510      	push	{r4, lr}
 8010844:	fab1 f181 	clz	r1, r1
 8010848:	b082      	sub	sp, #8
 801084a:	e9d0 2400 	ldrd	r2, r4, [r0]
 801084e:	0949      	lsrs	r1, r1, #5
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8010850:	b144      	cbz	r4, 8010864 <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 8010852:	4808      	ldr	r0, [pc, #32]	; (8010874 <osTimerCreate+0x38>)
 8010854:	e9cd 2400 	strd	r2, r4, [sp]
 8010858:	460a      	mov	r2, r1
 801085a:	2101      	movs	r1, #1
 801085c:	f001 fe5a 	bl	8012514 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8010860:	b002      	add	sp, #8
 8010862:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8010864:	9200      	str	r2, [sp, #0]
 8010866:	460a      	mov	r2, r1
 8010868:	2101      	movs	r1, #1
 801086a:	4802      	ldr	r0, [pc, #8]	; (8010874 <osTimerCreate+0x38>)
 801086c:	f001 fe22 	bl	80124b4 <xTimerCreate>
}
 8010870:	b002      	add	sp, #8
 8010872:	bd10      	pop	{r4, pc}
 8010874:	0803d704 	.word	0x0803d704

08010878 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010878:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801087a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 801087c:	b109      	cbz	r1, 8010882 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801087e:	f000 bbb5 	b.w	8010fec <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010882:	f000 bbc9 	b.w	8011018 <xQueueCreateMutex>
 8010886:	bf00      	nop

08010888 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8010888:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801088a:	2400      	movs	r4, #0
{
 801088c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801088e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8010890:	b300      	cbz	r0, 80108d4 <osMutexWait+0x4c>
 8010892:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8010896:	b933      	cbnz	r3, 80108a6 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8010898:	f000 fd64 	bl	8011364 <xQueueSemaphoreTake>
 801089c:	2801      	cmp	r0, #1
 801089e:	d116      	bne.n	80108ce <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 80108a0:	2000      	movs	r0, #0
}
 80108a2:	b002      	add	sp, #8
 80108a4:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80108a6:	aa01      	add	r2, sp, #4
 80108a8:	4621      	mov	r1, r4
 80108aa:	f000 fe31 	bl	8011510 <xQueueReceiveFromISR>
 80108ae:	2801      	cmp	r0, #1
 80108b0:	d10d      	bne.n	80108ce <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80108b2:	9b01      	ldr	r3, [sp, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d0f3      	beq.n	80108a0 <osMutexWait+0x18>
 80108b8:	4b08      	ldr	r3, [pc, #32]	; (80108dc <osMutexWait+0x54>)
 80108ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108be:	601a      	str	r2, [r3, #0]
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	f3bf 8f6f 	isb	sy
  return osOK;
 80108c8:	4620      	mov	r0, r4
}
 80108ca:	b002      	add	sp, #8
 80108cc:	bd10      	pop	{r4, pc}
      return osErrorOS;
 80108ce:	20ff      	movs	r0, #255	; 0xff
}
 80108d0:	b002      	add	sp, #8
 80108d2:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80108d4:	2080      	movs	r0, #128	; 0x80
}
 80108d6:	b002      	add	sp, #8
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	bf00      	nop
 80108dc:	e000ed04 	.word	0xe000ed04

080108e0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80108e0:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80108e2:	2400      	movs	r4, #0
{
 80108e4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80108e6:	9401      	str	r4, [sp, #4]
 80108e8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80108ec:	b14b      	cbz	r3, 8010902 <osMutexRelease+0x22>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80108ee:	a901      	add	r1, sp, #4
 80108f0:	f000 fc16 	bl	8011120 <xQueueGiveFromISR>
 80108f4:	2801      	cmp	r0, #1
 80108f6:	d10a      	bne.n	801090e <osMutexRelease+0x2e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80108f8:	9b01      	ldr	r3, [sp, #4]
 80108fa:	b95b      	cbnz	r3, 8010914 <osMutexRelease+0x34>
  osStatus result = osOK;
 80108fc:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80108fe:	b002      	add	sp, #8
 8010900:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010902:	461a      	mov	r2, r3
 8010904:	4619      	mov	r1, r3
 8010906:	f000 faa7 	bl	8010e58 <xQueueGenericSend>
 801090a:	2801      	cmp	r0, #1
 801090c:	d0f6      	beq.n	80108fc <osMutexRelease+0x1c>
    result = osErrorOS;
 801090e:	20ff      	movs	r0, #255	; 0xff
}
 8010910:	b002      	add	sp, #8
 8010912:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8010914:	4b05      	ldr	r3, [pc, #20]	; (801092c <osMutexRelease+0x4c>)
 8010916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8010924:	4620      	mov	r0, r4
}
 8010926:	b002      	add	sp, #8
 8010928:	bd10      	pop	{r4, pc}
 801092a:	bf00      	nop
 801092c:	e000ed04 	.word	0xe000ed04

08010930 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010930:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010932:	6844      	ldr	r4, [r0, #4]
{ 
 8010934:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 8010936:	b16c      	cbz	r4, 8010954 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8010938:	2901      	cmp	r1, #1
 801093a:	d11d      	bne.n	8010978 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801093c:	2503      	movs	r5, #3
 801093e:	2200      	movs	r2, #0
 8010940:	4608      	mov	r0, r1
 8010942:	4623      	mov	r3, r4
 8010944:	9500      	str	r5, [sp, #0]
 8010946:	4611      	mov	r1, r2
 8010948:	f000 f9fc 	bl	8010d44 <xQueueGenericCreateStatic>
 801094c:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 801094e:	4628      	mov	r0, r5
 8010950:	b003      	add	sp, #12
 8010952:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8010954:	2901      	cmp	r1, #1
 8010956:	d113      	bne.n	8010980 <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 8010958:	4608      	mov	r0, r1
 801095a:	2203      	movs	r2, #3
 801095c:	4621      	mov	r1, r4
 801095e:	f000 fa49 	bl	8010df4 <xQueueGenericCreate>
 8010962:	4605      	mov	r5, r0
 8010964:	2800      	cmp	r0, #0
 8010966:	d0f2      	beq.n	801094e <osSemaphoreCreate+0x1e>
 8010968:	4623      	mov	r3, r4
 801096a:	4622      	mov	r2, r4
 801096c:	4621      	mov	r1, r4
 801096e:	f000 fa73 	bl	8010e58 <xQueueGenericSend>
}
 8010972:	4628      	mov	r0, r5
 8010974:	b003      	add	sp, #12
 8010976:	bd30      	pop	{r4, r5, pc}
      return NULL;
 8010978:	2500      	movs	r5, #0
}
 801097a:	4628      	mov	r0, r5
 801097c:	b003      	add	sp, #12
 801097e:	bd30      	pop	{r4, r5, pc}
      return NULL;
 8010980:	4625      	mov	r5, r4
 8010982:	e7e4      	b.n	801094e <osSemaphoreCreate+0x1e>

08010984 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010984:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010986:	2400      	movs	r4, #0
{
 8010988:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801098a:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 801098c:	b300      	cbz	r0, 80109d0 <osSemaphoreWait+0x4c>
 801098e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8010992:	b933      	cbnz	r3, 80109a2 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010994:	f000 fce6 	bl	8011364 <xQueueSemaphoreTake>
 8010998:	2801      	cmp	r0, #1
 801099a:	d116      	bne.n	80109ca <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 801099c:	2000      	movs	r0, #0
}
 801099e:	b002      	add	sp, #8
 80109a0:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80109a2:	aa01      	add	r2, sp, #4
 80109a4:	4621      	mov	r1, r4
 80109a6:	f000 fdb3 	bl	8011510 <xQueueReceiveFromISR>
 80109aa:	2801      	cmp	r0, #1
 80109ac:	d10d      	bne.n	80109ca <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d0f3      	beq.n	801099c <osSemaphoreWait+0x18>
 80109b4:	4b08      	ldr	r3, [pc, #32]	; (80109d8 <osSemaphoreWait+0x54>)
 80109b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	f3bf 8f6f 	isb	sy
  return osOK;
 80109c4:	4620      	mov	r0, r4
}
 80109c6:	b002      	add	sp, #8
 80109c8:	bd10      	pop	{r4, pc}
      return osErrorOS;
 80109ca:	20ff      	movs	r0, #255	; 0xff
}
 80109cc:	b002      	add	sp, #8
 80109ce:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80109d0:	2080      	movs	r0, #128	; 0x80
}
 80109d2:	b002      	add	sp, #8
 80109d4:	bd10      	pop	{r4, pc}
 80109d6:	bf00      	nop
 80109d8:	e000ed04 	.word	0xe000ed04

080109dc <osSemaphoreRelease>:
 80109dc:	f7ff bf80 	b.w	80108e0 <osMutexRelease>

080109e0 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80109e0:	6882      	ldr	r2, [r0, #8]
{
 80109e2:	b530      	push	{r4, r5, lr}
 80109e4:	e9d0 4100 	ldrd	r4, r1, [r0]
 80109e8:	b083      	sub	sp, #12
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80109ea:	b10a      	cbz	r2, 80109f0 <osMessageCreate+0x10>
 80109ec:	68c3      	ldr	r3, [r0, #12]
 80109ee:	b933      	cbnz	r3, 80109fe <osMessageCreate+0x1e>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80109f0:	4620      	mov	r0, r4
 80109f2:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80109f4:	b003      	add	sp, #12
 80109f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80109fa:	f000 b9fb 	b.w	8010df4 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80109fe:	2500      	movs	r5, #0
 8010a00:	4620      	mov	r0, r4
 8010a02:	9500      	str	r5, [sp, #0]
 8010a04:	f000 f99e 	bl	8010d44 <xQueueGenericCreateStatic>
}
 8010a08:	b003      	add	sp, #12
 8010a0a:	bd30      	pop	{r4, r5, pc}

08010a0c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010a0c:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8010a0e:	2400      	movs	r4, #0
{
 8010a10:	b084      	sub	sp, #16
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8010a12:	42a2      	cmp	r2, r4
 8010a14:	bf08      	it	eq
 8010a16:	2201      	moveq	r2, #1
{
 8010a18:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010a1a:	9403      	str	r4, [sp, #12]
 8010a1c:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8010a20:	b15b      	cbz	r3, 8010a3a <osMessagePut+0x2e>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010a22:	4623      	mov	r3, r4
 8010a24:	aa03      	add	r2, sp, #12
 8010a26:	a901      	add	r1, sp, #4
 8010a28:	f000 fb08 	bl	801103c <xQueueGenericSendFromISR>
 8010a2c:	2801      	cmp	r0, #1
 8010a2e:	d109      	bne.n	8010a44 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010a30:	9b03      	ldr	r3, [sp, #12]
 8010a32:	b953      	cbnz	r3, 8010a4a <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8010a34:	2000      	movs	r0, #0
}
 8010a36:	b004      	add	sp, #16
 8010a38:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010a3a:	a901      	add	r1, sp, #4
 8010a3c:	f000 fa0c 	bl	8010e58 <xQueueGenericSend>
 8010a40:	2801      	cmp	r0, #1
 8010a42:	d0f7      	beq.n	8010a34 <osMessagePut+0x28>
      return osErrorOS;
 8010a44:	20ff      	movs	r0, #255	; 0xff
}
 8010a46:	b004      	add	sp, #16
 8010a48:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8010a4a:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <osMessagePut+0x54>)
 8010a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	f3bf 8f4f 	dsb	sy
 8010a56:	f3bf 8f6f 	isb	sy
  return osOK;
 8010a5a:	4620      	mov	r0, r4
}
 8010a5c:	b004      	add	sp, #16
 8010a5e:	bd10      	pop	{r4, pc}
 8010a60:	e000ed04 	.word	0xe000ed04

08010a64 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010a64:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8010a66:	2500      	movs	r5, #0
{
 8010a68:	b084      	sub	sp, #16
 8010a6a:	4604      	mov	r4, r0
  event.value.v = 0;
 8010a6c:	e9cd 5102 	strd	r5, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8010a70:	b359      	cbz	r1, 8010aca <osMessageGet+0x66>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8010a72:	9500      	str	r5, [sp, #0]
 8010a74:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8010a78:	b99b      	cbnz	r3, 8010aa2 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	a902      	add	r1, sp, #8
 8010a7e:	4616      	mov	r6, r2
 8010a80:	f000 fbae 	bl	80111e0 <xQueueReceive>
 8010a84:	2801      	cmp	r0, #1
 8010a86:	d02e      	beq.n	8010ae6 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	bf0c      	ite	eq
 8010a8c:	2300      	moveq	r3, #0
 8010a8e:	2340      	movne	r3, #64	; 0x40
 8010a90:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 8010a92:	ab04      	add	r3, sp, #16
 8010a94:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	b004      	add	sp, #16
 8010aa0:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010aa2:	4608      	mov	r0, r1
 8010aa4:	466a      	mov	r2, sp
 8010aa6:	a902      	add	r1, sp, #8
 8010aa8:	f000 fd32 	bl	8011510 <xQueueReceiveFromISR>
 8010aac:	2801      	cmp	r0, #1
 8010aae:	d017      	beq.n	8010ae0 <osMessageGet+0x7c>
      event.status = osOK;
 8010ab0:	9501      	str	r5, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8010ab2:	9b00      	ldr	r3, [sp, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d0ec      	beq.n	8010a92 <osMessageGet+0x2e>
 8010ab8:	4b0c      	ldr	r3, [pc, #48]	; (8010aec <osMessageGet+0x88>)
 8010aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010abe:	601a      	str	r2, [r3, #0]
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	f3bf 8f6f 	isb	sy
 8010ac8:	e7e3      	b.n	8010a92 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8010aca:	ab04      	add	r3, sp, #16
 8010acc:	2280      	movs	r2, #128	; 0x80
 8010ace:	f843 2d0c 	str.w	r2, [r3, #-12]!
    return event;
 8010ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010ada:	4620      	mov	r0, r4
 8010adc:	b004      	add	sp, #16
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	9301      	str	r3, [sp, #4]
 8010ae4:	e7e5      	b.n	8010ab2 <osMessageGet+0x4e>
      event.status = osEventMessage;
 8010ae6:	2310      	movs	r3, #16
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	e7d2      	b.n	8010a92 <osMessageGet+0x2e>
 8010aec:	e000ed04 	.word	0xe000ed04

08010af0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010af0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010af4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010af8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010afa:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010afc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010afe:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b00:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop

08010b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop

08010b10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b10:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010b12:	6802      	ldr	r2, [r0, #0]
{
 8010b14:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b16:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8010b18:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b1a:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b1e:	689c      	ldr	r4, [r3, #8]
 8010b20:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b22:	6099      	str	r1, [r3, #8]
}
 8010b24:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8010b28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010b2a:	6002      	str	r2, [r0, #0]
}
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop

08010b30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b30:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b32:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b34:	1c6b      	adds	r3, r5, #1
 8010b36:	d011      	beq.n	8010b5c <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b38:	f100 0208 	add.w	r2, r0, #8
 8010b3c:	e000      	b.n	8010b40 <vListInsert+0x10>
 8010b3e:	461a      	mov	r2, r3
 8010b40:	6853      	ldr	r3, [r2, #4]
 8010b42:	681c      	ldr	r4, [r3, #0]
 8010b44:	42ac      	cmp	r4, r5
 8010b46:	d9fa      	bls.n	8010b3e <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010b48:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b4a:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8010b4c:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b4e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b50:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b52:	6051      	str	r1, [r2, #4]
	pxNewListItem->pxContainer = pxList;
 8010b54:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010b56:	6004      	str	r4, [r0, #0]
}
 8010b58:	bc30      	pop	{r4, r5}
 8010b5a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b5c:	6902      	ldr	r2, [r0, #16]
 8010b5e:	6853      	ldr	r3, [r2, #4]
 8010b60:	e7f2      	b.n	8010b48 <vListInsert+0x18>
 8010b62:	bf00      	nop

08010b64 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b64:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b66:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
{
 8010b6a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b6c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b6e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b70:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8010b72:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8010b74:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b78:	604a      	str	r2, [r1, #4]
	( pxList->uxNumberOfItems )--;
 8010b7a:	681a      	ldr	r2, [r3, #0]
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b7c:	bf08      	it	eq
 8010b7e:	6059      	streq	r1, [r3, #4]
	pxItemToRemove->pxContainer = NULL;
 8010b80:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8010b82:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8010b84:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010b86:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8010b88:	6818      	ldr	r0, [r3, #0]
}
 8010b8a:	4770      	bx	lr

08010b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b90:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010b92:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b94:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b96:	b92a      	cbnz	r2, 8010ba4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b98:	6806      	ldr	r6, [r0, #0]
 8010b9a:	3501      	adds	r5, #1
 8010b9c:	b366      	cbz	r6, 8010bf8 <prvCopyDataToQueue+0x6c>
BaseType_t xReturn = pdFALSE;
 8010b9e:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ba0:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010ba4:	b97e      	cbnz	r6, 8010bc6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ba6:	6840      	ldr	r0, [r0, #4]
 8010ba8:	3501      	adds	r5, #1
 8010baa:	f00e fd52 	bl	801f652 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bae:	6863      	ldr	r3, [r4, #4]
 8010bb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bb2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bb4:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bb6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bb8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bba:	d3f0      	bcc.n	8010b9e <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bbc:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 8010bbe:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bc0:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bc2:	6063      	str	r3, [r4, #4]
}
 8010bc4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010bc6:	68c0      	ldr	r0, [r0, #12]
 8010bc8:	f00e fd43 	bl	801f652 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010bce:	68e3      	ldr	r3, [r4, #12]
 8010bd0:	4252      	negs	r2, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bd2:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bd4:	4413      	add	r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bd6:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010bd8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bda:	d202      	bcs.n	8010be2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bdc:	68a3      	ldr	r3, [r4, #8]
 8010bde:	441a      	add	r2, r3
 8010be0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010be2:	2e02      	cmp	r6, #2
 8010be4:	d003      	beq.n	8010bee <prvCopyDataToQueue+0x62>
 8010be6:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8010be8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bea:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8010bec:	bd70      	pop	{r4, r5, r6, pc}
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bee:	2d00      	cmp	r5, #0
 8010bf0:	d1d5      	bne.n	8010b9e <prvCopyDataToQueue+0x12>
 8010bf2:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
 8010bf4:	2000      	movs	r0, #0
 8010bf6:	e7d3      	b.n	8010ba0 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010bf8:	6880      	ldr	r0, [r0, #8]
 8010bfa:	f001 fa57 	bl	80120ac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010bfe:	60a6      	str	r6, [r4, #8]
 8010c00:	e7ce      	b.n	8010ba0 <prvCopyDataToQueue+0x14>
 8010c02:	bf00      	nop

08010c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010c06:	b172      	cbz	r2, 8010c26 <prvCopyDataFromQueue+0x22>
 8010c08:	460b      	mov	r3, r1
{
 8010c0a:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c0c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c10:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c12:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c14:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c16:	d301      	bcc.n	8010c1c <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c18:	6801      	ldr	r1, [r0, #0]
 8010c1a:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c1c:	4618      	mov	r0, r3
	}
}
 8010c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c22:	f00e bd16 	b.w	801f652 <memcpy>
 8010c26:	4770      	bx	lr

08010c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c2c:	f001 feb2 	bl	8012994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c30:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8010c34:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c36:	2c00      	cmp	r4, #0
 8010c38:	dd16      	ble.n	8010c68 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c3c:	b1a3      	cbz	r3, 8010c68 <prvUnlockQueue+0x40>
 8010c3e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8010c42:	e005      	b.n	8010c50 <prvUnlockQueue+0x28>
 8010c44:	3c01      	subs	r4, #1
 8010c46:	b2e3      	uxtb	r3, r4
 8010c48:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c4a:	b16b      	cbz	r3, 8010c68 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c4e:	b15b      	cbz	r3, 8010c68 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c50:	4630      	mov	r0, r6
 8010c52:	f001 f919 	bl	8011e88 <xTaskRemoveFromEventList>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d0f4      	beq.n	8010c44 <prvUnlockQueue+0x1c>
 8010c5a:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c5c:	f001 f9b2 	bl	8011fc4 <vTaskMissedYield>
 8010c60:	b2e3      	uxtb	r3, r4
 8010c62:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1f1      	bne.n	8010c4c <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c68:	23ff      	movs	r3, #255	; 0xff
 8010c6a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010c6e:	f001 feb7 	bl	80129e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c72:	f001 fe8f 	bl	8012994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c76:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8010c7a:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c7c:	2c00      	cmp	r4, #0
 8010c7e:	dd16      	ble.n	8010cae <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c80:	692b      	ldr	r3, [r5, #16]
 8010c82:	b1a3      	cbz	r3, 8010cae <prvUnlockQueue+0x86>
 8010c84:	f105 0610 	add.w	r6, r5, #16
 8010c88:	e005      	b.n	8010c96 <prvUnlockQueue+0x6e>
 8010c8a:	3c01      	subs	r4, #1
 8010c8c:	b2e3      	uxtb	r3, r4
 8010c8e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c90:	b16b      	cbz	r3, 8010cae <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c92:	692b      	ldr	r3, [r5, #16]
 8010c94:	b15b      	cbz	r3, 8010cae <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c96:	4630      	mov	r0, r6
 8010c98:	f001 f8f6 	bl	8011e88 <xTaskRemoveFromEventList>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d0f4      	beq.n	8010c8a <prvUnlockQueue+0x62>
 8010ca0:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8010ca2:	f001 f98f 	bl	8011fc4 <vTaskMissedYield>
 8010ca6:	b2e3      	uxtb	r3, r4
 8010ca8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d1f1      	bne.n	8010c92 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010cae:	23ff      	movs	r3, #255	; 0xff
 8010cb0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8010cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010cb8:	f001 be92 	b.w	80129e0 <vPortExitCritical>

08010cbc <xQueueGenericReset>:
{
 8010cbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8010cbe:	b1e0      	cbz	r0, 8010cfa <xQueueGenericReset+0x3e>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8010cc4:	f001 fe66 	bl	8012994 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010cc8:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cca:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010ccc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010cce:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cd0:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8010cd2:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010cd6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cda:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8010cde:	fb03 f301 	mul.w	r3, r3, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce2:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce6:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ce8:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cea:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 8010cec:	b985      	cbnz	r5, 8010d10 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cee:	6923      	ldr	r3, [r4, #16]
 8010cf0:	b9bb      	cbnz	r3, 8010d22 <xQueueGenericReset+0x66>
	taskEXIT_CRITICAL();
 8010cf2:	f001 fe75 	bl	80129e0 <vPortExitCritical>
}
 8010cf6:	2001      	movs	r0, #1
 8010cf8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010cfa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010cfe:	b672      	cpsid	i
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	b662      	cpsie	i
 8010d0e:	e7fe      	b.n	8010d0e <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d10:	f104 0010 	add.w	r0, r4, #16
 8010d14:	f7ff feec 	bl	8010af0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010d1c:	f7ff fee8 	bl	8010af0 <vListInitialise>
 8010d20:	e7e7      	b.n	8010cf2 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d22:	f104 0010 	add.w	r0, r4, #16
 8010d26:	f001 f8af 	bl	8011e88 <xTaskRemoveFromEventList>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d0e1      	beq.n	8010cf2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8010d2e:	4b04      	ldr	r3, [pc, #16]	; (8010d40 <xQueueGenericReset+0x84>)
 8010d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	e7d8      	b.n	8010cf2 <xQueueGenericReset+0x36>
 8010d40:	e000ed04 	.word	0xe000ed04

08010d44 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d44:	b950      	cbnz	r0, 8010d5c <xQueueGenericCreateStatic+0x18>
 8010d46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010d4a:	b672      	cpsid	i
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	b662      	cpsie	i
 8010d5a:	e7fe      	b.n	8010d5a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8010d5c:	b163      	cbz	r3, 8010d78 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d5e:	b1b2      	cbz	r2, 8010d8e <xQueueGenericCreateStatic+0x4a>
 8010d60:	b9a9      	cbnz	r1, 8010d8e <xQueueGenericCreateStatic+0x4a>
 8010d62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	e7fe      	b.n	8010d76 <xQueueGenericCreateStatic+0x32>
 8010d78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	e7fe      	b.n	8010d8c <xQueueGenericCreateStatic+0x48>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d8e:	b95a      	cbnz	r2, 8010da8 <xQueueGenericCreateStatic+0x64>
 8010d90:	b151      	cbz	r1, 8010da8 <xQueueGenericCreateStatic+0x64>
 8010d92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010d96:	b672      	cpsid	i
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	b662      	cpsie	i
 8010da6:	e7fe      	b.n	8010da6 <xQueueGenericCreateStatic+0x62>
	{
 8010da8:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010daa:	2448      	movs	r4, #72	; 0x48
	{
 8010dac:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010dae:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010db0:	9c01      	ldr	r4, [sp, #4]
 8010db2:	2c48      	cmp	r4, #72	; 0x48
 8010db4:	d00a      	beq.n	8010dcc <xQueueGenericCreateStatic+0x88>
 8010db6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010dba:	b672      	cpsid	i
 8010dbc:	f383 8811 	msr	BASEPRI, r3
 8010dc0:	f3bf 8f6f 	isb	sy
 8010dc4:	f3bf 8f4f 	dsb	sy
 8010dc8:	b662      	cpsie	i
 8010dca:	e7fe      	b.n	8010dca <xQueueGenericCreateStatic+0x86>
 8010dcc:	461c      	mov	r4, r3
 8010dce:	4613      	mov	r3, r2
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010dd0:	2501      	movs	r5, #1
 8010dd2:	460a      	mov	r2, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010dd4:	2900      	cmp	r1, #0
 8010dd6:	bf08      	it	eq
 8010dd8:	4623      	moveq	r3, r4
	pxNewQueue->uxLength = uxQueueLength;
 8010dda:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ddc:	4629      	mov	r1, r5
 8010dde:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010de0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8010de2:	6422      	str	r2, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010de4:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010de8:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010dea:	f7ff ff67 	bl	8010cbc <xQueueGenericReset>
	}
 8010dee:	4620      	mov	r0, r4
 8010df0:	b003      	add	sp, #12
 8010df2:	bd30      	pop	{r4, r5, pc}

08010df4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010df4:	b950      	cbnz	r0, 8010e0c <xQueueGenericCreate+0x18>
 8010df6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010dfa:	b672      	cpsid	i
 8010dfc:	f383 8811 	msr	BASEPRI, r3
 8010e00:	f3bf 8f6f 	isb	sy
 8010e04:	f3bf 8f4f 	dsb	sy
 8010e08:	b662      	cpsie	i
 8010e0a:	e7fe      	b.n	8010e0a <xQueueGenericCreate+0x16>
	{
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	4606      	mov	r6, r0
 8010e10:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8010e12:	b169      	cbz	r1, 8010e30 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e14:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e18:	3048      	adds	r0, #72	; 0x48
 8010e1a:	f001 ff23 	bl	8012c64 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010e1e:	4604      	mov	r4, r0
 8010e20:	b1b0      	cbz	r0, 8010e50 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e22:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e24:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e28:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e2c:	6003      	str	r3, [r0, #0]
 8010e2e:	e007      	b.n	8010e40 <xQueueGenericCreate+0x4c>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e30:	2048      	movs	r0, #72	; 0x48
 8010e32:	f001 ff17 	bl	8012c64 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010e36:	4604      	mov	r4, r0
 8010e38:	b150      	cbz	r0, 8010e50 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e3a:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e3e:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8010e40:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e42:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8010e44:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7ff ff38 	bl	8010cbc <xQueueGenericReset>
	}
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e50:	2400      	movs	r4, #0
	}
 8010e52:	4620      	mov	r0, r4
 8010e54:	bd70      	pop	{r4, r5, r6, pc}
 8010e56:	bf00      	nop

08010e58 <xQueueGenericSend>:
{
 8010e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e5c:	b084      	sub	sp, #16
 8010e5e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f000 80a3 	beq.w	8010fac <xQueueGenericSend+0x154>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e66:	2900      	cmp	r1, #0
 8010e68:	f000 8091 	beq.w	8010f8e <xQueueGenericSend+0x136>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d10d      	bne.n	8010e8c <xQueueGenericSend+0x34>
 8010e70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010e72:	2a01      	cmp	r2, #1
 8010e74:	d00a      	beq.n	8010e8c <xQueueGenericSend+0x34>
 8010e76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010e7a:	b672      	cpsid	i
 8010e7c:	f383 8811 	msr	BASEPRI, r3
 8010e80:	f3bf 8f6f 	isb	sy
 8010e84:	f3bf 8f4f 	dsb	sy
 8010e88:	b662      	cpsie	i
 8010e8a:	e7fe      	b.n	8010e8a <xQueueGenericSend+0x32>
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	461e      	mov	r6, r3
 8010e90:	4689      	mov	r9, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e92:	f001 f8a3 	bl	8011fdc <xTaskGetSchedulerState>
 8010e96:	b960      	cbnz	r0, 8010eb2 <xQueueGenericSend+0x5a>
 8010e98:	9b01      	ldr	r3, [sp, #4]
 8010e9a:	b153      	cbz	r3, 8010eb2 <xQueueGenericSend+0x5a>
 8010e9c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010ea0:	b672      	cpsid	i
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	b662      	cpsie	i
 8010eb0:	e7fe      	b.n	8010eb0 <xQueueGenericSend+0x58>
 8010eb2:	f1a6 0502 	sub.w	r5, r6, #2
{
 8010eb6:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8010eb8:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8010fe8 <xQueueGenericSend+0x190>
 8010ebc:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 8010ec0:	46b8      	mov	r8, r7
 8010ec2:	096d      	lsrs	r5, r5, #5
 8010ec4:	e007      	b.n	8010ed6 <xQueueGenericSend+0x7e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010ec6:	f001 fd8b 	bl	80129e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f7ff feac 	bl	8010c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ed0:	f000 fea8 	bl	8011c24 <xTaskResumeAll>
 8010ed4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8010ed6:	f001 fd5d 	bl	8012994 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010eda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d33f      	bcc.n	8010f62 <xQueueGenericSend+0x10a>
 8010ee2:	2d00      	cmp	r5, #0
 8010ee4:	d13d      	bne.n	8010f62 <xQueueGenericSend+0x10a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d06a      	beq.n	8010fc2 <xQueueGenericSend+0x16a>
				else if( xEntryTimeSet == pdFALSE )
 8010eec:	b917      	cbnz	r7, 8010ef4 <xQueueGenericSend+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010eee:	a802      	add	r0, sp, #8
 8010ef0:	f001 f812 	bl	8011f18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010ef4:	f001 fd74 	bl	80129e0 <vPortExitCritical>
		vTaskSuspendAll();
 8010ef8:	f000 fdd4 	bl	8011aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010efc:	f001 fd4a 	bl	8012994 <vPortEnterCritical>
 8010f00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010f04:	2bff      	cmp	r3, #255	; 0xff
 8010f06:	d101      	bne.n	8010f0c <xQueueGenericSend+0xb4>
 8010f08:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8010f0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010f10:	2bff      	cmp	r3, #255	; 0xff
 8010f12:	d101      	bne.n	8010f18 <xQueueGenericSend+0xc0>
 8010f14:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8010f18:	f001 fd62 	bl	80129e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f1c:	a901      	add	r1, sp, #4
 8010f1e:	a802      	add	r0, sp, #8
 8010f20:	f001 f806 	bl	8011f30 <xTaskCheckForTimeOut>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d157      	bne.n	8010fd8 <xQueueGenericSend+0x180>
	taskENTER_CRITICAL();
 8010f28:	f001 fd34 	bl	8012994 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d1c8      	bne.n	8010ec6 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 8010f34:	f001 fd54 	bl	80129e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010f38:	9901      	ldr	r1, [sp, #4]
 8010f3a:	f104 0010 	add.w	r0, r4, #16
 8010f3e:	f000 ff67 	bl	8011e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f42:	4620      	mov	r0, r4
 8010f44:	f7ff fe70 	bl	8010c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f48:	f000 fe6c 	bl	8011c24 <xTaskResumeAll>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d1c1      	bne.n	8010ed4 <xQueueGenericSend+0x7c>
					portYIELD_WITHIN_API();
 8010f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f54:	f8ca 3000 	str.w	r3, [sl]
 8010f58:	f3bf 8f4f 	dsb	sy
 8010f5c:	f3bf 8f6f 	isb	sy
 8010f60:	e7b8      	b.n	8010ed4 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f62:	4632      	mov	r2, r6
 8010f64:	4649      	mov	r1, r9
 8010f66:	4620      	mov	r0, r4
 8010f68:	f7ff fe10 	bl	8010b8c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f6e:	bb63      	cbnz	r3, 8010fca <xQueueGenericSend+0x172>
					else if( xYieldRequired != pdFALSE )
 8010f70:	b138      	cbz	r0, 8010f82 <xQueueGenericSend+0x12a>
						queueYIELD_IF_USING_PREEMPTION();
 8010f72:	4b1d      	ldr	r3, [pc, #116]	; (8010fe8 <xQueueGenericSend+0x190>)
 8010f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010f82:	f001 fd2d 	bl	80129e0 <vPortExitCritical>
				return pdPASS;
 8010f86:	2001      	movs	r0, #1
}
 8010f88:	b004      	add	sp, #16
 8010f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f8e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010f90:	2a00      	cmp	r2, #0
 8010f92:	f43f af6b 	beq.w	8010e6c <xQueueGenericSend+0x14>
 8010f96:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010f9a:	b672      	cpsid	i
 8010f9c:	f383 8811 	msr	BASEPRI, r3
 8010fa0:	f3bf 8f6f 	isb	sy
 8010fa4:	f3bf 8f4f 	dsb	sy
 8010fa8:	b662      	cpsie	i
 8010faa:	e7fe      	b.n	8010faa <xQueueGenericSend+0x152>
 8010fac:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010fb0:	b672      	cpsid	i
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	b662      	cpsie	i
 8010fc0:	e7fe      	b.n	8010fc0 <xQueueGenericSend+0x168>
					taskEXIT_CRITICAL();
 8010fc2:	f001 fd0d 	bl	80129e0 <vPortExitCritical>
					return errQUEUE_FULL;
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	e7de      	b.n	8010f88 <xQueueGenericSend+0x130>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010fce:	f000 ff5b 	bl	8011e88 <xTaskRemoveFromEventList>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d1cd      	bne.n	8010f72 <xQueueGenericSend+0x11a>
 8010fd6:	e7d4      	b.n	8010f82 <xQueueGenericSend+0x12a>
			prvUnlockQueue( pxQueue );
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f7ff fe25 	bl	8010c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010fde:	f000 fe21 	bl	8011c24 <xTaskResumeAll>
			return errQUEUE_FULL;
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	e7d0      	b.n	8010f88 <xQueueGenericSend+0x130>
 8010fe6:	bf00      	nop
 8010fe8:	e000ed04 	.word	0xe000ed04

08010fec <xQueueCreateMutexStatic>:
	{
 8010fec:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010fee:	2200      	movs	r2, #0
	{
 8010ff0:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	9000      	str	r0, [sp, #0]
 8010ff6:	4611      	mov	r1, r2
 8010ff8:	2001      	movs	r0, #1
 8010ffa:	f7ff fea3 	bl	8010d44 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8010ffe:	4604      	mov	r4, r0
 8011000:	b138      	cbz	r0, 8011012 <xQueueCreateMutexStatic+0x26>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011006:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011008:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801100a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801100c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801100e:	f7ff ff23 	bl	8010e58 <xQueueGenericSend>
	}
 8011012:	4620      	mov	r0, r4
 8011014:	b002      	add	sp, #8
 8011016:	bd10      	pop	{r4, pc}

08011018 <xQueueCreateMutex>:
	{
 8011018:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801101a:	4602      	mov	r2, r0
 801101c:	2100      	movs	r1, #0
 801101e:	2001      	movs	r0, #1
 8011020:	f7ff fee8 	bl	8010df4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8011024:	4604      	mov	r4, r0
 8011026:	b138      	cbz	r0, 8011038 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011028:	2300      	movs	r3, #0
 801102a:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801102c:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801102e:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011030:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011032:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011034:	f7ff ff10 	bl	8010e58 <xQueueGenericSend>
	}
 8011038:	4620      	mov	r0, r4
 801103a:	bd10      	pop	{r4, pc}

0801103c <xQueueGenericSendFromISR>:
{
 801103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011040:	2800      	cmp	r0, #0
 8011042:	d03e      	beq.n	80110c2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011044:	b379      	cbz	r1, 80110a6 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011046:	2b02      	cmp	r3, #2
 8011048:	d10d      	bne.n	8011066 <xQueueGenericSendFromISR+0x2a>
 801104a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801104c:	2c01      	cmp	r4, #1
 801104e:	d00a      	beq.n	8011066 <xQueueGenericSendFromISR+0x2a>
 8011050:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011054:	b672      	cpsid	i
 8011056:	f383 8811 	msr	BASEPRI, r3
 801105a:	f3bf 8f6f 	isb	sy
 801105e:	f3bf 8f4f 	dsb	sy
 8011062:	b662      	cpsie	i
 8011064:	e7fe      	b.n	8011064 <xQueueGenericSendFromISR+0x28>
 8011066:	4604      	mov	r4, r0
 8011068:	461f      	mov	r7, r3
 801106a:	4690      	mov	r8, r2
 801106c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801106e:	f001 fd9f 	bl	8012bb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011072:	f3ef 8611 	mrs	r6, BASEPRI
 8011076:	f04f 0330 	mov.w	r3, #48	; 0x30
 801107a:	b672      	cpsid	i
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801108a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801108c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801108e:	429a      	cmp	r2, r3
 8011090:	d322      	bcc.n	80110d8 <xQueueGenericSendFromISR+0x9c>
 8011092:	f1a7 0002 	sub.w	r0, r7, #2
 8011096:	fab0 f080 	clz	r0, r0
 801109a:	0940      	lsrs	r0, r0, #5
 801109c:	b9e0      	cbnz	r0, 80110d8 <xQueueGenericSendFromISR+0x9c>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801109e:	f386 8811 	msr	BASEPRI, r6
}
 80110a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80110a8:	2c00      	cmp	r4, #0
 80110aa:	d0cc      	beq.n	8011046 <xQueueGenericSendFromISR+0xa>
	__asm volatile
 80110ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80110b0:	b672      	cpsid	i
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	b662      	cpsie	i
 80110c0:	e7fe      	b.n	80110c0 <xQueueGenericSendFromISR+0x84>
 80110c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80110c6:	b672      	cpsid	i
 80110c8:	f383 8811 	msr	BASEPRI, r3
 80110cc:	f3bf 8f6f 	isb	sy
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	b662      	cpsie	i
 80110d6:	e7fe      	b.n	80110d6 <xQueueGenericSendFromISR+0x9a>
			const int8_t cTxLock = pxQueue->cTxLock;
 80110d8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80110dc:	463a      	mov	r2, r7
 80110de:	4649      	mov	r1, r9
 80110e0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80110e2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80110e4:	f7ff fd52 	bl	8010b8c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80110e8:	1c6b      	adds	r3, r5, #1
 80110ea:	d008      	beq.n	80110fe <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110ec:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80110ee:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110f0:	b25b      	sxtb	r3, r3
 80110f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80110f6:	f386 8811 	msr	BASEPRI, r6
}
 80110fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011100:	b90b      	cbnz	r3, 8011106 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8011102:	2001      	movs	r0, #1
 8011104:	e7cb      	b.n	801109e <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011106:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801110a:	f000 febd 	bl	8011e88 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801110e:	2800      	cmp	r0, #0
 8011110:	d0f7      	beq.n	8011102 <xQueueGenericSendFromISR+0xc6>
 8011112:	f1b8 0f00 	cmp.w	r8, #0
 8011116:	d0f4      	beq.n	8011102 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011118:	2001      	movs	r0, #1
 801111a:	f8c8 0000 	str.w	r0, [r8]
 801111e:	e7be      	b.n	801109e <xQueueGenericSendFromISR+0x62>

08011120 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8011120:	2800      	cmp	r0, #0
 8011122:	d032      	beq.n	801118a <xQueueGiveFromISR+0x6a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8011124:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011126:	b153      	cbz	r3, 801113e <xQueueGiveFromISR+0x1e>
	__asm volatile
 8011128:	f04f 0330 	mov.w	r3, #48	; 0x30
 801112c:	b672      	cpsid	i
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	b662      	cpsie	i
 801113c:	e7fe      	b.n	801113c <xQueueGiveFromISR+0x1c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801113e:	6803      	ldr	r3, [r0, #0]
 8011140:	b373      	cbz	r3, 80111a0 <xQueueGiveFromISR+0x80>
{
 8011142:	b570      	push	{r4, r5, r6, lr}
 8011144:	4604      	mov	r4, r0
 8011146:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011148:	f001 fd32 	bl	8012bb0 <vPortValidateInterruptPriority>
	__asm volatile
 801114c:	f3ef 8611 	mrs	r6, BASEPRI
 8011150:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011154:	b672      	cpsid	i
 8011156:	f383 8811 	msr	BASEPRI, r3
 801115a:	f3bf 8f6f 	isb	sy
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011168:	4293      	cmp	r3, r2
 801116a:	d92b      	bls.n	80111c4 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 801116c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011170:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8011172:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011174:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8011176:	1c5a      	adds	r2, r3, #1
 8011178:	d020      	beq.n	80111bc <xQueueGiveFromISR+0x9c>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801117a:	3301      	adds	r3, #1
			xReturn = pdPASS;
 801117c:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801117e:	b25b      	sxtb	r3, r3
 8011180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8011184:	f386 8811 	msr	BASEPRI, r6
}
 8011188:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 801118a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801118e:	b672      	cpsid	i
 8011190:	f383 8811 	msr	BASEPRI, r3
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	b662      	cpsie	i
 801119e:	e7fe      	b.n	801119e <xQueueGiveFromISR+0x7e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80111a0:	6883      	ldr	r3, [r0, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0cd      	beq.n	8011142 <xQueueGiveFromISR+0x22>
 80111a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80111aa:	b672      	cpsid	i
 80111ac:	f383 8811 	msr	BASEPRI, r3
 80111b0:	f3bf 8f6f 	isb	sy
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	b662      	cpsie	i
 80111ba:	e7fe      	b.n	80111ba <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111be:	b91b      	cbnz	r3, 80111c8 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
 80111c0:	2001      	movs	r0, #1
 80111c2:	e7df      	b.n	8011184 <xQueueGiveFromISR+0x64>
			xReturn = errQUEUE_FULL;
 80111c4:	2000      	movs	r0, #0
 80111c6:	e7dd      	b.n	8011184 <xQueueGiveFromISR+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80111cc:	f000 fe5c 	bl	8011e88 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	d0f5      	beq.n	80111c0 <xQueueGiveFromISR+0xa0>
 80111d4:	2800      	cmp	r0, #0
 80111d6:	d0f3      	beq.n	80111c0 <xQueueGiveFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80111d8:	2001      	movs	r0, #1
 80111da:	6028      	str	r0, [r5, #0]
 80111dc:	e7d2      	b.n	8011184 <xQueueGiveFromISR+0x64>
 80111de:	bf00      	nop

080111e0 <xQueueReceive>:
{
 80111e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111e4:	b085      	sub	sp, #20
 80111e6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80111e8:	2800      	cmp	r0, #0
 80111ea:	f000 809f 	beq.w	801132c <xQueueReceive+0x14c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111ee:	2900      	cmp	r1, #0
 80111f0:	f000 808d 	beq.w	801130e <xQueueReceive+0x12e>
 80111f4:	4604      	mov	r4, r0
 80111f6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111f8:	f000 fef0 	bl	8011fdc <xTaskGetSchedulerState>
 80111fc:	b960      	cbnz	r0, 8011218 <xQueueReceive+0x38>
 80111fe:	9b01      	ldr	r3, [sp, #4]
 8011200:	b153      	cbz	r3, 8011218 <xQueueReceive+0x38>
 8011202:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011206:	b672      	cpsid	i
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	b662      	cpsie	i
 8011216:	e7fe      	b.n	8011216 <xQueueReceive+0x36>
		taskENTER_CRITICAL();
 8011218:	f001 fbbc 	bl	8012994 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801121c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801121e:	2d00      	cmp	r5, #0
 8011220:	d144      	bne.n	80112ac <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011222:	9b01      	ldr	r3, [sp, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d06c      	beq.n	8011302 <xQueueReceive+0x122>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011228:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 801122a:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801122c:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8011230:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8011360 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011234:	f000 fe70 	bl	8011f18 <vTaskInternalSetTimeOutState>
 8011238:	e012      	b.n	8011260 <xQueueReceive+0x80>
	taskENTER_CRITICAL();
 801123a:	f001 fbab 	bl	8012994 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801123e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011240:	2b00      	cmp	r3, #0
 8011242:	d048      	beq.n	80112d6 <xQueueReceive+0xf6>
	taskEXIT_CRITICAL();
 8011244:	f001 fbcc 	bl	80129e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff fced 	bl	8010c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801124e:	f000 fce9 	bl	8011c24 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8011252:	f001 fb9f 	bl	8012994 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011256:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011258:	bb45      	cbnz	r5, 80112ac <xQueueReceive+0xcc>
				if( xTicksToWait == ( TickType_t ) 0 )
 801125a:	9b01      	ldr	r3, [sp, #4]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d050      	beq.n	8011302 <xQueueReceive+0x122>
		taskEXIT_CRITICAL();
 8011260:	f001 fbbe 	bl	80129e0 <vPortExitCritical>
		vTaskSuspendAll();
 8011264:	f000 fc1e 	bl	8011aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011268:	f001 fb94 	bl	8012994 <vPortEnterCritical>
 801126c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011270:	2bff      	cmp	r3, #255	; 0xff
 8011272:	d02d      	beq.n	80112d0 <xQueueReceive+0xf0>
 8011274:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011278:	2bff      	cmp	r3, #255	; 0xff
 801127a:	d026      	beq.n	80112ca <xQueueReceive+0xea>
 801127c:	f001 fbb0 	bl	80129e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011280:	a901      	add	r1, sp, #4
 8011282:	a802      	add	r0, sp, #8
 8011284:	f000 fe54 	bl	8011f30 <xTaskCheckForTimeOut>
 8011288:	2800      	cmp	r0, #0
 801128a:	d0d6      	beq.n	801123a <xQueueReceive+0x5a>
			prvUnlockQueue( pxQueue );
 801128c:	4620      	mov	r0, r4
 801128e:	f7ff fccb 	bl	8010c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011292:	f000 fcc7 	bl	8011c24 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8011296:	f001 fb7d 	bl	8012994 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801129a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801129c:	b38b      	cbz	r3, 8011302 <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 801129e:	f001 fb9f 	bl	80129e0 <vPortExitCritical>
		taskENTER_CRITICAL();
 80112a2:	f001 fb77 	bl	8012994 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112a8:	2d00      	cmp	r5, #0
 80112aa:	d0d6      	beq.n	801125a <xQueueReceive+0x7a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112ac:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112ae:	4639      	mov	r1, r7
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff fca7 	bl	8010c04 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112b6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112b8:	6923      	ldr	r3, [r4, #16]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d141      	bne.n	8011342 <xQueueReceive+0x162>
				taskEXIT_CRITICAL();
 80112be:	f001 fb8f 	bl	80129e0 <vPortExitCritical>
				return pdPASS;
 80112c2:	2001      	movs	r0, #1
}
 80112c4:	b005      	add	sp, #20
 80112c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		prvLockQueue( pxQueue );
 80112ca:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 80112ce:	e7d5      	b.n	801127c <xQueueReceive+0x9c>
 80112d0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 80112d4:	e7ce      	b.n	8011274 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 80112d6:	f001 fb83 	bl	80129e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112da:	9901      	ldr	r1, [sp, #4]
 80112dc:	4648      	mov	r0, r9
 80112de:	f000 fd97 	bl	8011e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7ff fca0 	bl	8010c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112e8:	f000 fc9c 	bl	8011c24 <xTaskResumeAll>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d1d8      	bne.n	80112a2 <xQueueReceive+0xc2>
					portYIELD_WITHIN_API();
 80112f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80112f4:	f8c8 3000 	str.w	r3, [r8]
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	f3bf 8f6f 	isb	sy
 8011300:	e7cf      	b.n	80112a2 <xQueueReceive+0xc2>
					taskEXIT_CRITICAL();
 8011302:	f001 fb6d 	bl	80129e0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011306:	2000      	movs	r0, #0
}
 8011308:	b005      	add	sp, #20
 801130a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801130e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011310:	2b00      	cmp	r3, #0
 8011312:	f43f af6f 	beq.w	80111f4 <xQueueReceive+0x14>
 8011316:	f04f 0330 	mov.w	r3, #48	; 0x30
 801131a:	b672      	cpsid	i
 801131c:	f383 8811 	msr	BASEPRI, r3
 8011320:	f3bf 8f6f 	isb	sy
 8011324:	f3bf 8f4f 	dsb	sy
 8011328:	b662      	cpsie	i
 801132a:	e7fe      	b.n	801132a <xQueueReceive+0x14a>
 801132c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011330:	b672      	cpsid	i
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	b662      	cpsie	i
 8011340:	e7fe      	b.n	8011340 <xQueueReceive+0x160>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011342:	f104 0010 	add.w	r0, r4, #16
 8011346:	f000 fd9f 	bl	8011e88 <xTaskRemoveFromEventList>
 801134a:	2800      	cmp	r0, #0
 801134c:	d0b7      	beq.n	80112be <xQueueReceive+0xde>
						queueYIELD_IF_USING_PREEMPTION();
 801134e:	4b04      	ldr	r3, [pc, #16]	; (8011360 <xQueueReceive+0x180>)
 8011350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	e7ae      	b.n	80112be <xQueueReceive+0xde>
 8011360:	e000ed04 	.word	0xe000ed04

08011364 <xQueueSemaphoreTake>:
{
 8011364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011368:	b084      	sub	sp, #16
 801136a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801136c:	b160      	cbz	r0, 8011388 <xQueueSemaphoreTake+0x24>
	configASSERT( pxQueue->uxItemSize == 0 );
 801136e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8011370:	b1ad      	cbz	r5, 801139e <xQueueSemaphoreTake+0x3a>
 8011372:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011376:	b672      	cpsid	i
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	b662      	cpsie	i
 8011386:	e7fe      	b.n	8011386 <xQueueSemaphoreTake+0x22>
 8011388:	f04f 0330 	mov.w	r3, #48	; 0x30
 801138c:	b672      	cpsid	i
 801138e:	f383 8811 	msr	BASEPRI, r3
 8011392:	f3bf 8f6f 	isb	sy
 8011396:	f3bf 8f4f 	dsb	sy
 801139a:	b662      	cpsie	i
 801139c:	e7fe      	b.n	801139c <xQueueSemaphoreTake+0x38>
 801139e:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113a0:	f000 fe1c 	bl	8011fdc <xTaskGetSchedulerState>
 80113a4:	b960      	cbnz	r0, 80113c0 <xQueueSemaphoreTake+0x5c>
 80113a6:	9d01      	ldr	r5, [sp, #4]
 80113a8:	b155      	cbz	r5, 80113c0 <xQueueSemaphoreTake+0x5c>
 80113aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80113ae:	b672      	cpsid	i
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	b662      	cpsie	i
 80113be:	e7fe      	b.n	80113be <xQueueSemaphoreTake+0x5a>
 80113c0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80113c2:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80113c4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 801150c <xQueueSemaphoreTake+0x1a8>
 80113c8:	e00c      	b.n	80113e4 <xQueueSemaphoreTake+0x80>
	taskENTER_CRITICAL();
 80113ca:	f001 fae3 	bl	8012994 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80113ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d039      	beq.n	8011448 <xQueueSemaphoreTake+0xe4>
	taskEXIT_CRITICAL();
 80113d4:	f001 fb04 	bl	80129e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80113d8:	4620      	mov	r0, r4
 80113da:	f7ff fc25 	bl	8010c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80113de:	f000 fc21 	bl	8011c24 <xTaskResumeAll>
 80113e2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80113e4:	f001 fad6 	bl	8012994 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80113e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d171      	bne.n	80114d2 <xQueueSemaphoreTake+0x16e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80113ee:	9b01      	ldr	r3, [sp, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d061      	beq.n	80114b8 <xQueueSemaphoreTake+0x154>
				else if( xEntryTimeSet == pdFALSE )
 80113f4:	b916      	cbnz	r6, 80113fc <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113f6:	a802      	add	r0, sp, #8
 80113f8:	f000 fd8e 	bl	8011f18 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80113fc:	f001 faf0 	bl	80129e0 <vPortExitCritical>
		vTaskSuspendAll();
 8011400:	f000 fb50 	bl	8011aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011404:	f001 fac6 	bl	8012994 <vPortEnterCritical>
 8011408:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801140c:	2bff      	cmp	r3, #255	; 0xff
 801140e:	d101      	bne.n	8011414 <xQueueSemaphoreTake+0xb0>
 8011410:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8011414:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011418:	2bff      	cmp	r3, #255	; 0xff
 801141a:	d101      	bne.n	8011420 <xQueueSemaphoreTake+0xbc>
 801141c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011420:	f001 fade 	bl	80129e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011424:	a901      	add	r1, sp, #4
 8011426:	a802      	add	r0, sp, #8
 8011428:	f000 fd82 	bl	8011f30 <xTaskCheckForTimeOut>
 801142c:	2800      	cmp	r0, #0
 801142e:	d0cc      	beq.n	80113ca <xQueueSemaphoreTake+0x66>
			prvUnlockQueue( pxQueue );
 8011430:	4620      	mov	r0, r4
 8011432:	f7ff fbf9 	bl	8010c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011436:	f000 fbf5 	bl	8011c24 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801143a:	f001 faab 	bl	8012994 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801143e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011440:	b1db      	cbz	r3, 801147a <xQueueSemaphoreTake+0x116>
	taskEXIT_CRITICAL();
 8011442:	f001 facd 	bl	80129e0 <vPortExitCritical>
 8011446:	e7cc      	b.n	80113e2 <xQueueSemaphoreTake+0x7e>
 8011448:	f001 faca 	bl	80129e0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801144c:	6823      	ldr	r3, [r4, #0]
 801144e:	b1db      	cbz	r3, 8011488 <xQueueSemaphoreTake+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011450:	9901      	ldr	r1, [sp, #4]
 8011452:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011456:	f000 fcdb 	bl	8011e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801145a:	4620      	mov	r0, r4
 801145c:	f7ff fbe4 	bl	8010c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011460:	f000 fbe0 	bl	8011c24 <xTaskResumeAll>
 8011464:	2800      	cmp	r0, #0
 8011466:	d1bc      	bne.n	80113e2 <xQueueSemaphoreTake+0x7e>
					portYIELD_WITHIN_API();
 8011468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801146c:	f8c8 3000 	str.w	r3, [r8]
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	f3bf 8f6f 	isb	sy
 8011478:	e7b3      	b.n	80113e2 <xQueueSemaphoreTake+0x7e>
	taskEXIT_CRITICAL();
 801147a:	f001 fab1 	bl	80129e0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801147e:	b965      	cbnz	r5, 801149a <xQueueSemaphoreTake+0x136>
}
 8011480:	4628      	mov	r0, r5
 8011482:	b004      	add	sp, #16
 8011484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskENTER_CRITICAL();
 8011488:	f001 fa84 	bl	8012994 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801148c:	68a0      	ldr	r0, [r4, #8]
 801148e:	f000 fdb5 	bl	8011ffc <xTaskPriorityInherit>
 8011492:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011494:	f001 faa4 	bl	80129e0 <vPortExitCritical>
 8011498:	e7da      	b.n	8011450 <xQueueSemaphoreTake+0xec>
						taskENTER_CRITICAL();
 801149a:	f001 fa7b 	bl	8012994 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801149e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80114a0:	b119      	cbz	r1, 80114aa <xQueueSemaphoreTake+0x146>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80114a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114a4:	6819      	ldr	r1, [r3, #0]
 80114a6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80114aa:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80114ac:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80114ae:	f000 fe5b 	bl	8012168 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80114b2:	f001 fa95 	bl	80129e0 <vPortExitCritical>
 80114b6:	e7e3      	b.n	8011480 <xQueueSemaphoreTake+0x11c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80114b8:	2d00      	cmp	r5, #0
 80114ba:	d0fa      	beq.n	80114b2 <xQueueSemaphoreTake+0x14e>
 80114bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80114c0:	b672      	cpsid	i
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	b662      	cpsie	i
 80114d0:	e7fe      	b.n	80114d0 <xQueueSemaphoreTake+0x16c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80114d2:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114d4:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80114d6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114d8:	b912      	cbnz	r2, 80114e0 <xQueueSemaphoreTake+0x17c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80114da:	f000 fea7 	bl	801222c <pvTaskIncrementMutexHeldCount>
 80114de:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114e0:	6923      	ldr	r3, [r4, #16]
 80114e2:	b91b      	cbnz	r3, 80114ec <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 80114e4:	f001 fa7c 	bl	80129e0 <vPortExitCritical>
				return pdPASS;
 80114e8:	2501      	movs	r5, #1
 80114ea:	e7c9      	b.n	8011480 <xQueueSemaphoreTake+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114ec:	f104 0010 	add.w	r0, r4, #16
 80114f0:	f000 fcca 	bl	8011e88 <xTaskRemoveFromEventList>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d0f5      	beq.n	80114e4 <xQueueSemaphoreTake+0x180>
						queueYIELD_IF_USING_PREEMPTION();
 80114f8:	4b04      	ldr	r3, [pc, #16]	; (801150c <xQueueSemaphoreTake+0x1a8>)
 80114fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114fe:	601a      	str	r2, [r3, #0]
 8011500:	f3bf 8f4f 	dsb	sy
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	e7ec      	b.n	80114e4 <xQueueSemaphoreTake+0x180>
 801150a:	bf00      	nop
 801150c:	e000ed04 	.word	0xe000ed04

08011510 <xQueueReceiveFromISR>:
{
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011514:	b1c8      	cbz	r0, 801154a <xQueueReceiveFromISR+0x3a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011516:	2900      	cmp	r1, #0
 8011518:	d033      	beq.n	8011582 <xQueueReceiveFromISR+0x72>
 801151a:	4605      	mov	r5, r0
 801151c:	4690      	mov	r8, r2
 801151e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011520:	f001 fb46 	bl	8012bb0 <vPortValidateInterruptPriority>
	__asm volatile
 8011524:	f3ef 8711 	mrs	r7, BASEPRI
 8011528:	f04f 0330 	mov.w	r3, #48	; 0x30
 801152c:	b672      	cpsid	i
 801152e:	f383 8811 	msr	BASEPRI, r3
 8011532:	f3bf 8f6f 	isb	sy
 8011536:	f3bf 8f4f 	dsb	sy
 801153a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801153c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801153e:	b97c      	cbnz	r4, 8011560 <xQueueReceiveFromISR+0x50>
			xReturn = pdFAIL;
 8011540:	4620      	mov	r0, r4
	__asm volatile
 8011542:	f387 8811 	msr	BASEPRI, r7
}
 8011546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 801154a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801154e:	b672      	cpsid	i
 8011550:	f383 8811 	msr	BASEPRI, r3
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	b662      	cpsie	i
 801155e:	e7fe      	b.n	801155e <xQueueReceiveFromISR+0x4e>
			const int8_t cRxLock = pxQueue->cRxLock;
 8011560:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011564:	4649      	mov	r1, r9
 8011566:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011568:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 801156a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801156c:	f7ff fb4a 	bl	8010c04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011570:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011572:	1c73      	adds	r3, r6, #1
 8011574:	d013      	beq.n	801159e <xQueueReceiveFromISR+0x8e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011576:	1c73      	adds	r3, r6, #1
			xReturn = pdPASS;
 8011578:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801157a:	b25b      	sxtb	r3, r3
 801157c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8011580:	e7df      	b.n	8011542 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011582:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011584:	2b00      	cmp	r3, #0
 8011586:	d0c8      	beq.n	801151a <xQueueReceiveFromISR+0xa>
 8011588:	f04f 0330 	mov.w	r3, #48	; 0x30
 801158c:	b672      	cpsid	i
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	b662      	cpsie	i
 801159c:	e7fe      	b.n	801159c <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801159e:	692b      	ldr	r3, [r5, #16]
 80115a0:	b90b      	cbnz	r3, 80115a6 <xQueueReceiveFromISR+0x96>
			xReturn = pdPASS;
 80115a2:	2001      	movs	r0, #1
 80115a4:	e7cd      	b.n	8011542 <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115a6:	f105 0010 	add.w	r0, r5, #16
 80115aa:	f000 fc6d 	bl	8011e88 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80115ae:	f1b8 0f00 	cmp.w	r8, #0
 80115b2:	d0f6      	beq.n	80115a2 <xQueueReceiveFromISR+0x92>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d0f4      	beq.n	80115a2 <xQueueReceiveFromISR+0x92>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80115b8:	2001      	movs	r0, #1
 80115ba:	f8c8 0000 	str.w	r0, [r8]
 80115be:	e7c0      	b.n	8011542 <xQueueReceiveFromISR+0x32>

080115c0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115c0:	2300      	movs	r3, #0
 80115c2:	4a08      	ldr	r2, [pc, #32]	; (80115e4 <vQueueAddToRegistry+0x24>)
	{
 80115c4:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80115c6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80115ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80115ce:	b124      	cbz	r4, 80115da <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115d0:	3301      	adds	r3, #1
 80115d2:	2b08      	cmp	r3, #8
 80115d4:	d1f7      	bne.n	80115c6 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80115d6:	bc30      	pop	{r4, r5}
 80115d8:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80115da:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80115dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 80115e0:	bc30      	pop	{r4, r5}
 80115e2:	4770      	bx	lr
 80115e4:	20026a30 	.word	0x20026a30

080115e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	460d      	mov	r5, r1
 80115ee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115f0:	f001 f9d0 	bl	8012994 <vPortEnterCritical>
 80115f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80115f8:	2bff      	cmp	r3, #255	; 0xff
 80115fa:	d102      	bne.n	8011602 <vQueueWaitForMessageRestricted+0x1a>
 80115fc:	2300      	movs	r3, #0
 80115fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011602:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011606:	2bff      	cmp	r3, #255	; 0xff
 8011608:	d102      	bne.n	8011610 <vQueueWaitForMessageRestricted+0x28>
 801160a:	2300      	movs	r3, #0
 801160c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011610:	f001 f9e6 	bl	80129e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011616:	b92b      	cbnz	r3, 8011624 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011618:	4632      	mov	r2, r6
 801161a:	4629      	mov	r1, r5
 801161c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011620:	f000 fc12 	bl	8011e48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011624:	4620      	mov	r0, r4
	}
 8011626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801162a:	f7ff bafd 	b.w	8010c28 <prvUnlockQueue>
 801162e:	bf00      	nop

08011630 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011634:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011636:	f001 f9ad 	bl	8012994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801163a:	4a35      	ldr	r2, [pc, #212]	; (8011710 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 801163c:	4d35      	ldr	r5, [pc, #212]	; (8011714 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 801163e:	6813      	ldr	r3, [r2, #0]
 8011640:	3301      	adds	r3, #1
 8011642:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d034      	beq.n	80116b4 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801164a:	4f33      	ldr	r7, [pc, #204]	; (8011718 <prvAddNewTaskToReadyList+0xe8>)
 801164c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	b343      	cbz	r3, 80116a4 <prvAddNewTaskToReadyList+0x74>
 8011652:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 801173c <prvAddNewTaskToReadyList+0x10c>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011656:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8011740 <prvAddNewTaskToReadyList+0x110>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801165a:	2301      	movs	r3, #1
 801165c:	4e2f      	ldr	r6, [pc, #188]	; (801171c <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 801165e:	f8dc 2000 	ldr.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011662:	4083      	lsls	r3, r0
 8011664:	6831      	ldr	r1, [r6, #0]
 8011666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		uxTaskNumber++;
 801166a:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 801166c:	430b      	orrs	r3, r1
 801166e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8011672:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8011674:	f8cc 2000 	str.w	r2, [ip]
		prvAddTaskToReadyList( pxNewTCB );
 8011678:	6033      	str	r3, [r6, #0]
 801167a:	f7ff fa49 	bl	8010b10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801167e:	f001 f9af 	bl	80129e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	b163      	cbz	r3, 80116a0 <prvAddNewTaskToReadyList+0x70>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011686:	682a      	ldr	r2, [r5, #0]
 8011688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801168a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801168c:	429a      	cmp	r2, r3
 801168e:	d207      	bcs.n	80116a0 <prvAddNewTaskToReadyList+0x70>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011690:	4b23      	ldr	r3, [pc, #140]	; (8011720 <prvAddNewTaskToReadyList+0xf0>)
 8011692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011696:	601a      	str	r2, [r3, #0]
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 801173c <prvAddNewTaskToReadyList+0x10c>
 80116aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ac:	4283      	cmp	r3, r0
 80116ae:	d8d2      	bhi.n	8011656 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 80116b0:	602c      	str	r4, [r5, #0]
 80116b2:	e7d0      	b.n	8011656 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80116b4:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80116b6:	6813      	ldr	r3, [r2, #0]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d004      	beq.n	80116c6 <prvAddNewTaskToReadyList+0x96>
 80116bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80116be:	f8df 807c 	ldr.w	r8, [pc, #124]	; 801173c <prvAddNewTaskToReadyList+0x10c>
 80116c2:	4f15      	ldr	r7, [pc, #84]	; (8011718 <prvAddNewTaskToReadyList+0xe8>)
 80116c4:	e7c7      	b.n	8011656 <prvAddNewTaskToReadyList+0x26>
 80116c6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801173c <prvAddNewTaskToReadyList+0x10c>
 80116ca:	4646      	mov	r6, r8
 80116cc:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116d0:	4630      	mov	r0, r6
 80116d2:	3614      	adds	r6, #20
 80116d4:	f7ff fa0c 	bl	8010af0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116d8:	42b7      	cmp	r7, r6
 80116da:	d1f9      	bne.n	80116d0 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 80116dc:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8011744 <prvAddNewTaskToReadyList+0x114>
	vListInitialise( &xDelayedTaskList2 );
 80116e0:	4e10      	ldr	r6, [pc, #64]	; (8011724 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80116e2:	4648      	mov	r0, r9
 80116e4:	4f0c      	ldr	r7, [pc, #48]	; (8011718 <prvAddNewTaskToReadyList+0xe8>)
 80116e6:	f7ff fa03 	bl	8010af0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7ff fa00 	bl	8010af0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80116f0:	480d      	ldr	r0, [pc, #52]	; (8011728 <prvAddNewTaskToReadyList+0xf8>)
 80116f2:	f7ff f9fd 	bl	8010af0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80116f6:	480d      	ldr	r0, [pc, #52]	; (801172c <prvAddNewTaskToReadyList+0xfc>)
 80116f8:	f7ff f9fa 	bl	8010af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80116fc:	480c      	ldr	r0, [pc, #48]	; (8011730 <prvAddNewTaskToReadyList+0x100>)
 80116fe:	f7ff f9f7 	bl	8010af0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011702:	4a0c      	ldr	r2, [pc, #48]	; (8011734 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011704:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8011706:	f8c2 9000 	str.w	r9, [r2]
 801170a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801170c:	601e      	str	r6, [r3, #0]
 801170e:	e7a2      	b.n	8011656 <prvAddNewTaskToReadyList+0x26>
 8011710:	2000174c 	.word	0x2000174c
 8011714:	200016b4 	.word	0x200016b4
 8011718:	200017a8 	.word	0x200017a8
 801171c:	20001760 	.word	0x20001760
 8011720:	e000ed04 	.word	0xe000ed04
 8011724:	20001778 	.word	0x20001778
 8011728:	20001794 	.word	0x20001794
 801172c:	200017c0 	.word	0x200017c0
 8011730:	200017ac 	.word	0x200017ac
 8011734:	200016b8 	.word	0x200016b8
 8011738:	200016bc 	.word	0x200016bc
 801173c:	200016c0 	.word	0x200016c0
 8011740:	2000175c 	.word	0x2000175c
 8011744:	20001764 	.word	0x20001764

08011748 <prvDeleteTCB>:
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011748:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 801174c:	b173      	cbz	r3, 801176c <prvDeleteTCB+0x24>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801174e:	2b01      	cmp	r3, #1
 8011750:	d016      	beq.n	8011780 <prvDeleteTCB+0x38>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011752:	2b02      	cmp	r3, #2
 8011754:	d016      	beq.n	8011784 <prvDeleteTCB+0x3c>
 8011756:	f04f 0330 	mov.w	r3, #48	; 0x30
 801175a:	b672      	cpsid	i
 801175c:	f383 8811 	msr	BASEPRI, r3
 8011760:	f3bf 8f6f 	isb	sy
 8011764:	f3bf 8f4f 	dsb	sy
 8011768:	b662      	cpsie	i
 801176a:	e7fe      	b.n	801176a <prvDeleteTCB+0x22>
	{
 801176c:	b510      	push	{r4, lr}
 801176e:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 8011770:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011772:	f001 fb15 	bl	8012da0 <vPortFree>
				vPortFree( pxTCB );
 8011776:	4620      	mov	r0, r4
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801177c:	f001 bb10 	b.w	8012da0 <vPortFree>
				vPortFree( pxTCB );
 8011780:	f001 bb0e 	b.w	8012da0 <vPortFree>
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop

08011788 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801178a:	4b1a      	ldr	r3, [pc, #104]	; (80117f4 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 801178c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801178e:	4d1a      	ldr	r5, [pc, #104]	; (80117f8 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8011790:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8011792:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011794:	6828      	ldr	r0, [r5, #0]
 8011796:	3004      	adds	r0, #4
 8011798:	f7ff f9e4 	bl	8010b64 <uxListRemove>
 801179c:	b940      	cbnz	r0, 80117b0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	2201      	movs	r2, #1
 80117a2:	4916      	ldr	r1, [pc, #88]	; (80117fc <prvAddCurrentTaskToDelayedList+0x74>)
 80117a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80117a6:	680b      	ldr	r3, [r1, #0]
 80117a8:	4082      	lsls	r2, r0
 80117aa:	ea23 0302 	bic.w	r3, r3, r2
 80117ae:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80117b0:	1c73      	adds	r3, r6, #1
 80117b2:	d100      	bne.n	80117b6 <prvAddCurrentTaskToDelayedList+0x2e>
 80117b4:	b9bf      	cbnz	r7, 80117e6 <prvAddCurrentTaskToDelayedList+0x5e>
 80117b6:	19a4      	adds	r4, r4, r6
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80117bc:	d20b      	bcs.n	80117d6 <prvAddCurrentTaskToDelayedList+0x4e>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117be:	4b10      	ldr	r3, [pc, #64]	; (8011800 <prvAddCurrentTaskToDelayedList+0x78>)
 80117c0:	6818      	ldr	r0, [r3, #0]
 80117c2:	6829      	ldr	r1, [r5, #0]
 80117c4:	3104      	adds	r1, #4
 80117c6:	f7ff f9b3 	bl	8010b30 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80117ca:	4b0e      	ldr	r3, [pc, #56]	; (8011804 <prvAddCurrentTaskToDelayedList+0x7c>)
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	42a2      	cmp	r2, r4
 80117d0:	d900      	bls.n	80117d4 <prvAddCurrentTaskToDelayedList+0x4c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80117d2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80117d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117d6:	4b0c      	ldr	r3, [pc, #48]	; (8011808 <prvAddCurrentTaskToDelayedList+0x80>)
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	6829      	ldr	r1, [r5, #0]
}
 80117dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117e0:	3104      	adds	r1, #4
 80117e2:	f7ff b9a5 	b.w	8010b30 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117e6:	6829      	ldr	r1, [r5, #0]
 80117e8:	4808      	ldr	r0, [pc, #32]	; (801180c <prvAddCurrentTaskToDelayedList+0x84>)
 80117ea:	3104      	adds	r1, #4
}
 80117ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117f0:	f7ff b98e 	b.w	8010b10 <vListInsertEnd>
 80117f4:	200017d4 	.word	0x200017d4
 80117f8:	200016b4 	.word	0x200016b4
 80117fc:	20001760 	.word	0x20001760
 8011800:	200016b8 	.word	0x200016b8
 8011804:	2000178c 	.word	0x2000178c
 8011808:	200016bc 	.word	0x200016bc
 801180c:	200017ac 	.word	0x200017ac

08011810 <prvIdleTask>:
{
 8011810:	b580      	push	{r7, lr}
 8011812:	4c16      	ldr	r4, [pc, #88]	; (801186c <prvIdleTask+0x5c>)
				taskYIELD();
 8011814:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8011818:	4e15      	ldr	r6, [pc, #84]	; (8011870 <prvIdleTask+0x60>)
 801181a:	4d16      	ldr	r5, [pc, #88]	; (8011874 <prvIdleTask+0x64>)
 801181c:	f8df a058 	ldr.w	sl, [pc, #88]	; 8011878 <prvIdleTask+0x68>
 8011820:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801187c <prvIdleTask+0x6c>
 8011824:	e011      	b.n	801184a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8011826:	f001 f8b5 	bl	8012994 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801182a:	68f3      	ldr	r3, [r6, #12]
 801182c:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801182e:	1d38      	adds	r0, r7, #4
 8011830:	f7ff f998 	bl	8010b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011834:	682b      	ldr	r3, [r5, #0]
 8011836:	3b01      	subs	r3, #1
 8011838:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	3b01      	subs	r3, #1
 801183e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011840:	f001 f8ce 	bl	80129e0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011844:	4638      	mov	r0, r7
 8011846:	f7ff ff7f 	bl	8011748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801184a:	6823      	ldr	r3, [r4, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d1ea      	bne.n	8011826 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011850:	f8da 3000 	ldr.w	r3, [sl]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d905      	bls.n	8011864 <prvIdleTask+0x54>
				taskYIELD();
 8011858:	f8c8 9000 	str.w	r9, [r8]
 801185c:	f3bf 8f4f 	dsb	sy
 8011860:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8011864:	f7ef f9a4 	bl	8000bb0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011868:	e7ef      	b.n	801184a <prvIdleTask+0x3a>
 801186a:	bf00      	nop
 801186c:	20001750 	.word	0x20001750
 8011870:	200017c0 	.word	0x200017c0
 8011874:	2000174c 	.word	0x2000174c
 8011878:	200016c0 	.word	0x200016c0
 801187c:	e000ed04 	.word	0xe000ed04

08011880 <prvResetNextTaskUnblockTime.part.1>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011880:	4a03      	ldr	r2, [pc, #12]	; (8011890 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011882:	4b04      	ldr	r3, [pc, #16]	; (8011894 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011884:	6812      	ldr	r2, [r2, #0]
 8011886:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011888:	68d2      	ldr	r2, [r2, #12]
 801188a:	6852      	ldr	r2, [r2, #4]
 801188c:	601a      	str	r2, [r3, #0]
}
 801188e:	4770      	bx	lr
 8011890:	200016b8 	.word	0x200016b8
 8011894:	2000178c 	.word	0x2000178c

08011898 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801189c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801189e:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80118a2:	4681      	mov	r9, r0
 80118a4:	469a      	mov	sl, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80118a6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80118a8:	4415      	add	r5, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80118aa:	9e08      	ldr	r6, [sp, #32]
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80118ac:	eb07 0785 	add.w	r7, r7, r5, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80118b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80118b4:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 80118b8:	2900      	cmp	r1, #0
 80118ba:	d035      	beq.n	8011928 <prvInitialiseNewTask.isra.2+0x90>
 80118bc:	1e4a      	subs	r2, r1, #1
 80118be:	f104 0033 	add.w	r0, r4, #51	; 0x33
 80118c2:	310f      	adds	r1, #15
 80118c4:	e001      	b.n	80118ca <prvInitialiseNewTask.isra.2+0x32>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80118c6:	428a      	cmp	r2, r1
 80118c8:	d006      	beq.n	80118d8 <prvInitialiseNewTask.isra.2+0x40>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80118ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80118ce:	f800 3f01 	strb.w	r3, [r0, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80118d2:	7815      	ldrb	r5, [r2, #0]
 80118d4:	2d00      	cmp	r5, #0
 80118d6:	d1f6      	bne.n	80118c6 <prvInitialiseNewTask.isra.2+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80118d8:	2300      	movs	r3, #0
 80118da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118de:	2e06      	cmp	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 80118e0:	f04f 0500 	mov.w	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80118e4:	f104 0004 	add.w	r0, r4, #4
 80118e8:	bf28      	it	cs
 80118ea:	2606      	movcs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80118ec:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80118ee:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f2:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80118f6:	f7ff f907 	bl	8010b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80118fa:	f104 0018 	add.w	r0, r4, #24
 80118fe:	f7ff f903 	bl	8010b08 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011902:	64e5      	str	r5, [r4, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011904:	4652      	mov	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011906:	61a6      	str	r6, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011908:	4649      	mov	r1, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801190a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801190e:	4638      	mov	r0, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011910:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011912:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011914:	f001 f814 	bl	8012940 <pxPortInitialiseStack>
 8011918:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801191a:	f1b8 0f00 	cmp.w	r8, #0
 801191e:	d001      	beq.n	8011924 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011920:	f8c8 4000 	str.w	r4, [r8]
}
 8011924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011928:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 801192c:	e7d7      	b.n	80118de <prvInitialiseNewTask.isra.2+0x46>
 801192e:	bf00      	nop

08011930 <xTaskCreateStatic>:
	{
 8011930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011932:	b087      	sub	sp, #28
 8011934:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8011938:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 801193a:	b1dd      	cbz	r5, 8011974 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 801193c:	b17c      	cbz	r4, 801195e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801193e:	2754      	movs	r7, #84	; 0x54
 8011940:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011942:	9f05      	ldr	r7, [sp, #20]
 8011944:	2f54      	cmp	r7, #84	; 0x54
 8011946:	d020      	beq.n	801198a <xTaskCreateStatic+0x5a>
 8011948:	f04f 0330 	mov.w	r3, #48	; 0x30
 801194c:	b672      	cpsid	i
 801194e:	f383 8811 	msr	BASEPRI, r3
 8011952:	f3bf 8f6f 	isb	sy
 8011956:	f3bf 8f4f 	dsb	sy
 801195a:	b662      	cpsie	i
 801195c:	e7fe      	b.n	801195c <xTaskCreateStatic+0x2c>
 801195e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011962:	b672      	cpsid	i
 8011964:	f383 8811 	msr	BASEPRI, r3
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	b662      	cpsie	i
 8011972:	e7fe      	b.n	8011972 <xTaskCreateStatic+0x42>
 8011974:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011978:	b672      	cpsid	i
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	b662      	cpsie	i
 8011988:	e7fe      	b.n	8011988 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801198a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801198c:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801198e:	ad04      	add	r5, sp, #16
 8011990:	9402      	str	r4, [sp, #8]
 8011992:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011994:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011998:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801199a:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801199c:	f7ff ff7c 	bl	8011898 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80119a0:	4620      	mov	r0, r4
 80119a2:	f7ff fe45 	bl	8011630 <prvAddNewTaskToReadyList>
	}
 80119a6:	9804      	ldr	r0, [sp, #16]
 80119a8:	b007      	add	sp, #28
 80119aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119ac <xTaskCreate>:
	{
 80119ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119b0:	4607      	mov	r7, r0
 80119b2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80119b4:	0090      	lsls	r0, r2, #2
	{
 80119b6:	4616      	mov	r6, r2
 80119b8:	4688      	mov	r8, r1
 80119ba:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80119bc:	f001 f952 	bl	8012c64 <pvPortMalloc>
			if( pxStack != NULL )
 80119c0:	b320      	cbz	r0, 8011a0c <xTaskCreate+0x60>
 80119c2:	4605      	mov	r5, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80119c4:	2054      	movs	r0, #84	; 0x54
 80119c6:	f001 f94d 	bl	8012c64 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80119ca:	4604      	mov	r4, r0
 80119cc:	b1b0      	cbz	r0, 80119fc <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80119ce:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80119d0:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80119d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80119d6:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80119d8:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80119dc:	4632      	mov	r2, r6
 80119de:	9501      	str	r5, [sp, #4]
 80119e0:	4641      	mov	r1, r8
 80119e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80119e4:	4638      	mov	r0, r7
 80119e6:	9402      	str	r4, [sp, #8]
 80119e8:	9500      	str	r5, [sp, #0]
 80119ea:	f7ff ff55 	bl	8011898 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80119ee:	4620      	mov	r0, r4
 80119f0:	f7ff fe1e 	bl	8011630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80119f4:	2001      	movs	r0, #1
	}
 80119f6:	b005      	add	sp, #20
 80119f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80119fc:	4628      	mov	r0, r5
 80119fe:	f001 f9cf 	bl	8012da0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011a02:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8011a06:	b005      	add	sp, #20
 8011a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011a0c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8011a10:	e7f1      	b.n	80119f6 <xTaskCreate+0x4a>
 8011a12:	bf00      	nop

08011a14 <vTaskStartScheduler>:
{
 8011a14:	b530      	push	{r4, r5, lr}
 8011a16:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011a18:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011a1a:	aa07      	add	r2, sp, #28
 8011a1c:	a906      	add	r1, sp, #24
 8011a1e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011a20:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011a24:	f7ef f8ca 	bl	8000bbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011a28:	9a07      	ldr	r2, [sp, #28]
 8011a2a:	4623      	mov	r3, r4
 8011a2c:	9400      	str	r4, [sp, #0]
 8011a2e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8011a32:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8011a36:	4916      	ldr	r1, [pc, #88]	; (8011a90 <vTaskStartScheduler+0x7c>)
 8011a38:	4816      	ldr	r0, [pc, #88]	; (8011a94 <vTaskStartScheduler+0x80>)
 8011a3a:	f7ff ff79 	bl	8011930 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011a3e:	b320      	cbz	r0, 8011a8a <vTaskStartScheduler+0x76>
			xReturn = xTimerCreateTimerTask();
 8011a40:	f000 fd04 	bl	801244c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011a44:	2801      	cmp	r0, #1
 8011a46:	d00c      	beq.n	8011a62 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a48:	3001      	adds	r0, #1
 8011a4a:	d11e      	bne.n	8011a8a <vTaskStartScheduler+0x76>
 8011a4c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a50:	b672      	cpsid	i
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	b662      	cpsie	i
 8011a60:	e7fe      	b.n	8011a60 <vTaskStartScheduler+0x4c>
 8011a62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a66:	b672      	cpsid	i
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a76:	4908      	ldr	r1, [pc, #32]	; (8011a98 <vTaskStartScheduler+0x84>)
 8011a78:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8011a7c:	4a07      	ldr	r2, [pc, #28]	; (8011a9c <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a7e:	4b08      	ldr	r3, [pc, #32]	; (8011aa0 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a80:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8011a82:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a84:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011a86:	f001 f82b 	bl	8012ae0 <xPortStartScheduler>
}
 8011a8a:	b009      	add	sp, #36	; 0x24
 8011a8c:	bd30      	pop	{r4, r5, pc}
 8011a8e:	bf00      	nop
 8011a90:	080248dc 	.word	0x080248dc
 8011a94:	08011811 	.word	0x08011811
 8011a98:	2000178c 	.word	0x2000178c
 8011a9c:	200017a8 	.word	0x200017a8
 8011aa0:	200017d4 	.word	0x200017d4

08011aa4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011aa4:	4a02      	ldr	r2, [pc, #8]	; (8011ab0 <vTaskSuspendAll+0xc>)
 8011aa6:	6813      	ldr	r3, [r2, #0]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	6013      	str	r3, [r2, #0]
}
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	20001758 	.word	0x20001758

08011ab4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011ab4:	4b01      	ldr	r3, [pc, #4]	; (8011abc <xTaskGetTickCount+0x8>)
 8011ab6:	6818      	ldr	r0, [r3, #0]
}
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	200017d4 	.word	0x200017d4

08011ac0 <xTaskGetTickCountFromISR>:
{
 8011ac0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ac2:	f001 f875 	bl	8012bb0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8011ac6:	4b01      	ldr	r3, [pc, #4]	; (8011acc <xTaskGetTickCountFromISR+0xc>)
 8011ac8:	6818      	ldr	r0, [r3, #0]
}
 8011aca:	bd08      	pop	{r3, pc}
 8011acc:	200017d4 	.word	0x200017d4

08011ad0 <xTaskIncrementTick>:
{
 8011ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ad4:	4b48      	ldr	r3, [pc, #288]	; (8011bf8 <xTaskIncrementTick+0x128>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	b9bb      	cbnz	r3, 8011b0a <xTaskIncrementTick+0x3a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ada:	4b48      	ldr	r3, [pc, #288]	; (8011bfc <xTaskIncrementTick+0x12c>)
 8011adc:	681e      	ldr	r6, [r3, #0]
 8011ade:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8011ae0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011ae2:	b1fe      	cbz	r6, 8011b24 <xTaskIncrementTick+0x54>
 8011ae4:	4d46      	ldr	r5, [pc, #280]	; (8011c00 <xTaskIncrementTick+0x130>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ae6:	682b      	ldr	r3, [r5, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8011ae8:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011aea:	42b3      	cmp	r3, r6
 8011aec:	d92c      	bls.n	8011b48 <xTaskIncrementTick+0x78>
 8011aee:	4f45      	ldr	r7, [pc, #276]	; (8011c04 <xTaskIncrementTick+0x134>)
 8011af0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8011c1c <xTaskIncrementTick+0x14c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011af4:	f8d8 3000 	ldr.w	r3, [r8]
 8011af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8011b02:	2b02      	cmp	r3, #2
 8011b04:	bf28      	it	cs
 8011b06:	2401      	movcs	r4, #1
 8011b08:	e004      	b.n	8011b14 <xTaskIncrementTick+0x44>
		++uxPendedTicks;
 8011b0a:	4a3f      	ldr	r2, [pc, #252]	; (8011c08 <xTaskIncrementTick+0x138>)
BaseType_t xSwitchRequired = pdFALSE;
 8011b0c:	2400      	movs	r4, #0
		++uxPendedTicks;
 8011b0e:	6813      	ldr	r3, [r2, #0]
 8011b10:	3301      	adds	r3, #1
 8011b12:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 8011b14:	4b3d      	ldr	r3, [pc, #244]	; (8011c0c <xTaskIncrementTick+0x13c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8011b18:	2b00      	cmp	r3, #0
}
 8011b1a:	bf0c      	ite	eq
 8011b1c:	4620      	moveq	r0, r4
 8011b1e:	2001      	movne	r0, #1
 8011b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8011b24:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8011c20 <xTaskIncrementTick+0x150>
 8011b28:	f8db 2000 	ldr.w	r2, [fp]
 8011b2c:	6812      	ldr	r2, [r2, #0]
 8011b2e:	2a00      	cmp	r2, #0
 8011b30:	d04b      	beq.n	8011bca <xTaskIncrementTick+0xfa>
 8011b32:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011b36:	b672      	cpsid	i
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	b662      	cpsie	i
 8011b46:	e7fe      	b.n	8011b46 <xTaskIncrementTick+0x76>
 8011b48:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8011c20 <xTaskIncrementTick+0x150>
 8011b4c:	4f2d      	ldr	r7, [pc, #180]	; (8011c04 <xTaskIncrementTick+0x134>)
 8011b4e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8011c1c <xTaskIncrementTick+0x14c>
 8011b52:	e02f      	b.n	8011bb4 <xTaskIncrementTick+0xe4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b54:	f8db 2000 	ldr.w	r2, [fp]
 8011b58:	68d2      	ldr	r2, [r2, #12]
 8011b5a:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b62:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 8011b66:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b68:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8011b6a:	d32c      	bcc.n	8011bc6 <xTaskIncrementTick+0xf6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b6c:	f7fe fffa 	bl	8010b64 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b70:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b74:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b78:	b109      	cbz	r1, 8011b7e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b7a:	f7fe fff3 	bl	8010b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b7e:	4a24      	ldr	r2, [pc, #144]	; (8011c10 <xTaskIncrementTick+0x140>)
 8011b80:	f04f 0c01 	mov.w	ip, #1
 8011b84:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8011b88:	4651      	mov	r1, sl
 8011b8a:	6813      	ldr	r3, [r2, #0]
 8011b8c:	fa0c fc00 	lsl.w	ip, ip, r0
 8011b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011b94:	ea4c 0c03 	orr.w	ip, ip, r3
 8011b98:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8011b9c:	f8c2 c000 	str.w	ip, [r2]
 8011ba0:	f7fe ffb6 	bl	8010b10 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ba4:	f8d8 0000 	ldr.w	r0, [r8]
 8011ba8:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8011bac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8011bae:	4291      	cmp	r1, r2
 8011bb0:	bf28      	it	cs
 8011bb2:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bb4:	f8db 2000 	ldr.w	r2, [fp]
 8011bb8:	6812      	ldr	r2, [r2, #0]
 8011bba:	2a00      	cmp	r2, #0
 8011bbc:	d1ca      	bne.n	8011b54 <xTaskIncrementTick+0x84>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc2:	602b      	str	r3, [r5, #0]
					break;
 8011bc4:	e796      	b.n	8011af4 <xTaskIncrementTick+0x24>
						xNextTaskUnblockTime = xItemValue;
 8011bc6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011bc8:	e794      	b.n	8011af4 <xTaskIncrementTick+0x24>
			taskSWITCH_DELAYED_LISTS();
 8011bca:	4a12      	ldr	r2, [pc, #72]	; (8011c14 <xTaskIncrementTick+0x144>)
 8011bcc:	f8db 0000 	ldr.w	r0, [fp]
 8011bd0:	4911      	ldr	r1, [pc, #68]	; (8011c18 <xTaskIncrementTick+0x148>)
 8011bd2:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8011bd4:	4d0a      	ldr	r5, [pc, #40]	; (8011c00 <xTaskIncrementTick+0x130>)
			taskSWITCH_DELAYED_LISTS();
 8011bd6:	f8cb 4000 	str.w	r4, [fp]
 8011bda:	6010      	str	r0, [r2, #0]
 8011bdc:	680a      	ldr	r2, [r1, #0]
 8011bde:	3201      	adds	r2, #1
 8011be0:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011be2:	f8db 3000 	ldr.w	r3, [fp]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	b91b      	cbnz	r3, 8011bf2 <xTaskIncrementTick+0x122>
		xNextTaskUnblockTime = portMAX_DELAY;
 8011bea:	f04f 33ff 	mov.w	r3, #4294967295
 8011bee:	602b      	str	r3, [r5, #0]
 8011bf0:	e779      	b.n	8011ae6 <xTaskIncrementTick+0x16>
 8011bf2:	f7ff fe45 	bl	8011880 <prvResetNextTaskUnblockTime.part.1>
 8011bf6:	e776      	b.n	8011ae6 <xTaskIncrementTick+0x16>
 8011bf8:	20001758 	.word	0x20001758
 8011bfc:	200017d4 	.word	0x200017d4
 8011c00:	2000178c 	.word	0x2000178c
 8011c04:	200016c0 	.word	0x200016c0
 8011c08:	20001754 	.word	0x20001754
 8011c0c:	200017d8 	.word	0x200017d8
 8011c10:	20001760 	.word	0x20001760
 8011c14:	200016bc 	.word	0x200016bc
 8011c18:	20001790 	.word	0x20001790
 8011c1c:	200016b4 	.word	0x200016b4
 8011c20:	200016b8 	.word	0x200016b8

08011c24 <xTaskResumeAll>:
{
 8011c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8011c28:	4c36      	ldr	r4, [pc, #216]	; (8011d04 <xTaskResumeAll+0xe0>)
 8011c2a:	6823      	ldr	r3, [r4, #0]
 8011c2c:	b953      	cbnz	r3, 8011c44 <xTaskResumeAll+0x20>
 8011c2e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011c32:	b672      	cpsid	i
 8011c34:	f383 8811 	msr	BASEPRI, r3
 8011c38:	f3bf 8f6f 	isb	sy
 8011c3c:	f3bf 8f4f 	dsb	sy
 8011c40:	b662      	cpsie	i
 8011c42:	e7fe      	b.n	8011c42 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8011c44:	f000 fea6 	bl	8012994 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011c48:	6823      	ldr	r3, [r4, #0]
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c4e:	6824      	ldr	r4, [r4, #0]
 8011c50:	bb74      	cbnz	r4, 8011cb0 <xTaskResumeAll+0x8c>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011c52:	4b2d      	ldr	r3, [pc, #180]	; (8011d08 <xTaskResumeAll+0xe4>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	b35b      	cbz	r3, 8011cb0 <xTaskResumeAll+0x8c>
 8011c58:	4d2c      	ldr	r5, [pc, #176]	; (8011d0c <xTaskResumeAll+0xe8>)
 8011c5a:	4f2d      	ldr	r7, [pc, #180]	; (8011d10 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8011c5c:	4e2d      	ldr	r6, [pc, #180]	; (8011d14 <xTaskResumeAll+0xf0>)
 8011c5e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011d28 <xTaskResumeAll+0x104>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c62:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8011d2c <xTaskResumeAll+0x108>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c66:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8011c68:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c6c:	b333      	cbz	r3, 8011cbc <xTaskResumeAll+0x98>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c72:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c76:	f104 0018 	add.w	r0, r4, #24
 8011c7a:	f7fe ff73 	bl	8010b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c7e:	4650      	mov	r0, sl
 8011c80:	f7fe ff70 	bl	8010b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011c86:	6832      	ldr	r2, [r6, #0]
 8011c88:	4651      	mov	r1, sl
 8011c8a:	fa08 f300 	lsl.w	r3, r8, r0
 8011c8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011c92:	4313      	orrs	r3, r2
 8011c94:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8011c98:	6033      	str	r3, [r6, #0]
 8011c9a:	f7fe ff39 	bl	8010b10 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c9e:	f8db 3000 	ldr.w	r3, [fp]
 8011ca2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d3dd      	bcc.n	8011c66 <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8011caa:	f8c5 8000 	str.w	r8, [r5]
 8011cae:	e7da      	b.n	8011c66 <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8011cb0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011cb2:	f000 fe95 	bl	80129e0 <vPortExitCritical>
}
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8011cbc:	b13c      	cbz	r4, 8011cce <xTaskResumeAll+0xaa>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011cbe:	4b16      	ldr	r3, [pc, #88]	; (8011d18 <xTaskResumeAll+0xf4>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	b9db      	cbnz	r3, 8011cfe <xTaskResumeAll+0xda>
		xNextTaskUnblockTime = portMAX_DELAY;
 8011cc6:	4b15      	ldr	r3, [pc, #84]	; (8011d1c <xTaskResumeAll+0xf8>)
 8011cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011ccc:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011cce:	4e14      	ldr	r6, [pc, #80]	; (8011d20 <xTaskResumeAll+0xfc>)
 8011cd0:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011cd2:	b13c      	cbz	r4, 8011ce4 <xTaskResumeAll+0xc0>
								xYieldPending = pdTRUE;
 8011cd4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011cd6:	f7ff fefb 	bl	8011ad0 <xTaskIncrementTick>
 8011cda:	b100      	cbz	r0, 8011cde <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 8011cdc:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011cde:	3c01      	subs	r4, #1
 8011ce0:	d1f9      	bne.n	8011cd6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8011ce2:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8011ce4:	682b      	ldr	r3, [r5, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d0e2      	beq.n	8011cb0 <xTaskResumeAll+0x8c>
					taskYIELD_IF_USING_PREEMPTION();
 8011cea:	4b0e      	ldr	r3, [pc, #56]	; (8011d24 <xTaskResumeAll+0x100>)
 8011cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011cfa:	2401      	movs	r4, #1
 8011cfc:	e7d9      	b.n	8011cb2 <xTaskResumeAll+0x8e>
 8011cfe:	f7ff fdbf 	bl	8011880 <prvResetNextTaskUnblockTime.part.1>
 8011d02:	e7e4      	b.n	8011cce <xTaskResumeAll+0xaa>
 8011d04:	20001758 	.word	0x20001758
 8011d08:	2000174c 	.word	0x2000174c
 8011d0c:	200017d8 	.word	0x200017d8
 8011d10:	20001794 	.word	0x20001794
 8011d14:	20001760 	.word	0x20001760
 8011d18:	200016b8 	.word	0x200016b8
 8011d1c:	2000178c 	.word	0x2000178c
 8011d20:	20001754 	.word	0x20001754
 8011d24:	e000ed04 	.word	0xe000ed04
 8011d28:	200016c0 	.word	0x200016c0
 8011d2c:	200016b4 	.word	0x200016b4

08011d30 <vTaskDelay>:
	{
 8011d30:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011d32:	b1a8      	cbz	r0, 8011d60 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8011d34:	4b0f      	ldr	r3, [pc, #60]	; (8011d74 <vTaskDelay+0x44>)
 8011d36:	6819      	ldr	r1, [r3, #0]
 8011d38:	b151      	cbz	r1, 8011d50 <vTaskDelay+0x20>
 8011d3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d3e:	b672      	cpsid	i
 8011d40:	f383 8811 	msr	BASEPRI, r3
 8011d44:	f3bf 8f6f 	isb	sy
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	b662      	cpsie	i
 8011d4e:	e7fe      	b.n	8011d4e <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	3201      	adds	r2, #1
 8011d54:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011d56:	f7ff fd17 	bl	8011788 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8011d5a:	f7ff ff63 	bl	8011c24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011d5e:	b938      	cbnz	r0, 8011d70 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8011d60:	4b05      	ldr	r3, [pc, #20]	; (8011d78 <vTaskDelay+0x48>)
 8011d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d66:	601a      	str	r2, [r3, #0]
 8011d68:	f3bf 8f4f 	dsb	sy
 8011d6c:	f3bf 8f6f 	isb	sy
	}
 8011d70:	bd08      	pop	{r3, pc}
 8011d72:	bf00      	nop
 8011d74:	20001758 	.word	0x20001758
 8011d78:	e000ed04 	.word	0xe000ed04

08011d7c <vTaskSwitchContext>:
{
 8011d7c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d7e:	4b1f      	ldr	r3, [pc, #124]	; (8011dfc <vTaskSwitchContext+0x80>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	bb03      	cbnz	r3, 8011dc6 <vTaskSwitchContext+0x4a>
		xYieldPending = pdFALSE;
 8011d84:	4a1e      	ldr	r2, [pc, #120]	; (8011e00 <vTaskSwitchContext+0x84>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8011d86:	4c1f      	ldr	r4, [pc, #124]	; (8011e04 <vTaskSwitchContext+0x88>)
		xYieldPending = pdFALSE;
 8011d88:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011d8a:	6822      	ldr	r2, [r4, #0]
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	6812      	ldr	r2, [r2, #0]
 8011d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d926      	bls.n	8011de4 <vTaskSwitchContext+0x68>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d96:	4b1c      	ldr	r3, [pc, #112]	; (8011e08 <vTaskSwitchContext+0x8c>)
 8011d98:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011d9a:	fab3 f383 	clz	r3, r3
 8011d9e:	b2db      	uxtb	r3, r3
 8011da0:	481a      	ldr	r0, [pc, #104]	; (8011e0c <vTaskSwitchContext+0x90>)
 8011da2:	f1c3 031f 	rsb	r3, r3, #31
 8011da6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011daa:	0092      	lsls	r2, r2, #2
 8011dac:	5881      	ldr	r1, [r0, r2]
 8011dae:	1885      	adds	r5, r0, r2
 8011db0:	b169      	cbz	r1, 8011dce <vTaskSwitchContext+0x52>
 8011db2:	6869      	ldr	r1, [r5, #4]
 8011db4:	3208      	adds	r2, #8
 8011db6:	6849      	ldr	r1, [r1, #4]
 8011db8:	4402      	add	r2, r0
 8011dba:	4291      	cmp	r1, r2
 8011dbc:	6069      	str	r1, [r5, #4]
 8011dbe:	d017      	beq.n	8011df0 <vTaskSwitchContext+0x74>
 8011dc0:	68cb      	ldr	r3, [r1, #12]
 8011dc2:	6023      	str	r3, [r4, #0]
}
 8011dc4:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdTRUE;
 8011dc6:	4b0e      	ldr	r3, [pc, #56]	; (8011e00 <vTaskSwitchContext+0x84>)
 8011dc8:	2201      	movs	r2, #1
 8011dca:	601a      	str	r2, [r3, #0]
}
 8011dcc:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 8011dce:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011dd2:	b672      	cpsid	i
 8011dd4:	f383 8811 	msr	BASEPRI, r3
 8011dd8:	f3bf 8f6f 	isb	sy
 8011ddc:	f3bf 8f4f 	dsb	sy
 8011de0:	b662      	cpsie	i
 8011de2:	e7fe      	b.n	8011de2 <vTaskSwitchContext+0x66>
		taskCHECK_FOR_STACK_OVERFLOW();
 8011de4:	6820      	ldr	r0, [r4, #0]
 8011de6:	6821      	ldr	r1, [r4, #0]
 8011de8:	3134      	adds	r1, #52	; 0x34
 8011dea:	f7ee fee3 	bl	8000bb4 <vApplicationStackOverflowHook>
 8011dee:	e7d2      	b.n	8011d96 <vTaskSwitchContext+0x1a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011df0:	2214      	movs	r2, #20
 8011df2:	6849      	ldr	r1, [r1, #4]
 8011df4:	fb02 0303 	mla	r3, r2, r3, r0
 8011df8:	6059      	str	r1, [r3, #4]
 8011dfa:	e7e1      	b.n	8011dc0 <vTaskSwitchContext+0x44>
 8011dfc:	20001758 	.word	0x20001758
 8011e00:	200017d8 	.word	0x200017d8
 8011e04:	200016b4 	.word	0x200016b4
 8011e08:	20001760 	.word	0x20001760
 8011e0c:	200016c0 	.word	0x200016c0

08011e10 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011e10:	b950      	cbnz	r0, 8011e28 <vTaskPlaceOnEventList+0x18>
 8011e12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e16:	b672      	cpsid	i
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	b662      	cpsie	i
 8011e26:	e7fe      	b.n	8011e26 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e28:	4b06      	ldr	r3, [pc, #24]	; (8011e44 <vTaskPlaceOnEventList+0x34>)
{
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e2e:	6819      	ldr	r1, [r3, #0]
 8011e30:	3118      	adds	r1, #24
 8011e32:	f7fe fe7d 	bl	8010b30 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e36:	4620      	mov	r0, r4
 8011e38:	2101      	movs	r1, #1
}
 8011e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e3e:	f7ff bca3 	b.w	8011788 <prvAddCurrentTaskToDelayedList>
 8011e42:	bf00      	nop
 8011e44:	200016b4 	.word	0x200016b4

08011e48 <vTaskPlaceOnEventListRestricted>:
	{
 8011e48:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8011e4a:	b180      	cbz	r0, 8011e6e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e4c:	4b0d      	ldr	r3, [pc, #52]	; (8011e84 <vTaskPlaceOnEventListRestricted+0x3c>)
 8011e4e:	460d      	mov	r5, r1
 8011e50:	4614      	mov	r4, r2
 8011e52:	6819      	ldr	r1, [r3, #0]
 8011e54:	3118      	adds	r1, #24
 8011e56:	f7fe fe5b 	bl	8010b10 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011e5a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e5c:	4621      	mov	r1, r4
 8011e5e:	bf0c      	ite	eq
 8011e60:	4628      	moveq	r0, r5
 8011e62:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8011e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e6a:	f7ff bc8d 	b.w	8011788 <prvAddCurrentTaskToDelayedList>
 8011e6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011e72:	b672      	cpsid	i
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	b662      	cpsie	i
 8011e82:	e7fe      	b.n	8011e82 <vTaskPlaceOnEventListRestricted+0x3a>
 8011e84:	200016b4 	.word	0x200016b4

08011e88 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e88:	68c3      	ldr	r3, [r0, #12]
{
 8011e8a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011e8e:	b34c      	cbz	r4, 8011ee4 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e90:	f104 0518 	add.w	r5, r4, #24
 8011e94:	4628      	mov	r0, r5
 8011e96:	f7fe fe65 	bl	8010b64 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e9a:	4b19      	ldr	r3, [pc, #100]	; (8011f00 <xTaskRemoveFromEventList+0x78>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	b9e3      	cbnz	r3, 8011eda <xTaskRemoveFromEventList+0x52>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ea0:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011ea2:	4d18      	ldr	r5, [pc, #96]	; (8011f04 <xTaskRemoveFromEventList+0x7c>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	f7fe fe5d 	bl	8010b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011eaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011eac:	2301      	movs	r3, #1
 8011eae:	4631      	mov	r1, r6
 8011eb0:	682e      	ldr	r6, [r5, #0]
 8011eb2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8011eb6:	4093      	lsls	r3, r2
 8011eb8:	4a13      	ldr	r2, [pc, #76]	; (8011f08 <xTaskRemoveFromEventList+0x80>)
 8011eba:	4333      	orrs	r3, r6
 8011ebc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011ec0:	602b      	str	r3, [r5, #0]
 8011ec2:	f7fe fe25 	bl	8010b10 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ec6:	4b11      	ldr	r3, [pc, #68]	; (8011f0c <xTaskRemoveFromEventList+0x84>)
 8011ec8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d913      	bls.n	8011efa <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8011ed2:	4b0f      	ldr	r3, [pc, #60]	; (8011f10 <xTaskRemoveFromEventList+0x88>)
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	6018      	str	r0, [r3, #0]
}
 8011ed8:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011eda:	4629      	mov	r1, r5
 8011edc:	480d      	ldr	r0, [pc, #52]	; (8011f14 <xTaskRemoveFromEventList+0x8c>)
 8011ede:	f7fe fe17 	bl	8010b10 <vListInsertEnd>
 8011ee2:	e7f0      	b.n	8011ec6 <xTaskRemoveFromEventList+0x3e>
 8011ee4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ee8:	b672      	cpsid	i
 8011eea:	f383 8811 	msr	BASEPRI, r3
 8011eee:	f3bf 8f6f 	isb	sy
 8011ef2:	f3bf 8f4f 	dsb	sy
 8011ef6:	b662      	cpsie	i
 8011ef8:	e7fe      	b.n	8011ef8 <xTaskRemoveFromEventList+0x70>
		xReturn = pdFALSE;
 8011efa:	2000      	movs	r0, #0
}
 8011efc:	bd70      	pop	{r4, r5, r6, pc}
 8011efe:	bf00      	nop
 8011f00:	20001758 	.word	0x20001758
 8011f04:	20001760 	.word	0x20001760
 8011f08:	200016c0 	.word	0x200016c0
 8011f0c:	200016b4 	.word	0x200016b4
 8011f10:	200017d8 	.word	0x200017d8
 8011f14:	20001794 	.word	0x20001794

08011f18 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f18:	4a03      	ldr	r2, [pc, #12]	; (8011f28 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f1a:	4b04      	ldr	r3, [pc, #16]	; (8011f2c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f1c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	e9c0 2300 	strd	r2, r3, [r0]
}
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	20001790 	.word	0x20001790
 8011f2c:	200017d4 	.word	0x200017d4

08011f30 <xTaskCheckForTimeOut>:
{
 8011f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8011f32:	b350      	cbz	r0, 8011f8a <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 8011f34:	b1f1      	cbz	r1, 8011f74 <xTaskCheckForTimeOut+0x44>
 8011f36:	460d      	mov	r5, r1
 8011f38:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8011f3a:	f000 fd2b 	bl	8012994 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8011f3e:	f8df c080 	ldr.w	ip, [pc, #128]	; 8011fc0 <xTaskCheckForTimeOut+0x90>
			if( *pxTicksToWait == portMAX_DELAY )
 8011f42:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f44:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8011f46:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8011f4a:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f4c:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8011f50:	d026      	beq.n	8011fa0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f52:	491a      	ldr	r1, [pc, #104]	; (8011fbc <xTaskCheckForTimeOut+0x8c>)
 8011f54:	6822      	ldr	r2, [r4, #0]
 8011f56:	f8d1 e000 	ldr.w	lr, [r1]
 8011f5a:	4572      	cmp	r2, lr
 8011f5c:	d001      	beq.n	8011f62 <xTaskCheckForTimeOut+0x32>
 8011f5e:	42b7      	cmp	r7, r6
 8011f60:	d929      	bls.n	8011fb6 <xTaskCheckForTimeOut+0x86>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011f62:	4283      	cmp	r3, r0
 8011f64:	d81e      	bhi.n	8011fa4 <xTaskCheckForTimeOut+0x74>
			*pxTicksToWait = 0;
 8011f66:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8011f68:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8011f6a:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8011f6c:	f000 fd38 	bl	80129e0 <vPortExitCritical>
}
 8011f70:	4630      	mov	r0, r6
 8011f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011f78:	b672      	cpsid	i
 8011f7a:	f383 8811 	msr	BASEPRI, r3
 8011f7e:	f3bf 8f6f 	isb	sy
 8011f82:	f3bf 8f4f 	dsb	sy
 8011f86:	b662      	cpsie	i
 8011f88:	e7fe      	b.n	8011f88 <xTaskCheckForTimeOut+0x58>
 8011f8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011f8e:	b672      	cpsid	i
 8011f90:	f383 8811 	msr	BASEPRI, r3
 8011f94:	f3bf 8f6f 	isb	sy
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	b662      	cpsie	i
 8011f9e:	e7fe      	b.n	8011f9e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8011fa0:	2600      	movs	r6, #0
 8011fa2:	e7e3      	b.n	8011f6c <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011fa4:	6809      	ldr	r1, [r1, #0]
			*pxTicksToWait -= xElapsedTime;
 8011fa6:	1a1b      	subs	r3, r3, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fa8:	f8dc 2000 	ldr.w	r2, [ip]
			xReturn = pdFALSE;
 8011fac:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8011fae:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fb0:	e9c4 1200 	strd	r1, r2, [r4]
 8011fb4:	e7da      	b.n	8011f6c <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8011fb6:	2601      	movs	r6, #1
 8011fb8:	e7d8      	b.n	8011f6c <xTaskCheckForTimeOut+0x3c>
 8011fba:	bf00      	nop
 8011fbc:	20001790 	.word	0x20001790
 8011fc0:	200017d4 	.word	0x200017d4

08011fc4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011fc4:	4b01      	ldr	r3, [pc, #4]	; (8011fcc <vTaskMissedYield+0x8>)
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	601a      	str	r2, [r3, #0]
}
 8011fca:	4770      	bx	lr
 8011fcc:	200017d8 	.word	0x200017d8

08011fd0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8011fd0:	4b01      	ldr	r3, [pc, #4]	; (8011fd8 <xTaskGetCurrentTaskHandle+0x8>)
 8011fd2:	6818      	ldr	r0, [r3, #0]
	}
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	200016b4 	.word	0x200016b4

08011fdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011fdc:	4b05      	ldr	r3, [pc, #20]	; (8011ff4 <xTaskGetSchedulerState+0x18>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	b133      	cbz	r3, 8011ff0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fe2:	4b05      	ldr	r3, [pc, #20]	; (8011ff8 <xTaskGetSchedulerState+0x1c>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8011fe8:	bf0c      	ite	eq
 8011fea:	2002      	moveq	r0, #2
 8011fec:	2000      	movne	r0, #0
 8011fee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ff0:	2001      	movs	r0, #1
	}
 8011ff2:	4770      	bx	lr
 8011ff4:	200017a8 	.word	0x200017a8
 8011ff8:	20001758 	.word	0x20001758

08011ffc <xTaskPriorityInherit>:
	{
 8011ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8012000:	4607      	mov	r7, r0
 8012002:	b1c8      	cbz	r0, 8012038 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012004:	4c26      	ldr	r4, [pc, #152]	; (80120a0 <xTaskPriorityInherit+0xa4>)
 8012006:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012008:	6821      	ldr	r1, [r4, #0]
 801200a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801200c:	428a      	cmp	r2, r1
 801200e:	d215      	bcs.n	801203c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012010:	6981      	ldr	r1, [r0, #24]
 8012012:	2900      	cmp	r1, #0
 8012014:	db04      	blt.n	8012020 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012016:	6821      	ldr	r1, [r4, #0]
 8012018:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801201a:	f1c1 0107 	rsb	r1, r1, #7
 801201e:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012020:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012024:	4d1f      	ldr	r5, [pc, #124]	; (80120a4 <xTaskPriorityInherit+0xa8>)
 8012026:	6979      	ldr	r1, [r7, #20]
 8012028:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801202c:	4291      	cmp	r1, r2
 801202e:	d00e      	beq.n	801204e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012030:	6822      	ldr	r2, [r4, #0]
				xReturn = pdTRUE;
 8012032:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012034:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012036:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 8012038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801203c:	6822      	ldr	r2, [r4, #0]
 801203e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012040:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8012042:	4298      	cmp	r0, r3
 8012044:	bf2c      	ite	cs
 8012046:	2000      	movcs	r0, #0
 8012048:	2001      	movcc	r0, #1
	}
 801204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801204e:	f107 0804 	add.w	r8, r7, #4
 8012052:	4640      	mov	r0, r8
 8012054:	f7fe fd86 	bl	8010b64 <uxListRemove>
 8012058:	b9f8      	cbnz	r0, 801209a <xTaskPriorityInherit+0x9e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801205a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801205c:	4e12      	ldr	r6, [pc, #72]	; (80120a8 <xTaskPriorityInherit+0xac>)
 801205e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	58eb      	ldr	r3, [r5, r3]
 8012066:	b933      	cbnz	r3, 8012076 <xTaskPriorityInherit+0x7a>
 8012068:	2101      	movs	r1, #1
 801206a:	6833      	ldr	r3, [r6, #0]
 801206c:	fa01 f202 	lsl.w	r2, r1, r2
 8012070:	ea23 0202 	bic.w	r2, r3, r2
 8012074:	6032      	str	r2, [r6, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012076:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012078:	2401      	movs	r4, #1
 801207a:	6833      	ldr	r3, [r6, #0]
 801207c:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801207e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012080:	fa04 f200 	lsl.w	r2, r4, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012084:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801208a:	4313      	orrs	r3, r2
 801208c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8012090:	6033      	str	r3, [r6, #0]
 8012092:	f7fe fd3d 	bl	8010b10 <vListInsertEnd>
				xReturn = pdTRUE;
 8012096:	4620      	mov	r0, r4
 8012098:	e7ce      	b.n	8012038 <xTaskPriorityInherit+0x3c>
 801209a:	4e03      	ldr	r6, [pc, #12]	; (80120a8 <xTaskPriorityInherit+0xac>)
 801209c:	e7eb      	b.n	8012076 <xTaskPriorityInherit+0x7a>
 801209e:	bf00      	nop
 80120a0:	200016b4 	.word	0x200016b4
 80120a4:	200016c0 	.word	0x200016c0
 80120a8:	20001760 	.word	0x20001760

080120ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80120ac:	b178      	cbz	r0, 80120ce <xTaskPriorityDisinherit+0x22>
	{
 80120ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80120b0:	4b2a      	ldr	r3, [pc, #168]	; (801215c <xTaskPriorityDisinherit+0xb0>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4283      	cmp	r3, r0
 80120b6:	d00c      	beq.n	80120d2 <xTaskPriorityDisinherit+0x26>
 80120b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80120bc:	b672      	cpsid	i
 80120be:	f383 8811 	msr	BASEPRI, r3
 80120c2:	f3bf 8f6f 	isb	sy
 80120c6:	f3bf 8f4f 	dsb	sy
 80120ca:	b662      	cpsie	i
 80120cc:	e7fe      	b.n	80120cc <xTaskPriorityDisinherit+0x20>
	BaseType_t xReturn = pdFALSE;
 80120ce:	2000      	movs	r0, #0
	}
 80120d0:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 80120d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120d4:	b953      	cbnz	r3, 80120ec <xTaskPriorityDisinherit+0x40>
 80120d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80120da:	b672      	cpsid	i
 80120dc:	f383 8811 	msr	BASEPRI, r3
 80120e0:	f3bf 8f6f 	isb	sy
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	b662      	cpsie	i
 80120ea:	e7fe      	b.n	80120ea <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80120ee:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80120f2:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120f4:	4291      	cmp	r1, r2
 80120f6:	d000      	beq.n	80120fa <xTaskPriorityDisinherit+0x4e>
 80120f8:	b10b      	cbz	r3, 80120fe <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80120fa:	2000      	movs	r0, #0
	}
 80120fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120fe:	1d07      	adds	r7, r0, #4
 8012100:	4604      	mov	r4, r0
 8012102:	4638      	mov	r0, r7
 8012104:	f7fe fd2e 	bl	8010b64 <uxListRemove>
 8012108:	b1b8      	cbz	r0, 801213a <xTaskPriorityDisinherit+0x8e>
 801210a:	4815      	ldr	r0, [pc, #84]	; (8012160 <xTaskPriorityDisinherit+0xb4>)
 801210c:	4a15      	ldr	r2, [pc, #84]	; (8012164 <xTaskPriorityDisinherit+0xb8>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801210e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8012110:	2501      	movs	r5, #1
 8012112:	f04f 0c14 	mov.w	ip, #20
 8012116:	f8d2 e000 	ldr.w	lr, [r2]
 801211a:	fa05 f603 	lsl.w	r6, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801211e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8012120:	fb0c 0003 	mla	r0, ip, r3, r0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012124:	f1c3 0307 	rsb	r3, r3, #7
					prvAddTaskToReadyList( pxTCB );
 8012128:	ea46 060e 	orr.w	r6, r6, lr
 801212c:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801212e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012130:	6016      	str	r6, [r2, #0]
 8012132:	f7fe fced 	bl	8010b10 <vListInsertEnd>
					xReturn = pdTRUE;
 8012136:	4628      	mov	r0, r5
	}
 8012138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801213a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801213c:	2314      	movs	r3, #20
 801213e:	4808      	ldr	r0, [pc, #32]	; (8012160 <xTaskPriorityDisinherit+0xb4>)
 8012140:	fb03 f301 	mul.w	r3, r3, r1
 8012144:	4a07      	ldr	r2, [pc, #28]	; (8012164 <xTaskPriorityDisinherit+0xb8>)
 8012146:	58c3      	ldr	r3, [r0, r3]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1e0      	bne.n	801210e <xTaskPriorityDisinherit+0x62>
 801214c:	2501      	movs	r5, #1
 801214e:	6813      	ldr	r3, [r2, #0]
 8012150:	408d      	lsls	r5, r1
 8012152:	ea23 0305 	bic.w	r3, r3, r5
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	e7d9      	b.n	801210e <xTaskPriorityDisinherit+0x62>
 801215a:	bf00      	nop
 801215c:	200016b4 	.word	0x200016b4
 8012160:	200016c0 	.word	0x200016c0
 8012164:	20001760 	.word	0x20001760

08012168 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8012168:	b1b8      	cbz	r0, 801219a <vTaskPriorityDisinheritAfterTimeout+0x32>
	{
 801216a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 801216c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801216e:	b954      	cbnz	r4, 8012186 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8012170:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012174:	b672      	cpsid	i
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	b662      	cpsie	i
 8012184:	e7fe      	b.n	8012184 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8012186:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012188:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801218a:	428b      	cmp	r3, r1
 801218c:	bf38      	it	cc
 801218e:	460b      	movcc	r3, r1
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012190:	429a      	cmp	r2, r3
 8012192:	d001      	beq.n	8012198 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8012194:	2c01      	cmp	r4, #1
 8012196:	d001      	beq.n	801219c <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8012198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801219a:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 801219c:	4920      	ldr	r1, [pc, #128]	; (8012220 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 801219e:	6809      	ldr	r1, [r1, #0]
 80121a0:	4281      	cmp	r1, r0
 80121a2:	d022      	beq.n	80121ea <vTaskPriorityDisinheritAfterTimeout+0x82>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121a4:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80121a6:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121a8:	2900      	cmp	r1, #0
 80121aa:	db02      	blt.n	80121b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ac:	f1c3 0307 	rsb	r3, r3, #7
 80121b0:	6183      	str	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121b2:	4e1c      	ldr	r6, [pc, #112]	; (8012224 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80121b4:	2514      	movs	r5, #20
 80121b6:	6943      	ldr	r3, [r0, #20]
 80121b8:	fb05 6202 	mla	r2, r5, r2, r6
 80121bc:	4293      	cmp	r3, r2
 80121be:	d1eb      	bne.n	8012198 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121c0:	1d07      	adds	r7, r0, #4
 80121c2:	4604      	mov	r4, r0
 80121c4:	4638      	mov	r0, r7
 80121c6:	f7fe fccd 	bl	8010b64 <uxListRemove>
 80121ca:	b1c8      	cbz	r0, 8012200 <vTaskPriorityDisinheritAfterTimeout+0x98>
 80121cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80121ce:	4b16      	ldr	r3, [pc, #88]	; (8012228 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
						prvAddTaskToReadyList( pxTCB );
 80121d0:	2201      	movs	r2, #1
 80121d2:	681c      	ldr	r4, [r3, #0]
 80121d4:	2514      	movs	r5, #20
 80121d6:	4639      	mov	r1, r7
 80121d8:	4082      	lsls	r2, r0
 80121da:	fb05 6000 	mla	r0, r5, r0, r6
 80121de:	4322      	orrs	r2, r4
 80121e0:	601a      	str	r2, [r3, #0]
	}
 80121e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80121e6:	f7fe bc93 	b.w	8010b10 <vListInsertEnd>
 80121ea:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121ee:	b672      	cpsid	i
 80121f0:	f383 8811 	msr	BASEPRI, r3
 80121f4:	f3bf 8f6f 	isb	sy
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	b662      	cpsie	i
 80121fe:	e7fe      	b.n	80121fe <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012200:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012202:	2201      	movs	r2, #1
 8012204:	fb05 f500 	mul.w	r5, r5, r0
 8012208:	fa02 f400 	lsl.w	r4, r2, r0
 801220c:	5973      	ldr	r3, [r6, r5]
 801220e:	b10b      	cbz	r3, 8012214 <vTaskPriorityDisinheritAfterTimeout+0xac>
 8012210:	4b05      	ldr	r3, [pc, #20]	; (8012228 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8012212:	e7dd      	b.n	80121d0 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8012214:	4b04      	ldr	r3, [pc, #16]	; (8012228 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	ea22 0204 	bic.w	r2, r2, r4
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	e7d7      	b.n	80121d0 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8012220:	200016b4 	.word	0x200016b4
 8012224:	200016c0 	.word	0x200016c0
 8012228:	20001760 	.word	0x20001760

0801222c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801222c:	4b04      	ldr	r3, [pc, #16]	; (8012240 <pvTaskIncrementMutexHeldCount+0x14>)
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	b11a      	cbz	r2, 801223a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012232:	6819      	ldr	r1, [r3, #0]
 8012234:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8012236:	3201      	adds	r2, #1
 8012238:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 801223a:	6818      	ldr	r0, [r3, #0]
	}
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	200016b4 	.word	0x200016b4

08012244 <ulTaskNotifyTake>:
	{
 8012244:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012246:	4c17      	ldr	r4, [pc, #92]	; (80122a4 <ulTaskNotifyTake+0x60>)
	{
 8012248:	4606      	mov	r6, r0
 801224a:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 801224c:	f000 fba2 	bl	8012994 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012254:	b923      	cbnz	r3, 8012260 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	2101      	movs	r1, #1
 801225a:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 801225e:	b9ad      	cbnz	r5, 801228c <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8012260:	f000 fbbe 	bl	80129e0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8012264:	f000 fb96 	bl	8012994 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 801226c:	b11d      	cbz	r5, 8012276 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801226e:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8012270:	b94e      	cbnz	r6, 8012286 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8012272:	1e6a      	subs	r2, r5, #1
 8012274:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	2200      	movs	r2, #0
 801227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 801227e:	f000 fbaf 	bl	80129e0 <vPortExitCritical>
	}
 8012282:	4628      	mov	r0, r5
 8012284:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012286:	2200      	movs	r2, #0
 8012288:	64da      	str	r2, [r3, #76]	; 0x4c
 801228a:	e7f4      	b.n	8012276 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801228c:	4628      	mov	r0, r5
 801228e:	f7ff fa7b 	bl	8011788 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8012292:	4b05      	ldr	r3, [pc, #20]	; (80122a8 <ulTaskNotifyTake+0x64>)
 8012294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012298:	601a      	str	r2, [r3, #0]
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	f3bf 8f6f 	isb	sy
 80122a2:	e7dd      	b.n	8012260 <ulTaskNotifyTake+0x1c>
 80122a4:	200016b4 	.word	0x200016b4
 80122a8:	e000ed04 	.word	0xe000ed04

080122ac <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 80122ac:	b308      	cbz	r0, 80122f2 <vTaskNotifyGiveFromISR+0x46>
	{
 80122ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b2:	4604      	mov	r4, r0
 80122b4:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122b6:	f000 fc7b 	bl	8012bb0 <vPortValidateInterruptPriority>
	__asm volatile
 80122ba:	f3ef 8711 	mrs	r7, BASEPRI
 80122be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122c2:	b672      	cpsid	i
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80122d2:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80122d4:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80122d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80122dc:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 80122de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80122e0:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 80122e2:	f103 0301 	add.w	r3, r3, #1
 80122e6:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80122e8:	d00e      	beq.n	8012308 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 80122ea:	f387 8811 	msr	BASEPRI, r7
	}
 80122ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 80122f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122f6:	b672      	cpsid	i
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	b662      	cpsie	i
 8012306:	e7fe      	b.n	8012306 <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801230a:	b153      	cbz	r3, 8012322 <vTaskNotifyGiveFromISR+0x76>
 801230c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012310:	b672      	cpsid	i
 8012312:	f383 8811 	msr	BASEPRI, r3
 8012316:	f3bf 8f6f 	isb	sy
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	b662      	cpsie	i
 8012320:	e7fe      	b.n	8012320 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012322:	4b16      	ldr	r3, [pc, #88]	; (801237c <vTaskNotifyGiveFromISR+0xd0>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	bb13      	cbnz	r3, 801236e <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012328:	f104 0804 	add.w	r8, r4, #4
 801232c:	4640      	mov	r0, r8
 801232e:	f7fe fc19 	bl	8010b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012332:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012334:	4a12      	ldr	r2, [pc, #72]	; (8012380 <vTaskNotifyGiveFromISR+0xd4>)
 8012336:	f04f 0c14 	mov.w	ip, #20
 801233a:	fa05 f300 	lsl.w	r3, r5, r0
 801233e:	4d11      	ldr	r5, [pc, #68]	; (8012384 <vTaskNotifyGiveFromISR+0xd8>)
 8012340:	f8d2 e000 	ldr.w	lr, [r2]
 8012344:	4641      	mov	r1, r8
 8012346:	fb0c 5000 	mla	r0, ip, r0, r5
 801234a:	ea43 030e 	orr.w	r3, r3, lr
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	f7fe fbde 	bl	8010b10 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012354:	4b0c      	ldr	r3, [pc, #48]	; (8012388 <vTaskNotifyGiveFromISR+0xdc>)
 8012356:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801235c:	429a      	cmp	r2, r3
 801235e:	d9c4      	bls.n	80122ea <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 8012360:	b10e      	cbz	r6, 8012366 <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012362:	2301      	movs	r3, #1
 8012364:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8012366:	4b09      	ldr	r3, [pc, #36]	; (801238c <vTaskNotifyGiveFromISR+0xe0>)
 8012368:	2201      	movs	r2, #1
 801236a:	601a      	str	r2, [r3, #0]
 801236c:	e7bd      	b.n	80122ea <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801236e:	f104 0118 	add.w	r1, r4, #24
 8012372:	4807      	ldr	r0, [pc, #28]	; (8012390 <vTaskNotifyGiveFromISR+0xe4>)
 8012374:	f7fe fbcc 	bl	8010b10 <vListInsertEnd>
 8012378:	e7ec      	b.n	8012354 <vTaskNotifyGiveFromISR+0xa8>
 801237a:	bf00      	nop
 801237c:	20001758 	.word	0x20001758
 8012380:	20001760 	.word	0x20001760
 8012384:	200016c0 	.word	0x200016c0
 8012388:	200016b4 	.word	0x200016b4
 801238c:	200017d8 	.word	0x200017d8
 8012390:	20001794 	.word	0x20001794

08012394 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012394:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8012396:	4c14      	ldr	r4, [pc, #80]	; (80123e8 <prvCheckForValidListAndQueue+0x54>)
{
 8012398:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801239a:	f000 fafb 	bl	8012994 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801239e:	6825      	ldr	r5, [r4, #0]
 80123a0:	b125      	cbz	r5, 80123ac <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80123a2:	b003      	add	sp, #12
 80123a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80123a8:	f000 bb1a 	b.w	80129e0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80123ac:	4f0f      	ldr	r7, [pc, #60]	; (80123ec <prvCheckForValidListAndQueue+0x58>)
			vListInitialise( &xActiveTimerList2 );
 80123ae:	4e10      	ldr	r6, [pc, #64]	; (80123f0 <prvCheckForValidListAndQueue+0x5c>)
			vListInitialise( &xActiveTimerList1 );
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7fe fb9d 	bl	8010af0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80123b6:	4630      	mov	r0, r6
 80123b8:	f7fe fb9a 	bl	8010af0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80123bc:	4b0d      	ldr	r3, [pc, #52]	; (80123f4 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 80123be:	4a0e      	ldr	r2, [pc, #56]	; (80123f8 <prvCheckForValidListAndQueue+0x64>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80123c0:	2110      	movs	r1, #16
 80123c2:	9500      	str	r5, [sp, #0]
 80123c4:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 80123c6:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80123c8:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80123ca:	4b0c      	ldr	r3, [pc, #48]	; (80123fc <prvCheckForValidListAndQueue+0x68>)
 80123cc:	4a0c      	ldr	r2, [pc, #48]	; (8012400 <prvCheckForValidListAndQueue+0x6c>)
 80123ce:	f7fe fcb9 	bl	8010d44 <xQueueGenericCreateStatic>
 80123d2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d0e4      	beq.n	80123a2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80123d8:	490a      	ldr	r1, [pc, #40]	; (8012404 <prvCheckForValidListAndQueue+0x70>)
 80123da:	f7ff f8f1 	bl	80115c0 <vQueueAddToRegistry>
}
 80123de:	b003      	add	sp, #12
 80123e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80123e4:	f000 bafc 	b.w	80129e0 <vPortExitCritical>
 80123e8:	200018f8 	.word	0x200018f8
 80123ec:	20001884 	.word	0x20001884
 80123f0:	20001898 	.word	0x20001898
 80123f4:	200017dc 	.word	0x200017dc
 80123f8:	200017e0 	.word	0x200017e0
 80123fc:	200018b0 	.word	0x200018b0
 8012400:	200017e4 	.word	0x200017e4
 8012404:	08026574 	.word	0x08026574

08012408 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8012408:	4291      	cmp	r1, r2
{
 801240a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801240c:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801240e:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8012410:	d805      	bhi.n	801241e <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012412:	1ad2      	subs	r2, r2, r3
 8012414:	6983      	ldr	r3, [r0, #24]
 8012416:	429a      	cmp	r2, r3
 8012418:	d30c      	bcc.n	8012434 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 801241a:	2001      	movs	r0, #1
}
 801241c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801241e:	429a      	cmp	r2, r3
 8012420:	d201      	bcs.n	8012426 <prvInsertTimerInActiveList+0x1e>
 8012422:	4299      	cmp	r1, r3
 8012424:	d2f9      	bcs.n	801241a <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012426:	4b07      	ldr	r3, [pc, #28]	; (8012444 <prvInsertTimerInActiveList+0x3c>)
 8012428:	1d01      	adds	r1, r0, #4
 801242a:	6818      	ldr	r0, [r3, #0]
 801242c:	f7fe fb80 	bl	8010b30 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012430:	2000      	movs	r0, #0
}
 8012432:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012434:	4b04      	ldr	r3, [pc, #16]	; (8012448 <prvInsertTimerInActiveList+0x40>)
 8012436:	1d01      	adds	r1, r0, #4
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	f7fe fb79 	bl	8010b30 <vListInsert>
 801243e:	2000      	movs	r0, #0
}
 8012440:	bd08      	pop	{r3, pc}
 8012442:	bf00      	nop
 8012444:	200017dc 	.word	0x200017dc
 8012448:	200017e0 	.word	0x200017e0

0801244c <xTimerCreateTimerTask>:
{
 801244c:	b530      	push	{r4, r5, lr}
 801244e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8012450:	f7ff ffa0 	bl	8012394 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012454:	4b13      	ldr	r3, [pc, #76]	; (80124a4 <xTimerCreateTimerTask+0x58>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	b1cb      	cbz	r3, 801248e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801245a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801245c:	aa07      	add	r2, sp, #28
 801245e:	a906      	add	r1, sp, #24
 8012460:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012462:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012466:	f7ee fbb7 	bl	8000bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801246a:	9806      	ldr	r0, [sp, #24]
 801246c:	2102      	movs	r1, #2
 801246e:	9d05      	ldr	r5, [sp, #20]
 8012470:	4623      	mov	r3, r4
 8012472:	9a07      	ldr	r2, [sp, #28]
 8012474:	9100      	str	r1, [sp, #0]
 8012476:	490c      	ldr	r1, [pc, #48]	; (80124a8 <xTimerCreateTimerTask+0x5c>)
 8012478:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801247c:	480b      	ldr	r0, [pc, #44]	; (80124ac <xTimerCreateTimerTask+0x60>)
 801247e:	f7ff fa57 	bl	8011930 <xTaskCreateStatic>
 8012482:	4b0b      	ldr	r3, [pc, #44]	; (80124b0 <xTimerCreateTimerTask+0x64>)
 8012484:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012486:	b110      	cbz	r0, 801248e <xTimerCreateTimerTask+0x42>
}
 8012488:	2001      	movs	r0, #1
 801248a:	b009      	add	sp, #36	; 0x24
 801248c:	bd30      	pop	{r4, r5, pc}
 801248e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012492:	b672      	cpsid	i
 8012494:	f383 8811 	msr	BASEPRI, r3
 8012498:	f3bf 8f6f 	isb	sy
 801249c:	f3bf 8f4f 	dsb	sy
 80124a0:	b662      	cpsie	i
 80124a2:	e7fe      	b.n	80124a2 <xTimerCreateTimerTask+0x56>
 80124a4:	200018f8 	.word	0x200018f8
 80124a8:	0802657c 	.word	0x0802657c
 80124ac:	08012699 	.word	0x08012699
 80124b0:	200018fc 	.word	0x200018fc

080124b4 <xTimerCreate>:
	{
 80124b4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80124b8:	4681      	mov	r9, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80124ba:	2028      	movs	r0, #40	; 0x28
	{
 80124bc:	460d      	mov	r5, r1
 80124be:	4616      	mov	r6, r2
 80124c0:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80124c2:	f000 fbcf 	bl	8012c64 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80124c6:	4604      	mov	r4, r0
 80124c8:	b300      	cbz	r0, 801250c <xTimerCreate+0x58>
			pxNewTimer->ucStatus = 0x00;
 80124ca:	2300      	movs	r3, #0
 80124cc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80124d0:	b955      	cbnz	r5, 80124e8 <xTimerCreate+0x34>
 80124d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80124d6:	b672      	cpsid	i
 80124d8:	f383 8811 	msr	BASEPRI, r3
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	f3bf 8f4f 	dsb	sy
 80124e4:	b662      	cpsie	i
 80124e6:	e7fe      	b.n	80124e6 <xTimerCreate+0x32>
		prvCheckForValidListAndQueue();
 80124e8:	f7ff ff54 	bl	8012394 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80124ec:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 80124ee:	f8c4 9000 	str.w	r9, [r4]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80124f2:	1d20      	adds	r0, r4, #4
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80124f4:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80124f6:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80124f8:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80124fa:	f7fe fb05 	bl	8010b08 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80124fe:	b12e      	cbz	r6, 801250c <xTimerCreate+0x58>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012500:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012504:	f043 0304 	orr.w	r3, r3, #4
 8012508:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 801250c:	4620      	mov	r0, r4
 801250e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8012512:	bf00      	nop

08012514 <xTimerCreateStatic>:
	{
 8012514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012518:	2428      	movs	r4, #40	; 0x28
	{
 801251a:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticTimer_t );
 801251c:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 801251e:	9d01      	ldr	r5, [sp, #4]
 8012520:	2d28      	cmp	r5, #40	; 0x28
	{
 8012522:	e9dd 640a 	ldrd	r6, r4, [sp, #40]	; 0x28
			configASSERT( xSize == sizeof( Timer_t ) );
 8012526:	d00a      	beq.n	801253e <xTimerCreateStatic+0x2a>
 8012528:	f04f 0330 	mov.w	r3, #48	; 0x30
 801252c:	b672      	cpsid	i
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	b662      	cpsie	i
 801253c:	e7fe      	b.n	801253c <xTimerCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801253e:	9d01      	ldr	r5, [sp, #4]
		configASSERT( pxTimerBuffer );
 8012540:	b954      	cbnz	r4, 8012558 <xTimerCreateStatic+0x44>
 8012542:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012546:	b672      	cpsid	i
 8012548:	f383 8811 	msr	BASEPRI, r3
 801254c:	f3bf 8f6f 	isb	sy
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	b662      	cpsie	i
 8012556:	e7fe      	b.n	8012556 <xTimerCreateStatic+0x42>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012558:	2502      	movs	r5, #2
 801255a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801255e:	b951      	cbnz	r1, 8012576 <xTimerCreateStatic+0x62>
 8012560:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012564:	b672      	cpsid	i
 8012566:	f383 8811 	msr	BASEPRI, r3
 801256a:	f3bf 8f6f 	isb	sy
 801256e:	f3bf 8f4f 	dsb	sy
 8012572:	b662      	cpsie	i
 8012574:	e7fe      	b.n	8012574 <xTimerCreateStatic+0x60>
 8012576:	4681      	mov	r9, r0
 8012578:	4698      	mov	r8, r3
 801257a:	460d      	mov	r5, r1
 801257c:	4617      	mov	r7, r2
		prvCheckForValidListAndQueue();
 801257e:	f7ff ff09 	bl	8012394 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8012582:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012586:	61a5      	str	r5, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012588:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801258a:	e9c4 8607 	strd	r8, r6, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801258e:	f7fe fabb 	bl	8010b08 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012592:	b12f      	cbz	r7, 80125a0 <xTimerCreateStatic+0x8c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012594:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012598:	f043 0304 	orr.w	r3, r3, #4
 801259c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 80125a0:	4620      	mov	r0, r4
 80125a2:	b003      	add	sp, #12
 80125a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080125a8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80125a8:	b1c0      	cbz	r0, 80125dc <xTimerGenericCommand+0x34>
{
 80125aa:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 80125ac:	4d17      	ldr	r5, [pc, #92]	; (801260c <xTimerGenericCommand+0x64>)
 80125ae:	4604      	mov	r4, r0
{
 80125b0:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 80125b2:	6828      	ldr	r0, [r5, #0]
 80125b4:	b180      	cbz	r0, 80125d8 <xTimerGenericCommand+0x30>
 80125b6:	4616      	mov	r6, r2
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125b8:	2905      	cmp	r1, #5
 80125ba:	461a      	mov	r2, r3
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80125bc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80125be:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125c2:	dc16      	bgt.n	80125f2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80125c4:	f7ff fd0a 	bl	8011fdc <xTaskGetSchedulerState>
 80125c8:	2802      	cmp	r0, #2
 80125ca:	d018      	beq.n	80125fe <xTimerGenericCommand+0x56>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125cc:	2300      	movs	r3, #0
 80125ce:	6828      	ldr	r0, [r5, #0]
 80125d0:	4669      	mov	r1, sp
 80125d2:	461a      	mov	r2, r3
 80125d4:	f7fe fc40 	bl	8010e58 <xQueueGenericSend>
}
 80125d8:	b004      	add	sp, #16
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125e0:	b672      	cpsid	i
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	b662      	cpsie	i
 80125f0:	e7fe      	b.n	80125f0 <xTimerGenericCommand+0x48>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80125f2:	2300      	movs	r3, #0
 80125f4:	4669      	mov	r1, sp
 80125f6:	f7fe fd21 	bl	801103c <xQueueGenericSendFromISR>
}
 80125fa:	b004      	add	sp, #16
 80125fc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80125fe:	6828      	ldr	r0, [r5, #0]
 8012600:	2300      	movs	r3, #0
 8012602:	9a08      	ldr	r2, [sp, #32]
 8012604:	4669      	mov	r1, sp
 8012606:	f7fe fc27 	bl	8010e58 <xQueueGenericSend>
 801260a:	e7e5      	b.n	80125d8 <xTimerGenericCommand+0x30>
 801260c:	200018f8 	.word	0x200018f8

08012610 <prvSwitchTimerLists>:
{
 8012610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012614:	4e1e      	ldr	r6, [pc, #120]	; (8012690 <prvSwitchTimerLists+0x80>)
 8012616:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012618:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801261c:	e00d      	b.n	801263a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801261e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012620:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012622:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012624:	1d25      	adds	r5, r4, #4
 8012626:	4628      	mov	r0, r5
 8012628:	f7fe fa9c 	bl	8010b64 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801262c:	6a23      	ldr	r3, [r4, #32]
 801262e:	4620      	mov	r0, r4
 8012630:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012632:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012636:	075b      	lsls	r3, r3, #29
 8012638:	d40a      	bmi.n	8012650 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801263a:	6833      	ldr	r3, [r6, #0]
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	2a00      	cmp	r2, #0
 8012640:	d1ed      	bne.n	801261e <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8012642:	4a14      	ldr	r2, [pc, #80]	; (8012694 <prvSwitchTimerLists+0x84>)
 8012644:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012646:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8012648:	6031      	str	r1, [r6, #0]
}
 801264a:	b002      	add	sp, #8
 801264c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012650:	69a0      	ldr	r0, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012652:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012654:	2300      	movs	r3, #0
 8012656:	463a      	mov	r2, r7
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012658:	183d      	adds	r5, r7, r0
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801265a:	4620      	mov	r0, r4
			if( xReloadTime > xNextExpireTime )
 801265c:	42af      	cmp	r7, r5
 801265e:	d205      	bcs.n	801266c <prvSwitchTimerLists+0x5c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012660:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012662:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012664:	6830      	ldr	r0, [r6, #0]
 8012666:	f7fe fa63 	bl	8010b30 <vListInsert>
 801266a:	e7e6      	b.n	801263a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801266c:	f8cd 8000 	str.w	r8, [sp]
 8012670:	4619      	mov	r1, r3
 8012672:	f7ff ff99 	bl	80125a8 <xTimerGenericCommand>
				configASSERT( xResult );
 8012676:	2800      	cmp	r0, #0
 8012678:	d1df      	bne.n	801263a <prvSwitchTimerLists+0x2a>
 801267a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801267e:	b672      	cpsid	i
 8012680:	f383 8811 	msr	BASEPRI, r3
 8012684:	f3bf 8f6f 	isb	sy
 8012688:	f3bf 8f4f 	dsb	sy
 801268c:	b662      	cpsie	i
 801268e:	e7fe      	b.n	801268e <prvSwitchTimerLists+0x7e>
 8012690:	200017dc 	.word	0x200017dc
 8012694:	200017e0 	.word	0x200017e0

08012698 <prvTimerTask>:
{
 8012698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269c:	4f82      	ldr	r7, [pc, #520]	; (80128a8 <prvTimerTask+0x210>)
 801269e:	b087      	sub	sp, #28
 80126a0:	4e82      	ldr	r6, [pc, #520]	; (80128ac <prvTimerTask+0x214>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80126a2:	f04f 0900 	mov.w	r9, #0
 80126a6:	4c82      	ldr	r4, [pc, #520]	; (80128b0 <prvTimerTask+0x218>)
 80126a8:	f8df a20c 	ldr.w	sl, [pc, #524]	; 80128b8 <prvTimerTask+0x220>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	681d      	ldr	r5, [r3, #0]
 80126b0:	2d00      	cmp	r5, #0
 80126b2:	f000 8099 	beq.w	80127e8 <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 80126ba:	f7ff f9f3 	bl	8011aa4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80126be:	f7ff f9f9 	bl	8011ab4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80126c2:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80126c4:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80126c6:	4298      	cmp	r0, r3
 80126c8:	f0c0 8096 	bcc.w	80127f8 <prvTimerTask+0x160>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80126cc:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 80126ce:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80126d0:	f240 80a5 	bls.w	801281e <prvTimerTask+0x186>
 80126d4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80126d6:	eba5 010b 	sub.w	r1, r5, fp
 80126da:	6820      	ldr	r0, [r4, #0]
 80126dc:	f7fe ff84 	bl	80115e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80126e0:	f7ff faa0 	bl	8011c24 <xTaskResumeAll>
 80126e4:	b938      	cbnz	r0, 80126f6 <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
 80126e6:	4b73      	ldr	r3, [pc, #460]	; (80128b4 <prvTimerTask+0x21c>)
 80126e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126ec:	601a      	str	r2, [r3, #0]
 80126ee:	f3bf 8f4f 	dsb	sy
 80126f2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126f6:	2200      	movs	r2, #0
 80126f8:	a902      	add	r1, sp, #8
 80126fa:	6820      	ldr	r0, [r4, #0]
 80126fc:	f7fe fd70 	bl	80111e0 <xQueueReceive>
 8012700:	2800      	cmp	r0, #0
 8012702:	d0d3      	beq.n	80126ac <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012704:	9b02      	ldr	r3, [sp, #8]
 8012706:	9d04      	ldr	r5, [sp, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	da07      	bge.n	801271c <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801270c:	9b03      	ldr	r3, [sp, #12]
 801270e:	4628      	mov	r0, r5
 8012710:	9905      	ldr	r1, [sp, #20]
 8012712:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012714:	9b02      	ldr	r3, [sp, #8]
 8012716:	2b00      	cmp	r3, #0
 8012718:	dbed      	blt.n	80126f6 <prvTimerTask+0x5e>
 801271a:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801271c:	696b      	ldr	r3, [r5, #20]
 801271e:	b113      	cbz	r3, 8012726 <prvTimerTask+0x8e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012720:	1d28      	adds	r0, r5, #4
 8012722:	f7fe fa1f 	bl	8010b64 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8012726:	f7ff f9c5 	bl	8011ab4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801272a:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801272c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 801272e:	4298      	cmp	r0, r3
 8012730:	d369      	bcc.n	8012806 <prvTimerTask+0x16e>
			switch( xMessage.xMessageID )
 8012732:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8012734:	f8c6 8000 	str.w	r8, [r6]
			switch( xMessage.xMessageID )
 8012738:	2b09      	cmp	r3, #9
 801273a:	d8dc      	bhi.n	80126f6 <prvTimerTask+0x5e>
 801273c:	e8df f003 	tbb	[pc, r3]
 8012740:	20272727 	.word	0x20272727
 8012744:	2727050e 	.word	0x2727050e
 8012748:	0e20      	.short	0x0e20
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801274a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801274e:	079a      	lsls	r2, r3, #30
 8012750:	d57c      	bpl.n	801284c <prvTimerTask+0x1b4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012752:	f023 0301 	bic.w	r3, r3, #1
 8012756:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801275a:	e7cc      	b.n	80126f6 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801275c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012760:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012762:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012766:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012768:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801276c:	2900      	cmp	r1, #0
 801276e:	f000 8090 	beq.w	8012892 <prvTimerTask+0x1fa>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012772:	4441      	add	r1, r8
 8012774:	4628      	mov	r0, r5
 8012776:	4643      	mov	r3, r8
 8012778:	4642      	mov	r2, r8
 801277a:	f7ff fe45 	bl	8012408 <prvInsertTimerInActiveList>
 801277e:	e7ba      	b.n	80126f6 <prvTimerTask+0x5e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012780:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8012784:	f023 0301 	bic.w	r3, r3, #1
 8012788:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801278c:	e7b3      	b.n	80126f6 <prvTimerTask+0x5e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801278e:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012792:	4642      	mov	r2, r8
 8012794:	9b03      	ldr	r3, [sp, #12]
 8012796:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012798:	f04c 0c01 	orr.w	ip, ip, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801279c:	69a9      	ldr	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801279e:	f885 c024 	strb.w	ip, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80127a2:	4419      	add	r1, r3
 80127a4:	f7ff fe30 	bl	8012408 <prvInsertTimerInActiveList>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0a4      	beq.n	80126f6 <prvTimerTask+0x5e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127ac:	6a2b      	ldr	r3, [r5, #32]
 80127ae:	4628      	mov	r0, r5
 80127b0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127b2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80127b6:	0759      	lsls	r1, r3, #29
 80127b8:	d59d      	bpl.n	80126f6 <prvTimerTask+0x5e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80127ba:	69aa      	ldr	r2, [r5, #24]
 80127bc:	2300      	movs	r3, #0
 80127be:	4628      	mov	r0, r5
 80127c0:	9d03      	ldr	r5, [sp, #12]
 80127c2:	f8cd 9000 	str.w	r9, [sp]
 80127c6:	4619      	mov	r1, r3
 80127c8:	442a      	add	r2, r5
 80127ca:	f7ff feed 	bl	80125a8 <xTimerGenericCommand>
							configASSERT( xResult );
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d191      	bne.n	80126f6 <prvTimerTask+0x5e>
 80127d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127d6:	b672      	cpsid	i
 80127d8:	f383 8811 	msr	BASEPRI, r3
 80127dc:	f3bf 8f6f 	isb	sy
 80127e0:	f3bf 8f4f 	dsb	sy
 80127e4:	b662      	cpsie	i
 80127e6:	e7fe      	b.n	80127e6 <prvTimerTask+0x14e>
	vTaskSuspendAll();
 80127e8:	f7ff f95c 	bl	8011aa4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80127ec:	f7ff f962 	bl	8011ab4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80127f0:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80127f2:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80127f4:	4298      	cmp	r0, r3
 80127f6:	d209      	bcs.n	801280c <prvTimerTask+0x174>
		prvSwitchTimerLists();
 80127f8:	f7ff ff0a 	bl	8012610 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80127fc:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 8012800:	f7ff fa10 	bl	8011c24 <xTaskResumeAll>
 8012804:	e777      	b.n	80126f6 <prvTimerTask+0x5e>
		prvSwitchTimerLists();
 8012806:	f7ff ff03 	bl	8012610 <prvSwitchTimerLists>
 801280a:	e792      	b.n	8012732 <prvTimerTask+0x9a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801280c:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8012810:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	fab2 f282 	clz	r2, r2
 801281a:	0952      	lsrs	r2, r2, #5
 801281c:	e75b      	b.n	80126d6 <prvTimerTask+0x3e>
				( void ) xTaskResumeAll();
 801281e:	f7ff fa01 	bl	8011c24 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	f8d3 800c 	ldr.w	r8, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801282a:	f108 0004 	add.w	r0, r8, #4
 801282e:	f7fe f999 	bl	8010b64 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012832:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 8012836:	0758      	lsls	r0, r3, #29
 8012838:	d40c      	bmi.n	8012854 <prvTimerTask+0x1bc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801283a:	f023 0301 	bic.w	r3, r3, #1
 801283e:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012842:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8012846:	4640      	mov	r0, r8
 8012848:	4798      	blx	r3
 801284a:	e754      	b.n	80126f6 <prvTimerTask+0x5e>
							vPortFree( pxTimer );
 801284c:	4628      	mov	r0, r5
 801284e:	f000 faa7 	bl	8012da0 <vPortFree>
 8012852:	e750      	b.n	80126f6 <prvTimerTask+0x5e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012854:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012858:	465a      	mov	r2, fp
 801285a:	462b      	mov	r3, r5
 801285c:	4640      	mov	r0, r8
 801285e:	4429      	add	r1, r5
 8012860:	f7ff fdd2 	bl	8012408 <prvInsertTimerInActiveList>
 8012864:	2800      	cmp	r0, #0
 8012866:	d0ec      	beq.n	8012842 <prvTimerTask+0x1aa>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012868:	2300      	movs	r3, #0
 801286a:	f8cd 9000 	str.w	r9, [sp]
 801286e:	462a      	mov	r2, r5
 8012870:	4640      	mov	r0, r8
 8012872:	4619      	mov	r1, r3
 8012874:	f7ff fe98 	bl	80125a8 <xTimerGenericCommand>
			configASSERT( xResult );
 8012878:	2800      	cmp	r0, #0
 801287a:	d1e2      	bne.n	8012842 <prvTimerTask+0x1aa>
 801287c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012880:	b672      	cpsid	i
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	b662      	cpsie	i
 8012890:	e7fe      	b.n	8012890 <prvTimerTask+0x1f8>
 8012892:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012896:	b672      	cpsid	i
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	b662      	cpsie	i
 80128a6:	e7fe      	b.n	80128a6 <prvTimerTask+0x20e>
 80128a8:	200017dc 	.word	0x200017dc
 80128ac:	200018ac 	.word	0x200018ac
 80128b0:	200018f8 	.word	0x200018f8
 80128b4:	e000ed04 	.word	0xe000ed04
 80128b8:	200017e0 	.word	0x200017e0

080128bc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80128bc:	4b10      	ldr	r3, [pc, #64]	; (8012900 <prvTaskExitError+0x44>)
{
 80128be:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80128c0:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80128c2:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80128c4:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80128c6:	3301      	adds	r3, #1
 80128c8:	d00a      	beq.n	80128e0 <prvTaskExitError+0x24>
 80128ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128ce:	b672      	cpsid	i
 80128d0:	f383 8811 	msr	BASEPRI, r3
 80128d4:	f3bf 8f6f 	isb	sy
 80128d8:	f3bf 8f4f 	dsb	sy
 80128dc:	b662      	cpsie	i
 80128de:	e7fe      	b.n	80128de <prvTaskExitError+0x22>
 80128e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80128e4:	b672      	cpsid	i
 80128e6:	f383 8811 	msr	BASEPRI, r3
 80128ea:	f3bf 8f6f 	isb	sy
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80128f4:	9b01      	ldr	r3, [sp, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d0fc      	beq.n	80128f4 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80128fa:	b002      	add	sp, #8
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	200003d4 	.word	0x200003d4

08012904 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012904:	4808      	ldr	r0, [pc, #32]	; (8012928 <prvPortStartFirstTask+0x24>)
 8012906:	6800      	ldr	r0, [r0, #0]
 8012908:	6800      	ldr	r0, [r0, #0]
 801290a:	f380 8808 	msr	MSP, r0
 801290e:	f04f 0000 	mov.w	r0, #0
 8012912:	f380 8814 	msr	CONTROL, r0
 8012916:	b662      	cpsie	i
 8012918:	b661      	cpsie	f
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	df00      	svc	0
 8012924:	bf00      	nop
 8012926:	0000      	.short	0x0000
 8012928:	e000ed08 	.word	0xe000ed08

0801292c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801292c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801293c <vPortEnableVFP+0x10>
 8012930:	6801      	ldr	r1, [r0, #0]
 8012932:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012936:	6001      	str	r1, [r0, #0]
 8012938:	4770      	bx	lr
 801293a:	0000      	.short	0x0000
 801293c:	e000ed88 	.word	0xe000ed88

08012940 <pxPortInitialiseStack>:
{
 8012940:	b470      	push	{r4, r5, r6}
 8012942:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012944:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012948:	4d08      	ldr	r5, [pc, #32]	; (801296c <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801294a:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801294e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012952:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8012956:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012958:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801295a:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801295e:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012962:	f843 4c24 	str.w	r4, [r3, #-36]
}
 8012966:	bc70      	pop	{r4, r5, r6}
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	080128bd 	.word	0x080128bd

08012970 <SVC_Handler>:
	__asm volatile (
 8012970:	4b07      	ldr	r3, [pc, #28]	; (8012990 <pxCurrentTCBConst2>)
 8012972:	6819      	ldr	r1, [r3, #0]
 8012974:	6808      	ldr	r0, [r1, #0]
 8012976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297a:	f380 8809 	msr	PSP, r0
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f04f 0000 	mov.w	r0, #0
 8012986:	f380 8811 	msr	BASEPRI, r0
 801298a:	4770      	bx	lr
 801298c:	f3af 8000 	nop.w

08012990 <pxCurrentTCBConst2>:
 8012990:	200016b4 	.word	0x200016b4

08012994 <vPortEnterCritical>:
 8012994:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012998:	b672      	cpsid	i
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80129a8:	4a0b      	ldr	r2, [pc, #44]	; (80129d8 <vPortEnterCritical+0x44>)
 80129aa:	6813      	ldr	r3, [r2, #0]
 80129ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80129ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80129b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80129b2:	d000      	beq.n	80129b6 <vPortEnterCritical+0x22>
}
 80129b4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129b6:	4b09      	ldr	r3, [pc, #36]	; (80129dc <vPortEnterCritical+0x48>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80129be:	d0f9      	beq.n	80129b4 <vPortEnterCritical+0x20>
 80129c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129c4:	b672      	cpsid	i
 80129c6:	f383 8811 	msr	BASEPRI, r3
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	b662      	cpsie	i
 80129d4:	e7fe      	b.n	80129d4 <vPortEnterCritical+0x40>
 80129d6:	bf00      	nop
 80129d8:	200003d4 	.word	0x200003d4
 80129dc:	e000ed04 	.word	0xe000ed04

080129e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80129e0:	4a09      	ldr	r2, [pc, #36]	; (8012a08 <vPortExitCritical+0x28>)
 80129e2:	6813      	ldr	r3, [r2, #0]
 80129e4:	b953      	cbnz	r3, 80129fc <vPortExitCritical+0x1c>
 80129e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80129ea:	b672      	cpsid	i
 80129ec:	f383 8811 	msr	BASEPRI, r3
 80129f0:	f3bf 8f6f 	isb	sy
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	b662      	cpsie	i
 80129fa:	e7fe      	b.n	80129fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80129fc:	3b01      	subs	r3, #1
 80129fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a00:	b90b      	cbnz	r3, 8012a06 <vPortExitCritical+0x26>
	__asm volatile
 8012a02:	f383 8811 	msr	BASEPRI, r3
}
 8012a06:	4770      	bx	lr
 8012a08:	200003d4 	.word	0x200003d4
 8012a0c:	00000000 	.word	0x00000000

08012a10 <PendSV_Handler>:
	__asm volatile
 8012a10:	f3ef 8009 	mrs	r0, PSP
 8012a14:	f3bf 8f6f 	isb	sy
 8012a18:	4b15      	ldr	r3, [pc, #84]	; (8012a70 <pxCurrentTCBConst>)
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	f01e 0f10 	tst.w	lr, #16
 8012a20:	bf08      	it	eq
 8012a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a2a:	6010      	str	r0, [r2, #0]
 8012a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a30:	f04f 0030 	mov.w	r0, #48	; 0x30
 8012a34:	b672      	cpsid	i
 8012a36:	f380 8811 	msr	BASEPRI, r0
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	b662      	cpsie	i
 8012a44:	f7ff f99a 	bl	8011d7c <vTaskSwitchContext>
 8012a48:	f04f 0000 	mov.w	r0, #0
 8012a4c:	f380 8811 	msr	BASEPRI, r0
 8012a50:	bc09      	pop	{r0, r3}
 8012a52:	6819      	ldr	r1, [r3, #0]
 8012a54:	6808      	ldr	r0, [r1, #0]
 8012a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5a:	f01e 0f10 	tst.w	lr, #16
 8012a5e:	bf08      	it	eq
 8012a60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a64:	f380 8809 	msr	PSP, r0
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop

08012a70 <pxCurrentTCBConst>:
 8012a70:	200016b4 	.word	0x200016b4

08012a74 <SysTick_Handler>:
{
 8012a74:	b508      	push	{r3, lr}
	__asm volatile
 8012a76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a7a:	b672      	cpsid	i
 8012a7c:	f383 8811 	msr	BASEPRI, r3
 8012a80:	f3bf 8f6f 	isb	sy
 8012a84:	f3bf 8f4f 	dsb	sy
 8012a88:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8012a8a:	f7ff f821 	bl	8011ad0 <xTaskIncrementTick>
 8012a8e:	b118      	cbz	r0, 8012a98 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a90:	4b03      	ldr	r3, [pc, #12]	; (8012aa0 <SysTick_Handler+0x2c>)
 8012a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a96:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012a98:	2300      	movs	r3, #0
 8012a9a:	f383 8811 	msr	BASEPRI, r3
}
 8012a9e:	bd08      	pop	{r3, pc}
 8012aa0:	e000ed04 	.word	0xe000ed04

08012aa4 <vPortSetupTimerInterrupt>:
{
 8012aa4:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	4a08      	ldr	r2, [pc, #32]	; (8012acc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012aaa:	4c09      	ldr	r4, [pc, #36]	; (8012ad0 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012aac:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012aae:	4809      	ldr	r0, [pc, #36]	; (8012ad4 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ab2:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012ab4:	4c08      	ldr	r4, [pc, #32]	; (8012ad8 <vPortSetupTimerInterrupt+0x34>)
 8012ab6:	6803      	ldr	r3, [r0, #0]
 8012ab8:	4808      	ldr	r0, [pc, #32]	; (8012adc <vPortSetupTimerInterrupt+0x38>)
 8012aba:	fba4 4303 	umull	r4, r3, r4, r3
}
 8012abe:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012ac2:	099b      	lsrs	r3, r3, #6
 8012ac4:	3b01      	subs	r3, #1
 8012ac6:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ac8:	6011      	str	r1, [r2, #0]
}
 8012aca:	4770      	bx	lr
 8012acc:	e000e010 	.word	0xe000e010
 8012ad0:	e000e018 	.word	0xe000e018
 8012ad4:	20000248 	.word	0x20000248
 8012ad8:	10624dd3 	.word	0x10624dd3
 8012adc:	e000e014 	.word	0xe000e014

08012ae0 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012ae0:	4b2d      	ldr	r3, [pc, #180]	; (8012b98 <xPortStartScheduler+0xb8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012ae2:	492e      	ldr	r1, [pc, #184]	; (8012b9c <xPortStartScheduler+0xbc>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012ae4:	482e      	ldr	r0, [pc, #184]	; (8012ba0 <xPortStartScheduler+0xc0>)
{
 8012ae6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012ae8:	781a      	ldrb	r2, [r3, #0]
{
 8012aea:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012aec:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012aee:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012af0:	b2d2      	uxtb	r2, r2
 8012af2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012af4:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012af6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012af8:	6004      	str	r4, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b00:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b04:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012b0c:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b0e:	0611      	lsls	r1, r2, #24
 8012b10:	d510      	bpl.n	8012b34 <xPortStartScheduler+0x54>
 8012b12:	2306      	movs	r3, #6
 8012b14:	e000      	b.n	8012b18 <xPortStartScheduler+0x38>
 8012b16:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012b1c:	1e59      	subs	r1, r3, #1
 8012b1e:	0052      	lsls	r2, r2, #1
 8012b20:	b2d2      	uxtb	r2, r2
 8012b22:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b26:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012b2a:	0612      	lsls	r2, r2, #24
 8012b2c:	d4f3      	bmi.n	8012b16 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b2e:	2b03      	cmp	r3, #3
 8012b30:	6003      	str	r3, [r0, #0]
 8012b32:	d00a      	beq.n	8012b4a <xPortStartScheduler+0x6a>
	__asm volatile
 8012b34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012b38:	b672      	cpsid	i
 8012b3a:	f383 8811 	msr	BASEPRI, r3
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f3bf 8f4f 	dsb	sy
 8012b46:	b662      	cpsie	i
 8012b48:	e7fe      	b.n	8012b48 <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b4a:	9901      	ldr	r1, [sp, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b4c:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b4e:	4a15      	ldr	r2, [pc, #84]	; (8012ba4 <xPortStartScheduler+0xc4>)
	uxCriticalNesting = 0;
 8012b50:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b52:	b2c9      	uxtb	r1, r1
 8012b54:	4d10      	ldr	r5, [pc, #64]	; (8012b98 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b5a:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b5c:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b5e:	6813      	ldr	r3, [r2, #0]
 8012b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012b64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012b66:	6813      	ldr	r3, [r2, #0]
 8012b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012b6c:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8012b6e:	f7ff ff99 	bl	8012aa4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012b72:	4b0d      	ldr	r3, [pc, #52]	; (8012ba8 <xPortStartScheduler+0xc8>)
 8012b74:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012b76:	f7ff fed9 	bl	801292c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012b7a:	4a0c      	ldr	r2, [pc, #48]	; (8012bac <xPortStartScheduler+0xcc>)
 8012b7c:	6813      	ldr	r3, [r2, #0]
 8012b7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012b82:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012b84:	f7ff febe 	bl	8012904 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012b88:	f7ff f8f8 	bl	8011d7c <vTaskSwitchContext>
	prvTaskExitError();
 8012b8c:	f7ff fe96 	bl	80128bc <prvTaskExitError>
}
 8012b90:	4620      	mov	r0, r4
 8012b92:	b003      	add	sp, #12
 8012b94:	bd30      	pop	{r4, r5, pc}
 8012b96:	bf00      	nop
 8012b98:	e000e400 	.word	0xe000e400
 8012b9c:	20001900 	.word	0x20001900
 8012ba0:	20001904 	.word	0x20001904
 8012ba4:	e000ed20 	.word	0xe000ed20
 8012ba8:	200003d4 	.word	0x200003d4
 8012bac:	e000ef34 	.word	0xe000ef34

08012bb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012bb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012bb4:	2b0f      	cmp	r3, #15
 8012bb6:	d910      	bls.n	8012bda <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012bb8:	4912      	ldr	r1, [pc, #72]	; (8012c04 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012bba:	4a13      	ldr	r2, [pc, #76]	; (8012c08 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012bbc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012bbe:	7812      	ldrb	r2, [r2, #0]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d90a      	bls.n	8012bda <vPortValidateInterruptPriority+0x2a>
 8012bc4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bc8:	b672      	cpsid	i
 8012bca:	f383 8811 	msr	BASEPRI, r3
 8012bce:	f3bf 8f6f 	isb	sy
 8012bd2:	f3bf 8f4f 	dsb	sy
 8012bd6:	b662      	cpsie	i
 8012bd8:	e7fe      	b.n	8012bd8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012bda:	4b0c      	ldr	r3, [pc, #48]	; (8012c0c <vPortValidateInterruptPriority+0x5c>)
 8012bdc:	4a0c      	ldr	r2, [pc, #48]	; (8012c10 <vPortValidateInterruptPriority+0x60>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	6812      	ldr	r2, [r2, #0]
 8012be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d90a      	bls.n	8012c00 <vPortValidateInterruptPriority+0x50>
 8012bea:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012bee:	b672      	cpsid	i
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
 8012bfc:	b662      	cpsie	i
 8012bfe:	e7fe      	b.n	8012bfe <vPortValidateInterruptPriority+0x4e>
	}
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	e000e3f0 	.word	0xe000e3f0
 8012c08:	20001900 	.word	0x20001900
 8012c0c:	e000ed0c 	.word	0xe000ed0c
 8012c10:	20001904 	.word	0x20001904

08012c14 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012c14:	4b11      	ldr	r3, [pc, #68]	; (8012c5c <prvInsertBlockIntoFreeList+0x48>)
{
 8012c16:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	4282      	cmp	r2, r0
 8012c1c:	d201      	bcs.n	8012c22 <prvInsertBlockIntoFreeList+0xe>
 8012c1e:	4613      	mov	r3, r2
 8012c20:	e7fa      	b.n	8012c18 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c22:	685c      	ldr	r4, [r3, #4]
 8012c24:	1919      	adds	r1, r3, r4
 8012c26:	4288      	cmp	r0, r1
 8012c28:	d103      	bne.n	8012c32 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c2a:	6841      	ldr	r1, [r0, #4]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	4421      	add	r1, r4
 8012c30:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c32:	6844      	ldr	r4, [r0, #4]
 8012c34:	1901      	adds	r1, r0, r4
 8012c36:	428a      	cmp	r2, r1
 8012c38:	d109      	bne.n	8012c4e <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c3a:	4909      	ldr	r1, [pc, #36]	; (8012c60 <prvInsertBlockIntoFreeList+0x4c>)
 8012c3c:	6809      	ldr	r1, [r1, #0]
 8012c3e:	428a      	cmp	r2, r1
 8012c40:	d005      	beq.n	8012c4e <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c42:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c46:	4421      	add	r1, r4
 8012c48:	e9c0 5100 	strd	r5, r1, [r0]
 8012c4c:	e000      	b.n	8012c50 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c4e:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c50:	4298      	cmp	r0, r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c52:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c54:	bf18      	it	ne
 8012c56:	6018      	strne	r0, [r3, #0]
}
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop
 8012c5c:	20021918 	.word	0x20021918
 8012c60:	20001908 	.word	0x20001908

08012c64 <pvPortMalloc>:
{
 8012c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c68:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012c6a:	f7fe ff1b 	bl	8011aa4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012c6e:	4845      	ldr	r0, [pc, #276]	; (8012d84 <pvPortMalloc+0x120>)
 8012c70:	6803      	ldr	r3, [r0, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d037      	beq.n	8012ce6 <pvPortMalloc+0x82>
 8012c76:	4b44      	ldr	r3, [pc, #272]	; (8012d88 <pvPortMalloc+0x124>)
 8012c78:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012c7a:	423c      	tst	r4, r7
 8012c7c:	d156      	bne.n	8012d2c <pvPortMalloc+0xc8>
			if( xWantedSize > 0 )
 8012c7e:	2c00      	cmp	r4, #0
 8012c80:	d054      	beq.n	8012d2c <pvPortMalloc+0xc8>
				xWantedSize += xHeapStructSize;
 8012c82:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c86:	0759      	lsls	r1, r3, #29
 8012c88:	d002      	beq.n	8012c90 <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c8a:	f023 0307 	bic.w	r3, r3, #7
 8012c8e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d04b      	beq.n	8012d2c <pvPortMalloc+0xc8>
 8012c94:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8012d9c <pvPortMalloc+0x138>
 8012c98:	f8d8 6000 	ldr.w	r6, [r8]
 8012c9c:	429e      	cmp	r6, r3
 8012c9e:	d345      	bcc.n	8012d2c <pvPortMalloc+0xc8>
				pxBlock = xStart.pxNextFreeBlock;
 8012ca0:	493a      	ldr	r1, [pc, #232]	; (8012d8c <pvPortMalloc+0x128>)
 8012ca2:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ca4:	e003      	b.n	8012cae <pvPortMalloc+0x4a>
 8012ca6:	6825      	ldr	r5, [r4, #0]
 8012ca8:	b125      	cbz	r5, 8012cb4 <pvPortMalloc+0x50>
 8012caa:	4621      	mov	r1, r4
 8012cac:	462c      	mov	r4, r5
 8012cae:	6862      	ldr	r2, [r4, #4]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d3f8      	bcc.n	8012ca6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8012cb4:	6800      	ldr	r0, [r0, #0]
 8012cb6:	42a0      	cmp	r0, r4
 8012cb8:	d038      	beq.n	8012d2c <pvPortMalloc+0xc8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012cba:	eba2 0c03 	sub.w	ip, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012cbe:	6820      	ldr	r0, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012cc0:	680d      	ldr	r5, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012cc2:	f1bc 0f10 	cmp.w	ip, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012cc6:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012cc8:	d93e      	bls.n	8012d48 <pvPortMalloc+0xe4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012cca:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ccc:	0742      	lsls	r2, r0, #29
 8012cce:	d035      	beq.n	8012d3c <pvPortMalloc+0xd8>
 8012cd0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012cd4:	b672      	cpsid	i
 8012cd6:	f383 8811 	msr	BASEPRI, r3
 8012cda:	f3bf 8f6f 	isb	sy
 8012cde:	f3bf 8f4f 	dsb	sy
 8012ce2:	b662      	cpsie	i
 8012ce4:	e7fe      	b.n	8012ce4 <pvPortMalloc+0x80>
	uxAddress = ( size_t ) ucHeap;
 8012ce6:	4b2a      	ldr	r3, [pc, #168]	; (8012d90 <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ce8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 8012cec:	4a29      	ldr	r2, [pc, #164]	; (8012d94 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012cee:	075d      	lsls	r5, r3, #29
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012cf0:	4f29      	ldr	r7, [pc, #164]	; (8012d98 <pvPortMalloc+0x134>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012cf2:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8012cf6:	f04f 0500 	mov.w	r5, #0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012cfa:	bf18      	it	ne
 8012cfc:	3307      	addne	r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012cfe:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8012d9c <pvPortMalloc+0x138>
	pxEnd = ( void * ) uxAddress;
 8012d02:	6002      	str	r2, [r0, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d04:	bf18      	it	ne
 8012d06:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d0a:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012d0c:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d0e:	603b      	str	r3, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d10:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d12:	f8cc 3000 	str.w	r3, [ip]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d16:	423c      	tst	r4, r7
	pxEnd->pxNextFreeBlock = NULL;
 8012d18:	e9c2 5500 	strd	r5, r5, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012d1c:	e9c1 2300 	strd	r2, r3, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d20:	4b1a      	ldr	r3, [pc, #104]	; (8012d8c <pvPortMalloc+0x128>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d22:	4a19      	ldr	r2, [pc, #100]	; (8012d88 <pvPortMalloc+0x124>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d24:	e9c3 1500 	strd	r1, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d28:	6016      	str	r6, [r2, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d2a:	d0a8      	beq.n	8012c7e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
 8012d2c:	f7fe ff7a 	bl	8011c24 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8012d30:	2500      	movs	r5, #0
 8012d32:	f7ed ff41 	bl	8000bb8 <vApplicationMallocFailedHook>
}
 8012d36:	4628      	mov	r0, r5
 8012d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012d3c:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012d40:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012d42:	f7ff ff67 	bl	8012c14 <prvInsertBlockIntoFreeList>
 8012d46:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d48:	4913      	ldr	r1, [pc, #76]	; (8012d98 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d4a:	1ab6      	subs	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8012d4c:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012d4e:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d50:	6808      	ldr	r0, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d52:	3508      	adds	r5, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d54:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d58:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8012d5a:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012d5e:	bf38      	it	cc
 8012d60:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8012d62:	f7fe ff5f 	bl	8011c24 <xTaskResumeAll>
		if( pvReturn == NULL )
 8012d66:	2d00      	cmp	r5, #0
 8012d68:	d0e2      	beq.n	8012d30 <pvPortMalloc+0xcc>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d6a:	076b      	lsls	r3, r5, #29
 8012d6c:	d0e3      	beq.n	8012d36 <pvPortMalloc+0xd2>
 8012d6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012d72:	b672      	cpsid	i
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	b662      	cpsie	i
 8012d82:	e7fe      	b.n	8012d82 <pvPortMalloc+0x11e>
 8012d84:	20001908 	.word	0x20001908
 8012d88:	2002190c 	.word	0x2002190c
 8012d8c:	20021918 	.word	0x20021918
 8012d90:	2000190c 	.word	0x2000190c
 8012d94:	20021904 	.word	0x20021904
 8012d98:	20021914 	.word	0x20021914
 8012d9c:	20021910 	.word	0x20021910

08012da0 <vPortFree>:
	if( pv != NULL )
 8012da0:	b1f0      	cbz	r0, 8012de0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012da2:	4a1b      	ldr	r2, [pc, #108]	; (8012e10 <vPortFree+0x70>)
 8012da4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012da8:	6812      	ldr	r2, [r2, #0]
 8012daa:	4213      	tst	r3, r2
 8012dac:	d10a      	bne.n	8012dc4 <vPortFree+0x24>
 8012dae:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012db2:	b672      	cpsid	i
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	b662      	cpsie	i
 8012dc2:	e7fe      	b.n	8012dc2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012dc4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8012dc8:	b159      	cbz	r1, 8012de2 <vPortFree+0x42>
 8012dca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012dce:	b672      	cpsid	i
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	b662      	cpsie	i
 8012dde:	e7fe      	b.n	8012dde <vPortFree+0x3e>
 8012de0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012de2:	ea23 0302 	bic.w	r3, r3, r2
{
 8012de6:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012de8:	f840 3c04 	str.w	r3, [r0, #-4]
 8012dec:	4604      	mov	r4, r0
				vTaskSuspendAll();
 8012dee:	f7fe fe59 	bl	8011aa4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012df2:	4a08      	ldr	r2, [pc, #32]	; (8012e14 <vPortFree+0x74>)
 8012df4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012df8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012dfc:	6811      	ldr	r1, [r2, #0]
 8012dfe:	440b      	add	r3, r1
 8012e00:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012e02:	f7ff ff07 	bl	8012c14 <prvInsertBlockIntoFreeList>
}
 8012e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8012e0a:	f7fe bf0b 	b.w	8011c24 <xTaskResumeAll>
 8012e0e:	bf00      	nop
 8012e10:	2002190c 	.word	0x2002190c
 8012e14:	20021910 	.word	0x20021910

08012e18 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8012e18:	f003 b920 	b.w	801605c <pbuf_free>

08012e1c <tcpip_thread>:
{
 8012e1c:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8012e1e:	483a      	ldr	r0, [pc, #232]	; (8012f08 <tcpip_thread+0xec>)
{
 8012e20:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8012e22:	f00c f807 	bl	801ee34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012e26:	4b39      	ldr	r3, [pc, #228]	; (8012f0c <tcpip_thread+0xf0>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	b113      	cbz	r3, 8012e32 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8012e2c:	4a38      	ldr	r2, [pc, #224]	; (8012f10 <tcpip_thread+0xf4>)
 8012e2e:	6810      	ldr	r0, [r2, #0]
 8012e30:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012e32:	4d35      	ldr	r5, [pc, #212]	; (8012f08 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012e34:	4e37      	ldr	r6, [pc, #220]	; (8012f14 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012e36:	4f38      	ldr	r7, [pc, #224]	; (8012f18 <tcpip_thread+0xfc>)
 8012e38:	e010      	b.n	8012e5c <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8012e3a:	b168      	cbz	r0, 8012e58 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f00b ffff 	bl	801ee40 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012e42:	4622      	mov	r2, r4
 8012e44:	a901      	add	r1, sp, #4
 8012e46:	4630      	mov	r0, r6
 8012e48:	f00b ff9a 	bl	801ed80 <sys_arch_mbox_fetch>
 8012e4c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f00b fff0 	bl	801ee34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012e54:	3401      	adds	r4, #1
 8012e56:	d111      	bne.n	8012e7c <tcpip_thread+0x60>
    sys_check_timeouts();
 8012e58:	f008 f9c4 	bl	801b1e4 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8012e5c:	f008 f9e6 	bl	801b22c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012e60:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8012e62:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012e64:	d1e9      	bne.n	8012e3a <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8012e66:	4628      	mov	r0, r5
 8012e68:	f00b ffea 	bl	801ee40 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	a901      	add	r1, sp, #4
 8012e70:	4630      	mov	r0, r6
 8012e72:	f00b ff85 	bl	801ed80 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012e76:	4628      	mov	r0, r5
 8012e78:	f00b ffdc 	bl	801ee34 <sys_mutex_lock>
    if (msg == NULL) {
 8012e7c:	9c01      	ldr	r4, [sp, #4]
 8012e7e:	2c00      	cmp	r4, #0
 8012e80:	d033      	beq.n	8012eea <tcpip_thread+0xce>
  switch (msg->type) {
 8012e82:	7823      	ldrb	r3, [r4, #0]
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d837      	bhi.n	8012ef8 <tcpip_thread+0xdc>
 8012e88:	e8df f003 	tbb	[pc, r3]
 8012e8c:	070f1822 	.word	0x070f1822
 8012e90:	03          	.byte	0x03
 8012e91:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012e92:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8012e96:	4798      	blx	r3
 8012e98:	e7e0      	b.n	8012e5c <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012e9a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8012e9e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ea0:	4621      	mov	r1, r4
 8012ea2:	2009      	movs	r0, #9
 8012ea4:	f002 fe00 	bl	8015aa8 <memp_free>
 8012ea8:	e7d8      	b.n	8012e5c <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8012eaa:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8012eae:	f008 f97b 	bl	801b1a8 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	2009      	movs	r0, #9
 8012eb6:	f002 fdf7 	bl	8015aa8 <memp_free>
 8012eba:	e7cf      	b.n	8012e5c <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8012ebc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012ec0:	6860      	ldr	r0, [r4, #4]
 8012ec2:	f008 f939 	bl	801b138 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ec6:	4621      	mov	r1, r4
 8012ec8:	2009      	movs	r0, #9
 8012eca:	f002 fded 	bl	8015aa8 <memp_free>
 8012ece:	e7c5      	b.n	8012e5c <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012ed0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8012ed4:	6860      	ldr	r0, [r4, #4]
 8012ed6:	4798      	blx	r3
 8012ed8:	b110      	cbz	r0, 8012ee0 <tcpip_thread+0xc4>
        pbuf_free(msg->msg.inp.p);
 8012eda:	6860      	ldr	r0, [r4, #4]
 8012edc:	f003 f8be 	bl	801605c <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012ee0:	4621      	mov	r1, r4
 8012ee2:	200a      	movs	r0, #10
 8012ee4:	f002 fde0 	bl	8015aa8 <memp_free>
 8012ee8:	e7b8      	b.n	8012e5c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012eea:	463b      	mov	r3, r7
 8012eec:	2291      	movs	r2, #145	; 0x91
 8012eee:	490b      	ldr	r1, [pc, #44]	; (8012f1c <tcpip_thread+0x100>)
 8012ef0:	480b      	ldr	r0, [pc, #44]	; (8012f20 <tcpip_thread+0x104>)
 8012ef2:	f00d fb51 	bl	8020598 <iprintf>
      continue;
 8012ef6:	e7b1      	b.n	8012e5c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012ef8:	463b      	mov	r3, r7
 8012efa:	22cf      	movs	r2, #207	; 0xcf
 8012efc:	4907      	ldr	r1, [pc, #28]	; (8012f1c <tcpip_thread+0x100>)
 8012efe:	4808      	ldr	r0, [pc, #32]	; (8012f20 <tcpip_thread+0x104>)
 8012f00:	f00d fb4a 	bl	8020598 <iprintf>
 8012f04:	e7aa      	b.n	8012e5c <tcpip_thread+0x40>
 8012f06:	bf00      	nop
 8012f08:	20026a70 	.word	0x20026a70
 8012f0c:	20021920 	.word	0x20021920
 8012f10:	20021924 	.word	0x20021924
 8012f14:	20021928 	.word	0x20021928
 8012f18:	080265ec 	.word	0x080265ec
 8012f1c:	0802661c 	.word	0x0802661c
 8012f20:	08026544 	.word	0x08026544

08012f24 <tcpip_inpkt>:
{
 8012f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f26:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012f28:	4814      	ldr	r0, [pc, #80]	; (8012f7c <tcpip_inpkt+0x58>)
{
 8012f2a:	460e      	mov	r6, r1
 8012f2c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012f2e:	f00b ff49 	bl	801edc4 <sys_mbox_valid>
 8012f32:	b188      	cbz	r0, 8012f58 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012f34:	22fe      	movs	r2, #254	; 0xfe
 8012f36:	4912      	ldr	r1, [pc, #72]	; (8012f80 <tcpip_inpkt+0x5c>)
 8012f38:	200a      	movs	r0, #10
 8012f3a:	f002 fd91 	bl	8015a60 <memp_malloc_fn>
  if (msg == NULL) {
 8012f3e:	4604      	mov	r4, r0
 8012f40:	b1c0      	cbz	r0, 8012f74 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8012f42:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012f44:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8012f46:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8012f48:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8012f4a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012f4e:	480b      	ldr	r0, [pc, #44]	; (8012f7c <tcpip_inpkt+0x58>)
 8012f50:	f00b ff04 	bl	801ed5c <sys_mbox_trypost>
 8012f54:	b938      	cbnz	r0, 8012f66 <tcpip_inpkt+0x42>
}
 8012f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012f58:	4b09      	ldr	r3, [pc, #36]	; (8012f80 <tcpip_inpkt+0x5c>)
 8012f5a:	22fc      	movs	r2, #252	; 0xfc
 8012f5c:	4909      	ldr	r1, [pc, #36]	; (8012f84 <tcpip_inpkt+0x60>)
 8012f5e:	480a      	ldr	r0, [pc, #40]	; (8012f88 <tcpip_inpkt+0x64>)
 8012f60:	f00d fb1a 	bl	8020598 <iprintf>
 8012f64:	e7e6      	b.n	8012f34 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012f66:	4621      	mov	r1, r4
 8012f68:	200a      	movs	r0, #10
 8012f6a:	f002 fd9d 	bl	8015aa8 <memp_free>
    return ERR_MEM;
 8012f6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8012f74:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	20021928 	.word	0x20021928
 8012f80:	080265ec 	.word	0x080265ec
 8012f84:	080265dc 	.word	0x080265dc
 8012f88:	08026544 	.word	0x08026544

08012f8c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012f8c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8012f90:	f013 0f18 	tst.w	r3, #24
 8012f94:	d102      	bne.n	8012f9c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ip_input);
 8012f96:	4a03      	ldr	r2, [pc, #12]	; (8012fa4 <tcpip_input+0x18>)
 8012f98:	f7ff bfc4 	b.w	8012f24 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012f9c:	4a02      	ldr	r2, [pc, #8]	; (8012fa8 <tcpip_input+0x1c>)
 8012f9e:	f7ff bfc1 	b.w	8012f24 <tcpip_inpkt>
 8012fa2:	bf00      	nop
 8012fa4:	0801dd01 	.word	0x0801dd01
 8012fa8:	0801ebd5 	.word	0x0801ebd5

08012fac <tcpip_try_callback>:
{
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012fb0:	4814      	ldr	r0, [pc, #80]	; (8013004 <tcpip_try_callback+0x58>)
{
 8012fb2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012fb4:	f00b ff06 	bl	801edc4 <sys_mbox_valid>
 8012fb8:	b188      	cbz	r0, 8012fde <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012fba:	f240 125f 	movw	r2, #351	; 0x15f
 8012fbe:	4912      	ldr	r1, [pc, #72]	; (8013008 <tcpip_try_callback+0x5c>)
 8012fc0:	2009      	movs	r0, #9
 8012fc2:	f002 fd4d 	bl	8015a60 <memp_malloc_fn>
  if (msg == NULL) {
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	b1c0      	cbz	r0, 8012ffc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8012fca:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012fcc:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8012fce:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8012fd2:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012fd4:	480b      	ldr	r0, [pc, #44]	; (8013004 <tcpip_try_callback+0x58>)
 8012fd6:	f00b fec1 	bl	801ed5c <sys_mbox_trypost>
 8012fda:	b940      	cbnz	r0, 8012fee <tcpip_try_callback+0x42>
}
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012fde:	4b0a      	ldr	r3, [pc, #40]	; (8013008 <tcpip_try_callback+0x5c>)
 8012fe0:	f240 125d 	movw	r2, #349	; 0x15d
 8012fe4:	4909      	ldr	r1, [pc, #36]	; (801300c <tcpip_try_callback+0x60>)
 8012fe6:	480a      	ldr	r0, [pc, #40]	; (8013010 <tcpip_try_callback+0x64>)
 8012fe8:	f00d fad6 	bl	8020598 <iprintf>
 8012fec:	e7e5      	b.n	8012fba <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012fee:	4621      	mov	r1, r4
 8012ff0:	2009      	movs	r0, #9
 8012ff2:	f002 fd59 	bl	8015aa8 <memp_free>
    return ERR_MEM;
 8012ff6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012ffa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8012ffc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013000:	bd70      	pop	{r4, r5, r6, pc}
 8013002:	bf00      	nop
 8013004:	20021928 	.word	0x20021928
 8013008:	080265ec 	.word	0x080265ec
 801300c:	080265dc 	.word	0x080265dc
 8013010:	08026544 	.word	0x08026544

08013014 <tcpip_init>:
{
 8013014:	b530      	push	{r4, r5, lr}
 8013016:	b083      	sub	sp, #12
 8013018:	4605      	mov	r5, r0
 801301a:	460c      	mov	r4, r1
  lwip_init();
 801301c:	f001 ff9c 	bl	8014f58 <lwip_init>
  tcpip_init_done = initfunc;
 8013020:	4a12      	ldr	r2, [pc, #72]	; (801306c <tcpip_init+0x58>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013022:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8013024:	4b12      	ldr	r3, [pc, #72]	; (8013070 <tcpip_init+0x5c>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013026:	4813      	ldr	r0, [pc, #76]	; (8013074 <tcpip_init+0x60>)
  tcpip_init_done = initfunc;
 8013028:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 801302a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801302c:	f00b fe72 	bl	801ed14 <sys_mbox_new>
 8013030:	b9a0      	cbnz	r0, 801305c <tcpip_init+0x48>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013032:	4811      	ldr	r0, [pc, #68]	; (8013078 <tcpip_init+0x64>)
 8013034:	f00b fed8 	bl	801ede8 <sys_mutex_new>
 8013038:	b130      	cbz	r0, 8013048 <tcpip_init+0x34>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801303a:	4b10      	ldr	r3, [pc, #64]	; (801307c <tcpip_init+0x68>)
 801303c:	f240 2265 	movw	r2, #613	; 0x265
 8013040:	490f      	ldr	r1, [pc, #60]	; (8013080 <tcpip_init+0x6c>)
 8013042:	4810      	ldr	r0, [pc, #64]	; (8013084 <tcpip_init+0x70>)
 8013044:	f00d faa8 	bl	8020598 <iprintf>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013048:	2200      	movs	r2, #0
 801304a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801304e:	490e      	ldr	r1, [pc, #56]	; (8013088 <tcpip_init+0x74>)
 8013050:	9200      	str	r2, [sp, #0]
 8013052:	480e      	ldr	r0, [pc, #56]	; (801308c <tcpip_init+0x78>)
 8013054:	f00b fef8 	bl	801ee48 <sys_thread_new>
}
 8013058:	b003      	add	sp, #12
 801305a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801305c:	4b07      	ldr	r3, [pc, #28]	; (801307c <tcpip_init+0x68>)
 801305e:	f240 2261 	movw	r2, #609	; 0x261
 8013062:	490b      	ldr	r1, [pc, #44]	; (8013090 <tcpip_init+0x7c>)
 8013064:	4807      	ldr	r0, [pc, #28]	; (8013084 <tcpip_init+0x70>)
 8013066:	f00d fa97 	bl	8020598 <iprintf>
 801306a:	e7e2      	b.n	8013032 <tcpip_init+0x1e>
 801306c:	20021920 	.word	0x20021920
 8013070:	20021924 	.word	0x20021924
 8013074:	20021928 	.word	0x20021928
 8013078:	20026a70 	.word	0x20026a70
 801307c:	080265ec 	.word	0x080265ec
 8013080:	080265a8 	.word	0x080265a8
 8013084:	08026544 	.word	0x08026544
 8013088:	08012e1d 	.word	0x08012e1d
 801308c:	080265cc 	.word	0x080265cc
 8013090:	08026584 	.word	0x08026584

08013094 <pbuf_free_callback>:
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_try_callback(pbuf_free_int, p);
 8013094:	4601      	mov	r1, r0
 8013096:	4801      	ldr	r0, [pc, #4]	; (801309c <pbuf_free_callback+0x8>)
 8013098:	f7ff bf88 	b.w	8012fac <tcpip_try_callback>
 801309c:	08012e19 	.word	0x08012e19

080130a0 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80130a0:	b1e8      	cbz	r0, 80130de <fs_open+0x3e>
 80130a2:	b1e1      	cbz	r1, 80130de <fs_open+0x3e>
{
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	460d      	mov	r5, r1
 80130a8:	4606      	mov	r6, r0
 80130aa:	490f      	ldr	r1, [pc, #60]	; (80130e8 <fs_open+0x48>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80130ac:	4c0f      	ldr	r4, [pc, #60]	; (80130ec <fs_open+0x4c>)
 80130ae:	e000      	b.n	80130b2 <fs_open+0x12>
 80130b0:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7ed f8c4 	bl	8000240 <strcmp>
 80130b8:	b130      	cbz	r0, 80130c8 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80130ba:	6824      	ldr	r4, [r4, #0]
 80130bc:	2c00      	cmp	r4, #0
 80130be:	d1f7      	bne.n	80130b0 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 80130c0:	f06f 0305 	mvn.w	r3, #5
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 80130c8:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 80130ca:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 80130cc:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 80130ce:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 80130d2:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 80130d6:	7c22      	ldrb	r2, [r4, #16]
}
 80130d8:	4618      	mov	r0, r3
      file->flags = f->flags;
 80130da:	7432      	strb	r2, [r6, #16]
}
 80130dc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80130de:	f06f 030f 	mvn.w	r3, #15
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	080314c0 	.word	0x080314c0
 80130ec:	0803c62c 	.word	0x0803c62c

080130f0 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80130f0:	4770      	bx	lr
 80130f2:	bf00      	nop

080130f4 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80130f4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 80130f8:	1a10      	subs	r0, r2, r0
 80130fa:	4770      	bx	lr

080130fc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80130fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8013100:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8013102:	b374      	cbz	r4, 8013162 <http_write+0x66>
 8013104:	461f      	mov	r7, r3
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8013106:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8013108:	4605      	mov	r5, r0
 801310a:	4690      	mov	r8, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8013112:	460e      	mov	r6, r1
 8013114:	b298      	uxth	r0, r3
 8013116:	4290      	cmp	r0, r2
 8013118:	bf28      	it	cs
 801311a:	4610      	movcs	r0, r2
 801311c:	4284      	cmp	r4, r0
 801311e:	bf28      	it	cs
 8013120:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8013122:	463b      	mov	r3, r7
 8013124:	4622      	mov	r2, r4
 8013126:	4631      	mov	r1, r6
 8013128:	4628      	mov	r0, r5
 801312a:	f006 fe55 	bl	8019dd8 <tcp_write>
    if (err == ERR_MEM) {
 801312e:	1c43      	adds	r3, r0, #1
 8013130:	d003      	beq.n	801313a <http_write+0x3e>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8013132:	b950      	cbnz	r0, 801314a <http_write+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8013134:	f8a8 4000 	strh.w	r4, [r8]
 8013138:	e00a      	b.n	8013150 <http_write+0x54>
      if ((altcp_sndbuf(pcb) == 0) ||
 801313a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 801313e:	b123      	cbz	r3, 801314a <http_write+0x4e>
 8013140:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8013144:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8013146:	2b08      	cmp	r3, #8
 8013148:	d908      	bls.n	801315c <http_write+0x60>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	f8a8 3000 	strh.w	r3, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8013150:	8b6b      	ldrh	r3, [r5, #26]
 8013152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013156:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8013158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } while ((err == ERR_MEM) && (len > 1));
 801315c:	2c01      	cmp	r4, #1
 801315e:	d8e0      	bhi.n	8013122 <http_write+0x26>
 8013160:	e7f3      	b.n	801314a <http_write+0x4e>
    return ERR_OK;
 8013162:	4620      	mov	r0, r4
}
 8013164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013168 <http_state_eof>:
{
 8013168:	b510      	push	{r4, lr}
 801316a:	4604      	mov	r4, r0
  if (hs->handle) {
 801316c:	6940      	ldr	r0, [r0, #20]
 801316e:	b118      	cbz	r0, 8013178 <http_state_eof+0x10>
    fs_close(hs->handle);
 8013170:	f7ff ffbe 	bl	80130f0 <fs_close>
    hs->handle = NULL;
 8013174:	2300      	movs	r3, #0
 8013176:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8013178:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801317a:	b118      	cbz	r0, 8013184 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 801317c:	f002 f8ac 	bl	80152d8 <mem_free>
    hs->ssi = NULL;
 8013180:	2300      	movs	r3, #0
 8013182:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8013184:	6a20      	ldr	r0, [r4, #32]
 8013186:	b118      	cbz	r0, 8013190 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8013188:	f002 ff68 	bl	801605c <pbuf_free>
    hs->req = NULL;
 801318c:	2300      	movs	r3, #0
 801318e:	6223      	str	r3, [r4, #32]
}
 8013190:	bd10      	pop	{r4, pc}
 8013192:	bf00      	nop

08013194 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8013198:	490c      	ldr	r1, [pc, #48]	; (80131cc <http_get_404_file+0x38>)
  err = fs_open(&hs->file_handle, *uri);
 801319a:	4604      	mov	r4, r0
  *uri = "/404.html";
 801319c:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 801319e:	f7ff ff7f 	bl	80130a0 <fs_open>
  if (err != ERR_OK) {
 80131a2:	b908      	cbnz	r0, 80131a8 <http_get_404_file+0x14>
      }
    }
  }

  return &hs->file_handle;
}
 80131a4:	4620      	mov	r0, r4
 80131a6:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 80131a8:	4909      	ldr	r1, [pc, #36]	; (80131d0 <http_get_404_file+0x3c>)
    err = fs_open(&hs->file_handle, *uri);
 80131aa:	4620      	mov	r0, r4
    *uri = "/404.htm";
 80131ac:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 80131ae:	f7ff ff77 	bl	80130a0 <fs_open>
    if (err != ERR_OK) {
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d0f6      	beq.n	80131a4 <http_get_404_file+0x10>
      *uri = "/404.shtml";
 80131b6:	4907      	ldr	r1, [pc, #28]	; (80131d4 <http_get_404_file+0x40>)
      err = fs_open(&hs->file_handle, *uri);
 80131b8:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 80131ba:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 80131bc:	f7ff ff70 	bl	80130a0 <fs_open>
      if (err != ERR_OK) {
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d0ef      	beq.n	80131a4 <http_get_404_file+0x10>
        *uri = NULL;
 80131c4:	2300      	movs	r3, #0
        return NULL;
 80131c6:	461c      	mov	r4, r3
        *uri = NULL;
 80131c8:	602b      	str	r3, [r5, #0]
        return NULL;
 80131ca:	e7eb      	b.n	80131a4 <http_get_404_file+0x10>
 80131cc:	0803c69c 	.word	0x0803c69c
 80131d0:	0803c6a8 	.word	0x0803c6a8
 80131d4:	0803c6b4 	.word	0x0803c6b4

080131d8 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80131d8:	bb82      	cbnz	r2, 801323c <http_accept+0x64>
{
 80131da:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 80131dc:	fab1 f581 	clz	r5, r1
 80131e0:	096d      	lsrs	r5, r5, #5
 80131e2:	bb45      	cbnz	r5, 8013236 <http_accept+0x5e>
 80131e4:	460c      	mov	r4, r1
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80131e6:	2101      	movs	r1, #1
 80131e8:	4620      	mov	r0, r4
 80131ea:	f003 fe8f 	bl	8016f0c <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80131ee:	2034      	movs	r0, #52	; 0x34
 80131f0:	f002 fa42 	bl	8015678 <mem_malloc>
  if (ret != NULL) {
 80131f4:	4606      	mov	r6, r0
 80131f6:	b1d8      	cbz	r0, 8013230 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 80131f8:	2234      	movs	r2, #52	; 0x34
 80131fa:	4629      	mov	r1, r5
 80131fc:	f00c fa4d 	bl	801f69a <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8013200:	4631      	mov	r1, r6
 8013202:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8013204:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8013206:	f003 feb9 	bl	8016f7c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 801320a:	4620      	mov	r0, r4
 801320c:	490d      	ldr	r1, [pc, #52]	; (8013244 <http_accept+0x6c>)
 801320e:	f003 feb9 	bl	8016f84 <tcp_recv>
  altcp_err(pcb, http_err);
 8013212:	4620      	mov	r0, r4
 8013214:	490c      	ldr	r1, [pc, #48]	; (8013248 <http_accept+0x70>)
 8013216:	f003 feed 	bl	8016ff4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801321a:	2204      	movs	r2, #4
 801321c:	4620      	mov	r0, r4
 801321e:	490b      	ldr	r1, [pc, #44]	; (801324c <http_accept+0x74>)
 8013220:	f003 ff0a 	bl	8017038 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8013224:	4620      	mov	r0, r4
 8013226:	490a      	ldr	r1, [pc, #40]	; (8013250 <http_accept+0x78>)
 8013228:	f003 fec8 	bl	8016fbc <tcp_sent>

  return ERR_OK;
 801322c:	4628      	mov	r0, r5
}
 801322e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8013230:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013234:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8013236:	f06f 0005 	mvn.w	r0, #5
}
 801323a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801323c:	f06f 0005 	mvn.w	r0, #5
}
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	08013e11 	.word	0x08013e11
 8013248:	08014265 	.word	0x08014265
 801324c:	08013db9 	.word	0x08013db9
 8013250:	08013d9d 	.word	0x08013d9d

08013254 <http_init_file>:
{
 8013254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	b087      	sub	sp, #28
 801325a:	4604      	mov	r4, r0
  if (file != NULL) {
 801325c:	460d      	mov	r5, r1
{
 801325e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8013262:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013264:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 8013268:	2900      	cmp	r1, #0
 801326a:	f000 80ad 	beq.w	80133c8 <http_init_file+0x174>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801326e:	680b      	ldr	r3, [r1, #0]
 8013270:	2b00      	cmp	r3, #0
 8013272:	f000 80af 	beq.w	80133d4 <http_init_file+0x180>
    if (tag_check) {
 8013276:	2f00      	cmp	r7, #0
 8013278:	d16e      	bne.n	8013358 <http_init_file+0x104>
    hs->handle = file;
 801327a:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 801327c:	2e00      	cmp	r6, #0
 801327e:	d04e      	beq.n	801331e <http_init_file+0xca>
 8013280:	4b64      	ldr	r3, [pc, #400]	; (8013414 <http_init_file+0x1c0>)
  if (!params || (params[0] == '\0')) {
 8013282:	7837      	ldrb	r7, [r6, #0]
 8013284:	9305      	str	r3, [sp, #20]
 8013286:	2f00      	cmp	r7, #0
 8013288:	d041      	beq.n	801330e <http_init_file+0xba>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801328a:	2700      	movs	r7, #0
 801328c:	f8df a188 	ldr.w	sl, [pc, #392]	; 8013418 <http_init_file+0x1c4>
 8013290:	4699      	mov	r9, r3
 8013292:	46b3      	mov	fp, r6
 8013294:	e016      	b.n	80132c4 <http_init_file+0x70>
      *pair = '\0';
 8013296:	f04f 0300 	mov.w	r3, #0
 801329a:	f808 3b01 	strb.w	r3, [r8], #1
 801329e:	f1b8 0f00 	cmp.w	r8, #0
 80132a2:	bf08      	it	eq
 80132a4:	2600      	moveq	r6, #0
    equals = strchr(equals, '=');
 80132a6:	4658      	mov	r0, fp
 80132a8:	213d      	movs	r1, #61	; 0x3d
 80132aa:	f00d fb65 	bl	8020978 <strchr>
    if (equals) {
 80132ae:	b338      	cbz	r0, 8013300 <http_init_file+0xac>
      *equals = '\0';
 80132b0:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80132b4:	46c3      	mov	fp, r8
 80132b6:	f109 0904 	add.w	r9, r9, #4
      *equals = '\0';
 80132ba:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 80132be:	f849 0c04 	str.w	r0, [r9, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80132c2:	b326      	cbz	r6, 801330e <http_init_file+0xba>
 80132c4:	3701      	adds	r7, #1
    pair = strchr(pair, '&');
 80132c6:	2126      	movs	r1, #38	; 0x26
 80132c8:	4658      	mov	r0, fp
    http_cgi_params[loop] = pair;
 80132ca:	f84a bb04 	str.w	fp, [sl], #4
    pair = strchr(pair, '&');
 80132ce:	f00d fb53 	bl	8020978 <strchr>
 80132d2:	2f0f      	cmp	r7, #15
    if (pair) {
 80132d4:	4680      	mov	r8, r0
 80132d6:	bfcc      	ite	gt
 80132d8:	2600      	movgt	r6, #0
 80132da:	2601      	movle	r6, #1
 80132dc:	2800      	cmp	r0, #0
 80132de:	d1da      	bne.n	8013296 <http_init_file+0x42>
      pair = strchr(equals, ' ');
 80132e0:	2120      	movs	r1, #32
 80132e2:	4658      	mov	r0, fp
 80132e4:	f00d fb48 	bl	8020978 <strchr>
      if (pair) {
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f000 8090 	beq.w	801340e <http_init_file+0x1ba>
        *pair = '\0';
 80132ee:	f880 8000 	strb.w	r8, [r0]
    equals = strchr(equals, '=');
 80132f2:	213d      	movs	r1, #61	; 0x3d
 80132f4:	4658      	mov	r0, fp
        *pair = '\0';
 80132f6:	4646      	mov	r6, r8
    equals = strchr(equals, '=');
 80132f8:	f00d fb3e 	bl	8020978 <strchr>
    if (equals) {
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d1d7      	bne.n	80132b0 <http_init_file+0x5c>
      http_cgi_param_vals[loop] = NULL;
 8013300:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8013304:	46c3      	mov	fp, r8
 8013306:	f109 0904 	add.w	r9, r9, #4
 801330a:	2e00      	cmp	r6, #0
 801330c:	d1da      	bne.n	80132c4 <http_init_file+0x70>
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 801330e:	9b05      	ldr	r3, [sp, #20]
 8013310:	463a      	mov	r2, r7
 8013312:	9904      	ldr	r1, [sp, #16]
 8013314:	4628      	mov	r0, r5
 8013316:	9300      	str	r3, [sp, #0]
 8013318:	4b3f      	ldr	r3, [pc, #252]	; (8013418 <http_init_file+0x1c4>)
 801331a:	f7f1 fe49 	bl	8004fb0 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801331e:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013322:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8013324:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8013326:	db69      	blt.n	80133fc <http_init_file+0x1a8>
    hs->retries = 0;
 8013328:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801332a:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801332c:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 801332e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8013332:	7c1b      	ldrb	r3, [r3, #16]
 8013334:	07d9      	lsls	r1, r3, #31
 8013336:	d52a      	bpl.n	801338e <http_init_file+0x13a>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8013338:	9b03      	ldr	r3, [sp, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d136      	bne.n	80133ac <http_init_file+0x158>
  if (hs->keepalive) {
 801333e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8013342:	b12b      	cbz	r3, 8013350 <http_init_file+0xfc>
    if (hs->ssi != NULL) {
 8013344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013346:	2b00      	cmp	r3, #0
 8013348:	d04f      	beq.n	80133ea <http_init_file+0x196>
      hs->keepalive = 0;
 801334a:	2300      	movs	r3, #0
 801334c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8013350:	2000      	movs	r0, #0
 8013352:	b007      	add	sp, #28
 8013354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8013358:	f44f 7090 	mov.w	r0, #288	; 0x120
 801335c:	f002 f98c 	bl	8015678 <mem_malloc>
  if (ret != NULL) {
 8013360:	4607      	mov	r7, r0
 8013362:	2800      	cmp	r0, #0
 8013364:	d089      	beq.n	801327a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8013366:	f44f 7290 	mov.w	r2, #288	; 0x120
 801336a:	2100      	movs	r1, #0
 801336c:	f00c f995 	bl	801f69a <memset>
        ssi->tag_index = 0;
 8013370:	2200      	movs	r2, #0
        ssi->parse_left = file->len;
 8013372:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 8013376:	823a      	strh	r2, [r7, #16]
        ssi->tag_state = TAG_NONE;
 8013378:	f887 211e 	strb.w	r2, [r7, #286]	; 0x11e
        ssi->parsed = file->data;
 801337c:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 801337e:	e9c7 3102 	strd	r3, r1, [r7, #8]
        hs->ssi = ssi;
 8013382:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8013384:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8013386:	2e00      	cmp	r6, #0
 8013388:	f47f af7a 	bne.w	8013280 <http_init_file+0x2c>
 801338c:	e7c7      	b.n	801331e <http_init_file+0xca>
    LWIP_ASSERT("HTTP headers not included in file system",
 801338e:	4b23      	ldr	r3, [pc, #140]	; (801341c <http_init_file+0x1c8>)
 8013390:	f640 1244 	movw	r2, #2372	; 0x944
 8013394:	4922      	ldr	r1, [pc, #136]	; (8013420 <http_init_file+0x1cc>)
 8013396:	4823      	ldr	r0, [pc, #140]	; (8013424 <http_init_file+0x1d0>)
 8013398:	f00d f8fe 	bl	8020598 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d0cd      	beq.n	801333e <http_init_file+0xea>
 80133a2:	6963      	ldr	r3, [r4, #20]
 80133a4:	7c1b      	ldrb	r3, [r3, #16]
 80133a6:	07db      	lsls	r3, r3, #31
 80133a8:	d5c9      	bpl.n	801333e <http_init_file+0xea>
 80133aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80133ac:	491e      	ldr	r1, [pc, #120]	; (8013428 <http_init_file+0x1d4>)
 80133ae:	69a0      	ldr	r0, [r4, #24]
 80133b0:	f000 ffea 	bl	8014388 <lwip_strnstr>
      if (file_start != NULL) {
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d0c2      	beq.n	801333e <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80133b8:	3004      	adds	r0, #4
 80133ba:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 80133bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 80133be:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 80133c0:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 80133c2:	1a9b      	subs	r3, r3, r2
 80133c4:	6263      	str	r3, [r4, #36]	; 0x24
 80133c6:	e7ba      	b.n	801333e <http_init_file+0xea>
    hs->file = NULL;
 80133c8:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 80133cc:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 80133ce:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80133d2:	e7b4      	b.n	801333e <http_init_file+0xea>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80133d4:	4b11      	ldr	r3, [pc, #68]	; (801341c <http_init_file+0x1c8>)
 80133d6:	f640 120b 	movw	r2, #2315	; 0x90b
 80133da:	4914      	ldr	r1, [pc, #80]	; (801342c <http_init_file+0x1d8>)
 80133dc:	4811      	ldr	r0, [pc, #68]	; (8013424 <http_init_file+0x1d0>)
 80133de:	f00d f8db 	bl	8020598 <iprintf>
    if (tag_check) {
 80133e2:	2f00      	cmp	r7, #0
 80133e4:	f43f af49 	beq.w	801327a <http_init_file+0x26>
 80133e8:	e7b6      	b.n	8013358 <http_init_file+0x104>
      if ((hs->handle != NULL) &&
 80133ea:	6963      	ldr	r3, [r4, #20]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d0af      	beq.n	8013350 <http_init_file+0xfc>
 80133f0:	7c1b      	ldrb	r3, [r3, #16]
 80133f2:	f003 0303 	and.w	r3, r3, #3
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d1aa      	bne.n	8013350 <http_init_file+0xfc>
 80133fa:	e7a6      	b.n	801334a <http_init_file+0xf6>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80133fc:	f640 1234 	movw	r2, #2356	; 0x934
 8013400:	4b06      	ldr	r3, [pc, #24]	; (801341c <http_init_file+0x1c8>)
 8013402:	490b      	ldr	r1, [pc, #44]	; (8013430 <http_init_file+0x1dc>)
 8013404:	4807      	ldr	r0, [pc, #28]	; (8013424 <http_init_file+0x1d0>)
 8013406:	f00d f8c7 	bl	8020598 <iprintf>
 801340a:	686a      	ldr	r2, [r5, #4]
 801340c:	e78c      	b.n	8013328 <http_init_file+0xd4>
      if (pair) {
 801340e:	4646      	mov	r6, r8
 8013410:	e749      	b.n	80132a6 <http_init_file+0x52>
 8013412:	bf00      	nop
 8013414:	2002192c 	.word	0x2002192c
 8013418:	2002196c 	.word	0x2002196c
 801341c:	0803c6c0 	.word	0x0803c6c0
 8013420:	0803c72c 	.word	0x0803c72c
 8013424:	08026544 	.word	0x08026544
 8013428:	080245cc 	.word	0x080245cc
 801342c:	0803c6f8 	.word	0x0803c6f8
 8013430:	0803c70c 	.word	0x0803c70c

08013434 <http_find_file>:
{
 8013434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013438:	4605      	mov	r5, r0
 801343a:	b087      	sub	sp, #28
  size_t uri_len = strlen(uri);
 801343c:	4608      	mov	r0, r1
 801343e:	460c      	mov	r4, r1
{
 8013440:	9105      	str	r1, [sp, #20]
 8013442:	4690      	mov	r8, r2
 8013444:	462e      	mov	r6, r5
  size_t uri_len = strlen(uri);
 8013446:	f7ec ff05 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801344a:	4607      	mov	r7, r0
 801344c:	b118      	cbz	r0, 8013456 <http_find_file+0x22>
 801344e:	1e43      	subs	r3, r0, #1
 8013450:	5ce2      	ldrb	r2, [r4, r3]
 8013452:	2a2f      	cmp	r2, #47	; 0x2f
 8013454:	d064      	beq.n	8013520 <http_find_file+0xec>
  u8_t tag_check = 0;
 8013456:	f04f 0900 	mov.w	r9, #0
    params = (char *)strchr(uri, '?');
 801345a:	213f      	movs	r1, #63	; 0x3f
 801345c:	4620      	mov	r0, r4
 801345e:	f00d fa8b 	bl	8020978 <strchr>
    if (params != NULL) {
 8013462:	4607      	mov	r7, r0
 8013464:	b118      	cbz	r0, 801346e <http_find_file+0x3a>
      *params = '\0';
 8013466:	2300      	movs	r3, #0
 8013468:	f807 3b01 	strb.w	r3, [r7], #1
 801346c:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 801346e:	4621      	mov	r1, r4
 8013470:	4628      	mov	r0, r5
 8013472:	f7ff fe15 	bl	80130a0 <fs_open>
    if (err == ERR_OK) {
 8013476:	b998      	cbnz	r0, 80134a0 <http_find_file+0x6c>
    if (file != NULL) {
 8013478:	b1ce      	cbz	r6, 80134ae <http_find_file+0x7a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 801347a:	7c33      	ldrb	r3, [r6, #16]
 801347c:	9c05      	ldr	r4, [sp, #20]
 801347e:	f013 0908 	ands.w	r9, r3, #8
 8013482:	d01b      	beq.n	80134bc <http_find_file+0x88>
        tag_check = 1;
 8013484:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8013488:	4623      	mov	r3, r4
 801348a:	4642      	mov	r2, r8
 801348c:	4631      	mov	r1, r6
 801348e:	9701      	str	r7, [sp, #4]
 8013490:	f8cd 9000 	str.w	r9, [sp]
 8013494:	4628      	mov	r0, r5
 8013496:	f7ff fedd 	bl	8013254 <http_init_file>
}
 801349a:	b007      	add	sp, #28
 801349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 80134a0:	a905      	add	r1, sp, #20
 80134a2:	4628      	mov	r0, r5
 80134a4:	f7ff fe76 	bl	8013194 <http_get_404_file>
 80134a8:	4606      	mov	r6, r0
    if (file != NULL) {
 80134aa:	2e00      	cmp	r6, #0
 80134ac:	d1e5      	bne.n	801347a <http_find_file+0x46>
    file = http_get_404_file(hs, &uri);
 80134ae:	a905      	add	r1, sp, #20
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7ff fe6f 	bl	8013194 <http_get_404_file>
 80134b6:	9c05      	ldr	r4, [sp, #20]
 80134b8:	4606      	mov	r6, r0
 80134ba:	e7e5      	b.n	8013488 <http_find_file+0x54>
    char *param = (char *)strstr(uri, "?");
 80134bc:	213f      	movs	r1, #63	; 0x3f
 80134be:	4620      	mov	r0, r4
 80134c0:	f00d fa5a 	bl	8020978 <strchr>
    if (param != NULL) {
 80134c4:	4682      	mov	sl, r0
 80134c6:	b108      	cbz	r0, 80134cc <http_find_file+0x98>
      *param = 0;
 80134c8:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80134cc:	212e      	movs	r1, #46	; 0x2e
 80134ce:	4620      	mov	r0, r4
 80134d0:	f00d fa52 	bl	8020978 <strchr>
 80134d4:	4681      	mov	r9, r0
 80134d6:	b908      	cbnz	r0, 80134dc <http_find_file+0xa8>
 80134d8:	e08b      	b.n	80135f2 <http_find_file+0x1be>
 80134da:	4681      	mov	r9, r0
 80134dc:	212e      	movs	r1, #46	; 0x2e
 80134de:	f109 0001 	add.w	r0, r9, #1
 80134e2:	f00d fa49 	bl	8020978 <strchr>
 80134e6:	2800      	cmp	r0, #0
 80134e8:	d1f7      	bne.n	80134da <http_find_file+0xa6>
 80134ea:	4c43      	ldr	r4, [pc, #268]	; (80135f8 <http_find_file+0x1c4>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80134ec:	4648      	mov	r0, r9
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80134ee:	4943      	ldr	r1, [pc, #268]	; (80135fc <http_find_file+0x1c8>)
 80134f0:	f104 0b10 	add.w	fp, r4, #16
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80134f4:	f000 ff70 	bl	80143d8 <lwip_stricmp>
 80134f8:	b140      	cbz	r0, 801350c <http_find_file+0xd8>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80134fa:	455c      	cmp	r4, fp
 80134fc:	d04c      	beq.n	8013598 <http_find_file+0x164>
 80134fe:	f854 1b04 	ldr.w	r1, [r4], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8013502:	4648      	mov	r0, r9
 8013504:	f000 ff68 	bl	80143d8 <lwip_stricmp>
 8013508:	2800      	cmp	r0, #0
 801350a:	d1f6      	bne.n	80134fa <http_find_file+0xc6>
        tag_check = 1;
 801350c:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8013510:	f1ba 0f00 	cmp.w	sl, #0
 8013514:	d002      	beq.n	801351c <http_find_file+0xe8>
      *param = '?';
 8013516:	233f      	movs	r3, #63	; 0x3f
 8013518:	f88a 3000 	strb.w	r3, [sl]
 801351c:	9c05      	ldr	r4, [sp, #20]
 801351e:	e7b3      	b.n	8013488 <http_find_file+0x54>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8013520:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013600 <http_find_file+0x1cc>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8013524:	4554      	cmp	r4, sl
 8013526:	d106      	bne.n	8013536 <http_find_file+0x102>
 8013528:	f1a0 0201 	sub.w	r2, r0, #1
 801352c:	fab2 f282 	clz	r2, r2
 8013530:	0952      	lsrs	r2, r2, #5
 8013532:	2a00      	cmp	r2, #0
 8013534:	d05a      	beq.n	80135ec <http_find_file+0x1b8>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8013536:	2b3f      	cmp	r3, #63	; 0x3f
 8013538:	bf28      	it	cs
 801353a:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 801353c:	2f01      	cmp	r7, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 801353e:	9302      	str	r3, [sp, #8]
    if (copy_len > 0) {
 8013540:	d008      	beq.n	8013554 <http_find_file+0x120>
      MEMCPY(http_uri_buf, uri, copy_len);
 8013542:	4621      	mov	r1, r4
 8013544:	461a      	mov	r2, r3
 8013546:	482e      	ldr	r0, [pc, #184]	; (8013600 <http_find_file+0x1cc>)
 8013548:	461c      	mov	r4, r3
 801354a:	f00c f882 	bl	801f652 <memcpy>
      http_uri_buf[copy_len] = 0;
 801354e:	2300      	movs	r3, #0
 8013550:	f80a 3004 	strb.w	r3, [sl, r4]
{
 8013554:	f04f 0900 	mov.w	r9, #0
        file_name = http_uri_buf;
 8013558:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8013600 <http_find_file+0x1cc>
 801355c:	9603      	str	r6, [sp, #12]
 801355e:	9e02      	ldr	r6, [sp, #8]
 8013560:	f8cd 8008 	str.w	r8, [sp, #8]
      if (copy_len > 0) {
 8013564:	2f01      	cmp	r7, #1
        file_name = http_uri_buf;
 8013566:	465c      	mov	r4, fp
      if (copy_len > 0) {
 8013568:	d012      	beq.n	8013590 <http_find_file+0x15c>
        if (len_left > 0) {
 801356a:	f1d6 033f 	rsbs	r3, r6, #63	; 0x3f
 801356e:	d116      	bne.n	801359e <http_find_file+0x16a>
      err = fs_open(&hs->file_handle, file_name);
 8013570:	4621      	mov	r1, r4
 8013572:	4628      	mov	r0, r5
 8013574:	f7ff fd94 	bl	80130a0 <fs_open>
      if (err == ERR_OK) {
 8013578:	b358      	cbz	r0, 80135d2 <http_find_file+0x19e>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801357a:	f109 0901 	add.w	r9, r9, #1
 801357e:	f1b9 0f05 	cmp.w	r9, #5
 8013582:	d1ef      	bne.n	8013564 <http_find_file+0x130>
 8013584:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8013586:	f04f 0900 	mov.w	r9, #0
 801358a:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 801358e:	e764      	b.n	801345a <http_find_file+0x26>
        file_name = httpd_default_filenames[loop].name;
 8013590:	4b1c      	ldr	r3, [pc, #112]	; (8013604 <http_find_file+0x1d0>)
 8013592:	f853 4039 	ldr.w	r4, [r3, r9, lsl #3]
 8013596:	e7eb      	b.n	8013570 <http_find_file+0x13c>
  u8_t tag_check = 0;
 8013598:	f04f 0900 	mov.w	r9, #0
 801359c:	e7b8      	b.n	8013510 <http_find_file+0xdc>
 801359e:	9304      	str	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80135a0:	eb0a 0806 	add.w	r8, sl, r6
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80135a4:	4b17      	ldr	r3, [pc, #92]	; (8013604 <http_find_file+0x1d0>)
 80135a6:	f853 1039 	ldr.w	r1, [r3, r9, lsl #3]
 80135aa:	4608      	mov	r0, r1
 80135ac:	468a      	mov	sl, r1
 80135ae:	f7ec fe51 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80135b2:	9b04      	ldr	r3, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80135b4:	4651      	mov	r1, sl
        file_name = http_uri_buf;
 80135b6:	46da      	mov	sl, fp
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80135b8:	4283      	cmp	r3, r0
 80135ba:	bf28      	it	cs
 80135bc:	4603      	movcs	r3, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80135be:	4640      	mov	r0, r8
 80135c0:	461a      	mov	r2, r3
 80135c2:	9304      	str	r3, [sp, #16]
 80135c4:	f00c f845 	bl	801f652 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80135c8:	2200      	movs	r2, #0
 80135ca:	9b04      	ldr	r3, [sp, #16]
 80135cc:	f808 2003 	strb.w	r2, [r8, r3]
 80135d0:	e7ce      	b.n	8013570 <http_find_file+0x13c>
        tag_check = httpd_default_filenames[loop].shtml;
 80135d2:	4b0c      	ldr	r3, [pc, #48]	; (8013604 <http_find_file+0x1d0>)
        uri = file_name;
 80135d4:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 80135d6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80135da:	e9dd 8602 	ldrd	r8, r6, [sp, #8]
 80135de:	f899 9004 	ldrb.w	r9, [r9, #4]
  if (file == NULL) {
 80135e2:	2d00      	cmp	r5, #0
 80135e4:	f43f af39 	beq.w	801345a <http_find_file+0x26>
  char *params = NULL;
 80135e8:	4607      	mov	r7, r0
 80135ea:	e74d      	b.n	8013488 <http_find_file+0x54>
 80135ec:	4654      	mov	r4, sl
  u8_t tag_check = 0;
 80135ee:	4691      	mov	r9, r2
 80135f0:	e733      	b.n	801345a <http_find_file+0x26>
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80135f2:	46a1      	mov	r9, r4
 80135f4:	e779      	b.n	80134ea <http_find_file+0xb6>
 80135f6:	bf00      	nop
 80135f8:	0803c644 	.word	0x0803c644
 80135fc:	0803c67c 	.word	0x0803c67c
 8013600:	200219ac 	.word	0x200219ac
 8013604:	0803c8c8 	.word	0x0803c8c8

08013608 <http_post_rxpbuf>:
{
 8013608:	b570      	push	{r4, r5, r6, lr}
 801360a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801360c:	4604      	mov	r4, r0
  if (p != NULL) {
 801360e:	b1d1      	cbz	r1, 8013646 <http_post_rxpbuf+0x3e>
    if (hs->post_content_len_left < p->tot_len) {
 8013610:	890a      	ldrh	r2, [r1, #8]
 8013612:	429a      	cmp	r2, r3
      hs->post_content_len_left = 0;
 8013614:	bf8c      	ite	hi
 8013616:	2300      	movhi	r3, #0
      hs->post_content_len_left -= p->tot_len;
 8013618:	1a9b      	subls	r3, r3, r2
 801361a:	6303      	str	r3, [r0, #48]	; 0x30
    err = httpd_post_receive_data(hs, p);
 801361c:	f7f1 fdca 	bl	80051b4 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8013620:	b180      	cbz	r0, 8013644 <http_post_rxpbuf+0x3c>
    hs->post_content_len_left = 0;
 8013622:	2300      	movs	r3, #0
 8013624:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8013626:	4d0a      	ldr	r5, [pc, #40]	; (8013650 <http_post_rxpbuf+0x48>)
 8013628:	2600      	movs	r6, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801362a:	4620      	mov	r0, r4
 801362c:	223f      	movs	r2, #63	; 0x3f
 801362e:	4629      	mov	r1, r5
  http_uri_buf[0] = 0;
 8013630:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013632:	f7f1 fdcf 	bl	80051d4 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8013636:	4632      	mov	r2, r6
 8013638:	4629      	mov	r1, r5
 801363a:	4620      	mov	r0, r4
}
 801363c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8013640:	f7ff bef8 	b.w	8013434 <http_find_file>
 8013644:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (hs->post_content_len_left == 0) {
 8013646:	2b00      	cmp	r3, #0
 8013648:	d0ed      	beq.n	8013626 <http_post_rxpbuf+0x1e>
}
 801364a:	2000      	movs	r0, #0
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	bf00      	nop
 8013650:	200219ac 	.word	0x200219ac

08013654 <http_find_error_file>:
  if (error_nr == 501) {
 8013654:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8013658:	4b16      	ldr	r3, [pc, #88]	; (80136b4 <http_find_error_file+0x60>)
 801365a:	4291      	cmp	r1, r2
 801365c:	4a16      	ldr	r2, [pc, #88]	; (80136b8 <http_find_error_file+0x64>)
{
 801365e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uri3 = "/400.shtml";
 8013660:	4c16      	ldr	r4, [pc, #88]	; (80136bc <http_find_error_file+0x68>)
 8013662:	bf18      	it	ne
 8013664:	461c      	movne	r4, r3
 8013666:	4b16      	ldr	r3, [pc, #88]	; (80136c0 <http_find_error_file+0x6c>)
{
 8013668:	b083      	sub	sp, #12
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801366a:	4621      	mov	r1, r4
    uri3 = "/400.shtml";
 801366c:	4e15      	ldr	r6, [pc, #84]	; (80136c4 <http_find_error_file+0x70>)
 801366e:	4d16      	ldr	r5, [pc, #88]	; (80136c8 <http_find_error_file+0x74>)
 8013670:	bf04      	itt	eq
 8013672:	4616      	moveq	r6, r2
 8013674:	461d      	moveq	r5, r3
{
 8013676:	4607      	mov	r7, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8013678:	f7ff fd12 	bl	80130a0 <fs_open>
 801367c:	b128      	cbz	r0, 801368a <http_find_error_file+0x36>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801367e:	4629      	mov	r1, r5
 8013680:	4638      	mov	r0, r7
 8013682:	f7ff fd0d 	bl	80130a0 <fs_open>
 8013686:	b958      	cbnz	r0, 80136a0 <http_find_error_file+0x4c>
    uri = uri2;
 8013688:	462c      	mov	r4, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 801368a:	2500      	movs	r5, #0
 801368c:	4623      	mov	r3, r4
 801368e:	4639      	mov	r1, r7
 8013690:	4638      	mov	r0, r7
 8013692:	9501      	str	r5, [sp, #4]
 8013694:	462a      	mov	r2, r5
 8013696:	9500      	str	r5, [sp, #0]
 8013698:	f7ff fddc 	bl	8013254 <http_init_file>
}
 801369c:	b003      	add	sp, #12
 801369e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 80136a0:	4631      	mov	r1, r6
 80136a2:	4638      	mov	r0, r7
 80136a4:	f7ff fcfc 	bl	80130a0 <fs_open>
 80136a8:	b908      	cbnz	r0, 80136ae <http_find_error_file+0x5a>
    uri = uri3;
 80136aa:	4634      	mov	r4, r6
 80136ac:	e7ed      	b.n	801368a <http_find_error_file+0x36>
    return ERR_ARG;
 80136ae:	f06f 000f 	mvn.w	r0, #15
 80136b2:	e7f3      	b.n	801369c <http_find_error_file+0x48>
 80136b4:	0803c690 	.word	0x0803c690
 80136b8:	0803c654 	.word	0x0803c654
 80136bc:	0803c66c 	.word	0x0803c66c
 80136c0:	0803c660 	.word	0x0803c660
 80136c4:	0803c678 	.word	0x0803c678
 80136c8:	0803c684 	.word	0x0803c684

080136cc <http_close_or_abort_conn.constprop.9>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80136cc:	b538      	push	{r3, r4, r5, lr}
 80136ce:	4604      	mov	r4, r0
  if (hs != NULL) {
 80136d0:	460d      	mov	r5, r1
 80136d2:	b381      	cbz	r1, 8013736 <http_close_or_abort_conn.constprop.9+0x6a>
    if ((hs->post_content_len_left != 0)
 80136d4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80136d6:	bb33      	cbnz	r3, 8013726 <http_close_or_abort_conn.constprop.9+0x5a>
  altcp_arg(pcb, NULL);
 80136d8:	2100      	movs	r1, #0
 80136da:	4620      	mov	r0, r4
 80136dc:	f003 fc4e 	bl	8016f7c <tcp_arg>
  altcp_recv(pcb, NULL);
 80136e0:	2100      	movs	r1, #0
 80136e2:	4620      	mov	r0, r4
 80136e4:	f003 fc4e 	bl	8016f84 <tcp_recv>
  altcp_err(pcb, NULL);
 80136e8:	2100      	movs	r1, #0
 80136ea:	4620      	mov	r0, r4
 80136ec:	f003 fc82 	bl	8016ff4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80136f0:	2200      	movs	r2, #0
 80136f2:	4620      	mov	r0, r4
 80136f4:	4611      	mov	r1, r2
 80136f6:	f003 fc9f 	bl	8017038 <tcp_poll>
  altcp_sent(pcb, NULL);
 80136fa:	2100      	movs	r1, #0
 80136fc:	4620      	mov	r0, r4
 80136fe:	f003 fc5d 	bl	8016fbc <tcp_sent>
    http_state_eof(hs);
 8013702:	4628      	mov	r0, r5
 8013704:	f7ff fd30 	bl	8013168 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8013708:	4628      	mov	r0, r5
 801370a:	f001 fde5 	bl	80152d8 <mem_free>
  err = altcp_close(pcb);
 801370e:	4620      	mov	r0, r4
 8013710:	f004 fa98 	bl	8017c44 <tcp_close>
  if (err != ERR_OK) {
 8013714:	4605      	mov	r5, r0
 8013716:	b120      	cbz	r0, 8013722 <http_close_or_abort_conn.constprop.9+0x56>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8013718:	4620      	mov	r0, r4
 801371a:	2204      	movs	r2, #4
 801371c:	4910      	ldr	r1, [pc, #64]	; (8013760 <http_close_or_abort_conn.constprop.9+0x94>)
 801371e:	f003 fc8b 	bl	8017038 <tcp_poll>
}
 8013722:	4628      	mov	r0, r5
 8013724:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8013726:	490f      	ldr	r1, [pc, #60]	; (8013764 <http_close_or_abort_conn.constprop.9+0x98>)
 8013728:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801372a:	223f      	movs	r2, #63	; 0x3f
 801372c:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 801372e:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8013730:	f7f1 fd50 	bl	80051d4 <httpd_post_finished>
 8013734:	e7d0      	b.n	80136d8 <http_close_or_abort_conn.constprop.9+0xc>
  altcp_arg(pcb, NULL);
 8013736:	f003 fc21 	bl	8016f7c <tcp_arg>
  altcp_recv(pcb, NULL);
 801373a:	4629      	mov	r1, r5
 801373c:	4620      	mov	r0, r4
 801373e:	f003 fc21 	bl	8016f84 <tcp_recv>
  altcp_err(pcb, NULL);
 8013742:	4629      	mov	r1, r5
 8013744:	4620      	mov	r0, r4
 8013746:	f003 fc55 	bl	8016ff4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801374a:	4629      	mov	r1, r5
 801374c:	4620      	mov	r0, r4
 801374e:	462a      	mov	r2, r5
 8013750:	f003 fc72 	bl	8017038 <tcp_poll>
  altcp_sent(pcb, NULL);
 8013754:	4629      	mov	r1, r5
 8013756:	4620      	mov	r0, r4
 8013758:	f003 fc30 	bl	8016fbc <tcp_sent>
 801375c:	e7d7      	b.n	801370e <http_close_or_abort_conn.constprop.9+0x42>
 801375e:	bf00      	nop
 8013760:	08013db9 	.word	0x08013db9
 8013764:	200219ac 	.word	0x200219ac

08013768 <http_eof>:
  if (hs->keepalive) {
 8013768:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 801376c:	b90a      	cbnz	r2, 8013772 <http_eof+0xa>
  return http_close_or_abort_conn(pcb, hs, 0);
 801376e:	f7ff bfad 	b.w	80136cc <http_close_or_abort_conn.constprop.9>
{
 8013772:	b538      	push	{r3, r4, r5, lr}
 8013774:	460c      	mov	r4, r1
 8013776:	4605      	mov	r5, r0
    http_state_eof(hs);
 8013778:	4608      	mov	r0, r1
 801377a:	f7ff fcf5 	bl	8013168 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 801377e:	2234      	movs	r2, #52	; 0x34
 8013780:	2100      	movs	r1, #0
 8013782:	4620      	mov	r0, r4
 8013784:	f00b ff89 	bl	801f69a <memset>
    hs->keepalive = 1;
 8013788:	2301      	movs	r3, #1
    hs->pcb = pcb;
 801378a:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801378c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8013790:	8b6b      	ldrh	r3, [r5, #26]
 8013792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013796:	836b      	strh	r3, [r5, #26]
}
 8013798:	bd38      	pop	{r3, r4, r5, pc}
 801379a:	bf00      	nop

0801379c <http_send>:
{
 801379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a0:	b089      	sub	sp, #36	; 0x24
  if (hs == NULL) {
 80137a2:	2900      	cmp	r1, #0
 80137a4:	d05f      	beq.n	8013866 <http_send+0xca>
  if (hs->left == 0) {
 80137a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80137a8:	460d      	mov	r5, r1
 80137aa:	4683      	mov	fp, r0
 80137ac:	b323      	cbz	r3, 80137f8 <http_send+0x5c>
  if (hs->ssi) {
 80137ae:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80137b0:	69a9      	ldr	r1, [r5, #24]
 80137b2:	2c00      	cmp	r4, #0
 80137b4:	d032      	beq.n	801381c <http_send+0x80>
  if (ssi->parsed > hs->file) {
 80137b6:	6826      	ldr	r6, [r4, #0]
  len = altcp_sndbuf(pcb);
 80137b8:	f8bb 2064 	ldrh.w	r2, [fp, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 80137bc:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 80137be:	f8ad 201e 	strh.w	r2, [sp, #30]
  if (ssi->parsed > hs->file) {
 80137c2:	d955      	bls.n	8013870 <http_send+0xd4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80137c4:	1a76      	subs	r6, r6, r1
 80137c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137ca:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80137cc:	4658      	mov	r0, fp
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80137ce:	429e      	cmp	r6, r3
 80137d0:	bfa8      	it	ge
 80137d2:	461e      	movge	r6, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80137d4:	2300      	movs	r3, #0
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80137d6:	f822 6d02 	strh.w	r6, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80137da:	f7ff fc8f 	bl	80130fc <http_write>
    if (err == ERR_OK) {
 80137de:	4606      	mov	r6, r0
 80137e0:	2800      	cmp	r0, #0
 80137e2:	f000 81c0 	beq.w	8013b66 <http_send+0x3ca>
    if (altcp_sndbuf(pcb) == 0) {
 80137e6:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
  u8_t data_to_send = 0;
 80137ea:	2700      	movs	r7, #0
    if (altcp_sndbuf(pcb) == 0) {
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f000 81c8 	beq.w	8013b82 <http_send+0x3e6>
 80137f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80137f6:	e03d      	b.n	8013874 <http_send+0xd8>
  if (hs->handle == NULL) {
 80137f8:	6948      	ldr	r0, [r1, #20]
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d02f      	beq.n	801385e <http_send+0xc2>
  bytes_left = fs_bytes_left(hs->handle);
 80137fe:	f7ff fc79 	bl	80130f4 <fs_bytes_left>
  if (bytes_left <= 0) {
 8013802:	2800      	cmp	r0, #0
 8013804:	dd2b      	ble.n	801385e <http_send+0xc2>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8013806:	49b2      	ldr	r1, [pc, #712]	; (8013ad0 <http_send+0x334>)
 8013808:	f240 429d 	movw	r2, #1181	; 0x49d
 801380c:	4bb1      	ldr	r3, [pc, #708]	; (8013ad4 <http_send+0x338>)
 801380e:	48b2      	ldr	r0, [pc, #712]	; (8013ad8 <http_send+0x33c>)
 8013810:	f00c fec2 	bl	8020598 <iprintf>
  if (hs->ssi) {
 8013814:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8013816:	69a9      	ldr	r1, [r5, #24]
 8013818:	2c00      	cmp	r4, #0
 801381a:	d1cc      	bne.n	80137b6 <http_send+0x1a>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801381c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8013820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013824:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8013826:	aa08      	add	r2, sp, #32
 8013828:	4286      	cmp	r6, r0
 801382a:	bf88      	it	hi
 801382c:	461e      	movhi	r6, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801382e:	4623      	mov	r3, r4
 8013830:	4658      	mov	r0, fp
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8013832:	f822 6d02 	strh.w	r6, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013836:	f7ff fc61 	bl	80130fc <http_write>
  if (err == ERR_OK) {
 801383a:	2800      	cmp	r0, #0
 801383c:	f040 8278 	bne.w	8013d30 <http_send+0x594>
    hs->file += len;
 8013840:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    data_to_send = 1;
 8013844:	2701      	movs	r7, #1
    hs->file += len;
 8013846:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8013848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 801384a:	440a      	add	r2, r1
    hs->left -= len;
 801384c:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 801384e:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8013850:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8013852:	b94b      	cbnz	r3, 8013868 <http_send+0xcc>
 8013854:	6968      	ldr	r0, [r5, #20]
 8013856:	f7ff fc4d 	bl	80130f4 <fs_bytes_left>
 801385a:	2800      	cmp	r0, #0
 801385c:	dc04      	bgt.n	8013868 <http_send+0xcc>
    http_eof(pcb, hs);
 801385e:	4629      	mov	r1, r5
 8013860:	4658      	mov	r0, fp
 8013862:	f7ff ff81 	bl	8013768 <http_eof>
      return 0;
 8013866:	2700      	movs	r7, #0
}
 8013868:	4638      	mov	r0, r7
 801386a:	b009      	add	sp, #36	; 0x24
 801386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u8_t data_to_send = 0;
 8013870:	2700      	movs	r7, #0
  err_t err = ERR_OK;
 8013872:	463e      	mov	r6, r7
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8013874:	46d9      	mov	r9, fp
 8013876:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801387a:	f04f 0a00 	mov.w	sl, #0
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 801387e:	46bb      	mov	fp, r7
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8013880:	2b04      	cmp	r3, #4
 8013882:	d003      	beq.n	801388c <http_send+0xf0>
 8013884:	68e1      	ldr	r1, [r4, #12]
 8013886:	2900      	cmp	r1, #0
 8013888:	f000 8196 	beq.w	8013bb8 <http_send+0x41c>
 801388c:	2e00      	cmp	r6, #0
 801388e:	f040 8245 	bne.w	8013d1c <http_send+0x580>
    if (len == 0) {
 8013892:	2a00      	cmp	r2, #0
 8013894:	f000 8248 	beq.w	8013d28 <http_send+0x58c>
    switch (ssi->tag_state) {
 8013898:	2b04      	cmp	r3, #4
 801389a:	d8f1      	bhi.n	8013880 <http_send+0xe4>
 801389c:	e8df f003 	tbb	[pc, r3]
 80138a0:	253d606e 	.word	0x253d606e
 80138a4:	03          	.byte	0x03
 80138a5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80138a6:	68a0      	ldr	r0, [r4, #8]
 80138a8:	69a9      	ldr	r1, [r5, #24]
 80138aa:	4288      	cmp	r0, r1
 80138ac:	f240 8086 	bls.w	80139bc <http_send+0x220>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80138b0:	6863      	ldr	r3, [r4, #4]
 80138b2:	4299      	cmp	r1, r3
 80138b4:	f200 8228 	bhi.w	8013d08 <http_send+0x56c>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80138b8:	1a5a      	subs	r2, r3, r1
 80138ba:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80138be:	4282      	cmp	r2, r0
 80138c0:	f340 80ed 	ble.w	8013a9e <http_send+0x302>
 80138c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138c8:	f8ad 301e 	strh.w	r3, [sp, #30]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80138cc:	2300      	movs	r3, #0
 80138ce:	f10d 021e 	add.w	r2, sp, #30
 80138d2:	4648      	mov	r0, r9
 80138d4:	f7ff fc12 	bl	80130fc <http_write>
          if (err == ERR_OK) {
 80138d8:	2800      	cmp	r0, #0
 80138da:	f000 8184 	beq.w	8013be6 <http_send+0x44a>
 80138de:	4606      	mov	r6, r0
 80138e0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80138e4:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80138e8:	e7ca      	b.n	8013880 <http_send+0xe4>
 80138ea:	6820      	ldr	r0, [r4, #0]
 80138ec:	68e7      	ldr	r7, [r4, #12]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80138ee:	8a21      	ldrh	r1, [r4, #16]
 80138f0:	f810 cb01 	ldrb.w	ip, [r0], #1
 80138f4:	f107 3eff 	add.w	lr, r7, #4294967295
 80138f8:	2900      	cmp	r1, #0
 80138fa:	d14d      	bne.n	8013998 <http_send+0x1fc>
 80138fc:	f1ac 0709 	sub.w	r7, ip, #9
 8013900:	b2ff      	uxtb	r7, r7
 8013902:	2f17      	cmp	r7, #23
 8013904:	d848      	bhi.n	8013998 <http_send+0x1fc>
 8013906:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8013ae0 <http_send+0x344>
 801390a:	fa28 f707 	lsr.w	r7, r8, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 801390e:	07ff      	lsls	r7, r7, #31
 8013910:	d542      	bpl.n	8013998 <http_send+0x1fc>
          ssi->parse_left--;
 8013912:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 8013916:	6020      	str	r0, [r4, #0]
 8013918:	e7b2      	b.n	8013880 <http_send+0xe4>
 801391a:	6820      	ldr	r0, [r4, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801391c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013920:	f890 e000 	ldrb.w	lr, [r0]
 8013924:	f1bc 0f00 	cmp.w	ip, #0
 8013928:	d163      	bne.n	80139f2 <http_send+0x256>
 801392a:	f1ae 0709 	sub.w	r7, lr, #9
 801392e:	b2ff      	uxtb	r7, r7
 8013930:	2f17      	cmp	r7, #23
 8013932:	d94f      	bls.n	80139d4 <http_send+0x238>
 8013934:	68e1      	ldr	r1, [r4, #12]
 8013936:	f100 0801 	add.w	r8, r0, #1
 801393a:	3901      	subs	r1, #1
 801393c:	9101      	str	r1, [sp, #4]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801393e:	7d27      	ldrb	r7, [r4, #20]
 8013940:	4966      	ldr	r1, [pc, #408]	; (8013adc <http_send+0x340>)
 8013942:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8013946:	687f      	ldr	r7, [r7, #4]
 8013948:	783f      	ldrb	r7, [r7, #0]
 801394a:	4577      	cmp	r7, lr
 801394c:	f000 80a2 	beq.w	8013a94 <http_send+0x2f8>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8013950:	f10c 0701 	add.w	r7, ip, #1
 8013954:	44a4      	add	ip, r4
 8013956:	8227      	strh	r7, [r4, #16]
 8013958:	7800      	ldrb	r0, [r0, #0]
 801395a:	f88c 0016 	strb.w	r0, [ip, #22]
 801395e:	e09c      	b.n	8013a9a <http_send+0x2fe>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8013960:	495e      	ldr	r1, [pc, #376]	; (8013adc <http_send+0x340>)
 8013962:	7d20      	ldrb	r0, [r4, #20]
 8013964:	8a27      	ldrh	r7, [r4, #16]
 8013966:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 801396a:	5dc9      	ldrb	r1, [r1, r7]
 801396c:	2900      	cmp	r1, #0
 801396e:	f040 8082 	bne.w	8013a76 <http_send+0x2da>
          ssi->tag_state = TAG_FOUND;
 8013972:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8013974:	8221      	strh	r1, [r4, #16]
          ssi->tag_state = TAG_FOUND;
 8013976:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 801397a:	e783      	b.n	8013884 <http_send+0xe8>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801397c:	6821      	ldr	r1, [r4, #0]
 801397e:	7808      	ldrb	r0, [r1, #0]
 8013980:	283c      	cmp	r0, #60	; 0x3c
 8013982:	f000 81d7 	beq.w	8013d34 <http_send+0x598>
 8013986:	282f      	cmp	r0, #47	; 0x2f
 8013988:	f000 81dd 	beq.w	8013d46 <http_send+0x5aa>
        ssi->parse_left--;
 801398c:	68e0      	ldr	r0, [r4, #12]
        ssi->parsed++;
 801398e:	3101      	adds	r1, #1
        ssi->parse_left--;
 8013990:	3801      	subs	r0, #1
        ssi->parsed++;
 8013992:	6021      	str	r1, [r4, #0]
        ssi->parse_left--;
 8013994:	60e0      	str	r0, [r4, #12]
 8013996:	e773      	b.n	8013880 <http_send+0xe4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8013998:	f894 8014 	ldrb.w	r8, [r4, #20]
 801399c:	4f4f      	ldr	r7, [pc, #316]	; (8013adc <http_send+0x340>)
 801399e:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80139a2:	687f      	ldr	r7, [r7, #4]
 80139a4:	f817 8001 	ldrb.w	r8, [r7, r1]
 80139a8:	45e0      	cmp	r8, ip
 80139aa:	f000 809b 	beq.w	8013ae4 <http_send+0x348>
          ssi->parse_left--;
 80139ae:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->tag_state = TAG_NONE;
 80139b2:	2300      	movs	r3, #0
          ssi->parsed++;
 80139b4:	6020      	str	r0, [r4, #0]
          ssi->tag_state = TAG_NONE;
 80139b6:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 80139ba:	e763      	b.n	8013884 <http_send+0xe8>
          if (ssi->tag_index < ssi->tag_insert_len) {
 80139bc:	8a21      	ldrh	r1, [r4, #16]
 80139be:	8a63      	ldrh	r3, [r4, #18]
 80139c0:	4299      	cmp	r1, r3
 80139c2:	f0c0 8189 	bcc.w	8013cd8 <http_send+0x53c>
              ssi->tag_index = 0;
 80139c6:	f8a4 a010 	strh.w	sl, [r4, #16]
              ssi->parsed = ssi->tag_end;
 80139ca:	2300      	movs	r3, #0
              ssi->tag_state = TAG_NONE;
 80139cc:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 80139d0:	6020      	str	r0, [r4, #0]
 80139d2:	e757      	b.n	8013884 <http_send+0xe8>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80139d4:	4942      	ldr	r1, [pc, #264]	; (8013ae0 <http_send+0x344>)
 80139d6:	f100 0801 	add.w	r8, r0, #1
 80139da:	fa21 f707 	lsr.w	r7, r1, r7
 80139de:	68e1      	ldr	r1, [r4, #12]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80139e0:	07ff      	lsls	r7, r7, #31
 80139e2:	f101 31ff 	add.w	r1, r1, #4294967295
 80139e6:	9101      	str	r1, [sp, #4]
 80139e8:	d5a9      	bpl.n	801393e <http_send+0x1a2>
        ssi->parse_left--;
 80139ea:	60e1      	str	r1, [r4, #12]
        ssi->parsed++;
 80139ec:	f8c4 8000 	str.w	r8, [r4]
 80139f0:	e746      	b.n	8013880 <http_send+0xe4>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80139f2:	4f3a      	ldr	r7, [pc, #232]	; (8013adc <http_send+0x340>)
 80139f4:	7d21      	ldrb	r1, [r4, #20]
 80139f6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80139fa:	6849      	ldr	r1, [r1, #4]
 80139fc:	f891 8000 	ldrb.w	r8, [r1]
 8013a00:	45f0      	cmp	r8, lr
 8013a02:	d01a      	beq.n	8013a3a <http_send+0x29e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8013a04:	f1ae 0e09 	sub.w	lr, lr, #9
 8013a08:	fa5f fe8e 	uxtb.w	lr, lr
 8013a0c:	f1be 0f17 	cmp.w	lr, #23
 8013a10:	d90c      	bls.n	8013a2c <http_send+0x290>
 8013a12:	68e1      	ldr	r1, [r4, #12]
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8013a14:	f1bc 0f07 	cmp.w	ip, #7
 8013a18:	f100 0801 	add.w	r8, r0, #1
 8013a1c:	f101 31ff 	add.w	r1, r1, #4294967295
 8013a20:	9101      	str	r1, [sp, #4]
 8013a22:	d995      	bls.n	8013950 <http_send+0x1b4>
            ssi->tag_state = TAG_NONE;
 8013a24:	2300      	movs	r3, #0
 8013a26:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
 8013a2a:	e036      	b.n	8013a9a <http_send+0x2fe>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8013a2c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013ae0 <http_send+0x344>
 8013a30:	fa28 fe0e 	lsr.w	lr, r8, lr
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8013a34:	f01e 0f01 	tst.w	lr, #1
 8013a38:	d0eb      	beq.n	8013a12 <http_send+0x276>
            ssi->tag_state = TAG_LEADOUT;
 8013a3a:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8013a3c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8013a40:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8013a44:	f200 80a9 	bhi.w	8013b9a <http_send+0x3fe>
            ssi->tag_name[ssi->tag_index] = '\0';
 8013a48:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8013a4c:	f884 c015 	strb.w	ip, [r4, #21]
 8013a50:	f100 0801 	add.w	r8, r0, #1
            ssi->tag_name[ssi->tag_index] = '\0';
 8013a54:	f883 a016 	strb.w	sl, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8013a58:	780b      	ldrb	r3, [r1, #0]
 8013a5a:	7802      	ldrb	r2, [r0, #0]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	f000 8092 	beq.w	8013b86 <http_send+0x3ea>
 8013a62:	68e1      	ldr	r1, [r4, #12]
              ssi->tag_index = 0;
 8013a64:	f8a4 a010 	strh.w	sl, [r4, #16]
 8013a68:	1e4b      	subs	r3, r1, #1
 8013a6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013a6e:	9301      	str	r3, [sp, #4]
 8013a70:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8013a74:	e011      	b.n	8013a9a <http_send+0x2fe>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8013a76:	6820      	ldr	r0, [r4, #0]
 8013a78:	f890 c000 	ldrb.w	ip, [r0]
 8013a7c:	458c      	cmp	ip, r1
 8013a7e:	f000 8128 	beq.w	8013cd2 <http_send+0x536>
            ssi->tag_state = TAG_NONE;
 8013a82:	2300      	movs	r3, #0
 8013a84:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8013a88:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8013a8a:	3001      	adds	r0, #1
          ssi->parse_left--;
 8013a8c:	3901      	subs	r1, #1
          ssi->parsed++;
 8013a8e:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8013a90:	60e1      	str	r1, [r4, #12]
 8013a92:	e6f5      	b.n	8013880 <http_send+0xe4>
            ssi->tag_state = TAG_NONE;
 8013a94:	2300      	movs	r3, #0
 8013a96:	f884 a11e 	strb.w	sl, [r4, #286]	; 0x11e
        ssi->parse_left--;
 8013a9a:	9901      	ldr	r1, [sp, #4]
 8013a9c:	e7a5      	b.n	80139ea <http_send+0x24e>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8013a9e:	b292      	uxth	r2, r2
 8013aa0:	f8ad 201e 	strh.w	r2, [sp, #30]
          if (len != 0) {
 8013aa4:	2a00      	cmp	r2, #0
 8013aa6:	f47f af11 	bne.w	80138cc <http_send+0x130>
            if (ssi->tag_started <= hs->file) {
 8013aaa:	428b      	cmp	r3, r1
 8013aac:	d805      	bhi.n	8013aba <http_send+0x31e>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8013aae:	68a0      	ldr	r0, [r4, #8]
 8013ab0:	1ac3      	subs	r3, r0, r3
 8013ab2:	441a      	add	r2, r3
 8013ab4:	b292      	uxth	r2, r2
 8013ab6:	f8ad 201e 	strh.w	r2, [sp, #30]
            hs->left -= len;
 8013aba:	6a68      	ldr	r0, [r5, #36]	; 0x24
            hs->file += len;
 8013abc:	4411      	add	r1, r2
 8013abe:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
            data_to_send = 1;
 8013ac2:	f04f 0b01 	mov.w	fp, #1
            hs->left -= len;
 8013ac6:	1a80      	subs	r0, r0, r2
            hs->file += len;
 8013ac8:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8013aca:	6268      	str	r0, [r5, #36]	; 0x24
 8013acc:	e6d8      	b.n	8013880 <http_send+0xe4>
 8013ace:	bf00      	nop
 8013ad0:	0803c7d8 	.word	0x0803c7d8
 8013ad4:	0803c6c0 	.word	0x0803c6c0
 8013ad8:	08026544 	.word	0x08026544
 8013adc:	0803c8b8 	.word	0x0803c8b8
 8013ae0:	00800013 	.word	0x00800013
          ssi->tag_index++;
 8013ae4:	3101      	adds	r1, #1
          ssi->parse_left--;
 8013ae6:	f8c4 e00c 	str.w	lr, [r4, #12]
          ssi->parsed++;
 8013aea:	6020      	str	r0, [r4, #0]
          ssi->tag_index++;
 8013aec:	b289      	uxth	r1, r1
 8013aee:	8221      	strh	r1, [r4, #16]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8013af0:	5c79      	ldrb	r1, [r7, r1]
 8013af2:	2900      	cmp	r1, #0
 8013af4:	f47f aec4 	bne.w	8013880 <http_send+0xe4>
  ssi = hs->ssi;
 8013af8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8013afc:	f1b8 0f00 	cmp.w	r8, #0
 8013b00:	f000 812e 	beq.w	8013d60 <http_send+0x5c4>
  if (httpd_ssi_handler
 8013b04:	4b9a      	ldr	r3, [pc, #616]	; (8013d70 <http_send+0x5d4>)
 8013b06:	f108 0116 	add.w	r1, r8, #22
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	9101      	str	r1, [sp, #4]
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d070      	beq.n	8013bf6 <http_send+0x45a>
      && httpd_tags && httpd_num_tags
 8013b14:	4b97      	ldr	r3, [pc, #604]	; (8013d74 <http_send+0x5d8>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d06c      	beq.n	8013bf6 <http_send+0x45a>
 8013b1c:	4a96      	ldr	r2, [pc, #600]	; (8013d78 <http_send+0x5dc>)
 8013b1e:	6812      	ldr	r2, [r2, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8013b20:	2a00      	cmp	r2, #0
 8013b22:	dd68      	ble.n	8013bf6 <http_send+0x45a>
 8013b24:	2700      	movs	r7, #0
 8013b26:	3b04      	subs	r3, #4
 8013b28:	9505      	str	r5, [sp, #20]
 8013b2a:	463d      	mov	r5, r7
 8013b2c:	4617      	mov	r7, r2
 8013b2e:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8013b32:	461c      	mov	r4, r3
 8013b34:	460e      	mov	r6, r1
 8013b36:	e002      	b.n	8013b3e <http_send+0x3a2>
 8013b38:	3501      	adds	r5, #1
 8013b3a:	42af      	cmp	r7, r5
 8013b3c:	d058      	beq.n	8013bf0 <http_send+0x454>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8013b3e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8013b42:	4630      	mov	r0, r6
 8013b44:	f7ec fb7c 	bl	8000240 <strcmp>
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d1f5      	bne.n	8013b38 <http_send+0x39c>
 8013b4c:	462f      	mov	r7, r5
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8013b4e:	22fe      	movs	r2, #254	; 0xfe
 8013b50:	f108 011f 	add.w	r1, r8, #31
 8013b54:	9b02      	ldr	r3, [sp, #8]
 8013b56:	4638      	mov	r0, r7
 8013b58:	9d05      	ldr	r5, [sp, #20]
 8013b5a:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8013b5e:	4798      	blx	r3
 8013b60:	f8a8 0012 	strh.w	r0, [r8, #18]
 8013b64:	e082      	b.n	8013c6c <http_send+0x4d0>
      hs->file += len;
 8013b66:	f8bd 101e 	ldrh.w	r1, [sp, #30]
      data_to_send = 1;
 8013b6a:	2701      	movs	r7, #1
      hs->left -= len;
 8013b6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 8013b6e:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 8013b70:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 8013b72:	440a      	add	r2, r1
      hs->left -= len;
 8013b74:	626b      	str	r3, [r5, #36]	; 0x24
    if (altcp_sndbuf(pcb) == 0) {
 8013b76:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
      hs->file += len;
 8013b7a:	61aa      	str	r2, [r5, #24]
    if (altcp_sndbuf(pcb) == 0) {
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f47f ae38 	bne.w	80137f2 <http_send+0x56>
 8013b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b84:	e665      	b.n	8013852 <http_send+0xb6>
              ssi->tag_index = 1;
 8013b86:	2201      	movs	r2, #1
 8013b88:	68e1      	ldr	r1, [r4, #12]
 8013b8a:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8013b8e:	8222      	strh	r2, [r4, #16]
 8013b90:	1e4a      	subs	r2, r1, #1
 8013b92:	9201      	str	r2, [sp, #4]
 8013b94:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013b98:	e77f      	b.n	8013a9a <http_send+0x2fe>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8013b9a:	4b78      	ldr	r3, [pc, #480]	; (8013d7c <http_send+0x5e0>)
 8013b9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8013ba0:	4977      	ldr	r1, [pc, #476]	; (8013d80 <http_send+0x5e4>)
 8013ba2:	4878      	ldr	r0, [pc, #480]	; (8013d84 <http_send+0x5e8>)
 8013ba4:	f00c fcf8 	bl	8020598 <iprintf>
 8013ba8:	7d23      	ldrb	r3, [r4, #20]
 8013baa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013bae:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8013bb2:	6820      	ldr	r0, [r4, #0]
 8013bb4:	6879      	ldr	r1, [r7, #4]
 8013bb6:	e747      	b.n	8013a48 <http_send+0x2ac>
 8013bb8:	465f      	mov	r7, fp
 8013bba:	46cb      	mov	fp, r9
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8013bbc:	6824      	ldr	r4, [r4, #0]
 8013bbe:	69a9      	ldr	r1, [r5, #24]
 8013bc0:	428c      	cmp	r4, r1
 8013bc2:	d9de      	bls.n	8013b82 <http_send+0x3e6>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013bc4:	1a64      	subs	r4, r4, r1
 8013bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013bca:	aa08      	add	r2, sp, #32
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013bcc:	4658      	mov	r0, fp
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013bce:	429c      	cmp	r4, r3
 8013bd0:	bfa8      	it	ge
 8013bd2:	461c      	movge	r4, r3
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013bd4:	2300      	movs	r3, #0
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8013bd6:	f822 4d02 	strh.w	r4, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013bda:	f7ff fa8f 	bl	80130fc <http_write>
    if (err == ERR_OK) {
 8013bde:	2800      	cmp	r0, #0
 8013be0:	f43f ae2e 	beq.w	8013840 <http_send+0xa4>
 8013be4:	e7cd      	b.n	8013b82 <http_send+0x3e6>
 8013be6:	6863      	ldr	r3, [r4, #4]
 8013be8:	69a9      	ldr	r1, [r5, #24]
 8013bea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013bee:	e75c      	b.n	8013aaa <http_send+0x30e>
 8013bf0:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8013bf4:	9d05      	ldr	r5, [sp, #20]
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8013bf6:	9801      	ldr	r0, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8013bf8:	f108 071f 	add.w	r7, r8, #31
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8013bfc:	f7ec fb2a 	bl	8000254 <strlen>
 8013c00:	2809      	cmp	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8013c02:	f8df c194 	ldr.w	ip, [pc, #404]	; 8013d98 <http_send+0x5fc>
 8013c06:	bf28      	it	cs
 8013c08:	2009      	movcs	r0, #9
 8013c0a:	9002      	str	r0, [sp, #8]
 8013c0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c10:	f8bc c000 	ldrh.w	ip, [ip]
 8013c14:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8013c18:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8013c1c:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 8013c20:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
 8013c24:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8013c28:	9901      	ldr	r1, [sp, #4]
 8013c2a:	9a02      	ldr	r2, [sp, #8]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8013c2c:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8013c30:	f00b fd0f 	bl	801f652 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8013c34:	9802      	ldr	r0, [sp, #8]
 8013c36:	4b54      	ldr	r3, [pc, #336]	; (8013d88 <http_send+0x5ec>)
 8013c38:	f100 0131 	add.w	r1, r0, #49	; 0x31
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8013c3c:	eb08 0e00 	add.w	lr, r8, r0
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8013c40:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8013c44:	eb08 0201 	add.w	r2, r8, r1
 8013c48:	6818      	ldr	r0, [r3, #0]
 8013c4a:	799b      	ldrb	r3, [r3, #6]
 8013c4c:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8013c50:	4638      	mov	r0, r7
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8013c52:	f8a2 c004 	strh.w	ip, [r2, #4]
 8013c56:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8013c58:	f88e a038 	strb.w	sl, [lr, #56]	; 0x38
  len = strlen(ssi->tag_insert);
 8013c5c:	f7ec fafa 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8013c60:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8013c64:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8013c66:	d273      	bcs.n	8013d50 <http_send+0x5b4>
  ssi->tag_insert_len = (u16_t)len;
 8013c68:	f8a8 7012 	strh.w	r7, [r8, #18]
            if (ssi->tag_end > hs->file) {
 8013c6c:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 8013c6e:	2304      	movs	r3, #4
            ssi->tag_index = 0;
 8013c70:	f8a4 a010 	strh.w	sl, [r4, #16]
            ssi->tag_state = TAG_SENDING;
 8013c74:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->parsed = ssi->tag_started;
 8013c78:	e9d4 0200 	ldrd	r0, r2, [r4]
            if (ssi->tag_end > hs->file) {
 8013c7c:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8013c7e:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8013c80:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8013c82:	d962      	bls.n	8013d4a <http_send+0x5ae>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8013c84:	1a56      	subs	r6, r2, r1
 8013c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c8a:	aa08      	add	r2, sp, #32
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013c8c:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8013c8e:	429e      	cmp	r6, r3
 8013c90:	bfa8      	it	ge
 8013c92:	461e      	movge	r6, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013c94:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8013c96:	f822 6d02 	strh.w	r6, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8013c9a:	f7ff fa2f 	bl	80130fc <http_write>
              if (err == ERR_OK) {
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	f47f ae1d 	bne.w	80138e0 <http_send+0x144>
                if (ssi->tag_started <= hs->file) {
 8013ca6:	6860      	ldr	r0, [r4, #4]
 8013ca8:	69ab      	ldr	r3, [r5, #24]
 8013caa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013cae:	4298      	cmp	r0, r3
 8013cb0:	d805      	bhi.n	8013cbe <http_send+0x522>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8013cb2:	68a1      	ldr	r1, [r4, #8]
 8013cb4:	1a09      	subs	r1, r1, r0
 8013cb6:	440a      	add	r2, r1
 8013cb8:	b292      	uxth	r2, r2
 8013cba:	f8ad 201e 	strh.w	r2, [sp, #30]
                hs->left -= len;
 8013cbe:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8013cc0:	1898      	adds	r0, r3, r2
                data_to_send = 1;
 8013cc2:	f04f 0b01 	mov.w	fp, #1
 8013cc6:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
                hs->left -= len;
 8013cca:	1a89      	subs	r1, r1, r2
                hs->file += len;
 8013ccc:	61a8      	str	r0, [r5, #24]
                hs->left -= len;
 8013cce:	6269      	str	r1, [r5, #36]	; 0x24
 8013cd0:	e5d6      	b.n	8013880 <http_send+0xe4>
            ssi->tag_index++;
 8013cd2:	3701      	adds	r7, #1
 8013cd4:	8227      	strh	r7, [r4, #16]
 8013cd6:	e6d7      	b.n	8013a88 <http_send+0x2ec>
            len = (ssi->tag_insert_len - ssi->tag_index);
 8013cd8:	1a5e      	subs	r6, r3, r1
 8013cda:	aa08      	add	r2, sp, #32
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8013cdc:	311f      	adds	r1, #31
 8013cde:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8013ce0:	f822 6d02 	strh.w	r6, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8013ce4:	4648      	mov	r0, r9
 8013ce6:	4421      	add	r1, r4
 8013ce8:	f7ff fa08 	bl	80130fc <http_write>
              ssi->tag_index += len;
 8013cec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            if (err == ERR_OK) {
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	f47f adf6 	bne.w	80138e4 <http_send+0x148>
              ssi->tag_index += len;
 8013cf8:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 8013cfa:	f04f 0b01 	mov.w	fp, #1
 8013cfe:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 8013d02:	4411      	add	r1, r2
 8013d04:	8221      	strh	r1, [r4, #16]
 8013d06:	e5bb      	b.n	8013880 <http_send+0xe4>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8013d08:	4b1c      	ldr	r3, [pc, #112]	; (8013d7c <http_send+0x5e0>)
 8013d0a:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8013d0e:	491f      	ldr	r1, [pc, #124]	; (8013d8c <http_send+0x5f0>)
 8013d10:	481c      	ldr	r0, [pc, #112]	; (8013d84 <http_send+0x5e8>)
 8013d12:	f00c fc41 	bl	8020598 <iprintf>
 8013d16:	6863      	ldr	r3, [r4, #4]
 8013d18:	69a9      	ldr	r1, [r5, #24]
 8013d1a:	e5cd      	b.n	80138b8 <http_send+0x11c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	465f      	mov	r7, fp
 8013d20:	46cb      	mov	fp, r9
 8013d22:	f43f af2e 	beq.w	8013b82 <http_send+0x3e6>
 8013d26:	e749      	b.n	8013bbc <http_send+0x420>
 8013d28:	465f      	mov	r7, fp
 8013d2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d2c:	46cb      	mov	fp, r9
 8013d2e:	e590      	b.n	8013852 <http_send+0xb6>
  u8_t data_to_send = 0;
 8013d30:	4627      	mov	r7, r4
 8013d32:	e726      	b.n	8013b82 <http_send+0x3e6>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8013d34:	2300      	movs	r3, #0
            ssi->tag_state = TAG_LEADIN;
 8013d36:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 8013d38:	7523      	strb	r3, [r4, #20]
            ssi->tag_started = ssi->parsed;
 8013d3a:	6061      	str	r1, [r4, #4]
 8013d3c:	4603      	mov	r3, r0
            ssi->tag_state = TAG_LEADIN;
 8013d3e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8013d42:	8220      	strh	r0, [r4, #16]
 8013d44:	e622      	b.n	801398c <http_send+0x1f0>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8013d46:	2301      	movs	r3, #1
 8013d48:	e7f5      	b.n	8013d36 <http_send+0x59a>
 8013d4a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013d4e:	e59d      	b.n	801388c <http_send+0xf0>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8013d50:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <http_send+0x5e0>)
 8013d52:	f240 323f 	movw	r2, #831	; 0x33f
 8013d56:	490e      	ldr	r1, [pc, #56]	; (8013d90 <http_send+0x5f4>)
 8013d58:	480a      	ldr	r0, [pc, #40]	; (8013d84 <http_send+0x5e8>)
 8013d5a:	f00c fc1d 	bl	8020598 <iprintf>
 8013d5e:	e783      	b.n	8013c68 <http_send+0x4cc>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8013d60:	4b06      	ldr	r3, [pc, #24]	; (8013d7c <http_send+0x5e0>)
 8013d62:	f240 3206 	movw	r2, #774	; 0x306
 8013d66:	490b      	ldr	r1, [pc, #44]	; (8013d94 <http_send+0x5f8>)
 8013d68:	4806      	ldr	r0, [pc, #24]	; (8013d84 <http_send+0x5e8>)
 8013d6a:	f00c fc15 	bl	8020598 <iprintf>
 8013d6e:	e6c9      	b.n	8013b04 <http_send+0x368>
 8013d70:	20021df0 	.word	0x20021df0
 8013d74:	20021df4 	.word	0x20021df4
 8013d78:	200219ec 	.word	0x200219ec
 8013d7c:	0803c6c0 	.word	0x0803c6c0
 8013d80:	0803c810 	.word	0x0803c810
 8013d84:	08026544 	.word	0x08026544
 8013d88:	0803c848 	.word	0x0803c848
 8013d8c:	0803c860 	.word	0x0803c860
 8013d90:	0803c850 	.word	0x0803c850
 8013d94:	0803c828 	.word	0x0803c828
 8013d98:	0803c834 	.word	0x0803c834

08013d9c <http_sent>:
  if (hs == NULL) {
 8013d9c:	b150      	cbz	r0, 8013db4 <http_sent+0x18>
  hs->retries = 0;
 8013d9e:	2200      	movs	r2, #0
{
 8013da0:	b508      	push	{r3, lr}
 8013da2:	4603      	mov	r3, r0
 8013da4:	4608      	mov	r0, r1
  hs->retries = 0;
 8013da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8013daa:	4619      	mov	r1, r3
 8013dac:	f7ff fcf6 	bl	801379c <http_send>
}
 8013db0:	2000      	movs	r0, #0
 8013db2:	bd08      	pop	{r3, pc}
 8013db4:	2000      	movs	r0, #0
 8013db6:	4770      	bx	lr

08013db8 <http_poll>:
{
 8013db8:	b510      	push	{r4, lr}
 8013dba:	460c      	mov	r4, r1
  if (hs == NULL) {
 8013dbc:	b1a8      	cbz	r0, 8013dea <http_poll+0x32>
    hs->retries++;
 8013dbe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8013dc6:	2b04      	cmp	r3, #4
    hs->retries++;
 8013dc8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8013dcc:	d019      	beq.n	8013e02 <http_poll+0x4a>
    if (hs->handle) {
 8013dce:	6943      	ldr	r3, [r0, #20]
 8013dd0:	b123      	cbz	r3, 8013ddc <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8013dd2:	4601      	mov	r1, r0
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f7ff fce1 	bl	801379c <http_send>
 8013dda:	b908      	cbnz	r0, 8013de0 <http_poll+0x28>
  return ERR_OK;
 8013ddc:	2000      	movs	r0, #0
}
 8013dde:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8013de0:	4620      	mov	r0, r4
 8013de2:	f006 fe53 	bl	801aa8c <tcp_output>
  return ERR_OK;
 8013de6:	2000      	movs	r0, #0
 8013de8:	e7f9      	b.n	8013dde <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8013dea:	4601      	mov	r1, r0
 8013dec:	4620      	mov	r0, r4
 8013dee:	f7ff fc6d 	bl	80136cc <http_close_or_abort_conn.constprop.9>
    if (closed == ERR_MEM) {
 8013df2:	3001      	adds	r0, #1
 8013df4:	d1f2      	bne.n	8013ddc <http_poll+0x24>
      altcp_abort(pcb);
 8013df6:	4620      	mov	r0, r4
 8013df8:	f003 fd0e 	bl	8017818 <tcp_abort>
      return ERR_ABRT;
 8013dfc:	f06f 000c 	mvn.w	r0, #12
}
 8013e00:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8013e02:	4601      	mov	r1, r0
 8013e04:	4620      	mov	r0, r4
 8013e06:	f7ff fc61 	bl	80136cc <http_close_or_abort_conn.constprop.9>
      return ERR_OK;
 8013e0a:	2000      	movs	r0, #0
}
 8013e0c:	bd10      	pop	{r4, pc}
 8013e0e:	bf00      	nop

08013e10 <http_recv>:
{
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	4605      	mov	r5, r0
 8013e16:	b08d      	sub	sp, #52	; 0x34
 8013e18:	460e      	mov	r6, r1
 8013e1a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8013e1c:	b99b      	cbnz	r3, 8013e46 <http_recv+0x36>
 8013e1e:	fab2 f782 	clz	r7, r2
 8013e22:	097f      	lsrs	r7, r7, #5
 8013e24:	b97f      	cbnz	r7, 8013e46 <http_recv+0x36>
 8013e26:	8911      	ldrh	r1, [r2, #8]
 8013e28:	b1b8      	cbz	r0, 8013e5a <http_recv+0x4a>
    altcp_recved(pcb, p->tot_len);
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	f003 f816 	bl	8016e5c <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8013e30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013e32:	b9cb      	cbnz	r3, 8013e68 <http_recv+0x58>
    if (hs->handle == NULL) {
 8013e34:	696f      	ldr	r7, [r5, #20]
 8013e36:	b32f      	cbz	r7, 8013e84 <http_recv+0x74>
      pbuf_free(p);
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f002 f90f 	bl	801605c <pbuf_free>
}
 8013e3e:	2000      	movs	r0, #0
 8013e40:	b00d      	add	sp, #52	; 0x34
 8013e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8013e46:	b93c      	cbnz	r4, 8013e58 <http_recv+0x48>
  return http_close_or_abort_conn(pcb, hs, 0);
 8013e48:	4629      	mov	r1, r5
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f7ff fc3e 	bl	80136cc <http_close_or_abort_conn.constprop.9>
}
 8013e50:	2000      	movs	r0, #0
 8013e52:	b00d      	add	sp, #52	; 0x34
 8013e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e58:	8921      	ldrh	r1, [r4, #8]
      altcp_recved(pcb, p->tot_len);
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	f002 fffe 	bl	8016e5c <tcp_recved>
      pbuf_free(p);
 8013e60:	4620      	mov	r0, r4
 8013e62:	f002 f8fb 	bl	801605c <pbuf_free>
 8013e66:	e7ef      	b.n	8013e48 <http_recv+0x38>
    hs->retries = 0;
 8013e68:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f7ff fbca 	bl	8013608 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8013e74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1ea      	bne.n	8013e50 <http_recv+0x40>
      http_send(pcb, hs);
 8013e7a:	4629      	mov	r1, r5
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f7ff fc8d 	bl	801379c <http_send>
 8013e82:	e7e5      	b.n	8013e50 <http_recv+0x40>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8013e84:	69ab      	ldr	r3, [r5, #24]
 8013e86:	6a28      	ldr	r0, [r5, #32]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f040 814b 	bne.w	8014124 <http_recv+0x314>
  if (hs->req == NULL) {
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	f000 80e9 	beq.w	8014066 <http_recv+0x256>
    pbuf_cat(hs->req, p);
 8013e94:	4621      	mov	r1, r4
 8013e96:	f002 fa69 	bl	801636c <pbuf_cat>
  pbuf_ref(p);
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	f002 fa52 	bl	8016344 <pbuf_ref>
  if (hs->req->next != NULL) {
 8013ea0:	6a28      	ldr	r0, [r5, #32]
 8013ea2:	6803      	ldr	r3, [r0, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f000 8110 	beq.w	80140ca <http_recv+0x2ba>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013eaa:	8907      	ldrh	r7, [r0, #8]
 8013eac:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8013eb0:	49bb      	ldr	r1, [pc, #748]	; (80141a0 <http_recv+0x390>)
 8013eb2:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013eb4:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8013eb6:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8013eb8:	bf28      	it	cs
 8013eba:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8013ebc:	463a      	mov	r2, r7
 8013ebe:	f002 fb5d 	bl	801657c <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8013ec2:	2f06      	cmp	r7, #6
 8013ec4:	f240 80d1 	bls.w	801406a <http_recv+0x25a>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8013ec8:	463a      	mov	r2, r7
 8013eca:	49b6      	ldr	r1, [pc, #728]	; (80141a4 <http_recv+0x394>)
 8013ecc:	4640      	mov	r0, r8
 8013ece:	f000 fa5b 	bl	8014388 <lwip_strnstr>
    if (crlf != NULL) {
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f000 80c9 	beq.w	801406a <http_recv+0x25a>
      if (!strncmp(data, "GET ", 4)) {
 8013ed8:	2204      	movs	r2, #4
 8013eda:	49b3      	ldr	r1, [pc, #716]	; (80141a8 <http_recv+0x398>)
 8013edc:	4640      	mov	r0, r8
 8013ede:	f00d fad7 	bl	8021490 <strncmp>
 8013ee2:	9005      	str	r0, [sp, #20]
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	f040 80fa 	bne.w	80140de <http_recv+0x2ce>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8013eea:	f1a7 0a04 	sub.w	sl, r7, #4
 8013eee:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8013ef2:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013ef6:	49ad      	ldr	r1, [pc, #692]	; (80141ac <http_recv+0x39c>)
 8013ef8:	fa1f fa8a 	uxth.w	sl, sl
 8013efc:	4658      	mov	r0, fp
        sp1 = data + 3;
 8013efe:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8013f00:	4652      	mov	r2, sl
 8013f02:	f000 fa41 	bl	8014388 <lwip_strnstr>
      if (sp2 == NULL) {
 8013f06:	9b05      	ldr	r3, [sp, #20]
 8013f08:	4681      	mov	r9, r0
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	f000 811b 	beq.w	8014146 <http_recv+0x336>
      int is_09 = 0;
 8013f10:	469a      	mov	sl, r3
 8013f12:	9305      	str	r3, [sp, #20]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8013f14:	f1b9 0f00 	cmp.w	r9, #0
 8013f18:	f000 80a7 	beq.w	801406a <http_recv+0x25a>
 8013f1c:	9b04      	ldr	r3, [sp, #16]
 8013f1e:	4599      	cmp	r9, r3
 8013f20:	f240 80a3 	bls.w	801406a <http_recv+0x25a>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8013f24:	463a      	mov	r2, r7
 8013f26:	49a2      	ldr	r1, [pc, #648]	; (80141b0 <http_recv+0x3a0>)
 8013f28:	4640      	mov	r0, r8
 8013f2a:	f000 fa2d 	bl	8014388 <lwip_strnstr>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	f000 809b 	beq.w	801406a <http_recv+0x25a>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8013f34:	9b05      	ldr	r3, [sp, #20]
 8013f36:	f1ba 0f00 	cmp.w	sl, #0
 8013f3a:	f000 8115 	beq.w	8014168 <http_recv+0x358>
            hs->keepalive = 0;
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8013f44:	eba9 020b 	sub.w	r2, r9, fp
          *sp1 = 0;
 8013f48:	2100      	movs	r1, #0
 8013f4a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8013f4c:	b292      	uxth	r2, r2
          *sp1 = 0;
 8013f4e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8013f50:	eb0b 0002 	add.w	r0, fp, r2
 8013f54:	f80b 1002 	strb.w	r1, [fp, r2]
 8013f58:	9005      	str	r0, [sp, #20]
          if (is_post) {
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f000 80ec 	beq.w	8014138 <http_recv+0x328>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8013f60:	f109 0301 	add.w	r3, r9, #1
 8013f64:	4992      	ldr	r1, [pc, #584]	; (80141b0 <http_recv+0x3a0>)
            struct pbuf *q = hs->req;
 8013f66:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8013f6a:	eba3 0208 	sub.w	r2, r3, r8
 8013f6e:	4618      	mov	r0, r3
 8013f70:	9306      	str	r3, [sp, #24]
 8013f72:	1aba      	subs	r2, r7, r2
 8013f74:	f000 fa08 	bl	8014388 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8013f78:	9008      	str	r0, [sp, #32]
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	f000 8166 	beq.w	801424c <http_recv+0x43c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8013f80:	9b06      	ldr	r3, [sp, #24]
 8013f82:	498c      	ldr	r1, [pc, #560]	; (80141b4 <http_recv+0x3a4>)
 8013f84:	1ac2      	subs	r2, r0, r3
 8013f86:	4618      	mov	r0, r3
 8013f88:	f000 f9fe 	bl	8014388 <lwip_strnstr>
    if (scontent_len != NULL) {
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	f000 80ff 	beq.w	8014190 <http_recv+0x380>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8013f92:	f100 0310 	add.w	r3, r0, #16
 8013f96:	9009      	str	r0, [sp, #36]	; 0x24
 8013f98:	220a      	movs	r2, #10
 8013f9a:	4982      	ldr	r1, [pc, #520]	; (80141a4 <http_recv+0x394>)
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	9307      	str	r3, [sp, #28]
 8013fa0:	f000 f9f2 	bl	8014388 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f000 80f3 	beq.w	8014190 <http_recv+0x380>
        content_len = atoi(content_len_num);
 8013faa:	9b07      	ldr	r3, [sp, #28]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f00b f9df 	bl	801f370 <atoi>
        if (content_len == 0) {
 8013fb2:	1e01      	subs	r1, r0, #0
 8013fb4:	9107      	str	r1, [sp, #28]
 8013fb6:	f000 80e3 	beq.w	8014180 <http_recv+0x370>
        if (content_len >= 0) {
 8013fba:	f2c0 80e9 	blt.w	8014190 <http_recv+0x380>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013fbe:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8013fc0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013fc2:	9a06      	ldr	r2, [sp, #24]
          u8_t post_auto_wnd = 1;
 8013fc4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013fc8:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8013fca:	f04f 0e00 	mov.w	lr, #0
          u8_t post_auto_wnd = 1;
 8013fce:	f80c 0d01 	strb.w	r0, [ip, #-1]!
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013fd2:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013fd4:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013fd8:	1a9b      	subs	r3, r3, r2
          http_uri_buf[0] = 0;
 8013fda:	4877      	ldr	r0, [pc, #476]	; (80141b8 <http_recv+0x3a8>)
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013fdc:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013fe0:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013fe2:	9a06      	ldr	r2, [sp, #24]
          http_uri_buf[0] = 0;
 8013fe4:	f880 e000 	strb.w	lr, [r0]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8013fe8:	bfb4      	ite	lt
 8013fea:	46b8      	movlt	r8, r7
 8013fec:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8013ff0:	429f      	cmp	r7, r3
 8013ff2:	bfa8      	it	ge
 8013ff4:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8013ff6:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8013ff8:	4607      	mov	r7, r0
          *crlfcrlf = 0;
 8013ffa:	9808      	ldr	r0, [sp, #32]
 8013ffc:	f880 e000 	strb.w	lr, [r0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8014000:	4628      	mov	r0, r5
 8014002:	9701      	str	r7, [sp, #4]
 8014004:	9f07      	ldr	r7, [sp, #28]
 8014006:	f8cd c00c 	str.w	ip, [sp, #12]
 801400a:	9700      	str	r7, [sp, #0]
 801400c:	f8cd b008 	str.w	fp, [sp, #8]
 8014010:	f7f1 f8d8 	bl	80051c4 <httpd_post_begin>
          if (err == ERR_OK) {
 8014014:	2800      	cmp	r0, #0
 8014016:	f040 80f9 	bne.w	801420c <http_recv+0x3fc>
            hs->post_content_len_left = (u32_t)content_len;
 801401a:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 801401c:	f1ba 0f00 	cmp.w	sl, #0
 8014020:	d011      	beq.n	8014046 <http_recv+0x236>
 8014022:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8014026:	4598      	cmp	r8, r3
 8014028:	f0c0 80d5 	bcc.w	80141d6 <http_recv+0x3c6>
 801402c:	4652      	mov	r2, sl
 801402e:	e003      	b.n	8014038 <http_recv+0x228>
 8014030:	8953      	ldrh	r3, [r2, #10]
 8014032:	4543      	cmp	r3, r8
 8014034:	f200 80ce 	bhi.w	80141d4 <http_recv+0x3c4>
              start_offset -= q->len;
 8014038:	eba8 0803 	sub.w	r8, r8, r3
              q = q->next;
 801403c:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 801403e:	fa1f f888 	uxth.w	r8, r8
            while ((q != NULL) && (q->len <= start_offset)) {
 8014042:	2a00      	cmp	r2, #0
 8014044:	d1f4      	bne.n	8014030 <http_recv+0x220>
            } else if (hs->post_content_len_left == 0) {
 8014046:	9b07      	ldr	r3, [sp, #28]
 8014048:	2b00      	cmp	r3, #0
 801404a:	f000 80f4 	beq.w	8014236 <http_recv+0x426>
        if (hs->req != NULL) {
 801404e:	6a28      	ldr	r0, [r5, #32]
 8014050:	2800      	cmp	r0, #0
 8014052:	f000 80ec 	beq.w	801422e <http_recv+0x41e>
          pbuf_free(hs->req);
 8014056:	f002 f801 	bl	801605c <pbuf_free>
          hs->req = NULL;
 801405a:	2300      	movs	r3, #0
      pbuf_free(p);
 801405c:	4620      	mov	r0, r4
          hs->req = NULL;
 801405e:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8014060:	f001 fffc 	bl	801605c <pbuf_free>
 8014064:	e706      	b.n	8013e74 <http_recv+0x64>
    hs->req = p;
 8014066:	622c      	str	r4, [r5, #32]
 8014068:	e717      	b.n	8013e9a <http_recv+0x8a>
  clen = pbuf_clen(hs->req);
 801406a:	6a28      	ldr	r0, [r5, #32]
 801406c:	f002 f95e 	bl	801632c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8014070:	6a2b      	ldr	r3, [r5, #32]
 8014072:	891b      	ldrh	r3, [r3, #8]
 8014074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014078:	d202      	bcs.n	8014080 <http_recv+0x270>
 801407a:	2805      	cmp	r0, #5
 801407c:	f67f aedc 	bls.w	8013e38 <http_recv+0x28>
    return http_find_error_file(hs, 400);
 8014080:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8014084:	4628      	mov	r0, r5
 8014086:	f7ff fae5 	bl	8013654 <http_find_error_file>
 801408a:	4607      	mov	r7, r0
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801408c:	f107 0310 	add.w	r3, r7, #16
 8014090:	b2db      	uxtb	r3, r3
 8014092:	2b10      	cmp	r3, #16
 8014094:	d91d      	bls.n	80140d2 <http_recv+0x2c2>
 8014096:	4b49      	ldr	r3, [pc, #292]	; (80141bc <http_recv+0x3ac>)
 8014098:	f640 2205 	movw	r2, #2565	; 0xa05
 801409c:	4948      	ldr	r1, [pc, #288]	; (80141c0 <http_recv+0x3b0>)
 801409e:	4849      	ldr	r0, [pc, #292]	; (80141c4 <http_recv+0x3b4>)
 80140a0:	f00c fa7a 	bl	8020598 <iprintf>
      if (parsed != ERR_INPROGRESS) {
 80140a4:	1d7b      	adds	r3, r7, #5
 80140a6:	f43f aec7 	beq.w	8013e38 <http_recv+0x28>
        if (hs->req != NULL) {
 80140aa:	6a28      	ldr	r0, [r5, #32]
 80140ac:	b118      	cbz	r0, 80140b6 <http_recv+0x2a6>
          pbuf_free(hs->req);
 80140ae:	f001 ffd5 	bl	801605c <pbuf_free>
          hs->req = NULL;
 80140b2:	2300      	movs	r3, #0
 80140b4:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 80140b6:	4620      	mov	r0, r4
 80140b8:	f001 ffd0 	bl	801605c <pbuf_free>
      if (parsed == ERR_OK) {
 80140bc:	2f00      	cmp	r7, #0
 80140be:	f43f aed9 	beq.w	8013e74 <http_recv+0x64>
      } else if (parsed == ERR_ARG) {
 80140c2:	3710      	adds	r7, #16
 80140c4:	f43f aec0 	beq.w	8013e48 <http_recv+0x38>
 80140c8:	e6c2      	b.n	8013e50 <http_recv+0x40>
    data = (char *)p->payload;
 80140ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 80140ce:	8967      	ldrh	r7, [r4, #10]
 80140d0:	e6f7      	b.n	8013ec2 <http_recv+0xb2>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80140d2:	4a3d      	ldr	r2, [pc, #244]	; (80141c8 <http_recv+0x3b8>)
 80140d4:	fa22 f303 	lsr.w	r3, r2, r3
 80140d8:	07da      	lsls	r2, r3, #31
 80140da:	d4e3      	bmi.n	80140a4 <http_recv+0x294>
 80140dc:	e7db      	b.n	8014096 <http_recv+0x286>
      } else if (!strncmp(data, "POST ", 5)) {
 80140de:	2205      	movs	r2, #5
 80140e0:	493a      	ldr	r1, [pc, #232]	; (80141cc <http_recv+0x3bc>)
 80140e2:	4640      	mov	r0, r8
 80140e4:	f00d f9d4 	bl	8021490 <strncmp>
 80140e8:	4682      	mov	sl, r0
 80140ea:	b988      	cbnz	r0, 8014110 <http_recv+0x300>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80140ec:	1f7b      	subs	r3, r7, #5
        sp1 = data + 4;
 80140ee:	f108 0204 	add.w	r2, r8, #4
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80140f2:	f108 0b05 	add.w	fp, r8, #5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80140f6:	492d      	ldr	r1, [pc, #180]	; (80141ac <http_recv+0x39c>)
 80140f8:	b29b      	uxth	r3, r3
        sp1 = data + 4;
 80140fa:	9204      	str	r2, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80140fc:	4658      	mov	r0, fp
 80140fe:	461a      	mov	r2, r3
 8014100:	9305      	str	r3, [sp, #20]
 8014102:	f000 f941 	bl	8014388 <lwip_strnstr>
      if (sp2 == NULL) {
 8014106:	9b05      	ldr	r3, [sp, #20]
 8014108:	4681      	mov	r9, r0
 801410a:	b338      	cbz	r0, 801415c <http_recv+0x34c>
        is_post = 1;
 801410c:	2301      	movs	r3, #1
 801410e:	e700      	b.n	8013f12 <http_recv+0x102>
        data[4] = 0;
 8014110:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8014112:	f240 11f5 	movw	r1, #501	; 0x1f5
 8014116:	4628      	mov	r0, r5
        data[4] = 0;
 8014118:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 801411c:	f7ff fa9a 	bl	8013654 <http_find_error_file>
 8014120:	4607      	mov	r7, r0
 8014122:	e7b3      	b.n	801408c <http_recv+0x27c>
        if (hs->req != NULL) {
 8014124:	2800      	cmp	r0, #0
 8014126:	f43f ae87 	beq.w	8013e38 <http_recv+0x28>
          pbuf_free(hs->req);
 801412a:	f001 ff97 	bl	801605c <pbuf_free>
          hs->req = NULL;
 801412e:	622f      	str	r7, [r5, #32]
      pbuf_free(p);
 8014130:	4620      	mov	r0, r4
 8014132:	f001 ff93 	bl	801605c <pbuf_free>
 8014136:	e68b      	b.n	8013e50 <http_recv+0x40>
            return http_find_file(hs, uri, is_09);
 8014138:	4652      	mov	r2, sl
 801413a:	4659      	mov	r1, fp
 801413c:	4628      	mov	r0, r5
 801413e:	f7ff f979 	bl	8013434 <http_find_file>
 8014142:	4607      	mov	r7, r0
 8014144:	e7a2      	b.n	801408c <http_recv+0x27c>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8014146:	4652      	mov	r2, sl
 8014148:	4916      	ldr	r1, [pc, #88]	; (80141a4 <http_recv+0x394>)
 801414a:	4658      	mov	r0, fp
 801414c:	9305      	str	r3, [sp, #20]
        is_09 = 1;
 801414e:	f04f 0a01 	mov.w	sl, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8014152:	f000 f919 	bl	8014388 <lwip_strnstr>
 8014156:	9b05      	ldr	r3, [sp, #20]
 8014158:	4681      	mov	r9, r0
 801415a:	e6da      	b.n	8013f12 <http_recv+0x102>
 801415c:	461a      	mov	r2, r3
 801415e:	4658      	mov	r0, fp
 8014160:	4910      	ldr	r1, [pc, #64]	; (80141a4 <http_recv+0x394>)
 8014162:	f000 f911 	bl	8014388 <lwip_strnstr>
 8014166:	e78b      	b.n	8014080 <http_recv+0x270>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8014168:	463a      	mov	r2, r7
 801416a:	4919      	ldr	r1, [pc, #100]	; (80141d0 <http_recv+0x3c0>)
 801416c:	4640      	mov	r0, r8
 801416e:	f000 f90b 	bl	8014388 <lwip_strnstr>
 8014172:	9b05      	ldr	r3, [sp, #20]
 8014174:	2800      	cmp	r0, #0
 8014176:	d050      	beq.n	801421a <http_recv+0x40a>
            hs->keepalive = 1;
 8014178:	2201      	movs	r2, #1
 801417a:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 801417e:	e6e1      	b.n	8013f44 <http_recv+0x134>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8014180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014182:	7c13      	ldrb	r3, [r2, #16]
 8014184:	2b30      	cmp	r3, #48	; 0x30
 8014186:	d103      	bne.n	8014190 <http_recv+0x380>
 8014188:	7c53      	ldrb	r3, [r2, #17]
 801418a:	2b0d      	cmp	r3, #13
 801418c:	f43f af17 	beq.w	8013fbe <http_recv+0x1ae>
              *sp1 = ' ';
 8014190:	2320      	movs	r3, #32
 8014192:	9a04      	ldr	r2, [sp, #16]
 8014194:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014196:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014198:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801419c:	7013      	strb	r3, [r2, #0]
 801419e:	e76f      	b.n	8014080 <http_recv+0x270>
 80141a0:	200219f0 	.word	0x200219f0
 80141a4:	08025688 	.word	0x08025688
 80141a8:	0803c758 	.word	0x0803c758
 80141ac:	08025d68 	.word	0x08025d68
 80141b0:	080245cc 	.word	0x080245cc
 80141b4:	0803c798 	.word	0x0803c798
 80141b8:	200219ac 	.word	0x200219ac
 80141bc:	0803c6c0 	.word	0x0803c6c0
 80141c0:	0803c7ac 	.word	0x0803c7ac
 80141c4:	08026544 	.word	0x08026544
 80141c8:	00010901 	.word	0x00010901
 80141cc:	0803c760 	.word	0x0803c760
 80141d0:	0803c768 	.word	0x0803c768
 80141d4:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 80141d6:	4641      	mov	r1, r8
 80141d8:	4650      	mov	r0, sl
 80141da:	f001 ff03 	bl	8015fe4 <pbuf_remove_header>
              pbuf_ref(q);
 80141de:	4650      	mov	r0, sl
 80141e0:	f002 f8b0 	bl	8016344 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80141e4:	4651      	mov	r1, sl
 80141e6:	4628      	mov	r0, r5
 80141e8:	f7ff fa0e 	bl	8013608 <http_post_rxpbuf>
 80141ec:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 80141ee:	2f00      	cmp	r7, #0
 80141f0:	f43f af2d 	beq.w	801404e <http_recv+0x23e>
              *sp1 = ' ';
 80141f4:	2320      	movs	r3, #32
 80141f6:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 80141f8:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 80141fc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80141fe:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014200:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014204:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8014206:	f43f af3b 	beq.w	8014080 <http_recv+0x270>
 801420a:	e73f      	b.n	801408c <http_recv+0x27c>
            return http_find_file(hs, http_uri_buf, 0);
 801420c:	2200      	movs	r2, #0
 801420e:	4913      	ldr	r1, [pc, #76]	; (801425c <http_recv+0x44c>)
 8014210:	4628      	mov	r0, r5
 8014212:	f7ff f90f 	bl	8013434 <http_find_file>
 8014216:	4607      	mov	r7, r0
 8014218:	e7e9      	b.n	80141ee <http_recv+0x3de>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 801421a:	463a      	mov	r2, r7
 801421c:	4910      	ldr	r1, [pc, #64]	; (8014260 <http_recv+0x450>)
 801421e:	4640      	mov	r0, r8
 8014220:	9305      	str	r3, [sp, #20]
 8014222:	f000 f8b1 	bl	8014388 <lwip_strnstr>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8014226:	9b05      	ldr	r3, [sp, #20]
 8014228:	2800      	cmp	r0, #0
 801422a:	d1a5      	bne.n	8014178 <http_recv+0x368>
 801422c:	e687      	b.n	8013f3e <http_recv+0x12e>
      pbuf_free(p);
 801422e:	4620      	mov	r0, r4
 8014230:	f001 ff14 	bl	801605c <pbuf_free>
 8014234:	e61e      	b.n	8013e74 <http_recv+0x64>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8014236:	9907      	ldr	r1, [sp, #28]
 8014238:	2241      	movs	r2, #65	; 0x41
 801423a:	4608      	mov	r0, r1
 801423c:	f001 ff7c 	bl	8016138 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 8014240:	4601      	mov	r1, r0
 8014242:	4628      	mov	r0, r5
 8014244:	f7ff f9e0 	bl	8013608 <http_post_rxpbuf>
 8014248:	4607      	mov	r7, r0
 801424a:	e7d0      	b.n	80141ee <http_recv+0x3de>
              *sp1 = ' ';
 801424c:	2320      	movs	r3, #32
 801424e:	9a04      	ldr	r2, [sp, #16]
 8014250:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8014252:	9a05      	ldr	r2, [sp, #20]
              *sp2 = ' ';
 8014254:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8014258:	7013      	strb	r3, [r2, #0]
 801425a:	e5ed      	b.n	8013e38 <http_recv+0x28>
 801425c:	200219ac 	.word	0x200219ac
 8014260:	0803c780 	.word	0x0803c780

08014264 <http_err>:
  if (hs != NULL) {
 8014264:	b140      	cbz	r0, 8014278 <http_err+0x14>
{
 8014266:	b510      	push	{r4, lr}
 8014268:	4604      	mov	r4, r0
    http_state_eof(hs);
 801426a:	f7fe ff7d 	bl	8013168 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 801426e:	4620      	mov	r0, r4
}
 8014270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8014274:	f001 b830 	b.w	80152d8 <mem_free>
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop

0801427c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801427c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801427e:	202e      	movs	r0, #46	; 0x2e
 8014280:	f003 fc0e 	bl	8017aa0 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8014284:	b310      	cbz	r0, 80142cc <httpd_init+0x50>
 8014286:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014288:	2101      	movs	r1, #1
 801428a:	f002 fe3f 	bl	8016f0c <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801428e:	2250      	movs	r2, #80	; 0x50
 8014290:	4917      	ldr	r1, [pc, #92]	; (80142f0 <httpd_init+0x74>)
 8014292:	4620      	mov	r0, r4
 8014294:	f002 fcd8 	bl	8016c48 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8014298:	bb08      	cbnz	r0, 80142de <httpd_init+0x62>
    pcb = altcp_listen(pcb);
 801429a:	4620      	mov	r0, r4
 801429c:	21ff      	movs	r1, #255	; 0xff
 801429e:	f002 fda1 	bl	8016de4 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80142a2:	4604      	mov	r4, r0
 80142a4:	b128      	cbz	r0, 80142b2 <httpd_init+0x36>
    altcp_accept(pcb, http_accept);
 80142a6:	4620      	mov	r0, r4
 80142a8:	4912      	ldr	r1, [pc, #72]	; (80142f4 <httpd_init+0x78>)
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 80142aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 80142ae:	f002 bebd 	b.w	801702c <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80142b2:	4911      	ldr	r1, [pc, #68]	; (80142f8 <httpd_init+0x7c>)
 80142b4:	f640 2259 	movw	r2, #2649	; 0xa59
 80142b8:	4b10      	ldr	r3, [pc, #64]	; (80142fc <httpd_init+0x80>)
 80142ba:	4811      	ldr	r0, [pc, #68]	; (8014300 <httpd_init+0x84>)
 80142bc:	f00c f96c 	bl	8020598 <iprintf>
    altcp_accept(pcb, http_accept);
 80142c0:	4620      	mov	r0, r4
 80142c2:	490c      	ldr	r1, [pc, #48]	; (80142f4 <httpd_init+0x78>)
}
 80142c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 80142c8:	f002 beb0 	b.w	801702c <tcp_accept>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80142cc:	4b0b      	ldr	r3, [pc, #44]	; (80142fc <httpd_init+0x80>)
 80142ce:	f640 2272 	movw	r2, #2674	; 0xa72
 80142d2:	490c      	ldr	r1, [pc, #48]	; (8014304 <httpd_init+0x88>)
 80142d4:	480a      	ldr	r0, [pc, #40]	; (8014300 <httpd_init+0x84>)
}
 80142d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80142da:	f00c b95d 	b.w	8020598 <iprintf>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80142de:	4b07      	ldr	r3, [pc, #28]	; (80142fc <httpd_init+0x80>)
 80142e0:	f640 2257 	movw	r2, #2647	; 0xa57
 80142e4:	4908      	ldr	r1, [pc, #32]	; (8014308 <httpd_init+0x8c>)
 80142e6:	4806      	ldr	r0, [pc, #24]	; (8014300 <httpd_init+0x84>)
 80142e8:	f00c f956 	bl	8020598 <iprintf>
 80142ec:	e7d5      	b.n	801429a <httpd_init+0x1e>
 80142ee:	bf00      	nop
 80142f0:	0803f460 	.word	0x0803f460
 80142f4:	080131d9 	.word	0x080131d9
 80142f8:	0803c928 	.word	0x0803c928
 80142fc:	0803c6c0 	.word	0x0803c6c0
 8014300:	08026544 	.word	0x08026544
 8014304:	0803c8f0 	.word	0x0803c8f0
 8014308:	0803c90c 	.word	0x0803c90c

0801430c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801430c:	b570      	push	{r4, r5, r6, lr}
 801430e:	460d      	mov	r5, r1
 8014310:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8014312:	4606      	mov	r6, r0
 8014314:	b1c8      	cbz	r0, 801434a <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8014316:	4b11      	ldr	r3, [pc, #68]	; (801435c <http_set_ssi_handler+0x50>)
 8014318:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 801431a:	b175      	cbz	r5, 801433a <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801431c:	2c00      	cmp	r4, #0
 801431e:	dd04      	ble.n	801432a <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8014320:	4a0f      	ldr	r2, [pc, #60]	; (8014360 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8014322:	4b10      	ldr	r3, [pc, #64]	; (8014364 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8014324:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8014326:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8014328:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 801432a:	4b0f      	ldr	r3, [pc, #60]	; (8014368 <http_set_ssi_handler+0x5c>)
 801432c:	f640 229f 	movw	r2, #2719	; 0xa9f
 8014330:	490e      	ldr	r1, [pc, #56]	; (801436c <http_set_ssi_handler+0x60>)
 8014332:	480f      	ldr	r0, [pc, #60]	; (8014370 <http_set_ssi_handler+0x64>)
 8014334:	f00c f930 	bl	8020598 <iprintf>
 8014338:	e7f2      	b.n	8014320 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 801433a:	4b0b      	ldr	r3, [pc, #44]	; (8014368 <http_set_ssi_handler+0x5c>)
 801433c:	f640 229e 	movw	r2, #2718	; 0xa9e
 8014340:	490c      	ldr	r1, [pc, #48]	; (8014374 <http_set_ssi_handler+0x68>)
 8014342:	480b      	ldr	r0, [pc, #44]	; (8014370 <http_set_ssi_handler+0x64>)
 8014344:	f00c f928 	bl	8020598 <iprintf>
 8014348:	e7e8      	b.n	801431c <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801434a:	4b07      	ldr	r3, [pc, #28]	; (8014368 <http_set_ssi_handler+0x5c>)
 801434c:	f640 2297 	movw	r2, #2711	; 0xa97
 8014350:	4909      	ldr	r1, [pc, #36]	; (8014378 <http_set_ssi_handler+0x6c>)
 8014352:	4807      	ldr	r0, [pc, #28]	; (8014370 <http_set_ssi_handler+0x64>)
 8014354:	f00c f920 	bl	8020598 <iprintf>
 8014358:	e7dd      	b.n	8014316 <http_set_ssi_handler+0xa>
 801435a:	bf00      	nop
 801435c:	20021df0 	.word	0x20021df0
 8014360:	20021df4 	.word	0x20021df4
 8014364:	200219ec 	.word	0x200219ec
 8014368:	0803c6c0 	.word	0x0803c6c0
 801436c:	0803c8a0 	.word	0x0803c8a0
 8014370:	08026544 	.word	0x08026544
 8014374:	0803c890 	.word	0x0803c890
 8014378:	0803c878 	.word	0x0803c878

0801437c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801437c:	ba40      	rev16	r0, r0
}
 801437e:	b280      	uxth	r0, r0
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop

08014384 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8014384:	ba00      	rev	r0, r0
 8014386:	4770      	bx	lr

08014388 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8014388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438c:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801438e:	4608      	mov	r0, r1
{
 8014390:	4688      	mov	r8, r1
 8014392:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8014394:	f7eb ff5e 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8014398:	b1c0      	cbz	r0, 80143cc <lwip_strnstr+0x44>
 801439a:	4605      	mov	r5, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801439c:	7820      	ldrb	r0, [r4, #0]
 801439e:	b1b0      	cbz	r0, 80143ce <lwip_strnstr+0x46>
 80143a0:	4426      	add	r6, r4
 80143a2:	1963      	adds	r3, r4, r5
 80143a4:	429e      	cmp	r6, r3
 80143a6:	d314      	bcc.n	80143d2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80143a8:	f898 7000 	ldrb.w	r7, [r8]
 80143ac:	e005      	b.n	80143ba <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80143ae:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80143b2:	1963      	adds	r3, r4, r5
 80143b4:	b158      	cbz	r0, 80143ce <lwip_strnstr+0x46>
 80143b6:	429e      	cmp	r6, r3
 80143b8:	d30b      	bcc.n	80143d2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80143ba:	4287      	cmp	r7, r0
 80143bc:	d1f7      	bne.n	80143ae <lwip_strnstr+0x26>
 80143be:	462a      	mov	r2, r5
 80143c0:	4641      	mov	r1, r8
 80143c2:	4620      	mov	r0, r4
 80143c4:	f00d f864 	bl	8021490 <strncmp>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d1f0      	bne.n	80143ae <lwip_strnstr+0x26>
 80143cc:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 80143ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80143d2:	2000      	movs	r0, #0
}
 80143d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143d8 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 80143d8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80143dc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 80143e0:	4293      	cmp	r3, r2
 80143e2:	d01c      	beq.n	801441e <lwip_stricmp+0x46>
{
 80143e4:	b430      	push	{r4, r5}
 80143e6:	f043 0420 	orr.w	r4, r3, #32
 80143ea:	f042 0520 	orr.w	r5, r2, #32
 80143ee:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80143f2:	2a19      	cmp	r2, #25
 80143f4:	d810      	bhi.n	8014418 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80143f6:	42ac      	cmp	r4, r5
 80143f8:	d10e      	bne.n	8014418 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 80143fa:	b1a3      	cbz	r3, 8014426 <lwip_stricmp+0x4e>
    c1 = *str1++;
 80143fc:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014400:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8014404:	4293      	cmp	r3, r2
 8014406:	d0f8      	beq.n	80143fa <lwip_stricmp+0x22>
 8014408:	f043 0420 	orr.w	r4, r3, #32
 801440c:	f042 0520 	orr.w	r5, r2, #32
 8014410:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014414:	2a19      	cmp	r2, #25
 8014416:	d9ee      	bls.n	80143f6 <lwip_stricmp+0x1e>
        return 1;
 8014418:	2001      	movs	r0, #1
  return 0;
}
 801441a:	bc30      	pop	{r4, r5}
 801441c:	4770      	bx	lr
  } while (c1 != 0);
 801441e:	2b00      	cmp	r3, #0
 8014420:	d1da      	bne.n	80143d8 <lwip_stricmp>
  return 0;
 8014422:	4618      	mov	r0, r3
}
 8014424:	4770      	bx	lr
  return 0;
 8014426:	4618      	mov	r0, r3
}
 8014428:	bc30      	pop	{r4, r5}
 801442a:	4770      	bx	lr

0801442c <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801442c:	b470      	push	{r4, r5, r6}
 801442e:	e005      	b.n	801443c <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8014430:	42b5      	cmp	r5, r6
 8014432:	d111      	bne.n	8014458 <lwip_strnicmp+0x2c>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8014434:	f112 32ff 	adds.w	r2, r2, #4294967295
 8014438:	d011      	beq.n	801445e <lwip_strnicmp+0x32>
 801443a:	b183      	cbz	r3, 801445e <lwip_strnicmp+0x32>
    c1 = *str1++;
 801443c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8014440:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 8014444:	42a3      	cmp	r3, r4
 8014446:	d0f5      	beq.n	8014434 <lwip_strnicmp+0x8>
 8014448:	f043 0520 	orr.w	r5, r3, #32
 801444c:	f044 0620 	orr.w	r6, r4, #32
 8014450:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8014454:	2c19      	cmp	r4, #25
 8014456:	d9eb      	bls.n	8014430 <lwip_strnicmp+0x4>
        return 1;
 8014458:	2001      	movs	r0, #1
  return 0;
}
 801445a:	bc70      	pop	{r4, r5, r6}
 801445c:	4770      	bx	lr
  return 0;
 801445e:	2000      	movs	r0, #0
}
 8014460:	bc70      	pop	{r4, r5, r6}
 8014462:	4770      	bx	lr

08014464 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8014464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014468:	0106      	lsls	r6, r0, #4
 801446a:	4c24      	ldr	r4, [pc, #144]	; (80144fc <dns_call_found+0x98>)
 801446c:	4605      	mov	r5, r0
 801446e:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014470:	eb06 0800 	add.w	r8, r6, r0
 8014474:	4f22      	ldr	r7, [pc, #136]	; (8014500 <dns_call_found+0x9c>)
 8014476:	f104 0930 	add.w	r9, r4, #48	; 0x30
 801447a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801447e:	f108 0810 	add.w	r8, r8, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8014482:	6823      	ldr	r3, [r4, #0]
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014484:	4651      	mov	r1, sl
 8014486:	eb07 0008 	add.w	r0, r7, r8
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801448a:	b133      	cbz	r3, 801449a <dns_call_found+0x36>
 801448c:	7a22      	ldrb	r2, [r4, #8]
 801448e:	42aa      	cmp	r2, r5
 8014490:	d103      	bne.n	801449a <dns_call_found+0x36>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8014492:	6862      	ldr	r2, [r4, #4]
 8014494:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 8014496:	2300      	movs	r3, #0
 8014498:	6023      	str	r3, [r4, #0]
 801449a:	340c      	adds	r4, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801449c:	454c      	cmp	r4, r9
 801449e:	d1f0      	bne.n	8014482 <dns_call_found+0x1e>
 80144a0:	1973      	adds	r3, r6, r5
 80144a2:	2400      	movs	r4, #0
 80144a4:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80144a8:	4f15      	ldr	r7, [pc, #84]	; (8014500 <dns_call_found+0x9c>)
 80144aa:	7bd9      	ldrb	r1, [r3, #15]
 80144ac:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 80144ae:	b2e3      	uxtb	r3, r4
 80144b0:	3401      	adds	r4, #1
 80144b2:	42ab      	cmp	r3, r5
 80144b4:	d002      	beq.n	80144bc <dns_call_found+0x58>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80144b6:	7a93      	ldrb	r3, [r2, #10]
 80144b8:	2b02      	cmp	r3, #2
 80144ba:	d015      	beq.n	80144e8 <dns_call_found+0x84>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80144bc:	2c04      	cmp	r4, #4
 80144be:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80144c2:	d1f4      	bne.n	80144ae <dns_call_found+0x4a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80144c4:	2903      	cmp	r1, #3
 80144c6:	d80d      	bhi.n	80144e4 <dns_call_found+0x80>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80144c8:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80144ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8014504 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80144ce:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80144d2:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80144d6:	f007 fa1f 	bl	801b918 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80144da:	2200      	movs	r2, #0
 80144dc:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80144de:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80144e0:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 80144e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80144e8:	7bd3      	ldrb	r3, [r2, #15]
 80144ea:	428b      	cmp	r3, r1
 80144ec:	d1e6      	bne.n	80144bc <dns_call_found+0x58>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80144ee:	4435      	add	r5, r6
 80144f0:	2304      	movs	r3, #4
 80144f2:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 80144f6:	73fb      	strb	r3, [r7, #15]
 80144f8:	e7f4      	b.n	80144e4 <dns_call_found+0x80>
 80144fa:	bf00      	nop
 80144fc:	20021e0c 	.word	0x20021e0c
 8014500:	20021e48 	.word	0x20021e48
 8014504:	20021dfc 	.word	0x20021dfc

08014508 <dns_send>:
{
 8014508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801450c:	0103      	lsls	r3, r0, #4
{
 801450e:	b087      	sub	sp, #28
 8014510:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8014512:	181c      	adds	r4, r3, r0
 8014514:	9301      	str	r3, [sp, #4]
 8014516:	4b60      	ldr	r3, [pc, #384]	; (8014698 <dns_send+0x190>)
 8014518:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801451c:	7ae3      	ldrb	r3, [r4, #11]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d907      	bls.n	8014532 <dns_send+0x2a>
 8014522:	4b5e      	ldr	r3, [pc, #376]	; (801469c <dns_send+0x194>)
 8014524:	f240 22fa 	movw	r2, #762	; 0x2fa
 8014528:	495d      	ldr	r1, [pc, #372]	; (80146a0 <dns_send+0x198>)
 801452a:	485e      	ldr	r0, [pc, #376]	; (80146a4 <dns_send+0x19c>)
 801452c:	f00c f834 	bl	8020598 <iprintf>
 8014530:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8014532:	4a5d      	ldr	r2, [pc, #372]	; (80146a8 <dns_send+0x1a0>)
 8014534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014538:	2c00      	cmp	r4, #0
 801453a:	f000 8099 	beq.w	8014670 <dns_send+0x168>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 801453e:	9b01      	ldr	r3, [sp, #4]
 8014540:	4e55      	ldr	r6, [pc, #340]	; (8014698 <dns_send+0x190>)
 8014542:	eb03 0409 	add.w	r4, r3, r9
 8014546:	0124      	lsls	r4, r4, #4
 8014548:	f104 0510 	add.w	r5, r4, #16
 801454c:	4435      	add	r5, r6
 801454e:	4628      	mov	r0, r5
 8014550:	f7eb fe80 	bl	8000254 <strlen>
 8014554:	f100 0112 	add.w	r1, r0, #18
 8014558:	f44f 7220 	mov.w	r2, #640	; 0x280
 801455c:	2036      	movs	r0, #54	; 0x36
 801455e:	b289      	uxth	r1, r1
 8014560:	f001 fdea 	bl	8016138 <pbuf_alloc>
  if (p != NULL) {
 8014564:	4680      	mov	r8, r0
 8014566:	2800      	cmp	r0, #0
 8014568:	f000 8093 	beq.w	8014692 <dns_send+0x18a>
    hdr.id = lwip_htons(entry->txid);
 801456c:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801456e:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8014570:	260c      	movs	r6, #12
    --hostname;
 8014572:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8014574:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8014576:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801457a:	9304      	str	r3, [sp, #16]
 801457c:	9303      	str	r3, [sp, #12]
 801457e:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 8014580:	f7ff fefc 	bl	801437c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8014584:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 8014586:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 801458a:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801458e:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8014592:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8014596:	4640      	mov	r0, r8
 8014598:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 801459a:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801459e:	f002 f841 	bl	8016624 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80145a2:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 80145a4:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80145a6:	2b2e      	cmp	r3, #46	; 0x2e
 80145a8:	d051      	beq.n	801464e <dns_send+0x146>
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d04f      	beq.n	801464e <dns_send+0x146>
      ++hostname;
 80145ae:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80145b0:	2400      	movs	r4, #0
 80145b2:	e000      	b.n	80145b6 <dns_send+0xae>
 80145b4:	b12b      	cbz	r3, 80145c2 <dns_send+0xba>
 80145b6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        ++n;
 80145ba:	3401      	adds	r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80145bc:	2b2e      	cmp	r3, #46	; 0x2e
        ++n;
 80145be:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80145c0:	d1f8      	bne.n	80145b4 <dns_send+0xac>
 80145c2:	4623      	mov	r3, r4
 80145c4:	eba5 0a07 	sub.w	sl, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 80145c8:	4433      	add	r3, r6
 80145ca:	fa1f fa8a 	uxth.w	sl, sl
 80145ce:	455b      	cmp	r3, fp
 80145d0:	dc45      	bgt.n	801465e <dns_send+0x156>
      pbuf_put_at(p, query_idx, n);
 80145d2:	4622      	mov	r2, r4
 80145d4:	4631      	mov	r1, r6
 80145d6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 80145d8:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 80145da:	f002 f8f1 	bl	80167c0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80145de:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 80145e0:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80145e2:	4652      	mov	r2, sl
 80145e4:	4639      	mov	r1, r7
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 80145ea:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80145ec:	f002 f882 	bl	80166f4 <pbuf_take_at>
    } while (*hostname != 0);
 80145f0:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 80145f2:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 80145f4:	2a00      	cmp	r2, #0
 80145f6:	d1d4      	bne.n	80145a2 <dns_send+0x9a>
    pbuf_put_at(p, query_idx, 0);
 80145f8:	4631      	mov	r1, r6
 80145fa:	4640      	mov	r0, r8
 80145fc:	f002 f8e0 	bl	80167c0 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014600:	a906      	add	r1, sp, #24
    query_idx++;
 8014602:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8014604:	f04f 2001 	mov.w	r0, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014608:	2204      	movs	r2, #4
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801460a:	4d27      	ldr	r5, [pc, #156]	; (80146a8 <dns_send+0x1a0>)
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801460c:	f841 0d10 	str.w	r0, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8014610:	b29b      	uxth	r3, r3
 8014612:	4640      	mov	r0, r8
 8014614:	f002 f86e 	bl	80166f4 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8014618:	9b01      	ldr	r3, [sp, #4]
 801461a:	4a1f      	ldr	r2, [pc, #124]	; (8014698 <dns_send+0x190>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801461c:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 801461e:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014620:	4822      	ldr	r0, [pc, #136]	; (80146ac <dns_send+0x1a4>)
      dst = &dns_servers[entry->server_idx];
 8014622:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8014624:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8014626:	eb02 1a09 	add.w	sl, r2, r9, lsl #4
 801462a:	f89a 200b 	ldrb.w	r2, [sl, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801462e:	f89a 400f 	ldrb.w	r4, [sl, #15]
 8014632:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014636:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801463a:	f007 f8c7 	bl	801b7cc <udp_sendto>
 801463e:	4605      	mov	r5, r0
    pbuf_free(p);
 8014640:	4640      	mov	r0, r8
 8014642:	f001 fd0b 	bl	801605c <pbuf_free>
}
 8014646:	4628      	mov	r0, r5
 8014648:	b007      	add	sp, #28
 801464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801464e:	f04f 0a00 	mov.w	sl, #0
      ++hostname;
 8014652:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8014654:	4653      	mov	r3, sl
 8014656:	4654      	mov	r4, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8014658:	4433      	add	r3, r6
 801465a:	455b      	cmp	r3, fp
 801465c:	ddb9      	ble.n	80145d2 <dns_send+0xca>
  return ERR_VAL;
 801465e:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 8014662:	4640      	mov	r0, r8
 8014664:	f001 fcfa 	bl	801605c <pbuf_free>
}
 8014668:	4628      	mov	r0, r5
 801466a:	b007      	add	sp, #28
 801466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 8014670:	4648      	mov	r0, r9
 8014672:	4621      	mov	r1, r4
 8014674:	f7ff fef6 	bl	8014464 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8014678:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 801467a:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 801467c:	444b      	add	r3, r9
}
 801467e:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 8014680:	4699      	mov	r9, r3
 8014682:	4b05      	ldr	r3, [pc, #20]	; (8014698 <dns_send+0x190>)
 8014684:	eb03 1a09 	add.w	sl, r3, r9, lsl #4
 8014688:	f88a 400a 	strb.w	r4, [sl, #10]
}
 801468c:	b007      	add	sp, #28
 801468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8014692:	f04f 35ff 	mov.w	r5, #4294967295
 8014696:	e7d6      	b.n	8014646 <dns_send+0x13e>
 8014698:	20021e48 	.word	0x20021e48
 801469c:	0803c9f8 	.word	0x0803c9f8
 80146a0:	0803ca28 	.word	0x0803ca28
 80146a4:	08026544 	.word	0x08026544
 80146a8:	20021e40 	.word	0x20021e40
 80146ac:	20021dfc 	.word	0x20021dfc

080146b0 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80146b0:	2803      	cmp	r0, #3
{
 80146b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b6:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80146b8:	d84a      	bhi.n	8014750 <dns_check_entry+0xa0>

  switch (entry->state) {
 80146ba:	0125      	lsls	r5, r4, #4
 80146bc:	4e39      	ldr	r6, [pc, #228]	; (80147a4 <dns_check_entry+0xf4>)
 80146be:	192b      	adds	r3, r5, r4
 80146c0:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80146c4:	7a9b      	ldrb	r3, [r3, #10]
 80146c6:	2b03      	cmp	r3, #3
 80146c8:	d84e      	bhi.n	8014768 <dns_check_entry+0xb8>
 80146ca:	e8df f003 	tbb	[pc, r3]
 80146ce:	100e      	.short	0x100e
 80146d0:	022c      	.short	0x022c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80146d2:	192b      	adds	r3, r5, r4
 80146d4:	011b      	lsls	r3, r3, #4
 80146d6:	58f2      	ldr	r2, [r6, r3]
 80146d8:	b112      	cbz	r2, 80146e0 <dns_check_entry+0x30>
 80146da:	3a01      	subs	r2, #1
 80146dc:	50f2      	str	r2, [r6, r3]
 80146de:	b922      	cbnz	r2, 80146ea <dns_check_entry+0x3a>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80146e0:	442c      	add	r4, r5
 80146e2:	2300      	movs	r3, #0
 80146e4:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80146e8:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 80146ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ee:	4f2e      	ldr	r7, [pc, #184]	; (80147a8 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 80146f0:	f00b ffe2 	bl	80206b8 <rand>
 80146f4:	4b2b      	ldr	r3, [pc, #172]	; (80147a4 <dns_check_entry+0xf4>)
 80146f6:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80146f8:	7a9a      	ldrb	r2, [r3, #10]
 80146fa:	2a02      	cmp	r2, #2
 80146fc:	d030      	beq.n	8014760 <dns_check_entry+0xb0>
 80146fe:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014702:	429f      	cmp	r7, r3
 8014704:	d1f8      	bne.n	80146f8 <dns_check_entry+0x48>
      entry->txid = dns_create_txid();
 8014706:	4425      	add	r5, r4
      err = dns_send(i);
 8014708:	4620      	mov	r0, r4
      entry->server_idx = 0;
 801470a:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 801470c:	2402      	movs	r4, #2
      entry->txid = dns_create_txid();
 801470e:	012d      	lsls	r5, r5, #4
 8014710:	f105 0308 	add.w	r3, r5, #8
 8014714:	4435      	add	r5, r6
 8014716:	441e      	add	r6, r3
 8014718:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 801471a:	8074      	strh	r4, [r6, #2]
      entry->server_idx = 0;
 801471c:	80b2      	strh	r2, [r6, #4]
}
 801471e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8014722:	f7ff bef1 	b.w	8014508 <dns_send>
      if (--entry->tmr == 0) {
 8014726:	192a      	adds	r2, r5, r4
 8014728:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 801472c:	7b13      	ldrb	r3, [r2, #12]
 801472e:	3b01      	subs	r3, #1
 8014730:	b2db      	uxtb	r3, r3
 8014732:	7313      	strb	r3, [r2, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d1d8      	bne.n	80146ea <dns_check_entry+0x3a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8014738:	7b53      	ldrb	r3, [r2, #13]
 801473a:	3301      	adds	r3, #1
 801473c:	b2db      	uxtb	r3, r3
 801473e:	2b04      	cmp	r3, #4
 8014740:	7353      	strb	r3, [r2, #13]
 8014742:	d01a      	beq.n	801477a <dns_check_entry+0xca>
          entry->tmr = entry->retries;
 8014744:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8014746:	4620      	mov	r0, r4
}
 8014748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 801474c:	f7ff bedc 	b.w	8014508 <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8014750:	4b16      	ldr	r3, [pc, #88]	; (80147ac <dns_check_entry+0xfc>)
 8014752:	f240 421c 	movw	r2, #1052	; 0x41c
 8014756:	4916      	ldr	r1, [pc, #88]	; (80147b0 <dns_check_entry+0x100>)
 8014758:	4816      	ldr	r0, [pc, #88]	; (80147b4 <dns_check_entry+0x104>)
 801475a:	f00b ff1d 	bl	8020598 <iprintf>
 801475e:	e7ac      	b.n	80146ba <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014760:	891a      	ldrh	r2, [r3, #8]
 8014762:	428a      	cmp	r2, r1
 8014764:	d1cb      	bne.n	80146fe <dns_check_entry+0x4e>
 8014766:	e7c3      	b.n	80146f0 <dns_check_entry+0x40>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8014768:	4b10      	ldr	r3, [pc, #64]	; (80147ac <dns_check_entry+0xfc>)
 801476a:	f240 425b 	movw	r2, #1115	; 0x45b
 801476e:	4912      	ldr	r1, [pc, #72]	; (80147b8 <dns_check_entry+0x108>)
 8014770:	4810      	ldr	r0, [pc, #64]	; (80147b4 <dns_check_entry+0x104>)
}
 8014772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8014776:	f00b bf0f 	b.w	8020598 <iprintf>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 801477a:	7ad3      	ldrb	r3, [r2, #11]
 801477c:	b93b      	cbnz	r3, 801478e <dns_check_entry+0xde>
 801477e:	490f      	ldr	r1, [pc, #60]	; (80147bc <dns_check_entry+0x10c>)
 8014780:	6849      	ldr	r1, [r1, #4]
 8014782:	b121      	cbz	r1, 801478e <dns_check_entry+0xde>
            entry->server_idx++;
 8014784:	2101      	movs	r1, #1
            entry->retries = 0;
 8014786:	7353      	strb	r3, [r2, #13]
            entry->server_idx++;
 8014788:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 801478a:	7311      	strb	r1, [r2, #12]
 801478c:	e7db      	b.n	8014746 <dns_check_entry+0x96>
            dns_call_found(i, NULL);
 801478e:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8014790:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8014792:	2100      	movs	r1, #0
 8014794:	f7ff fe66 	bl	8014464 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8014798:	2300      	movs	r3, #0
 801479a:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801479e:	72b3      	strb	r3, [r6, #10]
            break;
 80147a0:	e7a3      	b.n	80146ea <dns_check_entry+0x3a>
 80147a2:	bf00      	nop
 80147a4:	20021e48 	.word	0x20021e48
 80147a8:	20022288 	.word	0x20022288
 80147ac:	0803c9f8 	.word	0x0803c9f8
 80147b0:	0803c9bc 	.word	0x0803c9bc
 80147b4:	08026544 	.word	0x08026544
 80147b8:	0803c9d8 	.word	0x0803c9d8
 80147bc:	20021e40 	.word	0x20021e40

080147c0 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80147c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c4:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80147c6:	8913      	ldrh	r3, [r2, #8]
{
 80147c8:	b08d      	sub	sp, #52	; 0x34
 80147ca:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80147cc:	2b0f      	cmp	r3, #15
 80147ce:	d908      	bls.n	80147e2 <dns_recv+0x22>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 80147d0:	2300      	movs	r3, #0
 80147d2:	220c      	movs	r2, #12
 80147d4:	a906      	add	r1, sp, #24
 80147d6:	4620      	mov	r0, r4
 80147d8:	f001 fed0 	bl	801657c <pbuf_copy_partial>
 80147dc:	280c      	cmp	r0, #12
 80147de:	4606      	mov	r6, r0
 80147e0:	d005      	beq.n	80147ee <dns_recv+0x2e>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 80147e2:	4620      	mov	r0, r4
 80147e4:	f001 fc3a 	bl	801605c <pbuf_free>
  return;
}
 80147e8:	b00d      	add	sp, #52	; 0x34
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ee:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8014af0 <dns_recv+0x330>
    txid = lwip_htons(hdr.id);
 80147f2:	2500      	movs	r5, #0
 80147f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80147f8:	f7ff fdc0 	bl	801437c <lwip_htons>
 80147fc:	4643      	mov	r3, r8
 80147fe:	b2ef      	uxtb	r7, r5
      if ((entry->state == DNS_STATE_ASKING) &&
 8014800:	7a9a      	ldrb	r2, [r3, #10]
 8014802:	2a02      	cmp	r2, #2
 8014804:	d008      	beq.n	8014818 <dns_recv+0x58>
 8014806:	3501      	adds	r5, #1
 8014808:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801480c:	2d04      	cmp	r5, #4
 801480e:	d0e8      	beq.n	80147e2 <dns_recv+0x22>
      if ((entry->state == DNS_STATE_ASKING) &&
 8014810:	7a9a      	ldrb	r2, [r3, #10]
 8014812:	b2ef      	uxtb	r7, r5
 8014814:	2a02      	cmp	r2, #2
 8014816:	d1f6      	bne.n	8014806 <dns_recv+0x46>
 8014818:	891a      	ldrh	r2, [r3, #8]
 801481a:	4282      	cmp	r2, r0
 801481c:	d1f3      	bne.n	8014806 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801481e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8014822:	f7ff fdab 	bl	801437c <lwip_htons>
 8014826:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8014828:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801482c:	f7ff fda6 	bl	801437c <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8014830:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8014834:	4683      	mov	fp, r0
        if (nquestions != 1) {
 8014836:	09db      	lsrs	r3, r3, #7
 8014838:	d0d3      	beq.n	80147e2 <dns_recv+0x22>
 801483a:	f1ba 0f01 	cmp.w	sl, #1
 801483e:	d1d0      	bne.n	80147e2 <dns_recv+0x22>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8014840:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8014844:	49a8      	ldr	r1, [pc, #672]	; (8014ae8 <dns_recv+0x328>)
 8014846:	f8d9 2000 	ldr.w	r2, [r9]
 801484a:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801484e:	7adb      	ldrb	r3, [r3, #11]
 8014850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014854:	429a      	cmp	r2, r3
 8014856:	d1c4      	bne.n	80147e2 <dns_recv+0x22>
 8014858:	f44f 7388 	mov.w	r3, #272	; 0x110
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 801485c:	9502      	str	r5, [sp, #8]
 801485e:	fb03 f305 	mul.w	r3, r3, r5
 8014862:	4625      	mov	r5, r4
 8014864:	9301      	str	r3, [sp, #4]
 8014866:	3310      	adds	r3, #16
 8014868:	4443      	add	r3, r8
 801486a:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 801486c:	4631      	mov	r1, r6
 801486e:	4628      	mov	r0, r5
 8014870:	f001 ff92 	bl	8016798 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8014874:	2800      	cmp	r0, #0
 8014876:	db3c      	blt.n	80148f2 <dns_recv+0x132>
 8014878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801487c:	429e      	cmp	r6, r3
 801487e:	d038      	beq.n	80148f2 <dns_recv+0x132>
    if ((n & 0xc0) == 0xc0) {
 8014880:	f000 02c0 	and.w	r2, r0, #192	; 0xc0
    response_offset++;
 8014884:	1c73      	adds	r3, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8014886:	2ac0      	cmp	r2, #192	; 0xc0
    response_offset++;
 8014888:	b29e      	uxth	r6, r3
    if ((n & 0xc0) == 0xc0) {
 801488a:	d032      	beq.n	80148f2 <dns_recv+0x132>
      while (n > 0) {
 801488c:	b398      	cbz	r0, 80148f6 <dns_recv+0x136>
 801488e:	9c00      	ldr	r4, [sp, #0]
 8014890:	eb04 0a00 	add.w	sl, r4, r0
 8014894:	e026      	b.n	80148e4 <dns_recv+0x124>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8014896:	f814 2b01 	ldrb.w	r2, [r4], #1
 801489a:	9200      	str	r2, [sp, #0]
 801489c:	f00a fe9a 	bl	801f5d4 <__locale_ctype_ptr>
 80148a0:	9a00      	ldr	r2, [sp, #0]
        ++query;
 80148a2:	9400      	str	r4, [sp, #0]
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80148a4:	4410      	add	r0, r2
 80148a6:	7843      	ldrb	r3, [r0, #1]
 80148a8:	f003 0303 	and.w	r3, r3, #3
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	bf08      	it	eq
 80148b0:	3220      	addeq	r2, #32
 80148b2:	9203      	str	r2, [sp, #12]
 80148b4:	f00a fe8e 	bl	801f5d4 <__locale_ctype_ptr>
 80148b8:	fa5f f389 	uxtb.w	r3, r9
 80148bc:	9a03      	ldr	r2, [sp, #12]
        response_offset++;
 80148be:	f106 0c01 	add.w	ip, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80148c2:	4418      	add	r0, r3
 80148c4:	7841      	ldrb	r1, [r0, #1]
 80148c6:	f001 0103 	and.w	r1, r1, #3
 80148ca:	2901      	cmp	r1, #1
 80148cc:	bf08      	it	eq
 80148ce:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d10e      	bne.n	80148f2 <dns_recv+0x132>
 80148d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148d8:	429e      	cmp	r6, r3
        response_offset++;
 80148da:	fa1f f68c 	uxth.w	r6, ip
        if (response_offset == 0xFFFF) {
 80148de:	d008      	beq.n	80148f2 <dns_recv+0x132>
      while (n > 0) {
 80148e0:	45a2      	cmp	sl, r4
 80148e2:	d008      	beq.n	80148f6 <dns_recv+0x136>
        int c = pbuf_try_get_at(p, response_offset);
 80148e4:	4631      	mov	r1, r6
 80148e6:	4628      	mov	r0, r5
 80148e8:	f001 ff56 	bl	8016798 <pbuf_try_get_at>
        if (c < 0) {
 80148ec:	f1b0 0900 	subs.w	r9, r0, #0
 80148f0:	dad1      	bge.n	8014896 <dns_recv+0xd6>
 80148f2:	462c      	mov	r4, r5
 80148f4:	e775      	b.n	80147e2 <dns_recv+0x22>
      ++query;
 80148f6:	9b00      	ldr	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 80148f8:	4631      	mov	r1, r6
 80148fa:	4628      	mov	r0, r5
      ++query;
 80148fc:	3301      	adds	r3, #1
 80148fe:	9300      	str	r3, [sp, #0]
    n = pbuf_try_get_at(p, response_offset);
 8014900:	f001 ff4a 	bl	8016798 <pbuf_try_get_at>
    if (n < 0) {
 8014904:	2800      	cmp	r0, #0
 8014906:	dbf4      	blt.n	80148f2 <dns_recv+0x132>
  } while (n != 0);
 8014908:	d1b0      	bne.n	801486c <dns_recv+0xac>
  if (response_offset == 0xFFFF) {
 801490a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801490e:	462c      	mov	r4, r5
 8014910:	9d02      	ldr	r5, [sp, #8]
 8014912:	454e      	cmp	r6, r9
 8014914:	f43f af65 	beq.w	80147e2 <dns_recv+0x22>
  return (u16_t)(response_offset + 1);
 8014918:	f106 0a01 	add.w	sl, r6, #1
 801491c:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 8014920:	45ca      	cmp	sl, r9
 8014922:	f43f af5e 	beq.w	80147e2 <dns_recv+0x22>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8014926:	4653      	mov	r3, sl
 8014928:	2204      	movs	r2, #4
 801492a:	a904      	add	r1, sp, #16
 801492c:	4620      	mov	r0, r4
 801492e:	f001 fe25 	bl	801657c <pbuf_copy_partial>
 8014932:	2804      	cmp	r0, #4
 8014934:	f47f af55 	bne.w	80147e2 <dns_recv+0x22>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8014938:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801493c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014940:	f47f af4f 	bne.w	80147e2 <dns_recv+0x22>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8014944:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8014948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801494c:	f47f af49 	bne.w	80147e2 <dns_recv+0x22>
 8014950:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8014954:	459a      	cmp	sl, r3
 8014956:	f63f af44 	bhi.w	80147e2 <dns_recv+0x22>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 801495a:	f89d 301b 	ldrb.w	r3, [sp, #27]
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 801495e:	3605      	adds	r6, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8014960:	071b      	lsls	r3, r3, #28
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8014962:	b2b6      	uxth	r6, r6
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8014964:	d04d      	beq.n	8014a02 <dns_recv+0x242>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8014966:	f44f 7388 	mov.w	r3, #272	; 0x110
 801496a:	fb03 8305 	mla	r3, r3, r5, r8
 801496e:	7adb      	ldrb	r3, [r3, #11]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d16e      	bne.n	8014a52 <dns_recv+0x292>
 8014974:	4b5c      	ldr	r3, [pc, #368]	; (8014ae8 <dns_recv+0x328>)
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d06a      	beq.n	8014a52 <dns_recv+0x292>
            entry->tmr     = 1;
 801497c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014980:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8014984:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8014986:	fb03 8505 	mla	r5, r3, r5, r8
 801498a:	81aa      	strh	r2, [r5, #12]
            dns_check_entry(i);
 801498c:	f7ff fe90 	bl	80146b0 <dns_check_entry>
            goto ignore_packet;
 8014990:	e727      	b.n	80147e2 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset++);
 8014992:	4656      	mov	r6, sl
  if (offset == 0xFFFF) {
 8014994:	454e      	cmp	r6, r9
 8014996:	f43f af24 	beq.w	80147e2 <dns_recv+0x22>
  return (u16_t)(offset + 1);
 801499a:	f106 0a01 	add.w	sl, r6, #1
 801499e:	fa1f fa8a 	uxth.w	sl, sl
            if (res_idx == 0xFFFF) {
 80149a2:	45ca      	cmp	sl, r9
 80149a4:	f43f af1d 	beq.w	80147e2 <dns_recv+0x22>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80149a8:	4653      	mov	r3, sl
 80149aa:	220a      	movs	r2, #10
 80149ac:	a909      	add	r1, sp, #36	; 0x24
 80149ae:	4620      	mov	r0, r4
 80149b0:	f001 fde4 	bl	801657c <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 80149b4:	280a      	cmp	r0, #10
 80149b6:	f47f af14 	bne.w	80147e2 <dns_recv+0x22>
 80149ba:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80149be:	459a      	cmp	sl, r3
 80149c0:	f63f af0f 	bhi.w	80147e2 <dns_recv+0x22>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80149c4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 80149c8:	360b      	adds	r6, #11
 80149ca:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80149ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 80149d2:	b2b6      	uxth	r6, r6
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80149d4:	d104      	bne.n	80149e0 <dns_recv+0x220>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80149d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80149da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149de:	d046      	beq.n	8014a6e <dns_recv+0x2ae>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80149e0:	f7ff fccc 	bl	801437c <lwip_htons>
 80149e4:	4430      	add	r0, r6
 80149e6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80149ea:	f6bf aefa 	bge.w	80147e2 <dns_recv+0x22>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80149ee:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 80149f2:	f10b 3bff 	add.w	fp, fp, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80149f6:	f7ff fcc1 	bl	801437c <lwip_htons>
 80149fa:	4406      	add	r6, r0
            --nanswers;
 80149fc:	fa1f fb8b 	uxth.w	fp, fp
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8014a00:	b2b6      	uxth	r6, r6
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8014a02:	f1bb 0f00 	cmp.w	fp, #0
 8014a06:	d024      	beq.n	8014a52 <dns_recv+0x292>
 8014a08:	8923      	ldrh	r3, [r4, #8]
 8014a0a:	42b3      	cmp	r3, r6
 8014a0c:	d812      	bhi.n	8014a34 <dns_recv+0x274>
 8014a0e:	e020      	b.n	8014a52 <dns_recv+0x292>
      offset = (u16_t)(offset + n);
 8014a10:	b29e      	uxth	r6, r3
    if ((n < 0) || (offset == 0)) {
 8014a12:	f1ba 0f00 	cmp.w	sl, #0
 8014a16:	f43f aee4 	beq.w	80147e2 <dns_recv+0x22>
    if ((n & 0xc0) == 0xc0) {
 8014a1a:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8014a1c:	4631      	mov	r1, r6
    if ((n & 0xc0) == 0xc0) {
 8014a1e:	d0b8      	beq.n	8014992 <dns_recv+0x1d2>
      if (offset + n >= p->tot_len) {
 8014a20:	8922      	ldrh	r2, [r4, #8]
 8014a22:	4293      	cmp	r3, r2
 8014a24:	f6bf aedd 	bge.w	80147e2 <dns_recv+0x22>
    n = pbuf_try_get_at(p, offset);
 8014a28:	f001 feb6 	bl	8016798 <pbuf_try_get_at>
    if (n < 0) {
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	f6ff aed8 	blt.w	80147e2 <dns_recv+0x22>
  } while (n != 0);
 8014a32:	d0af      	beq.n	8014994 <dns_recv+0x1d4>
    n = pbuf_try_get_at(p, offset++);
 8014a34:	f106 0a01 	add.w	sl, r6, #1
 8014a38:	4631      	mov	r1, r6
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f001 feac 	bl	8016798 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 8014a40:	1e03      	subs	r3, r0, #0
    n = pbuf_try_get_at(p, offset++);
 8014a42:	fa1f fa8a 	uxth.w	sl, sl
    n = pbuf_try_get_at(p, offset);
 8014a46:	4620      	mov	r0, r4
    if ((n & 0xc0) == 0xc0) {
 8014a48:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8014a4c:	4453      	add	r3, sl
    if ((n < 0) || (offset == 0)) {
 8014a4e:	dadf      	bge.n	8014a10 <dns_recv+0x250>
 8014a50:	e6c7      	b.n	80147e2 <dns_recv+0x22>
        pbuf_free(p);
 8014a52:	4620      	mov	r0, r4
 8014a54:	f001 fb02 	bl	801605c <pbuf_free>
        dns_call_found(i, NULL);
 8014a58:	4638      	mov	r0, r7
 8014a5a:	2100      	movs	r1, #0
 8014a5c:	f7ff fd02 	bl	8014464 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8014a60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014a64:	2200      	movs	r2, #0
 8014a66:	fb03 8505 	mla	r5, r3, r5, r8
 8014a6a:	72aa      	strb	r2, [r5, #10]
        return;
 8014a6c:	e6bc      	b.n	80147e8 <dns_recv+0x28>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8014a6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014a72:	d1b5      	bne.n	80149e0 <dns_recv+0x220>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8014a74:	4633      	mov	r3, r6
 8014a76:	2204      	movs	r2, #4
 8014a78:	a905      	add	r1, sp, #20
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f001 fd7e 	bl	801657c <pbuf_copy_partial>
 8014a80:	2804      	cmp	r0, #4
 8014a82:	f47f aeae 	bne.w	80147e2 <dns_recv+0x22>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8014a86:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 8014a8a:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8014a8c:	9a05      	ldr	r2, [sp, #20]
 8014a8e:	fb03 f405 	mul.w	r4, r3, r5
 8014a92:	eb08 0604 	add.w	r6, r8, r4
 8014a96:	6072      	str	r2, [r6, #4]
                  pbuf_free(p);
 8014a98:	f001 fae0 	bl	801605c <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8014a9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014a9e:	f7ff fc71 	bl	8014384 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8014aa2:	4b12      	ldr	r3, [pc, #72]	; (8014aec <dns_recv+0x32c>)
  dns_call_found(idx, &entry->ipaddr);
 8014aa4:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 8014aa6:	2203      	movs	r2, #3
  if (entry->ttl > DNS_MAX_TTL) {
 8014aa8:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 8014aaa:	f848 0004 	str.w	r0, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 8014aae:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8014ab2:	72b2      	strb	r2, [r6, #10]
    entry->ttl = DNS_MAX_TTL;
 8014ab4:	bf88      	it	hi
 8014ab6:	f848 3004 	strhi.w	r3, [r8, r4]
  dns_call_found(idx, &entry->ipaddr);
 8014aba:	4638      	mov	r0, r7
 8014abc:	4441      	add	r1, r8
 8014abe:	f7ff fcd1 	bl	8014464 <dns_call_found>
  if (entry->ttl == 0) {
 8014ac2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014ac6:	fb03 f505 	mul.w	r5, r3, r5
 8014aca:	f858 3005 	ldr.w	r3, [r8, r5]
 8014ace:	44a8      	add	r8, r5
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	f47f ae89 	bne.w	80147e8 <dns_recv+0x28>
    if (entry->state == DNS_STATE_DONE) {
 8014ad6:	f898 200a 	ldrb.w	r2, [r8, #10]
 8014ada:	2a03      	cmp	r2, #3
 8014adc:	f47f ae84 	bne.w	80147e8 <dns_recv+0x28>
      entry->state = DNS_STATE_UNUSED;
 8014ae0:	f888 300a 	strb.w	r3, [r8, #10]
 8014ae4:	e680      	b.n	80147e8 <dns_recv+0x28>
 8014ae6:	bf00      	nop
 8014ae8:	20021e40 	.word	0x20021e40
 8014aec:	00093a80 	.word	0x00093a80
 8014af0:	20021e48 	.word	0x20021e48

08014af4 <dns_init>:
}
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop

08014af8 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8014af8:	2801      	cmp	r0, #1
 8014afa:	d900      	bls.n	8014afe <dns_setserver+0x6>
}
 8014afc:	4770      	bx	lr
    if (dnsserver != NULL) {
 8014afe:	b121      	cbz	r1, 8014b0a <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8014b00:	680a      	ldr	r2, [r1, #0]
 8014b02:	4b05      	ldr	r3, [pc, #20]	; (8014b18 <dns_setserver+0x20>)
 8014b04:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8014b08:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8014b0a:	4a04      	ldr	r2, [pc, #16]	; (8014b1c <dns_setserver+0x24>)
 8014b0c:	4b02      	ldr	r3, [pc, #8]	; (8014b18 <dns_setserver+0x20>)
 8014b0e:	6812      	ldr	r2, [r2, #0]
 8014b10:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8014b14:	4770      	bx	lr
 8014b16:	bf00      	nop
 8014b18:	20021e40 	.word	0x20021e40
 8014b1c:	0803f460 	.word	0x0803f460

08014b20 <dns_tmr>:
{
 8014b20:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8014b22:	2000      	movs	r0, #0
 8014b24:	f7ff fdc4 	bl	80146b0 <dns_check_entry>
 8014b28:	2001      	movs	r0, #1
 8014b2a:	f7ff fdc1 	bl	80146b0 <dns_check_entry>
 8014b2e:	2002      	movs	r0, #2
 8014b30:	f7ff fdbe 	bl	80146b0 <dns_check_entry>
 8014b34:	2003      	movs	r0, #3
}
 8014b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 8014b3a:	f7ff bdb9 	b.w	80146b0 <dns_check_entry>
 8014b3e:	bf00      	nop

08014b40 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8014b40:	2900      	cmp	r1, #0
 8014b42:	f000 8139 	beq.w	8014db8 <dns_gethostbyname_addrtype+0x278>
{
 8014b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 8014b4a:	fab0 f580 	clz	r5, r0
{
 8014b4e:	b083      	sub	sp, #12
 8014b50:	4604      	mov	r4, r0
  if ((addr == NULL) ||
 8014b52:	096d      	lsrs	r5, r5, #5
 8014b54:	2d00      	cmp	r5, #0
 8014b56:	f040 808c 	bne.w	8014c72 <dns_gethostbyname_addrtype+0x132>
      (!hostname) || (!hostname[0])) {
 8014b5a:	7806      	ldrb	r6, [r0, #0]
 8014b5c:	2e00      	cmp	r6, #0
 8014b5e:	f000 8088 	beq.w	8014c72 <dns_gethostbyname_addrtype+0x132>
 8014b62:	468b      	mov	fp, r1
 8014b64:	461f      	mov	r7, r3
 8014b66:	4616      	mov	r6, r2
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8014b68:	f7eb fb74 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8014b6c:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8014b6e:	4680      	mov	r8, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8014b70:	d87f      	bhi.n	8014c72 <dns_gethostbyname_addrtype+0x132>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8014b72:	4659      	mov	r1, fp
 8014b74:	4620      	mov	r0, r4
 8014b76:	f009 facf 	bl	801e118 <ip4addr_aton>
 8014b7a:	b118      	cbz	r0, 8014b84 <dns_gethostbyname_addrtype+0x44>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8014b7c:	4628      	mov	r0, r5
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8014b7e:	b003      	add	sp, #12
 8014b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b84:	f8df a244 	ldr.w	sl, [pc, #580]	; 8014dcc <dns_gethostbyname_addrtype+0x28c>
  if (ipaddr_aton(hostname, addr)) {
 8014b88:	4605      	mov	r5, r0
 8014b8a:	46d1      	mov	r9, sl
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8014b8c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8014b90:	2b03      	cmp	r3, #3
 8014b92:	d03b      	beq.n	8014c0c <dns_gethostbyname_addrtype+0xcc>
 8014b94:	3501      	adds	r5, #1
 8014b96:	f509 7988 	add.w	r9, r9, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8014b9a:	2d04      	cmp	r5, #4
 8014b9c:	d1f6      	bne.n	8014b8c <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8014b9e:	4b88      	ldr	r3, [pc, #544]	; (8014dc0 <dns_gethostbyname_addrtype+0x280>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 80f2 	beq.w	8014d8c <dns_gethostbyname_addrtype+0x24c>
 8014ba8:	f8df b220 	ldr.w	fp, [pc, #544]	; 8014dcc <dns_gethostbyname_addrtype+0x28c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014bac:	2500      	movs	r5, #0
 8014bae:	4b85      	ldr	r3, [pc, #532]	; (8014dc4 <dns_gethostbyname_addrtype+0x284>)
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014bb0:	f89b 200a 	ldrb.w	r2, [fp, #10]
 8014bb4:	2a02      	cmp	r2, #2
 8014bb6:	d045      	beq.n	8014c44 <dns_gethostbyname_addrtype+0x104>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8014bb8:	3501      	adds	r5, #1
 8014bba:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8014bbe:	b2ed      	uxtb	r5, r5
 8014bc0:	2d04      	cmp	r5, #4
 8014bc2:	d1f5      	bne.n	8014bb0 <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	4a80      	ldr	r2, [pc, #512]	; (8014dc8 <dns_gethostbyname_addrtype+0x288>)
  lseqi = DNS_TABLE_SIZE;
 8014bc8:	4629      	mov	r1, r5
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8014bca:	7810      	ldrb	r0, [r2, #0]
  lseq = 0;
 8014bcc:	469c      	mov	ip, r3
    if (entry->state == DNS_STATE_UNUSED) {
 8014bce:	f89a 200a 	ldrb.w	r2, [sl, #10]
 8014bd2:	fa5f fb83 	uxtb.w	fp, r3
 8014bd6:	2a00      	cmp	r2, #0
 8014bd8:	f000 80a9 	beq.w	8014d2e <dns_gethostbyname_addrtype+0x1ee>
    if (entry->state == DNS_STATE_DONE) {
 8014bdc:	2a03      	cmp	r2, #3
 8014bde:	f103 0301 	add.w	r3, r3, #1
 8014be2:	d026      	beq.n	8014c32 <dns_gethostbyname_addrtype+0xf2>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8014be4:	2b04      	cmp	r3, #4
 8014be6:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 8014bea:	d1f0      	bne.n	8014bce <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8014bec:	2904      	cmp	r1, #4
 8014bee:	d008      	beq.n	8014c02 <dns_gethostbyname_addrtype+0xc2>
 8014bf0:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 8014bf4:	4a75      	ldr	r2, [pc, #468]	; (8014dcc <dns_gethostbyname_addrtype+0x28c>)
 8014bf6:	eb02 1903 	add.w	r9, r2, r3, lsl #4
 8014bfa:	f899 300a 	ldrb.w	r3, [r9, #10]
 8014bfe:	2b03      	cmp	r3, #3
 8014c00:	d03a      	beq.n	8014c78 <dns_gethostbyname_addrtype+0x138>
      return ERR_MEM;
 8014c02:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014c06:	b003      	add	sp, #12
 8014c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8014c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c10:	f109 0110 	add.w	r1, r9, #16
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7ff fc09 	bl	801442c <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	d1ba      	bne.n	8014b94 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8014c1e:	4b6b      	ldr	r3, [pc, #428]	; (8014dcc <dns_gethostbyname_addrtype+0x28c>)
 8014c20:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8014c24:	eb03 1905 	add.w	r9, r3, r5, lsl #4
 8014c28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c2c:	f8cb 3000 	str.w	r3, [fp]
 8014c30:	e7a5      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8014c32:	f89a 200e 	ldrb.w	r2, [sl, #14]
 8014c36:	1a82      	subs	r2, r0, r2
 8014c38:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 8014c3a:	4562      	cmp	r2, ip
 8014c3c:	d9d2      	bls.n	8014be4 <dns_gethostbyname_addrtype+0xa4>
 8014c3e:	4659      	mov	r1, fp
 8014c40:	4694      	mov	ip, r2
 8014c42:	e7cf      	b.n	8014be4 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8014c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c48:	f10b 0110 	add.w	r1, fp, #16
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	f7ff fbec 	bl	801442c <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8014c54:	9b00      	ldr	r3, [sp, #0]
 8014c56:	2800      	cmp	r0, #0
 8014c58:	d1ae      	bne.n	8014bb8 <dns_gethostbyname_addrtype+0x78>
        if (dns_requests[r].found == 0) {
 8014c5a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8014c5e:	3001      	adds	r0, #1
 8014c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c64:	0092      	lsls	r2, r2, #2
 8014c66:	2900      	cmp	r1, #0
 8014c68:	f000 8095 	beq.w	8014d96 <dns_gethostbyname_addrtype+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8014c6c:	2804      	cmp	r0, #4
 8014c6e:	d1f4      	bne.n	8014c5a <dns_gethostbyname_addrtype+0x11a>
 8014c70:	e7a2      	b.n	8014bb8 <dns_gethostbyname_addrtype+0x78>
    return ERR_ARG;
 8014c72:	f06f 000f 	mvn.w	r0, #15
 8014c76:	e782      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
      entry = &dns_table[i];
 8014c78:	468b      	mov	fp, r1
 8014c7a:	f8cd 9000 	str.w	r9, [sp]
 8014c7e:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 8014c82:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8014c86:	4b4f      	ldr	r3, [pc, #316]	; (8014dc4 <dns_gethostbyname_addrtype+0x284>)
 8014c88:	eb0a 0209 	add.w	r2, sl, r9
 8014c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c90:	0092      	lsls	r2, r2, #2
 8014c92:	b12b      	cbz	r3, 8014ca0 <dns_gethostbyname_addrtype+0x160>
 8014c94:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8014c98:	f1b9 0f04 	cmp.w	r9, #4
 8014c9c:	d1f1      	bne.n	8014c82 <dns_gethostbyname_addrtype+0x142>
 8014c9e:	e7b0      	b.n	8014c02 <dns_gethostbyname_addrtype+0xc2>
 8014ca0:	4611      	mov	r1, r2
  req->dns_table_idx = i;
 8014ca2:	4a48      	ldr	r2, [pc, #288]	; (8014dc4 <dns_gethostbyname_addrtype+0x284>)
  entry->state = DNS_STATE_NEW;
 8014ca4:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 8014ca8:	eb02 0c01 	add.w	ip, r2, r1
 8014cac:	9101      	str	r1, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 8014cae:	4621      	mov	r1, r4
  entry->seqno = dns_seqno;
 8014cb0:	9c00      	ldr	r4, [sp, #0]
  req->found = found;
 8014cb2:	4a44      	ldr	r2, [pc, #272]	; (8014dc4 <dns_gethostbyname_addrtype+0x284>)
  entry->seqno = dns_seqno;
 8014cb4:	73a0      	strb	r0, [r4, #14]
  req->found = found;
 8014cb6:	9801      	ldr	r0, [sp, #4]
  req->arg   = callback_arg;
 8014cb8:	f8cc 7004 	str.w	r7, [ip, #4]
  req->found = found;
 8014cbc:	5016      	str	r6, [r2, r0]
  MEMCPY(entry->name, name, namelen);
 8014cbe:	4626      	mov	r6, r4
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	4642      	mov	r2, r8
  entry->state = DNS_STATE_NEW;
 8014cc4:	4637      	mov	r7, r6
 8014cc6:	f886 e00a 	strb.w	lr, [r6, #10]
 8014cca:	4e41      	ldr	r6, [pc, #260]	; (8014dd0 <dns_gethostbyname_addrtype+0x290>)
  MEMCPY(entry->name, name, namelen);
 8014ccc:	3010      	adds	r0, #16
  req->dns_table_idx = i;
 8014cce:	f88c b008 	strb.w	fp, [ip, #8]
  entry->name[namelen] = 0;
 8014cd2:	461c      	mov	r4, r3
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	44b8      	add	r8, r7
  MEMCPY(entry->name, name, namelen);
 8014cd8:	f00a fcbb 	bl	801f652 <memcpy>
  entry->name[namelen] = 0;
 8014cdc:	9b01      	ldr	r3, [sp, #4]
 8014cde:	4632      	mov	r2, r6
 8014ce0:	f888 3010 	strb.w	r3, [r8, #16]
    if (dns_pcbs[i] == NULL) {
 8014ce4:	f852 3b04 	ldr.w	r3, [r2], #4
 8014ce8:	b2e7      	uxtb	r7, r4
 8014cea:	b33b      	cbz	r3, 8014d3c <dns_gethostbyname_addrtype+0x1fc>
 8014cec:	3401      	adds	r4, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8014cee:	2c04      	cmp	r4, #4
 8014cf0:	d1f8      	bne.n	8014ce4 <dns_gethostbyname_addrtype+0x1a4>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8014cf2:	4938      	ldr	r1, [pc, #224]	; (8014dd4 <dns_gethostbyname_addrtype+0x294>)
 8014cf4:	780f      	ldrb	r7, [r1, #0]
 8014cf6:	3701      	adds	r7, #1
 8014cf8:	b2ff      	uxtb	r7, r7
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8014cfa:	2f03      	cmp	r7, #3
 8014cfc:	463b      	mov	r3, r7
 8014cfe:	d901      	bls.n	8014d04 <dns_gethostbyname_addrtype+0x1c4>
 8014d00:	2700      	movs	r7, #0
      idx = 0;
 8014d02:	463b      	mov	r3, r7
    if (dns_pcbs[idx] != NULL) {
 8014d04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8014d08:	1c7a      	adds	r2, r7, #1
 8014d0a:	3d01      	subs	r5, #1
    if (dns_pcbs[idx] != NULL) {
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d140      	bne.n	8014d92 <dns_gethostbyname_addrtype+0x252>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8014d10:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8014d14:	b2d7      	uxtb	r7, r2
 8014d16:	d1f0      	bne.n	8014cfa <dns_gethostbyname_addrtype+0x1ba>
    entry->state = DNS_STATE_UNUSED;
 8014d18:	9a00      	ldr	r2, [sp, #0]
    req->found = NULL;
 8014d1a:	44d1      	add	r9, sl
  entry->pcb_idx = dns_alloc_pcb();
 8014d1c:	2304      	movs	r3, #4
    req->found = NULL;
 8014d1e:	4929      	ldr	r1, [pc, #164]	; (8014dc4 <dns_gethostbyname_addrtype+0x284>)
    entry->state = DNS_STATE_UNUSED;
 8014d20:	7295      	strb	r5, [r2, #10]
    return ERR_MEM;
 8014d22:	f04f 30ff 	mov.w	r0, #4294967295
    req->found = NULL;
 8014d26:	f841 5029 	str.w	r5, [r1, r9, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8014d2a:	73d3      	strb	r3, [r2, #15]
 8014d2c:	e727      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
    entry = &dns_table[i];
 8014d2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014d32:	4a26      	ldr	r2, [pc, #152]	; (8014dcc <dns_gethostbyname_addrtype+0x28c>)
 8014d34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014d38:	9300      	str	r3, [sp, #0]
 8014d3a:	e7a0      	b.n	8014c7e <dns_gethostbyname_addrtype+0x13e>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8014d3c:	202e      	movs	r0, #46	; 0x2e
 8014d3e:	f006 fe2b 	bl	801b998 <udp_new_ip_type>
  if (pcb == NULL) {
 8014d42:	4680      	mov	r8, r0
 8014d44:	b3a8      	cbz	r0, 8014db2 <dns_gethostbyname_addrtype+0x272>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8014d46:	f00b fcb7 	bl	80206b8 <rand>
 8014d4a:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8014d4c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8014d50:	d3f9      	bcc.n	8014d46 <dns_gethostbyname_addrtype+0x206>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8014d52:	4921      	ldr	r1, [pc, #132]	; (8014dd8 <dns_gethostbyname_addrtype+0x298>)
 8014d54:	4640      	mov	r0, r8
 8014d56:	f006 fba9 	bl	801b4ac <udp_bind>
  } while (err == ERR_USE);
 8014d5a:	f110 0f08 	cmn.w	r0, #8
 8014d5e:	d0f2      	beq.n	8014d46 <dns_gethostbyname_addrtype+0x206>
  if (err != ERR_OK) {
 8014d60:	bb00      	cbnz	r0, 8014da4 <dns_gethostbyname_addrtype+0x264>
  udp_recv(pcb, dns_recv, NULL);
 8014d62:	4602      	mov	r2, r0
 8014d64:	491d      	ldr	r1, [pc, #116]	; (8014ddc <dns_gethostbyname_addrtype+0x29c>)
 8014d66:	4640      	mov	r0, r8
 8014d68:	f006 fdc4 	bl	801b8f4 <udp_recv>
      dns_last_pcb_idx = i;
 8014d6c:	4b19      	ldr	r3, [pc, #100]	; (8014dd4 <dns_gethostbyname_addrtype+0x294>)
    dns_pcbs[i] = dns_alloc_random_port();
 8014d6e:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
      dns_last_pcb_idx = i;
 8014d72:	701f      	strb	r7, [r3, #0]
  dns_seqno++;
 8014d74:	4a14      	ldr	r2, [pc, #80]	; (8014dc8 <dns_gethostbyname_addrtype+0x288>)
  dns_check_entry(i);
 8014d76:	4658      	mov	r0, fp
  entry->pcb_idx = dns_alloc_pcb();
 8014d78:	9900      	ldr	r1, [sp, #0]
  dns_seqno++;
 8014d7a:	7813      	ldrb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 8014d7c:	73cf      	strb	r7, [r1, #15]
  dns_seqno++;
 8014d7e:	3301      	adds	r3, #1
 8014d80:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8014d82:	f7ff fc95 	bl	80146b0 <dns_check_entry>
  return ERR_INPROGRESS;
 8014d86:	f06f 0004 	mvn.w	r0, #4
 8014d8a:	e6f8      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
      return ERR_VAL;
 8014d8c:	f06f 0005 	mvn.w	r0, #5
 8014d90:	e6f5      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
      dns_last_pcb_idx = idx;
 8014d92:	700f      	strb	r7, [r1, #0]
 8014d94:	e7ee      	b.n	8014d74 <dns_gethostbyname_addrtype+0x234>
          dns_requests[r].found = found;
 8014d96:	1899      	adds	r1, r3, r2
 8014d98:	509e      	str	r6, [r3, r2]
          return ERR_INPROGRESS;
 8014d9a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8014d9e:	604f      	str	r7, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8014da0:	720d      	strb	r5, [r1, #8]
 8014da2:	e6ec      	b.n	8014b7e <dns_gethostbyname_addrtype+0x3e>
    udp_remove(pcb);
 8014da4:	4640      	mov	r0, r8
 8014da6:	f006 fdb7 	bl	801b918 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8014daa:	2300      	movs	r3, #0
 8014dac:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8014db0:	e79f      	b.n	8014cf2 <dns_gethostbyname_addrtype+0x1b2>
 8014db2:	f846 8024 	str.w	r8, [r6, r4, lsl #2]
 8014db6:	e79c      	b.n	8014cf2 <dns_gethostbyname_addrtype+0x1b2>
    return ERR_ARG;
 8014db8:	f06f 000f 	mvn.w	r0, #15
}
 8014dbc:	4770      	bx	lr
 8014dbe:	bf00      	nop
 8014dc0:	20021e40 	.word	0x20021e40
 8014dc4:	20021e0c 	.word	0x20021e0c
 8014dc8:	20021e3c 	.word	0x20021e3c
 8014dcc:	20021e48 	.word	0x20021e48
 8014dd0:	20021dfc 	.word	0x20021dfc
 8014dd4:	20021df8 	.word	0x20021df8
 8014dd8:	0803f460 	.word	0x0803f460
 8014ddc:	080147c1 	.word	0x080147c1

08014de0 <dns_gethostbyname>:
{
 8014de0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8014de2:	2400      	movs	r4, #0
{
 8014de4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8014de6:	9400      	str	r4, [sp, #0]
 8014de8:	f7ff feaa 	bl	8014b40 <dns_gethostbyname_addrtype>
}
 8014dec:	b002      	add	sp, #8
 8014dee:	bd10      	pop	{r4, pc}

08014df0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8014df0:	2300      	movs	r3, #0
{
 8014df2:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8014df4:	4299      	cmp	r1, r3
{
 8014df6:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8014df8:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8014dfc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8014e00:	dd05      	ble.n	8014e0e <lwip_standard_chksum+0x1e>
 8014e02:	b126      	cbz	r6, 8014e0e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8014e04:	7803      	ldrb	r3, [r0, #0]
    len--;
 8014e06:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8014e08:	3001      	adds	r0, #1
 8014e0a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8014e0e:	2901      	cmp	r1, #1
 8014e10:	dd26      	ble.n	8014e60 <lwip_standard_chksum+0x70>
 8014e12:	3902      	subs	r1, #2
  u32_t sum = 0;
 8014e14:	2300      	movs	r3, #0
 8014e16:	084d      	lsrs	r5, r1, #1
 8014e18:	1c6c      	adds	r4, r5, #1
 8014e1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8014e1e:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8014e22:	4284      	cmp	r4, r0
    sum += *ps++;
 8014e24:	4413      	add	r3, r2
  while (len > 1) {
 8014e26:	d1fa      	bne.n	8014e1e <lwip_standard_chksum+0x2e>
 8014e28:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8014e2c:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8014e30:	2901      	cmp	r1, #1
 8014e32:	d102      	bne.n	8014e3a <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014e34:	7802      	ldrb	r2, [r0, #0]
 8014e36:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8014e3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014e3e:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8014e40:	b298      	uxth	r0, r3
 8014e42:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8014e46:	b298      	uxth	r0, r3
 8014e48:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8014e4c:	b126      	cbz	r6, 8014e58 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 8014e4e:	0203      	lsls	r3, r0, #8
 8014e50:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8014e58:	b280      	uxth	r0, r0
 8014e5a:	b003      	add	sp, #12
 8014e5c:	bc70      	pop	{r4, r5, r6}
 8014e5e:	4770      	bx	lr
  u32_t sum = 0;
 8014e60:	2300      	movs	r3, #0
 8014e62:	e7e5      	b.n	8014e30 <lwip_standard_chksum+0x40>

08014e64 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8014e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e68:	9d06      	ldr	r5, [sp, #24]
 8014e6a:	4617      	mov	r7, r2
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8014e6c:	681c      	ldr	r4, [r3, #0]
{
 8014e6e:	4688      	mov	r8, r1
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 8014e70:	682b      	ldr	r3, [r5, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8014e72:	0c1a      	lsrs	r2, r3, #16
 8014e74:	fa12 f383 	uxtah	r3, r2, r3
 8014e78:	fa13 f384 	uxtah	r3, r3, r4
 8014e7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8014e80:	b29c      	uxth	r4, r3
 8014e82:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8014e86:	b29c      	uxth	r4, r3
 8014e88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8014e8c:	b1f8      	cbz	r0, 8014ece <inet_chksum_pseudo+0x6a>
 8014e8e:	4605      	mov	r5, r0
  int swapped = 0;
 8014e90:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8014e92:	8969      	ldrh	r1, [r5, #10]
 8014e94:	6868      	ldr	r0, [r5, #4]
 8014e96:	f7ff ffab 	bl	8014df0 <lwip_standard_chksum>
 8014e9a:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8014e9c:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8014e9e:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8014ea0:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8014ea4:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8014ea8:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8014eac:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8014eb0:	d004      	beq.n	8014ebc <inet_chksum_pseudo+0x58>
      acc = SWAP_BYTES_IN_WORD(acc);
 8014eb2:	b280      	uxth	r0, r0
 8014eb4:	f086 0601 	eor.w	r6, r6, #1
 8014eb8:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8014ebc:	682d      	ldr	r5, [r5, #0]
 8014ebe:	2d00      	cmp	r5, #0
 8014ec0:	d1e7      	bne.n	8014e92 <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8014ec2:	b126      	cbz	r6, 8014ece <inet_chksum_pseudo+0x6a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014ec4:	0223      	lsls	r3, r4, #8
 8014ec6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8014ece:	4640      	mov	r0, r8
 8014ed0:	f7ff fa54 	bl	801437c <lwip_htons>
 8014ed4:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8014ed6:	4638      	mov	r0, r7
 8014ed8:	f7ff fa50 	bl	801437c <lwip_htons>
 8014edc:	4428      	add	r0, r5
 8014ede:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 8014ee0:	b2a0      	uxth	r0, r4
 8014ee2:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8014ee6:	b2a0      	uxth	r0, r4
 8014ee8:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8014eec:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8014eee:	b280      	uxth	r0, r0
 8014ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ef4 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8014ef4:	f7ff bfb6 	b.w	8014e64 <inet_chksum_pseudo>

08014ef8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8014ef8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8014efa:	f7ff ff79 	bl	8014df0 <lwip_standard_chksum>
 8014efe:	43c0      	mvns	r0, r0
}
 8014f00:	b280      	uxth	r0, r0
 8014f02:	bd08      	pop	{r3, pc}

08014f04 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8014f04:	b320      	cbz	r0, 8014f50 <inet_chksum_pbuf+0x4c>
{
 8014f06:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8014f08:	2600      	movs	r6, #0
 8014f0a:	4605      	mov	r5, r0
  acc = 0;
 8014f0c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8014f0e:	8969      	ldrh	r1, [r5, #10]
 8014f10:	6868      	ldr	r0, [r5, #4]
 8014f12:	f7ff ff6d 	bl	8014df0 <lwip_standard_chksum>
 8014f16:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8014f18:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8014f1a:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8014f1c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8014f20:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8014f24:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8014f28:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8014f2c:	d004      	beq.n	8014f38 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8014f2e:	b280      	uxth	r0, r0
 8014f30:	f086 0601 	eor.w	r6, r6, #1
 8014f34:	ea40 0403 	orr.w	r4, r0, r3
  for (q = p; q != NULL; q = q->next) {
 8014f38:	682d      	ldr	r5, [r5, #0]
 8014f3a:	2d00      	cmp	r5, #0
 8014f3c:	d1e7      	bne.n	8014f0e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8014f3e:	b126      	cbz	r6, 8014f4a <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014f40:	0220      	lsls	r0, r4, #8
 8014f42:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8014f46:	b280      	uxth	r0, r0
 8014f48:	4304      	orrs	r4, r0
 8014f4a:	43e4      	mvns	r4, r4
 8014f4c:	b2a0      	uxth	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
}
 8014f4e:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8014f50:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8014f54:	4770      	bx	lr
 8014f56:	bf00      	nop

08014f58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014f58:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8014f5a:	f001 fcd5 	bl	8016908 <stats_init>
#if !NO_SYS
  sys_init();
 8014f5e:	f009 ff37 	bl	801edd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8014f62:	f000 f97b 	bl	801525c <mem_init>
  memp_init();
 8014f66:	f000 fd5f 	bl	8015a28 <memp_init>
  pbuf_init();
  netif_init();
 8014f6a:	f000 fe23 	bl	8015bb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8014f6e:	f006 f96f 	bl	801b250 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014f72:	f001 fe3f 	bl	8016bf4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8014f76:	f7ff fdbd 	bl	8014af4 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8014f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8014f7e:	f006 b8f9 	b.w	801b174 <sys_timeouts_init>
 8014f82:	bf00      	nop

08014f84 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014f84:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  pmem = ptr_to_mem(mem->prev);
 8014f88:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014f8a:	4299      	cmp	r1, r3
{
 8014f8c:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 8014f8e:	8804      	ldrh	r4, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014f90:	d804      	bhi.n	8014f9c <mem_link_valid+0x18>
 8014f92:	429c      	cmp	r4, r3
 8014f94:	bf94      	ite	ls
 8014f96:	2300      	movls	r3, #0
 8014f98:	2301      	movhi	r3, #1
 8014f9a:	b113      	cbz	r3, 8014fa2 <mem_link_valid+0x1e>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 8014f9c:	2000      	movs	r0, #0
  }
  return 1;
}
 8014f9e:	bc30      	pop	{r4, r5}
 8014fa0:	4770      	bx	lr
  return (mem_size_t)((u8_t *)mem - ram);
 8014fa2:	4a0b      	ldr	r2, [pc, #44]	; (8014fd0 <mem_link_valid+0x4c>)
 8014fa4:	6815      	ldr	r5, [r2, #0]
 8014fa6:	1b40      	subs	r0, r0, r5
 8014fa8:	b282      	uxth	r2, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014faa:	4291      	cmp	r1, r2
 8014fac:	d002      	beq.n	8014fb4 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014fae:	5a69      	ldrh	r1, [r5, r1]
 8014fb0:	4291      	cmp	r1, r2
 8014fb2:	d1f3      	bne.n	8014f9c <mem_link_valid+0x18>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014fb4:	4b07      	ldr	r3, [pc, #28]	; (8014fd4 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8014fb6:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	42a3      	cmp	r3, r4
 8014fbc:	d006      	beq.n	8014fcc <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014fbe:	8860      	ldrh	r0, [r4, #2]
 8014fc0:	1a80      	subs	r0, r0, r2
 8014fc2:	fab0 f080 	clz	r0, r0
}
 8014fc6:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014fc8:	0940      	lsrs	r0, r0, #5
}
 8014fca:	4770      	bx	lr
  return 1;
 8014fcc:	2001      	movs	r0, #1
 8014fce:	e7e6      	b.n	8014f9e <mem_link_valid+0x1a>
 8014fd0:	20022294 	.word	0x20022294
 8014fd4:	20022298 	.word	0x20022298

08014fd8 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8014fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8014fdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015190 <mem_sanity+0x1b8>
 8014fe0:	f8d8 6000 	ldr.w	r6, [r8]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8014fe4:	7935      	ldrb	r5, [r6, #4]
 8014fe6:	2d01      	cmp	r5, #1
 8014fe8:	d907      	bls.n	8014ffa <mem_sanity+0x22>
 8014fea:	4b60      	ldr	r3, [pc, #384]	; (801516c <mem_sanity+0x194>)
 8014fec:	f240 223f 	movw	r2, #575	; 0x23f
 8014ff0:	495f      	ldr	r1, [pc, #380]	; (8015170 <mem_sanity+0x198>)
 8014ff2:	4860      	ldr	r0, [pc, #384]	; (8015174 <mem_sanity+0x19c>)
 8014ff4:	f00b fad0 	bl	8020598 <iprintf>
 8014ff8:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8014ffa:	8873      	ldrh	r3, [r6, #2]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f040 80ac 	bne.w	801515a <mem_sanity+0x182>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015002:	8834      	ldrh	r4, [r6, #0]
 8015004:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015008:	429c      	cmp	r4, r3
 801500a:	f200 809d 	bhi.w	8015148 <mem_sanity+0x170>
  return (struct mem *)(void *)&ram[ptr];
 801500e:	f8d8 3000 	ldr.w	r3, [r8]
 8015012:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8015014:	429c      	cmp	r4, r3
 8015016:	d965      	bls.n	80150e4 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8015018:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015194 <mem_sanity+0x1bc>
 801501c:	f8d9 2000 	ldr.w	r2, [r9]
 8015020:	4294      	cmp	r4, r2
 8015022:	d25f      	bcs.n	80150e4 <mem_sanity+0x10c>
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8015024:	4f51      	ldr	r7, [pc, #324]	; (801516c <mem_sanity+0x194>)
 8015026:	f8df a170 	ldr.w	sl, [pc, #368]	; 8015198 <mem_sanity+0x1c0>
 801502a:	4e52      	ldr	r6, [pc, #328]	; (8015174 <mem_sanity+0x19c>)
 801502c:	e017      	b.n	801505e <mem_sanity+0x86>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 801502e:	2b01      	cmp	r3, #1
 8015030:	d006      	beq.n	8015040 <mem_sanity+0x68>
 8015032:	463b      	mov	r3, r7
 8015034:	f240 2251 	movw	r2, #593	; 0x251
 8015038:	494f      	ldr	r1, [pc, #316]	; (8015178 <mem_sanity+0x1a0>)
 801503a:	4630      	mov	r0, r6
 801503c:	f00b faac 	bl	8020598 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8015040:	4620      	mov	r0, r4
 8015042:	f7ff ff9f 	bl	8014f84 <mem_link_valid>
 8015046:	b388      	cbz	r0, 80150ac <mem_sanity+0xd4>
  return (struct mem *)(void *)&ram[ptr];
 8015048:	f8d8 3000 	ldr.w	r3, [r8]
 801504c:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 801504e:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015050:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8015052:	42a3      	cmp	r3, r4
 8015054:	d246      	bcs.n	80150e4 <mem_sanity+0x10c>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8015056:	f8d9 2000 	ldr.w	r2, [r9]
 801505a:	42a2      	cmp	r2, r4
 801505c:	d942      	bls.n	80150e4 <mem_sanity+0x10c>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801505e:	1ce3      	adds	r3, r4, #3
 8015060:	f023 0303 	bic.w	r3, r3, #3
 8015064:	429c      	cmp	r4, r3
 8015066:	d006      	beq.n	8015076 <mem_sanity+0x9e>
 8015068:	463b      	mov	r3, r7
 801506a:	f240 2249 	movw	r2, #585	; 0x249
 801506e:	4651      	mov	r1, sl
 8015070:	4630      	mov	r0, r6
 8015072:	f00b fa91 	bl	8020598 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8015076:	8862      	ldrh	r2, [r4, #2]
 8015078:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801507c:	429a      	cmp	r2, r3
 801507e:	d81d      	bhi.n	80150bc <mem_sanity+0xe4>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015080:	8822      	ldrh	r2, [r4, #0]
 8015082:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015086:	429a      	cmp	r2, r3
 8015088:	d824      	bhi.n	80150d4 <mem_sanity+0xfc>
 801508a:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801508c:	2d00      	cmp	r5, #0
 801508e:	d0ce      	beq.n	801502e <mem_sanity+0x56>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8015090:	2b01      	cmp	r3, #1
 8015092:	d9d5      	bls.n	8015040 <mem_sanity+0x68>
 8015094:	463b      	mov	r3, r7
 8015096:	f240 2253 	movw	r2, #595	; 0x253
 801509a:	4938      	ldr	r1, [pc, #224]	; (801517c <mem_sanity+0x1a4>)
 801509c:	4630      	mov	r0, r6
 801509e:	f00b fa7b 	bl	8020598 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80150a2:	4620      	mov	r0, r4
 80150a4:	f7ff ff6e 	bl	8014f84 <mem_link_valid>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d1cd      	bne.n	8015048 <mem_sanity+0x70>
 80150ac:	463b      	mov	r3, r7
 80150ae:	f240 2256 	movw	r2, #598	; 0x256
 80150b2:	4933      	ldr	r1, [pc, #204]	; (8015180 <mem_sanity+0x1a8>)
 80150b4:	4630      	mov	r0, r6
 80150b6:	f00b fa6f 	bl	8020598 <iprintf>
 80150ba:	e7c5      	b.n	8015048 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 80150bc:	463b      	mov	r3, r7
 80150be:	f240 224a 	movw	r2, #586	; 0x24a
 80150c2:	4930      	ldr	r1, [pc, #192]	; (8015184 <mem_sanity+0x1ac>)
 80150c4:	4630      	mov	r0, r6
 80150c6:	f00b fa67 	bl	8020598 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80150ca:	8822      	ldrh	r2, [r4, #0]
 80150cc:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d9da      	bls.n	801508a <mem_sanity+0xb2>
 80150d4:	463b      	mov	r3, r7
 80150d6:	f240 224b 	movw	r2, #587	; 0x24b
 80150da:	492b      	ldr	r1, [pc, #172]	; (8015188 <mem_sanity+0x1b0>)
 80150dc:	4630      	mov	r0, r6
 80150de:	f00b fa5b 	bl	8020598 <iprintf>
 80150e2:	e7d2      	b.n	801508a <mem_sanity+0xb2>
  return (struct mem *)(void *)&ram[ptr];
 80150e4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80150e8:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 80150ea:	4294      	cmp	r4, r2
 80150ec:	d006      	beq.n	80150fc <mem_sanity+0x124>
 80150ee:	4b1f      	ldr	r3, [pc, #124]	; (801516c <mem_sanity+0x194>)
 80150f0:	f240 225b 	movw	r2, #603	; 0x25b
 80150f4:	4925      	ldr	r1, [pc, #148]	; (801518c <mem_sanity+0x1b4>)
 80150f6:	481f      	ldr	r0, [pc, #124]	; (8015174 <mem_sanity+0x19c>)
 80150f8:	f00b fa4e 	bl	8020598 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 80150fc:	7923      	ldrb	r3, [r4, #4]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d006      	beq.n	8015110 <mem_sanity+0x138>
 8015102:	4b1a      	ldr	r3, [pc, #104]	; (801516c <mem_sanity+0x194>)
 8015104:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8015108:	4919      	ldr	r1, [pc, #100]	; (8015170 <mem_sanity+0x198>)
 801510a:	481a      	ldr	r0, [pc, #104]	; (8015174 <mem_sanity+0x19c>)
 801510c:	f00b fa44 	bl	8020598 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8015110:	8862      	ldrh	r2, [r4, #2]
 8015112:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8015116:	429a      	cmp	r2, r3
 8015118:	d006      	beq.n	8015128 <mem_sanity+0x150>
 801511a:	4b14      	ldr	r3, [pc, #80]	; (801516c <mem_sanity+0x194>)
 801511c:	f240 225d 	movw	r2, #605	; 0x25d
 8015120:	4918      	ldr	r1, [pc, #96]	; (8015184 <mem_sanity+0x1ac>)
 8015122:	4814      	ldr	r0, [pc, #80]	; (8015174 <mem_sanity+0x19c>)
 8015124:	f00b fa38 	bl	8020598 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8015128:	8822      	ldrh	r2, [r4, #0]
 801512a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 801512e:	429a      	cmp	r2, r3
 8015130:	d008      	beq.n	8015144 <mem_sanity+0x16c>
 8015132:	4b0e      	ldr	r3, [pc, #56]	; (801516c <mem_sanity+0x194>)
 8015134:	f240 225e 	movw	r2, #606	; 0x25e
 8015138:	4913      	ldr	r1, [pc, #76]	; (8015188 <mem_sanity+0x1b0>)
 801513a:	480e      	ldr	r0, [pc, #56]	; (8015174 <mem_sanity+0x19c>)
}
 801513c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8015140:	f00b ba2a 	b.w	8020598 <iprintf>
}
 8015144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8015148:	4b08      	ldr	r3, [pc, #32]	; (801516c <mem_sanity+0x194>)
 801514a:	f240 2242 	movw	r2, #578	; 0x242
 801514e:	490e      	ldr	r1, [pc, #56]	; (8015188 <mem_sanity+0x1b0>)
 8015150:	4808      	ldr	r0, [pc, #32]	; (8015174 <mem_sanity+0x19c>)
 8015152:	f00b fa21 	bl	8020598 <iprintf>
 8015156:	8834      	ldrh	r4, [r6, #0]
 8015158:	e759      	b.n	801500e <mem_sanity+0x36>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 801515a:	4b04      	ldr	r3, [pc, #16]	; (801516c <mem_sanity+0x194>)
 801515c:	f240 2241 	movw	r2, #577	; 0x241
 8015160:	4908      	ldr	r1, [pc, #32]	; (8015184 <mem_sanity+0x1ac>)
 8015162:	4804      	ldr	r0, [pc, #16]	; (8015174 <mem_sanity+0x19c>)
 8015164:	f00b fa18 	bl	8020598 <iprintf>
 8015168:	e74b      	b.n	8015002 <mem_sanity+0x2a>
 801516a:	bf00      	nop
 801516c:	0803cc5c 	.word	0x0803cc5c
 8015170:	0803cc8c 	.word	0x0803cc8c
 8015174:	08026544 	.word	0x08026544
 8015178:	0803ccf4 	.word	0x0803ccf4
 801517c:	0803cd0c 	.word	0x0803cd0c
 8015180:	0803cd28 	.word	0x0803cd28
 8015184:	0803cca4 	.word	0x0803cca4
 8015188:	0803ccc0 	.word	0x0803ccc0
 801518c:	0803cd40 	.word	0x0803cd40
 8015190:	20022294 	.word	0x20022294
 8015194:	20022298 	.word	0x20022298
 8015198:	0803ccdc 	.word	0x0803ccdc

0801519c <mem_overflow_check_raw>:
{
 801519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a0:	1e4c      	subs	r4, r1, #1
 80151a2:	310f      	adds	r1, #15
 80151a4:	b0a3      	sub	sp, #140	; 0x8c
 80151a6:	4606      	mov	r6, r0
 80151a8:	4615      	mov	r5, r2
 80151aa:	4699      	mov	r9, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 80151ac:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8015228 <mem_overflow_check_raw+0x8c>
 80151b0:	4404      	add	r4, r0
 80151b2:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 80151b4:	f8df b074 	ldr.w	fp, [pc, #116]	; 801522c <mem_overflow_check_raw+0x90>
 80151b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015230 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 80151bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 80151c0:	4642      	mov	r2, r8
 80151c2:	2180      	movs	r1, #128	; 0x80
 80151c4:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 80151c6:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 80151c8:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 80151ca:	d009      	beq.n	80151e0 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 80151cc:	f8cd 9000 	str.w	r9, [sp]
 80151d0:	f00b fb06 	bl	80207e0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 80151d4:	465b      	mov	r3, fp
 80151d6:	a902      	add	r1, sp, #8
 80151d8:	226d      	movs	r2, #109	; 0x6d
 80151da:	4650      	mov	r0, sl
 80151dc:	f00b f9dc 	bl	8020598 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 80151e0:	42bc      	cmp	r4, r7
 80151e2:	d1eb      	bne.n	80151bc <mem_overflow_check_raw+0x20>
 80151e4:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80151e8:	4f0e      	ldr	r7, [pc, #56]	; (8015224 <mem_overflow_check_raw+0x88>)
 80151ea:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 80151ec:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801522c <mem_overflow_check_raw+0x90>
 80151f0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8015230 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 80151f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 80151f8:	463a      	mov	r2, r7
 80151fa:	2180      	movs	r1, #128	; 0x80
 80151fc:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 80151fe:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015200:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8015202:	d009      	beq.n	8015218 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8015204:	f8cd 9000 	str.w	r9, [sp]
 8015208:	f00b faea 	bl	80207e0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801520c:	4653      	mov	r3, sl
 801520e:	a902      	add	r1, sp, #8
 8015210:	2278      	movs	r2, #120	; 0x78
 8015212:	4640      	mov	r0, r8
 8015214:	f00b f9c0 	bl	8020598 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8015218:	42b4      	cmp	r4, r6
 801521a:	d1eb      	bne.n	80151f4 <mem_overflow_check_raw+0x58>
}
 801521c:	b023      	add	sp, #140	; 0x8c
 801521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015222:	bf00      	nop
 8015224:	0803cc3c 	.word	0x0803cc3c
 8015228:	0803cc1c 	.word	0x0803cc1c
 801522c:	0803cc5c 	.word	0x0803cc5c
 8015230:	08026544 	.word	0x08026544

08015234 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8015234:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8015238:	1842      	adds	r2, r0, r1
{
 801523a:	b410      	push	{r4}
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801523c:	f840 3c10 	str.w	r3, [r0, #-16]
 8015240:	f840 3c0c 	str.w	r3, [r0, #-12]
 8015244:	f840 3c08 	str.w	r3, [r0, #-8]
 8015248:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801524c:	5043      	str	r3, [r0, r1]
 801524e:	6053      	str	r3, [r2, #4]
 8015250:	6093      	str	r3, [r2, #8]
 8015252:	60d3      	str	r3, [r2, #12]
}
 8015254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop

0801525c <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801525c:	4b14      	ldr	r3, [pc, #80]	; (80152b0 <mem_init+0x54>)
  ram_end->prev = MEM_SIZE_ALIGNED;
 801525e:	f642 60e4 	movw	r0, #12004	; 0x2ee4
  mem->prev = 0;
 8015262:	2100      	movs	r1, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015264:	4a13      	ldr	r2, [pc, #76]	; (80152b4 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015266:	f023 0303 	bic.w	r3, r3, #3
{
 801526a:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801526c:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015270:	2501      	movs	r5, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8015272:	4e11      	ldr	r6, [pc, #68]	; (80152b8 <mem_init+0x5c>)
  mem->prev = 0;
 8015274:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8015276:	1919      	adds	r1, r3, r4
  mem->next = MEM_SIZE_ALIGNED;
 8015278:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801527a:	511e      	str	r6, [r3, r4]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801527c:	541d      	strb	r5, [r3, r0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801527e:	4d0f      	ldr	r5, [pc, #60]	; (80152bc <mem_init+0x60>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015280:	6011      	str	r1, [r2, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015282:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 8015284:	f7ff fea8 	bl	8014fd8 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8015288:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 801528a:	490d      	ldr	r1, [pc, #52]	; (80152c0 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 801528c:	4b0d      	ldr	r3, [pc, #52]	; (80152c4 <mem_init+0x68>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801528e:	480e      	ldr	r0, [pc, #56]	; (80152c8 <mem_init+0x6c>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8015290:	f8a1 40ae 	strh.w	r4, [r1, #174]	; 0xae
  lfree = (struct mem *)(void *)ram;
 8015294:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015296:	f009 fda7 	bl	801ede8 <sys_mutex_new>
 801529a:	b900      	cbnz	r0, 801529e <mem_init+0x42>
}
 801529c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801529e:	4b0b      	ldr	r3, [pc, #44]	; (80152cc <mem_init+0x70>)
 80152a0:	f240 221f 	movw	r2, #543	; 0x21f
 80152a4:	490a      	ldr	r1, [pc, #40]	; (80152d0 <mem_init+0x74>)
 80152a6:	480b      	ldr	r0, [pc, #44]	; (80152d4 <mem_init+0x78>)
}
 80152a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80152ac:	f00b b974 	b.w	8020598 <iprintf>
 80152b0:	20026a8f 	.word	0x20026a8f
 80152b4:	20022298 	.word	0x20022298
 80152b8:	2ee02ee0 	.word	0x2ee02ee0
 80152bc:	20022294 	.word	0x20022294
 80152c0:	200361ec 	.word	0x200361ec
 80152c4:	20022288 	.word	0x20022288
 80152c8:	20022290 	.word	0x20022290
 80152cc:	0803cc5c 	.word	0x0803cc5c
 80152d0:	0803cb60 	.word	0x0803cb60
 80152d4:	08026544 	.word	0x08026544

080152d8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80152d8:	b300      	cbz	r0, 801531c <mem_free+0x44>
{
 80152da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80152de:	f010 0803 	ands.w	r8, r0, #3
 80152e2:	4604      	mov	r4, r0
 80152e4:	d11b      	bne.n	801531e <mem_free+0x46>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80152e6:	4e5e      	ldr	r6, [pc, #376]	; (8015460 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80152e8:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80152ec:	6833      	ldr	r3, [r6, #0]
 80152ee:	42ab      	cmp	r3, r5
 80152f0:	d805      	bhi.n	80152fe <mem_free+0x26>
 80152f2:	4f5c      	ldr	r7, [pc, #368]	; (8015464 <mem_free+0x18c>)
 80152f4:	f100 030c 	add.w	r3, r0, #12
 80152f8:	683a      	ldr	r2, [r7, #0]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d214      	bcs.n	8015328 <mem_free+0x50>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80152fe:	4b5a      	ldr	r3, [pc, #360]	; (8015468 <mem_free+0x190>)
 8015300:	f240 227f 	movw	r2, #639	; 0x27f
 8015304:	4959      	ldr	r1, [pc, #356]	; (801546c <mem_free+0x194>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015306:	485a      	ldr	r0, [pc, #360]	; (8015470 <mem_free+0x198>)
 8015308:	f00b f946 	bl	8020598 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801530c:	4a59      	ldr	r2, [pc, #356]	; (8015474 <mem_free+0x19c>)
 801530e:	f8b2 30b4 	ldrh.w	r3, [r2, #180]	; 0xb4
 8015312:	3301      	adds	r3, #1
 8015314:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801531c:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801531e:	4b52      	ldr	r3, [pc, #328]	; (8015468 <mem_free+0x190>)
 8015320:	f240 2273 	movw	r2, #627	; 0x273
 8015324:	4954      	ldr	r1, [pc, #336]	; (8015478 <mem_free+0x1a0>)
 8015326:	e7ee      	b.n	8015306 <mem_free+0x2e>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8015328:	4b54      	ldr	r3, [pc, #336]	; (801547c <mem_free+0x1a4>)
 801532a:	4a55      	ldr	r2, [pc, #340]	; (8015480 <mem_free+0x1a8>)
 801532c:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8015330:	f7ff ff34 	bl	801519c <mem_overflow_check_raw>
  if (!mem->used) {
 8015334:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d06e      	beq.n	801541a <mem_free+0x142>
  if (!mem_link_valid(mem)) {
 801533c:	4628      	mov	r0, r5
 801533e:	f7ff fe21 	bl	8014f84 <mem_link_valid>
 8015342:	2800      	cmp	r0, #0
 8015344:	d06e      	beq.n	8015424 <mem_free+0x14c>
  if (mem < lfree) {
 8015346:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80154a0 <mem_free+0x1c8>
  mem->used = 0;
 801534a:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801534e:	f8d9 3000 	ldr.w	r3, [r9]
 8015352:	42ab      	cmp	r3, r5
 8015354:	d901      	bls.n	801535a <mem_free+0x82>
    lfree = mem;
 8015356:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801535a:	4846      	ldr	r0, [pc, #280]	; (8015474 <mem_free+0x19c>)
 801535c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015360:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
 8015364:	6831      	ldr	r1, [r6, #0]
 8015366:	1ad2      	subs	r2, r2, r3
 8015368:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801536c:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801536e:	4462      	add	r2, ip
 8015370:	f8a0 20b0 	strh.w	r2, [r0, #176]	; 0xb0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015374:	d83a      	bhi.n	80153ec <mem_free+0x114>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015376:	683a      	ldr	r2, [r7, #0]
 8015378:	4295      	cmp	r5, r2
 801537a:	d258      	bcs.n	801542e <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801537c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8015380:	4293      	cmp	r3, r2
 8015382:	d85c      	bhi.n	801543e <mem_free+0x166>
  return (struct mem *)(void *)&ram[ptr];
 8015384:	6832      	ldr	r2, [r6, #0]
 8015386:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015388:	429d      	cmp	r5, r3
 801538a:	d013      	beq.n	80153b4 <mem_free+0xdc>
 801538c:	7919      	ldrb	r1, [r3, #4]
 801538e:	b989      	cbnz	r1, 80153b4 <mem_free+0xdc>
 8015390:	6839      	ldr	r1, [r7, #0]
 8015392:	428b      	cmp	r3, r1
 8015394:	d00e      	beq.n	80153b4 <mem_free+0xdc>
    if (lfree == nmem) {
 8015396:	f8d9 1000 	ldr.w	r1, [r9]
 801539a:	428b      	cmp	r3, r1
 801539c:	d05c      	beq.n	8015458 <mem_free+0x180>
    mem->next = nmem->next;
 801539e:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80153a0:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    mem->next = nmem->next;
 80153a4:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80153a8:	881b      	ldrh	r3, [r3, #0]
 80153aa:	428b      	cmp	r3, r1
 80153ac:	d002      	beq.n	80153b4 <mem_free+0xdc>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80153ae:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 80153b0:	1aa9      	subs	r1, r5, r2
 80153b2:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 80153b4:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 80153b8:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 80153ba:	429d      	cmp	r5, r3
 80153bc:	d010      	beq.n	80153e0 <mem_free+0x108>
 80153be:	7918      	ldrb	r0, [r3, #4]
 80153c0:	b970      	cbnz	r0, 80153e0 <mem_free+0x108>
    if (lfree == mem) {
 80153c2:	f8d9 0000 	ldr.w	r0, [r9]
 80153c6:	4285      	cmp	r5, r0
 80153c8:	d043      	beq.n	8015452 <mem_free+0x17a>
    pmem->next = mem->next;
 80153ca:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80153ce:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    pmem->next = mem->next;
 80153d2:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80153d4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80153d8:	4283      	cmp	r3, r0
 80153da:	d001      	beq.n	80153e0 <mem_free+0x108>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80153dc:	441a      	add	r2, r3
 80153de:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 80153e0:	f7ff fdfa 	bl	8014fd8 <mem_sanity>
  mem_free_count = 1;
 80153e4:	4b27      	ldr	r3, [pc, #156]	; (8015484 <mem_free+0x1ac>)
 80153e6:	2201      	movs	r2, #1
 80153e8:	701a      	strb	r2, [r3, #0]
 80153ea:	e795      	b.n	8015318 <mem_free+0x40>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80153ec:	4b1e      	ldr	r3, [pc, #120]	; (8015468 <mem_free+0x190>)
 80153ee:	f240 12df 	movw	r2, #479	; 0x1df
 80153f2:	4925      	ldr	r1, [pc, #148]	; (8015488 <mem_free+0x1b0>)
 80153f4:	481e      	ldr	r0, [pc, #120]	; (8015470 <mem_free+0x198>)
 80153f6:	f00b f8cf 	bl	8020598 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	429d      	cmp	r5, r3
 80153fe:	d216      	bcs.n	801542e <mem_free+0x156>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015400:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8015404:	b133      	cbz	r3, 8015414 <mem_free+0x13c>
 8015406:	4b18      	ldr	r3, [pc, #96]	; (8015468 <mem_free+0x190>)
 8015408:	f240 12e1 	movw	r2, #481	; 0x1e1
 801540c:	491f      	ldr	r1, [pc, #124]	; (801548c <mem_free+0x1b4>)
 801540e:	4818      	ldr	r0, [pc, #96]	; (8015470 <mem_free+0x198>)
 8015410:	f00b f8c2 	bl	8020598 <iprintf>
 8015414:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015418:	e7b0      	b.n	801537c <mem_free+0xa4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801541a:	4b13      	ldr	r3, [pc, #76]	; (8015468 <mem_free+0x190>)
 801541c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015420:	491b      	ldr	r1, [pc, #108]	; (8015490 <mem_free+0x1b8>)
 8015422:	e770      	b.n	8015306 <mem_free+0x2e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015424:	4b10      	ldr	r3, [pc, #64]	; (8015468 <mem_free+0x190>)
 8015426:	f240 2295 	movw	r2, #661	; 0x295
 801542a:	491a      	ldr	r1, [pc, #104]	; (8015494 <mem_free+0x1bc>)
 801542c:	e76b      	b.n	8015306 <mem_free+0x2e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801542e:	4b0e      	ldr	r3, [pc, #56]	; (8015468 <mem_free+0x190>)
 8015430:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015434:	4918      	ldr	r1, [pc, #96]	; (8015498 <mem_free+0x1c0>)
 8015436:	480e      	ldr	r0, [pc, #56]	; (8015470 <mem_free+0x198>)
 8015438:	f00b f8ae 	bl	8020598 <iprintf>
 801543c:	e7e0      	b.n	8015400 <mem_free+0x128>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801543e:	4b0a      	ldr	r3, [pc, #40]	; (8015468 <mem_free+0x190>)
 8015440:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8015444:	4915      	ldr	r1, [pc, #84]	; (801549c <mem_free+0x1c4>)
 8015446:	480a      	ldr	r0, [pc, #40]	; (8015470 <mem_free+0x198>)
 8015448:	f00b f8a6 	bl	8020598 <iprintf>
 801544c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8015450:	e798      	b.n	8015384 <mem_free+0xac>
      lfree = pmem;
 8015452:	f8c9 3000 	str.w	r3, [r9]
 8015456:	e7b8      	b.n	80153ca <mem_free+0xf2>
      lfree = mem;
 8015458:	f8c9 5000 	str.w	r5, [r9]
 801545c:	e79f      	b.n	801539e <mem_free+0xc6>
 801545e:	bf00      	nop
 8015460:	20022294 	.word	0x20022294
 8015464:	20022298 	.word	0x20022298
 8015468:	0803cc5c 	.word	0x0803cc5c
 801546c:	0803ca64 	.word	0x0803ca64
 8015470:	08026544 	.word	0x08026544
 8015474:	200361ec 	.word	0x200361ec
 8015478:	0803ca40 	.word	0x0803ca40
 801547c:	0803d704 	.word	0x0803d704
 8015480:	0803ca80 	.word	0x0803ca80
 8015484:	2002228c 	.word	0x2002228c
 8015488:	0803cae4 	.word	0x0803cae4
 801548c:	0803cb18 	.word	0x0803cb18
 8015490:	0803ca88 	.word	0x0803ca88
 8015494:	0803cab0 	.word	0x0803cab0
 8015498:	0803cafc 	.word	0x0803cafc
 801549c:	0803cb34 	.word	0x0803cb34
 80154a0:	20022288 	.word	0x20022288

080154a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80154a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80154a8:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80154aa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80154ae:	f024 0403 	bic.w	r4, r4, #3
 80154b2:	b2a4      	uxth	r4, r4
 80154b4:	2c0c      	cmp	r4, #12
 80154b6:	bf38      	it	cc
 80154b8:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80154ba:	3420      	adds	r4, #32
 80154bc:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80154be:	429c      	cmp	r4, r3
 80154c0:	d87a      	bhi.n	80155b8 <mem_trim+0x114>
 80154c2:	42a1      	cmp	r1, r4
 80154c4:	d878      	bhi.n	80155b8 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80154c6:	4f60      	ldr	r7, [pc, #384]	; (8015648 <mem_trim+0x1a4>)
 80154c8:	4605      	mov	r5, r0
 80154ca:	460e      	mov	r6, r1
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	4283      	cmp	r3, r0
 80154d0:	d85a      	bhi.n	8015588 <mem_trim+0xe4>
 80154d2:	4b5e      	ldr	r3, [pc, #376]	; (801564c <mem_trim+0x1a8>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	4283      	cmp	r3, r0
 80154d8:	d956      	bls.n	8015588 <mem_trim+0xe4>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 80154da:	4b5d      	ldr	r3, [pc, #372]	; (8015650 <mem_trim+0x1ac>)
 80154dc:	4628      	mov	r0, r5
 80154de:	4a5d      	ldr	r2, [pc, #372]	; (8015654 <mem_trim+0x1b0>)
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80154e0:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 80154e4:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 80154e8:	f7ff fe58 	bl	801519c <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 80154ec:	683b      	ldr	r3, [r7, #0]
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80154ee:	f835 2c18 	ldrh.w	r2, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 80154f2:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80154f6:	f1a2 0928 	sub.w	r9, r2, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 80154fa:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80154fe:	eba9 0908 	sub.w	r9, r9, r8
 8015502:	fa1f f989 	uxth.w	r9, r9
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8015506:	454c      	cmp	r4, r9
 8015508:	d858      	bhi.n	80155bc <mem_trim+0x118>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 801550a:	f000 8084 	beq.w	8015616 <mem_trim+0x172>
  return (struct mem *)(void *)&ram[ptr];
 801550e:	eb03 0a02 	add.w	sl, r3, r2

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
  if (mem2->used == 0) {
 8015512:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8015516:	2900      	cmp	r1, #0
 8015518:	d159      	bne.n	80155ce <mem_trim+0x12a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801551a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 801551e:	428a      	cmp	r2, r1
 8015520:	d07d      	beq.n	801561e <mem_trim+0x17a>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015522:	f108 0208 	add.w	r2, r8, #8
    if (lfree == mem2) {
 8015526:	484c      	ldr	r0, [pc, #304]	; (8015658 <mem_trim+0x1b4>)
    next = mem2->next;
 8015528:	f8ba 7000 	ldrh.w	r7, [sl]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801552c:	4422      	add	r2, r4
    if (lfree == mem2) {
 801552e:	f8d0 c000 	ldr.w	ip, [r0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015532:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 8015534:	45d4      	cmp	ip, sl
 8015536:	eb03 0102 	add.w	r1, r3, r2
 801553a:	d06e      	beq.n	801561a <mem_trim+0x176>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 801553c:	f04f 0c00 	mov.w	ip, #0
    /* restore the next pointer */
    mem2->next = next;
 8015540:	800f      	strh	r7, [r1, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015542:	f8a1 8002 	strh.w	r8, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015546:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 801554a:	f881 c004 	strb.w	ip, [r1, #4]
    mem->next = ptr2;
 801554e:	f825 2c18 	strh.w	r2, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015552:	8809      	ldrh	r1, [r1, #0]
 8015554:	4281      	cmp	r1, r0
 8015556:	d001      	beq.n	801555c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015558:	440b      	add	r3, r1
 801555a:	805a      	strh	r2, [r3, #2]
    mem2->prev = ptr;
    mem->next = ptr2;
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 801555c:	4a3f      	ldr	r2, [pc, #252]	; (801565c <mem_trim+0x1b8>)
 801555e:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8015562:	441c      	add	r4, r3
 8015564:	eba4 0909 	sub.w	r9, r4, r9
 8015568:	f8a2 90b0 	strh.w	r9, [r2, #176]	; 0xb0
  mem_overflow_init_raw(p, user_size);
 801556c:	4628      	mov	r0, r5
 801556e:	4631      	mov	r1, r6
  mem->user_size = user_size;
 8015570:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 8015574:	f7ff fe5e 	bl	8015234 <mem_overflow_init_raw>
    -> the remaining space stays unused since it is too small
  } */
#if MEM_OVERFLOW_CHECK
  mem_overflow_init_element(mem, new_size);
#endif
  MEM_SANITY();
 8015578:	f7ff fd2e 	bl	8014fd8 <mem_sanity>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
 801557c:	4b38      	ldr	r3, [pc, #224]	; (8015660 <mem_trim+0x1bc>)
 801557e:	2201      	movs	r2, #1
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015580:	4628      	mov	r0, r5
  mem_free_count = 1;
 8015582:	701a      	strb	r2, [r3, #0]
}
 8015584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015588:	4b36      	ldr	r3, [pc, #216]	; (8015664 <mem_trim+0x1c0>)
 801558a:	f240 22d2 	movw	r2, #722	; 0x2d2
 801558e:	4936      	ldr	r1, [pc, #216]	; (8015668 <mem_trim+0x1c4>)
 8015590:	4836      	ldr	r0, [pc, #216]	; (801566c <mem_trim+0x1c8>)
 8015592:	f00b f801 	bl	8020598 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	42ab      	cmp	r3, r5
 801559a:	d908      	bls.n	80155ae <mem_trim+0x10a>
    MEM_STATS_INC_LOCKED(illegal);
 801559c:	4a2f      	ldr	r2, [pc, #188]	; (801565c <mem_trim+0x1b8>)
    return rmem;
 801559e:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 80155a0:	f8b2 30b4 	ldrh.w	r3, [r2, #180]	; 0xb4
 80155a4:	3301      	adds	r3, #1
 80155a6:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
}
 80155aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80155ae:	4b27      	ldr	r3, [pc, #156]	; (801564c <mem_trim+0x1a8>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	429d      	cmp	r5, r3
 80155b4:	d2f2      	bcs.n	801559c <mem_trim+0xf8>
 80155b6:	e790      	b.n	80154da <mem_trim+0x36>
    return NULL;
 80155b8:	2000      	movs	r0, #0
 80155ba:	e7f6      	b.n	80155aa <mem_trim+0x106>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80155bc:	4b29      	ldr	r3, [pc, #164]	; (8015664 <mem_trim+0x1c0>)
 80155be:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80155c2:	492b      	ldr	r1, [pc, #172]	; (8015670 <mem_trim+0x1cc>)
 80155c4:	4829      	ldr	r0, [pc, #164]	; (801566c <mem_trim+0x1c8>)
 80155c6:	f00a ffe7 	bl	8020598 <iprintf>
    return NULL;
 80155ca:	2000      	movs	r0, #0
 80155cc:	e7ed      	b.n	80155aa <mem_trim+0x106>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80155ce:	f104 0114 	add.w	r1, r4, #20
 80155d2:	4549      	cmp	r1, r9
 80155d4:	d8ca      	bhi.n	801556c <mem_trim+0xc8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80155d6:	f108 0a08 	add.w	sl, r8, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80155da:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80155de:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80155e0:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80155e2:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80155e6:	d023      	beq.n	8015630 <mem_trim+0x18c>
    if (mem2 < lfree) {
 80155e8:	481b      	ldr	r0, [pc, #108]	; (8015658 <mem_trim+0x1b4>)
  return (struct mem *)(void *)&ram[ptr];
 80155ea:	eb03 010a 	add.w	r1, r3, sl
    if (mem2 < lfree) {
 80155ee:	6807      	ldr	r7, [r0, #0]
 80155f0:	428f      	cmp	r7, r1
 80155f2:	d900      	bls.n	80155f6 <mem_trim+0x152>
      lfree = mem2;
 80155f4:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 80155f6:	2700      	movs	r7, #0
    mem2->next = mem->next;
 80155f8:	800a      	strh	r2, [r1, #0]
    mem2->prev = ptr;
 80155fa:	f8a1 8002 	strh.w	r8, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80155fe:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8015602:	710f      	strb	r7, [r1, #4]
    mem->next = ptr2;
 8015604:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015608:	880a      	ldrh	r2, [r1, #0]
 801560a:	4282      	cmp	r2, r0
 801560c:	d0a6      	beq.n	801555c <mem_trim+0xb8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801560e:	4413      	add	r3, r2
 8015610:	f8a3 a002 	strh.w	sl, [r3, #2]
 8015614:	e7a2      	b.n	801555c <mem_trim+0xb8>
 8015616:	4628      	mov	r0, r5
 8015618:	e7c7      	b.n	80155aa <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 801561a:	6001      	str	r1, [r0, #0]
 801561c:	e78e      	b.n	801553c <mem_trim+0x98>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801561e:	4b11      	ldr	r3, [pc, #68]	; (8015664 <mem_trim+0x1c0>)
 8015620:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015624:	4913      	ldr	r1, [pc, #76]	; (8015674 <mem_trim+0x1d0>)
 8015626:	4811      	ldr	r0, [pc, #68]	; (801566c <mem_trim+0x1c8>)
 8015628:	f00a ffb6 	bl	8020598 <iprintf>
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	e778      	b.n	8015522 <mem_trim+0x7e>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015630:	4b0c      	ldr	r3, [pc, #48]	; (8015664 <mem_trim+0x1c0>)
 8015632:	f240 3216 	movw	r2, #790	; 0x316
 8015636:	490f      	ldr	r1, [pc, #60]	; (8015674 <mem_trim+0x1d0>)
 8015638:	480c      	ldr	r0, [pc, #48]	; (801566c <mem_trim+0x1c8>)
 801563a:	f00a ffad 	bl	8020598 <iprintf>
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	f835 2c18 	ldrh.w	r2, [r5, #-24]
 8015644:	e7d0      	b.n	80155e8 <mem_trim+0x144>
 8015646:	bf00      	nop
 8015648:	20022294 	.word	0x20022294
 801564c:	20022298 	.word	0x20022298
 8015650:	0803d704 	.word	0x0803d704
 8015654:	0803ca80 	.word	0x0803ca80
 8015658:	20022288 	.word	0x20022288
 801565c:	200361ec 	.word	0x200361ec
 8015660:	2002228c 	.word	0x2002228c
 8015664:	0803cc5c 	.word	0x0803cc5c
 8015668:	0803cd54 	.word	0x0803cd54
 801566c:	08026544 	.word	0x08026544
 8015670:	0803cd6c 	.word	0x0803cd6c
 8015674:	0803cd8c 	.word	0x0803cd8c

08015678 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801567c:	2800      	cmp	r0, #0
 801567e:	f000 80e0 	beq.w	8015842 <mem_malloc+0x1ca>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015682:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015686:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801568a:	f02a 0a03 	bic.w	sl, sl, #3
 801568e:	fa1f fa8a 	uxth.w	sl, sl
 8015692:	f1ba 0f0c 	cmp.w	sl, #12
 8015696:	bf38      	it	cc
 8015698:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801569c:	f10a 0720 	add.w	r7, sl, #32
 80156a0:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80156a2:	42a7      	cmp	r7, r4
 80156a4:	f200 80cd 	bhi.w	8015842 <mem_malloc+0x1ca>
 80156a8:	42b8      	cmp	r0, r7
 80156aa:	bf94      	ite	ls
 80156ac:	2500      	movls	r5, #0
 80156ae:	2501      	movhi	r5, #1
 80156b0:	2d00      	cmp	r5, #0
 80156b2:	f040 80c6 	bne.w	8015842 <mem_malloc+0x1ca>
 80156b6:	4681      	mov	r9, r0
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80156b8:	4871      	ldr	r0, [pc, #452]	; (8015880 <mem_malloc+0x208>)
 80156ba:	f009 fbbb 	bl	801ee34 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80156be:	4b71      	ldr	r3, [pc, #452]	; (8015884 <mem_malloc+0x20c>)
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
 80156c0:	46ae      	mov	lr, r5
 80156c2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80158b0 <mem_malloc+0x238>
 80156c6:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 80156ca:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80156cc:	f06f 0b07 	mvn.w	fp, #7
      mem_free_count = 0;
 80156d0:	4d6d      	ldr	r5, [pc, #436]	; (8015888 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80156d2:	f8d8 6000 	ldr.w	r6, [r8]
  return (mem_size_t)((u8_t *)mem - ram);
 80156d6:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80156d8:	b2b3      	uxth	r3, r6
 80156da:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 80156dc:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80156de:	d918      	bls.n	8015712 <mem_malloc+0x9a>
      mem_free_count = 0;
 80156e0:	f885 e000 	strb.w	lr, [r5]
  return (struct mem *)(void *)&ram[ptr];
 80156e4:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 80156e6:	782a      	ldrb	r2, [r5, #0]
 80156e8:	b132      	cbz	r2, 80156f8 <mem_malloc+0x80>
 80156ea:	e7f2      	b.n	80156d2 <mem_malloc+0x5a>
      mem_free_count = 0;
 80156ec:	f885 e000 	strb.w	lr, [r5]
 80156f0:	461e      	mov	r6, r3
      if (mem_free_count != 0) {
 80156f2:	782a      	ldrb	r2, [r5, #0]
 80156f4:	2a00      	cmp	r2, #0
 80156f6:	d1ec      	bne.n	80156d2 <mem_malloc+0x5a>
      if ((!mem->used) &&
 80156f8:	7921      	ldrb	r1, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80156fa:	ebab 0303 	sub.w	r3, fp, r3
 80156fe:	8822      	ldrh	r2, [r4, #0]
      if ((!mem->used) &&
 8015700:	b911      	cbnz	r1, 8015708 <mem_malloc+0x90>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015702:	4413      	add	r3, r2
      if ((!mem->used) &&
 8015704:	42bb      	cmp	r3, r7
 8015706:	d211      	bcs.n	801572c <mem_malloc+0xb4>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015708:	4594      	cmp	ip, r2
 801570a:	4613      	mov	r3, r2
  return (struct mem *)(void *)&ram[ptr];
 801570c:	eb00 0402 	add.w	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015710:	d8ec      	bhi.n	80156ec <mem_malloc+0x74>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8015712:	4a5e      	ldr	r2, [pc, #376]	; (801588c <mem_malloc+0x214>)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015714:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8015716:	485a      	ldr	r0, [pc, #360]	; (8015880 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 8015718:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 801571c:	3301      	adds	r3, #1
 801571e:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
  sys_mutex_unlock(&mem_mutex);
 8015722:	f009 fb8d 	bl	801ee40 <sys_mutex_unlock>
}
 8015726:	4628      	mov	r0, r5
 8015728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801572c:	f107 0114 	add.w	r1, r7, #20
 8015730:	428b      	cmp	r3, r1
 8015732:	d258      	bcs.n	80157e6 <mem_malloc+0x16e>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8015734:	4955      	ldr	r1, [pc, #340]	; (801588c <mem_malloc+0x214>)
          mem->used = 1;
 8015736:	2301      	movs	r3, #1
 8015738:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 801573a:	f8b1 30b0 	ldrh.w	r3, [r1, #176]	; 0xb0
 801573e:	f8b1 c0b2 	ldrh.w	ip, [r1, #178]	; 0xb2
 8015742:	4413      	add	r3, r2
 8015744:	1b9b      	subs	r3, r3, r6
 8015746:	b29b      	uxth	r3, r3
 8015748:	459c      	cmp	ip, r3
 801574a:	f8a1 30b0 	strh.w	r3, [r1, #176]	; 0xb0
 801574e:	bf38      	it	cc
 8015750:	f8a1 30b2 	strhcc.w	r3, [r1, #178]	; 0xb2
          while (cur->used && cur != ram_end) {
 8015754:	4e4e      	ldr	r6, [pc, #312]	; (8015890 <mem_malloc+0x218>)
            mem_free_count = 0;
 8015756:	f04f 0c00 	mov.w	ip, #0
          while (cur->used && cur != ram_end) {
 801575a:	6831      	ldr	r1, [r6, #0]
        if (mem == lfree) {
 801575c:	f8d8 3000 	ldr.w	r3, [r8]
 8015760:	42a3      	cmp	r3, r4
 8015762:	d11b      	bne.n	801579c <mem_malloc+0x124>
          struct mem *cur = lfree;
 8015764:	f8d8 3000 	ldr.w	r3, [r8]
          while (cur->used && cur != ram_end) {
 8015768:	791a      	ldrb	r2, [r3, #4]
 801576a:	b94a      	cbnz	r2, 8015780 <mem_malloc+0x108>
 801576c:	e00b      	b.n	8015786 <mem_malloc+0x10e>
            mem_free_count = 0;
 801576e:	f885 c000 	strb.w	ip, [r5]
            if (mem_free_count != 0) {
 8015772:	782a      	ldrb	r2, [r5, #0]
 8015774:	2a00      	cmp	r2, #0
 8015776:	d1f1      	bne.n	801575c <mem_malloc+0xe4>
  return (struct mem *)(void *)&ram[ptr];
 8015778:	881b      	ldrh	r3, [r3, #0]
 801577a:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 801577c:	791a      	ldrb	r2, [r3, #4]
 801577e:	b112      	cbz	r2, 8015786 <mem_malloc+0x10e>
 8015780:	4299      	cmp	r1, r3
 8015782:	d1f4      	bne.n	801576e <mem_malloc+0xf6>
 8015784:	460b      	mov	r3, r1
          lfree = cur;
 8015786:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801578a:	f8d8 3000 	ldr.w	r3, [r8]
 801578e:	428b      	cmp	r3, r1
 8015790:	d004      	beq.n	801579c <mem_malloc+0x124>
 8015792:	f8d8 3000 	ldr.w	r3, [r8]
 8015796:	791b      	ldrb	r3, [r3, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d15e      	bne.n	801585a <mem_malloc+0x1e2>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801579c:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801579e:	4838      	ldr	r0, [pc, #224]	; (8015880 <mem_malloc+0x208>)
 80157a0:	f009 fb4e 	bl	801ee40 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80157a4:	6833      	ldr	r3, [r6, #0]
 80157a6:	4427      	add	r7, r4
 80157a8:	42bb      	cmp	r3, r7
 80157aa:	d34e      	bcc.n	801584a <mem_malloc+0x1d2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80157ac:	07a3      	lsls	r3, r4, #30
 80157ae:	d00d      	beq.n	80157cc <mem_malloc+0x154>
 80157b0:	4b38      	ldr	r3, [pc, #224]	; (8015894 <mem_malloc+0x21c>)
 80157b2:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80157b6:	4938      	ldr	r1, [pc, #224]	; (8015898 <mem_malloc+0x220>)
 80157b8:	4838      	ldr	r0, [pc, #224]	; (801589c <mem_malloc+0x224>)
 80157ba:	f00a feed 	bl	8020598 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80157be:	4b35      	ldr	r3, [pc, #212]	; (8015894 <mem_malloc+0x21c>)
 80157c0:	f240 32be 	movw	r2, #958	; 0x3be
 80157c4:	4936      	ldr	r1, [pc, #216]	; (80158a0 <mem_malloc+0x228>)
 80157c6:	4835      	ldr	r0, [pc, #212]	; (801589c <mem_malloc+0x224>)
 80157c8:	f00a fee6 	bl	8020598 <iprintf>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80157cc:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 80157d0:	4649      	mov	r1, r9
  mem->user_size = user_size;
 80157d2:	f8a4 9006 	strh.w	r9, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 80157d6:	4628      	mov	r0, r5
 80157d8:	f7ff fd2c 	bl	8015234 <mem_overflow_init_raw>
        MEM_SANITY();
 80157dc:	f7ff fbfc 	bl	8014fd8 <mem_sanity>
}
 80157e0:	4628      	mov	r0, r5
 80157e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80157e6:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80157ea:	f642 63e0 	movw	r3, #12000	; 0x2ee0
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80157ee:	44b2      	add	sl, r6
 80157f0:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80157f4:	459a      	cmp	sl, r3
 80157f6:	d038      	beq.n	801586a <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 80157f8:	eb00 030a 	add.w	r3, r0, sl
          mem2->used = 0;
 80157fc:	2100      	movs	r1, #0
          mem->used = 1;
 80157fe:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 8015802:	7119      	strb	r1, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015804:	f642 61e0 	movw	r1, #12000	; 0x2ee0
          mem2->next = mem->next;
 8015808:	f820 200a 	strh.w	r2, [r0, sl]
          mem2->prev = ptr;
 801580c:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 801580e:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8015812:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015816:	f830 300a 	ldrh.w	r3, [r0, sl]
 801581a:	428b      	cmp	r3, r1
 801581c:	d002      	beq.n	8015824 <mem_malloc+0x1ac>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801581e:	4403      	add	r3, r0
 8015820:	f8a3 a002 	strh.w	sl, [r3, #2]
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8015824:	4a19      	ldr	r2, [pc, #100]	; (801588c <mem_malloc+0x214>)
 8015826:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801582a:	f8b2 10b2 	ldrh.w	r1, [r2, #178]	; 0xb2
 801582e:	3308      	adds	r3, #8
 8015830:	443b      	add	r3, r7
 8015832:	b29b      	uxth	r3, r3
 8015834:	4299      	cmp	r1, r3
 8015836:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
 801583a:	d28b      	bcs.n	8015754 <mem_malloc+0xdc>
 801583c:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
 8015840:	e788      	b.n	8015754 <mem_malloc+0xdc>
    return NULL;
 8015842:	2500      	movs	r5, #0
}
 8015844:	4628      	mov	r0, r5
 8015846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801584a:	4b12      	ldr	r3, [pc, #72]	; (8015894 <mem_malloc+0x21c>)
 801584c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8015850:	4914      	ldr	r1, [pc, #80]	; (80158a4 <mem_malloc+0x22c>)
 8015852:	4812      	ldr	r0, [pc, #72]	; (801589c <mem_malloc+0x224>)
 8015854:	f00a fea0 	bl	8020598 <iprintf>
 8015858:	e7a8      	b.n	80157ac <mem_malloc+0x134>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801585a:	4b0e      	ldr	r3, [pc, #56]	; (8015894 <mem_malloc+0x21c>)
 801585c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015860:	4911      	ldr	r1, [pc, #68]	; (80158a8 <mem_malloc+0x230>)
 8015862:	480e      	ldr	r0, [pc, #56]	; (801589c <mem_malloc+0x224>)
 8015864:	f00a fe98 	bl	8020598 <iprintf>
 8015868:	e798      	b.n	801579c <mem_malloc+0x124>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801586a:	4b0a      	ldr	r3, [pc, #40]	; (8015894 <mem_malloc+0x21c>)
 801586c:	f240 3287 	movw	r2, #903	; 0x387
 8015870:	490e      	ldr	r1, [pc, #56]	; (80158ac <mem_malloc+0x234>)
 8015872:	480a      	ldr	r0, [pc, #40]	; (801589c <mem_malloc+0x224>)
 8015874:	f00a fe90 	bl	8020598 <iprintf>
 8015878:	4b02      	ldr	r3, [pc, #8]	; (8015884 <mem_malloc+0x20c>)
 801587a:	8822      	ldrh	r2, [r4, #0]
 801587c:	6818      	ldr	r0, [r3, #0]
 801587e:	e7bb      	b.n	80157f8 <mem_malloc+0x180>
 8015880:	20022290 	.word	0x20022290
 8015884:	20022294 	.word	0x20022294
 8015888:	2002228c 	.word	0x2002228c
 801588c:	200361ec 	.word	0x200361ec
 8015890:	20022298 	.word	0x20022298
 8015894:	0803cc5c 	.word	0x0803cc5c
 8015898:	0803cbc8 	.word	0x0803cbc8
 801589c:	08026544 	.word	0x08026544
 80158a0:	0803cbf8 	.word	0x0803cbf8
 80158a4:	0803cb98 	.word	0x0803cb98
 80158a8:	0803cb7c 	.word	0x0803cb7c
 80158ac:	0803cd8c 	.word	0x0803cd8c
 80158b0:	20022288 	.word	0x20022288

080158b4 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 80158b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158b8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8015910 <memp_overflow_check_all+0x5c>
 80158bc:	2308      	movs	r3, #8
 80158be:	4d11      	ldr	r5, [pc, #68]	; (8015904 <memp_overflow_check_all+0x50>)
 80158c0:	f108 093c 	add.w	r9, r8, #60	; 0x3c
 80158c4:	4e10      	ldr	r6, [pc, #64]	; (8015908 <memp_overflow_check_all+0x54>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 80158c6:	4f11      	ldr	r7, [pc, #68]	; (801590c <memp_overflow_check_all+0x58>)
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 80158c8:	3503      	adds	r5, #3
 80158ca:	f025 0503 	bic.w	r5, r5, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80158ce:	b183      	cbz	r3, 80158f2 <memp_overflow_check_all+0x3e>
 80158d0:	8931      	ldrh	r1, [r6, #8]
 80158d2:	2400      	movs	r4, #0
 80158d4:	3401      	adds	r4, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 80158d6:	6833      	ldr	r3, [r6, #0]
 80158d8:	463a      	mov	r2, r7
 80158da:	f105 001c 	add.w	r0, r5, #28
 80158de:	f7ff fc5d 	bl	801519c <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80158e2:	8931      	ldrh	r1, [r6, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80158e4:	b2a4      	uxth	r4, r4
 80158e6:	8973      	ldrh	r3, [r6, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80158e8:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80158ec:	42a3      	cmp	r3, r4
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80158ee:	4415      	add	r5, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80158f0:	d8f0      	bhi.n	80158d4 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 80158f2:	45c1      	cmp	r9, r8
 80158f4:	d004      	beq.n	8015900 <memp_overflow_check_all+0x4c>
 80158f6:	f858 6b04 	ldr.w	r6, [r8], #4
 80158fa:	68f5      	ldr	r5, [r6, #12]
 80158fc:	8973      	ldrh	r3, [r6, #10]
 80158fe:	e7e3      	b.n	80158c8 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8015900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015904:	2002a360 	.word	0x2002a360
 8015908:	0803ceac 	.word	0x0803ceac
 801590c:	0803cf9c 	.word	0x0803cf9c
 8015910:	0803cfa8 	.word	0x0803cfa8

08015914 <do_memp_malloc_pool_fn.isra.3>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8015914:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8015916:	680c      	ldr	r4, [r1, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015918:	b1e4      	cbz	r4, 8015954 <do_memp_malloc_pool_fn.isra.3+0x40>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801591a:	6826      	ldr	r6, [r4, #0]
 801591c:	4605      	mov	r5, r0
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 801591e:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 8015920:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 8015922:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8015924:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015928:	07a3      	lsls	r3, r4, #30
 801592a:	d10b      	bne.n	8015944 <do_memp_malloc_pool_fn.isra.3+0x30>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 801592c:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801592e:	f104 001c 	add.w	r0, r4, #28
    desc->stats->used++;
 8015932:	8913      	ldrh	r3, [r2, #8]
    if (desc->stats->used > desc->stats->max) {
 8015934:	8951      	ldrh	r1, [r2, #10]
    desc->stats->used++;
 8015936:	3301      	adds	r3, #1
 8015938:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 801593a:	4299      	cmp	r1, r3
    desc->stats->used++;
 801593c:	8113      	strh	r3, [r2, #8]
      desc->stats->max = desc->stats->used;
 801593e:	bf38      	it	cc
 8015940:	8153      	strhcc	r3, [r2, #10]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8015942:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015944:	4b06      	ldr	r3, [pc, #24]	; (8015960 <do_memp_malloc_pool_fn.isra.3+0x4c>)
 8015946:	f240 1219 	movw	r2, #281	; 0x119
 801594a:	4906      	ldr	r1, [pc, #24]	; (8015964 <do_memp_malloc_pool_fn.isra.3+0x50>)
 801594c:	4806      	ldr	r0, [pc, #24]	; (8015968 <do_memp_malloc_pool_fn.isra.3+0x54>)
 801594e:	f00a fe23 	bl	8020598 <iprintf>
 8015952:	e7eb      	b.n	801592c <do_memp_malloc_pool_fn.isra.3+0x18>
    desc->stats->err++;
 8015954:	6802      	ldr	r2, [r0, #0]
 8015956:	4620      	mov	r0, r4
 8015958:	8893      	ldrh	r3, [r2, #4]
 801595a:	3301      	adds	r3, #1
 801595c:	8093      	strh	r3, [r2, #4]
}
 801595e:	bd70      	pop	{r4, r5, r6, pc}
 8015960:	0803cdcc 	.word	0x0803cdcc
 8015964:	0803cdfc 	.word	0x0803cdfc
 8015968:	08026544 	.word	0x08026544

0801596c <do_memp_free_pool.isra.5>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801596c:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 801596e:	b570      	push	{r4, r5, r6, lr}
 8015970:	4614      	mov	r4, r2
 8015972:	4606      	mov	r6, r0
 8015974:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8015976:	d122      	bne.n	80159be <do_memp_free_pool.isra.5+0x52>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8015978:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801597a:	f1a4 021c 	sub.w	r2, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801597e:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8015980:	8903      	ldrh	r3, [r0, #8]
  memp->next = *desc->tab;
 8015982:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8015984:	3b01      	subs	r3, #1
 8015986:	8103      	strh	r3, [r0, #8]
  memp->next = *desc->tab;
 8015988:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 801598c:	600a      	str	r2, [r1, #0]
  if (t != NULL) {
 801598e:	b162      	cbz	r2, 80159aa <do_memp_free_pool.isra.5+0x3e>
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8015990:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8015994:	b14a      	cbz	r2, 80159aa <do_memp_free_pool.isra.5+0x3e>
 8015996:	b143      	cbz	r3, 80159aa <do_memp_free_pool.isra.5+0x3e>
      if (t == h) {
 8015998:	429a      	cmp	r2, r3
 801599a:	d007      	beq.n	80159ac <do_memp_free_pool.isra.5+0x40>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801599c:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801599e:	6812      	ldr	r2, [r2, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d0f7      	beq.n	8015994 <do_memp_free_pool.isra.5+0x28>
 80159a4:	681b      	ldr	r3, [r3, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	d1f5      	bne.n	8015996 <do_memp_free_pool.isra.5+0x2a>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80159aa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 80159ac:	4b08      	ldr	r3, [pc, #32]	; (80159d0 <do_memp_free_pool.isra.5+0x64>)
 80159ae:	f240 1285 	movw	r2, #389	; 0x185
 80159b2:	4908      	ldr	r1, [pc, #32]	; (80159d4 <do_memp_free_pool.isra.5+0x68>)
 80159b4:	4808      	ldr	r0, [pc, #32]	; (80159d8 <do_memp_free_pool.isra.5+0x6c>)
}
 80159b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 80159ba:	f00a bded 	b.w	8020598 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80159be:	4b04      	ldr	r3, [pc, #16]	; (80159d0 <do_memp_free_pool.isra.5+0x64>)
 80159c0:	f240 126d 	movw	r2, #365	; 0x16d
 80159c4:	4905      	ldr	r1, [pc, #20]	; (80159dc <do_memp_free_pool.isra.5+0x70>)
 80159c6:	4804      	ldr	r0, [pc, #16]	; (80159d8 <do_memp_free_pool.isra.5+0x6c>)
 80159c8:	f00a fde6 	bl	8020598 <iprintf>
 80159cc:	e7d4      	b.n	8015978 <do_memp_free_pool.isra.5+0xc>
 80159ce:	bf00      	nop
 80159d0:	0803cdcc 	.word	0x0803cdcc
 80159d4:	0803cdc0 	.word	0x0803cdc0
 80159d8:	08026544 	.word	0x08026544
 80159dc:	0803cda0 	.word	0x0803cda0

080159e0 <memp_init_pool>:
{
 80159e0:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 80159e2:	2200      	movs	r2, #0
{
 80159e4:	4605      	mov	r5, r0
  *desc->tab = NULL;
 80159e6:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 80159ea:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 80159ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 80159ee:	b1a8      	cbz	r0, 8015a1c <memp_init_pool+0x3c>
 80159f0:	3403      	adds	r4, #3
 80159f2:	8929      	ldrh	r1, [r5, #8]
 80159f4:	4616      	mov	r6, r2
 80159f6:	f024 0403 	bic.w	r4, r4, #3
 80159fa:	e001      	b.n	8015a00 <memp_init_pool+0x20>
 80159fc:	692b      	ldr	r3, [r5, #16]
 80159fe:	681a      	ldr	r2, [r3, #0]
    memp->next = *desc->tab;
 8015a00:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8015a02:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 8015a06:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8015a08:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8015a0a:	f7ff fc13 	bl	8015234 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015a0e:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 8015a10:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8015a12:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 8015a16:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015a18:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 8015a1a:	dcef      	bgt.n	80159fc <memp_init_pool+0x1c>
  desc->stats->name  = desc->desc;
 8015a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
  desc->stats->avail = desc->num;
 8015a20:	80d8      	strh	r0, [r3, #6]
  desc->stats->name  = desc->desc;
 8015a22:	601a      	str	r2, [r3, #0]
}
 8015a24:	bd70      	pop	{r4, r5, r6, pc}
 8015a26:	bf00      	nop

08015a28 <memp_init>:
{
 8015a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a2a:	4c0a      	ldr	r4, [pc, #40]	; (8015a54 <memp_init+0x2c>)
 8015a2c:	4e0a      	ldr	r6, [pc, #40]	; (8015a58 <memp_init+0x30>)
 8015a2e:	f104 0740 	add.w	r7, r4, #64	; 0x40
 8015a32:	4d0a      	ldr	r5, [pc, #40]	; (8015a5c <memp_init+0x34>)
 8015a34:	e001      	b.n	8015a3a <memp_init+0x12>
 8015a36:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	f7ff ffd0 	bl	80159e0 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8015a40:	686b      	ldr	r3, [r5, #4]
 8015a42:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015a46:	42bc      	cmp	r4, r7
 8015a48:	d1f5      	bne.n	8015a36 <memp_init+0xe>
}
 8015a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 8015a4e:	f7ff bf31 	b.w	80158b4 <memp_overflow_check_all>
 8015a52:	bf00      	nop
 8015a54:	200362a4 	.word	0x200362a4
 8015a58:	0803cfa8 	.word	0x0803cfa8
 8015a5c:	0803ceac 	.word	0x0803ceac

08015a60 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015a60:	280f      	cmp	r0, #15
{
 8015a62:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015a64:	d80f      	bhi.n	8015a86 <memp_malloc_fn+0x26>
 8015a66:	460d      	mov	r5, r1
 8015a68:	4616      	mov	r6, r2
 8015a6a:	4604      	mov	r4, r0
  memp_overflow_check_all();
 8015a6c:	f7ff ff22 	bl	80158b4 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8015a70:	4909      	ldr	r1, [pc, #36]	; (8015a98 <memp_malloc_fn+0x38>)
 8015a72:	4633      	mov	r3, r6
 8015a74:	462a      	mov	r2, r5
 8015a76:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8015a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8015a7e:	6901      	ldr	r1, [r0, #16]
 8015a80:	3004      	adds	r0, #4
 8015a82:	f7ff bf47 	b.w	8015914 <do_memp_malloc_pool_fn.isra.3>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015a86:	4b05      	ldr	r3, [pc, #20]	; (8015a9c <memp_malloc_fn+0x3c>)
 8015a88:	f240 1257 	movw	r2, #343	; 0x157
 8015a8c:	4904      	ldr	r1, [pc, #16]	; (8015aa0 <memp_malloc_fn+0x40>)
 8015a8e:	4805      	ldr	r0, [pc, #20]	; (8015aa4 <memp_malloc_fn+0x44>)
 8015a90:	f00a fd82 	bl	8020598 <iprintf>
}
 8015a94:	2000      	movs	r0, #0
 8015a96:	bd70      	pop	{r4, r5, r6, pc}
 8015a98:	0803cfa4 	.word	0x0803cfa4
 8015a9c:	0803cdcc 	.word	0x0803cdcc
 8015aa0:	0803cf7c 	.word	0x0803cf7c
 8015aa4:	08026544 	.word	0x08026544

08015aa8 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015aa8:	280f      	cmp	r0, #15
 8015aaa:	d811      	bhi.n	8015ad0 <memp_free+0x28>

  if (mem == NULL) {
 8015aac:	b179      	cbz	r1, 8015ace <memp_free+0x26>
{
 8015aae:	b570      	push	{r4, r5, r6, lr}
 8015ab0:	460d      	mov	r5, r1
 8015ab2:	4604      	mov	r4, r0
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 8015ab4:	f7ff fefe 	bl	80158b4 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015ab8:	4b09      	ldr	r3, [pc, #36]	; (8015ae0 <memp_free+0x38>)
 8015aba:	462a      	mov	r2, r5
 8015abc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8015ac4:	f100 0110 	add.w	r1, r0, #16
 8015ac8:	3004      	adds	r0, #4
 8015aca:	f7ff bf4f 	b.w	801596c <do_memp_free_pool.isra.5>
 8015ace:	4770      	bx	lr
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015ad0:	4b04      	ldr	r3, [pc, #16]	; (8015ae4 <memp_free+0x3c>)
 8015ad2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015ad6:	4904      	ldr	r1, [pc, #16]	; (8015ae8 <memp_free+0x40>)
 8015ad8:	4804      	ldr	r0, [pc, #16]	; (8015aec <memp_free+0x44>)
 8015ada:	f00a bd5d 	b.w	8020598 <iprintf>
 8015ade:	bf00      	nop
 8015ae0:	0803cfa4 	.word	0x0803cfa4
 8015ae4:	0803cdcc 	.word	0x0803cdcc
 8015ae8:	0803cf60 	.word	0x0803cf60
 8015aec:	08026544 	.word	0x08026544

08015af0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8015af0:	f06f 000b 	mvn.w	r0, #11
 8015af4:	4770      	bx	lr
 8015af6:	bf00      	nop

08015af8 <netif_issue_reports>:
{
 8015af8:	b538      	push	{r3, r4, r5, lr}
 8015afa:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015afc:	4604      	mov	r4, r0
 8015afe:	b198      	cbz	r0, 8015b28 <netif_issue_reports+0x30>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015b00:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8015b04:	f003 0205 	and.w	r2, r3, #5
 8015b08:	2a05      	cmp	r2, #5
 8015b0a:	d000      	beq.n	8015b0e <netif_issue_reports+0x16>
}
 8015b0c:	bd38      	pop	{r3, r4, r5, pc}
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015b0e:	07ea      	lsls	r2, r5, #31
 8015b10:	d5fc      	bpl.n	8015b0c <netif_issue_reports+0x14>
 8015b12:	6862      	ldr	r2, [r4, #4]
 8015b14:	2a00      	cmp	r2, #0
 8015b16:	d0f9      	beq.n	8015b0c <netif_issue_reports+0x14>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015b18:	071b      	lsls	r3, r3, #28
 8015b1a:	d5f7      	bpl.n	8015b0c <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 8015b1c:	1d21      	adds	r1, r4, #4
 8015b1e:	4620      	mov	r0, r4
}
 8015b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8015b24:	f007 bf1e 	b.w	801d964 <etharp_request>
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015b28:	4b03      	ldr	r3, [pc, #12]	; (8015b38 <netif_issue_reports+0x40>)
 8015b2a:	f240 326d 	movw	r2, #877	; 0x36d
 8015b2e:	4903      	ldr	r1, [pc, #12]	; (8015b3c <netif_issue_reports+0x44>)
 8015b30:	4803      	ldr	r0, [pc, #12]	; (8015b40 <netif_issue_reports+0x48>)
 8015b32:	f00a fd31 	bl	8020598 <iprintf>
 8015b36:	e7e3      	b.n	8015b00 <netif_issue_reports+0x8>
 8015b38:	0803d12c 	.word	0x0803d12c
 8015b3c:	0803d160 	.word	0x0803d160
 8015b40:	08026544 	.word	0x08026544

08015b44 <netif_do_set_ipaddr>:
{
 8015b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b46:	4604      	mov	r4, r0
 8015b48:	b083      	sub	sp, #12
 8015b4a:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015b4c:	460d      	mov	r5, r1
 8015b4e:	b319      	cbz	r1, 8015b98 <netif_do_set_ipaddr+0x54>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015b50:	6863      	ldr	r3, [r4, #4]
 8015b52:	682a      	ldr	r2, [r5, #0]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d01c      	beq.n	8015b92 <netif_do_set_ipaddr+0x4e>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015b58:	ae02      	add	r6, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015b5a:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015b5c:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015b5e:	f846 2d04 	str.w	r2, [r6, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015b62:	4631      	mov	r1, r6
 8015b64:	f002 fa36 	bl	8017fd4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015b68:	4631      	mov	r1, r6
 8015b6a:	4638      	mov	r0, r7
 8015b6c:	f005 ff16 	bl	801b99c <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8015b70:	4631      	mov	r1, r6
 8015b72:	4638      	mov	r0, r7
 8015b74:	f000 feae 	bl	80168d4 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015b78:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015b7a:	2101      	movs	r1, #1
 8015b7c:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015b7e:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015b80:	f7ff ffba 	bl	8015af8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 8015b84:	69e3      	ldr	r3, [r4, #28]
 8015b86:	b10b      	cbz	r3, 8015b8c <netif_do_set_ipaddr+0x48>
 8015b88:	4620      	mov	r0, r4
 8015b8a:	4798      	blx	r3
    return 1; /* address changed */
 8015b8c:	2001      	movs	r0, #1
}
 8015b8e:	b003      	add	sp, #12
 8015b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0; /* address unchanged */
 8015b92:	2000      	movs	r0, #0
}
 8015b94:	b003      	add	sp, #12
 8015b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015b98:	4b03      	ldr	r3, [pc, #12]	; (8015ba8 <netif_do_set_ipaddr+0x64>)
 8015b9a:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015b9e:	4903      	ldr	r1, [pc, #12]	; (8015bac <netif_do_set_ipaddr+0x68>)
 8015ba0:	4803      	ldr	r0, [pc, #12]	; (8015bb0 <netif_do_set_ipaddr+0x6c>)
 8015ba2:	f00a fcf9 	bl	8020598 <iprintf>
 8015ba6:	e7d3      	b.n	8015b50 <netif_do_set_ipaddr+0xc>
 8015ba8:	0803d12c 	.word	0x0803d12c
 8015bac:	0803d11c 	.word	0x0803d11c
 8015bb0:	08026544 	.word	0x08026544

08015bb4 <netif_init>:
}
 8015bb4:	4770      	bx	lr
 8015bb6:	bf00      	nop

08015bb8 <netif_set_addr>:
{
 8015bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8015bba:	4c14      	ldr	r4, [pc, #80]	; (8015c0c <netif_set_addr+0x54>)
{
 8015bbc:	b083      	sub	sp, #12
 8015bbe:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 8015bc0:	2900      	cmp	r1, #0
 8015bc2:	bf14      	ite	ne
 8015bc4:	460e      	movne	r6, r1
 8015bc6:	4626      	moveq	r6, r4
    netmask = IP4_ADDR_ANY4;
 8015bc8:	2a00      	cmp	r2, #0
 8015bca:	bf14      	ite	ne
 8015bcc:	4617      	movne	r7, r2
 8015bce:	4627      	moveq	r7, r4
    gw = IP4_ADDR_ANY4;
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	bf18      	it	ne
 8015bd4:	461c      	movne	r4, r3
  remove = ip4_addr_isany(ipaddr);
 8015bd6:	6833      	ldr	r3, [r6, #0]
 8015bd8:	b193      	cbz	r3, 8015c00 <netif_set_addr+0x48>
 8015bda:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	68a9      	ldr	r1, [r5, #8]
 8015be0:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015be2:	68e9      	ldr	r1, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015be4:	bf18      	it	ne
 8015be6:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015bec:	bf18      	it	ne
 8015bee:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 8015bf0:	b922      	cbnz	r2, 8015bfc <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015bf2:	4631      	mov	r1, r6
 8015bf4:	4628      	mov	r0, r5
 8015bf6:	aa01      	add	r2, sp, #4
 8015bf8:	f7ff ffa4 	bl	8015b44 <netif_do_set_ipaddr>
}
 8015bfc:	b003      	add	sp, #12
 8015bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015c00:	aa01      	add	r2, sp, #4
 8015c02:	4631      	mov	r1, r6
 8015c04:	f7ff ff9e 	bl	8015b44 <netif_do_set_ipaddr>
 8015c08:	2201      	movs	r2, #1
 8015c0a:	e7e7      	b.n	8015bdc <netif_set_addr+0x24>
 8015c0c:	0803f460 	.word	0x0803f460

08015c10 <netif_add>:
{
 8015c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015c16:	4606      	mov	r6, r0
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	f000 8087 	beq.w	8015d2c <netif_add+0x11c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015c1e:	2f00      	cmp	r7, #0
 8015c20:	d07b      	beq.n	8015d1a <netif_add+0x10a>
 8015c22:	4688      	mov	r8, r1
  netif->num = netif_num;
 8015c24:	f8df b130 	ldr.w	fp, [pc, #304]	; 8015d58 <netif_add+0x148>
  netif->state = state;
 8015c28:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015c2a:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015c2c:	4d44      	ldr	r5, [pc, #272]	; (8015d40 <netif_add+0x130>)
  netif->state = state;
 8015c2e:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 8015c30:	f89b e000 	ldrb.w	lr, [fp]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c34:	42a3      	cmp	r3, r4
 8015c36:	bf08      	it	eq
 8015c38:	462b      	moveq	r3, r5
  netif->input = input;
 8015c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c3c:	42a2      	cmp	r2, r4
 8015c3e:	bf08      	it	eq
 8015c40:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 8015c42:	f8df c118 	ldr.w	ip, [pc, #280]	; 8015d5c <netif_add+0x14c>
  netif->input = input;
 8015c46:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c48:	45a0      	cmp	r8, r4
 8015c4a:	bf14      	ite	ne
 8015c4c:	4641      	movne	r1, r8
 8015c4e:	4629      	moveq	r1, r5
  netif->num = netif_num;
 8015c50:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 8015c54:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 8015c56:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 8015c58:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015c5c:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 8015c5e:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015c62:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 8015c66:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015c6a:	f7ff ffa5 	bl	8015bb8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8015c6e:	4630      	mov	r0, r6
 8015c70:	47b8      	blx	r7
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d14f      	bne.n	8015d16 <netif_add+0x106>
 8015c76:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8015c7a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8015d60 <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015c7e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8015d4c <netif_add+0x13c>
 8015c82:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8015d64 <netif_add+0x154>
 8015c86:	4f2f      	ldr	r7, [pc, #188]	; (8015d44 <netif_add+0x134>)
      if (netif->num == 255) {
 8015c88:	2bff      	cmp	r3, #255	; 0xff
 8015c8a:	d102      	bne.n	8015c92 <netif_add+0x82>
        netif->num = 0;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015c92:	f8d9 4000 	ldr.w	r4, [r9]
 8015c96:	b3b4      	cbz	r4, 8015d06 <netif_add+0xf6>
      num_netifs = 0;
 8015c98:	2500      	movs	r5, #0
 8015c9a:	e007      	b.n	8015cac <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8015c9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015ca0:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	d014      	beq.n	8015cd2 <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015ca8:	6824      	ldr	r4, [r4, #0]
 8015caa:	b1fc      	cbz	r4, 8015cec <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015cac:	42a6      	cmp	r6, r4
        num_netifs++;
 8015cae:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015cb2:	d013      	beq.n	8015cdc <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015cb4:	2dff      	cmp	r5, #255	; 0xff
 8015cb6:	ddf1      	ble.n	8015c9c <netif_add+0x8c>
 8015cb8:	4643      	mov	r3, r8
 8015cba:	f240 128d 	movw	r2, #397	; 0x18d
 8015cbe:	4922      	ldr	r1, [pc, #136]	; (8015d48 <netif_add+0x138>)
 8015cc0:	4638      	mov	r0, r7
 8015cc2:	f00a fc69 	bl	8020598 <iprintf>
        if (netif2->num == netif->num) {
 8015cc6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015cca:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8015cce:	4293      	cmp	r3, r2
 8015cd0:	d1ea      	bne.n	8015ca8 <netif_add+0x98>
          netif->num++;
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8015cda:	e7d5      	b.n	8015c88 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015cdc:	4643      	mov	r3, r8
 8015cde:	f240 128b 	movw	r2, #395	; 0x18b
 8015ce2:	4651      	mov	r1, sl
 8015ce4:	4638      	mov	r0, r7
 8015ce6:	f00a fc57 	bl	8020598 <iprintf>
 8015cea:	e7e3      	b.n	8015cb4 <netif_add+0xa4>
  if (netif->num == 254) {
 8015cec:	2afe      	cmp	r2, #254	; 0xfe
 8015cee:	f8d9 4000 	ldr.w	r4, [r9]
 8015cf2:	d00c      	beq.n	8015d0e <netif_add+0xfe>
    netif_num = (u8_t)(netif->num + 1);
 8015cf4:	3201      	adds	r2, #1
 8015cf6:	f88b 2000 	strb.w	r2, [fp]
  return netif;
 8015cfa:	4630      	mov	r0, r6
  netif->next = netif_list;
 8015cfc:	6034      	str	r4, [r6, #0]
  netif_list = netif;
 8015cfe:	f8c9 6000 	str.w	r6, [r9]
}
 8015d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
  if (netif->num == 254) {
 8015d0a:	2afe      	cmp	r2, #254	; 0xfe
 8015d0c:	d1f2      	bne.n	8015cf4 <netif_add+0xe4>
    netif_num = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	f88b 3000 	strb.w	r3, [fp]
 8015d14:	e7f1      	b.n	8015cfa <netif_add+0xea>
    return NULL;
 8015d16:	4620      	mov	r0, r4
 8015d18:	e7f3      	b.n	8015d02 <netif_add+0xf2>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015d1a:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <netif_add+0x13c>)
 8015d1c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015d20:	490b      	ldr	r1, [pc, #44]	; (8015d50 <netif_add+0x140>)
 8015d22:	4808      	ldr	r0, [pc, #32]	; (8015d44 <netif_add+0x134>)
 8015d24:	f00a fc38 	bl	8020598 <iprintf>
 8015d28:	4638      	mov	r0, r7
 8015d2a:	e7ea      	b.n	8015d02 <netif_add+0xf2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015d2c:	4b07      	ldr	r3, [pc, #28]	; (8015d4c <netif_add+0x13c>)
 8015d2e:	f240 1227 	movw	r2, #295	; 0x127
 8015d32:	4908      	ldr	r1, [pc, #32]	; (8015d54 <netif_add+0x144>)
 8015d34:	4803      	ldr	r0, [pc, #12]	; (8015d44 <netif_add+0x134>)
 8015d36:	f00a fc2f 	bl	8020598 <iprintf>
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	e7e1      	b.n	8015d02 <netif_add+0xf2>
 8015d3e:	bf00      	nop
 8015d40:	0803f460 	.word	0x0803f460
 8015d44:	08026544 	.word	0x08026544
 8015d48:	0803d0ec 	.word	0x0803d0ec
 8015d4c:	0803d12c 	.word	0x0803d12c
 8015d50:	0803d0b4 	.word	0x0803d0b4
 8015d54:	0803d098 	.word	0x0803d098
 8015d58:	200223dc 	.word	0x200223dc
 8015d5c:	08015af1 	.word	0x08015af1
 8015d60:	200361e0 	.word	0x200361e0
 8015d64:	0803d0d8 	.word	0x0803d0d8

08015d68 <netif_set_default>:
  netif_default = netif;
 8015d68:	4b01      	ldr	r3, [pc, #4]	; (8015d70 <netif_set_default+0x8>)
 8015d6a:	6018      	str	r0, [r3, #0]
}
 8015d6c:	4770      	bx	lr
 8015d6e:	bf00      	nop
 8015d70:	200361e4 	.word	0x200361e4

08015d74 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015d74:	b198      	cbz	r0, 8015d9e <netif_set_up+0x2a>
{
 8015d76:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015d78:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	07d3      	lsls	r3, r2, #31
 8015d80:	d40c      	bmi.n	8015d9c <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015d82:	f042 0201 	orr.w	r2, r2, #1
    NETIF_STATUS_CALLBACK(netif);
 8015d86:	69c3      	ldr	r3, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015d88:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8015d8c:	b103      	cbz	r3, 8015d90 <netif_set_up+0x1c>
 8015d8e:	4798      	blx	r3
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015d90:	4620      	mov	r0, r4
 8015d92:	2103      	movs	r1, #3
}
 8015d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015d98:	f7ff beae 	b.w	8015af8 <netif_issue_reports>
}
 8015d9c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015d9e:	4b03      	ldr	r3, [pc, #12]	; (8015dac <netif_set_up+0x38>)
 8015da0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015da4:	4902      	ldr	r1, [pc, #8]	; (8015db0 <netif_set_up+0x3c>)
 8015da6:	4803      	ldr	r0, [pc, #12]	; (8015db4 <netif_set_up+0x40>)
 8015da8:	f00a bbf6 	b.w	8020598 <iprintf>
 8015dac:	0803d12c 	.word	0x0803d12c
 8015db0:	0803d1ec 	.word	0x0803d1ec
 8015db4:	08026544 	.word	0x08026544

08015db8 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015db8:	b190      	cbz	r0, 8015de0 <netif_set_down+0x28>
{
 8015dba:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8015dbc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8015dc0:	4604      	mov	r4, r0
 8015dc2:	07d1      	lsls	r1, r2, #31
 8015dc4:	d50b      	bpl.n	8015dde <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8015dc6:	f022 0301 	bic.w	r3, r2, #1
 8015dca:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8015dce:	0713      	lsls	r3, r2, #28
 8015dd0:	d40d      	bmi.n	8015dee <netif_set_down+0x36>
    NETIF_STATUS_CALLBACK(netif);
 8015dd2:	69e3      	ldr	r3, [r4, #28]
 8015dd4:	b11b      	cbz	r3, 8015dde <netif_set_down+0x26>
 8015dd6:	4620      	mov	r0, r4
}
 8015dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8015ddc:	4718      	bx	r3
}
 8015dde:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015de0:	4b04      	ldr	r3, [pc, #16]	; (8015df4 <netif_set_down+0x3c>)
 8015de2:	f240 329b 	movw	r2, #923	; 0x39b
 8015de6:	4904      	ldr	r1, [pc, #16]	; (8015df8 <netif_set_down+0x40>)
 8015de8:	4804      	ldr	r0, [pc, #16]	; (8015dfc <netif_set_down+0x44>)
 8015dea:	f00a bbd5 	b.w	8020598 <iprintf>
      etharp_cleanup_netif(netif);
 8015dee:	f007 fb0f 	bl	801d410 <etharp_cleanup_netif>
 8015df2:	e7ee      	b.n	8015dd2 <netif_set_down+0x1a>
 8015df4:	0803d12c 	.word	0x0803d12c
 8015df8:	0803d184 	.word	0x0803d184
 8015dfc:	08026544 	.word	0x08026544

08015e00 <netif_set_status_callback>:
  if (netif) {
 8015e00:	b100      	cbz	r0, 8015e04 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 8015e02:	61c1      	str	r1, [r0, #28]
}
 8015e04:	4770      	bx	lr
 8015e06:	bf00      	nop

08015e08 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015e08:	b1b8      	cbz	r0, 8015e3a <netif_set_link_up+0x32>
{
 8015e0a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8015e0c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8015e10:	4604      	mov	r4, r0
 8015e12:	0753      	lsls	r3, r2, #29
 8015e14:	d500      	bpl.n	8015e18 <netif_set_link_up+0x10>
}
 8015e16:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8015e18:	f042 0204 	orr.w	r2, r2, #4
 8015e1c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 8015e20:	f006 fde0 	bl	801c9e4 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015e24:	2103      	movs	r1, #3
 8015e26:	4620      	mov	r0, r4
 8015e28:	f7ff fe66 	bl	8015af8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8015e2c:	6a23      	ldr	r3, [r4, #32]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d0f1      	beq.n	8015e16 <netif_set_link_up+0xe>
 8015e32:	4620      	mov	r0, r4
}
 8015e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8015e38:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015e3a:	4b03      	ldr	r3, [pc, #12]	; (8015e48 <netif_set_link_up+0x40>)
 8015e3c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015e40:	4902      	ldr	r1, [pc, #8]	; (8015e4c <netif_set_link_up+0x44>)
 8015e42:	4803      	ldr	r0, [pc, #12]	; (8015e50 <netif_set_link_up+0x48>)
 8015e44:	f00a bba8 	b.w	8020598 <iprintf>
 8015e48:	0803d12c 	.word	0x0803d12c
 8015e4c:	0803d1c8 	.word	0x0803d1c8
 8015e50:	08026544 	.word	0x08026544

08015e54 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015e54:	b158      	cbz	r0, 8015e6e <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015e56:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8015e5a:	0759      	lsls	r1, r3, #29
 8015e5c:	d506      	bpl.n	8015e6c <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015e5e:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 8015e62:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015e64:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8015e68:	b101      	cbz	r1, 8015e6c <netif_set_link_down+0x18>
 8015e6a:	4708      	bx	r1
}
 8015e6c:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015e6e:	4b03      	ldr	r3, [pc, #12]	; (8015e7c <netif_set_link_down+0x28>)
 8015e70:	f240 4206 	movw	r2, #1030	; 0x406
 8015e74:	4902      	ldr	r1, [pc, #8]	; (8015e80 <netif_set_link_down+0x2c>)
 8015e76:	4803      	ldr	r0, [pc, #12]	; (8015e84 <netif_set_link_down+0x30>)
 8015e78:	f00a bb8e 	b.w	8020598 <iprintf>
 8015e7c:	0803d12c 	.word	0x0803d12c
 8015e80:	0803d1a4 	.word	0x0803d1a4
 8015e84:	08026544 	.word	0x08026544

08015e88 <netif_set_link_callback>:
  if (netif) {
 8015e88:	b100      	cbz	r0, 8015e8c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8015e8a:	6201      	str	r1, [r0, #32]
}
 8015e8c:	4770      	bx	lr
 8015e8e:	bf00      	nop

08015e90 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015e90:	b1a0      	cbz	r0, 8015ebc <netif_get_by_index+0x2c>
    NETIF_FOREACH(netif) {
 8015e92:	4b0b      	ldr	r3, [pc, #44]	; (8015ec0 <netif_get_by_index+0x30>)
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	b17a      	cbz	r2, 8015eb8 <netif_get_by_index+0x28>
      if (idx == netif_get_index(netif)) {
 8015e98:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	4298      	cmp	r0, r3
 8015ea2:	d106      	bne.n	8015eb2 <netif_get_by_index+0x22>
 8015ea4:	e008      	b.n	8015eb8 <netif_get_by_index+0x28>
 8015ea6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8015eaa:	3301      	adds	r3, #1
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	4283      	cmp	r3, r0
 8015eb0:	d002      	beq.n	8015eb8 <netif_get_by_index+0x28>
    NETIF_FOREACH(netif) {
 8015eb2:	6812      	ldr	r2, [r2, #0]
 8015eb4:	2a00      	cmp	r2, #0
 8015eb6:	d1f6      	bne.n	8015ea6 <netif_get_by_index+0x16>
      }
    }
  }

  return NULL;
}
 8015eb8:	4610      	mov	r0, r2
 8015eba:	4770      	bx	lr
  return NULL;
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	e7fb      	b.n	8015eb8 <netif_get_by_index+0x28>
 8015ec0:	200361e0 	.word	0x200361e0

08015ec4 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015ec4:	4907      	ldr	r1, [pc, #28]	; (8015ee4 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015eca:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015ecc:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015ece:	b910      	cbnz	r0, 8015ed6 <pbuf_free_ooseq_callback+0x12>
 8015ed0:	e006      	b.n	8015ee0 <pbuf_free_ooseq_callback+0x1c>
 8015ed2:	68c0      	ldr	r0, [r0, #12]
 8015ed4:	b120      	cbz	r0, 8015ee0 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 8015ed6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d0fa      	beq.n	8015ed2 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015edc:	f002 b8a4 	b.w	8018028 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8015ee0:	4770      	bx	lr
 8015ee2:	bf00      	nop
 8015ee4:	200362fc 	.word	0x200362fc
 8015ee8:	200361e8 	.word	0x200361e8

08015eec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015eec:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015eee:	b308      	cbz	r0, 8015f34 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015ef0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8015ef4:	d21b      	bcs.n	8015f2e <pbuf_add_header_impl+0x42>
    return 1;
  }
  if (header_size_increment == 0) {
 8015ef6:	b191      	cbz	r1, 8015f1e <pbuf_add_header_impl+0x32>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015ef8:	b28c      	uxth	r4, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015efa:	8903      	ldrh	r3, [r0, #8]
 8015efc:	4423      	add	r3, r4
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	429c      	cmp	r4, r3
 8015f02:	d814      	bhi.n	8015f2e <pbuf_add_header_impl+0x42>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015f04:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8015f08:	2d00      	cmp	r5, #0
 8015f0a:	db0a      	blt.n	8015f22 <pbuf_add_header_impl+0x36>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015f0c:	b17a      	cbz	r2, 8015f2e <pbuf_add_header_impl+0x42>
      payload = (u8_t *)p->payload - header_size_increment;
 8015f0e:	6842      	ldr	r2, [r0, #4]
 8015f10:	1a52      	subs	r2, r2, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8015f12:	8945      	ldrh	r5, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 8015f14:	2100      	movs	r1, #0
  p->payload = payload;
 8015f16:	6042      	str	r2, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015f18:	442c      	add	r4, r5
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015f1a:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015f1c:	8144      	strh	r4, [r0, #10]
}
 8015f1e:	4608      	mov	r0, r1
 8015f20:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8015f22:	6842      	ldr	r2, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015f24:	f100 0510 	add.w	r5, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 8015f28:	1a52      	subs	r2, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015f2a:	42aa      	cmp	r2, r5
 8015f2c:	d2f1      	bcs.n	8015f12 <pbuf_add_header_impl+0x26>
    return 1;
 8015f2e:	2101      	movs	r1, #1
}
 8015f30:	4608      	mov	r0, r1
 8015f32:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8015f34:	4b04      	ldr	r3, [pc, #16]	; (8015f48 <pbuf_add_header_impl+0x5c>)
 8015f36:	f240 12df 	movw	r2, #479	; 0x1df
 8015f3a:	4904      	ldr	r1, [pc, #16]	; (8015f4c <pbuf_add_header_impl+0x60>)
 8015f3c:	4804      	ldr	r0, [pc, #16]	; (8015f50 <pbuf_add_header_impl+0x64>)
 8015f3e:	f00a fb2b 	bl	8020598 <iprintf>
    return 1;
 8015f42:	2101      	movs	r1, #1
}
 8015f44:	4608      	mov	r0, r1
 8015f46:	bd38      	pop	{r3, r4, r5, pc}
 8015f48:	0803d208 	.word	0x0803d208
 8015f4c:	0803ee14 	.word	0x0803ee14
 8015f50:	08026544 	.word	0x08026544

08015f54 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015f54:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8015f58:	2b01      	cmp	r3, #1
{
 8015f5a:	b570      	push	{r4, r5, r6, lr}
 8015f5c:	4614      	mov	r4, r2
 8015f5e:	4606      	mov	r6, r0
 8015f60:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015f62:	d111      	bne.n	8015f88 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015f64:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8015f68:	490b      	ldr	r1, [pc, #44]	; (8015f98 <pbuf_alloc_reference+0x44>)
 8015f6a:	200e      	movs	r0, #14
 8015f6c:	f7ff fd78 	bl	8015a60 <memp_malloc_fn>
  if (p == NULL) {
 8015f70:	b148      	cbz	r0, 8015f86 <pbuf_alloc_reference+0x32>
  p->next = NULL;
 8015f72:	2300      	movs	r3, #0
  p->ref = 1;
 8015f74:	2201      	movs	r2, #1
  p->payload = payload;
 8015f76:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8015f78:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8015f7a:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8015f7c:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 8015f7e:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 8015f80:	7343      	strb	r3, [r0, #13]
  p->if_idx = NETIF_NO_INDEX;
 8015f82:	73c3      	strb	r3, [r0, #15]
  p->ref = 1;
 8015f84:	7382      	strb	r2, [r0, #14]
}
 8015f86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015f88:	4b03      	ldr	r3, [pc, #12]	; (8015f98 <pbuf_alloc_reference+0x44>)
 8015f8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015f8e:	4903      	ldr	r1, [pc, #12]	; (8015f9c <pbuf_alloc_reference+0x48>)
 8015f90:	4803      	ldr	r0, [pc, #12]	; (8015fa0 <pbuf_alloc_reference+0x4c>)
 8015f92:	f00a fb01 	bl	8020598 <iprintf>
 8015f96:	e7e5      	b.n	8015f64 <pbuf_alloc_reference+0x10>
 8015f98:	0803d208 	.word	0x0803d208
 8015f9c:	0803d254 	.word	0x0803d254
 8015fa0:	08026544 	.word	0x08026544

08015fa4 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015fa4:	3003      	adds	r0, #3
 8015fa6:	f020 0003 	bic.w	r0, r0, #3
{
 8015faa:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015fac:	180e      	adds	r6, r1, r0
{
 8015fae:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8015fb2:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015fb4:	42ae      	cmp	r6, r5
 8015fb6:	d80f      	bhi.n	8015fd8 <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 8015fb8:	b104      	cbz	r4, 8015fbc <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015fba:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015fbc:	4618      	mov	r0, r3
  p->flags = flags;
 8015fbe:	2602      	movs	r6, #2
  p->next = NULL;
 8015fc0:	2300      	movs	r3, #0
  p->ref = 1;
 8015fc2:	2501      	movs	r5, #1
  p->payload = payload;
 8015fc4:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8015fc6:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8015fc8:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8015fca:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8015fcc:	7346      	strb	r6, [r0, #13]
  p->ref = 1;
 8015fce:	7385      	strb	r5, [r0, #14]
  p->next = NULL;
 8015fd0:	6003      	str	r3, [r0, #0]
  p->if_idx = NETIF_NO_INDEX;
 8015fd2:	73c3      	strb	r3, [r0, #15]
}
 8015fd4:	bc70      	pop	{r4, r5, r6}
 8015fd6:	4770      	bx	lr
    return NULL;
 8015fd8:	2000      	movs	r0, #0
 8015fda:	e7fb      	b.n	8015fd4 <pbuf_alloced_custom+0x30>

08015fdc <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f7ff bf85 	b.w	8015eec <pbuf_add_header_impl>
 8015fe2:	bf00      	nop

08015fe4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015fe4:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015fe6:	b1a8      	cbz	r0, 8016014 <pbuf_remove_header+0x30>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015fe8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8015fec:	d20f      	bcs.n	801600e <pbuf_remove_header+0x2a>
    return 1;
  }
  if (header_size_decrement == 0) {
 8015fee:	b161      	cbz	r1, 801600a <pbuf_remove_header+0x26>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015ff0:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015ff2:	8943      	ldrh	r3, [r0, #10]
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	d317      	bcc.n	8016028 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015ff8:	6845      	ldr	r5, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015ffa:	1a9b      	subs	r3, r3, r2
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015ffc:	8904      	ldrh	r4, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015ffe:	440d      	add	r5, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016000:	2100      	movs	r1, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016002:	1aa2      	subs	r2, r4, r2
  p->len = (u16_t)(p->len - increment_magnitude);
 8016004:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016006:	6045      	str	r5, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016008:	8102      	strh	r2, [r0, #8]
}
 801600a:	4608      	mov	r0, r1
 801600c:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 801600e:	2101      	movs	r1, #1
}
 8016010:	4608      	mov	r0, r1
 8016012:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8016014:	4b09      	ldr	r3, [pc, #36]	; (801603c <pbuf_remove_header+0x58>)
 8016016:	f240 224b 	movw	r2, #587	; 0x24b
 801601a:	4909      	ldr	r1, [pc, #36]	; (8016040 <pbuf_remove_header+0x5c>)
 801601c:	4809      	ldr	r0, [pc, #36]	; (8016044 <pbuf_remove_header+0x60>)
 801601e:	f00a fabb 	bl	8020598 <iprintf>
    return 1;
 8016022:	2101      	movs	r1, #1
}
 8016024:	4608      	mov	r0, r1
 8016026:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016028:	4907      	ldr	r1, [pc, #28]	; (8016048 <pbuf_remove_header+0x64>)
 801602a:	f240 2255 	movw	r2, #597	; 0x255
 801602e:	4b03      	ldr	r3, [pc, #12]	; (801603c <pbuf_remove_header+0x58>)
 8016030:	4804      	ldr	r0, [pc, #16]	; (8016044 <pbuf_remove_header+0x60>)
 8016032:	f00a fab1 	bl	8020598 <iprintf>
 8016036:	2101      	movs	r1, #1
 8016038:	e7e7      	b.n	801600a <pbuf_remove_header+0x26>
 801603a:	bf00      	nop
 801603c:	0803d208 	.word	0x0803d208
 8016040:	0803ee14 	.word	0x0803ee14
 8016044:	08026544 	.word	0x08026544
 8016048:	0803d488 	.word	0x0803d488

0801604c <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 801604c:	1e0b      	subs	r3, r1, #0
 801604e:	db02      	blt.n	8016056 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8016050:	2201      	movs	r2, #1
 8016052:	f7ff bf4b 	b.w	8015eec <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016056:	4259      	negs	r1, r3
 8016058:	f7ff bfc4 	b.w	8015fe4 <pbuf_remove_header>

0801605c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016060:	4604      	mov	r4, r0
 8016062:	2800      	cmp	r0, #0
 8016064:	d050      	beq.n	8016108 <pbuf_free+0xac>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016066:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016068:	4f2d      	ldr	r7, [pc, #180]	; (8016120 <pbuf_free+0xc4>)
 801606a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8016134 <pbuf_free+0xd8>
 801606e:	4e2d      	ldr	r6, [pc, #180]	; (8016124 <pbuf_free+0xc8>)
 8016070:	e008      	b.n	8016084 <pbuf_free+0x28>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016072:	6923      	ldr	r3, [r4, #16]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d039      	beq.n	80160ec <pbuf_free+0x90>
        pc->custom_free_function(p);
 8016078:	4620      	mov	r0, r4
 801607a:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801607c:	3501      	adds	r5, #1
  while (p != NULL) {
 801607e:	464c      	mov	r4, r9
      count++;
 8016080:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8016082:	b1d4      	cbz	r4, 80160ba <pbuf_free+0x5e>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016084:	7ba3      	ldrb	r3, [r4, #14]
 8016086:	b1db      	cbz	r3, 80160c0 <pbuf_free+0x64>
    ref = --(p->ref);
 8016088:	3b01      	subs	r3, #1
 801608a:	b2db      	uxtb	r3, r3
 801608c:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801608e:	b9a3      	cbnz	r3, 80160ba <pbuf_free+0x5e>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016090:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8016092:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016096:	079b      	lsls	r3, r3, #30
 8016098:	d4eb      	bmi.n	8016072 <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801609a:	7b23      	ldrb	r3, [r4, #12]
 801609c:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80160a0:	2b02      	cmp	r3, #2
 80160a2:	d01e      	beq.n	80160e2 <pbuf_free+0x86>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	d02a      	beq.n	80160fe <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80160a8:	b99b      	cbnz	r3, 80160d2 <pbuf_free+0x76>
          mem_free(p);
 80160aa:	4620      	mov	r0, r4
      count++;
 80160ac:	3501      	adds	r5, #1
  while (p != NULL) {
 80160ae:	464c      	mov	r4, r9
          mem_free(p);
 80160b0:	f7ff f912 	bl	80152d8 <mem_free>
      count++;
 80160b4:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80160b6:	2c00      	cmp	r4, #0
 80160b8:	d1e4      	bne.n	8016084 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80160ba:	4628      	mov	r0, r5
 80160bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80160c0:	463b      	mov	r3, r7
 80160c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80160c6:	4641      	mov	r1, r8
 80160c8:	4630      	mov	r0, r6
 80160ca:	f00a fa65 	bl	8020598 <iprintf>
 80160ce:	7ba3      	ldrb	r3, [r4, #14]
 80160d0:	e7da      	b.n	8016088 <pbuf_free+0x2c>
          LWIP_ASSERT("invalid pbuf type", 0);
 80160d2:	463b      	mov	r3, r7
 80160d4:	f240 320f 	movw	r2, #783	; 0x30f
 80160d8:	4913      	ldr	r1, [pc, #76]	; (8016128 <pbuf_free+0xcc>)
 80160da:	4630      	mov	r0, r6
 80160dc:	f00a fa5c 	bl	8020598 <iprintf>
 80160e0:	e7cc      	b.n	801607c <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 80160e2:	4621      	mov	r1, r4
 80160e4:	200f      	movs	r0, #15
 80160e6:	f7ff fcdf 	bl	8015aa8 <memp_free>
 80160ea:	e7c7      	b.n	801607c <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80160ec:	463b      	mov	r3, r7
 80160ee:	f240 22ff 	movw	r2, #767	; 0x2ff
 80160f2:	490e      	ldr	r1, [pc, #56]	; (801612c <pbuf_free+0xd0>)
 80160f4:	4630      	mov	r0, r6
 80160f6:	f00a fa4f 	bl	8020598 <iprintf>
 80160fa:	6923      	ldr	r3, [r4, #16]
 80160fc:	e7bc      	b.n	8016078 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 80160fe:	4621      	mov	r1, r4
 8016100:	200e      	movs	r0, #14
 8016102:	f7ff fcd1 	bl	8015aa8 <memp_free>
 8016106:	e7b9      	b.n	801607c <pbuf_free+0x20>
    return 0;
 8016108:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801610a:	4b05      	ldr	r3, [pc, #20]	; (8016120 <pbuf_free+0xc4>)
 801610c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8016110:	4907      	ldr	r1, [pc, #28]	; (8016130 <pbuf_free+0xd4>)
 8016112:	4804      	ldr	r0, [pc, #16]	; (8016124 <pbuf_free+0xc8>)
 8016114:	f00a fa40 	bl	8020598 <iprintf>
}
 8016118:	4628      	mov	r0, r5
 801611a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801611e:	bf00      	nop
 8016120:	0803d208 	.word	0x0803d208
 8016124:	08026544 	.word	0x08026544
 8016128:	0803d414 	.word	0x0803d414
 801612c:	0803d3f0 	.word	0x0803d3f0
 8016130:	0803ee14 	.word	0x0803ee14
 8016134:	0803d3d8 	.word	0x0803d3d8

08016138 <pbuf_alloc>:
  switch (type) {
 8016138:	2a41      	cmp	r2, #65	; 0x41
{
 801613a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801613e:	4688      	mov	r8, r1
  switch (type) {
 8016140:	d06a      	beq.n	8016218 <pbuf_alloc+0xe0>
 8016142:	d95c      	bls.n	80161fe <pbuf_alloc+0xc6>
 8016144:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8016148:	fa1f f980 	uxth.w	r9, r0
 801614c:	d027      	beq.n	801619e <pbuf_alloc+0x66>
 801614e:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8016152:	d156      	bne.n	8016202 <pbuf_alloc+0xca>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016154:	f109 0303 	add.w	r3, r9, #3
 8016158:	1cca      	adds	r2, r1, #3
 801615a:	4605      	mov	r5, r0
 801615c:	f022 0203 	bic.w	r2, r2, #3
 8016160:	f023 0303 	bic.w	r3, r3, #3
 8016164:	4413      	add	r3, r2
 8016166:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016168:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801616c:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801616e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016170:	d358      	bcc.n	8016224 <pbuf_alloc+0xec>
 8016172:	4282      	cmp	r2, r0
 8016174:	d856      	bhi.n	8016224 <pbuf_alloc+0xec>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016176:	f7ff fa7f 	bl	8015678 <mem_malloc>
      if (p == NULL) {
 801617a:	4604      	mov	r4, r0
 801617c:	b160      	cbz	r0, 8016198 <pbuf_alloc+0x60>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801617e:	4405      	add	r5, r0
  p->next = NULL;
 8016180:	2200      	movs	r2, #0
  p->type_internal = (u8_t)type;
 8016182:	4b35      	ldr	r3, [pc, #212]	; (8016258 <pbuf_alloc+0x120>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016184:	3513      	adds	r5, #19
  p->tot_len = tot_len;
 8016186:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->len = len;
 801618a:	f8a0 800a 	strh.w	r8, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801618e:	f025 0503 	bic.w	r5, r5, #3
  p->next = NULL;
 8016192:	6002      	str	r2, [r0, #0]
  p->type_internal = (u8_t)type;
 8016194:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8016196:	6045      	str	r5, [r0, #4]
}
 8016198:	4620      	mov	r0, r4
 801619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      last = NULL;
 801619e:	2500      	movs	r5, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80161a0:	4e2e      	ldr	r6, [pc, #184]	; (801625c <pbuf_alloc+0x124>)
  p->type_internal = (u8_t)type;
 80161a2:	4f2f      	ldr	r7, [pc, #188]	; (8016260 <pbuf_alloc+0x128>)
      p = NULL;
 80161a4:	462c      	mov	r4, r5
 80161a6:	e00a      	b.n	80161be <pbuf_alloc+0x86>
          last->next = q;
 80161a8:	6028      	str	r0, [r5, #0]
        rem_len = (u16_t)(rem_len - qlen);
 80161aa:	eba8 0101 	sub.w	r1, r8, r1
 80161ae:	4605      	mov	r5, r0
        offset = 0;
 80161b0:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 80161b4:	fa1f f881 	uxth.w	r8, r1
      } while (rem_len > 0);
 80161b8:	f1b8 0f00 	cmp.w	r8, #0
 80161bc:	d0ec      	beq.n	8016198 <pbuf_alloc+0x60>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80161be:	22f3      	movs	r2, #243	; 0xf3
 80161c0:	4631      	mov	r1, r6
 80161c2:	200f      	movs	r0, #15
 80161c4:	f7ff fc4c 	bl	8015a60 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80161c8:	f109 0303 	add.w	r3, r9, #3
  p->next = NULL;
 80161cc:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80161ce:	4481      	add	r9, r0
        if (q == NULL) {
 80161d0:	b360      	cbz	r0, 801622c <pbuf_alloc+0xf4>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80161d2:	f023 0103 	bic.w	r1, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80161d6:	f109 0913 	add.w	r9, r9, #19
  p->next = NULL;
 80161da:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80161dc:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80161e0:	f029 0303 	bic.w	r3, r9, #3
  p->tot_len = tot_len;
 80161e4:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80161e8:	b289      	uxth	r1, r1
  p->type_internal = (u8_t)type;
 80161ea:	60c7      	str	r7, [r0, #12]
  p->payload = payload;
 80161ec:	6043      	str	r3, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80161ee:	4541      	cmp	r1, r8
 80161f0:	bf28      	it	cs
 80161f2:	4641      	movcs	r1, r8
  p->len = len;
 80161f4:	8141      	strh	r1, [r0, #10]
        if (p == NULL) {
 80161f6:	2c00      	cmp	r4, #0
 80161f8:	d1d6      	bne.n	80161a8 <pbuf_alloc+0x70>
 80161fa:	4604      	mov	r4, r0
 80161fc:	e7d5      	b.n	80161aa <pbuf_alloc+0x72>
  switch (type) {
 80161fe:	2a01      	cmp	r2, #1
 8016200:	d00a      	beq.n	8016218 <pbuf_alloc+0xe0>
      return NULL;
 8016202:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016204:	4b15      	ldr	r3, [pc, #84]	; (801625c <pbuf_alloc+0x124>)
 8016206:	f240 1227 	movw	r2, #295	; 0x127
 801620a:	4916      	ldr	r1, [pc, #88]	; (8016264 <pbuf_alloc+0x12c>)
 801620c:	4816      	ldr	r0, [pc, #88]	; (8016268 <pbuf_alloc+0x130>)
 801620e:	f00a f9c3 	bl	8020598 <iprintf>
}
 8016212:	4620      	mov	r0, r4
 8016214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8016218:	4641      	mov	r1, r8
 801621a:	2000      	movs	r0, #0
}
 801621c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8016220:	f7ff be98 	b.w	8015f54 <pbuf_alloc_reference>
          return NULL;
 8016224:	2400      	movs	r4, #0
}
 8016226:	4620      	mov	r0, r4
 8016228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 801622c:	4d0f      	ldr	r5, [pc, #60]	; (801626c <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801622e:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 8016230:	782b      	ldrb	r3, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8016232:	702a      	strb	r2, [r5, #0]
  if (!queued) {
 8016234:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8016238:	b133      	cbz	r3, 8016248 <pbuf_alloc+0x110>
          if (p) {
 801623a:	2c00      	cmp	r4, #0
 801623c:	d0f2      	beq.n	8016224 <pbuf_alloc+0xec>
            pbuf_free(p);
 801623e:	4620      	mov	r0, r4
          return NULL;
 8016240:	2400      	movs	r4, #0
            pbuf_free(p);
 8016242:	f7ff ff0b 	bl	801605c <pbuf_free>
 8016246:	e7a7      	b.n	8016198 <pbuf_alloc+0x60>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016248:	4631      	mov	r1, r6
 801624a:	4809      	ldr	r0, [pc, #36]	; (8016270 <pbuf_alloc+0x138>)
 801624c:	f7fc feae 	bl	8012fac <tcpip_try_callback>
 8016250:	2800      	cmp	r0, #0
 8016252:	d0f2      	beq.n	801623a <pbuf_alloc+0x102>
 8016254:	702e      	strb	r6, [r5, #0]
 8016256:	e7f0      	b.n	801623a <pbuf_alloc+0x102>
 8016258:	00010080 	.word	0x00010080
 801625c:	0803d208 	.word	0x0803d208
 8016260:	00010082 	.word	0x00010082
 8016264:	0803d238 	.word	0x0803d238
 8016268:	08026544 	.word	0x08026544
 801626c:	200361e8 	.word	0x200361e8
 8016270:	08015ec5 	.word	0x08015ec5

08016274 <pbuf_realloc>:
{
 8016274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016278:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801627a:	4604      	mov	r4, r0
 801627c:	2800      	cmp	r0, #0
 801627e:	d043      	beq.n	8016308 <pbuf_realloc+0x94>
  if (new_len >= p->tot_len) {
 8016280:	8926      	ldrh	r6, [r4, #8]
 8016282:	42ae      	cmp	r6, r5
 8016284:	d928      	bls.n	80162d8 <pbuf_realloc+0x64>
  shrink = (u16_t)(p->tot_len - new_len);
 8016286:	1b76      	subs	r6, r6, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016288:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801631c <pbuf_realloc+0xa8>
 801628c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8016328 <pbuf_realloc+0xb4>
  shrink = (u16_t)(p->tot_len - new_len);
 8016290:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016292:	4f21      	ldr	r7, [pc, #132]	; (8016318 <pbuf_realloc+0xa4>)
  while (rem_len > q->len) {
 8016294:	8961      	ldrh	r1, [r4, #10]
 8016296:	42a9      	cmp	r1, r5
 8016298:	d211      	bcs.n	80162be <pbuf_realloc+0x4a>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801629a:	8923      	ldrh	r3, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801629c:	1a69      	subs	r1, r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801629e:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 80162a0:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80162a2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80162a4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80162a6:	2c00      	cmp	r4, #0
 80162a8:	d1f4      	bne.n	8016294 <pbuf_realloc+0x20>
 80162aa:	4641      	mov	r1, r8
 80162ac:	464b      	mov	r3, r9
 80162ae:	f240 12af 	movw	r2, #431	; 0x1af
 80162b2:	4638      	mov	r0, r7
 80162b4:	f00a f970 	bl	8020598 <iprintf>
  while (rem_len > q->len) {
 80162b8:	8961      	ldrh	r1, [r4, #10]
 80162ba:	42a9      	cmp	r1, r5
 80162bc:	d3ed      	bcc.n	801629a <pbuf_realloc+0x26>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80162be:	7b23      	ldrb	r3, [r4, #12]
 80162c0:	071a      	lsls	r2, r3, #28
 80162c2:	d101      	bne.n	80162c8 <pbuf_realloc+0x54>
 80162c4:	42a9      	cmp	r1, r5
 80162c6:	d109      	bne.n	80162dc <pbuf_realloc+0x68>
  if (q->next != NULL) {
 80162c8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80162ca:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80162cc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80162ce:	b108      	cbz	r0, 80162d4 <pbuf_realloc+0x60>
    pbuf_free(q->next);
 80162d0:	f7ff fec4 	bl	801605c <pbuf_free>
  q->next = NULL;
 80162d4:	2300      	movs	r3, #0
 80162d6:	6023      	str	r3, [r4, #0]
}
 80162d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80162dc:	7b63      	ldrb	r3, [r4, #13]
 80162de:	079b      	lsls	r3, r3, #30
 80162e0:	d4f2      	bmi.n	80162c8 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80162e2:	6863      	ldr	r3, [r4, #4]
 80162e4:	4620      	mov	r0, r4
 80162e6:	1b1c      	subs	r4, r3, r4
 80162e8:	1929      	adds	r1, r5, r4
 80162ea:	b289      	uxth	r1, r1
 80162ec:	f7ff f8da 	bl	80154a4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80162f0:	4604      	mov	r4, r0
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d1e8      	bne.n	80162c8 <pbuf_realloc+0x54>
 80162f6:	4b09      	ldr	r3, [pc, #36]	; (801631c <pbuf_realloc+0xa8>)
 80162f8:	f240 12bd 	movw	r2, #445	; 0x1bd
 80162fc:	4908      	ldr	r1, [pc, #32]	; (8016320 <pbuf_realloc+0xac>)
 80162fe:	4806      	ldr	r0, [pc, #24]	; (8016318 <pbuf_realloc+0xa4>)
 8016300:	f00a f94a 	bl	8020598 <iprintf>
  q->len = rem_len;
 8016304:	8164      	strh	r4, [r4, #10]
 8016306:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016308:	4b04      	ldr	r3, [pc, #16]	; (801631c <pbuf_realloc+0xa8>)
 801630a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801630e:	4905      	ldr	r1, [pc, #20]	; (8016324 <pbuf_realloc+0xb0>)
 8016310:	4801      	ldr	r0, [pc, #4]	; (8016318 <pbuf_realloc+0xa4>)
 8016312:	f00a f941 	bl	8020598 <iprintf>
 8016316:	e7b3      	b.n	8016280 <pbuf_realloc+0xc>
 8016318:	08026544 	.word	0x08026544
 801631c:	0803d208 	.word	0x0803d208
 8016320:	0803d458 	.word	0x0803d458
 8016324:	0803d428 	.word	0x0803d428
 8016328:	0803d440 	.word	0x0803d440

0801632c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 801632c:	b138      	cbz	r0, 801633e <pbuf_clen+0x12>
  len = 0;
 801632e:	2300      	movs	r3, #0
    ++len;
 8016330:	3301      	adds	r3, #1
    p = p->next;
 8016332:	6800      	ldr	r0, [r0, #0]
    ++len;
 8016334:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8016336:	2800      	cmp	r0, #0
 8016338:	d1fa      	bne.n	8016330 <pbuf_clen+0x4>
  }
  return len;
}
 801633a:	4618      	mov	r0, r3
 801633c:	4770      	bx	lr
  len = 0;
 801633e:	4603      	mov	r3, r0
}
 8016340:	4618      	mov	r0, r3
 8016342:	4770      	bx	lr

08016344 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8016344:	b120      	cbz	r0, 8016350 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016346:	7b83      	ldrb	r3, [r0, #14]
 8016348:	3301      	adds	r3, #1
 801634a:	b2db      	uxtb	r3, r3
 801634c:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801634e:	b103      	cbz	r3, 8016352 <pbuf_ref+0xe>
  }
}
 8016350:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016352:	4b03      	ldr	r3, [pc, #12]	; (8016360 <pbuf_ref+0x1c>)
 8016354:	f240 3242 	movw	r2, #834	; 0x342
 8016358:	4902      	ldr	r1, [pc, #8]	; (8016364 <pbuf_ref+0x20>)
 801635a:	4803      	ldr	r0, [pc, #12]	; (8016368 <pbuf_ref+0x24>)
 801635c:	f00a b91c 	b.w	8020598 <iprintf>
 8016360:	0803d208 	.word	0x0803d208
 8016364:	0803d474 	.word	0x0803d474
 8016368:	08026544 	.word	0x08026544

0801636c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801636c:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801636e:	b338      	cbz	r0, 80163c0 <pbuf_cat+0x54>
 8016370:	460d      	mov	r5, r1
 8016372:	b329      	cbz	r1, 80163c0 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016374:	6804      	ldr	r4, [r0, #0]
 8016376:	b90c      	cbnz	r4, 801637c <pbuf_cat+0x10>
 8016378:	e02b      	b.n	80163d2 <pbuf_cat+0x66>
 801637a:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801637c:	8903      	ldrh	r3, [r0, #8]
 801637e:	8929      	ldrh	r1, [r5, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016380:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016382:	440b      	add	r3, r1
 8016384:	8103      	strh	r3, [r0, #8]
 8016386:	4620      	mov	r0, r4
  for (p = h; p->next != NULL; p = p->next) {
 8016388:	2a00      	cmp	r2, #0
 801638a:	d1f6      	bne.n	801637a <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801638c:	8963      	ldrh	r3, [r4, #10]
 801638e:	8922      	ldrh	r2, [r4, #8]
 8016390:	429a      	cmp	r2, r3
 8016392:	d010      	beq.n	80163b6 <pbuf_cat+0x4a>
 8016394:	4b12      	ldr	r3, [pc, #72]	; (80163e0 <pbuf_cat+0x74>)
 8016396:	f240 3262 	movw	r2, #866	; 0x362
 801639a:	4912      	ldr	r1, [pc, #72]	; (80163e4 <pbuf_cat+0x78>)
 801639c:	4812      	ldr	r0, [pc, #72]	; (80163e8 <pbuf_cat+0x7c>)
 801639e:	f00a f8fb 	bl	8020598 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80163a2:	6823      	ldr	r3, [r4, #0]
 80163a4:	b133      	cbz	r3, 80163b4 <pbuf_cat+0x48>
 80163a6:	4b0e      	ldr	r3, [pc, #56]	; (80163e0 <pbuf_cat+0x74>)
 80163a8:	f240 3263 	movw	r2, #867	; 0x363
 80163ac:	490f      	ldr	r1, [pc, #60]	; (80163ec <pbuf_cat+0x80>)
 80163ae:	480e      	ldr	r0, [pc, #56]	; (80163e8 <pbuf_cat+0x7c>)
 80163b0:	f00a f8f2 	bl	8020598 <iprintf>
 80163b4:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80163b6:	892a      	ldrh	r2, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80163b8:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80163ba:	4413      	add	r3, r2
 80163bc:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80163be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80163c0:	4b07      	ldr	r3, [pc, #28]	; (80163e0 <pbuf_cat+0x74>)
 80163c2:	f240 325a 	movw	r2, #858	; 0x35a
 80163c6:	490a      	ldr	r1, [pc, #40]	; (80163f0 <pbuf_cat+0x84>)
 80163c8:	4807      	ldr	r0, [pc, #28]	; (80163e8 <pbuf_cat+0x7c>)
}
 80163ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80163ce:	f00a b8e3 	b.w	8020598 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 80163d2:	4604      	mov	r4, r0
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80163d4:	8963      	ldrh	r3, [r4, #10]
 80163d6:	8922      	ldrh	r2, [r4, #8]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d1db      	bne.n	8016394 <pbuf_cat+0x28>
 80163dc:	e7eb      	b.n	80163b6 <pbuf_cat+0x4a>
 80163de:	bf00      	nop
 80163e0:	0803d208 	.word	0x0803d208
 80163e4:	0803d2a0 	.word	0x0803d2a0
 80163e8:	08026544 	.word	0x08026544
 80163ec:	0803d2d0 	.word	0x0803d2d0
 80163f0:	0803d268 	.word	0x0803d268

080163f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80163f4:	b510      	push	{r4, lr}
 80163f6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80163f8:	f7ff ffb8 	bl	801636c <pbuf_cat>
  if (p != NULL) {
 80163fc:	b124      	cbz	r4, 8016408 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80163fe:	7ba3      	ldrb	r3, [r4, #14]
 8016400:	3301      	adds	r3, #1
 8016402:	b2db      	uxtb	r3, r3
 8016404:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016406:	b103      	cbz	r3, 801640a <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016408:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801640a:	4b04      	ldr	r3, [pc, #16]	; (801641c <pbuf_chain+0x28>)
 801640c:	f240 3242 	movw	r2, #834	; 0x342
 8016410:	4903      	ldr	r1, [pc, #12]	; (8016420 <pbuf_chain+0x2c>)
 8016412:	4804      	ldr	r0, [pc, #16]	; (8016424 <pbuf_chain+0x30>)
}
 8016414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016418:	f00a b8be 	b.w	8020598 <iprintf>
 801641c:	0803d208 	.word	0x0803d208
 8016420:	0803d474 	.word	0x0803d474
 8016424:	08026544 	.word	0x08026544

08016428 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801642c:	2800      	cmp	r0, #0
 801642e:	f000 808c 	beq.w	801654a <pbuf_copy+0x122>
 8016432:	fab1 f681 	clz	r6, r1
 8016436:	460f      	mov	r7, r1
 8016438:	0976      	lsrs	r6, r6, #5
 801643a:	2e00      	cmp	r6, #0
 801643c:	f040 8085 	bne.w	801654a <pbuf_copy+0x122>
 8016440:	8902      	ldrh	r2, [r0, #8]
 8016442:	4605      	mov	r5, r0
 8016444:	890b      	ldrh	r3, [r1, #8]
 8016446:	429a      	cmp	r2, r3
 8016448:	d37f      	bcc.n	801654a <pbuf_copy+0x122>
 801644a:	8943      	ldrh	r3, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 801644c:	46b0      	mov	r8, r6
 801644e:	894c      	ldrh	r4, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016450:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8016560 <pbuf_copy+0x138>
 8016454:	f8df b120 	ldr.w	fp, [pc, #288]	; 8016578 <pbuf_copy+0x150>
 8016458:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016568 <pbuf_copy+0x140>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801645c:	eba3 0308 	sub.w	r3, r3, r8
 8016460:	1ba4      	subs	r4, r4, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016462:	6868      	ldr	r0, [r5, #4]
 8016464:	429c      	cmp	r4, r3
 8016466:	6879      	ldr	r1, [r7, #4]
 8016468:	4440      	add	r0, r8
 801646a:	bf28      	it	cs
 801646c:	461c      	movcs	r4, r3
 801646e:	4431      	add	r1, r6
 8016470:	4622      	mov	r2, r4
    offset_to += len;
 8016472:	44a0      	add	r8, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016474:	f009 f8ed 	bl	801f652 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016478:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801647a:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801647c:	4598      	cmp	r8, r3
 801647e:	d83d      	bhi.n	80164fc <pbuf_copy+0xd4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016480:	897b      	ldrh	r3, [r7, #10]
 8016482:	429e      	cmp	r6, r3
 8016484:	d831      	bhi.n	80164ea <pbuf_copy+0xc2>
    if (offset_from >= p_from->len) {
 8016486:	429e      	cmp	r6, r3
 8016488:	d301      	bcc.n	801648e <pbuf_copy+0x66>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 801648a:	683f      	ldr	r7, [r7, #0]
      offset_from = 0;
 801648c:	2600      	movs	r6, #0
    }
    if (offset_to == p_to->len) {
 801648e:	896b      	ldrh	r3, [r5, #10]
 8016490:	4598      	cmp	r8, r3
 8016492:	d011      	beq.n	80164b8 <pbuf_copy+0x90>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016494:	2f00      	cmp	r7, #0
 8016496:	d03b      	beq.n	8016510 <pbuf_copy+0xe8>
 8016498:	897c      	ldrh	r4, [r7, #10]
 801649a:	893b      	ldrh	r3, [r7, #8]
 801649c:	429c      	cmp	r4, r3
 801649e:	d016      	beq.n	80164ce <pbuf_copy+0xa6>
 80164a0:	896b      	ldrh	r3, [r5, #10]
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80164a2:	892a      	ldrh	r2, [r5, #8]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d1d9      	bne.n	801645c <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80164a8:	682a      	ldr	r2, [r5, #0]
 80164aa:	2a00      	cmp	r2, #0
 80164ac:	d137      	bne.n	801651e <pbuf_copy+0xf6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80164ae:	2f00      	cmp	r7, #0
 80164b0:	d1d4      	bne.n	801645c <pbuf_copy+0x34>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80164b2:	2000      	movs	r0, #0
}
 80164b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 80164b8:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80164ba:	b90d      	cbnz	r5, 80164c0 <pbuf_copy+0x98>
 80164bc:	2f00      	cmp	r7, #0
 80164be:	d139      	bne.n	8016534 <pbuf_copy+0x10c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80164c0:	b327      	cbz	r7, 801650c <pbuf_copy+0xe4>
 80164c2:	897c      	ldrh	r4, [r7, #10]
      offset_to = 0;
 80164c4:	f04f 0800 	mov.w	r8, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80164c8:	893b      	ldrh	r3, [r7, #8]
 80164ca:	429c      	cmp	r4, r3
 80164cc:	d1e8      	bne.n	80164a0 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d0e5      	beq.n	80164a0 <pbuf_copy+0x78>
 80164d4:	4b22      	ldr	r3, [pc, #136]	; (8016560 <pbuf_copy+0x138>)
 80164d6:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80164da:	4922      	ldr	r1, [pc, #136]	; (8016564 <pbuf_copy+0x13c>)
 80164dc:	4822      	ldr	r0, [pc, #136]	; (8016568 <pbuf_copy+0x140>)
 80164de:	f00a f85b 	bl	8020598 <iprintf>
 80164e2:	f06f 0005 	mvn.w	r0, #5
}
 80164e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80164ea:	4653      	mov	r3, sl
 80164ec:	f240 32da 	movw	r2, #986	; 0x3da
 80164f0:	491e      	ldr	r1, [pc, #120]	; (801656c <pbuf_copy+0x144>)
 80164f2:	4648      	mov	r0, r9
 80164f4:	f00a f850 	bl	8020598 <iprintf>
 80164f8:	897b      	ldrh	r3, [r7, #10]
 80164fa:	e7c4      	b.n	8016486 <pbuf_copy+0x5e>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80164fc:	4653      	mov	r3, sl
 80164fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016502:	4659      	mov	r1, fp
 8016504:	4648      	mov	r0, r9
 8016506:	f00a f847 	bl	8020598 <iprintf>
 801650a:	e7b9      	b.n	8016480 <pbuf_copy+0x58>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801650c:	2d00      	cmp	r5, #0
 801650e:	d0d0      	beq.n	80164b2 <pbuf_copy+0x8a>
 8016510:	892a      	ldrh	r2, [r5, #8]
 8016512:	896b      	ldrh	r3, [r5, #10]
 8016514:	429a      	cmp	r2, r3
 8016516:	d1cc      	bne.n	80164b2 <pbuf_copy+0x8a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016518:	6828      	ldr	r0, [r5, #0]
 801651a:	2800      	cmp	r0, #0
 801651c:	d0ca      	beq.n	80164b4 <pbuf_copy+0x8c>
 801651e:	4b10      	ldr	r3, [pc, #64]	; (8016560 <pbuf_copy+0x138>)
 8016520:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8016524:	490f      	ldr	r1, [pc, #60]	; (8016564 <pbuf_copy+0x13c>)
 8016526:	4810      	ldr	r0, [pc, #64]	; (8016568 <pbuf_copy+0x140>)
 8016528:	f00a f836 	bl	8020598 <iprintf>
 801652c:	f06f 0005 	mvn.w	r0, #5
}
 8016530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016534:	4b0a      	ldr	r3, [pc, #40]	; (8016560 <pbuf_copy+0x138>)
 8016536:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801653a:	490d      	ldr	r1, [pc, #52]	; (8016570 <pbuf_copy+0x148>)
 801653c:	480a      	ldr	r0, [pc, #40]	; (8016568 <pbuf_copy+0x140>)
 801653e:	f00a f82b 	bl	8020598 <iprintf>
 8016542:	f06f 000f 	mvn.w	r0, #15
}
 8016546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801654a:	4b05      	ldr	r3, [pc, #20]	; (8016560 <pbuf_copy+0x138>)
 801654c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016550:	4908      	ldr	r1, [pc, #32]	; (8016574 <pbuf_copy+0x14c>)
 8016552:	4805      	ldr	r0, [pc, #20]	; (8016568 <pbuf_copy+0x140>)
 8016554:	f00a f820 	bl	8020598 <iprintf>
 8016558:	f06f 000f 	mvn.w	r0, #15
 801655c:	e7aa      	b.n	80164b4 <pbuf_copy+0x8c>
 801655e:	bf00      	nop
 8016560:	0803d208 	.word	0x0803d208
 8016564:	0803d368 	.word	0x0803d368
 8016568:	08026544 	.word	0x08026544
 801656c:	0803d33c 	.word	0x0803d33c
 8016570:	0803d358 	.word	0x0803d358
 8016574:	0803d2f4 	.word	0x0803d2f4
 8016578:	0803d324 	.word	0x0803d324

0801657c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016580:	4605      	mov	r5, r0
 8016582:	b368      	cbz	r0, 80165e0 <pbuf_copy_partial+0x64>
 8016584:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016586:	2900      	cmp	r1, #0
 8016588:	d035      	beq.n	80165f6 <pbuf_copy_partial+0x7a>
 801658a:	4690      	mov	r8, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801658c:	2a00      	cmp	r2, #0
 801658e:	d03d      	beq.n	801660c <pbuf_copy_partial+0x90>
  u16_t left = 0;
 8016590:	2600      	movs	r6, #0
 8016592:	e009      	b.n	80165a8 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 8016594:	429a      	cmp	r2, r3
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016596:	eba3 0102 	sub.w	r1, r3, r2
    if ((offset != 0) && (offset >= p->len)) {
 801659a:	d809      	bhi.n	80165b0 <pbuf_copy_partial+0x34>
      offset = (u16_t)(offset - p->len);
 801659c:	b28b      	uxth	r3, r1
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801659e:	682d      	ldr	r5, [r5, #0]
 80165a0:	f1b8 0f00 	cmp.w	r8, #0
 80165a4:	d019      	beq.n	80165da <pbuf_copy_partial+0x5e>
 80165a6:	b1c5      	cbz	r5, 80165da <pbuf_copy_partial+0x5e>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80165a8:	19b8      	adds	r0, r7, r6
 80165aa:	896a      	ldrh	r2, [r5, #10]
    if ((offset != 0) && (offset >= p->len)) {
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d1f1      	bne.n	8016594 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 80165b0:	1ad4      	subs	r4, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80165b2:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 80165b4:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80165b6:	4419      	add	r1, r3
 80165b8:	4544      	cmp	r4, r8
 80165ba:	bf28      	it	cs
 80165bc:	4644      	movcs	r4, r8
 80165be:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80165c0:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 80165c2:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80165c6:	f009 f844 	bl	801f652 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80165ca:	b2b6      	uxth	r6, r6
      offset = 0;
 80165cc:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 80165ce:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80165d2:	682d      	ldr	r5, [r5, #0]
 80165d4:	f1b8 0f00 	cmp.w	r8, #0
 80165d8:	d1e5      	bne.n	80165a6 <pbuf_copy_partial+0x2a>
    }
  }
  return copied_total;
}
 80165da:	4630      	mov	r0, r6
 80165dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80165e0:	4606      	mov	r6, r0
 80165e2:	4b0c      	ldr	r3, [pc, #48]	; (8016614 <pbuf_copy_partial+0x98>)
 80165e4:	f240 420a 	movw	r2, #1034	; 0x40a
 80165e8:	490b      	ldr	r1, [pc, #44]	; (8016618 <pbuf_copy_partial+0x9c>)
 80165ea:	480c      	ldr	r0, [pc, #48]	; (801661c <pbuf_copy_partial+0xa0>)
 80165ec:	f009 ffd4 	bl	8020598 <iprintf>
}
 80165f0:	4630      	mov	r0, r6
 80165f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80165f6:	463e      	mov	r6, r7
 80165f8:	4b06      	ldr	r3, [pc, #24]	; (8016614 <pbuf_copy_partial+0x98>)
 80165fa:	f240 420b 	movw	r2, #1035	; 0x40b
 80165fe:	4908      	ldr	r1, [pc, #32]	; (8016620 <pbuf_copy_partial+0xa4>)
 8016600:	4806      	ldr	r0, [pc, #24]	; (801661c <pbuf_copy_partial+0xa0>)
 8016602:	f009 ffc9 	bl	8020598 <iprintf>
}
 8016606:	4630      	mov	r0, r6
 8016608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t left = 0;
 801660c:	4616      	mov	r6, r2
}
 801660e:	4630      	mov	r0, r6
 8016610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016614:	0803d208 	.word	0x0803d208
 8016618:	0803d394 	.word	0x0803d394
 801661c:	08026544 	.word	0x08026544
 8016620:	0803d3b4 	.word	0x0803d3b4

08016624 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8016624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016628:	2800      	cmp	r0, #0
 801662a:	d04a      	beq.n	80166c2 <pbuf_take+0x9e>
 801662c:	460f      	mov	r7, r1
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801662e:	2900      	cmp	r1, #0
 8016630:	d03d      	beq.n	80166ae <pbuf_take+0x8a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016632:	8903      	ldrh	r3, [r0, #8]
 8016634:	4690      	mov	r8, r2
 8016636:	4604      	mov	r4, r0
 8016638:	4293      	cmp	r3, r2
 801663a:	d32e      	bcc.n	801669a <pbuf_take+0x76>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801663c:	b352      	cbz	r2, 8016694 <pbuf_take+0x70>
 801663e:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8016640:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016642:	f8df b098 	ldr.w	fp, [pc, #152]	; 80166dc <pbuf_take+0xb8>
 8016646:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80166f0 <pbuf_take+0xcc>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801664a:	8963      	ldrh	r3, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801664c:	19b9      	adds	r1, r7, r6
 801664e:	6860      	ldr	r0, [r4, #4]
 8016650:	42ab      	cmp	r3, r5
 8016652:	bf28      	it	cs
 8016654:	462b      	movcs	r3, r5
 8016656:	4699      	mov	r9, r3
 8016658:	461a      	mov	r2, r3
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801665a:	441e      	add	r6, r3
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801665c:	f008 fff9 	bl	801f652 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016660:	ebb5 0509 	subs.w	r5, r5, r9
 8016664:	6824      	ldr	r4, [r4, #0]
 8016666:	d009      	beq.n	801667c <pbuf_take+0x58>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016668:	2c00      	cmp	r4, #0
 801666a:	d1ee      	bne.n	801664a <pbuf_take+0x26>
 801666c:	465b      	mov	r3, fp
 801666e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8016672:	4651      	mov	r1, sl
 8016674:	4818      	ldr	r0, [pc, #96]	; (80166d8 <pbuf_take+0xb4>)
 8016676:	f009 ff8f 	bl	8020598 <iprintf>
 801667a:	e7e6      	b.n	801664a <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801667c:	45b0      	cmp	r8, r6
 801667e:	d009      	beq.n	8016694 <pbuf_take+0x70>
 8016680:	4b16      	ldr	r3, [pc, #88]	; (80166dc <pbuf_take+0xb8>)
 8016682:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8016686:	4916      	ldr	r1, [pc, #88]	; (80166e0 <pbuf_take+0xbc>)
 8016688:	4813      	ldr	r0, [pc, #76]	; (80166d8 <pbuf_take+0xb4>)
 801668a:	f009 ff85 	bl	8020598 <iprintf>
  return ERR_OK;
 801668e:	4628      	mov	r0, r5
}
 8016690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 8016694:	2000      	movs	r0, #0
}
 8016696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801669a:	4b10      	ldr	r3, [pc, #64]	; (80166dc <pbuf_take+0xb8>)
 801669c:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80166a0:	4910      	ldr	r1, [pc, #64]	; (80166e4 <pbuf_take+0xc0>)
 80166a2:	480d      	ldr	r0, [pc, #52]	; (80166d8 <pbuf_take+0xb4>)
 80166a4:	f009 ff78 	bl	8020598 <iprintf>
 80166a8:	f04f 30ff 	mov.w	r0, #4294967295
 80166ac:	e7f0      	b.n	8016690 <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80166ae:	4b0b      	ldr	r3, [pc, #44]	; (80166dc <pbuf_take+0xb8>)
 80166b0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80166b4:	490c      	ldr	r1, [pc, #48]	; (80166e8 <pbuf_take+0xc4>)
 80166b6:	4808      	ldr	r0, [pc, #32]	; (80166d8 <pbuf_take+0xb4>)
 80166b8:	f009 ff6e 	bl	8020598 <iprintf>
 80166bc:	f06f 000f 	mvn.w	r0, #15
 80166c0:	e7e6      	b.n	8016690 <pbuf_take+0x6c>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80166c2:	4b06      	ldr	r3, [pc, #24]	; (80166dc <pbuf_take+0xb8>)
 80166c4:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80166c8:	4908      	ldr	r1, [pc, #32]	; (80166ec <pbuf_take+0xc8>)
 80166ca:	4803      	ldr	r0, [pc, #12]	; (80166d8 <pbuf_take+0xb4>)
 80166cc:	f009 ff64 	bl	8020598 <iprintf>
 80166d0:	f06f 000f 	mvn.w	r0, #15
 80166d4:	e7dc      	b.n	8016690 <pbuf_take+0x6c>
 80166d6:	bf00      	nop
 80166d8:	08026544 	.word	0x08026544
 80166dc:	0803d208 	.word	0x0803d208
 80166e0:	0803d514 	.word	0x0803d514
 80166e4:	0803d4dc 	.word	0x0803d4dc
 80166e8:	0803d4c0 	.word	0x0803d4c0
 80166ec:	0803d4a8 	.word	0x0803d4a8
 80166f0:	0803d4fc 	.word	0x0803d4fc

080166f4 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80166f4:	b380      	cbz	r0, 8016758 <pbuf_take_at+0x64>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80166f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f8:	4604      	mov	r4, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 80166fa:	8940      	ldrh	r0, [r0, #10]
 80166fc:	460e      	mov	r6, r1
 80166fe:	4615      	mov	r5, r2
 8016700:	4283      	cmp	r3, r0
 8016702:	d203      	bcs.n	801670c <pbuf_take_at+0x18>
 8016704:	e00a      	b.n	801671c <pbuf_take_at+0x28>
 8016706:	8960      	ldrh	r0, [r4, #10]
 8016708:	4298      	cmp	r0, r3
 801670a:	d807      	bhi.n	801671c <pbuf_take_at+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801670c:	1a1b      	subs	r3, r3, r0
    q = q->next;
 801670e:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8016710:	b29b      	uxth	r3, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8016712:	2c00      	cmp	r4, #0
 8016714:	d1f7      	bne.n	8016706 <pbuf_take_at+0x12>
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
  }
  return ERR_MEM;
 8016716:	f04f 30ff 	mov.w	r0, #4294967295
}
 801671a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801671c:	8921      	ldrh	r1, [r4, #8]
 801671e:	195a      	adds	r2, r3, r5
 8016720:	4291      	cmp	r1, r2
 8016722:	dbf8      	blt.n	8016716 <pbuf_take_at+0x22>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8016724:	8962      	ldrh	r2, [r4, #10]
 8016726:	6860      	ldr	r0, [r4, #4]
 8016728:	1ad2      	subs	r2, r2, r3
 801672a:	4418      	add	r0, r3
 801672c:	42aa      	cmp	r2, r5
 801672e:	da0d      	bge.n	801674c <pbuf_take_at+0x58>
 8016730:	b297      	uxth	r7, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8016732:	4631      	mov	r1, r6
 8016734:	463a      	mov	r2, r7
 8016736:	f008 ff8c 	bl	801f652 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801673a:	1be8      	subs	r0, r5, r7
 801673c:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801673e:	b14a      	cbz	r2, 8016754 <pbuf_take_at+0x60>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016740:	19f1      	adds	r1, r6, r7
 8016742:	6820      	ldr	r0, [r4, #0]
}
 8016744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8016748:	f7ff bf6c 	b.w	8016624 <pbuf_take>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801674c:	462a      	mov	r2, r5
 801674e:	4631      	mov	r1, r6
 8016750:	f008 ff7f 	bl	801f652 <memcpy>
    return ERR_OK;
 8016754:	2000      	movs	r0, #0
}
 8016756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ERR_MEM;
 8016758:	f04f 30ff 	mov.w	r0, #4294967295
}
 801675c:	4770      	bx	lr
 801675e:	bf00      	nop

08016760 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016760:	b538      	push	{r3, r4, r5, lr}
 8016762:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016764:	460a      	mov	r2, r1
 8016766:	8921      	ldrh	r1, [r4, #8]
 8016768:	f7ff fce6 	bl	8016138 <pbuf_alloc>
  if (q == NULL) {
 801676c:	4605      	mov	r5, r0
 801676e:	b150      	cbz	r0, 8016786 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8016770:	4621      	mov	r1, r4
 8016772:	f7ff fe59 	bl	8016428 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016776:	b130      	cbz	r0, 8016786 <pbuf_clone+0x26>
 8016778:	4b04      	ldr	r3, [pc, #16]	; (801678c <pbuf_clone+0x2c>)
 801677a:	f240 5224 	movw	r2, #1316	; 0x524
 801677e:	4904      	ldr	r1, [pc, #16]	; (8016790 <pbuf_clone+0x30>)
 8016780:	4804      	ldr	r0, [pc, #16]	; (8016794 <pbuf_clone+0x34>)
 8016782:	f009 ff09 	bl	8020598 <iprintf>
  return q;
}
 8016786:	4628      	mov	r0, r5
 8016788:	bd38      	pop	{r3, r4, r5, pc}
 801678a:	bf00      	nop
 801678c:	0803d208 	.word	0x0803d208
 8016790:	0803d2e0 	.word	0x0803d2e0
 8016794:	08026544 	.word	0x08026544

08016798 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8016798:	b158      	cbz	r0, 80167b2 <pbuf_try_get_at+0x1a>
 801679a:	8943      	ldrh	r3, [r0, #10]
 801679c:	4299      	cmp	r1, r3
 801679e:	d203      	bcs.n	80167a8 <pbuf_try_get_at+0x10>
 80167a0:	e00a      	b.n	80167b8 <pbuf_try_get_at+0x20>
 80167a2:	8943      	ldrh	r3, [r0, #10]
 80167a4:	428b      	cmp	r3, r1
 80167a6:	d807      	bhi.n	80167b8 <pbuf_try_get_at+0x20>
    offset_left = (u16_t)(offset_left - q->len);
 80167a8:	1ac9      	subs	r1, r1, r3
    q = q->next;
 80167aa:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 80167ac:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d1f7      	bne.n	80167a2 <pbuf_try_get_at+0xa>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 80167b2:	f04f 30ff 	mov.w	r0, #4294967295
 80167b6:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 80167b8:	6843      	ldr	r3, [r0, #4]
 80167ba:	5c58      	ldrb	r0, [r3, r1]
}
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop

080167c0 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80167c0:	b158      	cbz	r0, 80167da <pbuf_put_at+0x1a>
 80167c2:	8943      	ldrh	r3, [r0, #10]
 80167c4:	4299      	cmp	r1, r3
 80167c6:	d203      	bcs.n	80167d0 <pbuf_put_at+0x10>
 80167c8:	e008      	b.n	80167dc <pbuf_put_at+0x1c>
 80167ca:	8943      	ldrh	r3, [r0, #10]
 80167cc:	428b      	cmp	r3, r1
 80167ce:	d805      	bhi.n	80167dc <pbuf_put_at+0x1c>
    offset_left = (u16_t)(offset_left - q->len);
 80167d0:	1ac9      	subs	r1, r1, r3
    q = q->next;
 80167d2:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 80167d4:	b289      	uxth	r1, r1
  while ((q != NULL) && (q->len <= offset_left)) {
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d1f7      	bne.n	80167ca <pbuf_put_at+0xa>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
  }
}
 80167da:	4770      	bx	lr
    ((u8_t *)q->payload)[q_idx] = data;
 80167dc:	6843      	ldr	r3, [r0, #4]
 80167de:	545a      	strb	r2, [r3, r1]
}
 80167e0:	4770      	bx	lr
 80167e2:	bf00      	nop

080167e4 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80167e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80167e8:	4b34      	ldr	r3, [pc, #208]	; (80168bc <raw_input+0xd8>)
{
 80167ea:	4680      	mov	r8, r0
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 80167ec:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80168d0 <raw_input+0xec>
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80167f0:	6819      	ldr	r1, [r3, #0]
 80167f2:	6958      	ldr	r0, [r3, #20]
 80167f4:	f007 fc76 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80167f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  pcb = raw_pcbs;
 80167fc:	f8db 4000 	ldr.w	r4, [fp]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8016800:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8016802:	2c00      	cmp	r4, #0
 8016804:	d04b      	beq.n	801689e <raw_input+0xba>
 8016806:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 8016808:	2000      	movs	r0, #0
 801680a:	46ca      	mov	sl, r9
  prev = NULL;
 801680c:	4606      	mov	r6, r0
 801680e:	e004      	b.n	801681a <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8016810:	68e3      	ldr	r3, [r4, #12]
 8016812:	4626      	mov	r6, r4
  while (pcb != NULL) {
 8016814:	2b00      	cmp	r3, #0
 8016816:	d037      	beq.n	8016888 <raw_input+0xa4>
 8016818:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801681a:	7c23      	ldrb	r3, [r4, #16]
 801681c:	42ab      	cmp	r3, r5
 801681e:	d1f7      	bne.n	8016810 <raw_input+0x2c>
 8016820:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016822:	b13a      	cbz	r2, 8016834 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016824:	4b25      	ldr	r3, [pc, #148]	; (80168bc <raw_input+0xd8>)
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801682c:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801682e:	b2db      	uxtb	r3, r3
 8016830:	429a      	cmp	r2, r3
 8016832:	d1ed      	bne.n	8016810 <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8016834:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8016836:	f1ba 0f00 	cmp.w	sl, #0
 801683a:	d027      	beq.n	801688c <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801683c:	2b00      	cmp	r3, #0
 801683e:	d1e7      	bne.n	8016810 <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8016840:	7c63      	ldrb	r3, [r4, #17]
 8016842:	07db      	lsls	r3, r3, #31
 8016844:	d504      	bpl.n	8016850 <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8016846:	4b1d      	ldr	r3, [pc, #116]	; (80168bc <raw_input+0xd8>)
 8016848:	6862      	ldr	r2, [r4, #4]
 801684a:	691b      	ldr	r3, [r3, #16]
 801684c:	429a      	cmp	r2, r3
 801684e:	d1df      	bne.n	8016810 <raw_input+0x2c>
      if (pcb->recv != NULL) {
 8016850:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8016854:	f1b9 0f00 	cmp.w	r9, #0
 8016858:	d0da      	beq.n	8016810 <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801685a:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <raw_input+0xdc>)
 801685c:	4642      	mov	r2, r8
 801685e:	4621      	mov	r1, r4
 8016860:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 8016862:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8016866:	47c8      	blx	r9
        if (eaten != 0) {
 8016868:	b9d8      	cbnz	r0, 80168a2 <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801686a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801686e:	42bb      	cmp	r3, r7
 8016870:	d013      	beq.n	801689a <raw_input+0xb6>
 8016872:	4b14      	ldr	r3, [pc, #80]	; (80168c4 <raw_input+0xe0>)
 8016874:	22c1      	movs	r2, #193	; 0xc1
 8016876:	4914      	ldr	r1, [pc, #80]	; (80168c8 <raw_input+0xe4>)
 8016878:	4626      	mov	r6, r4
 801687a:	4814      	ldr	r0, [pc, #80]	; (80168cc <raw_input+0xe8>)
 801687c:	f009 fe8c 	bl	8020598 <iprintf>
    pcb = pcb->next;
 8016880:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 8016882:	2002      	movs	r0, #2
  while (pcb != NULL) {
 8016884:	2b00      	cmp	r3, #0
 8016886:	d1c7      	bne.n	8016818 <raw_input+0x34>
  }
  return ret;
}
 8016888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801688c:	2b00      	cmp	r3, #0
 801688e:	d0d7      	beq.n	8016840 <raw_input+0x5c>
 8016890:	4a0a      	ldr	r2, [pc, #40]	; (80168bc <raw_input+0xd8>)
 8016892:	6952      	ldr	r2, [r2, #20]
 8016894:	4293      	cmp	r3, r2
 8016896:	d1bb      	bne.n	8016810 <raw_input+0x2c>
 8016898:	e7d2      	b.n	8016840 <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801689a:	2002      	movs	r0, #2
 801689c:	e7b8      	b.n	8016810 <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801689e:	4620      	mov	r0, r4
 80168a0:	e7f2      	b.n	8016888 <raw_input+0xa4>
          if (prev != NULL) {
 80168a2:	b146      	cbz	r6, 80168b6 <raw_input+0xd2>
            prev->next = pcb->next;
 80168a4:	68e2      	ldr	r2, [r4, #12]
          return RAW_INPUT_EATEN;
 80168a6:	2001      	movs	r0, #1
            pcb->next = raw_pcbs;
 80168a8:	f8db 3000 	ldr.w	r3, [fp]
            prev->next = pcb->next;
 80168ac:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 80168ae:	f8cb 4000 	str.w	r4, [fp]
            pcb->next = raw_pcbs;
 80168b2:	60e3      	str	r3, [r4, #12]
 80168b4:	e7e8      	b.n	8016888 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 80168b6:	2001      	movs	r0, #1
 80168b8:	e7e6      	b.n	8016888 <raw_input+0xa4>
 80168ba:	bf00      	nop
 80168bc:	20026a74 	.word	0x20026a74
 80168c0:	20026a84 	.word	0x20026a84
 80168c4:	0803d52c 	.word	0x0803d52c
 80168c8:	0803d55c 	.word	0x0803d55c
 80168cc:	08026544 	.word	0x08026544
 80168d0:	200223e0 	.word	0x200223e0

080168d4 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80168d4:	b1a8      	cbz	r0, 8016902 <raw_netif_ip_addr_changed+0x2e>
 80168d6:	6802      	ldr	r2, [r0, #0]
 80168d8:	b199      	cbz	r1, 8016902 <raw_netif_ip_addr_changed+0x2e>
 80168da:	b192      	cbz	r2, 8016902 <raw_netif_ip_addr_changed+0x2e>
 80168dc:	680b      	ldr	r3, [r1, #0]
 80168de:	b183      	cbz	r3, 8016902 <raw_netif_ip_addr_changed+0x2e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80168e0:	4b08      	ldr	r3, [pc, #32]	; (8016904 <raw_netif_ip_addr_changed+0x30>)
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	b16b      	cbz	r3, 8016902 <raw_netif_ip_addr_changed+0x2e>
{
 80168e6:	b410      	push	{r4}
 80168e8:	e000      	b.n	80168ec <raw_netif_ip_addr_changed+0x18>
 80168ea:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80168ec:	681c      	ldr	r4, [r3, #0]
 80168ee:	4294      	cmp	r4, r2
 80168f0:	d101      	bne.n	80168f6 <raw_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80168f2:	680a      	ldr	r2, [r1, #0]
 80168f4:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d1f6      	bne.n	80168ea <raw_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 80168fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016900:	4770      	bx	lr
 8016902:	4770      	bx	lr
 8016904:	200223e0 	.word	0x200223e0

08016908 <stats_init>:
void
stats_init(void)
{
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8016908:	4b02      	ldr	r3, [pc, #8]	; (8016914 <stats_init+0xc>)
 801690a:	4a03      	ldr	r2, [pc, #12]	; (8016918 <stats_init+0x10>)
 801690c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
 8016914:	200361ec 	.word	0x200361ec
 8016918:	08025f04 	.word	0x08025f04

0801691c <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
 801691c:	b510      	push	{r4, lr}
 801691e:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
 8016920:	481a      	ldr	r0, [pc, #104]	; (801698c <stats_display_proto+0x70>)
 8016922:	f009 fe39 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
 8016926:	481a      	ldr	r0, [pc, #104]	; (8016990 <stats_display_proto+0x74>)
 8016928:	8821      	ldrh	r1, [r4, #0]
 801692a:	f009 fe35 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
 801692e:	8861      	ldrh	r1, [r4, #2]
 8016930:	4818      	ldr	r0, [pc, #96]	; (8016994 <stats_display_proto+0x78>)
 8016932:	f009 fe31 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
 8016936:	88a1      	ldrh	r1, [r4, #4]
 8016938:	4817      	ldr	r0, [pc, #92]	; (8016998 <stats_display_proto+0x7c>)
 801693a:	f009 fe2d 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
 801693e:	88e1      	ldrh	r1, [r4, #6]
 8016940:	4816      	ldr	r0, [pc, #88]	; (801699c <stats_display_proto+0x80>)
 8016942:	f009 fe29 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
 8016946:	8921      	ldrh	r1, [r4, #8]
 8016948:	4815      	ldr	r0, [pc, #84]	; (80169a0 <stats_display_proto+0x84>)
 801694a:	f009 fe25 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
 801694e:	8961      	ldrh	r1, [r4, #10]
 8016950:	4814      	ldr	r0, [pc, #80]	; (80169a4 <stats_display_proto+0x88>)
 8016952:	f009 fe21 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
 8016956:	89a1      	ldrh	r1, [r4, #12]
 8016958:	4813      	ldr	r0, [pc, #76]	; (80169a8 <stats_display_proto+0x8c>)
 801695a:	f009 fe1d 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
 801695e:	89e1      	ldrh	r1, [r4, #14]
 8016960:	4812      	ldr	r0, [pc, #72]	; (80169ac <stats_display_proto+0x90>)
 8016962:	f009 fe19 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
 8016966:	8a21      	ldrh	r1, [r4, #16]
 8016968:	4811      	ldr	r0, [pc, #68]	; (80169b0 <stats_display_proto+0x94>)
 801696a:	f009 fe15 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
 801696e:	8a61      	ldrh	r1, [r4, #18]
 8016970:	4810      	ldr	r0, [pc, #64]	; (80169b4 <stats_display_proto+0x98>)
 8016972:	f009 fe11 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
 8016976:	8aa1      	ldrh	r1, [r4, #20]
 8016978:	480f      	ldr	r0, [pc, #60]	; (80169b8 <stats_display_proto+0x9c>)
 801697a:	f009 fe0d 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 801697e:	8ae1      	ldrh	r1, [r4, #22]
 8016980:	480e      	ldr	r0, [pc, #56]	; (80169bc <stats_display_proto+0xa0>)
}
 8016982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 8016986:	f009 be07 	b.w	8020598 <iprintf>
 801698a:	bf00      	nop
 801698c:	0803d61c 	.word	0x0803d61c
 8016990:	0803d624 	.word	0x0803d624
 8016994:	0803d630 	.word	0x0803d630
 8016998:	0803d63c 	.word	0x0803d63c
 801699c:	0803d648 	.word	0x0803d648
 80169a0:	0803d654 	.word	0x0803d654
 80169a4:	0803d664 	.word	0x0803d664
 80169a8:	0803d674 	.word	0x0803d674
 80169ac:	0803d684 	.word	0x0803d684
 80169b0:	0803d694 	.word	0x0803d694
 80169b4:	0803d6a4 	.word	0x0803d6a4
 80169b8:	0803d698 	.word	0x0803d698
 80169bc:	0803d6b4 	.word	0x0803d6b4

080169c0 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
 80169c0:	b510      	push	{r4, lr}
 80169c2:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
 80169c4:	480a      	ldr	r0, [pc, #40]	; (80169f0 <stats_display_mem+0x30>)
 80169c6:	f009 fde7 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("avail: %"MEM_SIZE_F"\n\t", mem->avail));
 80169ca:	480a      	ldr	r0, [pc, #40]	; (80169f4 <stats_display_mem+0x34>)
 80169cc:	88e1      	ldrh	r1, [r4, #6]
 80169ce:	f009 fde3 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("used: %"MEM_SIZE_F"\n\t", mem->used));
 80169d2:	8921      	ldrh	r1, [r4, #8]
 80169d4:	4808      	ldr	r0, [pc, #32]	; (80169f8 <stats_display_mem+0x38>)
 80169d6:	f009 fddf 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("max: %"MEM_SIZE_F"\n\t", mem->max));
 80169da:	8961      	ldrh	r1, [r4, #10]
 80169dc:	4807      	ldr	r0, [pc, #28]	; (80169fc <stats_display_mem+0x3c>)
 80169de:	f009 fddb 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n", mem->err));
 80169e2:	88a1      	ldrh	r1, [r4, #4]
 80169e4:	4806      	ldr	r0, [pc, #24]	; (8016a00 <stats_display_mem+0x40>)
}
 80169e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n", mem->err));
 80169ea:	f009 bdd5 	b.w	8020598 <iprintf>
 80169ee:	bf00      	nop
 80169f0:	0803d5dc 	.word	0x0803d5dc
 80169f4:	0803d5e8 	.word	0x0803d5e8
 80169f8:	0803d5f8 	.word	0x0803d5f8
 80169fc:	0803d604 	.word	0x0803d604
 8016a00:	0803d610 	.word	0x0803d610

08016a04 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
 8016a04:	b510      	push	{r4, lr}
 8016a06:	4604      	mov	r4, r0
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
 8016a08:	4814      	ldr	r0, [pc, #80]	; (8016a5c <stats_display_sys+0x58>)
 8016a0a:	f009 fdc5 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"STAT_COUNTER_F"\n\t", sys->sem.used));
 8016a0e:	4814      	ldr	r0, [pc, #80]	; (8016a60 <stats_display_sys+0x5c>)
 8016a10:	8821      	ldrh	r1, [r4, #0]
 8016a12:	f009 fdc1 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"STAT_COUNTER_F"\n\t", sys->sem.max));
 8016a16:	8861      	ldrh	r1, [r4, #2]
 8016a18:	4812      	ldr	r0, [pc, #72]	; (8016a64 <stats_display_sys+0x60>)
 8016a1a:	f009 fdbd 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"STAT_COUNTER_F"\n\t", sys->sem.err));
 8016a1e:	88a1      	ldrh	r1, [r4, #4]
 8016a20:	4811      	ldr	r0, [pc, #68]	; (8016a68 <stats_display_sys+0x64>)
 8016a22:	f009 fdb9 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"STAT_COUNTER_F"\n\t", sys->mutex.used));
 8016a26:	88e1      	ldrh	r1, [r4, #6]
 8016a28:	4810      	ldr	r0, [pc, #64]	; (8016a6c <stats_display_sys+0x68>)
 8016a2a:	f009 fdb5 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"STAT_COUNTER_F"\n\t", sys->mutex.max));
 8016a2e:	8921      	ldrh	r1, [r4, #8]
 8016a30:	480f      	ldr	r0, [pc, #60]	; (8016a70 <stats_display_sys+0x6c>)
 8016a32:	f009 fdb1 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"STAT_COUNTER_F"\n\t", sys->mutex.err));
 8016a36:	8961      	ldrh	r1, [r4, #10]
 8016a38:	480e      	ldr	r0, [pc, #56]	; (8016a74 <stats_display_sys+0x70>)
 8016a3a:	f009 fdad 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"STAT_COUNTER_F"\n\t", sys->mbox.used));
 8016a3e:	89a1      	ldrh	r1, [r4, #12]
 8016a40:	480d      	ldr	r0, [pc, #52]	; (8016a78 <stats_display_sys+0x74>)
 8016a42:	f009 fda9 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"STAT_COUNTER_F"\n\t", sys->mbox.max));
 8016a46:	89e1      	ldrh	r1, [r4, #14]
 8016a48:	480c      	ldr	r0, [pc, #48]	; (8016a7c <stats_display_sys+0x78>)
 8016a4a:	f009 fda5 	bl	8020598 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"STAT_COUNTER_F"\n", sys->mbox.err));
 8016a4e:	8a21      	ldrh	r1, [r4, #16]
 8016a50:	480b      	ldr	r0, [pc, #44]	; (8016a80 <stats_display_sys+0x7c>)
}
 8016a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_PLATFORM_DIAG(("mbox.err:   %"STAT_COUNTER_F"\n", sys->mbox.err));
 8016a56:	f009 bd9f 	b.w	8020598 <iprintf>
 8016a5a:	bf00      	nop
 8016a5c:	0803d6c4 	.word	0x0803d6c4
 8016a60:	0803d6cc 	.word	0x0803d6cc
 8016a64:	0803d6e0 	.word	0x0803d6e0
 8016a68:	0803d6f4 	.word	0x0803d6f4
 8016a6c:	0803d708 	.word	0x0803d708
 8016a70:	0803d71c 	.word	0x0803d71c
 8016a74:	0803d730 	.word	0x0803d730
 8016a78:	0803d744 	.word	0x0803d744
 8016a7c:	0803d758 	.word	0x0803d758
 8016a80:	0803d76c 	.word	0x0803d76c

08016a84 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
 8016a84:	b538      	push	{r3, r4, r5, lr}
  s16_t i;

  LINK_STATS_DISPLAY();
 8016a86:	4919      	ldr	r1, [pc, #100]	; (8016aec <stats_display+0x68>)
 8016a88:	4819      	ldr	r0, [pc, #100]	; (8016af0 <stats_display+0x6c>)
 8016a8a:	f7ff ff47 	bl	801691c <stats_display_proto>
  ETHARP_STATS_DISPLAY();
 8016a8e:	4919      	ldr	r1, [pc, #100]	; (8016af4 <stats_display+0x70>)
 8016a90:	4819      	ldr	r0, [pc, #100]	; (8016af8 <stats_display+0x74>)
 8016a92:	4c1a      	ldr	r4, [pc, #104]	; (8016afc <stats_display+0x78>)
 8016a94:	f7ff ff42 	bl	801691c <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
 8016a98:	4919      	ldr	r1, [pc, #100]	; (8016b00 <stats_display+0x7c>)
 8016a9a:	481a      	ldr	r0, [pc, #104]	; (8016b04 <stats_display+0x80>)
 8016a9c:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8016aa0:	f7ff ff3c 	bl	801691c <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
 8016aa4:	4918      	ldr	r1, [pc, #96]	; (8016b08 <stats_display+0x84>)
 8016aa6:	4819      	ldr	r0, [pc, #100]	; (8016b0c <stats_display+0x88>)
 8016aa8:	f7ff ff38 	bl	801691c <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
 8016aac:	4918      	ldr	r1, [pc, #96]	; (8016b10 <stats_display+0x8c>)
 8016aae:	f1a4 0058 	sub.w	r0, r4, #88	; 0x58
 8016ab2:	f7ff ff33 	bl	801691c <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
 8016ab6:	4917      	ldr	r1, [pc, #92]	; (8016b14 <stats_display+0x90>)
 8016ab8:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
 8016abc:	f7ff ff2e 	bl	801691c <stats_display_proto>
  TCP_STATS_DISPLAY();
 8016ac0:	4915      	ldr	r1, [pc, #84]	; (8016b18 <stats_display+0x94>)
 8016ac2:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
 8016ac6:	f7ff ff29 	bl	801691c <stats_display_proto>
  MEM_STATS_DISPLAY();
 8016aca:	4914      	ldr	r1, [pc, #80]	; (8016b1c <stats_display+0x98>)
 8016acc:	f1a4 0010 	sub.w	r0, r4, #16
 8016ad0:	f7ff ff76 	bl	80169c0 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
    MEMP_STATS_DISPLAY(i);
 8016ad4:	f854 0b04 	ldr.w	r0, [r4], #4
    stats_display_mem(mem, mem->name);
 8016ad8:	6801      	ldr	r1, [r0, #0]
 8016ada:	f7ff ff71 	bl	80169c0 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
 8016ade:	42ac      	cmp	r4, r5
 8016ae0:	d1f8      	bne.n	8016ad4 <stats_display+0x50>
  }
  SYS_STATS_DISPLAY();
 8016ae2:	480f      	ldr	r0, [pc, #60]	; (8016b20 <stats_display+0x9c>)
}
 8016ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_STATS_DISPLAY();
 8016ae8:	f7ff bf8c 	b.w	8016a04 <stats_display_sys>
 8016aec:	0803d5a8 	.word	0x0803d5a8
 8016af0:	200361ec 	.word	0x200361ec
 8016af4:	0803d5b0 	.word	0x0803d5b0
 8016af8:	20036204 	.word	0x20036204
 8016afc:	200362a4 	.word	0x200362a4
 8016b00:	0803d5b8 	.word	0x0803d5b8
 8016b04:	2003621c 	.word	0x2003621c
 8016b08:	0803d5c0 	.word	0x0803d5c0
 8016b0c:	20036234 	.word	0x20036234
 8016b10:	0803d5c4 	.word	0x0803d5c4
 8016b14:	0803d5cc 	.word	0x0803d5cc
 8016b18:	0803d5d0 	.word	0x0803d5d0
 8016b1c:	0803d5d4 	.word	0x0803d5d4
 8016b20:	200362e4 	.word	0x200362e4

08016b24 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016b24:	f8df c060 	ldr.w	ip, [pc, #96]	; 8016b88 <tcp_new_port+0x64>
 8016b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8016b2c:	b4f0      	push	{r4, r5, r6, r7}
 8016b2e:	f8bc 0000 	ldrh.w	r0, [ip]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016b32:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016b36:	4f11      	ldr	r7, [pc, #68]	; (8016b7c <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016b38:	4d11      	ldr	r5, [pc, #68]	; (8016b80 <tcp_new_port+0x5c>)
  tcp_port++;
 8016b3a:	3001      	adds	r0, #1
 8016b3c:	4c11      	ldr	r4, [pc, #68]	; (8016b84 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016b3e:	462b      	mov	r3, r5
  tcp_port++;
 8016b40:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016b42:	42b0      	cmp	r0, r6
 8016b44:	bf08      	it	eq
 8016b46:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	b913      	cbnz	r3, 8016b54 <tcp_new_port+0x30>
 8016b4e:	e00c      	b.n	8016b6a <tcp_new_port+0x46>
 8016b50:	68db      	ldr	r3, [r3, #12]
 8016b52:	b153      	cbz	r3, 8016b6a <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 8016b54:	8ada      	ldrh	r2, [r3, #22]
 8016b56:	4282      	cmp	r2, r0
 8016b58:	d1fa      	bne.n	8016b50 <tcp_new_port+0x2c>
 8016b5a:	3901      	subs	r1, #1
 8016b5c:	b289      	uxth	r1, r1
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016b5e:	2900      	cmp	r1, #0
 8016b60:	d1eb      	bne.n	8016b3a <tcp_new_port+0x16>
 8016b62:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 8016b66:	4608      	mov	r0, r1
 8016b68:	e006      	b.n	8016b78 <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016b6a:	42a7      	cmp	r7, r4
 8016b6c:	d002      	beq.n	8016b74 <tcp_new_port+0x50>
 8016b6e:	f854 3b04 	ldr.w	r3, [r4], #4
 8016b72:	e7ea      	b.n	8016b4a <tcp_new_port+0x26>
 8016b74:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8016b78:	bcf0      	pop	{r4, r5, r6, r7}
 8016b7a:	4770      	bx	lr
 8016b7c:	0803da80 	.word	0x0803da80
 8016b80:	20036304 	.word	0x20036304
 8016b84:	0803da74 	.word	0x0803da74
 8016b88:	200003dc 	.word	0x200003dc

08016b8c <tcp_close_shutdown_fin>:
{
 8016b8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016b8e:	4604      	mov	r4, r0
 8016b90:	b310      	cbz	r0, 8016bd8 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8016b92:	7d23      	ldrb	r3, [r4, #20]
 8016b94:	2b04      	cmp	r3, #4
 8016b96:	d005      	beq.n	8016ba4 <tcp_close_shutdown_fin+0x18>
 8016b98:	2b07      	cmp	r3, #7
 8016b9a:	d00e      	beq.n	8016bba <tcp_close_shutdown_fin+0x2e>
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d001      	beq.n	8016ba4 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 8016ba0:	2000      	movs	r0, #0
}
 8016ba2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f003 fdfd 	bl	801a7a4 <tcp_send_fin>
      if (err == ERR_OK) {
 8016baa:	b950      	cbnz	r0, 8016bc2 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8016bac:	2305      	movs	r3, #5
 8016bae:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	f003 ff6b 	bl	801aa8c <tcp_output>
 8016bb6:	2000      	movs	r0, #0
}
 8016bb8:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f003 fdf2 	bl	801a7a4 <tcp_send_fin>
      if (err == ERR_OK) {
 8016bc0:	b138      	cbz	r0, 8016bd2 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8016bc2:	1c43      	adds	r3, r0, #1
 8016bc4:	d1ed      	bne.n	8016ba2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016bc6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8016bc8:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016bca:	f043 0308 	orr.w	r3, r3, #8
 8016bce:	8363      	strh	r3, [r4, #26]
}
 8016bd0:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8016bd2:	2309      	movs	r3, #9
 8016bd4:	7523      	strb	r3, [r4, #20]
 8016bd6:	e7eb      	b.n	8016bb0 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016bd8:	4b03      	ldr	r3, [pc, #12]	; (8016be8 <tcp_close_shutdown_fin+0x5c>)
 8016bda:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016bde:	4903      	ldr	r1, [pc, #12]	; (8016bec <tcp_close_shutdown_fin+0x60>)
 8016be0:	4803      	ldr	r0, [pc, #12]	; (8016bf0 <tcp_close_shutdown_fin+0x64>)
 8016be2:	f009 fcd9 	bl	8020598 <iprintf>
 8016be6:	e7d4      	b.n	8016b92 <tcp_close_shutdown_fin+0x6>
 8016be8:	0803d8b0 	.word	0x0803d8b0
 8016bec:	0803d8e0 	.word	0x0803d8e0
 8016bf0:	08026544 	.word	0x08026544

08016bf4 <tcp_init>:
{
 8016bf4:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016bf6:	f009 fd5f 	bl	80206b8 <rand>
 8016bfa:	4b02      	ldr	r3, [pc, #8]	; (8016c04 <tcp_init+0x10>)
 8016bfc:	4a02      	ldr	r2, [pc, #8]	; (8016c08 <tcp_init+0x14>)
 8016bfe:	4303      	orrs	r3, r0
 8016c00:	8013      	strh	r3, [r2, #0]
}
 8016c02:	bd08      	pop	{r3, pc}
 8016c04:	ffffc000 	.word	0xffffc000
 8016c08:	200003dc 	.word	0x200003dc

08016c0c <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016c0c:	7d03      	ldrb	r3, [r0, #20]
 8016c0e:	2b01      	cmp	r3, #1
{
 8016c10:	b510      	push	{r4, lr}
 8016c12:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016c14:	d005      	beq.n	8016c22 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8016c16:	4621      	mov	r1, r4
 8016c18:	2002      	movs	r0, #2
}
 8016c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8016c1e:	f7fe bf43 	b.w	8015aa8 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016c22:	4906      	ldr	r1, [pc, #24]	; (8016c3c <tcp_free+0x30>)
 8016c24:	22d4      	movs	r2, #212	; 0xd4
 8016c26:	4b06      	ldr	r3, [pc, #24]	; (8016c40 <tcp_free+0x34>)
 8016c28:	4806      	ldr	r0, [pc, #24]	; (8016c44 <tcp_free+0x38>)
 8016c2a:	f009 fcb5 	bl	8020598 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8016c2e:	4621      	mov	r1, r4
 8016c30:	2002      	movs	r0, #2
}
 8016c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8016c36:	f7fe bf37 	b.w	8015aa8 <memp_free>
 8016c3a:	bf00      	nop
 8016c3c:	0803d9a4 	.word	0x0803d9a4
 8016c40:	0803d8b0 	.word	0x0803d8b0
 8016c44:	08026544 	.word	0x08026544

08016c48 <tcp_bind>:
{
 8016c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8016c4a:	4d25      	ldr	r5, [pc, #148]	; (8016ce0 <tcp_bind+0x98>)
 8016c4c:	2900      	cmp	r1, #0
 8016c4e:	bf18      	it	ne
 8016c50:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c52:	2800      	cmp	r0, #0
 8016c54:	d03a      	beq.n	8016ccc <tcp_bind+0x84>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016c56:	7d01      	ldrb	r1, [r0, #20]
 8016c58:	4606      	mov	r6, r0
 8016c5a:	bb69      	cbnz	r1, 8016cb8 <tcp_bind+0x70>
  if (port == 0) {
 8016c5c:	b30a      	cbz	r2, 8016ca2 <tcp_bind+0x5a>
 8016c5e:	4b21      	ldr	r3, [pc, #132]	; (8016ce4 <tcp_bind+0x9c>)
 8016c60:	4f21      	ldr	r7, [pc, #132]	; (8016ce8 <tcp_bind+0xa0>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	b913      	cbnz	r3, 8016c6c <tcp_bind+0x24>
 8016c66:	e00d      	b.n	8016c84 <tcp_bind+0x3c>
 8016c68:	68db      	ldr	r3, [r3, #12]
 8016c6a:	b15b      	cbz	r3, 8016c84 <tcp_bind+0x3c>
        if (cpcb->local_port == port) {
 8016c6c:	8ad8      	ldrh	r0, [r3, #22]
 8016c6e:	4290      	cmp	r0, r2
 8016c70:	d1fa      	bne.n	8016c68 <tcp_bind+0x20>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016c72:	6818      	ldr	r0, [r3, #0]
 8016c74:	b118      	cbz	r0, 8016c7e <tcp_bind+0x36>
                 ip_addr_isany(ipaddr) ||
 8016c76:	682c      	ldr	r4, [r5, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016c78:	b10c      	cbz	r4, 8016c7e <tcp_bind+0x36>
 8016c7a:	42a0      	cmp	r0, r4
 8016c7c:	d1f4      	bne.n	8016c68 <tcp_bind+0x20>
              return ERR_USE;
 8016c7e:	f06f 0007 	mvn.w	r0, #7
}
 8016c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8016c84:	3101      	adds	r1, #1
 8016c86:	2904      	cmp	r1, #4
 8016c88:	d113      	bne.n	8016cb2 <tcp_bind+0x6a>
  if (!ip_addr_isany(ipaddr)
 8016c8a:	682b      	ldr	r3, [r5, #0]
 8016c8c:	b103      	cbz	r3, 8016c90 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016c8e:	6033      	str	r3, [r6, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016c90:	4b16      	ldr	r3, [pc, #88]	; (8016cec <tcp_bind+0xa4>)
  pcb->local_port = port;
 8016c92:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016c94:	681a      	ldr	r2, [r3, #0]
 8016c96:	601e      	str	r6, [r3, #0]
 8016c98:	60f2      	str	r2, [r6, #12]
 8016c9a:	f004 fa2d 	bl	801b0f8 <tcp_timer_needed>
  return ERR_OK;
 8016c9e:	2000      	movs	r0, #0
}
 8016ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8016ca2:	f7ff ff3f 	bl	8016b24 <tcp_new_port>
    if (port == 0) {
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	d1ee      	bne.n	8016c8a <tcp_bind+0x42>
      return ERR_BUF;
 8016cac:	f06f 0001 	mvn.w	r0, #1
}
 8016cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cb2:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 8016cb6:	e7d4      	b.n	8016c62 <tcp_bind+0x1a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016cb8:	4b0d      	ldr	r3, [pc, #52]	; (8016cf0 <tcp_bind+0xa8>)
 8016cba:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016cbe:	490d      	ldr	r1, [pc, #52]	; (8016cf4 <tcp_bind+0xac>)
 8016cc0:	480d      	ldr	r0, [pc, #52]	; (8016cf8 <tcp_bind+0xb0>)
 8016cc2:	f009 fc69 	bl	8020598 <iprintf>
 8016cc6:	f06f 0005 	mvn.w	r0, #5
}
 8016cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016ccc:	4b08      	ldr	r3, [pc, #32]	; (8016cf0 <tcp_bind+0xa8>)
 8016cce:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016cd2:	490a      	ldr	r1, [pc, #40]	; (8016cfc <tcp_bind+0xb4>)
 8016cd4:	4808      	ldr	r0, [pc, #32]	; (8016cf8 <tcp_bind+0xb0>)
 8016cd6:	f009 fc5f 	bl	8020598 <iprintf>
 8016cda:	f06f 000f 	mvn.w	r0, #15
}
 8016cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ce0:	0803f460 	.word	0x0803f460
 8016ce4:	20036304 	.word	0x20036304
 8016ce8:	0803da70 	.word	0x0803da70
 8016cec:	20036308 	.word	0x20036308
 8016cf0:	0803d8b0 	.word	0x0803d8b0
 8016cf4:	0803d818 	.word	0x0803d818
 8016cf8:	08026544 	.word	0x08026544
 8016cfc:	0803d800 	.word	0x0803d800

08016d00 <tcp_listen_with_backlog_and_err>:
{
 8016d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d02:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016d04:	4605      	mov	r5, r0
 8016d06:	2800      	cmp	r0, #0
 8016d08:	d053      	beq.n	8016db2 <tcp_listen_with_backlog_and_err+0xb2>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016d0a:	7d07      	ldrb	r7, [r0, #20]
 8016d0c:	2f00      	cmp	r7, #0
 8016d0e:	d145      	bne.n	8016d9c <tcp_listen_with_backlog_and_err+0x9c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016d10:	f240 3272 	movw	r2, #882	; 0x372
 8016d14:	492c      	ldr	r1, [pc, #176]	; (8016dc8 <tcp_listen_with_backlog_and_err+0xc8>)
 8016d16:	2003      	movs	r0, #3
 8016d18:	f7fe fea2 	bl	8015a60 <memp_malloc_fn>
  if (lpcb == NULL) {
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	d033      	beq.n	8016d8a <tcp_listen_with_backlog_and_err+0x8a>
  lpcb->callback_arg = pcb->callback_arg;
 8016d22:	6929      	ldr	r1, [r5, #16]
  lpcb->state = LISTEN;
 8016d24:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8016d26:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->callback_arg = pcb->callback_arg;
 8016d28:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8016d2a:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8016d2c:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8016d2e:	7d6a      	ldrb	r2, [r5, #21]
 8016d30:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8016d32:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016d34:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8016d36:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8016d38:	7aea      	ldrb	r2, [r5, #11]
 8016d3a:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8016d3c:	7aaa      	ldrb	r2, [r5, #10]
 8016d3e:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016d40:	682a      	ldr	r2, [r5, #0]
 8016d42:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8016d44:	b18b      	cbz	r3, 8016d6a <tcp_listen_with_backlog_and_err+0x6a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016d46:	4b21      	ldr	r3, [pc, #132]	; (8016dcc <tcp_listen_with_backlog_and_err+0xcc>)
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	42aa      	cmp	r2, r5
 8016d4c:	d009      	beq.n	8016d62 <tcp_listen_with_backlog_and_err+0x62>
 8016d4e:	b152      	cbz	r2, 8016d66 <tcp_listen_with_backlog_and_err+0x66>
 8016d50:	68d3      	ldr	r3, [r2, #12]
 8016d52:	429d      	cmp	r5, r3
 8016d54:	d01c      	beq.n	8016d90 <tcp_listen_with_backlog_and_err+0x90>
 8016d56:	b133      	cbz	r3, 8016d66 <tcp_listen_with_backlog_and_err+0x66>
 8016d58:	68da      	ldr	r2, [r3, #12]
 8016d5a:	42aa      	cmp	r2, r5
 8016d5c:	d019      	beq.n	8016d92 <tcp_listen_with_backlog_and_err+0x92>
 8016d5e:	4613      	mov	r3, r2
 8016d60:	e7f9      	b.n	8016d56 <tcp_listen_with_backlog_and_err+0x56>
 8016d62:	68ea      	ldr	r2, [r5, #12]
 8016d64:	601a      	str	r2, [r3, #0]
 8016d66:	2300      	movs	r3, #0
 8016d68:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f7ff ff4e 	bl	8016c0c <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016d70:	4b17      	ldr	r3, [pc, #92]	; (8016dd0 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 8016d72:	4918      	ldr	r1, [pc, #96]	; (8016dd4 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016d74:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8016d76:	61a1      	str	r1, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016d78:	60e2      	str	r2, [r4, #12]
 8016d7a:	601c      	str	r4, [r3, #0]
 8016d7c:	f004 f9bc 	bl	801b0f8 <tcp_timer_needed>
  res = ERR_OK;
 8016d80:	2300      	movs	r3, #0
  if (err != NULL) {
 8016d82:	b106      	cbz	r6, 8016d86 <tcp_listen_with_backlog_and_err+0x86>
    *err = res;
 8016d84:	7033      	strb	r3, [r6, #0]
}
 8016d86:	4620      	mov	r0, r4
 8016d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    res = ERR_MEM;
 8016d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d8e:	e7f8      	b.n	8016d82 <tcp_listen_with_backlog_and_err+0x82>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016d90:	4613      	mov	r3, r2
 8016d92:	68ea      	ldr	r2, [r5, #12]
 8016d94:	60da      	str	r2, [r3, #12]
 8016d96:	2300      	movs	r3, #0
 8016d98:	60eb      	str	r3, [r5, #12]
 8016d9a:	e7e6      	b.n	8016d6a <tcp_listen_with_backlog_and_err+0x6a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016d9c:	4b0a      	ldr	r3, [pc, #40]	; (8016dc8 <tcp_listen_with_backlog_and_err+0xc8>)
 8016d9e:	f240 325a 	movw	r2, #858	; 0x35a
 8016da2:	490d      	ldr	r1, [pc, #52]	; (8016dd8 <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8016da4:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016da6:	480d      	ldr	r0, [pc, #52]	; (8016ddc <tcp_listen_with_backlog_and_err+0xdc>)
 8016da8:	f009 fbf6 	bl	8020598 <iprintf>
 8016dac:	f06f 030e 	mvn.w	r3, #14
 8016db0:	e7e7      	b.n	8016d82 <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016db2:	4b05      	ldr	r3, [pc, #20]	; (8016dc8 <tcp_listen_with_backlog_and_err+0xc8>)
 8016db4:	f240 3259 	movw	r2, #857	; 0x359
 8016db8:	4909      	ldr	r1, [pc, #36]	; (8016de0 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 8016dba:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016dbc:	4807      	ldr	r0, [pc, #28]	; (8016ddc <tcp_listen_with_backlog_and_err+0xdc>)
 8016dbe:	f009 fbeb 	bl	8020598 <iprintf>
 8016dc2:	f06f 030f 	mvn.w	r3, #15
 8016dc6:	e7dc      	b.n	8016d82 <tcp_listen_with_backlog_and_err+0x82>
 8016dc8:	0803d8b0 	.word	0x0803d8b0
 8016dcc:	20036308 	.word	0x20036308
 8016dd0:	20036304 	.word	0x20036304
 8016dd4:	08017821 	.word	0x08017821
 8016dd8:	0803d9e8 	.word	0x0803d9e8
 8016ddc:	08026544 	.word	0x08026544
 8016de0:	0803d9b8 	.word	0x0803d9b8

08016de4 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016de4:	2200      	movs	r2, #0
 8016de6:	f7ff bf8b 	b.w	8016d00 <tcp_listen_with_backlog_and_err>
 8016dea:	bf00      	nop

08016dec <tcp_update_rcv_ann_wnd>:
{
 8016dec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016dee:	4604      	mov	r4, r0
 8016df0:	b1a8      	cbz	r0, 8016e1e <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016df2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016df4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016df6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016df8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016dfa:	1a88      	subs	r0, r1, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016dfc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016e00:	4428      	add	r0, r5
 8016e02:	bf94      	ite	ls
 8016e04:	1ac3      	subls	r3, r0, r3
 8016e06:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	db01      	blt.n	8016e12 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016e0e:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8016e10:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016e12:	1aab      	subs	r3, r5, r2
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	dd0a      	ble.n	8016e2e <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 8016e18:	2000      	movs	r0, #0
 8016e1a:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 8016e1c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016e1e:	4b0b      	ldr	r3, [pc, #44]	; (8016e4c <tcp_update_rcv_ann_wnd+0x60>)
 8016e20:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016e24:	490a      	ldr	r1, [pc, #40]	; (8016e50 <tcp_update_rcv_ann_wnd+0x64>)
 8016e26:	480b      	ldr	r0, [pc, #44]	; (8016e54 <tcp_update_rcv_ann_wnd+0x68>)
 8016e28:	f009 fbb6 	bl	8020598 <iprintf>
 8016e2c:	e7e1      	b.n	8016df2 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016e2e:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016e30:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8016e34:	d202      	bcs.n	8016e3c <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 8016e36:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016e38:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016e3c:	4b03      	ldr	r3, [pc, #12]	; (8016e4c <tcp_update_rcv_ann_wnd+0x60>)
 8016e3e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016e42:	4905      	ldr	r1, [pc, #20]	; (8016e58 <tcp_update_rcv_ann_wnd+0x6c>)
 8016e44:	4803      	ldr	r0, [pc, #12]	; (8016e54 <tcp_update_rcv_ann_wnd+0x68>)
 8016e46:	f009 fba7 	bl	8020598 <iprintf>
 8016e4a:	e7f4      	b.n	8016e36 <tcp_update_rcv_ann_wnd+0x4a>
 8016e4c:	0803d8b0 	.word	0x0803d8b0
 8016e50:	0803de3c 	.word	0x0803de3c
 8016e54:	08026544 	.word	0x08026544
 8016e58:	0803de60 	.word	0x0803de60

08016e5c <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016e5c:	b378      	cbz	r0, 8016ebe <tcp_recved+0x62>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016e5e:	7d03      	ldrb	r3, [r0, #20]
 8016e60:	2b01      	cmp	r3, #1
{
 8016e62:	b570      	push	{r4, r5, r6, lr}
 8016e64:	4604      	mov	r4, r0
 8016e66:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016e68:	d021      	beq.n	8016eae <tcp_recved+0x52>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016e6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016e6c:	1959      	adds	r1, r3, r5
 8016e6e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016e70:	428b      	cmp	r3, r1
 8016e72:	d802      	bhi.n	8016e7a <tcp_recved+0x1e>
 8016e74:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8016e78:	d909      	bls.n	8016e8e <tcp_recved+0x32>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016e7a:	f44f 6306 	mov.w	r3, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016e7e:	4620      	mov	r0, r4
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016e80:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016e82:	f7ff ffb3 	bl	8016dec <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016e86:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8016e8a:	d207      	bcs.n	8016e9c <tcp_recved+0x40>
}
 8016e8c:	bd70      	pop	{r4, r5, r6, pc}
    pcb->rcv_wnd = rcv_wnd;
 8016e8e:	8521      	strh	r1, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016e90:	4620      	mov	r0, r4
 8016e92:	f7ff ffab 	bl	8016dec <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016e96:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8016e9a:	d3f7      	bcc.n	8016e8c <tcp_recved+0x30>
    tcp_ack_now(pcb);
 8016e9c:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 8016e9e:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8016ea0:	f043 0302 	orr.w	r3, r3, #2
 8016ea4:	8363      	strh	r3, [r4, #26]
}
 8016ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8016eaa:	f003 bdef 	b.w	801aa8c <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016eae:	4b07      	ldr	r3, [pc, #28]	; (8016ecc <tcp_recved+0x70>)
 8016eb0:	f240 32d3 	movw	r2, #979	; 0x3d3
 8016eb4:	4906      	ldr	r1, [pc, #24]	; (8016ed0 <tcp_recved+0x74>)
 8016eb6:	4807      	ldr	r0, [pc, #28]	; (8016ed4 <tcp_recved+0x78>)
 8016eb8:	f009 fb6e 	bl	8020598 <iprintf>
 8016ebc:	e7d5      	b.n	8016e6a <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016ebe:	4b03      	ldr	r3, [pc, #12]	; (8016ecc <tcp_recved+0x70>)
 8016ec0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016ec4:	4904      	ldr	r1, [pc, #16]	; (8016ed8 <tcp_recved+0x7c>)
 8016ec6:	4803      	ldr	r0, [pc, #12]	; (8016ed4 <tcp_recved+0x78>)
 8016ec8:	f009 bb66 	b.w	8020598 <iprintf>
 8016ecc:	0803d8b0 	.word	0x0803d8b0
 8016ed0:	0803dbe8 	.word	0x0803dbe8
 8016ed4:	08026544 	.word	0x08026544
 8016ed8:	0803dbd0 	.word	0x0803dbd0

08016edc <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8016edc:	b158      	cbz	r0, 8016ef6 <tcp_seg_free+0x1a>
{
 8016ede:	b510      	push	{r4, lr}
 8016ee0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8016ee2:	6840      	ldr	r0, [r0, #4]
 8016ee4:	b108      	cbz	r0, 8016eea <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8016ee6:	f7ff f8b9 	bl	801605c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016eea:	4621      	mov	r1, r4
 8016eec:	2004      	movs	r0, #4
  }
}
 8016eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8016ef2:	f7fe bdd9 	b.w	8015aa8 <memp_free>
 8016ef6:	4770      	bx	lr

08016ef8 <tcp_segs_free>:
  while (seg != NULL) {
 8016ef8:	b138      	cbz	r0, 8016f0a <tcp_segs_free+0x12>
{
 8016efa:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8016efc:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8016efe:	f7ff ffed 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8016f02:	4620      	mov	r0, r4
 8016f04:	2c00      	cmp	r4, #0
 8016f06:	d1f9      	bne.n	8016efc <tcp_segs_free+0x4>
}
 8016f08:	bd10      	pop	{r4, pc}
 8016f0a:	4770      	bx	lr

08016f0c <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8016f0c:	b108      	cbz	r0, 8016f12 <tcp_setprio+0x6>

  pcb->prio = prio;
 8016f0e:	7541      	strb	r1, [r0, #21]
}
 8016f10:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8016f12:	4b03      	ldr	r3, [pc, #12]	; (8016f20 <tcp_setprio+0x14>)
 8016f14:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8016f18:	4902      	ldr	r1, [pc, #8]	; (8016f24 <tcp_setprio+0x18>)
 8016f1a:	4803      	ldr	r0, [pc, #12]	; (8016f28 <tcp_setprio+0x1c>)
 8016f1c:	f009 bb3c 	b.w	8020598 <iprintf>
 8016f20:	0803d8b0 	.word	0x0803d8b0
 8016f24:	0803dc54 	.word	0x0803dc54
 8016f28:	08026544 	.word	0x08026544

08016f2c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016f2c:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016f2e:	4605      	mov	r5, r0
 8016f30:	b1b0      	cbz	r0, 8016f60 <tcp_seg_copy+0x34>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016f32:	f240 6284 	movw	r2, #1668	; 0x684
 8016f36:	490e      	ldr	r1, [pc, #56]	; (8016f70 <tcp_seg_copy+0x44>)
 8016f38:	2004      	movs	r0, #4
 8016f3a:	f7fe fd91 	bl	8015a60 <memp_malloc_fn>
  if (cseg == NULL) {
 8016f3e:	4604      	mov	r4, r0
 8016f40:	b160      	cbz	r0, 8016f5c <tcp_seg_copy+0x30>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016f42:	682b      	ldr	r3, [r5, #0]
 8016f44:	6868      	ldr	r0, [r5, #4]
 8016f46:	68a9      	ldr	r1, [r5, #8]
 8016f48:	68ea      	ldr	r2, [r5, #12]
 8016f4a:	6060      	str	r0, [r4, #4]
 8016f4c:	6023      	str	r3, [r4, #0]
 8016f4e:	60a1      	str	r1, [r4, #8]
 8016f50:	60e2      	str	r2, [r4, #12]
 8016f52:	692b      	ldr	r3, [r5, #16]
  pbuf_ref(cseg->p);
 8016f54:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016f56:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 8016f58:	f7ff f9f4 	bl	8016344 <pbuf_ref>
  return cseg;
}
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016f60:	4b03      	ldr	r3, [pc, #12]	; (8016f70 <tcp_seg_copy+0x44>)
 8016f62:	f240 6282 	movw	r2, #1666	; 0x682
 8016f66:	4903      	ldr	r1, [pc, #12]	; (8016f74 <tcp_seg_copy+0x48>)
 8016f68:	4803      	ldr	r0, [pc, #12]	; (8016f78 <tcp_seg_copy+0x4c>)
 8016f6a:	f009 fb15 	bl	8020598 <iprintf>
 8016f6e:	e7e0      	b.n	8016f32 <tcp_seg_copy+0x6>
 8016f70:	0803d8b0 	.word	0x0803d8b0
 8016f74:	0803dc10 	.word	0x0803dc10
 8016f78:	08026544 	.word	0x08026544

08016f7c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016f7c:	b100      	cbz	r0, 8016f80 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8016f7e:	6101      	str	r1, [r0, #16]
  }
}
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop

08016f84 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016f84:	b140      	cbz	r0, 8016f98 <tcp_recv+0x14>
{
 8016f86:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016f88:	7d03      	ldrb	r3, [r0, #20]
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	460d      	mov	r5, r1
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d003      	beq.n	8016f9a <tcp_recv+0x16>
    pcb->recv = recv;
 8016f92:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 8016f96:	bd38      	pop	{r3, r4, r5, pc}
 8016f98:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016f9a:	4b05      	ldr	r3, [pc, #20]	; (8016fb0 <tcp_recv+0x2c>)
 8016f9c:	f240 72df 	movw	r2, #2015	; 0x7df
 8016fa0:	4904      	ldr	r1, [pc, #16]	; (8016fb4 <tcp_recv+0x30>)
 8016fa2:	4805      	ldr	r0, [pc, #20]	; (8016fb8 <tcp_recv+0x34>)
 8016fa4:	f009 faf8 	bl	8020598 <iprintf>
    pcb->recv = recv;
 8016fa8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8016fac:	bd38      	pop	{r3, r4, r5, pc}
 8016fae:	bf00      	nop
 8016fb0:	0803d8b0 	.word	0x0803d8b0
 8016fb4:	0803db8c 	.word	0x0803db8c
 8016fb8:	08026544 	.word	0x08026544

08016fbc <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016fbc:	b140      	cbz	r0, 8016fd0 <tcp_sent+0x14>
{
 8016fbe:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016fc0:	7d03      	ldrb	r3, [r0, #20]
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	460d      	mov	r5, r1
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d003      	beq.n	8016fd2 <tcp_sent+0x16>
    pcb->sent = sent;
 8016fca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8016fce:	bd38      	pop	{r3, r4, r5, pc}
 8016fd0:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016fd2:	4b05      	ldr	r3, [pc, #20]	; (8016fe8 <tcp_sent+0x2c>)
 8016fd4:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8016fd8:	4904      	ldr	r1, [pc, #16]	; (8016fec <tcp_sent+0x30>)
 8016fda:	4805      	ldr	r0, [pc, #20]	; (8016ff0 <tcp_sent+0x34>)
 8016fdc:	f009 fadc 	bl	8020598 <iprintf>
    pcb->sent = sent;
 8016fe0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8016fe4:	bd38      	pop	{r3, r4, r5, pc}
 8016fe6:	bf00      	nop
 8016fe8:	0803d8b0 	.word	0x0803d8b0
 8016fec:	0803dc2c 	.word	0x0803dc2c
 8016ff0:	08026544 	.word	0x08026544

08016ff4 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016ff4:	b140      	cbz	r0, 8017008 <tcp_err+0x14>
{
 8016ff6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016ff8:	7d03      	ldrb	r3, [r0, #20]
 8016ffa:	4604      	mov	r4, r0
 8016ffc:	460d      	mov	r5, r1
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d003      	beq.n	801700a <tcp_err+0x16>
    pcb->errf = err;
 8017002:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 8017006:	bd38      	pop	{r3, r4, r5, pc}
 8017008:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801700a:	4b05      	ldr	r3, [pc, #20]	; (8017020 <tcp_err+0x2c>)
 801700c:	f640 020d 	movw	r2, #2061	; 0x80d
 8017010:	4904      	ldr	r1, [pc, #16]	; (8017024 <tcp_err+0x30>)
 8017012:	4805      	ldr	r0, [pc, #20]	; (8017028 <tcp_err+0x34>)
 8017014:	f009 fac0 	bl	8020598 <iprintf>
    pcb->errf = err;
 8017018:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801701c:	bd38      	pop	{r3, r4, r5, pc}
 801701e:	bf00      	nop
 8017020:	0803d8b0 	.word	0x0803d8b0
 8017024:	0803d97c 	.word	0x0803d97c
 8017028:	08026544 	.word	0x08026544

0801702c <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801702c:	b118      	cbz	r0, 8017036 <tcp_accept+0xa>
 801702e:	7d03      	ldrb	r3, [r0, #20]
 8017030:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8017032:	bf08      	it	eq
 8017034:	6181      	streq	r1, [r0, #24]
  }
}
 8017036:	4770      	bx	lr

08017038 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017038:	b1a8      	cbz	r0, 8017066 <tcp_poll+0x2e>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801703a:	7d03      	ldrb	r3, [r0, #20]
 801703c:	2b01      	cmp	r3, #1
{
 801703e:	b570      	push	{r4, r5, r6, lr}
 8017040:	4604      	mov	r4, r0
 8017042:	4615      	mov	r5, r2
 8017044:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017046:	d003      	beq.n	8017050 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017048:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801704c:	7765      	strb	r5, [r4, #29]
}
 801704e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017050:	4b08      	ldr	r3, [pc, #32]	; (8017074 <tcp_poll+0x3c>)
 8017052:	f640 023e 	movw	r2, #2110	; 0x83e
 8017056:	4908      	ldr	r1, [pc, #32]	; (8017078 <tcp_poll+0x40>)
 8017058:	4808      	ldr	r0, [pc, #32]	; (801707c <tcp_poll+0x44>)
 801705a:	f009 fa9d 	bl	8020598 <iprintf>
  pcb->poll = poll;
 801705e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8017062:	7765      	strb	r5, [r4, #29]
}
 8017064:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017066:	4b03      	ldr	r3, [pc, #12]	; (8017074 <tcp_poll+0x3c>)
 8017068:	f640 023d 	movw	r2, #2109	; 0x83d
 801706c:	4904      	ldr	r1, [pc, #16]	; (8017080 <tcp_poll+0x48>)
 801706e:	4803      	ldr	r0, [pc, #12]	; (801707c <tcp_poll+0x44>)
 8017070:	f009 ba92 	b.w	8020598 <iprintf>
 8017074:	0803d8b0 	.word	0x0803d8b0
 8017078:	0803db44 	.word	0x0803db44
 801707c:	08026544 	.word	0x08026544
 8017080:	0803db2c 	.word	0x0803db2c

08017084 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017084:	2800      	cmp	r0, #0
 8017086:	d02f      	beq.n	80170e8 <tcp_pcb_purge+0x64>

  if (pcb->state != CLOSED &&
 8017088:	7d03      	ldrb	r3, [r0, #20]
      pcb->state != TIME_WAIT &&
 801708a:	2b0a      	cmp	r3, #10
 801708c:	d02b      	beq.n	80170e6 <tcp_pcb_purge+0x62>
 801708e:	2b01      	cmp	r3, #1
 8017090:	d929      	bls.n	80170e6 <tcp_pcb_purge+0x62>
{
 8017092:	b570      	push	{r4, r5, r6, lr}
 8017094:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017096:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8017098:	b118      	cbz	r0, 80170a2 <tcp_pcb_purge+0x1e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801709a:	f7fe ffdf 	bl	801605c <pbuf_free>
      pcb->refused_data = NULL;
 801709e:	2300      	movs	r3, #0
 80170a0:	67a3      	str	r3, [r4, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80170a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80170a4:	b130      	cbz	r0, 80170b4 <tcp_pcb_purge+0x30>
    struct tcp_seg *next = seg->next;
 80170a6:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80170a8:	f7ff ff18 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 80170ac:	4628      	mov	r0, r5
 80170ae:	2d00      	cmp	r5, #0
 80170b0:	d1f9      	bne.n	80170a6 <tcp_pcb_purge+0x22>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 80170b2:	6765      	str	r5, [r4, #116]	; 0x74
    pcb->rtime = -1;
 80170b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 80170b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 80170ba:	8623      	strh	r3, [r4, #48]	; 0x30
  while (seg != NULL) {
 80170bc:	b128      	cbz	r0, 80170ca <tcp_pcb_purge+0x46>
    struct tcp_seg *next = seg->next;
 80170be:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80170c0:	f7ff ff0c 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 80170c4:	4628      	mov	r0, r5
 80170c6:	2d00      	cmp	r5, #0
 80170c8:	d1f9      	bne.n	80170be <tcp_pcb_purge+0x3a>
    tcp_segs_free(pcb->unacked);
 80170ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
  while (seg != NULL) {
 80170cc:	b128      	cbz	r0, 80170da <tcp_pcb_purge+0x56>
    struct tcp_seg *next = seg->next;
 80170ce:	6805      	ldr	r5, [r0, #0]
    tcp_seg_free(seg);
 80170d0:	f7ff ff04 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 80170d4:	4628      	mov	r0, r5
 80170d6:	2d00      	cmp	r5, #0
 80170d8:	d1f9      	bne.n	80170ce <tcp_pcb_purge+0x4a>
    pcb->unacked = pcb->unsent = NULL;
 80170da:	2300      	movs	r3, #0
 80170dc:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 80170e0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 80170e4:	bd70      	pop	{r4, r5, r6, pc}
 80170e6:	4770      	bx	lr
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80170e8:	4b03      	ldr	r3, [pc, #12]	; (80170f8 <tcp_pcb_purge+0x74>)
 80170ea:	f640 0251 	movw	r2, #2129	; 0x851
 80170ee:	4903      	ldr	r1, [pc, #12]	; (80170fc <tcp_pcb_purge+0x78>)
 80170f0:	4803      	ldr	r0, [pc, #12]	; (8017100 <tcp_pcb_purge+0x7c>)
 80170f2:	f009 ba51 	b.w	8020598 <iprintf>
 80170f6:	bf00      	nop
 80170f8:	0803d8b0 	.word	0x0803d8b0
 80170fc:	0803da80 	.word	0x0803da80
 8017100:	08026544 	.word	0x08026544

08017104 <tcp_slowtmr>:
{
 8017104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8017108:	4e9d      	ldr	r6, [pc, #628]	; (8017380 <tcp_slowtmr+0x27c>)
{
 801710a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801710c:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80173ac <tcp_slowtmr+0x2a8>
  ++tcp_ticks;
 8017110:	6832      	ldr	r2, [r6, #0]
  ++tcp_timer_ctr;
 8017112:	f898 3000 	ldrb.w	r3, [r8]
  ++tcp_ticks;
 8017116:	3201      	adds	r2, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017118:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80173b0 <tcp_slowtmr+0x2ac>
  ++tcp_timer_ctr;
 801711c:	3301      	adds	r3, #1
  ++tcp_ticks;
 801711e:	6032      	str	r2, [r6, #0]
  ++tcp_timer_ctr;
 8017120:	f888 3000 	strb.w	r3, [r8]
  pcb = tcp_active_pcbs;
 8017124:	4b97      	ldr	r3, [pc, #604]	; (8017384 <tcp_slowtmr+0x280>)
 8017126:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8017128:	2c00      	cmp	r4, #0
 801712a:	d07f      	beq.n	801722c <tcp_slowtmr+0x128>
  prev = NULL;
 801712c:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801712e:	7d23      	ldrb	r3, [r4, #20]
 8017130:	2b00      	cmp	r3, #0
 8017132:	f000 80f6 	beq.w	8017322 <tcp_slowtmr+0x21e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017136:	2b01      	cmp	r3, #1
 8017138:	f000 80fe 	beq.w	8017338 <tcp_slowtmr+0x234>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801713c:	2b0a      	cmp	r3, #10
 801713e:	f000 8106 	beq.w	801734e <tcp_slowtmr+0x24a>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017142:	f898 2000 	ldrb.w	r2, [r8]
 8017146:	7fa3      	ldrb	r3, [r4, #30]
 8017148:	4293      	cmp	r3, r2
 801714a:	f000 810d 	beq.w	8017368 <tcp_slowtmr+0x264>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801714e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8017150:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017152:	2b02      	cmp	r3, #2
 8017154:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8017158:	f000 810c 	beq.w	8017374 <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801715c:	2a0b      	cmp	r2, #11
 801715e:	f240 80c7 	bls.w	80172f0 <tcp_slowtmr+0x1ec>
      ++pcb_remove;
 8017162:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8017164:	2b06      	cmp	r3, #6
 8017166:	f000 80b6 	beq.w	80172d6 <tcp_slowtmr+0x1d2>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801716a:	f894 a009 	ldrb.w	sl, [r4, #9]
 801716e:	f01a 0a08 	ands.w	sl, sl, #8
 8017172:	d01d      	beq.n	80171b0 <tcp_slowtmr+0xac>
 8017174:	2b04      	cmp	r3, #4
 8017176:	d007      	beq.n	8017188 <tcp_slowtmr+0x84>
 8017178:	f1a3 0307 	sub.w	r3, r3, #7
 801717c:	fab3 f383 	clz	r3, r3
 8017180:	095b      	lsrs	r3, r3, #5
 8017182:	2b00      	cmp	r3, #0
 8017184:	f000 80b1 	beq.w	80172ea <tcp_slowtmr+0x1e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017188:	6832      	ldr	r2, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801718a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801718e:	4b7e      	ldr	r3, [pc, #504]	; (8017388 <tcp_slowtmr+0x284>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017190:	9205      	str	r2, [sp, #20]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017192:	4403      	add	r3, r0
 8017194:	4a7d      	ldr	r2, [pc, #500]	; (801738c <tcp_slowtmr+0x288>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017196:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017198:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801719c:	9a05      	ldr	r2, [sp, #20]
 801719e:	1a52      	subs	r2, r2, r1
 80171a0:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80171a4:	f240 8157 	bls.w	8017456 <tcp_slowtmr+0x352>
        ++pcb_remove;
 80171a8:	3501      	adds	r5, #1
        ++pcb_reset;
 80171aa:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 80171ae:	b2ed      	uxtb	r5, r5
    if (pcb->ooseq != NULL &&
 80171b0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80171b2:	b148      	cbz	r0, 80171c8 <tcp_slowtmr+0xc4>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80171b4:	6833      	ldr	r3, [r6, #0]
 80171b6:	6a22      	ldr	r2, [r4, #32]
 80171b8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80171bc:	1a9b      	subs	r3, r3, r2
 80171be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    if (pcb->ooseq != NULL &&
 80171c2:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 80171c6:	d252      	bcs.n	801726e <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 80171c8:	7d23      	ldrb	r3, [r4, #20]
 80171ca:	2b03      	cmp	r3, #3
 80171cc:	d05b      	beq.n	8017286 <tcp_slowtmr+0x182>
    if (pcb->state == LAST_ACK) {
 80171ce:	2b09      	cmp	r3, #9
 80171d0:	d15e      	bne.n	8017290 <tcp_slowtmr+0x18c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80171d2:	6833      	ldr	r3, [r6, #0]
 80171d4:	6a22      	ldr	r2, [r4, #32]
 80171d6:	1a9b      	subs	r3, r3, r2
 80171d8:	2bf0      	cmp	r3, #240	; 0xf0
 80171da:	d959      	bls.n	8017290 <tcp_slowtmr+0x18c>
      tcp_pcb_purge(pcb);
 80171dc:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80171de:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80171e2:	f7ff ff4f 	bl	8017084 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80171e6:	4b67      	ldr	r3, [pc, #412]	; (8017384 <tcp_slowtmr+0x280>)
 80171e8:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80171ea:	2f00      	cmp	r7, #0
 80171ec:	f000 8197 	beq.w	801751e <tcp_slowtmr+0x41a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80171f0:	42a3      	cmp	r3, r4
 80171f2:	f000 81aa 	beq.w	801754a <tcp_slowtmr+0x446>
        prev->next = pcb->next;
 80171f6:	68e3      	ldr	r3, [r4, #12]
 80171f8:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 80171fa:	f1ba 0f00 	cmp.w	sl, #0
 80171fe:	f040 8157 	bne.w	80174b0 <tcp_slowtmr+0x3ac>
      tcp_free(pcb2);
 8017202:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8017204:	4d62      	ldr	r5, [pc, #392]	; (8017390 <tcp_slowtmr+0x28c>)
      pcb = pcb->next;
 8017206:	e9d4 4a03 	ldrd	r4, sl, [r4, #12]
      tcp_free(pcb2);
 801720a:	f7ff fcff 	bl	8016c0c <tcp_free>
      tcp_active_pcbs_changed = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	702b      	strb	r3, [r5, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017212:	f1bb 0f00 	cmp.w	fp, #0
 8017216:	d007      	beq.n	8017228 <tcp_slowtmr+0x124>
 8017218:	4650      	mov	r0, sl
 801721a:	f06f 010c 	mvn.w	r1, #12
 801721e:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8017220:	782b      	ldrb	r3, [r5, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	f47f af7e 	bne.w	8017124 <tcp_slowtmr+0x20>
  while (pcb != NULL) {
 8017228:	2c00      	cmp	r4, #0
 801722a:	d180      	bne.n	801712e <tcp_slowtmr+0x2a>
  pcb = tcp_tw_pcbs;
 801722c:	4f59      	ldr	r7, [pc, #356]	; (8017394 <tcp_slowtmr+0x290>)
 801722e:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8017230:	b1d4      	cbz	r4, 8017268 <tcp_slowtmr+0x164>
  prev = NULL;
 8017232:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017234:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80173b0 <tcp_slowtmr+0x2ac>
 8017238:	f8df a178 	ldr.w	sl, [pc, #376]	; 80173b4 <tcp_slowtmr+0x2b0>
 801723c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801739c <tcp_slowtmr+0x298>
 8017240:	7d23      	ldrb	r3, [r4, #20]
 8017242:	2b0a      	cmp	r3, #10
 8017244:	d006      	beq.n	8017254 <tcp_slowtmr+0x150>
 8017246:	464b      	mov	r3, r9
 8017248:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801724c:	4651      	mov	r1, sl
 801724e:	4640      	mov	r0, r8
 8017250:	f009 f9a2 	bl	8020598 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017254:	6833      	ldr	r3, [r6, #0]
 8017256:	6a22      	ldr	r2, [r4, #32]
 8017258:	1a9b      	subs	r3, r3, r2
 801725a:	2bf0      	cmp	r3, #240	; 0xf0
 801725c:	f200 8114 	bhi.w	8017488 <tcp_slowtmr+0x384>
      pcb = pcb->next;
 8017260:	4625      	mov	r5, r4
 8017262:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8017264:	2c00      	cmp	r4, #0
 8017266:	d1eb      	bne.n	8017240 <tcp_slowtmr+0x13c>
}
 8017268:	b007      	add	sp, #28
 801726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 801726e:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017272:	f7ff fe33 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8017276:	4658      	mov	r0, fp
 8017278:	2800      	cmp	r0, #0
 801727a:	d1f8      	bne.n	801726e <tcp_slowtmr+0x16a>
    if (pcb->state == SYN_RCVD) {
 801727c:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 801727e:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8017282:	2b03      	cmp	r3, #3
 8017284:	d1a3      	bne.n	80171ce <tcp_slowtmr+0xca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017286:	6833      	ldr	r3, [r6, #0]
 8017288:	6a22      	ldr	r2, [r4, #32]
 801728a:	1a9b      	subs	r3, r3, r2
 801728c:	2b28      	cmp	r3, #40	; 0x28
 801728e:	d8a5      	bhi.n	80171dc <tcp_slowtmr+0xd8>
    if (pcb_remove) {
 8017290:	2d00      	cmp	r5, #0
 8017292:	d1a3      	bne.n	80171dc <tcp_slowtmr+0xd8>
      ++prev->polltmr;
 8017294:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017296:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8017298:	3301      	adds	r3, #1
      pcb = pcb->next;
 801729a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      ++prev->polltmr;
 801729e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80172a0:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80172a2:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80172a4:	d811      	bhi.n	80172ca <tcp_slowtmr+0x1c6>
        tcp_active_pcbs_changed = 0;
 80172a6:	4f3a      	ldr	r7, [pc, #232]	; (8017390 <tcp_slowtmr+0x28c>)
        TCP_EVENT_POLL(prev, err);
 80172a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 80172ac:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80172ae:	703d      	strb	r5, [r7, #0]
        TCP_EVENT_POLL(prev, err);
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f000 810a 	beq.w	80174ca <tcp_slowtmr+0x3c6>
 80172b6:	4621      	mov	r1, r4
 80172b8:	6920      	ldr	r0, [r4, #16]
 80172ba:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80172bc:	783b      	ldrb	r3, [r7, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	f47f af30 	bne.w	8017124 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f000 8100 	beq.w	80174ca <tcp_slowtmr+0x3c6>
 80172ca:	4627      	mov	r7, r4
      pcb = pcb->next;
 80172cc:	4654      	mov	r4, sl
  while (pcb != NULL) {
 80172ce:	2c00      	cmp	r4, #0
 80172d0:	f47f af2d 	bne.w	801712e <tcp_slowtmr+0x2a>
 80172d4:	e7aa      	b.n	801722c <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 80172d6:	8b63      	ldrh	r3, [r4, #26]
 80172d8:	06db      	lsls	r3, r3, #27
 80172da:	d506      	bpl.n	80172ea <tcp_slowtmr+0x1e6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80172dc:	6833      	ldr	r3, [r6, #0]
 80172de:	6a22      	ldr	r2, [r4, #32]
 80172e0:	1a9b      	subs	r3, r3, r2
 80172e2:	2b28      	cmp	r3, #40	; 0x28
 80172e4:	d901      	bls.n	80172ea <tcp_slowtmr+0x1e6>
          ++pcb_remove;
 80172e6:	3501      	adds	r5, #1
 80172e8:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 80172ea:	f04f 0a00 	mov.w	sl, #0
 80172ee:	e75f      	b.n	80171b0 <tcp_slowtmr+0xac>
      if (pcb->persist_backoff > 0) {
 80172f0:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 80172f4:	2d00      	cmp	r5, #0
 80172f6:	d05f      	beq.n	80173b8 <tcp_slowtmr+0x2b4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80172f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80172fa:	b133      	cbz	r3, 801730a <tcp_slowtmr+0x206>
 80172fc:	464b      	mov	r3, r9
 80172fe:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017302:	4925      	ldr	r1, [pc, #148]	; (8017398 <tcp_slowtmr+0x294>)
 8017304:	4825      	ldr	r0, [pc, #148]	; (801739c <tcp_slowtmr+0x298>)
 8017306:	f009 f947 	bl	8020598 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801730a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801730c:	2b00      	cmp	r3, #0
 801730e:	f000 8131 	beq.w	8017574 <tcp_slowtmr+0x470>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8017312:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8017316:	2b0b      	cmp	r3, #11
 8017318:	f240 80e0 	bls.w	80174dc <tcp_slowtmr+0x3d8>
 801731c:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801731e:	2501      	movs	r5, #1
 8017320:	e720      	b.n	8017164 <tcp_slowtmr+0x60>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017322:	464b      	mov	r3, r9
 8017324:	f240 42be 	movw	r2, #1214	; 0x4be
 8017328:	491d      	ldr	r1, [pc, #116]	; (80173a0 <tcp_slowtmr+0x29c>)
 801732a:	481c      	ldr	r0, [pc, #112]	; (801739c <tcp_slowtmr+0x298>)
 801732c:	f009 f934 	bl	8020598 <iprintf>
 8017330:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017332:	2b01      	cmp	r3, #1
 8017334:	f47f af02 	bne.w	801713c <tcp_slowtmr+0x38>
 8017338:	464b      	mov	r3, r9
 801733a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801733e:	4919      	ldr	r1, [pc, #100]	; (80173a4 <tcp_slowtmr+0x2a0>)
 8017340:	4816      	ldr	r0, [pc, #88]	; (801739c <tcp_slowtmr+0x298>)
 8017342:	f009 f929 	bl	8020598 <iprintf>
 8017346:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017348:	2b0a      	cmp	r3, #10
 801734a:	f47f aefa 	bne.w	8017142 <tcp_slowtmr+0x3e>
 801734e:	464b      	mov	r3, r9
 8017350:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017354:	4914      	ldr	r1, [pc, #80]	; (80173a8 <tcp_slowtmr+0x2a4>)
 8017356:	4811      	ldr	r0, [pc, #68]	; (801739c <tcp_slowtmr+0x298>)
 8017358:	f009 f91e 	bl	8020598 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801735c:	f898 2000 	ldrb.w	r2, [r8]
 8017360:	7fa3      	ldrb	r3, [r4, #30]
 8017362:	4293      	cmp	r3, r2
 8017364:	f47f aef3 	bne.w	801714e <tcp_slowtmr+0x4a>
      continue;
 8017368:	4627      	mov	r7, r4
      pcb = pcb->next;
 801736a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801736c:	2c00      	cmp	r4, #0
 801736e:	f47f aede 	bne.w	801712e <tcp_slowtmr+0x2a>
 8017372:	e75b      	b.n	801722c <tcp_slowtmr+0x128>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017374:	2a05      	cmp	r2, #5
 8017376:	d9bb      	bls.n	80172f0 <tcp_slowtmr+0x1ec>
    pcb_reset = 0;
 8017378:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801737c:	2501      	movs	r5, #1
 801737e:	e717      	b.n	80171b0 <tcp_slowtmr+0xac>
 8017380:	20036300 	.word	0x20036300
 8017384:	200362fc 	.word	0x200362fc
 8017388:	000a4cb8 	.word	0x000a4cb8
 801738c:	10624dd3 	.word	0x10624dd3
 8017390:	200362f8 	.word	0x200362f8
 8017394:	2003630c 	.word	0x2003630c
 8017398:	0803dcf8 	.word	0x0803dcf8
 801739c:	08026544 	.word	0x08026544
 80173a0:	0803dc70 	.word	0x0803dc70
 80173a4:	0803dc9c 	.word	0x0803dc9c
 80173a8:	0803dcc8 	.word	0x0803dcc8
 80173ac:	200223e5 	.word	0x200223e5
 80173b0:	0803d8b0 	.word	0x0803d8b0
 80173b4:	0803ddbc 	.word	0x0803ddbc
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80173b8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80173bc:	2a00      	cmp	r2, #0
 80173be:	db06      	blt.n	80173ce <tcp_slowtmr+0x2ca>
 80173c0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80173c4:	428a      	cmp	r2, r1
 80173c6:	d002      	beq.n	80173ce <tcp_slowtmr+0x2ca>
          ++pcb->rtime;
 80173c8:	3201      	adds	r2, #1
 80173ca:	b212      	sxth	r2, r2
 80173cc:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80173ce:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80173d2:	4291      	cmp	r1, r2
 80173d4:	f73f aec6 	bgt.w	8017164 <tcp_slowtmr+0x60>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80173d8:	4620      	mov	r0, r4
 80173da:	f003 fa17 	bl	801a80c <tcp_rexmit_rto_prepare>
 80173de:	2800      	cmp	r0, #0
 80173e0:	f040 80d0 	bne.w	8017584 <tcp_slowtmr+0x480>
 80173e4:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 80173e6:	2b02      	cmp	r3, #2
 80173e8:	d016      	beq.n	8017418 <tcp_slowtmr+0x314>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80173ea:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80173ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80173f2:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 80175ec <tcp_slowtmr+0x4e8>
 80173f6:	2a0c      	cmp	r2, #12
 80173f8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80173fc:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8017400:	bf28      	it	cs
 8017402:	220c      	movcs	r2, #12
 8017404:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8017408:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801740c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801740e:	428b      	cmp	r3, r1
 8017410:	bfa8      	it	ge
 8017412:	460b      	movge	r3, r1
 8017414:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017418:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
            pcb->rtime = 0;
 801741c:	2200      	movs	r2, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801741e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017422:	8e61      	ldrh	r1, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8017424:	4283      	cmp	r3, r0
            pcb->rtime = 0;
 8017426:	8622      	strh	r2, [r4, #48]	; 0x30
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017428:	ea4f 0241 	mov.w	r2, r1, lsl #1
            pcb->cwnd = pcb->mss;
 801742c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8017430:	bf28      	it	cs
 8017432:	4603      	movcs	r3, r0
            tcp_rexmit_rto_commit(pcb);
 8017434:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017436:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 8017438:	085b      	lsrs	r3, r3, #1
 801743a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801743e:	4293      	cmp	r3, r2
            pcb->bytes_acked = 0;
 8017440:	f04f 0300 	mov.w	r3, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017444:	bf38      	it	cc
 8017446:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            pcb->bytes_acked = 0;
 801744a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801744e:	f003 fd17 	bl	801ae80 <tcp_rexmit_rto_commit>
 8017452:	7d23      	ldrb	r3, [r4, #20]
 8017454:	e686      	b.n	8017164 <tcp_slowtmr+0x60>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017456:	495b      	ldr	r1, [pc, #364]	; (80175c4 <tcp_slowtmr+0x4c0>)
 8017458:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801745c:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8017460:	4959      	ldr	r1, [pc, #356]	; (80175c8 <tcp_slowtmr+0x4c4>)
 8017462:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017466:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801746a:	f67f af3e 	bls.w	80172ea <tcp_slowtmr+0x1e6>
        err = tcp_keepalive(pcb);
 801746e:	4620      	mov	r0, r4
 8017470:	f003 fd40 	bl	801aef4 <tcp_keepalive>
        if (err == ERR_OK) {
 8017474:	2800      	cmp	r0, #0
 8017476:	f47f af38 	bne.w	80172ea <tcp_slowtmr+0x1e6>
          pcb->keep_cnt_sent++;
 801747a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801747e:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 8017480:	3301      	adds	r3, #1
 8017482:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8017486:	e693      	b.n	80171b0 <tcp_slowtmr+0xac>
      tcp_pcb_purge(pcb);
 8017488:	4620      	mov	r0, r4
 801748a:	f7ff fdfb 	bl	8017084 <tcp_pcb_purge>
      if (prev != NULL) {
 801748e:	2d00      	cmp	r5, #0
 8017490:	d063      	beq.n	801755a <tcp_slowtmr+0x456>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	42a3      	cmp	r3, r4
 8017496:	f000 8086 	beq.w	80175a6 <tcp_slowtmr+0x4a2>
        prev->next = pcb->next;
 801749a:	68e3      	ldr	r3, [r4, #12]
 801749c:	60eb      	str	r3, [r5, #12]
 801749e:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 80174a0:	4620      	mov	r0, r4
      pcb = pcb->next;
 80174a2:	461c      	mov	r4, r3
      tcp_free(pcb2);
 80174a4:	f7ff fbb2 	bl	8016c0c <tcp_free>
  while (pcb != NULL) {
 80174a8:	2c00      	cmp	r4, #0
 80174aa:	f47f aec9 	bne.w	8017240 <tcp_slowtmr+0x13c>
 80174ae:	e6db      	b.n	8017268 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80174b0:	8b25      	ldrh	r5, [r4, #24]
 80174b2:	1d20      	adds	r0, r4, #4
 80174b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80174b6:	4623      	mov	r3, r4
 80174b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80174ba:	9502      	str	r5, [sp, #8]
 80174bc:	8ae5      	ldrh	r5, [r4, #22]
 80174be:	9000      	str	r0, [sp, #0]
 80174c0:	4620      	mov	r0, r4
 80174c2:	9501      	str	r5, [sp, #4]
 80174c4:	f003 fa66 	bl	801a994 <tcp_rst>
 80174c8:	e69b      	b.n	8017202 <tcp_slowtmr+0xfe>
          tcp_output(prev);
 80174ca:	4620      	mov	r0, r4
 80174cc:	4627      	mov	r7, r4
      pcb = pcb->next;
 80174ce:	4654      	mov	r4, sl
          tcp_output(prev);
 80174d0:	f003 fadc 	bl	801aa8c <tcp_output>
  while (pcb != NULL) {
 80174d4:	2c00      	cmp	r4, #0
 80174d6:	f47f ae2a 	bne.w	801712e <tcp_slowtmr+0x2a>
 80174da:	e6a7      	b.n	801722c <tcp_slowtmr+0x128>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80174dc:	4a3b      	ldr	r2, [pc, #236]	; (80175cc <tcp_slowtmr+0x4c8>)
 80174de:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 80174e2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80174e6:	440a      	add	r2, r1
 80174e8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d323      	bcc.n	8017538 <tcp_slowtmr+0x434>
            if (pcb->snd_wnd == 0) {
 80174f0:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80174f4:	2d00      	cmp	r5, #0
 80174f6:	d04f      	beq.n	8017598 <tcp_slowtmr+0x494>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80174f8:	4629      	mov	r1, r5
 80174fa:	4620      	mov	r0, r4
 80174fc:	f002 ffc6 	bl	801a48c <tcp_split_unsent_seg>
 8017500:	2800      	cmp	r0, #0
 8017502:	d058      	beq.n	80175b6 <tcp_slowtmr+0x4b2>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017504:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8017508:	2500      	movs	r5, #0
 801750a:	7d23      	ldrb	r3, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801750c:	2a06      	cmp	r2, #6
              pcb->persist_cnt = 0;
 801750e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017512:	f63f ae27 	bhi.w	8017164 <tcp_slowtmr+0x60>
                pcb->persist_backoff++;
 8017516:	3201      	adds	r2, #1
 8017518:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 801751c:	e622      	b.n	8017164 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801751e:	42a3      	cmp	r3, r4
 8017520:	d006      	beq.n	8017530 <tcp_slowtmr+0x42c>
 8017522:	464b      	mov	r3, r9
 8017524:	f240 5271 	movw	r2, #1393	; 0x571
 8017528:	4929      	ldr	r1, [pc, #164]	; (80175d0 <tcp_slowtmr+0x4cc>)
 801752a:	482a      	ldr	r0, [pc, #168]	; (80175d4 <tcp_slowtmr+0x4d0>)
 801752c:	f009 f834 	bl	8020598 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017530:	68e3      	ldr	r3, [r4, #12]
 8017532:	4a29      	ldr	r2, [pc, #164]	; (80175d8 <tcp_slowtmr+0x4d4>)
 8017534:	6013      	str	r3, [r2, #0]
 8017536:	e660      	b.n	80171fa <tcp_slowtmr+0xf6>
            pcb->persist_cnt++;
 8017538:	3301      	adds	r3, #1
 801753a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801753c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801753e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8017542:	d2d5      	bcs.n	80174f0 <tcp_slowtmr+0x3ec>
 8017544:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 8017546:	2500      	movs	r5, #0
 8017548:	e60c      	b.n	8017164 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801754a:	464b      	mov	r3, r9
 801754c:	f240 526d 	movw	r2, #1389	; 0x56d
 8017550:	4922      	ldr	r1, [pc, #136]	; (80175dc <tcp_slowtmr+0x4d8>)
 8017552:	4820      	ldr	r0, [pc, #128]	; (80175d4 <tcp_slowtmr+0x4d0>)
 8017554:	f009 f820 	bl	8020598 <iprintf>
 8017558:	e64d      	b.n	80171f6 <tcp_slowtmr+0xf2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	42a3      	cmp	r3, r4
 801755e:	d006      	beq.n	801756e <tcp_slowtmr+0x46a>
 8017560:	464b      	mov	r3, r9
 8017562:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017566:	491e      	ldr	r1, [pc, #120]	; (80175e0 <tcp_slowtmr+0x4dc>)
 8017568:	4640      	mov	r0, r8
 801756a:	f009 f815 	bl	8020598 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801756e:	68e3      	ldr	r3, [r4, #12]
 8017570:	603b      	str	r3, [r7, #0]
 8017572:	e795      	b.n	80174a0 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017574:	464b      	mov	r3, r9
 8017576:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801757a:	491a      	ldr	r1, [pc, #104]	; (80175e4 <tcp_slowtmr+0x4e0>)
 801757c:	4815      	ldr	r0, [pc, #84]	; (80175d4 <tcp_slowtmr+0x4d0>)
 801757e:	f009 f80b 	bl	8020598 <iprintf>
 8017582:	e6c6      	b.n	8017312 <tcp_slowtmr+0x20e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017584:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8017586:	7d23      	ldrb	r3, [r4, #20]
 8017588:	2a00      	cmp	r2, #0
 801758a:	f47f adeb 	bne.w	8017164 <tcp_slowtmr+0x60>
 801758e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8017590:	2a00      	cmp	r2, #0
 8017592:	f47f af28 	bne.w	80173e6 <tcp_slowtmr+0x2e2>
 8017596:	e5e5      	b.n	8017164 <tcp_slowtmr+0x60>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017598:	4620      	mov	r0, r4
 801759a:	f003 fcd5 	bl	801af48 <tcp_zero_window_probe>
 801759e:	2800      	cmp	r0, #0
 80175a0:	d0b0      	beq.n	8017504 <tcp_slowtmr+0x400>
 80175a2:	7d23      	ldrb	r3, [r4, #20]
 80175a4:	e5de      	b.n	8017164 <tcp_slowtmr+0x60>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80175a6:	464b      	mov	r3, r9
 80175a8:	f240 52af 	movw	r2, #1455	; 0x5af
 80175ac:	490e      	ldr	r1, [pc, #56]	; (80175e8 <tcp_slowtmr+0x4e4>)
 80175ae:	4640      	mov	r0, r8
 80175b0:	f008 fff2 	bl	8020598 <iprintf>
 80175b4:	e771      	b.n	801749a <tcp_slowtmr+0x396>
                if (tcp_output(pcb) == ERR_OK) {
 80175b6:	4620      	mov	r0, r4
 80175b8:	f003 fa68 	bl	801aa8c <tcp_output>
 80175bc:	2800      	cmp	r0, #0
 80175be:	d1a1      	bne.n	8017504 <tcp_slowtmr+0x400>
    pcb_remove = 0;
 80175c0:	4605      	mov	r5, r0
 80175c2:	e7ee      	b.n	80175a2 <tcp_slowtmr+0x49e>
 80175c4:	000124f8 	.word	0x000124f8
 80175c8:	10624dd3 	.word	0x10624dd3
 80175cc:	0803db24 	.word	0x0803db24
 80175d0:	0803dd90 	.word	0x0803dd90
 80175d4:	08026544 	.word	0x08026544
 80175d8:	200362fc 	.word	0x200362fc
 80175dc:	0803dd64 	.word	0x0803dd64
 80175e0:	0803de14 	.word	0x0803de14
 80175e4:	0803dd2c 	.word	0x0803dd2c
 80175e8:	0803ddec 	.word	0x0803ddec
 80175ec:	0803d7f0 	.word	0x0803d7f0

080175f0 <tcp_pcb_remove>:
{
 80175f0:	b538      	push	{r3, r4, r5, lr}
 80175f2:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80175f4:	460c      	mov	r4, r1
 80175f6:	2900      	cmp	r1, #0
 80175f8:	d04f      	beq.n	801769a <tcp_pcb_remove+0xaa>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80175fa:	2d00      	cmp	r5, #0
 80175fc:	d056      	beq.n	80176ac <tcp_pcb_remove+0xbc>
  TCP_RMV(pcblist, pcb);
 80175fe:	682a      	ldr	r2, [r5, #0]
 8017600:	42a2      	cmp	r2, r4
 8017602:	d047      	beq.n	8017694 <tcp_pcb_remove+0xa4>
 8017604:	b14a      	cbz	r2, 801761a <tcp_pcb_remove+0x2a>
 8017606:	68d3      	ldr	r3, [r2, #12]
 8017608:	429c      	cmp	r4, r3
 801760a:	d03f      	beq.n	801768c <tcp_pcb_remove+0x9c>
 801760c:	b12b      	cbz	r3, 801761a <tcp_pcb_remove+0x2a>
 801760e:	68da      	ldr	r2, [r3, #12]
 8017610:	42a2      	cmp	r2, r4
 8017612:	d03c      	beq.n	801768e <tcp_pcb_remove+0x9e>
 8017614:	4613      	mov	r3, r2
 8017616:	2b00      	cmp	r3, #0
 8017618:	d1f9      	bne.n	801760e <tcp_pcb_remove+0x1e>
 801761a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801761c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801761e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8017620:	f7ff fd30 	bl	8017084 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8017624:	7d23      	ldrb	r3, [r4, #20]
 8017626:	2b0a      	cmp	r3, #10
 8017628:	d02a      	beq.n	8017680 <tcp_pcb_remove+0x90>
 801762a:	2b01      	cmp	r3, #1
 801762c:	d028      	beq.n	8017680 <tcp_pcb_remove+0x90>
      (pcb->flags & TF_ACK_DELAY)) {
 801762e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8017630:	07da      	lsls	r2, r3, #31
 8017632:	d41e      	bmi.n	8017672 <tcp_pcb_remove+0x82>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017634:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017636:	b133      	cbz	r3, 8017646 <tcp_pcb_remove+0x56>
 8017638:	4b20      	ldr	r3, [pc, #128]	; (80176bc <tcp_pcb_remove+0xcc>)
 801763a:	f640 0293 	movw	r2, #2195	; 0x893
 801763e:	4920      	ldr	r1, [pc, #128]	; (80176c0 <tcp_pcb_remove+0xd0>)
 8017640:	4820      	ldr	r0, [pc, #128]	; (80176c4 <tcp_pcb_remove+0xd4>)
 8017642:	f008 ffa9 	bl	8020598 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017646:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017648:	b133      	cbz	r3, 8017658 <tcp_pcb_remove+0x68>
 801764a:	4b1c      	ldr	r3, [pc, #112]	; (80176bc <tcp_pcb_remove+0xcc>)
 801764c:	f640 0294 	movw	r2, #2196	; 0x894
 8017650:	491d      	ldr	r1, [pc, #116]	; (80176c8 <tcp_pcb_remove+0xd8>)
 8017652:	481c      	ldr	r0, [pc, #112]	; (80176c4 <tcp_pcb_remove+0xd4>)
 8017654:	f008 ffa0 	bl	8020598 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017658:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801765a:	b133      	cbz	r3, 801766a <tcp_pcb_remove+0x7a>
 801765c:	4b17      	ldr	r3, [pc, #92]	; (80176bc <tcp_pcb_remove+0xcc>)
 801765e:	f640 0296 	movw	r2, #2198	; 0x896
 8017662:	491a      	ldr	r1, [pc, #104]	; (80176cc <tcp_pcb_remove+0xdc>)
 8017664:	4817      	ldr	r0, [pc, #92]	; (80176c4 <tcp_pcb_remove+0xd4>)
 8017666:	f008 ff97 	bl	8020598 <iprintf>
  pcb->state = CLOSED;
 801766a:	2300      	movs	r3, #0
 801766c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801766e:	82e3      	strh	r3, [r4, #22]
}
 8017670:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8017672:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8017676:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8017678:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801767a:	f003 fa07 	bl	801aa8c <tcp_output>
 801767e:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 8017680:	2b01      	cmp	r3, #1
 8017682:	d0f2      	beq.n	801766a <tcp_pcb_remove+0x7a>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017684:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017686:	2b00      	cmp	r3, #0
 8017688:	d1d6      	bne.n	8017638 <tcp_pcb_remove+0x48>
 801768a:	e7dc      	b.n	8017646 <tcp_pcb_remove+0x56>
  TCP_RMV(pcblist, pcb);
 801768c:	4613      	mov	r3, r2
 801768e:	68e2      	ldr	r2, [r4, #12]
 8017690:	60da      	str	r2, [r3, #12]
 8017692:	e7c2      	b.n	801761a <tcp_pcb_remove+0x2a>
 8017694:	68e3      	ldr	r3, [r4, #12]
 8017696:	602b      	str	r3, [r5, #0]
 8017698:	e7bf      	b.n	801761a <tcp_pcb_remove+0x2a>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801769a:	4b08      	ldr	r3, [pc, #32]	; (80176bc <tcp_pcb_remove+0xcc>)
 801769c:	f640 0283 	movw	r2, #2179	; 0x883
 80176a0:	490b      	ldr	r1, [pc, #44]	; (80176d0 <tcp_pcb_remove+0xe0>)
 80176a2:	4808      	ldr	r0, [pc, #32]	; (80176c4 <tcp_pcb_remove+0xd4>)
 80176a4:	f008 ff78 	bl	8020598 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80176a8:	2d00      	cmp	r5, #0
 80176aa:	d1a8      	bne.n	80175fe <tcp_pcb_remove+0xe>
 80176ac:	4b03      	ldr	r3, [pc, #12]	; (80176bc <tcp_pcb_remove+0xcc>)
 80176ae:	f640 0284 	movw	r2, #2180	; 0x884
 80176b2:	4908      	ldr	r1, [pc, #32]	; (80176d4 <tcp_pcb_remove+0xe4>)
 80176b4:	4803      	ldr	r0, [pc, #12]	; (80176c4 <tcp_pcb_remove+0xd4>)
 80176b6:	f008 ff6f 	bl	8020598 <iprintf>
 80176ba:	e7a0      	b.n	80175fe <tcp_pcb_remove+0xe>
 80176bc:	0803d8b0 	.word	0x0803d8b0
 80176c0:	0803dad8 	.word	0x0803dad8
 80176c4:	08026544 	.word	0x08026544
 80176c8:	0803daf0 	.word	0x0803daf0
 80176cc:	0803db0c 	.word	0x0803db0c
 80176d0:	0803da9c 	.word	0x0803da9c
 80176d4:	0803dab8 	.word	0x0803dab8

080176d8 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80176d8:	2800      	cmp	r0, #0
 80176da:	d07e      	beq.n	80177da <tcp_abandon+0x102>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80176dc:	7d03      	ldrb	r3, [r0, #20]
 80176de:	2b01      	cmp	r3, #1
{
 80176e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e4:	460d      	mov	r5, r1
 80176e6:	b085      	sub	sp, #20
 80176e8:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80176ea:	d062      	beq.n	80177b2 <tcp_abandon+0xda>
  if (pcb->state == TIME_WAIT) {
 80176ec:	2b0a      	cmp	r3, #10
 80176ee:	d06a      	beq.n	80177c6 <tcp_abandon+0xee>
    seqno = pcb->snd_nxt;
 80176f0:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80176f4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80176f8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 80176fc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8017700:	8ae7      	ldrh	r7, [r4, #22]
    if (pcb->state == CLOSED) {
 8017702:	b98b      	cbnz	r3, 8017728 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8017704:	2f00      	cmp	r7, #0
 8017706:	d03f      	beq.n	8017788 <tcp_abandon+0xb0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017708:	4b3b      	ldr	r3, [pc, #236]	; (80177f8 <tcp_abandon+0x120>)
 801770a:	681a      	ldr	r2, [r3, #0]
 801770c:	42a2      	cmp	r2, r4
 801770e:	d049      	beq.n	80177a4 <tcp_abandon+0xcc>
 8017710:	2a00      	cmp	r2, #0
 8017712:	d049      	beq.n	80177a8 <tcp_abandon+0xd0>
 8017714:	68d3      	ldr	r3, [r2, #12]
 8017716:	429c      	cmp	r4, r3
 8017718:	d066      	beq.n	80177e8 <tcp_abandon+0x110>
 801771a:	2b00      	cmp	r3, #0
 801771c:	d044      	beq.n	80177a8 <tcp_abandon+0xd0>
 801771e:	68da      	ldr	r2, [r3, #12]
 8017720:	42a2      	cmp	r2, r4
 8017722:	d062      	beq.n	80177ea <tcp_abandon+0x112>
 8017724:	4613      	mov	r3, r2
 8017726:	e7f8      	b.n	801771a <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017728:	4621      	mov	r1, r4
 801772a:	4834      	ldr	r0, [pc, #208]	; (80177fc <tcp_abandon+0x124>)
 801772c:	f7ff ff60 	bl	80175f0 <tcp_pcb_remove>
 8017730:	4b33      	ldr	r3, [pc, #204]	; (8017800 <tcp_abandon+0x128>)
 8017732:	2201      	movs	r2, #1
 8017734:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8017736:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8017738:	b130      	cbz	r0, 8017748 <tcp_abandon+0x70>
    struct tcp_seg *next = seg->next;
 801773a:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 801773e:	f7ff fbcd 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8017742:	4658      	mov	r0, fp
 8017744:	2800      	cmp	r0, #0
 8017746:	d1f8      	bne.n	801773a <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 8017748:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801774a:	b130      	cbz	r0, 801775a <tcp_abandon+0x82>
    struct tcp_seg *next = seg->next;
 801774c:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017750:	f7ff fbc4 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8017754:	4658      	mov	r0, fp
 8017756:	2800      	cmp	r0, #0
 8017758:	d1f8      	bne.n	801774c <tcp_abandon+0x74>
    if (pcb->ooseq != NULL) {
 801775a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801775c:	b130      	cbz	r0, 801776c <tcp_abandon+0x94>
    struct tcp_seg *next = seg->next;
 801775e:	f8d0 b000 	ldr.w	fp, [r0]
    tcp_seg_free(seg);
 8017762:	f7ff fbbb 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8017766:	4658      	mov	r0, fp
 8017768:	2800      	cmp	r0, #0
 801776a:	d1f8      	bne.n	801775e <tcp_abandon+0x86>
    if (send_rst) {
 801776c:	b975      	cbnz	r5, 801778c <tcp_abandon+0xb4>
    tcp_free(pcb);
 801776e:	4620      	mov	r0, r4
 8017770:	f7ff fa4c 	bl	8016c0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017774:	2e00      	cmp	r6, #0
 8017776:	d03b      	beq.n	80177f0 <tcp_abandon+0x118>
 8017778:	4640      	mov	r0, r8
 801777a:	f06f 010c 	mvn.w	r1, #12
 801777e:	4633      	mov	r3, r6
}
 8017780:	b005      	add	sp, #20
 8017782:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017786:	4718      	bx	r3
    int send_rst = 0;
 8017788:	461d      	mov	r5, r3
 801778a:	e7d4      	b.n	8017736 <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801778c:	8b23      	ldrh	r3, [r4, #24]
 801778e:	1d25      	adds	r5, r4, #4
 8017790:	4652      	mov	r2, sl
 8017792:	4649      	mov	r1, r9
 8017794:	9302      	str	r3, [sp, #8]
 8017796:	4620      	mov	r0, r4
 8017798:	4623      	mov	r3, r4
 801779a:	9701      	str	r7, [sp, #4]
 801779c:	9500      	str	r5, [sp, #0]
 801779e:	f003 f8f9 	bl	801a994 <tcp_rst>
 80177a2:	e7e4      	b.n	801776e <tcp_abandon+0x96>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80177a4:	68e2      	ldr	r2, [r4, #12]
 80177a6:	601a      	str	r2, [r3, #0]
 80177a8:	2300      	movs	r3, #0
    u16_t local_port = 0;
 80177aa:	461f      	mov	r7, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80177ac:	60e3      	str	r3, [r4, #12]
    int send_rst = 0;
 80177ae:	461d      	mov	r5, r3
 80177b0:	e7c1      	b.n	8017736 <tcp_abandon+0x5e>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80177b2:	4b14      	ldr	r3, [pc, #80]	; (8017804 <tcp_abandon+0x12c>)
 80177b4:	f240 2241 	movw	r2, #577	; 0x241
 80177b8:	4913      	ldr	r1, [pc, #76]	; (8017808 <tcp_abandon+0x130>)
 80177ba:	4814      	ldr	r0, [pc, #80]	; (801780c <tcp_abandon+0x134>)
 80177bc:	f008 feec 	bl	8020598 <iprintf>
 80177c0:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state == TIME_WAIT) {
 80177c2:	2b0a      	cmp	r3, #10
 80177c4:	d194      	bne.n	80176f0 <tcp_abandon+0x18>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80177c6:	4621      	mov	r1, r4
 80177c8:	4811      	ldr	r0, [pc, #68]	; (8017810 <tcp_abandon+0x138>)
 80177ca:	f7ff ff11 	bl	80175f0 <tcp_pcb_remove>
    tcp_free(pcb);
 80177ce:	4620      	mov	r0, r4
}
 80177d0:	b005      	add	sp, #20
 80177d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 80177d6:	f7ff ba19 	b.w	8016c0c <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80177da:	4b0a      	ldr	r3, [pc, #40]	; (8017804 <tcp_abandon+0x12c>)
 80177dc:	f240 223d 	movw	r2, #573	; 0x23d
 80177e0:	490c      	ldr	r1, [pc, #48]	; (8017814 <tcp_abandon+0x13c>)
 80177e2:	480a      	ldr	r0, [pc, #40]	; (801780c <tcp_abandon+0x134>)
 80177e4:	f008 bed8 	b.w	8020598 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80177e8:	4613      	mov	r3, r2
 80177ea:	68e2      	ldr	r2, [r4, #12]
 80177ec:	60da      	str	r2, [r3, #12]
 80177ee:	e7db      	b.n	80177a8 <tcp_abandon+0xd0>
}
 80177f0:	b005      	add	sp, #20
 80177f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f6:	bf00      	nop
 80177f8:	20036308 	.word	0x20036308
 80177fc:	200362fc 	.word	0x200362fc
 8017800:	200362f8 	.word	0x200362f8
 8017804:	0803d8b0 	.word	0x0803d8b0
 8017808:	0803d79c 	.word	0x0803d79c
 801780c:	08026544 	.word	0x08026544
 8017810:	2003630c 	.word	0x2003630c
 8017814:	0803d780 	.word	0x0803d780

08017818 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8017818:	2101      	movs	r1, #1
 801781a:	f7ff bf5d 	b.w	80176d8 <tcp_abandon>
 801781e:	bf00      	nop

08017820 <tcp_accept_null>:
{
 8017820:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017822:	460c      	mov	r4, r1
 8017824:	b131      	cbz	r1, 8017834 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8017826:	4620      	mov	r0, r4
 8017828:	2101      	movs	r1, #1
 801782a:	f7ff ff55 	bl	80176d8 <tcp_abandon>
}
 801782e:	f06f 000c 	mvn.w	r0, #12
 8017832:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8017834:	4b06      	ldr	r3, [pc, #24]	; (8017850 <tcp_accept_null+0x30>)
 8017836:	f240 320f 	movw	r2, #783	; 0x30f
 801783a:	4906      	ldr	r1, [pc, #24]	; (8017854 <tcp_accept_null+0x34>)
 801783c:	4806      	ldr	r0, [pc, #24]	; (8017858 <tcp_accept_null+0x38>)
 801783e:	f008 feab 	bl	8020598 <iprintf>
  tcp_abandon(pcb, 1);
 8017842:	4620      	mov	r0, r4
 8017844:	2101      	movs	r1, #1
 8017846:	f7ff ff47 	bl	80176d8 <tcp_abandon>
}
 801784a:	f06f 000c 	mvn.w	r0, #12
 801784e:	bd10      	pop	{r4, pc}
 8017850:	0803d8b0 	.word	0x0803d8b0
 8017854:	0803d7d0 	.word	0x0803d7d0
 8017858:	08026544 	.word	0x08026544

0801785c <tcp_netif_ip_addr_changed_pcblist>:
{
 801785c:	b570      	push	{r4, r5, r6, lr}
 801785e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017860:	4606      	mov	r6, r0
 8017862:	b178      	cbz	r0, 8017884 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8017864:	b13c      	cbz	r4, 8017876 <tcp_netif_ip_addr_changed_pcblist+0x1a>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017866:	6822      	ldr	r2, [r4, #0]
 8017868:	6833      	ldr	r3, [r6, #0]
 801786a:	68e5      	ldr	r5, [r4, #12]
 801786c:	429a      	cmp	r2, r3
 801786e:	d003      	beq.n	8017878 <tcp_netif_ip_addr_changed_pcblist+0x1c>
  while (pcb != NULL) {
 8017870:	462c      	mov	r4, r5
 8017872:	2c00      	cmp	r4, #0
 8017874:	d1f7      	bne.n	8017866 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8017876:	bd70      	pop	{r4, r5, r6, pc}
  tcp_abandon(pcb, 1);
 8017878:	4620      	mov	r0, r4
 801787a:	2101      	movs	r1, #1
 801787c:	f7ff ff2c 	bl	80176d8 <tcp_abandon>
  while (pcb != NULL) {
 8017880:	462c      	mov	r4, r5
 8017882:	e7f6      	b.n	8017872 <tcp_netif_ip_addr_changed_pcblist+0x16>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017884:	4b03      	ldr	r3, [pc, #12]	; (8017894 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8017886:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801788a:	4903      	ldr	r1, [pc, #12]	; (8017898 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801788c:	4803      	ldr	r0, [pc, #12]	; (801789c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801788e:	f008 fe83 	bl	8020598 <iprintf>
 8017892:	e7e7      	b.n	8017864 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8017894:	0803d8b0 	.word	0x0803d8b0
 8017898:	0803da20 	.word	0x0803da20
 801789c:	08026544 	.word	0x08026544

080178a0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178a0:	4b0f      	ldr	r3, [pc, #60]	; (80178e0 <tcp_kill_state+0x40>)
 80178a2:	6819      	ldr	r1, [r3, #0]
 80178a4:	b1d1      	cbz	r1, 80178dc <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80178a6:	4b0f      	ldr	r3, [pc, #60]	; (80178e4 <tcp_kill_state+0x44>)
  inactivity = 0;
 80178a8:	2200      	movs	r2, #0
{
 80178aa:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80178ac:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80178ae:	4614      	mov	r4, r2
 80178b0:	e001      	b.n	80178b6 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178b2:	68c9      	ldr	r1, [r1, #12]
 80178b4:	b159      	cbz	r1, 80178ce <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 80178b6:	7d0b      	ldrb	r3, [r1, #20]
 80178b8:	4283      	cmp	r3, r0
 80178ba:	d1fa      	bne.n	80178b2 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80178bc:	6a0b      	ldr	r3, [r1, #32]
 80178be:	1aeb      	subs	r3, r5, r3
 80178c0:	4293      	cmp	r3, r2
 80178c2:	d3f6      	bcc.n	80178b2 <tcp_kill_state+0x12>
 80178c4:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178c6:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80178c8:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178ca:	2900      	cmp	r1, #0
 80178cc:	d1f3      	bne.n	80178b6 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 80178ce:	b11c      	cbz	r4, 80178d8 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 80178d0:	4620      	mov	r0, r4
}
 80178d2:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80178d4:	f7ff bf00 	b.w	80176d8 <tcp_abandon>
}
 80178d8:	bc30      	pop	{r4, r5}
 80178da:	4770      	bx	lr
 80178dc:	4770      	bx	lr
 80178de:	bf00      	nop
 80178e0:	200362fc 	.word	0x200362fc
 80178e4:	20036300 	.word	0x20036300

080178e8 <tcp_alloc>:
{
 80178e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80178ea:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 80178ee:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80178f0:	495f      	ldr	r1, [pc, #380]	; (8017a70 <tcp_alloc+0x188>)
 80178f2:	2002      	movs	r0, #2
 80178f4:	f7fe f8b4 	bl	8015a60 <memp_malloc_fn>
  if (pcb == NULL) {
 80178f8:	b340      	cbz	r0, 801794c <tcp_alloc+0x64>
 80178fa:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80178fc:	229c      	movs	r2, #156	; 0x9c
 80178fe:	2100      	movs	r1, #0
 8017900:	4618      	mov	r0, r3
    pcb->ttl = TCP_TTL;
 8017902:	26ff      	movs	r6, #255	; 0xff
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017904:	f007 fec9 	bl	801f69a <memset>
    pcb->last_timer = tcp_timer_ctr;
 8017908:	4a5a      	ldr	r2, [pc, #360]	; (8017a74 <tcp_alloc+0x18c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801790a:	4603      	mov	r3, r0
    pcb->tmr = tcp_ticks;
 801790c:	485a      	ldr	r0, [pc, #360]	; (8017a78 <tcp_alloc+0x190>)
    pcb->snd_buf = TCP_SND_BUF;
 801790e:	f44f 6106 	mov.w	r1, #2144	; 0x860
    pcb->tmr = tcp_ticks;
 8017912:	6805      	ldr	r5, [r0, #0]
    pcb->last_timer = tcp_timer_ctr;
 8017914:	7810      	ldrb	r0, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017916:	2206      	movs	r2, #6
    pcb->prio = prio;
 8017918:	755c      	strb	r4, [r3, #21]
    pcb->cwnd = 1;
 801791a:	2401      	movs	r4, #1
    pcb->last_timer = tcp_timer_ctr;
 801791c:	7798      	strb	r0, [r3, #30]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801791e:	4857      	ldr	r0, [pc, #348]	; (8017a7c <tcp_alloc+0x194>)
    pcb->tmr = tcp_ticks;
 8017920:	621d      	str	r5, [r3, #32]
    pcb->snd_buf = TCP_SND_BUF;
 8017922:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
    pcb->ssthresh = TCP_SND_BUF;
 8017926:	f8a3 104a 	strh.w	r1, [r3, #74]	; 0x4a
    pcb->rtime = -1;
 801792a:	4d55      	ldr	r5, [pc, #340]	; (8017a80 <tcp_alloc+0x198>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801792c:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801792e:	4955      	ldr	r1, [pc, #340]	; (8017a84 <tcp_alloc+0x19c>)
    pcb->recv = tcp_recv_null;
 8017930:	4855      	ldr	r0, [pc, #340]	; (8017a88 <tcp_alloc+0x1a0>)
    pcb->ttl = TCP_TTL;
 8017932:	72de      	strb	r6, [r3, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017938:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801793a:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801793c:	f8a3 4048 	strh.w	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8017940:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017944:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8017948:	4618      	mov	r0, r3
 801794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801794c:	4d4f      	ldr	r5, [pc, #316]	; (8017a8c <tcp_alloc+0x1a4>)
 801794e:	682b      	ldr	r3, [r5, #0]
  while (pcb != NULL) {
 8017950:	b913      	cbnz	r3, 8017958 <tcp_alloc+0x70>
 8017952:	e00e      	b.n	8017972 <tcp_alloc+0x8a>
 8017954:	4633      	mov	r3, r6
 8017956:	b166      	cbz	r6, 8017972 <tcp_alloc+0x8a>
    if (pcb->flags & TF_CLOSEPEND) {
 8017958:	8b5a      	ldrh	r2, [r3, #26]
    struct tcp_pcb *next = pcb->next;
 801795a:	68de      	ldr	r6, [r3, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801795c:	0711      	lsls	r1, r2, #28
 801795e:	d5f9      	bpl.n	8017954 <tcp_alloc+0x6c>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017960:	f022 0208 	bic.w	r2, r2, #8
      tcp_close_shutdown_fin(pcb);
 8017964:	4618      	mov	r0, r3
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017966:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017968:	f7ff f910 	bl	8016b8c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801796c:	4633      	mov	r3, r6
 801796e:	2e00      	cmp	r6, #0
 8017970:	d1f2      	bne.n	8017958 <tcp_alloc+0x70>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017972:	4b47      	ldr	r3, [pc, #284]	; (8017a90 <tcp_alloc+0x1a8>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	b193      	cbz	r3, 801799e <tcp_alloc+0xb6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017978:	4a3f      	ldr	r2, [pc, #252]	; (8017a78 <tcp_alloc+0x190>)
 801797a:	4618      	mov	r0, r3
 801797c:	6a19      	ldr	r1, [r3, #32]
 801797e:	6816      	ldr	r6, [r2, #0]
 8017980:	1a71      	subs	r1, r6, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017982:	68db      	ldr	r3, [r3, #12]
 8017984:	b143      	cbz	r3, 8017998 <tcp_alloc+0xb0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017986:	6a1a      	ldr	r2, [r3, #32]
 8017988:	1ab2      	subs	r2, r6, r2
 801798a:	428a      	cmp	r2, r1
 801798c:	d3f9      	bcc.n	8017982 <tcp_alloc+0x9a>
 801798e:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017990:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017992:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017994:	2b00      	cmp	r3, #0
 8017996:	d1f6      	bne.n	8017986 <tcp_alloc+0x9e>
  tcp_abandon(pcb, 1);
 8017998:	2101      	movs	r1, #1
 801799a:	f7ff fe9d 	bl	80176d8 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801799e:	f240 7239 	movw	r2, #1849	; 0x739
 80179a2:	4933      	ldr	r1, [pc, #204]	; (8017a70 <tcp_alloc+0x188>)
 80179a4:	2002      	movs	r0, #2
 80179a6:	f7fe f85b 	bl	8015a60 <memp_malloc_fn>
    if (pcb == NULL) {
 80179aa:	4603      	mov	r3, r0
 80179ac:	b130      	cbz	r0, 80179bc <tcp_alloc+0xd4>
 80179ae:	4a39      	ldr	r2, [pc, #228]	; (8017a94 <tcp_alloc+0x1ac>)
 80179b0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 80179b4:	888a      	ldrh	r2, [r1, #4]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80179b6:	3a01      	subs	r2, #1
 80179b8:	808a      	strh	r2, [r1, #4]
 80179ba:	e79f      	b.n	80178fc <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 80179bc:	2009      	movs	r0, #9
 80179be:	f7ff ff6f 	bl	80178a0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80179c2:	f240 723f 	movw	r2, #1855	; 0x73f
 80179c6:	492a      	ldr	r1, [pc, #168]	; (8017a70 <tcp_alloc+0x188>)
 80179c8:	2002      	movs	r0, #2
 80179ca:	f7fe f849 	bl	8015a60 <memp_malloc_fn>
      if (pcb == NULL) {
 80179ce:	4603      	mov	r3, r0
 80179d0:	b138      	cbz	r0, 80179e2 <tcp_alloc+0xfa>
 80179d2:	4a30      	ldr	r2, [pc, #192]	; (8017a94 <tcp_alloc+0x1ac>)
 80179d4:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 80179d8:	888a      	ldrh	r2, [r1, #4]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80179da:	3a01      	subs	r2, #1
 80179dc:	b292      	uxth	r2, r2
 80179de:	808a      	strh	r2, [r1, #4]
 80179e0:	e7e9      	b.n	80179b6 <tcp_alloc+0xce>
        tcp_kill_state(CLOSING);
 80179e2:	2008      	movs	r0, #8
 80179e4:	f7ff ff5c 	bl	80178a0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80179e8:	f240 7245 	movw	r2, #1861	; 0x745
 80179ec:	4920      	ldr	r1, [pc, #128]	; (8017a70 <tcp_alloc+0x188>)
 80179ee:	2002      	movs	r0, #2
 80179f0:	f7fe f836 	bl	8015a60 <memp_malloc_fn>
        if (pcb == NULL) {
 80179f4:	4603      	mov	r3, r0
 80179f6:	b138      	cbz	r0, 8017a08 <tcp_alloc+0x120>
 80179f8:	4a26      	ldr	r2, [pc, #152]	; (8017a94 <tcp_alloc+0x1ac>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80179fa:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 80179fe:	888a      	ldrh	r2, [r1, #4]
 8017a00:	3a01      	subs	r2, #1
 8017a02:	b292      	uxth	r2, r2
 8017a04:	808a      	strh	r2, [r1, #4]
 8017a06:	e7e8      	b.n	80179da <tcp_alloc+0xf2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017a08:	0622      	lsls	r2, r4, #24
 8017a0a:	d42f      	bmi.n	8017a6c <tcp_alloc+0x184>
  if (mprio == 0) {
 8017a0c:	b1ec      	cbz	r4, 8017a4a <tcp_alloc+0x162>
 8017a0e:	4622      	mov	r2, r4
  mprio--;
 8017a10:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a12:	682a      	ldr	r2, [r5, #0]
  mprio--;
 8017a14:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a16:	b1c2      	cbz	r2, 8017a4a <tcp_alloc+0x162>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a18:	4817      	ldr	r0, [pc, #92]	; (8017a78 <tcp_alloc+0x190>)
  inactivity = 0;
 8017a1a:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a1c:	6806      	ldr	r6, [r0, #0]
 8017a1e:	e005      	b.n	8017a2c <tcp_alloc+0x144>
 8017a20:	6a15      	ldr	r5, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8017a22:	1b77      	subs	r7, r6, r5
    if ((pcb->prio < mprio) ||
 8017a24:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8017a26:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a28:	68d2      	ldr	r2, [r2, #12]
 8017a2a:	b14a      	cbz	r2, 8017a40 <tcp_alloc+0x158>
    if ((pcb->prio < mprio) ||
 8017a2c:	7d50      	ldrb	r0, [r2, #21]
 8017a2e:	4281      	cmp	r1, r0
 8017a30:	d8f6      	bhi.n	8017a20 <tcp_alloc+0x138>
 8017a32:	d1f9      	bne.n	8017a28 <tcp_alloc+0x140>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a34:	6a15      	ldr	r5, [r2, #32]
 8017a36:	eba6 0c05 	sub.w	ip, r6, r5
 8017a3a:	4567      	cmp	r7, ip
 8017a3c:	d8f4      	bhi.n	8017a28 <tcp_alloc+0x140>
 8017a3e:	e7f0      	b.n	8017a22 <tcp_alloc+0x13a>
  if (inactive != NULL) {
 8017a40:	b11b      	cbz	r3, 8017a4a <tcp_alloc+0x162>
  tcp_abandon(pcb, 1);
 8017a42:	4618      	mov	r0, r3
 8017a44:	2101      	movs	r1, #1
 8017a46:	f7ff fe47 	bl	80176d8 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017a4a:	f240 724b 	movw	r2, #1867	; 0x74b
 8017a4e:	4908      	ldr	r1, [pc, #32]	; (8017a70 <tcp_alloc+0x188>)
 8017a50:	2002      	movs	r0, #2
 8017a52:	f7fe f805 	bl	8015a60 <memp_malloc_fn>
          if (pcb != NULL) {
 8017a56:	4603      	mov	r3, r0
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	f43f af75 	beq.w	8017948 <tcp_alloc+0x60>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8017a5e:	4a0d      	ldr	r2, [pc, #52]	; (8017a94 <tcp_alloc+0x1ac>)
 8017a60:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8017a64:	8881      	ldrh	r1, [r0, #4]
 8017a66:	3901      	subs	r1, #1
 8017a68:	8081      	strh	r1, [r0, #4]
 8017a6a:	e7c6      	b.n	80179fa <tcp_alloc+0x112>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017a6c:	227f      	movs	r2, #127	; 0x7f
 8017a6e:	e7cf      	b.n	8017a10 <tcp_alloc+0x128>
 8017a70:	0803d8b0 	.word	0x0803d8b0
 8017a74:	200223e5 	.word	0x200223e5
 8017a78:	20036300 	.word	0x20036300
 8017a7c:	08600860 	.word	0x08600860
 8017a80:	0218ffff 	.word	0x0218ffff
 8017a84:	006ddd00 	.word	0x006ddd00
 8017a88:	08017c81 	.word	0x08017c81
 8017a8c:	200362fc 	.word	0x200362fc
 8017a90:	2003630c 	.word	0x2003630c
 8017a94:	200361ec 	.word	0x200361ec

08017a98 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8017a98:	2040      	movs	r0, #64	; 0x40
 8017a9a:	f7ff bf25 	b.w	80178e8 <tcp_alloc>
 8017a9e:	bf00      	nop

08017aa0 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017aa0:	2040      	movs	r0, #64	; 0x40
 8017aa2:	f7ff bf21 	b.w	80178e8 <tcp_alloc>
 8017aa6:	bf00      	nop

08017aa8 <tcp_close_shutdown>:
{
 8017aa8:	b530      	push	{r4, r5, lr}
 8017aaa:	460d      	mov	r5, r1
 8017aac:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017aae:	4604      	mov	r4, r0
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d070      	beq.n	8017b96 <tcp_close_shutdown+0xee>
 8017ab4:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017ab6:	b11d      	cbz	r5, 8017ac0 <tcp_close_shutdown+0x18>
 8017ab8:	2b04      	cmp	r3, #4
 8017aba:	d013      	beq.n	8017ae4 <tcp_close_shutdown+0x3c>
 8017abc:	2b07      	cmp	r3, #7
 8017abe:	d011      	beq.n	8017ae4 <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 8017ac0:	2b01      	cmp	r3, #1
 8017ac2:	d070      	beq.n	8017ba6 <tcp_close_shutdown+0xfe>
 8017ac4:	d331      	bcc.n	8017b2a <tcp_close_shutdown+0x82>
 8017ac6:	2b02      	cmp	r3, #2
 8017ac8:	d15f      	bne.n	8017b8a <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017aca:	4853      	ldr	r0, [pc, #332]	; (8017c18 <tcp_close_shutdown+0x170>)
 8017acc:	4621      	mov	r1, r4
 8017ace:	f7ff fd8f 	bl	80175f0 <tcp_pcb_remove>
 8017ad2:	4b52      	ldr	r3, [pc, #328]	; (8017c1c <tcp_close_shutdown+0x174>)
 8017ad4:	2201      	movs	r2, #1
      tcp_free(pcb);
 8017ad6:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017ad8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017ada:	f7ff f897 	bl	8016c0c <tcp_free>
}
 8017ade:	2000      	movs	r0, #0
 8017ae0:	b005      	add	sp, #20
 8017ae2:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017ae4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8017ae6:	2a00      	cmp	r2, #0
 8017ae8:	d031      	beq.n	8017b4e <tcp_close_shutdown+0xa6>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017aea:	8b63      	ldrh	r3, [r4, #26]
 8017aec:	06db      	lsls	r3, r3, #27
 8017aee:	d533      	bpl.n	8017b58 <tcp_close_shutdown+0xb0>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017af0:	8b25      	ldrh	r5, [r4, #24]
 8017af2:	1d20      	adds	r0, r4, #4
 8017af4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017af6:	4623      	mov	r3, r4
 8017af8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017afa:	9502      	str	r5, [sp, #8]
 8017afc:	8ae5      	ldrh	r5, [r4, #22]
 8017afe:	9000      	str	r0, [sp, #0]
 8017b00:	4620      	mov	r0, r4
 8017b02:	9501      	str	r5, [sp, #4]
 8017b04:	f002 ff46 	bl	801a994 <tcp_rst>
      tcp_pcb_purge(pcb);
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f7ff fabb 	bl	8017084 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017b0e:	4b42      	ldr	r3, [pc, #264]	; (8017c18 <tcp_close_shutdown+0x170>)
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	42a2      	cmp	r2, r4
 8017b14:	d028      	beq.n	8017b68 <tcp_close_shutdown+0xc0>
 8017b16:	b34a      	cbz	r2, 8017b6c <tcp_close_shutdown+0xc4>
 8017b18:	68d3      	ldr	r3, [r2, #12]
 8017b1a:	429c      	cmp	r4, r3
 8017b1c:	d06a      	beq.n	8017bf4 <tcp_close_shutdown+0x14c>
 8017b1e:	b32b      	cbz	r3, 8017b6c <tcp_close_shutdown+0xc4>
 8017b20:	68da      	ldr	r2, [r3, #12]
 8017b22:	42a2      	cmp	r2, r4
 8017b24:	d067      	beq.n	8017bf6 <tcp_close_shutdown+0x14e>
 8017b26:	4613      	mov	r3, r2
 8017b28:	e7f9      	b.n	8017b1e <tcp_close_shutdown+0x76>
      if (pcb->local_port != 0) {
 8017b2a:	8ae3      	ldrh	r3, [r4, #22]
 8017b2c:	b33b      	cbz	r3, 8017b7e <tcp_close_shutdown+0xd6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017b2e:	4b3c      	ldr	r3, [pc, #240]	; (8017c20 <tcp_close_shutdown+0x178>)
 8017b30:	681a      	ldr	r2, [r3, #0]
 8017b32:	42a2      	cmp	r2, r4
 8017b34:	d06c      	beq.n	8017c10 <tcp_close_shutdown+0x168>
 8017b36:	2a00      	cmp	r2, #0
 8017b38:	d059      	beq.n	8017bee <tcp_close_shutdown+0x146>
 8017b3a:	68d3      	ldr	r3, [r2, #12]
 8017b3c:	429c      	cmp	r4, r3
 8017b3e:	d053      	beq.n	8017be8 <tcp_close_shutdown+0x140>
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d054      	beq.n	8017bee <tcp_close_shutdown+0x146>
 8017b44:	68da      	ldr	r2, [r3, #12]
 8017b46:	42a2      	cmp	r2, r4
 8017b48:	d04f      	beq.n	8017bea <tcp_close_shutdown+0x142>
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	e7f8      	b.n	8017b40 <tcp_close_shutdown+0x98>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017b4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8017b50:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8017b54:	d1c9      	bne.n	8017aea <tcp_close_shutdown+0x42>
 8017b56:	e7b3      	b.n	8017ac0 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017b58:	4b32      	ldr	r3, [pc, #200]	; (8017c24 <tcp_close_shutdown+0x17c>)
 8017b5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017b5e:	4932      	ldr	r1, [pc, #200]	; (8017c28 <tcp_close_shutdown+0x180>)
 8017b60:	4832      	ldr	r0, [pc, #200]	; (8017c2c <tcp_close_shutdown+0x184>)
 8017b62:	f008 fd19 	bl	8020598 <iprintf>
 8017b66:	e7c3      	b.n	8017af0 <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 8017b68:	68e2      	ldr	r2, [r4, #12]
 8017b6a:	601a      	str	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8017b6c:	4b30      	ldr	r3, [pc, #192]	; (8017c30 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 8017b6e:	2000      	movs	r0, #0
 8017b70:	4a2a      	ldr	r2, [pc, #168]	; (8017c1c <tcp_close_shutdown+0x174>)
 8017b72:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8017b74:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8017b76:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8017b78:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 8017b7a:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8017b7c:	d03e      	beq.n	8017bfc <tcp_close_shutdown+0x154>
        tcp_free(pcb);
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7ff f844 	bl	8016c0c <tcp_free>
}
 8017b84:	2000      	movs	r0, #0
 8017b86:	b005      	add	sp, #20
 8017b88:	bd30      	pop	{r4, r5, pc}
      return tcp_close_shutdown_fin(pcb);
 8017b8a:	4620      	mov	r0, r4
}
 8017b8c:	b005      	add	sp, #20
 8017b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8017b92:	f7fe bffb 	b.w	8016b8c <tcp_close_shutdown_fin>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017b96:	4b23      	ldr	r3, [pc, #140]	; (8017c24 <tcp_close_shutdown+0x17c>)
 8017b98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017b9c:	4925      	ldr	r1, [pc, #148]	; (8017c34 <tcp_close_shutdown+0x18c>)
 8017b9e:	4823      	ldr	r0, [pc, #140]	; (8017c2c <tcp_close_shutdown+0x184>)
 8017ba0:	f008 fcfa 	bl	8020598 <iprintf>
 8017ba4:	e786      	b.n	8017ab4 <tcp_close_shutdown+0xc>
  switch (pcb->state) {
 8017ba6:	4619      	mov	r1, r3
      pcb->listener = NULL;
 8017ba8:	2000      	movs	r0, #0
  switch (pcb->state) {
 8017baa:	4b1d      	ldr	r3, [pc, #116]	; (8017c20 <tcp_close_shutdown+0x178>)
 8017bac:	4d22      	ldr	r5, [pc, #136]	; (8017c38 <tcp_close_shutdown+0x190>)
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017bae:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017bb0:	b133      	cbz	r3, 8017bc0 <tcp_close_shutdown+0x118>
    if (pcb->listener == lpcb) {
 8017bb2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8017bb4:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8017bb6:	bf08      	it	eq
 8017bb8:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1f8      	bne.n	8017bb2 <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017bc0:	3101      	adds	r1, #1
 8017bc2:	2904      	cmp	r1, #4
 8017bc4:	d002      	beq.n	8017bcc <tcp_close_shutdown+0x124>
 8017bc6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8017bca:	e7f0      	b.n	8017bae <tcp_close_shutdown+0x106>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017bcc:	4621      	mov	r1, r4
 8017bce:	481b      	ldr	r0, [pc, #108]	; (8017c3c <tcp_close_shutdown+0x194>)
 8017bd0:	f7ff fd0e 	bl	80175f0 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017bd4:	7d23      	ldrb	r3, [r4, #20]
 8017bd6:	2b01      	cmp	r3, #1
 8017bd8:	d013      	beq.n	8017c02 <tcp_close_shutdown+0x15a>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017bda:	4621      	mov	r1, r4
 8017bdc:	2003      	movs	r0, #3
 8017bde:	f7fd ff63 	bl	8015aa8 <memp_free>
}
 8017be2:	2000      	movs	r0, #0
 8017be4:	b005      	add	sp, #20
 8017be6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017be8:	4613      	mov	r3, r2
 8017bea:	68e2      	ldr	r2, [r4, #12]
 8017bec:	60da      	str	r2, [r3, #12]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	60e3      	str	r3, [r4, #12]
 8017bf2:	e7c4      	b.n	8017b7e <tcp_close_shutdown+0xd6>
      TCP_RMV_ACTIVE(pcb);
 8017bf4:	4613      	mov	r3, r2
 8017bf6:	68e2      	ldr	r2, [r4, #12]
 8017bf8:	60da      	str	r2, [r3, #12]
 8017bfa:	e7b7      	b.n	8017b6c <tcp_close_shutdown+0xc4>
        tcp_trigger_input_pcb_close();
 8017bfc:	f001 ff02 	bl	8019a04 <tcp_trigger_input_pcb_close>
 8017c00:	e76d      	b.n	8017ade <tcp_close_shutdown+0x36>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017c02:	4b08      	ldr	r3, [pc, #32]	; (8017c24 <tcp_close_shutdown+0x17c>)
 8017c04:	22df      	movs	r2, #223	; 0xdf
 8017c06:	490e      	ldr	r1, [pc, #56]	; (8017c40 <tcp_close_shutdown+0x198>)
 8017c08:	4808      	ldr	r0, [pc, #32]	; (8017c2c <tcp_close_shutdown+0x184>)
 8017c0a:	f008 fcc5 	bl	8020598 <iprintf>
 8017c0e:	e7e4      	b.n	8017bda <tcp_close_shutdown+0x132>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017c10:	68e2      	ldr	r2, [r4, #12]
 8017c12:	601a      	str	r2, [r3, #0]
 8017c14:	e7eb      	b.n	8017bee <tcp_close_shutdown+0x146>
 8017c16:	bf00      	nop
 8017c18:	200362fc 	.word	0x200362fc
 8017c1c:	200362f8 	.word	0x200362f8
 8017c20:	20036308 	.word	0x20036308
 8017c24:	0803d8b0 	.word	0x0803d8b0
 8017c28:	0803d878 	.word	0x0803d878
 8017c2c:	08026544 	.word	0x08026544
 8017c30:	20036310 	.word	0x20036310
 8017c34:	0803d858 	.word	0x0803d858
 8017c38:	0803da70 	.word	0x0803da70
 8017c3c:	20036304 	.word	0x20036304
 8017c40:	0803d894 	.word	0x0803d894

08017c44 <tcp_close>:
{
 8017c44:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c46:	b158      	cbz	r0, 8017c60 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8017c48:	7d03      	ldrb	r3, [r0, #20]
 8017c4a:	2b01      	cmp	r3, #1
 8017c4c:	d003      	beq.n	8017c56 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017c4e:	8b43      	ldrh	r3, [r0, #26]
 8017c50:	f043 0310 	orr.w	r3, r3, #16
 8017c54:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8017c56:	2101      	movs	r1, #1
}
 8017c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8017c5c:	f7ff bf24 	b.w	8017aa8 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c60:	4b04      	ldr	r3, [pc, #16]	; (8017c74 <tcp_close+0x30>)
 8017c62:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017c66:	4904      	ldr	r1, [pc, #16]	; (8017c78 <tcp_close+0x34>)
 8017c68:	4804      	ldr	r0, [pc, #16]	; (8017c7c <tcp_close+0x38>)
 8017c6a:	f008 fc95 	bl	8020598 <iprintf>
}
 8017c6e:	f06f 000f 	mvn.w	r0, #15
 8017c72:	bd08      	pop	{r3, pc}
 8017c74:	0803d8b0 	.word	0x0803d8b0
 8017c78:	0803d840 	.word	0x0803d840
 8017c7c:	08026544 	.word	0x08026544

08017c80 <tcp_recv_null>:
{
 8017c80:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017c82:	b191      	cbz	r1, 8017caa <tcp_recv_null+0x2a>
 8017c84:	4614      	mov	r4, r2
  if (p != NULL) {
 8017c86:	b912      	cbnz	r2, 8017c8e <tcp_recv_null+0xe>
  } else if (err == ERR_OK) {
 8017c88:	b153      	cbz	r3, 8017ca0 <tcp_recv_null+0x20>
  return ERR_OK;
 8017c8a:	4610      	mov	r0, r2
}
 8017c8c:	bd10      	pop	{r4, pc}
    tcp_recved(pcb, p->tot_len);
 8017c8e:	4608      	mov	r0, r1
 8017c90:	8911      	ldrh	r1, [r2, #8]
 8017c92:	f7ff f8e3 	bl	8016e5c <tcp_recved>
    pbuf_free(p);
 8017c96:	4620      	mov	r0, r4
 8017c98:	f7fe f9e0 	bl	801605c <pbuf_free>
  return ERR_OK;
 8017c9c:	2000      	movs	r0, #0
}
 8017c9e:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8017ca0:	4608      	mov	r0, r1
}
 8017ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8017ca6:	f7ff bfcd 	b.w	8017c44 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017caa:	4b05      	ldr	r3, [pc, #20]	; (8017cc0 <tcp_recv_null+0x40>)
 8017cac:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017cb0:	4904      	ldr	r1, [pc, #16]	; (8017cc4 <tcp_recv_null+0x44>)
 8017cb2:	4805      	ldr	r0, [pc, #20]	; (8017cc8 <tcp_recv_null+0x48>)
 8017cb4:	f008 fc70 	bl	8020598 <iprintf>
 8017cb8:	f06f 000f 	mvn.w	r0, #15
}
 8017cbc:	bd10      	pop	{r4, pc}
 8017cbe:	bf00      	nop
 8017cc0:	0803d8b0 	.word	0x0803d8b0
 8017cc4:	0803dbb4 	.word	0x0803dbb4
 8017cc8:	08026544 	.word	0x08026544

08017ccc <tcp_process_refused_data>:
{
 8017ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d035      	beq.n	8017d3e <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 8017cd2:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8017cd4:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017cd6:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8017cda:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8017cdc:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8017cde:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017ce0:	b31d      	cbz	r5, 8017d2a <tcp_process_refused_data+0x5e>
 8017ce2:	4601      	mov	r1, r0
 8017ce4:	4632      	mov	r2, r6
 8017ce6:	6900      	ldr	r0, [r0, #16]
 8017ce8:	47a8      	blx	r5
 8017cea:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8017cec:	b135      	cbz	r5, 8017cfc <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 8017cee:	350d      	adds	r5, #13
 8017cf0:	d017      	beq.n	8017d22 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 8017cf2:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8017cf6:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017cfc:	06bb      	lsls	r3, r7, #26
 8017cfe:	d5fb      	bpl.n	8017cf8 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017d00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8017d02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017d06:	d001      	beq.n	8017d0c <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 8017d08:	3301      	adds	r3, #1
 8017d0a:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8017d0c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8017d10:	2e00      	cmp	r6, #0
 8017d12:	d0f1      	beq.n	8017cf8 <tcp_process_refused_data+0x2c>
 8017d14:	2300      	movs	r3, #0
 8017d16:	4621      	mov	r1, r4
 8017d18:	6920      	ldr	r0, [r4, #16]
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8017d1e:	300d      	adds	r0, #13
 8017d20:	d1ea      	bne.n	8017cf8 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 8017d22:	f06f 050c 	mvn.w	r5, #12
}
 8017d26:	4628      	mov	r0, r5
 8017d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017d2a:	462b      	mov	r3, r5
 8017d2c:	4628      	mov	r0, r5
 8017d2e:	4632      	mov	r2, r6
 8017d30:	4621      	mov	r1, r4
 8017d32:	f7ff ffa5 	bl	8017c80 <tcp_recv_null>
 8017d36:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8017d38:	2d00      	cmp	r5, #0
 8017d3a:	d1d8      	bne.n	8017cee <tcp_process_refused_data+0x22>
 8017d3c:	e7de      	b.n	8017cfc <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d3e:	4b05      	ldr	r3, [pc, #20]	; (8017d54 <tcp_process_refused_data+0x88>)
 8017d40:	f240 6209 	movw	r2, #1545	; 0x609
 8017d44:	4904      	ldr	r1, [pc, #16]	; (8017d58 <tcp_process_refused_data+0x8c>)
 8017d46:	f06f 050f 	mvn.w	r5, #15
 8017d4a:	4804      	ldr	r0, [pc, #16]	; (8017d5c <tcp_process_refused_data+0x90>)
 8017d4c:	f008 fc24 	bl	8020598 <iprintf>
 8017d50:	e7d2      	b.n	8017cf8 <tcp_process_refused_data+0x2c>
 8017d52:	bf00      	nop
 8017d54:	0803d8b0 	.word	0x0803d8b0
 8017d58:	0803db64 	.word	0x0803db64
 8017d5c:	08026544 	.word	0x08026544

08017d60 <tcp_fasttmr>:
{
 8017d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8017d64:	4d1c      	ldr	r5, [pc, #112]	; (8017dd8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8017d66:	2700      	movs	r7, #0
 8017d68:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8017de0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 8017d6c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8017d6e:	4e1b      	ldr	r6, [pc, #108]	; (8017ddc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8017d70:	3301      	adds	r3, #1
 8017d72:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8017d74:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8017d78:	b1bc      	cbz	r4, 8017daa <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017d7a:	782a      	ldrb	r2, [r5, #0]
 8017d7c:	7fa3      	ldrb	r3, [r4, #30]
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d015      	beq.n	8017dae <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8017d82:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8017d84:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8017d86:	07d9      	lsls	r1, r3, #31
 8017d88:	d41a      	bmi.n	8017dc0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 8017d8a:	071a      	lsls	r2, r3, #28
 8017d8c:	d411      	bmi.n	8017db2 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 8017d8e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8017d90:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8017d94:	b133      	cbz	r3, 8017da4 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8017d96:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8017d98:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8017d9a:	f7ff ff97 	bl	8017ccc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017d9e:	7833      	ldrb	r3, [r6, #0]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d1e7      	bne.n	8017d74 <tcp_fasttmr+0x14>
      pcb = next;
 8017da4:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8017da6:	2c00      	cmp	r4, #0
 8017da8:	d1e7      	bne.n	8017d7a <tcp_fasttmr+0x1a>
}
 8017daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 8017dae:	68e4      	ldr	r4, [r4, #12]
 8017db0:	e7e2      	b.n	8017d78 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017db2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8017db6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017db8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8017dba:	f7fe fee7 	bl	8016b8c <tcp_close_shutdown_fin>
 8017dbe:	e7e6      	b.n	8017d8e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8017dc0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8017dc4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8017dc6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8017dc8:	f002 fe60 	bl	801aa8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017dcc:	8b63      	ldrh	r3, [r4, #26]
 8017dce:	f023 0303 	bic.w	r3, r3, #3
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	8363      	strh	r3, [r4, #26]
 8017dd6:	e7d8      	b.n	8017d8a <tcp_fasttmr+0x2a>
 8017dd8:	200223e5 	.word	0x200223e5
 8017ddc:	200362f8 	.word	0x200362f8
 8017de0:	200362fc 	.word	0x200362fc

08017de4 <tcp_tmr>:
{
 8017de4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8017de6:	f7ff ffbb 	bl	8017d60 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8017dea:	4a06      	ldr	r2, [pc, #24]	; (8017e04 <tcp_tmr+0x20>)
 8017dec:	7813      	ldrb	r3, [r2, #0]
 8017dee:	3301      	adds	r3, #1
 8017df0:	b2db      	uxtb	r3, r3
 8017df2:	7013      	strb	r3, [r2, #0]
 8017df4:	07db      	lsls	r3, r3, #31
 8017df6:	d400      	bmi.n	8017dfa <tcp_tmr+0x16>
}
 8017df8:	bd08      	pop	{r3, pc}
 8017dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8017dfe:	f7ff b981 	b.w	8017104 <tcp_slowtmr>
 8017e02:	bf00      	nop
 8017e04:	200223e4 	.word	0x200223e4

08017e08 <tcp_next_iss>:
{
 8017e08:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017e0a:	b130      	cbz	r0, 8017e1a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 8017e0c:	4b07      	ldr	r3, [pc, #28]	; (8017e2c <tcp_next_iss+0x24>)
 8017e0e:	4a08      	ldr	r2, [pc, #32]	; (8017e30 <tcp_next_iss+0x28>)
 8017e10:	6818      	ldr	r0, [r3, #0]
 8017e12:	6812      	ldr	r2, [r2, #0]
 8017e14:	4410      	add	r0, r2
 8017e16:	6018      	str	r0, [r3, #0]
}
 8017e18:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017e1a:	4b06      	ldr	r3, [pc, #24]	; (8017e34 <tcp_next_iss+0x2c>)
 8017e1c:	f640 02af 	movw	r2, #2223	; 0x8af
 8017e20:	4905      	ldr	r1, [pc, #20]	; (8017e38 <tcp_next_iss+0x30>)
 8017e22:	4806      	ldr	r0, [pc, #24]	; (8017e3c <tcp_next_iss+0x34>)
 8017e24:	f008 fbb8 	bl	8020598 <iprintf>
 8017e28:	e7f0      	b.n	8017e0c <tcp_next_iss+0x4>
 8017e2a:	bf00      	nop
 8017e2c:	200003d8 	.word	0x200003d8
 8017e30:	20036300 	.word	0x20036300
 8017e34:	0803d8b0 	.word	0x0803d8b0
 8017e38:	0803da54 	.word	0x0803da54
 8017e3c:	08026544 	.word	0x08026544

08017e40 <tcp_eff_send_mss_netif>:
{
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	4605      	mov	r5, r0
 8017e44:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017e46:	b172      	cbz	r2, 8017e66 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 8017e48:	b144      	cbz	r4, 8017e5c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 8017e4a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 8017e4c:	b133      	cbz	r3, 8017e5c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017e4e:	2b28      	cmp	r3, #40	; 0x28
 8017e50:	d906      	bls.n	8017e60 <tcp_eff_send_mss_netif+0x20>
 8017e52:	3b28      	subs	r3, #40	; 0x28
 8017e54:	b29b      	uxth	r3, r3
 8017e56:	429d      	cmp	r5, r3
 8017e58:	bf28      	it	cs
 8017e5a:	461d      	movcs	r5, r3
}
 8017e5c:	4628      	mov	r0, r5
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	2500      	movs	r5, #0
 8017e62:	4628      	mov	r0, r5
 8017e64:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8017e66:	4b04      	ldr	r3, [pc, #16]	; (8017e78 <tcp_eff_send_mss_netif+0x38>)
 8017e68:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8017e6c:	4903      	ldr	r1, [pc, #12]	; (8017e7c <tcp_eff_send_mss_netif+0x3c>)
 8017e6e:	4804      	ldr	r0, [pc, #16]	; (8017e80 <tcp_eff_send_mss_netif+0x40>)
 8017e70:	f008 fb92 	bl	8020598 <iprintf>
 8017e74:	e7e8      	b.n	8017e48 <tcp_eff_send_mss_netif+0x8>
 8017e76:	bf00      	nop
 8017e78:	0803d8b0 	.word	0x0803d8b0
 8017e7c:	0803d954 	.word	0x0803d954
 8017e80:	08026544 	.word	0x08026544

08017e84 <tcp_connect>:
{
 8017e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e86:	2800      	cmp	r0, #0
 8017e88:	d07d      	beq.n	8017f86 <tcp_connect+0x102>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017e8a:	2900      	cmp	r1, #0
 8017e8c:	f000 8085 	beq.w	8017f9a <tcp_connect+0x116>
 8017e90:	461f      	mov	r7, r3
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8017e92:	7d03      	ldrb	r3, [r0, #20]
 8017e94:	4604      	mov	r4, r0
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d165      	bne.n	8017f66 <tcp_connect+0xe2>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8017e9a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017e9c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8017e9e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 8017ea0:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d046      	beq.n	8017f34 <tcp_connect+0xb0>
    netif = netif_get_by_index(pcb->netif_idx);
 8017ea6:	f7fd fff3 	bl	8015e90 <netif_get_by_index>
 8017eaa:	4605      	mov	r5, r0
  if (netif == NULL) {
 8017eac:	2d00      	cmp	r5, #0
 8017eae:	d067      	beq.n	8017f80 <tcp_connect+0xfc>
  if (ip_addr_isany(&pcb->local_ip)) {
 8017eb0:	6823      	ldr	r3, [r4, #0]
 8017eb2:	b90b      	cbnz	r3, 8017eb8 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017eb4:	686b      	ldr	r3, [r5, #4]
 8017eb6:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8017eb8:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8017eba:	b926      	cbnz	r6, 8017ec6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 8017ebc:	f7fe fe32 	bl	8016b24 <tcp_new_port>
 8017ec0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	d059      	beq.n	8017f7a <tcp_connect+0xf6>
  iss = tcp_next_iss(pcb);
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f7ff ff9e 	bl	8017e08 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8017ecc:	2200      	movs	r2, #0
  pcb->lastack = iss - 1;
 8017ece:	1e43      	subs	r3, r0, #1
  pcb->rcv_nxt = 0;
 8017ed0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8017fd0 <tcp_connect+0x14c>
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017ed4:	4629      	mov	r1, r5
  pcb->snd_wnd = TCP_WND;
 8017ed6:	f44f 6c06 	mov.w	ip, #2144	; 0x860
  pcb->mss = INITIAL_MSS;
 8017eda:	f44f 7506 	mov.w	r5, #536	; 0x218
  pcb->snd_nxt = iss;
 8017ede:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->rcv_nxt = 0;
 8017ee0:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 8017ee2:	6463      	str	r3, [r4, #68]	; 0x44
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017ee4:	4628      	mov	r0, r5
  pcb->snd_wl2 = iss - 1;
 8017ee6:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8017ee8:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_wnd = TCP_WND;
 8017eea:	f8a4 c060 	strh.w	ip, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 8017eee:	8665      	strh	r5, [r4, #50]	; 0x32
  pcb->rcv_nxt = 0;
 8017ef0:	e9c4 e20a 	strd	lr, r2, [r4, #40]	; 0x28
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017ef4:	1d22      	adds	r2, r4, #4
 8017ef6:	f7ff ffa3 	bl	8017e40 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 8017efa:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017efc:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017efe:	2102      	movs	r1, #2
  pcb->connected = connected;
 8017f00:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017f04:	4620      	mov	r0, r4
  pcb->cwnd = 1;
 8017f06:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017f0a:	f002 fb9f 	bl	801a64c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8017f0e:	4605      	mov	r5, r0
 8017f10:	bb18      	cbnz	r0, 8017f5a <tcp_connect+0xd6>
    pcb->state = SYN_SENT;
 8017f12:	2302      	movs	r3, #2
 8017f14:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8017f16:	b1a6      	cbz	r6, 8017f42 <tcp_connect+0xbe>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017f18:	4b25      	ldr	r3, [pc, #148]	; (8017fb0 <tcp_connect+0x12c>)
 8017f1a:	681a      	ldr	r2, [r3, #0]
 8017f1c:	42a2      	cmp	r2, r4
 8017f1e:	d00e      	beq.n	8017f3e <tcp_connect+0xba>
 8017f20:	b17a      	cbz	r2, 8017f42 <tcp_connect+0xbe>
 8017f22:	68d3      	ldr	r3, [r2, #12]
 8017f24:	429c      	cmp	r4, r3
 8017f26:	d01a      	beq.n	8017f5e <tcp_connect+0xda>
 8017f28:	b15b      	cbz	r3, 8017f42 <tcp_connect+0xbe>
 8017f2a:	68da      	ldr	r2, [r3, #12]
 8017f2c:	42a2      	cmp	r2, r4
 8017f2e:	d017      	beq.n	8017f60 <tcp_connect+0xdc>
 8017f30:	4613      	mov	r3, r2
 8017f32:	e7f9      	b.n	8017f28 <tcp_connect+0xa4>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8017f34:	1d20      	adds	r0, r4, #4
 8017f36:	f005 feab 	bl	801dc90 <ip4_route>
 8017f3a:	4605      	mov	r5, r0
 8017f3c:	e7b6      	b.n	8017eac <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017f3e:	68e2      	ldr	r2, [r4, #12]
 8017f40:	601a      	str	r2, [r3, #0]
    TCP_REG_ACTIVE(pcb);
 8017f42:	4b1c      	ldr	r3, [pc, #112]	; (8017fb4 <tcp_connect+0x130>)
 8017f44:	681a      	ldr	r2, [r3, #0]
 8017f46:	601c      	str	r4, [r3, #0]
 8017f48:	60e2      	str	r2, [r4, #12]
 8017f4a:	f003 f8d5 	bl	801b0f8 <tcp_timer_needed>
 8017f4e:	4b1a      	ldr	r3, [pc, #104]	; (8017fb8 <tcp_connect+0x134>)
 8017f50:	2201      	movs	r2, #1
    tcp_output(pcb);
 8017f52:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8017f54:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8017f56:	f002 fd99 	bl	801aa8c <tcp_output>
}
 8017f5a:	4628      	mov	r0, r5
 8017f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017f5e:	4613      	mov	r3, r2
 8017f60:	68e2      	ldr	r2, [r4, #12]
 8017f62:	60da      	str	r2, [r3, #12]
 8017f64:	e7ed      	b.n	8017f42 <tcp_connect+0xbe>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8017f66:	4b15      	ldr	r3, [pc, #84]	; (8017fbc <tcp_connect+0x138>)
 8017f68:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8017f6c:	4914      	ldr	r1, [pc, #80]	; (8017fc0 <tcp_connect+0x13c>)
 8017f6e:	f06f 0509 	mvn.w	r5, #9
 8017f72:	4814      	ldr	r0, [pc, #80]	; (8017fc4 <tcp_connect+0x140>)
 8017f74:	f008 fb10 	bl	8020598 <iprintf>
 8017f78:	e7ef      	b.n	8017f5a <tcp_connect+0xd6>
      return ERR_BUF;
 8017f7a:	f06f 0501 	mvn.w	r5, #1
 8017f7e:	e7ec      	b.n	8017f5a <tcp_connect+0xd6>
    return ERR_RTE;
 8017f80:	f06f 0503 	mvn.w	r5, #3
 8017f84:	e7e9      	b.n	8017f5a <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f86:	4b0d      	ldr	r3, [pc, #52]	; (8017fbc <tcp_connect+0x138>)
 8017f88:	f240 4235 	movw	r2, #1077	; 0x435
 8017f8c:	490e      	ldr	r1, [pc, #56]	; (8017fc8 <tcp_connect+0x144>)
 8017f8e:	f06f 050f 	mvn.w	r5, #15
 8017f92:	480c      	ldr	r0, [pc, #48]	; (8017fc4 <tcp_connect+0x140>)
 8017f94:	f008 fb00 	bl	8020598 <iprintf>
 8017f98:	e7df      	b.n	8017f5a <tcp_connect+0xd6>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017f9a:	4b08      	ldr	r3, [pc, #32]	; (8017fbc <tcp_connect+0x138>)
 8017f9c:	f240 4236 	movw	r2, #1078	; 0x436
 8017fa0:	490a      	ldr	r1, [pc, #40]	; (8017fcc <tcp_connect+0x148>)
 8017fa2:	f06f 050f 	mvn.w	r5, #15
 8017fa6:	4807      	ldr	r0, [pc, #28]	; (8017fc4 <tcp_connect+0x140>)
 8017fa8:	f008 faf6 	bl	8020598 <iprintf>
 8017fac:	e7d5      	b.n	8017f5a <tcp_connect+0xd6>
 8017fae:	bf00      	nop
 8017fb0:	20036308 	.word	0x20036308
 8017fb4:	200362fc 	.word	0x200362fc
 8017fb8:	200362f8 	.word	0x200362f8
 8017fbc:	0803d8b0 	.word	0x0803d8b0
 8017fc0:	0803d924 	.word	0x0803d924
 8017fc4:	08026544 	.word	0x08026544
 8017fc8:	0803d8ec 	.word	0x0803d8ec
 8017fcc:	0803d908 	.word	0x0803d908
 8017fd0:	08600860 	.word	0x08600860

08017fd4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8017fd4:	b308      	cbz	r0, 801801a <tcp_netif_ip_addr_changed+0x46>
 8017fd6:	6802      	ldr	r2, [r0, #0]
{
 8017fd8:	b538      	push	{r3, r4, r5, lr}
 8017fda:	4605      	mov	r5, r0
  if (!ip_addr_isany(old_addr)) {
 8017fdc:	b902      	cbnz	r2, 8017fe0 <tcp_netif_ip_addr_changed+0xc>
}
 8017fde:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017fe0:	4b0e      	ldr	r3, [pc, #56]	; (801801c <tcp_netif_ip_addr_changed+0x48>)
 8017fe2:	460c      	mov	r4, r1
 8017fe4:	6819      	ldr	r1, [r3, #0]
 8017fe6:	f7ff fc39 	bl	801785c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017fea:	4b0d      	ldr	r3, [pc, #52]	; (8018020 <tcp_netif_ip_addr_changed+0x4c>)
 8017fec:	4628      	mov	r0, r5
 8017fee:	6819      	ldr	r1, [r3, #0]
 8017ff0:	f7ff fc34 	bl	801785c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8017ff4:	2c00      	cmp	r4, #0
 8017ff6:	d0f2      	beq.n	8017fde <tcp_netif_ip_addr_changed+0xa>
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d0ef      	beq.n	8017fde <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017ffe:	4b09      	ldr	r3, [pc, #36]	; (8018024 <tcp_netif_ip_addr_changed+0x50>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d0eb      	beq.n	8017fde <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018006:	6819      	ldr	r1, [r3, #0]
 8018008:	682a      	ldr	r2, [r5, #0]
 801800a:	4291      	cmp	r1, r2
 801800c:	d101      	bne.n	8018012 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801800e:	6822      	ldr	r2, [r4, #0]
 8018010:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d1f6      	bne.n	8018006 <tcp_netif_ip_addr_changed+0x32>
}
 8018018:	bd38      	pop	{r3, r4, r5, pc}
 801801a:	4770      	bx	lr
 801801c:	200362fc 	.word	0x200362fc
 8018020:	20036308 	.word	0x20036308
 8018024:	20036304 	.word	0x20036304

08018028 <tcp_free_ooseq>:
{
 8018028:	b538      	push	{r3, r4, r5, lr}
 801802a:	4605      	mov	r5, r0
  if (pcb->ooseq) {
 801802c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801802e:	b130      	cbz	r0, 801803e <tcp_free_ooseq+0x16>
    struct tcp_seg *next = seg->next;
 8018030:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8018032:	f7fe ff53 	bl	8016edc <tcp_seg_free>
  while (seg != NULL) {
 8018036:	4620      	mov	r0, r4
 8018038:	2c00      	cmp	r4, #0
 801803a:	d1f9      	bne.n	8018030 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801803c:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801803e:	bd38      	pop	{r3, r4, r5, pc}

08018040 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018044:	4606      	mov	r6, r0
 8018046:	2800      	cmp	r0, #0
 8018048:	f000 808a 	beq.w	8018160 <tcp_parseopt+0x120>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801804c:	4b51      	ldr	r3, [pc, #324]	; (8018194 <tcp_parseopt+0x154>)
 801804e:	881f      	ldrh	r7, [r3, #0]
 8018050:	2f00      	cmp	r7, #0
 8018052:	d063      	beq.n	801811c <tcp_parseopt+0xdc>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018054:	4a50      	ldr	r2, [pc, #320]	; (8018198 <tcp_parseopt+0x158>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018056:	2300      	movs	r3, #0
 8018058:	4c50      	ldr	r4, [pc, #320]	; (801819c <tcp_parseopt+0x15c>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801805a:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801805e:	461a      	mov	r2, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018060:	484f      	ldr	r0, [pc, #316]	; (80181a0 <tcp_parseopt+0x160>)
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018062:	4950      	ldr	r1, [pc, #320]	; (80181a4 <tcp_parseopt+0x164>)
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018064:	fa5f fa8c 	uxtb.w	sl, ip
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018068:	8023      	strh	r3, [r4, #0]
 801806a:	461c      	mov	r4, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801806c:	6805      	ldr	r5, [r0, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801806e:	f8d1 8000 	ldr.w	r8, [r1]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018072:	4613      	mov	r3, r2
 8018074:	f04f 0e00 	mov.w	lr, #0
    return tcphdr_opt2[idx];
 8018078:	eba2 090a 	sub.w	r9, r2, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801807c:	eb02 000e 	add.w	r0, r2, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018080:	429f      	cmp	r7, r3
  u16_t optidx = tcp_optidx++;
 8018082:	f103 0101 	add.w	r1, r3, #1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018086:	fa1f fb80 	uxth.w	fp, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801808a:	d977      	bls.n	801817c <tcp_parseopt+0x13c>
  u16_t optidx = tcp_optidx++;
 801808c:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801808e:	2d00      	cmp	r5, #0
 8018090:	d034      	beq.n	80180fc <tcp_parseopt+0xbc>
    return tcphdr_opt2[idx];
 8018092:	eb09 040e 	add.w	r4, r9, lr
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018096:	45dc      	cmp	ip, fp
    return tcphdr_opt2[idx];
 8018098:	b2e4      	uxtb	r4, r4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801809a:	d831      	bhi.n	8018100 <tcp_parseopt+0xc0>
    return tcphdr_opt2[idx];
 801809c:	f815 b004 	ldrb.w	fp, [r5, r4]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 80180a0:	f1bb 0f01 	cmp.w	fp, #1
 80180a4:	d032      	beq.n	801810c <tcp_parseopt+0xcc>
 80180a6:	d371      	bcc.n	801818c <tcp_parseopt+0x14c>
 80180a8:	f1bb 0f02 	cmp.w	fp, #2
 80180ac:	d138      	bne.n	8018120 <tcp_parseopt+0xe0>
  u16_t optidx = tcp_optidx++;
 80180ae:	1c98      	adds	r0, r3, #2
 80180b0:	b280      	uxth	r0, r0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180b2:	b10d      	cbz	r5, 80180b8 <tcp_parseopt+0x78>
 80180b4:	4561      	cmp	r1, ip
 80180b6:	d23e      	bcs.n	8018136 <tcp_parseopt+0xf6>
    return opts[optidx];
 80180b8:	4441      	add	r1, r8
 80180ba:	7d0a      	ldrb	r2, [r1, #20]
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80180bc:	2a04      	cmp	r2, #4
 80180be:	d162      	bne.n	8018186 <tcp_parseopt+0x146>
 80180c0:	1c42      	adds	r2, r0, #1
 80180c2:	42ba      	cmp	r2, r7
 80180c4:	da5f      	bge.n	8018186 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 80180c6:	1cd9      	adds	r1, r3, #3
 80180c8:	1d1a      	adds	r2, r3, #4
 80180ca:	b289      	uxth	r1, r1
 80180cc:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180ce:	2d00      	cmp	r5, #0
 80180d0:	d04e      	beq.n	8018170 <tcp_parseopt+0x130>
 80180d2:	4584      	cmp	ip, r0
 80180d4:	d939      	bls.n	801814a <tcp_parseopt+0x10a>
    return opts[optidx];
 80180d6:	4440      	add	r0, r8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180d8:	458c      	cmp	ip, r1
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80180da:	7d03      	ldrb	r3, [r0, #20]
 80180dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80180e0:	d83b      	bhi.n	801815a <tcp_parseopt+0x11a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80180e2:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 80180e6:	b2c9      	uxtb	r1, r1
 80180e8:	5c69      	ldrb	r1, [r5, r1]
          mss |= tcp_get_next_optbyte();
 80180ea:	430b      	orrs	r3, r1
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80180ec:	1e59      	subs	r1, r3, #1
 80180ee:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 80180f2:	bf28      	it	cs
 80180f4:	f44f 7306 	movcs.w	r3, #536	; 0x218
 80180f8:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 80180fa:	e01a      	b.n	8018132 <tcp_parseopt+0xf2>
 80180fc:	eb02 000e 	add.w	r0, r2, lr
    return opts[optidx];
 8018100:	4440      	add	r0, r8
 8018102:	f890 b014 	ldrb.w	fp, [r0, #20]
      switch (opt) {
 8018106:	f1bb 0f01 	cmp.w	fp, #1
 801810a:	d1cc      	bne.n	80180a6 <tcp_parseopt+0x66>
 801810c:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 8018110:	460b      	mov	r3, r1
 8018112:	465c      	mov	r4, fp
 8018114:	e7b2      	b.n	801807c <tcp_parseopt+0x3c>
 8018116:	3302      	adds	r3, #2
 8018118:	4a20      	ldr	r2, [pc, #128]	; (801819c <tcp_parseopt+0x15c>)
 801811a:	8013      	strh	r3, [r2, #0]
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 801811c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018120:	b10d      	cbz	r5, 8018126 <tcp_parseopt+0xe6>
 8018122:	4561      	cmp	r1, ip
 8018124:	d20c      	bcs.n	8018140 <tcp_parseopt+0x100>
    return opts[optidx];
 8018126:	4441      	add	r1, r8
 8018128:	7d0a      	ldrb	r2, [r1, #20]
          if (data < 2) {
 801812a:	2a01      	cmp	r2, #1
 801812c:	d9f3      	bls.n	8018116 <tcp_parseopt+0xd6>
          tcp_optidx += data - 2;
 801812e:	441a      	add	r2, r3
 8018130:	b292      	uxth	r2, r2
 8018132:	2401      	movs	r4, #1
 8018134:	e79d      	b.n	8018072 <tcp_parseopt+0x32>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018136:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 801813a:	b2c9      	uxtb	r1, r1
 801813c:	5c6a      	ldrb	r2, [r5, r1]
 801813e:	e7bd      	b.n	80180bc <tcp_parseopt+0x7c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018140:	eba1 010a 	sub.w	r1, r1, sl
    return tcphdr_opt2[idx];
 8018144:	b2c9      	uxtb	r1, r1
 8018146:	5c6a      	ldrb	r2, [r5, r1]
 8018148:	e7ef      	b.n	801812a <tcp_parseopt+0xea>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801814a:	eba0 000a 	sub.w	r0, r0, sl
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801814e:	458c      	cmp	ip, r1
    return tcphdr_opt2[idx];
 8018150:	b2c0      	uxtb	r0, r0
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018152:	5c2b      	ldrb	r3, [r5, r0]
 8018154:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018158:	d9c3      	bls.n	80180e2 <tcp_parseopt+0xa2>
    return opts[optidx];
 801815a:	4441      	add	r1, r8
 801815c:	7d09      	ldrb	r1, [r1, #20]
 801815e:	e7c4      	b.n	80180ea <tcp_parseopt+0xaa>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018160:	4b11      	ldr	r3, [pc, #68]	; (80181a8 <tcp_parseopt+0x168>)
 8018162:	f240 727d 	movw	r2, #1917	; 0x77d
 8018166:	4911      	ldr	r1, [pc, #68]	; (80181ac <tcp_parseopt+0x16c>)
 8018168:	4811      	ldr	r0, [pc, #68]	; (80181b0 <tcp_parseopt+0x170>)
 801816a:	f008 fa15 	bl	8020598 <iprintf>
 801816e:	e76d      	b.n	801804c <tcp_parseopt+0xc>
    return opts[optidx];
 8018170:	4440      	add	r0, r8
 8018172:	4441      	add	r1, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018174:	7d03      	ldrb	r3, [r0, #20]
    return opts[optidx];
 8018176:	7d09      	ldrb	r1, [r1, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018178:	021b      	lsls	r3, r3, #8
 801817a:	e7b6      	b.n	80180ea <tcp_parseopt+0xaa>
 801817c:	2c00      	cmp	r4, #0
 801817e:	d0cd      	beq.n	801811c <tcp_parseopt+0xdc>
 8018180:	4a06      	ldr	r2, [pc, #24]	; (801819c <tcp_parseopt+0x15c>)
 8018182:	8013      	strh	r3, [r2, #0]
 8018184:	e7ca      	b.n	801811c <tcp_parseopt+0xdc>
 8018186:	4b05      	ldr	r3, [pc, #20]	; (801819c <tcp_parseopt+0x15c>)
 8018188:	8018      	strh	r0, [r3, #0]
 801818a:	e7c7      	b.n	801811c <tcp_parseopt+0xdc>
 801818c:	4b03      	ldr	r3, [pc, #12]	; (801819c <tcp_parseopt+0x15c>)
 801818e:	8019      	strh	r1, [r3, #0]
 8018190:	e7c4      	b.n	801811c <tcp_parseopt+0xdc>
 8018192:	bf00      	nop
 8018194:	20022424 	.word	0x20022424
 8018198:	2002241c 	.word	0x2002241c
 801819c:	20022414 	.word	0x20022414
 80181a0:	20022420 	.word	0x20022420
 80181a4:	20022418 	.word	0x20022418
 80181a8:	0803e0f4 	.word	0x0803e0f4
 80181ac:	0803e128 	.word	0x0803e128
 80181b0:	08026544 	.word	0x08026544

080181b4 <tcp_oos_insert_segment>:
{
 80181b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181b6:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80181b8:	4605      	mov	r5, r0
 80181ba:	2800      	cmp	r0, #0
 80181bc:	d03e      	beq.n	801823c <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181be:	692b      	ldr	r3, [r5, #16]
 80181c0:	8998      	ldrh	r0, [r3, #12]
 80181c2:	f7fc f8db 	bl	801437c <lwip_htons>
 80181c6:	07c2      	lsls	r2, r0, #31
 80181c8:	d432      	bmi.n	8018230 <tcp_oos_insert_segment+0x7c>
 80181ca:	4e20      	ldr	r6, [pc, #128]	; (801824c <tcp_oos_insert_segment+0x98>)
 80181cc:	e005      	b.n	80181da <tcp_oos_insert_segment+0x26>
      next = next->next;
 80181ce:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80181d0:	4620      	mov	r0, r4
 80181d2:	f7fe fe83 	bl	8016edc <tcp_seg_free>
 80181d6:	463c      	mov	r4, r7
    while (next &&
 80181d8:	b1ef      	cbz	r7, 8018216 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80181da:	6921      	ldr	r1, [r4, #16]
 80181dc:	8923      	ldrh	r3, [r4, #8]
 80181de:	6848      	ldr	r0, [r1, #4]
 80181e0:	6837      	ldr	r7, [r6, #0]
 80181e2:	892a      	ldrh	r2, [r5, #8]
 80181e4:	4403      	add	r3, r0
 80181e6:	443a      	add	r2, r7
 80181e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	db15      	blt.n	801821a <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80181ee:	8988      	ldrh	r0, [r1, #12]
 80181f0:	f7fc f8c4 	bl	801437c <lwip_htons>
 80181f4:	07c3      	lsls	r3, r0, #31
 80181f6:	d5ea      	bpl.n	80181ce <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80181f8:	692b      	ldr	r3, [r5, #16]
 80181fa:	2001      	movs	r0, #1
 80181fc:	899f      	ldrh	r7, [r3, #12]
 80181fe:	f7fc f8bd 	bl	801437c <lwip_htons>
 8018202:	692b      	ldr	r3, [r5, #16]
 8018204:	4338      	orrs	r0, r7
      next = next->next;
 8018206:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018208:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801820a:	4620      	mov	r0, r4
 801820c:	f7fe fe66 	bl	8016edc <tcp_seg_free>
 8018210:	463c      	mov	r4, r7
    while (next &&
 8018212:	2f00      	cmp	r7, #0
 8018214:	d1e1      	bne.n	80181da <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 8018216:	602c      	str	r4, [r5, #0]
}
 8018218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801821a:	1a12      	subs	r2, r2, r0
    if (next &&
 801821c:	2a00      	cmp	r2, #0
 801821e:	ddfa      	ble.n	8018216 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018220:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 8018222:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018224:	b289      	uxth	r1, r1
 8018226:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018228:	f7fe f824 	bl	8016274 <pbuf_realloc>
  cseg->next = next;
 801822c:	602c      	str	r4, [r5, #0]
}
 801822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 8018230:	4620      	mov	r0, r4
    next = NULL;
 8018232:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8018234:	f7fe fe60 	bl	8016ef8 <tcp_segs_free>
  cseg->next = next;
 8018238:	602c      	str	r4, [r5, #0]
}
 801823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801823c:	4b04      	ldr	r3, [pc, #16]	; (8018250 <tcp_oos_insert_segment+0x9c>)
 801823e:	f240 421f 	movw	r2, #1055	; 0x41f
 8018242:	4904      	ldr	r1, [pc, #16]	; (8018254 <tcp_oos_insert_segment+0xa0>)
 8018244:	4804      	ldr	r0, [pc, #16]	; (8018258 <tcp_oos_insert_segment+0xa4>)
 8018246:	f008 f9a7 	bl	8020598 <iprintf>
 801824a:	e7b8      	b.n	80181be <tcp_oos_insert_segment+0xa>
 801824c:	20022410 	.word	0x20022410
 8018250:	0803e0f4 	.word	0x0803e0f4
 8018254:	0803e0cc 	.word	0x0803e0cc
 8018258:	08026544 	.word	0x08026544

0801825c <tcp_input_delayed_close>:
{
 801825c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801825e:	4604      	mov	r4, r0
 8018260:	b930      	cbnz	r0, 8018270 <tcp_input_delayed_close+0x14>
 8018262:	4b0f      	ldr	r3, [pc, #60]	; (80182a0 <tcp_input_delayed_close+0x44>)
 8018264:	f240 225a 	movw	r2, #602	; 0x25a
 8018268:	490e      	ldr	r1, [pc, #56]	; (80182a4 <tcp_input_delayed_close+0x48>)
 801826a:	480f      	ldr	r0, [pc, #60]	; (80182a8 <tcp_input_delayed_close+0x4c>)
 801826c:	f008 f994 	bl	8020598 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8018270:	4b0e      	ldr	r3, [pc, #56]	; (80182ac <tcp_input_delayed_close+0x50>)
 8018272:	7818      	ldrb	r0, [r3, #0]
 8018274:	f010 0010 	ands.w	r0, r0, #16
 8018278:	d011      	beq.n	801829e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 801827a:	8b63      	ldrh	r3, [r4, #26]
 801827c:	06db      	lsls	r3, r3, #27
 801827e:	d406      	bmi.n	801828e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018280:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8018284:	b11b      	cbz	r3, 801828e <tcp_input_delayed_close+0x32>
 8018286:	f06f 010e 	mvn.w	r1, #14
 801828a:	6920      	ldr	r0, [r4, #16]
 801828c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801828e:	4621      	mov	r1, r4
 8018290:	4807      	ldr	r0, [pc, #28]	; (80182b0 <tcp_input_delayed_close+0x54>)
 8018292:	f7ff f9ad 	bl	80175f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8018296:	4620      	mov	r0, r4
 8018298:	f7fe fcb8 	bl	8016c0c <tcp_free>
 801829c:	2001      	movs	r0, #1
}
 801829e:	bd10      	pop	{r4, pc}
 80182a0:	0803e0f4 	.word	0x0803e0f4
 80182a4:	0803e0a4 	.word	0x0803e0a4
 80182a8:	08026544 	.word	0x08026544
 80182ac:	2002240c 	.word	0x2002240c
 80182b0:	200362fc 	.word	0x200362fc

080182b4 <tcp_free_acked_segments.isra.1>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 80182b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182b8:	b083      	sub	sp, #12
 80182ba:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 80182bc:	2900      	cmp	r1, #0
 80182be:	d03e      	beq.n	801833e <tcp_free_acked_segments.isra.1+0x8a>
 80182c0:	4606      	mov	r6, r0
 80182c2:	460c      	mov	r4, r1
 80182c4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018378 <tcp_free_acked_segments.isra.1+0xc4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80182c8:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 801836c <tcp_free_acked_segments.isra.1+0xb8>
 80182cc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801837c <tcp_free_acked_segments.isra.1+0xc8>
 80182d0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8018374 <tcp_free_acked_segments.isra.1+0xc0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80182d4:	6923      	ldr	r3, [r4, #16]
 80182d6:	6858      	ldr	r0, [r3, #4]
 80182d8:	f7fc f854 	bl	8014384 <lwip_htonl>
 80182dc:	6923      	ldr	r3, [r4, #16]
 80182de:	4605      	mov	r5, r0
 80182e0:	8927      	ldrh	r7, [r4, #8]
 80182e2:	8998      	ldrh	r0, [r3, #12]
 80182e4:	f7fc f84a 	bl	801437c <lwip_htons>
 80182e8:	f8d8 3000 	ldr.w	r3, [r8]
 80182ec:	f010 0003 	ands.w	r0, r0, #3
 80182f0:	eba5 0503 	sub.w	r5, r5, r3
 80182f4:	bf18      	it	ne
 80182f6:	2001      	movne	r0, #1
 80182f8:	443d      	add	r5, r7
 80182fa:	4428      	add	r0, r5
  while (seg_list != NULL &&
 80182fc:	2800      	cmp	r0, #0
 80182fe:	dc2e      	bgt.n	801835e <tcp_free_acked_segments.isra.1+0xaa>
    seg_list = seg_list->next;
 8018300:	e9d4 5000 	ldrd	r5, r0, [r4]
    clen = pbuf_clen(next->p);
 8018304:	f7fe f812 	bl	801632c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018308:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 801830a:	4607      	mov	r7, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801830c:	4298      	cmp	r0, r3
 801830e:	d81d      	bhi.n	801834c <tcp_free_acked_segments.isra.1+0x98>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018310:	4a15      	ldr	r2, [pc, #84]	; (8018368 <tcp_free_acked_segments.isra.1+0xb4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018312:	1bdf      	subs	r7, r3, r7
    tcp_seg_free(next);
 8018314:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018316:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018318:	8037      	strh	r7, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801831a:	8923      	ldrh	r3, [r4, #8]
  while (seg_list != NULL &&
 801831c:	462c      	mov	r4, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801831e:	440b      	add	r3, r1
 8018320:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8018322:	f7fe fddb 	bl	8016edc <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8018326:	8833      	ldrh	r3, [r6, #0]
 8018328:	b16b      	cbz	r3, 8018346 <tcp_free_acked_segments.isra.1+0x92>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801832a:	b965      	cbnz	r5, 8018346 <tcp_free_acked_segments.isra.1+0x92>
 801832c:	9b01      	ldr	r3, [sp, #4]
 801832e:	b953      	cbnz	r3, 8018346 <tcp_free_acked_segments.isra.1+0x92>
 8018330:	4b0e      	ldr	r3, [pc, #56]	; (801836c <tcp_free_acked_segments.isra.1+0xb8>)
 8018332:	f240 4262 	movw	r2, #1122	; 0x462
 8018336:	490e      	ldr	r1, [pc, #56]	; (8018370 <tcp_free_acked_segments.isra.1+0xbc>)
 8018338:	480e      	ldr	r0, [pc, #56]	; (8018374 <tcp_free_acked_segments.isra.1+0xc0>)
 801833a:	f008 f92d 	bl	8020598 <iprintf>
  while (seg_list != NULL &&
 801833e:	2000      	movs	r0, #0
}
 8018340:	b003      	add	sp, #12
 8018342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (seg_list != NULL &&
 8018346:	2d00      	cmp	r5, #0
 8018348:	d1c4      	bne.n	80182d4 <tcp_free_acked_segments.isra.1+0x20>
 801834a:	e7f8      	b.n	801833e <tcp_free_acked_segments.isra.1+0x8a>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801834c:	465b      	mov	r3, fp
 801834e:	f240 4257 	movw	r2, #1111	; 0x457
 8018352:	4651      	mov	r1, sl
 8018354:	4648      	mov	r0, r9
 8018356:	f008 f91f 	bl	8020598 <iprintf>
 801835a:	8833      	ldrh	r3, [r6, #0]
 801835c:	e7d8      	b.n	8018310 <tcp_free_acked_segments.isra.1+0x5c>
  while (seg_list != NULL &&
 801835e:	4620      	mov	r0, r4
}
 8018360:	b003      	add	sp, #12
 8018362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018366:	bf00      	nop
 8018368:	20022404 	.word	0x20022404
 801836c:	0803e0f4 	.word	0x0803e0f4
 8018370:	0803dea4 	.word	0x0803dea4
 8018374:	08026544 	.word	0x08026544
 8018378:	200223e8 	.word	0x200223e8
 801837c:	0803de7c 	.word	0x0803de7c

08018380 <tcp_receive>:
{
 8018380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018384:	4604      	mov	r4, r0
 8018386:	2800      	cmp	r0, #0
 8018388:	f000 8119 	beq.w	80185be <tcp_receive+0x23e>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801838c:	7d23      	ldrb	r3, [r4, #20]
 801838e:	2b03      	cmp	r3, #3
 8018390:	f240 8085 	bls.w	801849e <tcp_receive+0x11e>
  if (flags & TCP_ACK) {
 8018394:	4bb5      	ldr	r3, [pc, #724]	; (801866c <tcp_receive+0x2ec>)
 8018396:	4db6      	ldr	r5, [pc, #728]	; (8018670 <tcp_receive+0x2f0>)
 8018398:	781a      	ldrb	r2, [r3, #0]
 801839a:	682b      	ldr	r3, [r5, #0]
 801839c:	06d6      	lsls	r6, r2, #27
 801839e:	d46a      	bmi.n	8018476 <tcp_receive+0xf6>
 80183a0:	4eb4      	ldr	r6, [pc, #720]	; (8018674 <tcp_receive+0x2f4>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80183a2:	8832      	ldrh	r2, [r6, #0]
 80183a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80183a6:	2a00      	cmp	r2, #0
 80183a8:	d055      	beq.n	8018456 <tcp_receive+0xd6>
 80183aa:	7d20      	ldrb	r0, [r4, #20]
 80183ac:	2806      	cmp	r0, #6
 80183ae:	d852      	bhi.n	8018456 <tcp_receive+0xd6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80183b0:	1acf      	subs	r7, r1, r3
 80183b2:	2f01      	cmp	r7, #1
 80183b4:	d406      	bmi.n	80183c4 <tcp_receive+0x44>
 80183b6:	1a8a      	subs	r2, r1, r2
 80183b8:	f1c3 0001 	rsb	r0, r3, #1
 80183bc:	4402      	add	r2, r0
 80183be:	2a00      	cmp	r2, #0
 80183c0:	f340 81c5 	ble.w	801874e <tcp_receive+0x3ce>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80183c4:	1a5a      	subs	r2, r3, r1
 80183c6:	2a00      	cmp	r2, #0
 80183c8:	f2c0 8101 	blt.w	80185ce <tcp_receive+0x24e>
 80183cc:	f103 0c01 	add.w	ip, r3, #1
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80183d0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80183d2:	ebac 0201 	sub.w	r2, ip, r1
 80183d6:	1a12      	subs	r2, r2, r0
 80183d8:	2a00      	cmp	r2, #0
 80183da:	f340 80fd 	ble.w	80185d8 <tcp_receive+0x258>
        tcp_send_empty_ack(pcb);
 80183de:	4620      	mov	r0, r4
}
 80183e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 80183e4:	f002 bb1e 	b.w	801aa24 <tcp_send_empty_ack>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80183e8:	ebac 0102 	sub.w	r1, ip, r2
 80183ec:	2900      	cmp	r1, #0
 80183ee:	da4e      	bge.n	801848e <tcp_receive+0x10e>
 80183f0:	49a1      	ldr	r1, [pc, #644]	; (8018678 <tcp_receive+0x2f8>)
 80183f2:	6809      	ldr	r1, [r1, #0]
 80183f4:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80183f6:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80183fa:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80183fe:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 8018400:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018404:	bf38      	it	cc
 8018406:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801840a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801840c:	1a11      	subs	r1, r2, r0
 801840e:	2900      	cmp	r1, #0
 8018410:	dc4d      	bgt.n	80184ae <tcp_receive+0x12e>
      if (tcplen == 0) {
 8018412:	4e98      	ldr	r6, [pc, #608]	; (8018674 <tcp_receive+0x2f4>)
 8018414:	8831      	ldrh	r1, [r6, #0]
 8018416:	2900      	cmp	r1, #0
 8018418:	d15a      	bne.n	80184d0 <tcp_receive+0x150>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801841a:	f8b4 8060 	ldrh.w	r8, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801841e:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018420:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018422:	4441      	add	r1, r8
 8018424:	4561      	cmp	r1, ip
 8018426:	d153      	bne.n	80184d0 <tcp_receive+0x150>
          if (pcb->rtime >= 0) {
 8018428:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801842a:	0bc9      	lsrs	r1, r1, #15
 801842c:	d150      	bne.n	80184d0 <tcp_receive+0x150>
 801842e:	4290      	cmp	r0, r2
 8018430:	d14e      	bne.n	80184d0 <tcp_receive+0x150>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018432:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8018436:	29ff      	cmp	r1, #255	; 0xff
 8018438:	f000 83c2 	beq.w	8018bc0 <tcp_receive+0x840>
                ++pcb->dupacks;
 801843c:	3101      	adds	r1, #1
 801843e:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 8018440:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 8018442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8018446:	f200 83bb 	bhi.w	8018bc0 <tcp_receive+0x840>
              if (pcb->dupacks >= 3) {
 801844a:	f000 83c4 	beq.w	8018bd6 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801844e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018450:	2900      	cmp	r1, #0
 8018452:	d137      	bne.n	80184c4 <tcp_receive+0x144>
 8018454:	6a61      	ldr	r1, [r4, #36]	; 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018456:	1a5a      	subs	r2, r3, r1
 8018458:	2a00      	cmp	r2, #0
 801845a:	db06      	blt.n	801846a <tcp_receive+0xea>
 801845c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801845e:	f1c2 0201 	rsb	r2, r2, #1
 8018462:	4413      	add	r3, r2
 8018464:	1a5b      	subs	r3, r3, r1
 8018466:	2b00      	cmp	r3, #0
 8018468:	dd03      	ble.n	8018472 <tcp_receive+0xf2>
      tcp_ack_now(pcb);
 801846a:	8b63      	ldrh	r3, [r4, #26]
 801846c:	f043 0302 	orr.w	r3, r3, #2
 8018470:	8363      	strh	r3, [r4, #26]
}
 8018472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018476:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018478:	4f80      	ldr	r7, [pc, #512]	; (801867c <tcp_receive+0x2fc>)
 801847a:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801847c:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 8018480:	683a      	ldr	r2, [r7, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018482:	2800      	cmp	r0, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018484:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018488:	dbb2      	blt.n	80183f0 <tcp_receive+0x70>
 801848a:	4299      	cmp	r1, r3
 801848c:	d0ac      	beq.n	80183e8 <tcp_receive+0x68>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801848e:	4594      	cmp	ip, r2
 8018490:	d1bb      	bne.n	801840a <tcp_receive+0x8a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018492:	4979      	ldr	r1, [pc, #484]	; (8018678 <tcp_receive+0x2f8>)
 8018494:	6809      	ldr	r1, [r1, #0]
 8018496:	89c9      	ldrh	r1, [r1, #14]
 8018498:	458e      	cmp	lr, r1
 801849a:	d2b6      	bcs.n	801840a <tcp_receive+0x8a>
 801849c:	e7ab      	b.n	80183f6 <tcp_receive+0x76>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801849e:	4b78      	ldr	r3, [pc, #480]	; (8018680 <tcp_receive+0x300>)
 80184a0:	f240 427c 	movw	r2, #1148	; 0x47c
 80184a4:	4977      	ldr	r1, [pc, #476]	; (8018684 <tcp_receive+0x304>)
 80184a6:	4878      	ldr	r0, [pc, #480]	; (8018688 <tcp_receive+0x308>)
 80184a8:	f008 f876 	bl	8020598 <iprintf>
 80184ac:	e772      	b.n	8018394 <tcp_receive+0x14>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80184ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80184b0:	1ad3      	subs	r3, r2, r3
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	dd10      	ble.n	80184d8 <tcp_receive+0x158>
      tcp_send_empty_ack(pcb);
 80184b6:	4620      	mov	r0, r4
 80184b8:	4e6e      	ldr	r6, [pc, #440]	; (8018674 <tcp_receive+0x2f4>)
 80184ba:	f002 fab3 	bl	801aa24 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80184be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184c0:	b121      	cbz	r1, 80184cc <tcp_receive+0x14c>
 80184c2:	683a      	ldr	r2, [r7, #0]
 80184c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80184c6:	1a9a      	subs	r2, r3, r2
 80184c8:	2a00      	cmp	r2, #0
 80184ca:	db57      	blt.n	801857c <tcp_receive+0x1fc>
 80184cc:	682b      	ldr	r3, [r5, #0]
 80184ce:	e768      	b.n	80183a2 <tcp_receive+0x22>
        pcb->dupacks = 0;
 80184d0:	2300      	movs	r3, #0
 80184d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184d6:	e7f2      	b.n	80184be <tcp_receive+0x13e>
      if (pcb->flags & TF_INFR) {
 80184d8:	8b63      	ldrh	r3, [r4, #26]
 80184da:	0758      	lsls	r0, r3, #29
 80184dc:	d509      	bpl.n	80184f2 <tcp_receive+0x172>
        tcp_clear_flags(pcb, TF_INFR);
 80184de:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 80184e2:	f8b4 604a 	ldrh.w	r6, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 80184e6:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 80184e8:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80184ea:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 80184ee:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80184f2:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 80184f6:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80184f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 80184fa:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 80184fc:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80184fe:	eb03 03e6 	add.w	r3, r3, r6, asr #3
      pcb->nrtx = 0;
 8018502:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8018506:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018508:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 801850c:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8018510:	f200 81c7 	bhi.w	80188a2 <tcp_receive+0x522>
 8018514:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018518:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801851c:	4630      	mov	r0, r6
 801851e:	f7ff fec9 	bl	80182b4 <tcp_free_acked_segments.isra.1>
 8018522:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018524:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8018526:	4630      	mov	r0, r6
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018528:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801852a:	f7ff fec3 	bl	80182b4 <tcp_free_acked_segments.isra.1>
      if (pcb->unacked == NULL) {
 801852e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018530:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8018532:	2a00      	cmp	r2, #0
 8018534:	f000 8299 	beq.w	8018a6a <tcp_receive+0x6ea>
        pcb->rtime = 0;
 8018538:	2300      	movs	r3, #0
 801853a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801853c:	2300      	movs	r3, #0
 801853e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8018540:	2800      	cmp	r0, #0
 8018542:	f000 828f 	beq.w	8018a64 <tcp_receive+0x6e4>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018546:	4951      	ldr	r1, [pc, #324]	; (801868c <tcp_receive+0x30c>)
 8018548:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801854c:	880e      	ldrh	r6, [r1, #0]
      if (pcb->flags & TF_RTO) {
 801854e:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018550:	4433      	add	r3, r6
      if (pcb->flags & TF_RTO) {
 8018552:	050e      	lsls	r6, r1, #20
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018554:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8018558:	d52f      	bpl.n	80185ba <tcp_receive+0x23a>
        if (pcb->unacked == NULL) {
 801855a:	2a00      	cmp	r2, #0
 801855c:	f000 82a1 	beq.w	8018aa2 <tcp_receive+0x722>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018560:	6913      	ldr	r3, [r2, #16]
 8018562:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8018564:	6858      	ldr	r0, [r3, #4]
 8018566:	f7fb ff0d 	bl	8014384 <lwip_htonl>
 801856a:	1a30      	subs	r0, r6, r0
 801856c:	2800      	cmp	r0, #0
 801856e:	dc24      	bgt.n	80185ba <tcp_receive+0x23a>
          tcp_clear_flags(pcb, TF_RTO);
 8018570:	8b63      	ldrh	r3, [r4, #26]
 8018572:	4e40      	ldr	r6, [pc, #256]	; (8018674 <tcp_receive+0x2f4>)
 8018574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018578:	8363      	strh	r3, [r4, #26]
 801857a:	e7a0      	b.n	80184be <tcp_receive+0x13e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801857c:	4b44      	ldr	r3, [pc, #272]	; (8018690 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801857e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	1a59      	subs	r1, r3, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8018586:	eba1 01e2 	sub.w	r1, r1, r2, asr #3
 801858a:	b289      	uxth	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 801858c:	440a      	add	r2, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 801858e:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8018590:	b212      	sxth	r2, r2
      if (m < 0) {
 8018592:	2800      	cmp	r0, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8018594:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 8018596:	da01      	bge.n	801859c <tcp_receive+0x21c>
        m = (s16_t) - m;
 8018598:	4249      	negs	r1, r1
 801859a:	b208      	sxth	r0, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 801859c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 80185a0:	2700      	movs	r7, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 80185a2:	eba3 01a3 	sub.w	r1, r3, r3, asr #2
      pcb->rttest = 0;
 80185a6:	6367      	str	r7, [r4, #52]	; 0x34
 80185a8:	682b      	ldr	r3, [r5, #0]
      pcb->sv = (s16_t)(pcb->sv + m);
 80185aa:	4401      	add	r1, r0
 80185ac:	b289      	uxth	r1, r1
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80185ae:	eb01 02e2 	add.w	r2, r1, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 80185b2:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80185b4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 80185b8:	e6f3      	b.n	80183a2 <tcp_receive+0x22>
 80185ba:	4e2e      	ldr	r6, [pc, #184]	; (8018674 <tcp_receive+0x2f4>)
 80185bc:	e77f      	b.n	80184be <tcp_receive+0x13e>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80185be:	4b30      	ldr	r3, [pc, #192]	; (8018680 <tcp_receive+0x300>)
 80185c0:	f240 427b 	movw	r2, #1147	; 0x47b
 80185c4:	4933      	ldr	r1, [pc, #204]	; (8018694 <tcp_receive+0x314>)
 80185c6:	4830      	ldr	r0, [pc, #192]	; (8018688 <tcp_receive+0x308>)
 80185c8:	f007 ffe6 	bl	8020598 <iprintf>
 80185cc:	e6de      	b.n	801838c <tcp_receive+0xc>
        tcp_ack_now(pcb);
 80185ce:	8b63      	ldrh	r3, [r4, #26]
 80185d0:	f043 0302 	orr.w	r3, r3, #2
 80185d4:	8363      	strh	r3, [r4, #26]
 80185d6:	e702      	b.n	80183de <tcp_receive+0x5e>
      if (pcb->rcv_nxt == seqno) {
 80185d8:	428b      	cmp	r3, r1
 80185da:	f000 8363 	beq.w	8018ca4 <tcp_receive+0x924>
        if (pcb->ooseq == NULL) {
 80185de:	6f67      	ldr	r7, [r4, #116]	; 0x74
 80185e0:	2f00      	cmp	r7, #0
 80185e2:	f000 827f 	beq.w	8018ae4 <tcp_receive+0x764>
            if (seqno == next->tcphdr->seqno) {
 80185e6:	6938      	ldr	r0, [r7, #16]
          struct tcp_seg *next, *prev = NULL;
 80185e8:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80185ec:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 80185f0:	6842      	ldr	r2, [r0, #4]
 80185f2:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80185f4:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 80185f8:	d018      	beq.n	801862c <tcp_receive+0x2ac>
              if (prev == NULL) {
 80185fa:	f1b8 0f00 	cmp.w	r8, #0
 80185fe:	d02a      	beq.n	8018656 <tcp_receive+0x2d6>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018600:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8018604:	6849      	ldr	r1, [r1, #4]
 8018606:	ebae 0101 	sub.w	r1, lr, r1
 801860a:	2900      	cmp	r1, #0
 801860c:	db03      	blt.n	8018616 <tcp_receive+0x296>
 801860e:	f1b9 0f00 	cmp.w	r9, #0
 8018612:	f340 8270 	ble.w	8018af6 <tcp_receive+0x776>
              if (next->next == NULL &&
 8018616:	6839      	ldr	r1, [r7, #0]
 8018618:	46b8      	mov	r8, r7
 801861a:	2900      	cmp	r1, #0
 801861c:	d03e      	beq.n	801869c <tcp_receive+0x31c>
 801861e:	460f      	mov	r7, r1
            if (seqno == next->tcphdr->seqno) {
 8018620:	6938      	ldr	r0, [r7, #16]
 8018622:	6842      	ldr	r2, [r0, #4]
 8018624:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018626:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 801862a:	d1e6      	bne.n	80185fa <tcp_receive+0x27a>
              if (inseg.len > next->len) {
 801862c:	481a      	ldr	r0, [pc, #104]	; (8018698 <tcp_receive+0x318>)
 801862e:	893b      	ldrh	r3, [r7, #8]
 8018630:	8902      	ldrh	r2, [r0, #8]
 8018632:	429a      	cmp	r2, r3
 8018634:	f67f aed3 	bls.w	80183de <tcp_receive+0x5e>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018638:	f7fe fc78 	bl	8016f2c <tcp_seg_copy>
                if (cseg != NULL) {
 801863c:	2800      	cmp	r0, #0
 801863e:	f43f aece 	beq.w	80183de <tcp_receive+0x5e>
                  if (prev != NULL) {
 8018642:	f1b8 0f00 	cmp.w	r8, #0
 8018646:	f000 8315 	beq.w	8018c74 <tcp_receive+0x8f4>
                    prev->next = cseg;
 801864a:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801864e:	4639      	mov	r1, r7
 8018650:	f7ff fdb0 	bl	80181b4 <tcp_oos_insert_segment>
 8018654:	e6c3      	b.n	80183de <tcp_receive+0x5e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018656:	1a99      	subs	r1, r3, r2
 8018658:	2900      	cmp	r1, #0
 801865a:	dadc      	bge.n	8018616 <tcp_receive+0x296>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801865c:	480e      	ldr	r0, [pc, #56]	; (8018698 <tcp_receive+0x318>)
 801865e:	f7fe fc65 	bl	8016f2c <tcp_seg_copy>
                  if (cseg != NULL) {
 8018662:	2800      	cmp	r0, #0
 8018664:	f43f aebb 	beq.w	80183de <tcp_receive+0x5e>
                    pcb->ooseq = cseg;
 8018668:	6760      	str	r0, [r4, #116]	; 0x74
 801866a:	e7f0      	b.n	801864e <tcp_receive+0x2ce>
 801866c:	200223ec 	.word	0x200223ec
 8018670:	20022410 	.word	0x20022410
 8018674:	20022426 	.word	0x20022426
 8018678:	20022418 	.word	0x20022418
 801867c:	200223e8 	.word	0x200223e8
 8018680:	0803e0f4 	.word	0x0803e0f4
 8018684:	0803e160 	.word	0x0803e160
 8018688:	08026544 	.word	0x08026544
 801868c:	20022404 	.word	0x20022404
 8018690:	20036300 	.word	0x20036300
 8018694:	0803e144 	.word	0x0803e144
 8018698:	200223f0 	.word	0x200223f0
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801869c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801869e:	2b00      	cmp	r3, #0
 80186a0:	f77f ae9d 	ble.w	80183de <tcp_receive+0x5e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80186a4:	8980      	ldrh	r0, [r0, #12]
 80186a6:	f7fb fe69 	bl	801437c <lwip_htons>
 80186aa:	07c2      	lsls	r2, r0, #31
 80186ac:	f53f ae97 	bmi.w	80183de <tcp_receive+0x5e>
                next->next = tcp_seg_copy(&inseg);
 80186b0:	48b0      	ldr	r0, [pc, #704]	; (8018974 <tcp_receive+0x5f4>)
 80186b2:	f7fe fc3b 	bl	8016f2c <tcp_seg_copy>
 80186b6:	6038      	str	r0, [r7, #0]
                if (next->next != NULL) {
 80186b8:	2800      	cmp	r0, #0
 80186ba:	f43f ae90 	beq.w	80183de <tcp_receive+0x5e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	893a      	ldrh	r2, [r7, #8]
 80186c2:	6859      	ldr	r1, [r3, #4]
 80186c4:	682b      	ldr	r3, [r5, #0]
 80186c6:	440a      	add	r2, r1
 80186c8:	1ad2      	subs	r2, r2, r3
 80186ca:	2a00      	cmp	r2, #0
 80186cc:	dd05      	ble.n	80186da <tcp_receive+0x35a>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80186ce:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 80186d0:	6878      	ldr	r0, [r7, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80186d2:	b299      	uxth	r1, r3
 80186d4:	8139      	strh	r1, [r7, #8]
                    pbuf_realloc(next->p, next->len);
 80186d6:	f7fd fdcd 	bl	8016274 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80186da:	682a      	ldr	r2, [r5, #0]
 80186dc:	8833      	ldrh	r3, [r6, #0]
 80186de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80186e0:	4413      	add	r3, r2
 80186e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80186e4:	1a5b      	subs	r3, r3, r1
 80186e6:	1a9b      	subs	r3, r3, r2
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	f77f ae78 	ble.w	80183de <tcp_receive+0x5e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	691b      	ldr	r3, [r3, #16]
 80186f2:	8998      	ldrh	r0, [r3, #12]
 80186f4:	f7fb fe42 	bl	801437c <lwip_htons>
 80186f8:	07c3      	lsls	r3, r0, #31
 80186fa:	f100 82bf 	bmi.w	8018c7c <tcp_receive+0x8fc>
 80186fe:	683a      	ldr	r2, [r7, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018700:	6828      	ldr	r0, [r5, #0]
 8018702:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8018704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018706:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8018708:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801870a:	4419      	add	r1, r3
 801870c:	b289      	uxth	r1, r1
 801870e:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018710:	f7fd fdb0 	bl	8016274 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	691a      	ldr	r2, [r3, #16]
 8018718:	891f      	ldrh	r7, [r3, #8]
 801871a:	8990      	ldrh	r0, [r2, #12]
 801871c:	f7fb fe2e 	bl	801437c <lwip_htons>
 8018720:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018724:	6829      	ldr	r1, [r5, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8018726:	bf18      	it	ne
 8018728:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801872a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801872c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 801872e:	443b      	add	r3, r7
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018730:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8018732:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018734:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8018736:	8033      	strh	r3, [r6, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018738:	4291      	cmp	r1, r2
 801873a:	f43f ae50 	beq.w	80183de <tcp_receive+0x5e>
 801873e:	4b8e      	ldr	r3, [pc, #568]	; (8018978 <tcp_receive+0x5f8>)
 8018740:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018744:	498d      	ldr	r1, [pc, #564]	; (801897c <tcp_receive+0x5fc>)
 8018746:	488e      	ldr	r0, [pc, #568]	; (8018980 <tcp_receive+0x600>)
 8018748:	f007 ff26 	bl	8020598 <iprintf>
 801874c:	e647      	b.n	80183de <tcp_receive+0x5e>
      struct pbuf *p = inseg.p;
 801874e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8018974 <tcp_receive+0x5f4>
 8018752:	f8d9 8004 	ldr.w	r8, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018756:	f1b8 0f00 	cmp.w	r8, #0
 801875a:	f000 817b 	beq.w	8018a54 <tcp_receive+0x6d4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801875e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018762:	429f      	cmp	r7, r3
 8018764:	f200 80c5 	bhi.w	80188f2 <tcp_receive+0x572>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018768:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801876c:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801876e:	891a      	ldrh	r2, [r3, #8]
 8018770:	42ba      	cmp	r2, r7
 8018772:	f0c0 80b3 	bcc.w	80188dc <tcp_receive+0x55c>
      inseg.len -= off;
 8018776:	f8b9 1008 	ldrh.w	r1, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801877a:	1bd2      	subs	r2, r2, r7
      while (p->len < off) {
 801877c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
      inseg.len -= off;
 8018780:	1bc9      	subs	r1, r1, r7
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018782:	b292      	uxth	r2, r2
      while (p->len < off) {
 8018784:	429f      	cmp	r7, r3
      inseg.len -= off;
 8018786:	f8a9 1008 	strh.w	r1, [r9, #8]
      while (p->len < off) {
 801878a:	d90c      	bls.n	80187a6 <tcp_receive+0x426>
        p->len = 0;
 801878c:	2100      	movs	r1, #0
        off -= p->len;
 801878e:	1afb      	subs	r3, r7, r3
        p->len = 0;
 8018790:	f8a8 100a 	strh.w	r1, [r8, #10]
        p->tot_len = new_tot_len;
 8018794:	f8a8 2008 	strh.w	r2, [r8, #8]
        p = p->next;
 8018798:	f8d8 8000 	ldr.w	r8, [r8]
        off -= p->len;
 801879c:	b29f      	uxth	r7, r3
      while (p->len < off) {
 801879e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80187a2:	42bb      	cmp	r3, r7
 80187a4:	d3f3      	bcc.n	801878e <tcp_receive+0x40e>
      pbuf_remove_header(p, off);
 80187a6:	4639      	mov	r1, r7
 80187a8:	4640      	mov	r0, r8
 80187aa:	f7fd fc1b 	bl	8015fe4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80187ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187b0:	f8d9 1010 	ldr.w	r1, [r9, #16]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80187b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80187b6:	602b      	str	r3, [r5, #0]
 80187b8:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80187ba:	2a00      	cmp	r2, #0
 80187bc:	f43f ae0f 	beq.w	80183de <tcp_receive+0x5e>
        tcplen = TCP_TCPLEN(&inseg);
 80187c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187c4:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 80187c8:	8998      	ldrh	r0, [r3, #12]
 80187ca:	f7fb fdd7 	bl	801437c <lwip_htons>
 80187ce:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 80187d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80187d4:	bf18      	it	ne
 80187d6:	2301      	movne	r3, #1
 80187d8:	443b      	add	r3, r7
 80187da:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 80187dc:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 80187de:	8033      	strh	r3, [r6, #0]
        if (tcplen > pcb->rcv_wnd) {
 80187e0:	f0c0 81a9 	bcc.w	8018b36 <tcp_receive+0x7b6>
        if (pcb->ooseq != NULL) {
 80187e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	f000 8092 	beq.w	8018910 <tcp_receive+0x590>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80187ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187f0:	8998      	ldrh	r0, [r3, #12]
 80187f2:	f7fb fdc3 	bl	801437c <lwip_htons>
 80187f6:	07c0      	lsls	r0, r0, #31
 80187f8:	f100 8087 	bmi.w	801890a <tcp_receive+0x58a>
 80187fc:	8833      	ldrh	r3, [r6, #0]
 80187fe:	f8d5 c000 	ldr.w	ip, [r5]
            struct tcp_seg *next = pcb->ooseq;
 8018802:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
 8018806:	eb03 020c 	add.w	r2, r3, ip
            while (next &&
 801880a:	f1b8 0f00 	cmp.w	r8, #0
 801880e:	f000 8233 	beq.w	8018c78 <tcp_receive+0x8f8>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018812:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018816:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 801881a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 801881e:	eba2 0e0a 	sub.w	lr, r2, sl
 8018822:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018826:	2900      	cmp	r1, #0
 8018828:	da19      	bge.n	801885e <tcp_receive+0x4de>
 801882a:	e1d8      	b.n	8018bde <tcp_receive+0x85e>
              next = next->next;
 801882c:	f8d8 7000 	ldr.w	r7, [r8]
              tcp_seg_free(tmp);
 8018830:	4640      	mov	r0, r8
 8018832:	f7fe fb53 	bl	8016edc <tcp_seg_free>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018836:	8833      	ldrh	r3, [r6, #0]
 8018838:	46b8      	mov	r8, r7
            while (next &&
 801883a:	2f00      	cmp	r7, #0
 801883c:	f000 8207 	beq.w	8018c4e <tcp_receive+0x8ce>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018840:	f8d5 c000 	ldr.w	ip, [r5]
 8018844:	6938      	ldr	r0, [r7, #16]
 8018846:	eb03 020c 	add.w	r2, r3, ip
 801884a:	8939      	ldrh	r1, [r7, #8]
 801884c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8018850:	eba2 0e0a 	sub.w	lr, r2, sl
 8018854:	ebae 0101 	sub.w	r1, lr, r1
            while (next &&
 8018858:	2900      	cmp	r1, #0
 801885a:	f2c0 81c1 	blt.w	8018be0 <tcp_receive+0x860>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801885e:	8980      	ldrh	r0, [r0, #12]
 8018860:	f7fb fd8c 	bl	801437c <lwip_htons>
 8018864:	07c1      	lsls	r1, r0, #31
 8018866:	d5e1      	bpl.n	801882c <tcp_receive+0x4ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018868:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801886c:	8998      	ldrh	r0, [r3, #12]
 801886e:	f7fb fd85 	bl	801437c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018872:	0782      	lsls	r2, r0, #30
 8018874:	d4da      	bmi.n	801882c <tcp_receive+0x4ac>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801887a:	2001      	movs	r0, #1
 801887c:	899f      	ldrh	r7, [r3, #12]
 801887e:	f7fb fd7d 	bl	801437c <lwip_htons>
 8018882:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018886:	4338      	orrs	r0, r7
                tcplen = TCP_TCPLEN(&inseg);
 8018888:	f8b9 7008 	ldrh.w	r7, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801888c:	b280      	uxth	r0, r0
 801888e:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018890:	f7fb fd74 	bl	801437c <lwip_htons>
 8018894:	f010 0003 	ands.w	r0, r0, #3
 8018898:	bf18      	it	ne
 801889a:	2001      	movne	r0, #1
 801889c:	4407      	add	r7, r0
 801889e:	8037      	strh	r7, [r6, #0]
 80188a0:	e7c4      	b.n	801882c <tcp_receive+0x4ac>
        if (pcb->cwnd < pcb->ssthresh) {
 80188a2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80188a6:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 80188a8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80188ac:	4293      	cmp	r3, r2
 80188ae:	f240 80e0 	bls.w	8018a72 <tcp_receive+0x6f2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80188b2:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80188b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80188b6:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80188ba:	bf0c      	ite	eq
 80188bc:	2002      	moveq	r0, #2
 80188be:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80188c0:	fb13 f300 	smulbb	r3, r3, r0
 80188c4:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 80188c6:	428b      	cmp	r3, r1
 80188c8:	bf94      	ite	ls
 80188ca:	18d1      	addls	r1, r2, r3
 80188cc:	1851      	addhi	r1, r2, r1
 80188ce:	b289      	uxth	r1, r1
 80188d0:	428a      	cmp	r2, r1
 80188d2:	f200 80f6 	bhi.w	8018ac2 <tcp_receive+0x742>
 80188d6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 80188da:	e61b      	b.n	8018514 <tcp_receive+0x194>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80188dc:	4b26      	ldr	r3, [pc, #152]	; (8018978 <tcp_receive+0x5f8>)
 80188de:	f240 5297 	movw	r2, #1431	; 0x597
 80188e2:	4928      	ldr	r1, [pc, #160]	; (8018984 <tcp_receive+0x604>)
 80188e4:	4826      	ldr	r0, [pc, #152]	; (8018980 <tcp_receive+0x600>)
 80188e6:	f007 fe57 	bl	8020598 <iprintf>
 80188ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80188ee:	891a      	ldrh	r2, [r3, #8]
 80188f0:	e741      	b.n	8018776 <tcp_receive+0x3f6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80188f2:	4b21      	ldr	r3, [pc, #132]	; (8018978 <tcp_receive+0x5f8>)
 80188f4:	f240 5295 	movw	r2, #1429	; 0x595
 80188f8:	4923      	ldr	r1, [pc, #140]	; (8018988 <tcp_receive+0x608>)
 80188fa:	4821      	ldr	r0, [pc, #132]	; (8018980 <tcp_receive+0x600>)
 80188fc:	f007 fe4c 	bl	8020598 <iprintf>
 8018900:	e732      	b.n	8018768 <tcp_receive+0x3e8>
              pcb->ooseq = pcb->ooseq->next;
 8018902:	6803      	ldr	r3, [r0, #0]
 8018904:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018906:	f7fe fae9 	bl	8016edc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801890a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801890c:	2800      	cmp	r0, #0
 801890e:	d1f8      	bne.n	8018902 <tcp_receive+0x582>
 8018910:	8833      	ldrh	r3, [r6, #0]
 8018912:	682a      	ldr	r2, [r5, #0]
 8018914:	441a      	add	r2, r3
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018916:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8018918:	6262      	str	r2, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801891a:	4299      	cmp	r1, r3
 801891c:	f0c0 8146 	bcc.w	8018bac <tcp_receive+0x82c>
        pcb->rcv_wnd -= tcplen;
 8018920:	1acb      	subs	r3, r1, r3
        tcp_update_rcv_ann_wnd(pcb);
 8018922:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8018924:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8018926:	f7fe fa61 	bl	8016dec <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801892a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801892e:	891a      	ldrh	r2, [r3, #8]
 8018930:	b122      	cbz	r2, 801893c <tcp_receive+0x5bc>
          recv_data = inseg.p;
 8018932:	4916      	ldr	r1, [pc, #88]	; (801898c <tcp_receive+0x60c>)
          inseg.p = NULL;
 8018934:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8018936:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8018938:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801893c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018940:	8998      	ldrh	r0, [r3, #12]
 8018942:	f7fb fd1b 	bl	801437c <lwip_htons>
 8018946:	07c6      	lsls	r6, r0, #31
 8018948:	d504      	bpl.n	8018954 <tcp_receive+0x5d4>
          recv_flags |= TF_GOT_FIN;
 801894a:	4a11      	ldr	r2, [pc, #68]	; (8018990 <tcp_receive+0x610>)
 801894c:	7813      	ldrb	r3, [r2, #0]
 801894e:	f043 0320 	orr.w	r3, r3, #32
 8018952:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8018954:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8018956:	2e00      	cmp	r6, #0
 8018958:	f000 80b8 	beq.w	8018acc <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801895c:	6933      	ldr	r3, [r6, #16]
 801895e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018960:	6859      	ldr	r1, [r3, #4]
        while (pcb->ooseq != NULL &&
 8018962:	428a      	cmp	r2, r1
 8018964:	f040 80b2 	bne.w	8018acc <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018968:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8018978 <tcp_receive+0x5f8>
 801896c:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8018994 <tcp_receive+0x614>
 8018970:	4f03      	ldr	r7, [pc, #12]	; (8018980 <tcp_receive+0x600>)
 8018972:	e04a      	b.n	8018a0a <tcp_receive+0x68a>
 8018974:	200223f0 	.word	0x200223f0
 8018978:	0803e0f4 	.word	0x0803e0f4
 801897c:	0803e1ac 	.word	0x0803e1ac
 8018980:	08026544 	.word	0x08026544
 8018984:	0803e19c 	.word	0x0803e19c
 8018988:	0803e18c 	.word	0x0803e18c
 801898c:	20022408 	.word	0x20022408
 8018990:	2002240c 	.word	0x2002240c
 8018994:	0803e240 	.word	0x0803e240
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018998:	6933      	ldr	r3, [r6, #16]
 801899a:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 801899e:	8998      	ldrh	r0, [r3, #12]
 80189a0:	f7fb fcec 	bl	801437c <lwip_htons>
 80189a4:	f010 0303 	ands.w	r3, r0, #3
 80189a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80189aa:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80189ac:	bf18      	it	ne
 80189ae:	2301      	movne	r3, #1
 80189b0:	4453      	add	r3, sl
 80189b2:	1ad3      	subs	r3, r2, r3
 80189b4:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80189b6:	f7fe fa19 	bl	8016dec <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80189ba:	6871      	ldr	r1, [r6, #4]
 80189bc:	890b      	ldrh	r3, [r1, #8]
 80189be:	b13b      	cbz	r3, 80189d0 <tcp_receive+0x650>
            if (recv_data) {
 80189c0:	4bba      	ldr	r3, [pc, #744]	; (8018cac <tcp_receive+0x92c>)
 80189c2:	6818      	ldr	r0, [r3, #0]
 80189c4:	2800      	cmp	r0, #0
 80189c6:	d06a      	beq.n	8018a9e <tcp_receive+0x71e>
              pbuf_cat(recv_data, cseg->p);
 80189c8:	f7fd fcd0 	bl	801636c <pbuf_cat>
            cseg->p = NULL;
 80189cc:	2300      	movs	r3, #0
 80189ce:	6073      	str	r3, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80189d0:	6933      	ldr	r3, [r6, #16]
 80189d2:	8998      	ldrh	r0, [r3, #12]
 80189d4:	f7fb fcd2 	bl	801437c <lwip_htons>
 80189d8:	07c0      	lsls	r0, r0, #31
 80189da:	d509      	bpl.n	80189f0 <tcp_receive+0x670>
            recv_flags |= TF_GOT_FIN;
 80189dc:	4ab4      	ldr	r2, [pc, #720]	; (8018cb0 <tcp_receive+0x930>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80189de:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 80189e0:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80189e2:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 80189e4:	f043 0320 	orr.w	r3, r3, #32
 80189e8:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80189ea:	d101      	bne.n	80189f0 <tcp_receive+0x670>
              pcb->state = CLOSE_WAIT;
 80189ec:	2307      	movs	r3, #7
 80189ee:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80189f0:	6833      	ldr	r3, [r6, #0]
          tcp_seg_free(cseg);
 80189f2:	4630      	mov	r0, r6
          pcb->ooseq = cseg->next;
 80189f4:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 80189f6:	f7fe fa71 	bl	8016edc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80189fa:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80189fc:	2e00      	cmp	r6, #0
 80189fe:	d065      	beq.n	8018acc <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018a00:	6933      	ldr	r3, [r6, #16]
        while (pcb->ooseq != NULL &&
 8018a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018a04:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
 8018a06:	428a      	cmp	r2, r1
 8018a08:	d160      	bne.n	8018acc <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 8018a0a:	602a      	str	r2, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018a0c:	8998      	ldrh	r0, [r3, #12]
 8018a0e:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8018a12:	f7fb fcb3 	bl	801437c <lwip_htons>
 8018a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a18:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018a1c:	6932      	ldr	r2, [r6, #16]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018a1e:	bf18      	it	ne
 8018a20:	2001      	movne	r0, #1
 8018a22:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018a24:	f8b4 b028 	ldrh.w	fp, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018a28:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018a2a:	f8b6 a008 	ldrh.w	sl, [r6, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018a2e:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018a30:	8990      	ldrh	r0, [r2, #12]
 8018a32:	f7fb fca3 	bl	801437c <lwip_htons>
 8018a36:	f010 0003 	ands.w	r0, r0, #3
 8018a3a:	bf18      	it	ne
 8018a3c:	2001      	movne	r0, #1
 8018a3e:	4450      	add	r0, sl
 8018a40:	4583      	cmp	fp, r0
 8018a42:	d2a9      	bcs.n	8018998 <tcp_receive+0x618>
 8018a44:	464b      	mov	r3, r9
 8018a46:	f240 622c 	movw	r2, #1580	; 0x62c
 8018a4a:	4641      	mov	r1, r8
 8018a4c:	4638      	mov	r0, r7
 8018a4e:	f007 fda3 	bl	8020598 <iprintf>
 8018a52:	e7a1      	b.n	8018998 <tcp_receive+0x618>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018a54:	4b97      	ldr	r3, [pc, #604]	; (8018cb4 <tcp_receive+0x934>)
 8018a56:	f240 5294 	movw	r2, #1428	; 0x594
 8018a5a:	4997      	ldr	r1, [pc, #604]	; (8018cb8 <tcp_receive+0x938>)
 8018a5c:	4897      	ldr	r0, [pc, #604]	; (8018cbc <tcp_receive+0x93c>)
 8018a5e:	f007 fd9b 	bl	8020598 <iprintf>
 8018a62:	e67c      	b.n	801875e <tcp_receive+0x3de>
        pcb->unsent_oversize = 0;
 8018a64:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8018a68:	e56d      	b.n	8018546 <tcp_receive+0x1c6>
        pcb->rtime = -1;
 8018a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a6e:	8623      	strh	r3, [r4, #48]	; 0x30
 8018a70:	e564      	b.n	801853c <tcp_receive+0x1bc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018a72:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8018a76:	4419      	add	r1, r3
 8018a78:	b289      	uxth	r1, r1
 8018a7a:	428b      	cmp	r3, r1
 8018a7c:	d82f      	bhi.n	8018ade <tcp_receive+0x75e>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018a7e:	428a      	cmp	r2, r1
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018a80:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018a84:	f63f ad46 	bhi.w	8018514 <tcp_receive+0x194>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018a88:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018a8a:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018a8c:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018a8e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d814      	bhi.n	8018ac2 <tcp_receive+0x742>
 8018a98:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8018a9c:	e53a      	b.n	8018514 <tcp_receive+0x194>
              recv_data = cseg->p;
 8018a9e:	6019      	str	r1, [r3, #0]
 8018aa0:	e794      	b.n	80189cc <tcp_receive+0x64c>
          if ((pcb->unsent == NULL) ||
 8018aa2:	b148      	cbz	r0, 8018ab8 <tcp_receive+0x738>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018aa4:	6903      	ldr	r3, [r0, #16]
 8018aa6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8018aa8:	6858      	ldr	r0, [r3, #4]
 8018aaa:	f7fb fc6b 	bl	8014384 <lwip_htonl>
 8018aae:	1a30      	subs	r0, r6, r0
          if ((pcb->unsent == NULL) ||
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	f73f ad82 	bgt.w	80185ba <tcp_receive+0x23a>
 8018ab6:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 8018ab8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8018abc:	4e80      	ldr	r6, [pc, #512]	; (8018cc0 <tcp_receive+0x940>)
 8018abe:	8361      	strh	r1, [r4, #26]
 8018ac0:	e4fd      	b.n	80184be <tcp_receive+0x13e>
          TCP_WND_INC(pcb->cwnd, increase);
 8018ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ac6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8018aca:	e523      	b.n	8018514 <tcp_receive+0x194>
        tcp_ack(pcb);
 8018acc:	8b63      	ldrh	r3, [r4, #26]
 8018ace:	07d9      	lsls	r1, r3, #31
 8018ad0:	d50d      	bpl.n	8018aee <tcp_receive+0x76e>
 8018ad2:	f023 0301 	bic.w	r3, r3, #1
 8018ad6:	f043 0302 	orr.w	r3, r3, #2
 8018ada:	8363      	strh	r3, [r4, #26]
 8018adc:	e4c9      	b.n	8018472 <tcp_receive+0xf2>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018ae2:	e7d1      	b.n	8018a88 <tcp_receive+0x708>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018ae4:	4877      	ldr	r0, [pc, #476]	; (8018cc4 <tcp_receive+0x944>)
 8018ae6:	f7fe fa21 	bl	8016f2c <tcp_seg_copy>
 8018aea:	6760      	str	r0, [r4, #116]	; 0x74
 8018aec:	e477      	b.n	80183de <tcp_receive+0x5e>
        tcp_ack(pcb);
 8018aee:	f043 0301 	orr.w	r3, r3, #1
 8018af2:	8363      	strh	r3, [r4, #26]
 8018af4:	e4bd      	b.n	8018472 <tcp_receive+0xf2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018af6:	4873      	ldr	r0, [pc, #460]	; (8018cc4 <tcp_receive+0x944>)
 8018af8:	f7fe fa18 	bl	8016f2c <tcp_seg_copy>
                  if (cseg != NULL) {
 8018afc:	4606      	mov	r6, r0
 8018afe:	2800      	cmp	r0, #0
 8018b00:	f43f ac6d 	beq.w	80183de <tcp_receive+0x5e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018b04:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018b08:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8018b0c:	6851      	ldr	r1, [r2, #4]
 8018b0e:	682a      	ldr	r2, [r5, #0]
 8018b10:	440b      	add	r3, r1
 8018b12:	1a9b      	subs	r3, r3, r2
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	dd07      	ble.n	8018b28 <tcp_receive+0x7a8>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018b18:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8018b1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018b1e:	b291      	uxth	r1, r2
 8018b20:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018b24:	f7fd fba6 	bl	8016274 <pbuf_realloc>
                    prev->next = cseg;
 8018b28:	f8c8 6000 	str.w	r6, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8018b2c:	4639      	mov	r1, r7
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f7ff fb40 	bl	80181b4 <tcp_oos_insert_segment>
 8018b34:	e453      	b.n	80183de <tcp_receive+0x5e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b3a:	8998      	ldrh	r0, [r3, #12]
 8018b3c:	f7fb fc1e 	bl	801437c <lwip_htons>
 8018b40:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018b42:	f8d9 3010 	ldr.w	r3, [r9, #16]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b46:	f100 8085 	bmi.w	8018c54 <tcp_receive+0x8d4>
 8018b4a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018b4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8018b4e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018b52:	f7fb fc13 	bl	801437c <lwip_htons>
 8018b56:	0787      	lsls	r7, r0, #30
            inseg.len -= 1;
 8018b58:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018b5c:	d503      	bpl.n	8018b66 <tcp_receive+0x7e6>
            inseg.len -= 1;
 8018b5e:	3901      	subs	r1, #1
 8018b60:	b289      	uxth	r1, r1
 8018b62:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8018b66:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8018b6a:	f7fd fb83 	bl	8016274 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018b6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b72:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8018b76:	8998      	ldrh	r0, [r3, #12]
 8018b78:	f7fb fc00 	bl	801437c <lwip_htons>
 8018b7c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b80:	682a      	ldr	r2, [r5, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8018b82:	bf18      	it	ne
 8018b84:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b86:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 8018b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8018b8c:	443b      	add	r3, r7
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b8e:	4461      	add	r1, ip
          tcplen = TCP_TCPLEN(&inseg);
 8018b90:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b92:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8018b94:	8033      	strh	r3, [r6, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b96:	428a      	cmp	r2, r1
 8018b98:	f43f ae24 	beq.w	80187e4 <tcp_receive+0x464>
 8018b9c:	4b45      	ldr	r3, [pc, #276]	; (8018cb4 <tcp_receive+0x934>)
 8018b9e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8018ba2:	4949      	ldr	r1, [pc, #292]	; (8018cc8 <tcp_receive+0x948>)
 8018ba4:	4845      	ldr	r0, [pc, #276]	; (8018cbc <tcp_receive+0x93c>)
 8018ba6:	f007 fcf7 	bl	8020598 <iprintf>
 8018baa:	e61b      	b.n	80187e4 <tcp_receive+0x464>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018bac:	4b41      	ldr	r3, [pc, #260]	; (8018cb4 <tcp_receive+0x934>)
 8018bae:	f240 6207 	movw	r2, #1543	; 0x607
 8018bb2:	4946      	ldr	r1, [pc, #280]	; (8018ccc <tcp_receive+0x94c>)
 8018bb4:	4841      	ldr	r0, [pc, #260]	; (8018cbc <tcp_receive+0x93c>)
 8018bb6:	f007 fcef 	bl	8020598 <iprintf>
 8018bba:	8833      	ldrh	r3, [r6, #0]
 8018bbc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8018bbe:	e6af      	b.n	8018920 <tcp_receive+0x5a0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018bc0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018bc4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018bc6:	4413      	add	r3, r2
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	429a      	cmp	r2, r3
 8018bcc:	d901      	bls.n	8018bd2 <tcp_receive+0x852>
 8018bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018bd2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	f001 fea2 	bl	801a920 <tcp_rexmit_fast>
 8018bdc:	e46f      	b.n	80184be <tcp_receive+0x13e>
            while (next &&
 8018bde:	4647      	mov	r7, r8
            if (next &&
 8018be0:	f1be 0f00 	cmp.w	lr, #0
 8018be4:	dc01      	bgt.n	8018bea <tcp_receive+0x86a>
            pcb->ooseq = next;
 8018be6:	6767      	str	r7, [r4, #116]	; 0x74
 8018be8:	e695      	b.n	8018916 <tcp_receive+0x596>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018bee:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018bf2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018bf6:	8998      	ldrh	r0, [r3, #12]
 8018bf8:	f7fb fbc0 	bl	801437c <lwip_htons>
 8018bfc:	0783      	lsls	r3, r0, #30
 8018bfe:	d504      	bpl.n	8018c0a <tcp_receive+0x88a>
                inseg.len -= 1;
 8018c00:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8018c04:	3b01      	subs	r3, #1
 8018c06:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8018c0a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8018c0e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8018c12:	f7fd fb2f 	bl	8016274 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018c16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c1a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8018c1e:	8998      	ldrh	r0, [r3, #12]
 8018c20:	f7fb fbac 	bl	801437c <lwip_htons>
 8018c24:	f010 0303 	ands.w	r3, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018c28:	682a      	ldr	r2, [r5, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8018c2a:	bf18      	it	ne
 8018c2c:	2301      	movne	r3, #1
 8018c2e:	4443      	add	r3, r8
 8018c30:	b29b      	uxth	r3, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018c32:	1899      	adds	r1, r3, r2
 8018c34:	693a      	ldr	r2, [r7, #16]
              tcplen = TCP_TCPLEN(&inseg);
 8018c36:	8033      	strh	r3, [r6, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018c38:	6852      	ldr	r2, [r2, #4]
 8018c3a:	4291      	cmp	r1, r2
 8018c3c:	d0d3      	beq.n	8018be6 <tcp_receive+0x866>
 8018c3e:	4b1d      	ldr	r3, [pc, #116]	; (8018cb4 <tcp_receive+0x934>)
 8018c40:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8018c44:	4922      	ldr	r1, [pc, #136]	; (8018cd0 <tcp_receive+0x950>)
 8018c46:	481d      	ldr	r0, [pc, #116]	; (8018cbc <tcp_receive+0x93c>)
 8018c48:	f007 fca6 	bl	8020598 <iprintf>
 8018c4c:	8833      	ldrh	r3, [r6, #0]
 8018c4e:	682a      	ldr	r2, [r5, #0]
 8018c50:	441a      	add	r2, r3
 8018c52:	e7c8      	b.n	8018be6 <tcp_receive+0x866>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018c54:	899f      	ldrh	r7, [r3, #12]
 8018c56:	4638      	mov	r0, r7
 8018c58:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8018c5c:	f7fb fb8e 	bl	801437c <lwip_htons>
 8018c60:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8018c64:	f7fb fb8a 	bl	801437c <lwip_htons>
 8018c68:	4338      	orrs	r0, r7
 8018c6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c6e:	b280      	uxth	r0, r0
 8018c70:	8198      	strh	r0, [r3, #12]
 8018c72:	e76b      	b.n	8018b4c <tcp_receive+0x7cc>
                    pcb->ooseq = cseg;
 8018c74:	6760      	str	r0, [r4, #116]	; 0x74
 8018c76:	e4ea      	b.n	801864e <tcp_receive+0x2ce>
            while (next &&
 8018c78:	4647      	mov	r7, r8
 8018c7a:	e7b4      	b.n	8018be6 <tcp_receive+0x866>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	691b      	ldr	r3, [r3, #16]
 8018c80:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8018c84:	4640      	mov	r0, r8
 8018c86:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8018c8a:	f7fb fb77 	bl	801437c <lwip_htons>
 8018c8e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8018c92:	f7fb fb73 	bl	801437c <lwip_htons>
 8018c96:	683a      	ldr	r2, [r7, #0]
 8018c98:	ea48 0800 	orr.w	r8, r8, r0
 8018c9c:	6913      	ldr	r3, [r2, #16]
 8018c9e:	f8a3 800c 	strh.w	r8, [r3, #12]
 8018ca2:	e52d      	b.n	8018700 <tcp_receive+0x380>
 8018ca4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8018cc4 <tcp_receive+0x944>
 8018ca8:	e58a      	b.n	80187c0 <tcp_receive+0x440>
 8018caa:	bf00      	nop
 8018cac:	20022408 	.word	0x20022408
 8018cb0:	2002240c 	.word	0x2002240c
 8018cb4:	0803e0f4 	.word	0x0803e0f4
 8018cb8:	0803e17c 	.word	0x0803e17c
 8018cbc:	08026544 	.word	0x08026544
 8018cc0:	20022426 	.word	0x20022426
 8018cc4:	200223f0 	.word	0x200223f0
 8018cc8:	0803e1ac 	.word	0x0803e1ac
 8018ccc:	0803e220 	.word	0x0803e220
 8018cd0:	0803e1e4 	.word	0x0803e1e4

08018cd4 <tcp_input>:
{
 8018cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018cd8:	4605      	mov	r5, r0
{
 8018cda:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	d040      	beq.n	8018d62 <tcp_input+0x8e>
  TCP_STATS_INC(tcp.recv);
 8018ce0:	4cbf      	ldr	r4, [pc, #764]	; (8018fe0 <tcp_input+0x30c>)
  if (p->len < TCP_HLEN) {
 8018ce2:	896a      	ldrh	r2, [r5, #10]
  TCP_STATS_INC(tcp.recv);
 8018ce4:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 8018ce8:	6869      	ldr	r1, [r5, #4]
  if (p->len < TCP_HLEN) {
 8018cea:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 8018cec:	4ebd      	ldr	r6, [pc, #756]	; (8018fe4 <tcp_input+0x310>)
  TCP_STATS_INC(tcp.recv);
 8018cee:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 8018cf2:	6031      	str	r1, [r6, #0]
  TCP_STATS_INC(tcp.recv);
 8018cf4:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 8018cf8:	d80f      	bhi.n	8018d1a <tcp_input+0x46>
      TCP_STATS_INC(tcp.lenerr);
 8018cfa:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8018cfe:	3301      	adds	r3, #1
 8018d00:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 8018d04:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
  pbuf_free(p);
 8018d08:	4628      	mov	r0, r5
  TCP_STATS_INC(tcp.drop);
 8018d0a:	3301      	adds	r3, #1
 8018d0c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
}
 8018d10:	b007      	add	sp, #28
 8018d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8018d16:	f7fd b9a1 	b.w	801605c <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d1a:	4fb3      	ldr	r7, [pc, #716]	; (8018fe8 <tcp_input+0x314>)
 8018d1c:	6839      	ldr	r1, [r7, #0]
 8018d1e:	6978      	ldr	r0, [r7, #20]
 8018d20:	f005 f9e0 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 8018d24:	b9b8      	cbnz	r0, 8018d56 <tcp_input+0x82>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018d2c:	2be0      	cmp	r3, #224	; 0xe0
 8018d2e:	d012      	beq.n	8018d56 <tcp_input+0x82>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8018d30:	f107 0014 	add.w	r0, r7, #20
 8018d34:	f107 0910 	add.w	r9, r7, #16
 8018d38:	892a      	ldrh	r2, [r5, #8]
 8018d3a:	2106      	movs	r1, #6
 8018d3c:	9000      	str	r0, [sp, #0]
 8018d3e:	464b      	mov	r3, r9
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7fc f8d7 	bl	8014ef4 <ip_chksum_pseudo>
    if (chksum != 0) {
 8018d46:	4680      	mov	r8, r0
 8018d48:	b190      	cbz	r0, 8018d70 <tcp_input+0x9c>
      TCP_STATS_INC(tcp.chkerr);
 8018d4a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8018d4e:	3301      	adds	r3, #1
 8018d50:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
      goto dropped;
 8018d54:	e7d6      	b.n	8018d04 <tcp_input+0x30>
    TCP_STATS_INC(tcp.proterr);
 8018d56:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    goto dropped;
 8018d60:	e7d0      	b.n	8018d04 <tcp_input+0x30>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018d62:	4ba2      	ldr	r3, [pc, #648]	; (8018fec <tcp_input+0x318>)
 8018d64:	2283      	movs	r2, #131	; 0x83
 8018d66:	49a2      	ldr	r1, [pc, #648]	; (8018ff0 <tcp_input+0x31c>)
 8018d68:	48a2      	ldr	r0, [pc, #648]	; (8018ff4 <tcp_input+0x320>)
 8018d6a:	f007 fc15 	bl	8020598 <iprintf>
 8018d6e:	e7b7      	b.n	8018ce0 <tcp_input+0xc>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018d70:	6833      	ldr	r3, [r6, #0]
 8018d72:	8998      	ldrh	r0, [r3, #12]
 8018d74:	f7fb fb02 	bl	801437c <lwip_htons>
 8018d78:	0a81      	lsrs	r1, r0, #10
 8018d7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018d7e:	2913      	cmp	r1, #19
 8018d80:	d9bb      	bls.n	8018cfa <tcp_input+0x26>
 8018d82:	b28b      	uxth	r3, r1
 8018d84:	892a      	ldrh	r2, [r5, #8]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d3b7      	bcc.n	8018cfa <tcp_input+0x26>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018d8a:	f1a3 0214 	sub.w	r2, r3, #20
  if (p->len >= hdrlen_bytes) {
 8018d8e:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018d90:	f8df a294 	ldr.w	sl, [pc, #660]	; 8019028 <tcp_input+0x354>
  tcphdr_opt2 = NULL;
 8018d94:	f8df b294 	ldr.w	fp, [pc, #660]	; 801902c <tcp_input+0x358>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018d98:	b292      	uxth	r2, r2
  if (p->len >= hdrlen_bytes) {
 8018d9a:	4298      	cmp	r0, r3
  tcphdr_opt2 = NULL;
 8018d9c:	f8cb 8000 	str.w	r8, [fp]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018da0:	f8aa 2000 	strh.w	r2, [sl]
  if (p->len >= hdrlen_bytes) {
 8018da4:	f080 81ab 	bcs.w	80190fe <tcp_input+0x42a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018da8:	682b      	ldr	r3, [r5, #0]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f000 8288 	beq.w	80192c0 <tcp_input+0x5ec>
    pbuf_remove_header(p, TCP_HLEN);
 8018db0:	2114      	movs	r1, #20
 8018db2:	4628      	mov	r0, r5
 8018db4:	f7fd f916 	bl	8015fe4 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8018db8:	896b      	ldrh	r3, [r5, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018dba:	f8ba 8000 	ldrh.w	r8, [sl]
    pbuf_remove_header(p, tcphdr_opt1len);
 8018dbe:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8018dc0:	4a8d      	ldr	r2, [pc, #564]	; (8018ff8 <tcp_input+0x324>)
    pbuf_remove_header(p, tcphdr_opt1len);
 8018dc2:	4619      	mov	r1, r3
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018dc4:	eba8 0803 	sub.w	r8, r8, r3
    tcphdr_opt1len = p->len;
 8018dc8:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 8018dca:	f7fd f90b 	bl	8015fe4 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8018dce:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018dd0:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
 8018dd4:	8943      	ldrh	r3, [r0, #10]
 8018dd6:	4543      	cmp	r3, r8
 8018dd8:	d38f      	bcc.n	8018cfa <tcp_input+0x26>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018dda:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 8018ddc:	4641      	mov	r1, r8
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018dde:	f8cb 3000 	str.w	r3, [fp]
    pbuf_remove_header(p->next, opt2len);
 8018de2:	f7fd f8ff 	bl	8015fe4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018de6:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018de8:	896a      	ldrh	r2, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018dea:	eba3 0308 	sub.w	r3, r3, r8
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	812b      	strh	r3, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018df2:	b132      	cbz	r2, 8018e02 <tcp_input+0x12e>
 8018df4:	4b7d      	ldr	r3, [pc, #500]	; (8018fec <tcp_input+0x318>)
 8018df6:	22df      	movs	r2, #223	; 0xdf
 8018df8:	4980      	ldr	r1, [pc, #512]	; (8018ffc <tcp_input+0x328>)
 8018dfa:	487e      	ldr	r0, [pc, #504]	; (8018ff4 <tcp_input+0x320>)
 8018dfc:	f007 fbcc 	bl	8020598 <iprintf>
 8018e00:	892b      	ldrh	r3, [r5, #8]
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018e02:	682a      	ldr	r2, [r5, #0]
 8018e04:	8912      	ldrh	r2, [r2, #8]
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d005      	beq.n	8018e16 <tcp_input+0x142>
 8018e0a:	4b78      	ldr	r3, [pc, #480]	; (8018fec <tcp_input+0x318>)
 8018e0c:	22e0      	movs	r2, #224	; 0xe0
 8018e0e:	497c      	ldr	r1, [pc, #496]	; (8019000 <tcp_input+0x32c>)
 8018e10:	4878      	ldr	r0, [pc, #480]	; (8018ff4 <tcp_input+0x320>)
 8018e12:	f007 fbc1 	bl	8020598 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018e16:	f8d6 8000 	ldr.w	r8, [r6]
 8018e1a:	f8b8 0000 	ldrh.w	r0, [r8]
 8018e1e:	f7fb faad 	bl	801437c <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018e22:	f8d6 a000 	ldr.w	sl, [r6]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018e26:	f8a8 0000 	strh.w	r0, [r8]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018e2a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8018e2e:	f7fb faa5 	bl	801437c <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018e32:	f8d6 8000 	ldr.w	r8, [r6]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018e36:	f8aa 0002 	strh.w	r0, [sl, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018e3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018e3e:	f7fb faa1 	bl	8014384 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018e42:	f8d6 a000 	ldr.w	sl, [r6]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018e46:	4b6f      	ldr	r3, [pc, #444]	; (8019004 <tcp_input+0x330>)
 8018e48:	f8c8 0004 	str.w	r0, [r8, #4]
 8018e4c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018e4e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8018e52:	f7fb fa97 	bl	8014384 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018e56:	f8d6 8000 	ldr.w	r8, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018e5a:	4b6b      	ldr	r3, [pc, #428]	; (8019008 <tcp_input+0x334>)
 8018e5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8018e60:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018e62:	f8b8 000e 	ldrh.w	r0, [r8, #14]
 8018e66:	f7fb fa89 	bl	801437c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8018e6a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018e6c:	f8a8 000e 	strh.w	r0, [r8, #14]
  flags = TCPH_FLAGS(tcphdr);
 8018e70:	8998      	ldrh	r0, [r3, #12]
 8018e72:	f7fb fa83 	bl	801437c <lwip_htons>
 8018e76:	4965      	ldr	r1, [pc, #404]	; (801900c <tcp_input+0x338>)
 8018e78:	b2c0      	uxtb	r0, r0
  tcplen = p->tot_len;
 8018e7a:	892b      	ldrh	r3, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8018e7c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8018e80:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018e82:	0782      	lsls	r2, r0, #30
 8018e84:	f000 8141 	beq.w	801910a <tcp_input+0x436>
    tcplen++;
 8018e88:	1c5a      	adds	r2, r3, #1
 8018e8a:	4961      	ldr	r1, [pc, #388]	; (8019010 <tcp_input+0x33c>)
 8018e8c:	b292      	uxth	r2, r2
 8018e8e:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 8018e90:	4293      	cmp	r3, r2
    tcplen++;
 8018e92:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 8018e94:	f63f af31 	bhi.w	8018cfa <tcp_input+0x26>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e98:	4b5e      	ldr	r3, [pc, #376]	; (8019014 <tcp_input+0x340>)
 8018e9a:	f8d3 8000 	ldr.w	r8, [r3]
 8018e9e:	f1b8 0f00 	cmp.w	r8, #0
 8018ea2:	f000 80d9 	beq.w	8019058 <tcp_input+0x384>
  prev = NULL;
 8018ea6:	f04f 0a00 	mov.w	sl, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018eaa:	f8df b140 	ldr.w	fp, [pc, #320]	; 8018fec <tcp_input+0x318>
 8018eae:	e01c      	b.n	8018eea <tcp_input+0x216>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018eb0:	2b0a      	cmp	r3, #10
 8018eb2:	f000 80c8 	beq.w	8019046 <tcp_input+0x372>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018eb6:	2b01      	cmp	r3, #1
 8018eb8:	f000 80be 	beq.w	8019038 <tcp_input+0x364>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ebc:	f898 2008 	ldrb.w	r2, [r8, #8]
 8018ec0:	b132      	cbz	r2, 8018ed0 <tcp_input+0x1fc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018ec8:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018eca:	b2db      	uxtb	r3, r3
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d105      	bne.n	8018edc <tcp_input+0x208>
    if (pcb->remote_port == tcphdr->src &&
 8018ed0:	6833      	ldr	r3, [r6, #0]
 8018ed2:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 8018ed6:	881a      	ldrh	r2, [r3, #0]
 8018ed8:	4291      	cmp	r1, r2
 8018eda:	d013      	beq.n	8018f04 <tcp_input+0x230>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018edc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018ee0:	46c2      	mov	sl, r8
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	f000 80b8 	beq.w	8019058 <tcp_input+0x384>
 8018ee8:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018eea:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d1de      	bne.n	8018eb0 <tcp_input+0x1dc>
 8018ef2:	465b      	mov	r3, fp
 8018ef4:	22fb      	movs	r2, #251	; 0xfb
 8018ef6:	4948      	ldr	r1, [pc, #288]	; (8019018 <tcp_input+0x344>)
 8018ef8:	483e      	ldr	r0, [pc, #248]	; (8018ff4 <tcp_input+0x320>)
 8018efa:	f007 fb4d 	bl	8020598 <iprintf>
 8018efe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018f02:	e7d5      	b.n	8018eb0 <tcp_input+0x1dc>
    if (pcb->remote_port == tcphdr->src &&
 8018f04:	885b      	ldrh	r3, [r3, #2]
 8018f06:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	d1e6      	bne.n	8018edc <tcp_input+0x208>
        pcb->local_port == tcphdr->dest &&
 8018f0e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d1e1      	bne.n	8018edc <tcp_input+0x208>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018f18:	f8d8 2000 	ldr.w	r2, [r8]
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d1dc      	bne.n	8018edc <tcp_input+0x208>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018f22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f26:	4543      	cmp	r3, r8
 8018f28:	f000 8460 	beq.w	80197ec <tcp_input+0xb18>
      if (prev != NULL) {
 8018f2c:	f1ba 0f00 	cmp.w	sl, #0
 8018f30:	f000 8455 	beq.w	80197de <tcp_input+0xb0a>
        pcb->next = tcp_active_pcbs;
 8018f34:	4937      	ldr	r1, [pc, #220]	; (8019014 <tcp_input+0x340>)
        prev->next = pcb->next;
 8018f36:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8018f3a:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 8018f3c:	f8c1 8000 	str.w	r8, [r1]
 8018f40:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 8018f42:	f8c8 200c 	str.w	r2, [r8, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018f46:	4543      	cmp	r3, r8
 8018f48:	f000 8440 	beq.w	80197cc <tcp_input+0xaf8>
    inseg.next = NULL;
 8018f4c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8019030 <tcp_input+0x35c>
 8018f50:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 8018f52:	6832      	ldr	r2, [r6, #0]
    inseg.len = p->tot_len;
 8018f54:	8929      	ldrh	r1, [r5, #8]
    inseg.tcphdr = tcphdr;
 8018f56:	f8ca 2010 	str.w	r2, [sl, #16]
    if (flags & TCP_PSH) {
 8018f5a:	4a2c      	ldr	r2, [pc, #176]	; (801900c <tcp_input+0x338>)
    recv_data = NULL;
 8018f5c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8019034 <tcp_input+0x360>
    recv_flags = 0;
 8018f60:	4f2e      	ldr	r7, [pc, #184]	; (801901c <tcp_input+0x348>)
    inseg.len = p->tot_len;
 8018f62:	f8aa 1008 	strh.w	r1, [sl, #8]
    if (flags & TCP_PSH) {
 8018f66:	7812      	ldrb	r2, [r2, #0]
    recv_acked = 0;
 8018f68:	492d      	ldr	r1, [pc, #180]	; (8019020 <tcp_input+0x34c>)
    inseg.next = NULL;
 8018f6a:	f8ca 3000 	str.w	r3, [sl]
    recv_data = NULL;
 8018f6e:	f8cb 3000 	str.w	r3, [fp]
    recv_flags = 0;
 8018f72:	703b      	strb	r3, [r7, #0]
    recv_acked = 0;
 8018f74:	800b      	strh	r3, [r1, #0]
    if (flags & TCP_PSH) {
 8018f76:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 8018f78:	f8ca 5004 	str.w	r5, [sl, #4]
    if (flags & TCP_PSH) {
 8018f7c:	d503      	bpl.n	8018f86 <tcp_input+0x2b2>
      p->flags |= PBUF_FLAG_PUSH;
 8018f7e:	7b6b      	ldrb	r3, [r5, #13]
 8018f80:	f043 0301 	orr.w	r3, r3, #1
 8018f84:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8018f86:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	f000 80c1 	beq.w	8019112 <tcp_input+0x43e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018f90:	4640      	mov	r0, r8
 8018f92:	f7fe fe9b 	bl	8017ccc <tcp_process_refused_data>
 8018f96:	300d      	adds	r0, #13
 8018f98:	d009      	beq.n	8018fae <tcp_input+0x2da>
 8018f9a:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	f000 80b7 	beq.w	8019112 <tcp_input+0x43e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018fa4:	9b05      	ldr	r3, [sp, #20]
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	f000 80b2 	beq.w	8019112 <tcp_input+0x43e>
        if (pcb->rcv_ann_wnd == 0) {
 8018fae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	f000 8331 	beq.w	801961a <tcp_input+0x946>
        TCP_STATS_INC(tcp.drop);
 8018fb8:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 8018fbc:	4d19      	ldr	r5, [pc, #100]	; (8019024 <tcp_input+0x350>)
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
    tcp_input_pcb = NULL;
 8018fc4:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 8018fc6:	f8da 0004 	ldr.w	r0, [sl, #4]
    tcp_input_pcb = NULL;
 8018fca:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
 8018fcc:	f8cb 4000 	str.w	r4, [fp]
    if (inseg.p != NULL) {
 8018fd0:	b118      	cbz	r0, 8018fda <tcp_input+0x306>
      pbuf_free(inseg.p);
 8018fd2:	f7fd f843 	bl	801605c <pbuf_free>
      inseg.p = NULL;
 8018fd6:	f8ca 4004 	str.w	r4, [sl, #4]
}
 8018fda:	b007      	add	sp, #28
 8018fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe0:	200361ec 	.word	0x200361ec
 8018fe4:	20022418 	.word	0x20022418
 8018fe8:	20026a74 	.word	0x20026a74
 8018fec:	0803e0f4 	.word	0x0803e0f4
 8018ff0:	0803dec4 	.word	0x0803dec4
 8018ff4:	08026544 	.word	0x08026544
 8018ff8:	2002241c 	.word	0x2002241c
 8018ffc:	0803deec 	.word	0x0803deec
 8019000:	0803def8 	.word	0x0803def8
 8019004:	20022410 	.word	0x20022410
 8019008:	200223e8 	.word	0x200223e8
 801900c:	200223ec 	.word	0x200223ec
 8019010:	20022426 	.word	0x20022426
 8019014:	200362fc 	.word	0x200362fc
 8019018:	0803df18 	.word	0x0803df18
 801901c:	2002240c 	.word	0x2002240c
 8019020:	20022404 	.word	0x20022404
 8019024:	20036310 	.word	0x20036310
 8019028:	20022424 	.word	0x20022424
 801902c:	20022420 	.word	0x20022420
 8019030:	200223f0 	.word	0x200223f0
 8019034:	20022408 	.word	0x20022408
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019038:	465b      	mov	r3, fp
 801903a:	22fd      	movs	r2, #253	; 0xfd
 801903c:	49bd      	ldr	r1, [pc, #756]	; (8019334 <tcp_input+0x660>)
 801903e:	48be      	ldr	r0, [pc, #760]	; (8019338 <tcp_input+0x664>)
 8019040:	f007 faaa 	bl	8020598 <iprintf>
 8019044:	e73a      	b.n	8018ebc <tcp_input+0x1e8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019046:	465b      	mov	r3, fp
 8019048:	22fc      	movs	r2, #252	; 0xfc
 801904a:	49bc      	ldr	r1, [pc, #752]	; (801933c <tcp_input+0x668>)
 801904c:	48ba      	ldr	r0, [pc, #744]	; (8019338 <tcp_input+0x664>)
 801904e:	f007 faa3 	bl	8020598 <iprintf>
 8019052:	f898 3014 	ldrb.w	r3, [r8, #20]
 8019056:	e72e      	b.n	8018eb6 <tcp_input+0x1e2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019058:	4bb9      	ldr	r3, [pc, #740]	; (8019340 <tcp_input+0x66c>)
 801905a:	f8d3 8000 	ldr.w	r8, [r3]
 801905e:	f1b8 0f00 	cmp.w	r8, #0
 8019062:	f000 8087 	beq.w	8019174 <tcp_input+0x4a0>
 8019066:	462b      	mov	r3, r5
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019068:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8019360 <tcp_input+0x68c>
 801906c:	4645      	mov	r5, r8
 801906e:	f8df a300 	ldr.w	sl, [pc, #768]	; 8019370 <tcp_input+0x69c>
 8019072:	4698      	mov	r8, r3
 8019074:	e002      	b.n	801907c <tcp_input+0x3a8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019076:	68ed      	ldr	r5, [r5, #12]
 8019078:	2d00      	cmp	r5, #0
 801907a:	d07a      	beq.n	8019172 <tcp_input+0x49e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801907c:	7d28      	ldrb	r0, [r5, #20]
 801907e:	465b      	mov	r3, fp
 8019080:	f240 121f 	movw	r2, #287	; 0x11f
 8019084:	4651      	mov	r1, sl
 8019086:	280a      	cmp	r0, #10
 8019088:	48ab      	ldr	r0, [pc, #684]	; (8019338 <tcp_input+0x664>)
 801908a:	d001      	beq.n	8019090 <tcp_input+0x3bc>
 801908c:	f007 fa84 	bl	8020598 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019090:	7a2a      	ldrb	r2, [r5, #8]
 8019092:	b132      	cbz	r2, 80190a2 <tcp_input+0x3ce>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801909a:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801909c:	b2db      	uxtb	r3, r3
 801909e:	429a      	cmp	r2, r3
 80190a0:	d1e9      	bne.n	8019076 <tcp_input+0x3a2>
      if (pcb->remote_port == tcphdr->src &&
 80190a2:	6833      	ldr	r3, [r6, #0]
 80190a4:	8b2a      	ldrh	r2, [r5, #24]
 80190a6:	8819      	ldrh	r1, [r3, #0]
 80190a8:	4291      	cmp	r1, r2
 80190aa:	d1e4      	bne.n	8019076 <tcp_input+0x3a2>
 80190ac:	8858      	ldrh	r0, [r3, #2]
          pcb->local_port == tcphdr->dest &&
 80190ae:	8aeb      	ldrh	r3, [r5, #22]
      if (pcb->remote_port == tcphdr->src &&
 80190b0:	4298      	cmp	r0, r3
 80190b2:	d1e0      	bne.n	8019076 <tcp_input+0x3a2>
          pcb->local_port == tcphdr->dest &&
 80190b4:	686a      	ldr	r2, [r5, #4]
 80190b6:	693b      	ldr	r3, [r7, #16]
 80190b8:	429a      	cmp	r2, r3
 80190ba:	d1dc      	bne.n	8019076 <tcp_input+0x3a2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80190bc:	682a      	ldr	r2, [r5, #0]
 80190be:	697b      	ldr	r3, [r7, #20]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d1d8      	bne.n	8019076 <tcp_input+0x3a2>
 80190c4:	4643      	mov	r3, r8
 80190c6:	46a8      	mov	r8, r5
 80190c8:	461d      	mov	r5, r3
  if (flags & TCP_RST) {
 80190ca:	4b9e      	ldr	r3, [pc, #632]	; (8019344 <tcp_input+0x670>)
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	075f      	lsls	r7, r3, #29
 80190d0:	d413      	bmi.n	80190fa <tcp_input+0x426>
 80190d2:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 80190d4:	079e      	lsls	r6, r3, #30
 80190d6:	8814      	ldrh	r4, [r2, #0]
 80190d8:	f140 8370 	bpl.w	80197bc <tcp_input+0xae8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80190dc:	4b9a      	ldr	r3, [pc, #616]	; (8019348 <tcp_input+0x674>)
 80190de:	681a      	ldr	r2, [r3, #0]
 80190e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80190e4:	1ad3      	subs	r3, r2, r3
 80190e6:	d405      	bmi.n	80190f4 <tcp_input+0x420>
 80190e8:	f8b8 6028 	ldrh.w	r6, [r8, #40]	; 0x28
 80190ec:	1b9b      	subs	r3, r3, r6
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	f340 8330 	ble.w	8019754 <tcp_input+0xa80>
  if ((tcplen > 0)) {
 80190f4:	2c00      	cmp	r4, #0
 80190f6:	f040 833b 	bne.w	8019770 <tcp_input+0xa9c>
        pbuf_free(p);
 80190fa:	4628      	mov	r0, r5
 80190fc:	e608      	b.n	8018d10 <tcp_input+0x3c>
    tcphdr_opt1len = tcphdr_optlen;
 80190fe:	4b93      	ldr	r3, [pc, #588]	; (801934c <tcp_input+0x678>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019100:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8019102:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019104:	f7fc ff6e 	bl	8015fe4 <pbuf_remove_header>
 8019108:	e685      	b.n	8018e16 <tcp_input+0x142>
  tcplen = p->tot_len;
 801910a:	4a91      	ldr	r2, [pc, #580]	; (8019350 <tcp_input+0x67c>)
 801910c:	9205      	str	r2, [sp, #20]
 801910e:	8013      	strh	r3, [r2, #0]
 8019110:	e6c2      	b.n	8018e98 <tcp_input+0x1c4>
  if (flags & TCP_RST) {
 8019112:	4b8c      	ldr	r3, [pc, #560]	; (8019344 <tcp_input+0x670>)
    tcp_input_pcb = pcb;
 8019114:	4d8f      	ldr	r5, [pc, #572]	; (8019354 <tcp_input+0x680>)
  if (flags & TCP_RST) {
 8019116:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 8019118:	f8c5 8000 	str.w	r8, [r5]
  if (flags & TCP_RST) {
 801911c:	0753      	lsls	r3, r2, #29
 801911e:	f140 80f9 	bpl.w	8019314 <tcp_input+0x640>
    if (pcb->state == SYN_SENT) {
 8019122:	f898 1014 	ldrb.w	r1, [r8, #20]
 8019126:	2902      	cmp	r1, #2
 8019128:	f000 8265 	beq.w	80195f6 <tcp_input+0x922>
      if (seqno == pcb->rcv_nxt) {
 801912c:	4b86      	ldr	r3, [pc, #536]	; (8019348 <tcp_input+0x674>)
 801912e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	429a      	cmp	r2, r3
 8019136:	f000 83b0 	beq.w	801989a <tcp_input+0xbc6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801913a:	1a9b      	subs	r3, r3, r2
 801913c:	d405      	bmi.n	801914a <tcp_input+0x476>
 801913e:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8019142:	1a9b      	subs	r3, r3, r2
 8019144:	2b00      	cmp	r3, #0
 8019146:	f340 8302 	ble.w	801974e <tcp_input+0xa7a>
      if (recv_flags & TF_RESET) {
 801914a:	783b      	ldrb	r3, [r7, #0]
 801914c:	0719      	lsls	r1, r3, #28
 801914e:	f140 8113 	bpl.w	8019378 <tcp_input+0x6a4>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8019152:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8019156:	b123      	cbz	r3, 8019162 <tcp_input+0x48e>
 8019158:	f06f 010d 	mvn.w	r1, #13
 801915c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019160:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019162:	4641      	mov	r1, r8
 8019164:	487c      	ldr	r0, [pc, #496]	; (8019358 <tcp_input+0x684>)
 8019166:	f7fe fa43 	bl	80175f0 <tcp_pcb_remove>
        tcp_free(pcb);
 801916a:	4640      	mov	r0, r8
 801916c:	f7fd fd4e 	bl	8016c0c <tcp_free>
 8019170:	e728      	b.n	8018fc4 <tcp_input+0x2f0>
 8019172:	4645      	mov	r5, r8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019174:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8019374 <tcp_input+0x6a0>
 8019178:	6830      	ldr	r0, [r6, #0]
 801917a:	f8db e000 	ldr.w	lr, [fp]
 801917e:	f1be 0f00 	cmp.w	lr, #0
 8019182:	f000 80a4 	beq.w	80192ce <tcp_input+0x5fa>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019186:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801918a:	46f2      	mov	sl, lr
 801918c:	f8d7 8014 	ldr.w	r8, [r7, #20]
    prev = NULL;
 8019190:	2100      	movs	r1, #0
 8019192:	e006      	b.n	80191a2 <tcp_input+0x4ce>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019194:	f8da 300c 	ldr.w	r3, [sl, #12]
 8019198:	4651      	mov	r1, sl
 801919a:	469a      	mov	sl, r3
 801919c:	2b00      	cmp	r3, #0
 801919e:	f000 8096 	beq.w	80192ce <tcp_input+0x5fa>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80191a2:	f89a 2008 	ldrb.w	r2, [sl, #8]
 80191a6:	b12a      	cbz	r2, 80191b4 <tcp_input+0x4e0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80191a8:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 80191ac:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80191ae:	b2db      	uxtb	r3, r3
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d1ef      	bne.n	8019194 <tcp_input+0x4c0>
      if (lpcb->local_port == tcphdr->dest) {
 80191b4:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 80191b8:	8843      	ldrh	r3, [r0, #2]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d1ea      	bne.n	8019194 <tcp_input+0x4c0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80191be:	f8da 3000 	ldr.w	r3, [sl]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80191c2:	b10b      	cbz	r3, 80191c8 <tcp_input+0x4f4>
 80191c4:	4543      	cmp	r3, r8
 80191c6:	d1e5      	bne.n	8019194 <tcp_input+0x4c0>
      if (prev != NULL) {
 80191c8:	2900      	cmp	r1, #0
 80191ca:	f000 822a 	beq.w	8019622 <tcp_input+0x94e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80191ce:	f8da 300c 	ldr.w	r3, [sl, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80191d2:	f8cb a000 	str.w	sl, [fp]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80191d6:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80191d8:	f8ca e00c 	str.w	lr, [sl, #12]
  if (flags & TCP_RST) {
 80191dc:	4b59      	ldr	r3, [pc, #356]	; (8019344 <tcp_input+0x670>)
 80191de:	781b      	ldrb	r3, [r3, #0]
 80191e0:	0759      	lsls	r1, r3, #29
 80191e2:	d48a      	bmi.n	80190fa <tcp_input+0x426>
  if (flags & TCP_ACK) {
 80191e4:	f013 0810 	ands.w	r8, r3, #16
 80191e8:	f040 8221 	bne.w	801962e <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 80191ec:	079a      	lsls	r2, r3, #30
 80191ee:	d584      	bpl.n	80190fa <tcp_input+0x426>
    npcb = tcp_alloc(pcb->prio);
 80191f0:	f89a 0015 	ldrb.w	r0, [sl, #21]
 80191f4:	f7fe fb78 	bl	80178e8 <tcp_alloc>
    if (npcb == NULL) {
 80191f8:	4681      	mov	r9, r0
 80191fa:	2800      	cmp	r0, #0
 80191fc:	f000 82cb 	beq.w	8019796 <tcp_input+0xac2>
    npcb->remote_port = tcphdr->src;
 8019200:	6832      	ldr	r2, [r6, #0]
    npcb->state = SYN_RCVD;
 8019202:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 8019206:	4b50      	ldr	r3, [pc, #320]	; (8019348 <tcp_input+0x674>)
    npcb->local_port = pcb->local_port;
 8019208:	f8ba 4016 	ldrh.w	r4, [sl, #22]
    npcb->rcv_nxt = seqno + 1;
 801920c:	6819      	ldr	r1, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801920e:	7813      	ldrb	r3, [r2, #0]
 8019210:	7852      	ldrb	r2, [r2, #1]
    npcb->rcv_nxt = seqno + 1;
 8019212:	3101      	adds	r1, #1
    npcb->remote_port = tcphdr->src;
 8019214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    npcb->rcv_nxt = seqno + 1;
 8019218:	6241      	str	r1, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801921a:	62c1      	str	r1, [r0, #44]	; 0x2c
    npcb->remote_port = tcphdr->src;
 801921c:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801921e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    npcb->state = SYN_RCVD;
 8019222:	f880 c014 	strb.w	ip, [r0, #20]
    npcb->local_port = pcb->local_port;
 8019226:	82c4      	strh	r4, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019228:	1d04      	adds	r4, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801922a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801922c:	6042      	str	r2, [r0, #4]
    iss = tcp_next_iss(npcb);
 801922e:	f7fe fdeb 	bl	8017e08 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019232:	4b45      	ldr	r3, [pc, #276]	; (8019348 <tcp_input+0x674>)
    TCP_REG_ACTIVE(npcb);
 8019234:	4948      	ldr	r1, [pc, #288]	; (8019358 <tcp_input+0x684>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019236:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 8019238:	f8da 3010 	ldr.w	r3, [sl, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801923c:	3a01      	subs	r2, #1
    npcb->snd_wl2 = iss;
 801923e:	f8c9 0058 	str.w	r0, [r9, #88]	; 0x58
    npcb->lastack = iss;
 8019242:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019246:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 801924a:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->listener = pcb;
 801924e:	f8c9 a07c 	str.w	sl, [r9, #124]	; 0x7c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019252:	e9c9 0214 	strd	r0, r2, [r9, #80]	; 0x50
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019256:	f89a 3009 	ldrb.w	r3, [sl, #9]
    TCP_REG_ACTIVE(npcb);
 801925a:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801925c:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 8019260:	f8c1 9000 	str.w	r9, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019264:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 8019268:	f89a 3008 	ldrb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801926c:	f8c9 200c 	str.w	r2, [r9, #12]
    npcb->netif_idx = pcb->netif_idx;
 8019270:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 8019274:	f001 ff40 	bl	801b0f8 <tcp_timer_needed>
 8019278:	2201      	movs	r2, #1
 801927a:	4b38      	ldr	r3, [pc, #224]	; (801935c <tcp_input+0x688>)
    tcp_parseopt(npcb);
 801927c:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 801927e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019280:	f7fe fede 	bl	8018040 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019284:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019286:	4620      	mov	r0, r4
 8019288:	f8b9 6032 	ldrh.w	r6, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801928c:	89db      	ldrh	r3, [r3, #14]
 801928e:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019292:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019296:	f004 fcfb 	bl	801dc90 <ip4_route>
 801929a:	4622      	mov	r2, r4
 801929c:	4601      	mov	r1, r0
 801929e:	4630      	mov	r0, r6
 80192a0:	f7fe fdce 	bl	8017e40 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80192a4:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80192a6:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80192aa:	4648      	mov	r0, r9
 80192ac:	f001 f9ce 	bl	801a64c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80192b0:	2800      	cmp	r0, #0
 80192b2:	f040 8269 	bne.w	8019788 <tcp_input+0xab4>
    tcp_output(npcb);
 80192b6:	4648      	mov	r0, r9
 80192b8:	f001 fbe8 	bl	801aa8c <tcp_output>
        pbuf_free(p);
 80192bc:	4628      	mov	r0, r5
 80192be:	e527      	b.n	8018d10 <tcp_input+0x3c>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80192c0:	4b27      	ldr	r3, [pc, #156]	; (8019360 <tcp_input+0x68c>)
 80192c2:	22c2      	movs	r2, #194	; 0xc2
 80192c4:	4927      	ldr	r1, [pc, #156]	; (8019364 <tcp_input+0x690>)
 80192c6:	481c      	ldr	r0, [pc, #112]	; (8019338 <tcp_input+0x664>)
 80192c8:	f007 f966 	bl	8020598 <iprintf>
 80192cc:	e570      	b.n	8018db0 <tcp_input+0xdc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80192ce:	8980      	ldrh	r0, [r0, #12]
 80192d0:	f7fb f854 	bl	801437c <lwip_htons>
 80192d4:	f010 0004 	ands.w	r0, r0, #4
 80192d8:	f47f af0f 	bne.w	80190fa <tcp_input+0x426>
      TCP_STATS_INC(tcp.proterr);
 80192dc:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 80192e0:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80192e4:	6836      	ldr	r6, [r6, #0]
      TCP_STATS_INC(tcp.proterr);
 80192e6:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80192e8:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 80192ea:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 80192ec:	f8a4 10a0 	strh.w	r1, [r4, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80192f0:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 80192f2:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80192f6:	4a14      	ldr	r2, [pc, #80]	; (8019348 <tcp_input+0x674>)
 80192f8:	8833      	ldrh	r3, [r6, #0]
 80192fa:	491b      	ldr	r1, [pc, #108]	; (8019368 <tcp_input+0x694>)
 80192fc:	6812      	ldr	r2, [r2, #0]
 80192fe:	6809      	ldr	r1, [r1, #0]
 8019300:	9302      	str	r3, [sp, #8]
 8019302:	443a      	add	r2, r7
 8019304:	8874      	ldrh	r4, [r6, #2]
 8019306:	4b19      	ldr	r3, [pc, #100]	; (801936c <tcp_input+0x698>)
 8019308:	e9cd 9400 	strd	r9, r4, [sp]
 801930c:	f001 fb42 	bl	801a994 <tcp_rst>
        pbuf_free(p);
 8019310:	4628      	mov	r0, r5
 8019312:	e4fd      	b.n	8018d10 <tcp_input+0x3c>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019314:	0794      	lsls	r4, r2, #30
 8019316:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801931a:	f140 8082 	bpl.w	8019422 <tcp_input+0x74e>
 801931e:	f898 2014 	ldrb.w	r2, [r8, #20]
 8019322:	3a02      	subs	r2, #2
 8019324:	2a01      	cmp	r2, #1
 8019326:	d97c      	bls.n	8019422 <tcp_input+0x74e>
        tcp_ack_now(pcb);
 8019328:	f043 0302 	orr.w	r3, r3, #2
 801932c:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019330:	e70b      	b.n	801914a <tcp_input+0x476>
 8019332:	bf00      	nop
 8019334:	0803df6c 	.word	0x0803df6c
 8019338:	08026544 	.word	0x08026544
 801933c:	0803df40 	.word	0x0803df40
 8019340:	2003630c 	.word	0x2003630c
 8019344:	200223ec 	.word	0x200223ec
 8019348:	20022410 	.word	0x20022410
 801934c:	2002241c 	.word	0x2002241c
 8019350:	20022426 	.word	0x20022426
 8019354:	20036310 	.word	0x20036310
 8019358:	200362fc 	.word	0x200362fc
 801935c:	200362f8 	.word	0x200362f8
 8019360:	0803e0f4 	.word	0x0803e0f4
 8019364:	0803dedc 	.word	0x0803dedc
 8019368:	200223e8 	.word	0x200223e8
 801936c:	20026a88 	.word	0x20026a88
 8019370:	0803dfec 	.word	0x0803dfec
 8019374:	20036304 	.word	0x20036304
        if (recv_acked > 0) {
 8019378:	4bb7      	ldr	r3, [pc, #732]	; (8019658 <tcp_input+0x984>)
 801937a:	881a      	ldrh	r2, [r3, #0]
 801937c:	b162      	cbz	r2, 8019398 <tcp_input+0x6c4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801937e:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 8019382:	b133      	cbz	r3, 8019392 <tcp_input+0x6be>
 8019384:	4641      	mov	r1, r8
 8019386:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801938a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801938c:	300d      	adds	r0, #13
 801938e:	f43f ae19 	beq.w	8018fc4 <tcp_input+0x2f0>
          recv_acked = 0;
 8019392:	2300      	movs	r3, #0
 8019394:	4ab0      	ldr	r2, [pc, #704]	; (8019658 <tcp_input+0x984>)
 8019396:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019398:	4640      	mov	r0, r8
 801939a:	f7fe ff5f 	bl	801825c <tcp_input_delayed_close>
 801939e:	2800      	cmp	r0, #0
 80193a0:	f47f ae10 	bne.w	8018fc4 <tcp_input+0x2f0>
        if (recv_data != NULL) {
 80193a4:	f8db 3000 	ldr.w	r3, [fp]
 80193a8:	b31b      	cbz	r3, 80193f2 <tcp_input+0x71e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80193aa:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 80193ae:	b133      	cbz	r3, 80193be <tcp_input+0x6ea>
 80193b0:	4baa      	ldr	r3, [pc, #680]	; (801965c <tcp_input+0x988>)
 80193b2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80193b6:	49aa      	ldr	r1, [pc, #680]	; (8019660 <tcp_input+0x98c>)
 80193b8:	48aa      	ldr	r0, [pc, #680]	; (8019664 <tcp_input+0x990>)
 80193ba:	f007 f8ed 	bl	8020598 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80193be:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80193c2:	f8db 2000 	ldr.w	r2, [fp]
 80193c6:	f013 0310 	ands.w	r3, r3, #16
 80193ca:	f040 8238 	bne.w	801983e <tcp_input+0xb6a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80193ce:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 80193d2:	2c00      	cmp	r4, #0
 80193d4:	f000 8215 	beq.w	8019802 <tcp_input+0xb2e>
 80193d8:	4641      	mov	r1, r8
 80193da:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80193de:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 80193e0:	f110 0f0d 	cmn.w	r0, #13
 80193e4:	f43f adee 	beq.w	8018fc4 <tcp_input+0x2f0>
          if (err != ERR_OK) {
 80193e8:	b118      	cbz	r0, 80193f2 <tcp_input+0x71e>
            pcb->refused_data = recv_data;
 80193ea:	f8db 3000 	ldr.w	r3, [fp]
 80193ee:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 80193f2:	783b      	ldrb	r3, [r7, #0]
 80193f4:	069a      	lsls	r2, r3, #26
 80193f6:	d508      	bpl.n	801940a <tcp_input+0x736>
          if (pcb->refused_data != NULL) {
 80193f8:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f000 8206 	beq.w	801980e <tcp_input+0xb3a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8019402:	7b5a      	ldrb	r2, [r3, #13]
 8019404:	f042 0220 	orr.w	r2, r2, #32
 8019408:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801940a:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801940c:	4640      	mov	r0, r8
        tcp_input_pcb = NULL;
 801940e:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019410:	f7fe ff24 	bl	801825c <tcp_input_delayed_close>
 8019414:	2800      	cmp	r0, #0
 8019416:	f47f add5 	bne.w	8018fc4 <tcp_input+0x2f0>
        tcp_output(pcb);
 801941a:	4640      	mov	r0, r8
 801941c:	f001 fb36 	bl	801aa8c <tcp_output>
 8019420:	e5d0      	b.n	8018fc4 <tcp_input+0x2f0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019422:	06d8      	lsls	r0, r3, #27
 8019424:	d403      	bmi.n	801942e <tcp_input+0x75a>
    pcb->tmr = tcp_ticks;
 8019426:	4b90      	ldr	r3, [pc, #576]	; (8019668 <tcp_input+0x994>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	f8c8 3020 	str.w	r3, [r8, #32]
  pcb->persist_probe = 0;
 801942e:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 8019430:	4640      	mov	r0, r8
  pcb->persist_probe = 0;
 8019432:	f8a8 309a 	strh.w	r3, [r8, #154]	; 0x9a
  tcp_parseopt(pcb);
 8019436:	f7fe fe03 	bl	8018040 <tcp_parseopt>
  switch (pcb->state) {
 801943a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801943e:	3b02      	subs	r3, #2
 8019440:	2b07      	cmp	r3, #7
 8019442:	f63f ae82 	bhi.w	801914a <tcp_input+0x476>
 8019446:	e8df f003 	tbb	[pc, r3]
 801944a:	8eb0      	.short	0x8eb0
 801944c:	7d42607d 	.word	0x7d42607d
 8019450:	041d      	.short	0x041d
      tcp_receive(pcb);
 8019452:	4640      	mov	r0, r8
 8019454:	f7fe ff94 	bl	8018380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019458:	4b84      	ldr	r3, [pc, #528]	; (801966c <tcp_input+0x998>)
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	06d8      	lsls	r0, r3, #27
 801945e:	f57f ae74 	bpl.w	801914a <tcp_input+0x476>
 8019462:	4b83      	ldr	r3, [pc, #524]	; (8019670 <tcp_input+0x99c>)
 8019464:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	783b      	ldrb	r3, [r7, #0]
 801946c:	4291      	cmp	r1, r2
 801946e:	f47f ae6c 	bne.w	801914a <tcp_input+0x476>
 8019472:	f8d8 206c 	ldr.w	r2, [r8, #108]	; 0x6c
 8019476:	2a00      	cmp	r2, #0
 8019478:	f47f ae67 	bne.w	801914a <tcp_input+0x476>
        recv_flags |= TF_CLOSED;
 801947c:	f043 0310 	orr.w	r3, r3, #16
 8019480:	703b      	strb	r3, [r7, #0]
 8019482:	e662      	b.n	801914a <tcp_input+0x476>
      tcp_receive(pcb);
 8019484:	4640      	mov	r0, r8
 8019486:	f7fe ff7b 	bl	8018380 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801948a:	4b78      	ldr	r3, [pc, #480]	; (801966c <tcp_input+0x998>)
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	06dc      	lsls	r4, r3, #27
 8019490:	f57f ae5b 	bpl.w	801914a <tcp_input+0x476>
 8019494:	4b76      	ldr	r3, [pc, #472]	; (8019670 <tcp_input+0x99c>)
 8019496:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	429a      	cmp	r2, r3
 801949e:	f47f ae54 	bne.w	801914a <tcp_input+0x476>
 80194a2:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	f47f ae4f 	bne.w	801914a <tcp_input+0x476>
        tcp_pcb_purge(pcb);
 80194ac:	4640      	mov	r0, r8
 80194ae:	f7fd fde9 	bl	8017084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80194b2:	4b70      	ldr	r3, [pc, #448]	; (8019674 <tcp_input+0x9a0>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	4543      	cmp	r3, r8
 80194b8:	f000 8222 	beq.w	8019900 <tcp_input+0xc2c>
 80194bc:	2b00      	cmp	r3, #0
 80194be:	f000 8223 	beq.w	8019908 <tcp_input+0xc34>
 80194c2:	68da      	ldr	r2, [r3, #12]
 80194c4:	4542      	cmp	r2, r8
 80194c6:	f000 822e 	beq.w	8019926 <tcp_input+0xc52>
 80194ca:	4613      	mov	r3, r2
 80194cc:	e7f6      	b.n	80194bc <tcp_input+0x7e8>
      tcp_receive(pcb);
 80194ce:	4640      	mov	r0, r8
 80194d0:	f7fe ff56 	bl	8018380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80194d4:	783b      	ldrb	r3, [r7, #0]
 80194d6:	069e      	lsls	r6, r3, #26
 80194d8:	f57f ae37 	bpl.w	801914a <tcp_input+0x476>
        tcp_ack_now(pcb);
 80194dc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 80194e0:	4640      	mov	r0, r8
        tcp_ack_now(pcb);
 80194e2:	f043 0302 	orr.w	r3, r3, #2
 80194e6:	f8a8 301a 	strh.w	r3, [r8, #26]
        tcp_pcb_purge(pcb);
 80194ea:	f7fd fdcb 	bl	8017084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80194ee:	4b61      	ldr	r3, [pc, #388]	; (8019674 <tcp_input+0x9a0>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4543      	cmp	r3, r8
 80194f4:	f000 8204 	beq.w	8019900 <tcp_input+0xc2c>
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	f000 8205 	beq.w	8019908 <tcp_input+0xc34>
 80194fe:	68da      	ldr	r2, [r3, #12]
 8019500:	4542      	cmp	r2, r8
 8019502:	f000 8210 	beq.w	8019926 <tcp_input+0xc52>
 8019506:	4613      	mov	r3, r2
 8019508:	e7f6      	b.n	80194f8 <tcp_input+0x824>
      tcp_receive(pcb);
 801950a:	4640      	mov	r0, r8
 801950c:	f7fe ff38 	bl	8018380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019510:	783b      	ldrb	r3, [r7, #0]
 8019512:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019516:	4b55      	ldr	r3, [pc, #340]	; (801966c <tcp_input+0x998>)
 8019518:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801951a:	f000 81c9 	beq.w	80198b0 <tcp_input+0xbdc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801951e:	06da      	lsls	r2, r3, #27
 8019520:	d506      	bpl.n	8019530 <tcp_input+0x85c>
 8019522:	4b53      	ldr	r3, [pc, #332]	; (8019670 <tcp_input+0x99c>)
 8019524:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	429a      	cmp	r2, r3
 801952c:	f000 81ff 	beq.w	801992e <tcp_input+0xc5a>
          tcp_ack_now(pcb);
 8019530:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          pcb->state = CLOSING;
 8019534:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 8019536:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 801953a:	f888 2014 	strb.w	r2, [r8, #20]
          tcp_ack_now(pcb);
 801953e:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019542:	e602      	b.n	801914a <tcp_input+0x476>
      tcp_receive(pcb);
 8019544:	4640      	mov	r0, r8
 8019546:	f7fe ff1b 	bl	8018380 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801954a:	783b      	ldrb	r3, [r7, #0]
 801954c:	0699      	lsls	r1, r3, #26
 801954e:	f57f adfc 	bpl.w	801914a <tcp_input+0x476>
        tcp_ack_now(pcb);
 8019552:	f8b8 301a 	ldrh.w	r3, [r8, #26]
        pcb->state = CLOSE_WAIT;
 8019556:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 8019558:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 801955c:	f888 2014 	strb.w	r2, [r8, #20]
        tcp_ack_now(pcb);
 8019560:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019564:	e5f1      	b.n	801914a <tcp_input+0x476>
      if (flags & TCP_ACK) {
 8019566:	4b41      	ldr	r3, [pc, #260]	; (801966c <tcp_input+0x998>)
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	06da      	lsls	r2, r3, #27
 801956c:	f140 8186 	bpl.w	801987c <tcp_input+0xba8>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019570:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8019574:	4a3e      	ldr	r2, [pc, #248]	; (8019670 <tcp_input+0x99c>)
 8019576:	43db      	mvns	r3, r3
 8019578:	6811      	ldr	r1, [r2, #0]
 801957a:	42cb      	cmn	r3, r1
 801957c:	d405      	bmi.n	801958a <tcp_input+0x8b6>
 801957e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 8019582:	1acb      	subs	r3, r1, r3
 8019584:	2b00      	cmp	r3, #0
 8019586:	f340 81a6 	ble.w	80198d6 <tcp_input+0xc02>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801958a:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801958c:	4640      	mov	r0, r8
 801958e:	9a05      	ldr	r2, [sp, #20]
 8019590:	881e      	ldrh	r6, [r3, #0]
 8019592:	8814      	ldrh	r4, [r2, #0]
 8019594:	4a38      	ldr	r2, [pc, #224]	; (8019678 <tcp_input+0x9a4>)
 8019596:	6812      	ldr	r2, [r2, #0]
 8019598:	9602      	str	r6, [sp, #8]
 801959a:	885b      	ldrh	r3, [r3, #2]
 801959c:	4422      	add	r2, r4
 801959e:	e9cd 9300 	strd	r9, r3, [sp]
 80195a2:	4b36      	ldr	r3, [pc, #216]	; (801967c <tcp_input+0x9a8>)
 80195a4:	f001 f9f6 	bl	801a994 <tcp_rst>
 80195a8:	e5cf      	b.n	801914a <tcp_input+0x476>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80195aa:	4b30      	ldr	r3, [pc, #192]	; (801966c <tcp_input+0x998>)
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	f003 0212 	and.w	r2, r3, #18
 80195b2:	2a12      	cmp	r2, #18
 80195b4:	d064      	beq.n	8019680 <tcp_input+0x9ac>
      else if (flags & TCP_ACK) {
 80195b6:	06d9      	lsls	r1, r3, #27
 80195b8:	f57f adc7 	bpl.w	801914a <tcp_input+0x476>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80195bc:	9a05      	ldr	r2, [sp, #20]
 80195be:	4640      	mov	r0, r8
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80195c0:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80195c2:	8811      	ldrh	r1, [r2, #0]
 80195c4:	4a2c      	ldr	r2, [pc, #176]	; (8019678 <tcp_input+0x9a4>)
 80195c6:	881c      	ldrh	r4, [r3, #0]
 80195c8:	6812      	ldr	r2, [r2, #0]
 80195ca:	9402      	str	r4, [sp, #8]
 80195cc:	440a      	add	r2, r1
 80195ce:	885b      	ldrh	r3, [r3, #2]
 80195d0:	4927      	ldr	r1, [pc, #156]	; (8019670 <tcp_input+0x99c>)
 80195d2:	6809      	ldr	r1, [r1, #0]
 80195d4:	e9cd 9300 	strd	r9, r3, [sp]
 80195d8:	4b28      	ldr	r3, [pc, #160]	; (801967c <tcp_input+0x9a8>)
 80195da:	f001 f9db 	bl	801a994 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80195de:	f898 3042 	ldrb.w	r3, [r8, #66]	; 0x42
 80195e2:	2b05      	cmp	r3, #5
 80195e4:	f63f adb1 	bhi.w	801914a <tcp_input+0x476>
          pcb->rtime = 0;
 80195e8:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 80195ea:	4640      	mov	r0, r8
          pcb->rtime = 0;
 80195ec:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80195f0:	f001 fc64 	bl	801aebc <tcp_rexmit_rto>
 80195f4:	e5a9      	b.n	801914a <tcp_input+0x476>
      if (ackno == pcb->snd_nxt) {
 80195f6:	4b1e      	ldr	r3, [pc, #120]	; (8019670 <tcp_input+0x99c>)
 80195f8:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	429a      	cmp	r2, r3
 8019600:	f47f ada3 	bne.w	801914a <tcp_input+0x476>
      recv_flags |= TF_RESET;
 8019604:	783a      	ldrb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019606:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      recv_flags |= TF_RESET;
 801960a:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801960e:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 8019612:	703a      	strb	r2, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019614:	f8a8 301a 	strh.w	r3, [r8, #26]
 8019618:	e597      	b.n	801914a <tcp_input+0x476>
          tcp_send_empty_ack(pcb);
 801961a:	4640      	mov	r0, r8
 801961c:	f001 fa02 	bl	801aa24 <tcp_send_empty_ack>
 8019620:	e4ca      	b.n	8018fb8 <tcp_input+0x2e4>
        TCP_STATS_INC(tcp.cachehit);
 8019622:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
 8019626:	3301      	adds	r3, #1
 8019628:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801962c:	e5d6      	b.n	80191dc <tcp_input+0x508>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801962e:	9a05      	ldr	r2, [sp, #20]
 8019630:	4650      	mov	r0, sl
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019632:	6833      	ldr	r3, [r6, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019634:	8811      	ldrh	r1, [r2, #0]
 8019636:	4a10      	ldr	r2, [pc, #64]	; (8019678 <tcp_input+0x9a4>)
 8019638:	881c      	ldrh	r4, [r3, #0]
 801963a:	6812      	ldr	r2, [r2, #0]
 801963c:	9402      	str	r4, [sp, #8]
 801963e:	440a      	add	r2, r1
 8019640:	885b      	ldrh	r3, [r3, #2]
 8019642:	490b      	ldr	r1, [pc, #44]	; (8019670 <tcp_input+0x99c>)
 8019644:	6809      	ldr	r1, [r1, #0]
 8019646:	e9cd 9300 	strd	r9, r3, [sp]
 801964a:	4b0c      	ldr	r3, [pc, #48]	; (801967c <tcp_input+0x9a8>)
 801964c:	f001 f9a2 	bl	801a994 <tcp_rst>
        pbuf_free(p);
 8019650:	4628      	mov	r0, r5
 8019652:	f7ff bb5d 	b.w	8018d10 <tcp_input+0x3c>
 8019656:	bf00      	nop
 8019658:	20022404 	.word	0x20022404
 801965c:	0803e0f4 	.word	0x0803e0f4
 8019660:	0803e088 	.word	0x0803e088
 8019664:	08026544 	.word	0x08026544
 8019668:	20036300 	.word	0x20036300
 801966c:	200223ec 	.word	0x200223ec
 8019670:	200223e8 	.word	0x200223e8
 8019674:	200362fc 	.word	0x200362fc
 8019678:	20022410 	.word	0x20022410
 801967c:	20026a88 	.word	0x20026a88
          && (ackno == pcb->lastack + 1)) {
 8019680:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8019684:	49c4      	ldr	r1, [pc, #784]	; (8019998 <tcp_input+0xcc4>)
 8019686:	3201      	adds	r2, #1
 8019688:	6809      	ldr	r1, [r1, #0]
 801968a:	428a      	cmp	r2, r1
 801968c:	d193      	bne.n	80195b6 <tcp_input+0x8e2>
        pcb->rcv_nxt = seqno + 1;
 801968e:	4bc3      	ldr	r3, [pc, #780]	; (801999c <tcp_input+0xcc8>)
        pcb->state = ESTABLISHED;
 8019690:	2104      	movs	r1, #4
        pcb->snd_wnd = tcphdr->wnd;
 8019692:	6836      	ldr	r6, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 8019694:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019696:	eb08 0401 	add.w	r4, r8, r1
        pcb->lastack = ackno;
 801969a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 801969e:	1c5a      	adds	r2, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80196a0:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80196a2:	4620      	mov	r0, r4
        pcb->rcv_nxt = seqno + 1;
 80196a4:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80196a8:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 80196ac:	89f2      	ldrh	r2, [r6, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80196ae:	f8b8 6032 	ldrh.w	r6, [r8, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80196b2:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 80196b6:	f8a8 2060 	strh.w	r2, [r8, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80196ba:	f8a8 2062 	strh.w	r2, [r8, #98]	; 0x62
        pcb->state = ESTABLISHED;
 80196be:	f888 1014 	strb.w	r1, [r8, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80196c2:	f004 fae5 	bl	801dc90 <ip4_route>
 80196c6:	4622      	mov	r2, r4
 80196c8:	4601      	mov	r1, r0
 80196ca:	4630      	mov	r0, r6
 80196cc:	f7fe fbb8 	bl	8017e40 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80196d0:	f241 131c 	movw	r3, #4380	; 0x111c
 80196d4:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80196d6:	f8a8 0032 	strh.w	r0, [r8, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80196da:	0080      	lsls	r0, r0, #2
 80196dc:	429a      	cmp	r2, r3
 80196de:	4611      	mov	r1, r2
 80196e0:	bf38      	it	cc
 80196e2:	4619      	movcc	r1, r3
 80196e4:	4288      	cmp	r0, r1
 80196e6:	f080 80b2 	bcs.w	801984e <tcp_input+0xb7a>
 80196ea:	b283      	uxth	r3, r0
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80196ec:	f8b8 2066 	ldrh.w	r2, [r8, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80196f0:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80196f4:	b932      	cbnz	r2, 8019704 <tcp_input+0xa30>
 80196f6:	4baa      	ldr	r3, [pc, #680]	; (80199a0 <tcp_input+0xccc>)
 80196f8:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80196fc:	49a9      	ldr	r1, [pc, #676]	; (80199a4 <tcp_input+0xcd0>)
 80196fe:	48aa      	ldr	r0, [pc, #680]	; (80199a8 <tcp_input+0xcd4>)
 8019700:	f006 ff4a 	bl	8020598 <iprintf>
        --pcb->snd_queuelen;
 8019704:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
        rseg = pcb->unacked;
 8019708:	f8d8 4070 	ldr.w	r4, [r8, #112]	; 0x70
        --pcb->snd_queuelen;
 801970c:	3b01      	subs	r3, #1
 801970e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
        if (rseg == NULL) {
 8019712:	2c00      	cmp	r4, #0
 8019714:	f000 80a4 	beq.w	8019860 <tcp_input+0xb8c>
          pcb->unacked = rseg->next;
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
        tcp_seg_free(rseg);
 801971e:	4620      	mov	r0, r4
 8019720:	f7fd fbdc 	bl	8016edc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8019724:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8019728:	2b00      	cmp	r3, #0
 801972a:	f000 8094 	beq.w	8019856 <tcp_input+0xb82>
          pcb->rtime = 0;
 801972e:	2300      	movs	r3, #0
 8019730:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
          pcb->nrtx = 0;
 8019734:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019738:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 801973c:	b13b      	cbz	r3, 801974e <tcp_input+0xa7a>
 801973e:	2200      	movs	r2, #0
 8019740:	4641      	mov	r1, r8
 8019742:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019746:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8019748:	300d      	adds	r0, #13
 801974a:	f43f ac3b 	beq.w	8018fc4 <tcp_input+0x2f0>
        tcp_ack_now(pcb);
 801974e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8019752:	e5e9      	b.n	8019328 <tcp_input+0x654>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019754:	4b90      	ldr	r3, [pc, #576]	; (8019998 <tcp_input+0xcc4>)
 8019756:	4422      	add	r2, r4
 8019758:	9001      	str	r0, [sp, #4]
 801975a:	4640      	mov	r0, r8
 801975c:	9102      	str	r1, [sp, #8]
 801975e:	f8cd 9000 	str.w	r9, [sp]
 8019762:	6819      	ldr	r1, [r3, #0]
 8019764:	4b91      	ldr	r3, [pc, #580]	; (80199ac <tcp_input+0xcd8>)
 8019766:	f001 f915 	bl	801a994 <tcp_rst>
        pbuf_free(p);
 801976a:	4628      	mov	r0, r5
 801976c:	f7ff bad0 	b.w	8018d10 <tcp_input+0x3c>
    tcp_ack_now(pcb);
 8019770:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    tcp_output(pcb);
 8019774:	4640      	mov	r0, r8
    tcp_ack_now(pcb);
 8019776:	f043 0302 	orr.w	r3, r3, #2
 801977a:	f8a8 301a 	strh.w	r3, [r8, #26]
    tcp_output(pcb);
 801977e:	f001 f985 	bl	801aa8c <tcp_output>
        pbuf_free(p);
 8019782:	4628      	mov	r0, r5
 8019784:	f7ff bac4 	b.w	8018d10 <tcp_input+0x3c>
      tcp_abandon(npcb, 0);
 8019788:	4648      	mov	r0, r9
 801978a:	4641      	mov	r1, r8
 801978c:	f7fd ffa4 	bl	80176d8 <tcp_abandon>
        pbuf_free(p);
 8019790:	4628      	mov	r0, r5
 8019792:	f7ff babd 	b.w	8018d10 <tcp_input+0x3c>
      TCP_STATS_INC(tcp.memerr);
 8019796:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801979a:	f8da 6018 	ldr.w	r6, [sl, #24]
      TCP_STATS_INC(tcp.memerr);
 801979e:	3301      	adds	r3, #1
 80197a0:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80197a4:	2e00      	cmp	r6, #0
 80197a6:	f43f aca8 	beq.w	80190fa <tcp_input+0x426>
 80197aa:	4601      	mov	r1, r0
 80197ac:	f04f 32ff 	mov.w	r2, #4294967295
 80197b0:	f8da 0010 	ldr.w	r0, [sl, #16]
 80197b4:	47b0      	blx	r6
        pbuf_free(p);
 80197b6:	4628      	mov	r0, r5
 80197b8:	f7ff baaa 	b.w	8018d10 <tcp_input+0x3c>
  } else if (flags & TCP_FIN) {
 80197bc:	07d8      	lsls	r0, r3, #31
 80197be:	f57f ac99 	bpl.w	80190f4 <tcp_input+0x420>
    pcb->tmr = tcp_ticks;
 80197c2:	4b7b      	ldr	r3, [pc, #492]	; (80199b0 <tcp_input+0xcdc>)
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f8c8 3020 	str.w	r3, [r8, #32]
 80197ca:	e493      	b.n	80190f4 <tcp_input+0x420>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80197cc:	4b74      	ldr	r3, [pc, #464]	; (80199a0 <tcp_input+0xccc>)
 80197ce:	f240 1215 	movw	r2, #277	; 0x115
 80197d2:	4978      	ldr	r1, [pc, #480]	; (80199b4 <tcp_input+0xce0>)
 80197d4:	4874      	ldr	r0, [pc, #464]	; (80199a8 <tcp_input+0xcd4>)
 80197d6:	f006 fedf 	bl	8020598 <iprintf>
 80197da:	f7ff bbb7 	b.w	8018f4c <tcp_input+0x278>
        TCP_STATS_INC(tcp.cachehit);
 80197de:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80197e2:	3201      	adds	r2, #1
 80197e4:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
 80197e8:	f7ff bbad 	b.w	8018f46 <tcp_input+0x272>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80197ec:	4b6c      	ldr	r3, [pc, #432]	; (80199a0 <tcp_input+0xccc>)
 80197ee:	f240 120d 	movw	r2, #269	; 0x10d
 80197f2:	4971      	ldr	r1, [pc, #452]	; (80199b8 <tcp_input+0xce4>)
 80197f4:	486c      	ldr	r0, [pc, #432]	; (80199a8 <tcp_input+0xcd4>)
 80197f6:	f006 fecf 	bl	8020598 <iprintf>
 80197fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80197fe:	f7ff bb95 	b.w	8018f2c <tcp_input+0x258>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019802:	4623      	mov	r3, r4
 8019804:	4620      	mov	r0, r4
 8019806:	4641      	mov	r1, r8
 8019808:	f7fe fa3a 	bl	8017c80 <tcp_recv_null>
 801980c:	e5e8      	b.n	80193e0 <tcp_input+0x70c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801980e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8019812:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019816:	d002      	beq.n	801981e <tcp_input+0xb4a>
              pcb->rcv_wnd++;
 8019818:	3301      	adds	r3, #1
 801981a:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801981e:	f8d8 4084 	ldr.w	r4, [r8, #132]	; 0x84
 8019822:	2c00      	cmp	r4, #0
 8019824:	f43f adf1 	beq.w	801940a <tcp_input+0x736>
 8019828:	2300      	movs	r3, #0
 801982a:	4641      	mov	r1, r8
 801982c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019830:	461a      	mov	r2, r3
 8019832:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 8019834:	300d      	adds	r0, #13
 8019836:	f47f ade8 	bne.w	801940a <tcp_input+0x736>
aborted:
 801983a:	f7ff bbc3 	b.w	8018fc4 <tcp_input+0x2f0>
            pbuf_free(recv_data);
 801983e:	4610      	mov	r0, r2
 8019840:	f7fc fc0c 	bl	801605c <pbuf_free>
            tcp_abort(pcb);
 8019844:	4640      	mov	r0, r8
 8019846:	f7fd ffe7 	bl	8017818 <tcp_abort>
            goto aborted;
 801984a:	f7ff bbbb 	b.w	8018fc4 <tcp_input+0x2f0>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801984e:	429a      	cmp	r2, r3
 8019850:	bf88      	it	hi
 8019852:	b293      	uxthhi	r3, r2
 8019854:	e74a      	b.n	80196ec <tcp_input+0xa18>
          pcb->rtime = -1;
 8019856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801985a:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 801985e:	e76b      	b.n	8019738 <tcp_input+0xa64>
          rseg = pcb->unsent;
 8019860:	f8d8 406c 	ldr.w	r4, [r8, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019864:	b934      	cbnz	r4, 8019874 <tcp_input+0xba0>
 8019866:	4b4e      	ldr	r3, [pc, #312]	; (80199a0 <tcp_input+0xccc>)
 8019868:	f44f 725d 	mov.w	r2, #884	; 0x374
 801986c:	4953      	ldr	r1, [pc, #332]	; (80199bc <tcp_input+0xce8>)
 801986e:	484e      	ldr	r0, [pc, #312]	; (80199a8 <tcp_input+0xcd4>)
 8019870:	f006 fe92 	bl	8020598 <iprintf>
          pcb->unsent = rseg->next;
 8019874:	6823      	ldr	r3, [r4, #0]
 8019876:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 801987a:	e750      	b.n	801971e <tcp_input+0xa4a>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801987c:	0798      	lsls	r0, r3, #30
 801987e:	f57f ac64 	bpl.w	801914a <tcp_input+0x476>
 8019882:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8019886:	4a45      	ldr	r2, [pc, #276]	; (801999c <tcp_input+0xcc8>)
 8019888:	3b01      	subs	r3, #1
 801988a:	6812      	ldr	r2, [r2, #0]
 801988c:	4293      	cmp	r3, r2
 801988e:	f47f ac5c 	bne.w	801914a <tcp_input+0x476>
        tcp_rexmit(pcb);
 8019892:	4640      	mov	r0, r8
 8019894:	f001 f800 	bl	801a898 <tcp_rexmit>
 8019898:	e457      	b.n	801914a <tcp_input+0x476>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801989a:	2900      	cmp	r1, #0
 801989c:	f47f aeb2 	bne.w	8019604 <tcp_input+0x930>
 80198a0:	4b3f      	ldr	r3, [pc, #252]	; (80199a0 <tcp_input+0xccc>)
 80198a2:	f44f 724e 	mov.w	r2, #824	; 0x338
 80198a6:	4946      	ldr	r1, [pc, #280]	; (80199c0 <tcp_input+0xcec>)
 80198a8:	483f      	ldr	r0, [pc, #252]	; (80199a8 <tcp_input+0xcd4>)
 80198aa:	f006 fe75 	bl	8020598 <iprintf>
 80198ae:	e6a9      	b.n	8019604 <tcp_input+0x930>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80198b0:	06db      	lsls	r3, r3, #27
 80198b2:	f57f ac4a 	bpl.w	801914a <tcp_input+0x476>
 80198b6:	4b38      	ldr	r3, [pc, #224]	; (8019998 <tcp_input+0xcc4>)
 80198b8:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	429a      	cmp	r2, r3
 80198c0:	f47f ac43 	bne.w	801914a <tcp_input+0x476>
 80198c4:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	f47f ac3e 	bne.w	801914a <tcp_input+0x476>
        pcb->state = FIN_WAIT_2;
 80198ce:	2306      	movs	r3, #6
 80198d0:	f888 3014 	strb.w	r3, [r8, #20]
 80198d4:	e439      	b.n	801914a <tcp_input+0x476>
          pcb->state = ESTABLISHED;
 80198d6:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 80198d8:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 80198dc:	f888 2014 	strb.w	r2, [r8, #20]
          if (pcb->listener == NULL) {
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d0af      	beq.n	8019844 <tcp_input+0xb70>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80198e4:	699b      	ldr	r3, [r3, #24]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d074      	beq.n	80199d4 <tcp_input+0xd00>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80198ea:	2200      	movs	r2, #0
 80198ec:	4641      	mov	r1, r8
 80198ee:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80198f2:	4798      	blx	r3
          if (err != ERR_OK) {
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d033      	beq.n	8019960 <tcp_input+0xc8c>
            if (err != ERR_ABRT) {
 80198f8:	300d      	adds	r0, #13
 80198fa:	f43f ab63 	beq.w	8018fc4 <tcp_input+0x2f0>
 80198fe:	e7a1      	b.n	8019844 <tcp_input+0xb70>
        TCP_RMV_ACTIVE(pcb);
 8019900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019904:	4a2f      	ldr	r2, [pc, #188]	; (80199c4 <tcp_input+0xcf0>)
 8019906:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019908:	4b2f      	ldr	r3, [pc, #188]	; (80199c8 <tcp_input+0xcf4>)
        pcb->state = TIME_WAIT;
 801990a:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 801990c:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 801990e:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019910:	f888 0014 	strb.w	r0, [r8, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019914:	f8c8 200c 	str.w	r2, [r8, #12]
        TCP_RMV_ACTIVE(pcb);
 8019918:	4a2c      	ldr	r2, [pc, #176]	; (80199cc <tcp_input+0xcf8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 801991a:	f8c3 8000 	str.w	r8, [r3]
        TCP_RMV_ACTIVE(pcb);
 801991e:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019920:	f001 fbea 	bl	801b0f8 <tcp_timer_needed>
 8019924:	e411      	b.n	801914a <tcp_input+0x476>
        TCP_RMV_ACTIVE(pcb);
 8019926:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801992a:	60da      	str	r2, [r3, #12]
 801992c:	e7ec      	b.n	8019908 <tcp_input+0xc34>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801992e:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019932:	2b00      	cmp	r3, #0
 8019934:	f47f adfc 	bne.w	8019530 <tcp_input+0x85c>
          tcp_ack_now(pcb);
 8019938:	f8b8 301a 	ldrh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 801993c:	4640      	mov	r0, r8
          tcp_ack_now(pcb);
 801993e:	f043 0302 	orr.w	r3, r3, #2
 8019942:	f8a8 301a 	strh.w	r3, [r8, #26]
          tcp_pcb_purge(pcb);
 8019946:	f7fd fb9d 	bl	8017084 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801994a:	4b1e      	ldr	r3, [pc, #120]	; (80199c4 <tcp_input+0xcf0>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	4543      	cmp	r3, r8
 8019950:	d0d6      	beq.n	8019900 <tcp_input+0xc2c>
 8019952:	2b00      	cmp	r3, #0
 8019954:	d0d8      	beq.n	8019908 <tcp_input+0xc34>
 8019956:	68da      	ldr	r2, [r3, #12]
 8019958:	4542      	cmp	r2, r8
 801995a:	d0e4      	beq.n	8019926 <tcp_input+0xc52>
 801995c:	4613      	mov	r3, r2
 801995e:	e7f8      	b.n	8019952 <tcp_input+0xc7e>
          tcp_receive(pcb);
 8019960:	4640      	mov	r0, r8
 8019962:	f7fe fd0d 	bl	8018380 <tcp_receive>
          if (recv_acked != 0) {
 8019966:	4a1a      	ldr	r2, [pc, #104]	; (80199d0 <tcp_input+0xcfc>)
 8019968:	8813      	ldrh	r3, [r2, #0]
 801996a:	b10b      	cbz	r3, 8019970 <tcp_input+0xc9c>
            recv_acked--;
 801996c:	3b01      	subs	r3, #1
 801996e:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019970:	f8b8 2032 	ldrh.w	r2, [r8, #50]	; 0x32
 8019974:	f241 131c 	movw	r3, #4380	; 0x111c
 8019978:	0051      	lsls	r1, r2, #1
 801997a:	0092      	lsls	r2, r2, #2
 801997c:	4299      	cmp	r1, r3
 801997e:	4608      	mov	r0, r1
 8019980:	bf38      	it	cc
 8019982:	4618      	movcc	r0, r3
 8019984:	4282      	cmp	r2, r0
 8019986:	d233      	bcs.n	80199f0 <tcp_input+0xd1c>
 8019988:	b293      	uxth	r3, r2
          if (recv_flags & TF_GOT_FIN) {
 801998a:	783a      	ldrb	r2, [r7, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801998c:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8019990:	0694      	lsls	r4, r2, #26
 8019992:	f57f abda 	bpl.w	801914a <tcp_input+0x476>
 8019996:	e5dc      	b.n	8019552 <tcp_input+0x87e>
 8019998:	200223e8 	.word	0x200223e8
 801999c:	20022410 	.word	0x20022410
 80199a0:	0803e0f4 	.word	0x0803e0f4
 80199a4:	0803e03c 	.word	0x0803e03c
 80199a8:	08026544 	.word	0x08026544
 80199ac:	20026a88 	.word	0x20026a88
 80199b0:	20036300 	.word	0x20036300
 80199b4:	0803dfc0 	.word	0x0803dfc0
 80199b8:	0803df94 	.word	0x0803df94
 80199bc:	0803e054 	.word	0x0803e054
 80199c0:	0803e01c 	.word	0x0803e01c
 80199c4:	200362fc 	.word	0x200362fc
 80199c8:	2003630c 	.word	0x2003630c
 80199cc:	200362f8 	.word	0x200362f8
 80199d0:	20022404 	.word	0x20022404
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80199d4:	4b08      	ldr	r3, [pc, #32]	; (80199f8 <tcp_input+0xd24>)
 80199d6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80199da:	4908      	ldr	r1, [pc, #32]	; (80199fc <tcp_input+0xd28>)
 80199dc:	4808      	ldr	r0, [pc, #32]	; (8019a00 <tcp_input+0xd2c>)
 80199de:	f006 fddb 	bl	8020598 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80199e2:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 80199e6:	699b      	ldr	r3, [r3, #24]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	f47f af7e 	bne.w	80198ea <tcp_input+0xc16>
 80199ee:	e729      	b.n	8019844 <tcp_input+0xb70>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80199f0:	4299      	cmp	r1, r3
 80199f2:	bf88      	it	hi
 80199f4:	b28b      	uxthhi	r3, r1
 80199f6:	e7c8      	b.n	801998a <tcp_input+0xcb6>
 80199f8:	0803e0f4 	.word	0x0803e0f4
 80199fc:	0803e068 	.word	0x0803e068
 8019a00:	08026544 	.word	0x08026544

08019a04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8019a04:	4a02      	ldr	r2, [pc, #8]	; (8019a10 <tcp_trigger_input_pcb_close+0xc>)
 8019a06:	7813      	ldrb	r3, [r2, #0]
 8019a08:	f043 0310 	orr.w	r3, r3, #16
 8019a0c:	7013      	strb	r3, [r2, #0]
}
 8019a0e:	4770      	bx	lr
 8019a10:	2002240c 	.word	0x2002240c

08019a14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019a14:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019a16:	4604      	mov	r4, r0
 8019a18:	b130      	cbz	r0, 8019a28 <tcp_output_segment_busy+0x14>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019a1a:	6863      	ldr	r3, [r4, #4]
 8019a1c:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8019a1e:	f110 30ff 	adds.w	r0, r0, #4294967295
 8019a22:	bf18      	it	ne
 8019a24:	2001      	movne	r0, #1
 8019a26:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019a28:	4b03      	ldr	r3, [pc, #12]	; (8019a38 <tcp_output_segment_busy+0x24>)
 8019a2a:	f240 529a 	movw	r2, #1434	; 0x59a
 8019a2e:	4903      	ldr	r1, [pc, #12]	; (8019a3c <tcp_output_segment_busy+0x28>)
 8019a30:	4803      	ldr	r0, [pc, #12]	; (8019a40 <tcp_output_segment_busy+0x2c>)
 8019a32:	f006 fdb1 	bl	8020598 <iprintf>
 8019a36:	e7f0      	b.n	8019a1a <tcp_output_segment_busy+0x6>
 8019a38:	0803e518 	.word	0x0803e518
 8019a3c:	0803e54c 	.word	0x0803e54c
 8019a40:	08026544 	.word	0x08026544

08019a44 <tcp_pbuf_prealloc>:
{
 8019a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a48:	9c08      	ldr	r4, [sp, #32]
 8019a4a:	4607      	mov	r7, r0
 8019a4c:	460d      	mov	r5, r1
 8019a4e:	4690      	mov	r8, r2
 8019a50:	461e      	mov	r6, r3
 8019a52:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8019a56:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019a5a:	2c00      	cmp	r4, #0
 8019a5c:	d034      	beq.n	8019ac8 <tcp_pbuf_prealloc+0x84>
  if (length < max_length) {
 8019a5e:	4545      	cmp	r5, r8
 8019a60:	d20f      	bcs.n	8019a82 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019a62:	f019 0f02 	tst.w	r9, #2
 8019a66:	d009      	beq.n	8019a7c <tcp_pbuf_prealloc+0x38>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019a68:	f205 211b 	addw	r1, r5, #539	; 0x21b
 8019a6c:	f021 0103 	bic.w	r1, r1, #3
 8019a70:	4541      	cmp	r1, r8
 8019a72:	460a      	mov	r2, r1
 8019a74:	bf28      	it	cs
 8019a76:	4642      	movcs	r2, r8
 8019a78:	b291      	uxth	r1, r2
 8019a7a:	e003      	b.n	8019a84 <tcp_pbuf_prealloc+0x40>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019a7c:	8b63      	ldrh	r3, [r4, #26]
 8019a7e:	065b      	lsls	r3, r3, #25
 8019a80:	d518      	bpl.n	8019ab4 <tcp_pbuf_prealloc+0x70>
 8019a82:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019a84:	4638      	mov	r0, r7
 8019a86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a8a:	f7fc fb55 	bl	8016138 <pbuf_alloc>
  if (p == NULL) {
 8019a8e:	4604      	mov	r4, r0
 8019a90:	b168      	cbz	r0, 8019aae <tcp_pbuf_prealloc+0x6a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019a92:	6803      	ldr	r3, [r0, #0]
 8019a94:	b133      	cbz	r3, 8019aa4 <tcp_pbuf_prealloc+0x60>
 8019a96:	4b10      	ldr	r3, [pc, #64]	; (8019ad8 <tcp_pbuf_prealloc+0x94>)
 8019a98:	f240 120b 	movw	r2, #267	; 0x10b
 8019a9c:	490f      	ldr	r1, [pc, #60]	; (8019adc <tcp_pbuf_prealloc+0x98>)
 8019a9e:	4810      	ldr	r0, [pc, #64]	; (8019ae0 <tcp_pbuf_prealloc+0x9c>)
 8019aa0:	f006 fd7a 	bl	8020598 <iprintf>
  *oversize = p->len - length;
 8019aa4:	8963      	ldrh	r3, [r4, #10]
 8019aa6:	1b5b      	subs	r3, r3, r5
 8019aa8:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 8019aaa:	8125      	strh	r5, [r4, #8]
 8019aac:	8165      	strh	r5, [r4, #10]
}
 8019aae:	4620      	mov	r0, r4
 8019ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 8019ab4:	f1ba 0f00 	cmp.w	sl, #0
 8019ab8:	d0d6      	beq.n	8019a68 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 8019aba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d1d3      	bne.n	8019a68 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 8019ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d1d0      	bne.n	8019a68 <tcp_pbuf_prealloc+0x24>
 8019ac6:	e7dc      	b.n	8019a82 <tcp_pbuf_prealloc+0x3e>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019ac8:	4b03      	ldr	r3, [pc, #12]	; (8019ad8 <tcp_pbuf_prealloc+0x94>)
 8019aca:	22e9      	movs	r2, #233	; 0xe9
 8019acc:	4905      	ldr	r1, [pc, #20]	; (8019ae4 <tcp_pbuf_prealloc+0xa0>)
 8019ace:	4804      	ldr	r0, [pc, #16]	; (8019ae0 <tcp_pbuf_prealloc+0x9c>)
 8019ad0:	f006 fd62 	bl	8020598 <iprintf>
 8019ad4:	e7c3      	b.n	8019a5e <tcp_pbuf_prealloc+0x1a>
 8019ad6:	bf00      	nop
 8019ad8:	0803e518 	.word	0x0803e518
 8019adc:	0803e594 	.word	0x0803e594
 8019ae0:	08026544 	.word	0x08026544
 8019ae4:	0803e574 	.word	0x0803e574

08019ae8 <tcp_create_segment>:
{
 8019ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aec:	460e      	mov	r6, r1
 8019aee:	4617      	mov	r7, r2
 8019af0:	4699      	mov	r9, r3
 8019af2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019af6:	4680      	mov	r8, r0
 8019af8:	2800      	cmp	r0, #0
 8019afa:	d056      	beq.n	8019baa <tcp_create_segment+0xc2>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019afc:	2e00      	cmp	r6, #0
 8019afe:	d05c      	beq.n	8019bba <tcp_create_segment+0xd2>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019b00:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b02:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019b06:	22a8      	movs	r2, #168	; 0xa8
 8019b08:	4937      	ldr	r1, [pc, #220]	; (8019be8 <tcp_create_segment+0x100>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b0a:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019b0c:	f7fb ffa8 	bl	8015a60 <memp_malloc_fn>
 8019b10:	4604      	mov	r4, r0
 8019b12:	2800      	cmp	r0, #0
 8019b14:	d063      	beq.n	8019bde <tcp_create_segment+0xf6>
  seg->flags = optflags;
 8019b16:	f880 a00c 	strb.w	sl, [r0, #12]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019b1a:	fa1f fa85 	uxth.w	sl, r5
 8019b1e:	8933      	ldrh	r3, [r6, #8]
  seg->next = NULL;
 8019b20:	2200      	movs	r2, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019b22:	4553      	cmp	r3, sl
  seg->next = NULL;
 8019b24:	e9c0 2600 	strd	r2, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019b28:	d337      	bcc.n	8019b9a <tcp_create_segment+0xb2>
  seg->len = p->tot_len - optlen;
 8019b2a:	eba3 030a 	sub.w	r3, r3, sl
  seg->oversize_left = 0;
 8019b2e:	f04f 0a00 	mov.w	sl, #0
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019b32:	4630      	mov	r0, r6
 8019b34:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8019b36:	8123      	strh	r3, [r4, #8]
  seg->oversize_left = 0;
 8019b38:	f8a4 a00a 	strh.w	sl, [r4, #10]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019b3c:	f7fc fa4e 	bl	8015fdc <pbuf_add_header>
 8019b40:	4606      	mov	r6, r0
 8019b42:	2800      	cmp	r0, #0
 8019b44:	d140      	bne.n	8019bc8 <tcp_create_segment+0xe0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019b46:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019b48:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019b4a:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019b4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019b52:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019b54:	f8c4 a010 	str.w	sl, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019b58:	f7fa fc10 	bl	801437c <lwip_htons>
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019b5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019b60:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019b64:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8019b68:	f7fa fc08 	bl	801437c <lwip_htons>
 8019b6c:	f8ab 0002 	strh.w	r0, [fp, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019b70:	4648      	mov	r0, r9
 8019b72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019b76:	f7fa fc05 	bl	8014384 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019b7a:	f8d4 8010 	ldr.w	r8, [r4, #16]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019b7e:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019b82:	ea47 3005 	orr.w	r0, r7, r5, lsl #12
 8019b86:	f7fa fbf9 	bl	801437c <lwip_htons>
  seg->tcphdr->urgp = 0;
 8019b8a:	6923      	ldr	r3, [r4, #16]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019b8c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8019b90:	749e      	strb	r6, [r3, #18]
 8019b92:	74de      	strb	r6, [r3, #19]
}
 8019b94:	4620      	mov	r0, r4
 8019b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019b9a:	4b13      	ldr	r3, [pc, #76]	; (8019be8 <tcp_create_segment+0x100>)
 8019b9c:	22b0      	movs	r2, #176	; 0xb0
 8019b9e:	4913      	ldr	r1, [pc, #76]	; (8019bec <tcp_create_segment+0x104>)
 8019ba0:	4813      	ldr	r0, [pc, #76]	; (8019bf0 <tcp_create_segment+0x108>)
 8019ba2:	f006 fcf9 	bl	8020598 <iprintf>
 8019ba6:	8933      	ldrh	r3, [r6, #8]
 8019ba8:	e7bf      	b.n	8019b2a <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019baa:	4b0f      	ldr	r3, [pc, #60]	; (8019be8 <tcp_create_segment+0x100>)
 8019bac:	22a3      	movs	r2, #163	; 0xa3
 8019bae:	4911      	ldr	r1, [pc, #68]	; (8019bf4 <tcp_create_segment+0x10c>)
 8019bb0:	480f      	ldr	r0, [pc, #60]	; (8019bf0 <tcp_create_segment+0x108>)
 8019bb2:	f006 fcf1 	bl	8020598 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019bb6:	2e00      	cmp	r6, #0
 8019bb8:	d1a2      	bne.n	8019b00 <tcp_create_segment+0x18>
 8019bba:	4b0b      	ldr	r3, [pc, #44]	; (8019be8 <tcp_create_segment+0x100>)
 8019bbc:	22a4      	movs	r2, #164	; 0xa4
 8019bbe:	490e      	ldr	r1, [pc, #56]	; (8019bf8 <tcp_create_segment+0x110>)
 8019bc0:	480b      	ldr	r0, [pc, #44]	; (8019bf0 <tcp_create_segment+0x108>)
 8019bc2:	f006 fce9 	bl	8020598 <iprintf>
 8019bc6:	e79b      	b.n	8019b00 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 8019bc8:	4a0c      	ldr	r2, [pc, #48]	; (8019bfc <tcp_create_segment+0x114>)
    tcp_seg_free(seg);
 8019bca:	4620      	mov	r0, r4
    return NULL;
 8019bcc:	4654      	mov	r4, sl
    TCP_STATS_INC(tcp.err);
 8019bce:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8019bd2:	3301      	adds	r3, #1
 8019bd4:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 8019bd8:	f7fd f980 	bl	8016edc <tcp_seg_free>
    return NULL;
 8019bdc:	e7da      	b.n	8019b94 <tcp_create_segment+0xac>
    pbuf_free(p);
 8019bde:	4630      	mov	r0, r6
 8019be0:	f7fc fa3c 	bl	801605c <pbuf_free>
    return NULL;
 8019be4:	e7d6      	b.n	8019b94 <tcp_create_segment+0xac>
 8019be6:	bf00      	nop
 8019be8:	0803e518 	.word	0x0803e518
 8019bec:	0803e2ac 	.word	0x0803e2ac
 8019bf0:	08026544 	.word	0x08026544
 8019bf4:	0803e268 	.word	0x0803e268
 8019bf8:	0803e288 	.word	0x0803e288
 8019bfc:	200361ec 	.word	0x200361ec

08019c00 <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019c00:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8019c02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019c06:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8019c08:	4680      	mov	r8, r0
 8019c0a:	4691      	mov	r9, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019c0c:	2022      	movs	r0, #34	; 0x22
 8019c0e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8019c12:	469b      	mov	fp, r3
 8019c14:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
 8019c18:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8019c1c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019c20:	f7fc fa8a 	bl	8016138 <pbuf_alloc>
  if (p != NULL) {
 8019c24:	4605      	mov	r5, r0
 8019c26:	b1f8      	cbz	r0, 8019c68 <tcp_output_alloc_header_common.constprop.4+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019c28:	8943      	ldrh	r3, [r0, #10]
 8019c2a:	2b13      	cmp	r3, #19
 8019c2c:	d91f      	bls.n	8019c6e <tcp_output_alloc_header_common.constprop.4+0x6e>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019c2e:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8019c30:	4658      	mov	r0, fp
 8019c32:	f7fa fba3 	bl	801437c <lwip_htons>
 8019c36:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019c38:	4650      	mov	r0, sl
 8019c3a:	f7fa fb9f 	bl	801437c <lwip_htons>
    tcphdr->seqno = seqno_be;
 8019c3e:	f8c4 9004 	str.w	r9, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8019c42:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8019c44:	4640      	mov	r0, r8
 8019c46:	f7fa fb9d 	bl	8014384 <lwip_htonl>
 8019c4a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019c4c:	f447 40a0 	orr.w	r0, r7, #20480	; 0x5000
 8019c50:	f7fa fb94 	bl	801437c <lwip_htons>
 8019c54:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019c56:	4630      	mov	r0, r6
 8019c58:	f7fa fb90 	bl	801437c <lwip_htons>
    tcphdr->chksum = 0;
 8019c5c:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8019c5e:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8019c60:	7423      	strb	r3, [r4, #16]
 8019c62:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8019c64:	74a3      	strb	r3, [r4, #18]
 8019c66:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 8019c68:	4628      	mov	r0, r5
 8019c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019c6e:	4b04      	ldr	r3, [pc, #16]	; (8019c80 <tcp_output_alloc_header_common.constprop.4+0x80>)
 8019c70:	f240 7224 	movw	r2, #1828	; 0x724
 8019c74:	4903      	ldr	r1, [pc, #12]	; (8019c84 <tcp_output_alloc_header_common.constprop.4+0x84>)
 8019c76:	4804      	ldr	r0, [pc, #16]	; (8019c88 <tcp_output_alloc_header_common.constprop.4+0x88>)
 8019c78:	f006 fc8e 	bl	8020598 <iprintf>
 8019c7c:	e7d7      	b.n	8019c2e <tcp_output_alloc_header_common.constprop.4+0x2e>
 8019c7e:	bf00      	nop
 8019c80:	0803e518 	.word	0x0803e518
 8019c84:	0803e494 	.word	0x0803e494
 8019c88:	08026544 	.word	0x08026544

08019c8c <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8019c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c90:	460f      	mov	r7, r1
 8019c92:	b084      	sub	sp, #16
 8019c94:	4690      	mov	r8, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019c96:	4604      	mov	r4, r0
 8019c98:	b198      	cbz	r0, 8019cc2 <tcp_output_alloc_header.constprop.3+0x36>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019c9a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 8019c9c:	2510      	movs	r5, #16
 8019c9e:	8ae3      	ldrh	r3, [r4, #22]
 8019ca0:	4642      	mov	r2, r8
 8019ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019ca4:	4639      	mov	r1, r7
 8019ca6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8019caa:	8b25      	ldrh	r5, [r4, #24]
 8019cac:	9500      	str	r5, [sp, #0]
 8019cae:	f7ff ffa7 	bl	8019c00 <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019cb2:	b118      	cbz	r0, 8019cbc <tcp_output_alloc_header.constprop.3+0x30>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019cb4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8019cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019cb8:	4413      	add	r3, r2
 8019cba:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 8019cbc:	b004      	add	sp, #16
 8019cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019cc2:	4b04      	ldr	r3, [pc, #16]	; (8019cd4 <tcp_output_alloc_header.constprop.3+0x48>)
 8019cc4:	f240 7242 	movw	r2, #1858	; 0x742
 8019cc8:	4903      	ldr	r1, [pc, #12]	; (8019cd8 <tcp_output_alloc_header.constprop.3+0x4c>)
 8019cca:	4804      	ldr	r0, [pc, #16]	; (8019cdc <tcp_output_alloc_header.constprop.3+0x50>)
 8019ccc:	f006 fc64 	bl	8020598 <iprintf>
 8019cd0:	e7e3      	b.n	8019c9a <tcp_output_alloc_header.constprop.3+0xe>
 8019cd2:	bf00      	nop
 8019cd4:	0803e518 	.word	0x0803e518
 8019cd8:	0803e46c 	.word	0x0803e46c
 8019cdc:	08026544 	.word	0x08026544

08019ce0 <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019ce0:	b100      	cbz	r0, 8019ce4 <tcp_output_fill_options.isra.0.constprop.5+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019ce2:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019ce4:	4b03      	ldr	r3, [pc, #12]	; (8019cf4 <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 8019ce6:	f240 7256 	movw	r2, #1878	; 0x756
 8019cea:	4903      	ldr	r1, [pc, #12]	; (8019cf8 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 8019cec:	4803      	ldr	r0, [pc, #12]	; (8019cfc <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 8019cee:	f006 bc53 	b.w	8020598 <iprintf>
 8019cf2:	bf00      	nop
 8019cf4:	0803e518 	.word	0x0803e518
 8019cf8:	0803e4f0 	.word	0x0803e4f0
 8019cfc:	08026544 	.word	0x08026544

08019d00 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d04:	4605      	mov	r5, r0
 8019d06:	b085      	sub	sp, #20
 8019d08:	4690      	mov	r8, r2
 8019d0a:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019d0c:	460c      	mov	r4, r1
 8019d0e:	2900      	cmp	r1, #0
 8019d10:	d03d      	beq.n	8019d8e <tcp_output_control_segment+0x8e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019d12:	2d00      	cmp	r5, #0
 8019d14:	d044      	beq.n	8019da0 <tcp_output_control_segment+0xa0>
 8019d16:	7a28      	ldrb	r0, [r5, #8]
 8019d18:	bb58      	cbnz	r0, 8019d72 <tcp_output_control_segment+0x72>
    return ip_route(src, dst);
 8019d1a:	4630      	mov	r0, r6
 8019d1c:	f003 ffb8 	bl	801dc90 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8019d20:	4607      	mov	r7, r0
 8019d22:	b358      	cbz	r0, 8019d7c <tcp_output_control_segment+0x7c>
    err = ERR_RTE;
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8019d24:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8019d28:	4643      	mov	r3, r8
 8019d2a:	8922      	ldrh	r2, [r4, #8]
 8019d2c:	2106      	movs	r1, #6
 8019d2e:	9600      	str	r6, [sp, #0]
 8019d30:	4620      	mov	r0, r4
 8019d32:	f7fb f8df 	bl	8014ef4 <ip_chksum_pseudo>
 8019d36:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019d3a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 8019d3c:	7aad      	ldrb	r5, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 8019d3e:	f8df c094 	ldr.w	ip, [pc, #148]	; 8019dd4 <tcp_output_control_segment+0xd4>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019d42:	f04f 0e06 	mov.w	lr, #6
 8019d46:	9500      	str	r5, [sp, #0]
 8019d48:	4632      	mov	r2, r6
    TCP_STATS_INC(tcp.xmit);
 8019d4a:	f8bc 0090 	ldrh.w	r0, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019d4e:	4641      	mov	r1, r8
 8019d50:	f8cd e004 	str.w	lr, [sp, #4]
    TCP_STATS_INC(tcp.xmit);
 8019d54:	1c45      	adds	r5, r0, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019d56:	9702      	str	r7, [sp, #8]
 8019d58:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 8019d5a:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019d5e:	f004 f9af 	bl	801e0c0 <ip4_output_if>
 8019d62:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019d64:	4620      	mov	r0, r4
 8019d66:	f7fc f979 	bl	801605c <pbuf_free>
  return err;
}
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	b005      	add	sp, #20
 8019d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 8019d72:	f7fc f88d 	bl	8015e90 <netif_get_by_index>
  if (netif == NULL) {
 8019d76:	4607      	mov	r7, r0
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	d1d3      	bne.n	8019d24 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 8019d7c:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 8019d80:	4620      	mov	r0, r4
 8019d82:	f7fc f96b 	bl	801605c <pbuf_free>
}
 8019d86:	4628      	mov	r0, r5
 8019d88:	b005      	add	sp, #20
 8019d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019d8e:	4b0e      	ldr	r3, [pc, #56]	; (8019dc8 <tcp_output_control_segment+0xc8>)
 8019d90:	f240 7287 	movw	r2, #1927	; 0x787
 8019d94:	490d      	ldr	r1, [pc, #52]	; (8019dcc <tcp_output_control_segment+0xcc>)
 8019d96:	480e      	ldr	r0, [pc, #56]	; (8019dd0 <tcp_output_control_segment+0xd0>)
 8019d98:	f006 fbfe 	bl	8020598 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019d9c:	2d00      	cmp	r5, #0
 8019d9e:	d1ba      	bne.n	8019d16 <tcp_output_control_segment+0x16>
    return ip_route(src, dst);
 8019da0:	4630      	mov	r0, r6
 8019da2:	f003 ff75 	bl	801dc90 <ip4_route>
  if (netif == NULL) {
 8019da6:	4607      	mov	r7, r0
 8019da8:	2800      	cmp	r0, #0
 8019daa:	d0e7      	beq.n	8019d7c <tcp_output_control_segment+0x7c>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8019dac:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8019db0:	4643      	mov	r3, r8
 8019db2:	8922      	ldrh	r2, [r4, #8]
 8019db4:	2106      	movs	r1, #6
 8019db6:	9600      	str	r6, [sp, #0]
 8019db8:	4620      	mov	r0, r4
 8019dba:	f7fb f89b 	bl	8014ef4 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 8019dbe:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8019dc0:	f8a9 0010 	strh.w	r0, [r9, #16]
 8019dc4:	e7bb      	b.n	8019d3e <tcp_output_control_segment+0x3e>
 8019dc6:	bf00      	nop
 8019dc8:	0803e518 	.word	0x0803e518
 8019dcc:	0803e4c4 	.word	0x0803e4c4
 8019dd0:	08026544 	.word	0x08026544
 8019dd4:	200361ec 	.word	0x200361ec

08019dd8 <tcp_write>:
{
 8019dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 8019ddc:	2400      	movs	r4, #0
{
 8019dde:	b091      	sub	sp, #68	; 0x44
 8019de0:	9105      	str	r1, [sp, #20]
 8019de2:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 8019de4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019de8:	2800      	cmp	r0, #0
 8019dea:	f000 831d 	beq.w	801a428 <tcp_write+0x650>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019dee:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8019df2:	4680      	mov	r8, r0
 8019df4:	f8b0 a032 	ldrh.w	sl, [r0, #50]	; 0x32
 8019df8:	085b      	lsrs	r3, r3, #1
 8019dfa:	4553      	cmp	r3, sl
 8019dfc:	bf28      	it	cs
 8019dfe:	4653      	movcs	r3, sl
  mss_local = mss_local ? mss_local : pcb->mss;
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	bf18      	it	ne
 8019e04:	469a      	movne	sl, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019e06:	9b05      	ldr	r3, [sp, #20]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 82f9 	beq.w	801a400 <tcp_write+0x628>
  if ((pcb->state != ESTABLISHED) &&
 8019e0e:	7d03      	ldrb	r3, [r0, #20]
 8019e10:	4691      	mov	r9, r2
      (pcb->state != CLOSE_WAIT) &&
 8019e12:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 8019e14:	2a02      	cmp	r2, #2
 8019e16:	d902      	bls.n	8019e1e <tcp_write+0x46>
 8019e18:	2b07      	cmp	r3, #7
 8019e1a:	f040 8280 	bne.w	801a31e <tcp_write+0x546>
  } else if (len == 0) {
 8019e1e:	f1b9 0f00 	cmp.w	r9, #0
 8019e22:	f000 809b 	beq.w	8019f5c <tcp_write+0x184>
  if (len > pcb->snd_buf) {
 8019e26:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019e2a:	454b      	cmp	r3, r9
 8019e2c:	f0c0 82d0 	bcc.w	801a3d0 <tcp_write+0x5f8>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019e30:	f8b8 7066 	ldrh.w	r7, [r8, #102]	; 0x66
 8019e34:	2f08      	cmp	r7, #8
 8019e36:	f200 82d4 	bhi.w	801a3e2 <tcp_write+0x60a>
 8019e3a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 8019e3e:	2f00      	cmp	r7, #0
 8019e40:	f000 8081 	beq.w	8019f46 <tcp_write+0x16e>
 8019e44:	f8d8 206c 	ldr.w	r2, [r8, #108]	; 0x6c
 8019e48:	9208      	str	r2, [sp, #32]
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	f040 808b 	bne.w	8019f66 <tcp_write+0x18e>
 8019e50:	2a00      	cmp	r2, #0
 8019e52:	f000 825f 	beq.w	801a314 <tcp_write+0x53c>
 8019e56:	9b08      	ldr	r3, [sp, #32]
 8019e58:	e000      	b.n	8019e5c <tcp_write+0x84>
 8019e5a:	4633      	mov	r3, r6
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019e5c:	681e      	ldr	r6, [r3, #0]
 8019e5e:	2e00      	cmp	r6, #0
 8019e60:	d1fb      	bne.n	8019e5a <tcp_write+0x82>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019e62:	7b1d      	ldrb	r5, [r3, #12]
 8019e64:	9308      	str	r3, [sp, #32]
 8019e66:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019e68:	891b      	ldrh	r3, [r3, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8019e6a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019e6e:	195a      	adds	r2, r3, r5
 8019e70:	4592      	cmp	sl, r2
 8019e72:	f2c0 8171 	blt.w	801a158 <tcp_write+0x380>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019e76:	ebaa 0403 	sub.w	r4, sl, r3
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019e7a:	9b08      	ldr	r3, [sp, #32]
 8019e7c:	895a      	ldrh	r2, [r3, #10]
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019e7e:	1b64      	subs	r4, r4, r5
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019e80:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 8019e84:	920a      	str	r2, [sp, #40]	; 0x28
    space = mss_local - (last_unsent->len + unsent_optlen);
 8019e86:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8019e88:	4293      	cmp	r3, r2
 8019e8a:	f040 811f 	bne.w	801a0cc <tcp_write+0x2f4>
    oversize = pcb->unsent_oversize;
 8019e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e90:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 8019e94:	b303      	cbz	r3, 8019ed8 <tcp_write+0x100>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019e96:	429c      	cmp	r4, r3
 8019e98:	f0c0 81f7 	bcc.w	801a28a <tcp_write+0x4b2>
 8019e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019e9e:	454b      	cmp	r3, r9
 8019ea0:	461a      	mov	r2, r3
 8019ea2:	bf28      	it	cs
 8019ea4:	464a      	movcs	r2, r9
 8019ea6:	42a2      	cmp	r2, r4
 8019ea8:	bfa8      	it	ge
 8019eaa:	4622      	movge	r2, r4
 8019eac:	b292      	uxth	r2, r2
      oversize -= oversize_used;
 8019eae:	1a9b      	subs	r3, r3, r2
      space -= oversize_used;
 8019eb0:	1aa4      	subs	r4, r4, r2
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019eb2:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 8019eb4:	b29b      	uxth	r3, r3
      space -= oversize_used;
 8019eb6:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 8019eb8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	f000 81e2 	beq.w	801a286 <tcp_write+0x4ae>
 8019ec2:	4591      	cmp	r9, r2
 8019ec4:	f000 81df 	beq.w	801a286 <tcp_write+0x4ae>
 8019ec8:	4ba8      	ldr	r3, [pc, #672]	; (801a16c <tcp_write+0x394>)
 8019eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ece:	49a8      	ldr	r1, [pc, #672]	; (801a170 <tcp_write+0x398>)
 8019ed0:	48a8      	ldr	r0, [pc, #672]	; (801a174 <tcp_write+0x39c>)
 8019ed2:	9e08      	ldr	r6, [sp, #32]
 8019ed4:	f006 fb60 	bl	8020598 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eda:	4599      	cmp	r9, r3
 8019edc:	f240 8107 	bls.w	801a0ee <tcp_write+0x316>
 8019ee0:	2c00      	cmp	r4, #0
 8019ee2:	f000 8104 	beq.w	801a0ee <tcp_write+0x316>
 8019ee6:	9a08      	ldr	r2, [sp, #32]
 8019ee8:	8912      	ldrh	r2, [r2, #8]
 8019eea:	920c      	str	r2, [sp, #48]	; 0x30
 8019eec:	2a00      	cmp	r2, #0
 8019eee:	f000 81b7 	beq.w	801a260 <tcp_write+0x488>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019ef2:	eba9 0503 	sub.w	r5, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019ef8:	42a5      	cmp	r5, r4
 8019efa:	bfa8      	it	ge
 8019efc:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019efe:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019f00:	b2ae      	uxth	r6, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019f02:	f100 8233 	bmi.w	801a36c <tcp_write+0x594>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019f06:	9b08      	ldr	r3, [sp, #32]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	e000      	b.n	8019f0e <tcp_write+0x136>
 8019f0c:	4613      	mov	r3, r2
 8019f0e:	681a      	ldr	r2, [r3, #0]
 8019f10:	2a00      	cmp	r2, #0
 8019f12:	d1fb      	bne.n	8019f0c <tcp_write+0x134>
 8019f14:	920b      	str	r2, [sp, #44]	; 0x2c
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019f16:	7b1a      	ldrb	r2, [r3, #12]
 8019f18:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8019f1c:	f040 80ed 	bne.w	801a0fa <tcp_write+0x322>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019f20:	895a      	ldrh	r2, [r3, #10]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019f26:	9a05      	ldr	r2, [sp, #20]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	f040 80e6 	bne.w	801a0fa <tcp_write+0x322>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	f040 8283 	bne.w	801a43c <tcp_write+0x664>
  u16_t oversize_add = 0;
 8019f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          extendlen = seglen;
 8019f38:	960d      	str	r6, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 8019f3a:	930c      	str	r3, [sp, #48]	; 0x30
      pos += seglen;
 8019f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f3e:	18f4      	adds	r4, r6, r3
 8019f40:	9e08      	ldr	r6, [sp, #32]
 8019f42:	b2a4      	uxth	r4, r4
 8019f44:	e01e      	b.n	8019f84 <tcp_write+0x1ac>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019f46:	b913      	cbnz	r3, 8019f4e <tcp_write+0x176>
 8019f48:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019f4c:	b17b      	cbz	r3, 8019f6e <tcp_write+0x196>
 8019f4e:	4b87      	ldr	r3, [pc, #540]	; (801a16c <tcp_write+0x394>)
 8019f50:	f240 1259 	movw	r2, #345	; 0x159
 8019f54:	4988      	ldr	r1, [pc, #544]	; (801a178 <tcp_write+0x3a0>)
 8019f56:	4887      	ldr	r0, [pc, #540]	; (801a174 <tcp_write+0x39c>)
 8019f58:	f006 fb1e 	bl	8020598 <iprintf>
 8019f5c:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8019f60:	f8b8 7066 	ldrh.w	r7, [r8, #102]	; 0x66
 8019f64:	9308      	str	r3, [sp, #32]
  if (pcb->unsent != NULL) {
 8019f66:	9b08      	ldr	r3, [sp, #32]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	f47f af74 	bne.w	8019e56 <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019f6e:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 8019f72:	2c00      	cmp	r4, #0
 8019f74:	f040 8193 	bne.w	801a29e <tcp_write+0x4c6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019f78:	4626      	mov	r6, r4
  u16_t oversize_used = 0;
 8019f7a:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019f7c:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 8019f7e:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_add = 0;
 8019f80:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  while (pos < len) {
 8019f84:	2300      	movs	r3, #0
 8019f86:	45a1      	cmp	r9, r4
 8019f88:	9304      	str	r3, [sp, #16]
 8019f8a:	f240 8103 	bls.w	801a194 <tcp_write+0x3bc>
 8019f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f90:	469b      	mov	fp, r3
 8019f92:	f002 0201 	and.w	r2, r2, #1
 8019f96:	9207      	str	r2, [sp, #28]
 8019f98:	e044      	b.n	801a024 <tcp_write+0x24c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019f9a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f040 80c2 	bne.w	801a128 <tcp_write+0x350>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019fa4:	2201      	movs	r2, #1
 8019fa6:	4629      	mov	r1, r5
 8019fa8:	2036      	movs	r0, #54	; 0x36
 8019faa:	f7fc f8c5 	bl	8016138 <pbuf_alloc>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d065      	beq.n	801a080 <tcp_write+0x2a8>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019fb4:	9a05      	ldr	r2, [sp, #20]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019fb6:	2100      	movs	r1, #0
 8019fb8:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019fba:	9306      	str	r3, [sp, #24]
 8019fbc:	1916      	adds	r6, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019fbe:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019fc2:	605e      	str	r6, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019fc4:	f7fc f8b8 	bl	8016138 <pbuf_alloc>
 8019fc8:	9b06      	ldr	r3, [sp, #24]
 8019fca:	4606      	mov	r6, r0
 8019fcc:	2800      	cmp	r0, #0
 8019fce:	f000 814c 	beq.w	801a26a <tcp_write+0x492>
      pbuf_cat(p/*header*/, p2/*data*/);
 8019fd2:	4619      	mov	r1, r3
 8019fd4:	f7fc f9ca 	bl	801636c <pbuf_cat>
    queuelen += pbuf_clen(p);
 8019fd8:	4630      	mov	r0, r6
 8019fda:	f7fc f9a7 	bl	801632c <pbuf_clen>
 8019fde:	4407      	add	r7, r0
 8019fe0:	b2bf      	uxth	r7, r7
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019fe2:	2f09      	cmp	r7, #9
 8019fe4:	d849      	bhi.n	801a07a <tcp_write+0x2a2>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019fe6:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8019fea:	2200      	movs	r2, #0
 8019fec:	4631      	mov	r1, r6
 8019fee:	4640      	mov	r0, r8
 8019ff0:	4423      	add	r3, r4
 8019ff2:	9200      	str	r2, [sp, #0]
 8019ff4:	f7ff fd78 	bl	8019ae8 <tcp_create_segment>
 8019ff8:	4606      	mov	r6, r0
 8019ffa:	2800      	cmp	r0, #0
 8019ffc:	d040      	beq.n	801a080 <tcp_write+0x2a8>
    seg->oversize_left = oversize;
 8019ffe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a002:	8143      	strh	r3, [r0, #10]
    if (queue == NULL) {
 801a004:	9b04      	ldr	r3, [sp, #16]
 801a006:	2b00      	cmp	r3, #0
 801a008:	f000 808c 	beq.w	801a124 <tcp_write+0x34c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a00c:	f1bb 0f00 	cmp.w	fp, #0
 801a010:	f000 8092 	beq.w	801a138 <tcp_write+0x360>
      prev_seg->next = seg;
 801a014:	f8cb 6000 	str.w	r6, [fp]
    pos += seglen;
 801a018:	442c      	add	r4, r5
 801a01a:	46b3      	mov	fp, r6
 801a01c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801a01e:	45a1      	cmp	r9, r4
 801a020:	f240 80b8 	bls.w	801a194 <tcp_write+0x3bc>
    u16_t left = len - pos;
 801a024:	eba9 0504 	sub.w	r5, r9, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a028:	9b07      	ldr	r3, [sp, #28]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a02a:	b2ad      	uxth	r5, r5
 801a02c:	4555      	cmp	r5, sl
 801a02e:	bf28      	it	cs
 801a030:	4655      	movcs	r5, sl
 801a032:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a034:	2b00      	cmp	r3, #0
 801a036:	d0b0      	beq.n	8019f9a <tcp_write+0x1c2>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a038:	9b04      	ldr	r3, [sp, #16]
 801a03a:	4652      	mov	r2, sl
 801a03c:	4629      	mov	r1, r5
 801a03e:	2036      	movs	r0, #54	; 0x36
 801a040:	fab3 f683 	clz	r6, r3
 801a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a046:	0976      	lsrs	r6, r6, #5
 801a048:	e9cd 8300 	strd	r8, r3, [sp]
 801a04c:	9602      	str	r6, [sp, #8]
 801a04e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a052:	f7ff fcf7 	bl	8019a44 <tcp_pbuf_prealloc>
 801a056:	4606      	mov	r6, r0
 801a058:	b190      	cbz	r0, 801a080 <tcp_write+0x2a8>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a05a:	8943      	ldrh	r3, [r0, #10]
 801a05c:	42ab      	cmp	r3, r5
 801a05e:	d373      	bcc.n	801a148 <tcp_write+0x370>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a060:	9b05      	ldr	r3, [sp, #20]
 801a062:	462a      	mov	r2, r5
 801a064:	6870      	ldr	r0, [r6, #4]
 801a066:	1919      	adds	r1, r3, r4
 801a068:	f005 faf3 	bl	801f652 <memcpy>
    queuelen += pbuf_clen(p);
 801a06c:	4630      	mov	r0, r6
 801a06e:	f7fc f95d 	bl	801632c <pbuf_clen>
 801a072:	4407      	add	r7, r0
 801a074:	b2bf      	uxth	r7, r7
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a076:	2f09      	cmp	r7, #9
 801a078:	d9b5      	bls.n	8019fe6 <tcp_write+0x20e>
      pbuf_free(p);
 801a07a:	4630      	mov	r0, r6
 801a07c:	f7fb ffee 	bl	801605c <pbuf_free>
  TCP_STATS_INC(tcp.memerr);
 801a080:	493e      	ldr	r1, [pc, #248]	; (801a17c <tcp_write+0x3a4>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a082:	f8b8 201a 	ldrh.w	r2, [r8, #26]
  TCP_STATS_INC(tcp.memerr);
 801a086:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a08a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a08e:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a090:	f8a8 201a 	strh.w	r2, [r8, #26]
  TCP_STATS_INC(tcp.memerr);
 801a094:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801a098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a09a:	b113      	cbz	r3, 801a0a2 <tcp_write+0x2ca>
    pbuf_free(concat_p);
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7fb ffdd 	bl	801605c <pbuf_free>
  if (queue != NULL) {
 801a0a2:	9b04      	ldr	r3, [sp, #16]
 801a0a4:	b113      	cbz	r3, 801a0ac <tcp_write+0x2d4>
    tcp_segs_free(queue);
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7fc ff26 	bl	8016ef8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801a0ac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 801a0b0:	b13b      	cbz	r3, 801a0c2 <tcp_write+0x2ea>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a0b2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801a0b6:	b923      	cbnz	r3, 801a0c2 <tcp_write+0x2ea>
 801a0b8:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	f000 80d8 	beq.w	801a272 <tcp_write+0x49a>
  return ERR_MEM;
 801a0c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a0c6:	b011      	add	sp, #68	; 0x44
 801a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801a0cc:	4b27      	ldr	r3, [pc, #156]	; (801a16c <tcp_write+0x394>)
 801a0ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801a0d2:	492b      	ldr	r1, [pc, #172]	; (801a180 <tcp_write+0x3a8>)
 801a0d4:	4827      	ldr	r0, [pc, #156]	; (801a174 <tcp_write+0x39c>)
 801a0d6:	f006 fa5f 	bl	8020598 <iprintf>
 801a0da:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801a0de:	930a      	str	r3, [sp, #40]	; 0x28
    oversize = pcb->unsent_oversize;
 801a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0e2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f43f aef6 	beq.w	8019ed8 <tcp_write+0x100>
 801a0ec:	e6d3      	b.n	8019e96 <tcp_write+0xbe>
  u16_t extendlen = 0;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a0f2:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 801a0f4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801a0f8:	e744      	b.n	8019f84 <tcp_write+0x1ac>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a0fa:	2201      	movs	r2, #1
 801a0fc:	4631      	mov	r1, r6
 801a0fe:	2000      	movs	r0, #0
 801a100:	f7fc f81a 	bl	8016138 <pbuf_alloc>
 801a104:	900b      	str	r0, [sp, #44]	; 0x2c
 801a106:	2800      	cmp	r0, #0
 801a108:	f000 80d8 	beq.w	801a2bc <tcp_write+0x4e4>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a10e:	9b05      	ldr	r3, [sp, #20]
 801a110:	4413      	add	r3, r2
  u16_t extendlen = 0;
 801a112:	2200      	movs	r2, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a114:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801a116:	920d      	str	r2, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801a118:	920c      	str	r2, [sp, #48]	; 0x30
          queuelen += pbuf_clen(concat_p);
 801a11a:	f7fc f907 	bl	801632c <pbuf_clen>
 801a11e:	4407      	add	r7, r0
 801a120:	b2bf      	uxth	r7, r7
 801a122:	e70b      	b.n	8019f3c <tcp_write+0x164>
 801a124:	9004      	str	r0, [sp, #16]
 801a126:	e777      	b.n	801a018 <tcp_write+0x240>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a128:	4b10      	ldr	r3, [pc, #64]	; (801a16c <tcp_write+0x394>)
 801a12a:	f240 2271 	movw	r2, #625	; 0x271
 801a12e:	4915      	ldr	r1, [pc, #84]	; (801a184 <tcp_write+0x3ac>)
 801a130:	4810      	ldr	r0, [pc, #64]	; (801a174 <tcp_write+0x39c>)
 801a132:	f006 fa31 	bl	8020598 <iprintf>
 801a136:	e735      	b.n	8019fa4 <tcp_write+0x1cc>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a138:	4b0c      	ldr	r3, [pc, #48]	; (801a16c <tcp_write+0x394>)
 801a13a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a13e:	4912      	ldr	r1, [pc, #72]	; (801a188 <tcp_write+0x3b0>)
 801a140:	480c      	ldr	r0, [pc, #48]	; (801a174 <tcp_write+0x39c>)
 801a142:	f006 fa29 	bl	8020598 <iprintf>
 801a146:	e765      	b.n	801a014 <tcp_write+0x23c>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a148:	4b08      	ldr	r3, [pc, #32]	; (801a16c <tcp_write+0x394>)
 801a14a:	f240 2267 	movw	r2, #615	; 0x267
 801a14e:	490f      	ldr	r1, [pc, #60]	; (801a18c <tcp_write+0x3b4>)
 801a150:	4808      	ldr	r0, [pc, #32]	; (801a174 <tcp_write+0x39c>)
 801a152:	f006 fa21 	bl	8020598 <iprintf>
 801a156:	e783      	b.n	801a060 <tcp_write+0x288>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a158:	4b04      	ldr	r3, [pc, #16]	; (801a16c <tcp_write+0x394>)
 801a15a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a15e:	490c      	ldr	r1, [pc, #48]	; (801a190 <tcp_write+0x3b8>)
 801a160:	4804      	ldr	r0, [pc, #16]	; (801a174 <tcp_write+0x39c>)
 801a162:	f006 fa19 	bl	8020598 <iprintf>
 801a166:	9b08      	ldr	r3, [sp, #32]
 801a168:	891b      	ldrh	r3, [r3, #8]
 801a16a:	e684      	b.n	8019e76 <tcp_write+0x9e>
 801a16c:	0803e518 	.word	0x0803e518
 801a170:	0803e844 	.word	0x0803e844
 801a174:	08026544 	.word	0x08026544
 801a178:	0803e7a8 	.word	0x0803e7a8
 801a17c:	200361ec 	.word	0x200361ec
 801a180:	0803e7f4 	.word	0x0803e7f4
 801a184:	0803e900 	.word	0x0803e900
 801a188:	0803e910 	.word	0x0803e910
 801a18c:	0803e8c0 	.word	0x0803e8c0
 801a190:	0803e7dc 	.word	0x0803e7dc
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801a194:	9a08      	ldr	r2, [sp, #32]
 801a196:	b122      	cbz	r2, 801a1a2 <tcp_write+0x3ca>
 801a198:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a19a:	b111      	cbz	r1, 801a1a2 <tcp_write+0x3ca>
    last_unsent->oversize_left += oversize_add;
 801a19c:	8953      	ldrh	r3, [r2, #10]
 801a19e:	4419      	add	r1, r3
 801a1a0:	8151      	strh	r1, [r2, #10]
  if (oversize_used > 0) {
 801a1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1a4:	b32b      	cbz	r3, 801a1f2 <tcp_write+0x41a>
    for (p = last_unsent->p; p; p = p->next) {
 801a1a6:	9b08      	ldr	r3, [sp, #32]
 801a1a8:	685c      	ldr	r4, [r3, #4]
 801a1aa:	b1b4      	cbz	r4, 801a1da <tcp_write+0x402>
 801a1ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801a1b0:	9d05      	ldr	r5, [sp, #20]
      p->tot_len += oversize_used;
 801a1b2:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801a1b4:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801a1b6:	4453      	add	r3, sl
 801a1b8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801a1ba:	b10a      	cbz	r2, 801a1c0 <tcp_write+0x3e8>
  while (pos < len) {
 801a1bc:	4614      	mov	r4, r2
 801a1be:	e7f8      	b.n	801a1b2 <tcp_write+0x3da>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a1c0:	6863      	ldr	r3, [r4, #4]
 801a1c2:	4652      	mov	r2, sl
 801a1c4:	8960      	ldrh	r0, [r4, #10]
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	4418      	add	r0, r3
 801a1ca:	f005 fa42 	bl	801f652 <memcpy>
        p->len += oversize_used;
 801a1ce:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a1d0:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801a1d2:	4453      	add	r3, sl
 801a1d4:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a1d6:	2a00      	cmp	r2, #0
 801a1d8:	d1f0      	bne.n	801a1bc <tcp_write+0x3e4>
    last_unsent->len += oversize_used;
 801a1da:	9908      	ldr	r1, [sp, #32]
 801a1dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a1de:	890a      	ldrh	r2, [r1, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a1e0:	894b      	ldrh	r3, [r1, #10]
    last_unsent->len += oversize_used;
 801a1e2:	4402      	add	r2, r0
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a1e4:	4283      	cmp	r3, r0
    last_unsent->len += oversize_used;
 801a1e6:	810a      	strh	r2, [r1, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a1e8:	d37e      	bcc.n	801a2e8 <tcp_write+0x510>
    last_unsent->oversize_left -= oversize_used;
 801a1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1ec:	1a9b      	subs	r3, r3, r2
 801a1ee:	9a08      	ldr	r2, [sp, #32]
 801a1f0:	8153      	strh	r3, [r2, #10]
  pcb->unsent_oversize = oversize;
 801a1f2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a1f6:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 801a1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	f000 8091 	beq.w	801a324 <tcp_write+0x54c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a202:	9b08      	ldr	r3, [sp, #32]
 801a204:	2b00      	cmp	r3, #0
 801a206:	f000 80db 	beq.w	801a3c0 <tcp_write+0x5e8>
    pbuf_cat(last_unsent->p, concat_p);
 801a20a:	9c08      	ldr	r4, [sp, #32]
 801a20c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a20e:	6860      	ldr	r0, [r4, #4]
 801a210:	4629      	mov	r1, r5
 801a212:	f7fc f8ab 	bl	801636c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a216:	892a      	ldrh	r2, [r5, #8]
 801a218:	8923      	ldrh	r3, [r4, #8]
 801a21a:	4413      	add	r3, r2
 801a21c:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801a21e:	9b08      	ldr	r3, [sp, #32]
 801a220:	461a      	mov	r2, r3
 801a222:	9b04      	ldr	r3, [sp, #16]
 801a224:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 801a226:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a22a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
  pcb->snd_lbb += len;
 801a22e:	444a      	add	r2, r9
  pcb->snd_queuelen = queuelen;
 801a230:	f8a8 7066 	strh.w	r7, [r8, #102]	; 0x66
  pcb->snd_buf -= len;
 801a234:	eba3 0909 	sub.w	r9, r3, r9
  pcb->snd_lbb += len;
 801a238:	f8c8 205c 	str.w	r2, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a23c:	f8a8 9064 	strh.w	r9, [r8, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801a240:	b11f      	cbz	r7, 801a24a <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a242:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801a246:	2b00      	cmp	r3, #0
 801a248:	d058      	beq.n	801a2fc <tcp_write+0x524>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a24a:	b13e      	cbz	r6, 801a25c <tcp_write+0x484>
 801a24c:	6930      	ldr	r0, [r6, #16]
 801a24e:	2800      	cmp	r0, #0
 801a250:	f43f af39 	beq.w	801a0c6 <tcp_write+0x2ee>
 801a254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a256:	f013 0402 	ands.w	r4, r3, #2
 801a25a:	d03c      	beq.n	801a2d6 <tcp_write+0x4fe>
  return ERR_OK;
 801a25c:	2000      	movs	r0, #0
 801a25e:	e732      	b.n	801a0c6 <tcp_write+0x2ee>
  u16_t extendlen = 0;
 801a260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a262:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a264:	930d      	str	r3, [sp, #52]	; 0x34
  struct pbuf *concat_p = NULL;
 801a266:	930b      	str	r3, [sp, #44]	; 0x2c
 801a268:	e68c      	b.n	8019f84 <tcp_write+0x1ac>
        pbuf_free(p2);
 801a26a:	4618      	mov	r0, r3
 801a26c:	f7fb fef6 	bl	801605c <pbuf_free>
        goto memerr;
 801a270:	e706      	b.n	801a080 <tcp_write+0x2a8>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a272:	4b79      	ldr	r3, [pc, #484]	; (801a458 <tcp_write+0x680>)
 801a274:	f44f 724a 	mov.w	r2, #808	; 0x328
 801a278:	4978      	ldr	r1, [pc, #480]	; (801a45c <tcp_write+0x684>)
 801a27a:	4879      	ldr	r0, [pc, #484]	; (801a460 <tcp_write+0x688>)
 801a27c:	f006 f98c 	bl	8020598 <iprintf>
  return ERR_MEM;
 801a280:	f04f 30ff 	mov.w	r0, #4294967295
 801a284:	e71f      	b.n	801a0c6 <tcp_write+0x2ee>
 801a286:	9e08      	ldr	r6, [sp, #32]
 801a288:	e626      	b.n	8019ed8 <tcp_write+0x100>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a28a:	4b73      	ldr	r3, [pc, #460]	; (801a458 <tcp_write+0x680>)
 801a28c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a290:	4974      	ldr	r1, [pc, #464]	; (801a464 <tcp_write+0x68c>)
 801a292:	4873      	ldr	r0, [pc, #460]	; (801a460 <tcp_write+0x688>)
 801a294:	f006 f980 	bl	8020598 <iprintf>
 801a298:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a29c:	e5ff      	b.n	8019e9e <tcp_write+0xc6>
  u16_t extendlen = 0;
 801a29e:	2400      	movs	r4, #0
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a2a0:	4b6d      	ldr	r3, [pc, #436]	; (801a458 <tcp_write+0x680>)
 801a2a2:	f240 224b 	movw	r2, #587	; 0x24b
 801a2a6:	4970      	ldr	r1, [pc, #448]	; (801a468 <tcp_write+0x690>)
 801a2a8:	486d      	ldr	r0, [pc, #436]	; (801a460 <tcp_write+0x688>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a2aa:	4626      	mov	r6, r4
  u16_t extendlen = 0;
 801a2ac:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801a2ae:	940c      	str	r4, [sp, #48]	; 0x30
  u16_t oversize_used = 0;
 801a2b0:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a2b2:	9408      	str	r4, [sp, #32]
  struct pbuf *concat_p = NULL;
 801a2b4:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a2b6:	f006 f96f 	bl	8020598 <iprintf>
 801a2ba:	e663      	b.n	8019f84 <tcp_write+0x1ac>
  TCP_STATS_INC(tcp.memerr);
 801a2bc:	496b      	ldr	r1, [pc, #428]	; (801a46c <tcp_write+0x694>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a2be:	f8b8 201a 	ldrh.w	r2, [r8, #26]
  TCP_STATS_INC(tcp.memerr);
 801a2c2:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a2c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801a2ca:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a2cc:	f8a8 201a 	strh.w	r2, [r8, #26]
  TCP_STATS_INC(tcp.memerr);
 801a2d0:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
 801a2d4:	e6ea      	b.n	801a0ac <tcp_write+0x2d4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a2d6:	8985      	ldrh	r5, [r0, #12]
 801a2d8:	2008      	movs	r0, #8
 801a2da:	f7fa f84f 	bl	801437c <lwip_htons>
 801a2de:	6933      	ldr	r3, [r6, #16]
 801a2e0:	4305      	orrs	r5, r0
  return ERR_OK;
 801a2e2:	4620      	mov	r0, r4
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a2e4:	819d      	strh	r5, [r3, #12]
 801a2e6:	e6ee      	b.n	801a0c6 <tcp_write+0x2ee>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a2e8:	4b5b      	ldr	r3, [pc, #364]	; (801a458 <tcp_write+0x680>)
 801a2ea:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801a2ee:	4960      	ldr	r1, [pc, #384]	; (801a470 <tcp_write+0x698>)
 801a2f0:	485b      	ldr	r0, [pc, #364]	; (801a460 <tcp_write+0x688>)
 801a2f2:	f006 f951 	bl	8020598 <iprintf>
 801a2f6:	9b08      	ldr	r3, [sp, #32]
 801a2f8:	895b      	ldrh	r3, [r3, #10]
 801a2fa:	e776      	b.n	801a1ea <tcp_write+0x412>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a2fc:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 801a300:	2b00      	cmp	r3, #0
 801a302:	d1a2      	bne.n	801a24a <tcp_write+0x472>
 801a304:	4b54      	ldr	r3, [pc, #336]	; (801a458 <tcp_write+0x680>)
 801a306:	f240 3213 	movw	r2, #787	; 0x313
 801a30a:	4954      	ldr	r1, [pc, #336]	; (801a45c <tcp_write+0x684>)
 801a30c:	4854      	ldr	r0, [pc, #336]	; (801a460 <tcp_write+0x688>)
 801a30e:	f006 f943 	bl	8020598 <iprintf>
 801a312:	e79a      	b.n	801a24a <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a314:	4b50      	ldr	r3, [pc, #320]	; (801a458 <tcp_write+0x680>)
 801a316:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801a31a:	4956      	ldr	r1, [pc, #344]	; (801a474 <tcp_write+0x69c>)
 801a31c:	e61b      	b.n	8019f56 <tcp_write+0x17e>
    return ERR_CONN;
 801a31e:	f06f 000a 	mvn.w	r0, #10
 801a322:	e6d0      	b.n	801a0c6 <tcp_write+0x2ee>
  } else if (extendlen > 0) {
 801a324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a326:	2b00      	cmp	r3, #0
 801a328:	d042      	beq.n	801a3b0 <tcp_write+0x5d8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a32a:	9b08      	ldr	r3, [sp, #32]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d071      	beq.n	801a414 <tcp_write+0x63c>
 801a330:	6859      	ldr	r1, [r3, #4]
 801a332:	2900      	cmp	r1, #0
 801a334:	d06e      	beq.n	801a414 <tcp_write+0x63c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a336:	680a      	ldr	r2, [r1, #0]
 801a338:	2a00      	cmp	r2, #0
 801a33a:	f000 808a 	beq.w	801a452 <tcp_write+0x67a>
 801a33e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a340:	e000      	b.n	801a344 <tcp_write+0x56c>
 801a342:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801a344:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a346:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801a348:	4423      	add	r3, r4
 801a34a:	810b      	strh	r3, [r1, #8]
 801a34c:	4611      	mov	r1, r2
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a34e:	2800      	cmp	r0, #0
 801a350:	d1f7      	bne.n	801a342 <tcp_write+0x56a>
    p->tot_len += extendlen;
 801a352:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801a354:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801a356:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801a358:	9b08      	ldr	r3, [sp, #32]
    p->tot_len += extendlen;
 801a35a:	4420      	add	r0, r4
    p->len += extendlen;
 801a35c:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801a35e:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801a360:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801a362:	4423      	add	r3, r4
    p->len += extendlen;
 801a364:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801a366:	9a08      	ldr	r2, [sp, #32]
 801a368:	8113      	strh	r3, [r2, #8]
 801a36a:	e758      	b.n	801a21e <tcp_write+0x446>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a36e:	2301      	movs	r3, #1
 801a370:	4631      	mov	r1, r6
 801a372:	2000      	movs	r0, #0
 801a374:	9302      	str	r3, [sp, #8]
 801a376:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801a37a:	e9cd 8200 	strd	r8, r2, [sp]
 801a37e:	4622      	mov	r2, r4
 801a380:	f7ff fb60 	bl	8019a44 <tcp_pbuf_prealloc>
 801a384:	4604      	mov	r4, r0
 801a386:	900b      	str	r0, [sp, #44]	; 0x2c
 801a388:	2800      	cmp	r0, #0
 801a38a:	d097      	beq.n	801a2bc <tcp_write+0x4e4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a38c:	9b05      	ldr	r3, [sp, #20]
 801a38e:	4632      	mov	r2, r6
 801a390:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a392:	6840      	ldr	r0, [r0, #4]
 801a394:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801a396:	2300      	movs	r3, #0
 801a398:	930d      	str	r3, [sp, #52]	; 0x34
        oversize_add = oversize;
 801a39a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a39e:	930c      	str	r3, [sp, #48]	; 0x30
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a3a0:	f005 f957 	bl	801f652 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	f7fb ffc1 	bl	801632c <pbuf_clen>
 801a3aa:	4407      	add	r7, r0
 801a3ac:	b2bf      	uxth	r7, r7
 801a3ae:	e5c5      	b.n	8019f3c <tcp_write+0x164>
  if (last_unsent == NULL) {
 801a3b0:	9b08      	ldr	r3, [sp, #32]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f47f af33 	bne.w	801a21e <tcp_write+0x446>
    pcb->unsent = queue;
 801a3b8:	9b04      	ldr	r3, [sp, #16]
 801a3ba:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 801a3be:	e732      	b.n	801a226 <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a3c0:	4b25      	ldr	r3, [pc, #148]	; (801a458 <tcp_write+0x680>)
 801a3c2:	f240 22e1 	movw	r2, #737	; 0x2e1
 801a3c6:	492c      	ldr	r1, [pc, #176]	; (801a478 <tcp_write+0x6a0>)
 801a3c8:	4825      	ldr	r0, [pc, #148]	; (801a460 <tcp_write+0x688>)
 801a3ca:	f006 f8e5 	bl	8020598 <iprintf>
 801a3ce:	e71c      	b.n	801a20a <tcp_write+0x432>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3d0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    return ERR_MEM;
 801a3d4:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a3dc:	f8a8 301a 	strh.w	r3, [r8, #26]
 801a3e0:	e671      	b.n	801a0c6 <tcp_write+0x2ee>
    TCP_STATS_INC(tcp.memerr);
 801a3e2:	4922      	ldr	r1, [pc, #136]	; (801a46c <tcp_write+0x694>)
    return ERR_MEM;
 801a3e4:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3e8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    TCP_STATS_INC(tcp.memerr);
 801a3ec:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801a3f4:	3201      	adds	r2, #1
 801a3f6:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3fa:	f8a8 301a 	strh.w	r3, [r8, #26]
 801a3fe:	e662      	b.n	801a0c6 <tcp_write+0x2ee>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a400:	4b15      	ldr	r3, [pc, #84]	; (801a458 <tcp_write+0x680>)
 801a402:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801a406:	491d      	ldr	r1, [pc, #116]	; (801a47c <tcp_write+0x6a4>)
 801a408:	4815      	ldr	r0, [pc, #84]	; (801a460 <tcp_write+0x688>)
 801a40a:	f006 f8c5 	bl	8020598 <iprintf>
 801a40e:	f06f 000f 	mvn.w	r0, #15
 801a412:	e658      	b.n	801a0c6 <tcp_write+0x2ee>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a414:	4b10      	ldr	r3, [pc, #64]	; (801a458 <tcp_write+0x680>)
 801a416:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a41a:	4919      	ldr	r1, [pc, #100]	; (801a480 <tcp_write+0x6a8>)
 801a41c:	4810      	ldr	r0, [pc, #64]	; (801a460 <tcp_write+0x688>)
 801a41e:	f006 f8bb 	bl	8020598 <iprintf>
 801a422:	9b08      	ldr	r3, [sp, #32]
 801a424:	6859      	ldr	r1, [r3, #4]
 801a426:	e786      	b.n	801a336 <tcp_write+0x55e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a428:	4b0b      	ldr	r3, [pc, #44]	; (801a458 <tcp_write+0x680>)
 801a42a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a42e:	4915      	ldr	r1, [pc, #84]	; (801a484 <tcp_write+0x6ac>)
 801a430:	480b      	ldr	r0, [pc, #44]	; (801a460 <tcp_write+0x688>)
 801a432:	f006 f8b1 	bl	8020598 <iprintf>
 801a436:	f06f 000f 	mvn.w	r0, #15
 801a43a:	e644      	b.n	801a0c6 <tcp_write+0x2ee>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a43c:	4b06      	ldr	r3, [pc, #24]	; (801a458 <tcp_write+0x680>)
 801a43e:	f240 2231 	movw	r2, #561	; 0x231
 801a442:	4911      	ldr	r1, [pc, #68]	; (801a488 <tcp_write+0x6b0>)
 801a444:	4806      	ldr	r0, [pc, #24]	; (801a460 <tcp_write+0x688>)
          extendlen = seglen;
 801a446:	960d      	str	r6, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a448:	f006 f8a6 	bl	8020598 <iprintf>
  u16_t oversize_add = 0;
 801a44c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a44e:	930c      	str	r3, [sp, #48]	; 0x30
 801a450:	e574      	b.n	8019f3c <tcp_write+0x164>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a452:	460a      	mov	r2, r1
 801a454:	e77d      	b.n	801a352 <tcp_write+0x57a>
 801a456:	bf00      	nop
 801a458:	0803e518 	.word	0x0803e518
 801a45c:	0803e9c0 	.word	0x0803e9c0
 801a460:	08026544 	.word	0x08026544
 801a464:	0803e824 	.word	0x0803e824
 801a468:	0803e890 	.word	0x0803e890
 801a46c:	200361ec 	.word	0x200361ec
 801a470:	0803e924 	.word	0x0803e924
 801a474:	0803e76c 	.word	0x0803e76c
 801a478:	0803e950 	.word	0x0803e950
 801a47c:	0803e738 	.word	0x0803e738
 801a480:	0803e988 	.word	0x0803e988
 801a484:	0803e720 	.word	0x0803e720
 801a488:	0803e864 	.word	0x0803e864

0801a48c <tcp_split_unsent_seg>:
{
 801a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a490:	460e      	mov	r6, r1
 801a492:	b083      	sub	sp, #12
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a494:	4607      	mov	r7, r0
 801a496:	2800      	cmp	r0, #0
 801a498:	d05d      	beq.n	801a556 <tcp_split_unsent_seg+0xca>
  useg = pcb->unsent;
 801a49a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 801a49c:	b39d      	cbz	r5, 801a506 <tcp_split_unsent_seg+0x7a>
  if (split == 0) {
 801a49e:	2e00      	cmp	r6, #0
 801a4a0:	f000 80bb 	beq.w	801a61a <tcp_split_unsent_seg+0x18e>
  if (useg->len <= split) {
 801a4a4:	892c      	ldrh	r4, [r5, #8]
 801a4a6:	42b4      	cmp	r4, r6
 801a4a8:	d93d      	bls.n	801a526 <tcp_split_unsent_seg+0x9a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a4aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801a4ac:	42b3      	cmp	r3, r6
 801a4ae:	d347      	bcc.n	801a540 <tcp_split_unsent_seg+0xb4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a4b0:	2c00      	cmp	r4, #0
 801a4b2:	d03c      	beq.n	801a52e <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 801a4b4:	f895 900c 	ldrb.w	r9, [r5, #12]
  remainder = useg->len - split;
 801a4b8:	1ba4      	subs	r4, r4, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a4ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4be:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a4c0:	ea4f 0889 	mov.w	r8, r9, lsl #2
  remainder = useg->len - split;
 801a4c4:	b2a4      	uxth	r4, r4
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a4c6:	f008 0804 	and.w	r8, r8, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a4ca:	eb04 0108 	add.w	r1, r4, r8
 801a4ce:	b289      	uxth	r1, r1
 801a4d0:	f7fb fe32 	bl	8016138 <pbuf_alloc>
  if (p == NULL) {
 801a4d4:	4682      	mov	sl, r0
 801a4d6:	b1d8      	cbz	r0, 801a510 <tcp_split_unsent_seg+0x84>
  offset = useg->p->tot_len - useg->len + split;
 801a4d8:	6868      	ldr	r0, [r5, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a4da:	4622      	mov	r2, r4
  offset = useg->p->tot_len - useg->len + split;
 801a4dc:	8929      	ldrh	r1, [r5, #8]
 801a4de:	8903      	ldrh	r3, [r0, #8]
 801a4e0:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a4e2:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 801a4e6:	4433      	add	r3, r6
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a4e8:	4441      	add	r1, r8
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	f7fc f846 	bl	801657c <pbuf_copy_partial>
 801a4f0:	42a0      	cmp	r0, r4
 801a4f2:	d038      	beq.n	801a566 <tcp_split_unsent_seg+0xda>
  TCP_STATS_INC(tcp.memerr);
 801a4f4:	4a4e      	ldr	r2, [pc, #312]	; (801a630 <tcp_split_unsent_seg+0x1a4>)
    pbuf_free(p);
 801a4f6:	4650      	mov	r0, sl
  TCP_STATS_INC(tcp.memerr);
 801a4f8:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801a502:	f7fb fdab 	bl	801605c <pbuf_free>
  return ERR_MEM;
 801a506:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a50a:	b003      	add	sp, #12
 801a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TCP_STATS_INC(tcp.memerr);
 801a510:	4a47      	ldr	r2, [pc, #284]	; (801a630 <tcp_split_unsent_seg+0x1a4>)
  return ERR_MEM;
 801a512:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801a516:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801a51a:	3301      	adds	r3, #1
 801a51c:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801a520:	b003      	add	sp, #12
 801a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
 801a526:	2000      	movs	r0, #0
}
 801a528:	b003      	add	sp, #12
 801a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a52e:	4b41      	ldr	r3, [pc, #260]	; (801a634 <tcp_split_unsent_seg+0x1a8>)
 801a530:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a534:	4940      	ldr	r1, [pc, #256]	; (801a638 <tcp_split_unsent_seg+0x1ac>)
 801a536:	4841      	ldr	r0, [pc, #260]	; (801a63c <tcp_split_unsent_seg+0x1b0>)
 801a538:	f006 f82e 	bl	8020598 <iprintf>
 801a53c:	892c      	ldrh	r4, [r5, #8]
 801a53e:	e7b9      	b.n	801a4b4 <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a540:	4b3c      	ldr	r3, [pc, #240]	; (801a634 <tcp_split_unsent_seg+0x1a8>)
 801a542:	f240 325b 	movw	r2, #859	; 0x35b
 801a546:	493e      	ldr	r1, [pc, #248]	; (801a640 <tcp_split_unsent_seg+0x1b4>)
 801a548:	483c      	ldr	r0, [pc, #240]	; (801a63c <tcp_split_unsent_seg+0x1b0>)
 801a54a:	f006 f825 	bl	8020598 <iprintf>
 801a54e:	892c      	ldrh	r4, [r5, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a550:	2c00      	cmp	r4, #0
 801a552:	d1af      	bne.n	801a4b4 <tcp_split_unsent_seg+0x28>
 801a554:	e7eb      	b.n	801a52e <tcp_split_unsent_seg+0xa2>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a556:	4b37      	ldr	r3, [pc, #220]	; (801a634 <tcp_split_unsent_seg+0x1a8>)
 801a558:	f240 324b 	movw	r2, #843	; 0x34b
 801a55c:	4939      	ldr	r1, [pc, #228]	; (801a644 <tcp_split_unsent_seg+0x1b8>)
 801a55e:	4837      	ldr	r0, [pc, #220]	; (801a63c <tcp_split_unsent_seg+0x1b0>)
 801a560:	f006 f81a 	bl	8020598 <iprintf>
 801a564:	e799      	b.n	801a49a <tcp_split_unsent_seg+0xe>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a566:	692b      	ldr	r3, [r5, #16]
 801a568:	8998      	ldrh	r0, [r3, #12]
 801a56a:	f7f9 ff07 	bl	801437c <lwip_htons>
 801a56e:	b2c0      	uxtb	r0, r0
  if (split_flags & TCP_PSH) {
 801a570:	f010 0b08 	ands.w	fp, r0, #8
 801a574:	d14c      	bne.n	801a610 <tcp_split_unsent_seg+0x184>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a576:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801a57a:	f018 0f01 	tst.w	r8, #1
 801a57e:	d003      	beq.n	801a588 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 801a580:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801a584:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a588:	692b      	ldr	r3, [r5, #16]
 801a58a:	6858      	ldr	r0, [r3, #4]
 801a58c:	f7f9 fefa 	bl	8014384 <lwip_htonl>
 801a590:	f8cd 9000 	str.w	r9, [sp]
 801a594:	1833      	adds	r3, r6, r0
 801a596:	465a      	mov	r2, fp
 801a598:	4651      	mov	r1, sl
 801a59a:	4638      	mov	r0, r7
 801a59c:	f7ff faa4 	bl	8019ae8 <tcp_create_segment>
  if (seg == NULL) {
 801a5a0:	4606      	mov	r6, r0
 801a5a2:	2800      	cmp	r0, #0
 801a5a4:	d0a6      	beq.n	801a4f4 <tcp_split_unsent_seg+0x68>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a5a6:	6868      	ldr	r0, [r5, #4]
 801a5a8:	f7fb fec0 	bl	801632c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a5ac:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a5ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a5b2:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a5b4:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a5b6:	4610      	mov	r0, r2
 801a5b8:	1b09      	subs	r1, r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a5ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a5be:	b289      	uxth	r1, r1
 801a5c0:	f7fb fe58 	bl	8016274 <pbuf_realloc>
  useg->len -= remainder;
 801a5c4:	892a      	ldrh	r2, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a5c6:	692b      	ldr	r3, [r5, #16]
 801a5c8:	4640      	mov	r0, r8
  useg->len -= remainder;
 801a5ca:	1b14      	subs	r4, r2, r4
 801a5cc:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a5ce:	899c      	ldrh	r4, [r3, #12]
 801a5d0:	f7f9 fed4 	bl	801437c <lwip_htons>
 801a5d4:	692a      	ldr	r2, [r5, #16]
  useg->oversize_left = 0;
 801a5d6:	2300      	movs	r3, #0
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a5d8:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a5da:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a5dc:	8194      	strh	r4, [r2, #12]
  useg->oversize_left = 0;
 801a5de:	816b      	strh	r3, [r5, #10]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a5e0:	f7fb fea4 	bl	801632c <pbuf_clen>
 801a5e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801a5e8:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a5ea:	6870      	ldr	r0, [r6, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a5ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a5f0:	f7fb fe9c 	bl	801632c <pbuf_clen>
 801a5f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
  seg->next = useg->next;
 801a5f8:	682a      	ldr	r2, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a5fa:	4418      	add	r0, r3
 801a5fc:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 801a600:	6032      	str	r2, [r6, #0]
  useg->next = seg;
 801a602:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801a604:	6830      	ldr	r0, [r6, #0]
 801a606:	2800      	cmp	r0, #0
 801a608:	d18d      	bne.n	801a526 <tcp_split_unsent_seg+0x9a>
    pcb->unsent_oversize = 0;
 801a60a:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 801a60e:	e77c      	b.n	801a50a <tcp_split_unsent_seg+0x7e>
    split_flags &= ~TCP_PSH;
 801a610:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801a614:	f04f 0b08 	mov.w	fp, #8
 801a618:	e7af      	b.n	801a57a <tcp_split_unsent_seg+0xee>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a61a:	4b06      	ldr	r3, [pc, #24]	; (801a634 <tcp_split_unsent_seg+0x1a8>)
 801a61c:	f240 3253 	movw	r2, #851	; 0x353
 801a620:	4909      	ldr	r1, [pc, #36]	; (801a648 <tcp_split_unsent_seg+0x1bc>)
 801a622:	4806      	ldr	r0, [pc, #24]	; (801a63c <tcp_split_unsent_seg+0x1b0>)
 801a624:	f005 ffb8 	bl	8020598 <iprintf>
    return ERR_VAL;
 801a628:	f06f 0005 	mvn.w	r0, #5
 801a62c:	e76d      	b.n	801a50a <tcp_split_unsent_seg+0x7e>
 801a62e:	bf00      	nop
 801a630:	200361ec 	.word	0x200361ec
 801a634:	0803e518 	.word	0x0803e518
 801a638:	0803e710 	.word	0x0803e710
 801a63c:	08026544 	.word	0x08026544
 801a640:	0803e700 	.word	0x0803e700
 801a644:	0803e6b8 	.word	0x0803e6b8
 801a648:	0803e6dc 	.word	0x0803e6dc

0801a64c <tcp_enqueue_flags>:
{
 801a64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a650:	f011 0803 	ands.w	r8, r1, #3
{
 801a654:	b083      	sub	sp, #12
 801a656:	460d      	mov	r5, r1
 801a658:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a65a:	d04a      	beq.n	801a6f2 <tcp_enqueue_flags+0xa6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a65c:	2c00      	cmp	r4, #0
 801a65e:	d051      	beq.n	801a704 <tcp_enqueue_flags+0xb8>
  if (flags & TCP_SYN) {
 801a660:	f3c5 0740 	ubfx	r7, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a664:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a668:	2036      	movs	r0, #54	; 0x36
 801a66a:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801a66e:	4649      	mov	r1, r9
 801a670:	f7fb fd62 	bl	8016138 <pbuf_alloc>
 801a674:	4606      	mov	r6, r0
 801a676:	2800      	cmp	r0, #0
 801a678:	d074      	beq.n	801a764 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a67a:	8943      	ldrh	r3, [r0, #10]
 801a67c:	454b      	cmp	r3, r9
 801a67e:	d349      	bcc.n	801a714 <tcp_enqueue_flags+0xc8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a680:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801a682:	4631      	mov	r1, r6
 801a684:	9700      	str	r7, [sp, #0]
 801a686:	462a      	mov	r2, r5
 801a688:	4620      	mov	r0, r4
 801a68a:	f7ff fa2d 	bl	8019ae8 <tcp_create_segment>
 801a68e:	4606      	mov	r6, r0
 801a690:	2800      	cmp	r0, #0
 801a692:	d067      	beq.n	801a764 <tcp_enqueue_flags+0x118>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a694:	6903      	ldr	r3, [r0, #16]
 801a696:	079a      	lsls	r2, r3, #30
 801a698:	d150      	bne.n	801a73c <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a69a:	8933      	ldrh	r3, [r6, #8]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d141      	bne.n	801a724 <tcp_enqueue_flags+0xd8>
  if (pcb->unsent == NULL) {
 801a6a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801a6a2:	b90a      	cbnz	r2, 801a6a8 <tcp_enqueue_flags+0x5c>
 801a6a4:	e048      	b.n	801a738 <tcp_enqueue_flags+0xec>
 801a6a6:	461a      	mov	r2, r3
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a6a8:	6813      	ldr	r3, [r2, #0]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d1fb      	bne.n	801a6a6 <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 801a6ae:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a6b6:	f1b8 0f00 	cmp.w	r8, #0
 801a6ba:	d002      	beq.n	801a6c2 <tcp_enqueue_flags+0x76>
    pcb->snd_lbb++;
 801a6bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801a6be:	3301      	adds	r3, #1
 801a6c0:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801a6c2:	07eb      	lsls	r3, r5, #31
 801a6c4:	d410      	bmi.n	801a6e8 <tcp_enqueue_flags+0x9c>
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a6c6:	6870      	ldr	r0, [r6, #4]
 801a6c8:	f7fb fe30 	bl	801632c <pbuf_clen>
 801a6cc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801a6d0:	4418      	add	r0, r3
 801a6d2:	b280      	uxth	r0, r0
 801a6d4:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801a6d8:	b118      	cbz	r0, 801a6e2 <tcp_enqueue_flags+0x96>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a6da:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d035      	beq.n	801a74c <tcp_enqueue_flags+0x100>
  return ERR_OK;
 801a6e0:	2000      	movs	r0, #0
}
 801a6e2:	b003      	add	sp, #12
 801a6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_set_flags(pcb, TF_FIN);
 801a6e8:	8b63      	ldrh	r3, [r4, #26]
 801a6ea:	f043 0320 	orr.w	r3, r3, #32
 801a6ee:	8363      	strh	r3, [r4, #26]
 801a6f0:	e7e9      	b.n	801a6c6 <tcp_enqueue_flags+0x7a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a6f2:	4b23      	ldr	r3, [pc, #140]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a6f4:	f240 4212 	movw	r2, #1042	; 0x412
 801a6f8:	4922      	ldr	r1, [pc, #136]	; (801a784 <tcp_enqueue_flags+0x138>)
 801a6fa:	4823      	ldr	r0, [pc, #140]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a6fc:	f005 ff4c 	bl	8020598 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a700:	2c00      	cmp	r4, #0
 801a702:	d1ad      	bne.n	801a660 <tcp_enqueue_flags+0x14>
 801a704:	4b1e      	ldr	r3, [pc, #120]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a706:	f240 4213 	movw	r2, #1043	; 0x413
 801a70a:	4920      	ldr	r1, [pc, #128]	; (801a78c <tcp_enqueue_flags+0x140>)
 801a70c:	481e      	ldr	r0, [pc, #120]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a70e:	f005 ff43 	bl	8020598 <iprintf>
 801a712:	e7a5      	b.n	801a660 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a714:	4b1a      	ldr	r3, [pc, #104]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a716:	f240 423a 	movw	r2, #1082	; 0x43a
 801a71a:	491d      	ldr	r1, [pc, #116]	; (801a790 <tcp_enqueue_flags+0x144>)
 801a71c:	481a      	ldr	r0, [pc, #104]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a71e:	f005 ff3b 	bl	8020598 <iprintf>
 801a722:	e7ad      	b.n	801a680 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a724:	f240 4243 	movw	r2, #1091	; 0x443
 801a728:	4b15      	ldr	r3, [pc, #84]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a72a:	491a      	ldr	r1, [pc, #104]	; (801a794 <tcp_enqueue_flags+0x148>)
 801a72c:	4816      	ldr	r0, [pc, #88]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a72e:	f005 ff33 	bl	8020598 <iprintf>
  if (pcb->unsent == NULL) {
 801a732:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801a734:	2a00      	cmp	r2, #0
 801a736:	d1b7      	bne.n	801a6a8 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 801a738:	66e6      	str	r6, [r4, #108]	; 0x6c
 801a73a:	e7b9      	b.n	801a6b0 <tcp_enqueue_flags+0x64>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a73c:	4b10      	ldr	r3, [pc, #64]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a73e:	f240 4242 	movw	r2, #1090	; 0x442
 801a742:	4915      	ldr	r1, [pc, #84]	; (801a798 <tcp_enqueue_flags+0x14c>)
 801a744:	4810      	ldr	r0, [pc, #64]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a746:	f005 ff27 	bl	8020598 <iprintf>
 801a74a:	e7a6      	b.n	801a69a <tcp_enqueue_flags+0x4e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a74c:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801a74e:	2c00      	cmp	r4, #0
 801a750:	d1c7      	bne.n	801a6e2 <tcp_enqueue_flags+0x96>
 801a752:	4b0b      	ldr	r3, [pc, #44]	; (801a780 <tcp_enqueue_flags+0x134>)
 801a754:	f240 4266 	movw	r2, #1126	; 0x466
 801a758:	4910      	ldr	r1, [pc, #64]	; (801a79c <tcp_enqueue_flags+0x150>)
 801a75a:	480b      	ldr	r0, [pc, #44]	; (801a788 <tcp_enqueue_flags+0x13c>)
 801a75c:	f005 ff1c 	bl	8020598 <iprintf>
  return ERR_OK;
 801a760:	4620      	mov	r0, r4
 801a762:	e7be      	b.n	801a6e2 <tcp_enqueue_flags+0x96>
    TCP_STATS_INC(tcp.memerr);
 801a764:	490e      	ldr	r1, [pc, #56]	; (801a7a0 <tcp_enqueue_flags+0x154>)
    return ERR_MEM;
 801a766:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a76a:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801a76c:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801a774:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a776:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801a778:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801a77c:	e7b1      	b.n	801a6e2 <tcp_enqueue_flags+0x96>
 801a77e:	bf00      	nop
 801a780:	0803e518 	.word	0x0803e518
 801a784:	0803e2c4 	.word	0x0803e2c4
 801a788:	08026544 	.word	0x08026544
 801a78c:	0803e31c 	.word	0x0803e31c
 801a790:	0803e33c 	.word	0x0803e33c
 801a794:	0803e390 	.word	0x0803e390
 801a798:	0803e378 	.word	0x0803e378
 801a79c:	0803e3bc 	.word	0x0803e3bc
 801a7a0:	200361ec 	.word	0x200361ec

0801a7a4 <tcp_send_fin>:
{
 801a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a7a6:	4605      	mov	r5, r0
 801a7a8:	b308      	cbz	r0, 801a7ee <tcp_send_fin+0x4a>
  if (pcb->unsent != NULL) {
 801a7aa:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801a7ac:	b90c      	cbnz	r4, 801a7b2 <tcp_send_fin+0xe>
 801a7ae:	e00a      	b.n	801a7c6 <tcp_send_fin+0x22>
 801a7b0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a7b2:	6823      	ldr	r3, [r4, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d1fb      	bne.n	801a7b0 <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a7b8:	6923      	ldr	r3, [r4, #16]
 801a7ba:	8998      	ldrh	r0, [r3, #12]
 801a7bc:	f7f9 fdde 	bl	801437c <lwip_htons>
 801a7c0:	f010 0607 	ands.w	r6, r0, #7
 801a7c4:	d005      	beq.n	801a7d2 <tcp_send_fin+0x2e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a7c6:	4628      	mov	r0, r5
 801a7c8:	2101      	movs	r1, #1
}
 801a7ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a7ce:	f7ff bf3d 	b.w	801a64c <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a7d2:	6923      	ldr	r3, [r4, #16]
 801a7d4:	2001      	movs	r0, #1
 801a7d6:	899f      	ldrh	r7, [r3, #12]
 801a7d8:	f7f9 fdd0 	bl	801437c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801a7dc:	8b6b      	ldrh	r3, [r5, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a7de:	4338      	orrs	r0, r7
 801a7e0:	6922      	ldr	r2, [r4, #16]
      tcp_set_flags(pcb, TF_FIN);
 801a7e2:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a7e6:	8190      	strh	r0, [r2, #12]
}
 801a7e8:	4630      	mov	r0, r6
      tcp_set_flags(pcb, TF_FIN);
 801a7ea:	836b      	strh	r3, [r5, #26]
}
 801a7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a7ee:	4b04      	ldr	r3, [pc, #16]	; (801a800 <tcp_send_fin+0x5c>)
 801a7f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801a7f4:	4903      	ldr	r1, [pc, #12]	; (801a804 <tcp_send_fin+0x60>)
 801a7f6:	4804      	ldr	r0, [pc, #16]	; (801a808 <tcp_send_fin+0x64>)
 801a7f8:	f005 fece 	bl	8020598 <iprintf>
 801a7fc:	e7d5      	b.n	801a7aa <tcp_send_fin+0x6>
 801a7fe:	bf00      	nop
 801a800:	0803e518 	.word	0x0803e518
 801a804:	0803e69c 	.word	0x0803e69c
 801a808:	08026544 	.word	0x08026544

0801a80c <tcp_rexmit_rto_prepare>:
{
 801a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a80e:	4605      	mov	r5, r0
 801a810:	2800      	cmp	r0, #0
 801a812:	d033      	beq.n	801a87c <tcp_rexmit_rto_prepare+0x70>
  if (pcb->unacked == NULL) {
 801a814:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801a816:	b924      	cbnz	r4, 801a822 <tcp_rexmit_rto_prepare+0x16>
 801a818:	e029      	b.n	801a86e <tcp_rexmit_rto_prepare+0x62>
    if (tcp_output_segment_busy(seg)) {
 801a81a:	f7ff f8fb 	bl	8019a14 <tcp_output_segment_busy>
 801a81e:	bb30      	cbnz	r0, 801a86e <tcp_rexmit_rto_prepare+0x62>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a820:	6824      	ldr	r4, [r4, #0]
 801a822:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801a824:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a826:	2b00      	cmp	r3, #0
 801a828:	d1f7      	bne.n	801a81a <tcp_rexmit_rto_prepare+0xe>
  if (tcp_output_segment_busy(seg)) {
 801a82a:	f7ff f8f3 	bl	8019a14 <tcp_output_segment_busy>
 801a82e:	b9f0      	cbnz	r0, 801a86e <tcp_rexmit_rto_prepare+0x62>
  seg->next = pcb->unsent;
 801a830:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801a832:	6023      	str	r3, [r4, #0]
  if (pcb->unsent == NULL) {
 801a834:	b1f3      	cbz	r3, 801a874 <tcp_rexmit_rto_prepare+0x68>
  tcp_set_flags(pcb, TF_RTO);
 801a836:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801a838:	2700      	movs	r7, #0
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a83a:	6922      	ldr	r2, [r4, #16]
  pcb->unsent = pcb->unacked;
 801a83c:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801a83e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  pcb->unacked = NULL;
 801a842:	672f      	str	r7, [r5, #112]	; 0x70
  pcb->unsent = pcb->unacked;
 801a844:	66e9      	str	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801a846:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a848:	6850      	ldr	r0, [r2, #4]
 801a84a:	f7f9 fd9b 	bl	8014384 <lwip_htonl>
 801a84e:	6923      	ldr	r3, [r4, #16]
 801a850:	4606      	mov	r6, r0
 801a852:	8924      	ldrh	r4, [r4, #8]
 801a854:	8998      	ldrh	r0, [r3, #12]
 801a856:	f7f9 fd91 	bl	801437c <lwip_htons>
 801a85a:	f010 0303 	ands.w	r3, r0, #3
 801a85e:	4426      	add	r6, r4
  return ERR_OK;
 801a860:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a862:	bf18      	it	ne
 801a864:	2301      	movne	r3, #1
  pcb->rttest = 0;
 801a866:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a868:	4433      	add	r3, r6
 801a86a:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801a86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801a86e:	f06f 0005 	mvn.w	r0, #5
}
 801a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = seg->oversize_left;
 801a874:	8963      	ldrh	r3, [r4, #10]
 801a876:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a87a:	e7dc      	b.n	801a836 <tcp_rexmit_rto_prepare+0x2a>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a87c:	4b03      	ldr	r3, [pc, #12]	; (801a88c <tcp_rexmit_rto_prepare+0x80>)
 801a87e:	f240 6263 	movw	r2, #1635	; 0x663
 801a882:	4903      	ldr	r1, [pc, #12]	; (801a890 <tcp_rexmit_rto_prepare+0x84>)
 801a884:	4803      	ldr	r0, [pc, #12]	; (801a894 <tcp_rexmit_rto_prepare+0x88>)
 801a886:	f005 fe87 	bl	8020598 <iprintf>
 801a88a:	e7c3      	b.n	801a814 <tcp_rexmit_rto_prepare+0x8>
 801a88c:	0803e518 	.word	0x0803e518
 801a890:	0803e620 	.word	0x0803e620
 801a894:	08026544 	.word	0x08026544

0801a898 <tcp_rexmit>:
{
 801a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a89a:	4607      	mov	r7, r0
 801a89c:	b378      	cbz	r0, 801a8fe <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801a89e:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801a8a0:	2e00      	cmp	r6, #0
 801a8a2:	d034      	beq.n	801a90e <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f7ff f8b5 	bl	8019a14 <tcp_output_segment_busy>
 801a8aa:	bb80      	cbnz	r0, 801a90e <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801a8ac:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801a8ae:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801a8b4:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801a8b6:	b91b      	cbnz	r3, 801a8c0 <tcp_rexmit+0x28>
 801a8b8:	e00f      	b.n	801a8da <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801a8ba:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801a8bc:	682b      	ldr	r3, [r5, #0]
 801a8be:	b163      	cbz	r3, 801a8da <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a8c0:	691b      	ldr	r3, [r3, #16]
 801a8c2:	6858      	ldr	r0, [r3, #4]
 801a8c4:	f7f9 fd5e 	bl	8014384 <lwip_htonl>
 801a8c8:	6933      	ldr	r3, [r6, #16]
 801a8ca:	4604      	mov	r4, r0
 801a8cc:	6858      	ldr	r0, [r3, #4]
 801a8ce:	f7f9 fd59 	bl	8014384 <lwip_htonl>
 801a8d2:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	dbf0      	blt.n	801a8ba <tcp_rexmit+0x22>
 801a8d8:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801a8da:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801a8dc:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801a8de:	6833      	ldr	r3, [r6, #0]
 801a8e0:	b153      	cbz	r3, 801a8f8 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801a8e2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801a8e6:	2bff      	cmp	r3, #255	; 0xff
 801a8e8:	d002      	beq.n	801a8f0 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801a8ea:	3301      	adds	r3, #1
 801a8ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801a8f0:	2300      	movs	r3, #0
  return ERR_OK;
 801a8f2:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801a8f4:	637b      	str	r3, [r7, #52]	; 0x34
}
 801a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801a8f8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801a8fc:	e7f1      	b.n	801a8e2 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a8fe:	4b05      	ldr	r3, [pc, #20]	; (801a914 <tcp_rexmit+0x7c>)
 801a900:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a904:	4904      	ldr	r1, [pc, #16]	; (801a918 <tcp_rexmit+0x80>)
 801a906:	4805      	ldr	r0, [pc, #20]	; (801a91c <tcp_rexmit+0x84>)
 801a908:	f005 fe46 	bl	8020598 <iprintf>
 801a90c:	e7c7      	b.n	801a89e <tcp_rexmit+0x6>
    return ERR_VAL;
 801a90e:	f06f 0005 	mvn.w	r0, #5
}
 801a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a914:	0803e518 	.word	0x0803e518
 801a918:	0803e5a8 	.word	0x0803e5a8
 801a91c:	08026544 	.word	0x08026544

0801a920 <tcp_rexmit_fast>:
{
 801a920:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a922:	4604      	mov	r4, r0
 801a924:	b338      	cbz	r0, 801a976 <tcp_rexmit_fast+0x56>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a926:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a928:	b113      	cbz	r3, 801a930 <tcp_rexmit_fast+0x10>
 801a92a:	8b63      	ldrh	r3, [r4, #26]
 801a92c:	075b      	lsls	r3, r3, #29
 801a92e:	d500      	bpl.n	801a932 <tcp_rexmit_fast+0x12>
}
 801a930:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a932:	4620      	mov	r0, r4
 801a934:	f7ff ffb0 	bl	801a898 <tcp_rexmit>
 801a938:	2800      	cmp	r0, #0
 801a93a:	d1f9      	bne.n	801a930 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a93c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a940:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801a944:	429a      	cmp	r2, r3
 801a946:	bf38      	it	cc
 801a948:	0853      	lsrcc	r3, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a94a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a94c:	bf28      	it	cs
 801a94e:	085b      	lsrcs	r3, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a950:	0051      	lsls	r1, r2, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a952:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a956:	428b      	cmp	r3, r1
 801a958:	d202      	bcs.n	801a960 <tcp_rexmit_fast+0x40>
        pcb->ssthresh = 2 * pcb->mss;
 801a95a:	b28b      	uxth	r3, r1
 801a95c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a960:	440a      	add	r2, r1
      tcp_set_flags(pcb, TF_INFR);
 801a962:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801a964:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a966:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801a968:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801a96c:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a96e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a972:	8362      	strh	r2, [r4, #26]
}
 801a974:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a976:	4b04      	ldr	r3, [pc, #16]	; (801a988 <tcp_rexmit_fast+0x68>)
 801a978:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a97c:	4903      	ldr	r1, [pc, #12]	; (801a98c <tcp_rexmit_fast+0x6c>)
 801a97e:	4804      	ldr	r0, [pc, #16]	; (801a990 <tcp_rexmit_fast+0x70>)
 801a980:	f005 fe0a 	bl	8020598 <iprintf>
 801a984:	e7cf      	b.n	801a926 <tcp_rexmit_fast+0x6>
 801a986:	bf00      	nop
 801a988:	0803e518 	.word	0x0803e518
 801a98c:	0803e5c0 	.word	0x0803e5c0
 801a990:	08026544 	.word	0x08026544

0801a994 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a998:	b084      	sub	sp, #16
 801a99a:	4682      	mov	sl, r0
 801a99c:	460e      	mov	r6, r1
 801a99e:	4617      	mov	r7, r2
 801a9a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a9a2:	461c      	mov	r4, r3
{
 801a9a4:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801a9a8:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a9ac:	b303      	cbz	r3, 801a9f0 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a9ae:	b345      	cbz	r5, 801aa02 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	f246 0608 	movw	r6, #24584	; 0x6008
 801a9b6:	f7f9 fce5 	bl	8014384 <lwip_htonl>
 801a9ba:	2114      	movs	r1, #20
 801a9bc:	4602      	mov	r2, r0
 801a9be:	f8cd 9000 	str.w	r9, [sp]
 801a9c2:	4643      	mov	r3, r8
 801a9c4:	4638      	mov	r0, r7
 801a9c6:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801a9ca:	2100      	movs	r1, #0
 801a9cc:	f7ff f918 	bl	8019c00 <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a9d0:	4606      	mov	r6, r0
 801a9d2:	b150      	cbz	r0, 801a9ea <tcp_rst+0x56>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a9d4:	f7ff f984 	bl	8019ce0 <tcp_output_fill_options.isra.0.constprop.5>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a9d8:	462b      	mov	r3, r5
 801a9da:	4622      	mov	r2, r4
 801a9dc:	4631      	mov	r1, r6
 801a9de:	4650      	mov	r0, sl
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a9e0:	b004      	add	sp, #16
 801a9e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a9e6:	f7ff b98b 	b.w	8019d00 <tcp_output_control_segment>
}
 801a9ea:	b004      	add	sp, #16
 801a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a9f0:	4b08      	ldr	r3, [pc, #32]	; (801aa14 <tcp_rst+0x80>)
 801a9f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a9f6:	4908      	ldr	r1, [pc, #32]	; (801aa18 <tcp_rst+0x84>)
 801a9f8:	4808      	ldr	r0, [pc, #32]	; (801aa1c <tcp_rst+0x88>)
 801a9fa:	f005 fdcd 	bl	8020598 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a9fe:	2d00      	cmp	r5, #0
 801aa00:	d1d6      	bne.n	801a9b0 <tcp_rst+0x1c>
 801aa02:	4b04      	ldr	r3, [pc, #16]	; (801aa14 <tcp_rst+0x80>)
 801aa04:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801aa08:	4905      	ldr	r1, [pc, #20]	; (801aa20 <tcp_rst+0x8c>)
 801aa0a:	4804      	ldr	r0, [pc, #16]	; (801aa1c <tcp_rst+0x88>)
 801aa0c:	f005 fdc4 	bl	8020598 <iprintf>
 801aa10:	e7ce      	b.n	801a9b0 <tcp_rst+0x1c>
 801aa12:	bf00      	nop
 801aa14:	0803e518 	.word	0x0803e518
 801aa18:	0803e644 	.word	0x0803e644
 801aa1c:	08026544 	.word	0x08026544
 801aa20:	0803e660 	.word	0x0803e660

0801aa24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801aa24:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801aa26:	4604      	mov	r4, r0
 801aa28:	b1d8      	cbz	r0, 801aa62 <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801aa2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801aa2c:	f7f9 fcaa 	bl	8014384 <lwip_htonl>
 801aa30:	2100      	movs	r1, #0
 801aa32:	4602      	mov	r2, r0
 801aa34:	4620      	mov	r0, r4
 801aa36:	f7ff f929 	bl	8019c8c <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801aa3a:	4605      	mov	r5, r0
 801aa3c:	b1c8      	cbz	r0, 801aa72 <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801aa3e:	f7ff f94f 	bl	8019ce0 <tcp_output_fill_options.isra.0.constprop.5>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa42:	1d23      	adds	r3, r4, #4
 801aa44:	4629      	mov	r1, r5
 801aa46:	4622      	mov	r2, r4
 801aa48:	4620      	mov	r0, r4
 801aa4a:	f7ff f959 	bl	8019d00 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa4e:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801aa50:	b918      	cbnz	r0, 801aa5a <tcp_send_empty_ack+0x36>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa52:	f023 0303 	bic.w	r3, r3, #3
 801aa56:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 801aa58:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa5a:	f043 0303 	orr.w	r3, r3, #3
 801aa5e:	8363      	strh	r3, [r4, #26]
}
 801aa60:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801aa62:	4b07      	ldr	r3, [pc, #28]	; (801aa80 <tcp_send_empty_ack+0x5c>)
 801aa64:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801aa68:	4906      	ldr	r1, [pc, #24]	; (801aa84 <tcp_send_empty_ack+0x60>)
 801aa6a:	4807      	ldr	r0, [pc, #28]	; (801aa88 <tcp_send_empty_ack+0x64>)
 801aa6c:	f005 fd94 	bl	8020598 <iprintf>
 801aa70:	e7db      	b.n	801aa2a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa72:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801aa74:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801aa78:	f043 0303 	orr.w	r3, r3, #3
 801aa7c:	8363      	strh	r3, [r4, #26]
}
 801aa7e:	bd38      	pop	{r3, r4, r5, pc}
 801aa80:	0803e518 	.word	0x0803e518
 801aa84:	0803e67c 	.word	0x0803e67c
 801aa88:	08026544 	.word	0x08026544

0801aa8c <tcp_output>:
{
 801aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aa90:	4604      	mov	r4, r0
{
 801aa92:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aa94:	2800      	cmp	r0, #0
 801aa96:	f000 81b5 	beq.w	801ae04 <tcp_output+0x378>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aa9a:	7d23      	ldrb	r3, [r4, #20]
 801aa9c:	2b01      	cmp	r3, #1
 801aa9e:	f000 8139 	beq.w	801ad14 <tcp_output+0x288>
  if (tcp_input_pcb == pcb) {
 801aaa2:	4bb5      	ldr	r3, [pc, #724]	; (801ad78 <tcp_output+0x2ec>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	42a3      	cmp	r3, r4
 801aaa8:	f000 8130 	beq.w	801ad0c <tcp_output+0x280>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aaac:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 801aab0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 801aab4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aab6:	429f      	cmp	r7, r3
 801aab8:	bf28      	it	cs
 801aaba:	461f      	movcs	r7, r3
  if (seg == NULL) {
 801aabc:	b955      	cbnz	r5, 801aad4 <tcp_output+0x48>
    if (pcb->flags & TF_ACK_NOW) {
 801aabe:	8b63      	ldrh	r3, [r4, #26]
 801aac0:	0799      	lsls	r1, r3, #30
 801aac2:	f100 8144 	bmi.w	801ad4e <tcp_output+0x2c2>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801aac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  return ERR_OK;
 801aaca:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801aacc:	8363      	strh	r3, [r4, #26]
}
 801aace:	b005      	add	sp, #20
 801aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801aad4:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801aad6:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801aada:	2800      	cmp	r0, #0
 801aadc:	f040 81b7 	bne.w	801ae4e <tcp_output+0x3c2>
    return ip_route(src, dst);
 801aae0:	4648      	mov	r0, r9
 801aae2:	f003 f8d5 	bl	801dc90 <ip4_route>
 801aae6:	4682      	mov	sl, r0
  if (netif == NULL) {
 801aae8:	f1ba 0f00 	cmp.w	sl, #0
 801aaec:	f000 81bc 	beq.w	801ae68 <tcp_output+0x3dc>
  if (ip_addr_isany(&pcb->local_ip)) {
 801aaf0:	6823      	ldr	r3, [r4, #0]
 801aaf2:	b913      	cbnz	r3, 801aafa <tcp_output+0x6e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801aaf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801aaf8:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801aafa:	692b      	ldr	r3, [r5, #16]
 801aafc:	6858      	ldr	r0, [r3, #4]
 801aafe:	f7f9 fc41 	bl	8014384 <lwip_htonl>
 801ab02:	892b      	ldrh	r3, [r5, #8]
 801ab04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801ab06:	1a9b      	subs	r3, r3, r2
 801ab08:	4418      	add	r0, r3
 801ab0a:	42b8      	cmp	r0, r7
 801ab0c:	f200 810a 	bhi.w	801ad24 <tcp_output+0x298>
  pcb->persist_backoff = 0;
 801ab10:	2300      	movs	r3, #0
  useg = pcb->unacked;
 801ab12:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801ab16:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
 801ab1a:	f1b8 0f00 	cmp.w	r8, #0
 801ab1e:	d101      	bne.n	801ab24 <tcp_output+0x98>
 801ab20:	e004      	b.n	801ab2c <tcp_output+0xa0>
 801ab22:	4698      	mov	r8, r3
    for (; useg->next != NULL; useg = useg->next);
 801ab24:	f8d8 3000 	ldr.w	r3, [r8]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d1fa      	bne.n	801ab22 <tcp_output+0x96>
    LWIP_ASSERT("RST not expected here!",
 801ab2c:	464e      	mov	r6, r9
 801ab2e:	e04a      	b.n	801abc6 <tcp_output+0x13a>
    if (pcb->state != SYN_SENT) {
 801ab30:	7d23      	ldrb	r3, [r4, #20]
    seg->oversize_left = 0;
 801ab32:	2100      	movs	r1, #0
    pcb->unsent = seg->next;
 801ab34:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801ab36:	2b02      	cmp	r3, #2
    seg->oversize_left = 0;
 801ab38:	8169      	strh	r1, [r5, #10]
    pcb->unsent = seg->next;
 801ab3a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ab3c:	d003      	beq.n	801ab46 <tcp_output+0xba>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ab3e:	8b63      	ldrh	r3, [r4, #26]
 801ab40:	f023 0303 	bic.w	r3, r3, #3
 801ab44:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab46:	692b      	ldr	r3, [r5, #16]
 801ab48:	6858      	ldr	r0, [r3, #4]
 801ab4a:	f7f9 fc1b 	bl	8014384 <lwip_htonl>
 801ab4e:	692b      	ldr	r3, [r5, #16]
 801ab50:	4681      	mov	r9, r0
 801ab52:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801ab56:	8998      	ldrh	r0, [r3, #12]
 801ab58:	f7f9 fc10 	bl	801437c <lwip_htons>
 801ab5c:	f010 0003 	ands.w	r0, r0, #3
 801ab60:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ab62:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab64:	bf18      	it	ne
 801ab66:	2001      	movne	r0, #1
 801ab68:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801ab6a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ab6e:	1a1b      	subs	r3, r3, r0
 801ab70:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801ab72:	692b      	ldr	r3, [r5, #16]
      pcb->snd_nxt = snd_nxt;
 801ab74:	bfb8      	it	lt
 801ab76:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801ab78:	8998      	ldrh	r0, [r3, #12]
 801ab7a:	f7f9 fbff 	bl	801437c <lwip_htons>
 801ab7e:	f010 0003 	ands.w	r0, r0, #3
 801ab82:	bf18      	it	ne
 801ab84:	2001      	movne	r0, #1
 801ab86:	eb10 0f09 	cmn.w	r0, r9
 801ab8a:	f000 80ee 	beq.w	801ad6a <tcp_output+0x2de>
      seg->next = NULL;
 801ab8e:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801ab90:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801ab92:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	f000 80ec 	beq.w	801ad72 <tcp_output+0x2e6>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ab9a:	692b      	ldr	r3, [r5, #16]
 801ab9c:	6858      	ldr	r0, [r3, #4]
 801ab9e:	f7f9 fbf1 	bl	8014384 <lwip_htonl>
 801aba2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801aba6:	4681      	mov	r9, r0
 801aba8:	6858      	ldr	r0, [r3, #4]
 801abaa:	f7f9 fbeb 	bl	8014384 <lwip_htonl>
 801abae:	eba9 0000 	sub.w	r0, r9, r0
 801abb2:	2800      	cmp	r0, #0
 801abb4:	f2c0 812e 	blt.w	801ae14 <tcp_output+0x388>
          useg->next = seg;
 801abb8:	f8c8 5000 	str.w	r5, [r8]
 801abbc:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801abbe:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801abc0:	2d00      	cmp	r5, #0
 801abc2:	f000 8148 	beq.w	801ae56 <tcp_output+0x3ca>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801abc6:	692b      	ldr	r3, [r5, #16]
 801abc8:	6858      	ldr	r0, [r3, #4]
 801abca:	f7f9 fbdb 	bl	8014384 <lwip_htonl>
 801abce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801abd0:	892a      	ldrh	r2, [r5, #8]
 801abd2:	1ac0      	subs	r0, r0, r3
 801abd4:	4410      	add	r0, r2
  while (seg != NULL &&
 801abd6:	42b8      	cmp	r0, r7
 801abd8:	f200 813f 	bhi.w	801ae5a <tcp_output+0x3ce>
    LWIP_ASSERT("RST not expected here!",
 801abdc:	692b      	ldr	r3, [r5, #16]
 801abde:	8998      	ldrh	r0, [r3, #12]
 801abe0:	f7f9 fbcc 	bl	801437c <lwip_htons>
 801abe4:	0742      	lsls	r2, r0, #29
 801abe6:	f100 80b8 	bmi.w	801ad5a <tcp_output+0x2ce>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801abea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801abec:	b163      	cbz	r3, 801ac08 <tcp_output+0x17c>
 801abee:	8b62      	ldrh	r2, [r4, #26]
 801abf0:	f012 0f44 	tst.w	r2, #68	; 0x44
 801abf4:	4613      	mov	r3, r2
 801abf6:	d107      	bne.n	801ac08 <tcp_output+0x17c>
 801abf8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801abfa:	2900      	cmp	r1, #0
 801abfc:	f000 80d0 	beq.w	801ada0 <tcp_output+0x314>
 801ac00:	6808      	ldr	r0, [r1, #0]
 801ac02:	2800      	cmp	r0, #0
 801ac04:	f000 80c6 	beq.w	801ad94 <tcp_output+0x308>
    if (pcb->state != SYN_SENT) {
 801ac08:	7d23      	ldrb	r3, [r4, #20]
 801ac0a:	2b02      	cmp	r3, #2
 801ac0c:	d009      	beq.n	801ac22 <tcp_output+0x196>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ac0e:	692b      	ldr	r3, [r5, #16]
 801ac10:	2010      	movs	r0, #16
 801ac12:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801ac16:	f7f9 fbb1 	bl	801437c <lwip_htons>
 801ac1a:	692b      	ldr	r3, [r5, #16]
 801ac1c:	ea49 0000 	orr.w	r0, r9, r0
 801ac20:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801ac22:	4628      	mov	r0, r5
 801ac24:	f7fe fef6 	bl	8019a14 <tcp_output_segment_busy>
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	d181      	bne.n	801ab30 <tcp_output+0xa4>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ac2c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ac30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ac32:	f7f9 fba7 	bl	8014384 <lwip_htonl>
 801ac36:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ac3a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801ac3c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ac40:	f7f9 fb9c 	bl	801437c <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ac44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801ac46:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ac48:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ac4c:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ac4e:	f8d5 9010 	ldr.w	r9, [r5, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ac52:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ac54:	7b2b      	ldrb	r3, [r5, #12]
 801ac56:	07db      	lsls	r3, r3, #31
 801ac58:	f100 80c3 	bmi.w	801ade2 <tcp_output+0x356>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ac5c:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801ac60:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	da01      	bge.n	801ac6c <tcp_output+0x1e0>
    pcb->rtime = 0;
 801ac68:	2300      	movs	r3, #0
 801ac6a:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801ac6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	f000 80ac 	beq.w	801adcc <tcp_output+0x340>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ac74:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801ac76:	2100      	movs	r1, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ac78:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801ac7a:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ac7c:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801ac80:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801ac84:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ac88:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801ac8a:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801ac8c:	ebac 0303 	sub.w	r3, ip, r3
  seg->p->tot_len -= len;
 801ac90:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801ac92:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801ac94:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801ac96:	f889 1010 	strb.w	r1, [r9, #16]
 801ac9a:	f889 1011 	strb.w	r1, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ac9e:	7b2b      	ldrb	r3, [r5, #12]
 801aca0:	009b      	lsls	r3, r3, #2
 801aca2:	f003 0304 	and.w	r3, r3, #4
 801aca6:	3314      	adds	r3, #20
 801aca8:	444b      	add	r3, r9
 801acaa:	459b      	cmp	fp, r3
 801acac:	d00a      	beq.n	801acc4 <tcp_output+0x238>
 801acae:	f240 621c 	movw	r2, #1564	; 0x61c
 801acb2:	4b32      	ldr	r3, [pc, #200]	; (801ad7c <tcp_output+0x2f0>)
 801acb4:	4932      	ldr	r1, [pc, #200]	; (801ad80 <tcp_output+0x2f4>)
 801acb6:	4833      	ldr	r0, [pc, #204]	; (801ad84 <tcp_output+0x2f8>)
 801acb8:	f005 fc6e 	bl	8020598 <iprintf>
 801acbc:	6868      	ldr	r0, [r5, #4]
 801acbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801acc2:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801acc4:	4623      	mov	r3, r4
 801acc6:	2106      	movs	r1, #6
 801acc8:	9600      	str	r6, [sp, #0]
 801acca:	f7fa f913 	bl	8014ef4 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801acce:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801ad90 <tcp_output+0x304>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801acd2:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801acd6:	f8a9 0010 	strh.w	r0, [r9, #16]
  TCP_STATS_INC(tcp.xmit);
 801acda:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801acde:	4632      	mov	r2, r6
 801ace0:	6868      	ldr	r0, [r5, #4]
 801ace2:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801ace4:	3301      	adds	r3, #1
 801ace6:	f8ac 3090 	strh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801acea:	7ae3      	ldrb	r3, [r4, #11]
 801acec:	e9cd ea01 	strd	lr, sl, [sp, #4]
 801acf0:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801acf4:	f8cd c000 	str.w	ip, [sp]
 801acf8:	f003 f9e2 	bl	801e0c0 <ip4_output_if>
    if (err != ERR_OK) {
 801acfc:	2800      	cmp	r0, #0
 801acfe:	f43f af17 	beq.w	801ab30 <tcp_output+0xa4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad02:	8b63      	ldrh	r3, [r4, #26]
 801ad04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad08:	8363      	strh	r3, [r4, #26]
      return err;
 801ad0a:	e6e0      	b.n	801aace <tcp_output+0x42>
    return ERR_OK;
 801ad0c:	2000      	movs	r0, #0
}
 801ad0e:	b005      	add	sp, #20
 801ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ad14:	4b19      	ldr	r3, [pc, #100]	; (801ad7c <tcp_output+0x2f0>)
 801ad16:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801ad1a:	491b      	ldr	r1, [pc, #108]	; (801ad88 <tcp_output+0x2fc>)
 801ad1c:	4819      	ldr	r0, [pc, #100]	; (801ad84 <tcp_output+0x2f8>)
 801ad1e:	f005 fc3b 	bl	8020598 <iprintf>
 801ad22:	e6be      	b.n	801aaa2 <tcp_output+0x16>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ad24:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801ad28:	42bb      	cmp	r3, r7
 801ad2a:	f47f aec8 	bne.w	801aabe <tcp_output+0x32>
 801ad2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	f47f aec4 	bne.w	801aabe <tcp_output+0x32>
 801ad36:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	f47f aebf 	bne.w	801aabe <tcp_output+0x32>
      pcb->persist_cnt = 0;
 801ad40:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 801ad44:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801ad48:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801ad4c:	e6b7      	b.n	801aabe <tcp_output+0x32>
      return tcp_send_empty_ack(pcb);
 801ad4e:	4620      	mov	r0, r4
}
 801ad50:	b005      	add	sp, #20
 801ad52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801ad56:	f7ff be65 	b.w	801aa24 <tcp_send_empty_ack>
    LWIP_ASSERT("RST not expected here!",
 801ad5a:	4b08      	ldr	r3, [pc, #32]	; (801ad7c <tcp_output+0x2f0>)
 801ad5c:	f240 5237 	movw	r2, #1335	; 0x537
 801ad60:	490a      	ldr	r1, [pc, #40]	; (801ad8c <tcp_output+0x300>)
 801ad62:	4808      	ldr	r0, [pc, #32]	; (801ad84 <tcp_output+0x2f8>)
 801ad64:	f005 fc18 	bl	8020598 <iprintf>
 801ad68:	e73f      	b.n	801abea <tcp_output+0x15e>
      tcp_seg_free(seg);
 801ad6a:	4628      	mov	r0, r5
 801ad6c:	f7fc f8b6 	bl	8016edc <tcp_seg_free>
 801ad70:	e725      	b.n	801abbe <tcp_output+0x132>
        pcb->unacked = seg;
 801ad72:	6725      	str	r5, [r4, #112]	; 0x70
 801ad74:	46a8      	mov	r8, r5
 801ad76:	e722      	b.n	801abbe <tcp_output+0x132>
 801ad78:	20036310 	.word	0x20036310
 801ad7c:	0803e518 	.word	0x0803e518
 801ad80:	0803e458 	.word	0x0803e458
 801ad84:	08026544 	.word	0x08026544
 801ad88:	0803e418 	.word	0x0803e418
 801ad8c:	0803e440 	.word	0x0803e440
 801ad90:	200361ec 	.word	0x200361ec
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ad94:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ad98:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801ad9a:	4584      	cmp	ip, r0
 801ad9c:	f4bf af34 	bcs.w	801ac08 <tcp_output+0x17c>
 801ada0:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801ada4:	2800      	cmp	r0, #0
 801ada6:	f43f af2f 	beq.w	801ac08 <tcp_output+0x17c>
 801adaa:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801adae:	2808      	cmp	r0, #8
 801adb0:	f63f af2a 	bhi.w	801ac08 <tcp_output+0x17c>
 801adb4:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 801adb8:	f47f af26 	bne.w	801ac08 <tcp_output+0x17c>
  if (pcb->unsent == NULL) {
 801adbc:	2900      	cmp	r1, #0
 801adbe:	f47f ae82 	bne.w	801aac6 <tcp_output+0x3a>
    pcb->unsent_oversize = 0;
 801adc2:	2100      	movs	r1, #0
 801adc4:	4613      	mov	r3, r2
 801adc6:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801adca:	e67c      	b.n	801aac6 <tcp_output+0x3a>
    pcb->rttest = tcp_ticks;
 801adcc:	4b28      	ldr	r3, [pc, #160]	; (801ae70 <tcp_output+0x3e4>)
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801add2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801add6:	f7f9 fad5 	bl	8014384 <lwip_htonl>
 801adda:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801adde:	63a0      	str	r0, [r4, #56]	; 0x38
 801ade0:	e748      	b.n	801ac74 <tcp_output+0x1e8>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ade2:	4632      	mov	r2, r6
 801ade4:	4651      	mov	r1, sl
 801ade6:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801adea:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801adee:	f7fd f827 	bl	8017e40 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801adf2:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801adf6:	f7f9 fac5 	bl	8014384 <lwip_htonl>
 801adfa:	f8c9 0014 	str.w	r0, [r9, #20]
 801adfe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ae02:	e72d      	b.n	801ac60 <tcp_output+0x1d4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ae04:	4b1b      	ldr	r3, [pc, #108]	; (801ae74 <tcp_output+0x3e8>)
 801ae06:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ae0a:	491b      	ldr	r1, [pc, #108]	; (801ae78 <tcp_output+0x3ec>)
 801ae0c:	481b      	ldr	r0, [pc, #108]	; (801ae7c <tcp_output+0x3f0>)
 801ae0e:	f005 fbc3 	bl	8020598 <iprintf>
 801ae12:	e642      	b.n	801aa9a <tcp_output+0xe>
          while (*cur_seg &&
 801ae14:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ae16:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801ae1a:	b92b      	cbnz	r3, 801ae28 <tcp_output+0x39c>
 801ae1c:	e013      	b.n	801ae46 <tcp_output+0x3ba>
            cur_seg = &((*cur_seg)->next );
 801ae1e:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801ae22:	f8db 3000 	ldr.w	r3, [fp]
 801ae26:	b173      	cbz	r3, 801ae46 <tcp_output+0x3ba>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ae28:	691b      	ldr	r3, [r3, #16]
 801ae2a:	6858      	ldr	r0, [r3, #4]
 801ae2c:	f7f9 faaa 	bl	8014384 <lwip_htonl>
 801ae30:	692b      	ldr	r3, [r5, #16]
 801ae32:	4681      	mov	r9, r0
 801ae34:	6858      	ldr	r0, [r3, #4]
 801ae36:	f7f9 faa5 	bl	8014384 <lwip_htonl>
 801ae3a:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801ae3e:	2800      	cmp	r0, #0
 801ae40:	dbed      	blt.n	801ae1e <tcp_output+0x392>
 801ae42:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 801ae46:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801ae48:	f8cb 5000 	str.w	r5, [fp]
 801ae4c:	e6b7      	b.n	801abbe <tcp_output+0x132>
    return netif_get_by_index(pcb->netif_idx);
 801ae4e:	f7fb f81f 	bl	8015e90 <netif_get_by_index>
 801ae52:	4682      	mov	sl, r0
 801ae54:	e648      	b.n	801aae8 <tcp_output+0x5c>
 801ae56:	8b62      	ldrh	r2, [r4, #26]
 801ae58:	e7b3      	b.n	801adc2 <tcp_output+0x336>
 801ae5a:	8b62      	ldrh	r2, [r4, #26]
 801ae5c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801ae5e:	4613      	mov	r3, r2
  if (pcb->unsent == NULL) {
 801ae60:	2900      	cmp	r1, #0
 801ae62:	f47f ae30 	bne.w	801aac6 <tcp_output+0x3a>
 801ae66:	e7ac      	b.n	801adc2 <tcp_output+0x336>
    return ERR_RTE;
 801ae68:	f06f 0003 	mvn.w	r0, #3
 801ae6c:	e62f      	b.n	801aace <tcp_output+0x42>
 801ae6e:	bf00      	nop
 801ae70:	20036300 	.word	0x20036300
 801ae74:	0803e518 	.word	0x0803e518
 801ae78:	0803e400 	.word	0x0803e400
 801ae7c:	08026544 	.word	0x08026544

0801ae80 <tcp_rexmit_rto_commit>:
{
 801ae80:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ae82:	4604      	mov	r4, r0
 801ae84:	b158      	cbz	r0, 801ae9e <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801ae86:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801ae8a:	2bff      	cmp	r3, #255	; 0xff
 801ae8c:	d002      	beq.n	801ae94 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801ae8e:	3301      	adds	r3, #1
 801ae90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801ae94:	4620      	mov	r0, r4
}
 801ae96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801ae9a:	f7ff bdf7 	b.w	801aa8c <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ae9e:	4b04      	ldr	r3, [pc, #16]	; (801aeb0 <tcp_rexmit_rto_commit+0x30>)
 801aea0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801aea4:	4903      	ldr	r1, [pc, #12]	; (801aeb4 <tcp_rexmit_rto_commit+0x34>)
 801aea6:	4804      	ldr	r0, [pc, #16]	; (801aeb8 <tcp_rexmit_rto_commit+0x38>)
 801aea8:	f005 fb76 	bl	8020598 <iprintf>
 801aeac:	e7eb      	b.n	801ae86 <tcp_rexmit_rto_commit+0x6>
 801aeae:	bf00      	nop
 801aeb0:	0803e518 	.word	0x0803e518
 801aeb4:	0803e5fc 	.word	0x0803e5fc
 801aeb8:	08026544 	.word	0x08026544

0801aebc <tcp_rexmit_rto>:
{
 801aebc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aebe:	4604      	mov	r4, r0
 801aec0:	b148      	cbz	r0, 801aed6 <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aec2:	4620      	mov	r0, r4
 801aec4:	f7ff fca2 	bl	801a80c <tcp_rexmit_rto_prepare>
 801aec8:	b100      	cbz	r0, 801aecc <tcp_rexmit_rto+0x10>
}
 801aeca:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801aecc:	4620      	mov	r0, r4
}
 801aece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801aed2:	f7ff bfd5 	b.w	801ae80 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aed6:	4b04      	ldr	r3, [pc, #16]	; (801aee8 <tcp_rexmit_rto+0x2c>)
 801aed8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801aedc:	4903      	ldr	r1, [pc, #12]	; (801aeec <tcp_rexmit_rto+0x30>)
 801aede:	4804      	ldr	r0, [pc, #16]	; (801aef0 <tcp_rexmit_rto+0x34>)
 801aee0:	f005 fb5a 	bl	8020598 <iprintf>
 801aee4:	e7ed      	b.n	801aec2 <tcp_rexmit_rto+0x6>
 801aee6:	bf00      	nop
 801aee8:	0803e518 	.word	0x0803e518
 801aeec:	0803e5e0 	.word	0x0803e5e0
 801aef0:	08026544 	.word	0x08026544

0801aef4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801aef4:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801aef6:	4604      	mov	r4, r0
 801aef8:	b1a0      	cbz	r0, 801af24 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801aefa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801aefc:	3801      	subs	r0, #1
 801aefe:	f7f9 fa41 	bl	8014384 <lwip_htonl>
 801af02:	2100      	movs	r1, #0
 801af04:	4602      	mov	r2, r0
 801af06:	4620      	mov	r0, r4
 801af08:	f7fe fec0 	bl	8019c8c <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801af0c:	4605      	mov	r5, r0
 801af0e:	b188      	cbz	r0, 801af34 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801af10:	f7fe fee6 	bl	8019ce0 <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801af14:	4629      	mov	r1, r5
 801af16:	1d23      	adds	r3, r4, #4
 801af18:	4622      	mov	r2, r4
 801af1a:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801af1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801af20:	f7fe beee 	b.w	8019d00 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801af24:	4b05      	ldr	r3, [pc, #20]	; (801af3c <tcp_keepalive+0x48>)
 801af26:	f640 0224 	movw	r2, #2084	; 0x824
 801af2a:	4905      	ldr	r1, [pc, #20]	; (801af40 <tcp_keepalive+0x4c>)
 801af2c:	4805      	ldr	r0, [pc, #20]	; (801af44 <tcp_keepalive+0x50>)
 801af2e:	f005 fb33 	bl	8020598 <iprintf>
 801af32:	e7e2      	b.n	801aefa <tcp_keepalive+0x6>
}
 801af34:	f04f 30ff 	mov.w	r0, #4294967295
 801af38:	bd70      	pop	{r4, r5, r6, pc}
 801af3a:	bf00      	nop
 801af3c:	0803e518 	.word	0x0803e518
 801af40:	0803e3e4 	.word	0x0803e3e4
 801af44:	08026544 	.word	0x08026544

0801af48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801af48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801af4c:	4604      	mov	r4, r0
 801af4e:	2800      	cmp	r0, #0
 801af50:	d054      	beq.n	801affc <tcp_zero_window_probe+0xb4>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801af52:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801af54:	2d00      	cmp	r5, #0
 801af56:	d04a      	beq.n	801afee <tcp_zero_window_probe+0xa6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801af58:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801af5c:	2bff      	cmp	r3, #255	; 0xff
 801af5e:	d002      	beq.n	801af66 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801af60:	3301      	adds	r3, #1
 801af62:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801af66:	692b      	ldr	r3, [r5, #16]
 801af68:	8998      	ldrh	r0, [r3, #12]
 801af6a:	f7f9 fa07 	bl	801437c <lwip_htons>
 801af6e:	07c2      	lsls	r2, r0, #31
 801af70:	692b      	ldr	r3, [r5, #16]
 801af72:	d426      	bmi.n	801afc2 <tcp_zero_window_probe+0x7a>
 801af74:	685a      	ldr	r2, [r3, #4]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801af76:	2101      	movs	r1, #1
 801af78:	4620      	mov	r0, r4
 801af7a:	f7fe fe87 	bl	8019c8c <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801af7e:	4606      	mov	r6, r0
 801af80:	2800      	cmp	r0, #0
 801af82:	d037      	beq.n	801aff4 <tcp_zero_window_probe+0xac>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801af84:	6868      	ldr	r0, [r5, #4]
 801af86:	2201      	movs	r2, #1
 801af88:	892f      	ldrh	r7, [r5, #8]
 801af8a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801af8c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801af8e:	1bdb      	subs	r3, r3, r7
 801af90:	3114      	adds	r1, #20
 801af92:	b29b      	uxth	r3, r3
 801af94:	f7fb faf2 	bl	801657c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801af98:	692b      	ldr	r3, [r5, #16]
 801af9a:	6858      	ldr	r0, [r3, #4]
 801af9c:	f7f9 f9f2 	bl	8014384 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801afa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801afa2:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801afa4:	1a1b      	subs	r3, r3, r0
 801afa6:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801afa8:	bfb8      	it	lt
 801afaa:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801afac:	4630      	mov	r0, r6
 801afae:	f7fe fe97 	bl	8019ce0 <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afb2:	4631      	mov	r1, r6
 801afb4:	1d23      	adds	r3, r4, #4
 801afb6:	4622      	mov	r2, r4
 801afb8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801afba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afbe:	f7fe be9f 	b.w	8019d00 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801afc2:	8929      	ldrh	r1, [r5, #8]
 801afc4:	685a      	ldr	r2, [r3, #4]
 801afc6:	2900      	cmp	r1, #0
 801afc8:	d1d5      	bne.n	801af76 <tcp_zero_window_probe+0x2e>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801afca:	4620      	mov	r0, r4
 801afcc:	f7fe fe5e 	bl	8019c8c <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 801afd0:	4606      	mov	r6, r0
 801afd2:	b178      	cbz	r0, 801aff4 <tcp_zero_window_probe+0xac>
  tcphdr = (struct tcp_hdr *)p->payload;
 801afd4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801afd8:	2011      	movs	r0, #17
 801afda:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801afde:	f7f9 f9cd 	bl	801437c <lwip_htons>
 801afe2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801afe6:	4338      	orrs	r0, r7
 801afe8:	f8a8 000c 	strh.w	r0, [r8, #12]
 801afec:	e7d4      	b.n	801af98 <tcp_zero_window_probe+0x50>
    return ERR_OK;
 801afee:	4628      	mov	r0, r5
}
 801aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 801aff4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801affc:	4b03      	ldr	r3, [pc, #12]	; (801b00c <tcp_zero_window_probe+0xc4>)
 801affe:	f640 024f 	movw	r2, #2127	; 0x84f
 801b002:	4903      	ldr	r1, [pc, #12]	; (801b010 <tcp_zero_window_probe+0xc8>)
 801b004:	4803      	ldr	r0, [pc, #12]	; (801b014 <tcp_zero_window_probe+0xcc>)
 801b006:	f005 fac7 	bl	8020598 <iprintf>
 801b00a:	e7a2      	b.n	801af52 <tcp_zero_window_probe+0xa>
 801b00c:	0803e518 	.word	0x0803e518
 801b010:	0803e9e0 	.word	0x0803e9e0
 801b014:	08026544 	.word	0x08026544

0801b018 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b018:	b570      	push	{r4, r5, r6, lr}
 801b01a:	4604      	mov	r4, r0
 801b01c:	460e      	mov	r6, r1
 801b01e:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b020:	4913      	ldr	r1, [pc, #76]	; (801b070 <sys_timeout_abs+0x58>)
 801b022:	22bc      	movs	r2, #188	; 0xbc
 801b024:	200c      	movs	r0, #12
 801b026:	f7fa fd1b 	bl	8015a60 <memp_malloc_fn>
  if (timeout == NULL) {
 801b02a:	b1c8      	cbz	r0, 801b060 <sys_timeout_abs+0x48>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b02c:	4a11      	ldr	r2, [pc, #68]	; (801b074 <sys_timeout_abs+0x5c>)
  timeout->next = NULL;
 801b02e:	2300      	movs	r3, #0
  timeout->h = handler;
 801b030:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801b032:	6811      	ldr	r1, [r2, #0]
  timeout->arg = arg;
 801b034:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801b036:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801b03a:	b121      	cbz	r1, 801b046 <sys_timeout_abs+0x2e>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b03c:	684b      	ldr	r3, [r1, #4]
 801b03e:	1ae3      	subs	r3, r4, r3
 801b040:	2b00      	cmp	r3, #0
 801b042:	da07      	bge.n	801b054 <sys_timeout_abs+0x3c>
    timeout->next = next_timeout;
 801b044:	6001      	str	r1, [r0, #0]
    next_timeout = timeout;
 801b046:	6010      	str	r0, [r2, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 801b048:	bd70      	pop	{r4, r5, r6, pc}
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b04a:	685a      	ldr	r2, [r3, #4]
 801b04c:	1aa2      	subs	r2, r4, r2
 801b04e:	2a00      	cmp	r2, #0
 801b050:	db03      	blt.n	801b05a <sys_timeout_abs+0x42>
 801b052:	4619      	mov	r1, r3
 801b054:	680b      	ldr	r3, [r1, #0]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d1f7      	bne.n	801b04a <sys_timeout_abs+0x32>
        timeout->next = t->next;
 801b05a:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801b05c:	6008      	str	r0, [r1, #0]
}
 801b05e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b060:	4b03      	ldr	r3, [pc, #12]	; (801b070 <sys_timeout_abs+0x58>)
 801b062:	22be      	movs	r2, #190	; 0xbe
 801b064:	4904      	ldr	r1, [pc, #16]	; (801b078 <sys_timeout_abs+0x60>)
 801b066:	4805      	ldr	r0, [pc, #20]	; (801b07c <sys_timeout_abs+0x64>)
}
 801b068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b06c:	f005 ba94 	b.w	8020598 <iprintf>
 801b070:	0803ea6c 	.word	0x0803ea6c
 801b074:	2002242c 	.word	0x2002242c
 801b078:	0803eaa0 	.word	0x0803eaa0
 801b07c:	08026544 	.word	0x08026544

0801b080 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b080:	b510      	push	{r4, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b082:	6843      	ldr	r3, [r0, #4]
{
 801b084:	4604      	mov	r4, r0
  cyclic->handler();
 801b086:	4798      	blx	r3

  now = sys_now();
 801b088:	f7f4 fcb6 	bl	800f9f8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b08c:	4b09      	ldr	r3, [pc, #36]	; (801b0b4 <lwip_cyclic_timer+0x34>)
 801b08e:	6821      	ldr	r1, [r4, #0]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b094:	1a1a      	subs	r2, r3, r0
 801b096:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b098:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b09a:	db05      	blt.n	801b0a8 <lwip_cyclic_timer+0x28>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b09c:	4618      	mov	r0, r3
 801b09e:	4906      	ldr	r1, [pc, #24]	; (801b0b8 <lwip_cyclic_timer+0x38>)
#endif
  }
}
 801b0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b0a4:	f7ff bfb8 	b.w	801b018 <sys_timeout_abs>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b0a8:	4408      	add	r0, r1
 801b0aa:	4903      	ldr	r1, [pc, #12]	; (801b0b8 <lwip_cyclic_timer+0x38>)
}
 801b0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b0b0:	f7ff bfb2 	b.w	801b018 <sys_timeout_abs>
 801b0b4:	20022428 	.word	0x20022428
 801b0b8:	0801b081 	.word	0x0801b081

0801b0bc <tcpip_tcp_timer>:
{
 801b0bc:	b508      	push	{r3, lr}
  tcp_tmr();
 801b0be:	f7fc fe91 	bl	8017de4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b0c2:	4b09      	ldr	r3, [pc, #36]	; (801b0e8 <tcpip_tcp_timer+0x2c>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	b913      	cbnz	r3, 801b0ce <tcpip_tcp_timer+0x12>
 801b0c8:	4b08      	ldr	r3, [pc, #32]	; (801b0ec <tcpip_tcp_timer+0x30>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	b143      	cbz	r3, 801b0e0 <tcpip_tcp_timer+0x24>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b0ce:	f7f4 fc93 	bl	800f9f8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	30fa      	adds	r0, #250	; 0xfa
 801b0d6:	4906      	ldr	r1, [pc, #24]	; (801b0f0 <tcpip_tcp_timer+0x34>)
}
 801b0d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b0dc:	f7ff bf9c 	b.w	801b018 <sys_timeout_abs>
    tcpip_tcp_timer_active = 0;
 801b0e0:	4a04      	ldr	r2, [pc, #16]	; (801b0f4 <tcpip_tcp_timer+0x38>)
 801b0e2:	6013      	str	r3, [r2, #0]
}
 801b0e4:	bd08      	pop	{r3, pc}
 801b0e6:	bf00      	nop
 801b0e8:	200362fc 	.word	0x200362fc
 801b0ec:	2003630c 	.word	0x2003630c
 801b0f0:	0801b0bd 	.word	0x0801b0bd
 801b0f4:	20022430 	.word	0x20022430

0801b0f8 <tcp_timer_needed>:
{
 801b0f8:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b0fa:	4b0b      	ldr	r3, [pc, #44]	; (801b128 <tcp_timer_needed+0x30>)
 801b0fc:	681a      	ldr	r2, [r3, #0]
 801b0fe:	b98a      	cbnz	r2, 801b124 <tcp_timer_needed+0x2c>
 801b100:	4a0a      	ldr	r2, [pc, #40]	; (801b12c <tcp_timer_needed+0x34>)
 801b102:	6812      	ldr	r2, [r2, #0]
 801b104:	b152      	cbz	r2, 801b11c <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801b106:	2201      	movs	r2, #1
 801b108:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b10a:	f7f4 fc75 	bl	800f9f8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b10e:	2200      	movs	r2, #0
 801b110:	30fa      	adds	r0, #250	; 0xfa
 801b112:	4907      	ldr	r1, [pc, #28]	; (801b130 <tcp_timer_needed+0x38>)
}
 801b114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b118:	f7ff bf7e 	b.w	801b018 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b11c:	4a05      	ldr	r2, [pc, #20]	; (801b134 <tcp_timer_needed+0x3c>)
 801b11e:	6812      	ldr	r2, [r2, #0]
 801b120:	2a00      	cmp	r2, #0
 801b122:	d1f0      	bne.n	801b106 <tcp_timer_needed+0xe>
}
 801b124:	bd08      	pop	{r3, pc}
 801b126:	bf00      	nop
 801b128:	20022430 	.word	0x20022430
 801b12c:	200362fc 	.word	0x200362fc
 801b130:	0801b0bd 	.word	0x0801b0bd
 801b134:	2003630c 	.word	0x2003630c

0801b138 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b138:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801b13c:	b570      	push	{r4, r5, r6, lr}
 801b13e:	4604      	mov	r4, r0
 801b140:	460d      	mov	r5, r1
 801b142:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b144:	d306      	bcc.n	801b154 <sys_timeout+0x1c>
 801b146:	4b08      	ldr	r3, [pc, #32]	; (801b168 <sys_timeout+0x30>)
 801b148:	f240 1229 	movw	r2, #297	; 0x129
 801b14c:	4907      	ldr	r1, [pc, #28]	; (801b16c <sys_timeout+0x34>)
 801b14e:	4808      	ldr	r0, [pc, #32]	; (801b170 <sys_timeout+0x38>)
 801b150:	f005 fa22 	bl	8020598 <iprintf>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b154:	f7f4 fc50 	bl	800f9f8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b158:	4632      	mov	r2, r6
 801b15a:	4629      	mov	r1, r5
 801b15c:	4420      	add	r0, r4
#endif
}
 801b15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b162:	f7ff bf59 	b.w	801b018 <sys_timeout_abs>
 801b166:	bf00      	nop
 801b168:	0803ea6c 	.word	0x0803ea6c
 801b16c:	0803ea34 	.word	0x0803ea34
 801b170:	08026544 	.word	0x08026544

0801b174 <sys_timeouts_init>:
{
 801b174:	b570      	push	{r4, r5, r6, lr}
 801b176:	4c0a      	ldr	r4, [pc, #40]	; (801b1a0 <sys_timeouts_init+0x2c>)
 801b178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b17c:	4e09      	ldr	r6, [pc, #36]	; (801b1a4 <sys_timeouts_init+0x30>)
 801b17e:	f104 0520 	add.w	r5, r4, #32
 801b182:	4622      	mov	r2, r4
 801b184:	4631      	mov	r1, r6
 801b186:	f7ff ffd7 	bl	801b138 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b18a:	42ac      	cmp	r4, r5
 801b18c:	d007      	beq.n	801b19e <sys_timeouts_init+0x2a>
 801b18e:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b192:	4631      	mov	r1, r6
 801b194:	4622      	mov	r2, r4
 801b196:	f7ff ffcf 	bl	801b138 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b19a:	42ac      	cmp	r4, r5
 801b19c:	d1f7      	bne.n	801b18e <sys_timeouts_init+0x1a>
}
 801b19e:	bd70      	pop	{r4, r5, r6, pc}
 801b1a0:	0803ea0c 	.word	0x0803ea0c
 801b1a4:	0801b081 	.word	0x0801b081

0801b1a8 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801b1a8:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b1aa:	4d0d      	ldr	r5, [pc, #52]	; (801b1e0 <sys_untimeout+0x38>)
 801b1ac:	682b      	ldr	r3, [r5, #0]
 801b1ae:	b19b      	cbz	r3, 801b1d8 <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801b1b0:	2400      	movs	r4, #0
 801b1b2:	e003      	b.n	801b1bc <sys_untimeout+0x14>
 801b1b4:	681a      	ldr	r2, [r3, #0]
 801b1b6:	461c      	mov	r4, r3
 801b1b8:	4613      	mov	r3, r2
 801b1ba:	b16a      	cbz	r2, 801b1d8 <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801b1bc:	689a      	ldr	r2, [r3, #8]
 801b1be:	4282      	cmp	r2, r0
 801b1c0:	d1f8      	bne.n	801b1b4 <sys_untimeout+0xc>
 801b1c2:	68da      	ldr	r2, [r3, #12]
 801b1c4:	428a      	cmp	r2, r1
 801b1c6:	d1f5      	bne.n	801b1b4 <sys_untimeout+0xc>
 801b1c8:	681a      	ldr	r2, [r3, #0]
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801b1ca:	b13c      	cbz	r4, 801b1dc <sys_untimeout+0x34>
        next_timeout = t->next;
      } else {
        prev_t->next = t->next;
 801b1cc:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b1ce:	4619      	mov	r1, r3
 801b1d0:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801b1d2:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801b1d4:	f7fa bc68 	b.w	8015aa8 <memp_free>
}
 801b1d8:	bc30      	pop	{r4, r5}
 801b1da:	4770      	bx	lr
        next_timeout = t->next;
 801b1dc:	602a      	str	r2, [r5, #0]
 801b1de:	e7f6      	b.n	801b1ce <sys_untimeout+0x26>
 801b1e0:	2002242c 	.word	0x2002242c

0801b1e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b1e8:	f7f4 fc06 	bl	800f9f8 <sys_now>
 801b1ec:	4c0d      	ldr	r4, [pc, #52]	; (801b224 <sys_check_timeouts+0x40>)
 801b1ee:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801b1f0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801b228 <sys_check_timeouts+0x44>
 801b1f4:	e00c      	b.n	801b210 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b1f6:	685a      	ldr	r2, [r3, #4]
 801b1f8:	1abd      	subs	r5, r7, r2
 801b1fa:	2d00      	cmp	r5, #0
 801b1fc:	db0d      	blt.n	801b21a <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801b1fe:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801b200:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801b202:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801b204:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801b208:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b20a:	f7fa fc4d 	bl	8015aa8 <memp_free>
    if (handler != NULL) {
 801b20e:	b935      	cbnz	r5, 801b21e <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801b210:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b212:	200c      	movs	r0, #12
 801b214:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801b216:	2b00      	cmp	r3, #0
 801b218:	d1ed      	bne.n	801b1f6 <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801b21e:	4630      	mov	r0, r6
 801b220:	47a8      	blx	r5
 801b222:	e7f5      	b.n	801b210 <sys_check_timeouts+0x2c>
 801b224:	2002242c 	.word	0x2002242c
 801b228:	20022428 	.word	0x20022428

0801b22c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b22c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b22e:	4c07      	ldr	r4, [pc, #28]	; (801b24c <sys_timeouts_sleeptime+0x20>)
 801b230:	6823      	ldr	r3, [r4, #0]
 801b232:	b13b      	cbz	r3, 801b244 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801b234:	f7f4 fbe0 	bl	800f9f8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b238:	6823      	ldr	r3, [r4, #0]
 801b23a:	685b      	ldr	r3, [r3, #4]
 801b23c:	1a18      	subs	r0, r3, r0
    return 0;
 801b23e:	bf48      	it	mi
 801b240:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801b242:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b244:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b248:	bd10      	pop	{r4, pc}
 801b24a:	bf00      	nop
 801b24c:	2002242c 	.word	0x2002242c

0801b250 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b250:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b252:	f005 fa31 	bl	80206b8 <rand>
 801b256:	4b02      	ldr	r3, [pc, #8]	; (801b260 <udp_init+0x10>)
 801b258:	4a02      	ldr	r2, [pc, #8]	; (801b264 <udp_init+0x14>)
 801b25a:	4303      	orrs	r3, r0
 801b25c:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801b25e:	bd08      	pop	{r3, pc}
 801b260:	ffffc000 	.word	0xffffc000
 801b264:	200003de 	.word	0x200003de

0801b268 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b26c:	4689      	mov	r9, r1
 801b26e:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b270:	4680      	mov	r8, r0
 801b272:	2800      	cmp	r0, #0
 801b274:	f000 80d8 	beq.w	801b428 <udp_input+0x1c0>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b278:	f1b9 0f00 	cmp.w	r9, #0
 801b27c:	f000 80de 	beq.w	801b43c <udp_input+0x1d4>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b280:	4f80      	ldr	r7, [pc, #512]	; (801b484 <udp_input+0x21c>)

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b282:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801b286:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b28a:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801b28c:	f103 0301 	add.w	r3, r3, #1
 801b290:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801b294:	f240 80b1 	bls.w	801b3fa <udp_input+0x192>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b298:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801b4a8 <udp_input+0x240>
  udphdr = (struct udp_hdr *)p->payload;
 801b29c:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b2a0:	f8da 1000 	ldr.w	r1, [sl]
 801b2a4:	f8da 0014 	ldr.w	r0, [sl, #20]
 801b2a8:	f002 ff1c 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801b2ac:	9002      	str	r0, [sp, #8]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b2ae:	8820      	ldrh	r0, [r4, #0]
 801b2b0:	f7f9 f864 	bl	801437c <lwip_htons>
 801b2b4:	9003      	str	r0, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801b2b6:	8860      	ldrh	r0, [r4, #2]
 801b2b8:	f7f9 f860 	bl	801437c <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b2bc:	4b72      	ldr	r3, [pc, #456]	; (801b488 <udp_input+0x220>)
  dest = lwip_ntohs(udphdr->dest);
 801b2be:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b2c0:	681c      	ldr	r4, [r3, #0]
 801b2c2:	2c00      	cmp	r4, #0
 801b2c4:	d070      	beq.n	801b3a8 <udp_input+0x140>
  uncon_pcb = NULL;
 801b2c6:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 801b2ca:	465e      	mov	r6, fp
 801b2cc:	e004      	b.n	801b2d8 <udp_input+0x70>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b2ce:	68e3      	ldr	r3, [r4, #12]
 801b2d0:	4626      	mov	r6, r4
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d065      	beq.n	801b3a2 <udp_input+0x13a>
 801b2d6:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b2d8:	8a63      	ldrh	r3, [r4, #18]
 801b2da:	42ab      	cmp	r3, r5
 801b2dc:	d1f7      	bne.n	801b2ce <udp_input+0x66>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b2de:	f1b9 0f00 	cmp.w	r9, #0
 801b2e2:	f000 809a 	beq.w	801b41a <udp_input+0x1b2>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b2e6:	7a22      	ldrb	r2, [r4, #8]
 801b2e8:	b13a      	cbz	r2, 801b2fa <udp_input+0x92>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b2ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b2ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b2f2:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	d1e9      	bne.n	801b2ce <udp_input+0x66>
    if (broadcast != 0) {
 801b2fa:	9a02      	ldr	r2, [sp, #8]
 801b2fc:	6823      	ldr	r3, [r4, #0]
 801b2fe:	2a00      	cmp	r2, #0
 801b300:	d045      	beq.n	801b38e <udp_input+0x126>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b302:	b143      	cbz	r3, 801b316 <udp_input+0xae>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b304:	f8da 2014 	ldr.w	r2, [sl, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b308:	1c51      	adds	r1, r2, #1
 801b30a:	d004      	beq.n	801b316 <udp_input+0xae>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b30c:	405a      	eors	r2, r3
 801b30e:	f8d9 1008 	ldr.w	r1, [r9, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b312:	420a      	tst	r2, r1
 801b314:	d1db      	bne.n	801b2ce <udp_input+0x66>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b316:	7c22      	ldrb	r2, [r4, #16]
 801b318:	0752      	lsls	r2, r2, #29
 801b31a:	d412      	bmi.n	801b342 <udp_input+0xda>
        if (uncon_pcb == NULL) {
 801b31c:	f1bb 0f00 	cmp.w	fp, #0
 801b320:	f000 8095 	beq.w	801b44e <udp_input+0x1e6>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b324:	9a02      	ldr	r2, [sp, #8]
 801b326:	b162      	cbz	r2, 801b342 <udp_input+0xda>
 801b328:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b32c:	3201      	adds	r2, #1
 801b32e:	d108      	bne.n	801b342 <udp_input+0xda>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b330:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b334:	f8db 1000 	ldr.w	r1, [fp]
 801b338:	4291      	cmp	r1, r2
 801b33a:	d002      	beq.n	801b342 <udp_input+0xda>
 801b33c:	429a      	cmp	r2, r3
 801b33e:	bf08      	it	eq
 801b340:	46a3      	moveq	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b342:	8aa3      	ldrh	r3, [r4, #20]
 801b344:	9a03      	ldr	r2, [sp, #12]
 801b346:	4293      	cmp	r3, r2
 801b348:	d1c1      	bne.n	801b2ce <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b34a:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 801b34c:	b11b      	cbz	r3, 801b356 <udp_input+0xee>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b34e:	f8da 2010 	ldr.w	r2, [sl, #16]
 801b352:	4293      	cmp	r3, r2
 801b354:	d1bb      	bne.n	801b2ce <udp_input+0x66>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b356:	2e00      	cmp	r6, #0
 801b358:	f000 808c 	beq.w	801b474 <udp_input+0x20c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801b35c:	494a      	ldr	r1, [pc, #296]	; (801b488 <udp_input+0x220>)
          prev->next = pcb->next;
 801b35e:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801b360:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801b362:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801b364:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801b366:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b368:	2108      	movs	r1, #8
 801b36a:	4640      	mov	r0, r8
 801b36c:	f7fa fe3a 	bl	8015fe4 <pbuf_remove_header>
 801b370:	2800      	cmp	r0, #0
 801b372:	d173      	bne.n	801b45c <udp_input+0x1f4>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b374:	69a5      	ldr	r5, [r4, #24]
 801b376:	2d00      	cmp	r5, #0
 801b378:	d067      	beq.n	801b44a <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b37a:	9b03      	ldr	r3, [sp, #12]
 801b37c:	4642      	mov	r2, r8
 801b37e:	69e0      	ldr	r0, [r4, #28]
 801b380:	4621      	mov	r1, r4
 801b382:	9300      	str	r3, [sp, #0]
 801b384:	4b41      	ldr	r3, [pc, #260]	; (801b48c <udp_input+0x224>)
 801b386:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b388:	b005      	add	sp, #20
 801b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d0c1      	beq.n	801b316 <udp_input+0xae>
 801b392:	f8da 2014 	ldr.w	r2, [sl, #20]
 801b396:	429a      	cmp	r2, r3
 801b398:	d0bd      	beq.n	801b316 <udp_input+0xae>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b39a:	68e3      	ldr	r3, [r4, #12]
 801b39c:	4626      	mov	r6, r4
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d199      	bne.n	801b2d6 <udp_input+0x6e>
  if (pcb != NULL) {
 801b3a2:	f1bb 0f00 	cmp.w	fp, #0
 801b3a6:	d16b      	bne.n	801b480 <udp_input+0x218>
  if (for_us) {
 801b3a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b3ac:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d14a      	bne.n	801b44a <udp_input+0x1e2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b3b4:	2108      	movs	r1, #8
 801b3b6:	4640      	mov	r0, r8
 801b3b8:	f7fa fe14 	bl	8015fe4 <pbuf_remove_header>
 801b3bc:	2800      	cmp	r0, #0
 801b3be:	d14d      	bne.n	801b45c <udp_input+0x1f4>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b3c0:	9b02      	ldr	r3, [sp, #8]
 801b3c2:	b983      	cbnz	r3, 801b3e6 <udp_input+0x17e>
 801b3c4:	f8da 3014 	ldr.w	r3, [sl, #20]
 801b3c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b3cc:	2be0      	cmp	r3, #224	; 0xe0
 801b3ce:	d00a      	beq.n	801b3e6 <udp_input+0x17e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b3d0:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 801b3d4:	4640      	mov	r0, r8
 801b3d6:	3108      	adds	r1, #8
 801b3d8:	b209      	sxth	r1, r1
 801b3da:	f7fa fe37 	bl	801604c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b3de:	2103      	movs	r1, #3
 801b3e0:	4640      	mov	r0, r8
 801b3e2:	f002 fc33 	bl	801dc4c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801b3e6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
      pbuf_free(p);
 801b3ea:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801b3ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801b3f0:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801b3f2:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801b3f4:	f8a7 2088 	strh.w	r2, [r7, #136]	; 0x88
 801b3f8:	e008      	b.n	801b40c <udp_input+0x1a4>
    UDP_STATS_INC(udp.lenerr);
 801b3fa:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
    pbuf_free(p);
 801b3fe:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801b400:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801b404:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801b406:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801b408:	f8a7 2082 	strh.w	r2, [r7, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801b40c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
}
 801b410:	b005      	add	sp, #20
 801b412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801b416:	f7fa be21 	b.w	801605c <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b41a:	4b1d      	ldr	r3, [pc, #116]	; (801b490 <udp_input+0x228>)
 801b41c:	2288      	movs	r2, #136	; 0x88
 801b41e:	491d      	ldr	r1, [pc, #116]	; (801b494 <udp_input+0x22c>)
 801b420:	481d      	ldr	r0, [pc, #116]	; (801b498 <udp_input+0x230>)
 801b422:	f005 f8b9 	bl	8020598 <iprintf>
 801b426:	e75e      	b.n	801b2e6 <udp_input+0x7e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b428:	4b19      	ldr	r3, [pc, #100]	; (801b490 <udp_input+0x228>)
 801b42a:	22cf      	movs	r2, #207	; 0xcf
 801b42c:	491b      	ldr	r1, [pc, #108]	; (801b49c <udp_input+0x234>)
 801b42e:	481a      	ldr	r0, [pc, #104]	; (801b498 <udp_input+0x230>)
 801b430:	f005 f8b2 	bl	8020598 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b434:	f1b9 0f00 	cmp.w	r9, #0
 801b438:	f47f af22 	bne.w	801b280 <udp_input+0x18>
 801b43c:	4b14      	ldr	r3, [pc, #80]	; (801b490 <udp_input+0x228>)
 801b43e:	22d0      	movs	r2, #208	; 0xd0
 801b440:	4917      	ldr	r1, [pc, #92]	; (801b4a0 <udp_input+0x238>)
 801b442:	4815      	ldr	r0, [pc, #84]	; (801b498 <udp_input+0x230>)
 801b444:	f005 f8a8 	bl	8020598 <iprintf>
 801b448:	e71a      	b.n	801b280 <udp_input+0x18>
        pbuf_free(p);
 801b44a:	4640      	mov	r0, r8
 801b44c:	e7e0      	b.n	801b410 <udp_input+0x1a8>
      if ((pcb->remote_port == src) &&
 801b44e:	8aa3      	ldrh	r3, [r4, #20]
 801b450:	46a3      	mov	fp, r4
 801b452:	9a03      	ldr	r2, [sp, #12]
 801b454:	4293      	cmp	r3, r2
 801b456:	f47f af3a 	bne.w	801b2ce <udp_input+0x66>
 801b45a:	e776      	b.n	801b34a <udp_input+0xe2>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b45c:	4b0c      	ldr	r3, [pc, #48]	; (801b490 <udp_input+0x228>)
 801b45e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b462:	4910      	ldr	r1, [pc, #64]	; (801b4a4 <udp_input+0x23c>)
 801b464:	480c      	ldr	r0, [pc, #48]	; (801b498 <udp_input+0x230>)
 801b466:	f005 f897 	bl	8020598 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b46a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
      pbuf_free(p);
 801b46e:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801b470:	3301      	adds	r3, #1
 801b472:	e7cb      	b.n	801b40c <udp_input+0x1a4>
          UDP_STATS_INC(udp.cachehit);
 801b474:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801b478:	3301      	adds	r3, #1
 801b47a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801b47e:	e773      	b.n	801b368 <udp_input+0x100>
 801b480:	465c      	mov	r4, fp
 801b482:	e771      	b.n	801b368 <udp_input+0x100>
 801b484:	200361ec 	.word	0x200361ec
 801b488:	20036314 	.word	0x20036314
 801b48c:	20026a84 	.word	0x20026a84
 801b490:	0803eb30 	.word	0x0803eb30
 801b494:	0803eb94 	.word	0x0803eb94
 801b498:	08026544 	.word	0x08026544
 801b49c:	0803eb60 	.word	0x0803eb60
 801b4a0:	0803eb78 	.word	0x0803eb78
 801b4a4:	0803ebbc 	.word	0x0803ebbc
 801b4a8:	20026a74 	.word	0x20026a74

0801b4ac <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801b4ac:	4b39      	ldr	r3, [pc, #228]	; (801b594 <udp_bind+0xe8>)
{
 801b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801b4b2:	2900      	cmp	r1, #0
 801b4b4:	bf08      	it	eq
 801b4b6:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	d060      	beq.n	801b57e <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4bc:	4f36      	ldr	r7, [pc, #216]	; (801b598 <udp_bind+0xec>)
 801b4be:	683e      	ldr	r6, [r7, #0]
 801b4c0:	b1fe      	cbz	r6, 801b502 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b4c2:	42b0      	cmp	r0, r6
 801b4c4:	d048      	beq.n	801b558 <udp_bind+0xac>
 801b4c6:	4634      	mov	r4, r6
 801b4c8:	e001      	b.n	801b4ce <udp_bind+0x22>
 801b4ca:	42a0      	cmp	r0, r4
 801b4cc:	d044      	beq.n	801b558 <udp_bind+0xac>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4ce:	68e4      	ldr	r4, [r4, #12]
 801b4d0:	2c00      	cmp	r4, #0
 801b4d2:	d1fa      	bne.n	801b4ca <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b4d4:	b1c2      	cbz	r2, 801b508 <udp_bind+0x5c>
 801b4d6:	680d      	ldr	r5, [r1, #0]
 801b4d8:	4633      	mov	r3, r6
 801b4da:	e001      	b.n	801b4e0 <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b4dc:	68db      	ldr	r3, [r3, #12]
 801b4de:	b373      	cbz	r3, 801b53e <udp_bind+0x92>
      if (pcb != ipcb) {
 801b4e0:	4298      	cmp	r0, r3
 801b4e2:	d0fb      	beq.n	801b4dc <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b4e4:	8a59      	ldrh	r1, [r3, #18]
 801b4e6:	4291      	cmp	r1, r2
 801b4e8:	d1f8      	bne.n	801b4dc <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b4ea:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801b4ec:	42a9      	cmp	r1, r5
 801b4ee:	bf18      	it	ne
 801b4f0:	2900      	cmpne	r1, #0
 801b4f2:	d001      	beq.n	801b4f8 <udp_bind+0x4c>
 801b4f4:	2d00      	cmp	r5, #0
 801b4f6:	d1f1      	bne.n	801b4dc <udp_bind+0x30>
      return ERR_USE;
 801b4f8:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801b502:	2a00      	cmp	r2, #0
 801b504:	d137      	bne.n	801b576 <udp_bind+0xca>
  rebind = 0;
 801b506:	4634      	mov	r4, r6
 801b508:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801b5a8 <udp_bind+0xfc>
again:
 801b50c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b510:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801b514:	f8b8 2000 	ldrh.w	r2, [r8]
 801b518:	4572      	cmp	r2, lr
 801b51a:	d029      	beq.n	801b570 <udp_bind+0xc4>
 801b51c:	3201      	adds	r2, #1
 801b51e:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b520:	b156      	cbz	r6, 801b538 <udp_bind+0x8c>
    if (pcb->local_port == udp_port) {
 801b522:	8a73      	ldrh	r3, [r6, #18]
 801b524:	4293      	cmp	r3, r2
 801b526:	d019      	beq.n	801b55c <udp_bind+0xb0>
 801b528:	4633      	mov	r3, r6
 801b52a:	e002      	b.n	801b532 <udp_bind+0x86>
 801b52c:	8a5d      	ldrh	r5, [r3, #18]
 801b52e:	4295      	cmp	r5, r2
 801b530:	d014      	beq.n	801b55c <udp_bind+0xb0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b532:	68db      	ldr	r3, [r3, #12]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d1f9      	bne.n	801b52c <udp_bind+0x80>
 801b538:	680d      	ldr	r5, [r1, #0]
 801b53a:	f8a8 2000 	strh.w	r2, [r8]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b53e:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801b540:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801b542:	b92c      	cbnz	r4, 801b550 <udp_bind+0xa4>
  return ERR_OK;
 801b544:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801b546:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801b548:	6038      	str	r0, [r7, #0]
}
 801b54a:	4618      	mov	r0, r3
 801b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_OK;
 801b550:	2300      	movs	r3, #0
}
 801b552:	4618      	mov	r0, r3
 801b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801b558:	2401      	movs	r4, #1
 801b55a:	e7bb      	b.n	801b4d4 <udp_bind+0x28>
 801b55c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b560:	fa1f fc8c 	uxth.w	ip, ip
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b564:	f1bc 0f00 	cmp.w	ip, #0
 801b568:	d1d6      	bne.n	801b518 <udp_bind+0x6c>
 801b56a:	f8a8 2000 	strh.w	r2, [r8]
 801b56e:	e7c3      	b.n	801b4f8 <udp_bind+0x4c>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b570:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b574:	e7d4      	b.n	801b520 <udp_bind+0x74>
 801b576:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801b578:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b57a:	6003      	str	r3, [r0, #0]
 801b57c:	e7e2      	b.n	801b544 <udp_bind+0x98>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b57e:	4b07      	ldr	r3, [pc, #28]	; (801b59c <udp_bind+0xf0>)
 801b580:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b584:	4906      	ldr	r1, [pc, #24]	; (801b5a0 <udp_bind+0xf4>)
 801b586:	4807      	ldr	r0, [pc, #28]	; (801b5a4 <udp_bind+0xf8>)
 801b588:	f005 f806 	bl	8020598 <iprintf>
 801b58c:	f06f 030f 	mvn.w	r3, #15
 801b590:	e7db      	b.n	801b54a <udp_bind+0x9e>
 801b592:	bf00      	nop
 801b594:	0803f460 	.word	0x0803f460
 801b598:	20036314 	.word	0x20036314
 801b59c:	0803eb30 	.word	0x0803eb30
 801b5a0:	0803eae0 	.word	0x0803eae0
 801b5a4:	08026544 	.word	0x08026544
 801b5a8:	200003de 	.word	0x200003de

0801b5ac <udp_sendto_if_src>:
{
 801b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b0:	b085      	sub	sp, #20
 801b5b2:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	d07e      	beq.n	801b6b8 <udp_sendto_if_src+0x10c>
 801b5ba:	460c      	mov	r4, r1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b5bc:	2900      	cmp	r1, #0
 801b5be:	d071      	beq.n	801b6a4 <udp_sendto_if_src+0xf8>
 801b5c0:	4690      	mov	r8, r2
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b5c2:	2a00      	cmp	r2, #0
 801b5c4:	f000 8082 	beq.w	801b6cc <udp_sendto_if_src+0x120>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b5c8:	f1b9 0f00 	cmp.w	r9, #0
 801b5cc:	f000 8092 	beq.w	801b6f4 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b5d0:	f1ba 0f00 	cmp.w	sl, #0
 801b5d4:	f000 8084 	beq.w	801b6e0 <udp_sendto_if_src+0x134>
  if (pcb->local_port == 0) {
 801b5d8:	8a42      	ldrh	r2, [r0, #18]
 801b5da:	469b      	mov	fp, r3
 801b5dc:	4607      	mov	r7, r0
 801b5de:	2a00      	cmp	r2, #0
 801b5e0:	d03c      	beq.n	801b65c <udp_sendto_if_src+0xb0>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b5e2:	8922      	ldrh	r2, [r4, #8]
 801b5e4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	d858      	bhi.n	801b69e <udp_sendto_if_src+0xf2>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b5ec:	2108      	movs	r1, #8
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f7fa fcf4 	bl	8015fdc <pbuf_add_header>
 801b5f4:	2800      	cmp	r0, #0
 801b5f6:	d13b      	bne.n	801b670 <udp_sendto_if_src+0xc4>
 801b5f8:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b5fa:	896b      	ldrh	r3, [r5, #10]
 801b5fc:	2b07      	cmp	r3, #7
 801b5fe:	d946      	bls.n	801b68e <udp_sendto_if_src+0xe2>
  udphdr = (struct udp_hdr *)q->payload;
 801b600:	686e      	ldr	r6, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801b602:	8a78      	ldrh	r0, [r7, #18]
 801b604:	f7f8 feba 	bl	801437c <lwip_htons>
 801b608:	8030      	strh	r0, [r6, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b60a:	4658      	mov	r0, fp
 801b60c:	f7f8 feb6 	bl	801437c <lwip_htons>
  udphdr->chksum = 0x0000;
 801b610:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801b612:	8070      	strh	r0, [r6, #2]
  udphdr->chksum = 0x0000;
 801b614:	71b3      	strb	r3, [r6, #6]
 801b616:	71f3      	strb	r3, [r6, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801b618:	8928      	ldrh	r0, [r5, #8]
 801b61a:	f7f8 feaf 	bl	801437c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b61e:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801b622:	80b0      	strh	r0, [r6, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b624:	4642      	mov	r2, r8
 801b626:	7afb      	ldrb	r3, [r7, #11]
 801b628:	4649      	mov	r1, r9
 801b62a:	f8cd a008 	str.w	sl, [sp, #8]
 801b62e:	4628      	mov	r0, r5
 801b630:	f8cd c004 	str.w	ip, [sp, #4]
 801b634:	7abe      	ldrb	r6, [r7, #10]
 801b636:	9600      	str	r6, [sp, #0]
 801b638:	f002 fc94 	bl	801df64 <ip4_output_if_src>
  if (q != p) {
 801b63c:	42a5      	cmp	r5, r4
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b63e:	4606      	mov	r6, r0
  if (q != p) {
 801b640:	d002      	beq.n	801b648 <udp_sendto_if_src+0x9c>
    pbuf_free(q);
 801b642:	4628      	mov	r0, r5
 801b644:	f7fa fd0a 	bl	801605c <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801b648:	4a2f      	ldr	r2, [pc, #188]	; (801b708 <udp_sendto_if_src+0x15c>)
 801b64a:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801b64e:	3301      	adds	r3, #1
 801b650:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801b654:	4630      	mov	r0, r6
 801b656:	b005      	add	sp, #20
 801b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b65c:	4601      	mov	r1, r0
 801b65e:	f7ff ff25 	bl	801b4ac <udp_bind>
    if (err != ERR_OK) {
 801b662:	4606      	mov	r6, r0
 801b664:	2800      	cmp	r0, #0
 801b666:	d0bc      	beq.n	801b5e2 <udp_sendto_if_src+0x36>
}
 801b668:	4630      	mov	r0, r6
 801b66a:	b005      	add	sp, #20
 801b66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b670:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b674:	2108      	movs	r1, #8
 801b676:	2022      	movs	r0, #34	; 0x22
 801b678:	f7fa fd5e 	bl	8016138 <pbuf_alloc>
    if (q == NULL) {
 801b67c:	4605      	mov	r5, r0
 801b67e:	b170      	cbz	r0, 801b69e <udp_sendto_if_src+0xf2>
    if (p->tot_len != 0) {
 801b680:	8923      	ldrh	r3, [r4, #8]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d0b9      	beq.n	801b5fa <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801b686:	4621      	mov	r1, r4
 801b688:	f7fa feb4 	bl	80163f4 <pbuf_chain>
 801b68c:	e7b5      	b.n	801b5fa <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b68e:	4b1f      	ldr	r3, [pc, #124]	; (801b70c <udp_sendto_if_src+0x160>)
 801b690:	f240 320e 	movw	r2, #782	; 0x30e
 801b694:	491e      	ldr	r1, [pc, #120]	; (801b710 <udp_sendto_if_src+0x164>)
 801b696:	481f      	ldr	r0, [pc, #124]	; (801b714 <udp_sendto_if_src+0x168>)
 801b698:	f004 ff7e 	bl	8020598 <iprintf>
 801b69c:	e7b0      	b.n	801b600 <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801b69e:	f04f 36ff 	mov.w	r6, #4294967295
 801b6a2:	e7d7      	b.n	801b654 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b6a4:	4b19      	ldr	r3, [pc, #100]	; (801b70c <udp_sendto_if_src+0x160>)
 801b6a6:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b6aa:	491b      	ldr	r1, [pc, #108]	; (801b718 <udp_sendto_if_src+0x16c>)
 801b6ac:	f06f 060f 	mvn.w	r6, #15
 801b6b0:	4818      	ldr	r0, [pc, #96]	; (801b714 <udp_sendto_if_src+0x168>)
 801b6b2:	f004 ff71 	bl	8020598 <iprintf>
 801b6b6:	e7cd      	b.n	801b654 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b6b8:	4b14      	ldr	r3, [pc, #80]	; (801b70c <udp_sendto_if_src+0x160>)
 801b6ba:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b6be:	4917      	ldr	r1, [pc, #92]	; (801b71c <udp_sendto_if_src+0x170>)
 801b6c0:	f06f 060f 	mvn.w	r6, #15
 801b6c4:	4813      	ldr	r0, [pc, #76]	; (801b714 <udp_sendto_if_src+0x168>)
 801b6c6:	f004 ff67 	bl	8020598 <iprintf>
 801b6ca:	e7c3      	b.n	801b654 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b6cc:	4b0f      	ldr	r3, [pc, #60]	; (801b70c <udp_sendto_if_src+0x160>)
 801b6ce:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b6d2:	4913      	ldr	r1, [pc, #76]	; (801b720 <udp_sendto_if_src+0x174>)
 801b6d4:	f06f 060f 	mvn.w	r6, #15
 801b6d8:	480e      	ldr	r0, [pc, #56]	; (801b714 <udp_sendto_if_src+0x168>)
 801b6da:	f004 ff5d 	bl	8020598 <iprintf>
 801b6de:	e7b9      	b.n	801b654 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b6e0:	4b0a      	ldr	r3, [pc, #40]	; (801b70c <udp_sendto_if_src+0x160>)
 801b6e2:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b6e6:	490f      	ldr	r1, [pc, #60]	; (801b724 <udp_sendto_if_src+0x178>)
 801b6e8:	f06f 060f 	mvn.w	r6, #15
 801b6ec:	4809      	ldr	r0, [pc, #36]	; (801b714 <udp_sendto_if_src+0x168>)
 801b6ee:	f004 ff53 	bl	8020598 <iprintf>
 801b6f2:	e7af      	b.n	801b654 <udp_sendto_if_src+0xa8>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b6f4:	4b05      	ldr	r3, [pc, #20]	; (801b70c <udp_sendto_if_src+0x160>)
 801b6f6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b6fa:	490b      	ldr	r1, [pc, #44]	; (801b728 <udp_sendto_if_src+0x17c>)
 801b6fc:	f06f 060f 	mvn.w	r6, #15
 801b700:	4804      	ldr	r0, [pc, #16]	; (801b714 <udp_sendto_if_src+0x168>)
 801b702:	f004 ff49 	bl	8020598 <iprintf>
 801b706:	e7a5      	b.n	801b654 <udp_sendto_if_src+0xa8>
 801b708:	200361ec 	.word	0x200361ec
 801b70c:	0803eb30 	.word	0x0803eb30
 801b710:	0803ed7c 	.word	0x0803ed7c
 801b714:	08026544 	.word	0x08026544
 801b718:	0803ecf0 	.word	0x0803ecf0
 801b71c:	0803ecd0 	.word	0x0803ecd0
 801b720:	0803ed10 	.word	0x0803ed10
 801b724:	0803ed58 	.word	0x0803ed58
 801b728:	0803ed34 	.word	0x0803ed34

0801b72c <udp_sendto_if>:
{
 801b72c:	b570      	push	{r4, r5, r6, lr}
 801b72e:	b082      	sub	sp, #8
 801b730:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b732:	b358      	cbz	r0, 801b78c <udp_sendto_if+0x60>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b734:	b301      	cbz	r1, 801b778 <udp_sendto_if+0x4c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b736:	b1aa      	cbz	r2, 801b764 <udp_sendto_if+0x38>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b738:	b394      	cbz	r4, 801b7a0 <udp_sendto_if+0x74>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b73a:	6805      	ldr	r5, [r0, #0]
 801b73c:	b935      	cbnz	r5, 801b74c <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 801b73e:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b740:	e9cd 4500 	strd	r4, r5, [sp]
 801b744:	f7ff ff32 	bl	801b5ac <udp_sendto_if_src>
}
 801b748:	b002      	add	sp, #8
 801b74a:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b74c:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b750:	2ee0      	cmp	r6, #224	; 0xe0
 801b752:	d0f4      	beq.n	801b73e <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b754:	6866      	ldr	r6, [r4, #4]
 801b756:	42b5      	cmp	r5, r6
 801b758:	d101      	bne.n	801b75e <udp_sendto_if+0x32>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b75a:	4605      	mov	r5, r0
 801b75c:	e7f0      	b.n	801b740 <udp_sendto_if+0x14>
        return ERR_RTE;
 801b75e:	f06f 0003 	mvn.w	r0, #3
 801b762:	e7f1      	b.n	801b748 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b764:	4b13      	ldr	r3, [pc, #76]	; (801b7b4 <udp_sendto_if+0x88>)
 801b766:	f240 2282 	movw	r2, #642	; 0x282
 801b76a:	4913      	ldr	r1, [pc, #76]	; (801b7b8 <udp_sendto_if+0x8c>)
 801b76c:	4813      	ldr	r0, [pc, #76]	; (801b7bc <udp_sendto_if+0x90>)
 801b76e:	f004 ff13 	bl	8020598 <iprintf>
 801b772:	f06f 000f 	mvn.w	r0, #15
 801b776:	e7e7      	b.n	801b748 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b778:	4b0e      	ldr	r3, [pc, #56]	; (801b7b4 <udp_sendto_if+0x88>)
 801b77a:	f240 2281 	movw	r2, #641	; 0x281
 801b77e:	4910      	ldr	r1, [pc, #64]	; (801b7c0 <udp_sendto_if+0x94>)
 801b780:	480e      	ldr	r0, [pc, #56]	; (801b7bc <udp_sendto_if+0x90>)
 801b782:	f004 ff09 	bl	8020598 <iprintf>
 801b786:	f06f 000f 	mvn.w	r0, #15
 801b78a:	e7dd      	b.n	801b748 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b78c:	4b09      	ldr	r3, [pc, #36]	; (801b7b4 <udp_sendto_if+0x88>)
 801b78e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b792:	490c      	ldr	r1, [pc, #48]	; (801b7c4 <udp_sendto_if+0x98>)
 801b794:	4809      	ldr	r0, [pc, #36]	; (801b7bc <udp_sendto_if+0x90>)
 801b796:	f004 feff 	bl	8020598 <iprintf>
 801b79a:	f06f 000f 	mvn.w	r0, #15
 801b79e:	e7d3      	b.n	801b748 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b7a0:	4b04      	ldr	r3, [pc, #16]	; (801b7b4 <udp_sendto_if+0x88>)
 801b7a2:	f240 2283 	movw	r2, #643	; 0x283
 801b7a6:	4908      	ldr	r1, [pc, #32]	; (801b7c8 <udp_sendto_if+0x9c>)
 801b7a8:	4804      	ldr	r0, [pc, #16]	; (801b7bc <udp_sendto_if+0x90>)
 801b7aa:	f004 fef5 	bl	8020598 <iprintf>
 801b7ae:	f06f 000f 	mvn.w	r0, #15
 801b7b2:	e7c9      	b.n	801b748 <udp_sendto_if+0x1c>
 801b7b4:	0803eb30 	.word	0x0803eb30
 801b7b8:	0803ec90 	.word	0x0803ec90
 801b7bc:	08026544 	.word	0x08026544
 801b7c0:	0803ec74 	.word	0x0803ec74
 801b7c4:	0803ec58 	.word	0x0803ec58
 801b7c8:	0803ecb0 	.word	0x0803ecb0

0801b7cc <udp_sendto>:
{
 801b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ce:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b7d0:	b3a0      	cbz	r0, 801b83c <udp_sendto+0x70>
 801b7d2:	460e      	mov	r6, r1
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b7d4:	b341      	cbz	r1, 801b828 <udp_sendto+0x5c>
 801b7d6:	4615      	mov	r5, r2
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b7d8:	b1e2      	cbz	r2, 801b814 <udp_sendto+0x48>
 801b7da:	4604      	mov	r4, r0
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b7dc:	7a00      	ldrb	r0, [r0, #8]
 801b7de:	461f      	mov	r7, r3
 801b7e0:	b158      	cbz	r0, 801b7fa <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801b7e2:	f7fa fb55 	bl	8015e90 <netif_get_by_index>
  if (netif == NULL) {
 801b7e6:	b160      	cbz	r0, 801b802 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b7e8:	9000      	str	r0, [sp, #0]
 801b7ea:	463b      	mov	r3, r7
 801b7ec:	462a      	mov	r2, r5
 801b7ee:	4631      	mov	r1, r6
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f7ff ff9b 	bl	801b72c <udp_sendto_if>
}
 801b7f6:	b003      	add	sp, #12
 801b7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b7fa:	4610      	mov	r0, r2
 801b7fc:	f002 fa48 	bl	801dc90 <ip4_route>
 801b800:	e7f1      	b.n	801b7e6 <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801b802:	4a13      	ldr	r2, [pc, #76]	; (801b850 <udp_sendto+0x84>)
    return ERR_RTE;
 801b804:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801b808:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801b80c:	3301      	adds	r3, #1
 801b80e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801b812:	e7f0      	b.n	801b7f6 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b814:	4b0f      	ldr	r3, [pc, #60]	; (801b854 <udp_sendto+0x88>)
 801b816:	f240 221a 	movw	r2, #538	; 0x21a
 801b81a:	490f      	ldr	r1, [pc, #60]	; (801b858 <udp_sendto+0x8c>)
 801b81c:	480f      	ldr	r0, [pc, #60]	; (801b85c <udp_sendto+0x90>)
 801b81e:	f004 febb 	bl	8020598 <iprintf>
 801b822:	f06f 000f 	mvn.w	r0, #15
 801b826:	e7e6      	b.n	801b7f6 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b828:	4b0a      	ldr	r3, [pc, #40]	; (801b854 <udp_sendto+0x88>)
 801b82a:	f240 2219 	movw	r2, #537	; 0x219
 801b82e:	490c      	ldr	r1, [pc, #48]	; (801b860 <udp_sendto+0x94>)
 801b830:	480a      	ldr	r0, [pc, #40]	; (801b85c <udp_sendto+0x90>)
 801b832:	f004 feb1 	bl	8020598 <iprintf>
 801b836:	f06f 000f 	mvn.w	r0, #15
 801b83a:	e7dc      	b.n	801b7f6 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b83c:	4b05      	ldr	r3, [pc, #20]	; (801b854 <udp_sendto+0x88>)
 801b83e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b842:	4908      	ldr	r1, [pc, #32]	; (801b864 <udp_sendto+0x98>)
 801b844:	4805      	ldr	r0, [pc, #20]	; (801b85c <udp_sendto+0x90>)
 801b846:	f004 fea7 	bl	8020598 <iprintf>
 801b84a:	f06f 000f 	mvn.w	r0, #15
 801b84e:	e7d2      	b.n	801b7f6 <udp_sendto+0x2a>
 801b850:	200361ec 	.word	0x200361ec
 801b854:	0803eb30 	.word	0x0803eb30
 801b858:	0803ec3c 	.word	0x0803ec3c
 801b85c:	08026544 	.word	0x08026544
 801b860:	0803ec20 	.word	0x0803ec20
 801b864:	0803ec08 	.word	0x0803ec08

0801b868 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b868:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b86a:	b320      	cbz	r0, 801b8b6 <udp_connect+0x4e>
 801b86c:	460d      	mov	r5, r1
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b86e:	b361      	cbz	r1, 801b8ca <udp_connect+0x62>
 801b870:	4616      	mov	r6, r2

  if (pcb->local_port == 0) {
 801b872:	8a42      	ldrh	r2, [r0, #18]
 801b874:	4604      	mov	r4, r0
 801b876:	b1c2      	cbz	r2, 801b8aa <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b878:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b87a:	4919      	ldr	r1, [pc, #100]	; (801b8e0 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b87c:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b87e:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b882:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b884:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801b886:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b888:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b88a:	b142      	cbz	r2, 801b89e <udp_connect+0x36>
    if (pcb == ipcb) {
 801b88c:	4294      	cmp	r4, r2
 801b88e:	d00a      	beq.n	801b8a6 <udp_connect+0x3e>
 801b890:	4613      	mov	r3, r2
 801b892:	e001      	b.n	801b898 <udp_connect+0x30>
 801b894:	429c      	cmp	r4, r3
 801b896:	d006      	beq.n	801b8a6 <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b898:	68db      	ldr	r3, [r3, #12]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d1fa      	bne.n	801b894 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b89e:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
  return ERR_OK;
 801b8a0:	2000      	movs	r0, #0
  udp_pcbs = pcb;
 801b8a2:	600c      	str	r4, [r1, #0]
}
 801b8a4:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801b8a6:	2000      	movs	r0, #0
}
 801b8a8:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b8aa:	4601      	mov	r1, r0
 801b8ac:	f7ff fdfe 	bl	801b4ac <udp_bind>
    if (err != ERR_OK) {
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	d0e1      	beq.n	801b878 <udp_connect+0x10>
}
 801b8b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8b6:	4b0b      	ldr	r3, [pc, #44]	; (801b8e4 <udp_connect+0x7c>)
 801b8b8:	f240 4235 	movw	r2, #1077	; 0x435
 801b8bc:	490a      	ldr	r1, [pc, #40]	; (801b8e8 <udp_connect+0x80>)
 801b8be:	480b      	ldr	r0, [pc, #44]	; (801b8ec <udp_connect+0x84>)
 801b8c0:	f004 fe6a 	bl	8020598 <iprintf>
 801b8c4:	f06f 000f 	mvn.w	r0, #15
}
 801b8c8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b8ca:	4b06      	ldr	r3, [pc, #24]	; (801b8e4 <udp_connect+0x7c>)
 801b8cc:	f240 4236 	movw	r2, #1078	; 0x436
 801b8d0:	4907      	ldr	r1, [pc, #28]	; (801b8f0 <udp_connect+0x88>)
 801b8d2:	4806      	ldr	r0, [pc, #24]	; (801b8ec <udp_connect+0x84>)
 801b8d4:	f004 fe60 	bl	8020598 <iprintf>
 801b8d8:	f06f 000f 	mvn.w	r0, #15
}
 801b8dc:	bd70      	pop	{r4, r5, r6, pc}
 801b8de:	bf00      	nop
 801b8e0:	20036314 	.word	0x20036314
 801b8e4:	0803eb30 	.word	0x0803eb30
 801b8e8:	0803eaf8 	.word	0x0803eaf8
 801b8ec:	08026544 	.word	0x08026544
 801b8f0:	0803eb14 	.word	0x0803eb14

0801b8f4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b8f4:	b110      	cbz	r0, 801b8fc <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801b8f6:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801b8fa:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b8fc:	4b03      	ldr	r3, [pc, #12]	; (801b90c <udp_recv+0x18>)
 801b8fe:	f240 428a 	movw	r2, #1162	; 0x48a
 801b902:	4903      	ldr	r1, [pc, #12]	; (801b910 <udp_recv+0x1c>)
 801b904:	4803      	ldr	r0, [pc, #12]	; (801b914 <udp_recv+0x20>)
 801b906:	f004 be47 	b.w	8020598 <iprintf>
 801b90a:	bf00      	nop
 801b90c:	0803eb30 	.word	0x0803eb30
 801b910:	0803ebd8 	.word	0x0803ebd8
 801b914:	08026544 	.word	0x08026544

0801b918 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b918:	b1d8      	cbz	r0, 801b952 <udp_remove+0x3a>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b91a:	4b11      	ldr	r3, [pc, #68]	; (801b960 <udp_remove+0x48>)
 801b91c:	681a      	ldr	r2, [r3, #0]
 801b91e:	4282      	cmp	r2, r0
 801b920:	d00b      	beq.n	801b93a <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b922:	b132      	cbz	r2, 801b932 <udp_remove+0x1a>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b924:	68d3      	ldr	r3, [r2, #12]
 801b926:	b123      	cbz	r3, 801b932 <udp_remove+0x1a>
 801b928:	4298      	cmp	r0, r3
 801b92a:	d00c      	beq.n	801b946 <udp_remove+0x2e>
 801b92c:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b92e:	2a00      	cmp	r2, #0
 801b930:	d1f8      	bne.n	801b924 <udp_remove+0xc>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b932:	4601      	mov	r1, r0
 801b934:	2001      	movs	r0, #1
 801b936:	f7fa b8b7 	b.w	8015aa8 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801b93a:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801b93c:	4601      	mov	r1, r0
 801b93e:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801b940:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801b942:	f7fa b8b1 	b.w	8015aa8 <memp_free>
        pcb2->next = pcb->next;
 801b946:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801b948:	4601      	mov	r1, r0
 801b94a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801b94c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801b94e:	f7fa b8ab 	b.w	8015aa8 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b952:	4b04      	ldr	r3, [pc, #16]	; (801b964 <udp_remove+0x4c>)
 801b954:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b958:	4903      	ldr	r1, [pc, #12]	; (801b968 <udp_remove+0x50>)
 801b95a:	4804      	ldr	r0, [pc, #16]	; (801b96c <udp_remove+0x54>)
 801b95c:	f004 be1c 	b.w	8020598 <iprintf>
 801b960:	20036314 	.word	0x20036314
 801b964:	0803eb30 	.word	0x0803eb30
 801b968:	0803ebf0 	.word	0x0803ebf0
 801b96c:	08026544 	.word	0x08026544

0801b970 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b970:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b972:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801b976:	4907      	ldr	r1, [pc, #28]	; (801b994 <udp_new+0x24>)
 801b978:	2001      	movs	r0, #1
 801b97a:	f7fa f871 	bl	8015a60 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b97e:	4604      	mov	r4, r0
 801b980:	b128      	cbz	r0, 801b98e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b982:	2220      	movs	r2, #32
 801b984:	2100      	movs	r1, #0
 801b986:	f003 fe88 	bl	801f69a <memset>
    pcb->ttl = UDP_TTL;
 801b98a:	23ff      	movs	r3, #255	; 0xff
 801b98c:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801b98e:	4620      	mov	r0, r4
 801b990:	bd10      	pop	{r4, pc}
 801b992:	bf00      	nop
 801b994:	0803eb30 	.word	0x0803eb30

0801b998 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b998:	f7ff bfea 	b.w	801b970 <udp_new>

0801b99c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b99c:	b1a8      	cbz	r0, 801b9ca <udp_netif_ip_addr_changed+0x2e>
 801b99e:	6802      	ldr	r2, [r0, #0]
 801b9a0:	b199      	cbz	r1, 801b9ca <udp_netif_ip_addr_changed+0x2e>
 801b9a2:	b192      	cbz	r2, 801b9ca <udp_netif_ip_addr_changed+0x2e>
 801b9a4:	680b      	ldr	r3, [r1, #0]
 801b9a6:	b183      	cbz	r3, 801b9ca <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b9a8:	4b08      	ldr	r3, [pc, #32]	; (801b9cc <udp_netif_ip_addr_changed+0x30>)
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	b16b      	cbz	r3, 801b9ca <udp_netif_ip_addr_changed+0x2e>
{
 801b9ae:	b410      	push	{r4}
 801b9b0:	e000      	b.n	801b9b4 <udp_netif_ip_addr_changed+0x18>
 801b9b2:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b9b4:	681c      	ldr	r4, [r3, #0]
 801b9b6:	4294      	cmp	r4, r2
 801b9b8:	d101      	bne.n	801b9be <udp_netif_ip_addr_changed+0x22>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b9ba:	680a      	ldr	r2, [r1, #0]
 801b9bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d1f6      	bne.n	801b9b2 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 801b9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9c8:	4770      	bx	lr
 801b9ca:	4770      	bx	lr
 801b9cc:	20036314 	.word	0x20036314

0801b9d0 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b9d2:	1c87      	adds	r7, r0, #2
{
 801b9d4:	4604      	mov	r4, r0
 801b9d6:	460d      	mov	r5, r1
 801b9d8:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b9da:	2f44      	cmp	r7, #68	; 0x44
 801b9dc:	d906      	bls.n	801b9ec <dhcp_option_short+0x1c>
 801b9de:	4b07      	ldr	r3, [pc, #28]	; (801b9fc <dhcp_option_short+0x2c>)
 801b9e0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b9e4:	4906      	ldr	r1, [pc, #24]	; (801ba00 <dhcp_option_short+0x30>)
 801b9e6:	4807      	ldr	r0, [pc, #28]	; (801ba04 <dhcp_option_short+0x34>)
 801b9e8:	f004 fdd6 	bl	8020598 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b9ec:	1c63      	adds	r3, r4, #1
 801b9ee:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801b9f0:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b9f2:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b9f4:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b9f6:	54ee      	strb	r6, [r5, r3]
}
 801b9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	0803ef44 	.word	0x0803ef44
 801ba00:	0803ef7c 	.word	0x0803ef7c
 801ba04:	08026544 	.word	0x08026544

0801ba08 <dhcp_option>:
{
 801ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba0a:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ba0c:	3302      	adds	r3, #2
{
 801ba0e:	4604      	mov	r4, r0
 801ba10:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ba12:	4403      	add	r3, r0
{
 801ba14:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ba16:	2b44      	cmp	r3, #68	; 0x44
 801ba18:	d906      	bls.n	801ba28 <dhcp_option+0x20>
 801ba1a:	4b07      	ldr	r3, [pc, #28]	; (801ba38 <dhcp_option+0x30>)
 801ba1c:	f240 529a 	movw	r2, #1434	; 0x59a
 801ba20:	4906      	ldr	r1, [pc, #24]	; (801ba3c <dhcp_option+0x34>)
 801ba22:	4807      	ldr	r0, [pc, #28]	; (801ba40 <dhcp_option+0x38>)
 801ba24:	f004 fdb8 	bl	8020598 <iprintf>
  options[options_out_len++] = option_type;
 801ba28:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801ba2a:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801ba2c:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801ba2e:	b29b      	uxth	r3, r3
}
 801ba30:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801ba32:	54ee      	strb	r6, [r5, r3]
}
 801ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba36:	bf00      	nop
 801ba38:	0803ef44 	.word	0x0803ef44
 801ba3c:	0803eec4 	.word	0x0803eec4
 801ba40:	08026544 	.word	0x08026544

0801ba44 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ba46:	1d07      	adds	r7, r0, #4
{
 801ba48:	4604      	mov	r4, r0
 801ba4a:	460d      	mov	r5, r1
 801ba4c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ba4e:	2f44      	cmp	r7, #68	; 0x44
 801ba50:	d906      	bls.n	801ba60 <dhcp_option_long+0x1c>
 801ba52:	4b0b      	ldr	r3, [pc, #44]	; (801ba80 <dhcp_option_long+0x3c>)
 801ba54:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801ba58:	490a      	ldr	r1, [pc, #40]	; (801ba84 <dhcp_option_long+0x40>)
 801ba5a:	480b      	ldr	r0, [pc, #44]	; (801ba88 <dhcp_option_long+0x44>)
 801ba5c:	f004 fd9c 	bl	8020598 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ba60:	0e30      	lsrs	r0, r6, #24
 801ba62:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ba64:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ba66:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ba68:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ba6a:	b289      	uxth	r1, r1
 801ba6c:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ba6e:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ba70:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ba72:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ba74:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801ba76:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ba78:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ba7a:	54ee      	strb	r6, [r5, r3]
}
 801ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba7e:	bf00      	nop
 801ba80:	0803ef44 	.word	0x0803ef44
 801ba84:	0803ef08 	.word	0x0803ef08
 801ba88:	08026544 	.word	0x08026544

0801ba8c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801ba8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801ba90:	4680      	mov	r8, r0
 801ba92:	2800      	cmp	r0, #0
 801ba94:	f000 8092 	beq.w	801bbbc <dhcp_create_msg+0x130>
 801ba98:	4689      	mov	r9, r1
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801ba9a:	2900      	cmp	r1, #0
 801ba9c:	f000 8085 	beq.w	801bbaa <dhcp_create_msg+0x11e>
 801baa0:	4616      	mov	r6, r2
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801baa2:	f44f 719a 	mov.w	r1, #308	; 0x134
 801baa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801baaa:	2036      	movs	r0, #54	; 0x36
 801baac:	461f      	mov	r7, r3
 801baae:	f7fa fb43 	bl	8016138 <pbuf_alloc>
  if (p_out == NULL) {
 801bab2:	4605      	mov	r5, r0
 801bab4:	2800      	cmp	r0, #0
 801bab6:	d046      	beq.n	801bb46 <dhcp_create_msg+0xba>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801bab8:	8943      	ldrh	r3, [r0, #10]
 801baba:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801babe:	d366      	bcc.n	801bb8e <dhcp_create_msg+0x102>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bac0:	2e03      	cmp	r6, #3
 801bac2:	d048      	beq.n	801bb56 <dhcp_create_msg+0xca>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801bac4:	f899 3006 	ldrb.w	r3, [r9, #6]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d03f      	beq.n	801bb4c <dhcp_create_msg+0xc0>
 801bacc:	4b40      	ldr	r3, [pc, #256]	; (801bbd0 <dhcp_create_msg+0x144>)
 801bace:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801bad0:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bad2:	f44f 729a 	mov.w	r2, #308	; 0x134
    dhcp->xid = xid;
 801bad6:	f8c9 0000 	str.w	r0, [r9]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bada:	2100      	movs	r1, #0
 801badc:	4620      	mov	r0, r4
 801bade:	f003 fddc 	bl	801f69a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801bae2:	2301      	movs	r3, #1
 801bae4:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bae6:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bae8:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801baec:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801baee:	f8d9 0000 	ldr.w	r0, [r9]
 801baf2:	f7f8 fc47 	bl	8014384 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801baf6:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801baf8:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bafa:	d150      	bne.n	801bb9e <dhcp_create_msg+0x112>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bafc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bb00:	60e3      	str	r3, [r4, #12]
 801bb02:	f108 032e 	add.w	r3, r8, #46	; 0x2e
 801bb06:	f108 0034 	add.w	r0, r8, #52	; 0x34
 801bb0a:	f104 021c 	add.w	r2, r4, #28
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bb0e:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb12:	4283      	cmp	r3, r0
    msg_out->chaddr[i] = netif->hwaddr[i];
 801bb14:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb18:	d1f9      	bne.n	801bb0e <dhcp_create_msg+0x82>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bb1a:	2363      	movs	r3, #99	; 0x63
 801bb1c:	f06f 0c7d 	mvn.w	ip, #125	; 0x7d
 801bb20:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801bb22:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bb24:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
  options[options_out_len++] = option_len;
 801bb28:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bb2a:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801bb2e:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801bb30:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bb34:	f884 c0ed 	strb.w	ip, [r4, #237]	; 0xed
 801bb38:	f884 00ee 	strb.w	r0, [r4, #238]	; 0xee
  options[options_out_len++] = option_type;
 801bb3c:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801bb40:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801bb44:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801bb46:	4628      	mov	r0, r5
 801bb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801bb4c:	f004 fdb4 	bl	80206b8 <rand>
 801bb50:	4b1f      	ldr	r3, [pc, #124]	; (801bbd0 <dhcp_create_msg+0x144>)
 801bb52:	6018      	str	r0, [r3, #0]
 801bb54:	e7bc      	b.n	801bad0 <dhcp_create_msg+0x44>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801bb56:	f899 3005 	ldrb.w	r3, [r9, #5]
 801bb5a:	2b03      	cmp	r3, #3
 801bb5c:	d0b2      	beq.n	801bac4 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801bb5e:	686c      	ldr	r4, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801bb60:	f44f 729a 	mov.w	r2, #308	; 0x134
 801bb64:	2100      	movs	r1, #0
 801bb66:	4620      	mov	r0, r4
 801bb68:	f003 fd97 	bl	801f69a <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801bb6c:	2301      	movs	r3, #1
 801bb6e:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801bb70:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 801bb72:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 801bb76:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801bb78:	f8d9 0000 	ldr.w	r0, [r9]
 801bb7c:	f7f8 fc02 	bl	8014384 <lwip_htonl>
 801bb80:	6060      	str	r0, [r4, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bb82:	f899 3005 	ldrb.w	r3, [r9, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bb86:	3b04      	subs	r3, #4
 801bb88:	2b01      	cmp	r3, #1
 801bb8a:	d8ba      	bhi.n	801bb02 <dhcp_create_msg+0x76>
 801bb8c:	e7b6      	b.n	801bafc <dhcp_create_msg+0x70>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801bb8e:	4b11      	ldr	r3, [pc, #68]	; (801bbd4 <dhcp_create_msg+0x148>)
 801bb90:	f240 7272 	movw	r2, #1906	; 0x772
 801bb94:	4910      	ldr	r1, [pc, #64]	; (801bbd8 <dhcp_create_msg+0x14c>)
 801bb96:	4811      	ldr	r0, [pc, #68]	; (801bbdc <dhcp_create_msg+0x150>)
 801bb98:	f004 fcfe 	bl	8020598 <iprintf>
 801bb9c:	e790      	b.n	801bac0 <dhcp_create_msg+0x34>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801bb9e:	1ff3      	subs	r3, r6, #7
 801bba0:	2b01      	cmp	r3, #1
 801bba2:	d9ab      	bls.n	801bafc <dhcp_create_msg+0x70>
 801bba4:	2e03      	cmp	r6, #3
 801bba6:	d1ac      	bne.n	801bb02 <dhcp_create_msg+0x76>
 801bba8:	e7eb      	b.n	801bb82 <dhcp_create_msg+0xf6>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801bbaa:	4b0a      	ldr	r3, [pc, #40]	; (801bbd4 <dhcp_create_msg+0x148>)
 801bbac:	f240 726a 	movw	r2, #1898	; 0x76a
 801bbb0:	490b      	ldr	r1, [pc, #44]	; (801bbe0 <dhcp_create_msg+0x154>)
 801bbb2:	464d      	mov	r5, r9
 801bbb4:	4809      	ldr	r0, [pc, #36]	; (801bbdc <dhcp_create_msg+0x150>)
 801bbb6:	f004 fcef 	bl	8020598 <iprintf>
 801bbba:	e7c4      	b.n	801bb46 <dhcp_create_msg+0xba>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801bbbc:	4605      	mov	r5, r0
 801bbbe:	4b05      	ldr	r3, [pc, #20]	; (801bbd4 <dhcp_create_msg+0x148>)
 801bbc0:	f240 7269 	movw	r2, #1897	; 0x769
 801bbc4:	4907      	ldr	r1, [pc, #28]	; (801bbe4 <dhcp_create_msg+0x158>)
 801bbc6:	4805      	ldr	r0, [pc, #20]	; (801bbdc <dhcp_create_msg+0x150>)
 801bbc8:	f004 fce6 	bl	8020598 <iprintf>
 801bbcc:	e7bb      	b.n	801bb46 <dhcp_create_msg+0xba>
 801bbce:	bf00      	nop
 801bbd0:	2002243c 	.word	0x2002243c
 801bbd4:	0803ef44 	.word	0x0803ef44
 801bbd8:	0803ee20 	.word	0x0803ee20
 801bbdc:	08026544 	.word	0x08026544
 801bbe0:	0803ee00 	.word	0x0803ee00
 801bbe4:	0803ede0 	.word	0x0803ede0

0801bbe8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801bbe8:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801bbea:	1c45      	adds	r5, r0, #1
 801bbec:	23ff      	movs	r3, #255	; 0xff
 801bbee:	b2ae      	uxth	r6, r5
 801bbf0:	540b      	strb	r3, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bbf2:	2e43      	cmp	r6, #67	; 0x43
 801bbf4:	d80c      	bhi.n	801bc10 <dhcp_option_trailer+0x28>
 801bbf6:	f1c0 0542 	rsb	r5, r0, #66	; 0x42
 801bbfa:	1e73      	subs	r3, r6, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801bbfc:	2400      	movs	r4, #0
 801bbfe:	fa16 f585 	uxtah	r5, r6, r5
 801bc02:	440b      	add	r3, r1
 801bc04:	4429      	add	r1, r5
 801bc06:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bc0a:	428b      	cmp	r3, r1
 801bc0c:	d1fb      	bne.n	801bc06 <dhcp_option_trailer+0x1e>
    options[options_out_len++] = 0;
 801bc0e:	2644      	movs	r6, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801bc10:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
 801bc14:	4610      	mov	r0, r2
 801bc16:	b289      	uxth	r1, r1
}
 801bc18:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801bc1a:	f7fa bb2b 	b.w	8016274 <pbuf_realloc>
 801bc1e:	bf00      	nop

0801bc20 <dhcp_reboot>:
{
 801bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc24:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801bc26:	b085      	sub	sp, #20
 801bc28:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801bc2a:	7973      	ldrb	r3, [r6, #5]
 801bc2c:	2b03      	cmp	r3, #3
 801bc2e:	d004      	beq.n	801bc3a <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801bc30:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801bc32:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801bc34:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801bc36:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801bc38:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801bc3a:	f10d 030e 	add.w	r3, sp, #14
 801bc3e:	2203      	movs	r2, #3
 801bc40:	4631      	mov	r1, r6
 801bc42:	4658      	mov	r0, fp
 801bc44:	f7ff ff22 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801bc48:	4682      	mov	sl, r0
 801bc4a:	2800      	cmp	r0, #0
 801bc4c:	d078      	beq.n	801bd40 <dhcp_reboot+0x120>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bc4e:	6845      	ldr	r5, [r0, #4]
 801bc50:	2302      	movs	r3, #2
 801bc52:	2239      	movs	r2, #57	; 0x39
 801bc54:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801bc58:	35f0      	adds	r5, #240	; 0xf0
 801bc5a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801bd60 <dhcp_reboot+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bc5e:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bc62:	4629      	mov	r1, r5
 801bc64:	f7ff fed0 	bl	801ba08 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801bc68:	4629      	mov	r1, r5
 801bc6a:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bc6e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801bc72:	f7ff fead 	bl	801b9d0 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bc76:	2304      	movs	r3, #4
 801bc78:	4629      	mov	r1, r5
 801bc7a:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801bc7c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bc80:	f7ff fec2 	bl	801ba08 <dhcp_option>
 801bc84:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bc86:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bc88:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bc8c:	f7f8 fb7a 	bl	8014384 <lwip_htonl>
 801bc90:	4629      	mov	r1, r5
 801bc92:	4602      	mov	r2, r0
 801bc94:	4620      	mov	r0, r4
 801bc96:	f7ff fed5 	bl	801ba44 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bc9a:	4629      	mov	r1, r5
 801bc9c:	2304      	movs	r3, #4
 801bc9e:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bca0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bca4:	f7ff feb0 	bl	801ba08 <dhcp_option>
 801bca8:	4604      	mov	r4, r0
 801bcaa:	1d07      	adds	r7, r0, #4
 801bcac:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801bcb0:	2c43      	cmp	r4, #67	; 0x43
 801bcb2:	b2bf      	uxth	r7, r7
 801bcb4:	d80b      	bhi.n	801bcce <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801bcb6:	1c63      	adds	r3, r4, #1
 801bcb8:	f805 8004 	strb.w	r8, [r5, r4]
 801bcbc:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bcbe:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bcc0:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bcc4:	d00b      	beq.n	801bcde <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801bcc6:	2c43      	cmp	r4, #67	; 0x43
 801bcc8:	f819 8b01 	ldrb.w	r8, [r9], #1
 801bccc:	d9f3      	bls.n	801bcb6 <dhcp_reboot+0x96>
 801bcce:	4b1e      	ldr	r3, [pc, #120]	; (801bd48 <dhcp_reboot+0x128>)
 801bcd0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801bcd4:	491d      	ldr	r1, [pc, #116]	; (801bd4c <dhcp_reboot+0x12c>)
 801bcd6:	481e      	ldr	r0, [pc, #120]	; (801bd50 <dhcp_reboot+0x130>)
 801bcd8:	f004 fc5e 	bl	8020598 <iprintf>
 801bcdc:	e7eb      	b.n	801bcb6 <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bcde:	4629      	mov	r1, r5
 801bce0:	4638      	mov	r0, r7
 801bce2:	4652      	mov	r2, sl
 801bce4:	f7ff ff80 	bl	801bbe8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801bce8:	4a1a      	ldr	r2, [pc, #104]	; (801bd54 <dhcp_reboot+0x134>)
 801bcea:	f8cd b000 	str.w	fp, [sp]
 801bcee:	2343      	movs	r3, #67	; 0x43
 801bcf0:	6810      	ldr	r0, [r2, #0]
 801bcf2:	4651      	mov	r1, sl
 801bcf4:	4a18      	ldr	r2, [pc, #96]	; (801bd58 <dhcp_reboot+0x138>)
 801bcf6:	f7ff fd19 	bl	801b72c <udp_sendto_if>
 801bcfa:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801bcfc:	4650      	mov	r0, sl
 801bcfe:	f7fa f9ad 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801bd02:	79b3      	ldrb	r3, [r6, #6]
 801bd04:	2bff      	cmp	r3, #255	; 0xff
 801bd06:	d015      	beq.n	801bd34 <dhcp_reboot+0x114>
    dhcp->tries++;
 801bd08:	3301      	adds	r3, #1
 801bd0a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801bd0c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801bd0e:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801bd10:	d810      	bhi.n	801bd34 <dhcp_reboot+0x114>
 801bd12:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801bd16:	4a11      	ldr	r2, [pc, #68]	; (801bd5c <dhcp_reboot+0x13c>)
}
 801bd18:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801bd1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bd1e:	00db      	lsls	r3, r3, #3
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bd26:	fba2 2303 	umull	r2, r3, r2, r3
 801bd2a:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bd2c:	8133      	strh	r3, [r6, #8]
}
 801bd2e:	b005      	add	sp, #20
 801bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801bd34:	2314      	movs	r3, #20
}
 801bd36:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bd38:	8133      	strh	r3, [r6, #8]
}
 801bd3a:	b005      	add	sp, #20
 801bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801bd40:	f04f 34ff 	mov.w	r4, #4294967295
 801bd44:	e7dd      	b.n	801bd02 <dhcp_reboot+0xe2>
 801bd46:	bf00      	nop
 801bd48:	0803ef44 	.word	0x0803ef44
 801bd4c:	0803efb8 	.word	0x0803efb8
 801bd50:	08026544 	.word	0x08026544
 801bd54:	20022434 	.word	0x20022434
 801bd58:	0803f464 	.word	0x0803f464
 801bd5c:	10624dd3 	.word	0x10624dd3
 801bd60:	0803ee85 	.word	0x0803ee85

0801bd64 <dhcp_select>:
{
 801bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd68:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	f000 80ac 	beq.w	801bec8 <dhcp_select+0x164>
  dhcp = netif_dhcp_data(netif);
 801bd70:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801bd72:	4607      	mov	r7, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801bd74:	2d00      	cmp	r5, #0
 801bd76:	f000 809d 	beq.w	801beb4 <dhcp_select+0x150>
  if (new_state != dhcp->state) {
 801bd7a:	796b      	ldrb	r3, [r5, #5]
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d004      	beq.n	801bd8a <dhcp_select+0x26>
    dhcp->tries = 0;
 801bd80:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801bd82:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801bd84:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801bd86:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801bd88:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801bd8a:	f10d 030e 	add.w	r3, sp, #14
 801bd8e:	2203      	movs	r2, #3
 801bd90:	4629      	mov	r1, r5
 801bd92:	4638      	mov	r0, r7
 801bd94:	f7ff fe7a 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801bd98:	4682      	mov	sl, r0
 801bd9a:	2800      	cmp	r0, #0
 801bd9c:	f000 8087 	beq.w	801beae <dhcp_select+0x14a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bda0:	6846      	ldr	r6, [r0, #4]
 801bda2:	2302      	movs	r3, #2
 801bda4:	2239      	movs	r2, #57	; 0x39
 801bda6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801bdaa:	36f0      	adds	r6, #240	; 0xf0
 801bdac:	f8df b150 	ldr.w	fp, [pc, #336]	; 801bf00 <dhcp_select+0x19c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bdb0:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bdb4:	4631      	mov	r1, r6
 801bdb6:	f7ff fe27 	bl	801ba08 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bdba:	4631      	mov	r1, r6
 801bdbc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bdbe:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bdc2:	f7ff fe05 	bl	801b9d0 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bdc6:	2304      	movs	r3, #4
 801bdc8:	4631      	mov	r1, r6
 801bdca:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bdcc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bdd0:	f7ff fe1a 	bl	801ba08 <dhcp_option>
 801bdd4:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bdd6:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bdd8:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bddc:	f7f8 fad2 	bl	8014384 <lwip_htonl>
 801bde0:	4631      	mov	r1, r6
 801bde2:	4602      	mov	r2, r0
 801bde4:	4620      	mov	r0, r4
 801bde6:	f7ff fe2d 	bl	801ba44 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bdea:	2304      	movs	r3, #4
 801bdec:	4631      	mov	r1, r6
 801bdee:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bdf0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bdf4:	f7ff fe08 	bl	801ba08 <dhcp_option>
 801bdf8:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801bdfa:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bdfc:	f8ad 400e 	strh.w	r4, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801be00:	f7f8 fac0 	bl	8014384 <lwip_htonl>
 801be04:	4631      	mov	r1, r6
 801be06:	4602      	mov	r2, r0
 801be08:	4620      	mov	r0, r4
 801be0a:	f7ff fe1b 	bl	801ba44 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801be0e:	4631      	mov	r1, r6
 801be10:	2304      	movs	r3, #4
 801be12:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801be14:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801be18:	f7ff fdf6 	bl	801ba08 <dhcp_option>
 801be1c:	4604      	mov	r4, r0
 801be1e:	f100 0804 	add.w	r8, r0, #4
 801be22:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801be26:	2c43      	cmp	r4, #67	; 0x43
 801be28:	fa1f f888 	uxth.w	r8, r8
 801be2c:	d80b      	bhi.n	801be46 <dhcp_select+0xe2>
  options[options_out_len++] = value;
 801be2e:	1c63      	adds	r3, r4, #1
 801be30:	f806 9004 	strb.w	r9, [r6, r4]
 801be34:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801be36:	4544      	cmp	r4, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801be38:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801be3c:	d00b      	beq.n	801be56 <dhcp_select+0xf2>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801be3e:	2c43      	cmp	r4, #67	; 0x43
 801be40:	f81b 9b01 	ldrb.w	r9, [fp], #1
 801be44:	d9f3      	bls.n	801be2e <dhcp_select+0xca>
 801be46:	4b25      	ldr	r3, [pc, #148]	; (801bedc <dhcp_select+0x178>)
 801be48:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801be4c:	4924      	ldr	r1, [pc, #144]	; (801bee0 <dhcp_select+0x17c>)
 801be4e:	4825      	ldr	r0, [pc, #148]	; (801bee4 <dhcp_select+0x180>)
 801be50:	f004 fba2 	bl	8020598 <iprintf>
 801be54:	e7eb      	b.n	801be2e <dhcp_select+0xca>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801be56:	4631      	mov	r1, r6
 801be58:	4640      	mov	r0, r8
 801be5a:	4652      	mov	r2, sl
 801be5c:	f7ff fec4 	bl	801bbe8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801be60:	4921      	ldr	r1, [pc, #132]	; (801bee8 <dhcp_select+0x184>)
 801be62:	4a22      	ldr	r2, [pc, #136]	; (801beec <dhcp_select+0x188>)
 801be64:	2343      	movs	r3, #67	; 0x43
 801be66:	6808      	ldr	r0, [r1, #0]
 801be68:	4651      	mov	r1, sl
 801be6a:	e9cd 7200 	strd	r7, r2, [sp]
 801be6e:	4a20      	ldr	r2, [pc, #128]	; (801bef0 <dhcp_select+0x18c>)
 801be70:	f7ff fb9c 	bl	801b5ac <udp_sendto_if_src>
 801be74:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801be76:	4650      	mov	r0, sl
 801be78:	f7fa f8f0 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801be7c:	79ab      	ldrb	r3, [r5, #6]
 801be7e:	2bff      	cmp	r3, #255	; 0xff
 801be80:	d013      	beq.n	801beaa <dhcp_select+0x146>
    dhcp->tries++;
 801be82:	3301      	adds	r3, #1
 801be84:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801be86:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801be88:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801be8a:	d80e      	bhi.n	801beaa <dhcp_select+0x146>
 801be8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801be90:	4918      	ldr	r1, [pc, #96]	; (801bef4 <dhcp_select+0x190>)
 801be92:	4093      	lsls	r3, r2
 801be94:	b29b      	uxth	r3, r3
 801be96:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801be9a:	fba1 2303 	umull	r2, r3, r1, r3
 801be9e:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bea0:	812b      	strh	r3, [r5, #8]
}
 801bea2:	4620      	mov	r0, r4
 801bea4:	b005      	add	sp, #20
 801bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801beaa:	2378      	movs	r3, #120	; 0x78
 801beac:	e7f8      	b.n	801bea0 <dhcp_select+0x13c>
 801beae:	f04f 34ff 	mov.w	r4, #4294967295
 801beb2:	e7e3      	b.n	801be7c <dhcp_select+0x118>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801beb4:	4b09      	ldr	r3, [pc, #36]	; (801bedc <dhcp_select+0x178>)
 801beb6:	f240 1279 	movw	r2, #377	; 0x179
 801beba:	490f      	ldr	r1, [pc, #60]	; (801bef8 <dhcp_select+0x194>)
 801bebc:	f06f 0405 	mvn.w	r4, #5
 801bec0:	4808      	ldr	r0, [pc, #32]	; (801bee4 <dhcp_select+0x180>)
 801bec2:	f004 fb69 	bl	8020598 <iprintf>
 801bec6:	e7ec      	b.n	801bea2 <dhcp_select+0x13e>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801bec8:	4b04      	ldr	r3, [pc, #16]	; (801bedc <dhcp_select+0x178>)
 801beca:	f240 1277 	movw	r2, #375	; 0x177
 801bece:	490b      	ldr	r1, [pc, #44]	; (801befc <dhcp_select+0x198>)
 801bed0:	f06f 040f 	mvn.w	r4, #15
 801bed4:	4803      	ldr	r0, [pc, #12]	; (801bee4 <dhcp_select+0x180>)
 801bed6:	f004 fb5f 	bl	8020598 <iprintf>
 801beda:	e7e2      	b.n	801bea2 <dhcp_select+0x13e>
 801bedc:	0803ef44 	.word	0x0803ef44
 801bee0:	0803efb8 	.word	0x0803efb8
 801bee4:	08026544 	.word	0x08026544
 801bee8:	20022434 	.word	0x20022434
 801beec:	0803f460 	.word	0x0803f460
 801bef0:	0803f464 	.word	0x0803f464
 801bef4:	10624dd3 	.word	0x10624dd3
 801bef8:	0803f0b4 	.word	0x0803f0b4
 801befc:	0803f098 	.word	0x0803f098
 801bf00:	0803ee85 	.word	0x0803ee85

0801bf04 <dhcp_discover>:
{
 801bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bf08:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801bf0a:	2300      	movs	r3, #0
{
 801bf0c:	b085      	sub	sp, #20
 801bf0e:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801bf10:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801bf12:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801bf14:	2a06      	cmp	r2, #6
 801bf16:	d003      	beq.n	801bf20 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801bf18:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801bf1a:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801bf1c:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801bf1e:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801bf20:	f10d 030e 	add.w	r3, sp, #14
 801bf24:	2201      	movs	r2, #1
 801bf26:	4629      	mov	r1, r5
 801bf28:	4650      	mov	r0, sl
 801bf2a:	f7ff fdaf 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801bf2e:	4681      	mov	r9, r0
 801bf30:	2800      	cmp	r0, #0
 801bf32:	d047      	beq.n	801bfc4 <dhcp_discover+0xc0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bf34:	6846      	ldr	r6, [r0, #4]
 801bf36:	2302      	movs	r3, #2
 801bf38:	2239      	movs	r2, #57	; 0x39
 801bf3a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801bf3e:	36f0      	adds	r6, #240	; 0xf0
 801bf40:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801c01c <dhcp_discover+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bf44:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bf48:	4631      	mov	r1, r6
 801bf4a:	f7ff fd5d 	bl	801ba08 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bf4e:	4631      	mov	r1, r6
 801bf50:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bf54:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bf58:	f7ff fd3a 	bl	801b9d0 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bf5c:	4631      	mov	r1, r6
 801bf5e:	2304      	movs	r3, #4
 801bf60:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bf62:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bf66:	f7ff fd4f 	bl	801ba08 <dhcp_option>
 801bf6a:	4604      	mov	r4, r0
 801bf6c:	1d07      	adds	r7, r0, #4
 801bf6e:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801bf72:	2c43      	cmp	r4, #67	; 0x43
 801bf74:	b2bf      	uxth	r7, r7
 801bf76:	d80b      	bhi.n	801bf90 <dhcp_discover+0x8c>
  options[options_out_len++] = value;
 801bf78:	1c63      	adds	r3, r4, #1
 801bf7a:	f806 8004 	strb.w	r8, [r6, r4]
 801bf7e:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bf80:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bf82:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bf86:	d00b      	beq.n	801bfa0 <dhcp_discover+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801bf88:	2c43      	cmp	r4, #67	; 0x43
 801bf8a:	f81b 8b01 	ldrb.w	r8, [fp], #1
 801bf8e:	d9f3      	bls.n	801bf78 <dhcp_discover+0x74>
 801bf90:	4b1b      	ldr	r3, [pc, #108]	; (801c000 <dhcp_discover+0xfc>)
 801bf92:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801bf96:	491b      	ldr	r1, [pc, #108]	; (801c004 <dhcp_discover+0x100>)
 801bf98:	481b      	ldr	r0, [pc, #108]	; (801c008 <dhcp_discover+0x104>)
 801bf9a:	f004 fafd 	bl	8020598 <iprintf>
 801bf9e:	e7eb      	b.n	801bf78 <dhcp_discover+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bfa0:	4631      	mov	r1, r6
 801bfa2:	4638      	mov	r0, r7
 801bfa4:	464a      	mov	r2, r9
 801bfa6:	f7ff fe1f 	bl	801bbe8 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bfaa:	4918      	ldr	r1, [pc, #96]	; (801c00c <dhcp_discover+0x108>)
 801bfac:	4a18      	ldr	r2, [pc, #96]	; (801c010 <dhcp_discover+0x10c>)
 801bfae:	2343      	movs	r3, #67	; 0x43
 801bfb0:	6808      	ldr	r0, [r1, #0]
 801bfb2:	4649      	mov	r1, r9
 801bfb4:	e9cd a200 	strd	sl, r2, [sp]
 801bfb8:	4a16      	ldr	r2, [pc, #88]	; (801c014 <dhcp_discover+0x110>)
 801bfba:	f7ff faf7 	bl	801b5ac <udp_sendto_if_src>
    pbuf_free(p_out);
 801bfbe:	4648      	mov	r0, r9
 801bfc0:	f7fa f84c 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801bfc4:	79ab      	ldrb	r3, [r5, #6]
 801bfc6:	2bff      	cmp	r3, #255	; 0xff
 801bfc8:	d013      	beq.n	801bff2 <dhcp_discover+0xee>
    dhcp->tries++;
 801bfca:	3301      	adds	r3, #1
 801bfcc:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bfce:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801bfd0:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bfd2:	d80e      	bhi.n	801bff2 <dhcp_discover+0xee>
 801bfd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bfd8:	490f      	ldr	r1, [pc, #60]	; (801c018 <dhcp_discover+0x114>)
}
 801bfda:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bfdc:	4093      	lsls	r3, r2
 801bfde:	b29b      	uxth	r3, r3
 801bfe0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bfe4:	fba1 2303 	umull	r2, r3, r1, r3
 801bfe8:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bfea:	812b      	strh	r3, [r5, #8]
}
 801bfec:	b005      	add	sp, #20
 801bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bff2:	2378      	movs	r3, #120	; 0x78
}
 801bff4:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bff6:	812b      	strh	r3, [r5, #8]
}
 801bff8:	b005      	add	sp, #20
 801bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffe:	bf00      	nop
 801c000:	0803ef44 	.word	0x0803ef44
 801c004:	0803efb8 	.word	0x0803efb8
 801c008:	08026544 	.word	0x08026544
 801c00c:	20022434 	.word	0x20022434
 801c010:	0803f460 	.word	0x0803f460
 801c014:	0803f464 	.word	0x0803f464
 801c018:	10624dd3 	.word	0x10624dd3
 801c01c:	0803ee85 	.word	0x0803ee85

0801c020 <dhcp_check>:
{
 801c020:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c022:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801c024:	7963      	ldrb	r3, [r4, #5]
 801c026:	2b08      	cmp	r3, #8
 801c028:	d004      	beq.n	801c034 <dhcp_check+0x14>
    dhcp->tries = 0;
 801c02a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c02c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801c02e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801c030:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801c032:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c034:	2200      	movs	r2, #0
 801c036:	f104 011c 	add.w	r1, r4, #28
 801c03a:	f001 fad7 	bl	801d5ec <etharp_query>
  if (dhcp->tries < 255) {
 801c03e:	79a3      	ldrb	r3, [r4, #6]
 801c040:	2bff      	cmp	r3, #255	; 0xff
 801c042:	d001      	beq.n	801c048 <dhcp_check+0x28>
    dhcp->tries++;
 801c044:	3301      	adds	r3, #1
 801c046:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c048:	2301      	movs	r3, #1
 801c04a:	8123      	strh	r3, [r4, #8]
}
 801c04c:	bd10      	pop	{r4, pc}
 801c04e:	bf00      	nop

0801c050 <dhcp_bind>:
{
 801c050:	b510      	push	{r4, lr}
 801c052:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c054:	2800      	cmp	r0, #0
 801c056:	d075      	beq.n	801c144 <dhcp_bind+0xf4>
  dhcp = netif_dhcp_data(netif);
 801c058:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c05a:	2900      	cmp	r1, #0
 801c05c:	d07b      	beq.n	801c156 <dhcp_bind+0x106>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c05e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801c060:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c062:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801c064:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c066:	d00b      	beq.n	801c080 <dhcp_bind+0x30>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c068:	331e      	adds	r3, #30
 801c06a:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
 801c06e:	fba2 2303 	umull	r2, r3, r2, r3
 801c072:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c078:	d259      	bcs.n	801c12e <dhcp_bind+0xde>
    if (dhcp->t0_timeout == 0) {
 801c07a:	b903      	cbnz	r3, 801c07e <dhcp_bind+0x2e>
      dhcp->t0_timeout = 1;
 801c07c:	2301      	movs	r3, #1
 801c07e:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c080:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c082:	1c53      	adds	r3, r2, #1
 801c084:	d040      	beq.n	801c108 <dhcp_bind+0xb8>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c086:	321e      	adds	r2, #30
 801c088:	4b3e      	ldr	r3, [pc, #248]	; (801c184 <dhcp_bind+0x134>)
 801c08a:	fba3 3202 	umull	r3, r2, r3, r2
 801c08e:	0952      	lsrs	r2, r2, #5
    if (timeout > 0xffff) {
 801c090:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801c094:	d247      	bcs.n	801c126 <dhcp_bind+0xd6>
    if (dhcp->t1_timeout == 0) {
 801c096:	2a00      	cmp	r2, #0
 801c098:	d171      	bne.n	801c17e <dhcp_bind+0x12e>
      dhcp->t1_timeout = 1;
 801c09a:	2301      	movs	r3, #1
 801c09c:	461a      	mov	r2, r3
 801c09e:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c0a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c0a2:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c0a4:	1c5c      	adds	r4, r3, #1
 801c0a6:	d033      	beq.n	801c110 <dhcp_bind+0xc0>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c0a8:	331e      	adds	r3, #30
 801c0aa:	4c36      	ldr	r4, [pc, #216]	; (801c184 <dhcp_bind+0x134>)
 801c0ac:	fba4 4303 	umull	r4, r3, r4, r3
 801c0b0:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 801c0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c0b6:	d241      	bcs.n	801c13c <dhcp_bind+0xec>
    if (dhcp->t2_timeout == 0) {
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d15d      	bne.n	801c178 <dhcp_bind+0x128>
      dhcp->t2_timeout = 1;
 801c0bc:	2401      	movs	r4, #1
 801c0be:	4623      	mov	r3, r4
 801c0c0:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c0c2:	2401      	movs	r4, #1
 801c0c4:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c0c6:	4293      	cmp	r3, r2
 801c0c8:	d802      	bhi.n	801c0d0 <dhcp_bind+0x80>
 801c0ca:	b10c      	cbz	r4, 801c0d0 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801c0d0:	79cb      	ldrb	r3, [r1, #7]
 801c0d2:	b313      	cbz	r3, 801c11a <dhcp_bind+0xca>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c0d4:	6a0b      	ldr	r3, [r1, #32]
 801c0d6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c0d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c0da:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801c0dc:	b92b      	cbnz	r3, 801c0ea <dhcp_bind+0x9a>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c0de:	69cb      	ldr	r3, [r1, #28]
 801c0e0:	9a00      	ldr	r2, [sp, #0]
 801c0e2:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c0e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c0e8:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801c0ea:	794b      	ldrb	r3, [r1, #5]
 801c0ec:	2b0a      	cmp	r3, #10
 801c0ee:	d004      	beq.n	801c0fa <dhcp_bind+0xaa>
    dhcp->tries = 0;
 801c0f0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801c0f2:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801c0f4:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801c0f6:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801c0f8:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c0fa:	311c      	adds	r1, #28
 801c0fc:	ab01      	add	r3, sp, #4
 801c0fe:	466a      	mov	r2, sp
 801c100:	f7f9 fd5a 	bl	8015bb8 <netif_set_addr>
}
 801c104:	b002      	add	sp, #8
 801c106:	bd10      	pop	{r4, pc}
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c108:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801c10a:	894a      	ldrh	r2, [r1, #10]
 801c10c:	1c5c      	adds	r4, r3, #1
 801c10e:	d1cb      	bne.n	801c0a8 <dhcp_bind+0x58>
 801c110:	898b      	ldrh	r3, [r1, #12]
 801c112:	1c1c      	adds	r4, r3, #0
 801c114:	bf18      	it	ne
 801c116:	2401      	movne	r4, #1
 801c118:	e7d5      	b.n	801c0c6 <dhcp_bind+0x76>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c11a:	7f0b      	ldrb	r3, [r1, #28]
    if (first_octet <= 127) {
 801c11c:	061a      	lsls	r2, r3, #24
 801c11e:	d423      	bmi.n	801c168 <dhcp_bind+0x118>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c120:	23ff      	movs	r3, #255	; 0xff
 801c122:	9300      	str	r3, [sp, #0]
 801c124:	e7d8      	b.n	801c0d8 <dhcp_bind+0x88>
    dhcp->t1_timeout = (u16_t)timeout;
 801c126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c12a:	814a      	strh	r2, [r1, #10]
 801c12c:	e7b8      	b.n	801c0a0 <dhcp_bind+0x50>
    dhcp->t0_timeout = (u16_t)timeout;
 801c12e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c132:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    dhcp->t0_timeout = (u16_t)timeout;
 801c134:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c136:	1c53      	adds	r3, r2, #1
 801c138:	d1a5      	bne.n	801c086 <dhcp_bind+0x36>
 801c13a:	e7e5      	b.n	801c108 <dhcp_bind+0xb8>
    dhcp->t2_timeout = (u16_t)timeout;
 801c13c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c140:	818b      	strh	r3, [r1, #12]
 801c142:	e7be      	b.n	801c0c2 <dhcp_bind+0x72>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c144:	4b10      	ldr	r3, [pc, #64]	; (801c188 <dhcp_bind+0x138>)
 801c146:	f240 4215 	movw	r2, #1045	; 0x415
 801c14a:	4910      	ldr	r1, [pc, #64]	; (801c18c <dhcp_bind+0x13c>)
 801c14c:	4810      	ldr	r0, [pc, #64]	; (801c190 <dhcp_bind+0x140>)
 801c14e:	f004 fa23 	bl	8020598 <iprintf>
}
 801c152:	b002      	add	sp, #8
 801c154:	bd10      	pop	{r4, pc}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c156:	4b0c      	ldr	r3, [pc, #48]	; (801c188 <dhcp_bind+0x138>)
 801c158:	f240 4217 	movw	r2, #1047	; 0x417
 801c15c:	490d      	ldr	r1, [pc, #52]	; (801c194 <dhcp_bind+0x144>)
 801c15e:	480c      	ldr	r0, [pc, #48]	; (801c190 <dhcp_bind+0x140>)
 801c160:	f004 fa1a 	bl	8020598 <iprintf>
}
 801c164:	b002      	add	sp, #8
 801c166:	bd10      	pop	{r4, pc}
    } else if (first_octet >= 192) {
 801c168:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c16a:	bf8c      	ite	hi
 801c16c:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c170:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801c174:	9300      	str	r3, [sp, #0]
 801c176:	e7af      	b.n	801c0d8 <dhcp_bind+0x88>
    dhcp->t2_timeout = (u16_t)timeout;
 801c178:	b29b      	uxth	r3, r3
 801c17a:	818b      	strh	r3, [r1, #12]
 801c17c:	e7a1      	b.n	801c0c2 <dhcp_bind+0x72>
    dhcp->t1_timeout = (u16_t)timeout;
 801c17e:	b292      	uxth	r2, r2
 801c180:	814a      	strh	r2, [r1, #10]
 801c182:	e78d      	b.n	801c0a0 <dhcp_bind+0x50>
 801c184:	88888889 	.word	0x88888889
 801c188:	0803ef44 	.word	0x0803ef44
 801c18c:	0803edac 	.word	0x0803edac
 801c190:	08026544 	.word	0x08026544
 801c194:	0803edc8 	.word	0x0803edc8

0801c198 <dhcp_inc_pcb_refcount>:
{
 801c198:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801c19a:	4c15      	ldr	r4, [pc, #84]	; (801c1f0 <dhcp_inc_pcb_refcount+0x58>)
 801c19c:	7823      	ldrb	r3, [r4, #0]
 801c19e:	b9fb      	cbnz	r3, 801c1e0 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c1a0:	4d14      	ldr	r5, [pc, #80]	; (801c1f4 <dhcp_inc_pcb_refcount+0x5c>)
 801c1a2:	682b      	ldr	r3, [r5, #0]
 801c1a4:	b12b      	cbz	r3, 801c1b2 <dhcp_inc_pcb_refcount+0x1a>
 801c1a6:	4b14      	ldr	r3, [pc, #80]	; (801c1f8 <dhcp_inc_pcb_refcount+0x60>)
 801c1a8:	22e5      	movs	r2, #229	; 0xe5
 801c1aa:	4914      	ldr	r1, [pc, #80]	; (801c1fc <dhcp_inc_pcb_refcount+0x64>)
 801c1ac:	4814      	ldr	r0, [pc, #80]	; (801c200 <dhcp_inc_pcb_refcount+0x68>)
 801c1ae:	f004 f9f3 	bl	8020598 <iprintf>
    dhcp_pcb = udp_new();
 801c1b2:	f7ff fbdd 	bl	801b970 <udp_new>
 801c1b6:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801c1b8:	b1b0      	cbz	r0, 801c1e8 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c1ba:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c1bc:	2244      	movs	r2, #68	; 0x44
 801c1be:	4911      	ldr	r1, [pc, #68]	; (801c204 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c1c0:	f046 0620 	orr.w	r6, r6, #32
 801c1c4:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801c1c6:	f7ff f971 	bl	801b4ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801c1ca:	2243      	movs	r2, #67	; 0x43
 801c1cc:	490d      	ldr	r1, [pc, #52]	; (801c204 <dhcp_inc_pcb_refcount+0x6c>)
 801c1ce:	6828      	ldr	r0, [r5, #0]
 801c1d0:	f7ff fb4a 	bl	801b868 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c1d4:	6828      	ldr	r0, [r5, #0]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	490b      	ldr	r1, [pc, #44]	; (801c208 <dhcp_inc_pcb_refcount+0x70>)
 801c1da:	f7ff fb8b 	bl	801b8f4 <udp_recv>
 801c1de:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801c1e0:	3301      	adds	r3, #1
  return ERR_OK;
 801c1e2:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801c1e4:	7023      	strb	r3, [r4, #0]
}
 801c1e6:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801c1e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c1ec:	bd70      	pop	{r4, r5, r6, pc}
 801c1ee:	bf00      	nop
 801c1f0:	20022438 	.word	0x20022438
 801c1f4:	20022434 	.word	0x20022434
 801c1f8:	0803ef44 	.word	0x0803ef44
 801c1fc:	0803ee88 	.word	0x0803ee88
 801c200:	08026544 	.word	0x08026544
 801c204:	0803f460 	.word	0x0803f460
 801c208:	0801c2f5 	.word	0x0801c2f5

0801c20c <dhcp_dec_pcb_refcount>:
{
 801c20c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c20e:	4d0b      	ldr	r5, [pc, #44]	; (801c23c <dhcp_dec_pcb_refcount+0x30>)
 801c210:	782c      	ldrb	r4, [r5, #0]
 801c212:	b154      	cbz	r4, 801c22a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801c214:	3c01      	subs	r4, #1
 801c216:	b2e4      	uxtb	r4, r4
 801c218:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801c21a:	b104      	cbz	r4, 801c21e <dhcp_dec_pcb_refcount+0x12>
}
 801c21c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801c21e:	4d08      	ldr	r5, [pc, #32]	; (801c240 <dhcp_dec_pcb_refcount+0x34>)
 801c220:	6828      	ldr	r0, [r5, #0]
 801c222:	f7ff fb79 	bl	801b918 <udp_remove>
    dhcp_pcb = NULL;
 801c226:	602c      	str	r4, [r5, #0]
}
 801c228:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c22a:	4b06      	ldr	r3, [pc, #24]	; (801c244 <dhcp_dec_pcb_refcount+0x38>)
 801c22c:	22ff      	movs	r2, #255	; 0xff
 801c22e:	4906      	ldr	r1, [pc, #24]	; (801c248 <dhcp_dec_pcb_refcount+0x3c>)
 801c230:	4806      	ldr	r0, [pc, #24]	; (801c24c <dhcp_dec_pcb_refcount+0x40>)
 801c232:	f004 f9b1 	bl	8020598 <iprintf>
 801c236:	782c      	ldrb	r4, [r5, #0]
 801c238:	e7ec      	b.n	801c214 <dhcp_dec_pcb_refcount+0x8>
 801c23a:	bf00      	nop
 801c23c:	20022438 	.word	0x20022438
 801c240:	20022434 	.word	0x20022434
 801c244:	0803ef44 	.word	0x0803ef44
 801c248:	0803ee60 	.word	0x0803ee60
 801c24c:	08026544 	.word	0x08026544

0801c250 <dhcp_handle_ack.isra.2>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c250:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c252:	4d26      	ldr	r5, [pc, #152]	; (801c2ec <dhcp_handle_ack.isra.2+0x9c>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c254:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801c256:	b082      	sub	sp, #8
 801c258:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c25a:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c25c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801c260:	b112      	cbz	r2, 801c268 <dhcp_handle_ack.isra.2+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801c262:	4b23      	ldr	r3, [pc, #140]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c264:	68db      	ldr	r3, [r3, #12]
 801c266:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801c268:	792b      	ldrb	r3, [r5, #4]
 801c26a:	b11b      	cbz	r3, 801c274 <dhcp_handle_ack.isra.2+0x24>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801c26c:	4b20      	ldr	r3, [pc, #128]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c26e:	691b      	ldr	r3, [r3, #16]
 801c270:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c272:	e002      	b.n	801c27a <dhcp_handle_ack.isra.2+0x2a>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801c274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c276:	085b      	lsrs	r3, r3, #1
 801c278:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801c27a:	796b      	ldrb	r3, [r5, #5]
 801c27c:	b11b      	cbz	r3, 801c286 <dhcp_handle_ack.isra.2+0x36>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801c27e:	4b1c      	ldr	r3, [pc, #112]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c280:	695b      	ldr	r3, [r3, #20]
 801c282:	6323      	str	r3, [r4, #48]	; 0x30
 801c284:	e004      	b.n	801c290 <dhcp_handle_ack.isra.2+0x40>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801c286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c288:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c28c:	08db      	lsrs	r3, r3, #3
 801c28e:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c290:	690a      	ldr	r2, [r1, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c292:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c294:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801c296:	b13b      	cbz	r3, 801c2a8 <dhcp_handle_ack.isra.2+0x58>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c298:	4b15      	ldr	r3, [pc, #84]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c29a:	6998      	ldr	r0, [r3, #24]
 801c29c:	f7f8 f872 	bl	8014384 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801c2a0:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801c2a2:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801c2a4:	71e3      	strb	r3, [r4, #7]
 801c2a6:	e000      	b.n	801c2aa <dhcp_handle_ack.isra.2+0x5a>
    dhcp->subnet_mask_given = 0;
 801c2a8:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801c2aa:	79eb      	ldrb	r3, [r5, #7]
 801c2ac:	b123      	cbz	r3, 801c2b8 <dhcp_handle_ack.isra.2+0x68>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801c2ae:	4b10      	ldr	r3, [pc, #64]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c2b0:	69d8      	ldr	r0, [r3, #28]
 801c2b2:	f7f8 f867 	bl	8014384 <lwip_htonl>
 801c2b6:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c2b8:	7a2b      	ldrb	r3, [r5, #8]
 801c2ba:	b1a3      	cbz	r3, 801c2e6 <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c2bc:	4e0c      	ldr	r6, [pc, #48]	; (801c2f0 <dhcp_handle_ack.isra.2+0xa0>)
 801c2be:	ac02      	add	r4, sp, #8
 801c2c0:	6a30      	ldr	r0, [r6, #32]
 801c2c2:	f7f8 f85f 	bl	8014384 <lwip_htonl>
 801c2c6:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 801c2ca:	2000      	movs	r0, #0
 801c2cc:	4621      	mov	r1, r4
 801c2ce:	f7f8 fc13 	bl	8014af8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801c2d2:	7a6b      	ldrb	r3, [r5, #9]
 801c2d4:	b13b      	cbz	r3, 801c2e6 <dhcp_handle_ack.isra.2+0x96>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c2d6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801c2d8:	f7f8 f854 	bl	8014384 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801c2dc:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801c2de:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801c2e0:	2001      	movs	r0, #1
 801c2e2:	f7f8 fc09 	bl	8014af8 <dns_setserver>
}
 801c2e6:	b002      	add	sp, #8
 801c2e8:	bd70      	pop	{r4, r5, r6, pc}
 801c2ea:	bf00      	nop
 801c2ec:	20036318 	.word	0x20036318
 801c2f0:	20036324 	.word	0x20036324

0801c2f4 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801c2f4:	4bae      	ldr	r3, [pc, #696]	; (801c5b0 <dhcp_recv+0x2bc>)
{
 801c2f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801c2fa:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801c2fe:	b08b      	sub	sp, #44	; 0x2c
 801c300:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c302:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801c306:	f1b9 0f00 	cmp.w	r9, #0
 801c30a:	d009      	beq.n	801c320 <dhcp_recv+0x2c>
 801c30c:	f899 3004 	ldrb.w	r3, [r9, #4]
 801c310:	b133      	cbz	r3, 801c320 <dhcp_recv+0x2c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801c312:	8953      	ldrh	r3, [r2, #10]
 801c314:	2b2b      	cmp	r3, #43	; 0x2b
 801c316:	d903      	bls.n	801c320 <dhcp_recv+0x2c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801c318:	6851      	ldr	r1, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801c31a:	780b      	ldrb	r3, [r1, #0]
 801c31c:	2b02      	cmp	r3, #2
 801c31e:	d005      	beq.n	801c32c <dhcp_recv+0x38>
  pbuf_free(p);
 801c320:	4658      	mov	r0, fp
 801c322:	f7f9 fe9b 	bl	801605c <pbuf_free>
}
 801c326:	b00b      	add	sp, #44	; 0x2c
 801c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c32c:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801c330:	b1b6      	cbz	r6, 801c360 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c332:	7f0a      	ldrb	r2, [r1, #28]
 801c334:	f89a 302e 	ldrb.w	r3, [sl, #46]	; 0x2e
 801c338:	429a      	cmp	r2, r3
 801c33a:	d1f1      	bne.n	801c320 <dhcp_recv+0x2c>
 801c33c:	f10a 042f 	add.w	r4, sl, #47	; 0x2f
 801c340:	f101 001d 	add.w	r0, r1, #29
 801c344:	2301      	movs	r3, #1
 801c346:	b2da      	uxtb	r2, r3
 801c348:	3301      	adds	r3, #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801c34a:	2a05      	cmp	r2, #5
 801c34c:	d808      	bhi.n	801c360 <dhcp_recv+0x6c>
 801c34e:	42b2      	cmp	r2, r6
 801c350:	d206      	bcs.n	801c360 <dhcp_recv+0x6c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c352:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c356:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c35a:	4295      	cmp	r5, r2
 801c35c:	d0f3      	beq.n	801c346 <dhcp_recv+0x52>
 801c35e:	e7df      	b.n	801c320 <dhcp_recv+0x2c>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801c360:	6848      	ldr	r0, [r1, #4]
 801c362:	f7f8 f80f 	bl	8014384 <lwip_htonl>
 801c366:	f8d9 3000 	ldr.w	r3, [r9]
 801c36a:	4298      	cmp	r0, r3
 801c36c:	d1d8      	bne.n	801c320 <dhcp_recv+0x2c>
  dhcp_clear_all_options(dhcp);
 801c36e:	2200      	movs	r2, #0
 801c370:	4990      	ldr	r1, [pc, #576]	; (801c5b4 <dhcp_recv+0x2c0>)
 801c372:	604a      	str	r2, [r1, #4]
 801c374:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801c376:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801c37a:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801c37c:	2b2b      	cmp	r3, #43	; 0x2b
 801c37e:	d9cf      	bls.n	801c320 <dhcp_recv+0x2c>
  int parse_sname_as_options = 0;
 801c380:	9204      	str	r2, [sp, #16]
  options_idx = DHCP_OPTIONS_OFS;
 801c382:	21f0      	movs	r1, #240	; 0xf0
  options_idx_max = p->tot_len;
 801c384:	f8bb 2008 	ldrh.w	r2, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801c388:	9103      	str	r1, [sp, #12]
 801c38a:	4690      	mov	r8, r2
 801c38c:	f8cd b008 	str.w	fp, [sp, #8]
 801c390:	e9cd a906 	strd	sl, r9, [sp, #24]
 801c394:	e9dd 7b02 	ldrd	r7, fp, [sp, #8]
 801c398:	e000      	b.n	801c39c <dhcp_recv+0xa8>
 801c39a:	897b      	ldrh	r3, [r7, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801c39c:	455b      	cmp	r3, fp
    options_idx = (u16_t)(options_idx - q->len);
 801c39e:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c3a2:	eba8 0303 	sub.w	r3, r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c3a6:	d809      	bhi.n	801c3bc <dhcp_recv+0xc8>
    q = q->next;
 801c3a8:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801c3aa:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c3ae:	fa1f f883 	uxth.w	r8, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801c3b2:	2f00      	cmp	r7, #0
 801c3b4:	d1f1      	bne.n	801c39a <dhcp_recv+0xa6>
 801c3b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c3ba:	e7b1      	b.n	801c320 <dhcp_recv+0x2c>
  options = (u8_t *)q->payload;
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	465c      	mov	r4, fp
 801c3c0:	f8cd b00c 	str.w	fp, [sp, #12]
 801c3c4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c3c6:	4544      	cmp	r4, r8
 801c3c8:	f080 8219 	bcs.w	801c7fe <dhcp_recv+0x50a>
 801c3cc:	9b01      	ldr	r3, [sp, #4]
 801c3ce:	5d1a      	ldrb	r2, [r3, r4]
 801c3d0:	2aff      	cmp	r2, #255	; 0xff
 801c3d2:	f000 8214 	beq.w	801c7fe <dhcp_recv+0x50a>
    u16_t val_offset = (u16_t)(offset + 2);
 801c3d6:	1ca6      	adds	r6, r4, #2
 801c3d8:	b2b6      	uxth	r6, r6
    if (val_offset < offset) {
 801c3da:	42b4      	cmp	r4, r6
 801c3dc:	d8eb      	bhi.n	801c3b6 <dhcp_recv+0xc2>
    if ((offset + 1) < q->len) {
 801c3de:	1c61      	adds	r1, r4, #1
 801c3e0:	897b      	ldrh	r3, [r7, #10]
 801c3e2:	4299      	cmp	r1, r3
 801c3e4:	f280 8132 	bge.w	801c64c <dhcp_recv+0x358>
      len = options[offset + 1];
 801c3e8:	9801      	ldr	r0, [sp, #4]
 801c3ea:	4420      	add	r0, r4
 801c3ec:	7845      	ldrb	r5, [r0, #1]
    switch (op) {
 801c3ee:	2a3b      	cmp	r2, #59	; 0x3b
 801c3f0:	f200 8123 	bhi.w	801c63a <dhcp_recv+0x346>
 801c3f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c3f8:	003c0088 	.word	0x003c0088
 801c3fc:	01050121 	.word	0x01050121
 801c400:	01210121 	.word	0x01210121
 801c404:	012100aa 	.word	0x012100aa
 801c408:	01210121 	.word	0x01210121
 801c40c:	01210121 	.word	0x01210121
 801c410:	01210121 	.word	0x01210121
 801c414:	01210121 	.word	0x01210121
 801c418:	01210121 	.word	0x01210121
 801c41c:	01210121 	.word	0x01210121
 801c420:	01210121 	.word	0x01210121
 801c424:	01210121 	.word	0x01210121
 801c428:	01210121 	.word	0x01210121
 801c42c:	01210121 	.word	0x01210121
 801c430:	01210121 	.word	0x01210121
 801c434:	01210121 	.word	0x01210121
 801c438:	01210121 	.word	0x01210121
 801c43c:	01210121 	.word	0x01210121
 801c440:	01210121 	.word	0x01210121
 801c444:	01210121 	.word	0x01210121
 801c448:	01210121 	.word	0x01210121
 801c44c:	01210121 	.word	0x01210121
 801c450:	01210121 	.word	0x01210121
 801c454:	01210121 	.word	0x01210121
 801c458:	01210121 	.word	0x01210121
 801c45c:	01140121 	.word	0x01140121
 801c460:	00d000f4 	.word	0x00d000f4
 801c464:	012100c3 	.word	0x012100c3
 801c468:	01210121 	.word	0x01210121
 801c46c:	009c00e8 	.word	0x009c00e8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c470:	2d04      	cmp	r5, #4
 801c472:	f040 81ba 	bne.w	801c7ea <dhcp_recv+0x4f6>
      if (offset + len + 2 > 0xFFFF) {
 801c476:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c47a:	429c      	cmp	r4, r3
 801c47c:	d89b      	bhi.n	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c47e:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801c480:	f04f 0a06 	mov.w	sl, #6
      offset = (u16_t)(offset + len + 2);
 801c484:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 801c486:	2300      	movs	r3, #0
 801c488:	4a4a      	ldr	r2, [pc, #296]	; (801c5b4 <dhcp_recv+0x2c0>)
 801c48a:	9405      	str	r4, [sp, #20]
 801c48c:	eb02 0b0a 	add.w	fp, r2, sl
 801c490:	9309      	str	r3, [sp, #36]	; 0x24
 801c492:	e02e      	b.n	801c4f2 <dhcp_recv+0x1fe>
          copy_len = LWIP_MIN(decode_len, 4);
 801c494:	2d04      	cmp	r5, #4
 801c496:	46a9      	mov	r9, r5
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801c498:	f89b 4000 	ldrb.w	r4, [fp]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c49c:	4633      	mov	r3, r6
          copy_len = LWIP_MIN(decode_len, 4);
 801c49e:	bf28      	it	cs
 801c4a0:	f04f 0904 	movcs.w	r9, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c4a4:	a909      	add	r1, sp, #36	; 0x24
 801c4a6:	4638      	mov	r0, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801c4a8:	fa5f f989 	uxtb.w	r9, r9
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c4ac:	464a      	mov	r2, r9
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801c4ae:	2c00      	cmp	r4, #0
 801c4b0:	f040 81bf 	bne.w	801c832 <dhcp_recv+0x53e>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c4b4:	f7fa f862 	bl	801657c <pbuf_copy_partial>
 801c4b8:	4581      	cmp	r9, r0
            dhcp_got_option(dhcp, decode_idx);
 801c4ba:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c4be:	f47f af7a 	bne.w	801c3b6 <dhcp_recv+0xc2>
          if (decode_len > 4) {
 801c4c2:	2d04      	cmp	r5, #4
 801c4c4:	f240 81b8 	bls.w	801c838 <dhcp_recv+0x544>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801c4c8:	07aa      	lsls	r2, r5, #30
 801c4ca:	f040 81c4 	bne.w	801c856 <dhcp_recv+0x562>
            dhcp_got_option(dhcp, decode_idx);
 801c4ce:	f80b 3b01 	strb.w	r3, [fp], #1
            decode_len = (u8_t)(decode_len - 4);
 801c4d2:	3d04      	subs	r5, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c4d6:	f7f7 ff55 	bl	8014384 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801c4da:	1d33      	adds	r3, r6, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c4dc:	4a36      	ldr	r2, [pc, #216]	; (801c5b8 <dhcp_recv+0x2c4>)
            decode_len = (u8_t)(decode_len - 4);
 801c4de:	b2ed      	uxtb	r5, r5
            next_val_offset = (u16_t)(val_offset + 4);
 801c4e0:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c4e2:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
            decode_idx++;
 801c4e6:	f10a 0a01 	add.w	sl, sl, #1
            if (next_val_offset < val_offset) {
 801c4ea:	429e      	cmp	r6, r3
 801c4ec:	461e      	mov	r6, r3
 801c4ee:	f63f af62 	bhi.w	801c3b6 <dhcp_recv+0xc2>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801c4f2:	f1ba 0f09 	cmp.w	sl, #9
 801c4f6:	d9cd      	bls.n	801c494 <dhcp_recv+0x1a0>
 801c4f8:	4b30      	ldr	r3, [pc, #192]	; (801c5bc <dhcp_recv+0x2c8>)
 801c4fa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801c4fe:	4930      	ldr	r1, [pc, #192]	; (801c5c0 <dhcp_recv+0x2cc>)
 801c500:	4830      	ldr	r0, [pc, #192]	; (801c5c4 <dhcp_recv+0x2d0>)
 801c502:	f004 f849 	bl	8020598 <iprintf>
 801c506:	e7c5      	b.n	801c494 <dhcp_recv+0x1a0>
      offset++;
 801c508:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 801c50a:	429c      	cmp	r4, r3
 801c50c:	f4ff af5b 	bcc.w	801c3c6 <dhcp_recv+0xd2>
      offset = (u16_t)(offset - q->len);
 801c510:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 801c512:	eba8 0803 	sub.w	r8, r8, r3
      offset = (u16_t)(offset - q->len);
 801c516:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 801c518:	fa1f f888 	uxth.w	r8, r8
      if (offset < offset_max) {
 801c51c:	4544      	cmp	r4, r8
 801c51e:	f4bf af4a 	bcs.w	801c3b6 <dhcp_recv+0xc2>
        q = q->next;
 801c522:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801c524:	2f00      	cmp	r7, #0
 801c526:	f000 81a7 	beq.w	801c878 <dhcp_recv+0x584>
        options = (u8_t *)q->payload;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	9301      	str	r3, [sp, #4]
 801c52e:	e74a      	b.n	801c3c6 <dhcp_recv+0xd2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c530:	2d04      	cmp	r5, #4
 801c532:	f040 810f 	bne.w	801c754 <dhcp_recv+0x460>
      if (offset + len + 2 > 0xFFFF) {
 801c536:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c53a:	429c      	cmp	r4, r3
 801c53c:	f63f af3b 	bhi.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c540:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801c542:	f04f 0a05 	mov.w	sl, #5
      offset = (u16_t)(offset + len + 2);
 801c546:	b2a4      	uxth	r4, r4
 801c548:	e79d      	b.n	801c486 <dhcp_recv+0x192>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c54a:	2500      	movs	r5, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801c54c:	07a9      	lsls	r1, r5, #30
 801c54e:	f040 81b5 	bne.w	801c8bc <dhcp_recv+0x5c8>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801c552:	2d08      	cmp	r5, #8
 801c554:	462a      	mov	r2, r5
 801c556:	bf28      	it	cs
 801c558:	2208      	movcs	r2, #8
 801c55a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c55c:	42aa      	cmp	r2, r5
 801c55e:	f200 81a3 	bhi.w	801c8a8 <dhcp_recv+0x5b4>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801c562:	f04f 0a08 	mov.w	sl, #8
      if (offset + len + 2 > 0xFFFF) {
 801c566:	442c      	add	r4, r5
 801c568:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801c56c:	428c      	cmp	r4, r1
 801c56e:	f73f af22 	bgt.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c572:	1974      	adds	r4, r6, r5
 801c574:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 801c576:	2a00      	cmp	r2, #0
 801c578:	d0c7      	beq.n	801c50a <dhcp_recv+0x216>
 801c57a:	4615      	mov	r5, r2
 801c57c:	e783      	b.n	801c486 <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c57e:	2d04      	cmp	r5, #4
 801c580:	f040 80fc 	bne.w	801c77c <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801c584:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c588:	429c      	cmp	r4, r3
 801c58a:	f63f af14 	bhi.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c58e:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801c590:	f04f 0a02 	mov.w	sl, #2
      offset = (u16_t)(offset + len + 2);
 801c594:	b2a4      	uxth	r4, r4
 801c596:	e776      	b.n	801c486 <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c598:	2d01      	cmp	r5, #1
 801c59a:	f040 80f9 	bne.w	801c790 <dhcp_recv+0x49c>
      if (offset + len + 2 > 0xFFFF) {
 801c59e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c5a2:	4299      	cmp	r1, r3
 801c5a4:	f43f af07 	beq.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c5a8:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801c5aa:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801c5ac:	b2a4      	uxth	r4, r4
 801c5ae:	e76a      	b.n	801c486 <dhcp_recv+0x192>
 801c5b0:	20026a74 	.word	0x20026a74
 801c5b4:	20036318 	.word	0x20036318
 801c5b8:	20036324 	.word	0x20036324
 801c5bc:	0803ef44 	.word	0x0803ef44
 801c5c0:	0803f044 	.word	0x0803f044
 801c5c4:	08026544 	.word	0x08026544
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c5c8:	2d04      	cmp	r5, #4
 801c5ca:	f040 80cd 	bne.w	801c768 <dhcp_recv+0x474>
      if (offset + len + 2 > 0xFFFF) {
 801c5ce:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c5d2:	429c      	cmp	r4, r3
 801c5d4:	f63f aeef 	bhi.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c5d8:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801c5da:	46aa      	mov	sl, r5
      offset = (u16_t)(offset + len + 2);
 801c5dc:	b2a4      	uxth	r4, r4
 801c5de:	e752      	b.n	801c486 <dhcp_recv+0x192>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c5e0:	2d01      	cmp	r5, #1
 801c5e2:	f040 80df 	bne.w	801c7a4 <dhcp_recv+0x4b0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801c5e6:	9b03      	ldr	r3, [sp, #12]
 801c5e8:	2bf0      	cmp	r3, #240	; 0xf0
 801c5ea:	f040 8153 	bne.w	801c894 <dhcp_recv+0x5a0>
      if (offset + len + 2 > 0xFFFF) {
 801c5ee:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c5f2:	4299      	cmp	r1, r3
 801c5f4:	f43f aedf 	beq.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c5f8:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801c5fa:	f04f 0a00 	mov.w	sl, #0
      offset = (u16_t)(offset + len + 2);
 801c5fe:	b2a4      	uxth	r4, r4
 801c600:	e741      	b.n	801c486 <dhcp_recv+0x192>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c602:	2d03      	cmp	r5, #3
 801c604:	f240 80e2 	bls.w	801c7cc <dhcp_recv+0x4d8>
      if (offset + len + 2 > 0xFFFF) {
 801c608:	442c      	add	r4, r5
 801c60a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801c60e:	429c      	cmp	r4, r3
 801c610:	f73f aed1 	bgt.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c614:	1974      	adds	r4, r6, r5
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801c616:	f04f 0a07 	mov.w	sl, #7
        decode_len = 4; /* only copy the first given router */
 801c61a:	2504      	movs	r5, #4
      offset = (u16_t)(offset + len + 2);
 801c61c:	b2a4      	uxth	r4, r4
 801c61e:	e732      	b.n	801c486 <dhcp_recv+0x192>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c620:	2d04      	cmp	r5, #4
 801c622:	f040 80c9 	bne.w	801c7b8 <dhcp_recv+0x4c4>
      if (offset + len + 2 > 0xFFFF) {
 801c626:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801c62a:	429c      	cmp	r4, r3
 801c62c:	f63f aec3 	bhi.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c630:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801c632:	f04f 0a03 	mov.w	sl, #3
      offset = (u16_t)(offset + len + 2);
 801c636:	b2a4      	uxth	r4, r4
 801c638:	e725      	b.n	801c486 <dhcp_recv+0x192>
      if (offset + len + 2 > 0xFFFF) {
 801c63a:	442c      	add	r4, r5
 801c63c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801c640:	4294      	cmp	r4, r2
 801c642:	f73f aeb8 	bgt.w	801c3b6 <dhcp_recv+0xc2>
      offset = (u16_t)(offset + len + 2);
 801c646:	1974      	adds	r4, r6, r5
 801c648:	b2a4      	uxth	r4, r4
 801c64a:	e75e      	b.n	801c50a <dhcp_recv+0x216>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c64c:	6838      	ldr	r0, [r7, #0]
 801c64e:	b110      	cbz	r0, 801c656 <dhcp_recv+0x362>
 801c650:	6840      	ldr	r0, [r0, #4]
 801c652:	7805      	ldrb	r5, [r0, #0]
 801c654:	e6cb      	b.n	801c3ee <dhcp_recv+0xfa>
    switch (op) {
 801c656:	2a3b      	cmp	r2, #59	; 0x3b
 801c658:	f200 80c2 	bhi.w	801c7e0 <dhcp_recv+0x4ec>
 801c65c:	a001      	add	r0, pc, #4	; (adr r0, 801c664 <dhcp_recv+0x370>)
 801c65e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 801c662:	bf00      	nop
 801c664:	0801c509 	.word	0x0801c509
 801c668:	0801c7eb 	.word	0x0801c7eb
 801c66c:	0801c7e1 	.word	0x0801c7e1
 801c670:	0801c7cd 	.word	0x0801c7cd
 801c674:	0801c7e1 	.word	0x0801c7e1
 801c678:	0801c7e1 	.word	0x0801c7e1
 801c67c:	0801c54b 	.word	0x0801c54b
 801c680:	0801c7e1 	.word	0x0801c7e1
 801c684:	0801c7e1 	.word	0x0801c7e1
 801c688:	0801c7e1 	.word	0x0801c7e1
 801c68c:	0801c7e1 	.word	0x0801c7e1
 801c690:	0801c7e1 	.word	0x0801c7e1
 801c694:	0801c7e1 	.word	0x0801c7e1
 801c698:	0801c7e1 	.word	0x0801c7e1
 801c69c:	0801c7e1 	.word	0x0801c7e1
 801c6a0:	0801c7e1 	.word	0x0801c7e1
 801c6a4:	0801c7e1 	.word	0x0801c7e1
 801c6a8:	0801c7e1 	.word	0x0801c7e1
 801c6ac:	0801c7e1 	.word	0x0801c7e1
 801c6b0:	0801c7e1 	.word	0x0801c7e1
 801c6b4:	0801c7e1 	.word	0x0801c7e1
 801c6b8:	0801c7e1 	.word	0x0801c7e1
 801c6bc:	0801c7e1 	.word	0x0801c7e1
 801c6c0:	0801c7e1 	.word	0x0801c7e1
 801c6c4:	0801c7e1 	.word	0x0801c7e1
 801c6c8:	0801c7e1 	.word	0x0801c7e1
 801c6cc:	0801c7e1 	.word	0x0801c7e1
 801c6d0:	0801c7e1 	.word	0x0801c7e1
 801c6d4:	0801c7e1 	.word	0x0801c7e1
 801c6d8:	0801c7e1 	.word	0x0801c7e1
 801c6dc:	0801c7e1 	.word	0x0801c7e1
 801c6e0:	0801c7e1 	.word	0x0801c7e1
 801c6e4:	0801c7e1 	.word	0x0801c7e1
 801c6e8:	0801c7e1 	.word	0x0801c7e1
 801c6ec:	0801c7e1 	.word	0x0801c7e1
 801c6f0:	0801c7e1 	.word	0x0801c7e1
 801c6f4:	0801c7e1 	.word	0x0801c7e1
 801c6f8:	0801c7e1 	.word	0x0801c7e1
 801c6fc:	0801c7e1 	.word	0x0801c7e1
 801c700:	0801c7e1 	.word	0x0801c7e1
 801c704:	0801c7e1 	.word	0x0801c7e1
 801c708:	0801c7e1 	.word	0x0801c7e1
 801c70c:	0801c7e1 	.word	0x0801c7e1
 801c710:	0801c7e1 	.word	0x0801c7e1
 801c714:	0801c7e1 	.word	0x0801c7e1
 801c718:	0801c7e1 	.word	0x0801c7e1
 801c71c:	0801c7e1 	.word	0x0801c7e1
 801c720:	0801c7e1 	.word	0x0801c7e1
 801c724:	0801c7e1 	.word	0x0801c7e1
 801c728:	0801c7e1 	.word	0x0801c7e1
 801c72c:	0801c7e1 	.word	0x0801c7e1
 801c730:	0801c7b9 	.word	0x0801c7b9
 801c734:	0801c7a5 	.word	0x0801c7a5
 801c738:	0801c791 	.word	0x0801c791
 801c73c:	0801c77d 	.word	0x0801c77d
 801c740:	0801c7e1 	.word	0x0801c7e1
 801c744:	0801c7e1 	.word	0x0801c7e1
 801c748:	0801c7e1 	.word	0x0801c7e1
 801c74c:	0801c769 	.word	0x0801c769
 801c750:	0801c755 	.word	0x0801c755
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c754:	4b96      	ldr	r3, [pc, #600]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c756:	f240 6261 	movw	r2, #1633	; 0x661
 801c75a:	4996      	ldr	r1, [pc, #600]	; (801c9b4 <dhcp_recv+0x6c0>)
 801c75c:	4896      	ldr	r0, [pc, #600]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c75e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c762:	f003 ff19 	bl	8020598 <iprintf>
 801c766:	e5db      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c768:	4b91      	ldr	r3, [pc, #580]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c76a:	f240 625d 	movw	r2, #1629	; 0x65d
 801c76e:	4991      	ldr	r1, [pc, #580]	; (801c9b4 <dhcp_recv+0x6c0>)
 801c770:	4891      	ldr	r0, [pc, #580]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c772:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c776:	f003 ff0f 	bl	8020598 <iprintf>
 801c77a:	e5d1      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c77c:	4b8c      	ldr	r3, [pc, #560]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c77e:	f240 6259 	movw	r2, #1625	; 0x659
 801c782:	498c      	ldr	r1, [pc, #560]	; (801c9b4 <dhcp_recv+0x6c0>)
 801c784:	488c      	ldr	r0, [pc, #560]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c786:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c78a:	f003 ff05 	bl	8020598 <iprintf>
 801c78e:	e5c7      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c790:	4b87      	ldr	r3, [pc, #540]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c792:	f240 6255 	movw	r2, #1621	; 0x655
 801c796:	4989      	ldr	r1, [pc, #548]	; (801c9bc <dhcp_recv+0x6c8>)
 801c798:	4887      	ldr	r0, [pc, #540]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c79a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c79e:	f003 fefb 	bl	8020598 <iprintf>
 801c7a2:	e5bd      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c7a4:	4b82      	ldr	r3, [pc, #520]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c7a6:	f240 624f 	movw	r2, #1615	; 0x64f
 801c7aa:	4984      	ldr	r1, [pc, #528]	; (801c9bc <dhcp_recv+0x6c8>)
 801c7ac:	4882      	ldr	r0, [pc, #520]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c7ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c7b2:	f003 fef1 	bl	8020598 <iprintf>
 801c7b6:	e5b3      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c7b8:	4b7d      	ldr	r3, [pc, #500]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c7ba:	f240 6241 	movw	r2, #1601	; 0x641
 801c7be:	497d      	ldr	r1, [pc, #500]	; (801c9b4 <dhcp_recv+0x6c0>)
 801c7c0:	487d      	ldr	r0, [pc, #500]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c7c2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c7c6:	f003 fee7 	bl	8020598 <iprintf>
 801c7ca:	e5a9      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c7cc:	4b78      	ldr	r3, [pc, #480]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c7ce:	f240 6233 	movw	r2, #1587	; 0x633
 801c7d2:	497b      	ldr	r1, [pc, #492]	; (801c9c0 <dhcp_recv+0x6cc>)
 801c7d4:	4878      	ldr	r0, [pc, #480]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c7d6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c7da:	f003 fedd 	bl	8020598 <iprintf>
 801c7de:	e59f      	b.n	801c320 <dhcp_recv+0x2c>
        decode_len = 0;
 801c7e0:	2200      	movs	r2, #0
    int decode_idx = -1;
 801c7e2:	f04f 3aff 	mov.w	sl, #4294967295
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c7e6:	4615      	mov	r5, r2
 801c7e8:	e6bd      	b.n	801c566 <dhcp_recv+0x272>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c7ea:	4b71      	ldr	r3, [pc, #452]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c7ec:	f240 622e 	movw	r2, #1582	; 0x62e
 801c7f0:	4970      	ldr	r1, [pc, #448]	; (801c9b4 <dhcp_recv+0x6c0>)
 801c7f2:	4871      	ldr	r0, [pc, #452]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c7f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c7f8:	f003 fece 	bl	8020598 <iprintf>
 801c7fc:	e590      	b.n	801c320 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801c7fe:	4b71      	ldr	r3, [pc, #452]	; (801c9c4 <dhcp_recv+0x6d0>)
 801c800:	781b      	ldrb	r3, [r3, #0]
 801c802:	b153      	cbz	r3, 801c81a <dhcp_recv+0x526>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c804:	4b70      	ldr	r3, [pc, #448]	; (801c9c8 <dhcp_recv+0x6d4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c806:	2200      	movs	r2, #0
 801c808:	496e      	ldr	r1, [pc, #440]	; (801c9c4 <dhcp_recv+0x6d0>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c80a:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c80c:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801c80e:	2b01      	cmp	r3, #1
 801c810:	d02d      	beq.n	801c86e <dhcp_recv+0x57a>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801c812:	2b02      	cmp	r3, #2
 801c814:	d004      	beq.n	801c820 <dhcp_recv+0x52c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801c816:	2b03      	cmp	r3, #3
 801c818:	d027      	beq.n	801c86a <dhcp_recv+0x576>
  } else if (parse_sname_as_options) {
 801c81a:	9b04      	ldr	r3, [sp, #16]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d057      	beq.n	801c8d0 <dhcp_recv+0x5dc>
    parse_sname_as_options = 0;
 801c820:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801c822:	f04f 086c 	mov.w	r8, #108	; 0x6c
    parse_sname_as_options = 0;
 801c826:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801c828:	232c      	movs	r3, #44	; 0x2c
 801c82a:	9303      	str	r3, [sp, #12]
 801c82c:	9b02      	ldr	r3, [sp, #8]
 801c82e:	895b      	ldrh	r3, [r3, #10]
 801c830:	e5b0      	b.n	801c394 <dhcp_recv+0xa0>
 801c832:	9c05      	ldr	r4, [sp, #20]
 801c834:	897b      	ldrh	r3, [r7, #10]
 801c836:	e668      	b.n	801c50a <dhcp_recv+0x216>
 801c838:	9c05      	ldr	r4, [sp, #20]
          } else if (decode_len == 4) {
 801c83a:	d027      	beq.n	801c88c <dhcp_recv+0x598>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801c83c:	2d01      	cmp	r5, #1
 801c83e:	f040 80ad 	bne.w	801c99c <dhcp_recv+0x6a8>
            value = ((u8_t *)&value)[0];
 801c842:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801c846:	4a60      	ldr	r2, [pc, #384]	; (801c9c8 <dhcp_recv+0x6d4>)
          dhcp_got_option(dhcp, decode_idx);
 801c848:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801c84a:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801c84e:	4a5d      	ldr	r2, [pc, #372]	; (801c9c4 <dhcp_recv+0x6d0>)
 801c850:	f802 300a 	strb.w	r3, [r2, sl]
 801c854:	e7ee      	b.n	801c834 <dhcp_recv+0x540>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801c856:	4b56      	ldr	r3, [pc, #344]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c858:	f240 6281 	movw	r2, #1665	; 0x681
 801c85c:	495b      	ldr	r1, [pc, #364]	; (801c9cc <dhcp_recv+0x6d8>)
 801c85e:	4856      	ldr	r0, [pc, #344]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c860:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c864:	f003 fe98 	bl	8020598 <iprintf>
 801c868:	e55a      	b.n	801c320 <dhcp_recv+0x2c>
      parse_sname_as_options = 1;
 801c86a:	2301      	movs	r3, #1
 801c86c:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801c86e:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801c870:	f04f 08ec 	mov.w	r8, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801c874:	9303      	str	r3, [sp, #12]
 801c876:	e7d9      	b.n	801c82c <dhcp_recv+0x538>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801c878:	4b4d      	ldr	r3, [pc, #308]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c87a:	f240 629d 	movw	r2, #1693	; 0x69d
 801c87e:	4954      	ldr	r1, [pc, #336]	; (801c9d0 <dhcp_recv+0x6dc>)
 801c880:	484d      	ldr	r0, [pc, #308]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c882:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c886:	f003 fe87 	bl	8020598 <iprintf>
 801c88a:	e549      	b.n	801c320 <dhcp_recv+0x2c>
            value = lwip_ntohl(value);
 801c88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c88e:	f7f7 fd79 	bl	8014384 <lwip_htonl>
 801c892:	e7d8      	b.n	801c846 <dhcp_recv+0x552>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801c894:	4b46      	ldr	r3, [pc, #280]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c896:	f240 6251 	movw	r2, #1617	; 0x651
 801c89a:	494e      	ldr	r1, [pc, #312]	; (801c9d4 <dhcp_recv+0x6e0>)
 801c89c:	4846      	ldr	r0, [pc, #280]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c89e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c8a2:	f003 fe79 	bl	8020598 <iprintf>
 801c8a6:	e53b      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c8a8:	4b41      	ldr	r3, [pc, #260]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c8aa:	f240 623c 	movw	r2, #1596	; 0x63c
 801c8ae:	4944      	ldr	r1, [pc, #272]	; (801c9c0 <dhcp_recv+0x6cc>)
 801c8b0:	4841      	ldr	r0, [pc, #260]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c8b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c8b6:	f003 fe6f 	bl	8020598 <iprintf>
 801c8ba:	e531      	b.n	801c320 <dhcp_recv+0x2c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801c8bc:	4b3c      	ldr	r3, [pc, #240]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c8be:	f240 6239 	movw	r2, #1593	; 0x639
 801c8c2:	4945      	ldr	r1, [pc, #276]	; (801c9d8 <dhcp_recv+0x6e4>)
 801c8c4:	483c      	ldr	r0, [pc, #240]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c8c6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c8ca:	f003 fe65 	bl	8020598 <iprintf>
 801c8ce:	e527      	b.n	801c320 <dhcp_recv+0x2c>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801c8d0:	4b3c      	ldr	r3, [pc, #240]	; (801c9c4 <dhcp_recv+0x6d0>)
 801c8d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c8d6:	785b      	ldrb	r3, [r3, #1]
 801c8d8:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	f43f ad1f 	beq.w	801c320 <dhcp_recv+0x2c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801c8e2:	4a39      	ldr	r2, [pc, #228]	; (801c9c8 <dhcp_recv+0x6d4>)
  msg_in = (struct dhcp_msg *)p->payload;
 801c8e4:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801c8e8:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801c8ea:	2b05      	cmp	r3, #5
 801c8ec:	d01c      	beq.n	801c928 <dhcp_recv+0x634>
  else if ((msg_type == DHCP_NAK) &&
 801c8ee:	2b06      	cmp	r3, #6
 801c8f0:	d02b      	beq.n	801c94a <dhcp_recv+0x656>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801c8f2:	2b02      	cmp	r3, #2
 801c8f4:	f47f ad14 	bne.w	801c320 <dhcp_recv+0x2c>
 801c8f8:	f899 3005 	ldrb.w	r3, [r9, #5]
 801c8fc:	2b06      	cmp	r3, #6
 801c8fe:	f47f ad0f 	bne.w	801c320 <dhcp_recv+0x2c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c902:	4b30      	ldr	r3, [pc, #192]	; (801c9c4 <dhcp_recv+0x6d0>)
 801c904:	789b      	ldrb	r3, [r3, #2]
 801c906:	2b00      	cmp	r3, #0
 801c908:	f43f ad0a 	beq.w	801c320 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c90c:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801c910:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c912:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801c914:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c916:	f7f7 fd35 	bl	8014384 <lwip_htonl>
 801c91a:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c91c:	6923      	ldr	r3, [r4, #16]
    dhcp_select(netif);
 801c91e:	4650      	mov	r0, sl
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801c920:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801c922:	f7ff fa1f 	bl	801bd64 <dhcp_select>
 801c926:	e4fb      	b.n	801c320 <dhcp_recv+0x2c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c928:	f899 3005 	ldrb.w	r3, [r9, #5]
 801c92c:	2b01      	cmp	r3, #1
 801c92e:	d028      	beq.n	801c982 <dhcp_recv+0x68e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801c930:	3b03      	subs	r3, #3
 801c932:	2b02      	cmp	r3, #2
 801c934:	f63f acf4 	bhi.w	801c320 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801c938:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801c93c:	4621      	mov	r1, r4
 801c93e:	f7ff fc87 	bl	801c250 <dhcp_handle_ack.isra.2>
      dhcp_bind(netif);
 801c942:	4650      	mov	r0, sl
 801c944:	f7ff fb84 	bl	801c050 <dhcp_bind>
 801c948:	e4ea      	b.n	801c320 <dhcp_recv+0x2c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c94a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801c94e:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801c950:	2a02      	cmp	r2, #2
 801c952:	d902      	bls.n	801c95a <dhcp_recv+0x666>
 801c954:	2b01      	cmp	r3, #1
 801c956:	f47f ace3 	bne.w	801c320 <dhcp_recv+0x2c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c95a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801c95e:	795a      	ldrb	r2, [r3, #5]
 801c960:	2a0c      	cmp	r2, #12
 801c962:	d004      	beq.n	801c96e <dhcp_recv+0x67a>
    dhcp->tries = 0;
 801c964:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801c966:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801c968:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801c96a:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801c96c:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c96e:	4b1b      	ldr	r3, [pc, #108]	; (801c9dc <dhcp_recv+0x6e8>)
 801c970:	4650      	mov	r0, sl
 801c972:	461a      	mov	r2, r3
 801c974:	4619      	mov	r1, r3
 801c976:	f7f9 f91f 	bl	8015bb8 <netif_set_addr>
  dhcp_discover(netif);
 801c97a:	4650      	mov	r0, sl
 801c97c:	f7ff fac2 	bl	801bf04 <dhcp_discover>
 801c980:	e4ce      	b.n	801c320 <dhcp_recv+0x2c>
      dhcp_handle_ack(netif, msg_in);
 801c982:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801c986:	4621      	mov	r1, r4
 801c988:	f7ff fc62 	bl	801c250 <dhcp_handle_ack.isra.2>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801c98c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801c990:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801c992:	071b      	lsls	r3, r3, #28
 801c994:	d5d6      	bpl.n	801c944 <dhcp_recv+0x650>
        dhcp_check(netif);
 801c996:	f7ff fb43 	bl	801c020 <dhcp_check>
 801c99a:	e4c1      	b.n	801c320 <dhcp_recv+0x2c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801c99c:	4b04      	ldr	r3, [pc, #16]	; (801c9b0 <dhcp_recv+0x6bc>)
 801c99e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801c9a2:	490f      	ldr	r1, [pc, #60]	; (801c9e0 <dhcp_recv+0x6ec>)
 801c9a4:	4804      	ldr	r0, [pc, #16]	; (801c9b8 <dhcp_recv+0x6c4>)
 801c9a6:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c9aa:	f003 fdf5 	bl	8020598 <iprintf>
 801c9ae:	e4b7      	b.n	801c320 <dhcp_recv+0x2c>
 801c9b0:	0803ef44 	.word	0x0803ef44
 801c9b4:	0803eff0 	.word	0x0803eff0
 801c9b8:	08026544 	.word	0x08026544
 801c9bc:	0803f020 	.word	0x0803f020
 801c9c0:	0803effc 	.word	0x0803effc
 801c9c4:	20036318 	.word	0x20036318
 801c9c8:	20036324 	.word	0x20036324
 801c9cc:	0803f058 	.word	0x0803f058
 801c9d0:	0803f084 	.word	0x0803f084
 801c9d4:	0803f02c 	.word	0x0803f02c
 801c9d8:	0803f010 	.word	0x0803f010
 801c9dc:	0803f460 	.word	0x0803f460
 801c9e0:	0803f070 	.word	0x0803f070

0801c9e4 <dhcp_network_changed>:
{
 801c9e4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c9e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (!dhcp) {
 801c9e8:	b154      	cbz	r4, 801ca00 <dhcp_network_changed+0x1c>
  switch (dhcp->state) {
 801c9ea:	7963      	ldrb	r3, [r4, #5]
 801c9ec:	2b0a      	cmp	r3, #10
 801c9ee:	d80e      	bhi.n	801ca0e <dhcp_network_changed+0x2a>
 801c9f0:	e8df f003 	tbb	[pc, r3]
 801c9f4:	070d0d06 	.word	0x070d0d06
 801c9f8:	0d0d0707 	.word	0x0d0d0707
 801c9fc:	0d0d      	.short	0x0d0d
 801c9fe:	07          	.byte	0x07
 801c9ff:	00          	.byte	0x00
}
 801ca00:	bd38      	pop	{r3, r4, r5, pc}
      dhcp->tries = 0;
 801ca02:	2300      	movs	r3, #0
 801ca04:	71a3      	strb	r3, [r4, #6]
}
 801ca06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801ca0a:	f7ff b909 	b.w	801bc20 <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ca0e:	2b0c      	cmp	r3, #12
 801ca10:	4605      	mov	r5, r0
 801ca12:	d806      	bhi.n	801ca22 <dhcp_network_changed+0x3e>
      dhcp->tries = 0;
 801ca14:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801ca16:	4628      	mov	r0, r5
      dhcp->tries = 0;
 801ca18:	71a3      	strb	r3, [r4, #6]
}
 801ca1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801ca1e:	f7ff ba71 	b.w	801bf04 <dhcp_discover>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801ca22:	4b04      	ldr	r3, [pc, #16]	; (801ca34 <dhcp_network_changed+0x50>)
 801ca24:	f240 326d 	movw	r2, #877	; 0x36d
 801ca28:	4903      	ldr	r1, [pc, #12]	; (801ca38 <dhcp_network_changed+0x54>)
 801ca2a:	4804      	ldr	r0, [pc, #16]	; (801ca3c <dhcp_network_changed+0x58>)
 801ca2c:	f003 fdb4 	bl	8020598 <iprintf>
 801ca30:	e7f0      	b.n	801ca14 <dhcp_network_changed+0x30>
 801ca32:	bf00      	nop
 801ca34:	0803ef44 	.word	0x0803ef44
 801ca38:	0803eeb0 	.word	0x0803eeb0
 801ca3c:	08026544 	.word	0x08026544

0801ca40 <dhcp_arp_reply>:
{
 801ca40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca44:	b084      	sub	sp, #16
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ca46:	2800      	cmp	r0, #0
 801ca48:	d048      	beq.n	801cadc <dhcp_arp_reply+0x9c>
  dhcp = netif_dhcp_data(netif);
 801ca4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ca4c:	4605      	mov	r5, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801ca4e:	b114      	cbz	r4, 801ca56 <dhcp_arp_reply+0x16>
 801ca50:	7963      	ldrb	r3, [r4, #5]
 801ca52:	2b08      	cmp	r3, #8
 801ca54:	d002      	beq.n	801ca5c <dhcp_arp_reply+0x1c>
}
 801ca56:	b004      	add	sp, #16
 801ca58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ca5c:	680a      	ldr	r2, [r1, #0]
 801ca5e:	69e3      	ldr	r3, [r4, #28]
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d1f8      	bne.n	801ca56 <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 801ca64:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801ca66:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ca68:	f10d 030e 	add.w	r3, sp, #14
 801ca6c:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801ca6e:	7161      	strb	r1, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ca70:	4621      	mov	r1, r4
    dhcp->tries = 0;
 801ca72:	71a6      	strb	r6, [r4, #6]
    dhcp->request_timeout = 0;
 801ca74:	8126      	strh	r6, [r4, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801ca76:	f7ff f809 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801ca7a:	4606      	mov	r6, r0
 801ca7c:	b330      	cbz	r0, 801cacc <dhcp_arp_reply+0x8c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ca7e:	6847      	ldr	r7, [r0, #4]
 801ca80:	2304      	movs	r3, #4
 801ca82:	2232      	movs	r2, #50	; 0x32
 801ca84:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801ca88:	37f0      	adds	r7, #240	; 0xf0
 801ca8a:	4639      	mov	r1, r7
 801ca8c:	f7fe ffbc 	bl	801ba08 <dhcp_option>
 801ca90:	4680      	mov	r8, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ca92:	69e0      	ldr	r0, [r4, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ca94:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ca98:	f7f7 fc74 	bl	8014384 <lwip_htonl>
 801ca9c:	4639      	mov	r1, r7
 801ca9e:	4602      	mov	r2, r0
 801caa0:	4640      	mov	r0, r8
 801caa2:	f7fe ffcf 	bl	801ba44 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801caa6:	4639      	mov	r1, r7
 801caa8:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801caaa:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801caae:	f7ff f89b 	bl	801bbe8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801cab2:	490f      	ldr	r1, [pc, #60]	; (801caf0 <dhcp_arp_reply+0xb0>)
 801cab4:	4a0f      	ldr	r2, [pc, #60]	; (801caf4 <dhcp_arp_reply+0xb4>)
 801cab6:	2343      	movs	r3, #67	; 0x43
 801cab8:	6808      	ldr	r0, [r1, #0]
 801caba:	4631      	mov	r1, r6
 801cabc:	e9cd 5200 	strd	r5, r2, [sp]
 801cac0:	4a0d      	ldr	r2, [pc, #52]	; (801caf8 <dhcp_arp_reply+0xb8>)
 801cac2:	f7fe fd73 	bl	801b5ac <udp_sendto_if_src>
    pbuf_free(p_out);
 801cac6:	4630      	mov	r0, r6
 801cac8:	f7f9 fac8 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801cacc:	79a3      	ldrb	r3, [r4, #6]
 801cace:	2bff      	cmp	r3, #255	; 0xff
 801cad0:	d001      	beq.n	801cad6 <dhcp_arp_reply+0x96>
    dhcp->tries++;
 801cad2:	3301      	adds	r3, #1
 801cad4:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cad6:	2314      	movs	r3, #20
 801cad8:	8123      	strh	r3, [r4, #8]
 801cada:	e7bc      	b.n	801ca56 <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cadc:	4b07      	ldr	r3, [pc, #28]	; (801cafc <dhcp_arp_reply+0xbc>)
 801cade:	f240 328b 	movw	r2, #907	; 0x38b
 801cae2:	4907      	ldr	r1, [pc, #28]	; (801cb00 <dhcp_arp_reply+0xc0>)
 801cae4:	4807      	ldr	r0, [pc, #28]	; (801cb04 <dhcp_arp_reply+0xc4>)
 801cae6:	f003 fd57 	bl	8020598 <iprintf>
}
 801caea:	b004      	add	sp, #16
 801caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caf0:	20022434 	.word	0x20022434
 801caf4:	0803f460 	.word	0x0803f460
 801caf8:	0803f464 	.word	0x0803f464
 801cafc:	0803ef44 	.word	0x0803ef44
 801cb00:	08026534 	.word	0x08026534
 801cb04:	08026544 	.word	0x08026544

0801cb08 <dhcp_renew>:
{
 801cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cb0c:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 801cb0e:	b085      	sub	sp, #20
 801cb10:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801cb12:	7973      	ldrb	r3, [r6, #5]
 801cb14:	2b05      	cmp	r3, #5
 801cb16:	d004      	beq.n	801cb22 <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801cb18:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801cb1a:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801cb1c:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801cb1e:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801cb20:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801cb22:	f10d 030e 	add.w	r3, sp, #14
 801cb26:	2203      	movs	r2, #3
 801cb28:	4631      	mov	r1, r6
 801cb2a:	4658      	mov	r0, fp
 801cb2c:	f7fe ffae 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801cb30:	4682      	mov	sl, r0
 801cb32:	2800      	cmp	r0, #0
 801cb34:	d067      	beq.n	801cc06 <dhcp_renew+0xfe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cb36:	6845      	ldr	r5, [r0, #4]
 801cb38:	2302      	movs	r3, #2
 801cb3a:	2239      	movs	r2, #57	; 0x39
 801cb3c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801cb40:	35f0      	adds	r5, #240	; 0xf0
 801cb42:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801cc20 <dhcp_renew+0x118>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cb46:	f04f 0801 	mov.w	r8, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cb4a:	4629      	mov	r1, r5
 801cb4c:	f7fe ff5c 	bl	801ba08 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cb50:	4629      	mov	r1, r5
 801cb52:	f8bb 202c 	ldrh.w	r2, [fp, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cb56:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cb5a:	f7fe ff39 	bl	801b9d0 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cb5e:	4629      	mov	r1, r5
 801cb60:	2304      	movs	r3, #4
 801cb62:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801cb64:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cb68:	f7fe ff4e 	bl	801ba08 <dhcp_option>
 801cb6c:	4604      	mov	r4, r0
 801cb6e:	1d07      	adds	r7, r0, #4
 801cb70:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cb74:	2c43      	cmp	r4, #67	; 0x43
 801cb76:	b2bf      	uxth	r7, r7
 801cb78:	d80b      	bhi.n	801cb92 <dhcp_renew+0x8a>
  options[options_out_len++] = value;
 801cb7a:	1c63      	adds	r3, r4, #1
 801cb7c:	f805 8004 	strb.w	r8, [r5, r4]
 801cb80:	b29c      	uxth	r4, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cb82:	42bc      	cmp	r4, r7
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cb84:	f8ad 400e 	strh.w	r4, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cb88:	d00b      	beq.n	801cba2 <dhcp_renew+0x9a>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cb8a:	2c43      	cmp	r4, #67	; 0x43
 801cb8c:	f819 8b01 	ldrb.w	r8, [r9], #1
 801cb90:	d9f3      	bls.n	801cb7a <dhcp_renew+0x72>
 801cb92:	4b1e      	ldr	r3, [pc, #120]	; (801cc0c <dhcp_renew+0x104>)
 801cb94:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801cb98:	491d      	ldr	r1, [pc, #116]	; (801cc10 <dhcp_renew+0x108>)
 801cb9a:	481e      	ldr	r0, [pc, #120]	; (801cc14 <dhcp_renew+0x10c>)
 801cb9c:	f003 fcfc 	bl	8020598 <iprintf>
 801cba0:	e7eb      	b.n	801cb7a <dhcp_renew+0x72>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cba2:	4629      	mov	r1, r5
 801cba4:	4638      	mov	r0, r7
 801cba6:	4652      	mov	r2, sl
 801cba8:	f7ff f81e 	bl	801bbe8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cbac:	4a1a      	ldr	r2, [pc, #104]	; (801cc18 <dhcp_renew+0x110>)
 801cbae:	f8cd b000 	str.w	fp, [sp]
 801cbb2:	2343      	movs	r3, #67	; 0x43
 801cbb4:	6810      	ldr	r0, [r2, #0]
 801cbb6:	4651      	mov	r1, sl
 801cbb8:	f106 0218 	add.w	r2, r6, #24
 801cbbc:	f7fe fdb6 	bl	801b72c <udp_sendto_if>
 801cbc0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801cbc2:	4650      	mov	r0, sl
 801cbc4:	f7f9 fa4a 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801cbc8:	79b3      	ldrb	r3, [r6, #6]
 801cbca:	2bff      	cmp	r3, #255	; 0xff
 801cbcc:	d015      	beq.n	801cbfa <dhcp_renew+0xf2>
    dhcp->tries++;
 801cbce:	3301      	adds	r3, #1
 801cbd0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801cbd2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801cbd4:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801cbd6:	d810      	bhi.n	801cbfa <dhcp_renew+0xf2>
 801cbd8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801cbdc:	4a0f      	ldr	r2, [pc, #60]	; (801cc1c <dhcp_renew+0x114>)
}
 801cbde:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801cbe0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801cbe4:	011b      	lsls	r3, r3, #4
 801cbe6:	b29b      	uxth	r3, r3
 801cbe8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cbec:	fba2 2303 	umull	r2, r3, r2, r3
 801cbf0:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cbf2:	8133      	strh	r3, [r6, #8]
}
 801cbf4:	b005      	add	sp, #20
 801cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801cbfa:	2328      	movs	r3, #40	; 0x28
}
 801cbfc:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cbfe:	8133      	strh	r3, [r6, #8]
}
 801cc00:	b005      	add	sp, #20
 801cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801cc06:	f04f 34ff 	mov.w	r4, #4294967295
 801cc0a:	e7dd      	b.n	801cbc8 <dhcp_renew+0xc0>
 801cc0c:	0803ef44 	.word	0x0803ef44
 801cc10:	0803efb8 	.word	0x0803efb8
 801cc14:	08026544 	.word	0x08026544
 801cc18:	20022434 	.word	0x20022434
 801cc1c:	10624dd3 	.word	0x10624dd3
 801cc20:	0803ee85 	.word	0x0803ee85

0801cc24 <dhcp_release_and_stop>:
{
 801cc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cc28:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801cc2a:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 801cc2c:	2c00      	cmp	r4, #0
 801cc2e:	d052      	beq.n	801ccd6 <dhcp_release_and_stop+0xb2>
  if (dhcp->state == DHCP_STATE_OFF) {
 801cc30:	7962      	ldrb	r2, [r4, #5]
 801cc32:	2a00      	cmp	r2, #0
 801cc34:	d04f      	beq.n	801ccd6 <dhcp_release_and_stop+0xb2>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801cc36:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801cc38:	2300      	movs	r3, #0
 801cc3a:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801cc3c:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801cc3e:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801cc40:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801cc42:	9003      	str	r0, [sp, #12]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801cc44:	82a3      	strh	r3, [r4, #20]
 801cc46:	8263      	strh	r3, [r4, #18]
 801cc48:	8223      	strh	r3, [r4, #16]
 801cc4a:	81e3      	strh	r3, [r4, #14]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801cc4c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801cc50:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801cc54:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801cc58:	d901      	bls.n	801cc5e <dhcp_release_and_stop+0x3a>
 801cc5a:	2a0a      	cmp	r2, #10
 801cc5c:	d12d      	bne.n	801ccba <dhcp_release_and_stop+0x96>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801cc5e:	f10d 030a 	add.w	r3, sp, #10
 801cc62:	2207      	movs	r2, #7
 801cc64:	4621      	mov	r1, r4
 801cc66:	4628      	mov	r0, r5
 801cc68:	f7fe ff10 	bl	801ba8c <dhcp_create_msg>
    if (p_out != NULL) {
 801cc6c:	4606      	mov	r6, r0
 801cc6e:	b320      	cbz	r0, 801ccba <dhcp_release_and_stop+0x96>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801cc70:	6877      	ldr	r7, [r6, #4]
 801cc72:	2304      	movs	r3, #4
 801cc74:	2236      	movs	r2, #54	; 0x36
 801cc76:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801cc7a:	37f0      	adds	r7, #240	; 0xf0
 801cc7c:	4639      	mov	r1, r7
 801cc7e:	f7fe fec3 	bl	801ba08 <dhcp_option>
 801cc82:	4680      	mov	r8, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801cc84:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801cc86:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801cc8a:	f7f7 fb7b 	bl	8014384 <lwip_htonl>
 801cc8e:	4639      	mov	r1, r7
 801cc90:	4602      	mov	r2, r0
 801cc92:	4640      	mov	r0, r8
 801cc94:	f7fe fed6 	bl	801ba44 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cc98:	4639      	mov	r1, r7
 801cc9a:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801cc9c:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cca0:	f7fe ffa2 	bl	801bbe8 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cca4:	4a11      	ldr	r2, [pc, #68]	; (801ccec <dhcp_release_and_stop+0xc8>)
 801cca6:	9500      	str	r5, [sp, #0]
 801cca8:	2343      	movs	r3, #67	; 0x43
 801ccaa:	6810      	ldr	r0, [r2, #0]
 801ccac:	4631      	mov	r1, r6
 801ccae:	aa03      	add	r2, sp, #12
 801ccb0:	f7fe fd3c 	bl	801b72c <udp_sendto_if>
      pbuf_free(p_out);
 801ccb4:	4630      	mov	r0, r6
 801ccb6:	f7f9 f9d1 	bl	801605c <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801ccba:	4b0d      	ldr	r3, [pc, #52]	; (801ccf0 <dhcp_release_and_stop+0xcc>)
 801ccbc:	4628      	mov	r0, r5
 801ccbe:	461a      	mov	r2, r3
 801ccc0:	4619      	mov	r1, r3
 801ccc2:	f7f8 ff79 	bl	8015bb8 <netif_set_addr>
  if (new_state != dhcp->state) {
 801ccc6:	7963      	ldrb	r3, [r4, #5]
 801ccc8:	b11b      	cbz	r3, 801ccd2 <dhcp_release_and_stop+0xae>
    dhcp->state = new_state;
 801ccca:	2300      	movs	r3, #0
 801cccc:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801ccce:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801ccd0:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801ccd2:	7923      	ldrb	r3, [r4, #4]
 801ccd4:	b913      	cbnz	r3, 801ccdc <dhcp_release_and_stop+0xb8>
}
 801ccd6:	b004      	add	sp, #16
 801ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801ccdc:	f7ff fa96 	bl	801c20c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801cce0:	2300      	movs	r3, #0
 801cce2:	7123      	strb	r3, [r4, #4]
}
 801cce4:	b004      	add	sp, #16
 801cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccea:	bf00      	nop
 801ccec:	20022434 	.word	0x20022434
 801ccf0:	0803f460 	.word	0x0803f460

0801ccf4 <dhcp_start>:
{
 801ccf4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	d046      	beq.n	801cd88 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801ccfa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ccfe:	4605      	mov	r5, r0
 801cd00:	07da      	lsls	r2, r3, #31
 801cd02:	d537      	bpl.n	801cd74 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cd04:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801cd06:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cd08:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801cd0c:	d32f      	bcc.n	801cd6e <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801cd0e:	b33c      	cbz	r4, 801cd60 <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801cd10:	7923      	ldrb	r3, [r4, #4]
 801cd12:	bb13      	cbnz	r3, 801cd5a <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801cd14:	2234      	movs	r2, #52	; 0x34
 801cd16:	2100      	movs	r1, #0
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f002 fcbe 	bl	801f69a <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cd1e:	f7ff fa3b 	bl	801c198 <dhcp_inc_pcb_refcount>
 801cd22:	4606      	mov	r6, r0
 801cd24:	bb18      	cbnz	r0, 801cd6e <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801cd26:	2301      	movs	r3, #1
 801cd28:	7123      	strb	r3, [r4, #4]
  if (!netif_is_link_up(netif)) {
 801cd2a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801cd2e:	075b      	lsls	r3, r3, #29
 801cd30:	d408      	bmi.n	801cd44 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801cd32:	7963      	ldrb	r3, [r4, #5]
 801cd34:	2b02      	cmp	r3, #2
 801cd36:	d003      	beq.n	801cd40 <dhcp_start+0x4c>
    dhcp->state = new_state;
 801cd38:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801cd3a:	71a0      	strb	r0, [r4, #6]
    dhcp->request_timeout = 0;
 801cd3c:	8120      	strh	r0, [r4, #8]
    dhcp->state = new_state;
 801cd3e:	7163      	strb	r3, [r4, #5]
}
 801cd40:	4630      	mov	r0, r6
 801cd42:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801cd44:	4628      	mov	r0, r5
 801cd46:	f7ff f8dd 	bl	801bf04 <dhcp_discover>
  if (result != ERR_OK) {
 801cd4a:	2800      	cmp	r0, #0
 801cd4c:	d0f8      	beq.n	801cd40 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801cd4e:	4628      	mov	r0, r5
    return ERR_MEM;
 801cd50:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801cd54:	f7ff ff66 	bl	801cc24 <dhcp_release_and_stop>
    return ERR_MEM;
 801cd58:	e7f2      	b.n	801cd40 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cd5a:	f7ff fa57 	bl	801c20c <dhcp_dec_pcb_refcount>
 801cd5e:	e7d9      	b.n	801cd14 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cd60:	2034      	movs	r0, #52	; 0x34
 801cd62:	f7f8 fc89 	bl	8015678 <mem_malloc>
    if (dhcp == NULL) {
 801cd66:	4604      	mov	r4, r0
 801cd68:	b108      	cbz	r0, 801cd6e <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cd6a:	62a8      	str	r0, [r5, #40]	; 0x28
 801cd6c:	e7d2      	b.n	801cd14 <dhcp_start+0x20>
    return ERR_MEM;
 801cd6e:	f04f 36ff 	mov.w	r6, #4294967295
 801cd72:	e7e5      	b.n	801cd40 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cd74:	4b09      	ldr	r3, [pc, #36]	; (801cd9c <dhcp_start+0xa8>)
 801cd76:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801cd7a:	4909      	ldr	r1, [pc, #36]	; (801cda0 <dhcp_start+0xac>)
 801cd7c:	f06f 060f 	mvn.w	r6, #15
 801cd80:	4808      	ldr	r0, [pc, #32]	; (801cda4 <dhcp_start+0xb0>)
 801cd82:	f003 fc09 	bl	8020598 <iprintf>
 801cd86:	e7db      	b.n	801cd40 <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801cd88:	4b04      	ldr	r3, [pc, #16]	; (801cd9c <dhcp_start+0xa8>)
 801cd8a:	f240 22e7 	movw	r2, #743	; 0x2e7
 801cd8e:	4906      	ldr	r1, [pc, #24]	; (801cda8 <dhcp_start+0xb4>)
 801cd90:	f06f 060f 	mvn.w	r6, #15
 801cd94:	4803      	ldr	r0, [pc, #12]	; (801cda4 <dhcp_start+0xb0>)
 801cd96:	f003 fbff 	bl	8020598 <iprintf>
 801cd9a:	e7d1      	b.n	801cd40 <dhcp_start+0x4c>
 801cd9c:	0803ef44 	.word	0x0803ef44
 801cda0:	0803f104 	.word	0x0803f104
 801cda4:	08026544 	.word	0x08026544
 801cda8:	08026534 	.word	0x08026534

0801cdac <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801cdac:	4b5e      	ldr	r3, [pc, #376]	; (801cf28 <dhcp_coarse_tmr+0x17c>)
{
 801cdae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801cdb2:	681d      	ldr	r5, [r3, #0]
{
 801cdb4:	b085      	sub	sp, #20
  NETIF_FOREACH(netif) {
 801cdb6:	b1d5      	cbz	r5, 801cdee <dhcp_coarse_tmr+0x42>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801cdb8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801cdba:	b1ac      	cbz	r4, 801cde8 <dhcp_coarse_tmr+0x3c>
 801cdbc:	7963      	ldrb	r3, [r4, #5]
 801cdbe:	b19b      	cbz	r3, 801cde8 <dhcp_coarse_tmr+0x3c>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801cdc0:	8aa1      	ldrh	r1, [r4, #20]
 801cdc2:	b129      	cbz	r1, 801cdd0 <dhcp_coarse_tmr+0x24>
 801cdc4:	8a62      	ldrh	r2, [r4, #18]
 801cdc6:	3201      	adds	r2, #1
 801cdc8:	b292      	uxth	r2, r2
 801cdca:	4291      	cmp	r1, r2
 801cdcc:	8262      	strh	r2, [r4, #18]
 801cdce:	d011      	beq.n	801cdf4 <dhcp_coarse_tmr+0x48>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801cdd0:	8a22      	ldrh	r2, [r4, #16]
 801cdd2:	b11a      	cbz	r2, 801cddc <dhcp_coarse_tmr+0x30>
 801cdd4:	1e51      	subs	r1, r2, #1
 801cdd6:	2a01      	cmp	r2, #1
 801cdd8:	8221      	strh	r1, [r4, #16]
 801cdda:	d012      	beq.n	801ce02 <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801cddc:	89e2      	ldrh	r2, [r4, #14]
 801cdde:	b11a      	cbz	r2, 801cde8 <dhcp_coarse_tmr+0x3c>
 801cde0:	1e51      	subs	r1, r2, #1
 801cde2:	2a01      	cmp	r2, #1
 801cde4:	81e1      	strh	r1, [r4, #14]
 801cde6:	d05e      	beq.n	801cea6 <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801cde8:	682d      	ldr	r5, [r5, #0]
 801cdea:	2d00      	cmp	r5, #0
 801cdec:	d1e4      	bne.n	801cdb8 <dhcp_coarse_tmr+0xc>
}
 801cdee:	b005      	add	sp, #20
 801cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801cdf4:	4628      	mov	r0, r5
 801cdf6:	f7ff ff15 	bl	801cc24 <dhcp_release_and_stop>
        dhcp_start(netif);
 801cdfa:	4628      	mov	r0, r5
 801cdfc:	f7ff ff7a 	bl	801ccf4 <dhcp_start>
 801ce00:	e7f2      	b.n	801cde8 <dhcp_coarse_tmr+0x3c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ce02:	1e5a      	subs	r2, r3, #1
 801ce04:	b2d1      	uxtb	r1, r2
 801ce06:	2909      	cmp	r1, #9
 801ce08:	d8ee      	bhi.n	801cde8 <dhcp_coarse_tmr+0x3c>
 801ce0a:	f240 2219 	movw	r2, #537	; 0x219
 801ce0e:	40ca      	lsrs	r2, r1
 801ce10:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ce12:	f012 0201 	ands.w	r2, r2, #1
 801ce16:	d1e7      	bne.n	801cde8 <dhcp_coarse_tmr+0x3c>
  if (new_state != dhcp->state) {
 801ce18:	2b04      	cmp	r3, #4
 801ce1a:	d003      	beq.n	801ce24 <dhcp_coarse_tmr+0x78>
    dhcp->state = new_state;
 801ce1c:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801ce1e:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801ce20:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801ce22:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ce24:	f10d 030e 	add.w	r3, sp, #14
 801ce28:	2203      	movs	r2, #3
 801ce2a:	4621      	mov	r1, r4
 801ce2c:	4628      	mov	r0, r5
 801ce2e:	f7fe fe2d 	bl	801ba8c <dhcp_create_msg>
  if (p_out != NULL) {
 801ce32:	4683      	mov	fp, r0
 801ce34:	2800      	cmp	r0, #0
 801ce36:	d057      	beq.n	801cee8 <dhcp_coarse_tmr+0x13c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ce38:	6847      	ldr	r7, [r0, #4]
 801ce3a:	2302      	movs	r3, #2
 801ce3c:	2239      	movs	r2, #57	; 0x39
 801ce3e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801ce42:	37f0      	adds	r7, #240	; 0xf0
 801ce44:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 801cf44 <dhcp_coarse_tmr+0x198>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ce48:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ce4c:	4639      	mov	r1, r7
 801ce4e:	f7fe fddb 	bl	801ba08 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ce52:	4639      	mov	r1, r7
 801ce54:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ce56:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ce5a:	f7fe fdb9 	bl	801b9d0 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ce5e:	4639      	mov	r1, r7
 801ce60:	2304      	movs	r3, #4
 801ce62:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ce64:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ce68:	f7fe fdce 	bl	801ba08 <dhcp_option>
 801ce6c:	4606      	mov	r6, r0
 801ce6e:	f100 0804 	add.w	r8, r0, #4
 801ce72:	f8ad 000e 	strh.w	r0, [sp, #14]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ce76:	2e43      	cmp	r6, #67	; 0x43
 801ce78:	fa1f f888 	uxth.w	r8, r8
 801ce7c:	d80b      	bhi.n	801ce96 <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801ce7e:	1c73      	adds	r3, r6, #1
 801ce80:	f807 9006 	strb.w	r9, [r7, r6]
 801ce84:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce86:	4546      	cmp	r6, r8
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ce88:	f8ad 600e 	strh.w	r6, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce8c:	d01c      	beq.n	801cec8 <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ce8e:	2e43      	cmp	r6, #67	; 0x43
 801ce90:	f81a 9b01 	ldrb.w	r9, [sl], #1
 801ce94:	d9f3      	bls.n	801ce7e <dhcp_coarse_tmr+0xd2>
 801ce96:	4b25      	ldr	r3, [pc, #148]	; (801cf2c <dhcp_coarse_tmr+0x180>)
 801ce98:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801ce9c:	4924      	ldr	r1, [pc, #144]	; (801cf30 <dhcp_coarse_tmr+0x184>)
 801ce9e:	4825      	ldr	r0, [pc, #148]	; (801cf34 <dhcp_coarse_tmr+0x188>)
 801cea0:	f003 fb7a 	bl	8020598 <iprintf>
 801cea4:	e7eb      	b.n	801ce7e <dhcp_coarse_tmr+0xd2>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801cea6:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801ceaa:	2a01      	cmp	r2, #1
 801ceac:	d001      	beq.n	801ceb2 <dhcp_coarse_tmr+0x106>
 801ceae:	2b0a      	cmp	r3, #10
 801ceb0:	d19a      	bne.n	801cde8 <dhcp_coarse_tmr+0x3c>
    dhcp_renew(netif);
 801ceb2:	4628      	mov	r0, r5
 801ceb4:	f7ff fe28 	bl	801cb08 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ceb8:	89a3      	ldrh	r3, [r4, #12]
 801ceba:	8a62      	ldrh	r2, [r4, #18]
 801cebc:	1a9b      	subs	r3, r3, r2
 801cebe:	2b01      	cmp	r3, #1
 801cec0:	dd92      	ble.n	801cde8 <dhcp_coarse_tmr+0x3c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801cec2:	105b      	asrs	r3, r3, #1
 801cec4:	81e3      	strh	r3, [r4, #14]
 801cec6:	e78f      	b.n	801cde8 <dhcp_coarse_tmr+0x3c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cec8:	4639      	mov	r1, r7
 801ceca:	4640      	mov	r0, r8
 801cecc:	465a      	mov	r2, fp
 801cece:	f7fe fe8b 	bl	801bbe8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ced2:	4a19      	ldr	r2, [pc, #100]	; (801cf38 <dhcp_coarse_tmr+0x18c>)
 801ced4:	9500      	str	r5, [sp, #0]
 801ced6:	2343      	movs	r3, #67	; 0x43
 801ced8:	6810      	ldr	r0, [r2, #0]
 801ceda:	4659      	mov	r1, fp
 801cedc:	4a17      	ldr	r2, [pc, #92]	; (801cf3c <dhcp_coarse_tmr+0x190>)
 801cede:	f7fe fc25 	bl	801b72c <udp_sendto_if>
    pbuf_free(p_out);
 801cee2:	4658      	mov	r0, fp
 801cee4:	f7f9 f8ba 	bl	801605c <pbuf_free>
  if (dhcp->tries < 255) {
 801cee8:	79a3      	ldrb	r3, [r4, #6]
 801ceea:	2bff      	cmp	r3, #255	; 0xff
 801ceec:	d01a      	beq.n	801cf24 <dhcp_coarse_tmr+0x178>
    dhcp->tries++;
 801ceee:	3301      	adds	r3, #1
 801cef0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cef2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801cef4:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cef6:	d815      	bhi.n	801cf24 <dhcp_coarse_tmr+0x178>
 801cef8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801cefc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801cf00:	4a0f      	ldr	r2, [pc, #60]	; (801cf40 <dhcp_coarse_tmr+0x194>)
 801cf02:	00db      	lsls	r3, r3, #3
 801cf04:	b29b      	uxth	r3, r3
 801cf06:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cf0a:	fba2 2303 	umull	r2, r3, r2, r3
 801cf0e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801cf10:	8aa2      	ldrh	r2, [r4, #20]
 801cf12:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf14:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801cf16:	1a53      	subs	r3, r2, r1
 801cf18:	2b01      	cmp	r3, #1
 801cf1a:	f77f af65 	ble.w	801cde8 <dhcp_coarse_tmr+0x3c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801cf1e:	105b      	asrs	r3, r3, #1
 801cf20:	8223      	strh	r3, [r4, #16]
 801cf22:	e761      	b.n	801cde8 <dhcp_coarse_tmr+0x3c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cf24:	2314      	movs	r3, #20
 801cf26:	e7f3      	b.n	801cf10 <dhcp_coarse_tmr+0x164>
 801cf28:	200361e0 	.word	0x200361e0
 801cf2c:	0803ef44 	.word	0x0803ef44
 801cf30:	0803efb8 	.word	0x0803efb8
 801cf34:	08026544 	.word	0x08026544
 801cf38:	20022434 	.word	0x20022434
 801cf3c:	0803f464 	.word	0x0803f464
 801cf40:	10624dd3 	.word	0x10624dd3
 801cf44:	0803ee85 	.word	0x0803ee85

0801cf48 <dhcp_fine_tmr>:
{
 801cf48:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801cf4a:	4b21      	ldr	r3, [pc, #132]	; (801cfd0 <dhcp_fine_tmr+0x88>)
 801cf4c:	681c      	ldr	r4, [r3, #0]
 801cf4e:	b1fc      	cbz	r4, 801cf90 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801cf50:	2500      	movs	r5, #0
 801cf52:	e003      	b.n	801cf5c <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801cf54:	3a01      	subs	r2, #1
 801cf56:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801cf58:	6824      	ldr	r4, [r4, #0]
 801cf5a:	b1cc      	cbz	r4, 801cf90 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801cf5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d0fa      	beq.n	801cf58 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801cf62:	891a      	ldrh	r2, [r3, #8]
 801cf64:	2a01      	cmp	r2, #1
 801cf66:	d8f5      	bhi.n	801cf54 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801cf68:	d1f6      	bne.n	801cf58 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801cf6a:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801cf6c:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801cf6e:	2a0c      	cmp	r2, #12
 801cf70:	d016      	beq.n	801cfa0 <dhcp_fine_tmr+0x58>
 801cf72:	2a06      	cmp	r2, #6
 801cf74:	d014      	beq.n	801cfa0 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801cf76:	2a01      	cmp	r2, #1
 801cf78:	d00b      	beq.n	801cf92 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801cf7a:	2a08      	cmp	r2, #8
 801cf7c:	d01a      	beq.n	801cfb4 <dhcp_fine_tmr+0x6c>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801cf7e:	2a03      	cmp	r2, #3
 801cf80:	d1ea      	bne.n	801cf58 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801cf82:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801cf84:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801cf86:	2b01      	cmp	r3, #1
 801cf88:	d91e      	bls.n	801cfc8 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801cf8a:	f7fe ffbb 	bl	801bf04 <dhcp_discover>
 801cf8e:	e7e3      	b.n	801cf58 <dhcp_fine_tmr+0x10>
}
 801cf90:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 5) {
 801cf92:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801cf94:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801cf96:	2b05      	cmp	r3, #5
 801cf98:	d806      	bhi.n	801cfa8 <dhcp_fine_tmr+0x60>
      dhcp_select(netif);
 801cf9a:	f7fe fee3 	bl	801bd64 <dhcp_select>
 801cf9e:	e7db      	b.n	801cf58 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801cfa0:	4620      	mov	r0, r4
 801cfa2:	f7fe ffaf 	bl	801bf04 <dhcp_discover>
 801cfa6:	e7d7      	b.n	801cf58 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801cfa8:	f7ff fe3c 	bl	801cc24 <dhcp_release_and_stop>
      dhcp_start(netif);
 801cfac:	4620      	mov	r0, r4
 801cfae:	f7ff fea1 	bl	801ccf4 <dhcp_start>
 801cfb2:	e7d1      	b.n	801cf58 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 1) {
 801cfb4:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801cfb6:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801cfb8:	2b01      	cmp	r3, #1
 801cfba:	d902      	bls.n	801cfc2 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801cfbc:	f7ff f848 	bl	801c050 <dhcp_bind>
 801cfc0:	e7ca      	b.n	801cf58 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801cfc2:	f7ff f82d 	bl	801c020 <dhcp_check>
 801cfc6:	e7c7      	b.n	801cf58 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801cfc8:	f7fe fe2a 	bl	801bc20 <dhcp_reboot>
 801cfcc:	e7c4      	b.n	801cf58 <dhcp_fine_tmr+0x10>
 801cfce:	bf00      	nop
 801cfd0:	200361e0 	.word	0x200361e0

0801cfd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cfd8:	0047      	lsls	r7, r0, #1
 801cfda:	4d1a      	ldr	r5, [pc, #104]	; (801d044 <etharp_free_entry+0x70>)
{
 801cfdc:	4680      	mov	r8, r0
  if (arp_table[i].q != NULL) {
 801cfde:	183b      	adds	r3, r7, r0
 801cfe0:	f855 4033 	ldr.w	r4, [r5, r3, lsl #3]
 801cfe4:	b1ac      	cbz	r4, 801d012 <etharp_free_entry+0x3e>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801cfe6:	f8df b064 	ldr.w	fp, [pc, #100]	; 801d04c <etharp_free_entry+0x78>
 801cfea:	f8df a064 	ldr.w	sl, [pc, #100]	; 801d050 <etharp_free_entry+0x7c>
 801cfee:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801d054 <etharp_free_entry+0x80>
    q = q->next;
 801cff2:	e9d4 6000 	ldrd	r6, r0, [r4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801cff6:	b1e0      	cbz	r0, 801d032 <etharp_free_entry+0x5e>
    pbuf_free(r->p);
 801cff8:	f7f9 f830 	bl	801605c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801cffc:	4621      	mov	r1, r4
 801cffe:	200b      	movs	r0, #11
 801d000:	4634      	mov	r4, r6
 801d002:	f7f8 fd51 	bl	8015aa8 <memp_free>
  while (q) {
 801d006:	2e00      	cmp	r6, #0
 801d008:	d1f3      	bne.n	801cff2 <etharp_free_entry+0x1e>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 801d00a:	eb07 0308 	add.w	r3, r7, r8
 801d00e:	f845 6033 	str.w	r6, [r5, r3, lsl #3]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
 801d012:	490d      	ldr	r1, [pc, #52]	; (801d048 <etharp_free_entry+0x74>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d014:	eb07 0308 	add.w	r3, r7, r8
 801d018:	2200      	movs	r2, #0
 801d01a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  arp_table[i].ethaddr = ethzero;
 801d01e:	6808      	ldr	r0, [r1, #0]
 801d020:	8889      	ldrh	r1, [r1, #4]
 801d022:	60d8      	str	r0, [r3, #12]
 801d024:	8219      	strh	r1, [r3, #16]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d026:	751a      	strb	r2, [r3, #20]
  arp_table[i].ctime = 0;
 801d028:	825a      	strh	r2, [r3, #18]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801d02a:	e9c3 2201 	strd	r2, r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801d02e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801d032:	465b      	mov	r3, fp
 801d034:	229a      	movs	r2, #154	; 0x9a
 801d036:	4651      	mov	r1, sl
 801d038:	4648      	mov	r0, r9
 801d03a:	f003 faad 	bl	8020598 <iprintf>
 801d03e:	6860      	ldr	r0, [r4, #4]
 801d040:	e7da      	b.n	801cff8 <etharp_free_entry+0x24>
 801d042:	bf00      	nop
 801d044:	20022440 	.word	0x20022440
 801d048:	0803f680 	.word	0x0803f680
 801d04c:	0803f16c 	.word	0x0803f16c
 801d050:	0803f1a4 	.word	0x0803f1a4
 801d054:	08026544 	.word	0x08026544

0801d058 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d05c:	2300      	movs	r3, #0
 801d05e:	b085      	sub	sp, #20
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d060:	f04f 0c20 	mov.w	ip, #32
 801d064:	f8df 8130 	ldr.w	r8, [pc, #304]	; 801d198 <etharp_find_entry+0x140>
{
 801d068:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d06a:	4699      	mov	r9, r3
 801d06c:	4641      	mov	r1, r8
 801d06e:	9302      	str	r3, [sp, #8]
 801d070:	469b      	mov	fp, r3
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d072:	46e2      	mov	sl, ip
 801d074:	46e6      	mov	lr, ip
  s16_t empty = ARP_TABLE_SIZE;
 801d076:	4664      	mov	r4, ip
 801d078:	9201      	str	r2, [sp, #4]
 801d07a:	e005      	b.n	801d088 <etharp_find_entry+0x30>
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d07c:	b946      	cbnz	r6, 801d090 <etharp_find_entry+0x38>
 801d07e:	462c      	mov	r4, r5
 801d080:	3301      	adds	r3, #1
 801d082:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d084:	2b20      	cmp	r3, #32
 801d086:	d015      	beq.n	801d0b4 <etharp_find_entry+0x5c>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d088:	2c20      	cmp	r4, #32
 801d08a:	b21d      	sxth	r5, r3
    u8_t state = arp_table[i].state;
 801d08c:	7d0e      	ldrb	r6, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d08e:	d0f5      	beq.n	801d07c <etharp_find_entry+0x24>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 801d090:	2e00      	cmp	r6, #0
 801d092:	d0f5      	beq.n	801d080 <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d094:	b118      	cbz	r0, 801d09e <etharp_find_entry+0x46>
 801d096:	6802      	ldr	r2, [r0, #0]
 801d098:	684f      	ldr	r7, [r1, #4]
 801d09a:	42ba      	cmp	r2, r7
 801d09c:	d035      	beq.n	801d10a <etharp_find_entry+0xb2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d09e:	2e01      	cmp	r6, #1
 801d0a0:	8a4f      	ldrh	r7, [r1, #18]
 801d0a2:	d02b      	beq.n	801d0fc <etharp_find_entry+0xa4>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d0a4:	454f      	cmp	r7, r9
 801d0a6:	d3eb      	bcc.n	801d080 <etharp_find_entry+0x28>
 801d0a8:	3301      	adds	r3, #1
 801d0aa:	46b9      	mov	r9, r7
 801d0ac:	46ae      	mov	lr, r5
 801d0ae:	3118      	adds	r1, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d0b0:	2b20      	cmp	r3, #32
 801d0b2:	d1e9      	bne.n	801d088 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d0b4:	9b03      	ldr	r3, [sp, #12]
 801d0b6:	9a01      	ldr	r2, [sp, #4]
 801d0b8:	2b01      	cmp	r3, #1
 801d0ba:	d161      	bne.n	801d180 <etharp_find_entry+0x128>
 801d0bc:	2c20      	cmp	r4, #32
 801d0be:	4616      	mov	r6, r2
 801d0c0:	4607      	mov	r7, r0
 801d0c2:	d03a      	beq.n	801d13a <etharp_find_entry+0xe2>
 801d0c4:	46a1      	mov	r9, r4
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d0c6:	ea4f 0549 	mov.w	r5, r9, lsl #1
 801d0ca:	eb05 0309 	add.w	r3, r5, r9
 801d0ce:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d0d2:	7d1b      	ldrb	r3, [r3, #20]
 801d0d4:	bb4b      	cbnz	r3, 801d12a <etharp_find_entry+0xd2>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d0d6:	b12f      	cbz	r7, 801d0e4 <etharp_find_entry+0x8c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d0d8:	eb05 0309 	add.w	r3, r5, r9
 801d0dc:	683a      	ldr	r2, [r7, #0]
 801d0de:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d0e2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801d0e4:	444d      	add	r5, r9
 801d0e6:	2300      	movs	r3, #0
 801d0e8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d0ec:	f8c8 6008 	str.w	r6, [r8, #8]
  arp_table[i].ctime = 0;
 801d0f0:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801d0f4:	4620      	mov	r0, r4
 801d0f6:	b005      	add	sp, #20
 801d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801d0fc:	680e      	ldr	r6, [r1, #0]
 801d0fe:	b176      	cbz	r6, 801d11e <etharp_find_entry+0xc6>
          if (arp_table[i].ctime >= age_queue) {
 801d100:	455f      	cmp	r7, fp
 801d102:	d3bd      	bcc.n	801d080 <etharp_find_entry+0x28>
 801d104:	46bb      	mov	fp, r7
 801d106:	46ac      	mov	ip, r5
 801d108:	e7ba      	b.n	801d080 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d10a:	9a01      	ldr	r2, [sp, #4]
 801d10c:	b112      	cbz	r2, 801d114 <etharp_find_entry+0xbc>
 801d10e:	688f      	ldr	r7, [r1, #8]
 801d110:	4297      	cmp	r7, r2
 801d112:	d1c4      	bne.n	801d09e <etharp_find_entry+0x46>
 801d114:	462c      	mov	r4, r5
}
 801d116:	4620      	mov	r0, r4
 801d118:	b005      	add	sp, #20
 801d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801d11e:	9e02      	ldr	r6, [sp, #8]
 801d120:	42b7      	cmp	r7, r6
 801d122:	d3ad      	bcc.n	801d080 <etharp_find_entry+0x28>
 801d124:	9702      	str	r7, [sp, #8]
 801d126:	46aa      	mov	sl, r5
 801d128:	e7aa      	b.n	801d080 <etharp_find_entry+0x28>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d12a:	4b17      	ldr	r3, [pc, #92]	; (801d188 <etharp_find_entry+0x130>)
 801d12c:	f240 1285 	movw	r2, #389	; 0x185
 801d130:	4916      	ldr	r1, [pc, #88]	; (801d18c <etharp_find_entry+0x134>)
 801d132:	4817      	ldr	r0, [pc, #92]	; (801d190 <etharp_find_entry+0x138>)
 801d134:	f003 fa30 	bl	8020598 <iprintf>
 801d138:	e7cd      	b.n	801d0d6 <etharp_find_entry+0x7e>
    if (old_stable < ARP_TABLE_SIZE) {
 801d13a:	f1be 0f20 	cmp.w	lr, #32
 801d13e:	d011      	beq.n	801d164 <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d140:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 801d144:	46f1      	mov	r9, lr
 801d146:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801d14a:	b1bb      	cbz	r3, 801d17c <etharp_find_entry+0x124>
 801d14c:	4b0e      	ldr	r3, [pc, #56]	; (801d188 <etharp_find_entry+0x130>)
 801d14e:	f240 126d 	movw	r2, #365	; 0x16d
 801d152:	4910      	ldr	r1, [pc, #64]	; (801d194 <etharp_find_entry+0x13c>)
 801d154:	4674      	mov	r4, lr
 801d156:	480e      	ldr	r0, [pc, #56]	; (801d190 <etharp_find_entry+0x138>)
 801d158:	f003 fa1e 	bl	8020598 <iprintf>
    etharp_free_entry(i);
 801d15c:	4648      	mov	r0, r9
 801d15e:	f7ff ff39 	bl	801cfd4 <etharp_free_entry>
 801d162:	e7b0      	b.n	801d0c6 <etharp_find_entry+0x6e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d164:	f1ba 0f20 	cmp.w	sl, #32
 801d168:	d105      	bne.n	801d176 <etharp_find_entry+0x11e>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d16a:	f1bc 0f20 	cmp.w	ip, #32
 801d16e:	d007      	beq.n	801d180 <etharp_find_entry+0x128>
 801d170:	4664      	mov	r4, ip
 801d172:	46e1      	mov	r9, ip
 801d174:	e7f2      	b.n	801d15c <etharp_find_entry+0x104>
 801d176:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d178:	46d1      	mov	r9, sl
 801d17a:	e7ef      	b.n	801d15c <etharp_find_entry+0x104>
 801d17c:	4674      	mov	r4, lr
 801d17e:	e7ed      	b.n	801d15c <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 801d180:	f04f 34ff 	mov.w	r4, #4294967295
 801d184:	e7b6      	b.n	801d0f4 <etharp_find_entry+0x9c>
 801d186:	bf00      	nop
 801d188:	0803f16c 	.word	0x0803f16c
 801d18c:	0803f140 	.word	0x0803f140
 801d190:	08026544 	.word	0x08026544
 801d194:	0803f128 	.word	0x0803f128
 801d198:	20022440 	.word	0x20022440

0801d19c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1a0:	b083      	sub	sp, #12
 801d1a2:	4689      	mov	r9, r1
 801d1a4:	4692      	mov	sl, r2
 801d1a6:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d1a8:	4606      	mov	r6, r0
{
 801d1aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d1ac:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d05a      	beq.n	801d26a <etharp_raw+0xce>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d1b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d1b8:	211c      	movs	r1, #28
 801d1ba:	200e      	movs	r0, #14
 801d1bc:	f7f8 ffbc 	bl	8016138 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d1c0:	4605      	mov	r5, r0
 801d1c2:	2800      	cmp	r0, #0
 801d1c4:	d059      	beq.n	801d27a <etharp_raw+0xde>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d1c6:	8943      	ldrh	r3, [r0, #10]
 801d1c8:	2b1b      	cmp	r3, #27
 801d1ca:	d946      	bls.n	801d25a <etharp_raw+0xbe>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d1cc:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d1ce:	4658      	mov	r0, fp
 801d1d0:	f7f7 f8d4 	bl	801437c <lwip_htons>
 801d1d4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d1d6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801d1da:	2b06      	cmp	r3, #6
 801d1dc:	d006      	beq.n	801d1ec <etharp_raw+0x50>
 801d1de:	4b2a      	ldr	r3, [pc, #168]	; (801d288 <etharp_raw+0xec>)
 801d1e0:	f240 426a 	movw	r2, #1130	; 0x46a
 801d1e4:	4929      	ldr	r1, [pc, #164]	; (801d28c <etharp_raw+0xf0>)
 801d1e6:	482a      	ldr	r0, [pc, #168]	; (801d290 <etharp_raw+0xf4>)
 801d1e8:	f003 f9d6 	bl	8020598 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d1ec:	f8d8 1000 	ldr.w	r1, [r8]
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d1f0:	f04f 0e08 	mov.w	lr, #8
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 801d1f4:	f04f 0c04 	mov.w	ip, #4
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d1f8:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d1fa:	60a1      	str	r1, [r4, #8]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d1fc:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d1fe:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d202:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d206:	4653      	mov	r3, sl
 801d208:	464a      	mov	r2, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d20a:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d20c:	6839      	ldr	r1, [r7, #0]
 801d20e:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801d212:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d214:	88bf      	ldrh	r7, [r7, #4]
 801d216:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d218:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d21a:	683f      	ldr	r7, [r7, #0]
 801d21c:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d220:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d222:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d224:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d228:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d22a:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801d22e:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d230:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801d232:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d236:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d238:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d23a:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d23e:	9700      	str	r7, [sp, #0]
 801d240:	f001 fd2a 	bl	801ec98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d244:	4a13      	ldr	r2, [pc, #76]	; (801d294 <etharp_raw+0xf8>)
  /* free ARP query packet */
  pbuf_free(p);
 801d246:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801d248:	8b13      	ldrh	r3, [r2, #24]
 801d24a:	4443      	add	r3, r8
 801d24c:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801d24e:	f7f8 ff05 	bl	801605c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801d252:	4630      	mov	r0, r6
}
 801d254:	b003      	add	sp, #12
 801d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d25a:	4b0b      	ldr	r3, [pc, #44]	; (801d288 <etharp_raw+0xec>)
 801d25c:	f240 4263 	movw	r2, #1123	; 0x463
 801d260:	490d      	ldr	r1, [pc, #52]	; (801d298 <etharp_raw+0xfc>)
 801d262:	480b      	ldr	r0, [pc, #44]	; (801d290 <etharp_raw+0xf4>)
 801d264:	f003 f998 	bl	8020598 <iprintf>
 801d268:	e7b0      	b.n	801d1cc <etharp_raw+0x30>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d26a:	4b07      	ldr	r3, [pc, #28]	; (801d288 <etharp_raw+0xec>)
 801d26c:	f240 4257 	movw	r2, #1111	; 0x457
 801d270:	490a      	ldr	r1, [pc, #40]	; (801d29c <etharp_raw+0x100>)
 801d272:	4807      	ldr	r0, [pc, #28]	; (801d290 <etharp_raw+0xf4>)
 801d274:	f003 f990 	bl	8020598 <iprintf>
 801d278:	e79c      	b.n	801d1b4 <etharp_raw+0x18>
    ETHARP_STATS_INC(etharp.memerr);
 801d27a:	4a06      	ldr	r2, [pc, #24]	; (801d294 <etharp_raw+0xf8>)
    return ERR_MEM;
 801d27c:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801d280:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801d282:	3301      	adds	r3, #1
 801d284:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801d286:	e7e5      	b.n	801d254 <etharp_raw+0xb8>
 801d288:	0803f16c 	.word	0x0803f16c
 801d28c:	0803f294 	.word	0x0803f294
 801d290:	08026544 	.word	0x08026544
 801d294:	200361ec 	.word	0x200361ec
 801d298:	0803f260 	.word	0x0803f260
 801d29c:	08026534 	.word	0x08026534

0801d2a0 <etharp_output_to_arp_index>:
{
 801d2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d2a4:	0055      	lsls	r5, r2, #1
 801d2a6:	4e2f      	ldr	r6, [pc, #188]	; (801d364 <etharp_output_to_arp_index+0xc4>)
{
 801d2a8:	b084      	sub	sp, #16
 801d2aa:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d2ac:	eb05 0802 	add.w	r8, r5, r2
{
 801d2b0:	4607      	mov	r7, r0
 801d2b2:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d2b4:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 801d2b8:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d2bc:	2b01      	cmp	r3, #1
 801d2be:	d934      	bls.n	801d32a <etharp_output_to_arp_index+0x8a>
 801d2c0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d2c4:	2b02      	cmp	r3, #2
 801d2c6:	f107 082e 	add.w	r8, r7, #46	; 0x2e
 801d2ca:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d2ce:	f101 0a0c 	add.w	sl, r1, #12
 801d2d2:	44b2      	add	sl, r6
 801d2d4:	d00b      	beq.n	801d2ee <etharp_output_to_arp_index+0x4e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d2d6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801d2da:	4653      	mov	r3, sl
 801d2dc:	4642      	mov	r2, r8
 801d2de:	4649      	mov	r1, r9
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	9400      	str	r4, [sp, #0]
 801d2e4:	f001 fcd8 	bl	801ec98 <ethernet_output>
}
 801d2e8:	b004      	add	sp, #16
 801d2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d2ee:	442c      	add	r4, r5
 801d2f0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801d2f4:	8a63      	ldrh	r3, [r4, #18]
 801d2f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d2fa:	d820      	bhi.n	801d33e <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d2fc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d300:	d3e9      	bcc.n	801d2d6 <etharp_output_to_arp_index+0x36>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d302:	3104      	adds	r1, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d304:	2201      	movs	r2, #1
 801d306:	4b18      	ldr	r3, [pc, #96]	; (801d368 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d308:	1d38      	adds	r0, r7, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d30a:	4431      	add	r1, r6
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d30c:	9203      	str	r2, [sp, #12]
 801d30e:	9301      	str	r3, [sp, #4]
 801d310:	4652      	mov	r2, sl
 801d312:	9102      	str	r1, [sp, #8]
 801d314:	4643      	mov	r3, r8
 801d316:	9000      	str	r0, [sp, #0]
 801d318:	4641      	mov	r1, r8
 801d31a:	4638      	mov	r0, r7
 801d31c:	f7ff ff3e 	bl	801d19c <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d320:	2800      	cmp	r0, #0
 801d322:	d1d8      	bne.n	801d2d6 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d324:	2303      	movs	r3, #3
 801d326:	7523      	strb	r3, [r4, #20]
 801d328:	e7d5      	b.n	801d2d6 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d32a:	4b10      	ldr	r3, [pc, #64]	; (801d36c <etharp_output_to_arp_index+0xcc>)
 801d32c:	f240 22ef 	movw	r2, #751	; 0x2ef
 801d330:	490f      	ldr	r1, [pc, #60]	; (801d370 <etharp_output_to_arp_index+0xd0>)
 801d332:	4810      	ldr	r0, [pc, #64]	; (801d374 <etharp_output_to_arp_index+0xd4>)
 801d334:	f003 f930 	bl	8020598 <iprintf>
 801d338:	f898 3014 	ldrb.w	r3, [r8, #20]
 801d33c:	e7c0      	b.n	801d2c0 <etharp_output_to_arp_index+0x20>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d33e:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d340:	2001      	movs	r0, #1
 801d342:	4b09      	ldr	r3, [pc, #36]	; (801d368 <etharp_output_to_arp_index+0xc8>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d344:	1d3a      	adds	r2, r7, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d346:	440e      	add	r6, r1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d348:	9003      	str	r0, [sp, #12]
 801d34a:	9301      	str	r3, [sp, #4]
 801d34c:	4641      	mov	r1, r8
 801d34e:	9200      	str	r2, [sp, #0]
 801d350:	4643      	mov	r3, r8
 801d352:	9602      	str	r6, [sp, #8]
 801d354:	4638      	mov	r0, r7
 801d356:	4a08      	ldr	r2, [pc, #32]	; (801d378 <etharp_output_to_arp_index+0xd8>)
 801d358:	f7ff ff20 	bl	801d19c <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d35c:	2800      	cmp	r0, #0
 801d35e:	d1ba      	bne.n	801d2d6 <etharp_output_to_arp_index+0x36>
 801d360:	e7e0      	b.n	801d324 <etharp_output_to_arp_index+0x84>
 801d362:	bf00      	nop
 801d364:	20022440 	.word	0x20022440
 801d368:	0803f680 	.word	0x0803f680
 801d36c:	0803f16c 	.word	0x0803f16c
 801d370:	0803f204 	.word	0x0803f204
 801d374:	08026544 	.word	0x08026544
 801d378:	0803f60c 	.word	0x0803f60c

0801d37c <etharp_tmr>:
{
 801d37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d380:	4c20      	ldr	r4, [pc, #128]	; (801d404 <etharp_tmr+0x88>)
 801d382:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d384:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d386:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801d40c <etharp_tmr+0x90>
 801d38a:	1f27      	subs	r7, r4, #4
 801d38c:	4e1e      	ldr	r6, [pc, #120]	; (801d408 <etharp_tmr+0x8c>)
 801d38e:	e00b      	b.n	801d3a8 <etharp_tmr+0x2c>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d390:	2a01      	cmp	r2, #1
 801d392:	d01d      	beq.n	801d3d0 <etharp_tmr+0x54>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d394:	2a03      	cmp	r2, #3
 801d396:	d031      	beq.n	801d3fc <etharp_tmr+0x80>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d398:	2a04      	cmp	r2, #4
 801d39a:	d101      	bne.n	801d3a0 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d39c:	2302      	movs	r3, #2
 801d39e:	7323      	strb	r3, [r4, #12]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3a0:	3501      	adds	r5, #1
 801d3a2:	3418      	adds	r4, #24
 801d3a4:	2d20      	cmp	r5, #32
 801d3a6:	d010      	beq.n	801d3ca <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 801d3a8:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 801d3aa:	2a00      	cmp	r2, #0
 801d3ac:	d0f8      	beq.n	801d3a0 <etharp_tmr+0x24>
      arp_table[i].ctime++;
 801d3ae:	8963      	ldrh	r3, [r4, #10]
 801d3b0:	3301      	adds	r3, #1
 801d3b2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d3b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801d3b8:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d3ba:	d3e9      	bcc.n	801d390 <etharp_tmr+0x14>
        etharp_free_entry(i);
 801d3bc:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3be:	3501      	adds	r5, #1
        etharp_free_entry(i);
 801d3c0:	f7ff fe08 	bl	801cfd4 <etharp_free_entry>
 801d3c4:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3c6:	2d20      	cmp	r5, #32
 801d3c8:	d1ee      	bne.n	801d3a8 <etharp_tmr+0x2c>
}
 801d3ca:	b004      	add	sp, #16
 801d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d3d0:	2b04      	cmp	r3, #4
 801d3d2:	d8f3      	bhi.n	801d3bc <etharp_tmr+0x40>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d3d4:	6820      	ldr	r0, [r4, #0]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d3d6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d3da:	9203      	str	r2, [sp, #12]
 801d3dc:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 801d3e0:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d3e4:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d3e8:	f8cd 8004 	str.w	r8, [sp, #4]
 801d3ec:	9202      	str	r2, [sp, #8]
 801d3ee:	4619      	mov	r1, r3
 801d3f0:	f8cd c000 	str.w	ip, [sp]
 801d3f4:	4632      	mov	r2, r6
 801d3f6:	f7ff fed1 	bl	801d19c <etharp_raw>
 801d3fa:	e7d1      	b.n	801d3a0 <etharp_tmr+0x24>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d3fc:	2304      	movs	r3, #4
 801d3fe:	7323      	strb	r3, [r4, #12]
 801d400:	e7ce      	b.n	801d3a0 <etharp_tmr+0x24>
 801d402:	bf00      	nop
 801d404:	20022448 	.word	0x20022448
 801d408:	0803f60c 	.word	0x0803f60c
 801d40c:	0803f680 	.word	0x0803f680

0801d410 <etharp_cleanup_netif>:
{
 801d410:	b570      	push	{r4, r5, r6, lr}
 801d412:	4606      	mov	r6, r0
 801d414:	4c0a      	ldr	r4, [pc, #40]	; (801d440 <etharp_cleanup_netif+0x30>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d416:	2500      	movs	r5, #0
 801d418:	e003      	b.n	801d422 <etharp_cleanup_netif+0x12>
 801d41a:	3501      	adds	r5, #1
 801d41c:	3418      	adds	r4, #24
 801d41e:	2d20      	cmp	r5, #32
 801d420:	d00c      	beq.n	801d43c <etharp_cleanup_netif+0x2c>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d422:	7d23      	ldrb	r3, [r4, #20]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d0f8      	beq.n	801d41a <etharp_cleanup_netif+0xa>
 801d428:	68a3      	ldr	r3, [r4, #8]
 801d42a:	42b3      	cmp	r3, r6
 801d42c:	d1f5      	bne.n	801d41a <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 801d42e:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d430:	3501      	adds	r5, #1
      etharp_free_entry(i);
 801d432:	f7ff fdcf 	bl	801cfd4 <etharp_free_entry>
 801d436:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d438:	2d20      	cmp	r5, #32
 801d43a:	d1f2      	bne.n	801d422 <etharp_cleanup_netif+0x12>
}
 801d43c:	bd70      	pop	{r4, r5, r6, pc}
 801d43e:	bf00      	nop
 801d440:	20022440 	.word	0x20022440

0801d444 <etharp_input>:
{
 801d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d448:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d44a:	2900      	cmp	r1, #0
 801d44c:	f000 8097 	beq.w	801d57e <etharp_input+0x13a>
  hdr = (struct etharp_hdr *)p->payload;
 801d450:	6845      	ldr	r5, [r0, #4]
 801d452:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d454:	882b      	ldrh	r3, [r5, #0]
 801d456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d45a:	d102      	bne.n	801d462 <etharp_input+0x1e>
 801d45c:	792b      	ldrb	r3, [r5, #4]
 801d45e:	2b06      	cmp	r3, #6
 801d460:	d00c      	beq.n	801d47c <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801d462:	4b5c      	ldr	r3, [pc, #368]	; (801d5d4 <etharp_input+0x190>)
    pbuf_free(p);
 801d464:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801d466:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d468:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801d46a:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801d46c:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801d46e:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d470:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801d472:	f7f8 fdf3 	bl	801605c <pbuf_free>
}
 801d476:	b009      	add	sp, #36	; 0x24
 801d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d47c:	796b      	ldrb	r3, [r5, #5]
 801d47e:	2b04      	cmp	r3, #4
 801d480:	d1ef      	bne.n	801d462 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d482:	886b      	ldrh	r3, [r5, #2]
 801d484:	2b08      	cmp	r3, #8
 801d486:	d1ec      	bne.n	801d462 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801d488:	f8df a148 	ldr.w	sl, [pc, #328]	; 801d5d4 <etharp_input+0x190>
 801d48c:	460e      	mov	r6, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d48e:	684a      	ldr	r2, [r1, #4]
 801d490:	f105 0908 	add.w	r9, r5, #8
  ETHARP_STATS_INC(etharp.recv);
 801d494:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 801d498:	3301      	adds	r3, #1
 801d49a:	f8aa 301a 	strh.w	r3, [sl, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d49e:	f8d5 000e 	ldr.w	r0, [r5, #14]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d4a2:	69ab      	ldr	r3, [r5, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d4a4:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	d073      	beq.n	801d592 <etharp_input+0x14e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d4aa:	429a      	cmp	r2, r3
 801d4ac:	f000 808d 	beq.w	801d5ca <etharp_input+0x186>
    for_us = 0;
 801d4b0:	2300      	movs	r3, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d4b2:	2702      	movs	r7, #2
    for_us = 0;
 801d4b4:	9305      	str	r3, [sp, #20]
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d4b6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801d4ba:	2b06      	cmp	r3, #6
 801d4bc:	d007      	beq.n	801d4ce <etharp_input+0x8a>
 801d4be:	4b46      	ldr	r3, [pc, #280]	; (801d5d8 <etharp_input+0x194>)
 801d4c0:	f240 12a9 	movw	r2, #425	; 0x1a9
 801d4c4:	4945      	ldr	r1, [pc, #276]	; (801d5dc <etharp_input+0x198>)
 801d4c6:	4846      	ldr	r0, [pc, #280]	; (801d5e0 <etharp_input+0x19c>)
 801d4c8:	f003 f866 	bl	8020598 <iprintf>
 801d4cc:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801d4ce:	2800      	cmp	r0, #0
 801d4d0:	d046      	beq.n	801d560 <etharp_input+0x11c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d4d2:	4631      	mov	r1, r6
 801d4d4:	f000 fe06 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801d4d8:	4683      	mov	fp, r0
 801d4da:	2800      	cmp	r0, #0
 801d4dc:	d140      	bne.n	801d560 <etharp_input+0x11c>
      ip4_addr_ismulticast(ipaddr)) {
 801d4de:	9b07      	ldr	r3, [sp, #28]
 801d4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d4e4:	2be0      	cmp	r3, #224	; 0xe0
 801d4e6:	d03b      	beq.n	801d560 <etharp_input+0x11c>
  i = etharp_find_entry(ipaddr, flags, netif);
 801d4e8:	4639      	mov	r1, r7
 801d4ea:	4632      	mov	r2, r6
 801d4ec:	a807      	add	r0, sp, #28
 801d4ee:	f7ff fdb3 	bl	801d058 <etharp_find_entry>
  if (i < 0) {
 801d4f2:	2800      	cmp	r0, #0
 801d4f4:	db34      	blt.n	801d560 <etharp_input+0x11c>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d4f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801d4fa:	493a      	ldr	r1, [pc, #232]	; (801d5e4 <etharp_input+0x1a0>)
 801d4fc:	2702      	movs	r7, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d4fe:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d502:	00d2      	lsls	r2, r2, #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d504:	230c      	movs	r3, #12
 801d506:	fb10 330c 	smlabb	r3, r0, ip, r3
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d50a:	eb01 0802 	add.w	r8, r1, r2
 801d50e:	f888 7014 	strb.w	r7, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d512:	18cf      	adds	r7, r1, r3
  arp_table[i].netif = netif;
 801d514:	f8c8 6008 	str.w	r6, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d518:	f8d9 0000 	ldr.w	r0, [r9]
 801d51c:	50c8      	str	r0, [r1, r3]
 801d51e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801d522:	80bb      	strh	r3, [r7, #4]
  while (arp_table[i].q != NULL) {
 801d524:	588b      	ldr	r3, [r1, r2]
  arp_table[i].ctime = 0;
 801d526:	f8a8 b012 	strh.w	fp, [r8, #18]
  while (arp_table[i].q != NULL) {
 801d52a:	b1cb      	cbz	r3, 801d560 <etharp_input+0x11c>
 801d52c:	f106 0b2e 	add.w	fp, r6, #46	; 0x2e
    arp_table[i].q = q->next;
 801d530:	681a      	ldr	r2, [r3, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801d532:	4619      	mov	r1, r3
    p = q->p;
 801d534:	685f      	ldr	r7, [r3, #4]
    memp_free(MEMP_ARP_QUEUE, q);
 801d536:	200b      	movs	r0, #11
    arp_table[i].q = q->next;
 801d538:	f8c8 2000 	str.w	r2, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801d53c:	f7f8 fab4 	bl	8015aa8 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d540:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801d544:	464b      	mov	r3, r9
 801d546:	4639      	mov	r1, r7
 801d548:	465a      	mov	r2, fp
 801d54a:	9000      	str	r0, [sp, #0]
 801d54c:	4630      	mov	r0, r6
 801d54e:	f001 fba3 	bl	801ec98 <ethernet_output>
    pbuf_free(p);
 801d552:	4638      	mov	r0, r7
 801d554:	f7f8 fd82 	bl	801605c <pbuf_free>
  while (arp_table[i].q != NULL) {
 801d558:	f8d8 3000 	ldr.w	r3, [r8]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d1e7      	bne.n	801d530 <etharp_input+0xec>
  switch (hdr->opcode) {
 801d560:	88eb      	ldrh	r3, [r5, #6]
 801d562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d566:	d01d      	beq.n	801d5a4 <etharp_input+0x160>
 801d568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d56c:	d114      	bne.n	801d598 <etharp_input+0x154>
      dhcp_arp_reply(netif, &sipaddr);
 801d56e:	4630      	mov	r0, r6
 801d570:	a907      	add	r1, sp, #28
 801d572:	f7ff fa65 	bl	801ca40 <dhcp_arp_reply>
  pbuf_free(p);
 801d576:	4620      	mov	r0, r4
 801d578:	f7f8 fd70 	bl	801605c <pbuf_free>
 801d57c:	e77b      	b.n	801d476 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d57e:	4b16      	ldr	r3, [pc, #88]	; (801d5d8 <etharp_input+0x194>)
 801d580:	f240 228a 	movw	r2, #650	; 0x28a
 801d584:	4918      	ldr	r1, [pc, #96]	; (801d5e8 <etharp_input+0x1a4>)
 801d586:	4816      	ldr	r0, [pc, #88]	; (801d5e0 <etharp_input+0x19c>)
 801d588:	f003 f806 	bl	8020598 <iprintf>
}
 801d58c:	b009      	add	sp, #36	; 0x24
 801d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for_us = 0;
 801d592:	9205      	str	r2, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d594:	2702      	movs	r7, #2
 801d596:	e78e      	b.n	801d4b6 <etharp_input+0x72>
      ETHARP_STATS_INC(etharp.err);
 801d598:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801d59c:	3301      	adds	r3, #1
 801d59e:	f8aa 302c 	strh.w	r3, [sl, #44]	; 0x2c
      break;
 801d5a2:	e7e8      	b.n	801d576 <etharp_input+0x132>
      if (for_us) {
 801d5a4:	9b05      	ldr	r3, [sp, #20]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d0e5      	beq.n	801d576 <etharp_input+0x132>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d5aa:	f106 032e 	add.w	r3, r6, #46	; 0x2e
        etharp_raw(netif,
 801d5ae:	2002      	movs	r0, #2
 801d5b0:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d5b2:	1d35      	adds	r5, r6, #4
        etharp_raw(netif,
 801d5b4:	9003      	str	r0, [sp, #12]
 801d5b6:	464a      	mov	r2, r9
 801d5b8:	f8cd 9004 	str.w	r9, [sp, #4]
 801d5bc:	4619      	mov	r1, r3
 801d5be:	4630      	mov	r0, r6
 801d5c0:	9702      	str	r7, [sp, #8]
 801d5c2:	9500      	str	r5, [sp, #0]
 801d5c4:	f7ff fdea 	bl	801d19c <etharp_raw>
 801d5c8:	e7d5      	b.n	801d576 <etharp_input+0x132>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d5ca:	2301      	movs	r3, #1
 801d5cc:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d5ce:	461f      	mov	r7, r3
 801d5d0:	e771      	b.n	801d4b6 <etharp_input+0x72>
 801d5d2:	bf00      	nop
 801d5d4:	200361ec 	.word	0x200361ec
 801d5d8:	0803f16c 	.word	0x0803f16c
 801d5dc:	0803f1d4 	.word	0x0803f1d4
 801d5e0:	08026544 	.word	0x08026544
 801d5e4:	20022440 	.word	0x20022440
 801d5e8:	08026534 	.word	0x08026534

0801d5ec <etharp_query>:
{
 801d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5f0:	460f      	mov	r7, r1
 801d5f2:	b085      	sub	sp, #20
 801d5f4:	4604      	mov	r4, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d5f6:	4601      	mov	r1, r0
 801d5f8:	6838      	ldr	r0, [r7, #0]
{
 801d5fa:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d5fc:	f000 fd72 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801d600:	2800      	cmp	r0, #0
 801d602:	f040 80b3 	bne.w	801d76c <etharp_query+0x180>
      ip4_addr_ismulticast(ipaddr) ||
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801d60c:	2ae0      	cmp	r2, #224	; 0xe0
 801d60e:	f000 80ad 	beq.w	801d76c <etharp_query+0x180>
 801d612:	2b00      	cmp	r3, #0
 801d614:	f000 80aa 	beq.w	801d76c <etharp_query+0x180>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d618:	4622      	mov	r2, r4
 801d61a:	2101      	movs	r1, #1
 801d61c:	4638      	mov	r0, r7
 801d61e:	f7ff fd1b 	bl	801d058 <etharp_find_entry>
  if (i_err < 0) {
 801d622:	1e05      	subs	r5, r0, #0
 801d624:	db4c      	blt.n	801d6c0 <etharp_query+0xd4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d626:	2d7e      	cmp	r5, #126	; 0x7e
 801d628:	dc53      	bgt.n	801d6d2 <etharp_query+0xe6>
  i = (netif_addr_idx_t)i_err;
 801d62a:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d62c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801d7f4 <etharp_query+0x208>
 801d630:	ea4f 0945 	mov.w	r9, r5, lsl #1
 801d634:	eb09 0205 	add.w	r2, r9, r5
 801d638:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801d63c:	7d13      	ldrb	r3, [r2, #20]
 801d63e:	b18b      	cbz	r3, 801d664 <etharp_query+0x78>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d640:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 801d644:	2e00      	cmp	r6, #0
 801d646:	f000 80a5 	beq.w	801d794 <etharp_query+0x1a8>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d64a:	eb09 0305 	add.w	r3, r9, r5
  err_t result = ERR_MEM;
 801d64e:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d652:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d656:	7d1b      	ldrb	r3, [r3, #20]
 801d658:	2b01      	cmp	r3, #1
 801d65a:	d820      	bhi.n	801d69e <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d65c:	d041      	beq.n	801d6e2 <etharp_query+0xf6>
}
 801d65e:	b005      	add	sp, #20
 801d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d664:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d668:	f104 0a2e 	add.w	sl, r4, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d66c:	495a      	ldr	r1, [pc, #360]	; (801d7d8 <etharp_query+0x1ec>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d66e:	1d20      	adds	r0, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d670:	9702      	str	r7, [sp, #8]
 801d672:	4653      	mov	r3, sl
 801d674:	9101      	str	r1, [sp, #4]
 801d676:	4651      	mov	r1, sl
 801d678:	9000      	str	r0, [sp, #0]
 801d67a:	4620      	mov	r0, r4
 801d67c:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801d680:	6094      	str	r4, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d682:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d686:	4a55      	ldr	r2, [pc, #340]	; (801d7dc <etharp_query+0x1f0>)
 801d688:	f7ff fd88 	bl	801d19c <etharp_raw>
    if (q == NULL) {
 801d68c:	2e00      	cmp	r6, #0
 801d68e:	d0e6      	beq.n	801d65e <etharp_query+0x72>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d690:	eb09 0305 	add.w	r3, r9, r5
 801d694:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801d698:	7d1b      	ldrb	r3, [r3, #20]
 801d69a:	2b01      	cmp	r3, #1
 801d69c:	d9de      	bls.n	801d65c <etharp_query+0x70>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d69e:	2318      	movs	r3, #24
 801d6a0:	4631      	mov	r1, r6
 801d6a2:	f44f 6700 	mov.w	r7, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 801d6a6:	4e4e      	ldr	r6, [pc, #312]	; (801d7e0 <etharp_query+0x1f4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d6a8:	fb03 8305 	mla	r3, r3, r5, r8
 801d6ac:	4652      	mov	r2, sl
 801d6ae:	9700      	str	r7, [sp, #0]
 801d6b0:	4620      	mov	r0, r4
 801d6b2:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801d6b4:	7035      	strb	r5, [r6, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d6b6:	f001 faef 	bl	801ec98 <ethernet_output>
}
 801d6ba:	b005      	add	sp, #20
 801d6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (q) {
 801d6c0:	b11e      	cbz	r6, 801d6ca <etharp_query+0xde>
      ETHARP_STATS_INC(etharp.memerr);
 801d6c2:	4a48      	ldr	r2, [pc, #288]	; (801d7e4 <etharp_query+0x1f8>)
 801d6c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801d6c6:	3301      	adds	r3, #1
 801d6c8:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 801d6ca:	b268      	sxtb	r0, r5
}
 801d6cc:	b005      	add	sp, #20
 801d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d6d2:	4b45      	ldr	r3, [pc, #276]	; (801d7e8 <etharp_query+0x1fc>)
 801d6d4:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d6d8:	4944      	ldr	r1, [pc, #272]	; (801d7ec <etharp_query+0x200>)
 801d6da:	4845      	ldr	r0, [pc, #276]	; (801d7f0 <etharp_query+0x204>)
 801d6dc:	f002 ff5c 	bl	8020598 <iprintf>
 801d6e0:	e7a3      	b.n	801d62a <etharp_query+0x3e>
 801d6e2:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d6e4:	f8df b100 	ldr.w	fp, [pc, #256]	; 801d7e8 <etharp_query+0x1fc>
 801d6e8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 801d7f8 <etharp_query+0x20c>
 801d6ec:	e005      	b.n	801d6fa <etharp_query+0x10e>
      if (PBUF_NEEDS_COPY(p)) {
 801d6ee:	7b23      	ldrb	r3, [r4, #12]
 801d6f0:	065a      	lsls	r2, r3, #25
 801d6f2:	d413      	bmi.n	801d71c <etharp_query+0x130>
      p = p->next;
 801d6f4:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801d6f6:	2c00      	cmp	r4, #0
 801d6f8:	d03b      	beq.n	801d772 <etharp_query+0x186>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d6fa:	8962      	ldrh	r2, [r4, #10]
 801d6fc:	8923      	ldrh	r3, [r4, #8]
 801d6fe:	429a      	cmp	r2, r3
 801d700:	d1f5      	bne.n	801d6ee <etharp_query+0x102>
 801d702:	6827      	ldr	r7, [r4, #0]
 801d704:	465b      	mov	r3, fp
 801d706:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d70a:	4651      	mov	r1, sl
 801d70c:	4838      	ldr	r0, [pc, #224]	; (801d7f0 <etharp_query+0x204>)
 801d70e:	b117      	cbz	r7, 801d716 <etharp_query+0x12a>
 801d710:	f002 ff42 	bl	8020598 <iprintf>
 801d714:	e7eb      	b.n	801d6ee <etharp_query+0x102>
      if (PBUF_NEEDS_COPY(p)) {
 801d716:	7b23      	ldrb	r3, [r4, #12]
 801d718:	065b      	lsls	r3, r3, #25
 801d71a:	d52a      	bpl.n	801d772 <etharp_query+0x186>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d71c:	4632      	mov	r2, r6
 801d71e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d722:	200e      	movs	r0, #14
 801d724:	f7f9 f81c 	bl	8016760 <pbuf_clone>
    if (p != NULL) {
 801d728:	4606      	mov	r6, r0
 801d72a:	2800      	cmp	r0, #0
 801d72c:	d047      	beq.n	801d7be <etharp_query+0x1d2>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801d72e:	f240 4206 	movw	r2, #1030	; 0x406
 801d732:	492d      	ldr	r1, [pc, #180]	; (801d7e8 <etharp_query+0x1fc>)
 801d734:	200b      	movs	r0, #11
 801d736:	f7f8 f993 	bl	8015a60 <memp_malloc_fn>
      if (new_entry != NULL) {
 801d73a:	2800      	cmp	r0, #0
 801d73c:	d046      	beq.n	801d7cc <etharp_query+0x1e0>
        if (arp_table[i].q != NULL) {
 801d73e:	eb09 0305 	add.w	r3, r9, r5
        new_entry->next = 0;
 801d742:	2200      	movs	r2, #0
        new_entry->p = p;
 801d744:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 801d746:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801d748:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801d74a:	f858 6003 	ldr.w	r6, [r8, r3]
 801d74e:	b37e      	cbz	r6, 801d7b0 <etharp_query+0x1c4>
          while (r->next != NULL) {
 801d750:	6833      	ldr	r3, [r6, #0]
 801d752:	b38b      	cbz	r3, 801d7b8 <etharp_query+0x1cc>
          qlen++;
 801d754:	2201      	movs	r2, #1
 801d756:	e000      	b.n	801d75a <etharp_query+0x16e>
 801d758:	4623      	mov	r3, r4
          while (r->next != NULL) {
 801d75a:	681c      	ldr	r4, [r3, #0]
            qlen++;
 801d75c:	3201      	adds	r2, #1
          while (r->next != NULL) {
 801d75e:	2c00      	cmp	r4, #0
 801d760:	d1fa      	bne.n	801d758 <etharp_query+0x16c>
        if (qlen >= ARP_QUEUE_LEN) {
 801d762:	2a1f      	cmp	r2, #31
          r->next = new_entry;
 801d764:	6018      	str	r0, [r3, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801d766:	d808      	bhi.n	801d77a <etharp_query+0x18e>
        result = ERR_OK;
 801d768:	4620      	mov	r0, r4
 801d76a:	e778      	b.n	801d65e <etharp_query+0x72>
    return ERR_ARG;
 801d76c:	f06f 000f 	mvn.w	r0, #15
 801d770:	e775      	b.n	801d65e <etharp_query+0x72>
      pbuf_ref(p);
 801d772:	4630      	mov	r0, r6
 801d774:	f7f8 fde6 	bl	8016344 <pbuf_ref>
 801d778:	e7d9      	b.n	801d72e <etharp_query+0x142>
          pbuf_free(old->p);
 801d77a:	e9d6 3000 	ldrd	r3, r0, [r6]
          arp_table[i].q = arp_table[i].q->next;
 801d77e:	444d      	add	r5, r9
 801d780:	f848 3035 	str.w	r3, [r8, r5, lsl #3]
          pbuf_free(old->p);
 801d784:	f7f8 fc6a 	bl	801605c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801d788:	200b      	movs	r0, #11
 801d78a:	4631      	mov	r1, r6
 801d78c:	f7f8 f98c 	bl	8015aa8 <memp_free>
        result = ERR_OK;
 801d790:	4620      	mov	r0, r4
 801d792:	e764      	b.n	801d65e <etharp_query+0x72>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d794:	1d22      	adds	r2, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d796:	2101      	movs	r1, #1
 801d798:	4b0f      	ldr	r3, [pc, #60]	; (801d7d8 <etharp_query+0x1ec>)
 801d79a:	4620      	mov	r0, r4
 801d79c:	9200      	str	r2, [sp, #0]
 801d79e:	9301      	str	r3, [sp, #4]
 801d7a0:	4653      	mov	r3, sl
 801d7a2:	4a0e      	ldr	r2, [pc, #56]	; (801d7dc <etharp_query+0x1f0>)
 801d7a4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d7a8:	4651      	mov	r1, sl
 801d7aa:	f7ff fcf7 	bl	801d19c <etharp_raw>
 801d7ae:	e756      	b.n	801d65e <etharp_query+0x72>
          arp_table[i].q = new_entry;
 801d7b0:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801d7b4:	4630      	mov	r0, r6
 801d7b6:	e752      	b.n	801d65e <etharp_query+0x72>
          r->next = new_entry;
 801d7b8:	6030      	str	r0, [r6, #0]
        result = ERR_OK;
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	e74f      	b.n	801d65e <etharp_query+0x72>
      ETHARP_STATS_INC(etharp.memerr);
 801d7be:	4a09      	ldr	r2, [pc, #36]	; (801d7e4 <etharp_query+0x1f8>)
      result = ERR_MEM;
 801d7c0:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801d7c4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801d7c6:	3301      	adds	r3, #1
 801d7c8:	8493      	strh	r3, [r2, #36]	; 0x24
 801d7ca:	e748      	b.n	801d65e <etharp_query+0x72>
        pbuf_free(p);
 801d7cc:	4630      	mov	r0, r6
 801d7ce:	f7f8 fc45 	bl	801605c <pbuf_free>
        result = ERR_MEM;
 801d7d2:	f04f 30ff 	mov.w	r0, #4294967295
 801d7d6:	e742      	b.n	801d65e <etharp_query+0x72>
 801d7d8:	0803f680 	.word	0x0803f680
 801d7dc:	0803f60c 	.word	0x0803f60c
 801d7e0:	20022740 	.word	0x20022740
 801d7e4:	200361ec 	.word	0x200361ec
 801d7e8:	0803f16c 	.word	0x0803f16c
 801d7ec:	0803f234 	.word	0x0803f234
 801d7f0:	08026544 	.word	0x08026544
 801d7f4:	20022440 	.word	0x20022440
 801d7f8:	0803f244 	.word	0x0803f244

0801d7fc <etharp_output>:
{
 801d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7fe:	460f      	mov	r7, r1
 801d800:	b085      	sub	sp, #20
 801d802:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d804:	4604      	mov	r4, r0
 801d806:	2800      	cmp	r0, #0
 801d808:	d07f      	beq.n	801d90a <etharp_output+0x10e>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d80a:	2f00      	cmp	r7, #0
 801d80c:	d06c      	beq.n	801d8e8 <etharp_output+0xec>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d80e:	2e00      	cmp	r6, #0
 801d810:	d073      	beq.n	801d8fa <etharp_output+0xfe>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d812:	4621      	mov	r1, r4
 801d814:	6830      	ldr	r0, [r6, #0]
 801d816:	f000 fc65 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801d81a:	2800      	cmp	r0, #0
 801d81c:	d15b      	bne.n	801d8d6 <etharp_output+0xda>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d81e:	6833      	ldr	r3, [r6, #0]
 801d820:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801d824:	2ae0      	cmp	r2, #224	; 0xe0
 801d826:	d039      	beq.n	801d89c <etharp_output+0xa0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d828:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801d82c:	405a      	eors	r2, r3
 801d82e:	420a      	tst	r2, r1
 801d830:	d009      	beq.n	801d846 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 801d832:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d834:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d838:	4293      	cmp	r3, r2
 801d83a:	d004      	beq.n	801d846 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d83c:	68e3      	ldr	r3, [r4, #12]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d07b      	beq.n	801d93a <etharp_output+0x13e>
            dst_addr = netif_ip4_gw(netif);
 801d842:	f104 060c 	add.w	r6, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d846:	f8df c118 	ldr.w	ip, [pc, #280]	; 801d960 <etharp_output+0x164>
 801d84a:	4b3d      	ldr	r3, [pc, #244]	; (801d940 <etharp_output+0x144>)
 801d84c:	f89c 2000 	ldrb.w	r2, [ip]
 801d850:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801d854:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801d858:	7d19      	ldrb	r1, [r3, #20]
 801d85a:	2901      	cmp	r1, #1
 801d85c:	d902      	bls.n	801d864 <etharp_output+0x68>
 801d85e:	6899      	ldr	r1, [r3, #8]
 801d860:	42a1      	cmp	r1, r4
 801d862:	d05d      	beq.n	801d920 <etharp_output+0x124>
 801d864:	4a36      	ldr	r2, [pc, #216]	; (801d940 <etharp_output+0x144>)
{
 801d866:	2300      	movs	r3, #0
 801d868:	e003      	b.n	801d872 <etharp_output+0x76>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d86a:	2b20      	cmp	r3, #32
 801d86c:	f102 0218 	add.w	r2, r2, #24
 801d870:	d033      	beq.n	801d8da <etharp_output+0xde>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d872:	7d11      	ldrb	r1, [r2, #20]
 801d874:	b2dd      	uxtb	r5, r3
 801d876:	3301      	adds	r3, #1
 801d878:	2901      	cmp	r1, #1
 801d87a:	d9f6      	bls.n	801d86a <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801d87c:	6891      	ldr	r1, [r2, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d87e:	42a1      	cmp	r1, r4
 801d880:	d1f3      	bne.n	801d86a <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 801d882:	6830      	ldr	r0, [r6, #0]
 801d884:	6851      	ldr	r1, [r2, #4]
 801d886:	4288      	cmp	r0, r1
 801d888:	d1ef      	bne.n	801d86a <etharp_output+0x6e>
        return etharp_output_to_arp_index(netif, q, i);
 801d88a:	4639      	mov	r1, r7
 801d88c:	462a      	mov	r2, r5
 801d88e:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 801d890:	f88c 5000 	strb.w	r5, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 801d894:	f7ff fd04 	bl	801d2a0 <etharp_output_to_arp_index>
}
 801d898:	b005      	add	sp, #20
 801d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d89c:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d89e:	2501      	movs	r5, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d8a0:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d8a2:	78b1      	ldrb	r1, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d8a8:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d8aa:	f8ad 5008 	strh.w	r5, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d8ae:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801d8b2:	ab02      	add	r3, sp, #8
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d8b4:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d8b8:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d8bc:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d8c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801d8c4:	4639      	mov	r1, r7
 801d8c6:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801d8ca:	9000      	str	r0, [sp, #0]
 801d8cc:	4620      	mov	r0, r4
 801d8ce:	f001 f9e3 	bl	801ec98 <ethernet_output>
}
 801d8d2:	b005      	add	sp, #20
 801d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801d8d6:	4b1b      	ldr	r3, [pc, #108]	; (801d944 <etharp_output+0x148>)
 801d8d8:	e7f2      	b.n	801d8c0 <etharp_output+0xc4>
    return etharp_query(netif, dst_addr, q);
 801d8da:	463a      	mov	r2, r7
 801d8dc:	4631      	mov	r1, r6
 801d8de:	4620      	mov	r0, r4
 801d8e0:	f7ff fe84 	bl	801d5ec <etharp_query>
}
 801d8e4:	b005      	add	sp, #20
 801d8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801d8e8:	4b17      	ldr	r3, [pc, #92]	; (801d948 <etharp_output+0x14c>)
 801d8ea:	f240 321f 	movw	r2, #799	; 0x31f
 801d8ee:	4917      	ldr	r1, [pc, #92]	; (801d94c <etharp_output+0x150>)
 801d8f0:	4817      	ldr	r0, [pc, #92]	; (801d950 <etharp_output+0x154>)
 801d8f2:	f002 fe51 	bl	8020598 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d8f6:	2e00      	cmp	r6, #0
 801d8f8:	d18b      	bne.n	801d812 <etharp_output+0x16>
 801d8fa:	4b13      	ldr	r3, [pc, #76]	; (801d948 <etharp_output+0x14c>)
 801d8fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d900:	4914      	ldr	r1, [pc, #80]	; (801d954 <etharp_output+0x158>)
 801d902:	4813      	ldr	r0, [pc, #76]	; (801d950 <etharp_output+0x154>)
 801d904:	f002 fe48 	bl	8020598 <iprintf>
 801d908:	e783      	b.n	801d812 <etharp_output+0x16>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d90a:	4b0f      	ldr	r3, [pc, #60]	; (801d948 <etharp_output+0x14c>)
 801d90c:	f240 321e 	movw	r2, #798	; 0x31e
 801d910:	4911      	ldr	r1, [pc, #68]	; (801d958 <etharp_output+0x15c>)
 801d912:	480f      	ldr	r0, [pc, #60]	; (801d950 <etharp_output+0x154>)
 801d914:	f002 fe40 	bl	8020598 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d918:	2f00      	cmp	r7, #0
 801d91a:	f47f af78 	bne.w	801d80e <etharp_output+0x12>
 801d91e:	e7e3      	b.n	801d8e8 <etharp_output+0xec>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d920:	685b      	ldr	r3, [r3, #4]
 801d922:	6831      	ldr	r1, [r6, #0]
 801d924:	4299      	cmp	r1, r3
 801d926:	d19d      	bne.n	801d864 <etharp_output+0x68>
          ETHARP_STATS_INC(etharp.cachehit);
 801d928:	4d0c      	ldr	r5, [pc, #48]	; (801d95c <etharp_output+0x160>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d92a:	4639      	mov	r1, r7
 801d92c:	4620      	mov	r0, r4
          ETHARP_STATS_INC(etharp.cachehit);
 801d92e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 801d930:	3301      	adds	r3, #1
 801d932:	85eb      	strh	r3, [r5, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d934:	f7ff fcb4 	bl	801d2a0 <etharp_output_to_arp_index>
 801d938:	e7cb      	b.n	801d8d2 <etharp_output+0xd6>
            return ERR_RTE;
 801d93a:	f06f 0003 	mvn.w	r0, #3
 801d93e:	e7c8      	b.n	801d8d2 <etharp_output+0xd6>
 801d940:	20022440 	.word	0x20022440
 801d944:	0803f60c 	.word	0x0803f60c
 801d948:	0803f16c 	.word	0x0803f16c
 801d94c:	0803f1f8 	.word	0x0803f1f8
 801d950:	08026544 	.word	0x08026544
 801d954:	0803f1b4 	.word	0x0803f1b4
 801d958:	08026534 	.word	0x08026534
 801d95c:	200361ec 	.word	0x200361ec
 801d960:	20022740 	.word	0x20022740

0801d964 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d964:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d966:	f100 032e 	add.w	r3, r0, #46	; 0x2e
{
 801d96a:	b530      	push	{r4, r5, lr}
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d96c:	3204      	adds	r2, #4
{
 801d96e:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d970:	2501      	movs	r5, #1
 801d972:	4c05      	ldr	r4, [pc, #20]	; (801d988 <etharp_request+0x24>)
 801d974:	9102      	str	r1, [sp, #8]
 801d976:	4619      	mov	r1, r3
 801d978:	9200      	str	r2, [sp, #0]
 801d97a:	4a04      	ldr	r2, [pc, #16]	; (801d98c <etharp_request+0x28>)
 801d97c:	9503      	str	r5, [sp, #12]
 801d97e:	9401      	str	r4, [sp, #4]
 801d980:	f7ff fc0c 	bl	801d19c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 801d984:	b005      	add	sp, #20
 801d986:	bd30      	pop	{r4, r5, pc}
 801d988:	0803f680 	.word	0x0803f680
 801d98c:	0803f60c 	.word	0x0803f60c

0801d990 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801d990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d994:	4604      	mov	r4, r0
 801d996:	b087      	sub	sp, #28
 801d998:	4689      	mov	r9, r1
 801d99a:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d99c:	2124      	movs	r1, #36	; 0x24
 801d99e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9a2:	2022      	movs	r0, #34	; 0x22
 801d9a4:	f7f8 fbc8 	bl	8016138 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801d9a8:	2800      	cmp	r0, #0
 801d9aa:	d047      	beq.n	801da3c <icmp_send_response.isra.0+0xac>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d9ac:	8943      	ldrh	r3, [r0, #10]
 801d9ae:	4606      	mov	r6, r0
 801d9b0:	2b23      	cmp	r3, #35	; 0x23
 801d9b2:	d946      	bls.n	801da42 <icmp_send_response.isra.0+0xb2>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d9b4:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801d9b6:	2500      	movs	r5, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d9b8:	6874      	ldr	r4, [r6, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d9ba:	af06      	add	r7, sp, #24
  icmphdr->code = code;
 801d9bc:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->type = type;
 801d9c0:	f884 9000 	strb.w	r9, [r4]
  icmphdr->id = 0;
 801d9c4:	7125      	strb	r5, [r4, #4]
 801d9c6:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
 801d9c8:	71a5      	strb	r5, [r4, #6]
 801d9ca:	71e5      	strb	r5, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d9cc:	f8d3 c000 	ldr.w	ip, [r3]
 801d9d0:	6858      	ldr	r0, [r3, #4]
 801d9d2:	689a      	ldr	r2, [r3, #8]
 801d9d4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801d9d8:	f8c4 c008 	str.w	ip, [r4, #8]
 801d9dc:	60e0      	str	r0, [r4, #12]
 801d9de:	6122      	str	r2, [r4, #16]
 801d9e0:	f8c4 e014 	str.w	lr, [r4, #20]
 801d9e4:	6958      	ldr	r0, [r3, #20]
 801d9e6:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801d9ea:	699a      	ldr	r2, [r3, #24]
 801d9ec:	61e0      	str	r0, [r4, #28]
 801d9ee:	f8c4 c018 	str.w	ip, [r4, #24]
 801d9f2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801d9f4:	68db      	ldr	r3, [r3, #12]
 801d9f6:	f847 3d04 	str.w	r3, [r7, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d9fa:	4638      	mov	r0, r7
 801d9fc:	f000 f948 	bl	801dc90 <ip4_route>
#endif
  if (netif != NULL) {
 801da00:	4680      	mov	r8, r0
 801da02:	b1c0      	cbz	r0, 801da36 <icmp_send_response.isra.0+0xa6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801da04:	70a5      	strb	r5, [r4, #2]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801da06:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 801da08:	70e5      	strb	r5, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801da0a:	8971      	ldrh	r1, [r6, #10]
 801da0c:	f7f7 fa74 	bl	8014ef8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801da10:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801da60 <icmp_send_response.isra.0+0xd0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801da14:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da16:	2301      	movs	r3, #1
    ICMP_STATS_INC(icmp.xmit);
 801da18:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da1c:	463a      	mov	r2, r7
 801da1e:	f8cd 8008 	str.w	r8, [sp, #8]
 801da22:	4629      	mov	r1, r5
    ICMP_STATS_INC(icmp.xmit);
 801da24:	441c      	add	r4, r3
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da26:	4630      	mov	r0, r6
 801da28:	e9cd 5300 	strd	r5, r3, [sp]
 801da2c:	23ff      	movs	r3, #255	; 0xff
    ICMP_STATS_INC(icmp.xmit);
 801da2e:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da32:	f000 fb45 	bl	801e0c0 <ip4_output_if>
  }
  pbuf_free(q);
 801da36:	4630      	mov	r0, r6
 801da38:	f7f8 fb10 	bl	801605c <pbuf_free>
}
 801da3c:	b007      	add	sp, #28
 801da3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801da42:	4b04      	ldr	r3, [pc, #16]	; (801da54 <icmp_send_response.isra.0+0xc4>)
 801da44:	f240 1269 	movw	r2, #361	; 0x169
 801da48:	4903      	ldr	r1, [pc, #12]	; (801da58 <icmp_send_response.isra.0+0xc8>)
 801da4a:	4804      	ldr	r0, [pc, #16]	; (801da5c <icmp_send_response.isra.0+0xcc>)
 801da4c:	f002 fda4 	bl	8020598 <iprintf>
 801da50:	e7b0      	b.n	801d9b4 <icmp_send_response.isra.0+0x24>
 801da52:	bf00      	nop
 801da54:	0803f344 	.word	0x0803f344
 801da58:	0803f37c 	.word	0x0803f37c
 801da5c:	08026544 	.word	0x08026544
 801da60:	200361ec 	.word	0x200361ec

0801da64 <icmp_input>:
{
 801da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 801da68:	4d71      	ldr	r5, [pc, #452]	; (801dc30 <icmp_input+0x1cc>)
{
 801da6a:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 801da6c:	4f71      	ldr	r7, [pc, #452]	; (801dc34 <icmp_input+0x1d0>)
{
 801da6e:	4606      	mov	r6, r0
  ICMP_STATS_INC(icmp.recv);
 801da70:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801da74:	f8d7 9008 	ldr.w	r9, [r7, #8]
  ICMP_STATS_INC(icmp.recv);
 801da78:	3301      	adds	r3, #1
 801da7a:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 801da7e:	f899 4000 	ldrb.w	r4, [r9]
 801da82:	f004 040f 	and.w	r4, r4, #15
 801da86:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801da88:	2c13      	cmp	r4, #19
 801da8a:	d958      	bls.n	801db3e <icmp_input+0xda>
  if (p->len < sizeof(u16_t) * 2) {
 801da8c:	8943      	ldrh	r3, [r0, #10]
 801da8e:	2b03      	cmp	r3, #3
 801da90:	d955      	bls.n	801db3e <icmp_input+0xda>
  type = *((u8_t *)p->payload);
 801da92:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 801da94:	781b      	ldrb	r3, [r3, #0]
 801da96:	2b00      	cmp	r3, #0
 801da98:	f000 8096 	beq.w	801dbc8 <icmp_input+0x164>
 801da9c:	2b08      	cmp	r3, #8
 801da9e:	f040 8099 	bne.w	801dbd4 <icmp_input+0x170>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801daa2:	6978      	ldr	r0, [r7, #20]
 801daa4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801daa8:	2be0      	cmp	r3, #224	; 0xe0
 801daaa:	d03f      	beq.n	801db2c <icmp_input+0xc8>
 801daac:	4688      	mov	r8, r1
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801daae:	6839      	ldr	r1, [r7, #0]
 801dab0:	f000 fb18 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801dab4:	2800      	cmp	r0, #0
 801dab6:	d139      	bne.n	801db2c <icmp_input+0xc8>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801dab8:	8933      	ldrh	r3, [r6, #8]
 801daba:	2b07      	cmp	r3, #7
 801dabc:	d93f      	bls.n	801db3e <icmp_input+0xda>
        if (inet_chksum_pbuf(p) != 0) {
 801dabe:	4630      	mov	r0, r6
 801dac0:	f7f7 fa20 	bl	8014f04 <inet_chksum_pbuf>
 801dac4:	2800      	cmp	r0, #0
 801dac6:	f040 8095 	bne.w	801dbf4 <icmp_input+0x190>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801daca:	f104 0b0e 	add.w	fp, r4, #14
 801dace:	4630      	mov	r0, r6
  hlen = IPH_HL_BYTES(iphdr_in);
 801dad0:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801dad4:	4659      	mov	r1, fp
 801dad6:	f7f8 fa81 	bl	8015fdc <pbuf_add_header>
 801dada:	2800      	cmp	r0, #0
 801dadc:	d03a      	beq.n	801db54 <icmp_input+0xf0>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801dade:	8933      	ldrh	r3, [r6, #8]
 801dae0:	eb03 010a 	add.w	r1, r3, sl
 801dae4:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 801dae6:	428b      	cmp	r3, r1
 801dae8:	d820      	bhi.n	801db2c <icmp_input+0xc8>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801daea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801daee:	200e      	movs	r0, #14
 801daf0:	f7f8 fb22 	bl	8016138 <pbuf_alloc>
        if (r == NULL) {
 801daf4:	4683      	mov	fp, r0
 801daf6:	b1c8      	cbz	r0, 801db2c <icmp_input+0xc8>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801daf8:	8942      	ldrh	r2, [r0, #10]
 801dafa:	f104 0308 	add.w	r3, r4, #8
 801dafe:	429a      	cmp	r2, r3
 801db00:	f0c0 808e 	bcc.w	801dc20 <icmp_input+0x1bc>
        MEMCPY(r->payload, iphdr_in, hlen);
 801db04:	4649      	mov	r1, r9
 801db06:	4622      	mov	r2, r4
 801db08:	6840      	ldr	r0, [r0, #4]
 801db0a:	f001 fda2 	bl	801f652 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801db0e:	4621      	mov	r1, r4
 801db10:	4658      	mov	r0, fp
 801db12:	f7f8 fa67 	bl	8015fe4 <pbuf_remove_header>
 801db16:	2800      	cmp	r0, #0
 801db18:	d07c      	beq.n	801dc14 <icmp_input+0x1b0>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801db1a:	4b47      	ldr	r3, [pc, #284]	; (801dc38 <icmp_input+0x1d4>)
 801db1c:	22b6      	movs	r2, #182	; 0xb6
 801db1e:	4947      	ldr	r1, [pc, #284]	; (801dc3c <icmp_input+0x1d8>)
 801db20:	4847      	ldr	r0, [pc, #284]	; (801dc40 <icmp_input+0x1dc>)
 801db22:	f002 fd39 	bl	8020598 <iprintf>
          pbuf_free(r);
 801db26:	4658      	mov	r0, fp
 801db28:	f7f8 fa98 	bl	801605c <pbuf_free>
  pbuf_free(p);
 801db2c:	4630      	mov	r0, r6
 801db2e:	f7f8 fa95 	bl	801605c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801db32:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
 801db36:	3301      	adds	r3, #1
 801db38:	f8a5 3074 	strh.w	r3, [r5, #116]	; 0x74
  return;
 801db3c:	e007      	b.n	801db4e <icmp_input+0xea>
  pbuf_free(p);
 801db3e:	4630      	mov	r0, r6
 801db40:	f7f8 fa8c 	bl	801605c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801db44:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 801db48:	3301      	adds	r3, #1
 801db4a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
}
 801db4e:	b005      	add	sp, #20
 801db50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801db54:	4659      	mov	r1, fp
 801db56:	4630      	mov	r0, r6
 801db58:	f7f8 fa44 	bl	8015fe4 <pbuf_remove_header>
 801db5c:	2800      	cmp	r0, #0
 801db5e:	d152      	bne.n	801dc06 <icmp_input+0x1a2>
      if (pbuf_add_header(p, hlen)) {
 801db60:	4621      	mov	r1, r4
 801db62:	4630      	mov	r0, r6
      iecho = (struct icmp_echo_hdr *)p->payload;
 801db64:	f8d6 9004 	ldr.w	r9, [r6, #4]
      if (pbuf_add_header(p, hlen)) {
 801db68:	f7f8 fa38 	bl	8015fdc <pbuf_add_header>
 801db6c:	bb60      	cbnz	r0, 801dbc8 <icmp_input+0x164>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801db6e:	6874      	ldr	r4, [r6, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801db70:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801db74:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 801db78:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->src, *src);
 801db7a:	60e1      	str	r1, [r4, #12]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801db7c:	4651      	mov	r1, sl
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801db7e:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801db80:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801db84:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801db88:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801db8a:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801db8c:	bf8c      	ite	hi
 801db8e:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801db90:	3308      	addls	r3, #8
 801db92:	f8a9 3002 	strh.w	r3, [r9, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801db96:	f04f 09ff 	mov.w	r9, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 801db9a:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801db9c:	f884 9008 	strb.w	r9, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801dba0:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dba2:	f7f7 f9a9 	bl	8014ef8 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 801dba6:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dbaa:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801dbac:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dbae:	464b      	mov	r3, r9
 801dbb0:	9700      	str	r7, [sp, #0]
        ICMP_STATS_INC(icmp.xmit);
 801dbb2:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dbb4:	9101      	str	r1, [sp, #4]
 801dbb6:	463a      	mov	r2, r7
 801dbb8:	f8cd 8008 	str.w	r8, [sp, #8]
 801dbbc:	4630      	mov	r0, r6
 801dbbe:	4921      	ldr	r1, [pc, #132]	; (801dc44 <icmp_input+0x1e0>)
        ICMP_STATS_INC(icmp.xmit);
 801dbc0:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dbc4:	f000 fa7c 	bl	801e0c0 <ip4_output_if>
  pbuf_free(p);
 801dbc8:	4630      	mov	r0, r6
}
 801dbca:	b005      	add	sp, #20
 801dbcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801dbd0:	f7f8 ba44 	b.w	801605c <pbuf_free>
      ICMP_STATS_INC(icmp.proterr);
 801dbd4:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
  pbuf_free(p);
 801dbd8:	4630      	mov	r0, r6
      ICMP_STATS_INC(icmp.drop);
 801dbda:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 801dbde:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 801dbe0:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 801dbe2:	f8a5 2070 	strh.w	r2, [r5, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801dbe6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
}
 801dbea:	b005      	add	sp, #20
 801dbec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801dbf0:	f7f8 ba34 	b.w	801605c <pbuf_free>
          pbuf_free(p);
 801dbf4:	4630      	mov	r0, r6
 801dbf6:	f7f8 fa31 	bl	801605c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801dbfa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801dbfe:	3301      	adds	r3, #1
 801dc00:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
          return;
 801dc04:	e7a3      	b.n	801db4e <icmp_input+0xea>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801dc06:	4b0c      	ldr	r3, [pc, #48]	; (801dc38 <icmp_input+0x1d4>)
 801dc08:	22c7      	movs	r2, #199	; 0xc7
 801dc0a:	490f      	ldr	r1, [pc, #60]	; (801dc48 <icmp_input+0x1e4>)
 801dc0c:	480c      	ldr	r0, [pc, #48]	; (801dc40 <icmp_input+0x1dc>)
 801dc0e:	f002 fcc3 	bl	8020598 <iprintf>
          goto icmperr;
 801dc12:	e78b      	b.n	801db2c <icmp_input+0xc8>
        if (pbuf_copy(r, p) != ERR_OK) {
 801dc14:	4631      	mov	r1, r6
 801dc16:	4658      	mov	r0, fp
 801dc18:	f7f8 fc06 	bl	8016428 <pbuf_copy>
 801dc1c:	b118      	cbz	r0, 801dc26 <icmp_input+0x1c2>
          pbuf_free(r);
 801dc1e:	4658      	mov	r0, fp
 801dc20:	f7f8 fa1c 	bl	801605c <pbuf_free>
          goto icmperr;
 801dc24:	e782      	b.n	801db2c <icmp_input+0xc8>
        pbuf_free(p);
 801dc26:	4630      	mov	r0, r6
 801dc28:	465e      	mov	r6, fp
 801dc2a:	f7f8 fa17 	bl	801605c <pbuf_free>
 801dc2e:	e797      	b.n	801db60 <icmp_input+0xfc>
 801dc30:	200361ec 	.word	0x200361ec
 801dc34:	20026a74 	.word	0x20026a74
 801dc38:	0803f344 	.word	0x0803f344
 801dc3c:	0803f2d8 	.word	0x0803f2d8
 801dc40:	08026544 	.word	0x08026544
 801dc44:	20026a88 	.word	0x20026a88
 801dc48:	0803f310 	.word	0x0803f310

0801dc4c <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 801dc4c:	460a      	mov	r2, r1
 801dc4e:	3004      	adds	r0, #4
 801dc50:	2103      	movs	r1, #3
 801dc52:	f7ff be9d 	b.w	801d990 <icmp_send_response.isra.0>
 801dc56:	bf00      	nop

0801dc58 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 801dc58:	460a      	mov	r2, r1
 801dc5a:	3004      	adds	r0, #4
 801dc5c:	210b      	movs	r1, #11
 801dc5e:	f7ff be97 	b.w	801d990 <icmp_send_response.isra.0>
 801dc62:	bf00      	nop

0801dc64 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 801dc64:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801dc66:	6843      	ldr	r3, [r0, #4]
 801dc68:	b16b      	cbz	r3, 801dc86 <ip4_input_accept.part.0+0x22>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dc6a:	4a08      	ldr	r2, [pc, #32]	; (801dc8c <ip4_input_accept.part.0+0x28>)
 801dc6c:	6952      	ldr	r2, [r2, #20]
 801dc6e:	4293      	cmp	r3, r2
 801dc70:	d007      	beq.n	801dc82 <ip4_input_accept.part.0+0x1e>
 801dc72:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801dc74:	4610      	mov	r0, r2
 801dc76:	f000 fa35 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dc7a:	3000      	adds	r0, #0
 801dc7c:	bf18      	it	ne
 801dc7e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 801dc80:	bd08      	pop	{r3, pc}
      return 1;
 801dc82:	2001      	movs	r0, #1
}
 801dc84:	bd08      	pop	{r3, pc}
  return 0;
 801dc86:	4618      	mov	r0, r3
}
 801dc88:	bd08      	pop	{r3, pc}
 801dc8a:	bf00      	nop
 801dc8c:	20026a74 	.word	0x20026a74

0801dc90 <ip4_route>:
  NETIF_FOREACH(netif) {
 801dc90:	4b18      	ldr	r3, [pc, #96]	; (801dcf4 <ip4_route+0x64>)
{
 801dc92:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	b1ab      	cbz	r3, 801dcc4 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dc98:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801dc9c:	07d4      	lsls	r4, r2, #31
 801dc9e:	d5f9      	bpl.n	801dc94 <ip4_route+0x4>
 801dca0:	0751      	lsls	r1, r2, #29
 801dca2:	d5f7      	bpl.n	801dc94 <ip4_route+0x4>
 801dca4:	6859      	ldr	r1, [r3, #4]
 801dca6:	2900      	cmp	r1, #0
 801dca8:	d0f4      	beq.n	801dc94 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801dcaa:	6804      	ldr	r4, [r0, #0]
 801dcac:	689d      	ldr	r5, [r3, #8]
 801dcae:	4061      	eors	r1, r4
 801dcb0:	4229      	tst	r1, r5
 801dcb2:	d004      	beq.n	801dcbe <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801dcb4:	0792      	lsls	r2, r2, #30
 801dcb6:	d4ed      	bmi.n	801dc94 <ip4_route+0x4>
 801dcb8:	68da      	ldr	r2, [r3, #12]
 801dcba:	4294      	cmp	r4, r2
 801dcbc:	d1ea      	bne.n	801dc94 <ip4_route+0x4>
}
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	bc30      	pop	{r4, r5}
 801dcc2:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dcc4:	4b0c      	ldr	r3, [pc, #48]	; (801dcf8 <ip4_route+0x68>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	b153      	cbz	r3, 801dce0 <ip4_route+0x50>
 801dcca:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801dcce:	f002 0205 	and.w	r2, r2, #5
 801dcd2:	2a05      	cmp	r2, #5
 801dcd4:	d104      	bne.n	801dce0 <ip4_route+0x50>
 801dcd6:	685a      	ldr	r2, [r3, #4]
 801dcd8:	b112      	cbz	r2, 801dce0 <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801dcda:	7802      	ldrb	r2, [r0, #0]
 801dcdc:	2a7f      	cmp	r2, #127	; 0x7f
 801dcde:	d1ee      	bne.n	801dcbe <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801dce0:	4906      	ldr	r1, [pc, #24]	; (801dcfc <ip4_route+0x6c>)
    return NULL;
 801dce2:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 801dce4:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801dce8:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801dcea:	3201      	adds	r2, #1
}
 801dcec:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801dcee:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801dcf2:	4770      	bx	lr
 801dcf4:	200361e0 	.word	0x200361e0
 801dcf8:	200361e4 	.word	0x200361e4
 801dcfc:	200361ec 	.word	0x200361ec

0801dd00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801dd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801dd04:	4c94      	ldr	r4, [pc, #592]	; (801df58 <ip4_input+0x258>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801dd06:	6847      	ldr	r7, [r0, #4]
  IP_STATS_INC(ip.recv);
 801dd08:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801dd0c:	3301      	adds	r3, #1
 801dd0e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801dd12:	783b      	ldrb	r3, [r7, #0]
 801dd14:	091a      	lsrs	r2, r3, #4
 801dd16:	2a04      	cmp	r2, #4
 801dd18:	d00e      	beq.n	801dd38 <ip4_input+0x38>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801dd1a:	f7f8 f99f 	bl	801605c <pbuf_free>
    IP_STATS_INC(ip.err);
 801dd1e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801dd22:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801dd26:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801dd28:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801dd2a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801dd2e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801dd32:	2000      	movs	r0, #0
 801dd34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801dd38:	f003 030f 	and.w	r3, r3, #15
 801dd3c:	4606      	mov	r6, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801dd3e:	8878      	ldrh	r0, [r7, #2]
 801dd40:	4688      	mov	r8, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801dd42:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801dd44:	f7f6 fb1a 	bl	801437c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801dd48:	8933      	ldrh	r3, [r6, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801dd4a:	4681      	mov	r9, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801dd4c:	fa1f fa85 	uxth.w	sl, r5
  if (iphdr_len < p->tot_len) {
 801dd50:	4283      	cmp	r3, r0
 801dd52:	f200 80aa 	bhi.w	801deaa <ip4_input+0x1aa>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801dd56:	8973      	ldrh	r3, [r6, #10]
 801dd58:	4553      	cmp	r3, sl
 801dd5a:	f0c0 8096 	bcc.w	801de8a <ip4_input+0x18a>
 801dd5e:	8933      	ldrh	r3, [r6, #8]
 801dd60:	454b      	cmp	r3, r9
 801dd62:	f0c0 8092 	bcc.w	801de8a <ip4_input+0x18a>
 801dd66:	f1ba 0f13 	cmp.w	sl, #19
 801dd6a:	f240 808e 	bls.w	801de8a <ip4_input+0x18a>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801dd6e:	693b      	ldr	r3, [r7, #16]
 801dd70:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801df60 <ip4_input+0x260>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dd74:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 801dd78:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801dd7c:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dd80:	29e0      	cmp	r1, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801dd82:	68f8      	ldr	r0, [r7, #12]
 801dd84:	f002 0201 	and.w	r2, r2, #1
 801dd88:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dd8c:	f000 80b9 	beq.w	801df02 <ip4_input+0x202>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801dd90:	2a00      	cmp	r2, #0
 801dd92:	f040 808f 	bne.w	801deb4 <ip4_input+0x1b4>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801dd96:	b2db      	uxtb	r3, r3
 801dd98:	2b7f      	cmp	r3, #127	; 0x7f
 801dd9a:	f000 8093 	beq.w	801dec4 <ip4_input+0x1c4>
        NETIF_FOREACH(netif) {
 801dd9e:	4b6f      	ldr	r3, [pc, #444]	; (801df5c <ip4_input+0x25c>)
 801dda0:	f8d3 9000 	ldr.w	r9, [r3]
 801dda4:	f1b9 0f00 	cmp.w	r9, #0
 801dda8:	d106      	bne.n	801ddb8 <ip4_input+0xb8>
 801ddaa:	e08b      	b.n	801dec4 <ip4_input+0x1c4>
 801ddac:	f8d9 9000 	ldr.w	r9, [r9]
 801ddb0:	f1b9 0f00 	cmp.w	r9, #0
 801ddb4:	f000 8086 	beq.w	801dec4 <ip4_input+0x1c4>
          if (netif == inp) {
 801ddb8:	45c8      	cmp	r8, r9
 801ddba:	d0f7      	beq.n	801ddac <ip4_input+0xac>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ddbc:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 801ddc0:	07db      	lsls	r3, r3, #31
 801ddc2:	d5f3      	bpl.n	801ddac <ip4_input+0xac>
 801ddc4:	4648      	mov	r0, r9
 801ddc6:	f7ff ff4d 	bl	801dc64 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801ddca:	2800      	cmp	r0, #0
 801ddcc:	d0ee      	beq.n	801ddac <ip4_input+0xac>
 801ddce:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ddd2:	2800      	cmp	r0, #0
 801ddd4:	d17e      	bne.n	801ded4 <ip4_input+0x1d4>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ddd6:	88fb      	ldrh	r3, [r7, #6]
 801ddd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801dddc:	b133      	cbz	r3, 801ddec <ip4_input+0xec>
    p = ip4_reass(p);
 801ddde:	4630      	mov	r0, r6
 801dde0:	f000 fb96 	bl	801e510 <ip4_reass>
    if (p == NULL) {
 801dde4:	4606      	mov	r6, r0
 801dde6:	2800      	cmp	r0, #0
 801dde8:	d0a3      	beq.n	801dd32 <ip4_input+0x32>
    iphdr = (const struct ip_hdr *)p->payload;
 801ddea:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 801ddec:	f8ca 9000 	str.w	r9, [sl]
  raw_status = raw_input(p, inp);
 801ddf0:	4641      	mov	r1, r8
  ip_data.current_input_netif = inp;
 801ddf2:	f8ca 8004 	str.w	r8, [sl, #4]
  raw_status = raw_input(p, inp);
 801ddf6:	4630      	mov	r0, r6
  ip_data.current_ip4_header = iphdr;
 801ddf8:	f8ca 7008 	str.w	r7, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ddfc:	783b      	ldrb	r3, [r7, #0]
 801ddfe:	f003 030f 	and.w	r3, r3, #15
 801de02:	009b      	lsls	r3, r3, #2
 801de04:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 801de08:	f7f8 fcec 	bl	80167e4 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 801de0c:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 801de0e:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 801de10:	d031      	beq.n	801de76 <ip4_input+0x176>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801de12:	4629      	mov	r1, r5
 801de14:	4630      	mov	r0, r6
 801de16:	f7f8 f8e5 	bl	8015fe4 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801de1a:	7a7b      	ldrb	r3, [r7, #9]
 801de1c:	2b06      	cmp	r3, #6
 801de1e:	f000 808b 	beq.w	801df38 <ip4_input+0x238>
 801de22:	2b11      	cmp	r3, #17
 801de24:	f000 8092 	beq.w	801df4c <ip4_input+0x24c>
 801de28:	2b01      	cmp	r3, #1
 801de2a:	f000 808a 	beq.w	801df42 <ip4_input+0x242>
        if (raw_status == RAW_INPUT_DELIVERED) {
 801de2e:	f1bb 0f02 	cmp.w	fp, #2
 801de32:	d01d      	beq.n	801de70 <ip4_input+0x170>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801de34:	4649      	mov	r1, r9
 801de36:	f8da 0014 	ldr.w	r0, [sl, #20]
 801de3a:	f000 f953 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801de3e:	b968      	cbnz	r0, 801de5c <ip4_input+0x15c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801de40:	f8da 3014 	ldr.w	r3, [sl, #20]
 801de44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801de48:	2be0      	cmp	r3, #224	; 0xe0
 801de4a:	d007      	beq.n	801de5c <ip4_input+0x15c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801de4c:	4629      	mov	r1, r5
 801de4e:	4630      	mov	r0, r6
 801de50:	f7f8 f8fc 	bl	801604c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801de54:	2102      	movs	r1, #2
 801de56:	4630      	mov	r0, r6
 801de58:	f7ff fef8 	bl	801dc4c <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 801de5c:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801de60:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 801de64:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 801de66:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 801de68:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801de6c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        pbuf_free(p);
 801de70:	4630      	mov	r0, r6
 801de72:	f7f8 f8f3 	bl	801605c <pbuf_free>
  ip_data.current_netif = NULL;
 801de76:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801de78:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 801de7c:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801de80:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801de84:	e9ca 3304 	strd	r3, r3, [sl, #16]
  return ERR_OK;
 801de88:	e753      	b.n	801dd32 <ip4_input+0x32>
    pbuf_free(p);
 801de8a:	4630      	mov	r0, r6
 801de8c:	f7f8 f8e6 	bl	801605c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801de90:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801de94:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
}
 801de98:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801de9a:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801de9c:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801de9e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801dea2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
}
 801dea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 801deaa:	4601      	mov	r1, r0
 801deac:	4630      	mov	r0, r6
 801deae:	f7f8 f9e1 	bl	8016274 <pbuf_realloc>
 801deb2:	e750      	b.n	801dd56 <ip4_input+0x56>
 801deb4:	4640      	mov	r0, r8
 801deb6:	f7ff fed5 	bl	801dc64 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 801deba:	b3d0      	cbz	r0, 801df32 <ip4_input+0x232>
 801debc:	f8da 0010 	ldr.w	r0, [sl, #16]
 801dec0:	46c1      	mov	r9, r8
 801dec2:	e786      	b.n	801ddd2 <ip4_input+0xd2>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801dec4:	7a7b      	ldrb	r3, [r7, #9]
 801dec6:	2b11      	cmp	r3, #17
 801dec8:	d023      	beq.n	801df12 <ip4_input+0x212>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801deca:	f8da 0010 	ldr.w	r0, [sl, #16]
 801dece:	b178      	cbz	r0, 801def0 <ip4_input+0x1f0>
 801ded0:	f04f 0900 	mov.w	r9, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ded4:	4641      	mov	r1, r8
 801ded6:	f000 f905 	bl	801e0e4 <ip4_addr_isbroadcast_u32>
 801deda:	bb08      	cbnz	r0, 801df20 <ip4_input+0x220>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801dedc:	f8da 3010 	ldr.w	r3, [sl, #16]
 801dee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dee4:	2be0      	cmp	r3, #224	; 0xe0
 801dee6:	d01b      	beq.n	801df20 <ip4_input+0x220>
  if (netif == NULL) {
 801dee8:	f1b9 0f00 	cmp.w	r9, #0
 801deec:	f47f af73 	bne.w	801ddd6 <ip4_input+0xd6>
      IP_STATS_INC(ip.drop);
 801def0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801def4:	4630      	mov	r0, r6
      IP_STATS_INC(ip.drop);
 801def6:	3301      	adds	r3, #1
 801def8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    pbuf_free(p);
 801defc:	f7f8 f8ae 	bl	801605c <pbuf_free>
    return ERR_OK;
 801df00:	e717      	b.n	801dd32 <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801df02:	2a00      	cmp	r2, #0
 801df04:	d0de      	beq.n	801dec4 <ip4_input+0x1c4>
 801df06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d0da      	beq.n	801dec4 <ip4_input+0x1c4>
 801df0e:	46c1      	mov	r9, r8
 801df10:	e75f      	b.n	801ddd2 <ip4_input+0xd2>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801df12:	197b      	adds	r3, r7, r5
 801df14:	885b      	ldrh	r3, [r3, #2]
 801df16:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801df1a:	d1d6      	bne.n	801deca <ip4_input+0x1ca>
 801df1c:	46c1      	mov	r9, r8
 801df1e:	e75a      	b.n	801ddd6 <ip4_input+0xd6>
      pbuf_free(p);
 801df20:	4630      	mov	r0, r6
 801df22:	f7f8 f89b 	bl	801605c <pbuf_free>
      IP_STATS_INC(ip.drop);
 801df26:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801df2a:	3301      	adds	r3, #1
 801df2c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      return ERR_OK;
 801df30:	e6ff      	b.n	801dd32 <ip4_input+0x32>
 801df32:	f8da 3014 	ldr.w	r3, [sl, #20]
 801df36:	e72e      	b.n	801dd96 <ip4_input+0x96>
        tcp_input(p, inp);
 801df38:	4641      	mov	r1, r8
 801df3a:	4630      	mov	r0, r6
 801df3c:	f7fa feca 	bl	8018cd4 <tcp_input>
        break;
 801df40:	e799      	b.n	801de76 <ip4_input+0x176>
        icmp_input(p, inp);
 801df42:	4641      	mov	r1, r8
 801df44:	4630      	mov	r0, r6
 801df46:	f7ff fd8d 	bl	801da64 <icmp_input>
        break;
 801df4a:	e794      	b.n	801de76 <ip4_input+0x176>
        udp_input(p, inp);
 801df4c:	4641      	mov	r1, r8
 801df4e:	4630      	mov	r0, r6
 801df50:	f7fd f98a 	bl	801b268 <udp_input>
        break;
 801df54:	e78f      	b.n	801de76 <ip4_input+0x176>
 801df56:	bf00      	nop
 801df58:	200361ec 	.word	0x200361ec
 801df5c:	200361e0 	.word	0x200361e0
 801df60:	20026a74 	.word	0x20026a74

0801df64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df68:	461c      	mov	r4, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801df6a:	7b83      	ldrb	r3, [r0, #14]
{
 801df6c:	b085      	sub	sp, #20
 801df6e:	4606      	mov	r6, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801df70:	2b01      	cmp	r3, #1
{
 801df72:	468a      	mov	sl, r1
 801df74:	4617      	mov	r7, r2
 801df76:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 801df7a:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
 801df7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801df82:	d15f      	bne.n	801e044 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801df84:	2f00      	cmp	r7, #0
 801df86:	d066      	beq.n	801e056 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801df88:	2114      	movs	r1, #20
 801df8a:	4630      	mov	r0, r6
 801df8c:	f7f8 f826 	bl	8015fdc <pbuf_add_header>
 801df90:	2800      	cmp	r0, #0
 801df92:	d17d      	bne.n	801e090 <ip4_output_if_src+0x12c>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801df94:	8973      	ldrh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801df96:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801df98:	2b13      	cmp	r3, #19
 801df9a:	d965      	bls.n	801e068 <ip4_output_if_src+0x104>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801df9c:	722c      	strb	r4, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801df9e:	ea4b 2404 	orr.w	r4, fp, r4, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801dfa2:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dfa6:	f04f 0c45 	mov.w	ip, #69	; 0x45
    ip4_addr_copy(iphdr->dest, *dest);
 801dfaa:	683b      	ldr	r3, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801dfac:	1221      	asrs	r1, r4, #8
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801dfae:	ea4f 2209 	mov.w	r2, r9, lsl #8
    IPH_TOS_SET(iphdr, tos);
 801dfb2:	f885 9001 	strb.w	r9, [r5, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801dfb6:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 801dfb8:	612b      	str	r3, [r5, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801dfba:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801dfbe:	ea42 020c 	orr.w	r2, r2, ip
 801dfc2:	fa10 f383 	uxtah	r3, r0, r3
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dfc6:	f885 c000 	strb.w	ip, [r5]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801dfca:	b2a1      	uxth	r1, r4
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dfcc:	8930      	ldrh	r0, [r6, #8]
 801dfce:	eb02 0903 	add.w	r9, r2, r3
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dfd2:	4c34      	ldr	r4, [pc, #208]	; (801e0a4 <ip4_output_if_src+0x140>)
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801dfd4:	9101      	str	r1, [sp, #4]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dfd6:	f7f6 f9d1 	bl	801437c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801dfda:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dfdc:	4683      	mov	fp, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dfde:	8820      	ldrh	r0, [r4, #0]
    IPH_OFFSET_SET(iphdr, 0);
 801dfe0:	71ab      	strb	r3, [r5, #6]
 801dfe2:	71eb      	strb	r3, [r5, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dfe4:	f8a5 b002 	strh.w	fp, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dfe8:	f7f6 f9c8 	bl	801437c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dfec:	8823      	ldrh	r3, [r4, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dfee:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 801dff0:	3301      	adds	r3, #1

    if (src == NULL) {
 801dff2:	9901      	ldr	r1, [sp, #4]
    ++ip_id;
 801dff4:	8023      	strh	r3, [r4, #0]
    if (src == NULL) {
 801dff6:	f1ba 0f00 	cmp.w	sl, #0
 801dffa:	d03d      	beq.n	801e078 <ip4_output_if_src+0x114>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dffc:	f8da 3000 	ldr.w	r3, [sl]
 801e000:	60eb      	str	r3, [r5, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801e002:	eb01 0409 	add.w	r4, r1, r9
 801e006:	445c      	add	r4, fp
 801e008:	4420      	add	r0, r4
 801e00a:	fa10 f083 	uxtah	r0, r0, r3
 801e00e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801e012:	b283      	uxth	r3, r0
 801e014:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801e018:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801e01c:	43c0      	mvns	r0, r0
 801e01e:	8168      	strh	r0, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801e020:	4a21      	ldr	r2, [pc, #132]	; (801e0a8 <ip4_output_if_src+0x144>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e022:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 801e026:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801e02a:	3301      	adds	r3, #1
 801e02c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801e030:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e032:	bb29      	cbnz	r1, 801e080 <ip4_output_if_src+0x11c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e034:	4631      	mov	r1, r6
 801e036:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801e03a:	4640      	mov	r0, r8
 801e03c:	4798      	blx	r3
}
 801e03e:	b005      	add	sp, #20
 801e040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e044:	4b19      	ldr	r3, [pc, #100]	; (801e0ac <ip4_output_if_src+0x148>)
 801e046:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e04a:	4919      	ldr	r1, [pc, #100]	; (801e0b0 <ip4_output_if_src+0x14c>)
 801e04c:	4819      	ldr	r0, [pc, #100]	; (801e0b4 <ip4_output_if_src+0x150>)
 801e04e:	f002 faa3 	bl	8020598 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801e052:	2f00      	cmp	r7, #0
 801e054:	d198      	bne.n	801df88 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801e056:	8973      	ldrh	r3, [r6, #10]
 801e058:	2b13      	cmp	r3, #19
 801e05a:	d919      	bls.n	801e090 <ip4_output_if_src+0x12c>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e05c:	6873      	ldr	r3, [r6, #4]
 801e05e:	af04      	add	r7, sp, #16
 801e060:	691b      	ldr	r3, [r3, #16]
 801e062:	f847 3d04 	str.w	r3, [r7, #-4]!
 801e066:	e7db      	b.n	801e020 <ip4_output_if_src+0xbc>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e068:	4b10      	ldr	r3, [pc, #64]	; (801e0ac <ip4_output_if_src+0x148>)
 801e06a:	f240 3289 	movw	r2, #905	; 0x389
 801e06e:	4912      	ldr	r1, [pc, #72]	; (801e0b8 <ip4_output_if_src+0x154>)
 801e070:	4810      	ldr	r0, [pc, #64]	; (801e0b4 <ip4_output_if_src+0x150>)
 801e072:	f002 fa91 	bl	8020598 <iprintf>
 801e076:	e791      	b.n	801df9c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e078:	4b10      	ldr	r3, [pc, #64]	; (801e0bc <ip4_output_if_src+0x158>)
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	60eb      	str	r3, [r5, #12]
 801e07e:	e7c0      	b.n	801e002 <ip4_output_if_src+0x9e>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e080:	8933      	ldrh	r3, [r6, #8]
 801e082:	428b      	cmp	r3, r1
 801e084:	d9d6      	bls.n	801e034 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
 801e086:	4641      	mov	r1, r8
 801e088:	4630      	mov	r0, r6
 801e08a:	f000 fc91 	bl	801e9b0 <ip4_frag>
 801e08e:	e7d6      	b.n	801e03e <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
 801e090:	4a05      	ldr	r2, [pc, #20]	; (801e0a8 <ip4_output_if_src+0x144>)
      return ERR_BUF;
 801e092:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801e096:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801e09a:	3301      	adds	r3, #1
 801e09c:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801e0a0:	e7cd      	b.n	801e03e <ip4_output_if_src+0xda>
 801e0a2:	bf00      	nop
 801e0a4:	20022742 	.word	0x20022742
 801e0a8:	200361ec 	.word	0x200361ec
 801e0ac:	0803f3a8 	.word	0x0803f3a8
 801e0b0:	0803f3dc 	.word	0x0803f3dc
 801e0b4:	08026544 	.word	0x08026544
 801e0b8:	0803f3e8 	.word	0x0803f3e8
 801e0bc:	0803f460 	.word	0x0803f460

0801e0c0 <ip4_output_if>:
{
 801e0c0:	b4f0      	push	{r4, r5, r6, r7}
 801e0c2:	9c06      	ldr	r4, [sp, #24]
 801e0c4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801e0c8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e0cc:	b11a      	cbz	r2, 801e0d6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801e0ce:	b109      	cbz	r1, 801e0d4 <ip4_output_if+0x14>
 801e0d0:	680f      	ldr	r7, [r1, #0]
 801e0d2:	b907      	cbnz	r7, 801e0d6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801e0d4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e0d6:	9504      	str	r5, [sp, #16]
 801e0d8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801e0dc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e0de:	f7ff bf41 	b.w	801df64 <ip4_output_if_src>
 801e0e2:	bf00      	nop

0801e0e4 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e0e4:	1e43      	subs	r3, r0, #1
 801e0e6:	3303      	adds	r3, #3
 801e0e8:	d814      	bhi.n	801e114 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e0ea:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801e0ee:	f013 0302 	ands.w	r3, r3, #2
 801e0f2:	d00d      	beq.n	801e110 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e0f4:	684b      	ldr	r3, [r1, #4]
 801e0f6:	4283      	cmp	r3, r0
 801e0f8:	d00a      	beq.n	801e110 <ip4_addr_isbroadcast_u32+0x2c>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e0fa:	688a      	ldr	r2, [r1, #8]
 801e0fc:	4043      	eors	r3, r0
 801e0fe:	4213      	tst	r3, r2
 801e100:	d106      	bne.n	801e110 <ip4_addr_isbroadcast_u32+0x2c>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e102:	43d2      	mvns	r2, r2
 801e104:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
 801e108:	bf0c      	ite	eq
 801e10a:	2001      	moveq	r0, #1
 801e10c:	2000      	movne	r0, #0
 801e10e:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801e110:	2000      	movs	r0, #0
  }
}
 801e112:	4770      	bx	lr
    return 1;
 801e114:	2001      	movs	r0, #1
 801e116:	4770      	bx	lr

0801e118 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e11c:	b087      	sub	sp, #28
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 801e11e:	f890 b000 	ldrb.w	fp, [r0]
{
 801e122:	4604      	mov	r4, r0
 801e124:	9101      	str	r1, [sp, #4]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801e126:	f001 fa55 	bl	801f5d4 <__locale_ctype_ptr>
 801e12a:	4458      	add	r0, fp
  u32_t *pp = parts;
 801e12c:	f10d 0a08 	add.w	sl, sp, #8
    if (!lwip_isdigit(c)) {
 801e130:	7842      	ldrb	r2, [r0, #1]
 801e132:	0751      	lsls	r1, r2, #29
 801e134:	d542      	bpl.n	801e1bc <ip4addr_aton+0xa4>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
 801e136:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 801e13a:	d044      	beq.n	801e1c6 <ip4addr_aton+0xae>
    base = 10;
 801e13c:	f04f 080a 	mov.w	r8, #10
 801e140:	4625      	mov	r5, r4
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 801e142:	2400      	movs	r4, #0
 801e144:	e004      	b.n	801e150 <ip4addr_aton+0x38>
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
 801e146:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
        c = *++cp;
 801e14a:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e14e:	3501      	adds	r5, #1
      if (lwip_isdigit(c)) {
 801e150:	f10b 0601 	add.w	r6, fp, #1
 801e154:	f001 fa3e 	bl	801f5d4 <__locale_ctype_ptr>
      } else if (base == 16 && lwip_isxdigit(c)) {
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e158:	f10b 070a 	add.w	r7, fp, #10
        val = (val * base) + (u32_t)(c - '0');
 801e15c:	fb04 b108 	mla	r1, r4, r8, fp
      if (lwip_isdigit(c)) {
 801e160:	5d82      	ldrb	r2, [r0, r6]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e162:	ea4f 1904 	mov.w	r9, r4, lsl #4
      if (lwip_isdigit(c)) {
 801e166:	0752      	lsls	r2, r2, #29
 801e168:	d4ed      	bmi.n	801e146 <ip4addr_aton+0x2e>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801e16a:	f1b8 0f10 	cmp.w	r8, #16
 801e16e:	d114      	bne.n	801e19a <ip4addr_aton+0x82>
 801e170:	f001 fa30 	bl	801f5d4 <__locale_ctype_ptr>
 801e174:	5d82      	ldrb	r2, [r0, r6]
 801e176:	f012 0f44 	tst.w	r2, #68	; 0x44
 801e17a:	d00e      	beq.n	801e19a <ip4addr_aton+0x82>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e17c:	f001 fa2a 	bl	801f5d4 <__locale_ctype_ptr>
 801e180:	5d82      	ldrb	r2, [r0, r6]
        c = *++cp;
 801e182:	f895 b001 	ldrb.w	fp, [r5, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801e186:	f002 0203 	and.w	r2, r2, #3
 801e18a:	2a02      	cmp	r2, #2
 801e18c:	bf0c      	ite	eq
 801e18e:	2461      	moveq	r4, #97	; 0x61
 801e190:	2441      	movne	r4, #65	; 0x41
 801e192:	1b3c      	subs	r4, r7, r4
 801e194:	ea44 0409 	orr.w	r4, r4, r9
 801e198:	e7d9      	b.n	801e14e <ip4addr_aton+0x36>
      } else {
        break;
      }
    }
    if (c == '.') {
 801e19a:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
 801e19e:	d122      	bne.n	801e1e6 <ip4addr_aton+0xce>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801e1a0:	ab05      	add	r3, sp, #20
 801e1a2:	459a      	cmp	sl, r3
 801e1a4:	d00a      	beq.n	801e1bc <ip4addr_aton+0xa4>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801e1a6:	f895 b001 	ldrb.w	fp, [r5, #1]
      *pp++ = val;
 801e1aa:	f84a 4b04 	str.w	r4, [sl], #4
    if (!lwip_isdigit(c)) {
 801e1ae:	f001 fa11 	bl	801f5d4 <__locale_ctype_ptr>
 801e1b2:	4458      	add	r0, fp
      c = *++cp;
 801e1b4:	1c6c      	adds	r4, r5, #1
    if (!lwip_isdigit(c)) {
 801e1b6:	7842      	ldrb	r2, [r0, #1]
 801e1b8:	0751      	lsls	r1, r2, #29
 801e1ba:	d4bc      	bmi.n	801e136 <ip4addr_aton+0x1e>
      return 0;
 801e1bc:	2300      	movs	r3, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801e1be:	4618      	mov	r0, r3
 801e1c0:	b007      	add	sp, #28
 801e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 801e1c6:	f894 b001 	ldrb.w	fp, [r4, #1]
      if (c == 'x' || c == 'X') {
 801e1ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e1ce:	2a58      	cmp	r2, #88	; 0x58
 801e1d0:	d003      	beq.n	801e1da <ip4addr_aton+0xc2>
      c = *++cp;
 801e1d2:	3401      	adds	r4, #1
        base = 8;
 801e1d4:	f04f 0808 	mov.w	r8, #8
 801e1d8:	e7b2      	b.n	801e140 <ip4addr_aton+0x28>
        c = *++cp;
 801e1da:	f894 b002 	ldrb.w	fp, [r4, #2]
        base = 16;
 801e1de:	f04f 0810 	mov.w	r8, #16
        c = *++cp;
 801e1e2:	3402      	adds	r4, #2
 801e1e4:	e7ac      	b.n	801e140 <ip4addr_aton+0x28>
  if (c != '\0' && !lwip_isspace(c)) {
 801e1e6:	f1bb 0f00 	cmp.w	fp, #0
 801e1ea:	d12c      	bne.n	801e246 <ip4addr_aton+0x12e>
  switch (pp - parts + 1) {
 801e1ec:	ab02      	add	r3, sp, #8
 801e1ee:	ebaa 0303 	sub.w	r3, sl, r3
 801e1f2:	109b      	asrs	r3, r3, #2
 801e1f4:	3301      	adds	r3, #1
 801e1f6:	2b04      	cmp	r3, #4
 801e1f8:	d844      	bhi.n	801e284 <ip4addr_aton+0x16c>
 801e1fa:	a201      	add	r2, pc, #4	; (adr r2, 801e200 <ip4addr_aton+0xe8>)
 801e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e200:	0801e1bf 	.word	0x0801e1bf
 801e204:	0801e237 	.word	0x0801e237
 801e208:	0801e273 	.word	0x0801e273
 801e20c:	0801e257 	.word	0x0801e257
 801e210:	0801e215 	.word	0x0801e215
      if (val > 0xff) {
 801e214:	2cff      	cmp	r4, #255	; 0xff
 801e216:	d8d1      	bhi.n	801e1bc <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801e218:	9902      	ldr	r1, [sp, #8]
 801e21a:	29ff      	cmp	r1, #255	; 0xff
 801e21c:	d8ce      	bhi.n	801e1bc <ip4addr_aton+0xa4>
 801e21e:	9b03      	ldr	r3, [sp, #12]
 801e220:	2bff      	cmp	r3, #255	; 0xff
 801e222:	d8cb      	bhi.n	801e1bc <ip4addr_aton+0xa4>
 801e224:	9a04      	ldr	r2, [sp, #16]
 801e226:	2aff      	cmp	r2, #255	; 0xff
 801e228:	d8c8      	bhi.n	801e1bc <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801e22a:	041b      	lsls	r3, r3, #16
 801e22c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801e230:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e234:	431c      	orrs	r4, r3
  if (addr) {
 801e236:	9d01      	ldr	r5, [sp, #4]
 801e238:	b15d      	cbz	r5, 801e252 <ip4addr_aton+0x13a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e23a:	4620      	mov	r0, r4
 801e23c:	f7f6 f8a2 	bl	8014384 <lwip_htonl>
  return 1;
 801e240:	2301      	movs	r3, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e242:	6028      	str	r0, [r5, #0]
 801e244:	e7bb      	b.n	801e1be <ip4addr_aton+0xa6>
  if (c != '\0' && !lwip_isspace(c)) {
 801e246:	f001 f9c5 	bl	801f5d4 <__locale_ctype_ptr>
 801e24a:	5d83      	ldrb	r3, [r0, r6]
 801e24c:	071b      	lsls	r3, r3, #28
 801e24e:	d4cd      	bmi.n	801e1ec <ip4addr_aton+0xd4>
 801e250:	e7b4      	b.n	801e1bc <ip4addr_aton+0xa4>
  return 1;
 801e252:	2301      	movs	r3, #1
 801e254:	e7b3      	b.n	801e1be <ip4addr_aton+0xa6>
      if (val > 0xffff) {
 801e256:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801e25a:	d2af      	bcs.n	801e1bc <ip4addr_aton+0xa4>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801e25c:	9a02      	ldr	r2, [sp, #8]
 801e25e:	2aff      	cmp	r2, #255	; 0xff
 801e260:	d8ac      	bhi.n	801e1bc <ip4addr_aton+0xa4>
 801e262:	9b03      	ldr	r3, [sp, #12]
 801e264:	2bff      	cmp	r3, #255	; 0xff
 801e266:	d8a9      	bhi.n	801e1bc <ip4addr_aton+0xa4>
      val |= (parts[0] << 24) | (parts[1] << 16);
 801e268:	041b      	lsls	r3, r3, #16
 801e26a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e26e:	431c      	orrs	r4, r3
      break;
 801e270:	e7e1      	b.n	801e236 <ip4addr_aton+0x11e>
      if (val > 0xffffffUL) {
 801e272:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801e276:	d2a1      	bcs.n	801e1bc <ip4addr_aton+0xa4>
      if (parts[0] > 0xff) {
 801e278:	9b02      	ldr	r3, [sp, #8]
 801e27a:	2bff      	cmp	r3, #255	; 0xff
 801e27c:	d89e      	bhi.n	801e1bc <ip4addr_aton+0xa4>
      val |= parts[0] << 24;
 801e27e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 801e282:	e7d8      	b.n	801e236 <ip4addr_aton+0x11e>
      LWIP_ASSERT("unhandled", 0);
 801e284:	4b03      	ldr	r3, [pc, #12]	; (801e294 <ip4addr_aton+0x17c>)
 801e286:	22f9      	movs	r2, #249	; 0xf9
 801e288:	4903      	ldr	r1, [pc, #12]	; (801e298 <ip4addr_aton+0x180>)
 801e28a:	4804      	ldr	r0, [pc, #16]	; (801e29c <ip4addr_aton+0x184>)
 801e28c:	f002 f984 	bl	8020598 <iprintf>
      break;
 801e290:	e7d1      	b.n	801e236 <ip4addr_aton+0x11e>
 801e292:	bf00      	nop
 801e294:	0803f418 	.word	0x0803f418
 801e298:	0803f454 	.word	0x0803f454
 801e29c:	08026544 	.word	0x08026544

0801e2a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e2a0:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e2a2:	4b0f      	ldr	r3, [pc, #60]	; (801e2e0 <ip_reass_dequeue_datagram+0x40>)
{
 801e2a4:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801e2a6:	681a      	ldr	r2, [r3, #0]
 801e2a8:	4282      	cmp	r2, r0
 801e2aa:	d009      	beq.n	801e2c0 <ip_reass_dequeue_datagram+0x20>
 801e2ac:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e2ae:	b179      	cbz	r1, 801e2d0 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801e2b0:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e2b2:	4621      	mov	r1, r4
 801e2b4:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801e2b6:	602b      	str	r3, [r5, #0]
}
 801e2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e2bc:	f7f7 bbf4 	b.w	8015aa8 <memp_free>
    reassdatagrams = ipr->next;
 801e2c0:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801e2c2:	4621      	mov	r1, r4
 801e2c4:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801e2c6:	601a      	str	r2, [r3, #0]
}
 801e2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801e2cc:	f7f7 bbec 	b.w	8015aa8 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e2d0:	4b04      	ldr	r3, [pc, #16]	; (801e2e4 <ip_reass_dequeue_datagram+0x44>)
 801e2d2:	f240 1245 	movw	r2, #325	; 0x145
 801e2d6:	4904      	ldr	r1, [pc, #16]	; (801e2e8 <ip_reass_dequeue_datagram+0x48>)
 801e2d8:	4804      	ldr	r0, [pc, #16]	; (801e2ec <ip_reass_dequeue_datagram+0x4c>)
 801e2da:	f002 f95d 	bl	8020598 <iprintf>
 801e2de:	e7e7      	b.n	801e2b0 <ip_reass_dequeue_datagram+0x10>
 801e2e0:	20022748 	.word	0x20022748
 801e2e4:	0803f544 	.word	0x0803f544
 801e2e8:	0803f580 	.word	0x0803f580
 801e2ec:	08026544 	.word	0x08026544

0801e2f0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e2f0:	4281      	cmp	r1, r0
{
 801e2f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f6:	4606      	mov	r6, r0
 801e2f8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e2fa:	d06b      	beq.n	801e3d4 <ip_reass_free_complete_datagram+0xe4>
  if (prev != NULL) {
 801e2fc:	b147      	cbz	r7, 801e310 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e2fe:	683b      	ldr	r3, [r7, #0]
 801e300:	42b3      	cmp	r3, r6
 801e302:	d005      	beq.n	801e310 <ip_reass_free_complete_datagram+0x20>
 801e304:	4b37      	ldr	r3, [pc, #220]	; (801e3e4 <ip_reass_free_complete_datagram+0xf4>)
 801e306:	22ad      	movs	r2, #173	; 0xad
 801e308:	4937      	ldr	r1, [pc, #220]	; (801e3e8 <ip_reass_free_complete_datagram+0xf8>)
 801e30a:	4838      	ldr	r0, [pc, #224]	; (801e3ec <ip_reass_free_complete_datagram+0xfc>)
 801e30c:	f002 f944 	bl	8020598 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e310:	6874      	ldr	r4, [r6, #4]
 801e312:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801e314:	889a      	ldrh	r2, [r3, #4]
 801e316:	2a00      	cmp	r2, #0
 801e318:	d039      	beq.n	801e38e <ip_reass_free_complete_datagram+0x9e>
  u16_t pbufs_freed = 0;
 801e31a:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e31e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e3e4 <ip_reass_free_complete_datagram+0xf4>
 801e322:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801e3fc <ip_reass_free_complete_datagram+0x10c>
 801e326:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801e3ec <ip_reass_free_complete_datagram+0xfc>
 801e32a:	e004      	b.n	801e336 <ip_reass_free_complete_datagram+0x46>
    pbuf_free(pcur);
 801e32c:	4620      	mov	r0, r4
  while (p != NULL) {
 801e32e:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e330:	f7f7 fe94 	bl	801605c <pbuf_free>
  while (p != NULL) {
 801e334:	b1b5      	cbz	r5, 801e364 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801e336:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801e338:	4620      	mov	r0, r4
    p = iprh->next_pbuf;
 801e33a:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 801e33c:	f7f7 fff6 	bl	801632c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e340:	4483      	add	fp, r0
 801e342:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e346:	fa1f fb8b 	uxth.w	fp, fp
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e34a:	dbef      	blt.n	801e32c <ip_reass_free_complete_datagram+0x3c>
 801e34c:	4653      	mov	r3, sl
 801e34e:	22cc      	movs	r2, #204	; 0xcc
 801e350:	4649      	mov	r1, r9
 801e352:	4640      	mov	r0, r8
 801e354:	f002 f920 	bl	8020598 <iprintf>
    pbuf_free(pcur);
 801e358:	4620      	mov	r0, r4
  while (p != NULL) {
 801e35a:	462c      	mov	r4, r5
    pbuf_free(pcur);
 801e35c:	f7f7 fe7e 	bl	801605c <pbuf_free>
  while (p != NULL) {
 801e360:	2d00      	cmp	r5, #0
 801e362:	d1e8      	bne.n	801e336 <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e364:	4c22      	ldr	r4, [pc, #136]	; (801e3f0 <ip_reass_free_complete_datagram+0x100>)
  ip_reass_dequeue_datagram(ipr, prev);
 801e366:	4639      	mov	r1, r7
 801e368:	4630      	mov	r0, r6
 801e36a:	f7ff ff99 	bl	801e2a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e36e:	8823      	ldrh	r3, [r4, #0]
 801e370:	455b      	cmp	r3, fp
 801e372:	d206      	bcs.n	801e382 <ip_reass_free_complete_datagram+0x92>
 801e374:	4b1b      	ldr	r3, [pc, #108]	; (801e3e4 <ip_reass_free_complete_datagram+0xf4>)
 801e376:	22d2      	movs	r2, #210	; 0xd2
 801e378:	491e      	ldr	r1, [pc, #120]	; (801e3f4 <ip_reass_free_complete_datagram+0x104>)
 801e37a:	481c      	ldr	r0, [pc, #112]	; (801e3ec <ip_reass_free_complete_datagram+0xfc>)
 801e37c:	f002 f90c 	bl	8020598 <iprintf>
 801e380:	8823      	ldrh	r3, [r4, #0]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e382:	eba3 030b 	sub.w	r3, r3, fp
}
 801e386:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e388:	8023      	strh	r3, [r4, #0]
}
 801e38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e38e:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801e390:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e392:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801e394:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e396:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e398:	f852 5f08 	ldr.w	r5, [r2, #8]!
 801e39c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e3a0:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801e3a4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801e3a8:	601d      	str	r5, [r3, #0]
 801e3aa:	f8c3 8004 	str.w	r8, [r3, #4]
 801e3ae:	f8c3 e008 	str.w	lr, [r3, #8]
 801e3b2:	f8c3 c00c 	str.w	ip, [r3, #12]
 801e3b6:	6915      	ldr	r5, [r2, #16]
 801e3b8:	611d      	str	r5, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e3ba:	f7ff fc4d 	bl	801dc58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e3be:	4620      	mov	r0, r4
 801e3c0:	f7f7 ffb4 	bl	801632c <pbuf_clen>
 801e3c4:	4683      	mov	fp, r0
    pbuf_free(p);
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f7f7 fe48 	bl	801605c <pbuf_free>
 801e3cc:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 801e3ce:	2c00      	cmp	r4, #0
 801e3d0:	d1a5      	bne.n	801e31e <ip_reass_free_complete_datagram+0x2e>
 801e3d2:	e7c7      	b.n	801e364 <ip_reass_free_complete_datagram+0x74>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e3d4:	4b03      	ldr	r3, [pc, #12]	; (801e3e4 <ip_reass_free_complete_datagram+0xf4>)
 801e3d6:	22ab      	movs	r2, #171	; 0xab
 801e3d8:	4907      	ldr	r1, [pc, #28]	; (801e3f8 <ip_reass_free_complete_datagram+0x108>)
 801e3da:	4804      	ldr	r0, [pc, #16]	; (801e3ec <ip_reass_free_complete_datagram+0xfc>)
 801e3dc:	f002 f8dc 	bl	8020598 <iprintf>
 801e3e0:	e78c      	b.n	801e2fc <ip_reass_free_complete_datagram+0xc>
 801e3e2:	bf00      	nop
 801e3e4:	0803f544 	.word	0x0803f544
 801e3e8:	0803f5a8 	.word	0x0803f5a8
 801e3ec:	08026544 	.word	0x08026544
 801e3f0:	20022744 	.word	0x20022744
 801e3f4:	0803f5dc 	.word	0x0803f5dc
 801e3f8:	0803f59c 	.word	0x0803f59c
 801e3fc:	0803f5bc 	.word	0x0803f5bc

0801e400 <ip_reass_remove_oldest_datagram>:
{
 801e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e404:	4605      	mov	r5, r0
 801e406:	460e      	mov	r6, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801e408:	2700      	movs	r7, #0
 801e40a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801e470 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801e40e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801e412:	b1f3      	cbz	r3, 801e452 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801e414:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e416:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801e41a:	4621      	mov	r1, r4
    prev = NULL;
 801e41c:	46a4      	mov	ip, r4
    oldest = NULL;
 801e41e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e420:	695a      	ldr	r2, [r3, #20]
 801e422:	4572      	cmp	r2, lr
 801e424:	d018      	beq.n	801e458 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801e426:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801e428:	b120      	cbz	r0, 801e434 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801e42a:	f893 901f 	ldrb.w	r9, [r3, #31]
 801e42e:	7fc2      	ldrb	r2, [r0, #31]
 801e430:	4591      	cmp	r9, r2
 801e432:	d801      	bhi.n	801e438 <ip_reass_remove_oldest_datagram+0x38>
 801e434:	4661      	mov	r1, ip
 801e436:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801e438:	681a      	ldr	r2, [r3, #0]
 801e43a:	469c      	mov	ip, r3
 801e43c:	4613      	mov	r3, r2
 801e43e:	2a00      	cmp	r2, #0
 801e440:	d1ee      	bne.n	801e420 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801e442:	b110      	cbz	r0, 801e44a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e444:	f7ff ff54 	bl	801e2f0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801e448:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e44a:	42b7      	cmp	r7, r6
 801e44c:	da01      	bge.n	801e452 <ip_reass_remove_oldest_datagram+0x52>
 801e44e:	2c01      	cmp	r4, #1
 801e450:	dcdd      	bgt.n	801e40e <ip_reass_remove_oldest_datagram+0xe>
}
 801e452:	4638      	mov	r0, r7
 801e454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e458:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801e45c:	699a      	ldr	r2, [r3, #24]
 801e45e:	454a      	cmp	r2, r9
 801e460:	d1e1      	bne.n	801e426 <ip_reass_remove_oldest_datagram+0x26>
 801e462:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801e466:	88aa      	ldrh	r2, [r5, #4]
 801e468:	4591      	cmp	r9, r2
 801e46a:	d1dc      	bne.n	801e426 <ip_reass_remove_oldest_datagram+0x26>
 801e46c:	e7e4      	b.n	801e438 <ip_reass_remove_oldest_datagram+0x38>
 801e46e:	bf00      	nop
 801e470:	20022748 	.word	0x20022748

0801e474 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e474:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801e476:	4604      	mov	r4, r0
 801e478:	b128      	cbz	r0, 801e486 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801e47a:	4621      	mov	r1, r4
 801e47c:	2006      	movs	r0, #6
}
 801e47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801e482:	f7f7 bb11 	b.w	8015aa8 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801e486:	4906      	ldr	r1, [pc, #24]	; (801e4a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e488:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e48c:	4b05      	ldr	r3, [pc, #20]	; (801e4a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e48e:	4806      	ldr	r0, [pc, #24]	; (801e4a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e490:	f002 f882 	bl	8020598 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e494:	4621      	mov	r1, r4
 801e496:	2006      	movs	r0, #6
}
 801e498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801e49c:	f7f7 bb04 	b.w	8015aa8 <memp_free>
 801e4a0:	0803ee14 	.word	0x0803ee14
 801e4a4:	0803f544 	.word	0x0803f544
 801e4a8:	08026544 	.word	0x08026544

0801e4ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e4ac:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e4ae:	4604      	mov	r4, r0
 801e4b0:	b140      	cbz	r0, 801e4c4 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801e4b2:	6960      	ldr	r0, [r4, #20]
 801e4b4:	b108      	cbz	r0, 801e4ba <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801e4b6:	f7f7 fdd1 	bl	801605c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e4ba:	4620      	mov	r0, r4
}
 801e4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801e4c0:	f7ff bfd8 	b.w	801e474 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e4c4:	4b03      	ldr	r3, [pc, #12]	; (801e4d4 <ipfrag_free_pbuf_custom+0x28>)
 801e4c6:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e4ca:	4903      	ldr	r1, [pc, #12]	; (801e4d8 <ipfrag_free_pbuf_custom+0x2c>)
 801e4cc:	4803      	ldr	r0, [pc, #12]	; (801e4dc <ipfrag_free_pbuf_custom+0x30>)
 801e4ce:	f002 f863 	bl	8020598 <iprintf>
 801e4d2:	e7ee      	b.n	801e4b2 <ipfrag_free_pbuf_custom+0x6>
 801e4d4:	0803f544 	.word	0x0803f544
 801e4d8:	0803f600 	.word	0x0803f600
 801e4dc:	08026544 	.word	0x08026544

0801e4e0 <ip_reass_tmr>:
{
 801e4e0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801e4e2:	4b0a      	ldr	r3, [pc, #40]	; (801e50c <ip_reass_tmr+0x2c>)
 801e4e4:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801e4e6:	b180      	cbz	r0, 801e50a <ip_reass_tmr+0x2a>
  struct ip_reassdata *r, *prev = NULL;
 801e4e8:	2500      	movs	r5, #0
 801e4ea:	e003      	b.n	801e4f4 <ip_reass_tmr+0x14>
 801e4ec:	4605      	mov	r5, r0
      r->timer--;
 801e4ee:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	b154      	cbz	r4, 801e50a <ip_reass_tmr+0x2a>
    if (r->timer > 0) {
 801e4f4:	7fc3      	ldrb	r3, [r0, #31]
 801e4f6:	6804      	ldr	r4, [r0, #0]
      r->timer--;
 801e4f8:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d1f6      	bne.n	801e4ec <ip_reass_tmr+0xc>
      ip_reass_free_complete_datagram(tmp, prev);
 801e4fe:	4629      	mov	r1, r5
 801e500:	f7ff fef6 	bl	801e2f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e504:	4620      	mov	r0, r4
 801e506:	2c00      	cmp	r4, #0
 801e508:	d1f4      	bne.n	801e4f4 <ip_reass_tmr+0x14>
}
 801e50a:	bd38      	pop	{r3, r4, r5, pc}
 801e50c:	20022748 	.word	0x20022748

0801e510 <ip4_reass>:
{
 801e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801e514:	4eb7      	ldr	r6, [pc, #732]	; (801e7f4 <ip4_reass+0x2e4>)
{
 801e516:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 801e518:	6845      	ldr	r5, [r0, #4]
{
 801e51a:	4680      	mov	r8, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801e51c:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801e51e:	3301      	adds	r3, #1
 801e520:	8673      	strh	r3, [r6, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e522:	782b      	ldrb	r3, [r5, #0]
 801e524:	f003 030f 	and.w	r3, r3, #15
 801e528:	2b05      	cmp	r3, #5
 801e52a:	f040 80f8 	bne.w	801e71e <ip4_reass+0x20e>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e52e:	88e8      	ldrh	r0, [r5, #6]
 801e530:	f7f5 ff24 	bl	801437c <lwip_htons>
 801e534:	f3c0 030c 	ubfx	r3, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e538:	8868      	ldrh	r0, [r5, #2]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e53a:	00db      	lsls	r3, r3, #3
 801e53c:	9301      	str	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e53e:	f7f5 ff1d 	bl	801437c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801e542:	782b      	ldrb	r3, [r5, #0]
 801e544:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801e548:	009b      	lsls	r3, r3, #2
 801e54a:	4283      	cmp	r3, r0
 801e54c:	f200 80dc 	bhi.w	801e708 <ip4_reass+0x1f8>
  len = (u16_t)(len - hlen);
 801e550:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e552:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 801e808 <ip4_reass+0x2f8>
  clen = pbuf_clen(p);
 801e556:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 801e558:	b29b      	uxth	r3, r3
 801e55a:	9302      	str	r3, [sp, #8]
  clen = pbuf_clen(p);
 801e55c:	f7f7 fee6 	bl	801632c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e560:	f8ba 3000 	ldrh.w	r3, [sl]
  clen = pbuf_clen(p);
 801e564:	4683      	mov	fp, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e566:	4403      	add	r3, r0
 801e568:	2b0a      	cmp	r3, #10
 801e56a:	f300 80de 	bgt.w	801e72a <ip4_reass+0x21a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e56e:	4ba2      	ldr	r3, [pc, #648]	; (801e7f8 <ip4_reass+0x2e8>)
 801e570:	681c      	ldr	r4, [r3, #0]
 801e572:	2c00      	cmp	r4, #0
 801e574:	f000 8094 	beq.w	801e6a0 <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e578:	68ea      	ldr	r2, [r5, #12]
 801e57a:	e003      	b.n	801e584 <ip4_reass+0x74>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e57c:	6824      	ldr	r4, [r4, #0]
 801e57e:	2c00      	cmp	r4, #0
 801e580:	f000 808e 	beq.w	801e6a0 <ip4_reass+0x190>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e584:	6963      	ldr	r3, [r4, #20]
 801e586:	4293      	cmp	r3, r2
 801e588:	d1f8      	bne.n	801e57c <ip4_reass+0x6c>
 801e58a:	692b      	ldr	r3, [r5, #16]
 801e58c:	69a1      	ldr	r1, [r4, #24]
 801e58e:	4299      	cmp	r1, r3
 801e590:	d1f4      	bne.n	801e57c <ip4_reass+0x6c>
 801e592:	89a1      	ldrh	r1, [r4, #12]
 801e594:	88ab      	ldrh	r3, [r5, #4]
 801e596:	4299      	cmp	r1, r3
 801e598:	d1f0      	bne.n	801e57c <ip4_reass+0x6c>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e59a:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
 801e59e:	3301      	adds	r3, #1
 801e5a0:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5a4:	88e8      	ldrh	r0, [r5, #6]
 801e5a6:	f7f5 fee9 	bl	801437c <lwip_htons>
 801e5aa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e5ae:	2800      	cmp	r0, #0
 801e5b0:	f000 810d 	beq.w	801e7ce <ip4_reass+0x2be>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e5b4:	88eb      	ldrh	r3, [r5, #6]
  if (is_last) {
 801e5b6:	f013 0320 	ands.w	r3, r3, #32
 801e5ba:	9303      	str	r3, [sp, #12]
 801e5bc:	d10b      	bne.n	801e5d6 <ip4_reass+0xc6>
    u16_t datagram_len = (u16_t)(offset + len);
 801e5be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e5c2:	18d3      	adds	r3, r2, r3
 801e5c4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e5c6:	429a      	cmp	r2, r3
 801e5c8:	f200 808d 	bhi.w	801e6e6 <ip4_reass+0x1d6>
 801e5cc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e5d0:	4293      	cmp	r3, r2
 801e5d2:	f200 8088 	bhi.w	801e6e6 <ip4_reass+0x1d6>
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e5d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e5da:	8868      	ldrh	r0, [r5, #2]
 801e5dc:	f7f5 fece 	bl	801437c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801e5e0:	782b      	ldrb	r3, [r5, #0]
 801e5e2:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801e5e6:	009b      	lsls	r3, r3, #2
 801e5e8:	4298      	cmp	r0, r3
 801e5ea:	d37c      	bcc.n	801e6e6 <ip4_reass+0x1d6>
  len = (u16_t)(len - hlen);
 801e5ec:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e5ee:	88e8      	ldrh	r0, [r5, #6]
  len = (u16_t)(len - hlen);
 801e5f0:	b29d      	uxth	r5, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e5f2:	f7f5 fec3 	bl	801437c <lwip_htons>
 801e5f6:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e5fa:	f8d8 9004 	ldr.w	r9, [r8, #4]
  iprh->next_pbuf = NULL;
 801e5fe:	2200      	movs	r2, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e600:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 801e602:	f889 2000 	strb.w	r2, [r9]
  iprh->end = (u16_t)(offset + len);
 801e606:	eb05 0c00 	add.w	ip, r5, r0
  iprh->next_pbuf = NULL;
 801e60a:	f889 2001 	strb.w	r2, [r9, #1]
 801e60e:	f889 2002 	strb.w	r2, [r9, #2]
  iprh->end = (u16_t)(offset + len);
 801e612:	fa1f fc8c 	uxth.w	ip, ip
  iprh->next_pbuf = NULL;
 801e616:	f889 2003 	strb.w	r2, [r9, #3]
  iprh->start = offset;
 801e61a:	f8a9 0004 	strh.w	r0, [r9, #4]
  if (iprh->end < offset) {
 801e61e:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 801e620:	f8a9 c006 	strh.w	ip, [r9, #6]
 801e624:	6863      	ldr	r3, [r4, #4]
  if (iprh->end < offset) {
 801e626:	d85f      	bhi.n	801e6e8 <ip4_reass+0x1d8>
  for (q = ipr->p; q != NULL;) {
 801e628:	2b00      	cmp	r3, #0
 801e62a:	f000 818c 	beq.w	801e946 <ip4_reass+0x436>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e62e:	685d      	ldr	r5, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 801e630:	88aa      	ldrh	r2, [r5, #4]
 801e632:	4290      	cmp	r0, r2
 801e634:	f0c0 80b9 	bcc.w	801e7aa <ip4_reass+0x29a>
    } else if (iprh->start == iprh_tmp->start) {
 801e638:	d066      	beq.n	801e708 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801e63a:	88eb      	ldrh	r3, [r5, #6]
 801e63c:	4283      	cmp	r3, r0
 801e63e:	d863      	bhi.n	801e708 <ip4_reass+0x1f8>
    q = iprh_tmp->next_pbuf;
 801e640:	682a      	ldr	r2, [r5, #0]
  int valid = 1;
 801e642:	2701      	movs	r7, #1
  for (q = ipr->p; q != NULL;) {
 801e644:	b182      	cbz	r2, 801e668 <ip4_reass+0x158>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e646:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 801e648:	8899      	ldrh	r1, [r3, #4]
 801e64a:	4288      	cmp	r0, r1
 801e64c:	f0c0 808c 	bcc.w	801e768 <ip4_reass+0x258>
    } else if (iprh->start == iprh_tmp->start) {
 801e650:	d05a      	beq.n	801e708 <ip4_reass+0x1f8>
    } else if (iprh->start < iprh_tmp->end) {
 801e652:	88da      	ldrh	r2, [r3, #6]
 801e654:	4282      	cmp	r2, r0
 801e656:	d857      	bhi.n	801e708 <ip4_reass+0x1f8>
        if (iprh_prev->end != iprh_tmp->start) {
 801e658:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 801e65a:	461d      	mov	r5, r3
 801e65c:	428a      	cmp	r2, r1
 801e65e:	bf18      	it	ne
 801e660:	2700      	movne	r7, #0
    q = iprh_tmp->next_pbuf;
 801e662:	682a      	ldr	r2, [r5, #0]
  for (q = ipr->p; q != NULL;) {
 801e664:	2a00      	cmp	r2, #0
 801e666:	d1ee      	bne.n	801e646 <ip4_reass+0x136>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e668:	88eb      	ldrh	r3, [r5, #6]
 801e66a:	4298      	cmp	r0, r3
 801e66c:	f0c0 8179 	bcc.w	801e962 <ip4_reass+0x452>
      if (iprh_prev->end != iprh->start) {
 801e670:	4298      	cmp	r0, r3
      iprh_prev->next_pbuf = new_p;
 801e672:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 801e676:	f000 8082 	beq.w	801e77e <ip4_reass+0x26e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e67a:	9b03      	ldr	r3, [sp, #12]
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	f040 813a 	bne.w	801e8f6 <ip4_reass+0x3e6>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e682:	f8ba 3000 	ldrh.w	r3, [sl]
 801e686:	449b      	add	fp, r3
 801e688:	f8aa b000 	strh.w	fp, [sl]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e68c:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801e68e:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e692:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801e696:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e698:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801e69a:	83a2      	strh	r2, [r4, #28]
  return NULL;
 801e69c:	2700      	movs	r7, #0
 801e69e:	e03a      	b.n	801e716 <ip4_reass+0x206>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e6a0:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801e6a4:	4955      	ldr	r1, [pc, #340]	; (801e7fc <ip4_reass+0x2ec>)
 801e6a6:	2005      	movs	r0, #5
 801e6a8:	f7f7 f9da 	bl	8015a60 <memp_malloc_fn>
  if (ipr == NULL) {
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	2800      	cmp	r0, #0
 801e6b0:	d04a      	beq.n	801e748 <ip4_reass+0x238>
  ipr->next = reassdatagrams;
 801e6b2:	4951      	ldr	r1, [pc, #324]	; (801e7f8 <ip4_reass+0x2e8>)
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e6b4:	2200      	movs	r2, #0
  ipr->timer = IP_REASS_MAXAGE;
 801e6b6:	270f      	movs	r7, #15
  ipr->next = reassdatagrams;
 801e6b8:	6809      	ldr	r1, [r1, #0]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e6ba:	60a2      	str	r2, [r4, #8]
 801e6bc:	60e2      	str	r2, [r4, #12]
 801e6be:	6122      	str	r2, [r4, #16]
 801e6c0:	6162      	str	r2, [r4, #20]
 801e6c2:	61a2      	str	r2, [r4, #24]
 801e6c4:	61e2      	str	r2, [r4, #28]
 801e6c6:	6062      	str	r2, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801e6c8:	77e7      	strb	r7, [r4, #31]
  ipr->next = reassdatagrams;
 801e6ca:	6021      	str	r1, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e6cc:	682b      	ldr	r3, [r5, #0]
 801e6ce:	68a9      	ldr	r1, [r5, #8]
 801e6d0:	686f      	ldr	r7, [r5, #4]
 801e6d2:	68ea      	ldr	r2, [r5, #12]
 801e6d4:	6121      	str	r1, [r4, #16]
 801e6d6:	60a3      	str	r3, [r4, #8]
 801e6d8:	60e7      	str	r7, [r4, #12]
 801e6da:	6162      	str	r2, [r4, #20]
  reassdatagrams = ipr;
 801e6dc:	4946      	ldr	r1, [pc, #280]	; (801e7f8 <ip4_reass+0x2e8>)
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e6de:	692b      	ldr	r3, [r5, #16]
  reassdatagrams = ipr;
 801e6e0:	600c      	str	r4, [r1, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e6e2:	61a3      	str	r3, [r4, #24]
 801e6e4:	e766      	b.n	801e5b4 <ip4_reass+0xa4>
 801e6e6:	6863      	ldr	r3, [r4, #4]
  if (ipr->p == NULL) {
 801e6e8:	b973      	cbnz	r3, 801e708 <ip4_reass+0x1f8>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e6ea:	4b43      	ldr	r3, [pc, #268]	; (801e7f8 <ip4_reass+0x2e8>)
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	429c      	cmp	r4, r3
 801e6f0:	d006      	beq.n	801e700 <ip4_reass+0x1f0>
 801e6f2:	4b42      	ldr	r3, [pc, #264]	; (801e7fc <ip4_reass+0x2ec>)
 801e6f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e6f8:	4941      	ldr	r1, [pc, #260]	; (801e800 <ip4_reass+0x2f0>)
 801e6fa:	4842      	ldr	r0, [pc, #264]	; (801e804 <ip4_reass+0x2f4>)
 801e6fc:	f001 ff4c 	bl	8020598 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e700:	4620      	mov	r0, r4
 801e702:	2100      	movs	r1, #0
 801e704:	f7ff fdcc 	bl	801e2a0 <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 801e708:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801e70a:	4640      	mov	r0, r8
  return NULL;
 801e70c:	2700      	movs	r7, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801e70e:	3301      	adds	r3, #1
 801e710:	86f3      	strh	r3, [r6, #54]	; 0x36
  pbuf_free(p);
 801e712:	f7f7 fca3 	bl	801605c <pbuf_free>
}
 801e716:	4638      	mov	r0, r7
 801e718:	b005      	add	sp, #20
 801e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 801e71e:	f8b6 3044 	ldrh.w	r3, [r6, #68]	; 0x44
 801e722:	3301      	adds	r3, #1
 801e724:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
    goto nullreturn;
 801e728:	e7ee      	b.n	801e708 <ip4_reass+0x1f8>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e72a:	4601      	mov	r1, r0
 801e72c:	4628      	mov	r0, r5
 801e72e:	f7ff fe67 	bl	801e400 <ip_reass_remove_oldest_datagram>
 801e732:	b128      	cbz	r0, 801e740 <ip4_reass+0x230>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e734:	f8ba 3000 	ldrh.w	r3, [sl]
 801e738:	445b      	add	r3, fp
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e73a:	2b0a      	cmp	r3, #10
 801e73c:	f77f af17 	ble.w	801e56e <ip4_reass+0x5e>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e740:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 801e742:	3301      	adds	r3, #1
 801e744:	87b3      	strh	r3, [r6, #60]	; 0x3c
 801e746:	e7df      	b.n	801e708 <ip4_reass+0x1f8>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e748:	4659      	mov	r1, fp
 801e74a:	4628      	mov	r0, r5
 801e74c:	f7ff fe58 	bl	801e400 <ip_reass_remove_oldest_datagram>
 801e750:	4583      	cmp	fp, r0
 801e752:	dcf5      	bgt.n	801e740 <ip4_reass+0x230>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e754:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e758:	4928      	ldr	r1, [pc, #160]	; (801e7fc <ip4_reass+0x2ec>)
 801e75a:	2005      	movs	r0, #5
 801e75c:	f7f7 f980 	bl	8015a60 <memp_malloc_fn>
    if (ipr == NULL)
 801e760:	4604      	mov	r4, r0
 801e762:	2800      	cmp	r0, #0
 801e764:	d1a5      	bne.n	801e6b2 <ip4_reass+0x1a2>
 801e766:	e7eb      	b.n	801e740 <ip4_reass+0x230>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e768:	458c      	cmp	ip, r1
      iprh->next_pbuf = q;
 801e76a:	f8c9 2000 	str.w	r2, [r9]
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e76e:	88eb      	ldrh	r3, [r5, #6]
 801e770:	d8ca      	bhi.n	801e708 <ip4_reass+0x1f8>
 801e772:	4298      	cmp	r0, r3
 801e774:	d3c8      	bcc.n	801e708 <ip4_reass+0x1f8>
        iprh_prev->next_pbuf = new_p;
 801e776:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 801e77a:	f47f af7e 	bne.w	801e67a <ip4_reass+0x16a>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e77e:	9b03      	ldr	r3, [sp, #12]
 801e780:	2b00      	cmp	r3, #0
 801e782:	d043      	beq.n	801e80c <ip4_reass+0x2fc>
 801e784:	7fa3      	ldrb	r3, [r4, #30]
 801e786:	07d9      	lsls	r1, r3, #31
 801e788:	d51a      	bpl.n	801e7c0 <ip4_reass+0x2b0>
    if (valid) {
 801e78a:	2f00      	cmp	r7, #0
 801e78c:	f000 80b7 	beq.w	801e8fe <ip4_reass+0x3ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e790:	6863      	ldr	r3, [r4, #4]
 801e792:	2b00      	cmp	r3, #0
 801e794:	d141      	bne.n	801e81a <ip4_reass+0x30a>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e796:	f8ba 3000 	ldrh.w	r3, [sl]
 801e79a:	449b      	add	fp, r3
  if (is_last) {
 801e79c:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e79e:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	f43f af72 	beq.w	801e68c <ip4_reass+0x17c>
 801e7a8:	e778      	b.n	801e69c <ip4_reass+0x18c>
        if (iprh->end > iprh_tmp->start) {
 801e7aa:	4594      	cmp	ip, r2
      iprh->next_pbuf = q;
 801e7ac:	f8c9 3000 	str.w	r3, [r9]
        if (iprh->end > iprh_tmp->start) {
 801e7b0:	d8aa      	bhi.n	801e708 <ip4_reass+0x1f8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e7b2:	9b03      	ldr	r3, [sp, #12]
        ipr->p = new_p;
 801e7b4:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e7b8:	b35b      	cbz	r3, 801e812 <ip4_reass+0x302>
 801e7ba:	7fa3      	ldrb	r3, [r4, #30]
 801e7bc:	07db      	lsls	r3, r3, #31
 801e7be:	d4e7      	bmi.n	801e790 <ip4_reass+0x280>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e7c0:	f8ba 3000 	ldrh.w	r3, [sl]
  return NULL;
 801e7c4:	2700      	movs	r7, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e7c6:	449b      	add	fp, r3
 801e7c8:	f8aa b000 	strh.w	fp, [sl]
 801e7cc:	e7a3      	b.n	801e716 <ip4_reass+0x206>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e7ce:	89e0      	ldrh	r0, [r4, #14]
 801e7d0:	f7f5 fdd4 	bl	801437c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e7d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e7d8:	2800      	cmp	r0, #0
 801e7da:	f43f aeeb 	beq.w	801e5b4 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e7de:	682a      	ldr	r2, [r5, #0]
 801e7e0:	686f      	ldr	r7, [r5, #4]
 801e7e2:	68a8      	ldr	r0, [r5, #8]
 801e7e4:	68e9      	ldr	r1, [r5, #12]
 801e7e6:	60a2      	str	r2, [r4, #8]
 801e7e8:	60e7      	str	r7, [r4, #12]
 801e7ea:	6120      	str	r0, [r4, #16]
 801e7ec:	6161      	str	r1, [r4, #20]
 801e7ee:	692a      	ldr	r2, [r5, #16]
 801e7f0:	61a2      	str	r2, [r4, #24]
 801e7f2:	e6df      	b.n	801e5b4 <ip4_reass+0xa4>
 801e7f4:	200361ec 	.word	0x200361ec
 801e7f8:	20022748 	.word	0x20022748
 801e7fc:	0803f544 	.word	0x0803f544
 801e800:	0803f524 	.word	0x0803f524
 801e804:	08026544 	.word	0x08026544
 801e808:	20022744 	.word	0x20022744
    if (valid) {
 801e80c:	2f00      	cmp	r7, #0
 801e80e:	f43f af38 	beq.w	801e682 <ip4_reass+0x172>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e812:	6863      	ldr	r3, [r4, #4]
 801e814:	2b00      	cmp	r3, #0
 801e816:	f43f af34 	beq.w	801e682 <ip4_reass+0x172>
 801e81a:	6858      	ldr	r0, [r3, #4]
 801e81c:	8883      	ldrh	r3, [r0, #4]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d1b9      	bne.n	801e796 <ip4_reass+0x286>
        q = iprh->next_pbuf;
 801e822:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 801e826:	2b00      	cmp	r3, #0
 801e828:	f000 80a6 	beq.w	801e978 <ip4_reass+0x468>
          iprh = (struct ip_reass_helper *)q->payload;
 801e82c:	685d      	ldr	r5, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801e82e:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801e832:	88aa      	ldrh	r2, [r5, #4]
 801e834:	429a      	cmp	r2, r3
 801e836:	d006      	beq.n	801e846 <ip4_reass+0x336>
 801e838:	e7ad      	b.n	801e796 <ip4_reass+0x286>
          iprh = (struct ip_reass_helper *)q->payload;
 801e83a:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801e83c:	88e9      	ldrh	r1, [r5, #6]
 801e83e:	889a      	ldrh	r2, [r3, #4]
 801e840:	461d      	mov	r5, r3
 801e842:	4291      	cmp	r1, r2
 801e844:	d1a7      	bne.n	801e796 <ip4_reass+0x286>
          q = iprh->next_pbuf;
 801e846:	682b      	ldr	r3, [r5, #0]
        while (q != NULL) {
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d1f6      	bne.n	801e83a <ip4_reass+0x32a>
          LWIP_ASSERT("sanity check",
 801e84c:	4285      	cmp	r5, r0
 801e84e:	d10f      	bne.n	801e870 <ip4_reass+0x360>
 801e850:	4b50      	ldr	r3, [pc, #320]	; (801e994 <ip4_reass+0x484>)
 801e852:	f240 12e1 	movw	r2, #481	; 0x1e1
 801e856:	4950      	ldr	r1, [pc, #320]	; (801e998 <ip4_reass+0x488>)
 801e858:	4850      	ldr	r0, [pc, #320]	; (801e99c <ip4_reass+0x48c>)
 801e85a:	f001 fe9d 	bl	8020598 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e85e:	682b      	ldr	r3, [r5, #0]
 801e860:	b133      	cbz	r3, 801e870 <ip4_reass+0x360>
 801e862:	4b4c      	ldr	r3, [pc, #304]	; (801e994 <ip4_reass+0x484>)
 801e864:	f240 12e3 	movw	r2, #483	; 0x1e3
 801e868:	494d      	ldr	r1, [pc, #308]	; (801e9a0 <ip4_reass+0x490>)
 801e86a:	484c      	ldr	r0, [pc, #304]	; (801e99c <ip4_reass+0x48c>)
 801e86c:	f001 fe94 	bl	8020598 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e870:	f8ba 3000 	ldrh.w	r3, [sl]
 801e874:	449b      	add	fp, r3
  if (is_last) {
 801e876:	9b03      	ldr	r3, [sp, #12]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e878:	f8aa b000 	strh.w	fp, [sl]
  if (is_last) {
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d07d      	beq.n	801e97c <ip4_reass+0x46c>
 801e880:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e882:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e884:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e886:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e888:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e88c:	684e      	ldr	r6, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e88e:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e890:	685f      	ldr	r7, [r3, #4]
 801e892:	689d      	ldr	r5, [r3, #8]
 801e894:	68d9      	ldr	r1, [r3, #12]
 801e896:	6077      	str	r7, [r6, #4]
 801e898:	60b5      	str	r5, [r6, #8]
 801e89a:	60f1      	str	r1, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e89c:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e89e:	6032      	str	r2, [r6, #0]
 801e8a0:	691a      	ldr	r2, [r3, #16]
 801e8a2:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e8a4:	f7f5 fd6a 	bl	801437c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801e8a8:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e8aa:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801e8ac:	2114      	movs	r1, #20
    IPH_OFFSET_SET(fraghdr, 0);
 801e8ae:	71b3      	strb	r3, [r6, #6]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801e8b0:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 801e8b2:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e8b4:	72b3      	strb	r3, [r6, #10]
 801e8b6:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801e8b8:	f7f6 fb1e 	bl	8014ef8 <inet_chksum>
    p = ipr->p;
 801e8bc:	6867      	ldr	r7, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801e8be:	8170      	strh	r0, [r6, #10]
    while (r != NULL) {
 801e8c0:	b15d      	cbz	r5, 801e8da <ip4_reass+0x3ca>
      iprh = (struct ip_reass_helper *)r->payload;
 801e8c2:	686e      	ldr	r6, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 801e8c4:	2114      	movs	r1, #20
 801e8c6:	4628      	mov	r0, r5
 801e8c8:	f7f7 fb8c 	bl	8015fe4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e8cc:	4629      	mov	r1, r5
 801e8ce:	4638      	mov	r0, r7
 801e8d0:	f7f7 fd4c 	bl	801636c <pbuf_cat>
      r = iprh->next_pbuf;
 801e8d4:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 801e8d6:	2d00      	cmp	r5, #0
 801e8d8:	d1f3      	bne.n	801e8c2 <ip4_reass+0x3b2>
    if (ipr == reassdatagrams) {
 801e8da:	4b32      	ldr	r3, [pc, #200]	; (801e9a4 <ip4_reass+0x494>)
 801e8dc:	681b      	ldr	r3, [r3, #0]
 801e8de:	429c      	cmp	r4, r3
 801e8e0:	d02f      	beq.n	801e942 <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e8e2:	b193      	cbz	r3, 801e90a <ip4_reass+0x3fa>
        if (ipr_prev->next == ipr) {
 801e8e4:	6819      	ldr	r1, [r3, #0]
 801e8e6:	428c      	cmp	r4, r1
 801e8e8:	d00f      	beq.n	801e90a <ip4_reass+0x3fa>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e8ea:	b179      	cbz	r1, 801e90c <ip4_reass+0x3fc>
        if (ipr_prev->next == ipr) {
 801e8ec:	680b      	ldr	r3, [r1, #0]
 801e8ee:	429c      	cmp	r4, r3
 801e8f0:	d00c      	beq.n	801e90c <ip4_reass+0x3fc>
 801e8f2:	4619      	mov	r1, r3
 801e8f4:	e7f9      	b.n	801e8ea <ip4_reass+0x3da>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e8f6:	7fa3      	ldrb	r3, [r4, #30]
 801e8f8:	07da      	lsls	r2, r3, #31
 801e8fa:	f57f af61 	bpl.w	801e7c0 <ip4_reass+0x2b0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e8fe:	f8ba 3000 	ldrh.w	r3, [sl]
 801e902:	449b      	add	fp, r3
 801e904:	f8aa b000 	strh.w	fp, [sl]
 801e908:	e6c8      	b.n	801e69c <ip4_reass+0x18c>
        if (ipr_prev->next == ipr) {
 801e90a:	4619      	mov	r1, r3
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7ff fcc7 	bl	801e2a0 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 801e912:	4638      	mov	r0, r7
 801e914:	f7f7 fd0a 	bl	801632c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e918:	f8ba 3000 	ldrh.w	r3, [sl]
    clen = pbuf_clen(p);
 801e91c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e91e:	4283      	cmp	r3, r0
 801e920:	d208      	bcs.n	801e934 <ip4_reass+0x424>
 801e922:	4b1c      	ldr	r3, [pc, #112]	; (801e994 <ip4_reass+0x484>)
 801e924:	f240 229b 	movw	r2, #667	; 0x29b
 801e928:	491f      	ldr	r1, [pc, #124]	; (801e9a8 <ip4_reass+0x498>)
 801e92a:	481c      	ldr	r0, [pc, #112]	; (801e99c <ip4_reass+0x48c>)
 801e92c:	f001 fe34 	bl	8020598 <iprintf>
 801e930:	f8ba 3000 	ldrh.w	r3, [sl]
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e934:	1b1b      	subs	r3, r3, r4
}
 801e936:	4638      	mov	r0, r7
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e938:	f8aa 3000 	strh.w	r3, [sl]
}
 801e93c:	b005      	add	sp, #20
 801e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ipr_prev = NULL;
 801e942:	2100      	movs	r1, #0
 801e944:	e7e2      	b.n	801e90c <ip4_reass+0x3fc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e946:	9b03      	ldr	r3, [sp, #12]
      ipr->p = new_p;
 801e948:	f8c4 8004 	str.w	r8, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	f43f af60 	beq.w	801e812 <ip4_reass+0x302>
 801e952:	7fa3      	ldrb	r3, [r4, #30]
 801e954:	07d8      	lsls	r0, r3, #31
 801e956:	f57f af33 	bpl.w	801e7c0 <ip4_reass+0x2b0>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e95a:	4643      	mov	r3, r8
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d0ce      	beq.n	801e8fe <ip4_reass+0x3ee>
 801e960:	e75b      	b.n	801e81a <ip4_reass+0x30a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e962:	4b0c      	ldr	r3, [pc, #48]	; (801e994 <ip4_reass+0x484>)
 801e964:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e968:	4910      	ldr	r1, [pc, #64]	; (801e9ac <ip4_reass+0x49c>)
 801e96a:	480c      	ldr	r0, [pc, #48]	; (801e99c <ip4_reass+0x48c>)
 801e96c:	f001 fe14 	bl	8020598 <iprintf>
 801e970:	88eb      	ldrh	r3, [r5, #6]
 801e972:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801e976:	e67b      	b.n	801e670 <ip4_reass+0x160>
        while (q != NULL) {
 801e978:	464d      	mov	r5, r9
 801e97a:	e767      	b.n	801e84c <ip4_reass+0x33c>
    u16_t datagram_len = (u16_t)(offset + len);
 801e97c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 801e980:	4413      	add	r3, r2
 801e982:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e984:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801e986:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e988:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 801e98c:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e98e:	77a3      	strb	r3, [r4, #30]
 801e990:	e777      	b.n	801e882 <ip4_reass+0x372>
 801e992:	bf00      	nop
 801e994:	0803f544 	.word	0x0803f544
 801e998:	0803f4d4 	.word	0x0803f4d4
 801e99c:	08026544 	.word	0x08026544
 801e9a0:	0803f4e4 	.word	0x0803f4e4
 801e9a4:	20022748 	.word	0x20022748
 801e9a8:	0803f508 	.word	0x0803f508
 801e9ac:	0803f4b4 	.word	0x0803f4b4

0801e9b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e9b4:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 801e9b6:	b08d      	sub	sp, #52	; 0x34
 801e9b8:	4605      	mov	r5, r0
 801e9ba:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e9bc:	f1b3 0214 	subs.w	r2, r3, #20
{
 801e9c0:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e9c2:	bf48      	it	mi
 801e9c4:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e9c8:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e9ca:	781c      	ldrb	r4, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e9cc:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  original_iphdr = (struct ip_hdr *)p->payload;
 801e9d0:	9304      	str	r3, [sp, #16]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e9d2:	f004 040f 	and.w	r4, r4, #15
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e9d6:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e9d8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e9dc:	f1ba 0f14 	cmp.w	sl, #20
 801e9e0:	f040 80dc 	bne.w	801eb9c <ip4_frag+0x1ec>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e9e4:	8943      	ldrh	r3, [r0, #10]
 801e9e6:	2b13      	cmp	r3, #19
 801e9e8:	f240 80db 	bls.w	801eba2 <ip4_frag+0x1f2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e9ec:	9b04      	ldr	r3, [sp, #16]
 801e9ee:	88d8      	ldrh	r0, [r3, #6]
 801e9f0:	f7f5 fcc4 	bl	801437c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e9f4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 801e9f8:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801e9fc:	f1a9 0914 	sub.w	r9, r9, #20
  ofo = tmp & IP_OFFMASK;
 801ea00:	9306      	str	r3, [sp, #24]
 801ea02:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 801ea06:	930b      	str	r3, [sp, #44]	; 0x2c
  left = (u16_t)(p->tot_len - IP_HLEN);
 801ea08:	fa1f f389 	uxth.w	r3, r9
 801ea0c:	9303      	str	r3, [sp, #12]

  while (left) {
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	f000 809b 	beq.w	801eb4a <ip4_frag+0x19a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ea14:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 801ea16:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ea18:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 801ebcc <ip4_frag+0x21c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ea1c:	00db      	lsls	r3, r3, #3
 801ea1e:	b29b      	uxth	r3, r3
 801ea20:	9308      	str	r3, [sp, #32]
 801ea22:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ea24:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ea28:	9e03      	ldr	r6, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ea2a:	2114      	movs	r1, #20
 801ea2c:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ea2e:	42b3      	cmp	r3, r6
 801ea30:	bf28      	it	cs
 801ea32:	4633      	movcs	r3, r6
 801ea34:	9302      	str	r3, [sp, #8]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ea36:	f7f7 fb7f 	bl	8016138 <pbuf_alloc>
    if (rambuf == NULL) {
 801ea3a:	4681      	mov	r9, r0
 801ea3c:	2800      	cmp	r0, #0
 801ea3e:	f000 809d 	beq.w	801eb7c <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ea42:	8943      	ldrh	r3, [r0, #10]
 801ea44:	2b13      	cmp	r3, #19
 801ea46:	f240 809e 	bls.w	801eb86 <ip4_frag+0x1d6>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ea4a:	9f04      	ldr	r7, [sp, #16]
 801ea4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ea50:	683a      	ldr	r2, [r7, #0]
 801ea52:	687e      	ldr	r6, [r7, #4]
 801ea54:	68b8      	ldr	r0, [r7, #8]
 801ea56:	68f9      	ldr	r1, [r7, #12]
 801ea58:	601a      	str	r2, [r3, #0]
 801ea5a:	605e      	str	r6, [r3, #4]
 801ea5c:	6098      	str	r0, [r3, #8]
 801ea5e:	60d9      	str	r1, [r3, #12]
 801ea60:	693a      	ldr	r2, [r7, #16]
 801ea62:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ea64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ea68:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801ea6a:	9b02      	ldr	r3, [sp, #8]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d031      	beq.n	801ead4 <ip4_frag+0x124>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ea70:	896b      	ldrh	r3, [r5, #10]
    while (left_to_copy) {
 801ea72:	9f02      	ldr	r7, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 801ea74:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ea78:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801ea7a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ea7c:	d370      	bcc.n	801eb60 <ip4_frag+0x1b0>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ea7e:	42bc      	cmp	r4, r7
 801ea80:	bf28      	it	cs
 801ea82:	463c      	movcs	r4, r7
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ea84:	2c00      	cmp	r4, #0
 801ea86:	d062      	beq.n	801eb4e <ip4_frag+0x19e>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ea88:	f240 22bd 	movw	r2, #701	; 0x2bd
 801ea8c:	4659      	mov	r1, fp
 801ea8e:	2006      	movs	r0, #6
 801ea90:	f7f6 ffe6 	bl	8015a60 <memp_malloc_fn>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ea94:	2241      	movs	r2, #65	; 0x41
      if (pcr == NULL) {
 801ea96:	4680      	mov	r8, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ea98:	4621      	mov	r1, r4
 801ea9a:	4603      	mov	r3, r0
      if (pcr == NULL) {
 801ea9c:	2800      	cmp	r0, #0
 801ea9e:	d06a      	beq.n	801eb76 <ip4_frag+0x1c6>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801eaa0:	9401      	str	r4, [sp, #4]
 801eaa2:	2000      	movs	r0, #0
 801eaa4:	686e      	ldr	r6, [r5, #4]
 801eaa6:	4456      	add	r6, sl
 801eaa8:	9600      	str	r6, [sp, #0]
 801eaaa:	f7f7 fa7b 	bl	8015fa4 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 801eaae:	4606      	mov	r6, r0
 801eab0:	2800      	cmp	r0, #0
 801eab2:	d05d      	beq.n	801eb70 <ip4_frag+0x1c0>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801eab4:	4628      	mov	r0, r5

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801eab6:	1b3f      	subs	r7, r7, r4
      pbuf_ref(p);
 801eab8:	f7f7 fc44 	bl	8016344 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801eabc:	4b3e      	ldr	r3, [pc, #248]	; (801ebb8 <ip4_frag+0x208>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801eabe:	b2bf      	uxth	r7, r7
      pcr->original = p;
 801eac0:	f8c8 5014 	str.w	r5, [r8, #20]
      pbuf_cat(rambuf, newpbuf);
 801eac4:	4631      	mov	r1, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801eac6:	f8c8 3010 	str.w	r3, [r8, #16]
      pbuf_cat(rambuf, newpbuf);
 801eaca:	4648      	mov	r0, r9
 801eacc:	f7f7 fc4e 	bl	801636c <pbuf_cat>
      if (left_to_copy) {
 801ead0:	2f00      	cmp	r7, #0
 801ead2:	d13c      	bne.n	801eb4e <ip4_frag+0x19e>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ead4:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 801ead6:	44a2      	add	sl, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ead8:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 801eada:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 801eadc:	fa1f fa8a 	uxth.w	sl, sl
    tmp = (IP_OFFMASK & (ofo));
 801eae0:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801eae4:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 801eae6:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801eae8:	4293      	cmp	r3, r2
 801eaea:	dd54      	ble.n	801eb96 <ip4_frag+0x1e6>
 801eaec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d151      	bne.n	801eb96 <ip4_frag+0x1e6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eaf2:	f7f5 fc43 	bl	801437c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eaf6:	9f02      	ldr	r7, [sp, #8]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eaf8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eafa:	463b      	mov	r3, r7
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eafc:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eafe:	3314      	adds	r3, #20
 801eb00:	b298      	uxth	r0, r3
 801eb02:	f7f5 fc3b 	bl	801437c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801eb06:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eb08:	8070      	strh	r0, [r6, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801eb0a:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 801eb0c:	72b3      	strb	r3, [r6, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801eb0e:	4630      	mov	r0, r6
    IPH_CHKSUM_SET(iphdr, 0);
 801eb10:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801eb12:	f7f6 f9f1 	bl	8014ef8 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801eb16:	9b05      	ldr	r3, [sp, #20]
 801eb18:	4649      	mov	r1, r9
 801eb1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb1c:	695b      	ldr	r3, [r3, #20]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801eb1e:	8170      	strh	r0, [r6, #10]
    netif->output(netif, rambuf, dest);
 801eb20:	9805      	ldr	r0, [sp, #20]
 801eb22:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801eb24:	4a25      	ldr	r2, [pc, #148]	; (801ebbc <ip4_frag+0x20c>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eb26:	4648      	mov	r0, r9
    IPFRAG_STATS_INC(ip_frag.xmit);
 801eb28:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801eb2a:	3301      	adds	r3, #1
 801eb2c:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801eb2e:	f7f7 fa95 	bl	801605c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801eb32:	9b03      	ldr	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801eb34:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 801eb38:	1bdb      	subs	r3, r3, r7
    ofo = (u16_t)(ofo + nfb);
 801eb3a:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 801eb3c:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 801eb3e:	b292      	uxth	r2, r2
    left = (u16_t)(left - fragsize);
 801eb40:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801eb42:	9206      	str	r2, [sp, #24]
  while (left) {
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	f47f af6c 	bne.w	801ea22 <ip4_frag+0x72>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801eb4a:	2000      	movs	r0, #0
 801eb4c:	e018      	b.n	801eb80 <ip4_frag+0x1d0>
        p = p->next;
 801eb4e:	682d      	ldr	r5, [r5, #0]
 801eb50:	f04f 0a00 	mov.w	sl, #0
      u16_t plen = (u16_t)(p->len - poff);
 801eb54:	896b      	ldrh	r3, [r5, #10]
 801eb56:	eba3 040a 	sub.w	r4, r3, sl
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eb5a:	4553      	cmp	r3, sl
      u16_t plen = (u16_t)(p->len - poff);
 801eb5c:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eb5e:	d28e      	bcs.n	801ea7e <ip4_frag+0xce>
 801eb60:	465b      	mov	r3, fp
 801eb62:	f240 322d 	movw	r2, #813	; 0x32d
 801eb66:	4916      	ldr	r1, [pc, #88]	; (801ebc0 <ip4_frag+0x210>)
 801eb68:	4816      	ldr	r0, [pc, #88]	; (801ebc4 <ip4_frag+0x214>)
 801eb6a:	f001 fd15 	bl	8020598 <iprintf>
 801eb6e:	e786      	b.n	801ea7e <ip4_frag+0xce>
        ip_frag_free_pbuf_custom_ref(pcr);
 801eb70:	4640      	mov	r0, r8
 801eb72:	f7ff fc7f 	bl	801e474 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801eb76:	4648      	mov	r0, r9
 801eb78:	f7f7 fa70 	bl	801605c <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eb7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801eb80:	b00d      	add	sp, #52	; 0x34
 801eb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801eb86:	465b      	mov	r3, fp
 801eb88:	f240 3225 	movw	r2, #805	; 0x325
 801eb8c:	490e      	ldr	r1, [pc, #56]	; (801ebc8 <ip4_frag+0x218>)
 801eb8e:	480d      	ldr	r0, [pc, #52]	; (801ebc4 <ip4_frag+0x214>)
 801eb90:	f001 fd02 	bl	8020598 <iprintf>
 801eb94:	e759      	b.n	801ea4a <ip4_frag+0x9a>
      tmp = tmp | IP_MF;
 801eb96:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 801eb9a:	e7aa      	b.n	801eaf2 <ip4_frag+0x142>
    return ERR_VAL;
 801eb9c:	f06f 0005 	mvn.w	r0, #5
 801eba0:	e7ee      	b.n	801eb80 <ip4_frag+0x1d0>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801eba2:	4b0a      	ldr	r3, [pc, #40]	; (801ebcc <ip4_frag+0x21c>)
 801eba4:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801eba8:	4909      	ldr	r1, [pc, #36]	; (801ebd0 <ip4_frag+0x220>)
 801ebaa:	4806      	ldr	r0, [pc, #24]	; (801ebc4 <ip4_frag+0x214>)
 801ebac:	f001 fcf4 	bl	8020598 <iprintf>
 801ebb0:	f06f 0005 	mvn.w	r0, #5
 801ebb4:	e7e4      	b.n	801eb80 <ip4_frag+0x1d0>
 801ebb6:	bf00      	nop
 801ebb8:	0801e4ad 	.word	0x0801e4ad
 801ebbc:	200361ec 	.word	0x200361ec
 801ebc0:	0803f4a4 	.word	0x0803f4a4
 801ebc4:	08026544 	.word	0x08026544
 801ebc8:	0803f484 	.word	0x0803f484
 801ebcc:	0803f544 	.word	0x0803f544
 801ebd0:	0803f468 	.word	0x0803f468

0801ebd4 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ebd4:	8943      	ldrh	r3, [r0, #10]
 801ebd6:	2b0e      	cmp	r3, #14
{
 801ebd8:	b570      	push	{r4, r5, r6, lr}
 801ebda:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801ebdc:	d91b      	bls.n	801ec16 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ebde:	7bc3      	ldrb	r3, [r0, #15]
 801ebe0:	460d      	mov	r5, r1
 801ebe2:	b91b      	cbnz	r3, 801ebec <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801ebe4:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801ebe8:	3301      	adds	r3, #1
 801ebea:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ebec:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ebee:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801ebf0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801ebf2:	07d9      	lsls	r1, r3, #31
 801ebf4:	d50a      	bpl.n	801ec0c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ebf6:	2b01      	cmp	r3, #1
 801ebf8:	d039      	beq.n	801ec6e <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ebfa:	2206      	movs	r2, #6
 801ebfc:	4924      	ldr	r1, [pc, #144]	; (801ec90 <ethernet_input+0xbc>)
 801ebfe:	f000 fd19 	bl	801f634 <memcmp>
 801ec02:	b918      	cbnz	r0, 801ec0c <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ec04:	7b63      	ldrb	r3, [r4, #13]
 801ec06:	f043 0308 	orr.w	r3, r3, #8
 801ec0a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801ec0c:	2e08      	cmp	r6, #8
 801ec0e:	d01f      	beq.n	801ec50 <ethernet_input+0x7c>
 801ec10:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801ec14:	d00b      	beq.n	801ec2e <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801ec16:	4b1f      	ldr	r3, [pc, #124]	; (801ec94 <ethernet_input+0xc0>)
 801ec18:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801ec1a:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801ec1c:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801ec1e:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801ec20:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801ec22:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801ec24:	4620      	mov	r0, r4
 801ec26:	f7f7 fa19 	bl	801605c <pbuf_free>
  return ERR_OK;
}
 801ec2a:	2000      	movs	r0, #0
 801ec2c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ec2e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801ec32:	071b      	lsls	r3, r3, #28
 801ec34:	d5f6      	bpl.n	801ec24 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ec36:	210e      	movs	r1, #14
 801ec38:	4620      	mov	r0, r4
 801ec3a:	f7f7 f9d3 	bl	8015fe4 <pbuf_remove_header>
 801ec3e:	b308      	cbz	r0, 801ec84 <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 801ec40:	4b14      	ldr	r3, [pc, #80]	; (801ec94 <ethernet_input+0xc0>)
 801ec42:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801ec44:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801ec46:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801ec48:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801ec4a:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801ec4c:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801ec4e:	e7e9      	b.n	801ec24 <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ec50:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801ec54:	071a      	lsls	r2, r3, #28
 801ec56:	d5e5      	bpl.n	801ec24 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ec58:	210e      	movs	r1, #14
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7f7 f9c2 	bl	8015fe4 <pbuf_remove_header>
 801ec60:	2800      	cmp	r0, #0
 801ec62:	d1df      	bne.n	801ec24 <ethernet_input+0x50>
        ip4_input(p, netif);
 801ec64:	4629      	mov	r1, r5
 801ec66:	4620      	mov	r0, r4
 801ec68:	f7ff f84a 	bl	801dd00 <ip4_input>
      break;
 801ec6c:	e7dd      	b.n	801ec2a <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ec6e:	7843      	ldrb	r3, [r0, #1]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d1cb      	bne.n	801ec0c <ethernet_input+0x38>
 801ec74:	7883      	ldrb	r3, [r0, #2]
 801ec76:	2b5e      	cmp	r3, #94	; 0x5e
 801ec78:	d1c8      	bne.n	801ec0c <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 801ec7a:	7b63      	ldrb	r3, [r4, #13]
 801ec7c:	f043 0310 	orr.w	r3, r3, #16
 801ec80:	7363      	strb	r3, [r4, #13]
 801ec82:	e7c3      	b.n	801ec0c <ethernet_input+0x38>
        etharp_input(p, netif);
 801ec84:	4629      	mov	r1, r5
 801ec86:	4620      	mov	r0, r4
 801ec88:	f7fe fbdc 	bl	801d444 <etharp_input>
      break;
 801ec8c:	e7cd      	b.n	801ec2a <ethernet_input+0x56>
 801ec8e:	bf00      	nop
 801ec90:	0803f60c 	.word	0x0803f60c
 801ec94:	200361ec 	.word	0x200361ec

0801ec98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ec98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec9c:	460c      	mov	r4, r1
 801ec9e:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801eca0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 801eca4:	4616      	mov	r6, r2
 801eca6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801eca8:	f7f5 fb68 	bl	801437c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ecac:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801ecae:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	f7f7 f993 	bl	8015fdc <pbuf_add_header>
 801ecb6:	b9e0      	cbnz	r0, 801ecf2 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ecb8:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801ecba:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ecbe:	683b      	ldr	r3, [r7, #0]
 801ecc0:	600b      	str	r3, [r1, #0]
 801ecc2:	88bb      	ldrh	r3, [r7, #4]
 801ecc4:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ecc6:	6833      	ldr	r3, [r6, #0]
 801ecc8:	f8c1 3006 	str.w	r3, [r1, #6]
 801eccc:	88b3      	ldrh	r3, [r6, #4]
 801ecce:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ecd0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801ecd4:	2b06      	cmp	r3, #6
 801ecd6:	d006      	beq.n	801ece6 <ethernet_output+0x4e>
 801ecd8:	4b0a      	ldr	r3, [pc, #40]	; (801ed04 <ethernet_output+0x6c>)
 801ecda:	f240 1233 	movw	r2, #307	; 0x133
 801ecde:	490a      	ldr	r1, [pc, #40]	; (801ed08 <ethernet_output+0x70>)
 801ece0:	480a      	ldr	r0, [pc, #40]	; (801ed0c <ethernet_output+0x74>)
 801ece2:	f001 fc59 	bl	8020598 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ece6:	4621      	mov	r1, r4
 801ece8:	69ab      	ldr	r3, [r5, #24]
 801ecea:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801ecec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801ecf0:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801ecf2:	4a07      	ldr	r2, [pc, #28]	; (801ed10 <ethernet_output+0x78>)
}
 801ecf4:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801ecf8:	8953      	ldrh	r3, [r2, #10]
 801ecfa:	3301      	adds	r3, #1
 801ecfc:	8153      	strh	r3, [r2, #10]
}
 801ecfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed02:	bf00      	nop
 801ed04:	0803f614 	.word	0x0803f614
 801ed08:	0803f64c 	.word	0x0803f64c
 801ed0c:	08026544 	.word	0x08026544
 801ed10:	200361ec 	.word	0x200361ec

0801ed14 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ed14:	b510      	push	{r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ed16:	2300      	movs	r3, #0
{
 801ed18:	b084      	sub	sp, #16
  osMessageQDef(QUEUE, size, void *);
 801ed1a:	2204      	movs	r2, #4
{
 801ed1c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801ed1e:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ed20:	4668      	mov	r0, sp
 801ed22:	4619      	mov	r1, r3
  osMessageQDef(QUEUE, size, void *);
 801ed24:	9201      	str	r2, [sp, #4]
 801ed26:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ed2a:	f7f1 fe59 	bl	80109e0 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801ed2e:	4a0a      	ldr	r2, [pc, #40]	; (801ed58 <sys_mbox_new+0x44>)
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ed30:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ed32:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801ed36:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801ed3a:	f8b2 1106 	ldrh.w	r1, [r2, #262]	; 0x106
  if(*mbox == NULL)
 801ed3e:	0940      	lsrs	r0, r0, #5
  ++lwip_stats.sys.mbox.used;
 801ed40:	3301      	adds	r3, #1
    return ERR_MEM;

  return ERR_OK;
}
 801ed42:	4240      	negs	r0, r0
  ++lwip_stats.sys.mbox.used;
 801ed44:	b29b      	uxth	r3, r3
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801ed46:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801ed48:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801ed4c:	bf38      	it	cc
 801ed4e:	f8a2 3106 	strhcc.w	r3, [r2, #262]	; 0x106
}
 801ed52:	b004      	add	sp, #16
 801ed54:	bd10      	pop	{r4, pc}
 801ed56:	bf00      	nop
 801ed58:	200361ec 	.word	0x200361ec

0801ed5c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ed5c:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ed5e:	6800      	ldr	r0, [r0, #0]
 801ed60:	2200      	movs	r2, #0
 801ed62:	f7f1 fe53 	bl	8010a0c <osMessagePut>
 801ed66:	b900      	cbnz	r0, 801ed6a <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801ed68:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801ed6a:	4a04      	ldr	r2, [pc, #16]	; (801ed7c <sys_mbox_trypost+0x20>)
 801ed6c:	f04f 30ff 	mov.w	r0, #4294967295
 801ed70:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 801ed74:	3301      	adds	r3, #1
 801ed76:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
}
 801ed7a:	bd08      	pop	{r3, pc}
 801ed7c:	200361ec 	.word	0x200361ec

0801ed80 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed82:	4615      	mov	r5, r2
 801ed84:	b085      	sub	sp, #20
 801ed86:	4606      	mov	r6, r0
 801ed88:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ed8a:	f7f1 fd1d 	bl	80107c8 <osKernelSysTick>
 801ed8e:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ed90:	b15d      	cbz	r5, 801edaa <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ed92:	462a      	mov	r2, r5
 801ed94:	6831      	ldr	r1, [r6, #0]
 801ed96:	a801      	add	r0, sp, #4
 801ed98:	f7f1 fe64 	bl	8010a64 <osMessageGet>

    if(event.status == osEventMessage)
 801ed9c:	9b01      	ldr	r3, [sp, #4]
 801ed9e:	2b10      	cmp	r3, #16
 801eda0:	d009      	beq.n	801edb6 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eda2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801eda6:	b005      	add	sp, #20
 801eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 801edaa:	6831      	ldr	r1, [r6, #0]
 801edac:	f04f 32ff 	mov.w	r2, #4294967295
 801edb0:	a801      	add	r0, sp, #4
 801edb2:	f7f1 fe57 	bl	8010a64 <osMessageGet>
    *msg = (void *)event.value.v;
 801edb6:	9b02      	ldr	r3, [sp, #8]
 801edb8:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801edba:	f7f1 fd05 	bl	80107c8 <osKernelSysTick>
 801edbe:	1b00      	subs	r0, r0, r4
}
 801edc0:	b005      	add	sp, #20
 801edc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801edc4 <sys_mbox_valid>:
 801edc4:	6800      	ldr	r0, [r0, #0]
 801edc6:	3000      	adds	r0, #0
 801edc8:	bf18      	it	ne
 801edca:	2001      	movne	r0, #1
 801edcc:	4770      	bx	lr
 801edce:	bf00      	nop

0801edd0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801edd0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801edd2:	4803      	ldr	r0, [pc, #12]	; (801ede0 <sys_init+0x10>)
 801edd4:	f7f1 fd50 	bl	8010878 <osMutexCreate>
 801edd8:	4b02      	ldr	r3, [pc, #8]	; (801ede4 <sys_init+0x14>)
 801edda:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801eddc:	bd08      	pop	{r3, pc}
 801edde:	bf00      	nop
 801ede0:	0803f688 	.word	0x0803f688
 801ede4:	20036350 	.word	0x20036350

0801ede8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ede8:	b530      	push	{r4, r5, lr}
 801edea:	b083      	sub	sp, #12
 801edec:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801edee:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 801edf0:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 801edf2:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801edf6:	f7f1 fd3f 	bl	8010878 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801edfa:	4a0d      	ldr	r2, [pc, #52]	; (801ee30 <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 801edfc:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 801edfe:	b170      	cbz	r0, 801ee1e <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801ee00:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ee04:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801ee06:	f8b2 1100 	ldrh.w	r1, [r2, #256]	; 0x100
  ++lwip_stats.sys.mutex.used;
 801ee0a:	3301      	adds	r3, #1
 801ee0c:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801ee0e:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 801ee10:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801ee14:	bf38      	it	cc
 801ee16:	f8a2 3100 	strhcc.w	r3, [r2, #256]	; 0x100
}
 801ee1a:	b003      	add	sp, #12
 801ee1c:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 801ee1e:	f8b2 3102 	ldrh.w	r3, [r2, #258]	; 0x102
    return ERR_MEM;
 801ee22:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 801ee26:	3301      	adds	r3, #1
 801ee28:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
    return ERR_MEM;
 801ee2c:	e7f5      	b.n	801ee1a <sys_mutex_new+0x32>
 801ee2e:	bf00      	nop
 801ee30:	200361ec 	.word	0x200361ec

0801ee34 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801ee34:	6800      	ldr	r0, [r0, #0]
 801ee36:	f04f 31ff 	mov.w	r1, #4294967295
 801ee3a:	f7f1 bd25 	b.w	8010888 <osMutexWait>
 801ee3e:	bf00      	nop

0801ee40 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 801ee40:	6800      	ldr	r0, [r0, #0]
 801ee42:	f7f1 bd4d 	b.w	80108e0 <osMutexRelease>
 801ee46:	bf00      	nop

0801ee48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ee48:	b510      	push	{r4, lr}
 801ee4a:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ee4c:	2400      	movs	r4, #0
 801ee4e:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 801ee50:	4611      	mov	r1, r2
{
 801ee52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ee54:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 801ee56:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ee58:	f8cd 4012 	str.w	r4, [sp, #18]
 801ee5c:	f8cd 4016 	str.w	r4, [sp, #22]
 801ee60:	f8cd 400e 	str.w	r4, [sp, #14]
 801ee64:	f8cd 401a 	str.w	r4, [sp, #26]
 801ee68:	f8ad 401e 	strh.w	r4, [sp, #30]
 801ee6c:	9305      	str	r3, [sp, #20]
 801ee6e:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 801ee72:	f7f1 fcb1 	bl	80107d8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ee76:	b008      	add	sp, #32
 801ee78:	bd10      	pop	{r4, pc}
 801ee7a:	bf00      	nop

0801ee7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ee7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ee7e:	2200      	movs	r2, #0
 801ee80:	4910      	ldr	r1, [pc, #64]	; (801eec4 <MX_USB_DEVICE_Init+0x48>)
 801ee82:	4811      	ldr	r0, [pc, #68]	; (801eec8 <MX_USB_DEVICE_Init+0x4c>)
 801ee84:	f7f0 fff8 	bl	800fe78 <USBD_Init>
 801ee88:	b9c0      	cbnz	r0, 801eebc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801ee8a:	4910      	ldr	r1, [pc, #64]	; (801eecc <MX_USB_DEVICE_Init+0x50>)
 801ee8c:	480e      	ldr	r0, [pc, #56]	; (801eec8 <MX_USB_DEVICE_Init+0x4c>)
 801ee8e:	f7f1 f80d 	bl	800feac <USBD_RegisterClass>
 801ee92:	b980      	cbnz	r0, 801eeb6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801ee94:	490e      	ldr	r1, [pc, #56]	; (801eed0 <MX_USB_DEVICE_Init+0x54>)
 801ee96:	480c      	ldr	r0, [pc, #48]	; (801eec8 <MX_USB_DEVICE_Init+0x4c>)
 801ee98:	f7f0 ffc0 	bl	800fe1c <USBD_CDC_RegisterInterface>
 801ee9c:	b940      	cbnz	r0, 801eeb0 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ee9e:	480a      	ldr	r0, [pc, #40]	; (801eec8 <MX_USB_DEVICE_Init+0x4c>)
 801eea0:	f7f1 f818 	bl	800fed4 <USBD_Start>
 801eea4:	b900      	cbnz	r0, 801eea8 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801eea6:	bd08      	pop	{r3, pc}
 801eea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801eeac:	f7e2 bf86 	b.w	8001dbc <Error_Handler>
    Error_Handler();
 801eeb0:	f7e2 ff84 	bl	8001dbc <Error_Handler>
 801eeb4:	e7f3      	b.n	801ee9e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 801eeb6:	f7e2 ff81 	bl	8001dbc <Error_Handler>
 801eeba:	e7eb      	b.n	801ee94 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801eebc:	f7e2 ff7e 	bl	8001dbc <Error_Handler>
 801eec0:	e7e3      	b.n	801ee8a <MX_USB_DEVICE_Init+0xe>
 801eec2:	bf00      	nop
 801eec4:	200003f4 	.word	0x200003f4
 801eec8:	20036354 	.word	0x20036354
 801eecc:	200002c4 	.word	0x200002c4
 801eed0:	200003e0 	.word	0x200003e0

0801eed4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801eed4:	2000      	movs	r0, #0
 801eed6:	4770      	bx	lr

0801eed8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 801eed8:	2000      	movs	r0, #0
 801eeda:	4770      	bx	lr

0801eedc <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 801eedc:	2000      	movs	r0, #0
 801eede:	4770      	bx	lr

0801eee0 <CDC_Receive_FS>:
{
 801eee0:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801eee2:	4c05      	ldr	r4, [pc, #20]	; (801eef8 <CDC_Receive_FS+0x18>)
 801eee4:	4601      	mov	r1, r0
 801eee6:	4620      	mov	r0, r4
 801eee8:	f7f0 ffa8 	bl	800fe3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801eeec:	4620      	mov	r0, r4
 801eeee:	f7f0 ffab 	bl	800fe48 <USBD_CDC_ReceivePacket>
}
 801eef2:	2000      	movs	r0, #0
 801eef4:	bd10      	pop	{r4, pc}
 801eef6:	bf00      	nop
 801eef8:	20036354 	.word	0x20036354

0801eefc <CDC_Init_FS>:
{
 801eefc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801eefe:	4c06      	ldr	r4, [pc, #24]	; (801ef18 <CDC_Init_FS+0x1c>)
 801ef00:	2200      	movs	r2, #0
 801ef02:	4906      	ldr	r1, [pc, #24]	; (801ef1c <CDC_Init_FS+0x20>)
 801ef04:	4620      	mov	r0, r4
 801ef06:	f7f0 ff91 	bl	800fe2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ef0a:	4620      	mov	r0, r4
 801ef0c:	4904      	ldr	r1, [pc, #16]	; (801ef20 <CDC_Init_FS+0x24>)
 801ef0e:	f7f0 ff95 	bl	800fe3c <USBD_CDC_SetRxBuffer>
}
 801ef12:	2000      	movs	r0, #0
 801ef14:	bd10      	pop	{r4, pc}
 801ef16:	bf00      	nop
 801ef18:	20036354 	.word	0x20036354
 801ef1c:	20036e24 	.word	0x20036e24
 801ef20:	20036624 	.word	0x20036624

0801ef24 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ef24:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801ef26:	4801      	ldr	r0, [pc, #4]	; (801ef2c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801ef28:	800b      	strh	r3, [r1, #0]
}
 801ef2a:	4770      	bx	lr
 801ef2c:	20000420 	.word	0x20000420

0801ef30 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ef30:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801ef32:	4801      	ldr	r0, [pc, #4]	; (801ef38 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801ef34:	800b      	strh	r3, [r1, #0]
}
 801ef36:	4770      	bx	lr
 801ef38:	20000434 	.word	0x20000434

0801ef3c <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801ef3c:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 801ef3e:	4801      	ldr	r0, [pc, #4]	; (801ef44 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 801ef40:	800b      	strh	r3, [r1, #0]
}
 801ef42:	4770      	bx	lr
 801ef44:	20000414 	.word	0x20000414

0801ef48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ef48:	3a01      	subs	r2, #1
 801ef4a:	b430      	push	{r4, r5}
 801ef4c:	b2d2      	uxtb	r2, r2
 801ef4e:	1c8c      	adds	r4, r1, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801ef50:	2500      	movs	r5, #0
 801ef52:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 801ef56:	0f02      	lsrs	r2, r0, #28
    pbuf[2 * idx + 1] = 0;
 801ef58:	704d      	strb	r5, [r1, #1]
 801ef5a:	3102      	adds	r1, #2
    value = value << 4;
 801ef5c:	0100      	lsls	r0, r0, #4
 801ef5e:	b2d3      	uxtb	r3, r2
    if (((value >> 28)) < 0xA)
 801ef60:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801ef62:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ef66:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801ef6a:	bf94      	ite	ls
 801ef6c:	f801 2c02 	strbls.w	r2, [r1, #-2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ef70:	f801 3c02 	strbhi.w	r3, [r1, #-2]
  for (idx = 0; idx < len; idx++)
 801ef74:	428c      	cmp	r4, r1
 801ef76:	d1ee      	bne.n	801ef56 <IntToUnicode+0xe>
  }
}
 801ef78:	bc30      	pop	{r4, r5}
 801ef7a:	4770      	bx	lr

0801ef7c <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ef7c:	480b      	ldr	r0, [pc, #44]	; (801efac <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 801ef7e:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ef80:	4b0b      	ldr	r3, [pc, #44]	; (801efb0 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ef82:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 801ef84:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 801ef86:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 801ef88:	18c0      	adds	r0, r0, r3
 801ef8a:	d101      	bne.n	801ef90 <USBD_FS_SerialStrDescriptor+0x14>
}
 801ef8c:	4809      	ldr	r0, [pc, #36]	; (801efb4 <USBD_FS_SerialStrDescriptor+0x38>)
 801ef8e:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ef90:	4b09      	ldr	r3, [pc, #36]	; (801efb8 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ef92:	2208      	movs	r2, #8
 801ef94:	4909      	ldr	r1, [pc, #36]	; (801efbc <USBD_FS_SerialStrDescriptor+0x40>)
{
 801ef96:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ef98:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ef9a:	f7ff ffd5 	bl	801ef48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ef9e:	2204      	movs	r2, #4
 801efa0:	4907      	ldr	r1, [pc, #28]	; (801efc0 <USBD_FS_SerialStrDescriptor+0x44>)
 801efa2:	4620      	mov	r0, r4
 801efa4:	f7ff ffd0 	bl	801ef48 <IntToUnicode>
}
 801efa8:	4802      	ldr	r0, [pc, #8]	; (801efb4 <USBD_FS_SerialStrDescriptor+0x38>)
 801efaa:	bd10      	pop	{r4, pc}
 801efac:	1ff0f420 	.word	0x1ff0f420
 801efb0:	1ff0f428 	.word	0x1ff0f428
 801efb4:	20000438 	.word	0x20000438
 801efb8:	1ff0f424 	.word	0x1ff0f424
 801efbc:	2000043a 	.word	0x2000043a
 801efc0:	2000044a 	.word	0x2000044a

0801efc4 <USBD_FS_ManufacturerStrDescriptor>:
{
 801efc4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801efc6:	4c04      	ldr	r4, [pc, #16]	; (801efd8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 801efc8:	460a      	mov	r2, r1
 801efca:	4804      	ldr	r0, [pc, #16]	; (801efdc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801efcc:	4621      	mov	r1, r4
 801efce:	f7f1 fb63 	bl	8010698 <USBD_GetString>
}
 801efd2:	4620      	mov	r0, r4
 801efd4:	bd10      	pop	{r4, pc}
 801efd6:	bf00      	nop
 801efd8:	20037624 	.word	0x20037624
 801efdc:	0803f6ac 	.word	0x0803f6ac

0801efe0 <USBD_FS_ProductStrDescriptor>:
{
 801efe0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801efe2:	4c04      	ldr	r4, [pc, #16]	; (801eff4 <USBD_FS_ProductStrDescriptor+0x14>)
 801efe4:	460a      	mov	r2, r1
 801efe6:	4804      	ldr	r0, [pc, #16]	; (801eff8 <USBD_FS_ProductStrDescriptor+0x18>)
 801efe8:	4621      	mov	r1, r4
 801efea:	f7f1 fb55 	bl	8010698 <USBD_GetString>
}
 801efee:	4620      	mov	r0, r4
 801eff0:	bd10      	pop	{r4, pc}
 801eff2:	bf00      	nop
 801eff4:	20037624 	.word	0x20037624
 801eff8:	0803f6c0 	.word	0x0803f6c0

0801effc <USBD_FS_ConfigStrDescriptor>:
{
 801effc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801effe:	4c04      	ldr	r4, [pc, #16]	; (801f010 <USBD_FS_ConfigStrDescriptor+0x14>)
 801f000:	460a      	mov	r2, r1
 801f002:	4804      	ldr	r0, [pc, #16]	; (801f014 <USBD_FS_ConfigStrDescriptor+0x18>)
 801f004:	4621      	mov	r1, r4
 801f006:	f7f1 fb47 	bl	8010698 <USBD_GetString>
}
 801f00a:	4620      	mov	r0, r4
 801f00c:	bd10      	pop	{r4, pc}
 801f00e:	bf00      	nop
 801f010:	20037624 	.word	0x20037624
 801f014:	0803f690 	.word	0x0803f690

0801f018 <USBD_FS_InterfaceStrDescriptor>:
{
 801f018:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f01a:	4c04      	ldr	r4, [pc, #16]	; (801f02c <USBD_FS_InterfaceStrDescriptor+0x14>)
 801f01c:	460a      	mov	r2, r1
 801f01e:	4804      	ldr	r0, [pc, #16]	; (801f030 <USBD_FS_InterfaceStrDescriptor+0x18>)
 801f020:	4621      	mov	r1, r4
 801f022:	f7f1 fb39 	bl	8010698 <USBD_GetString>
}
 801f026:	4620      	mov	r0, r4
 801f028:	bd10      	pop	{r4, pc}
 801f02a:	bf00      	nop
 801f02c:	20037624 	.word	0x20037624
 801f030:	0803f69c 	.word	0x0803f69c

0801f034 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 801f034:	6803      	ldr	r3, [r0, #0]
{
 801f036:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 801f038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801f03c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f03e:	f04f 0400 	mov.w	r4, #0
 801f042:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801f046:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801f04a:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f04c:	d001      	beq.n	801f052 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f04e:	b009      	add	sp, #36	; 0x24
 801f050:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f052:	4d1e      	ldr	r5, [pc, #120]	; (801f0cc <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f054:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f056:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f05a:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f05c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f05e:	f043 0301 	orr.w	r3, r3, #1
 801f062:	632b      	str	r3, [r5, #48]	; 0x30
 801f064:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f066:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f068:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f06a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 801f06e:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f070:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f072:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f074:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f076:	4816      	ldr	r0, [pc, #88]	; (801f0d0 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f078:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f07a:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f07c:	f7e8 ff7e 	bl	8007f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f080:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f084:	a903      	add	r1, sp, #12
 801f086:	4812      	ldr	r0, [pc, #72]	; (801f0d0 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801f088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f08a:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801f08e:	f7e8 ff75 	bl	8007f7c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f092:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f094:	4622      	mov	r2, r4
 801f096:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f09c:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f09e:	636b      	str	r3, [r5, #52]	; 0x34
 801f0a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801f0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0a6:	9301      	str	r3, [sp, #4]
 801f0a8:	9b01      	ldr	r3, [sp, #4]
 801f0aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f0ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f0b0:	646b      	str	r3, [r5, #68]	; 0x44
 801f0b2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801f0b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f0b8:	9302      	str	r3, [sp, #8]
 801f0ba:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801f0bc:	f7e6 fdca 	bl	8005c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f0c0:	2043      	movs	r0, #67	; 0x43
 801f0c2:	f7e6 fe0d 	bl	8005ce0 <HAL_NVIC_EnableIRQ>
}
 801f0c6:	b009      	add	sp, #36	; 0x24
 801f0c8:	bd30      	pop	{r4, r5, pc}
 801f0ca:	bf00      	nop
 801f0cc:	40023800 	.word	0x40023800
 801f0d0:	40020000 	.word	0x40020000

0801f0d4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f0d4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801f0d8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f0dc:	f7f0 bf0c 	b.w	800fef8 <USBD_LL_SetupStage>

0801f0e0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f0e0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f0e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f0e8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f0ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801f0f0:	f7f0 bf32 	b.w	800ff58 <USBD_LL_DataOutStage>

0801f0f4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f0f4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 801f0f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f0fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f102:	f7f0 bf5f 	b.w	800ffc4 <USBD_LL_DataInStage>
 801f106:	bf00      	nop

0801f108 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f108:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f10c:	f7f0 bffa 	b.w	8010104 <USBD_LL_SOF>

0801f110 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f110:	68c1      	ldr	r1, [r0, #12]
{
 801f112:	b510      	push	{r4, lr}
 801f114:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f116:	b121      	cbz	r1, 801f122 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f118:	2902      	cmp	r1, #2
 801f11a:	d00c      	beq.n	801f136 <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 801f11c:	f7e2 fe4e 	bl	8001dbc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f120:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f122:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 801f126:	f7f0 ffd5 	bl	80100d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f12a:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 801f12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f132:	f7f0 bfa7 	b.w	8010084 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 801f136:	2101      	movs	r1, #1
 801f138:	e7f3      	b.n	801f122 <HAL_PCD_ResetCallback+0x12>
 801f13a:	bf00      	nop

0801f13c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f13c:	b510      	push	{r4, lr}
 801f13e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f140:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f144:	f7f0 ffca 	bl	80100dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f148:	6822      	ldr	r2, [r4, #0]
 801f14a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f14e:	f043 0301 	orr.w	r3, r3, #1
 801f152:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f156:	6a23      	ldr	r3, [r4, #32]
 801f158:	b123      	cbz	r3, 801f164 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f15a:	4a03      	ldr	r2, [pc, #12]	; (801f168 <HAL_PCD_SuspendCallback+0x2c>)
 801f15c:	6913      	ldr	r3, [r2, #16]
 801f15e:	f043 0306 	orr.w	r3, r3, #6
 801f162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f164:	bd10      	pop	{r4, pc}
 801f166:	bf00      	nop
 801f168:	e000ed00 	.word	0xe000ed00

0801f16c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f16c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f170:	f7f0 bfbe 	b.w	80100f0 <USBD_LL_Resume>

0801f174 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f174:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f178:	f7f0 bfd4 	b.w	8010124 <USBD_LL_IsoOUTIncomplete>

0801f17c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801f17c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f180:	f7f0 bfce 	b.w	8010120 <USBD_LL_IsoINIncomplete>

0801f184 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801f184:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f188:	f7f0 bfce 	b.w	8010128 <USBD_LL_DevConnected>

0801f18c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801f18c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 801f190:	f7f0 bfcc 	b.w	801012c <USBD_LL_DevDisconnected>

0801f194 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801f194:	7802      	ldrb	r2, [r0, #0]
 801f196:	b10a      	cbz	r2, 801f19c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 801f198:	2000      	movs	r0, #0
 801f19a:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 801f19c:	4b15      	ldr	r3, [pc, #84]	; (801f1f4 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f19e:	2101      	movs	r1, #1
{
 801f1a0:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f1a2:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f1a4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f1a8:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801f1aa:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801f1ae:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f1b2:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f1b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801f1b6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801f1b8:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801f1ba:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801f1bc:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801f1c0:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801f1c4:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801f1c8:	f7e9 fddc 	bl	8008d84 <HAL_PCD_Init>
 801f1cc:	b978      	cbnz	r0, 801f1ee <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801f1ce:	2180      	movs	r1, #128	; 0x80
 801f1d0:	4808      	ldr	r0, [pc, #32]	; (801f1f4 <USBD_LL_Init+0x60>)
 801f1d2:	f7ea fb4b 	bl	800986c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801f1d6:	2240      	movs	r2, #64	; 0x40
 801f1d8:	2100      	movs	r1, #0
 801f1da:	4806      	ldr	r0, [pc, #24]	; (801f1f4 <USBD_LL_Init+0x60>)
 801f1dc:	f7ea fb22 	bl	8009824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801f1e0:	2280      	movs	r2, #128	; 0x80
 801f1e2:	2101      	movs	r1, #1
 801f1e4:	4803      	ldr	r0, [pc, #12]	; (801f1f4 <USBD_LL_Init+0x60>)
 801f1e6:	f7ea fb1d 	bl	8009824 <HAL_PCDEx_SetTxFiFo>
}
 801f1ea:	2000      	movs	r0, #0
 801f1ec:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 801f1ee:	f7e2 fde5 	bl	8001dbc <Error_Handler>
 801f1f2:	e7ec      	b.n	801f1ce <USBD_LL_Init+0x3a>
 801f1f4:	20037824 	.word	0x20037824

0801f1f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801f1f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801f1fa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f1fe:	f7e9 fe6b 	bl	8008ed8 <HAL_PCD_Start>
 801f202:	2803      	cmp	r0, #3
 801f204:	d802      	bhi.n	801f20c <USBD_LL_Start+0x14>
 801f206:	4b02      	ldr	r3, [pc, #8]	; (801f210 <USBD_LL_Start+0x18>)
 801f208:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f20a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f20c:	2003      	movs	r0, #3
}
 801f20e:	bd08      	pop	{r3, pc}
 801f210:	0803f6d8 	.word	0x0803f6d8

0801f214 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801f214:	b510      	push	{r4, lr}
 801f216:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f218:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f21c:	4613      	mov	r3, r2
 801f21e:	4622      	mov	r2, r4
 801f220:	f7ea f9bc 	bl	800959c <HAL_PCD_EP_Open>
 801f224:	2803      	cmp	r0, #3
 801f226:	d802      	bhi.n	801f22e <USBD_LL_OpenEP+0x1a>
 801f228:	4b02      	ldr	r3, [pc, #8]	; (801f234 <USBD_LL_OpenEP+0x20>)
 801f22a:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f22c:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f22e:	2003      	movs	r0, #3
}
 801f230:	bd10      	pop	{r4, pc}
 801f232:	bf00      	nop
 801f234:	0803f6d8 	.word	0x0803f6d8

0801f238 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f238:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f23a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f23e:	f7ea f9e7 	bl	8009610 <HAL_PCD_EP_Close>
 801f242:	2803      	cmp	r0, #3
 801f244:	d802      	bhi.n	801f24c <USBD_LL_CloseEP+0x14>
 801f246:	4b02      	ldr	r3, [pc, #8]	; (801f250 <USBD_LL_CloseEP+0x18>)
 801f248:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f24a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801f24c:	2003      	movs	r0, #3
}
 801f24e:	bd08      	pop	{r3, pc}
 801f250:	0803f6d8 	.word	0x0803f6d8

0801f254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f254:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f256:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f25a:	f7ea fa63 	bl	8009724 <HAL_PCD_EP_SetStall>
 801f25e:	2803      	cmp	r0, #3
 801f260:	d802      	bhi.n	801f268 <USBD_LL_StallEP+0x14>
 801f262:	4b02      	ldr	r3, [pc, #8]	; (801f26c <USBD_LL_StallEP+0x18>)
 801f264:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f266:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f268:	2003      	movs	r0, #3
}
 801f26a:	bd08      	pop	{r3, pc}
 801f26c:	0803f6d8 	.word	0x0803f6d8

0801f270 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801f270:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f272:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f276:	f7ea fa99 	bl	80097ac <HAL_PCD_EP_ClrStall>
 801f27a:	2803      	cmp	r0, #3
 801f27c:	d802      	bhi.n	801f284 <USBD_LL_ClearStallEP+0x14>
 801f27e:	4b02      	ldr	r3, [pc, #8]	; (801f288 <USBD_LL_ClearStallEP+0x18>)
 801f280:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f282:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f284:	2003      	movs	r0, #3
}
 801f286:	bd08      	pop	{r3, pc}
 801f288:	0803f6d8 	.word	0x0803f6d8

0801f28c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 801f28c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f28e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 801f292:	d406      	bmi.n	801f2a2 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f294:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f298:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f29c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 801f2a0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f2a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801f2a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f2aa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f2ae:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 801f2b2:	4770      	bx	lr

0801f2b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801f2b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f2b6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f2ba:	f7ea f95b 	bl	8009574 <HAL_PCD_SetAddress>
 801f2be:	2803      	cmp	r0, #3
 801f2c0:	d802      	bhi.n	801f2c8 <USBD_LL_SetUSBAddress+0x14>
 801f2c2:	4b02      	ldr	r3, [pc, #8]	; (801f2cc <USBD_LL_SetUSBAddress+0x18>)
 801f2c4:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f2c6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f2c8:	2003      	movs	r0, #3
}
 801f2ca:	bd08      	pop	{r3, pc}
 801f2cc:	0803f6d8 	.word	0x0803f6d8

0801f2d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f2d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f2d2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f2d6:	f7ea fa01 	bl	80096dc <HAL_PCD_EP_Transmit>
 801f2da:	2803      	cmp	r0, #3
 801f2dc:	d802      	bhi.n	801f2e4 <USBD_LL_Transmit+0x14>
 801f2de:	4b02      	ldr	r3, [pc, #8]	; (801f2e8 <USBD_LL_Transmit+0x18>)
 801f2e0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f2e2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f2e4:	2003      	movs	r0, #3
}
 801f2e6:	bd08      	pop	{r3, pc}
 801f2e8:	0803f6d8 	.word	0x0803f6d8

0801f2ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801f2ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f2ee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f2f2:	f7ea f9c1 	bl	8009678 <HAL_PCD_EP_Receive>
 801f2f6:	2803      	cmp	r0, #3
 801f2f8:	d802      	bhi.n	801f300 <USBD_LL_PrepareReceive+0x14>
 801f2fa:	4b02      	ldr	r3, [pc, #8]	; (801f304 <USBD_LL_PrepareReceive+0x18>)
 801f2fc:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801f2fe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f300:	2003      	movs	r0, #3
}
 801f302:	bd08      	pop	{r3, pc}
 801f304:	0803f6d8 	.word	0x0803f6d8

0801f308 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801f308:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801f30c:	f7ea b9dc 	b.w	80096c8 <HAL_PCD_EP_GetRxCount>

0801f310 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801f310:	b510      	push	{r4, lr}
 801f312:	4604      	mov	r4, r0
  switch (msg)
 801f314:	b1a1      	cbz	r1, 801f340 <HAL_PCDEx_LPM_Callback+0x30>
 801f316:	2901      	cmp	r1, #1
 801f318:	d111      	bne.n	801f33e <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
    USBD_LL_Resume(hpcd->pData);
    break;

  case PCD_LPM_L1_ACTIVE:
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f31a:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 801f31c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f320:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f324:	f043 0301 	orr.w	r3, r3, #1
 801f328:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 801f32c:	f7f0 fed6 	bl	80100dc <USBD_LL_Suspend>

    /* Enter in STOP mode. */
    if (hpcd->Init.low_power_enable)
 801f330:	6a23      	ldr	r3, [r4, #32]
 801f332:	b123      	cbz	r3, 801f33e <HAL_PCDEx_LPM_Callback+0x2e>
    {
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f334:	4a0d      	ldr	r2, [pc, #52]	; (801f36c <HAL_PCDEx_LPM_Callback+0x5c>)
 801f336:	6913      	ldr	r3, [r2, #16]
 801f338:	f043 0306 	orr.w	r3, r3, #6
 801f33c:	6113      	str	r3, [r2, #16]
    }
    break;
  }
}
 801f33e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 801f340:	6a03      	ldr	r3, [r0, #32]
 801f342:	b133      	cbz	r3, 801f352 <HAL_PCDEx_LPM_Callback+0x42>
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801f344:	f7e2 fd42 	bl	8001dcc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f348:	4a08      	ldr	r2, [pc, #32]	; (801f36c <HAL_PCDEx_LPM_Callback+0x5c>)
 801f34a:	6913      	ldr	r3, [r2, #16]
 801f34c:	f023 0306 	bic.w	r3, r3, #6
 801f350:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f352:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 801f354:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f358:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801f35c:	f023 0301 	bic.w	r3, r3, #1
}
 801f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801f364:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801f368:	f7f0 bec2 	b.w	80100f0 <USBD_LL_Resume>
 801f36c:	e000ed00 	.word	0xe000ed00

0801f370 <atoi>:
 801f370:	220a      	movs	r2, #10
 801f372:	2100      	movs	r1, #0
 801f374:	f002 b940 	b.w	80215f8 <strtol>

0801f378 <ctime>:
 801f378:	b508      	push	{r3, lr}
 801f37a:	f000 f829 	bl	801f3d0 <localtime>
 801f37e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f382:	f002 bd03 	b.w	8021d8c <asctime>
	...

0801f388 <__libc_init_array>:
 801f388:	b570      	push	{r4, r5, r6, lr}
 801f38a:	4e0d      	ldr	r6, [pc, #52]	; (801f3c0 <__libc_init_array+0x38>)
 801f38c:	4c0d      	ldr	r4, [pc, #52]	; (801f3c4 <__libc_init_array+0x3c>)
 801f38e:	1ba4      	subs	r4, r4, r6
 801f390:	10a4      	asrs	r4, r4, #2
 801f392:	2500      	movs	r5, #0
 801f394:	42a5      	cmp	r5, r4
 801f396:	d109      	bne.n	801f3ac <__libc_init_array+0x24>
 801f398:	4e0b      	ldr	r6, [pc, #44]	; (801f3c8 <__libc_init_array+0x40>)
 801f39a:	4c0c      	ldr	r4, [pc, #48]	; (801f3cc <__libc_init_array+0x44>)
 801f39c:	f004 ffae 	bl	80242fc <_init>
 801f3a0:	1ba4      	subs	r4, r4, r6
 801f3a2:	10a4      	asrs	r4, r4, #2
 801f3a4:	2500      	movs	r5, #0
 801f3a6:	42a5      	cmp	r5, r4
 801f3a8:	d105      	bne.n	801f3b6 <__libc_init_array+0x2e>
 801f3aa:	bd70      	pop	{r4, r5, r6, pc}
 801f3ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f3b0:	4798      	blx	r3
 801f3b2:	3501      	adds	r5, #1
 801f3b4:	e7ee      	b.n	801f394 <__libc_init_array+0xc>
 801f3b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f3ba:	4798      	blx	r3
 801f3bc:	3501      	adds	r5, #1
 801f3be:	e7f2      	b.n	801f3a6 <__libc_init_array+0x1e>
 801f3c0:	0803fd98 	.word	0x0803fd98
 801f3c4:	0803fd98 	.word	0x0803fd98
 801f3c8:	0803fd98 	.word	0x0803fd98
 801f3cc:	0803fd9c 	.word	0x0803fd9c

0801f3d0 <localtime>:
 801f3d0:	b538      	push	{r3, r4, r5, lr}
 801f3d2:	4b07      	ldr	r3, [pc, #28]	; (801f3f0 <localtime+0x20>)
 801f3d4:	681c      	ldr	r4, [r3, #0]
 801f3d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f3d8:	4605      	mov	r5, r0
 801f3da:	b91b      	cbnz	r3, 801f3e4 <localtime+0x14>
 801f3dc:	2024      	movs	r0, #36	; 0x24
 801f3de:	f000 f907 	bl	801f5f0 <malloc>
 801f3e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 801f3e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f3e6:	4628      	mov	r0, r5
 801f3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f3ec:	f000 b802 	b.w	801f3f4 <localtime_r>
 801f3f0:	20000454 	.word	0x20000454

0801f3f4 <localtime_r>:
 801f3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3f8:	460c      	mov	r4, r1
 801f3fa:	4680      	mov	r8, r0
 801f3fc:	f003 fcbe 	bl	8022d7c <__gettzinfo>
 801f400:	4621      	mov	r1, r4
 801f402:	4607      	mov	r7, r0
 801f404:	4640      	mov	r0, r8
 801f406:	f003 fcbd 	bl	8022d84 <gmtime_r>
 801f40a:	6946      	ldr	r6, [r0, #20]
 801f40c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801f410:	07b2      	lsls	r2, r6, #30
 801f412:	4604      	mov	r4, r0
 801f414:	d105      	bne.n	801f422 <localtime_r+0x2e>
 801f416:	2264      	movs	r2, #100	; 0x64
 801f418:	fb96 f3f2 	sdiv	r3, r6, r2
 801f41c:	fb02 6313 	mls	r3, r2, r3, r6
 801f420:	bb13      	cbnz	r3, 801f468 <localtime_r+0x74>
 801f422:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f426:	fb96 f5f3 	sdiv	r5, r6, r3
 801f42a:	fb03 6515 	mls	r5, r3, r5, r6
 801f42e:	fab5 f585 	clz	r5, r5
 801f432:	096d      	lsrs	r5, r5, #5
 801f434:	4b63      	ldr	r3, [pc, #396]	; (801f5c4 <localtime_r+0x1d0>)
 801f436:	2230      	movs	r2, #48	; 0x30
 801f438:	fb02 3505 	mla	r5, r2, r5, r3
 801f43c:	f002 fa3c 	bl	80218b8 <__tz_lock>
 801f440:	f002 fa3c 	bl	80218bc <_tzset_unlocked>
 801f444:	4b60      	ldr	r3, [pc, #384]	; (801f5c8 <localtime_r+0x1d4>)
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	b323      	cbz	r3, 801f494 <localtime_r+0xa0>
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	42b3      	cmp	r3, r6
 801f44e:	d10d      	bne.n	801f46c <localtime_r+0x78>
 801f450:	683e      	ldr	r6, [r7, #0]
 801f452:	e9d8 0100 	ldrd	r0, r1, [r8]
 801f456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801f45a:	b97e      	cbnz	r6, 801f47c <localtime_r+0x88>
 801f45c:	4290      	cmp	r0, r2
 801f45e:	eb71 0303 	sbcs.w	r3, r1, r3
 801f462:	db0f      	blt.n	801f484 <localtime_r+0x90>
 801f464:	2301      	movs	r3, #1
 801f466:	e015      	b.n	801f494 <localtime_r+0xa0>
 801f468:	2501      	movs	r5, #1
 801f46a:	e7e3      	b.n	801f434 <localtime_r+0x40>
 801f46c:	4630      	mov	r0, r6
 801f46e:	f002 f97b 	bl	8021768 <__tzcalc_limits>
 801f472:	2800      	cmp	r0, #0
 801f474:	d1ec      	bne.n	801f450 <localtime_r+0x5c>
 801f476:	f04f 33ff 	mov.w	r3, #4294967295
 801f47a:	e00b      	b.n	801f494 <localtime_r+0xa0>
 801f47c:	4290      	cmp	r0, r2
 801f47e:	eb71 0303 	sbcs.w	r3, r1, r3
 801f482:	db58      	blt.n	801f536 <localtime_r+0x142>
 801f484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801f488:	4290      	cmp	r0, r2
 801f48a:	eb71 0303 	sbcs.w	r3, r1, r3
 801f48e:	bfb4      	ite	lt
 801f490:	2301      	movlt	r3, #1
 801f492:	2300      	movge	r3, #0
 801f494:	6223      	str	r3, [r4, #32]
 801f496:	6a23      	ldr	r3, [r4, #32]
 801f498:	2b01      	cmp	r3, #1
 801f49a:	bf0c      	ite	eq
 801f49c:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 801f49e:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 801f4a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f4a4:	203c      	movs	r0, #60	; 0x3c
 801f4a6:	fb91 f6f3 	sdiv	r6, r1, r3
 801f4aa:	fb03 1316 	mls	r3, r3, r6, r1
 801f4ae:	6861      	ldr	r1, [r4, #4]
 801f4b0:	fb93 f2f0 	sdiv	r2, r3, r0
 801f4b4:	fb00 3012 	mls	r0, r0, r2, r3
 801f4b8:	6823      	ldr	r3, [r4, #0]
 801f4ba:	1a89      	subs	r1, r1, r2
 801f4bc:	68a2      	ldr	r2, [r4, #8]
 801f4be:	6061      	str	r1, [r4, #4]
 801f4c0:	1a1b      	subs	r3, r3, r0
 801f4c2:	1b92      	subs	r2, r2, r6
 801f4c4:	2b3b      	cmp	r3, #59	; 0x3b
 801f4c6:	6023      	str	r3, [r4, #0]
 801f4c8:	60a2      	str	r2, [r4, #8]
 801f4ca:	dd36      	ble.n	801f53a <localtime_r+0x146>
 801f4cc:	3101      	adds	r1, #1
 801f4ce:	6061      	str	r1, [r4, #4]
 801f4d0:	3b3c      	subs	r3, #60	; 0x3c
 801f4d2:	6023      	str	r3, [r4, #0]
 801f4d4:	6863      	ldr	r3, [r4, #4]
 801f4d6:	2b3b      	cmp	r3, #59	; 0x3b
 801f4d8:	dd35      	ble.n	801f546 <localtime_r+0x152>
 801f4da:	3201      	adds	r2, #1
 801f4dc:	60a2      	str	r2, [r4, #8]
 801f4de:	3b3c      	subs	r3, #60	; 0x3c
 801f4e0:	6063      	str	r3, [r4, #4]
 801f4e2:	68a3      	ldr	r3, [r4, #8]
 801f4e4:	2b17      	cmp	r3, #23
 801f4e6:	dd34      	ble.n	801f552 <localtime_r+0x15e>
 801f4e8:	69e2      	ldr	r2, [r4, #28]
 801f4ea:	3201      	adds	r2, #1
 801f4ec:	61e2      	str	r2, [r4, #28]
 801f4ee:	69a2      	ldr	r2, [r4, #24]
 801f4f0:	3201      	adds	r2, #1
 801f4f2:	2a06      	cmp	r2, #6
 801f4f4:	bfc8      	it	gt
 801f4f6:	2200      	movgt	r2, #0
 801f4f8:	61a2      	str	r2, [r4, #24]
 801f4fa:	68e2      	ldr	r2, [r4, #12]
 801f4fc:	3b18      	subs	r3, #24
 801f4fe:	3201      	adds	r2, #1
 801f500:	60a3      	str	r3, [r4, #8]
 801f502:	6923      	ldr	r3, [r4, #16]
 801f504:	60e2      	str	r2, [r4, #12]
 801f506:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801f50a:	428a      	cmp	r2, r1
 801f50c:	dd0e      	ble.n	801f52c <localtime_r+0x138>
 801f50e:	3301      	adds	r3, #1
 801f510:	2b0c      	cmp	r3, #12
 801f512:	bf0c      	ite	eq
 801f514:	6963      	ldreq	r3, [r4, #20]
 801f516:	6123      	strne	r3, [r4, #16]
 801f518:	eba2 0201 	sub.w	r2, r2, r1
 801f51c:	60e2      	str	r2, [r4, #12]
 801f51e:	bf01      	itttt	eq
 801f520:	3301      	addeq	r3, #1
 801f522:	2200      	moveq	r2, #0
 801f524:	6122      	streq	r2, [r4, #16]
 801f526:	6163      	streq	r3, [r4, #20]
 801f528:	bf08      	it	eq
 801f52a:	61e2      	streq	r2, [r4, #28]
 801f52c:	f002 f9c5 	bl	80218ba <__tz_unlock>
 801f530:	4620      	mov	r0, r4
 801f532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f536:	2300      	movs	r3, #0
 801f538:	e7ac      	b.n	801f494 <localtime_r+0xa0>
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	daca      	bge.n	801f4d4 <localtime_r+0xe0>
 801f53e:	3901      	subs	r1, #1
 801f540:	6061      	str	r1, [r4, #4]
 801f542:	333c      	adds	r3, #60	; 0x3c
 801f544:	e7c5      	b.n	801f4d2 <localtime_r+0xde>
 801f546:	2b00      	cmp	r3, #0
 801f548:	dacb      	bge.n	801f4e2 <localtime_r+0xee>
 801f54a:	3a01      	subs	r2, #1
 801f54c:	60a2      	str	r2, [r4, #8]
 801f54e:	333c      	adds	r3, #60	; 0x3c
 801f550:	e7c6      	b.n	801f4e0 <localtime_r+0xec>
 801f552:	2b00      	cmp	r3, #0
 801f554:	daea      	bge.n	801f52c <localtime_r+0x138>
 801f556:	69e2      	ldr	r2, [r4, #28]
 801f558:	3a01      	subs	r2, #1
 801f55a:	61e2      	str	r2, [r4, #28]
 801f55c:	69a2      	ldr	r2, [r4, #24]
 801f55e:	3a01      	subs	r2, #1
 801f560:	bf48      	it	mi
 801f562:	2206      	movmi	r2, #6
 801f564:	61a2      	str	r2, [r4, #24]
 801f566:	68e2      	ldr	r2, [r4, #12]
 801f568:	3318      	adds	r3, #24
 801f56a:	3a01      	subs	r2, #1
 801f56c:	60e2      	str	r2, [r4, #12]
 801f56e:	60a3      	str	r3, [r4, #8]
 801f570:	2a00      	cmp	r2, #0
 801f572:	d1db      	bne.n	801f52c <localtime_r+0x138>
 801f574:	6923      	ldr	r3, [r4, #16]
 801f576:	3b01      	subs	r3, #1
 801f578:	d405      	bmi.n	801f586 <localtime_r+0x192>
 801f57a:	6123      	str	r3, [r4, #16]
 801f57c:	6923      	ldr	r3, [r4, #16]
 801f57e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f582:	60e3      	str	r3, [r4, #12]
 801f584:	e7d2      	b.n	801f52c <localtime_r+0x138>
 801f586:	6962      	ldr	r2, [r4, #20]
 801f588:	230b      	movs	r3, #11
 801f58a:	1e51      	subs	r1, r2, #1
 801f58c:	6123      	str	r3, [r4, #16]
 801f58e:	078b      	lsls	r3, r1, #30
 801f590:	6161      	str	r1, [r4, #20]
 801f592:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 801f596:	d105      	bne.n	801f5a4 <localtime_r+0x1b0>
 801f598:	2164      	movs	r1, #100	; 0x64
 801f59a:	fb92 f3f1 	sdiv	r3, r2, r1
 801f59e:	fb01 2313 	mls	r3, r1, r3, r2
 801f5a2:	b963      	cbnz	r3, 801f5be <localtime_r+0x1ca>
 801f5a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f5a8:	fb92 f3f1 	sdiv	r3, r2, r1
 801f5ac:	fb01 2313 	mls	r3, r1, r3, r2
 801f5b0:	fab3 f383 	clz	r3, r3
 801f5b4:	095b      	lsrs	r3, r3, #5
 801f5b6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801f5ba:	61e3      	str	r3, [r4, #28]
 801f5bc:	e7de      	b.n	801f57c <localtime_r+0x188>
 801f5be:	2301      	movs	r3, #1
 801f5c0:	e7f9      	b.n	801f5b6 <localtime_r+0x1c2>
 801f5c2:	bf00      	nop
 801f5c4:	0803f74c 	.word	0x0803f74c
 801f5c8:	20022770 	.word	0x20022770

0801f5cc <__locale_ctype_ptr_l>:
 801f5cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801f5d0:	4770      	bx	lr
	...

0801f5d4 <__locale_ctype_ptr>:
 801f5d4:	4b04      	ldr	r3, [pc, #16]	; (801f5e8 <__locale_ctype_ptr+0x14>)
 801f5d6:	4a05      	ldr	r2, [pc, #20]	; (801f5ec <__locale_ctype_ptr+0x18>)
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	6a1b      	ldr	r3, [r3, #32]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	bf08      	it	eq
 801f5e0:	4613      	moveq	r3, r2
 801f5e2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801f5e6:	4770      	bx	lr
 801f5e8:	20000454 	.word	0x20000454
 801f5ec:	200004b8 	.word	0x200004b8

0801f5f0 <malloc>:
 801f5f0:	4b02      	ldr	r3, [pc, #8]	; (801f5fc <malloc+0xc>)
 801f5f2:	4601      	mov	r1, r0
 801f5f4:	6818      	ldr	r0, [r3, #0]
 801f5f6:	f000 bb3b 	b.w	801fc70 <_malloc_r>
 801f5fa:	bf00      	nop
 801f5fc:	20000454 	.word	0x20000454

0801f600 <free>:
 801f600:	4b02      	ldr	r3, [pc, #8]	; (801f60c <free+0xc>)
 801f602:	4601      	mov	r1, r0
 801f604:	6818      	ldr	r0, [r3, #0]
 801f606:	f000 bae5 	b.w	801fbd4 <_free_r>
 801f60a:	bf00      	nop
 801f60c:	20000454 	.word	0x20000454

0801f610 <__ascii_mbtowc>:
 801f610:	b082      	sub	sp, #8
 801f612:	b901      	cbnz	r1, 801f616 <__ascii_mbtowc+0x6>
 801f614:	a901      	add	r1, sp, #4
 801f616:	b142      	cbz	r2, 801f62a <__ascii_mbtowc+0x1a>
 801f618:	b14b      	cbz	r3, 801f62e <__ascii_mbtowc+0x1e>
 801f61a:	7813      	ldrb	r3, [r2, #0]
 801f61c:	600b      	str	r3, [r1, #0]
 801f61e:	7812      	ldrb	r2, [r2, #0]
 801f620:	1c10      	adds	r0, r2, #0
 801f622:	bf18      	it	ne
 801f624:	2001      	movne	r0, #1
 801f626:	b002      	add	sp, #8
 801f628:	4770      	bx	lr
 801f62a:	4610      	mov	r0, r2
 801f62c:	e7fb      	b.n	801f626 <__ascii_mbtowc+0x16>
 801f62e:	f06f 0001 	mvn.w	r0, #1
 801f632:	e7f8      	b.n	801f626 <__ascii_mbtowc+0x16>

0801f634 <memcmp>:
 801f634:	b530      	push	{r4, r5, lr}
 801f636:	2400      	movs	r4, #0
 801f638:	42a2      	cmp	r2, r4
 801f63a:	d101      	bne.n	801f640 <memcmp+0xc>
 801f63c:	2000      	movs	r0, #0
 801f63e:	e007      	b.n	801f650 <memcmp+0x1c>
 801f640:	5d03      	ldrb	r3, [r0, r4]
 801f642:	3401      	adds	r4, #1
 801f644:	190d      	adds	r5, r1, r4
 801f646:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801f64a:	42ab      	cmp	r3, r5
 801f64c:	d0f4      	beq.n	801f638 <memcmp+0x4>
 801f64e:	1b58      	subs	r0, r3, r5
 801f650:	bd30      	pop	{r4, r5, pc}

0801f652 <memcpy>:
 801f652:	b510      	push	{r4, lr}
 801f654:	1e43      	subs	r3, r0, #1
 801f656:	440a      	add	r2, r1
 801f658:	4291      	cmp	r1, r2
 801f65a:	d100      	bne.n	801f65e <memcpy+0xc>
 801f65c:	bd10      	pop	{r4, pc}
 801f65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f662:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f666:	e7f7      	b.n	801f658 <memcpy+0x6>

0801f668 <memmove>:
 801f668:	4288      	cmp	r0, r1
 801f66a:	b510      	push	{r4, lr}
 801f66c:	eb01 0302 	add.w	r3, r1, r2
 801f670:	d807      	bhi.n	801f682 <memmove+0x1a>
 801f672:	1e42      	subs	r2, r0, #1
 801f674:	4299      	cmp	r1, r3
 801f676:	d00a      	beq.n	801f68e <memmove+0x26>
 801f678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f67c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801f680:	e7f8      	b.n	801f674 <memmove+0xc>
 801f682:	4283      	cmp	r3, r0
 801f684:	d9f5      	bls.n	801f672 <memmove+0xa>
 801f686:	1881      	adds	r1, r0, r2
 801f688:	1ad2      	subs	r2, r2, r3
 801f68a:	42d3      	cmn	r3, r2
 801f68c:	d100      	bne.n	801f690 <memmove+0x28>
 801f68e:	bd10      	pop	{r4, pc}
 801f690:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f694:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801f698:	e7f7      	b.n	801f68a <memmove+0x22>

0801f69a <memset>:
 801f69a:	4402      	add	r2, r0
 801f69c:	4603      	mov	r3, r0
 801f69e:	4293      	cmp	r3, r2
 801f6a0:	d100      	bne.n	801f6a4 <memset+0xa>
 801f6a2:	4770      	bx	lr
 801f6a4:	f803 1b01 	strb.w	r1, [r3], #1
 801f6a8:	e7f9      	b.n	801f69e <memset+0x4>
	...

0801f6ac <validate_structure>:
 801f6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6ae:	6801      	ldr	r1, [r0, #0]
 801f6b0:	293b      	cmp	r1, #59	; 0x3b
 801f6b2:	4604      	mov	r4, r0
 801f6b4:	d911      	bls.n	801f6da <validate_structure+0x2e>
 801f6b6:	223c      	movs	r2, #60	; 0x3c
 801f6b8:	4668      	mov	r0, sp
 801f6ba:	f002 fbb3 	bl	8021e24 <div>
 801f6be:	9a01      	ldr	r2, [sp, #4]
 801f6c0:	6863      	ldr	r3, [r4, #4]
 801f6c2:	9900      	ldr	r1, [sp, #0]
 801f6c4:	2a00      	cmp	r2, #0
 801f6c6:	440b      	add	r3, r1
 801f6c8:	6063      	str	r3, [r4, #4]
 801f6ca:	bfbb      	ittet	lt
 801f6cc:	323c      	addlt	r2, #60	; 0x3c
 801f6ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f6d2:	6022      	strge	r2, [r4, #0]
 801f6d4:	6022      	strlt	r2, [r4, #0]
 801f6d6:	bfb8      	it	lt
 801f6d8:	6063      	strlt	r3, [r4, #4]
 801f6da:	6861      	ldr	r1, [r4, #4]
 801f6dc:	293b      	cmp	r1, #59	; 0x3b
 801f6de:	d911      	bls.n	801f704 <validate_structure+0x58>
 801f6e0:	223c      	movs	r2, #60	; 0x3c
 801f6e2:	4668      	mov	r0, sp
 801f6e4:	f002 fb9e 	bl	8021e24 <div>
 801f6e8:	9a01      	ldr	r2, [sp, #4]
 801f6ea:	68a3      	ldr	r3, [r4, #8]
 801f6ec:	9900      	ldr	r1, [sp, #0]
 801f6ee:	2a00      	cmp	r2, #0
 801f6f0:	440b      	add	r3, r1
 801f6f2:	60a3      	str	r3, [r4, #8]
 801f6f4:	bfbb      	ittet	lt
 801f6f6:	323c      	addlt	r2, #60	; 0x3c
 801f6f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f6fc:	6062      	strge	r2, [r4, #4]
 801f6fe:	6062      	strlt	r2, [r4, #4]
 801f700:	bfb8      	it	lt
 801f702:	60a3      	strlt	r3, [r4, #8]
 801f704:	68a1      	ldr	r1, [r4, #8]
 801f706:	2917      	cmp	r1, #23
 801f708:	d911      	bls.n	801f72e <validate_structure+0x82>
 801f70a:	2218      	movs	r2, #24
 801f70c:	4668      	mov	r0, sp
 801f70e:	f002 fb89 	bl	8021e24 <div>
 801f712:	9a01      	ldr	r2, [sp, #4]
 801f714:	68e3      	ldr	r3, [r4, #12]
 801f716:	9900      	ldr	r1, [sp, #0]
 801f718:	2a00      	cmp	r2, #0
 801f71a:	440b      	add	r3, r1
 801f71c:	60e3      	str	r3, [r4, #12]
 801f71e:	bfbb      	ittet	lt
 801f720:	3218      	addlt	r2, #24
 801f722:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f726:	60a2      	strge	r2, [r4, #8]
 801f728:	60a2      	strlt	r2, [r4, #8]
 801f72a:	bfb8      	it	lt
 801f72c:	60e3      	strlt	r3, [r4, #12]
 801f72e:	6921      	ldr	r1, [r4, #16]
 801f730:	290b      	cmp	r1, #11
 801f732:	d911      	bls.n	801f758 <validate_structure+0xac>
 801f734:	220c      	movs	r2, #12
 801f736:	4668      	mov	r0, sp
 801f738:	f002 fb74 	bl	8021e24 <div>
 801f73c:	9a01      	ldr	r2, [sp, #4]
 801f73e:	6963      	ldr	r3, [r4, #20]
 801f740:	9900      	ldr	r1, [sp, #0]
 801f742:	2a00      	cmp	r2, #0
 801f744:	440b      	add	r3, r1
 801f746:	6163      	str	r3, [r4, #20]
 801f748:	bfbb      	ittet	lt
 801f74a:	320c      	addlt	r2, #12
 801f74c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801f750:	6122      	strge	r2, [r4, #16]
 801f752:	6122      	strlt	r2, [r4, #16]
 801f754:	bfb8      	it	lt
 801f756:	6163      	strlt	r3, [r4, #20]
 801f758:	6963      	ldr	r3, [r4, #20]
 801f75a:	0799      	lsls	r1, r3, #30
 801f75c:	d120      	bne.n	801f7a0 <validate_structure+0xf4>
 801f75e:	2164      	movs	r1, #100	; 0x64
 801f760:	fb93 f2f1 	sdiv	r2, r3, r1
 801f764:	fb01 3212 	mls	r2, r1, r2, r3
 801f768:	b9e2      	cbnz	r2, 801f7a4 <validate_structure+0xf8>
 801f76a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f76e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f772:	fb93 f2f1 	sdiv	r2, r3, r1
 801f776:	fb01 3312 	mls	r3, r1, r2, r3
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	bf14      	ite	ne
 801f77e:	231c      	movne	r3, #28
 801f780:	231d      	moveq	r3, #29
 801f782:	68e2      	ldr	r2, [r4, #12]
 801f784:	2a00      	cmp	r2, #0
 801f786:	dc0f      	bgt.n	801f7a8 <validate_structure+0xfc>
 801f788:	4f34      	ldr	r7, [pc, #208]	; (801f85c <validate_structure+0x1b0>)
 801f78a:	260b      	movs	r6, #11
 801f78c:	2064      	movs	r0, #100	; 0x64
 801f78e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801f792:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f796:	f1bc 0f00 	cmp.w	ip, #0
 801f79a:	dd14      	ble.n	801f7c6 <validate_structure+0x11a>
 801f79c:	b003      	add	sp, #12
 801f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7a0:	231c      	movs	r3, #28
 801f7a2:	e7ee      	b.n	801f782 <validate_structure+0xd6>
 801f7a4:	231d      	movs	r3, #29
 801f7a6:	e7ec      	b.n	801f782 <validate_structure+0xd6>
 801f7a8:	4f2c      	ldr	r7, [pc, #176]	; (801f85c <validate_structure+0x1b0>)
 801f7aa:	f04f 0c00 	mov.w	ip, #0
 801f7ae:	2564      	movs	r5, #100	; 0x64
 801f7b0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f7b4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801f7b8:	2a01      	cmp	r2, #1
 801f7ba:	d02f      	beq.n	801f81c <validate_structure+0x170>
 801f7bc:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 801f7c0:	4281      	cmp	r1, r0
 801f7c2:	dc2e      	bgt.n	801f822 <validate_structure+0x176>
 801f7c4:	e7ea      	b.n	801f79c <validate_structure+0xf0>
 801f7c6:	6921      	ldr	r1, [r4, #16]
 801f7c8:	3901      	subs	r1, #1
 801f7ca:	6121      	str	r1, [r4, #16]
 801f7cc:	3101      	adds	r1, #1
 801f7ce:	d114      	bne.n	801f7fa <validate_structure+0x14e>
 801f7d0:	6963      	ldr	r3, [r4, #20]
 801f7d2:	1e59      	subs	r1, r3, #1
 801f7d4:	078a      	lsls	r2, r1, #30
 801f7d6:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801f7da:	d117      	bne.n	801f80c <validate_structure+0x160>
 801f7dc:	fb91 f2f0 	sdiv	r2, r1, r0
 801f7e0:	fb00 1112 	mls	r1, r0, r2, r1
 801f7e4:	b9a1      	cbnz	r1, 801f810 <validate_structure+0x164>
 801f7e6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801f7ea:	fb93 f2f5 	sdiv	r2, r3, r5
 801f7ee:	fb05 3312 	mls	r3, r5, r2, r3
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	bf14      	ite	ne
 801f7f6:	231c      	movne	r3, #28
 801f7f8:	231d      	moveq	r3, #29
 801f7fa:	6922      	ldr	r2, [r4, #16]
 801f7fc:	2a01      	cmp	r2, #1
 801f7fe:	bf14      	ite	ne
 801f800:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801f804:	461a      	moveq	r2, r3
 801f806:	4462      	add	r2, ip
 801f808:	60e2      	str	r2, [r4, #12]
 801f80a:	e7c2      	b.n	801f792 <validate_structure+0xe6>
 801f80c:	231c      	movs	r3, #28
 801f80e:	e7f4      	b.n	801f7fa <validate_structure+0x14e>
 801f810:	231d      	movs	r3, #29
 801f812:	e7f2      	b.n	801f7fa <validate_structure+0x14e>
 801f814:	231c      	movs	r3, #28
 801f816:	e7cd      	b.n	801f7b4 <validate_structure+0x108>
 801f818:	231d      	movs	r3, #29
 801f81a:	e7cb      	b.n	801f7b4 <validate_structure+0x108>
 801f81c:	428b      	cmp	r3, r1
 801f81e:	dabd      	bge.n	801f79c <validate_structure+0xf0>
 801f820:	4618      	mov	r0, r3
 801f822:	3201      	adds	r2, #1
 801f824:	1a09      	subs	r1, r1, r0
 801f826:	2a0c      	cmp	r2, #12
 801f828:	60e1      	str	r1, [r4, #12]
 801f82a:	6122      	str	r2, [r4, #16]
 801f82c:	d1c2      	bne.n	801f7b4 <validate_structure+0x108>
 801f82e:	6963      	ldr	r3, [r4, #20]
 801f830:	1c5a      	adds	r2, r3, #1
 801f832:	0791      	lsls	r1, r2, #30
 801f834:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801f838:	d1ec      	bne.n	801f814 <validate_structure+0x168>
 801f83a:	fb92 f1f5 	sdiv	r1, r2, r5
 801f83e:	fb05 2211 	mls	r2, r5, r1, r2
 801f842:	2a00      	cmp	r2, #0
 801f844:	d1e8      	bne.n	801f818 <validate_structure+0x16c>
 801f846:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801f84a:	fb93 f2f6 	sdiv	r2, r3, r6
 801f84e:	fb06 3312 	mls	r3, r6, r2, r3
 801f852:	2b00      	cmp	r3, #0
 801f854:	bf14      	ite	ne
 801f856:	231c      	movne	r3, #28
 801f858:	231d      	moveq	r3, #29
 801f85a:	e7ab      	b.n	801f7b4 <validate_structure+0x108>
 801f85c:	0803f6ec 	.word	0x0803f6ec

0801f860 <mktime>:
 801f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f864:	b089      	sub	sp, #36	; 0x24
 801f866:	4606      	mov	r6, r0
 801f868:	f003 fa88 	bl	8022d7c <__gettzinfo>
 801f86c:	4680      	mov	r8, r0
 801f86e:	4630      	mov	r0, r6
 801f870:	f7ff ff1c 	bl	801f6ac <validate_structure>
 801f874:	e9d6 3000 	ldrd	r3, r0, [r6]
 801f878:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801f87c:	fb0a 3a00 	mla	sl, sl, r0, r3
 801f880:	68b0      	ldr	r0, [r6, #8]
 801f882:	4abe      	ldr	r2, [pc, #760]	; (801fb7c <mktime+0x31c>)
 801f884:	6975      	ldr	r5, [r6, #20]
 801f886:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f88a:	fb03 aa00 	mla	sl, r3, r0, sl
 801f88e:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 801f892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f896:	3c01      	subs	r4, #1
 801f898:	2b01      	cmp	r3, #1
 801f89a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801f89e:	4414      	add	r4, r2
 801f8a0:	dd11      	ble.n	801f8c6 <mktime+0x66>
 801f8a2:	07a9      	lsls	r1, r5, #30
 801f8a4:	d10f      	bne.n	801f8c6 <mktime+0x66>
 801f8a6:	2264      	movs	r2, #100	; 0x64
 801f8a8:	fb95 f3f2 	sdiv	r3, r5, r2
 801f8ac:	fb02 5313 	mls	r3, r2, r3, r5
 801f8b0:	b943      	cbnz	r3, 801f8c4 <mktime+0x64>
 801f8b2:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801f8b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f8ba:	fb91 f3f2 	sdiv	r3, r1, r2
 801f8be:	fb02 1313 	mls	r3, r2, r3, r1
 801f8c2:	b903      	cbnz	r3, 801f8c6 <mktime+0x66>
 801f8c4:	3401      	adds	r4, #1
 801f8c6:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 801f8ca:	3310      	adds	r3, #16
 801f8cc:	f644 6220 	movw	r2, #20000	; 0x4e20
 801f8d0:	4293      	cmp	r3, r2
 801f8d2:	61f4      	str	r4, [r6, #28]
 801f8d4:	f200 8179 	bhi.w	801fbca <mktime+0x36a>
 801f8d8:	2d46      	cmp	r5, #70	; 0x46
 801f8da:	f340 8084 	ble.w	801f9e6 <mktime+0x186>
 801f8de:	2346      	movs	r3, #70	; 0x46
 801f8e0:	f240 176d 	movw	r7, #365	; 0x16d
 801f8e4:	2164      	movs	r1, #100	; 0x64
 801f8e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f8ea:	079a      	lsls	r2, r3, #30
 801f8ec:	d175      	bne.n	801f9da <mktime+0x17a>
 801f8ee:	fb93 f2f1 	sdiv	r2, r3, r1
 801f8f2:	fb01 3212 	mls	r2, r1, r2, r3
 801f8f6:	2a00      	cmp	r2, #0
 801f8f8:	d172      	bne.n	801f9e0 <mktime+0x180>
 801f8fa:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801f8fe:	fb9c f2f0 	sdiv	r2, ip, r0
 801f902:	fb00 c212 	mls	r2, r0, r2, ip
 801f906:	2a00      	cmp	r2, #0
 801f908:	bf14      	ite	ne
 801f90a:	463a      	movne	r2, r7
 801f90c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801f910:	3301      	adds	r3, #1
 801f912:	429d      	cmp	r5, r3
 801f914:	4414      	add	r4, r2
 801f916:	d1e8      	bne.n	801f8ea <mktime+0x8a>
 801f918:	4b99      	ldr	r3, [pc, #612]	; (801fb80 <mktime+0x320>)
 801f91a:	4363      	muls	r3, r4
 801f91c:	eb1a 0103 	adds.w	r1, sl, r3
 801f920:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 801f924:	e9cd 1200 	strd	r1, r2, [sp]
 801f928:	f001 ffc6 	bl	80218b8 <__tz_lock>
 801f92c:	f001 ffc6 	bl	80218bc <_tzset_unlocked>
 801f930:	4b94      	ldr	r3, [pc, #592]	; (801fb84 <mktime+0x324>)
 801f932:	f8d3 9000 	ldr.w	r9, [r3]
 801f936:	f1b9 0f00 	cmp.w	r9, #0
 801f93a:	d045      	beq.n	801f9c8 <mktime+0x168>
 801f93c:	f8d6 9020 	ldr.w	r9, [r6, #32]
 801f940:	6970      	ldr	r0, [r6, #20]
 801f942:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f946:	464f      	mov	r7, r9
 801f948:	2f01      	cmp	r7, #1
 801f94a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f94e:	bfa8      	it	ge
 801f950:	2701      	movge	r7, #1
 801f952:	4283      	cmp	r3, r0
 801f954:	f040 8089 	bne.w	801fa6a <mktime+0x20a>
 801f958:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801f95c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801f960:	460a      	mov	r2, r1
 801f962:	17cb      	asrs	r3, r1, #31
 801f964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f968:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801f96c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f970:	1a12      	subs	r2, r2, r0
 801f972:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 801f976:	4692      	mov	sl, r2
 801f978:	469b      	mov	fp, r3
 801f97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f97e:	4552      	cmp	r2, sl
 801f980:	eb73 0c0b 	sbcs.w	ip, r3, fp
 801f984:	e9cd ab02 	strd	sl, fp, [sp, #8]
 801f988:	da76      	bge.n	801fa78 <mktime+0x218>
 801f98a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801f98e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f992:	ebb2 0a0a 	subs.w	sl, r2, sl
 801f996:	eb63 0b0b 	sbc.w	fp, r3, fp
 801f99a:	f8d8 3000 	ldr.w	r3, [r8]
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d079      	beq.n	801fa96 <mktime+0x236>
 801f9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f9a6:	4552      	cmp	r2, sl
 801f9a8:	eb73 030b 	sbcs.w	r3, r3, fp
 801f9ac:	db07      	blt.n	801f9be <mktime+0x15e>
 801f9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f9b2:	e9dd ab00 	ldrd	sl, fp, [sp]
 801f9b6:	4592      	cmp	sl, r2
 801f9b8:	eb7b 0303 	sbcs.w	r3, fp, r3
 801f9bc:	db71      	blt.n	801faa2 <mktime+0x242>
 801f9be:	f1b9 0f00 	cmp.w	r9, #0
 801f9c2:	f04f 0900 	mov.w	r9, #0
 801f9c6:	da71      	bge.n	801faac <mktime+0x24c>
 801f9c8:	e9dd ab00 	ldrd	sl, fp, [sp]
 801f9cc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801f9d0:	eb1a 0a03 	adds.w	sl, sl, r3
 801f9d4:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801f9d8:	e0b4      	b.n	801fb44 <mktime+0x2e4>
 801f9da:	f240 126d 	movw	r2, #365	; 0x16d
 801f9de:	e797      	b.n	801f910 <mktime+0xb0>
 801f9e0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801f9e4:	e794      	b.n	801f910 <mktime+0xb0>
 801f9e6:	d097      	beq.n	801f918 <mktime+0xb8>
 801f9e8:	2345      	movs	r3, #69	; 0x45
 801f9ea:	f240 176d 	movw	r7, #365	; 0x16d
 801f9ee:	2164      	movs	r1, #100	; 0x64
 801f9f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801f9f4:	e012      	b.n	801fa1c <mktime+0x1bc>
 801f9f6:	bb62      	cbnz	r2, 801fa52 <mktime+0x1f2>
 801f9f8:	fb93 f2f1 	sdiv	r2, r3, r1
 801f9fc:	fb01 3212 	mls	r2, r1, r2, r3
 801fa00:	bb52      	cbnz	r2, 801fa58 <mktime+0x1f8>
 801fa02:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801fa06:	fb9c f2f0 	sdiv	r2, ip, r0
 801fa0a:	fb00 c212 	mls	r2, r0, r2, ip
 801fa0e:	2a00      	cmp	r2, #0
 801fa10:	bf14      	ite	ne
 801fa12:	463a      	movne	r2, r7
 801fa14:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801fa18:	1aa4      	subs	r4, r4, r2
 801fa1a:	3b01      	subs	r3, #1
 801fa1c:	429d      	cmp	r5, r3
 801fa1e:	f003 0203 	and.w	r2, r3, #3
 801fa22:	dbe8      	blt.n	801f9f6 <mktime+0x196>
 801fa24:	b9da      	cbnz	r2, 801fa5e <mktime+0x1fe>
 801fa26:	2264      	movs	r2, #100	; 0x64
 801fa28:	fb95 f3f2 	sdiv	r3, r5, r2
 801fa2c:	fb02 5313 	mls	r3, r2, r3, r5
 801fa30:	b9c3      	cbnz	r3, 801fa64 <mktime+0x204>
 801fa32:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 801fa36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fa3a:	fb91 f3f2 	sdiv	r3, r1, r2
 801fa3e:	fb02 1313 	mls	r3, r2, r3, r1
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	f240 136d 	movw	r3, #365	; 0x16d
 801fa48:	bf08      	it	eq
 801fa4a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801fa4e:	1ae4      	subs	r4, r4, r3
 801fa50:	e762      	b.n	801f918 <mktime+0xb8>
 801fa52:	f240 126d 	movw	r2, #365	; 0x16d
 801fa56:	e7df      	b.n	801fa18 <mktime+0x1b8>
 801fa58:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801fa5c:	e7dc      	b.n	801fa18 <mktime+0x1b8>
 801fa5e:	f240 136d 	movw	r3, #365	; 0x16d
 801fa62:	e7f4      	b.n	801fa4e <mktime+0x1ee>
 801fa64:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801fa68:	e7f1      	b.n	801fa4e <mktime+0x1ee>
 801fa6a:	f001 fe7d 	bl	8021768 <__tzcalc_limits>
 801fa6e:	2800      	cmp	r0, #0
 801fa70:	f47f af72 	bne.w	801f958 <mktime+0xf8>
 801fa74:	46b9      	mov	r9, r7
 801fa76:	e057      	b.n	801fb28 <mktime+0x2c8>
 801fa78:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801fa7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801fa80:	ebb2 020a 	subs.w	r2, r2, sl
 801fa84:	eb63 030b 	sbc.w	r3, r3, fp
 801fa88:	e9dd ab00 	ldrd	sl, fp, [sp]
 801fa8c:	4592      	cmp	sl, r2
 801fa8e:	eb7b 0303 	sbcs.w	r3, fp, r3
 801fa92:	dbef      	blt.n	801fa74 <mktime+0x214>
 801fa94:	e779      	b.n	801f98a <mktime+0x12a>
 801fa96:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa9a:	4552      	cmp	r2, sl
 801fa9c:	eb73 030b 	sbcs.w	r3, r3, fp
 801faa0:	db85      	blt.n	801f9ae <mktime+0x14e>
 801faa2:	f1b9 0f00 	cmp.w	r9, #0
 801faa6:	db43      	blt.n	801fb30 <mktime+0x2d0>
 801faa8:	f04f 0901 	mov.w	r9, #1
 801faac:	ea87 0709 	eor.w	r7, r7, r9
 801fab0:	2f01      	cmp	r7, #1
 801fab2:	d139      	bne.n	801fb28 <mktime+0x2c8>
 801fab4:	1a40      	subs	r0, r0, r1
 801fab6:	f1b9 0f00 	cmp.w	r9, #0
 801faba:	d100      	bne.n	801fabe <mktime+0x25e>
 801fabc:	4240      	negs	r0, r0
 801fabe:	6833      	ldr	r3, [r6, #0]
 801fac0:	4403      	add	r3, r0
 801fac2:	6033      	str	r3, [r6, #0]
 801fac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fac8:	1812      	adds	r2, r2, r0
 801faca:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 801face:	e9cd 2300 	strd	r2, r3, [sp]
 801fad2:	4630      	mov	r0, r6
 801fad4:	68f2      	ldr	r2, [r6, #12]
 801fad6:	9202      	str	r2, [sp, #8]
 801fad8:	f7ff fde8 	bl	801f6ac <validate_structure>
 801fadc:	68f3      	ldr	r3, [r6, #12]
 801fade:	9a02      	ldr	r2, [sp, #8]
 801fae0:	1a9b      	subs	r3, r3, r2
 801fae2:	d021      	beq.n	801fb28 <mktime+0x2c8>
 801fae4:	2b01      	cmp	r3, #1
 801fae6:	dc40      	bgt.n	801fb6a <mktime+0x30a>
 801fae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801faec:	bfa8      	it	ge
 801faee:	461f      	movge	r7, r3
 801faf0:	69f3      	ldr	r3, [r6, #28]
 801faf2:	443c      	add	r4, r7
 801faf4:	18ff      	adds	r7, r7, r3
 801faf6:	d547      	bpl.n	801fb88 <mktime+0x328>
 801faf8:	1e6a      	subs	r2, r5, #1
 801fafa:	0791      	lsls	r1, r2, #30
 801fafc:	d138      	bne.n	801fb70 <mktime+0x310>
 801fafe:	2164      	movs	r1, #100	; 0x64
 801fb00:	fb92 f3f1 	sdiv	r3, r2, r1
 801fb04:	fb01 2313 	mls	r3, r1, r3, r2
 801fb08:	bbab      	cbnz	r3, 801fb76 <mktime+0x316>
 801fb0a:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 801fb0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fb12:	fb95 f3f2 	sdiv	r3, r5, r2
 801fb16:	fb02 5513 	mls	r5, r2, r3, r5
 801fb1a:	2d00      	cmp	r5, #0
 801fb1c:	f240 136d 	movw	r3, #365	; 0x16d
 801fb20:	bf18      	it	ne
 801fb22:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801fb26:	61f3      	str	r3, [r6, #28]
 801fb28:	f1b9 0f01 	cmp.w	r9, #1
 801fb2c:	f47f af4c 	bne.w	801f9c8 <mktime+0x168>
 801fb30:	e9dd ab00 	ldrd	sl, fp, [sp]
 801fb34:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 801fb38:	eb1a 0a03 	adds.w	sl, sl, r3
 801fb3c:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801fb40:	f04f 0901 	mov.w	r9, #1
 801fb44:	f001 feb9 	bl	80218ba <__tz_unlock>
 801fb48:	3404      	adds	r4, #4
 801fb4a:	2307      	movs	r3, #7
 801fb4c:	fb94 f3f3 	sdiv	r3, r4, r3
 801fb50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801fb54:	1ae4      	subs	r4, r4, r3
 801fb56:	bf48      	it	mi
 801fb58:	3407      	addmi	r4, #7
 801fb5a:	f8c6 9020 	str.w	r9, [r6, #32]
 801fb5e:	61b4      	str	r4, [r6, #24]
 801fb60:	4650      	mov	r0, sl
 801fb62:	4659      	mov	r1, fp
 801fb64:	b009      	add	sp, #36	; 0x24
 801fb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb6a:	f04f 37ff 	mov.w	r7, #4294967295
 801fb6e:	e7bf      	b.n	801faf0 <mktime+0x290>
 801fb70:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801fb74:	e7d7      	b.n	801fb26 <mktime+0x2c6>
 801fb76:	f240 136d 	movw	r3, #365	; 0x16d
 801fb7a:	e7d4      	b.n	801fb26 <mktime+0x2c6>
 801fb7c:	0803f71c 	.word	0x0803f71c
 801fb80:	00015180 	.word	0x00015180
 801fb84:	20022770 	.word	0x20022770
 801fb88:	07ab      	lsls	r3, r5, #30
 801fb8a:	d118      	bne.n	801fbbe <mktime+0x35e>
 801fb8c:	2264      	movs	r2, #100	; 0x64
 801fb8e:	fb95 f3f2 	sdiv	r3, r5, r2
 801fb92:	fb02 5313 	mls	r3, r2, r3, r5
 801fb96:	b9ab      	cbnz	r3, 801fbc4 <mktime+0x364>
 801fb98:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 801fb9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801fba0:	fb95 f3f2 	sdiv	r3, r5, r2
 801fba4:	fb02 5513 	mls	r5, r2, r3, r5
 801fba8:	2d00      	cmp	r5, #0
 801fbaa:	f240 136d 	movw	r3, #365	; 0x16d
 801fbae:	bf08      	it	eq
 801fbb0:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801fbb4:	429f      	cmp	r7, r3
 801fbb6:	bfa8      	it	ge
 801fbb8:	1aff      	subge	r7, r7, r3
 801fbba:	61f7      	str	r7, [r6, #28]
 801fbbc:	e7b4      	b.n	801fb28 <mktime+0x2c8>
 801fbbe:	f240 136d 	movw	r3, #365	; 0x16d
 801fbc2:	e7f7      	b.n	801fbb4 <mktime+0x354>
 801fbc4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801fbc8:	e7f4      	b.n	801fbb4 <mktime+0x354>
 801fbca:	f04f 3aff 	mov.w	sl, #4294967295
 801fbce:	f04f 3bff 	mov.w	fp, #4294967295
 801fbd2:	e7c5      	b.n	801fb60 <mktime+0x300>

0801fbd4 <_free_r>:
 801fbd4:	b538      	push	{r3, r4, r5, lr}
 801fbd6:	4605      	mov	r5, r0
 801fbd8:	2900      	cmp	r1, #0
 801fbda:	d045      	beq.n	801fc68 <_free_r+0x94>
 801fbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fbe0:	1f0c      	subs	r4, r1, #4
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	bfb8      	it	lt
 801fbe6:	18e4      	addlt	r4, r4, r3
 801fbe8:	f003 fa02 	bl	8022ff0 <__malloc_lock>
 801fbec:	4a1f      	ldr	r2, [pc, #124]	; (801fc6c <_free_r+0x98>)
 801fbee:	6813      	ldr	r3, [r2, #0]
 801fbf0:	4610      	mov	r0, r2
 801fbf2:	b933      	cbnz	r3, 801fc02 <_free_r+0x2e>
 801fbf4:	6063      	str	r3, [r4, #4]
 801fbf6:	6014      	str	r4, [r2, #0]
 801fbf8:	4628      	mov	r0, r5
 801fbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fbfe:	f003 b9f8 	b.w	8022ff2 <__malloc_unlock>
 801fc02:	42a3      	cmp	r3, r4
 801fc04:	d90c      	bls.n	801fc20 <_free_r+0x4c>
 801fc06:	6821      	ldr	r1, [r4, #0]
 801fc08:	1862      	adds	r2, r4, r1
 801fc0a:	4293      	cmp	r3, r2
 801fc0c:	bf04      	itt	eq
 801fc0e:	681a      	ldreq	r2, [r3, #0]
 801fc10:	685b      	ldreq	r3, [r3, #4]
 801fc12:	6063      	str	r3, [r4, #4]
 801fc14:	bf04      	itt	eq
 801fc16:	1852      	addeq	r2, r2, r1
 801fc18:	6022      	streq	r2, [r4, #0]
 801fc1a:	6004      	str	r4, [r0, #0]
 801fc1c:	e7ec      	b.n	801fbf8 <_free_r+0x24>
 801fc1e:	4613      	mov	r3, r2
 801fc20:	685a      	ldr	r2, [r3, #4]
 801fc22:	b10a      	cbz	r2, 801fc28 <_free_r+0x54>
 801fc24:	42a2      	cmp	r2, r4
 801fc26:	d9fa      	bls.n	801fc1e <_free_r+0x4a>
 801fc28:	6819      	ldr	r1, [r3, #0]
 801fc2a:	1858      	adds	r0, r3, r1
 801fc2c:	42a0      	cmp	r0, r4
 801fc2e:	d10b      	bne.n	801fc48 <_free_r+0x74>
 801fc30:	6820      	ldr	r0, [r4, #0]
 801fc32:	4401      	add	r1, r0
 801fc34:	1858      	adds	r0, r3, r1
 801fc36:	4282      	cmp	r2, r0
 801fc38:	6019      	str	r1, [r3, #0]
 801fc3a:	d1dd      	bne.n	801fbf8 <_free_r+0x24>
 801fc3c:	6810      	ldr	r0, [r2, #0]
 801fc3e:	6852      	ldr	r2, [r2, #4]
 801fc40:	605a      	str	r2, [r3, #4]
 801fc42:	4401      	add	r1, r0
 801fc44:	6019      	str	r1, [r3, #0]
 801fc46:	e7d7      	b.n	801fbf8 <_free_r+0x24>
 801fc48:	d902      	bls.n	801fc50 <_free_r+0x7c>
 801fc4a:	230c      	movs	r3, #12
 801fc4c:	602b      	str	r3, [r5, #0]
 801fc4e:	e7d3      	b.n	801fbf8 <_free_r+0x24>
 801fc50:	6820      	ldr	r0, [r4, #0]
 801fc52:	1821      	adds	r1, r4, r0
 801fc54:	428a      	cmp	r2, r1
 801fc56:	bf04      	itt	eq
 801fc58:	6811      	ldreq	r1, [r2, #0]
 801fc5a:	6852      	ldreq	r2, [r2, #4]
 801fc5c:	6062      	str	r2, [r4, #4]
 801fc5e:	bf04      	itt	eq
 801fc60:	1809      	addeq	r1, r1, r0
 801fc62:	6021      	streq	r1, [r4, #0]
 801fc64:	605c      	str	r4, [r3, #4]
 801fc66:	e7c7      	b.n	801fbf8 <_free_r+0x24>
 801fc68:	bd38      	pop	{r3, r4, r5, pc}
 801fc6a:	bf00      	nop
 801fc6c:	2002274c 	.word	0x2002274c

0801fc70 <_malloc_r>:
 801fc70:	b570      	push	{r4, r5, r6, lr}
 801fc72:	1ccd      	adds	r5, r1, #3
 801fc74:	f025 0503 	bic.w	r5, r5, #3
 801fc78:	3508      	adds	r5, #8
 801fc7a:	2d0c      	cmp	r5, #12
 801fc7c:	bf38      	it	cc
 801fc7e:	250c      	movcc	r5, #12
 801fc80:	2d00      	cmp	r5, #0
 801fc82:	4606      	mov	r6, r0
 801fc84:	db01      	blt.n	801fc8a <_malloc_r+0x1a>
 801fc86:	42a9      	cmp	r1, r5
 801fc88:	d903      	bls.n	801fc92 <_malloc_r+0x22>
 801fc8a:	230c      	movs	r3, #12
 801fc8c:	6033      	str	r3, [r6, #0]
 801fc8e:	2000      	movs	r0, #0
 801fc90:	bd70      	pop	{r4, r5, r6, pc}
 801fc92:	f003 f9ad 	bl	8022ff0 <__malloc_lock>
 801fc96:	4a21      	ldr	r2, [pc, #132]	; (801fd1c <_malloc_r+0xac>)
 801fc98:	6814      	ldr	r4, [r2, #0]
 801fc9a:	4621      	mov	r1, r4
 801fc9c:	b991      	cbnz	r1, 801fcc4 <_malloc_r+0x54>
 801fc9e:	4c20      	ldr	r4, [pc, #128]	; (801fd20 <_malloc_r+0xb0>)
 801fca0:	6823      	ldr	r3, [r4, #0]
 801fca2:	b91b      	cbnz	r3, 801fcac <_malloc_r+0x3c>
 801fca4:	4630      	mov	r0, r6
 801fca6:	f000 fd8b 	bl	80207c0 <_sbrk_r>
 801fcaa:	6020      	str	r0, [r4, #0]
 801fcac:	4629      	mov	r1, r5
 801fcae:	4630      	mov	r0, r6
 801fcb0:	f000 fd86 	bl	80207c0 <_sbrk_r>
 801fcb4:	1c43      	adds	r3, r0, #1
 801fcb6:	d124      	bne.n	801fd02 <_malloc_r+0x92>
 801fcb8:	230c      	movs	r3, #12
 801fcba:	6033      	str	r3, [r6, #0]
 801fcbc:	4630      	mov	r0, r6
 801fcbe:	f003 f998 	bl	8022ff2 <__malloc_unlock>
 801fcc2:	e7e4      	b.n	801fc8e <_malloc_r+0x1e>
 801fcc4:	680b      	ldr	r3, [r1, #0]
 801fcc6:	1b5b      	subs	r3, r3, r5
 801fcc8:	d418      	bmi.n	801fcfc <_malloc_r+0x8c>
 801fcca:	2b0b      	cmp	r3, #11
 801fccc:	d90f      	bls.n	801fcee <_malloc_r+0x7e>
 801fcce:	600b      	str	r3, [r1, #0]
 801fcd0:	50cd      	str	r5, [r1, r3]
 801fcd2:	18cc      	adds	r4, r1, r3
 801fcd4:	4630      	mov	r0, r6
 801fcd6:	f003 f98c 	bl	8022ff2 <__malloc_unlock>
 801fcda:	f104 000b 	add.w	r0, r4, #11
 801fcde:	1d23      	adds	r3, r4, #4
 801fce0:	f020 0007 	bic.w	r0, r0, #7
 801fce4:	1ac3      	subs	r3, r0, r3
 801fce6:	d0d3      	beq.n	801fc90 <_malloc_r+0x20>
 801fce8:	425a      	negs	r2, r3
 801fcea:	50e2      	str	r2, [r4, r3]
 801fcec:	e7d0      	b.n	801fc90 <_malloc_r+0x20>
 801fcee:	428c      	cmp	r4, r1
 801fcf0:	684b      	ldr	r3, [r1, #4]
 801fcf2:	bf16      	itet	ne
 801fcf4:	6063      	strne	r3, [r4, #4]
 801fcf6:	6013      	streq	r3, [r2, #0]
 801fcf8:	460c      	movne	r4, r1
 801fcfa:	e7eb      	b.n	801fcd4 <_malloc_r+0x64>
 801fcfc:	460c      	mov	r4, r1
 801fcfe:	6849      	ldr	r1, [r1, #4]
 801fd00:	e7cc      	b.n	801fc9c <_malloc_r+0x2c>
 801fd02:	1cc4      	adds	r4, r0, #3
 801fd04:	f024 0403 	bic.w	r4, r4, #3
 801fd08:	42a0      	cmp	r0, r4
 801fd0a:	d005      	beq.n	801fd18 <_malloc_r+0xa8>
 801fd0c:	1a21      	subs	r1, r4, r0
 801fd0e:	4630      	mov	r0, r6
 801fd10:	f000 fd56 	bl	80207c0 <_sbrk_r>
 801fd14:	3001      	adds	r0, #1
 801fd16:	d0cf      	beq.n	801fcb8 <_malloc_r+0x48>
 801fd18:	6025      	str	r5, [r4, #0]
 801fd1a:	e7db      	b.n	801fcd4 <_malloc_r+0x64>
 801fd1c:	2002274c 	.word	0x2002274c
 801fd20:	20022750 	.word	0x20022750

0801fd24 <__cvt>:
 801fd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd26:	ed2d 8b02 	vpush	{d8}
 801fd2a:	eeb0 8b40 	vmov.f64	d8, d0
 801fd2e:	b085      	sub	sp, #20
 801fd30:	4617      	mov	r7, r2
 801fd32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fd34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fd36:	ee18 2a90 	vmov	r2, s17
 801fd3a:	f025 0520 	bic.w	r5, r5, #32
 801fd3e:	2a00      	cmp	r2, #0
 801fd40:	bfb6      	itet	lt
 801fd42:	222d      	movlt	r2, #45	; 0x2d
 801fd44:	2200      	movge	r2, #0
 801fd46:	eeb1 8b40 	vneglt.f64	d8, d0
 801fd4a:	2d46      	cmp	r5, #70	; 0x46
 801fd4c:	460c      	mov	r4, r1
 801fd4e:	701a      	strb	r2, [r3, #0]
 801fd50:	d004      	beq.n	801fd5c <__cvt+0x38>
 801fd52:	2d45      	cmp	r5, #69	; 0x45
 801fd54:	d100      	bne.n	801fd58 <__cvt+0x34>
 801fd56:	3401      	adds	r4, #1
 801fd58:	2102      	movs	r1, #2
 801fd5a:	e000      	b.n	801fd5e <__cvt+0x3a>
 801fd5c:	2103      	movs	r1, #3
 801fd5e:	ab03      	add	r3, sp, #12
 801fd60:	9301      	str	r3, [sp, #4]
 801fd62:	ab02      	add	r3, sp, #8
 801fd64:	9300      	str	r3, [sp, #0]
 801fd66:	4622      	mov	r2, r4
 801fd68:	4633      	mov	r3, r6
 801fd6a:	eeb0 0b48 	vmov.f64	d0, d8
 801fd6e:	f002 f8fb 	bl	8021f68 <_dtoa_r>
 801fd72:	2d47      	cmp	r5, #71	; 0x47
 801fd74:	d101      	bne.n	801fd7a <__cvt+0x56>
 801fd76:	07fb      	lsls	r3, r7, #31
 801fd78:	d51e      	bpl.n	801fdb8 <__cvt+0x94>
 801fd7a:	2d46      	cmp	r5, #70	; 0x46
 801fd7c:	eb00 0304 	add.w	r3, r0, r4
 801fd80:	d10c      	bne.n	801fd9c <__cvt+0x78>
 801fd82:	7802      	ldrb	r2, [r0, #0]
 801fd84:	2a30      	cmp	r2, #48	; 0x30
 801fd86:	d107      	bne.n	801fd98 <__cvt+0x74>
 801fd88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd90:	bf1c      	itt	ne
 801fd92:	f1c4 0401 	rsbne	r4, r4, #1
 801fd96:	6034      	strne	r4, [r6, #0]
 801fd98:	6832      	ldr	r2, [r6, #0]
 801fd9a:	4413      	add	r3, r2
 801fd9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fda4:	d007      	beq.n	801fdb6 <__cvt+0x92>
 801fda6:	2130      	movs	r1, #48	; 0x30
 801fda8:	9a03      	ldr	r2, [sp, #12]
 801fdaa:	429a      	cmp	r2, r3
 801fdac:	d204      	bcs.n	801fdb8 <__cvt+0x94>
 801fdae:	1c54      	adds	r4, r2, #1
 801fdb0:	9403      	str	r4, [sp, #12]
 801fdb2:	7011      	strb	r1, [r2, #0]
 801fdb4:	e7f8      	b.n	801fda8 <__cvt+0x84>
 801fdb6:	9303      	str	r3, [sp, #12]
 801fdb8:	9b03      	ldr	r3, [sp, #12]
 801fdba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdbc:	1a1b      	subs	r3, r3, r0
 801fdbe:	6013      	str	r3, [r2, #0]
 801fdc0:	b005      	add	sp, #20
 801fdc2:	ecbd 8b02 	vpop	{d8}
 801fdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fdc8 <__exponent>:
 801fdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fdca:	2900      	cmp	r1, #0
 801fdcc:	4604      	mov	r4, r0
 801fdce:	bfba      	itte	lt
 801fdd0:	4249      	neglt	r1, r1
 801fdd2:	232d      	movlt	r3, #45	; 0x2d
 801fdd4:	232b      	movge	r3, #43	; 0x2b
 801fdd6:	2909      	cmp	r1, #9
 801fdd8:	f804 2b02 	strb.w	r2, [r4], #2
 801fddc:	7043      	strb	r3, [r0, #1]
 801fdde:	dd20      	ble.n	801fe22 <__exponent+0x5a>
 801fde0:	f10d 0307 	add.w	r3, sp, #7
 801fde4:	461f      	mov	r7, r3
 801fde6:	260a      	movs	r6, #10
 801fde8:	fb91 f5f6 	sdiv	r5, r1, r6
 801fdec:	fb06 1115 	mls	r1, r6, r5, r1
 801fdf0:	3130      	adds	r1, #48	; 0x30
 801fdf2:	2d09      	cmp	r5, #9
 801fdf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 801fdf8:	f103 32ff 	add.w	r2, r3, #4294967295
 801fdfc:	4629      	mov	r1, r5
 801fdfe:	dc09      	bgt.n	801fe14 <__exponent+0x4c>
 801fe00:	3130      	adds	r1, #48	; 0x30
 801fe02:	3b02      	subs	r3, #2
 801fe04:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fe08:	42bb      	cmp	r3, r7
 801fe0a:	4622      	mov	r2, r4
 801fe0c:	d304      	bcc.n	801fe18 <__exponent+0x50>
 801fe0e:	1a10      	subs	r0, r2, r0
 801fe10:	b003      	add	sp, #12
 801fe12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe14:	4613      	mov	r3, r2
 801fe16:	e7e7      	b.n	801fde8 <__exponent+0x20>
 801fe18:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe1c:	f804 2b01 	strb.w	r2, [r4], #1
 801fe20:	e7f2      	b.n	801fe08 <__exponent+0x40>
 801fe22:	2330      	movs	r3, #48	; 0x30
 801fe24:	4419      	add	r1, r3
 801fe26:	7083      	strb	r3, [r0, #2]
 801fe28:	1d02      	adds	r2, r0, #4
 801fe2a:	70c1      	strb	r1, [r0, #3]
 801fe2c:	e7ef      	b.n	801fe0e <__exponent+0x46>
	...

0801fe30 <_printf_float>:
 801fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe34:	b08d      	sub	sp, #52	; 0x34
 801fe36:	460c      	mov	r4, r1
 801fe38:	4616      	mov	r6, r2
 801fe3a:	461f      	mov	r7, r3
 801fe3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fe40:	4605      	mov	r5, r0
 801fe42:	f003 f851 	bl	8022ee8 <_localeconv_r>
 801fe46:	f8d0 b000 	ldr.w	fp, [r0]
 801fe4a:	4658      	mov	r0, fp
 801fe4c:	f7e0 fa02 	bl	8000254 <strlen>
 801fe50:	2300      	movs	r3, #0
 801fe52:	930a      	str	r3, [sp, #40]	; 0x28
 801fe54:	f8d8 3000 	ldr.w	r3, [r8]
 801fe58:	9005      	str	r0, [sp, #20]
 801fe5a:	3307      	adds	r3, #7
 801fe5c:	f023 0307 	bic.w	r3, r3, #7
 801fe60:	f103 0108 	add.w	r1, r3, #8
 801fe64:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fe68:	6822      	ldr	r2, [r4, #0]
 801fe6a:	f8c8 1000 	str.w	r1, [r8]
 801fe6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fe72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801fe76:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8020100 <_printf_float+0x2d0>
 801fe7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801fe7e:	eeb0 6bc0 	vabs.f64	d6, d0
 801fe82:	eeb4 6b47 	vcmp.f64	d6, d7
 801fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe8a:	dd24      	ble.n	801fed6 <_printf_float+0xa6>
 801fe8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe94:	d502      	bpl.n	801fe9c <_printf_float+0x6c>
 801fe96:	232d      	movs	r3, #45	; 0x2d
 801fe98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe9c:	499a      	ldr	r1, [pc, #616]	; (8020108 <_printf_float+0x2d8>)
 801fe9e:	4b9b      	ldr	r3, [pc, #620]	; (802010c <_printf_float+0x2dc>)
 801fea0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fea4:	bf8c      	ite	hi
 801fea6:	4688      	movhi	r8, r1
 801fea8:	4698      	movls	r8, r3
 801feaa:	f022 0204 	bic.w	r2, r2, #4
 801feae:	2303      	movs	r3, #3
 801feb0:	6123      	str	r3, [r4, #16]
 801feb2:	6022      	str	r2, [r4, #0]
 801feb4:	f04f 0a00 	mov.w	sl, #0
 801feb8:	9700      	str	r7, [sp, #0]
 801feba:	4633      	mov	r3, r6
 801febc:	aa0b      	add	r2, sp, #44	; 0x2c
 801febe:	4621      	mov	r1, r4
 801fec0:	4628      	mov	r0, r5
 801fec2:	f000 f9e1 	bl	8020288 <_printf_common>
 801fec6:	3001      	adds	r0, #1
 801fec8:	f040 8089 	bne.w	801ffde <_printf_float+0x1ae>
 801fecc:	f04f 30ff 	mov.w	r0, #4294967295
 801fed0:	b00d      	add	sp, #52	; 0x34
 801fed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fed6:	eeb4 0b40 	vcmp.f64	d0, d0
 801feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fede:	d702      	bvc.n	801fee6 <_printf_float+0xb6>
 801fee0:	498b      	ldr	r1, [pc, #556]	; (8020110 <_printf_float+0x2e0>)
 801fee2:	4b8c      	ldr	r3, [pc, #560]	; (8020114 <_printf_float+0x2e4>)
 801fee4:	e7dc      	b.n	801fea0 <_printf_float+0x70>
 801fee6:	6861      	ldr	r1, [r4, #4]
 801fee8:	1c4b      	adds	r3, r1, #1
 801feea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801feee:	ab0a      	add	r3, sp, #40	; 0x28
 801fef0:	a809      	add	r0, sp, #36	; 0x24
 801fef2:	d13b      	bne.n	801ff6c <_printf_float+0x13c>
 801fef4:	2106      	movs	r1, #6
 801fef6:	6061      	str	r1, [r4, #4]
 801fef8:	f04f 0c00 	mov.w	ip, #0
 801fefc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ff00:	e9cd 0900 	strd	r0, r9, [sp]
 801ff04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ff08:	6022      	str	r2, [r4, #0]
 801ff0a:	6861      	ldr	r1, [r4, #4]
 801ff0c:	4628      	mov	r0, r5
 801ff0e:	f7ff ff09 	bl	801fd24 <__cvt>
 801ff12:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801ff16:	2b47      	cmp	r3, #71	; 0x47
 801ff18:	4680      	mov	r8, r0
 801ff1a:	d109      	bne.n	801ff30 <_printf_float+0x100>
 801ff1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff1e:	1cd8      	adds	r0, r3, #3
 801ff20:	db02      	blt.n	801ff28 <_printf_float+0xf8>
 801ff22:	6862      	ldr	r2, [r4, #4]
 801ff24:	4293      	cmp	r3, r2
 801ff26:	dd47      	ble.n	801ffb8 <_printf_float+0x188>
 801ff28:	f1a9 0902 	sub.w	r9, r9, #2
 801ff2c:	fa5f f989 	uxtb.w	r9, r9
 801ff30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ff34:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ff36:	d824      	bhi.n	801ff82 <_printf_float+0x152>
 801ff38:	3901      	subs	r1, #1
 801ff3a:	464a      	mov	r2, r9
 801ff3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ff40:	9109      	str	r1, [sp, #36]	; 0x24
 801ff42:	f7ff ff41 	bl	801fdc8 <__exponent>
 801ff46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ff48:	1813      	adds	r3, r2, r0
 801ff4a:	2a01      	cmp	r2, #1
 801ff4c:	4682      	mov	sl, r0
 801ff4e:	6123      	str	r3, [r4, #16]
 801ff50:	dc02      	bgt.n	801ff58 <_printf_float+0x128>
 801ff52:	6822      	ldr	r2, [r4, #0]
 801ff54:	07d1      	lsls	r1, r2, #31
 801ff56:	d501      	bpl.n	801ff5c <_printf_float+0x12c>
 801ff58:	3301      	adds	r3, #1
 801ff5a:	6123      	str	r3, [r4, #16]
 801ff5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d0a9      	beq.n	801feb8 <_printf_float+0x88>
 801ff64:	232d      	movs	r3, #45	; 0x2d
 801ff66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff6a:	e7a5      	b.n	801feb8 <_printf_float+0x88>
 801ff6c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801ff70:	f000 8178 	beq.w	8020264 <_printf_float+0x434>
 801ff74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801ff78:	d1be      	bne.n	801fef8 <_printf_float+0xc8>
 801ff7a:	2900      	cmp	r1, #0
 801ff7c:	d1bc      	bne.n	801fef8 <_printf_float+0xc8>
 801ff7e:	2101      	movs	r1, #1
 801ff80:	e7b9      	b.n	801fef6 <_printf_float+0xc6>
 801ff82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ff86:	d119      	bne.n	801ffbc <_printf_float+0x18c>
 801ff88:	2900      	cmp	r1, #0
 801ff8a:	6863      	ldr	r3, [r4, #4]
 801ff8c:	dd0c      	ble.n	801ffa8 <_printf_float+0x178>
 801ff8e:	6121      	str	r1, [r4, #16]
 801ff90:	b913      	cbnz	r3, 801ff98 <_printf_float+0x168>
 801ff92:	6822      	ldr	r2, [r4, #0]
 801ff94:	07d2      	lsls	r2, r2, #31
 801ff96:	d502      	bpl.n	801ff9e <_printf_float+0x16e>
 801ff98:	3301      	adds	r3, #1
 801ff9a:	440b      	add	r3, r1
 801ff9c:	6123      	str	r3, [r4, #16]
 801ff9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffa0:	65a3      	str	r3, [r4, #88]	; 0x58
 801ffa2:	f04f 0a00 	mov.w	sl, #0
 801ffa6:	e7d9      	b.n	801ff5c <_printf_float+0x12c>
 801ffa8:	b913      	cbnz	r3, 801ffb0 <_printf_float+0x180>
 801ffaa:	6822      	ldr	r2, [r4, #0]
 801ffac:	07d0      	lsls	r0, r2, #31
 801ffae:	d501      	bpl.n	801ffb4 <_printf_float+0x184>
 801ffb0:	3302      	adds	r3, #2
 801ffb2:	e7f3      	b.n	801ff9c <_printf_float+0x16c>
 801ffb4:	2301      	movs	r3, #1
 801ffb6:	e7f1      	b.n	801ff9c <_printf_float+0x16c>
 801ffb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ffbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ffc0:	4293      	cmp	r3, r2
 801ffc2:	db05      	blt.n	801ffd0 <_printf_float+0x1a0>
 801ffc4:	6822      	ldr	r2, [r4, #0]
 801ffc6:	6123      	str	r3, [r4, #16]
 801ffc8:	07d1      	lsls	r1, r2, #31
 801ffca:	d5e8      	bpl.n	801ff9e <_printf_float+0x16e>
 801ffcc:	3301      	adds	r3, #1
 801ffce:	e7e5      	b.n	801ff9c <_printf_float+0x16c>
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	bfd4      	ite	le
 801ffd4:	f1c3 0302 	rsble	r3, r3, #2
 801ffd8:	2301      	movgt	r3, #1
 801ffda:	4413      	add	r3, r2
 801ffdc:	e7de      	b.n	801ff9c <_printf_float+0x16c>
 801ffde:	6823      	ldr	r3, [r4, #0]
 801ffe0:	055a      	lsls	r2, r3, #21
 801ffe2:	d407      	bmi.n	801fff4 <_printf_float+0x1c4>
 801ffe4:	6923      	ldr	r3, [r4, #16]
 801ffe6:	4642      	mov	r2, r8
 801ffe8:	4631      	mov	r1, r6
 801ffea:	4628      	mov	r0, r5
 801ffec:	47b8      	blx	r7
 801ffee:	3001      	adds	r0, #1
 801fff0:	d12a      	bne.n	8020048 <_printf_float+0x218>
 801fff2:	e76b      	b.n	801fecc <_printf_float+0x9c>
 801fff4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fff8:	f240 80de 	bls.w	80201b8 <_printf_float+0x388>
 801fffc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020000:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020008:	d133      	bne.n	8020072 <_printf_float+0x242>
 802000a:	2301      	movs	r3, #1
 802000c:	4a42      	ldr	r2, [pc, #264]	; (8020118 <_printf_float+0x2e8>)
 802000e:	4631      	mov	r1, r6
 8020010:	4628      	mov	r0, r5
 8020012:	47b8      	blx	r7
 8020014:	3001      	adds	r0, #1
 8020016:	f43f af59 	beq.w	801fecc <_printf_float+0x9c>
 802001a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802001e:	429a      	cmp	r2, r3
 8020020:	db02      	blt.n	8020028 <_printf_float+0x1f8>
 8020022:	6823      	ldr	r3, [r4, #0]
 8020024:	07d8      	lsls	r0, r3, #31
 8020026:	d50f      	bpl.n	8020048 <_printf_float+0x218>
 8020028:	9b05      	ldr	r3, [sp, #20]
 802002a:	465a      	mov	r2, fp
 802002c:	4631      	mov	r1, r6
 802002e:	4628      	mov	r0, r5
 8020030:	47b8      	blx	r7
 8020032:	3001      	adds	r0, #1
 8020034:	f43f af4a 	beq.w	801fecc <_printf_float+0x9c>
 8020038:	f04f 0800 	mov.w	r8, #0
 802003c:	f104 091a 	add.w	r9, r4, #26
 8020040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020042:	3b01      	subs	r3, #1
 8020044:	4543      	cmp	r3, r8
 8020046:	dc09      	bgt.n	802005c <_printf_float+0x22c>
 8020048:	6823      	ldr	r3, [r4, #0]
 802004a:	079b      	lsls	r3, r3, #30
 802004c:	f100 8105 	bmi.w	802025a <_printf_float+0x42a>
 8020050:	68e0      	ldr	r0, [r4, #12]
 8020052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020054:	4298      	cmp	r0, r3
 8020056:	bfb8      	it	lt
 8020058:	4618      	movlt	r0, r3
 802005a:	e739      	b.n	801fed0 <_printf_float+0xa0>
 802005c:	2301      	movs	r3, #1
 802005e:	464a      	mov	r2, r9
 8020060:	4631      	mov	r1, r6
 8020062:	4628      	mov	r0, r5
 8020064:	47b8      	blx	r7
 8020066:	3001      	adds	r0, #1
 8020068:	f43f af30 	beq.w	801fecc <_printf_float+0x9c>
 802006c:	f108 0801 	add.w	r8, r8, #1
 8020070:	e7e6      	b.n	8020040 <_printf_float+0x210>
 8020072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020074:	2b00      	cmp	r3, #0
 8020076:	dc2b      	bgt.n	80200d0 <_printf_float+0x2a0>
 8020078:	2301      	movs	r3, #1
 802007a:	4a27      	ldr	r2, [pc, #156]	; (8020118 <_printf_float+0x2e8>)
 802007c:	4631      	mov	r1, r6
 802007e:	4628      	mov	r0, r5
 8020080:	47b8      	blx	r7
 8020082:	3001      	adds	r0, #1
 8020084:	f43f af22 	beq.w	801fecc <_printf_float+0x9c>
 8020088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802008a:	b923      	cbnz	r3, 8020096 <_printf_float+0x266>
 802008c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802008e:	b913      	cbnz	r3, 8020096 <_printf_float+0x266>
 8020090:	6823      	ldr	r3, [r4, #0]
 8020092:	07d9      	lsls	r1, r3, #31
 8020094:	d5d8      	bpl.n	8020048 <_printf_float+0x218>
 8020096:	9b05      	ldr	r3, [sp, #20]
 8020098:	465a      	mov	r2, fp
 802009a:	4631      	mov	r1, r6
 802009c:	4628      	mov	r0, r5
 802009e:	47b8      	blx	r7
 80200a0:	3001      	adds	r0, #1
 80200a2:	f43f af13 	beq.w	801fecc <_printf_float+0x9c>
 80200a6:	f04f 0900 	mov.w	r9, #0
 80200aa:	f104 0a1a 	add.w	sl, r4, #26
 80200ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200b0:	425b      	negs	r3, r3
 80200b2:	454b      	cmp	r3, r9
 80200b4:	dc01      	bgt.n	80200ba <_printf_float+0x28a>
 80200b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200b8:	e795      	b.n	801ffe6 <_printf_float+0x1b6>
 80200ba:	2301      	movs	r3, #1
 80200bc:	4652      	mov	r2, sl
 80200be:	4631      	mov	r1, r6
 80200c0:	4628      	mov	r0, r5
 80200c2:	47b8      	blx	r7
 80200c4:	3001      	adds	r0, #1
 80200c6:	f43f af01 	beq.w	801fecc <_printf_float+0x9c>
 80200ca:	f109 0901 	add.w	r9, r9, #1
 80200ce:	e7ee      	b.n	80200ae <_printf_float+0x27e>
 80200d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80200d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80200d4:	429a      	cmp	r2, r3
 80200d6:	bfa8      	it	ge
 80200d8:	461a      	movge	r2, r3
 80200da:	2a00      	cmp	r2, #0
 80200dc:	4691      	mov	r9, r2
 80200de:	dd07      	ble.n	80200f0 <_printf_float+0x2c0>
 80200e0:	4613      	mov	r3, r2
 80200e2:	4631      	mov	r1, r6
 80200e4:	4642      	mov	r2, r8
 80200e6:	4628      	mov	r0, r5
 80200e8:	47b8      	blx	r7
 80200ea:	3001      	adds	r0, #1
 80200ec:	f43f aeee 	beq.w	801fecc <_printf_float+0x9c>
 80200f0:	f104 031a 	add.w	r3, r4, #26
 80200f4:	f04f 0a00 	mov.w	sl, #0
 80200f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80200fc:	9307      	str	r3, [sp, #28]
 80200fe:	e017      	b.n	8020130 <_printf_float+0x300>
 8020100:	ffffffff 	.word	0xffffffff
 8020104:	7fefffff 	.word	0x7fefffff
 8020108:	0803f7b0 	.word	0x0803f7b0
 802010c:	0803f7ac 	.word	0x0803f7ac
 8020110:	0803f7b8 	.word	0x0803f7b8
 8020114:	0803f7b4 	.word	0x0803f7b4
 8020118:	0803fd8b 	.word	0x0803fd8b
 802011c:	2301      	movs	r3, #1
 802011e:	9a07      	ldr	r2, [sp, #28]
 8020120:	4631      	mov	r1, r6
 8020122:	4628      	mov	r0, r5
 8020124:	47b8      	blx	r7
 8020126:	3001      	adds	r0, #1
 8020128:	f43f aed0 	beq.w	801fecc <_printf_float+0x9c>
 802012c:	f10a 0a01 	add.w	sl, sl, #1
 8020130:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020132:	9306      	str	r3, [sp, #24]
 8020134:	eba3 0309 	sub.w	r3, r3, r9
 8020138:	4553      	cmp	r3, sl
 802013a:	dcef      	bgt.n	802011c <_printf_float+0x2ec>
 802013c:	9b06      	ldr	r3, [sp, #24]
 802013e:	4498      	add	r8, r3
 8020140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020144:	429a      	cmp	r2, r3
 8020146:	db15      	blt.n	8020174 <_printf_float+0x344>
 8020148:	6823      	ldr	r3, [r4, #0]
 802014a:	07da      	lsls	r2, r3, #31
 802014c:	d412      	bmi.n	8020174 <_printf_float+0x344>
 802014e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020150:	9a06      	ldr	r2, [sp, #24]
 8020152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020154:	1a9a      	subs	r2, r3, r2
 8020156:	eba3 0a01 	sub.w	sl, r3, r1
 802015a:	4592      	cmp	sl, r2
 802015c:	bfa8      	it	ge
 802015e:	4692      	movge	sl, r2
 8020160:	f1ba 0f00 	cmp.w	sl, #0
 8020164:	dc0e      	bgt.n	8020184 <_printf_float+0x354>
 8020166:	f04f 0800 	mov.w	r8, #0
 802016a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802016e:	f104 091a 	add.w	r9, r4, #26
 8020172:	e019      	b.n	80201a8 <_printf_float+0x378>
 8020174:	9b05      	ldr	r3, [sp, #20]
 8020176:	465a      	mov	r2, fp
 8020178:	4631      	mov	r1, r6
 802017a:	4628      	mov	r0, r5
 802017c:	47b8      	blx	r7
 802017e:	3001      	adds	r0, #1
 8020180:	d1e5      	bne.n	802014e <_printf_float+0x31e>
 8020182:	e6a3      	b.n	801fecc <_printf_float+0x9c>
 8020184:	4653      	mov	r3, sl
 8020186:	4642      	mov	r2, r8
 8020188:	4631      	mov	r1, r6
 802018a:	4628      	mov	r0, r5
 802018c:	47b8      	blx	r7
 802018e:	3001      	adds	r0, #1
 8020190:	d1e9      	bne.n	8020166 <_printf_float+0x336>
 8020192:	e69b      	b.n	801fecc <_printf_float+0x9c>
 8020194:	2301      	movs	r3, #1
 8020196:	464a      	mov	r2, r9
 8020198:	4631      	mov	r1, r6
 802019a:	4628      	mov	r0, r5
 802019c:	47b8      	blx	r7
 802019e:	3001      	adds	r0, #1
 80201a0:	f43f ae94 	beq.w	801fecc <_printf_float+0x9c>
 80201a4:	f108 0801 	add.w	r8, r8, #1
 80201a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80201ac:	1a9b      	subs	r3, r3, r2
 80201ae:	eba3 030a 	sub.w	r3, r3, sl
 80201b2:	4543      	cmp	r3, r8
 80201b4:	dcee      	bgt.n	8020194 <_printf_float+0x364>
 80201b6:	e747      	b.n	8020048 <_printf_float+0x218>
 80201b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80201ba:	2a01      	cmp	r2, #1
 80201bc:	dc01      	bgt.n	80201c2 <_printf_float+0x392>
 80201be:	07db      	lsls	r3, r3, #31
 80201c0:	d539      	bpl.n	8020236 <_printf_float+0x406>
 80201c2:	2301      	movs	r3, #1
 80201c4:	4642      	mov	r2, r8
 80201c6:	4631      	mov	r1, r6
 80201c8:	4628      	mov	r0, r5
 80201ca:	47b8      	blx	r7
 80201cc:	3001      	adds	r0, #1
 80201ce:	f43f ae7d 	beq.w	801fecc <_printf_float+0x9c>
 80201d2:	9b05      	ldr	r3, [sp, #20]
 80201d4:	465a      	mov	r2, fp
 80201d6:	4631      	mov	r1, r6
 80201d8:	4628      	mov	r0, r5
 80201da:	47b8      	blx	r7
 80201dc:	3001      	adds	r0, #1
 80201de:	f108 0801 	add.w	r8, r8, #1
 80201e2:	f43f ae73 	beq.w	801fecc <_printf_float+0x9c>
 80201e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80201ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80201f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80201f8:	d018      	beq.n	802022c <_printf_float+0x3fc>
 80201fa:	4642      	mov	r2, r8
 80201fc:	4631      	mov	r1, r6
 80201fe:	4628      	mov	r0, r5
 8020200:	47b8      	blx	r7
 8020202:	3001      	adds	r0, #1
 8020204:	d10e      	bne.n	8020224 <_printf_float+0x3f4>
 8020206:	e661      	b.n	801fecc <_printf_float+0x9c>
 8020208:	2301      	movs	r3, #1
 802020a:	464a      	mov	r2, r9
 802020c:	4631      	mov	r1, r6
 802020e:	4628      	mov	r0, r5
 8020210:	47b8      	blx	r7
 8020212:	3001      	adds	r0, #1
 8020214:	f43f ae5a 	beq.w	801fecc <_printf_float+0x9c>
 8020218:	f108 0801 	add.w	r8, r8, #1
 802021c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802021e:	3b01      	subs	r3, #1
 8020220:	4543      	cmp	r3, r8
 8020222:	dcf1      	bgt.n	8020208 <_printf_float+0x3d8>
 8020224:	4653      	mov	r3, sl
 8020226:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802022a:	e6dd      	b.n	801ffe8 <_printf_float+0x1b8>
 802022c:	f04f 0800 	mov.w	r8, #0
 8020230:	f104 091a 	add.w	r9, r4, #26
 8020234:	e7f2      	b.n	802021c <_printf_float+0x3ec>
 8020236:	2301      	movs	r3, #1
 8020238:	e7df      	b.n	80201fa <_printf_float+0x3ca>
 802023a:	2301      	movs	r3, #1
 802023c:	464a      	mov	r2, r9
 802023e:	4631      	mov	r1, r6
 8020240:	4628      	mov	r0, r5
 8020242:	47b8      	blx	r7
 8020244:	3001      	adds	r0, #1
 8020246:	f43f ae41 	beq.w	801fecc <_printf_float+0x9c>
 802024a:	f108 0801 	add.w	r8, r8, #1
 802024e:	68e3      	ldr	r3, [r4, #12]
 8020250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020252:	1a9b      	subs	r3, r3, r2
 8020254:	4543      	cmp	r3, r8
 8020256:	dcf0      	bgt.n	802023a <_printf_float+0x40a>
 8020258:	e6fa      	b.n	8020050 <_printf_float+0x220>
 802025a:	f04f 0800 	mov.w	r8, #0
 802025e:	f104 0919 	add.w	r9, r4, #25
 8020262:	e7f4      	b.n	802024e <_printf_float+0x41e>
 8020264:	2900      	cmp	r1, #0
 8020266:	f43f ae8a 	beq.w	801ff7e <_printf_float+0x14e>
 802026a:	f04f 0c00 	mov.w	ip, #0
 802026e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020272:	e9cd 0900 	strd	r0, r9, [sp]
 8020276:	6022      	str	r2, [r4, #0]
 8020278:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802027c:	4628      	mov	r0, r5
 802027e:	f7ff fd51 	bl	801fd24 <__cvt>
 8020282:	4680      	mov	r8, r0
 8020284:	e64a      	b.n	801ff1c <_printf_float+0xec>
 8020286:	bf00      	nop

08020288 <_printf_common>:
 8020288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802028c:	4691      	mov	r9, r2
 802028e:	461f      	mov	r7, r3
 8020290:	688a      	ldr	r2, [r1, #8]
 8020292:	690b      	ldr	r3, [r1, #16]
 8020294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020298:	4293      	cmp	r3, r2
 802029a:	bfb8      	it	lt
 802029c:	4613      	movlt	r3, r2
 802029e:	f8c9 3000 	str.w	r3, [r9]
 80202a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80202a6:	4606      	mov	r6, r0
 80202a8:	460c      	mov	r4, r1
 80202aa:	b112      	cbz	r2, 80202b2 <_printf_common+0x2a>
 80202ac:	3301      	adds	r3, #1
 80202ae:	f8c9 3000 	str.w	r3, [r9]
 80202b2:	6823      	ldr	r3, [r4, #0]
 80202b4:	0699      	lsls	r1, r3, #26
 80202b6:	bf42      	ittt	mi
 80202b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80202bc:	3302      	addmi	r3, #2
 80202be:	f8c9 3000 	strmi.w	r3, [r9]
 80202c2:	6825      	ldr	r5, [r4, #0]
 80202c4:	f015 0506 	ands.w	r5, r5, #6
 80202c8:	d107      	bne.n	80202da <_printf_common+0x52>
 80202ca:	f104 0a19 	add.w	sl, r4, #25
 80202ce:	68e3      	ldr	r3, [r4, #12]
 80202d0:	f8d9 2000 	ldr.w	r2, [r9]
 80202d4:	1a9b      	subs	r3, r3, r2
 80202d6:	42ab      	cmp	r3, r5
 80202d8:	dc28      	bgt.n	802032c <_printf_common+0xa4>
 80202da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80202de:	6822      	ldr	r2, [r4, #0]
 80202e0:	3300      	adds	r3, #0
 80202e2:	bf18      	it	ne
 80202e4:	2301      	movne	r3, #1
 80202e6:	0692      	lsls	r2, r2, #26
 80202e8:	d42d      	bmi.n	8020346 <_printf_common+0xbe>
 80202ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80202ee:	4639      	mov	r1, r7
 80202f0:	4630      	mov	r0, r6
 80202f2:	47c0      	blx	r8
 80202f4:	3001      	adds	r0, #1
 80202f6:	d020      	beq.n	802033a <_printf_common+0xb2>
 80202f8:	6823      	ldr	r3, [r4, #0]
 80202fa:	68e5      	ldr	r5, [r4, #12]
 80202fc:	f8d9 2000 	ldr.w	r2, [r9]
 8020300:	f003 0306 	and.w	r3, r3, #6
 8020304:	2b04      	cmp	r3, #4
 8020306:	bf08      	it	eq
 8020308:	1aad      	subeq	r5, r5, r2
 802030a:	68a3      	ldr	r3, [r4, #8]
 802030c:	6922      	ldr	r2, [r4, #16]
 802030e:	bf0c      	ite	eq
 8020310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020314:	2500      	movne	r5, #0
 8020316:	4293      	cmp	r3, r2
 8020318:	bfc4      	itt	gt
 802031a:	1a9b      	subgt	r3, r3, r2
 802031c:	18ed      	addgt	r5, r5, r3
 802031e:	f04f 0900 	mov.w	r9, #0
 8020322:	341a      	adds	r4, #26
 8020324:	454d      	cmp	r5, r9
 8020326:	d11a      	bne.n	802035e <_printf_common+0xd6>
 8020328:	2000      	movs	r0, #0
 802032a:	e008      	b.n	802033e <_printf_common+0xb6>
 802032c:	2301      	movs	r3, #1
 802032e:	4652      	mov	r2, sl
 8020330:	4639      	mov	r1, r7
 8020332:	4630      	mov	r0, r6
 8020334:	47c0      	blx	r8
 8020336:	3001      	adds	r0, #1
 8020338:	d103      	bne.n	8020342 <_printf_common+0xba>
 802033a:	f04f 30ff 	mov.w	r0, #4294967295
 802033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020342:	3501      	adds	r5, #1
 8020344:	e7c3      	b.n	80202ce <_printf_common+0x46>
 8020346:	18e1      	adds	r1, r4, r3
 8020348:	1c5a      	adds	r2, r3, #1
 802034a:	2030      	movs	r0, #48	; 0x30
 802034c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020350:	4422      	add	r2, r4
 8020352:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802035a:	3302      	adds	r3, #2
 802035c:	e7c5      	b.n	80202ea <_printf_common+0x62>
 802035e:	2301      	movs	r3, #1
 8020360:	4622      	mov	r2, r4
 8020362:	4639      	mov	r1, r7
 8020364:	4630      	mov	r0, r6
 8020366:	47c0      	blx	r8
 8020368:	3001      	adds	r0, #1
 802036a:	d0e6      	beq.n	802033a <_printf_common+0xb2>
 802036c:	f109 0901 	add.w	r9, r9, #1
 8020370:	e7d8      	b.n	8020324 <_printf_common+0x9c>
	...

08020374 <_printf_i>:
 8020374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020378:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802037c:	460c      	mov	r4, r1
 802037e:	7e09      	ldrb	r1, [r1, #24]
 8020380:	b085      	sub	sp, #20
 8020382:	296e      	cmp	r1, #110	; 0x6e
 8020384:	4617      	mov	r7, r2
 8020386:	4606      	mov	r6, r0
 8020388:	4698      	mov	r8, r3
 802038a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802038c:	f000 80b3 	beq.w	80204f6 <_printf_i+0x182>
 8020390:	d822      	bhi.n	80203d8 <_printf_i+0x64>
 8020392:	2963      	cmp	r1, #99	; 0x63
 8020394:	d036      	beq.n	8020404 <_printf_i+0x90>
 8020396:	d80a      	bhi.n	80203ae <_printf_i+0x3a>
 8020398:	2900      	cmp	r1, #0
 802039a:	f000 80b9 	beq.w	8020510 <_printf_i+0x19c>
 802039e:	2958      	cmp	r1, #88	; 0x58
 80203a0:	f000 8083 	beq.w	80204aa <_printf_i+0x136>
 80203a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80203a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80203ac:	e032      	b.n	8020414 <_printf_i+0xa0>
 80203ae:	2964      	cmp	r1, #100	; 0x64
 80203b0:	d001      	beq.n	80203b6 <_printf_i+0x42>
 80203b2:	2969      	cmp	r1, #105	; 0x69
 80203b4:	d1f6      	bne.n	80203a4 <_printf_i+0x30>
 80203b6:	6820      	ldr	r0, [r4, #0]
 80203b8:	6813      	ldr	r3, [r2, #0]
 80203ba:	0605      	lsls	r5, r0, #24
 80203bc:	f103 0104 	add.w	r1, r3, #4
 80203c0:	d52a      	bpl.n	8020418 <_printf_i+0xa4>
 80203c2:	681b      	ldr	r3, [r3, #0]
 80203c4:	6011      	str	r1, [r2, #0]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	da03      	bge.n	80203d2 <_printf_i+0x5e>
 80203ca:	222d      	movs	r2, #45	; 0x2d
 80203cc:	425b      	negs	r3, r3
 80203ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80203d2:	486f      	ldr	r0, [pc, #444]	; (8020590 <_printf_i+0x21c>)
 80203d4:	220a      	movs	r2, #10
 80203d6:	e039      	b.n	802044c <_printf_i+0xd8>
 80203d8:	2973      	cmp	r1, #115	; 0x73
 80203da:	f000 809d 	beq.w	8020518 <_printf_i+0x1a4>
 80203de:	d808      	bhi.n	80203f2 <_printf_i+0x7e>
 80203e0:	296f      	cmp	r1, #111	; 0x6f
 80203e2:	d020      	beq.n	8020426 <_printf_i+0xb2>
 80203e4:	2970      	cmp	r1, #112	; 0x70
 80203e6:	d1dd      	bne.n	80203a4 <_printf_i+0x30>
 80203e8:	6823      	ldr	r3, [r4, #0]
 80203ea:	f043 0320 	orr.w	r3, r3, #32
 80203ee:	6023      	str	r3, [r4, #0]
 80203f0:	e003      	b.n	80203fa <_printf_i+0x86>
 80203f2:	2975      	cmp	r1, #117	; 0x75
 80203f4:	d017      	beq.n	8020426 <_printf_i+0xb2>
 80203f6:	2978      	cmp	r1, #120	; 0x78
 80203f8:	d1d4      	bne.n	80203a4 <_printf_i+0x30>
 80203fa:	2378      	movs	r3, #120	; 0x78
 80203fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020400:	4864      	ldr	r0, [pc, #400]	; (8020594 <_printf_i+0x220>)
 8020402:	e055      	b.n	80204b0 <_printf_i+0x13c>
 8020404:	6813      	ldr	r3, [r2, #0]
 8020406:	1d19      	adds	r1, r3, #4
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	6011      	str	r1, [r2, #0]
 802040c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020414:	2301      	movs	r3, #1
 8020416:	e08c      	b.n	8020532 <_printf_i+0x1be>
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	6011      	str	r1, [r2, #0]
 802041c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020420:	bf18      	it	ne
 8020422:	b21b      	sxthne	r3, r3
 8020424:	e7cf      	b.n	80203c6 <_printf_i+0x52>
 8020426:	6813      	ldr	r3, [r2, #0]
 8020428:	6825      	ldr	r5, [r4, #0]
 802042a:	1d18      	adds	r0, r3, #4
 802042c:	6010      	str	r0, [r2, #0]
 802042e:	0628      	lsls	r0, r5, #24
 8020430:	d501      	bpl.n	8020436 <_printf_i+0xc2>
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	e002      	b.n	802043c <_printf_i+0xc8>
 8020436:	0668      	lsls	r0, r5, #25
 8020438:	d5fb      	bpl.n	8020432 <_printf_i+0xbe>
 802043a:	881b      	ldrh	r3, [r3, #0]
 802043c:	4854      	ldr	r0, [pc, #336]	; (8020590 <_printf_i+0x21c>)
 802043e:	296f      	cmp	r1, #111	; 0x6f
 8020440:	bf14      	ite	ne
 8020442:	220a      	movne	r2, #10
 8020444:	2208      	moveq	r2, #8
 8020446:	2100      	movs	r1, #0
 8020448:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802044c:	6865      	ldr	r5, [r4, #4]
 802044e:	60a5      	str	r5, [r4, #8]
 8020450:	2d00      	cmp	r5, #0
 8020452:	f2c0 8095 	blt.w	8020580 <_printf_i+0x20c>
 8020456:	6821      	ldr	r1, [r4, #0]
 8020458:	f021 0104 	bic.w	r1, r1, #4
 802045c:	6021      	str	r1, [r4, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d13d      	bne.n	80204de <_printf_i+0x16a>
 8020462:	2d00      	cmp	r5, #0
 8020464:	f040 808e 	bne.w	8020584 <_printf_i+0x210>
 8020468:	4665      	mov	r5, ip
 802046a:	2a08      	cmp	r2, #8
 802046c:	d10b      	bne.n	8020486 <_printf_i+0x112>
 802046e:	6823      	ldr	r3, [r4, #0]
 8020470:	07db      	lsls	r3, r3, #31
 8020472:	d508      	bpl.n	8020486 <_printf_i+0x112>
 8020474:	6923      	ldr	r3, [r4, #16]
 8020476:	6862      	ldr	r2, [r4, #4]
 8020478:	429a      	cmp	r2, r3
 802047a:	bfde      	ittt	le
 802047c:	2330      	movle	r3, #48	; 0x30
 802047e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020482:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020486:	ebac 0305 	sub.w	r3, ip, r5
 802048a:	6123      	str	r3, [r4, #16]
 802048c:	f8cd 8000 	str.w	r8, [sp]
 8020490:	463b      	mov	r3, r7
 8020492:	aa03      	add	r2, sp, #12
 8020494:	4621      	mov	r1, r4
 8020496:	4630      	mov	r0, r6
 8020498:	f7ff fef6 	bl	8020288 <_printf_common>
 802049c:	3001      	adds	r0, #1
 802049e:	d14d      	bne.n	802053c <_printf_i+0x1c8>
 80204a0:	f04f 30ff 	mov.w	r0, #4294967295
 80204a4:	b005      	add	sp, #20
 80204a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204aa:	4839      	ldr	r0, [pc, #228]	; (8020590 <_printf_i+0x21c>)
 80204ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80204b0:	6813      	ldr	r3, [r2, #0]
 80204b2:	6821      	ldr	r1, [r4, #0]
 80204b4:	1d1d      	adds	r5, r3, #4
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	6015      	str	r5, [r2, #0]
 80204ba:	060a      	lsls	r2, r1, #24
 80204bc:	d50b      	bpl.n	80204d6 <_printf_i+0x162>
 80204be:	07ca      	lsls	r2, r1, #31
 80204c0:	bf44      	itt	mi
 80204c2:	f041 0120 	orrmi.w	r1, r1, #32
 80204c6:	6021      	strmi	r1, [r4, #0]
 80204c8:	b91b      	cbnz	r3, 80204d2 <_printf_i+0x15e>
 80204ca:	6822      	ldr	r2, [r4, #0]
 80204cc:	f022 0220 	bic.w	r2, r2, #32
 80204d0:	6022      	str	r2, [r4, #0]
 80204d2:	2210      	movs	r2, #16
 80204d4:	e7b7      	b.n	8020446 <_printf_i+0xd2>
 80204d6:	064d      	lsls	r5, r1, #25
 80204d8:	bf48      	it	mi
 80204da:	b29b      	uxthmi	r3, r3
 80204dc:	e7ef      	b.n	80204be <_printf_i+0x14a>
 80204de:	4665      	mov	r5, ip
 80204e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80204e4:	fb02 3311 	mls	r3, r2, r1, r3
 80204e8:	5cc3      	ldrb	r3, [r0, r3]
 80204ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80204ee:	460b      	mov	r3, r1
 80204f0:	2900      	cmp	r1, #0
 80204f2:	d1f5      	bne.n	80204e0 <_printf_i+0x16c>
 80204f4:	e7b9      	b.n	802046a <_printf_i+0xf6>
 80204f6:	6813      	ldr	r3, [r2, #0]
 80204f8:	6825      	ldr	r5, [r4, #0]
 80204fa:	6961      	ldr	r1, [r4, #20]
 80204fc:	1d18      	adds	r0, r3, #4
 80204fe:	6010      	str	r0, [r2, #0]
 8020500:	0628      	lsls	r0, r5, #24
 8020502:	681b      	ldr	r3, [r3, #0]
 8020504:	d501      	bpl.n	802050a <_printf_i+0x196>
 8020506:	6019      	str	r1, [r3, #0]
 8020508:	e002      	b.n	8020510 <_printf_i+0x19c>
 802050a:	066a      	lsls	r2, r5, #25
 802050c:	d5fb      	bpl.n	8020506 <_printf_i+0x192>
 802050e:	8019      	strh	r1, [r3, #0]
 8020510:	2300      	movs	r3, #0
 8020512:	6123      	str	r3, [r4, #16]
 8020514:	4665      	mov	r5, ip
 8020516:	e7b9      	b.n	802048c <_printf_i+0x118>
 8020518:	6813      	ldr	r3, [r2, #0]
 802051a:	1d19      	adds	r1, r3, #4
 802051c:	6011      	str	r1, [r2, #0]
 802051e:	681d      	ldr	r5, [r3, #0]
 8020520:	6862      	ldr	r2, [r4, #4]
 8020522:	2100      	movs	r1, #0
 8020524:	4628      	mov	r0, r5
 8020526:	f7df fea3 	bl	8000270 <memchr>
 802052a:	b108      	cbz	r0, 8020530 <_printf_i+0x1bc>
 802052c:	1b40      	subs	r0, r0, r5
 802052e:	6060      	str	r0, [r4, #4]
 8020530:	6863      	ldr	r3, [r4, #4]
 8020532:	6123      	str	r3, [r4, #16]
 8020534:	2300      	movs	r3, #0
 8020536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802053a:	e7a7      	b.n	802048c <_printf_i+0x118>
 802053c:	6923      	ldr	r3, [r4, #16]
 802053e:	462a      	mov	r2, r5
 8020540:	4639      	mov	r1, r7
 8020542:	4630      	mov	r0, r6
 8020544:	47c0      	blx	r8
 8020546:	3001      	adds	r0, #1
 8020548:	d0aa      	beq.n	80204a0 <_printf_i+0x12c>
 802054a:	6823      	ldr	r3, [r4, #0]
 802054c:	079b      	lsls	r3, r3, #30
 802054e:	d413      	bmi.n	8020578 <_printf_i+0x204>
 8020550:	68e0      	ldr	r0, [r4, #12]
 8020552:	9b03      	ldr	r3, [sp, #12]
 8020554:	4298      	cmp	r0, r3
 8020556:	bfb8      	it	lt
 8020558:	4618      	movlt	r0, r3
 802055a:	e7a3      	b.n	80204a4 <_printf_i+0x130>
 802055c:	2301      	movs	r3, #1
 802055e:	464a      	mov	r2, r9
 8020560:	4639      	mov	r1, r7
 8020562:	4630      	mov	r0, r6
 8020564:	47c0      	blx	r8
 8020566:	3001      	adds	r0, #1
 8020568:	d09a      	beq.n	80204a0 <_printf_i+0x12c>
 802056a:	3501      	adds	r5, #1
 802056c:	68e3      	ldr	r3, [r4, #12]
 802056e:	9a03      	ldr	r2, [sp, #12]
 8020570:	1a9b      	subs	r3, r3, r2
 8020572:	42ab      	cmp	r3, r5
 8020574:	dcf2      	bgt.n	802055c <_printf_i+0x1e8>
 8020576:	e7eb      	b.n	8020550 <_printf_i+0x1dc>
 8020578:	2500      	movs	r5, #0
 802057a:	f104 0919 	add.w	r9, r4, #25
 802057e:	e7f5      	b.n	802056c <_printf_i+0x1f8>
 8020580:	2b00      	cmp	r3, #0
 8020582:	d1ac      	bne.n	80204de <_printf_i+0x16a>
 8020584:	7803      	ldrb	r3, [r0, #0]
 8020586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802058a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802058e:	e76c      	b.n	802046a <_printf_i+0xf6>
 8020590:	0803f7bc 	.word	0x0803f7bc
 8020594:	0803f7cd 	.word	0x0803f7cd

08020598 <iprintf>:
 8020598:	b40f      	push	{r0, r1, r2, r3}
 802059a:	4b0a      	ldr	r3, [pc, #40]	; (80205c4 <iprintf+0x2c>)
 802059c:	b513      	push	{r0, r1, r4, lr}
 802059e:	681c      	ldr	r4, [r3, #0]
 80205a0:	b124      	cbz	r4, 80205ac <iprintf+0x14>
 80205a2:	69a3      	ldr	r3, [r4, #24]
 80205a4:	b913      	cbnz	r3, 80205ac <iprintf+0x14>
 80205a6:	4620      	mov	r0, r4
 80205a8:	f002 fb1a 	bl	8022be0 <__sinit>
 80205ac:	ab05      	add	r3, sp, #20
 80205ae:	9a04      	ldr	r2, [sp, #16]
 80205b0:	68a1      	ldr	r1, [r4, #8]
 80205b2:	9301      	str	r3, [sp, #4]
 80205b4:	4620      	mov	r0, r4
 80205b6:	f003 fb53 	bl	8023c60 <_vfiprintf_r>
 80205ba:	b002      	add	sp, #8
 80205bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205c0:	b004      	add	sp, #16
 80205c2:	4770      	bx	lr
 80205c4:	20000454 	.word	0x20000454

080205c8 <putchar>:
 80205c8:	b538      	push	{r3, r4, r5, lr}
 80205ca:	4b08      	ldr	r3, [pc, #32]	; (80205ec <putchar+0x24>)
 80205cc:	681c      	ldr	r4, [r3, #0]
 80205ce:	4605      	mov	r5, r0
 80205d0:	b124      	cbz	r4, 80205dc <putchar+0x14>
 80205d2:	69a3      	ldr	r3, [r4, #24]
 80205d4:	b913      	cbnz	r3, 80205dc <putchar+0x14>
 80205d6:	4620      	mov	r0, r4
 80205d8:	f002 fb02 	bl	8022be0 <__sinit>
 80205dc:	68a2      	ldr	r2, [r4, #8]
 80205de:	4629      	mov	r1, r5
 80205e0:	4620      	mov	r0, r4
 80205e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80205e6:	f003 bda9 	b.w	802413c <_putc_r>
 80205ea:	bf00      	nop
 80205ec:	20000454 	.word	0x20000454

080205f0 <_puts_r>:
 80205f0:	b570      	push	{r4, r5, r6, lr}
 80205f2:	460e      	mov	r6, r1
 80205f4:	4605      	mov	r5, r0
 80205f6:	b118      	cbz	r0, 8020600 <_puts_r+0x10>
 80205f8:	6983      	ldr	r3, [r0, #24]
 80205fa:	b90b      	cbnz	r3, 8020600 <_puts_r+0x10>
 80205fc:	f002 faf0 	bl	8022be0 <__sinit>
 8020600:	69ab      	ldr	r3, [r5, #24]
 8020602:	68ac      	ldr	r4, [r5, #8]
 8020604:	b913      	cbnz	r3, 802060c <_puts_r+0x1c>
 8020606:	4628      	mov	r0, r5
 8020608:	f002 faea 	bl	8022be0 <__sinit>
 802060c:	4b23      	ldr	r3, [pc, #140]	; (802069c <_puts_r+0xac>)
 802060e:	429c      	cmp	r4, r3
 8020610:	d117      	bne.n	8020642 <_puts_r+0x52>
 8020612:	686c      	ldr	r4, [r5, #4]
 8020614:	89a3      	ldrh	r3, [r4, #12]
 8020616:	071b      	lsls	r3, r3, #28
 8020618:	d51d      	bpl.n	8020656 <_puts_r+0x66>
 802061a:	6923      	ldr	r3, [r4, #16]
 802061c:	b1db      	cbz	r3, 8020656 <_puts_r+0x66>
 802061e:	3e01      	subs	r6, #1
 8020620:	68a3      	ldr	r3, [r4, #8]
 8020622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020626:	3b01      	subs	r3, #1
 8020628:	60a3      	str	r3, [r4, #8]
 802062a:	b9e9      	cbnz	r1, 8020668 <_puts_r+0x78>
 802062c:	2b00      	cmp	r3, #0
 802062e:	da2e      	bge.n	802068e <_puts_r+0x9e>
 8020630:	4622      	mov	r2, r4
 8020632:	210a      	movs	r1, #10
 8020634:	4628      	mov	r0, r5
 8020636:	f001 fac5 	bl	8021bc4 <__swbuf_r>
 802063a:	3001      	adds	r0, #1
 802063c:	d011      	beq.n	8020662 <_puts_r+0x72>
 802063e:	200a      	movs	r0, #10
 8020640:	e011      	b.n	8020666 <_puts_r+0x76>
 8020642:	4b17      	ldr	r3, [pc, #92]	; (80206a0 <_puts_r+0xb0>)
 8020644:	429c      	cmp	r4, r3
 8020646:	d101      	bne.n	802064c <_puts_r+0x5c>
 8020648:	68ac      	ldr	r4, [r5, #8]
 802064a:	e7e3      	b.n	8020614 <_puts_r+0x24>
 802064c:	4b15      	ldr	r3, [pc, #84]	; (80206a4 <_puts_r+0xb4>)
 802064e:	429c      	cmp	r4, r3
 8020650:	bf08      	it	eq
 8020652:	68ec      	ldreq	r4, [r5, #12]
 8020654:	e7de      	b.n	8020614 <_puts_r+0x24>
 8020656:	4621      	mov	r1, r4
 8020658:	4628      	mov	r0, r5
 802065a:	f001 fb25 	bl	8021ca8 <__swsetup_r>
 802065e:	2800      	cmp	r0, #0
 8020660:	d0dd      	beq.n	802061e <_puts_r+0x2e>
 8020662:	f04f 30ff 	mov.w	r0, #4294967295
 8020666:	bd70      	pop	{r4, r5, r6, pc}
 8020668:	2b00      	cmp	r3, #0
 802066a:	da04      	bge.n	8020676 <_puts_r+0x86>
 802066c:	69a2      	ldr	r2, [r4, #24]
 802066e:	429a      	cmp	r2, r3
 8020670:	dc06      	bgt.n	8020680 <_puts_r+0x90>
 8020672:	290a      	cmp	r1, #10
 8020674:	d004      	beq.n	8020680 <_puts_r+0x90>
 8020676:	6823      	ldr	r3, [r4, #0]
 8020678:	1c5a      	adds	r2, r3, #1
 802067a:	6022      	str	r2, [r4, #0]
 802067c:	7019      	strb	r1, [r3, #0]
 802067e:	e7cf      	b.n	8020620 <_puts_r+0x30>
 8020680:	4622      	mov	r2, r4
 8020682:	4628      	mov	r0, r5
 8020684:	f001 fa9e 	bl	8021bc4 <__swbuf_r>
 8020688:	3001      	adds	r0, #1
 802068a:	d1c9      	bne.n	8020620 <_puts_r+0x30>
 802068c:	e7e9      	b.n	8020662 <_puts_r+0x72>
 802068e:	6823      	ldr	r3, [r4, #0]
 8020690:	200a      	movs	r0, #10
 8020692:	1c5a      	adds	r2, r3, #1
 8020694:	6022      	str	r2, [r4, #0]
 8020696:	7018      	strb	r0, [r3, #0]
 8020698:	e7e5      	b.n	8020666 <_puts_r+0x76>
 802069a:	bf00      	nop
 802069c:	0803fc24 	.word	0x0803fc24
 80206a0:	0803fc44 	.word	0x0803fc44
 80206a4:	0803fc04 	.word	0x0803fc04

080206a8 <puts>:
 80206a8:	4b02      	ldr	r3, [pc, #8]	; (80206b4 <puts+0xc>)
 80206aa:	4601      	mov	r1, r0
 80206ac:	6818      	ldr	r0, [r3, #0]
 80206ae:	f7ff bf9f 	b.w	80205f0 <_puts_r>
 80206b2:	bf00      	nop
 80206b4:	20000454 	.word	0x20000454

080206b8 <rand>:
 80206b8:	b538      	push	{r3, r4, r5, lr}
 80206ba:	4b13      	ldr	r3, [pc, #76]	; (8020708 <rand+0x50>)
 80206bc:	681c      	ldr	r4, [r3, #0]
 80206be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80206c0:	b97b      	cbnz	r3, 80206e2 <rand+0x2a>
 80206c2:	2018      	movs	r0, #24
 80206c4:	f7fe ff94 	bl	801f5f0 <malloc>
 80206c8:	4a10      	ldr	r2, [pc, #64]	; (802070c <rand+0x54>)
 80206ca:	4b11      	ldr	r3, [pc, #68]	; (8020710 <rand+0x58>)
 80206cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80206ce:	e9c0 2300 	strd	r2, r3, [r0]
 80206d2:	4b10      	ldr	r3, [pc, #64]	; (8020714 <rand+0x5c>)
 80206d4:	6083      	str	r3, [r0, #8]
 80206d6:	230b      	movs	r3, #11
 80206d8:	8183      	strh	r3, [r0, #12]
 80206da:	2201      	movs	r2, #1
 80206dc:	2300      	movs	r3, #0
 80206de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80206e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80206e4:	480c      	ldr	r0, [pc, #48]	; (8020718 <rand+0x60>)
 80206e6:	690a      	ldr	r2, [r1, #16]
 80206e8:	694b      	ldr	r3, [r1, #20]
 80206ea:	4c0c      	ldr	r4, [pc, #48]	; (802071c <rand+0x64>)
 80206ec:	4350      	muls	r0, r2
 80206ee:	fb04 0003 	mla	r0, r4, r3, r0
 80206f2:	fba2 2304 	umull	r2, r3, r2, r4
 80206f6:	4403      	add	r3, r0
 80206f8:	1c54      	adds	r4, r2, #1
 80206fa:	f143 0500 	adc.w	r5, r3, #0
 80206fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8020702:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8020706:	bd38      	pop	{r3, r4, r5, pc}
 8020708:	20000454 	.word	0x20000454
 802070c:	abcd330e 	.word	0xabcd330e
 8020710:	e66d1234 	.word	0xe66d1234
 8020714:	0005deec 	.word	0x0005deec
 8020718:	5851f42d 	.word	0x5851f42d
 802071c:	4c957f2d 	.word	0x4c957f2d

08020720 <realloc>:
 8020720:	4b02      	ldr	r3, [pc, #8]	; (802072c <realloc+0xc>)
 8020722:	460a      	mov	r2, r1
 8020724:	4601      	mov	r1, r0
 8020726:	6818      	ldr	r0, [r3, #0]
 8020728:	f002 bf4e 	b.w	80235c8 <_realloc_r>
 802072c:	20000454 	.word	0x20000454

08020730 <modf>:
 8020730:	ee10 1a90 	vmov	r1, s1
 8020734:	b570      	push	{r4, r5, r6, lr}
 8020736:	f3c1 550a 	ubfx	r5, r1, #20, #11
 802073a:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 802073e:	2b13      	cmp	r3, #19
 8020740:	ee10 4a10 	vmov	r4, s0
 8020744:	dc1f      	bgt.n	8020786 <modf+0x56>
 8020746:	2b00      	cmp	r3, #0
 8020748:	da05      	bge.n	8020756 <modf+0x26>
 802074a:	2200      	movs	r2, #0
 802074c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020750:	e9c0 2300 	strd	r2, r3, [r0]
 8020754:	bd70      	pop	{r4, r5, r6, pc}
 8020756:	4d19      	ldr	r5, [pc, #100]	; (80207bc <modf+0x8c>)
 8020758:	411d      	asrs	r5, r3
 802075a:	ea01 0305 	and.w	r3, r1, r5
 802075e:	431c      	orrs	r4, r3
 8020760:	d107      	bne.n	8020772 <modf+0x42>
 8020762:	ed80 0b00 	vstr	d0, [r0]
 8020766:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802076a:	4622      	mov	r2, r4
 802076c:	ec43 2b10 	vmov	d0, r2, r3
 8020770:	e7f0      	b.n	8020754 <modf+0x24>
 8020772:	2200      	movs	r2, #0
 8020774:	ea21 0305 	bic.w	r3, r1, r5
 8020778:	ec43 2b17 	vmov	d7, r2, r3
 802077c:	e9c0 2300 	strd	r2, r3, [r0]
 8020780:	ee30 0b47 	vsub.f64	d0, d0, d7
 8020784:	e7e6      	b.n	8020754 <modf+0x24>
 8020786:	2b33      	cmp	r3, #51	; 0x33
 8020788:	dd05      	ble.n	8020796 <modf+0x66>
 802078a:	ed80 0b00 	vstr	d0, [r0]
 802078e:	2200      	movs	r2, #0
 8020790:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8020794:	e7ea      	b.n	802076c <modf+0x3c>
 8020796:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 802079a:	f04f 35ff 	mov.w	r5, #4294967295
 802079e:	40dd      	lsrs	r5, r3
 80207a0:	ea15 0604 	ands.w	r6, r5, r4
 80207a4:	d105      	bne.n	80207b2 <modf+0x82>
 80207a6:	ed80 0b00 	vstr	d0, [r0]
 80207aa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80207ae:	4632      	mov	r2, r6
 80207b0:	e7dc      	b.n	802076c <modf+0x3c>
 80207b2:	ee10 3a90 	vmov	r3, s1
 80207b6:	ea24 0205 	bic.w	r2, r4, r5
 80207ba:	e7dd      	b.n	8020778 <modf+0x48>
 80207bc:	000fffff 	.word	0x000fffff

080207c0 <_sbrk_r>:
 80207c0:	b538      	push	{r3, r4, r5, lr}
 80207c2:	4c06      	ldr	r4, [pc, #24]	; (80207dc <_sbrk_r+0x1c>)
 80207c4:	2300      	movs	r3, #0
 80207c6:	4605      	mov	r5, r0
 80207c8:	4608      	mov	r0, r1
 80207ca:	6023      	str	r3, [r4, #0]
 80207cc:	f7e3 ffe2 	bl	8004794 <_sbrk>
 80207d0:	1c43      	adds	r3, r0, #1
 80207d2:	d102      	bne.n	80207da <_sbrk_r+0x1a>
 80207d4:	6823      	ldr	r3, [r4, #0]
 80207d6:	b103      	cbz	r3, 80207da <_sbrk_r+0x1a>
 80207d8:	602b      	str	r3, [r5, #0]
 80207da:	bd38      	pop	{r3, r4, r5, pc}
 80207dc:	2003634c 	.word	0x2003634c

080207e0 <sniprintf>:
 80207e0:	b40c      	push	{r2, r3}
 80207e2:	b530      	push	{r4, r5, lr}
 80207e4:	4b17      	ldr	r3, [pc, #92]	; (8020844 <sniprintf+0x64>)
 80207e6:	1e0c      	subs	r4, r1, #0
 80207e8:	b09d      	sub	sp, #116	; 0x74
 80207ea:	681d      	ldr	r5, [r3, #0]
 80207ec:	da08      	bge.n	8020800 <sniprintf+0x20>
 80207ee:	238b      	movs	r3, #139	; 0x8b
 80207f0:	602b      	str	r3, [r5, #0]
 80207f2:	f04f 30ff 	mov.w	r0, #4294967295
 80207f6:	b01d      	add	sp, #116	; 0x74
 80207f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80207fc:	b002      	add	sp, #8
 80207fe:	4770      	bx	lr
 8020800:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020804:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020808:	bf14      	ite	ne
 802080a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802080e:	4623      	moveq	r3, r4
 8020810:	9304      	str	r3, [sp, #16]
 8020812:	9307      	str	r3, [sp, #28]
 8020814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020818:	9002      	str	r0, [sp, #8]
 802081a:	9006      	str	r0, [sp, #24]
 802081c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020820:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020822:	ab21      	add	r3, sp, #132	; 0x84
 8020824:	a902      	add	r1, sp, #8
 8020826:	4628      	mov	r0, r5
 8020828:	9301      	str	r3, [sp, #4]
 802082a:	f002 ff4d 	bl	80236c8 <_svfiprintf_r>
 802082e:	1c43      	adds	r3, r0, #1
 8020830:	bfbc      	itt	lt
 8020832:	238b      	movlt	r3, #139	; 0x8b
 8020834:	602b      	strlt	r3, [r5, #0]
 8020836:	2c00      	cmp	r4, #0
 8020838:	d0dd      	beq.n	80207f6 <sniprintf+0x16>
 802083a:	9b02      	ldr	r3, [sp, #8]
 802083c:	2200      	movs	r2, #0
 802083e:	701a      	strb	r2, [r3, #0]
 8020840:	e7d9      	b.n	80207f6 <sniprintf+0x16>
 8020842:	bf00      	nop
 8020844:	20000454 	.word	0x20000454

08020848 <siprintf>:
 8020848:	b40e      	push	{r1, r2, r3}
 802084a:	b500      	push	{lr}
 802084c:	b09c      	sub	sp, #112	; 0x70
 802084e:	ab1d      	add	r3, sp, #116	; 0x74
 8020850:	9002      	str	r0, [sp, #8]
 8020852:	9006      	str	r0, [sp, #24]
 8020854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020858:	4809      	ldr	r0, [pc, #36]	; (8020880 <siprintf+0x38>)
 802085a:	9107      	str	r1, [sp, #28]
 802085c:	9104      	str	r1, [sp, #16]
 802085e:	4909      	ldr	r1, [pc, #36]	; (8020884 <siprintf+0x3c>)
 8020860:	f853 2b04 	ldr.w	r2, [r3], #4
 8020864:	9105      	str	r1, [sp, #20]
 8020866:	6800      	ldr	r0, [r0, #0]
 8020868:	9301      	str	r3, [sp, #4]
 802086a:	a902      	add	r1, sp, #8
 802086c:	f002 ff2c 	bl	80236c8 <_svfiprintf_r>
 8020870:	9b02      	ldr	r3, [sp, #8]
 8020872:	2200      	movs	r2, #0
 8020874:	701a      	strb	r2, [r3, #0]
 8020876:	b01c      	add	sp, #112	; 0x70
 8020878:	f85d eb04 	ldr.w	lr, [sp], #4
 802087c:	b003      	add	sp, #12
 802087e:	4770      	bx	lr
 8020880:	20000454 	.word	0x20000454
 8020884:	ffff0208 	.word	0xffff0208

08020888 <siscanf>:
 8020888:	b40e      	push	{r1, r2, r3}
 802088a:	b530      	push	{r4, r5, lr}
 802088c:	b09c      	sub	sp, #112	; 0x70
 802088e:	ac1f      	add	r4, sp, #124	; 0x7c
 8020890:	f44f 7201 	mov.w	r2, #516	; 0x204
 8020894:	f854 5b04 	ldr.w	r5, [r4], #4
 8020898:	f8ad 2014 	strh.w	r2, [sp, #20]
 802089c:	9002      	str	r0, [sp, #8]
 802089e:	9006      	str	r0, [sp, #24]
 80208a0:	f7df fcd8 	bl	8000254 <strlen>
 80208a4:	4b0b      	ldr	r3, [pc, #44]	; (80208d4 <siscanf+0x4c>)
 80208a6:	9003      	str	r0, [sp, #12]
 80208a8:	9007      	str	r0, [sp, #28]
 80208aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80208ac:	480a      	ldr	r0, [pc, #40]	; (80208d8 <siscanf+0x50>)
 80208ae:	9401      	str	r4, [sp, #4]
 80208b0:	2300      	movs	r3, #0
 80208b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80208b4:	9314      	str	r3, [sp, #80]	; 0x50
 80208b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80208ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80208be:	462a      	mov	r2, r5
 80208c0:	4623      	mov	r3, r4
 80208c2:	a902      	add	r1, sp, #8
 80208c4:	6800      	ldr	r0, [r0, #0]
 80208c6:	f003 f851 	bl	802396c <__ssvfiscanf_r>
 80208ca:	b01c      	add	sp, #112	; 0x70
 80208cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80208d0:	b003      	add	sp, #12
 80208d2:	4770      	bx	lr
 80208d4:	080208ff 	.word	0x080208ff
 80208d8:	20000454 	.word	0x20000454

080208dc <__sread>:
 80208dc:	b510      	push	{r4, lr}
 80208de:	460c      	mov	r4, r1
 80208e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208e4:	f003 fc60 	bl	80241a8 <_read_r>
 80208e8:	2800      	cmp	r0, #0
 80208ea:	bfab      	itete	ge
 80208ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80208ee:	89a3      	ldrhlt	r3, [r4, #12]
 80208f0:	181b      	addge	r3, r3, r0
 80208f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80208f6:	bfac      	ite	ge
 80208f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80208fa:	81a3      	strhlt	r3, [r4, #12]
 80208fc:	bd10      	pop	{r4, pc}

080208fe <__seofread>:
 80208fe:	2000      	movs	r0, #0
 8020900:	4770      	bx	lr

08020902 <__swrite>:
 8020902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020906:	461f      	mov	r7, r3
 8020908:	898b      	ldrh	r3, [r1, #12]
 802090a:	05db      	lsls	r3, r3, #23
 802090c:	4605      	mov	r5, r0
 802090e:	460c      	mov	r4, r1
 8020910:	4616      	mov	r6, r2
 8020912:	d505      	bpl.n	8020920 <__swrite+0x1e>
 8020914:	2302      	movs	r3, #2
 8020916:	2200      	movs	r2, #0
 8020918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802091c:	f002 faf2 	bl	8022f04 <_lseek_r>
 8020920:	89a3      	ldrh	r3, [r4, #12]
 8020922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802092a:	81a3      	strh	r3, [r4, #12]
 802092c:	4632      	mov	r2, r6
 802092e:	463b      	mov	r3, r7
 8020930:	4628      	mov	r0, r5
 8020932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020936:	f001 b9a5 	b.w	8021c84 <_write_r>

0802093a <__sseek>:
 802093a:	b510      	push	{r4, lr}
 802093c:	460c      	mov	r4, r1
 802093e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020942:	f002 fadf 	bl	8022f04 <_lseek_r>
 8020946:	1c43      	adds	r3, r0, #1
 8020948:	89a3      	ldrh	r3, [r4, #12]
 802094a:	bf15      	itete	ne
 802094c:	6560      	strne	r0, [r4, #84]	; 0x54
 802094e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020956:	81a3      	strheq	r3, [r4, #12]
 8020958:	bf18      	it	ne
 802095a:	81a3      	strhne	r3, [r4, #12]
 802095c:	bd10      	pop	{r4, pc}

0802095e <__sclose>:
 802095e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020962:	f001 ba4f 	b.w	8021e04 <_close_r>

08020966 <stpcpy>:
 8020966:	4603      	mov	r3, r0
 8020968:	f811 2b01 	ldrb.w	r2, [r1], #1
 802096c:	4618      	mov	r0, r3
 802096e:	f803 2b01 	strb.w	r2, [r3], #1
 8020972:	2a00      	cmp	r2, #0
 8020974:	d1f8      	bne.n	8020968 <stpcpy+0x2>
 8020976:	4770      	bx	lr

08020978 <strchr>:
 8020978:	b2c9      	uxtb	r1, r1
 802097a:	4603      	mov	r3, r0
 802097c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020980:	b11a      	cbz	r2, 802098a <strchr+0x12>
 8020982:	428a      	cmp	r2, r1
 8020984:	d1f9      	bne.n	802097a <strchr+0x2>
 8020986:	4618      	mov	r0, r3
 8020988:	4770      	bx	lr
 802098a:	2900      	cmp	r1, #0
 802098c:	bf18      	it	ne
 802098e:	2300      	movne	r3, #0
 8020990:	e7f9      	b.n	8020986 <strchr+0xe>

08020992 <strcpy>:
 8020992:	4603      	mov	r3, r0
 8020994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020998:	f803 2b01 	strb.w	r2, [r3], #1
 802099c:	2a00      	cmp	r2, #0
 802099e:	d1f9      	bne.n	8020994 <strcpy+0x2>
 80209a0:	4770      	bx	lr

080209a2 <iso_year_adjust>:
 80209a2:	6942      	ldr	r2, [r0, #20]
 80209a4:	2a00      	cmp	r2, #0
 80209a6:	f240 736c 	movw	r3, #1900	; 0x76c
 80209aa:	bfa8      	it	ge
 80209ac:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80209b0:	441a      	add	r2, r3
 80209b2:	0793      	lsls	r3, r2, #30
 80209b4:	d105      	bne.n	80209c2 <iso_year_adjust+0x20>
 80209b6:	2164      	movs	r1, #100	; 0x64
 80209b8:	fb92 f3f1 	sdiv	r3, r2, r1
 80209bc:	fb01 2313 	mls	r3, r1, r3, r2
 80209c0:	b9d3      	cbnz	r3, 80209f8 <iso_year_adjust+0x56>
 80209c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80209c6:	fb92 f3f1 	sdiv	r3, r2, r1
 80209ca:	fb01 2313 	mls	r3, r1, r3, r2
 80209ce:	fab3 f283 	clz	r2, r3
 80209d2:	0952      	lsrs	r2, r2, #5
 80209d4:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 80209d8:	005b      	lsls	r3, r3, #1
 80209da:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80209de:	4413      	add	r3, r2
 80209e0:	2b21      	cmp	r3, #33	; 0x21
 80209e2:	dc11      	bgt.n	8020a08 <iso_year_adjust+0x66>
 80209e4:	2b20      	cmp	r3, #32
 80209e6:	da30      	bge.n	8020a4a <iso_year_adjust+0xa8>
 80209e8:	2b0d      	cmp	r3, #13
 80209ea:	dc07      	bgt.n	80209fc <iso_year_adjust+0x5a>
 80209ec:	2b0a      	cmp	r3, #10
 80209ee:	da2c      	bge.n	8020a4a <iso_year_adjust+0xa8>
 80209f0:	2b01      	cmp	r3, #1
 80209f2:	d92a      	bls.n	8020a4a <iso_year_adjust+0xa8>
 80209f4:	2000      	movs	r0, #0
 80209f6:	4770      	bx	lr
 80209f8:	2201      	movs	r2, #1
 80209fa:	e7eb      	b.n	80209d4 <iso_year_adjust+0x32>
 80209fc:	2b10      	cmp	r3, #16
 80209fe:	dbf9      	blt.n	80209f4 <iso_year_adjust+0x52>
 8020a00:	2b11      	cmp	r3, #17
 8020a02:	dd22      	ble.n	8020a4a <iso_year_adjust+0xa8>
 8020a04:	3b1c      	subs	r3, #28
 8020a06:	e7f3      	b.n	80209f0 <iso_year_adjust+0x4e>
 8020a08:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8020a0c:	4293      	cmp	r3, r2
 8020a0e:	dc0f      	bgt.n	8020a30 <iso_year_adjust+0x8e>
 8020a10:	f241 62c2 	movw	r2, #5826	; 0x16c2
 8020a14:	4293      	cmp	r3, r2
 8020a16:	da09      	bge.n	8020a2c <iso_year_adjust+0x8a>
 8020a18:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8020a1c:	4293      	cmp	r3, r2
 8020a1e:	d005      	beq.n	8020a2c <iso_year_adjust+0x8a>
 8020a20:	dbe8      	blt.n	80209f4 <iso_year_adjust+0x52>
 8020a22:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 8020a26:	3b12      	subs	r3, #18
 8020a28:	2b02      	cmp	r3, #2
 8020a2a:	d8e3      	bhi.n	80209f4 <iso_year_adjust+0x52>
 8020a2c:	2001      	movs	r0, #1
 8020a2e:	4770      	bx	lr
 8020a30:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8020a34:	4293      	cmp	r3, r2
 8020a36:	d0f9      	beq.n	8020a2c <iso_year_adjust+0x8a>
 8020a38:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8020a3c:	4293      	cmp	r3, r2
 8020a3e:	d0f5      	beq.n	8020a2c <iso_year_adjust+0x8a>
 8020a40:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8020a44:	4293      	cmp	r3, r2
 8020a46:	d1d5      	bne.n	80209f4 <iso_year_adjust+0x52>
 8020a48:	e7f0      	b.n	8020a2c <iso_year_adjust+0x8a>
 8020a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8020a4e:	4770      	bx	lr

08020a50 <__strftime>:
 8020a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a54:	b091      	sub	sp, #68	; 0x44
 8020a56:	461d      	mov	r5, r3
 8020a58:	2300      	movs	r3, #0
 8020a5a:	4607      	mov	r7, r0
 8020a5c:	460e      	mov	r6, r1
 8020a5e:	9303      	str	r3, [sp, #12]
 8020a60:	461c      	mov	r4, r3
 8020a62:	f101 3bff 	add.w	fp, r1, #4294967295
 8020a66:	7813      	ldrb	r3, [r2, #0]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	f000 84e3 	beq.w	8021434 <__strftime+0x9e4>
 8020a6e:	2b25      	cmp	r3, #37	; 0x25
 8020a70:	d11f      	bne.n	8020ab2 <__strftime+0x62>
 8020a72:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020a76:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8020a7a:	d023      	beq.n	8020ac4 <__strftime+0x74>
 8020a7c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8020a80:	d020      	beq.n	8020ac4 <__strftime+0x74>
 8020a82:	f102 0801 	add.w	r8, r2, #1
 8020a86:	f04f 0a00 	mov.w	sl, #0
 8020a8a:	f898 3000 	ldrb.w	r3, [r8]
 8020a8e:	3b31      	subs	r3, #49	; 0x31
 8020a90:	2b08      	cmp	r3, #8
 8020a92:	d81a      	bhi.n	8020aca <__strftime+0x7a>
 8020a94:	4640      	mov	r0, r8
 8020a96:	220a      	movs	r2, #10
 8020a98:	a908      	add	r1, sp, #32
 8020a9a:	f000 fe4f 	bl	802173c <strtoul>
 8020a9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020aa2:	4681      	mov	r9, r0
 8020aa4:	f898 3000 	ldrb.w	r3, [r8]
 8020aa8:	2b45      	cmp	r3, #69	; 0x45
 8020aaa:	d111      	bne.n	8020ad0 <__strftime+0x80>
 8020aac:	f108 0801 	add.w	r8, r8, #1
 8020ab0:	e010      	b.n	8020ad4 <__strftime+0x84>
 8020ab2:	45a3      	cmp	fp, r4
 8020ab4:	d802      	bhi.n	8020abc <__strftime+0x6c>
 8020ab6:	2400      	movs	r4, #0
 8020ab8:	f000 bcbf 	b.w	802143a <__strftime+0x9ea>
 8020abc:	553b      	strb	r3, [r7, r4]
 8020abe:	3201      	adds	r2, #1
 8020ac0:	3401      	adds	r4, #1
 8020ac2:	e7d0      	b.n	8020a66 <__strftime+0x16>
 8020ac4:	f102 0802 	add.w	r8, r2, #2
 8020ac8:	e7df      	b.n	8020a8a <__strftime+0x3a>
 8020aca:	f04f 0900 	mov.w	r9, #0
 8020ace:	e7e9      	b.n	8020aa4 <__strftime+0x54>
 8020ad0:	2b4f      	cmp	r3, #79	; 0x4f
 8020ad2:	d0eb      	beq.n	8020aac <__strftime+0x5c>
 8020ad4:	f898 1000 	ldrb.w	r1, [r8]
 8020ad8:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
 8020adc:	2b55      	cmp	r3, #85	; 0x55
 8020ade:	d8ea      	bhi.n	8020ab6 <__strftime+0x66>
 8020ae0:	a201      	add	r2, pc, #4	; (adr r2, 8020ae8 <__strftime+0x98>)
 8020ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ae6:	bf00      	nop
 8020ae8:	0802142b 	.word	0x0802142b
 8020aec:	08020ab7 	.word	0x08020ab7
 8020af0:	08020ab7 	.word	0x08020ab7
 8020af4:	08020ab7 	.word	0x08020ab7
 8020af8:	08020ab7 	.word	0x08020ab7
 8020afc:	08020ab7 	.word	0x08020ab7
 8020b00:	08020ab7 	.word	0x08020ab7
 8020b04:	08020ab7 	.word	0x08020ab7
 8020b08:	08020ab7 	.word	0x08020ab7
 8020b0c:	08020ab7 	.word	0x08020ab7
 8020b10:	08020ab7 	.word	0x08020ab7
 8020b14:	08020ab7 	.word	0x08020ab7
 8020b18:	08020ab7 	.word	0x08020ab7
 8020b1c:	08020ab7 	.word	0x08020ab7
 8020b20:	08020ab7 	.word	0x08020ab7
 8020b24:	08020ab7 	.word	0x08020ab7
 8020b28:	08020ab7 	.word	0x08020ab7
 8020b2c:	08020ab7 	.word	0x08020ab7
 8020b30:	08020ab7 	.word	0x08020ab7
 8020b34:	08020ab7 	.word	0x08020ab7
 8020b38:	08020ab7 	.word	0x08020ab7
 8020b3c:	08020ab7 	.word	0x08020ab7
 8020b40:	08020ab7 	.word	0x08020ab7
 8020b44:	08020ab7 	.word	0x08020ab7
 8020b48:	08020ab7 	.word	0x08020ab7
 8020b4c:	08020ab7 	.word	0x08020ab7
 8020b50:	08020ab7 	.word	0x08020ab7
 8020b54:	08020ab7 	.word	0x08020ab7
 8020b58:	08020c7d 	.word	0x08020c7d
 8020b5c:	08020cd1 	.word	0x08020cd1
 8020b60:	08020d41 	.word	0x08020d41
 8020b64:	08020ddb 	.word	0x08020ddb
 8020b68:	08020ab7 	.word	0x08020ab7
 8020b6c:	08020e29 	.word	0x08020e29
 8020b70:	08020f19 	.word	0x08020f19
 8020b74:	08021031 	.word	0x08021031
 8020b78:	0802103f 	.word	0x0802103f
 8020b7c:	08020ab7 	.word	0x08020ab7
 8020b80:	08020ab7 	.word	0x08020ab7
 8020b84:	08020ab7 	.word	0x08020ab7
 8020b88:	0802106f 	.word	0x0802106f
 8020b8c:	08020ab7 	.word	0x08020ab7
 8020b90:	08020ab7 	.word	0x08020ab7
 8020b94:	08021081 	.word	0x08021081
 8020b98:	08020ab7 	.word	0x08020ab7
 8020b9c:	080210df 	.word	0x080210df
 8020ba0:	080211f7 	.word	0x080211f7
 8020ba4:	08021205 	.word	0x08021205
 8020ba8:	08021255 	.word	0x08021255
 8020bac:	08021265 	.word	0x08021265
 8020bb0:	080212d7 	.word	0x080212d7
 8020bb4:	08020d39 	.word	0x08020d39
 8020bb8:	08021311 	.word	0x08021311
 8020bbc:	080213d7 	.word	0x080213d7
 8020bc0:	08020ab7 	.word	0x08020ab7
 8020bc4:	08020ab7 	.word	0x08020ab7
 8020bc8:	08020ab7 	.word	0x08020ab7
 8020bcc:	08020ab7 	.word	0x08020ab7
 8020bd0:	08020ab7 	.word	0x08020ab7
 8020bd4:	08020ab7 	.word	0x08020ab7
 8020bd8:	08020c41 	.word	0x08020c41
 8020bdc:	08020ca9 	.word	0x08020ca9
 8020be0:	08020cfb 	.word	0x08020cfb
 8020be4:	08020db7 	.word	0x08020db7
 8020be8:	08020db7 	.word	0x08020db7
 8020bec:	08020ab7 	.word	0x08020ab7
 8020bf0:	08020e81 	.word	0x08020e81
 8020bf4:	08020ca9 	.word	0x08020ca9
 8020bf8:	08020ab7 	.word	0x08020ab7
 8020bfc:	08021061 	.word	0x08021061
 8020c00:	08021031 	.word	0x08021031
 8020c04:	0802103f 	.word	0x0802103f
 8020c08:	08021069 	.word	0x08021069
 8020c0c:	08021073 	.word	0x08021073
 8020c10:	08020ab7 	.word	0x08020ab7
 8020c14:	08021081 	.word	0x08021081
 8020c18:	08020ab7 	.word	0x08020ab7
 8020c1c:	08020d29 	.word	0x08020d29
 8020c20:	080210f1 	.word	0x080210f1
 8020c24:	080211fb 	.word	0x080211fb
 8020c28:	0802123d 	.word	0x0802123d
 8020c2c:	08020ab7 	.word	0x08020ab7
 8020c30:	080212cb 	.word	0x080212cb
 8020c34:	08020d31 	.word	0x08020d31
 8020c38:	080212ef 	.word	0x080212ef
 8020c3c:	08021365 	.word	0x08021365
 8020c40:	69ab      	ldr	r3, [r5, #24]
 8020c42:	4aa8      	ldr	r2, [pc, #672]	; (8020ee4 <__strftime+0x494>)
 8020c44:	3318      	adds	r3, #24
 8020c46:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8020c4a:	4648      	mov	r0, r9
 8020c4c:	f7df fb02 	bl	8000254 <strlen>
 8020c50:	eba9 0904 	sub.w	r9, r9, r4
 8020c54:	4420      	add	r0, r4
 8020c56:	42a0      	cmp	r0, r4
 8020c58:	d108      	bne.n	8020c6c <__strftime+0x21c>
 8020c5a:	4604      	mov	r4, r0
 8020c5c:	f898 3000 	ldrb.w	r3, [r8]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	f000 83e7 	beq.w	8021434 <__strftime+0x9e4>
 8020c66:	f108 0201 	add.w	r2, r8, #1
 8020c6a:	e6fc      	b.n	8020a66 <__strftime+0x16>
 8020c6c:	45a3      	cmp	fp, r4
 8020c6e:	f67f af22 	bls.w	8020ab6 <__strftime+0x66>
 8020c72:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020c76:	553b      	strb	r3, [r7, r4]
 8020c78:	3401      	adds	r4, #1
 8020c7a:	e7ec      	b.n	8020c56 <__strftime+0x206>
 8020c7c:	69aa      	ldr	r2, [r5, #24]
 8020c7e:	4b99      	ldr	r3, [pc, #612]	; (8020ee4 <__strftime+0x494>)
 8020c80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020c84:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8020c88:	4648      	mov	r0, r9
 8020c8a:	f7df fae3 	bl	8000254 <strlen>
 8020c8e:	eba9 0904 	sub.w	r9, r9, r4
 8020c92:	4420      	add	r0, r4
 8020c94:	42a0      	cmp	r0, r4
 8020c96:	d0e0      	beq.n	8020c5a <__strftime+0x20a>
 8020c98:	45a3      	cmp	fp, r4
 8020c9a:	f67f af0c 	bls.w	8020ab6 <__strftime+0x66>
 8020c9e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020ca2:	553b      	strb	r3, [r7, r4]
 8020ca4:	3401      	adds	r4, #1
 8020ca6:	e7f5      	b.n	8020c94 <__strftime+0x244>
 8020ca8:	692a      	ldr	r2, [r5, #16]
 8020caa:	4b8e      	ldr	r3, [pc, #568]	; (8020ee4 <__strftime+0x494>)
 8020cac:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8020cb0:	4648      	mov	r0, r9
 8020cb2:	f7df facf 	bl	8000254 <strlen>
 8020cb6:	eba9 0904 	sub.w	r9, r9, r4
 8020cba:	4420      	add	r0, r4
 8020cbc:	42a0      	cmp	r0, r4
 8020cbe:	d0cc      	beq.n	8020c5a <__strftime+0x20a>
 8020cc0:	45a3      	cmp	fp, r4
 8020cc2:	f67f aef8 	bls.w	8020ab6 <__strftime+0x66>
 8020cc6:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020cca:	553b      	strb	r3, [r7, r4]
 8020ccc:	3401      	adds	r4, #1
 8020cce:	e7f5      	b.n	8020cbc <__strftime+0x26c>
 8020cd0:	692b      	ldr	r3, [r5, #16]
 8020cd2:	4a84      	ldr	r2, [pc, #528]	; (8020ee4 <__strftime+0x494>)
 8020cd4:	330c      	adds	r3, #12
 8020cd6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8020cda:	4648      	mov	r0, r9
 8020cdc:	f7df faba 	bl	8000254 <strlen>
 8020ce0:	eba9 0904 	sub.w	r9, r9, r4
 8020ce4:	4420      	add	r0, r4
 8020ce6:	42a0      	cmp	r0, r4
 8020ce8:	d0b7      	beq.n	8020c5a <__strftime+0x20a>
 8020cea:	45a3      	cmp	fp, r4
 8020cec:	f67f aee3 	bls.w	8020ab6 <__strftime+0x66>
 8020cf0:	f819 3004 	ldrb.w	r3, [r9, r4]
 8020cf4:	553b      	strb	r3, [r7, r4]
 8020cf6:	3401      	adds	r4, #1
 8020cf8:	e7f5      	b.n	8020ce6 <__strftime+0x296>
 8020cfa:	4b7a      	ldr	r3, [pc, #488]	; (8020ee4 <__strftime+0x494>)
 8020cfc:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8020d00:	4648      	mov	r0, r9
 8020d02:	f7df faa7 	bl	8000254 <strlen>
 8020d06:	f899 3000 	ldrb.w	r3, [r9]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d0a6      	beq.n	8020c5c <__strftime+0x20c>
 8020d0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020d10:	9300      	str	r3, [sp, #0]
 8020d12:	464a      	mov	r2, r9
 8020d14:	462b      	mov	r3, r5
 8020d16:	1b31      	subs	r1, r6, r4
 8020d18:	1938      	adds	r0, r7, r4
 8020d1a:	f7ff fe99 	bl	8020a50 <__strftime>
 8020d1e:	2800      	cmp	r0, #0
 8020d20:	f77f aec9 	ble.w	8020ab6 <__strftime+0x66>
 8020d24:	4404      	add	r4, r0
 8020d26:	e799      	b.n	8020c5c <__strftime+0x20c>
 8020d28:	4b6e      	ldr	r3, [pc, #440]	; (8020ee4 <__strftime+0x494>)
 8020d2a:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8020d2e:	e7e7      	b.n	8020d00 <__strftime+0x2b0>
 8020d30:	4b6c      	ldr	r3, [pc, #432]	; (8020ee4 <__strftime+0x494>)
 8020d32:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8020d36:	e7e3      	b.n	8020d00 <__strftime+0x2b0>
 8020d38:	4b6a      	ldr	r3, [pc, #424]	; (8020ee4 <__strftime+0x494>)
 8020d3a:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8020d3e:	e7df      	b.n	8020d00 <__strftime+0x2b0>
 8020d40:	4b69      	ldr	r3, [pc, #420]	; (8020ee8 <__strftime+0x498>)
 8020d42:	6969      	ldr	r1, [r5, #20]
 8020d44:	4299      	cmp	r1, r3
 8020d46:	bfac      	ite	ge
 8020d48:	2300      	movge	r3, #0
 8020d4a:	2301      	movlt	r3, #1
 8020d4c:	2900      	cmp	r1, #0
 8020d4e:	9304      	str	r3, [sp, #16]
 8020d50:	db10      	blt.n	8020d74 <__strftime+0x324>
 8020d52:	2064      	movs	r0, #100	; 0x64
 8020d54:	fb91 f0f0 	sdiv	r0, r1, r0
 8020d58:	3013      	adds	r0, #19
 8020d5a:	f1ba 0f00 	cmp.w	sl, #0
 8020d5e:	d013      	beq.n	8020d88 <__strftime+0x338>
 8020d60:	2863      	cmp	r0, #99	; 0x63
 8020d62:	dd26      	ble.n	8020db2 <__strftime+0x362>
 8020d64:	4a61      	ldr	r2, [pc, #388]	; (8020eec <__strftime+0x49c>)
 8020d66:	4b62      	ldr	r3, [pc, #392]	; (8020ef0 <__strftime+0x4a0>)
 8020d68:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8020d6c:	bf18      	it	ne
 8020d6e:	4613      	movne	r3, r2
 8020d70:	4a60      	ldr	r2, [pc, #384]	; (8020ef4 <__strftime+0x4a4>)
 8020d72:	e00b      	b.n	8020d8c <__strftime+0x33c>
 8020d74:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8020d78:	9105      	str	r1, [sp, #20]
 8020d7a:	f001 f803 	bl	8021d84 <abs>
 8020d7e:	2364      	movs	r3, #100	; 0x64
 8020d80:	9905      	ldr	r1, [sp, #20]
 8020d82:	fb90 f0f3 	sdiv	r0, r0, r3
 8020d86:	e7e8      	b.n	8020d5a <__strftime+0x30a>
 8020d88:	4b58      	ldr	r3, [pc, #352]	; (8020eec <__strftime+0x49c>)
 8020d8a:	4a5b      	ldr	r2, [pc, #364]	; (8020ef8 <__strftime+0x4a8>)
 8020d8c:	9001      	str	r0, [sp, #4]
 8020d8e:	9804      	ldr	r0, [sp, #16]
 8020d90:	f8df c154 	ldr.w	ip, [pc, #340]	; 8020ee8 <__strftime+0x498>
 8020d94:	f1b9 0f02 	cmp.w	r9, #2
 8020d98:	bf2c      	ite	cs
 8020d9a:	ebc0 0009 	rsbcs	r0, r0, r9
 8020d9e:	f1c0 0002 	rsbcc	r0, r0, #2
 8020da2:	9000      	str	r0, [sp, #0]
 8020da4:	4855      	ldr	r0, [pc, #340]	; (8020efc <__strftime+0x4ac>)
 8020da6:	4561      	cmp	r1, ip
 8020da8:	bfb8      	it	lt
 8020daa:	4603      	movlt	r3, r0
 8020dac:	1b31      	subs	r1, r6, r4
 8020dae:	1938      	adds	r0, r7, r4
 8020db0:	e029      	b.n	8020e06 <__strftime+0x3b6>
 8020db2:	4b4e      	ldr	r3, [pc, #312]	; (8020eec <__strftime+0x49c>)
 8020db4:	e7dc      	b.n	8020d70 <__strftime+0x320>
 8020db6:	4852      	ldr	r0, [pc, #328]	; (8020f00 <__strftime+0x4b0>)
 8020db8:	4a52      	ldr	r2, [pc, #328]	; (8020f04 <__strftime+0x4b4>)
 8020dba:	68eb      	ldr	r3, [r5, #12]
 8020dbc:	2964      	cmp	r1, #100	; 0x64
 8020dbe:	bf18      	it	ne
 8020dc0:	4602      	movne	r2, r0
 8020dc2:	1b31      	subs	r1, r6, r4
 8020dc4:	1938      	adds	r0, r7, r4
 8020dc6:	f7ff fd0b 	bl	80207e0 <sniprintf>
 8020dca:	2800      	cmp	r0, #0
 8020dcc:	f6ff ae73 	blt.w	8020ab6 <__strftime+0x66>
 8020dd0:	4404      	add	r4, r0
 8020dd2:	42a6      	cmp	r6, r4
 8020dd4:	f63f af42 	bhi.w	8020c5c <__strftime+0x20c>
 8020dd8:	e66d      	b.n	8020ab6 <__strftime+0x66>
 8020dda:	6968      	ldr	r0, [r5, #20]
 8020ddc:	692b      	ldr	r3, [r5, #16]
 8020dde:	68ea      	ldr	r2, [r5, #12]
 8020de0:	2800      	cmp	r0, #0
 8020de2:	eb07 0904 	add.w	r9, r7, r4
 8020de6:	eba6 0a04 	sub.w	sl, r6, r4
 8020dea:	f103 0301 	add.w	r3, r3, #1
 8020dee:	db0d      	blt.n	8020e0c <__strftime+0x3bc>
 8020df0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020df4:	fb90 f1fc 	sdiv	r1, r0, ip
 8020df8:	fb0c 0011 	mls	r0, ip, r1, r0
 8020dfc:	e9cd 2000 	strd	r2, r0, [sp]
 8020e00:	4a41      	ldr	r2, [pc, #260]	; (8020f08 <__strftime+0x4b8>)
 8020e02:	4651      	mov	r1, sl
 8020e04:	4648      	mov	r0, r9
 8020e06:	f7ff fceb 	bl	80207e0 <sniprintf>
 8020e0a:	e7de      	b.n	8020dca <__strftime+0x37a>
 8020e0c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020e10:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8020e14:	f000 ffb6 	bl	8021d84 <abs>
 8020e18:	2164      	movs	r1, #100	; 0x64
 8020e1a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8020e1e:	fb90 fcf1 	sdiv	ip, r0, r1
 8020e22:	fb0c 0011 	mls	r0, ip, r1, r0
 8020e26:	e7e9      	b.n	8020dfc <__strftime+0x3ac>
 8020e28:	2325      	movs	r3, #37	; 0x25
 8020e2a:	f88d 3020 	strb.w	r3, [sp, #32]
 8020e2e:	f1ba 0f00 	cmp.w	sl, #0
 8020e32:	d013      	beq.n	8020e5c <__strftime+0x40c>
 8020e34:	f1b9 0f06 	cmp.w	r9, #6
 8020e38:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
 8020e3c:	bf38      	it	cc
 8020e3e:	f04f 0906 	movcc.w	r9, #6
 8020e42:	f1b9 0306 	subs.w	r3, r9, #6
 8020e46:	d10f      	bne.n	8020e68 <__strftime+0x418>
 8020e48:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020e4c:	492f      	ldr	r1, [pc, #188]	; (8020f0c <__strftime+0x4bc>)
 8020e4e:	f7ff fda0 	bl	8020992 <strcpy>
 8020e52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020e54:	9300      	str	r3, [sp, #0]
 8020e56:	aa08      	add	r2, sp, #32
 8020e58:	462b      	mov	r3, r5
 8020e5a:	e75c      	b.n	8020d16 <__strftime+0x2c6>
 8020e5c:	232b      	movs	r3, #43	; 0x2b
 8020e5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8020e62:	f04f 090a 	mov.w	r9, #10
 8020e66:	e7ec      	b.n	8020e42 <__strftime+0x3f2>
 8020e68:	4a29      	ldr	r2, [pc, #164]	; (8020f10 <__strftime+0x4c0>)
 8020e6a:	211e      	movs	r1, #30
 8020e6c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020e70:	f7ff fcb6 	bl	80207e0 <sniprintf>
 8020e74:	2800      	cmp	r0, #0
 8020e76:	dde7      	ble.n	8020e48 <__strftime+0x3f8>
 8020e78:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020e7c:	4418      	add	r0, r3
 8020e7e:	e7e5      	b.n	8020e4c <__strftime+0x3fc>
 8020e80:	4628      	mov	r0, r5
 8020e82:	f7ff fd8e 	bl	80209a2 <iso_year_adjust>
 8020e86:	4681      	mov	r9, r0
 8020e88:	6968      	ldr	r0, [r5, #20]
 8020e8a:	2800      	cmp	r0, #0
 8020e8c:	db1a      	blt.n	8020ec4 <__strftime+0x474>
 8020e8e:	2264      	movs	r2, #100	; 0x64
 8020e90:	fb90 f3f2 	sdiv	r3, r0, r2
 8020e94:	f1b9 0f00 	cmp.w	r9, #0
 8020e98:	fb02 0013 	mls	r0, r2, r3, r0
 8020e9c:	da1a      	bge.n	8020ed4 <__strftime+0x484>
 8020e9e:	696a      	ldr	r2, [r5, #20]
 8020ea0:	4b1c      	ldr	r3, [pc, #112]	; (8020f14 <__strftime+0x4c4>)
 8020ea2:	429a      	cmp	r2, r3
 8020ea4:	bfb8      	it	lt
 8020ea6:	f04f 0901 	movlt.w	r9, #1
 8020eaa:	2364      	movs	r3, #100	; 0x64
 8020eac:	4481      	add	r9, r0
 8020eae:	fb99 f0f3 	sdiv	r0, r9, r3
 8020eb2:	fb03 9910 	mls	r9, r3, r0, r9
 8020eb6:	4499      	add	r9, r3
 8020eb8:	fb99 f2f3 	sdiv	r2, r9, r3
 8020ebc:	fb03 9312 	mls	r3, r3, r2, r9
 8020ec0:	4a10      	ldr	r2, [pc, #64]	; (8020f04 <__strftime+0x4b4>)
 8020ec2:	e77e      	b.n	8020dc2 <__strftime+0x372>
 8020ec4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020ec8:	f000 ff5c 	bl	8021d84 <abs>
 8020ecc:	2364      	movs	r3, #100	; 0x64
 8020ece:	fb90 f2f3 	sdiv	r2, r0, r3
 8020ed2:	e7df      	b.n	8020e94 <__strftime+0x444>
 8020ed4:	d0e9      	beq.n	8020eaa <__strftime+0x45a>
 8020ed6:	696a      	ldr	r2, [r5, #20]
 8020ed8:	4b03      	ldr	r3, [pc, #12]	; (8020ee8 <__strftime+0x498>)
 8020eda:	429a      	cmp	r2, r3
 8020edc:	bfb8      	it	lt
 8020ede:	f04f 39ff 	movlt.w	r9, #4294967295
 8020ee2:	e7e2      	b.n	8020eaa <__strftime+0x45a>
 8020ee4:	0803f838 	.word	0x0803f838
 8020ee8:	fffff894 	.word	0xfffff894
 8020eec:	0803faba 	.word	0x0803faba
 8020ef0:	0803f7ed 	.word	0x0803f7ed
 8020ef4:	0803f7e5 	.word	0x0803f7e5
 8020ef8:	0803f7de 	.word	0x0803f7de
 8020efc:	0803fd88 	.word	0x0803fd88
 8020f00:	0803f7ef 	.word	0x0803f7ef
 8020f04:	0803f7fd 	.word	0x0803f7fd
 8020f08:	0803f7f3 	.word	0x0803f7f3
 8020f0c:	0803f806 	.word	0x0803f806
 8020f10:	0803f802 	.word	0x0803f802
 8020f14:	fffff895 	.word	0xfffff895
 8020f18:	696b      	ldr	r3, [r5, #20]
 8020f1a:	9304      	str	r3, [sp, #16]
 8020f1c:	9a04      	ldr	r2, [sp, #16]
 8020f1e:	4bbd      	ldr	r3, [pc, #756]	; (8021214 <__strftime+0x7c4>)
 8020f20:	429a      	cmp	r2, r3
 8020f22:	bfac      	ite	ge
 8020f24:	2300      	movge	r3, #0
 8020f26:	2301      	movlt	r3, #1
 8020f28:	4628      	mov	r0, r5
 8020f2a:	9305      	str	r3, [sp, #20]
 8020f2c:	f7ff fd39 	bl	80209a2 <iso_year_adjust>
 8020f30:	9a04      	ldr	r2, [sp, #16]
 8020f32:	2a00      	cmp	r2, #0
 8020f34:	4603      	mov	r3, r0
 8020f36:	db3a      	blt.n	8020fae <__strftime+0x55e>
 8020f38:	2264      	movs	r2, #100	; 0x64
 8020f3a:	9904      	ldr	r1, [sp, #16]
 8020f3c:	fb91 f2f2 	sdiv	r2, r1, r2
 8020f40:	3213      	adds	r2, #19
 8020f42:	6968      	ldr	r0, [r5, #20]
 8020f44:	2800      	cmp	r0, #0
 8020f46:	db3d      	blt.n	8020fc4 <__strftime+0x574>
 8020f48:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020f4c:	fb90 fefc 	sdiv	lr, r0, ip
 8020f50:	fb0c 001e 	mls	r0, ip, lr, r0
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	da44      	bge.n	8020fe2 <__strftime+0x592>
 8020f58:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8021238 <__strftime+0x7e8>
 8020f5c:	6969      	ldr	r1, [r5, #20]
 8020f5e:	4561      	cmp	r1, ip
 8020f60:	da01      	bge.n	8020f66 <__strftime+0x516>
 8020f62:	2301      	movs	r3, #1
 8020f64:	9305      	str	r3, [sp, #20]
 8020f66:	4403      	add	r3, r0
 8020f68:	1c59      	adds	r1, r3, #1
 8020f6a:	d146      	bne.n	8020ffa <__strftime+0x5aa>
 8020f6c:	3a01      	subs	r2, #1
 8020f6e:	2363      	movs	r3, #99	; 0x63
 8020f70:	2064      	movs	r0, #100	; 0x64
 8020f72:	fb00 3202 	mla	r2, r0, r2, r3
 8020f76:	9b05      	ldr	r3, [sp, #20]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	d043      	beq.n	8021004 <__strftime+0x5b4>
 8020f7c:	232d      	movs	r3, #45	; 0x2d
 8020f7e:	f88d 3020 	strb.w	r3, [sp, #32]
 8020f82:	f1b9 0f00 	cmp.w	r9, #0
 8020f86:	d001      	beq.n	8020f8c <__strftime+0x53c>
 8020f88:	f109 39ff 	add.w	r9, r9, #4294967295
 8020f8c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020f90:	2125      	movs	r1, #37	; 0x25
 8020f92:	7019      	strb	r1, [r3, #0]
 8020f94:	f1ba 0f00 	cmp.w	sl, #0
 8020f98:	d144      	bne.n	8021024 <__strftime+0x5d4>
 8020f9a:	1c58      	adds	r0, r3, #1
 8020f9c:	499e      	ldr	r1, [pc, #632]	; (8021218 <__strftime+0x7c8>)
 8020f9e:	9204      	str	r2, [sp, #16]
 8020fa0:	f7ff fcf7 	bl	8020992 <strcpy>
 8020fa4:	9a04      	ldr	r2, [sp, #16]
 8020fa6:	9200      	str	r2, [sp, #0]
 8020fa8:	464b      	mov	r3, r9
 8020faa:	aa08      	add	r2, sp, #32
 8020fac:	e09b      	b.n	80210e6 <__strftime+0x696>
 8020fae:	9b04      	ldr	r3, [sp, #16]
 8020fb0:	9006      	str	r0, [sp, #24]
 8020fb2:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8020fb6:	f000 fee5 	bl	8021d84 <abs>
 8020fba:	2264      	movs	r2, #100	; 0x64
 8020fbc:	9b06      	ldr	r3, [sp, #24]
 8020fbe:	fb90 f2f2 	sdiv	r2, r0, r2
 8020fc2:	e7be      	b.n	8020f42 <__strftime+0x4f2>
 8020fc4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020fc8:	e9cd 3206 	strd	r3, r2, [sp, #24]
 8020fcc:	f000 feda 	bl	8021d84 <abs>
 8020fd0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020fd4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020fd8:	fb90 fefc 	sdiv	lr, r0, ip
 8020fdc:	fb0e 001c 	mls	r0, lr, ip, r0
 8020fe0:	e7b8      	b.n	8020f54 <__strftime+0x504>
 8020fe2:	d0c0      	beq.n	8020f66 <__strftime+0x516>
 8020fe4:	9904      	ldr	r1, [sp, #16]
 8020fe6:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8021214 <__strftime+0x7c4>
 8020fea:	4561      	cmp	r1, ip
 8020fec:	bfae      	itee	ge
 8020fee:	2100      	movge	r1, #0
 8020ff0:	2101      	movlt	r1, #1
 8020ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ff6:	9105      	str	r1, [sp, #20]
 8020ff8:	e7b5      	b.n	8020f66 <__strftime+0x516>
 8020ffa:	2b64      	cmp	r3, #100	; 0x64
 8020ffc:	bf04      	itt	eq
 8020ffe:	3201      	addeq	r2, #1
 8021000:	2300      	moveq	r3, #0
 8021002:	e7b5      	b.n	8020f70 <__strftime+0x520>
 8021004:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8021008:	d110      	bne.n	802102c <__strftime+0x5dc>
 802100a:	f242 730f 	movw	r3, #9999	; 0x270f
 802100e:	429a      	cmp	r2, r3
 8021010:	d90c      	bls.n	802102c <__strftime+0x5dc>
 8021012:	f88d a020 	strb.w	sl, [sp, #32]
 8021016:	f1b9 0f00 	cmp.w	r9, #0
 802101a:	d1b5      	bne.n	8020f88 <__strftime+0x538>
 802101c:	ab10      	add	r3, sp, #64	; 0x40
 802101e:	2125      	movs	r1, #37	; 0x25
 8021020:	f803 1d1f 	strb.w	r1, [r3, #-31]!
 8021024:	2130      	movs	r1, #48	; 0x30
 8021026:	1c98      	adds	r0, r3, #2
 8021028:	7059      	strb	r1, [r3, #1]
 802102a:	e7b7      	b.n	8020f9c <__strftime+0x54c>
 802102c:	ab08      	add	r3, sp, #32
 802102e:	e7af      	b.n	8020f90 <__strftime+0x540>
 8021030:	487a      	ldr	r0, [pc, #488]	; (802121c <__strftime+0x7cc>)
 8021032:	4a7b      	ldr	r2, [pc, #492]	; (8021220 <__strftime+0x7d0>)
 8021034:	68ab      	ldr	r3, [r5, #8]
 8021036:	296b      	cmp	r1, #107	; 0x6b
 8021038:	bf18      	it	ne
 802103a:	4602      	movne	r2, r0
 802103c:	e6c1      	b.n	8020dc2 <__strftime+0x372>
 802103e:	68ab      	ldr	r3, [r5, #8]
 8021040:	220c      	movs	r2, #12
 8021042:	b15b      	cbz	r3, 802105c <__strftime+0x60c>
 8021044:	4293      	cmp	r3, r2
 8021046:	d003      	beq.n	8021050 <__strftime+0x600>
 8021048:	fb93 f0f2 	sdiv	r0, r3, r2
 802104c:	fb02 3310 	mls	r3, r2, r0, r3
 8021050:	4873      	ldr	r0, [pc, #460]	; (8021220 <__strftime+0x7d0>)
 8021052:	4a72      	ldr	r2, [pc, #456]	; (802121c <__strftime+0x7cc>)
 8021054:	2949      	cmp	r1, #73	; 0x49
 8021056:	bf18      	it	ne
 8021058:	4602      	movne	r2, r0
 802105a:	e6b2      	b.n	8020dc2 <__strftime+0x372>
 802105c:	4613      	mov	r3, r2
 802105e:	e7f7      	b.n	8021050 <__strftime+0x600>
 8021060:	69eb      	ldr	r3, [r5, #28]
 8021062:	4a70      	ldr	r2, [pc, #448]	; (8021224 <__strftime+0x7d4>)
 8021064:	3301      	adds	r3, #1
 8021066:	e6ac      	b.n	8020dc2 <__strftime+0x372>
 8021068:	692b      	ldr	r3, [r5, #16]
 802106a:	3301      	adds	r3, #1
 802106c:	e728      	b.n	8020ec0 <__strftime+0x470>
 802106e:	686b      	ldr	r3, [r5, #4]
 8021070:	e726      	b.n	8020ec0 <__strftime+0x470>
 8021072:	45a3      	cmp	fp, r4
 8021074:	f67f ad1f 	bls.w	8020ab6 <__strftime+0x66>
 8021078:	230a      	movs	r3, #10
 802107a:	553b      	strb	r3, [r7, r4]
 802107c:	3401      	adds	r4, #1
 802107e:	e5ed      	b.n	8020c5c <__strftime+0x20c>
 8021080:	68ab      	ldr	r3, [r5, #8]
 8021082:	2b0b      	cmp	r3, #11
 8021084:	bfcc      	ite	gt
 8021086:	22a4      	movgt	r2, #164	; 0xa4
 8021088:	22a0      	movle	r2, #160	; 0xa0
 802108a:	4b67      	ldr	r3, [pc, #412]	; (8021228 <__strftime+0x7d8>)
 802108c:	4413      	add	r3, r2
 802108e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8021092:	4648      	mov	r0, r9
 8021094:	f7df f8de 	bl	8000254 <strlen>
 8021098:	eba9 0304 	sub.w	r3, r9, r4
 802109c:	eb04 0a00 	add.w	sl, r4, r0
 80210a0:	45a2      	cmp	sl, r4
 80210a2:	d101      	bne.n	80210a8 <__strftime+0x658>
 80210a4:	4654      	mov	r4, sl
 80210a6:	e5d9      	b.n	8020c5c <__strftime+0x20c>
 80210a8:	45a3      	cmp	fp, r4
 80210aa:	f67f ad04 	bls.w	8020ab6 <__strftime+0x66>
 80210ae:	f898 2000 	ldrb.w	r2, [r8]
 80210b2:	f813 9004 	ldrb.w	r9, [r3, r4]
 80210b6:	2a50      	cmp	r2, #80	; 0x50
 80210b8:	d10d      	bne.n	80210d6 <__strftime+0x686>
 80210ba:	9304      	str	r3, [sp, #16]
 80210bc:	f7fe fa8a 	bl	801f5d4 <__locale_ctype_ptr>
 80210c0:	4448      	add	r0, r9
 80210c2:	9b04      	ldr	r3, [sp, #16]
 80210c4:	7842      	ldrb	r2, [r0, #1]
 80210c6:	f002 0203 	and.w	r2, r2, #3
 80210ca:	2a01      	cmp	r2, #1
 80210cc:	bf08      	it	eq
 80210ce:	f109 0920 	addeq.w	r9, r9, #32
 80210d2:	fa5f f989 	uxtb.w	r9, r9
 80210d6:	f807 9004 	strb.w	r9, [r7, r4]
 80210da:	3401      	adds	r4, #1
 80210dc:	e7e0      	b.n	80210a0 <__strftime+0x650>
 80210de:	686b      	ldr	r3, [r5, #4]
 80210e0:	9300      	str	r3, [sp, #0]
 80210e2:	4a52      	ldr	r2, [pc, #328]	; (802122c <__strftime+0x7dc>)
 80210e4:	68ab      	ldr	r3, [r5, #8]
 80210e6:	1b31      	subs	r1, r6, r4
 80210e8:	1938      	adds	r0, r7, r4
 80210ea:	f7ff fb79 	bl	80207e0 <sniprintf>
 80210ee:	e66c      	b.n	8020dca <__strftime+0x37a>
 80210f0:	6a2b      	ldr	r3, [r5, #32]
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	db7c      	blt.n	80211f0 <__strftime+0x7a0>
 80210f6:	f000 fbdf 	bl	80218b8 <__tz_lock>
 80210fa:	9b03      	ldr	r3, [sp, #12]
 80210fc:	b90b      	cbnz	r3, 8021102 <__strftime+0x6b2>
 80210fe:	f000 fbdd 	bl	80218bc <_tzset_unlocked>
 8021102:	f001 fe3b 	bl	8022d7c <__gettzinfo>
 8021106:	6a2b      	ldr	r3, [r5, #32]
 8021108:	2b00      	cmp	r3, #0
 802110a:	bfcc      	ite	gt
 802110c:	2350      	movgt	r3, #80	; 0x50
 802110e:	2328      	movle	r3, #40	; 0x28
 8021110:	58c3      	ldr	r3, [r0, r3]
 8021112:	425b      	negs	r3, r3
 8021114:	9304      	str	r3, [sp, #16]
 8021116:	f000 fbd0 	bl	80218ba <__tz_unlock>
 802111a:	2301      	movs	r3, #1
 802111c:	9303      	str	r3, [sp, #12]
 802111e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8021122:	193b      	adds	r3, r7, r4
 8021124:	4662      	mov	r2, ip
 8021126:	f1bc 0045 	subs.w	r0, ip, #69	; 0x45
 802112a:	9305      	str	r3, [sp, #20]
 802112c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021130:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021134:	2800      	cmp	r0, #0
 8021136:	f171 0e00 	sbcs.w	lr, r1, #0
 802113a:	da03      	bge.n	8021144 <__strftime+0x6f4>
 802113c:	f1bc 0042 	subs.w	r0, ip, #66	; 0x42
 8021140:	f143 31ff 	adc.w	r1, r3, #4294967295
 8021144:	0883      	lsrs	r3, r0, #2
 8021146:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 802114a:	4699      	mov	r9, r3
 802114c:	f10c 30ff 	add.w	r0, ip, #4294967295
 8021150:	108b      	asrs	r3, r1, #2
 8021152:	2164      	movs	r1, #100	; 0x64
 8021154:	fb90 f1f1 	sdiv	r1, r0, r1
 8021158:	ebb9 0201 	subs.w	r2, r9, r1
 802115c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8021160:	f20c 102b 	addw	r0, ip, #299	; 0x12b
 8021164:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021168:	fb90 f1f1 	sdiv	r1, r0, r1
 802116c:	eb12 0901 	adds.w	r9, r2, r1
 8021170:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8021174:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8021178:	f240 116d 	movw	r1, #365	; 0x16d
 802117c:	fb01 fc0c 	mul.w	ip, r1, ip
 8021180:	69e9      	ldr	r1, [r5, #28]
 8021182:	eb19 020c 	adds.w	r2, r9, ip
 8021186:	eb4a 73ec 	adc.w	r3, sl, ip, asr #31
 802118a:	eb12 0901 	adds.w	r9, r2, r1
 802118e:	f04f 0c18 	mov.w	ip, #24
 8021192:	eb43 7ae1 	adc.w	sl, r3, r1, asr #31
 8021196:	fba9 230c 	umull	r2, r3, r9, ip
 802119a:	4619      	mov	r1, r3
 802119c:	fb0c 130a 	mla	r3, ip, sl, r1
 80211a0:	4619      	mov	r1, r3
 80211a2:	68ab      	ldr	r3, [r5, #8]
 80211a4:	4610      	mov	r0, r2
 80211a6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80211aa:	18c0      	adds	r0, r0, r3
 80211ac:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80211b0:	fba0 230c 	umull	r2, r3, r0, ip
 80211b4:	fb0c 3301 	mla	r3, ip, r1, r3
 80211b8:	6869      	ldr	r1, [r5, #4]
 80211ba:	4691      	mov	r9, r2
 80211bc:	eb19 0201 	adds.w	r2, r9, r1
 80211c0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80211c4:	fba2 010c 	umull	r0, r1, r2, ip
 80211c8:	fb0c 1103 	mla	r1, ip, r3, r1
 80211cc:	682b      	ldr	r3, [r5, #0]
 80211ce:	4a18      	ldr	r2, [pc, #96]	; (8021230 <__strftime+0x7e0>)
 80211d0:	eb10 0903 	adds.w	r9, r0, r3
 80211d4:	eb41 7ae3 	adc.w	sl, r1, r3, asr #31
 80211d8:	9b04      	ldr	r3, [sp, #16]
 80211da:	ebb9 0003 	subs.w	r0, r9, r3
 80211de:	eb6a 71e3 	sbc.w	r1, sl, r3, asr #31
 80211e2:	e9cd 0100 	strd	r0, r1, [sp]
 80211e6:	1b31      	subs	r1, r6, r4
 80211e8:	1938      	adds	r0, r7, r4
 80211ea:	f7ff faf9 	bl	80207e0 <sniprintf>
 80211ee:	e5ec      	b.n	8020dca <__strftime+0x37a>
 80211f0:	2300      	movs	r3, #0
 80211f2:	9304      	str	r3, [sp, #16]
 80211f4:	e793      	b.n	802111e <__strftime+0x6ce>
 80211f6:	682b      	ldr	r3, [r5, #0]
 80211f8:	e662      	b.n	8020ec0 <__strftime+0x470>
 80211fa:	45a3      	cmp	fp, r4
 80211fc:	f67f ac5b 	bls.w	8020ab6 <__strftime+0x66>
 8021200:	2309      	movs	r3, #9
 8021202:	e73a      	b.n	802107a <__strftime+0x62a>
 8021204:	682b      	ldr	r3, [r5, #0]
 8021206:	9301      	str	r3, [sp, #4]
 8021208:	686b      	ldr	r3, [r5, #4]
 802120a:	9300      	str	r3, [sp, #0]
 802120c:	4a09      	ldr	r2, [pc, #36]	; (8021234 <__strftime+0x7e4>)
 802120e:	68ab      	ldr	r3, [r5, #8]
 8021210:	e5cc      	b.n	8020dac <__strftime+0x35c>
 8021212:	bf00      	nop
 8021214:	fffff894 	.word	0xfffff894
 8021218:	0803f80e 	.word	0x0803f80e
 802121c:	0803f7fd 	.word	0x0803f7fd
 8021220:	0803f7ef 	.word	0x0803f7ef
 8021224:	0803f812 	.word	0x0803f812
 8021228:	0803f838 	.word	0x0803f838
 802122c:	0803f821 	.word	0x0803f821
 8021230:	0803f817 	.word	0x0803f817
 8021234:	0803f81c 	.word	0x0803f81c
 8021238:	fffff895 	.word	0xfffff895
 802123c:	45a3      	cmp	fp, r4
 802123e:	f67f ac3a 	bls.w	8020ab6 <__strftime+0x66>
 8021242:	69ab      	ldr	r3, [r5, #24]
 8021244:	193a      	adds	r2, r7, r4
 8021246:	3401      	adds	r4, #1
 8021248:	b913      	cbnz	r3, 8021250 <__strftime+0x800>
 802124a:	2337      	movs	r3, #55	; 0x37
 802124c:	7013      	strb	r3, [r2, #0]
 802124e:	e505      	b.n	8020c5c <__strftime+0x20c>
 8021250:	3330      	adds	r3, #48	; 0x30
 8021252:	e7fb      	b.n	802124c <__strftime+0x7fc>
 8021254:	69eb      	ldr	r3, [r5, #28]
 8021256:	69aa      	ldr	r2, [r5, #24]
 8021258:	3307      	adds	r3, #7
 802125a:	1a9b      	subs	r3, r3, r2
 802125c:	2207      	movs	r2, #7
 802125e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021262:	e62d      	b.n	8020ec0 <__strftime+0x470>
 8021264:	4628      	mov	r0, r5
 8021266:	f7ff fb9c 	bl	80209a2 <iso_year_adjust>
 802126a:	69aa      	ldr	r2, [r5, #24]
 802126c:	b132      	cbz	r2, 802127c <__strftime+0x82c>
 802126e:	3a01      	subs	r2, #1
 8021270:	2800      	cmp	r0, #0
 8021272:	dc28      	bgt.n	80212c6 <__strftime+0x876>
 8021274:	69eb      	ldr	r3, [r5, #28]
 8021276:	d103      	bne.n	8021280 <__strftime+0x830>
 8021278:	330a      	adds	r3, #10
 802127a:	e7ee      	b.n	802125a <__strftime+0x80a>
 802127c:	2206      	movs	r2, #6
 802127e:	e7f7      	b.n	8021270 <__strftime+0x820>
 8021280:	6968      	ldr	r0, [r5, #20]
 8021282:	2800      	cmp	r0, #0
 8021284:	eba2 0303 	sub.w	r3, r2, r3
 8021288:	f240 726b 	movw	r2, #1899	; 0x76b
 802128c:	bfa8      	it	ge
 802128e:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8021292:	4410      	add	r0, r2
 8021294:	0782      	lsls	r2, r0, #30
 8021296:	d105      	bne.n	80212a4 <__strftime+0x854>
 8021298:	2264      	movs	r2, #100	; 0x64
 802129a:	fb90 f1f2 	sdiv	r1, r0, r2
 802129e:	fb02 0111 	mls	r1, r2, r1, r0
 80212a2:	b971      	cbnz	r1, 80212c2 <__strftime+0x872>
 80212a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80212a8:	fb90 f2f1 	sdiv	r2, r0, r1
 80212ac:	fb01 0212 	mls	r2, r1, r2, r0
 80212b0:	fab2 f282 	clz	r2, r2
 80212b4:	0952      	lsrs	r2, r2, #5
 80212b6:	1a9a      	subs	r2, r3, r2
 80212b8:	2a04      	cmp	r2, #4
 80212ba:	bfcc      	ite	gt
 80212bc:	2334      	movgt	r3, #52	; 0x34
 80212be:	2335      	movle	r3, #53	; 0x35
 80212c0:	e5fe      	b.n	8020ec0 <__strftime+0x470>
 80212c2:	2201      	movs	r2, #1
 80212c4:	e7f7      	b.n	80212b6 <__strftime+0x866>
 80212c6:	2301      	movs	r3, #1
 80212c8:	e5fa      	b.n	8020ec0 <__strftime+0x470>
 80212ca:	45a3      	cmp	fp, r4
 80212cc:	f67f abf3 	bls.w	8020ab6 <__strftime+0x66>
 80212d0:	69ab      	ldr	r3, [r5, #24]
 80212d2:	3330      	adds	r3, #48	; 0x30
 80212d4:	e6d1      	b.n	802107a <__strftime+0x62a>
 80212d6:	69ab      	ldr	r3, [r5, #24]
 80212d8:	b13b      	cbz	r3, 80212ea <__strftime+0x89a>
 80212da:	3b01      	subs	r3, #1
 80212dc:	69ea      	ldr	r2, [r5, #28]
 80212de:	3207      	adds	r2, #7
 80212e0:	1ad2      	subs	r2, r2, r3
 80212e2:	2307      	movs	r3, #7
 80212e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212e8:	e5ea      	b.n	8020ec0 <__strftime+0x470>
 80212ea:	2306      	movs	r3, #6
 80212ec:	e7f6      	b.n	80212dc <__strftime+0x88c>
 80212ee:	6968      	ldr	r0, [r5, #20]
 80212f0:	2800      	cmp	r0, #0
 80212f2:	db05      	blt.n	8021300 <__strftime+0x8b0>
 80212f4:	2264      	movs	r2, #100	; 0x64
 80212f6:	fb90 f3f2 	sdiv	r3, r0, r2
 80212fa:	fb02 0313 	mls	r3, r2, r3, r0
 80212fe:	e5df      	b.n	8020ec0 <__strftime+0x470>
 8021300:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021304:	f000 fd3e 	bl	8021d84 <abs>
 8021308:	2364      	movs	r3, #100	; 0x64
 802130a:	fb90 f2f3 	sdiv	r2, r0, r3
 802130e:	e7f4      	b.n	80212fa <__strftime+0x8aa>
 8021310:	696b      	ldr	r3, [r5, #20]
 8021312:	4a52      	ldr	r2, [pc, #328]	; (802145c <__strftime+0xa0c>)
 8021314:	4293      	cmp	r3, r2
 8021316:	da18      	bge.n	802134a <__strftime+0x8fa>
 8021318:	212d      	movs	r1, #45	; 0x2d
 802131a:	f88d 1020 	strb.w	r1, [sp, #32]
 802131e:	1ad3      	subs	r3, r2, r3
 8021320:	f1b9 0f00 	cmp.w	r9, #0
 8021324:	d001      	beq.n	802132a <__strftime+0x8da>
 8021326:	f109 39ff 	add.w	r9, r9, #4294967295
 802132a:	f10d 0221 	add.w	r2, sp, #33	; 0x21
 802132e:	2125      	movs	r1, #37	; 0x25
 8021330:	7011      	strb	r1, [r2, #0]
 8021332:	f1ba 0f00 	cmp.w	sl, #0
 8021336:	f040 8088 	bne.w	802144a <__strftime+0x9fa>
 802133a:	1c50      	adds	r0, r2, #1
 802133c:	4948      	ldr	r1, [pc, #288]	; (8021460 <__strftime+0xa10>)
 802133e:	9304      	str	r3, [sp, #16]
 8021340:	f7ff fb27 	bl	8020992 <strcpy>
 8021344:	9b04      	ldr	r3, [sp, #16]
 8021346:	9300      	str	r3, [sp, #0]
 8021348:	e62e      	b.n	8020fa8 <__strftime+0x558>
 802134a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 802134e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8021352:	f040 8081 	bne.w	8021458 <__strftime+0xa08>
 8021356:	f242 720f 	movw	r2, #9999	; 0x270f
 802135a:	4293      	cmp	r3, r2
 802135c:	d979      	bls.n	8021452 <__strftime+0xa02>
 802135e:	f88d a020 	strb.w	sl, [sp, #32]
 8021362:	e7dd      	b.n	8021320 <__strftime+0x8d0>
 8021364:	6a2b      	ldr	r3, [r5, #32]
 8021366:	2b00      	cmp	r3, #0
 8021368:	f6ff ac78 	blt.w	8020c5c <__strftime+0x20c>
 802136c:	f000 faa4 	bl	80218b8 <__tz_lock>
 8021370:	9b03      	ldr	r3, [sp, #12]
 8021372:	b90b      	cbnz	r3, 8021378 <__strftime+0x928>
 8021374:	f000 faa2 	bl	80218bc <_tzset_unlocked>
 8021378:	f001 fd00 	bl	8022d7c <__gettzinfo>
 802137c:	6a2b      	ldr	r3, [r5, #32]
 802137e:	2b00      	cmp	r3, #0
 8021380:	bfcc      	ite	gt
 8021382:	2350      	movgt	r3, #80	; 0x50
 8021384:	2328      	movle	r3, #40	; 0x28
 8021386:	eb07 0a04 	add.w	sl, r7, r4
 802138a:	58c3      	ldr	r3, [r0, r3]
 802138c:	f1c3 0900 	rsb	r9, r3, #0
 8021390:	f000 fa93 	bl	80218ba <__tz_unlock>
 8021394:	233c      	movs	r3, #60	; 0x3c
 8021396:	1b31      	subs	r1, r6, r4
 8021398:	fb99 f0f3 	sdiv	r0, r9, r3
 802139c:	9104      	str	r1, [sp, #16]
 802139e:	9303      	str	r3, [sp, #12]
 80213a0:	f001 fd9e 	bl	8022ee0 <labs>
 80213a4:	9b03      	ldr	r3, [sp, #12]
 80213a6:	fb90 f2f3 	sdiv	r2, r0, r3
 80213aa:	fb02 0013 	mls	r0, r2, r3, r0
 80213ae:	9000      	str	r0, [sp, #0]
 80213b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80213b4:	4a2b      	ldr	r2, [pc, #172]	; (8021464 <__strftime+0xa14>)
 80213b6:	fb99 f3f3 	sdiv	r3, r9, r3
 80213ba:	9904      	ldr	r1, [sp, #16]
 80213bc:	4650      	mov	r0, sl
 80213be:	f7ff fa0f 	bl	80207e0 <sniprintf>
 80213c2:	2800      	cmp	r0, #0
 80213c4:	f6ff ab77 	blt.w	8020ab6 <__strftime+0x66>
 80213c8:	4404      	add	r4, r0
 80213ca:	42a6      	cmp	r6, r4
 80213cc:	f67f ab73 	bls.w	8020ab6 <__strftime+0x66>
 80213d0:	2301      	movs	r3, #1
 80213d2:	9303      	str	r3, [sp, #12]
 80213d4:	e442      	b.n	8020c5c <__strftime+0x20c>
 80213d6:	6a2b      	ldr	r3, [r5, #32]
 80213d8:	2b00      	cmp	r3, #0
 80213da:	f6ff ac3f 	blt.w	8020c5c <__strftime+0x20c>
 80213de:	f000 fa6b 	bl	80218b8 <__tz_lock>
 80213e2:	9b03      	ldr	r3, [sp, #12]
 80213e4:	b90b      	cbnz	r3, 80213ea <__strftime+0x99a>
 80213e6:	f000 fa69 	bl	80218bc <_tzset_unlocked>
 80213ea:	6a2b      	ldr	r3, [r5, #32]
 80213ec:	4a1e      	ldr	r2, [pc, #120]	; (8021468 <__strftime+0xa18>)
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	bfd4      	ite	le
 80213f2:	2300      	movle	r3, #0
 80213f4:	2301      	movgt	r3, #1
 80213f6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80213fa:	4648      	mov	r0, r9
 80213fc:	f7de ff2a 	bl	8000254 <strlen>
 8021400:	eba9 0904 	sub.w	r9, r9, r4
 8021404:	eb04 0a00 	add.w	sl, r4, r0
 8021408:	45a2      	cmp	sl, r4
 802140a:	d103      	bne.n	8021414 <__strftime+0x9c4>
 802140c:	f000 fa55 	bl	80218ba <__tz_unlock>
 8021410:	4654      	mov	r4, sl
 8021412:	e7dd      	b.n	80213d0 <__strftime+0x980>
 8021414:	45a3      	cmp	fp, r4
 8021416:	d904      	bls.n	8021422 <__strftime+0x9d2>
 8021418:	f819 3004 	ldrb.w	r3, [r9, r4]
 802141c:	553b      	strb	r3, [r7, r4]
 802141e:	3401      	adds	r4, #1
 8021420:	e7f2      	b.n	8021408 <__strftime+0x9b8>
 8021422:	f000 fa4a 	bl	80218ba <__tz_unlock>
 8021426:	f7ff bb46 	b.w	8020ab6 <__strftime+0x66>
 802142a:	45a3      	cmp	fp, r4
 802142c:	f67f ab43 	bls.w	8020ab6 <__strftime+0x66>
 8021430:	2325      	movs	r3, #37	; 0x25
 8021432:	e622      	b.n	802107a <__strftime+0x62a>
 8021434:	b10e      	cbz	r6, 802143a <__strftime+0x9ea>
 8021436:	2300      	movs	r3, #0
 8021438:	553b      	strb	r3, [r7, r4]
 802143a:	4620      	mov	r0, r4
 802143c:	b011      	add	sp, #68	; 0x44
 802143e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021442:	2225      	movs	r2, #37	; 0x25
 8021444:	f88d 2020 	strb.w	r2, [sp, #32]
 8021448:	aa08      	add	r2, sp, #32
 802144a:	2130      	movs	r1, #48	; 0x30
 802144c:	1c90      	adds	r0, r2, #2
 802144e:	7051      	strb	r1, [r2, #1]
 8021450:	e774      	b.n	802133c <__strftime+0x8ec>
 8021452:	f1b9 0f00 	cmp.w	r9, #0
 8021456:	d1f4      	bne.n	8021442 <__strftime+0x9f2>
 8021458:	aa08      	add	r2, sp, #32
 802145a:	e768      	b.n	802132e <__strftime+0x8de>
 802145c:	fffff894 	.word	0xfffff894
 8021460:	0803f80e 	.word	0x0803f80e
 8021464:	0803f82b 	.word	0x0803f82b
 8021468:	20000624 	.word	0x20000624

0802146c <strftime>:
 802146c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802146e:	4c06      	ldr	r4, [pc, #24]	; (8021488 <strftime+0x1c>)
 8021470:	4d06      	ldr	r5, [pc, #24]	; (802148c <strftime+0x20>)
 8021472:	6824      	ldr	r4, [r4, #0]
 8021474:	6a24      	ldr	r4, [r4, #32]
 8021476:	2c00      	cmp	r4, #0
 8021478:	bf08      	it	eq
 802147a:	462c      	moveq	r4, r5
 802147c:	9400      	str	r4, [sp, #0]
 802147e:	f7ff fae7 	bl	8020a50 <__strftime>
 8021482:	b003      	add	sp, #12
 8021484:	bd30      	pop	{r4, r5, pc}
 8021486:	bf00      	nop
 8021488:	20000454 	.word	0x20000454
 802148c:	200004b8 	.word	0x200004b8

08021490 <strncmp>:
 8021490:	b510      	push	{r4, lr}
 8021492:	b16a      	cbz	r2, 80214b0 <strncmp+0x20>
 8021494:	3901      	subs	r1, #1
 8021496:	1884      	adds	r4, r0, r2
 8021498:	f810 3b01 	ldrb.w	r3, [r0], #1
 802149c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80214a0:	4293      	cmp	r3, r2
 80214a2:	d103      	bne.n	80214ac <strncmp+0x1c>
 80214a4:	42a0      	cmp	r0, r4
 80214a6:	d001      	beq.n	80214ac <strncmp+0x1c>
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d1f5      	bne.n	8021498 <strncmp+0x8>
 80214ac:	1a98      	subs	r0, r3, r2
 80214ae:	bd10      	pop	{r4, pc}
 80214b0:	4610      	mov	r0, r2
 80214b2:	e7fc      	b.n	80214ae <strncmp+0x1e>

080214b4 <strncpy>:
 80214b4:	b570      	push	{r4, r5, r6, lr}
 80214b6:	3901      	subs	r1, #1
 80214b8:	4604      	mov	r4, r0
 80214ba:	b902      	cbnz	r2, 80214be <strncpy+0xa>
 80214bc:	bd70      	pop	{r4, r5, r6, pc}
 80214be:	4623      	mov	r3, r4
 80214c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80214c4:	f803 5b01 	strb.w	r5, [r3], #1
 80214c8:	1e56      	subs	r6, r2, #1
 80214ca:	b92d      	cbnz	r5, 80214d8 <strncpy+0x24>
 80214cc:	4414      	add	r4, r2
 80214ce:	42a3      	cmp	r3, r4
 80214d0:	d0f4      	beq.n	80214bc <strncpy+0x8>
 80214d2:	f803 5b01 	strb.w	r5, [r3], #1
 80214d6:	e7fa      	b.n	80214ce <strncpy+0x1a>
 80214d8:	461c      	mov	r4, r3
 80214da:	4632      	mov	r2, r6
 80214dc:	e7ed      	b.n	80214ba <strncpy+0x6>

080214de <_strtol_l.isra.0>:
 80214de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214e2:	4680      	mov	r8, r0
 80214e4:	4689      	mov	r9, r1
 80214e6:	4692      	mov	sl, r2
 80214e8:	461e      	mov	r6, r3
 80214ea:	460f      	mov	r7, r1
 80214ec:	463d      	mov	r5, r7
 80214ee:	9808      	ldr	r0, [sp, #32]
 80214f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80214f4:	f7fe f86a 	bl	801f5cc <__locale_ctype_ptr_l>
 80214f8:	4420      	add	r0, r4
 80214fa:	7843      	ldrb	r3, [r0, #1]
 80214fc:	f013 0308 	ands.w	r3, r3, #8
 8021500:	d132      	bne.n	8021568 <_strtol_l.isra.0+0x8a>
 8021502:	2c2d      	cmp	r4, #45	; 0x2d
 8021504:	d132      	bne.n	802156c <_strtol_l.isra.0+0x8e>
 8021506:	787c      	ldrb	r4, [r7, #1]
 8021508:	1cbd      	adds	r5, r7, #2
 802150a:	2201      	movs	r2, #1
 802150c:	2e00      	cmp	r6, #0
 802150e:	d05d      	beq.n	80215cc <_strtol_l.isra.0+0xee>
 8021510:	2e10      	cmp	r6, #16
 8021512:	d109      	bne.n	8021528 <_strtol_l.isra.0+0x4a>
 8021514:	2c30      	cmp	r4, #48	; 0x30
 8021516:	d107      	bne.n	8021528 <_strtol_l.isra.0+0x4a>
 8021518:	782b      	ldrb	r3, [r5, #0]
 802151a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802151e:	2b58      	cmp	r3, #88	; 0x58
 8021520:	d14f      	bne.n	80215c2 <_strtol_l.isra.0+0xe4>
 8021522:	786c      	ldrb	r4, [r5, #1]
 8021524:	2610      	movs	r6, #16
 8021526:	3502      	adds	r5, #2
 8021528:	2a00      	cmp	r2, #0
 802152a:	bf14      	ite	ne
 802152c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8021530:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8021534:	2700      	movs	r7, #0
 8021536:	fbb1 fcf6 	udiv	ip, r1, r6
 802153a:	4638      	mov	r0, r7
 802153c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8021540:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8021544:	2b09      	cmp	r3, #9
 8021546:	d817      	bhi.n	8021578 <_strtol_l.isra.0+0x9a>
 8021548:	461c      	mov	r4, r3
 802154a:	42a6      	cmp	r6, r4
 802154c:	dd23      	ble.n	8021596 <_strtol_l.isra.0+0xb8>
 802154e:	1c7b      	adds	r3, r7, #1
 8021550:	d007      	beq.n	8021562 <_strtol_l.isra.0+0x84>
 8021552:	4584      	cmp	ip, r0
 8021554:	d31c      	bcc.n	8021590 <_strtol_l.isra.0+0xb2>
 8021556:	d101      	bne.n	802155c <_strtol_l.isra.0+0x7e>
 8021558:	45a6      	cmp	lr, r4
 802155a:	db19      	blt.n	8021590 <_strtol_l.isra.0+0xb2>
 802155c:	fb00 4006 	mla	r0, r0, r6, r4
 8021560:	2701      	movs	r7, #1
 8021562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021566:	e7eb      	b.n	8021540 <_strtol_l.isra.0+0x62>
 8021568:	462f      	mov	r7, r5
 802156a:	e7bf      	b.n	80214ec <_strtol_l.isra.0+0xe>
 802156c:	2c2b      	cmp	r4, #43	; 0x2b
 802156e:	bf04      	itt	eq
 8021570:	1cbd      	addeq	r5, r7, #2
 8021572:	787c      	ldrbeq	r4, [r7, #1]
 8021574:	461a      	mov	r2, r3
 8021576:	e7c9      	b.n	802150c <_strtol_l.isra.0+0x2e>
 8021578:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 802157c:	2b19      	cmp	r3, #25
 802157e:	d801      	bhi.n	8021584 <_strtol_l.isra.0+0xa6>
 8021580:	3c37      	subs	r4, #55	; 0x37
 8021582:	e7e2      	b.n	802154a <_strtol_l.isra.0+0x6c>
 8021584:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8021588:	2b19      	cmp	r3, #25
 802158a:	d804      	bhi.n	8021596 <_strtol_l.isra.0+0xb8>
 802158c:	3c57      	subs	r4, #87	; 0x57
 802158e:	e7dc      	b.n	802154a <_strtol_l.isra.0+0x6c>
 8021590:	f04f 37ff 	mov.w	r7, #4294967295
 8021594:	e7e5      	b.n	8021562 <_strtol_l.isra.0+0x84>
 8021596:	1c7b      	adds	r3, r7, #1
 8021598:	d108      	bne.n	80215ac <_strtol_l.isra.0+0xce>
 802159a:	2322      	movs	r3, #34	; 0x22
 802159c:	f8c8 3000 	str.w	r3, [r8]
 80215a0:	4608      	mov	r0, r1
 80215a2:	f1ba 0f00 	cmp.w	sl, #0
 80215a6:	d107      	bne.n	80215b8 <_strtol_l.isra.0+0xda>
 80215a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80215ac:	b102      	cbz	r2, 80215b0 <_strtol_l.isra.0+0xd2>
 80215ae:	4240      	negs	r0, r0
 80215b0:	f1ba 0f00 	cmp.w	sl, #0
 80215b4:	d0f8      	beq.n	80215a8 <_strtol_l.isra.0+0xca>
 80215b6:	b10f      	cbz	r7, 80215bc <_strtol_l.isra.0+0xde>
 80215b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80215bc:	f8ca 9000 	str.w	r9, [sl]
 80215c0:	e7f2      	b.n	80215a8 <_strtol_l.isra.0+0xca>
 80215c2:	2430      	movs	r4, #48	; 0x30
 80215c4:	2e00      	cmp	r6, #0
 80215c6:	d1af      	bne.n	8021528 <_strtol_l.isra.0+0x4a>
 80215c8:	2608      	movs	r6, #8
 80215ca:	e7ad      	b.n	8021528 <_strtol_l.isra.0+0x4a>
 80215cc:	2c30      	cmp	r4, #48	; 0x30
 80215ce:	d0a3      	beq.n	8021518 <_strtol_l.isra.0+0x3a>
 80215d0:	260a      	movs	r6, #10
 80215d2:	e7a9      	b.n	8021528 <_strtol_l.isra.0+0x4a>

080215d4 <_strtol_r>:
 80215d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80215d6:	4c06      	ldr	r4, [pc, #24]	; (80215f0 <_strtol_r+0x1c>)
 80215d8:	4d06      	ldr	r5, [pc, #24]	; (80215f4 <_strtol_r+0x20>)
 80215da:	6824      	ldr	r4, [r4, #0]
 80215dc:	6a24      	ldr	r4, [r4, #32]
 80215de:	2c00      	cmp	r4, #0
 80215e0:	bf08      	it	eq
 80215e2:	462c      	moveq	r4, r5
 80215e4:	9400      	str	r4, [sp, #0]
 80215e6:	f7ff ff7a 	bl	80214de <_strtol_l.isra.0>
 80215ea:	b003      	add	sp, #12
 80215ec:	bd30      	pop	{r4, r5, pc}
 80215ee:	bf00      	nop
 80215f0:	20000454 	.word	0x20000454
 80215f4:	200004b8 	.word	0x200004b8

080215f8 <strtol>:
 80215f8:	4b08      	ldr	r3, [pc, #32]	; (802161c <strtol+0x24>)
 80215fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80215fc:	681c      	ldr	r4, [r3, #0]
 80215fe:	4d08      	ldr	r5, [pc, #32]	; (8021620 <strtol+0x28>)
 8021600:	6a23      	ldr	r3, [r4, #32]
 8021602:	2b00      	cmp	r3, #0
 8021604:	bf08      	it	eq
 8021606:	462b      	moveq	r3, r5
 8021608:	9300      	str	r3, [sp, #0]
 802160a:	4613      	mov	r3, r2
 802160c:	460a      	mov	r2, r1
 802160e:	4601      	mov	r1, r0
 8021610:	4620      	mov	r0, r4
 8021612:	f7ff ff64 	bl	80214de <_strtol_l.isra.0>
 8021616:	b003      	add	sp, #12
 8021618:	bd30      	pop	{r4, r5, pc}
 802161a:	bf00      	nop
 802161c:	20000454 	.word	0x20000454
 8021620:	200004b8 	.word	0x200004b8

08021624 <_strtoul_l.isra.0>:
 8021624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021628:	4680      	mov	r8, r0
 802162a:	4689      	mov	r9, r1
 802162c:	4692      	mov	sl, r2
 802162e:	461e      	mov	r6, r3
 8021630:	460f      	mov	r7, r1
 8021632:	463d      	mov	r5, r7
 8021634:	9808      	ldr	r0, [sp, #32]
 8021636:	f815 4b01 	ldrb.w	r4, [r5], #1
 802163a:	f7fd ffc7 	bl	801f5cc <__locale_ctype_ptr_l>
 802163e:	4420      	add	r0, r4
 8021640:	7843      	ldrb	r3, [r0, #1]
 8021642:	f013 0308 	ands.w	r3, r3, #8
 8021646:	d130      	bne.n	80216aa <_strtoul_l.isra.0+0x86>
 8021648:	2c2d      	cmp	r4, #45	; 0x2d
 802164a:	d130      	bne.n	80216ae <_strtoul_l.isra.0+0x8a>
 802164c:	787c      	ldrb	r4, [r7, #1]
 802164e:	1cbd      	adds	r5, r7, #2
 8021650:	2101      	movs	r1, #1
 8021652:	2e00      	cmp	r6, #0
 8021654:	d05c      	beq.n	8021710 <_strtoul_l.isra.0+0xec>
 8021656:	2e10      	cmp	r6, #16
 8021658:	d109      	bne.n	802166e <_strtoul_l.isra.0+0x4a>
 802165a:	2c30      	cmp	r4, #48	; 0x30
 802165c:	d107      	bne.n	802166e <_strtoul_l.isra.0+0x4a>
 802165e:	782b      	ldrb	r3, [r5, #0]
 8021660:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021664:	2b58      	cmp	r3, #88	; 0x58
 8021666:	d14e      	bne.n	8021706 <_strtoul_l.isra.0+0xe2>
 8021668:	786c      	ldrb	r4, [r5, #1]
 802166a:	2610      	movs	r6, #16
 802166c:	3502      	adds	r5, #2
 802166e:	f04f 32ff 	mov.w	r2, #4294967295
 8021672:	2300      	movs	r3, #0
 8021674:	fbb2 f2f6 	udiv	r2, r2, r6
 8021678:	fb06 fc02 	mul.w	ip, r6, r2
 802167c:	ea6f 0c0c 	mvn.w	ip, ip
 8021680:	4618      	mov	r0, r3
 8021682:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021686:	2f09      	cmp	r7, #9
 8021688:	d817      	bhi.n	80216ba <_strtoul_l.isra.0+0x96>
 802168a:	463c      	mov	r4, r7
 802168c:	42a6      	cmp	r6, r4
 802168e:	dd23      	ble.n	80216d8 <_strtoul_l.isra.0+0xb4>
 8021690:	2b00      	cmp	r3, #0
 8021692:	db1e      	blt.n	80216d2 <_strtoul_l.isra.0+0xae>
 8021694:	4282      	cmp	r2, r0
 8021696:	d31c      	bcc.n	80216d2 <_strtoul_l.isra.0+0xae>
 8021698:	d101      	bne.n	802169e <_strtoul_l.isra.0+0x7a>
 802169a:	45a4      	cmp	ip, r4
 802169c:	db19      	blt.n	80216d2 <_strtoul_l.isra.0+0xae>
 802169e:	fb00 4006 	mla	r0, r0, r6, r4
 80216a2:	2301      	movs	r3, #1
 80216a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80216a8:	e7eb      	b.n	8021682 <_strtoul_l.isra.0+0x5e>
 80216aa:	462f      	mov	r7, r5
 80216ac:	e7c1      	b.n	8021632 <_strtoul_l.isra.0+0xe>
 80216ae:	2c2b      	cmp	r4, #43	; 0x2b
 80216b0:	bf04      	itt	eq
 80216b2:	1cbd      	addeq	r5, r7, #2
 80216b4:	787c      	ldrbeq	r4, [r7, #1]
 80216b6:	4619      	mov	r1, r3
 80216b8:	e7cb      	b.n	8021652 <_strtoul_l.isra.0+0x2e>
 80216ba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80216be:	2f19      	cmp	r7, #25
 80216c0:	d801      	bhi.n	80216c6 <_strtoul_l.isra.0+0xa2>
 80216c2:	3c37      	subs	r4, #55	; 0x37
 80216c4:	e7e2      	b.n	802168c <_strtoul_l.isra.0+0x68>
 80216c6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80216ca:	2f19      	cmp	r7, #25
 80216cc:	d804      	bhi.n	80216d8 <_strtoul_l.isra.0+0xb4>
 80216ce:	3c57      	subs	r4, #87	; 0x57
 80216d0:	e7dc      	b.n	802168c <_strtoul_l.isra.0+0x68>
 80216d2:	f04f 33ff 	mov.w	r3, #4294967295
 80216d6:	e7e5      	b.n	80216a4 <_strtoul_l.isra.0+0x80>
 80216d8:	2b00      	cmp	r3, #0
 80216da:	da09      	bge.n	80216f0 <_strtoul_l.isra.0+0xcc>
 80216dc:	2322      	movs	r3, #34	; 0x22
 80216de:	f8c8 3000 	str.w	r3, [r8]
 80216e2:	f04f 30ff 	mov.w	r0, #4294967295
 80216e6:	f1ba 0f00 	cmp.w	sl, #0
 80216ea:	d107      	bne.n	80216fc <_strtoul_l.isra.0+0xd8>
 80216ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80216f0:	b101      	cbz	r1, 80216f4 <_strtoul_l.isra.0+0xd0>
 80216f2:	4240      	negs	r0, r0
 80216f4:	f1ba 0f00 	cmp.w	sl, #0
 80216f8:	d0f8      	beq.n	80216ec <_strtoul_l.isra.0+0xc8>
 80216fa:	b10b      	cbz	r3, 8021700 <_strtoul_l.isra.0+0xdc>
 80216fc:	f105 39ff 	add.w	r9, r5, #4294967295
 8021700:	f8ca 9000 	str.w	r9, [sl]
 8021704:	e7f2      	b.n	80216ec <_strtoul_l.isra.0+0xc8>
 8021706:	2430      	movs	r4, #48	; 0x30
 8021708:	2e00      	cmp	r6, #0
 802170a:	d1b0      	bne.n	802166e <_strtoul_l.isra.0+0x4a>
 802170c:	2608      	movs	r6, #8
 802170e:	e7ae      	b.n	802166e <_strtoul_l.isra.0+0x4a>
 8021710:	2c30      	cmp	r4, #48	; 0x30
 8021712:	d0a4      	beq.n	802165e <_strtoul_l.isra.0+0x3a>
 8021714:	260a      	movs	r6, #10
 8021716:	e7aa      	b.n	802166e <_strtoul_l.isra.0+0x4a>

08021718 <_strtoul_r>:
 8021718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802171a:	4c06      	ldr	r4, [pc, #24]	; (8021734 <_strtoul_r+0x1c>)
 802171c:	4d06      	ldr	r5, [pc, #24]	; (8021738 <_strtoul_r+0x20>)
 802171e:	6824      	ldr	r4, [r4, #0]
 8021720:	6a24      	ldr	r4, [r4, #32]
 8021722:	2c00      	cmp	r4, #0
 8021724:	bf08      	it	eq
 8021726:	462c      	moveq	r4, r5
 8021728:	9400      	str	r4, [sp, #0]
 802172a:	f7ff ff7b 	bl	8021624 <_strtoul_l.isra.0>
 802172e:	b003      	add	sp, #12
 8021730:	bd30      	pop	{r4, r5, pc}
 8021732:	bf00      	nop
 8021734:	20000454 	.word	0x20000454
 8021738:	200004b8 	.word	0x200004b8

0802173c <strtoul>:
 802173c:	4b08      	ldr	r3, [pc, #32]	; (8021760 <strtoul+0x24>)
 802173e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021740:	681c      	ldr	r4, [r3, #0]
 8021742:	4d08      	ldr	r5, [pc, #32]	; (8021764 <strtoul+0x28>)
 8021744:	6a23      	ldr	r3, [r4, #32]
 8021746:	2b00      	cmp	r3, #0
 8021748:	bf08      	it	eq
 802174a:	462b      	moveq	r3, r5
 802174c:	9300      	str	r3, [sp, #0]
 802174e:	4613      	mov	r3, r2
 8021750:	460a      	mov	r2, r1
 8021752:	4601      	mov	r1, r0
 8021754:	4620      	mov	r0, r4
 8021756:	f7ff ff65 	bl	8021624 <_strtoul_l.isra.0>
 802175a:	b003      	add	sp, #12
 802175c:	bd30      	pop	{r4, r5, pc}
 802175e:	bf00      	nop
 8021760:	20000454 	.word	0x20000454
 8021764:	200004b8 	.word	0x200004b8

08021768 <__tzcalc_limits>:
 8021768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802176c:	4680      	mov	r8, r0
 802176e:	f001 fb05 	bl	8022d7c <__gettzinfo>
 8021772:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021776:	4598      	cmp	r8, r3
 8021778:	f340 8098 	ble.w	80218ac <__tzcalc_limits+0x144>
 802177c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021780:	4443      	add	r3, r8
 8021782:	109b      	asrs	r3, r3, #2
 8021784:	f240 126d 	movw	r2, #365	; 0x16d
 8021788:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 802178c:	fb02 3505 	mla	r5, r2, r5, r3
 8021790:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021794:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021798:	fb93 f3f2 	sdiv	r3, r3, r2
 802179c:	441d      	add	r5, r3
 802179e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80217a2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80217a6:	fb98 f7f3 	sdiv	r7, r8, r3
 80217aa:	fb03 8717 	mls	r7, r3, r7, r8
 80217ae:	4442      	add	r2, r8
 80217b0:	fab7 fc87 	clz	ip, r7
 80217b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80217b8:	f008 0303 	and.w	r3, r8, #3
 80217bc:	4415      	add	r5, r2
 80217be:	2264      	movs	r2, #100	; 0x64
 80217c0:	f8c0 8004 	str.w	r8, [r0, #4]
 80217c4:	fb98 f6f2 	sdiv	r6, r8, r2
 80217c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80217cc:	fb02 8616 	mls	r6, r2, r6, r8
 80217d0:	4604      	mov	r4, r0
 80217d2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80217d6:	9300      	str	r3, [sp, #0]
 80217d8:	f04f 0e07 	mov.w	lr, #7
 80217dc:	7a22      	ldrb	r2, [r4, #8]
 80217de:	6963      	ldr	r3, [r4, #20]
 80217e0:	2a4a      	cmp	r2, #74	; 0x4a
 80217e2:	d128      	bne.n	8021836 <__tzcalc_limits+0xce>
 80217e4:	9900      	ldr	r1, [sp, #0]
 80217e6:	18ea      	adds	r2, r5, r3
 80217e8:	b901      	cbnz	r1, 80217ec <__tzcalc_limits+0x84>
 80217ea:	b906      	cbnz	r6, 80217ee <__tzcalc_limits+0x86>
 80217ec:	bb0f      	cbnz	r7, 8021832 <__tzcalc_limits+0xca>
 80217ee:	2b3b      	cmp	r3, #59	; 0x3b
 80217f0:	bfd4      	ite	le
 80217f2:	2300      	movle	r3, #0
 80217f4:	2301      	movgt	r3, #1
 80217f6:	4413      	add	r3, r2
 80217f8:	1e5a      	subs	r2, r3, #1
 80217fa:	69a3      	ldr	r3, [r4, #24]
 80217fc:	492c      	ldr	r1, [pc, #176]	; (80218b0 <__tzcalc_limits+0x148>)
 80217fe:	fb01 3202 	mla	r2, r1, r2, r3
 8021802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021804:	4413      	add	r3, r2
 8021806:	461a      	mov	r2, r3
 8021808:	17db      	asrs	r3, r3, #31
 802180a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802180e:	3428      	adds	r4, #40	; 0x28
 8021810:	45a3      	cmp	fp, r4
 8021812:	d1e3      	bne.n	80217dc <__tzcalc_limits+0x74>
 8021814:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021818:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 802181c:	4294      	cmp	r4, r2
 802181e:	eb75 0303 	sbcs.w	r3, r5, r3
 8021822:	bfb4      	ite	lt
 8021824:	2301      	movlt	r3, #1
 8021826:	2300      	movge	r3, #0
 8021828:	6003      	str	r3, [r0, #0]
 802182a:	2001      	movs	r0, #1
 802182c:	b003      	add	sp, #12
 802182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021832:	2300      	movs	r3, #0
 8021834:	e7df      	b.n	80217f6 <__tzcalc_limits+0x8e>
 8021836:	2a44      	cmp	r2, #68	; 0x44
 8021838:	d101      	bne.n	802183e <__tzcalc_limits+0xd6>
 802183a:	18ea      	adds	r2, r5, r3
 802183c:	e7dd      	b.n	80217fa <__tzcalc_limits+0x92>
 802183e:	9a00      	ldr	r2, [sp, #0]
 8021840:	bb72      	cbnz	r2, 80218a0 <__tzcalc_limits+0x138>
 8021842:	2e00      	cmp	r6, #0
 8021844:	bf0c      	ite	eq
 8021846:	46e1      	moveq	r9, ip
 8021848:	f04f 0901 	movne.w	r9, #1
 802184c:	2230      	movs	r2, #48	; 0x30
 802184e:	fb02 f909 	mul.w	r9, r2, r9
 8021852:	68e2      	ldr	r2, [r4, #12]
 8021854:	9201      	str	r2, [sp, #4]
 8021856:	f04f 0800 	mov.w	r8, #0
 802185a:	462a      	mov	r2, r5
 802185c:	f108 0801 	add.w	r8, r8, #1
 8021860:	4914      	ldr	r1, [pc, #80]	; (80218b4 <__tzcalc_limits+0x14c>)
 8021862:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8021866:	448a      	add	sl, r1
 8021868:	9901      	ldr	r1, [sp, #4]
 802186a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 802186e:	4541      	cmp	r1, r8
 8021870:	dc18      	bgt.n	80218a4 <__tzcalc_limits+0x13c>
 8021872:	f102 0804 	add.w	r8, r2, #4
 8021876:	fb98 f9fe 	sdiv	r9, r8, lr
 802187a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802187e:	eba8 0909 	sub.w	r9, r8, r9
 8021882:	ebb3 0909 	subs.w	r9, r3, r9
 8021886:	6923      	ldr	r3, [r4, #16]
 8021888:	f103 33ff 	add.w	r3, r3, #4294967295
 802188c:	bf48      	it	mi
 802188e:	f109 0907 	addmi.w	r9, r9, #7
 8021892:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021896:	444b      	add	r3, r9
 8021898:	4553      	cmp	r3, sl
 802189a:	da05      	bge.n	80218a8 <__tzcalc_limits+0x140>
 802189c:	441a      	add	r2, r3
 802189e:	e7ac      	b.n	80217fa <__tzcalc_limits+0x92>
 80218a0:	46e1      	mov	r9, ip
 80218a2:	e7d3      	b.n	802184c <__tzcalc_limits+0xe4>
 80218a4:	4452      	add	r2, sl
 80218a6:	e7d9      	b.n	802185c <__tzcalc_limits+0xf4>
 80218a8:	3b07      	subs	r3, #7
 80218aa:	e7f5      	b.n	8021898 <__tzcalc_limits+0x130>
 80218ac:	2000      	movs	r0, #0
 80218ae:	e7bd      	b.n	802182c <__tzcalc_limits+0xc4>
 80218b0:	00015180 	.word	0x00015180
 80218b4:	0803f74c 	.word	0x0803f74c

080218b8 <__tz_lock>:
 80218b8:	4770      	bx	lr

080218ba <__tz_unlock>:
 80218ba:	4770      	bx	lr

080218bc <_tzset_unlocked>:
 80218bc:	4b01      	ldr	r3, [pc, #4]	; (80218c4 <_tzset_unlocked+0x8>)
 80218be:	6818      	ldr	r0, [r3, #0]
 80218c0:	f000 b802 	b.w	80218c8 <_tzset_unlocked_r>
 80218c4:	20000454 	.word	0x20000454

080218c8 <_tzset_unlocked_r>:
 80218c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218cc:	b08d      	sub	sp, #52	; 0x34
 80218ce:	4607      	mov	r7, r0
 80218d0:	f001 fa54 	bl	8022d7c <__gettzinfo>
 80218d4:	49af      	ldr	r1, [pc, #700]	; (8021b94 <_tzset_unlocked_r+0x2cc>)
 80218d6:	4eb0      	ldr	r6, [pc, #704]	; (8021b98 <_tzset_unlocked_r+0x2d0>)
 80218d8:	4605      	mov	r5, r0
 80218da:	4638      	mov	r0, r7
 80218dc:	f001 fa46 	bl	8022d6c <_getenv_r>
 80218e0:	4604      	mov	r4, r0
 80218e2:	b970      	cbnz	r0, 8021902 <_tzset_unlocked_r+0x3a>
 80218e4:	4bad      	ldr	r3, [pc, #692]	; (8021b9c <_tzset_unlocked_r+0x2d4>)
 80218e6:	4aae      	ldr	r2, [pc, #696]	; (8021ba0 <_tzset_unlocked_r+0x2d8>)
 80218e8:	6018      	str	r0, [r3, #0]
 80218ea:	4bae      	ldr	r3, [pc, #696]	; (8021ba4 <_tzset_unlocked_r+0x2dc>)
 80218ec:	6018      	str	r0, [r3, #0]
 80218ee:	4bae      	ldr	r3, [pc, #696]	; (8021ba8 <_tzset_unlocked_r+0x2e0>)
 80218f0:	6830      	ldr	r0, [r6, #0]
 80218f2:	e9c3 2200 	strd	r2, r2, [r3]
 80218f6:	f7fd fe83 	bl	801f600 <free>
 80218fa:	6034      	str	r4, [r6, #0]
 80218fc:	b00d      	add	sp, #52	; 0x34
 80218fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021902:	6831      	ldr	r1, [r6, #0]
 8021904:	2900      	cmp	r1, #0
 8021906:	d15f      	bne.n	80219c8 <_tzset_unlocked_r+0x100>
 8021908:	6830      	ldr	r0, [r6, #0]
 802190a:	f7fd fe79 	bl	801f600 <free>
 802190e:	4620      	mov	r0, r4
 8021910:	f7de fca0 	bl	8000254 <strlen>
 8021914:	1c41      	adds	r1, r0, #1
 8021916:	4638      	mov	r0, r7
 8021918:	f7fe f9aa 	bl	801fc70 <_malloc_r>
 802191c:	6030      	str	r0, [r6, #0]
 802191e:	2800      	cmp	r0, #0
 8021920:	d157      	bne.n	80219d2 <_tzset_unlocked_r+0x10a>
 8021922:	7823      	ldrb	r3, [r4, #0]
 8021924:	4aa1      	ldr	r2, [pc, #644]	; (8021bac <_tzset_unlocked_r+0x2e4>)
 8021926:	49a2      	ldr	r1, [pc, #648]	; (8021bb0 <_tzset_unlocked_r+0x2e8>)
 8021928:	2b3a      	cmp	r3, #58	; 0x3a
 802192a:	bf08      	it	eq
 802192c:	3401      	addeq	r4, #1
 802192e:	ae0a      	add	r6, sp, #40	; 0x28
 8021930:	4633      	mov	r3, r6
 8021932:	4620      	mov	r0, r4
 8021934:	f7fe ffa8 	bl	8020888 <siscanf>
 8021938:	2800      	cmp	r0, #0
 802193a:	dddf      	ble.n	80218fc <_tzset_unlocked_r+0x34>
 802193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802193e:	18e7      	adds	r7, r4, r3
 8021940:	5ce3      	ldrb	r3, [r4, r3]
 8021942:	2b2d      	cmp	r3, #45	; 0x2d
 8021944:	d149      	bne.n	80219da <_tzset_unlocked_r+0x112>
 8021946:	3701      	adds	r7, #1
 8021948:	f04f 34ff 	mov.w	r4, #4294967295
 802194c:	f10d 0a20 	add.w	sl, sp, #32
 8021950:	f10d 0b1e 	add.w	fp, sp, #30
 8021954:	f04f 0800 	mov.w	r8, #0
 8021958:	9603      	str	r6, [sp, #12]
 802195a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802195e:	f8cd b000 	str.w	fp, [sp]
 8021962:	4633      	mov	r3, r6
 8021964:	aa07      	add	r2, sp, #28
 8021966:	4993      	ldr	r1, [pc, #588]	; (8021bb4 <_tzset_unlocked_r+0x2ec>)
 8021968:	f8ad 801e 	strh.w	r8, [sp, #30]
 802196c:	4638      	mov	r0, r7
 802196e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021972:	f7fe ff89 	bl	8020888 <siscanf>
 8021976:	4540      	cmp	r0, r8
 8021978:	ddc0      	ble.n	80218fc <_tzset_unlocked_r+0x34>
 802197a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802197e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021982:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8021bc0 <_tzset_unlocked_r+0x2f8>
 8021986:	213c      	movs	r1, #60	; 0x3c
 8021988:	fb01 2203 	mla	r2, r1, r3, r2
 802198c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021990:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021994:	fb01 2303 	mla	r3, r1, r3, r2
 8021998:	435c      	muls	r4, r3
 802199a:	62ac      	str	r4, [r5, #40]	; 0x28
 802199c:	4c82      	ldr	r4, [pc, #520]	; (8021ba8 <_tzset_unlocked_r+0x2e0>)
 802199e:	4b83      	ldr	r3, [pc, #524]	; (8021bac <_tzset_unlocked_r+0x2e4>)
 80219a0:	6023      	str	r3, [r4, #0]
 80219a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219a4:	4982      	ldr	r1, [pc, #520]	; (8021bb0 <_tzset_unlocked_r+0x2e8>)
 80219a6:	441f      	add	r7, r3
 80219a8:	464a      	mov	r2, r9
 80219aa:	4633      	mov	r3, r6
 80219ac:	4638      	mov	r0, r7
 80219ae:	f7fe ff6b 	bl	8020888 <siscanf>
 80219b2:	4540      	cmp	r0, r8
 80219b4:	dc16      	bgt.n	80219e4 <_tzset_unlocked_r+0x11c>
 80219b6:	6823      	ldr	r3, [r4, #0]
 80219b8:	6063      	str	r3, [r4, #4]
 80219ba:	4b78      	ldr	r3, [pc, #480]	; (8021b9c <_tzset_unlocked_r+0x2d4>)
 80219bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80219be:	601a      	str	r2, [r3, #0]
 80219c0:	4b78      	ldr	r3, [pc, #480]	; (8021ba4 <_tzset_unlocked_r+0x2dc>)
 80219c2:	f8c3 8000 	str.w	r8, [r3]
 80219c6:	e799      	b.n	80218fc <_tzset_unlocked_r+0x34>
 80219c8:	f7de fc3a 	bl	8000240 <strcmp>
 80219cc:	2800      	cmp	r0, #0
 80219ce:	d095      	beq.n	80218fc <_tzset_unlocked_r+0x34>
 80219d0:	e79a      	b.n	8021908 <_tzset_unlocked_r+0x40>
 80219d2:	4621      	mov	r1, r4
 80219d4:	f7fe ffdd 	bl	8020992 <strcpy>
 80219d8:	e7a3      	b.n	8021922 <_tzset_unlocked_r+0x5a>
 80219da:	2b2b      	cmp	r3, #43	; 0x2b
 80219dc:	bf08      	it	eq
 80219de:	3701      	addeq	r7, #1
 80219e0:	2401      	movs	r4, #1
 80219e2:	e7b3      	b.n	802194c <_tzset_unlocked_r+0x84>
 80219e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219e6:	f8c4 9004 	str.w	r9, [r4, #4]
 80219ea:	18fc      	adds	r4, r7, r3
 80219ec:	5cfb      	ldrb	r3, [r7, r3]
 80219ee:	2b2d      	cmp	r3, #45	; 0x2d
 80219f0:	f040 808b 	bne.w	8021b0a <_tzset_unlocked_r+0x242>
 80219f4:	3401      	adds	r4, #1
 80219f6:	f04f 37ff 	mov.w	r7, #4294967295
 80219fa:	2300      	movs	r3, #0
 80219fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021a00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021a04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021a08:	930a      	str	r3, [sp, #40]	; 0x28
 8021a0a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021a0e:	e9cd b600 	strd	fp, r6, [sp]
 8021a12:	4633      	mov	r3, r6
 8021a14:	aa07      	add	r2, sp, #28
 8021a16:	4967      	ldr	r1, [pc, #412]	; (8021bb4 <_tzset_unlocked_r+0x2ec>)
 8021a18:	4620      	mov	r0, r4
 8021a1a:	f7fe ff35 	bl	8020888 <siscanf>
 8021a1e:	2800      	cmp	r0, #0
 8021a20:	dc78      	bgt.n	8021b14 <_tzset_unlocked_r+0x24c>
 8021a22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8021a24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8021a28:	652b      	str	r3, [r5, #80]	; 0x50
 8021a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a2c:	462f      	mov	r7, r5
 8021a2e:	441c      	add	r4, r3
 8021a30:	f04f 0900 	mov.w	r9, #0
 8021a34:	7823      	ldrb	r3, [r4, #0]
 8021a36:	2b2c      	cmp	r3, #44	; 0x2c
 8021a38:	bf08      	it	eq
 8021a3a:	3401      	addeq	r4, #1
 8021a3c:	f894 8000 	ldrb.w	r8, [r4]
 8021a40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021a44:	d179      	bne.n	8021b3a <_tzset_unlocked_r+0x272>
 8021a46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8021a4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8021a4e:	ab09      	add	r3, sp, #36	; 0x24
 8021a50:	9300      	str	r3, [sp, #0]
 8021a52:	9603      	str	r6, [sp, #12]
 8021a54:	4633      	mov	r3, r6
 8021a56:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021a5a:	4957      	ldr	r1, [pc, #348]	; (8021bb8 <_tzset_unlocked_r+0x2f0>)
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	f7fe ff13 	bl	8020888 <siscanf>
 8021a62:	2803      	cmp	r0, #3
 8021a64:	f47f af4a 	bne.w	80218fc <_tzset_unlocked_r+0x34>
 8021a68:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021a6c:	1e4b      	subs	r3, r1, #1
 8021a6e:	2b0b      	cmp	r3, #11
 8021a70:	f63f af44 	bhi.w	80218fc <_tzset_unlocked_r+0x34>
 8021a74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021a78:	1e53      	subs	r3, r2, #1
 8021a7a:	2b04      	cmp	r3, #4
 8021a7c:	f63f af3e 	bhi.w	80218fc <_tzset_unlocked_r+0x34>
 8021a80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021a84:	2b06      	cmp	r3, #6
 8021a86:	f63f af39 	bhi.w	80218fc <_tzset_unlocked_r+0x34>
 8021a8a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021a8e:	f887 8008 	strb.w	r8, [r7, #8]
 8021a92:	617b      	str	r3, [r7, #20]
 8021a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a96:	eb04 0803 	add.w	r8, r4, r3
 8021a9a:	2302      	movs	r3, #2
 8021a9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021aa6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8021aac:	f898 3000 	ldrb.w	r3, [r8]
 8021ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8021ab2:	d109      	bne.n	8021ac8 <_tzset_unlocked_r+0x200>
 8021ab4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021ab8:	e9cd b600 	strd	fp, r6, [sp]
 8021abc:	4633      	mov	r3, r6
 8021abe:	aa07      	add	r2, sp, #28
 8021ac0:	493e      	ldr	r1, [pc, #248]	; (8021bbc <_tzset_unlocked_r+0x2f4>)
 8021ac2:	4640      	mov	r0, r8
 8021ac4:	f7fe fee0 	bl	8020888 <siscanf>
 8021ac8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021acc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021ad0:	213c      	movs	r1, #60	; 0x3c
 8021ad2:	fb01 2203 	mla	r2, r1, r3, r2
 8021ad6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021ada:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021ade:	fb01 2303 	mla	r3, r1, r3, r2
 8021ae2:	61bb      	str	r3, [r7, #24]
 8021ae4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ae6:	3728      	adds	r7, #40	; 0x28
 8021ae8:	4444      	add	r4, r8
 8021aea:	f1b9 0f00 	cmp.w	r9, #0
 8021aee:	d021      	beq.n	8021b34 <_tzset_unlocked_r+0x26c>
 8021af0:	6868      	ldr	r0, [r5, #4]
 8021af2:	f7ff fe39 	bl	8021768 <__tzcalc_limits>
 8021af6:	4b29      	ldr	r3, [pc, #164]	; (8021b9c <_tzset_unlocked_r+0x2d4>)
 8021af8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021afa:	601a      	str	r2, [r3, #0]
 8021afc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021afe:	1a9b      	subs	r3, r3, r2
 8021b00:	4a28      	ldr	r2, [pc, #160]	; (8021ba4 <_tzset_unlocked_r+0x2dc>)
 8021b02:	bf18      	it	ne
 8021b04:	2301      	movne	r3, #1
 8021b06:	6013      	str	r3, [r2, #0]
 8021b08:	e6f8      	b.n	80218fc <_tzset_unlocked_r+0x34>
 8021b0a:	2b2b      	cmp	r3, #43	; 0x2b
 8021b0c:	bf08      	it	eq
 8021b0e:	3401      	addeq	r4, #1
 8021b10:	2701      	movs	r7, #1
 8021b12:	e772      	b.n	80219fa <_tzset_unlocked_r+0x132>
 8021b14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021b18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021b1c:	213c      	movs	r1, #60	; 0x3c
 8021b1e:	fb01 2203 	mla	r2, r1, r3, r2
 8021b22:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021b26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021b2a:	fb01 2303 	mla	r3, r1, r3, r2
 8021b2e:	435f      	muls	r7, r3
 8021b30:	652f      	str	r7, [r5, #80]	; 0x50
 8021b32:	e77a      	b.n	8021a2a <_tzset_unlocked_r+0x162>
 8021b34:	f04f 0901 	mov.w	r9, #1
 8021b38:	e77c      	b.n	8021a34 <_tzset_unlocked_r+0x16c>
 8021b3a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021b3e:	bf06      	itte	eq
 8021b40:	3401      	addeq	r4, #1
 8021b42:	4643      	moveq	r3, r8
 8021b44:	2344      	movne	r3, #68	; 0x44
 8021b46:	220a      	movs	r2, #10
 8021b48:	a90b      	add	r1, sp, #44	; 0x2c
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	9305      	str	r3, [sp, #20]
 8021b4e:	f7ff fdf5 	bl	802173c <strtoul>
 8021b52:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021b56:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021b5a:	45a0      	cmp	r8, r4
 8021b5c:	9b05      	ldr	r3, [sp, #20]
 8021b5e:	d114      	bne.n	8021b8a <_tzset_unlocked_r+0x2c2>
 8021b60:	234d      	movs	r3, #77	; 0x4d
 8021b62:	f1b9 0f00 	cmp.w	r9, #0
 8021b66:	d107      	bne.n	8021b78 <_tzset_unlocked_r+0x2b0>
 8021b68:	722b      	strb	r3, [r5, #8]
 8021b6a:	2103      	movs	r1, #3
 8021b6c:	2302      	movs	r3, #2
 8021b6e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021b72:	f8c5 9014 	str.w	r9, [r5, #20]
 8021b76:	e790      	b.n	8021a9a <_tzset_unlocked_r+0x1d2>
 8021b78:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021b7c:	220b      	movs	r2, #11
 8021b7e:	2301      	movs	r3, #1
 8021b80:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021b84:	2300      	movs	r3, #0
 8021b86:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021b88:	e787      	b.n	8021a9a <_tzset_unlocked_r+0x1d2>
 8021b8a:	b280      	uxth	r0, r0
 8021b8c:	723b      	strb	r3, [r7, #8]
 8021b8e:	6178      	str	r0, [r7, #20]
 8021b90:	e783      	b.n	8021a9a <_tzset_unlocked_r+0x1d2>
 8021b92:	bf00      	nop
 8021b94:	0803fa5f 	.word	0x0803fa5f
 8021b98:	2002276c 	.word	0x2002276c
 8021b9c:	20022774 	.word	0x20022774
 8021ba0:	0803fa62 	.word	0x0803fa62
 8021ba4:	20022770 	.word	0x20022770
 8021ba8:	20000624 	.word	0x20000624
 8021bac:	2002275f 	.word	0x2002275f
 8021bb0:	0803fa66 	.word	0x0803fa66
 8021bb4:	0803fa89 	.word	0x0803fa89
 8021bb8:	0803fa75 	.word	0x0803fa75
 8021bbc:	0803fa88 	.word	0x0803fa88
 8021bc0:	20022754 	.word	0x20022754

08021bc4 <__swbuf_r>:
 8021bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bc6:	460e      	mov	r6, r1
 8021bc8:	4614      	mov	r4, r2
 8021bca:	4605      	mov	r5, r0
 8021bcc:	b118      	cbz	r0, 8021bd6 <__swbuf_r+0x12>
 8021bce:	6983      	ldr	r3, [r0, #24]
 8021bd0:	b90b      	cbnz	r3, 8021bd6 <__swbuf_r+0x12>
 8021bd2:	f001 f805 	bl	8022be0 <__sinit>
 8021bd6:	4b21      	ldr	r3, [pc, #132]	; (8021c5c <__swbuf_r+0x98>)
 8021bd8:	429c      	cmp	r4, r3
 8021bda:	d12a      	bne.n	8021c32 <__swbuf_r+0x6e>
 8021bdc:	686c      	ldr	r4, [r5, #4]
 8021bde:	69a3      	ldr	r3, [r4, #24]
 8021be0:	60a3      	str	r3, [r4, #8]
 8021be2:	89a3      	ldrh	r3, [r4, #12]
 8021be4:	071a      	lsls	r2, r3, #28
 8021be6:	d52e      	bpl.n	8021c46 <__swbuf_r+0x82>
 8021be8:	6923      	ldr	r3, [r4, #16]
 8021bea:	b363      	cbz	r3, 8021c46 <__swbuf_r+0x82>
 8021bec:	6923      	ldr	r3, [r4, #16]
 8021bee:	6820      	ldr	r0, [r4, #0]
 8021bf0:	1ac0      	subs	r0, r0, r3
 8021bf2:	6963      	ldr	r3, [r4, #20]
 8021bf4:	b2f6      	uxtb	r6, r6
 8021bf6:	4283      	cmp	r3, r0
 8021bf8:	4637      	mov	r7, r6
 8021bfa:	dc04      	bgt.n	8021c06 <__swbuf_r+0x42>
 8021bfc:	4621      	mov	r1, r4
 8021bfe:	4628      	mov	r0, r5
 8021c00:	f000 ff84 	bl	8022b0c <_fflush_r>
 8021c04:	bb28      	cbnz	r0, 8021c52 <__swbuf_r+0x8e>
 8021c06:	68a3      	ldr	r3, [r4, #8]
 8021c08:	3b01      	subs	r3, #1
 8021c0a:	60a3      	str	r3, [r4, #8]
 8021c0c:	6823      	ldr	r3, [r4, #0]
 8021c0e:	1c5a      	adds	r2, r3, #1
 8021c10:	6022      	str	r2, [r4, #0]
 8021c12:	701e      	strb	r6, [r3, #0]
 8021c14:	6963      	ldr	r3, [r4, #20]
 8021c16:	3001      	adds	r0, #1
 8021c18:	4283      	cmp	r3, r0
 8021c1a:	d004      	beq.n	8021c26 <__swbuf_r+0x62>
 8021c1c:	89a3      	ldrh	r3, [r4, #12]
 8021c1e:	07db      	lsls	r3, r3, #31
 8021c20:	d519      	bpl.n	8021c56 <__swbuf_r+0x92>
 8021c22:	2e0a      	cmp	r6, #10
 8021c24:	d117      	bne.n	8021c56 <__swbuf_r+0x92>
 8021c26:	4621      	mov	r1, r4
 8021c28:	4628      	mov	r0, r5
 8021c2a:	f000 ff6f 	bl	8022b0c <_fflush_r>
 8021c2e:	b190      	cbz	r0, 8021c56 <__swbuf_r+0x92>
 8021c30:	e00f      	b.n	8021c52 <__swbuf_r+0x8e>
 8021c32:	4b0b      	ldr	r3, [pc, #44]	; (8021c60 <__swbuf_r+0x9c>)
 8021c34:	429c      	cmp	r4, r3
 8021c36:	d101      	bne.n	8021c3c <__swbuf_r+0x78>
 8021c38:	68ac      	ldr	r4, [r5, #8]
 8021c3a:	e7d0      	b.n	8021bde <__swbuf_r+0x1a>
 8021c3c:	4b09      	ldr	r3, [pc, #36]	; (8021c64 <__swbuf_r+0xa0>)
 8021c3e:	429c      	cmp	r4, r3
 8021c40:	bf08      	it	eq
 8021c42:	68ec      	ldreq	r4, [r5, #12]
 8021c44:	e7cb      	b.n	8021bde <__swbuf_r+0x1a>
 8021c46:	4621      	mov	r1, r4
 8021c48:	4628      	mov	r0, r5
 8021c4a:	f000 f82d 	bl	8021ca8 <__swsetup_r>
 8021c4e:	2800      	cmp	r0, #0
 8021c50:	d0cc      	beq.n	8021bec <__swbuf_r+0x28>
 8021c52:	f04f 37ff 	mov.w	r7, #4294967295
 8021c56:	4638      	mov	r0, r7
 8021c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c5a:	bf00      	nop
 8021c5c:	0803fc24 	.word	0x0803fc24
 8021c60:	0803fc44 	.word	0x0803fc44
 8021c64:	0803fc04 	.word	0x0803fc04

08021c68 <__ascii_wctomb>:
 8021c68:	b149      	cbz	r1, 8021c7e <__ascii_wctomb+0x16>
 8021c6a:	2aff      	cmp	r2, #255	; 0xff
 8021c6c:	bf85      	ittet	hi
 8021c6e:	238a      	movhi	r3, #138	; 0x8a
 8021c70:	6003      	strhi	r3, [r0, #0]
 8021c72:	700a      	strbls	r2, [r1, #0]
 8021c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8021c78:	bf98      	it	ls
 8021c7a:	2001      	movls	r0, #1
 8021c7c:	4770      	bx	lr
 8021c7e:	4608      	mov	r0, r1
 8021c80:	4770      	bx	lr
	...

08021c84 <_write_r>:
 8021c84:	b538      	push	{r3, r4, r5, lr}
 8021c86:	4c07      	ldr	r4, [pc, #28]	; (8021ca4 <_write_r+0x20>)
 8021c88:	4605      	mov	r5, r0
 8021c8a:	4608      	mov	r0, r1
 8021c8c:	4611      	mov	r1, r2
 8021c8e:	2200      	movs	r2, #0
 8021c90:	6022      	str	r2, [r4, #0]
 8021c92:	461a      	mov	r2, r3
 8021c94:	f7df ff88 	bl	8001ba8 <_write>
 8021c98:	1c43      	adds	r3, r0, #1
 8021c9a:	d102      	bne.n	8021ca2 <_write_r+0x1e>
 8021c9c:	6823      	ldr	r3, [r4, #0]
 8021c9e:	b103      	cbz	r3, 8021ca2 <_write_r+0x1e>
 8021ca0:	602b      	str	r3, [r5, #0]
 8021ca2:	bd38      	pop	{r3, r4, r5, pc}
 8021ca4:	2003634c 	.word	0x2003634c

08021ca8 <__swsetup_r>:
 8021ca8:	4b32      	ldr	r3, [pc, #200]	; (8021d74 <__swsetup_r+0xcc>)
 8021caa:	b570      	push	{r4, r5, r6, lr}
 8021cac:	681d      	ldr	r5, [r3, #0]
 8021cae:	4606      	mov	r6, r0
 8021cb0:	460c      	mov	r4, r1
 8021cb2:	b125      	cbz	r5, 8021cbe <__swsetup_r+0x16>
 8021cb4:	69ab      	ldr	r3, [r5, #24]
 8021cb6:	b913      	cbnz	r3, 8021cbe <__swsetup_r+0x16>
 8021cb8:	4628      	mov	r0, r5
 8021cba:	f000 ff91 	bl	8022be0 <__sinit>
 8021cbe:	4b2e      	ldr	r3, [pc, #184]	; (8021d78 <__swsetup_r+0xd0>)
 8021cc0:	429c      	cmp	r4, r3
 8021cc2:	d10f      	bne.n	8021ce4 <__swsetup_r+0x3c>
 8021cc4:	686c      	ldr	r4, [r5, #4]
 8021cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cca:	b29a      	uxth	r2, r3
 8021ccc:	0715      	lsls	r5, r2, #28
 8021cce:	d42c      	bmi.n	8021d2a <__swsetup_r+0x82>
 8021cd0:	06d0      	lsls	r0, r2, #27
 8021cd2:	d411      	bmi.n	8021cf8 <__swsetup_r+0x50>
 8021cd4:	2209      	movs	r2, #9
 8021cd6:	6032      	str	r2, [r6, #0]
 8021cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021cdc:	81a3      	strh	r3, [r4, #12]
 8021cde:	f04f 30ff 	mov.w	r0, #4294967295
 8021ce2:	e03e      	b.n	8021d62 <__swsetup_r+0xba>
 8021ce4:	4b25      	ldr	r3, [pc, #148]	; (8021d7c <__swsetup_r+0xd4>)
 8021ce6:	429c      	cmp	r4, r3
 8021ce8:	d101      	bne.n	8021cee <__swsetup_r+0x46>
 8021cea:	68ac      	ldr	r4, [r5, #8]
 8021cec:	e7eb      	b.n	8021cc6 <__swsetup_r+0x1e>
 8021cee:	4b24      	ldr	r3, [pc, #144]	; (8021d80 <__swsetup_r+0xd8>)
 8021cf0:	429c      	cmp	r4, r3
 8021cf2:	bf08      	it	eq
 8021cf4:	68ec      	ldreq	r4, [r5, #12]
 8021cf6:	e7e6      	b.n	8021cc6 <__swsetup_r+0x1e>
 8021cf8:	0751      	lsls	r1, r2, #29
 8021cfa:	d512      	bpl.n	8021d22 <__swsetup_r+0x7a>
 8021cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021cfe:	b141      	cbz	r1, 8021d12 <__swsetup_r+0x6a>
 8021d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d04:	4299      	cmp	r1, r3
 8021d06:	d002      	beq.n	8021d0e <__swsetup_r+0x66>
 8021d08:	4630      	mov	r0, r6
 8021d0a:	f7fd ff63 	bl	801fbd4 <_free_r>
 8021d0e:	2300      	movs	r3, #0
 8021d10:	6363      	str	r3, [r4, #52]	; 0x34
 8021d12:	89a3      	ldrh	r3, [r4, #12]
 8021d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021d18:	81a3      	strh	r3, [r4, #12]
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	6063      	str	r3, [r4, #4]
 8021d1e:	6923      	ldr	r3, [r4, #16]
 8021d20:	6023      	str	r3, [r4, #0]
 8021d22:	89a3      	ldrh	r3, [r4, #12]
 8021d24:	f043 0308 	orr.w	r3, r3, #8
 8021d28:	81a3      	strh	r3, [r4, #12]
 8021d2a:	6923      	ldr	r3, [r4, #16]
 8021d2c:	b94b      	cbnz	r3, 8021d42 <__swsetup_r+0x9a>
 8021d2e:	89a3      	ldrh	r3, [r4, #12]
 8021d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021d38:	d003      	beq.n	8021d42 <__swsetup_r+0x9a>
 8021d3a:	4621      	mov	r1, r4
 8021d3c:	4630      	mov	r0, r6
 8021d3e:	f001 f917 	bl	8022f70 <__smakebuf_r>
 8021d42:	89a2      	ldrh	r2, [r4, #12]
 8021d44:	f012 0301 	ands.w	r3, r2, #1
 8021d48:	d00c      	beq.n	8021d64 <__swsetup_r+0xbc>
 8021d4a:	2300      	movs	r3, #0
 8021d4c:	60a3      	str	r3, [r4, #8]
 8021d4e:	6963      	ldr	r3, [r4, #20]
 8021d50:	425b      	negs	r3, r3
 8021d52:	61a3      	str	r3, [r4, #24]
 8021d54:	6923      	ldr	r3, [r4, #16]
 8021d56:	b953      	cbnz	r3, 8021d6e <__swsetup_r+0xc6>
 8021d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021d60:	d1ba      	bne.n	8021cd8 <__swsetup_r+0x30>
 8021d62:	bd70      	pop	{r4, r5, r6, pc}
 8021d64:	0792      	lsls	r2, r2, #30
 8021d66:	bf58      	it	pl
 8021d68:	6963      	ldrpl	r3, [r4, #20]
 8021d6a:	60a3      	str	r3, [r4, #8]
 8021d6c:	e7f2      	b.n	8021d54 <__swsetup_r+0xac>
 8021d6e:	2000      	movs	r0, #0
 8021d70:	e7f7      	b.n	8021d62 <__swsetup_r+0xba>
 8021d72:	bf00      	nop
 8021d74:	20000454 	.word	0x20000454
 8021d78:	0803fc24 	.word	0x0803fc24
 8021d7c:	0803fc44 	.word	0x0803fc44
 8021d80:	0803fc04 	.word	0x0803fc04

08021d84 <abs>:
 8021d84:	2800      	cmp	r0, #0
 8021d86:	bfb8      	it	lt
 8021d88:	4240      	neglt	r0, r0
 8021d8a:	4770      	bx	lr

08021d8c <asctime>:
 8021d8c:	4b09      	ldr	r3, [pc, #36]	; (8021db4 <asctime+0x28>)
 8021d8e:	b570      	push	{r4, r5, r6, lr}
 8021d90:	681c      	ldr	r4, [r3, #0]
 8021d92:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8021d94:	4606      	mov	r6, r0
 8021d96:	b93d      	cbnz	r5, 8021da8 <asctime+0x1c>
 8021d98:	201a      	movs	r0, #26
 8021d9a:	f7fd fc29 	bl	801f5f0 <malloc>
 8021d9e:	221a      	movs	r2, #26
 8021da0:	6420      	str	r0, [r4, #64]	; 0x40
 8021da2:	4629      	mov	r1, r5
 8021da4:	f7fd fc79 	bl	801f69a <memset>
 8021da8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021daa:	4630      	mov	r0, r6
 8021dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021db0:	f000 b802 	b.w	8021db8 <asctime_r>
 8021db4:	20000454 	.word	0x20000454

08021db8 <asctime_r>:
 8021db8:	b510      	push	{r4, lr}
 8021dba:	460c      	mov	r4, r1
 8021dbc:	6941      	ldr	r1, [r0, #20]
 8021dbe:	6903      	ldr	r3, [r0, #16]
 8021dc0:	6982      	ldr	r2, [r0, #24]
 8021dc2:	b086      	sub	sp, #24
 8021dc4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8021dc8:	9104      	str	r1, [sp, #16]
 8021dca:	6801      	ldr	r1, [r0, #0]
 8021dcc:	9103      	str	r1, [sp, #12]
 8021dce:	6841      	ldr	r1, [r0, #4]
 8021dd0:	9102      	str	r1, [sp, #8]
 8021dd2:	6881      	ldr	r1, [r0, #8]
 8021dd4:	9101      	str	r1, [sp, #4]
 8021dd6:	68c1      	ldr	r1, [r0, #12]
 8021dd8:	9100      	str	r1, [sp, #0]
 8021dda:	4907      	ldr	r1, [pc, #28]	; (8021df8 <asctime_r+0x40>)
 8021ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021de0:	440b      	add	r3, r1
 8021de2:	4906      	ldr	r1, [pc, #24]	; (8021dfc <asctime_r+0x44>)
 8021de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021de8:	440a      	add	r2, r1
 8021dea:	4620      	mov	r0, r4
 8021dec:	4904      	ldr	r1, [pc, #16]	; (8021e00 <asctime_r+0x48>)
 8021dee:	f7fe fd2b 	bl	8020848 <siprintf>
 8021df2:	4620      	mov	r0, r4
 8021df4:	b006      	add	sp, #24
 8021df6:	bd10      	pop	{r4, pc}
 8021df8:	0803fad0 	.word	0x0803fad0
 8021dfc:	0803fabb 	.word	0x0803fabb
 8021e00:	0803fa9b 	.word	0x0803fa9b

08021e04 <_close_r>:
 8021e04:	b538      	push	{r3, r4, r5, lr}
 8021e06:	4c06      	ldr	r4, [pc, #24]	; (8021e20 <_close_r+0x1c>)
 8021e08:	2300      	movs	r3, #0
 8021e0a:	4605      	mov	r5, r0
 8021e0c:	4608      	mov	r0, r1
 8021e0e:	6023      	str	r3, [r4, #0]
 8021e10:	f7e2 fcb2 	bl	8004778 <_close>
 8021e14:	1c43      	adds	r3, r0, #1
 8021e16:	d102      	bne.n	8021e1e <_close_r+0x1a>
 8021e18:	6823      	ldr	r3, [r4, #0]
 8021e1a:	b103      	cbz	r3, 8021e1e <_close_r+0x1a>
 8021e1c:	602b      	str	r3, [r5, #0]
 8021e1e:	bd38      	pop	{r3, r4, r5, pc}
 8021e20:	2003634c 	.word	0x2003634c

08021e24 <div>:
 8021e24:	2900      	cmp	r1, #0
 8021e26:	b510      	push	{r4, lr}
 8021e28:	fb91 f4f2 	sdiv	r4, r1, r2
 8021e2c:	fb02 1314 	mls	r3, r2, r4, r1
 8021e30:	db06      	blt.n	8021e40 <div+0x1c>
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	da01      	bge.n	8021e3a <div+0x16>
 8021e36:	3401      	adds	r4, #1
 8021e38:	1a9b      	subs	r3, r3, r2
 8021e3a:	e9c0 4300 	strd	r4, r3, [r0]
 8021e3e:	bd10      	pop	{r4, pc}
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	bfc4      	itt	gt
 8021e44:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8021e48:	189b      	addgt	r3, r3, r2
 8021e4a:	e7f6      	b.n	8021e3a <div+0x16>

08021e4c <quorem>:
 8021e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e50:	6903      	ldr	r3, [r0, #16]
 8021e52:	690c      	ldr	r4, [r1, #16]
 8021e54:	42a3      	cmp	r3, r4
 8021e56:	4680      	mov	r8, r0
 8021e58:	f2c0 8082 	blt.w	8021f60 <quorem+0x114>
 8021e5c:	3c01      	subs	r4, #1
 8021e5e:	f101 0714 	add.w	r7, r1, #20
 8021e62:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8021e66:	f100 0614 	add.w	r6, r0, #20
 8021e6a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8021e6e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8021e72:	eb06 030c 	add.w	r3, r6, ip
 8021e76:	3501      	adds	r5, #1
 8021e78:	eb07 090c 	add.w	r9, r7, ip
 8021e7c:	9301      	str	r3, [sp, #4]
 8021e7e:	fbb0 f5f5 	udiv	r5, r0, r5
 8021e82:	b395      	cbz	r5, 8021eea <quorem+0x9e>
 8021e84:	f04f 0a00 	mov.w	sl, #0
 8021e88:	4638      	mov	r0, r7
 8021e8a:	46b6      	mov	lr, r6
 8021e8c:	46d3      	mov	fp, sl
 8021e8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8021e92:	b293      	uxth	r3, r2
 8021e94:	fb05 a303 	mla	r3, r5, r3, sl
 8021e98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021e9c:	b29b      	uxth	r3, r3
 8021e9e:	ebab 0303 	sub.w	r3, fp, r3
 8021ea2:	0c12      	lsrs	r2, r2, #16
 8021ea4:	f8de b000 	ldr.w	fp, [lr]
 8021ea8:	fb05 a202 	mla	r2, r5, r2, sl
 8021eac:	fa13 f38b 	uxtah	r3, r3, fp
 8021eb0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8021eb4:	fa1f fb82 	uxth.w	fp, r2
 8021eb8:	f8de 2000 	ldr.w	r2, [lr]
 8021ebc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8021ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021ec4:	b29b      	uxth	r3, r3
 8021ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021eca:	4581      	cmp	r9, r0
 8021ecc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8021ed0:	f84e 3b04 	str.w	r3, [lr], #4
 8021ed4:	d2db      	bcs.n	8021e8e <quorem+0x42>
 8021ed6:	f856 300c 	ldr.w	r3, [r6, ip]
 8021eda:	b933      	cbnz	r3, 8021eea <quorem+0x9e>
 8021edc:	9b01      	ldr	r3, [sp, #4]
 8021ede:	3b04      	subs	r3, #4
 8021ee0:	429e      	cmp	r6, r3
 8021ee2:	461a      	mov	r2, r3
 8021ee4:	d330      	bcc.n	8021f48 <quorem+0xfc>
 8021ee6:	f8c8 4010 	str.w	r4, [r8, #16]
 8021eea:	4640      	mov	r0, r8
 8021eec:	f001 fa98 	bl	8023420 <__mcmp>
 8021ef0:	2800      	cmp	r0, #0
 8021ef2:	db25      	blt.n	8021f40 <quorem+0xf4>
 8021ef4:	3501      	adds	r5, #1
 8021ef6:	4630      	mov	r0, r6
 8021ef8:	f04f 0c00 	mov.w	ip, #0
 8021efc:	f857 2b04 	ldr.w	r2, [r7], #4
 8021f00:	f8d0 e000 	ldr.w	lr, [r0]
 8021f04:	b293      	uxth	r3, r2
 8021f06:	ebac 0303 	sub.w	r3, ip, r3
 8021f0a:	0c12      	lsrs	r2, r2, #16
 8021f0c:	fa13 f38e 	uxtah	r3, r3, lr
 8021f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021f18:	b29b      	uxth	r3, r3
 8021f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021f1e:	45b9      	cmp	r9, r7
 8021f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021f24:	f840 3b04 	str.w	r3, [r0], #4
 8021f28:	d2e8      	bcs.n	8021efc <quorem+0xb0>
 8021f2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8021f2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8021f32:	b92a      	cbnz	r2, 8021f40 <quorem+0xf4>
 8021f34:	3b04      	subs	r3, #4
 8021f36:	429e      	cmp	r6, r3
 8021f38:	461a      	mov	r2, r3
 8021f3a:	d30b      	bcc.n	8021f54 <quorem+0x108>
 8021f3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8021f40:	4628      	mov	r0, r5
 8021f42:	b003      	add	sp, #12
 8021f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f48:	6812      	ldr	r2, [r2, #0]
 8021f4a:	3b04      	subs	r3, #4
 8021f4c:	2a00      	cmp	r2, #0
 8021f4e:	d1ca      	bne.n	8021ee6 <quorem+0x9a>
 8021f50:	3c01      	subs	r4, #1
 8021f52:	e7c5      	b.n	8021ee0 <quorem+0x94>
 8021f54:	6812      	ldr	r2, [r2, #0]
 8021f56:	3b04      	subs	r3, #4
 8021f58:	2a00      	cmp	r2, #0
 8021f5a:	d1ef      	bne.n	8021f3c <quorem+0xf0>
 8021f5c:	3c01      	subs	r4, #1
 8021f5e:	e7ea      	b.n	8021f36 <quorem+0xea>
 8021f60:	2000      	movs	r0, #0
 8021f62:	e7ee      	b.n	8021f42 <quorem+0xf6>
 8021f64:	0000      	movs	r0, r0
	...

08021f68 <_dtoa_r>:
 8021f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f6c:	ec57 6b10 	vmov	r6, r7, d0
 8021f70:	b095      	sub	sp, #84	; 0x54
 8021f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021f74:	9108      	str	r1, [sp, #32]
 8021f76:	4604      	mov	r4, r0
 8021f78:	920a      	str	r2, [sp, #40]	; 0x28
 8021f7a:	9311      	str	r3, [sp, #68]	; 0x44
 8021f7c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8021f80:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8021f84:	b93d      	cbnz	r5, 8021f96 <_dtoa_r+0x2e>
 8021f86:	2010      	movs	r0, #16
 8021f88:	f7fd fb32 	bl	801f5f0 <malloc>
 8021f8c:	6260      	str	r0, [r4, #36]	; 0x24
 8021f8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021f92:	6005      	str	r5, [r0, #0]
 8021f94:	60c5      	str	r5, [r0, #12]
 8021f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021f98:	6819      	ldr	r1, [r3, #0]
 8021f9a:	b151      	cbz	r1, 8021fb2 <_dtoa_r+0x4a>
 8021f9c:	685a      	ldr	r2, [r3, #4]
 8021f9e:	604a      	str	r2, [r1, #4]
 8021fa0:	2301      	movs	r3, #1
 8021fa2:	4093      	lsls	r3, r2
 8021fa4:	608b      	str	r3, [r1, #8]
 8021fa6:	4620      	mov	r0, r4
 8021fa8:	f001 f858 	bl	802305c <_Bfree>
 8021fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021fae:	2200      	movs	r2, #0
 8021fb0:	601a      	str	r2, [r3, #0]
 8021fb2:	1e3b      	subs	r3, r7, #0
 8021fb4:	bfb9      	ittee	lt
 8021fb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021fba:	9303      	strlt	r3, [sp, #12]
 8021fbc:	2300      	movge	r3, #0
 8021fbe:	f8c8 3000 	strge.w	r3, [r8]
 8021fc2:	9d03      	ldr	r5, [sp, #12]
 8021fc4:	4bac      	ldr	r3, [pc, #688]	; (8022278 <_dtoa_r+0x310>)
 8021fc6:	bfbc      	itt	lt
 8021fc8:	2201      	movlt	r2, #1
 8021fca:	f8c8 2000 	strlt.w	r2, [r8]
 8021fce:	43ab      	bics	r3, r5
 8021fd0:	d11b      	bne.n	802200a <_dtoa_r+0xa2>
 8021fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021fd4:	f242 730f 	movw	r3, #9999	; 0x270f
 8021fd8:	6013      	str	r3, [r2, #0]
 8021fda:	9b02      	ldr	r3, [sp, #8]
 8021fdc:	b923      	cbnz	r3, 8021fe8 <_dtoa_r+0x80>
 8021fde:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8021fe2:	2d00      	cmp	r5, #0
 8021fe4:	f000 84dd 	beq.w	80229a2 <_dtoa_r+0xa3a>
 8021fe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021fea:	b953      	cbnz	r3, 8022002 <_dtoa_r+0x9a>
 8021fec:	4ba3      	ldr	r3, [pc, #652]	; (802227c <_dtoa_r+0x314>)
 8021fee:	e020      	b.n	8022032 <_dtoa_r+0xca>
 8021ff0:	4ba3      	ldr	r3, [pc, #652]	; (8022280 <_dtoa_r+0x318>)
 8021ff2:	9304      	str	r3, [sp, #16]
 8021ff4:	3308      	adds	r3, #8
 8021ff6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021ff8:	6013      	str	r3, [r2, #0]
 8021ffa:	9804      	ldr	r0, [sp, #16]
 8021ffc:	b015      	add	sp, #84	; 0x54
 8021ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022002:	4b9e      	ldr	r3, [pc, #632]	; (802227c <_dtoa_r+0x314>)
 8022004:	9304      	str	r3, [sp, #16]
 8022006:	3303      	adds	r3, #3
 8022008:	e7f5      	b.n	8021ff6 <_dtoa_r+0x8e>
 802200a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802200e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022016:	ed8d 7b04 	vstr	d7, [sp, #16]
 802201a:	d10c      	bne.n	8022036 <_dtoa_r+0xce>
 802201c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802201e:	2301      	movs	r3, #1
 8022020:	6013      	str	r3, [r2, #0]
 8022022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022024:	2b00      	cmp	r3, #0
 8022026:	f000 84b9 	beq.w	802299c <_dtoa_r+0xa34>
 802202a:	4b96      	ldr	r3, [pc, #600]	; (8022284 <_dtoa_r+0x31c>)
 802202c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802202e:	6013      	str	r3, [r2, #0]
 8022030:	3b01      	subs	r3, #1
 8022032:	9304      	str	r3, [sp, #16]
 8022034:	e7e1      	b.n	8021ffa <_dtoa_r+0x92>
 8022036:	a913      	add	r1, sp, #76	; 0x4c
 8022038:	aa12      	add	r2, sp, #72	; 0x48
 802203a:	ed9d 0b04 	vldr	d0, [sp, #16]
 802203e:	4620      	mov	r0, r4
 8022040:	f001 fa65 	bl	802350e <__d2b>
 8022044:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8022048:	9001      	str	r0, [sp, #4]
 802204a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802204c:	2e00      	cmp	r6, #0
 802204e:	d046      	beq.n	80220de <_dtoa_r+0x176>
 8022050:	9805      	ldr	r0, [sp, #20]
 8022052:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8022056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802205a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 802205e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022062:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8022066:	2700      	movs	r7, #0
 8022068:	ee07 aa90 	vmov	s15, sl
 802206c:	ec43 2b16 	vmov	d6, r2, r3
 8022070:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022074:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8022260 <_dtoa_r+0x2f8>
 8022078:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802207c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8022080:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8022268 <_dtoa_r+0x300>
 8022084:	eea7 6b04 	vfma.f64	d6, d7, d4
 8022088:	eeb0 7b46 	vmov.f64	d7, d6
 802208c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8022270 <_dtoa_r+0x308>
 8022090:	eea5 7b06 	vfma.f64	d7, d5, d6
 8022094:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8022098:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220a0:	ee16 ba90 	vmov	fp, s13
 80220a4:	d508      	bpl.n	80220b8 <_dtoa_r+0x150>
 80220a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80220aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80220ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b2:	bf18      	it	ne
 80220b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80220b8:	f1bb 0f16 	cmp.w	fp, #22
 80220bc:	d834      	bhi.n	8022128 <_dtoa_r+0x1c0>
 80220be:	4b72      	ldr	r3, [pc, #456]	; (8022288 <_dtoa_r+0x320>)
 80220c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80220c4:	ed93 7b00 	vldr	d7, [r3]
 80220c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80220cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80220d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d4:	dd01      	ble.n	80220da <_dtoa_r+0x172>
 80220d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80220da:	2300      	movs	r3, #0
 80220dc:	e025      	b.n	802212a <_dtoa_r+0x1c2>
 80220de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80220e0:	eb01 0a03 	add.w	sl, r1, r3
 80220e4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80220e8:	2b20      	cmp	r3, #32
 80220ea:	dd17      	ble.n	802211c <_dtoa_r+0x1b4>
 80220ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80220f0:	9a02      	ldr	r2, [sp, #8]
 80220f2:	409d      	lsls	r5, r3
 80220f4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80220f8:	fa22 f303 	lsr.w	r3, r2, r3
 80220fc:	432b      	orrs	r3, r5
 80220fe:	ee07 3a90 	vmov	s15, r3
 8022102:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022106:	f10a 3aff 	add.w	sl, sl, #4294967295
 802210a:	ed8d 7b04 	vstr	d7, [sp, #16]
 802210e:	9805      	ldr	r0, [sp, #20]
 8022110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022114:	2701      	movs	r7, #1
 8022116:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 802211a:	e7a5      	b.n	8022068 <_dtoa_r+0x100>
 802211c:	9a02      	ldr	r2, [sp, #8]
 802211e:	f1c3 0320 	rsb	r3, r3, #32
 8022122:	fa02 f303 	lsl.w	r3, r2, r3
 8022126:	e7ea      	b.n	80220fe <_dtoa_r+0x196>
 8022128:	2301      	movs	r3, #1
 802212a:	eba1 0a0a 	sub.w	sl, r1, sl
 802212e:	9310      	str	r3, [sp, #64]	; 0x40
 8022130:	f1ba 0301 	subs.w	r3, sl, #1
 8022134:	9307      	str	r3, [sp, #28]
 8022136:	bf43      	ittte	mi
 8022138:	2300      	movmi	r3, #0
 802213a:	f1ca 0a01 	rsbmi	sl, sl, #1
 802213e:	9307      	strmi	r3, [sp, #28]
 8022140:	f04f 0a00 	movpl.w	sl, #0
 8022144:	f1bb 0f00 	cmp.w	fp, #0
 8022148:	db19      	blt.n	802217e <_dtoa_r+0x216>
 802214a:	9b07      	ldr	r3, [sp, #28]
 802214c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8022150:	445b      	add	r3, fp
 8022152:	9307      	str	r3, [sp, #28]
 8022154:	f04f 0800 	mov.w	r8, #0
 8022158:	9b08      	ldr	r3, [sp, #32]
 802215a:	2b09      	cmp	r3, #9
 802215c:	d866      	bhi.n	802222c <_dtoa_r+0x2c4>
 802215e:	2b05      	cmp	r3, #5
 8022160:	bfc4      	itt	gt
 8022162:	3b04      	subgt	r3, #4
 8022164:	9308      	strgt	r3, [sp, #32]
 8022166:	9b08      	ldr	r3, [sp, #32]
 8022168:	f1a3 0302 	sub.w	r3, r3, #2
 802216c:	bfcc      	ite	gt
 802216e:	2500      	movgt	r5, #0
 8022170:	2501      	movle	r5, #1
 8022172:	2b03      	cmp	r3, #3
 8022174:	d866      	bhi.n	8022244 <_dtoa_r+0x2dc>
 8022176:	e8df f003 	tbb	[pc, r3]
 802217a:	5755      	.short	0x5755
 802217c:	4909      	.short	0x4909
 802217e:	2300      	movs	r3, #0
 8022180:	ebaa 0a0b 	sub.w	sl, sl, fp
 8022184:	f1cb 0800 	rsb	r8, fp, #0
 8022188:	930b      	str	r3, [sp, #44]	; 0x2c
 802218a:	e7e5      	b.n	8022158 <_dtoa_r+0x1f0>
 802218c:	2301      	movs	r3, #1
 802218e:	9309      	str	r3, [sp, #36]	; 0x24
 8022190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022192:	2b00      	cmp	r3, #0
 8022194:	dd59      	ble.n	802224a <_dtoa_r+0x2e2>
 8022196:	9306      	str	r3, [sp, #24]
 8022198:	4699      	mov	r9, r3
 802219a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802219c:	2200      	movs	r2, #0
 802219e:	6072      	str	r2, [r6, #4]
 80221a0:	2204      	movs	r2, #4
 80221a2:	f102 0014 	add.w	r0, r2, #20
 80221a6:	4298      	cmp	r0, r3
 80221a8:	6871      	ldr	r1, [r6, #4]
 80221aa:	d953      	bls.n	8022254 <_dtoa_r+0x2ec>
 80221ac:	4620      	mov	r0, r4
 80221ae:	f000 ff21 	bl	8022ff4 <_Balloc>
 80221b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80221b4:	6030      	str	r0, [r6, #0]
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	9304      	str	r3, [sp, #16]
 80221ba:	f1b9 0f0e 	cmp.w	r9, #14
 80221be:	f200 80c2 	bhi.w	8022346 <_dtoa_r+0x3de>
 80221c2:	2d00      	cmp	r5, #0
 80221c4:	f000 80bf 	beq.w	8022346 <_dtoa_r+0x3de>
 80221c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80221cc:	f1bb 0f00 	cmp.w	fp, #0
 80221d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80221d4:	f340 80e6 	ble.w	80223a4 <_dtoa_r+0x43c>
 80221d8:	4a2b      	ldr	r2, [pc, #172]	; (8022288 <_dtoa_r+0x320>)
 80221da:	f00b 030f 	and.w	r3, fp, #15
 80221de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80221e2:	ed93 7b00 	vldr	d7, [r3]
 80221e6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80221ea:	06da      	lsls	r2, r3, #27
 80221ec:	f140 80d8 	bpl.w	80223a0 <_dtoa_r+0x438>
 80221f0:	4a26      	ldr	r2, [pc, #152]	; (802228c <_dtoa_r+0x324>)
 80221f2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80221f6:	ed92 6b08 	vldr	d6, [r2, #32]
 80221fa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80221fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022202:	f003 030f 	and.w	r3, r3, #15
 8022206:	2203      	movs	r2, #3
 8022208:	4920      	ldr	r1, [pc, #128]	; (802228c <_dtoa_r+0x324>)
 802220a:	e04a      	b.n	80222a2 <_dtoa_r+0x33a>
 802220c:	2301      	movs	r3, #1
 802220e:	9309      	str	r3, [sp, #36]	; 0x24
 8022210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022212:	445b      	add	r3, fp
 8022214:	f103 0901 	add.w	r9, r3, #1
 8022218:	9306      	str	r3, [sp, #24]
 802221a:	464b      	mov	r3, r9
 802221c:	2b01      	cmp	r3, #1
 802221e:	bfb8      	it	lt
 8022220:	2301      	movlt	r3, #1
 8022222:	e7ba      	b.n	802219a <_dtoa_r+0x232>
 8022224:	2300      	movs	r3, #0
 8022226:	e7b2      	b.n	802218e <_dtoa_r+0x226>
 8022228:	2300      	movs	r3, #0
 802222a:	e7f0      	b.n	802220e <_dtoa_r+0x2a6>
 802222c:	2501      	movs	r5, #1
 802222e:	2300      	movs	r3, #0
 8022230:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8022234:	f04f 33ff 	mov.w	r3, #4294967295
 8022238:	9306      	str	r3, [sp, #24]
 802223a:	4699      	mov	r9, r3
 802223c:	2200      	movs	r2, #0
 802223e:	2312      	movs	r3, #18
 8022240:	920a      	str	r2, [sp, #40]	; 0x28
 8022242:	e7aa      	b.n	802219a <_dtoa_r+0x232>
 8022244:	2301      	movs	r3, #1
 8022246:	9309      	str	r3, [sp, #36]	; 0x24
 8022248:	e7f4      	b.n	8022234 <_dtoa_r+0x2cc>
 802224a:	2301      	movs	r3, #1
 802224c:	9306      	str	r3, [sp, #24]
 802224e:	4699      	mov	r9, r3
 8022250:	461a      	mov	r2, r3
 8022252:	e7f5      	b.n	8022240 <_dtoa_r+0x2d8>
 8022254:	3101      	adds	r1, #1
 8022256:	6071      	str	r1, [r6, #4]
 8022258:	0052      	lsls	r2, r2, #1
 802225a:	e7a2      	b.n	80221a2 <_dtoa_r+0x23a>
 802225c:	f3af 8000 	nop.w
 8022260:	636f4361 	.word	0x636f4361
 8022264:	3fd287a7 	.word	0x3fd287a7
 8022268:	8b60c8b3 	.word	0x8b60c8b3
 802226c:	3fc68a28 	.word	0x3fc68a28
 8022270:	509f79fb 	.word	0x509f79fb
 8022274:	3fd34413 	.word	0x3fd34413
 8022278:	7ff00000 	.word	0x7ff00000
 802227c:	0803fbfe 	.word	0x0803fbfe
 8022280:	0803fbf5 	.word	0x0803fbf5
 8022284:	0803fd8c 	.word	0x0803fd8c
 8022288:	0803fc90 	.word	0x0803fc90
 802228c:	0803fc68 	.word	0x0803fc68
 8022290:	07de      	lsls	r6, r3, #31
 8022292:	d504      	bpl.n	802229e <_dtoa_r+0x336>
 8022294:	ed91 6b00 	vldr	d6, [r1]
 8022298:	3201      	adds	r2, #1
 802229a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802229e:	105b      	asrs	r3, r3, #1
 80222a0:	3108      	adds	r1, #8
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d1f4      	bne.n	8022290 <_dtoa_r+0x328>
 80222a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80222aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80222ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80222b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222b4:	2b00      	cmp	r3, #0
 80222b6:	f000 80a7 	beq.w	8022408 <_dtoa_r+0x4a0>
 80222ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80222be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80222c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80222c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222ca:	f140 809d 	bpl.w	8022408 <_dtoa_r+0x4a0>
 80222ce:	f1b9 0f00 	cmp.w	r9, #0
 80222d2:	f000 8099 	beq.w	8022408 <_dtoa_r+0x4a0>
 80222d6:	9b06      	ldr	r3, [sp, #24]
 80222d8:	2b00      	cmp	r3, #0
 80222da:	dd30      	ble.n	802233e <_dtoa_r+0x3d6>
 80222dc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80222e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80222e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80222e8:	9d06      	ldr	r5, [sp, #24]
 80222ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80222ee:	3201      	adds	r2, #1
 80222f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80222f4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80222f8:	ee07 2a90 	vmov	s15, r2
 80222fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022300:	eea7 5b06 	vfma.f64	d5, d7, d6
 8022304:	ed8d 5b02 	vstr	d5, [sp, #8]
 8022308:	9a03      	ldr	r2, [sp, #12]
 802230a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802230e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8022312:	2d00      	cmp	r5, #0
 8022314:	d17b      	bne.n	802240e <_dtoa_r+0x4a6>
 8022316:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802231a:	ee36 6b47 	vsub.f64	d6, d6, d7
 802231e:	ec41 0b17 	vmov	d7, r0, r1
 8022322:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802232a:	f300 8253 	bgt.w	80227d4 <_dtoa_r+0x86c>
 802232e:	eeb1 7b47 	vneg.f64	d7, d7
 8022332:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802233a:	f100 8249 	bmi.w	80227d0 <_dtoa_r+0x868>
 802233e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022348:	2b00      	cmp	r3, #0
 802234a:	f2c0 8119 	blt.w	8022580 <_dtoa_r+0x618>
 802234e:	f1bb 0f0e 	cmp.w	fp, #14
 8022352:	f300 8115 	bgt.w	8022580 <_dtoa_r+0x618>
 8022356:	4bc3      	ldr	r3, [pc, #780]	; (8022664 <_dtoa_r+0x6fc>)
 8022358:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802235c:	ed93 6b00 	vldr	d6, [r3]
 8022360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022362:	2b00      	cmp	r3, #0
 8022364:	f280 80ba 	bge.w	80224dc <_dtoa_r+0x574>
 8022368:	f1b9 0f00 	cmp.w	r9, #0
 802236c:	f300 80b6 	bgt.w	80224dc <_dtoa_r+0x574>
 8022370:	f040 822d 	bne.w	80227ce <_dtoa_r+0x866>
 8022374:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8022378:	ee26 6b07 	vmul.f64	d6, d6, d7
 802237c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022380:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8022384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022388:	464d      	mov	r5, r9
 802238a:	464f      	mov	r7, r9
 802238c:	f280 8204 	bge.w	8022798 <_dtoa_r+0x830>
 8022390:	9b04      	ldr	r3, [sp, #16]
 8022392:	9a04      	ldr	r2, [sp, #16]
 8022394:	1c5e      	adds	r6, r3, #1
 8022396:	2331      	movs	r3, #49	; 0x31
 8022398:	7013      	strb	r3, [r2, #0]
 802239a:	f10b 0b01 	add.w	fp, fp, #1
 802239e:	e1ff      	b.n	80227a0 <_dtoa_r+0x838>
 80223a0:	2202      	movs	r2, #2
 80223a2:	e731      	b.n	8022208 <_dtoa_r+0x2a0>
 80223a4:	d02e      	beq.n	8022404 <_dtoa_r+0x49c>
 80223a6:	f1cb 0300 	rsb	r3, fp, #0
 80223aa:	4aae      	ldr	r2, [pc, #696]	; (8022664 <_dtoa_r+0x6fc>)
 80223ac:	f003 010f 	and.w	r1, r3, #15
 80223b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80223b4:	ed92 7b00 	vldr	d7, [r2]
 80223b8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80223bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80223c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80223c4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80223c8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80223cc:	49a6      	ldr	r1, [pc, #664]	; (8022668 <_dtoa_r+0x700>)
 80223ce:	111b      	asrs	r3, r3, #4
 80223d0:	2000      	movs	r0, #0
 80223d2:	2202      	movs	r2, #2
 80223d4:	b93b      	cbnz	r3, 80223e6 <_dtoa_r+0x47e>
 80223d6:	2800      	cmp	r0, #0
 80223d8:	f43f af6b 	beq.w	80222b2 <_dtoa_r+0x34a>
 80223dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80223e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80223e4:	e765      	b.n	80222b2 <_dtoa_r+0x34a>
 80223e6:	07dd      	lsls	r5, r3, #31
 80223e8:	d509      	bpl.n	80223fe <_dtoa_r+0x496>
 80223ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80223ee:	ed91 7b00 	vldr	d7, [r1]
 80223f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80223f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80223fa:	3201      	adds	r2, #1
 80223fc:	2001      	movs	r0, #1
 80223fe:	105b      	asrs	r3, r3, #1
 8022400:	3108      	adds	r1, #8
 8022402:	e7e7      	b.n	80223d4 <_dtoa_r+0x46c>
 8022404:	2202      	movs	r2, #2
 8022406:	e754      	b.n	80222b2 <_dtoa_r+0x34a>
 8022408:	465b      	mov	r3, fp
 802240a:	464d      	mov	r5, r9
 802240c:	e770      	b.n	80222f0 <_dtoa_r+0x388>
 802240e:	4a95      	ldr	r2, [pc, #596]	; (8022664 <_dtoa_r+0x6fc>)
 8022410:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8022414:	ed12 4b02 	vldr	d4, [r2, #-8]
 8022418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802241a:	ec41 0b17 	vmov	d7, r0, r1
 802241e:	b35a      	cbz	r2, 8022478 <_dtoa_r+0x510>
 8022420:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8022424:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8022428:	9e04      	ldr	r6, [sp, #16]
 802242a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802242e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022432:	ee35 7b47 	vsub.f64	d7, d5, d7
 8022436:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802243a:	ee14 2a90 	vmov	r2, s9
 802243e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8022442:	3230      	adds	r2, #48	; 0x30
 8022444:	ee36 6b45 	vsub.f64	d6, d6, d5
 8022448:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802244c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022450:	f806 2b01 	strb.w	r2, [r6], #1
 8022454:	d43b      	bmi.n	80224ce <_dtoa_r+0x566>
 8022456:	ee32 5b46 	vsub.f64	d5, d2, d6
 802245a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022462:	d472      	bmi.n	802254a <_dtoa_r+0x5e2>
 8022464:	9a04      	ldr	r2, [sp, #16]
 8022466:	1ab2      	subs	r2, r6, r2
 8022468:	4295      	cmp	r5, r2
 802246a:	f77f af68 	ble.w	802233e <_dtoa_r+0x3d6>
 802246e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8022472:	ee26 6b03 	vmul.f64	d6, d6, d3
 8022476:	e7de      	b.n	8022436 <_dtoa_r+0x4ce>
 8022478:	9a04      	ldr	r2, [sp, #16]
 802247a:	ee24 7b07 	vmul.f64	d7, d4, d7
 802247e:	1956      	adds	r6, r2, r5
 8022480:	4611      	mov	r1, r2
 8022482:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8022486:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802248a:	ee14 2a90 	vmov	r2, s9
 802248e:	3230      	adds	r2, #48	; 0x30
 8022490:	f801 2b01 	strb.w	r2, [r1], #1
 8022494:	42b1      	cmp	r1, r6
 8022496:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802249a:	ee36 6b45 	vsub.f64	d6, d6, d5
 802249e:	d11a      	bne.n	80224d6 <_dtoa_r+0x56e>
 80224a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80224a4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80224a8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80224ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224b0:	dc4b      	bgt.n	802254a <_dtoa_r+0x5e2>
 80224b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80224b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80224ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224be:	f57f af3e 	bpl.w	802233e <_dtoa_r+0x3d6>
 80224c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80224c6:	2a30      	cmp	r2, #48	; 0x30
 80224c8:	f106 31ff 	add.w	r1, r6, #4294967295
 80224cc:	d001      	beq.n	80224d2 <_dtoa_r+0x56a>
 80224ce:	469b      	mov	fp, r3
 80224d0:	e02a      	b.n	8022528 <_dtoa_r+0x5c0>
 80224d2:	460e      	mov	r6, r1
 80224d4:	e7f5      	b.n	80224c2 <_dtoa_r+0x55a>
 80224d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80224da:	e7d4      	b.n	8022486 <_dtoa_r+0x51e>
 80224dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80224e0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80224e4:	9e04      	ldr	r6, [sp, #16]
 80224e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80224ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80224ee:	ee15 3a10 	vmov	r3, s10
 80224f2:	3330      	adds	r3, #48	; 0x30
 80224f4:	f806 3b01 	strb.w	r3, [r6], #1
 80224f8:	9b04      	ldr	r3, [sp, #16]
 80224fa:	1af3      	subs	r3, r6, r3
 80224fc:	4599      	cmp	r9, r3
 80224fe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8022502:	eea3 7b46 	vfms.f64	d7, d3, d6
 8022506:	d133      	bne.n	8022570 <_dtoa_r+0x608>
 8022508:	ee37 7b07 	vadd.f64	d7, d7, d7
 802250c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8022510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022514:	dc18      	bgt.n	8022548 <_dtoa_r+0x5e0>
 8022516:	eeb4 7b46 	vcmp.f64	d7, d6
 802251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802251e:	d103      	bne.n	8022528 <_dtoa_r+0x5c0>
 8022520:	ee15 3a10 	vmov	r3, s10
 8022524:	07db      	lsls	r3, r3, #31
 8022526:	d40f      	bmi.n	8022548 <_dtoa_r+0x5e0>
 8022528:	9901      	ldr	r1, [sp, #4]
 802252a:	4620      	mov	r0, r4
 802252c:	f000 fd96 	bl	802305c <_Bfree>
 8022530:	2300      	movs	r3, #0
 8022532:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022534:	7033      	strb	r3, [r6, #0]
 8022536:	f10b 0301 	add.w	r3, fp, #1
 802253a:	6013      	str	r3, [r2, #0]
 802253c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802253e:	2b00      	cmp	r3, #0
 8022540:	f43f ad5b 	beq.w	8021ffa <_dtoa_r+0x92>
 8022544:	601e      	str	r6, [r3, #0]
 8022546:	e558      	b.n	8021ffa <_dtoa_r+0x92>
 8022548:	465b      	mov	r3, fp
 802254a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802254e:	2939      	cmp	r1, #57	; 0x39
 8022550:	f106 32ff 	add.w	r2, r6, #4294967295
 8022554:	d106      	bne.n	8022564 <_dtoa_r+0x5fc>
 8022556:	9904      	ldr	r1, [sp, #16]
 8022558:	4291      	cmp	r1, r2
 802255a:	d107      	bne.n	802256c <_dtoa_r+0x604>
 802255c:	2230      	movs	r2, #48	; 0x30
 802255e:	700a      	strb	r2, [r1, #0]
 8022560:	3301      	adds	r3, #1
 8022562:	460a      	mov	r2, r1
 8022564:	7811      	ldrb	r1, [r2, #0]
 8022566:	3101      	adds	r1, #1
 8022568:	7011      	strb	r1, [r2, #0]
 802256a:	e7b0      	b.n	80224ce <_dtoa_r+0x566>
 802256c:	4616      	mov	r6, r2
 802256e:	e7ec      	b.n	802254a <_dtoa_r+0x5e2>
 8022570:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022574:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802257c:	d1b3      	bne.n	80224e6 <_dtoa_r+0x57e>
 802257e:	e7d3      	b.n	8022528 <_dtoa_r+0x5c0>
 8022580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022582:	2a00      	cmp	r2, #0
 8022584:	f000 808d 	beq.w	80226a2 <_dtoa_r+0x73a>
 8022588:	9a08      	ldr	r2, [sp, #32]
 802258a:	2a01      	cmp	r2, #1
 802258c:	dc72      	bgt.n	8022674 <_dtoa_r+0x70c>
 802258e:	2f00      	cmp	r7, #0
 8022590:	d06c      	beq.n	802266c <_dtoa_r+0x704>
 8022592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022596:	4645      	mov	r5, r8
 8022598:	4656      	mov	r6, sl
 802259a:	9a07      	ldr	r2, [sp, #28]
 802259c:	2101      	movs	r1, #1
 802259e:	441a      	add	r2, r3
 80225a0:	4620      	mov	r0, r4
 80225a2:	449a      	add	sl, r3
 80225a4:	9207      	str	r2, [sp, #28]
 80225a6:	f000 fdf9 	bl	802319c <__i2b>
 80225aa:	4607      	mov	r7, r0
 80225ac:	2e00      	cmp	r6, #0
 80225ae:	dd0b      	ble.n	80225c8 <_dtoa_r+0x660>
 80225b0:	9b07      	ldr	r3, [sp, #28]
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	dd08      	ble.n	80225c8 <_dtoa_r+0x660>
 80225b6:	42b3      	cmp	r3, r6
 80225b8:	9a07      	ldr	r2, [sp, #28]
 80225ba:	bfa8      	it	ge
 80225bc:	4633      	movge	r3, r6
 80225be:	ebaa 0a03 	sub.w	sl, sl, r3
 80225c2:	1af6      	subs	r6, r6, r3
 80225c4:	1ad3      	subs	r3, r2, r3
 80225c6:	9307      	str	r3, [sp, #28]
 80225c8:	f1b8 0f00 	cmp.w	r8, #0
 80225cc:	d01d      	beq.n	802260a <_dtoa_r+0x6a2>
 80225ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225d0:	2b00      	cmp	r3, #0
 80225d2:	d06a      	beq.n	80226aa <_dtoa_r+0x742>
 80225d4:	b18d      	cbz	r5, 80225fa <_dtoa_r+0x692>
 80225d6:	4639      	mov	r1, r7
 80225d8:	462a      	mov	r2, r5
 80225da:	4620      	mov	r0, r4
 80225dc:	f000 fe7e 	bl	80232dc <__pow5mult>
 80225e0:	9a01      	ldr	r2, [sp, #4]
 80225e2:	4601      	mov	r1, r0
 80225e4:	4607      	mov	r7, r0
 80225e6:	4620      	mov	r0, r4
 80225e8:	f000 fde1 	bl	80231ae <__multiply>
 80225ec:	9901      	ldr	r1, [sp, #4]
 80225ee:	900c      	str	r0, [sp, #48]	; 0x30
 80225f0:	4620      	mov	r0, r4
 80225f2:	f000 fd33 	bl	802305c <_Bfree>
 80225f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225f8:	9301      	str	r3, [sp, #4]
 80225fa:	ebb8 0205 	subs.w	r2, r8, r5
 80225fe:	d004      	beq.n	802260a <_dtoa_r+0x6a2>
 8022600:	9901      	ldr	r1, [sp, #4]
 8022602:	4620      	mov	r0, r4
 8022604:	f000 fe6a 	bl	80232dc <__pow5mult>
 8022608:	9001      	str	r0, [sp, #4]
 802260a:	2101      	movs	r1, #1
 802260c:	4620      	mov	r0, r4
 802260e:	f000 fdc5 	bl	802319c <__i2b>
 8022612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022614:	4605      	mov	r5, r0
 8022616:	2b00      	cmp	r3, #0
 8022618:	f000 81ca 	beq.w	80229b0 <_dtoa_r+0xa48>
 802261c:	461a      	mov	r2, r3
 802261e:	4601      	mov	r1, r0
 8022620:	4620      	mov	r0, r4
 8022622:	f000 fe5b 	bl	80232dc <__pow5mult>
 8022626:	9b08      	ldr	r3, [sp, #32]
 8022628:	2b01      	cmp	r3, #1
 802262a:	4605      	mov	r5, r0
 802262c:	dc44      	bgt.n	80226b8 <_dtoa_r+0x750>
 802262e:	9b02      	ldr	r3, [sp, #8]
 8022630:	2b00      	cmp	r3, #0
 8022632:	d13c      	bne.n	80226ae <_dtoa_r+0x746>
 8022634:	9b03      	ldr	r3, [sp, #12]
 8022636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802263a:	2b00      	cmp	r3, #0
 802263c:	d137      	bne.n	80226ae <_dtoa_r+0x746>
 802263e:	9b03      	ldr	r3, [sp, #12]
 8022640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022644:	0d1b      	lsrs	r3, r3, #20
 8022646:	051b      	lsls	r3, r3, #20
 8022648:	2b00      	cmp	r3, #0
 802264a:	d033      	beq.n	80226b4 <_dtoa_r+0x74c>
 802264c:	9b07      	ldr	r3, [sp, #28]
 802264e:	3301      	adds	r3, #1
 8022650:	f10a 0a01 	add.w	sl, sl, #1
 8022654:	9307      	str	r3, [sp, #28]
 8022656:	f04f 0801 	mov.w	r8, #1
 802265a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802265c:	bb73      	cbnz	r3, 80226bc <_dtoa_r+0x754>
 802265e:	2001      	movs	r0, #1
 8022660:	e034      	b.n	80226cc <_dtoa_r+0x764>
 8022662:	bf00      	nop
 8022664:	0803fc90 	.word	0x0803fc90
 8022668:	0803fc68 	.word	0x0803fc68
 802266c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802266e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8022672:	e790      	b.n	8022596 <_dtoa_r+0x62e>
 8022674:	f109 35ff 	add.w	r5, r9, #4294967295
 8022678:	45a8      	cmp	r8, r5
 802267a:	bfbf      	itttt	lt
 802267c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 802267e:	eba5 0808 	sublt.w	r8, r5, r8
 8022682:	4443      	addlt	r3, r8
 8022684:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8022686:	bfb6      	itet	lt
 8022688:	46a8      	movlt	r8, r5
 802268a:	eba8 0505 	subge.w	r5, r8, r5
 802268e:	2500      	movlt	r5, #0
 8022690:	f1b9 0f00 	cmp.w	r9, #0
 8022694:	bfb9      	ittee	lt
 8022696:	ebaa 0609 	sublt.w	r6, sl, r9
 802269a:	2300      	movlt	r3, #0
 802269c:	4656      	movge	r6, sl
 802269e:	464b      	movge	r3, r9
 80226a0:	e77b      	b.n	802259a <_dtoa_r+0x632>
 80226a2:	4645      	mov	r5, r8
 80226a4:	4656      	mov	r6, sl
 80226a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80226a8:	e780      	b.n	80225ac <_dtoa_r+0x644>
 80226aa:	4642      	mov	r2, r8
 80226ac:	e7a8      	b.n	8022600 <_dtoa_r+0x698>
 80226ae:	f04f 0800 	mov.w	r8, #0
 80226b2:	e7d2      	b.n	802265a <_dtoa_r+0x6f2>
 80226b4:	4698      	mov	r8, r3
 80226b6:	e7d0      	b.n	802265a <_dtoa_r+0x6f2>
 80226b8:	f04f 0800 	mov.w	r8, #0
 80226bc:	692b      	ldr	r3, [r5, #16]
 80226be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80226c2:	6918      	ldr	r0, [r3, #16]
 80226c4:	f000 fd1c 	bl	8023100 <__hi0bits>
 80226c8:	f1c0 0020 	rsb	r0, r0, #32
 80226cc:	9b07      	ldr	r3, [sp, #28]
 80226ce:	4418      	add	r0, r3
 80226d0:	f010 001f 	ands.w	r0, r0, #31
 80226d4:	d047      	beq.n	8022766 <_dtoa_r+0x7fe>
 80226d6:	f1c0 0320 	rsb	r3, r0, #32
 80226da:	2b04      	cmp	r3, #4
 80226dc:	dd3b      	ble.n	8022756 <_dtoa_r+0x7ee>
 80226de:	9b07      	ldr	r3, [sp, #28]
 80226e0:	f1c0 001c 	rsb	r0, r0, #28
 80226e4:	4482      	add	sl, r0
 80226e6:	4406      	add	r6, r0
 80226e8:	4403      	add	r3, r0
 80226ea:	9307      	str	r3, [sp, #28]
 80226ec:	f1ba 0f00 	cmp.w	sl, #0
 80226f0:	dd05      	ble.n	80226fe <_dtoa_r+0x796>
 80226f2:	4652      	mov	r2, sl
 80226f4:	9901      	ldr	r1, [sp, #4]
 80226f6:	4620      	mov	r0, r4
 80226f8:	f000 fe3e 	bl	8023378 <__lshift>
 80226fc:	9001      	str	r0, [sp, #4]
 80226fe:	9b07      	ldr	r3, [sp, #28]
 8022700:	2b00      	cmp	r3, #0
 8022702:	dd05      	ble.n	8022710 <_dtoa_r+0x7a8>
 8022704:	4629      	mov	r1, r5
 8022706:	461a      	mov	r2, r3
 8022708:	4620      	mov	r0, r4
 802270a:	f000 fe35 	bl	8023378 <__lshift>
 802270e:	4605      	mov	r5, r0
 8022710:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022712:	b353      	cbz	r3, 802276a <_dtoa_r+0x802>
 8022714:	4629      	mov	r1, r5
 8022716:	9801      	ldr	r0, [sp, #4]
 8022718:	f000 fe82 	bl	8023420 <__mcmp>
 802271c:	2800      	cmp	r0, #0
 802271e:	da24      	bge.n	802276a <_dtoa_r+0x802>
 8022720:	2300      	movs	r3, #0
 8022722:	220a      	movs	r2, #10
 8022724:	9901      	ldr	r1, [sp, #4]
 8022726:	4620      	mov	r0, r4
 8022728:	f000 fcaf 	bl	802308a <__multadd>
 802272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802272e:	9001      	str	r0, [sp, #4]
 8022730:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022734:	2b00      	cmp	r3, #0
 8022736:	f000 8142 	beq.w	80229be <_dtoa_r+0xa56>
 802273a:	2300      	movs	r3, #0
 802273c:	4639      	mov	r1, r7
 802273e:	220a      	movs	r2, #10
 8022740:	4620      	mov	r0, r4
 8022742:	f000 fca2 	bl	802308a <__multadd>
 8022746:	9b06      	ldr	r3, [sp, #24]
 8022748:	2b00      	cmp	r3, #0
 802274a:	4607      	mov	r7, r0
 802274c:	dc4b      	bgt.n	80227e6 <_dtoa_r+0x87e>
 802274e:	9b08      	ldr	r3, [sp, #32]
 8022750:	2b02      	cmp	r3, #2
 8022752:	dd48      	ble.n	80227e6 <_dtoa_r+0x87e>
 8022754:	e011      	b.n	802277a <_dtoa_r+0x812>
 8022756:	d0c9      	beq.n	80226ec <_dtoa_r+0x784>
 8022758:	9a07      	ldr	r2, [sp, #28]
 802275a:	331c      	adds	r3, #28
 802275c:	441a      	add	r2, r3
 802275e:	449a      	add	sl, r3
 8022760:	441e      	add	r6, r3
 8022762:	4613      	mov	r3, r2
 8022764:	e7c1      	b.n	80226ea <_dtoa_r+0x782>
 8022766:	4603      	mov	r3, r0
 8022768:	e7f6      	b.n	8022758 <_dtoa_r+0x7f0>
 802276a:	f1b9 0f00 	cmp.w	r9, #0
 802276e:	dc34      	bgt.n	80227da <_dtoa_r+0x872>
 8022770:	9b08      	ldr	r3, [sp, #32]
 8022772:	2b02      	cmp	r3, #2
 8022774:	dd31      	ble.n	80227da <_dtoa_r+0x872>
 8022776:	f8cd 9018 	str.w	r9, [sp, #24]
 802277a:	9b06      	ldr	r3, [sp, #24]
 802277c:	b963      	cbnz	r3, 8022798 <_dtoa_r+0x830>
 802277e:	4629      	mov	r1, r5
 8022780:	2205      	movs	r2, #5
 8022782:	4620      	mov	r0, r4
 8022784:	f000 fc81 	bl	802308a <__multadd>
 8022788:	4601      	mov	r1, r0
 802278a:	4605      	mov	r5, r0
 802278c:	9801      	ldr	r0, [sp, #4]
 802278e:	f000 fe47 	bl	8023420 <__mcmp>
 8022792:	2800      	cmp	r0, #0
 8022794:	f73f adfc 	bgt.w	8022390 <_dtoa_r+0x428>
 8022798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802279a:	9e04      	ldr	r6, [sp, #16]
 802279c:	ea6f 0b03 	mvn.w	fp, r3
 80227a0:	f04f 0900 	mov.w	r9, #0
 80227a4:	4629      	mov	r1, r5
 80227a6:	4620      	mov	r0, r4
 80227a8:	f000 fc58 	bl	802305c <_Bfree>
 80227ac:	2f00      	cmp	r7, #0
 80227ae:	f43f aebb 	beq.w	8022528 <_dtoa_r+0x5c0>
 80227b2:	f1b9 0f00 	cmp.w	r9, #0
 80227b6:	d005      	beq.n	80227c4 <_dtoa_r+0x85c>
 80227b8:	45b9      	cmp	r9, r7
 80227ba:	d003      	beq.n	80227c4 <_dtoa_r+0x85c>
 80227bc:	4649      	mov	r1, r9
 80227be:	4620      	mov	r0, r4
 80227c0:	f000 fc4c 	bl	802305c <_Bfree>
 80227c4:	4639      	mov	r1, r7
 80227c6:	4620      	mov	r0, r4
 80227c8:	f000 fc48 	bl	802305c <_Bfree>
 80227cc:	e6ac      	b.n	8022528 <_dtoa_r+0x5c0>
 80227ce:	2500      	movs	r5, #0
 80227d0:	462f      	mov	r7, r5
 80227d2:	e7e1      	b.n	8022798 <_dtoa_r+0x830>
 80227d4:	469b      	mov	fp, r3
 80227d6:	462f      	mov	r7, r5
 80227d8:	e5da      	b.n	8022390 <_dtoa_r+0x428>
 80227da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227dc:	f8cd 9018 	str.w	r9, [sp, #24]
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	f000 80f3 	beq.w	80229cc <_dtoa_r+0xa64>
 80227e6:	2e00      	cmp	r6, #0
 80227e8:	dd05      	ble.n	80227f6 <_dtoa_r+0x88e>
 80227ea:	4639      	mov	r1, r7
 80227ec:	4632      	mov	r2, r6
 80227ee:	4620      	mov	r0, r4
 80227f0:	f000 fdc2 	bl	8023378 <__lshift>
 80227f4:	4607      	mov	r7, r0
 80227f6:	f1b8 0f00 	cmp.w	r8, #0
 80227fa:	d04c      	beq.n	8022896 <_dtoa_r+0x92e>
 80227fc:	6879      	ldr	r1, [r7, #4]
 80227fe:	4620      	mov	r0, r4
 8022800:	f000 fbf8 	bl	8022ff4 <_Balloc>
 8022804:	693a      	ldr	r2, [r7, #16]
 8022806:	3202      	adds	r2, #2
 8022808:	4606      	mov	r6, r0
 802280a:	0092      	lsls	r2, r2, #2
 802280c:	f107 010c 	add.w	r1, r7, #12
 8022810:	300c      	adds	r0, #12
 8022812:	f7fc ff1e 	bl	801f652 <memcpy>
 8022816:	2201      	movs	r2, #1
 8022818:	4631      	mov	r1, r6
 802281a:	4620      	mov	r0, r4
 802281c:	f000 fdac 	bl	8023378 <__lshift>
 8022820:	9b02      	ldr	r3, [sp, #8]
 8022822:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022826:	f003 0301 	and.w	r3, r3, #1
 802282a:	46b9      	mov	r9, r7
 802282c:	9307      	str	r3, [sp, #28]
 802282e:	4607      	mov	r7, r0
 8022830:	4629      	mov	r1, r5
 8022832:	9801      	ldr	r0, [sp, #4]
 8022834:	f7ff fb0a 	bl	8021e4c <quorem>
 8022838:	4649      	mov	r1, r9
 802283a:	4606      	mov	r6, r0
 802283c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8022840:	9801      	ldr	r0, [sp, #4]
 8022842:	f000 fded 	bl	8023420 <__mcmp>
 8022846:	463a      	mov	r2, r7
 8022848:	9002      	str	r0, [sp, #8]
 802284a:	4629      	mov	r1, r5
 802284c:	4620      	mov	r0, r4
 802284e:	f000 fe01 	bl	8023454 <__mdiff>
 8022852:	68c3      	ldr	r3, [r0, #12]
 8022854:	4602      	mov	r2, r0
 8022856:	bb03      	cbnz	r3, 802289a <_dtoa_r+0x932>
 8022858:	4601      	mov	r1, r0
 802285a:	9009      	str	r0, [sp, #36]	; 0x24
 802285c:	9801      	ldr	r0, [sp, #4]
 802285e:	f000 fddf 	bl	8023420 <__mcmp>
 8022862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022864:	4603      	mov	r3, r0
 8022866:	4611      	mov	r1, r2
 8022868:	4620      	mov	r0, r4
 802286a:	9309      	str	r3, [sp, #36]	; 0x24
 802286c:	f000 fbf6 	bl	802305c <_Bfree>
 8022870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022872:	b9a3      	cbnz	r3, 802289e <_dtoa_r+0x936>
 8022874:	9a08      	ldr	r2, [sp, #32]
 8022876:	b992      	cbnz	r2, 802289e <_dtoa_r+0x936>
 8022878:	9a07      	ldr	r2, [sp, #28]
 802287a:	b982      	cbnz	r2, 802289e <_dtoa_r+0x936>
 802287c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8022880:	d029      	beq.n	80228d6 <_dtoa_r+0x96e>
 8022882:	9b02      	ldr	r3, [sp, #8]
 8022884:	2b00      	cmp	r3, #0
 8022886:	dd01      	ble.n	802288c <_dtoa_r+0x924>
 8022888:	f106 0831 	add.w	r8, r6, #49	; 0x31
 802288c:	f10a 0601 	add.w	r6, sl, #1
 8022890:	f88a 8000 	strb.w	r8, [sl]
 8022894:	e786      	b.n	80227a4 <_dtoa_r+0x83c>
 8022896:	4638      	mov	r0, r7
 8022898:	e7c2      	b.n	8022820 <_dtoa_r+0x8b8>
 802289a:	2301      	movs	r3, #1
 802289c:	e7e3      	b.n	8022866 <_dtoa_r+0x8fe>
 802289e:	9a02      	ldr	r2, [sp, #8]
 80228a0:	2a00      	cmp	r2, #0
 80228a2:	db04      	blt.n	80228ae <_dtoa_r+0x946>
 80228a4:	d124      	bne.n	80228f0 <_dtoa_r+0x988>
 80228a6:	9a08      	ldr	r2, [sp, #32]
 80228a8:	bb12      	cbnz	r2, 80228f0 <_dtoa_r+0x988>
 80228aa:	9a07      	ldr	r2, [sp, #28]
 80228ac:	bb02      	cbnz	r2, 80228f0 <_dtoa_r+0x988>
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	ddec      	ble.n	802288c <_dtoa_r+0x924>
 80228b2:	2201      	movs	r2, #1
 80228b4:	9901      	ldr	r1, [sp, #4]
 80228b6:	4620      	mov	r0, r4
 80228b8:	f000 fd5e 	bl	8023378 <__lshift>
 80228bc:	4629      	mov	r1, r5
 80228be:	9001      	str	r0, [sp, #4]
 80228c0:	f000 fdae 	bl	8023420 <__mcmp>
 80228c4:	2800      	cmp	r0, #0
 80228c6:	dc03      	bgt.n	80228d0 <_dtoa_r+0x968>
 80228c8:	d1e0      	bne.n	802288c <_dtoa_r+0x924>
 80228ca:	f018 0f01 	tst.w	r8, #1
 80228ce:	d0dd      	beq.n	802288c <_dtoa_r+0x924>
 80228d0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80228d4:	d1d8      	bne.n	8022888 <_dtoa_r+0x920>
 80228d6:	2339      	movs	r3, #57	; 0x39
 80228d8:	f10a 0601 	add.w	r6, sl, #1
 80228dc:	f88a 3000 	strb.w	r3, [sl]
 80228e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80228e4:	2b39      	cmp	r3, #57	; 0x39
 80228e6:	f106 32ff 	add.w	r2, r6, #4294967295
 80228ea:	d04c      	beq.n	8022986 <_dtoa_r+0xa1e>
 80228ec:	3301      	adds	r3, #1
 80228ee:	e051      	b.n	8022994 <_dtoa_r+0xa2c>
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	f10a 0601 	add.w	r6, sl, #1
 80228f6:	dd05      	ble.n	8022904 <_dtoa_r+0x99c>
 80228f8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80228fc:	d0eb      	beq.n	80228d6 <_dtoa_r+0x96e>
 80228fe:	f108 0801 	add.w	r8, r8, #1
 8022902:	e7c5      	b.n	8022890 <_dtoa_r+0x928>
 8022904:	9b04      	ldr	r3, [sp, #16]
 8022906:	9a06      	ldr	r2, [sp, #24]
 8022908:	f806 8c01 	strb.w	r8, [r6, #-1]
 802290c:	1af3      	subs	r3, r6, r3
 802290e:	4293      	cmp	r3, r2
 8022910:	d021      	beq.n	8022956 <_dtoa_r+0x9ee>
 8022912:	2300      	movs	r3, #0
 8022914:	220a      	movs	r2, #10
 8022916:	9901      	ldr	r1, [sp, #4]
 8022918:	4620      	mov	r0, r4
 802291a:	f000 fbb6 	bl	802308a <__multadd>
 802291e:	45b9      	cmp	r9, r7
 8022920:	9001      	str	r0, [sp, #4]
 8022922:	f04f 0300 	mov.w	r3, #0
 8022926:	f04f 020a 	mov.w	r2, #10
 802292a:	4649      	mov	r1, r9
 802292c:	4620      	mov	r0, r4
 802292e:	d105      	bne.n	802293c <_dtoa_r+0x9d4>
 8022930:	f000 fbab 	bl	802308a <__multadd>
 8022934:	4681      	mov	r9, r0
 8022936:	4607      	mov	r7, r0
 8022938:	46b2      	mov	sl, r6
 802293a:	e779      	b.n	8022830 <_dtoa_r+0x8c8>
 802293c:	f000 fba5 	bl	802308a <__multadd>
 8022940:	4639      	mov	r1, r7
 8022942:	4681      	mov	r9, r0
 8022944:	2300      	movs	r3, #0
 8022946:	220a      	movs	r2, #10
 8022948:	4620      	mov	r0, r4
 802294a:	f000 fb9e 	bl	802308a <__multadd>
 802294e:	4607      	mov	r7, r0
 8022950:	e7f2      	b.n	8022938 <_dtoa_r+0x9d0>
 8022952:	f04f 0900 	mov.w	r9, #0
 8022956:	2201      	movs	r2, #1
 8022958:	9901      	ldr	r1, [sp, #4]
 802295a:	4620      	mov	r0, r4
 802295c:	f000 fd0c 	bl	8023378 <__lshift>
 8022960:	4629      	mov	r1, r5
 8022962:	9001      	str	r0, [sp, #4]
 8022964:	f000 fd5c 	bl	8023420 <__mcmp>
 8022968:	2800      	cmp	r0, #0
 802296a:	dcb9      	bgt.n	80228e0 <_dtoa_r+0x978>
 802296c:	d102      	bne.n	8022974 <_dtoa_r+0xa0c>
 802296e:	f018 0f01 	tst.w	r8, #1
 8022972:	d1b5      	bne.n	80228e0 <_dtoa_r+0x978>
 8022974:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022978:	2b30      	cmp	r3, #48	; 0x30
 802297a:	f106 32ff 	add.w	r2, r6, #4294967295
 802297e:	f47f af11 	bne.w	80227a4 <_dtoa_r+0x83c>
 8022982:	4616      	mov	r6, r2
 8022984:	e7f6      	b.n	8022974 <_dtoa_r+0xa0c>
 8022986:	9b04      	ldr	r3, [sp, #16]
 8022988:	4293      	cmp	r3, r2
 802298a:	d105      	bne.n	8022998 <_dtoa_r+0xa30>
 802298c:	9a04      	ldr	r2, [sp, #16]
 802298e:	f10b 0b01 	add.w	fp, fp, #1
 8022992:	2331      	movs	r3, #49	; 0x31
 8022994:	7013      	strb	r3, [r2, #0]
 8022996:	e705      	b.n	80227a4 <_dtoa_r+0x83c>
 8022998:	4616      	mov	r6, r2
 802299a:	e7a1      	b.n	80228e0 <_dtoa_r+0x978>
 802299c:	4b16      	ldr	r3, [pc, #88]	; (80229f8 <_dtoa_r+0xa90>)
 802299e:	f7ff bb48 	b.w	8022032 <_dtoa_r+0xca>
 80229a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	f47f ab23 	bne.w	8021ff0 <_dtoa_r+0x88>
 80229aa:	4b14      	ldr	r3, [pc, #80]	; (80229fc <_dtoa_r+0xa94>)
 80229ac:	f7ff bb41 	b.w	8022032 <_dtoa_r+0xca>
 80229b0:	9b08      	ldr	r3, [sp, #32]
 80229b2:	2b01      	cmp	r3, #1
 80229b4:	f77f ae3b 	ble.w	802262e <_dtoa_r+0x6c6>
 80229b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80229bc:	e64f      	b.n	802265e <_dtoa_r+0x6f6>
 80229be:	9b06      	ldr	r3, [sp, #24]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	dc03      	bgt.n	80229cc <_dtoa_r+0xa64>
 80229c4:	9b08      	ldr	r3, [sp, #32]
 80229c6:	2b02      	cmp	r3, #2
 80229c8:	f73f aed7 	bgt.w	802277a <_dtoa_r+0x812>
 80229cc:	9e04      	ldr	r6, [sp, #16]
 80229ce:	9801      	ldr	r0, [sp, #4]
 80229d0:	4629      	mov	r1, r5
 80229d2:	f7ff fa3b 	bl	8021e4c <quorem>
 80229d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80229da:	f806 8b01 	strb.w	r8, [r6], #1
 80229de:	9b04      	ldr	r3, [sp, #16]
 80229e0:	9a06      	ldr	r2, [sp, #24]
 80229e2:	1af3      	subs	r3, r6, r3
 80229e4:	429a      	cmp	r2, r3
 80229e6:	ddb4      	ble.n	8022952 <_dtoa_r+0x9ea>
 80229e8:	2300      	movs	r3, #0
 80229ea:	220a      	movs	r2, #10
 80229ec:	9901      	ldr	r1, [sp, #4]
 80229ee:	4620      	mov	r0, r4
 80229f0:	f000 fb4b 	bl	802308a <__multadd>
 80229f4:	9001      	str	r0, [sp, #4]
 80229f6:	e7ea      	b.n	80229ce <_dtoa_r+0xa66>
 80229f8:	0803fd8b 	.word	0x0803fd8b
 80229fc:	0803fbf5 	.word	0x0803fbf5

08022a00 <__sflush_r>:
 8022a00:	898a      	ldrh	r2, [r1, #12]
 8022a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a06:	4605      	mov	r5, r0
 8022a08:	0710      	lsls	r0, r2, #28
 8022a0a:	460c      	mov	r4, r1
 8022a0c:	d458      	bmi.n	8022ac0 <__sflush_r+0xc0>
 8022a0e:	684b      	ldr	r3, [r1, #4]
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	dc05      	bgt.n	8022a20 <__sflush_r+0x20>
 8022a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	dc02      	bgt.n	8022a20 <__sflush_r+0x20>
 8022a1a:	2000      	movs	r0, #0
 8022a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a22:	2e00      	cmp	r6, #0
 8022a24:	d0f9      	beq.n	8022a1a <__sflush_r+0x1a>
 8022a26:	2300      	movs	r3, #0
 8022a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022a2c:	682f      	ldr	r7, [r5, #0]
 8022a2e:	6a21      	ldr	r1, [r4, #32]
 8022a30:	602b      	str	r3, [r5, #0]
 8022a32:	d032      	beq.n	8022a9a <__sflush_r+0x9a>
 8022a34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022a36:	89a3      	ldrh	r3, [r4, #12]
 8022a38:	075a      	lsls	r2, r3, #29
 8022a3a:	d505      	bpl.n	8022a48 <__sflush_r+0x48>
 8022a3c:	6863      	ldr	r3, [r4, #4]
 8022a3e:	1ac0      	subs	r0, r0, r3
 8022a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022a42:	b10b      	cbz	r3, 8022a48 <__sflush_r+0x48>
 8022a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022a46:	1ac0      	subs	r0, r0, r3
 8022a48:	2300      	movs	r3, #0
 8022a4a:	4602      	mov	r2, r0
 8022a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a4e:	6a21      	ldr	r1, [r4, #32]
 8022a50:	4628      	mov	r0, r5
 8022a52:	47b0      	blx	r6
 8022a54:	1c43      	adds	r3, r0, #1
 8022a56:	89a3      	ldrh	r3, [r4, #12]
 8022a58:	d106      	bne.n	8022a68 <__sflush_r+0x68>
 8022a5a:	6829      	ldr	r1, [r5, #0]
 8022a5c:	291d      	cmp	r1, #29
 8022a5e:	d848      	bhi.n	8022af2 <__sflush_r+0xf2>
 8022a60:	4a29      	ldr	r2, [pc, #164]	; (8022b08 <__sflush_r+0x108>)
 8022a62:	40ca      	lsrs	r2, r1
 8022a64:	07d6      	lsls	r6, r2, #31
 8022a66:	d544      	bpl.n	8022af2 <__sflush_r+0xf2>
 8022a68:	2200      	movs	r2, #0
 8022a6a:	6062      	str	r2, [r4, #4]
 8022a6c:	04d9      	lsls	r1, r3, #19
 8022a6e:	6922      	ldr	r2, [r4, #16]
 8022a70:	6022      	str	r2, [r4, #0]
 8022a72:	d504      	bpl.n	8022a7e <__sflush_r+0x7e>
 8022a74:	1c42      	adds	r2, r0, #1
 8022a76:	d101      	bne.n	8022a7c <__sflush_r+0x7c>
 8022a78:	682b      	ldr	r3, [r5, #0]
 8022a7a:	b903      	cbnz	r3, 8022a7e <__sflush_r+0x7e>
 8022a7c:	6560      	str	r0, [r4, #84]	; 0x54
 8022a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a80:	602f      	str	r7, [r5, #0]
 8022a82:	2900      	cmp	r1, #0
 8022a84:	d0c9      	beq.n	8022a1a <__sflush_r+0x1a>
 8022a86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a8a:	4299      	cmp	r1, r3
 8022a8c:	d002      	beq.n	8022a94 <__sflush_r+0x94>
 8022a8e:	4628      	mov	r0, r5
 8022a90:	f7fd f8a0 	bl	801fbd4 <_free_r>
 8022a94:	2000      	movs	r0, #0
 8022a96:	6360      	str	r0, [r4, #52]	; 0x34
 8022a98:	e7c0      	b.n	8022a1c <__sflush_r+0x1c>
 8022a9a:	2301      	movs	r3, #1
 8022a9c:	4628      	mov	r0, r5
 8022a9e:	47b0      	blx	r6
 8022aa0:	1c41      	adds	r1, r0, #1
 8022aa2:	d1c8      	bne.n	8022a36 <__sflush_r+0x36>
 8022aa4:	682b      	ldr	r3, [r5, #0]
 8022aa6:	2b00      	cmp	r3, #0
 8022aa8:	d0c5      	beq.n	8022a36 <__sflush_r+0x36>
 8022aaa:	2b1d      	cmp	r3, #29
 8022aac:	d001      	beq.n	8022ab2 <__sflush_r+0xb2>
 8022aae:	2b16      	cmp	r3, #22
 8022ab0:	d101      	bne.n	8022ab6 <__sflush_r+0xb6>
 8022ab2:	602f      	str	r7, [r5, #0]
 8022ab4:	e7b1      	b.n	8022a1a <__sflush_r+0x1a>
 8022ab6:	89a3      	ldrh	r3, [r4, #12]
 8022ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022abc:	81a3      	strh	r3, [r4, #12]
 8022abe:	e7ad      	b.n	8022a1c <__sflush_r+0x1c>
 8022ac0:	690f      	ldr	r7, [r1, #16]
 8022ac2:	2f00      	cmp	r7, #0
 8022ac4:	d0a9      	beq.n	8022a1a <__sflush_r+0x1a>
 8022ac6:	0793      	lsls	r3, r2, #30
 8022ac8:	680e      	ldr	r6, [r1, #0]
 8022aca:	bf08      	it	eq
 8022acc:	694b      	ldreq	r3, [r1, #20]
 8022ace:	600f      	str	r7, [r1, #0]
 8022ad0:	bf18      	it	ne
 8022ad2:	2300      	movne	r3, #0
 8022ad4:	eba6 0807 	sub.w	r8, r6, r7
 8022ad8:	608b      	str	r3, [r1, #8]
 8022ada:	f1b8 0f00 	cmp.w	r8, #0
 8022ade:	dd9c      	ble.n	8022a1a <__sflush_r+0x1a>
 8022ae0:	4643      	mov	r3, r8
 8022ae2:	463a      	mov	r2, r7
 8022ae4:	6a21      	ldr	r1, [r4, #32]
 8022ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022ae8:	4628      	mov	r0, r5
 8022aea:	47b0      	blx	r6
 8022aec:	2800      	cmp	r0, #0
 8022aee:	dc06      	bgt.n	8022afe <__sflush_r+0xfe>
 8022af0:	89a3      	ldrh	r3, [r4, #12]
 8022af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022af6:	81a3      	strh	r3, [r4, #12]
 8022af8:	f04f 30ff 	mov.w	r0, #4294967295
 8022afc:	e78e      	b.n	8022a1c <__sflush_r+0x1c>
 8022afe:	4407      	add	r7, r0
 8022b00:	eba8 0800 	sub.w	r8, r8, r0
 8022b04:	e7e9      	b.n	8022ada <__sflush_r+0xda>
 8022b06:	bf00      	nop
 8022b08:	20400001 	.word	0x20400001

08022b0c <_fflush_r>:
 8022b0c:	b538      	push	{r3, r4, r5, lr}
 8022b0e:	690b      	ldr	r3, [r1, #16]
 8022b10:	4605      	mov	r5, r0
 8022b12:	460c      	mov	r4, r1
 8022b14:	b1db      	cbz	r3, 8022b4e <_fflush_r+0x42>
 8022b16:	b118      	cbz	r0, 8022b20 <_fflush_r+0x14>
 8022b18:	6983      	ldr	r3, [r0, #24]
 8022b1a:	b90b      	cbnz	r3, 8022b20 <_fflush_r+0x14>
 8022b1c:	f000 f860 	bl	8022be0 <__sinit>
 8022b20:	4b0c      	ldr	r3, [pc, #48]	; (8022b54 <_fflush_r+0x48>)
 8022b22:	429c      	cmp	r4, r3
 8022b24:	d109      	bne.n	8022b3a <_fflush_r+0x2e>
 8022b26:	686c      	ldr	r4, [r5, #4]
 8022b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b2c:	b17b      	cbz	r3, 8022b4e <_fflush_r+0x42>
 8022b2e:	4621      	mov	r1, r4
 8022b30:	4628      	mov	r0, r5
 8022b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b36:	f7ff bf63 	b.w	8022a00 <__sflush_r>
 8022b3a:	4b07      	ldr	r3, [pc, #28]	; (8022b58 <_fflush_r+0x4c>)
 8022b3c:	429c      	cmp	r4, r3
 8022b3e:	d101      	bne.n	8022b44 <_fflush_r+0x38>
 8022b40:	68ac      	ldr	r4, [r5, #8]
 8022b42:	e7f1      	b.n	8022b28 <_fflush_r+0x1c>
 8022b44:	4b05      	ldr	r3, [pc, #20]	; (8022b5c <_fflush_r+0x50>)
 8022b46:	429c      	cmp	r4, r3
 8022b48:	bf08      	it	eq
 8022b4a:	68ec      	ldreq	r4, [r5, #12]
 8022b4c:	e7ec      	b.n	8022b28 <_fflush_r+0x1c>
 8022b4e:	2000      	movs	r0, #0
 8022b50:	bd38      	pop	{r3, r4, r5, pc}
 8022b52:	bf00      	nop
 8022b54:	0803fc24 	.word	0x0803fc24
 8022b58:	0803fc44 	.word	0x0803fc44
 8022b5c:	0803fc04 	.word	0x0803fc04

08022b60 <std>:
 8022b60:	2300      	movs	r3, #0
 8022b62:	b510      	push	{r4, lr}
 8022b64:	4604      	mov	r4, r0
 8022b66:	e9c0 3300 	strd	r3, r3, [r0]
 8022b6a:	6083      	str	r3, [r0, #8]
 8022b6c:	8181      	strh	r1, [r0, #12]
 8022b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8022b70:	81c2      	strh	r2, [r0, #14]
 8022b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022b76:	6183      	str	r3, [r0, #24]
 8022b78:	4619      	mov	r1, r3
 8022b7a:	2208      	movs	r2, #8
 8022b7c:	305c      	adds	r0, #92	; 0x5c
 8022b7e:	f7fc fd8c 	bl	801f69a <memset>
 8022b82:	4b05      	ldr	r3, [pc, #20]	; (8022b98 <std+0x38>)
 8022b84:	6263      	str	r3, [r4, #36]	; 0x24
 8022b86:	4b05      	ldr	r3, [pc, #20]	; (8022b9c <std+0x3c>)
 8022b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8022b8a:	4b05      	ldr	r3, [pc, #20]	; (8022ba0 <std+0x40>)
 8022b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022b8e:	4b05      	ldr	r3, [pc, #20]	; (8022ba4 <std+0x44>)
 8022b90:	6224      	str	r4, [r4, #32]
 8022b92:	6323      	str	r3, [r4, #48]	; 0x30
 8022b94:	bd10      	pop	{r4, pc}
 8022b96:	bf00      	nop
 8022b98:	080208dd 	.word	0x080208dd
 8022b9c:	08020903 	.word	0x08020903
 8022ba0:	0802093b 	.word	0x0802093b
 8022ba4:	0802095f 	.word	0x0802095f

08022ba8 <_cleanup_r>:
 8022ba8:	4901      	ldr	r1, [pc, #4]	; (8022bb0 <_cleanup_r+0x8>)
 8022baa:	f000 b885 	b.w	8022cb8 <_fwalk_reent>
 8022bae:	bf00      	nop
 8022bb0:	08022b0d 	.word	0x08022b0d

08022bb4 <__sfmoreglue>:
 8022bb4:	b570      	push	{r4, r5, r6, lr}
 8022bb6:	1e4a      	subs	r2, r1, #1
 8022bb8:	2568      	movs	r5, #104	; 0x68
 8022bba:	4355      	muls	r5, r2
 8022bbc:	460e      	mov	r6, r1
 8022bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022bc2:	f7fd f855 	bl	801fc70 <_malloc_r>
 8022bc6:	4604      	mov	r4, r0
 8022bc8:	b140      	cbz	r0, 8022bdc <__sfmoreglue+0x28>
 8022bca:	2100      	movs	r1, #0
 8022bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8022bd0:	300c      	adds	r0, #12
 8022bd2:	60a0      	str	r0, [r4, #8]
 8022bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022bd8:	f7fc fd5f 	bl	801f69a <memset>
 8022bdc:	4620      	mov	r0, r4
 8022bde:	bd70      	pop	{r4, r5, r6, pc}

08022be0 <__sinit>:
 8022be0:	6983      	ldr	r3, [r0, #24]
 8022be2:	b510      	push	{r4, lr}
 8022be4:	4604      	mov	r4, r0
 8022be6:	bb33      	cbnz	r3, 8022c36 <__sinit+0x56>
 8022be8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8022bec:	6503      	str	r3, [r0, #80]	; 0x50
 8022bee:	4b12      	ldr	r3, [pc, #72]	; (8022c38 <__sinit+0x58>)
 8022bf0:	4a12      	ldr	r2, [pc, #72]	; (8022c3c <__sinit+0x5c>)
 8022bf2:	681b      	ldr	r3, [r3, #0]
 8022bf4:	6282      	str	r2, [r0, #40]	; 0x28
 8022bf6:	4298      	cmp	r0, r3
 8022bf8:	bf04      	itt	eq
 8022bfa:	2301      	moveq	r3, #1
 8022bfc:	6183      	streq	r3, [r0, #24]
 8022bfe:	f000 f81f 	bl	8022c40 <__sfp>
 8022c02:	6060      	str	r0, [r4, #4]
 8022c04:	4620      	mov	r0, r4
 8022c06:	f000 f81b 	bl	8022c40 <__sfp>
 8022c0a:	60a0      	str	r0, [r4, #8]
 8022c0c:	4620      	mov	r0, r4
 8022c0e:	f000 f817 	bl	8022c40 <__sfp>
 8022c12:	2200      	movs	r2, #0
 8022c14:	60e0      	str	r0, [r4, #12]
 8022c16:	2104      	movs	r1, #4
 8022c18:	6860      	ldr	r0, [r4, #4]
 8022c1a:	f7ff ffa1 	bl	8022b60 <std>
 8022c1e:	2201      	movs	r2, #1
 8022c20:	2109      	movs	r1, #9
 8022c22:	68a0      	ldr	r0, [r4, #8]
 8022c24:	f7ff ff9c 	bl	8022b60 <std>
 8022c28:	2202      	movs	r2, #2
 8022c2a:	2112      	movs	r1, #18
 8022c2c:	68e0      	ldr	r0, [r4, #12]
 8022c2e:	f7ff ff97 	bl	8022b60 <std>
 8022c32:	2301      	movs	r3, #1
 8022c34:	61a3      	str	r3, [r4, #24]
 8022c36:	bd10      	pop	{r4, pc}
 8022c38:	0803f6dc 	.word	0x0803f6dc
 8022c3c:	08022ba9 	.word	0x08022ba9

08022c40 <__sfp>:
 8022c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c42:	4b1b      	ldr	r3, [pc, #108]	; (8022cb0 <__sfp+0x70>)
 8022c44:	681e      	ldr	r6, [r3, #0]
 8022c46:	69b3      	ldr	r3, [r6, #24]
 8022c48:	4607      	mov	r7, r0
 8022c4a:	b913      	cbnz	r3, 8022c52 <__sfp+0x12>
 8022c4c:	4630      	mov	r0, r6
 8022c4e:	f7ff ffc7 	bl	8022be0 <__sinit>
 8022c52:	3648      	adds	r6, #72	; 0x48
 8022c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022c58:	3b01      	subs	r3, #1
 8022c5a:	d503      	bpl.n	8022c64 <__sfp+0x24>
 8022c5c:	6833      	ldr	r3, [r6, #0]
 8022c5e:	b133      	cbz	r3, 8022c6e <__sfp+0x2e>
 8022c60:	6836      	ldr	r6, [r6, #0]
 8022c62:	e7f7      	b.n	8022c54 <__sfp+0x14>
 8022c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022c68:	b16d      	cbz	r5, 8022c86 <__sfp+0x46>
 8022c6a:	3468      	adds	r4, #104	; 0x68
 8022c6c:	e7f4      	b.n	8022c58 <__sfp+0x18>
 8022c6e:	2104      	movs	r1, #4
 8022c70:	4638      	mov	r0, r7
 8022c72:	f7ff ff9f 	bl	8022bb4 <__sfmoreglue>
 8022c76:	6030      	str	r0, [r6, #0]
 8022c78:	2800      	cmp	r0, #0
 8022c7a:	d1f1      	bne.n	8022c60 <__sfp+0x20>
 8022c7c:	230c      	movs	r3, #12
 8022c7e:	603b      	str	r3, [r7, #0]
 8022c80:	4604      	mov	r4, r0
 8022c82:	4620      	mov	r0, r4
 8022c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c86:	4b0b      	ldr	r3, [pc, #44]	; (8022cb4 <__sfp+0x74>)
 8022c88:	6665      	str	r5, [r4, #100]	; 0x64
 8022c8a:	e9c4 5500 	strd	r5, r5, [r4]
 8022c8e:	60a5      	str	r5, [r4, #8]
 8022c90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8022c94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8022c98:	2208      	movs	r2, #8
 8022c9a:	4629      	mov	r1, r5
 8022c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022ca0:	f7fc fcfb 	bl	801f69a <memset>
 8022ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022cac:	e7e9      	b.n	8022c82 <__sfp+0x42>
 8022cae:	bf00      	nop
 8022cb0:	0803f6dc 	.word	0x0803f6dc
 8022cb4:	ffff0001 	.word	0xffff0001

08022cb8 <_fwalk_reent>:
 8022cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cbc:	4680      	mov	r8, r0
 8022cbe:	4689      	mov	r9, r1
 8022cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022cc4:	2600      	movs	r6, #0
 8022cc6:	b914      	cbnz	r4, 8022cce <_fwalk_reent+0x16>
 8022cc8:	4630      	mov	r0, r6
 8022cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022cce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8022cd2:	3f01      	subs	r7, #1
 8022cd4:	d501      	bpl.n	8022cda <_fwalk_reent+0x22>
 8022cd6:	6824      	ldr	r4, [r4, #0]
 8022cd8:	e7f5      	b.n	8022cc6 <_fwalk_reent+0xe>
 8022cda:	89ab      	ldrh	r3, [r5, #12]
 8022cdc:	2b01      	cmp	r3, #1
 8022cde:	d907      	bls.n	8022cf0 <_fwalk_reent+0x38>
 8022ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022ce4:	3301      	adds	r3, #1
 8022ce6:	d003      	beq.n	8022cf0 <_fwalk_reent+0x38>
 8022ce8:	4629      	mov	r1, r5
 8022cea:	4640      	mov	r0, r8
 8022cec:	47c8      	blx	r9
 8022cee:	4306      	orrs	r6, r0
 8022cf0:	3568      	adds	r5, #104	; 0x68
 8022cf2:	e7ee      	b.n	8022cd2 <_fwalk_reent+0x1a>

08022cf4 <_findenv_r>:
 8022cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cf8:	4607      	mov	r7, r0
 8022cfa:	468b      	mov	fp, r1
 8022cfc:	4690      	mov	r8, r2
 8022cfe:	f001 fad1 	bl	80242a4 <__env_lock>
 8022d02:	4b19      	ldr	r3, [pc, #100]	; (8022d68 <_findenv_r+0x74>)
 8022d04:	681d      	ldr	r5, [r3, #0]
 8022d06:	469a      	mov	sl, r3
 8022d08:	b13d      	cbz	r5, 8022d1a <_findenv_r+0x26>
 8022d0a:	465c      	mov	r4, fp
 8022d0c:	4623      	mov	r3, r4
 8022d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d12:	b32a      	cbz	r2, 8022d60 <_findenv_r+0x6c>
 8022d14:	2a3d      	cmp	r2, #61	; 0x3d
 8022d16:	461c      	mov	r4, r3
 8022d18:	d1f8      	bne.n	8022d0c <_findenv_r+0x18>
 8022d1a:	4638      	mov	r0, r7
 8022d1c:	f001 fac3 	bl	80242a6 <__env_unlock>
 8022d20:	2000      	movs	r0, #0
 8022d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d26:	464d      	mov	r5, r9
 8022d28:	46a9      	mov	r9, r5
 8022d2a:	f859 0b04 	ldr.w	r0, [r9], #4
 8022d2e:	2800      	cmp	r0, #0
 8022d30:	d0f3      	beq.n	8022d1a <_findenv_r+0x26>
 8022d32:	4622      	mov	r2, r4
 8022d34:	4659      	mov	r1, fp
 8022d36:	f7fe fbab 	bl	8021490 <strncmp>
 8022d3a:	2800      	cmp	r0, #0
 8022d3c:	d1f3      	bne.n	8022d26 <_findenv_r+0x32>
 8022d3e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8022d42:	191e      	adds	r6, r3, r4
 8022d44:	5d1b      	ldrb	r3, [r3, r4]
 8022d46:	2b3d      	cmp	r3, #61	; 0x3d
 8022d48:	d1ed      	bne.n	8022d26 <_findenv_r+0x32>
 8022d4a:	f8da 3000 	ldr.w	r3, [sl]
 8022d4e:	1aed      	subs	r5, r5, r3
 8022d50:	10ad      	asrs	r5, r5, #2
 8022d52:	4638      	mov	r0, r7
 8022d54:	f8c8 5000 	str.w	r5, [r8]
 8022d58:	f001 faa5 	bl	80242a6 <__env_unlock>
 8022d5c:	1c70      	adds	r0, r6, #1
 8022d5e:	e7e0      	b.n	8022d22 <_findenv_r+0x2e>
 8022d60:	eba4 040b 	sub.w	r4, r4, fp
 8022d64:	e7e0      	b.n	8022d28 <_findenv_r+0x34>
 8022d66:	bf00      	nop
 8022d68:	20000244 	.word	0x20000244

08022d6c <_getenv_r>:
 8022d6c:	b507      	push	{r0, r1, r2, lr}
 8022d6e:	aa01      	add	r2, sp, #4
 8022d70:	f7ff ffc0 	bl	8022cf4 <_findenv_r>
 8022d74:	b003      	add	sp, #12
 8022d76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022d7c <__gettzinfo>:
 8022d7c:	4800      	ldr	r0, [pc, #0]	; (8022d80 <__gettzinfo+0x4>)
 8022d7e:	4770      	bx	lr
 8022d80:	20000630 	.word	0x20000630

08022d84 <gmtime_r>:
 8022d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d88:	e9d0 8900 	ldrd	r8, r9, [r0]
 8022d8c:	460c      	mov	r4, r1
 8022d8e:	4a50      	ldr	r2, [pc, #320]	; (8022ed0 <gmtime_r+0x14c>)
 8022d90:	2300      	movs	r3, #0
 8022d92:	4640      	mov	r0, r8
 8022d94:	4649      	mov	r1, r9
 8022d96:	f7dd fabb 	bl	8000310 <__aeabi_ldivmod>
 8022d9a:	4a4d      	ldr	r2, [pc, #308]	; (8022ed0 <gmtime_r+0x14c>)
 8022d9c:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8022da0:	2300      	movs	r3, #0
 8022da2:	4640      	mov	r0, r8
 8022da4:	4649      	mov	r1, r9
 8022da6:	f7dd fab3 	bl	8000310 <__aeabi_ldivmod>
 8022daa:	2a00      	cmp	r2, #0
 8022dac:	bfbc      	itt	lt
 8022dae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8022db2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022db6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022dba:	fb92 f3f1 	sdiv	r3, r2, r1
 8022dbe:	fb01 2213 	mls	r2, r1, r3, r2
 8022dc2:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8022dc6:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8022dca:	60a3      	str	r3, [r4, #8]
 8022dcc:	bfb8      	it	lt
 8022dce:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8022dd2:	fb92 f3f1 	sdiv	r3, r2, r1
 8022dd6:	fb01 2213 	mls	r2, r1, r3, r2
 8022dda:	6063      	str	r3, [r4, #4]
 8022ddc:	6022      	str	r2, [r4, #0]
 8022dde:	1ceb      	adds	r3, r5, #3
 8022de0:	2207      	movs	r2, #7
 8022de2:	fb93 f2f2 	sdiv	r2, r3, r2
 8022de6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8022dea:	1a9b      	subs	r3, r3, r2
 8022dec:	bf48      	it	mi
 8022dee:	3307      	addmi	r3, #7
 8022df0:	2d00      	cmp	r5, #0
 8022df2:	61a3      	str	r3, [r4, #24]
 8022df4:	bfb8      	it	lt
 8022df6:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8022dfa:	4836      	ldr	r0, [pc, #216]	; (8022ed4 <gmtime_r+0x150>)
 8022dfc:	bfae      	itee	ge
 8022dfe:	fb95 f0f0 	sdivge	r0, r5, r0
 8022e02:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022e06:	fb93 f0f0 	sdivlt	r0, r3, r0
 8022e0a:	4b33      	ldr	r3, [pc, #204]	; (8022ed8 <gmtime_r+0x154>)
 8022e0c:	fb03 5300 	mla	r3, r3, r0, r5
 8022e10:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8022e14:	fbb3 f1f1 	udiv	r1, r3, r1
 8022e18:	4419      	add	r1, r3
 8022e1a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8022e1e:	fbb3 f2f7 	udiv	r2, r3, r7
 8022e22:	1a89      	subs	r1, r1, r2
 8022e24:	4a2d      	ldr	r2, [pc, #180]	; (8022edc <gmtime_r+0x158>)
 8022e26:	fbb3 f2f2 	udiv	r2, r3, r2
 8022e2a:	1a8a      	subs	r2, r1, r2
 8022e2c:	f648 6194 	movw	r1, #36500	; 0x8e94
 8022e30:	fbb2 f1f1 	udiv	r1, r2, r1
 8022e34:	440b      	add	r3, r1
 8022e36:	f240 166d 	movw	r6, #365	; 0x16d
 8022e3a:	fbb2 f5f6 	udiv	r5, r2, r6
 8022e3e:	fbb2 f2f7 	udiv	r2, r2, r7
 8022e42:	1a9a      	subs	r2, r3, r2
 8022e44:	fb06 2315 	mls	r3, r6, r5, r2
 8022e48:	2199      	movs	r1, #153	; 0x99
 8022e4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8022e4e:	1c5e      	adds	r6, r3, #1
 8022e50:	3202      	adds	r2, #2
 8022e52:	fbb2 f2f1 	udiv	r2, r2, r1
 8022e56:	2a0a      	cmp	r2, #10
 8022e58:	fb01 f102 	mul.w	r1, r1, r2
 8022e5c:	f101 0102 	add.w	r1, r1, #2
 8022e60:	f04f 0705 	mov.w	r7, #5
 8022e64:	fbb1 f1f7 	udiv	r1, r1, r7
 8022e68:	eba6 0101 	sub.w	r1, r6, r1
 8022e6c:	bf34      	ite	cc
 8022e6e:	2602      	movcc	r6, #2
 8022e70:	f06f 0609 	mvncs.w	r6, #9
 8022e74:	4416      	add	r6, r2
 8022e76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022e7a:	fb02 5000 	mla	r0, r2, r0, r5
 8022e7e:	2e01      	cmp	r6, #1
 8022e80:	bf98      	it	ls
 8022e82:	3001      	addls	r0, #1
 8022e84:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8022e88:	d30c      	bcc.n	8022ea4 <gmtime_r+0x120>
 8022e8a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022e8e:	61e3      	str	r3, [r4, #28]
 8022e90:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8022e94:	2300      	movs	r3, #0
 8022e96:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8022e9a:	60e1      	str	r1, [r4, #12]
 8022e9c:	6223      	str	r3, [r4, #32]
 8022e9e:	4620      	mov	r0, r4
 8022ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ea4:	07aa      	lsls	r2, r5, #30
 8022ea6:	d105      	bne.n	8022eb4 <gmtime_r+0x130>
 8022ea8:	2764      	movs	r7, #100	; 0x64
 8022eaa:	fbb5 f2f7 	udiv	r2, r5, r7
 8022eae:	fb07 5212 	mls	r2, r7, r2, r5
 8022eb2:	b95a      	cbnz	r2, 8022ecc <gmtime_r+0x148>
 8022eb4:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8022eb8:	fbb5 f2f7 	udiv	r2, r5, r7
 8022ebc:	fb07 5212 	mls	r2, r7, r2, r5
 8022ec0:	fab2 f282 	clz	r2, r2
 8022ec4:	0952      	lsrs	r2, r2, #5
 8022ec6:	333b      	adds	r3, #59	; 0x3b
 8022ec8:	4413      	add	r3, r2
 8022eca:	e7e0      	b.n	8022e8e <gmtime_r+0x10a>
 8022ecc:	2201      	movs	r2, #1
 8022ece:	e7fa      	b.n	8022ec6 <gmtime_r+0x142>
 8022ed0:	00015180 	.word	0x00015180
 8022ed4:	00023ab1 	.word	0x00023ab1
 8022ed8:	fffdc54f 	.word	0xfffdc54f
 8022edc:	00023ab0 	.word	0x00023ab0

08022ee0 <labs>:
 8022ee0:	2800      	cmp	r0, #0
 8022ee2:	bfb8      	it	lt
 8022ee4:	4240      	neglt	r0, r0
 8022ee6:	4770      	bx	lr

08022ee8 <_localeconv_r>:
 8022ee8:	4b04      	ldr	r3, [pc, #16]	; (8022efc <_localeconv_r+0x14>)
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	6a18      	ldr	r0, [r3, #32]
 8022eee:	4b04      	ldr	r3, [pc, #16]	; (8022f00 <_localeconv_r+0x18>)
 8022ef0:	2800      	cmp	r0, #0
 8022ef2:	bf08      	it	eq
 8022ef4:	4618      	moveq	r0, r3
 8022ef6:	30f0      	adds	r0, #240	; 0xf0
 8022ef8:	4770      	bx	lr
 8022efa:	bf00      	nop
 8022efc:	20000454 	.word	0x20000454
 8022f00:	200004b8 	.word	0x200004b8

08022f04 <_lseek_r>:
 8022f04:	b538      	push	{r3, r4, r5, lr}
 8022f06:	4c07      	ldr	r4, [pc, #28]	; (8022f24 <_lseek_r+0x20>)
 8022f08:	4605      	mov	r5, r0
 8022f0a:	4608      	mov	r0, r1
 8022f0c:	4611      	mov	r1, r2
 8022f0e:	2200      	movs	r2, #0
 8022f10:	6022      	str	r2, [r4, #0]
 8022f12:	461a      	mov	r2, r3
 8022f14:	f7e1 fc3c 	bl	8004790 <_lseek>
 8022f18:	1c43      	adds	r3, r0, #1
 8022f1a:	d102      	bne.n	8022f22 <_lseek_r+0x1e>
 8022f1c:	6823      	ldr	r3, [r4, #0]
 8022f1e:	b103      	cbz	r3, 8022f22 <_lseek_r+0x1e>
 8022f20:	602b      	str	r3, [r5, #0]
 8022f22:	bd38      	pop	{r3, r4, r5, pc}
 8022f24:	2003634c 	.word	0x2003634c

08022f28 <__swhatbuf_r>:
 8022f28:	b570      	push	{r4, r5, r6, lr}
 8022f2a:	460e      	mov	r6, r1
 8022f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f30:	2900      	cmp	r1, #0
 8022f32:	b096      	sub	sp, #88	; 0x58
 8022f34:	4614      	mov	r4, r2
 8022f36:	461d      	mov	r5, r3
 8022f38:	da07      	bge.n	8022f4a <__swhatbuf_r+0x22>
 8022f3a:	2300      	movs	r3, #0
 8022f3c:	602b      	str	r3, [r5, #0]
 8022f3e:	89b3      	ldrh	r3, [r6, #12]
 8022f40:	061a      	lsls	r2, r3, #24
 8022f42:	d410      	bmi.n	8022f66 <__swhatbuf_r+0x3e>
 8022f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022f48:	e00e      	b.n	8022f68 <__swhatbuf_r+0x40>
 8022f4a:	466a      	mov	r2, sp
 8022f4c:	f001 f9ac 	bl	80242a8 <_fstat_r>
 8022f50:	2800      	cmp	r0, #0
 8022f52:	dbf2      	blt.n	8022f3a <__swhatbuf_r+0x12>
 8022f54:	9a01      	ldr	r2, [sp, #4]
 8022f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022f5e:	425a      	negs	r2, r3
 8022f60:	415a      	adcs	r2, r3
 8022f62:	602a      	str	r2, [r5, #0]
 8022f64:	e7ee      	b.n	8022f44 <__swhatbuf_r+0x1c>
 8022f66:	2340      	movs	r3, #64	; 0x40
 8022f68:	2000      	movs	r0, #0
 8022f6a:	6023      	str	r3, [r4, #0]
 8022f6c:	b016      	add	sp, #88	; 0x58
 8022f6e:	bd70      	pop	{r4, r5, r6, pc}

08022f70 <__smakebuf_r>:
 8022f70:	898b      	ldrh	r3, [r1, #12]
 8022f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022f74:	079d      	lsls	r5, r3, #30
 8022f76:	4606      	mov	r6, r0
 8022f78:	460c      	mov	r4, r1
 8022f7a:	d507      	bpl.n	8022f8c <__smakebuf_r+0x1c>
 8022f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022f80:	6023      	str	r3, [r4, #0]
 8022f82:	6123      	str	r3, [r4, #16]
 8022f84:	2301      	movs	r3, #1
 8022f86:	6163      	str	r3, [r4, #20]
 8022f88:	b002      	add	sp, #8
 8022f8a:	bd70      	pop	{r4, r5, r6, pc}
 8022f8c:	ab01      	add	r3, sp, #4
 8022f8e:	466a      	mov	r2, sp
 8022f90:	f7ff ffca 	bl	8022f28 <__swhatbuf_r>
 8022f94:	9900      	ldr	r1, [sp, #0]
 8022f96:	4605      	mov	r5, r0
 8022f98:	4630      	mov	r0, r6
 8022f9a:	f7fc fe69 	bl	801fc70 <_malloc_r>
 8022f9e:	b948      	cbnz	r0, 8022fb4 <__smakebuf_r+0x44>
 8022fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fa4:	059a      	lsls	r2, r3, #22
 8022fa6:	d4ef      	bmi.n	8022f88 <__smakebuf_r+0x18>
 8022fa8:	f023 0303 	bic.w	r3, r3, #3
 8022fac:	f043 0302 	orr.w	r3, r3, #2
 8022fb0:	81a3      	strh	r3, [r4, #12]
 8022fb2:	e7e3      	b.n	8022f7c <__smakebuf_r+0xc>
 8022fb4:	4b0d      	ldr	r3, [pc, #52]	; (8022fec <__smakebuf_r+0x7c>)
 8022fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8022fb8:	89a3      	ldrh	r3, [r4, #12]
 8022fba:	6020      	str	r0, [r4, #0]
 8022fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022fc0:	81a3      	strh	r3, [r4, #12]
 8022fc2:	9b00      	ldr	r3, [sp, #0]
 8022fc4:	6163      	str	r3, [r4, #20]
 8022fc6:	9b01      	ldr	r3, [sp, #4]
 8022fc8:	6120      	str	r0, [r4, #16]
 8022fca:	b15b      	cbz	r3, 8022fe4 <__smakebuf_r+0x74>
 8022fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022fd0:	4630      	mov	r0, r6
 8022fd2:	f001 f97b 	bl	80242cc <_isatty_r>
 8022fd6:	b128      	cbz	r0, 8022fe4 <__smakebuf_r+0x74>
 8022fd8:	89a3      	ldrh	r3, [r4, #12]
 8022fda:	f023 0303 	bic.w	r3, r3, #3
 8022fde:	f043 0301 	orr.w	r3, r3, #1
 8022fe2:	81a3      	strh	r3, [r4, #12]
 8022fe4:	89a3      	ldrh	r3, [r4, #12]
 8022fe6:	431d      	orrs	r5, r3
 8022fe8:	81a5      	strh	r5, [r4, #12]
 8022fea:	e7cd      	b.n	8022f88 <__smakebuf_r+0x18>
 8022fec:	08022ba9 	.word	0x08022ba9

08022ff0 <__malloc_lock>:
 8022ff0:	4770      	bx	lr

08022ff2 <__malloc_unlock>:
 8022ff2:	4770      	bx	lr

08022ff4 <_Balloc>:
 8022ff4:	b570      	push	{r4, r5, r6, lr}
 8022ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8022ff8:	4604      	mov	r4, r0
 8022ffa:	460e      	mov	r6, r1
 8022ffc:	b93d      	cbnz	r5, 802300e <_Balloc+0x1a>
 8022ffe:	2010      	movs	r0, #16
 8023000:	f7fc faf6 	bl	801f5f0 <malloc>
 8023004:	6260      	str	r0, [r4, #36]	; 0x24
 8023006:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802300a:	6005      	str	r5, [r0, #0]
 802300c:	60c5      	str	r5, [r0, #12]
 802300e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023010:	68eb      	ldr	r3, [r5, #12]
 8023012:	b183      	cbz	r3, 8023036 <_Balloc+0x42>
 8023014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023016:	68db      	ldr	r3, [r3, #12]
 8023018:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802301c:	b9b8      	cbnz	r0, 802304e <_Balloc+0x5a>
 802301e:	2101      	movs	r1, #1
 8023020:	fa01 f506 	lsl.w	r5, r1, r6
 8023024:	1d6a      	adds	r2, r5, #5
 8023026:	0092      	lsls	r2, r2, #2
 8023028:	4620      	mov	r0, r4
 802302a:	f000 fabf 	bl	80235ac <_calloc_r>
 802302e:	b160      	cbz	r0, 802304a <_Balloc+0x56>
 8023030:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8023034:	e00e      	b.n	8023054 <_Balloc+0x60>
 8023036:	2221      	movs	r2, #33	; 0x21
 8023038:	2104      	movs	r1, #4
 802303a:	4620      	mov	r0, r4
 802303c:	f000 fab6 	bl	80235ac <_calloc_r>
 8023040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023042:	60e8      	str	r0, [r5, #12]
 8023044:	68db      	ldr	r3, [r3, #12]
 8023046:	2b00      	cmp	r3, #0
 8023048:	d1e4      	bne.n	8023014 <_Balloc+0x20>
 802304a:	2000      	movs	r0, #0
 802304c:	bd70      	pop	{r4, r5, r6, pc}
 802304e:	6802      	ldr	r2, [r0, #0]
 8023050:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8023054:	2300      	movs	r3, #0
 8023056:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802305a:	e7f7      	b.n	802304c <_Balloc+0x58>

0802305c <_Bfree>:
 802305c:	b570      	push	{r4, r5, r6, lr}
 802305e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8023060:	4606      	mov	r6, r0
 8023062:	460d      	mov	r5, r1
 8023064:	b93c      	cbnz	r4, 8023076 <_Bfree+0x1a>
 8023066:	2010      	movs	r0, #16
 8023068:	f7fc fac2 	bl	801f5f0 <malloc>
 802306c:	6270      	str	r0, [r6, #36]	; 0x24
 802306e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023072:	6004      	str	r4, [r0, #0]
 8023074:	60c4      	str	r4, [r0, #12]
 8023076:	b13d      	cbz	r5, 8023088 <_Bfree+0x2c>
 8023078:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802307a:	686a      	ldr	r2, [r5, #4]
 802307c:	68db      	ldr	r3, [r3, #12]
 802307e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023082:	6029      	str	r1, [r5, #0]
 8023084:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8023088:	bd70      	pop	{r4, r5, r6, pc}

0802308a <__multadd>:
 802308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802308e:	690d      	ldr	r5, [r1, #16]
 8023090:	461f      	mov	r7, r3
 8023092:	4606      	mov	r6, r0
 8023094:	460c      	mov	r4, r1
 8023096:	f101 0c14 	add.w	ip, r1, #20
 802309a:	2300      	movs	r3, #0
 802309c:	f8dc 0000 	ldr.w	r0, [ip]
 80230a0:	b281      	uxth	r1, r0
 80230a2:	fb02 7101 	mla	r1, r2, r1, r7
 80230a6:	0c0f      	lsrs	r7, r1, #16
 80230a8:	0c00      	lsrs	r0, r0, #16
 80230aa:	fb02 7000 	mla	r0, r2, r0, r7
 80230ae:	b289      	uxth	r1, r1
 80230b0:	3301      	adds	r3, #1
 80230b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80230b6:	429d      	cmp	r5, r3
 80230b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80230bc:	f84c 1b04 	str.w	r1, [ip], #4
 80230c0:	dcec      	bgt.n	802309c <__multadd+0x12>
 80230c2:	b1d7      	cbz	r7, 80230fa <__multadd+0x70>
 80230c4:	68a3      	ldr	r3, [r4, #8]
 80230c6:	42ab      	cmp	r3, r5
 80230c8:	dc12      	bgt.n	80230f0 <__multadd+0x66>
 80230ca:	6861      	ldr	r1, [r4, #4]
 80230cc:	4630      	mov	r0, r6
 80230ce:	3101      	adds	r1, #1
 80230d0:	f7ff ff90 	bl	8022ff4 <_Balloc>
 80230d4:	6922      	ldr	r2, [r4, #16]
 80230d6:	3202      	adds	r2, #2
 80230d8:	f104 010c 	add.w	r1, r4, #12
 80230dc:	4680      	mov	r8, r0
 80230de:	0092      	lsls	r2, r2, #2
 80230e0:	300c      	adds	r0, #12
 80230e2:	f7fc fab6 	bl	801f652 <memcpy>
 80230e6:	4621      	mov	r1, r4
 80230e8:	4630      	mov	r0, r6
 80230ea:	f7ff ffb7 	bl	802305c <_Bfree>
 80230ee:	4644      	mov	r4, r8
 80230f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80230f4:	3501      	adds	r5, #1
 80230f6:	615f      	str	r7, [r3, #20]
 80230f8:	6125      	str	r5, [r4, #16]
 80230fa:	4620      	mov	r0, r4
 80230fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023100 <__hi0bits>:
 8023100:	0c02      	lsrs	r2, r0, #16
 8023102:	0412      	lsls	r2, r2, #16
 8023104:	4603      	mov	r3, r0
 8023106:	b9b2      	cbnz	r2, 8023136 <__hi0bits+0x36>
 8023108:	0403      	lsls	r3, r0, #16
 802310a:	2010      	movs	r0, #16
 802310c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8023110:	bf04      	itt	eq
 8023112:	021b      	lsleq	r3, r3, #8
 8023114:	3008      	addeq	r0, #8
 8023116:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802311a:	bf04      	itt	eq
 802311c:	011b      	lsleq	r3, r3, #4
 802311e:	3004      	addeq	r0, #4
 8023120:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8023124:	bf04      	itt	eq
 8023126:	009b      	lsleq	r3, r3, #2
 8023128:	3002      	addeq	r0, #2
 802312a:	2b00      	cmp	r3, #0
 802312c:	db06      	blt.n	802313c <__hi0bits+0x3c>
 802312e:	005b      	lsls	r3, r3, #1
 8023130:	d503      	bpl.n	802313a <__hi0bits+0x3a>
 8023132:	3001      	adds	r0, #1
 8023134:	4770      	bx	lr
 8023136:	2000      	movs	r0, #0
 8023138:	e7e8      	b.n	802310c <__hi0bits+0xc>
 802313a:	2020      	movs	r0, #32
 802313c:	4770      	bx	lr

0802313e <__lo0bits>:
 802313e:	6803      	ldr	r3, [r0, #0]
 8023140:	f013 0207 	ands.w	r2, r3, #7
 8023144:	4601      	mov	r1, r0
 8023146:	d00b      	beq.n	8023160 <__lo0bits+0x22>
 8023148:	07da      	lsls	r2, r3, #31
 802314a:	d423      	bmi.n	8023194 <__lo0bits+0x56>
 802314c:	0798      	lsls	r0, r3, #30
 802314e:	bf49      	itett	mi
 8023150:	085b      	lsrmi	r3, r3, #1
 8023152:	089b      	lsrpl	r3, r3, #2
 8023154:	2001      	movmi	r0, #1
 8023156:	600b      	strmi	r3, [r1, #0]
 8023158:	bf5c      	itt	pl
 802315a:	600b      	strpl	r3, [r1, #0]
 802315c:	2002      	movpl	r0, #2
 802315e:	4770      	bx	lr
 8023160:	b298      	uxth	r0, r3
 8023162:	b9a8      	cbnz	r0, 8023190 <__lo0bits+0x52>
 8023164:	0c1b      	lsrs	r3, r3, #16
 8023166:	2010      	movs	r0, #16
 8023168:	f013 0fff 	tst.w	r3, #255	; 0xff
 802316c:	bf04      	itt	eq
 802316e:	0a1b      	lsreq	r3, r3, #8
 8023170:	3008      	addeq	r0, #8
 8023172:	071a      	lsls	r2, r3, #28
 8023174:	bf04      	itt	eq
 8023176:	091b      	lsreq	r3, r3, #4
 8023178:	3004      	addeq	r0, #4
 802317a:	079a      	lsls	r2, r3, #30
 802317c:	bf04      	itt	eq
 802317e:	089b      	lsreq	r3, r3, #2
 8023180:	3002      	addeq	r0, #2
 8023182:	07da      	lsls	r2, r3, #31
 8023184:	d402      	bmi.n	802318c <__lo0bits+0x4e>
 8023186:	085b      	lsrs	r3, r3, #1
 8023188:	d006      	beq.n	8023198 <__lo0bits+0x5a>
 802318a:	3001      	adds	r0, #1
 802318c:	600b      	str	r3, [r1, #0]
 802318e:	4770      	bx	lr
 8023190:	4610      	mov	r0, r2
 8023192:	e7e9      	b.n	8023168 <__lo0bits+0x2a>
 8023194:	2000      	movs	r0, #0
 8023196:	4770      	bx	lr
 8023198:	2020      	movs	r0, #32
 802319a:	4770      	bx	lr

0802319c <__i2b>:
 802319c:	b510      	push	{r4, lr}
 802319e:	460c      	mov	r4, r1
 80231a0:	2101      	movs	r1, #1
 80231a2:	f7ff ff27 	bl	8022ff4 <_Balloc>
 80231a6:	2201      	movs	r2, #1
 80231a8:	6144      	str	r4, [r0, #20]
 80231aa:	6102      	str	r2, [r0, #16]
 80231ac:	bd10      	pop	{r4, pc}

080231ae <__multiply>:
 80231ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b2:	4614      	mov	r4, r2
 80231b4:	690a      	ldr	r2, [r1, #16]
 80231b6:	6923      	ldr	r3, [r4, #16]
 80231b8:	429a      	cmp	r2, r3
 80231ba:	bfb8      	it	lt
 80231bc:	460b      	movlt	r3, r1
 80231be:	4688      	mov	r8, r1
 80231c0:	bfbc      	itt	lt
 80231c2:	46a0      	movlt	r8, r4
 80231c4:	461c      	movlt	r4, r3
 80231c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80231ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80231ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80231d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80231d6:	eb07 0609 	add.w	r6, r7, r9
 80231da:	42b3      	cmp	r3, r6
 80231dc:	bfb8      	it	lt
 80231de:	3101      	addlt	r1, #1
 80231e0:	f7ff ff08 	bl	8022ff4 <_Balloc>
 80231e4:	f100 0514 	add.w	r5, r0, #20
 80231e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80231ec:	462b      	mov	r3, r5
 80231ee:	2200      	movs	r2, #0
 80231f0:	4573      	cmp	r3, lr
 80231f2:	d316      	bcc.n	8023222 <__multiply+0x74>
 80231f4:	f104 0214 	add.w	r2, r4, #20
 80231f8:	f108 0114 	add.w	r1, r8, #20
 80231fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8023200:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8023204:	9300      	str	r3, [sp, #0]
 8023206:	9b00      	ldr	r3, [sp, #0]
 8023208:	9201      	str	r2, [sp, #4]
 802320a:	4293      	cmp	r3, r2
 802320c:	d80c      	bhi.n	8023228 <__multiply+0x7a>
 802320e:	2e00      	cmp	r6, #0
 8023210:	dd03      	ble.n	802321a <__multiply+0x6c>
 8023212:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8023216:	2b00      	cmp	r3, #0
 8023218:	d05d      	beq.n	80232d6 <__multiply+0x128>
 802321a:	6106      	str	r6, [r0, #16]
 802321c:	b003      	add	sp, #12
 802321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023222:	f843 2b04 	str.w	r2, [r3], #4
 8023226:	e7e3      	b.n	80231f0 <__multiply+0x42>
 8023228:	f8b2 b000 	ldrh.w	fp, [r2]
 802322c:	f1bb 0f00 	cmp.w	fp, #0
 8023230:	d023      	beq.n	802327a <__multiply+0xcc>
 8023232:	4689      	mov	r9, r1
 8023234:	46ac      	mov	ip, r5
 8023236:	f04f 0800 	mov.w	r8, #0
 802323a:	f859 4b04 	ldr.w	r4, [r9], #4
 802323e:	f8dc a000 	ldr.w	sl, [ip]
 8023242:	b2a3      	uxth	r3, r4
 8023244:	fa1f fa8a 	uxth.w	sl, sl
 8023248:	fb0b a303 	mla	r3, fp, r3, sl
 802324c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8023250:	f8dc 4000 	ldr.w	r4, [ip]
 8023254:	4443      	add	r3, r8
 8023256:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802325a:	fb0b 840a 	mla	r4, fp, sl, r8
 802325e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8023262:	46e2      	mov	sl, ip
 8023264:	b29b      	uxth	r3, r3
 8023266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802326a:	454f      	cmp	r7, r9
 802326c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8023270:	f84a 3b04 	str.w	r3, [sl], #4
 8023274:	d82b      	bhi.n	80232ce <__multiply+0x120>
 8023276:	f8cc 8004 	str.w	r8, [ip, #4]
 802327a:	9b01      	ldr	r3, [sp, #4]
 802327c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8023280:	3204      	adds	r2, #4
 8023282:	f1ba 0f00 	cmp.w	sl, #0
 8023286:	d020      	beq.n	80232ca <__multiply+0x11c>
 8023288:	682b      	ldr	r3, [r5, #0]
 802328a:	4689      	mov	r9, r1
 802328c:	46a8      	mov	r8, r5
 802328e:	f04f 0b00 	mov.w	fp, #0
 8023292:	f8b9 c000 	ldrh.w	ip, [r9]
 8023296:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802329a:	fb0a 440c 	mla	r4, sl, ip, r4
 802329e:	445c      	add	r4, fp
 80232a0:	46c4      	mov	ip, r8
 80232a2:	b29b      	uxth	r3, r3
 80232a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80232a8:	f84c 3b04 	str.w	r3, [ip], #4
 80232ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80232b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80232b4:	0c1b      	lsrs	r3, r3, #16
 80232b6:	fb0a b303 	mla	r3, sl, r3, fp
 80232ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80232be:	454f      	cmp	r7, r9
 80232c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80232c4:	d805      	bhi.n	80232d2 <__multiply+0x124>
 80232c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80232ca:	3504      	adds	r5, #4
 80232cc:	e79b      	b.n	8023206 <__multiply+0x58>
 80232ce:	46d4      	mov	ip, sl
 80232d0:	e7b3      	b.n	802323a <__multiply+0x8c>
 80232d2:	46e0      	mov	r8, ip
 80232d4:	e7dd      	b.n	8023292 <__multiply+0xe4>
 80232d6:	3e01      	subs	r6, #1
 80232d8:	e799      	b.n	802320e <__multiply+0x60>
	...

080232dc <__pow5mult>:
 80232dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80232e0:	4615      	mov	r5, r2
 80232e2:	f012 0203 	ands.w	r2, r2, #3
 80232e6:	4606      	mov	r6, r0
 80232e8:	460f      	mov	r7, r1
 80232ea:	d007      	beq.n	80232fc <__pow5mult+0x20>
 80232ec:	3a01      	subs	r2, #1
 80232ee:	4c21      	ldr	r4, [pc, #132]	; (8023374 <__pow5mult+0x98>)
 80232f0:	2300      	movs	r3, #0
 80232f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80232f6:	f7ff fec8 	bl	802308a <__multadd>
 80232fa:	4607      	mov	r7, r0
 80232fc:	10ad      	asrs	r5, r5, #2
 80232fe:	d035      	beq.n	802336c <__pow5mult+0x90>
 8023300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8023302:	b93c      	cbnz	r4, 8023314 <__pow5mult+0x38>
 8023304:	2010      	movs	r0, #16
 8023306:	f7fc f973 	bl	801f5f0 <malloc>
 802330a:	6270      	str	r0, [r6, #36]	; 0x24
 802330c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023310:	6004      	str	r4, [r0, #0]
 8023312:	60c4      	str	r4, [r0, #12]
 8023314:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8023318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802331c:	b94c      	cbnz	r4, 8023332 <__pow5mult+0x56>
 802331e:	f240 2171 	movw	r1, #625	; 0x271
 8023322:	4630      	mov	r0, r6
 8023324:	f7ff ff3a 	bl	802319c <__i2b>
 8023328:	2300      	movs	r3, #0
 802332a:	f8c8 0008 	str.w	r0, [r8, #8]
 802332e:	4604      	mov	r4, r0
 8023330:	6003      	str	r3, [r0, #0]
 8023332:	f04f 0800 	mov.w	r8, #0
 8023336:	07eb      	lsls	r3, r5, #31
 8023338:	d50a      	bpl.n	8023350 <__pow5mult+0x74>
 802333a:	4639      	mov	r1, r7
 802333c:	4622      	mov	r2, r4
 802333e:	4630      	mov	r0, r6
 8023340:	f7ff ff35 	bl	80231ae <__multiply>
 8023344:	4639      	mov	r1, r7
 8023346:	4681      	mov	r9, r0
 8023348:	4630      	mov	r0, r6
 802334a:	f7ff fe87 	bl	802305c <_Bfree>
 802334e:	464f      	mov	r7, r9
 8023350:	106d      	asrs	r5, r5, #1
 8023352:	d00b      	beq.n	802336c <__pow5mult+0x90>
 8023354:	6820      	ldr	r0, [r4, #0]
 8023356:	b938      	cbnz	r0, 8023368 <__pow5mult+0x8c>
 8023358:	4622      	mov	r2, r4
 802335a:	4621      	mov	r1, r4
 802335c:	4630      	mov	r0, r6
 802335e:	f7ff ff26 	bl	80231ae <__multiply>
 8023362:	6020      	str	r0, [r4, #0]
 8023364:	f8c0 8000 	str.w	r8, [r0]
 8023368:	4604      	mov	r4, r0
 802336a:	e7e4      	b.n	8023336 <__pow5mult+0x5a>
 802336c:	4638      	mov	r0, r7
 802336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023372:	bf00      	nop
 8023374:	0803fd58 	.word	0x0803fd58

08023378 <__lshift>:
 8023378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802337c:	460c      	mov	r4, r1
 802337e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8023382:	6923      	ldr	r3, [r4, #16]
 8023384:	6849      	ldr	r1, [r1, #4]
 8023386:	eb0a 0903 	add.w	r9, sl, r3
 802338a:	68a3      	ldr	r3, [r4, #8]
 802338c:	4607      	mov	r7, r0
 802338e:	4616      	mov	r6, r2
 8023390:	f109 0501 	add.w	r5, r9, #1
 8023394:	42ab      	cmp	r3, r5
 8023396:	db32      	blt.n	80233fe <__lshift+0x86>
 8023398:	4638      	mov	r0, r7
 802339a:	f7ff fe2b 	bl	8022ff4 <_Balloc>
 802339e:	2300      	movs	r3, #0
 80233a0:	4680      	mov	r8, r0
 80233a2:	f100 0114 	add.w	r1, r0, #20
 80233a6:	461a      	mov	r2, r3
 80233a8:	4553      	cmp	r3, sl
 80233aa:	db2b      	blt.n	8023404 <__lshift+0x8c>
 80233ac:	6920      	ldr	r0, [r4, #16]
 80233ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80233b2:	f104 0314 	add.w	r3, r4, #20
 80233b6:	f016 021f 	ands.w	r2, r6, #31
 80233ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80233be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80233c2:	d025      	beq.n	8023410 <__lshift+0x98>
 80233c4:	f1c2 0e20 	rsb	lr, r2, #32
 80233c8:	2000      	movs	r0, #0
 80233ca:	681e      	ldr	r6, [r3, #0]
 80233cc:	468a      	mov	sl, r1
 80233ce:	4096      	lsls	r6, r2
 80233d0:	4330      	orrs	r0, r6
 80233d2:	f84a 0b04 	str.w	r0, [sl], #4
 80233d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80233da:	459c      	cmp	ip, r3
 80233dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80233e0:	d814      	bhi.n	802340c <__lshift+0x94>
 80233e2:	6048      	str	r0, [r1, #4]
 80233e4:	b108      	cbz	r0, 80233ea <__lshift+0x72>
 80233e6:	f109 0502 	add.w	r5, r9, #2
 80233ea:	3d01      	subs	r5, #1
 80233ec:	4638      	mov	r0, r7
 80233ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80233f2:	4621      	mov	r1, r4
 80233f4:	f7ff fe32 	bl	802305c <_Bfree>
 80233f8:	4640      	mov	r0, r8
 80233fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233fe:	3101      	adds	r1, #1
 8023400:	005b      	lsls	r3, r3, #1
 8023402:	e7c7      	b.n	8023394 <__lshift+0x1c>
 8023404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023408:	3301      	adds	r3, #1
 802340a:	e7cd      	b.n	80233a8 <__lshift+0x30>
 802340c:	4651      	mov	r1, sl
 802340e:	e7dc      	b.n	80233ca <__lshift+0x52>
 8023410:	3904      	subs	r1, #4
 8023412:	f853 2b04 	ldr.w	r2, [r3], #4
 8023416:	f841 2f04 	str.w	r2, [r1, #4]!
 802341a:	459c      	cmp	ip, r3
 802341c:	d8f9      	bhi.n	8023412 <__lshift+0x9a>
 802341e:	e7e4      	b.n	80233ea <__lshift+0x72>

08023420 <__mcmp>:
 8023420:	6903      	ldr	r3, [r0, #16]
 8023422:	690a      	ldr	r2, [r1, #16]
 8023424:	1a9b      	subs	r3, r3, r2
 8023426:	b530      	push	{r4, r5, lr}
 8023428:	d10c      	bne.n	8023444 <__mcmp+0x24>
 802342a:	0092      	lsls	r2, r2, #2
 802342c:	3014      	adds	r0, #20
 802342e:	3114      	adds	r1, #20
 8023430:	1884      	adds	r4, r0, r2
 8023432:	4411      	add	r1, r2
 8023434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8023438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802343c:	4295      	cmp	r5, r2
 802343e:	d003      	beq.n	8023448 <__mcmp+0x28>
 8023440:	d305      	bcc.n	802344e <__mcmp+0x2e>
 8023442:	2301      	movs	r3, #1
 8023444:	4618      	mov	r0, r3
 8023446:	bd30      	pop	{r4, r5, pc}
 8023448:	42a0      	cmp	r0, r4
 802344a:	d3f3      	bcc.n	8023434 <__mcmp+0x14>
 802344c:	e7fa      	b.n	8023444 <__mcmp+0x24>
 802344e:	f04f 33ff 	mov.w	r3, #4294967295
 8023452:	e7f7      	b.n	8023444 <__mcmp+0x24>

08023454 <__mdiff>:
 8023454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023458:	460d      	mov	r5, r1
 802345a:	4607      	mov	r7, r0
 802345c:	4611      	mov	r1, r2
 802345e:	4628      	mov	r0, r5
 8023460:	4614      	mov	r4, r2
 8023462:	f7ff ffdd 	bl	8023420 <__mcmp>
 8023466:	1e06      	subs	r6, r0, #0
 8023468:	d108      	bne.n	802347c <__mdiff+0x28>
 802346a:	4631      	mov	r1, r6
 802346c:	4638      	mov	r0, r7
 802346e:	f7ff fdc1 	bl	8022ff4 <_Balloc>
 8023472:	2301      	movs	r3, #1
 8023474:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8023478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802347c:	bfa4      	itt	ge
 802347e:	4623      	movge	r3, r4
 8023480:	462c      	movge	r4, r5
 8023482:	4638      	mov	r0, r7
 8023484:	6861      	ldr	r1, [r4, #4]
 8023486:	bfa6      	itte	ge
 8023488:	461d      	movge	r5, r3
 802348a:	2600      	movge	r6, #0
 802348c:	2601      	movlt	r6, #1
 802348e:	f7ff fdb1 	bl	8022ff4 <_Balloc>
 8023492:	692b      	ldr	r3, [r5, #16]
 8023494:	60c6      	str	r6, [r0, #12]
 8023496:	6926      	ldr	r6, [r4, #16]
 8023498:	f105 0914 	add.w	r9, r5, #20
 802349c:	f104 0214 	add.w	r2, r4, #20
 80234a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80234a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80234a8:	f100 0514 	add.w	r5, r0, #20
 80234ac:	f04f 0e00 	mov.w	lr, #0
 80234b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80234b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80234b8:	fa1e f18a 	uxtah	r1, lr, sl
 80234bc:	b2a3      	uxth	r3, r4
 80234be:	1ac9      	subs	r1, r1, r3
 80234c0:	0c23      	lsrs	r3, r4, #16
 80234c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80234c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80234ca:	b289      	uxth	r1, r1
 80234cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80234d0:	45c8      	cmp	r8, r9
 80234d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80234d6:	4694      	mov	ip, r2
 80234d8:	f845 3b04 	str.w	r3, [r5], #4
 80234dc:	d8e8      	bhi.n	80234b0 <__mdiff+0x5c>
 80234de:	45bc      	cmp	ip, r7
 80234e0:	d304      	bcc.n	80234ec <__mdiff+0x98>
 80234e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80234e6:	b183      	cbz	r3, 802350a <__mdiff+0xb6>
 80234e8:	6106      	str	r6, [r0, #16]
 80234ea:	e7c5      	b.n	8023478 <__mdiff+0x24>
 80234ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80234f0:	fa1e f381 	uxtah	r3, lr, r1
 80234f4:	141a      	asrs	r2, r3, #16
 80234f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80234fa:	b29b      	uxth	r3, r3
 80234fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023500:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8023504:	f845 3b04 	str.w	r3, [r5], #4
 8023508:	e7e9      	b.n	80234de <__mdiff+0x8a>
 802350a:	3e01      	subs	r6, #1
 802350c:	e7e9      	b.n	80234e2 <__mdiff+0x8e>

0802350e <__d2b>:
 802350e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023512:	460e      	mov	r6, r1
 8023514:	2101      	movs	r1, #1
 8023516:	ec59 8b10 	vmov	r8, r9, d0
 802351a:	4615      	mov	r5, r2
 802351c:	f7ff fd6a 	bl	8022ff4 <_Balloc>
 8023520:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8023524:	4607      	mov	r7, r0
 8023526:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802352a:	bb34      	cbnz	r4, 802357a <__d2b+0x6c>
 802352c:	9301      	str	r3, [sp, #4]
 802352e:	f1b8 0300 	subs.w	r3, r8, #0
 8023532:	d027      	beq.n	8023584 <__d2b+0x76>
 8023534:	a802      	add	r0, sp, #8
 8023536:	f840 3d08 	str.w	r3, [r0, #-8]!
 802353a:	f7ff fe00 	bl	802313e <__lo0bits>
 802353e:	9900      	ldr	r1, [sp, #0]
 8023540:	b1f0      	cbz	r0, 8023580 <__d2b+0x72>
 8023542:	9a01      	ldr	r2, [sp, #4]
 8023544:	f1c0 0320 	rsb	r3, r0, #32
 8023548:	fa02 f303 	lsl.w	r3, r2, r3
 802354c:	430b      	orrs	r3, r1
 802354e:	40c2      	lsrs	r2, r0
 8023550:	617b      	str	r3, [r7, #20]
 8023552:	9201      	str	r2, [sp, #4]
 8023554:	9b01      	ldr	r3, [sp, #4]
 8023556:	61bb      	str	r3, [r7, #24]
 8023558:	2b00      	cmp	r3, #0
 802355a:	bf14      	ite	ne
 802355c:	2102      	movne	r1, #2
 802355e:	2101      	moveq	r1, #1
 8023560:	6139      	str	r1, [r7, #16]
 8023562:	b1c4      	cbz	r4, 8023596 <__d2b+0x88>
 8023564:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8023568:	4404      	add	r4, r0
 802356a:	6034      	str	r4, [r6, #0]
 802356c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8023570:	6028      	str	r0, [r5, #0]
 8023572:	4638      	mov	r0, r7
 8023574:	b003      	add	sp, #12
 8023576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802357e:	e7d5      	b.n	802352c <__d2b+0x1e>
 8023580:	6179      	str	r1, [r7, #20]
 8023582:	e7e7      	b.n	8023554 <__d2b+0x46>
 8023584:	a801      	add	r0, sp, #4
 8023586:	f7ff fdda 	bl	802313e <__lo0bits>
 802358a:	9b01      	ldr	r3, [sp, #4]
 802358c:	617b      	str	r3, [r7, #20]
 802358e:	2101      	movs	r1, #1
 8023590:	6139      	str	r1, [r7, #16]
 8023592:	3020      	adds	r0, #32
 8023594:	e7e5      	b.n	8023562 <__d2b+0x54>
 8023596:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802359a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802359e:	6030      	str	r0, [r6, #0]
 80235a0:	6918      	ldr	r0, [r3, #16]
 80235a2:	f7ff fdad 	bl	8023100 <__hi0bits>
 80235a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80235aa:	e7e1      	b.n	8023570 <__d2b+0x62>

080235ac <_calloc_r>:
 80235ac:	b538      	push	{r3, r4, r5, lr}
 80235ae:	fb02 f401 	mul.w	r4, r2, r1
 80235b2:	4621      	mov	r1, r4
 80235b4:	f7fc fb5c 	bl	801fc70 <_malloc_r>
 80235b8:	4605      	mov	r5, r0
 80235ba:	b118      	cbz	r0, 80235c4 <_calloc_r+0x18>
 80235bc:	4622      	mov	r2, r4
 80235be:	2100      	movs	r1, #0
 80235c0:	f7fc f86b 	bl	801f69a <memset>
 80235c4:	4628      	mov	r0, r5
 80235c6:	bd38      	pop	{r3, r4, r5, pc}

080235c8 <_realloc_r>:
 80235c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235ca:	4607      	mov	r7, r0
 80235cc:	4614      	mov	r4, r2
 80235ce:	460e      	mov	r6, r1
 80235d0:	b921      	cbnz	r1, 80235dc <_realloc_r+0x14>
 80235d2:	4611      	mov	r1, r2
 80235d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80235d8:	f7fc bb4a 	b.w	801fc70 <_malloc_r>
 80235dc:	b922      	cbnz	r2, 80235e8 <_realloc_r+0x20>
 80235de:	f7fc faf9 	bl	801fbd4 <_free_r>
 80235e2:	4625      	mov	r5, r4
 80235e4:	4628      	mov	r0, r5
 80235e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80235e8:	f000 fe80 	bl	80242ec <_malloc_usable_size_r>
 80235ec:	42a0      	cmp	r0, r4
 80235ee:	d20f      	bcs.n	8023610 <_realloc_r+0x48>
 80235f0:	4621      	mov	r1, r4
 80235f2:	4638      	mov	r0, r7
 80235f4:	f7fc fb3c 	bl	801fc70 <_malloc_r>
 80235f8:	4605      	mov	r5, r0
 80235fa:	2800      	cmp	r0, #0
 80235fc:	d0f2      	beq.n	80235e4 <_realloc_r+0x1c>
 80235fe:	4631      	mov	r1, r6
 8023600:	4622      	mov	r2, r4
 8023602:	f7fc f826 	bl	801f652 <memcpy>
 8023606:	4631      	mov	r1, r6
 8023608:	4638      	mov	r0, r7
 802360a:	f7fc fae3 	bl	801fbd4 <_free_r>
 802360e:	e7e9      	b.n	80235e4 <_realloc_r+0x1c>
 8023610:	4635      	mov	r5, r6
 8023612:	e7e7      	b.n	80235e4 <_realloc_r+0x1c>

08023614 <__ssputs_r>:
 8023614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023618:	688e      	ldr	r6, [r1, #8]
 802361a:	429e      	cmp	r6, r3
 802361c:	4682      	mov	sl, r0
 802361e:	460c      	mov	r4, r1
 8023620:	4690      	mov	r8, r2
 8023622:	4699      	mov	r9, r3
 8023624:	d837      	bhi.n	8023696 <__ssputs_r+0x82>
 8023626:	898a      	ldrh	r2, [r1, #12]
 8023628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802362c:	d031      	beq.n	8023692 <__ssputs_r+0x7e>
 802362e:	6825      	ldr	r5, [r4, #0]
 8023630:	6909      	ldr	r1, [r1, #16]
 8023632:	1a6f      	subs	r7, r5, r1
 8023634:	6965      	ldr	r5, [r4, #20]
 8023636:	2302      	movs	r3, #2
 8023638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802363c:	fb95 f5f3 	sdiv	r5, r5, r3
 8023640:	f109 0301 	add.w	r3, r9, #1
 8023644:	443b      	add	r3, r7
 8023646:	429d      	cmp	r5, r3
 8023648:	bf38      	it	cc
 802364a:	461d      	movcc	r5, r3
 802364c:	0553      	lsls	r3, r2, #21
 802364e:	d530      	bpl.n	80236b2 <__ssputs_r+0x9e>
 8023650:	4629      	mov	r1, r5
 8023652:	f7fc fb0d 	bl	801fc70 <_malloc_r>
 8023656:	4606      	mov	r6, r0
 8023658:	b950      	cbnz	r0, 8023670 <__ssputs_r+0x5c>
 802365a:	230c      	movs	r3, #12
 802365c:	f8ca 3000 	str.w	r3, [sl]
 8023660:	89a3      	ldrh	r3, [r4, #12]
 8023662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023666:	81a3      	strh	r3, [r4, #12]
 8023668:	f04f 30ff 	mov.w	r0, #4294967295
 802366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023670:	463a      	mov	r2, r7
 8023672:	6921      	ldr	r1, [r4, #16]
 8023674:	f7fb ffed 	bl	801f652 <memcpy>
 8023678:	89a3      	ldrh	r3, [r4, #12]
 802367a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023682:	81a3      	strh	r3, [r4, #12]
 8023684:	6126      	str	r6, [r4, #16]
 8023686:	6165      	str	r5, [r4, #20]
 8023688:	443e      	add	r6, r7
 802368a:	1bed      	subs	r5, r5, r7
 802368c:	6026      	str	r6, [r4, #0]
 802368e:	60a5      	str	r5, [r4, #8]
 8023690:	464e      	mov	r6, r9
 8023692:	454e      	cmp	r6, r9
 8023694:	d900      	bls.n	8023698 <__ssputs_r+0x84>
 8023696:	464e      	mov	r6, r9
 8023698:	4632      	mov	r2, r6
 802369a:	4641      	mov	r1, r8
 802369c:	6820      	ldr	r0, [r4, #0]
 802369e:	f7fb ffe3 	bl	801f668 <memmove>
 80236a2:	68a3      	ldr	r3, [r4, #8]
 80236a4:	1b9b      	subs	r3, r3, r6
 80236a6:	60a3      	str	r3, [r4, #8]
 80236a8:	6823      	ldr	r3, [r4, #0]
 80236aa:	441e      	add	r6, r3
 80236ac:	6026      	str	r6, [r4, #0]
 80236ae:	2000      	movs	r0, #0
 80236b0:	e7dc      	b.n	802366c <__ssputs_r+0x58>
 80236b2:	462a      	mov	r2, r5
 80236b4:	f7ff ff88 	bl	80235c8 <_realloc_r>
 80236b8:	4606      	mov	r6, r0
 80236ba:	2800      	cmp	r0, #0
 80236bc:	d1e2      	bne.n	8023684 <__ssputs_r+0x70>
 80236be:	6921      	ldr	r1, [r4, #16]
 80236c0:	4650      	mov	r0, sl
 80236c2:	f7fc fa87 	bl	801fbd4 <_free_r>
 80236c6:	e7c8      	b.n	802365a <__ssputs_r+0x46>

080236c8 <_svfiprintf_r>:
 80236c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236cc:	461d      	mov	r5, r3
 80236ce:	898b      	ldrh	r3, [r1, #12]
 80236d0:	061f      	lsls	r7, r3, #24
 80236d2:	b09d      	sub	sp, #116	; 0x74
 80236d4:	4680      	mov	r8, r0
 80236d6:	460c      	mov	r4, r1
 80236d8:	4616      	mov	r6, r2
 80236da:	d50f      	bpl.n	80236fc <_svfiprintf_r+0x34>
 80236dc:	690b      	ldr	r3, [r1, #16]
 80236de:	b96b      	cbnz	r3, 80236fc <_svfiprintf_r+0x34>
 80236e0:	2140      	movs	r1, #64	; 0x40
 80236e2:	f7fc fac5 	bl	801fc70 <_malloc_r>
 80236e6:	6020      	str	r0, [r4, #0]
 80236e8:	6120      	str	r0, [r4, #16]
 80236ea:	b928      	cbnz	r0, 80236f8 <_svfiprintf_r+0x30>
 80236ec:	230c      	movs	r3, #12
 80236ee:	f8c8 3000 	str.w	r3, [r8]
 80236f2:	f04f 30ff 	mov.w	r0, #4294967295
 80236f6:	e0c8      	b.n	802388a <_svfiprintf_r+0x1c2>
 80236f8:	2340      	movs	r3, #64	; 0x40
 80236fa:	6163      	str	r3, [r4, #20]
 80236fc:	2300      	movs	r3, #0
 80236fe:	9309      	str	r3, [sp, #36]	; 0x24
 8023700:	2320      	movs	r3, #32
 8023702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023706:	2330      	movs	r3, #48	; 0x30
 8023708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802370c:	9503      	str	r5, [sp, #12]
 802370e:	f04f 0b01 	mov.w	fp, #1
 8023712:	4637      	mov	r7, r6
 8023714:	463d      	mov	r5, r7
 8023716:	f815 3b01 	ldrb.w	r3, [r5], #1
 802371a:	b10b      	cbz	r3, 8023720 <_svfiprintf_r+0x58>
 802371c:	2b25      	cmp	r3, #37	; 0x25
 802371e:	d13e      	bne.n	802379e <_svfiprintf_r+0xd6>
 8023720:	ebb7 0a06 	subs.w	sl, r7, r6
 8023724:	d00b      	beq.n	802373e <_svfiprintf_r+0x76>
 8023726:	4653      	mov	r3, sl
 8023728:	4632      	mov	r2, r6
 802372a:	4621      	mov	r1, r4
 802372c:	4640      	mov	r0, r8
 802372e:	f7ff ff71 	bl	8023614 <__ssputs_r>
 8023732:	3001      	adds	r0, #1
 8023734:	f000 80a4 	beq.w	8023880 <_svfiprintf_r+0x1b8>
 8023738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802373a:	4453      	add	r3, sl
 802373c:	9309      	str	r3, [sp, #36]	; 0x24
 802373e:	783b      	ldrb	r3, [r7, #0]
 8023740:	2b00      	cmp	r3, #0
 8023742:	f000 809d 	beq.w	8023880 <_svfiprintf_r+0x1b8>
 8023746:	2300      	movs	r3, #0
 8023748:	f04f 32ff 	mov.w	r2, #4294967295
 802374c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023750:	9304      	str	r3, [sp, #16]
 8023752:	9307      	str	r3, [sp, #28]
 8023754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023758:	931a      	str	r3, [sp, #104]	; 0x68
 802375a:	462f      	mov	r7, r5
 802375c:	2205      	movs	r2, #5
 802375e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023762:	4850      	ldr	r0, [pc, #320]	; (80238a4 <_svfiprintf_r+0x1dc>)
 8023764:	f7dc fd84 	bl	8000270 <memchr>
 8023768:	9b04      	ldr	r3, [sp, #16]
 802376a:	b9d0      	cbnz	r0, 80237a2 <_svfiprintf_r+0xda>
 802376c:	06d9      	lsls	r1, r3, #27
 802376e:	bf44      	itt	mi
 8023770:	2220      	movmi	r2, #32
 8023772:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023776:	071a      	lsls	r2, r3, #28
 8023778:	bf44      	itt	mi
 802377a:	222b      	movmi	r2, #43	; 0x2b
 802377c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023780:	782a      	ldrb	r2, [r5, #0]
 8023782:	2a2a      	cmp	r2, #42	; 0x2a
 8023784:	d015      	beq.n	80237b2 <_svfiprintf_r+0xea>
 8023786:	9a07      	ldr	r2, [sp, #28]
 8023788:	462f      	mov	r7, r5
 802378a:	2000      	movs	r0, #0
 802378c:	250a      	movs	r5, #10
 802378e:	4639      	mov	r1, r7
 8023790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023794:	3b30      	subs	r3, #48	; 0x30
 8023796:	2b09      	cmp	r3, #9
 8023798:	d94d      	bls.n	8023836 <_svfiprintf_r+0x16e>
 802379a:	b1b8      	cbz	r0, 80237cc <_svfiprintf_r+0x104>
 802379c:	e00f      	b.n	80237be <_svfiprintf_r+0xf6>
 802379e:	462f      	mov	r7, r5
 80237a0:	e7b8      	b.n	8023714 <_svfiprintf_r+0x4c>
 80237a2:	4a40      	ldr	r2, [pc, #256]	; (80238a4 <_svfiprintf_r+0x1dc>)
 80237a4:	1a80      	subs	r0, r0, r2
 80237a6:	fa0b f000 	lsl.w	r0, fp, r0
 80237aa:	4318      	orrs	r0, r3
 80237ac:	9004      	str	r0, [sp, #16]
 80237ae:	463d      	mov	r5, r7
 80237b0:	e7d3      	b.n	802375a <_svfiprintf_r+0x92>
 80237b2:	9a03      	ldr	r2, [sp, #12]
 80237b4:	1d11      	adds	r1, r2, #4
 80237b6:	6812      	ldr	r2, [r2, #0]
 80237b8:	9103      	str	r1, [sp, #12]
 80237ba:	2a00      	cmp	r2, #0
 80237bc:	db01      	blt.n	80237c2 <_svfiprintf_r+0xfa>
 80237be:	9207      	str	r2, [sp, #28]
 80237c0:	e004      	b.n	80237cc <_svfiprintf_r+0x104>
 80237c2:	4252      	negs	r2, r2
 80237c4:	f043 0302 	orr.w	r3, r3, #2
 80237c8:	9207      	str	r2, [sp, #28]
 80237ca:	9304      	str	r3, [sp, #16]
 80237cc:	783b      	ldrb	r3, [r7, #0]
 80237ce:	2b2e      	cmp	r3, #46	; 0x2e
 80237d0:	d10c      	bne.n	80237ec <_svfiprintf_r+0x124>
 80237d2:	787b      	ldrb	r3, [r7, #1]
 80237d4:	2b2a      	cmp	r3, #42	; 0x2a
 80237d6:	d133      	bne.n	8023840 <_svfiprintf_r+0x178>
 80237d8:	9b03      	ldr	r3, [sp, #12]
 80237da:	1d1a      	adds	r2, r3, #4
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	9203      	str	r2, [sp, #12]
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	bfb8      	it	lt
 80237e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80237e8:	3702      	adds	r7, #2
 80237ea:	9305      	str	r3, [sp, #20]
 80237ec:	4d2e      	ldr	r5, [pc, #184]	; (80238a8 <_svfiprintf_r+0x1e0>)
 80237ee:	7839      	ldrb	r1, [r7, #0]
 80237f0:	2203      	movs	r2, #3
 80237f2:	4628      	mov	r0, r5
 80237f4:	f7dc fd3c 	bl	8000270 <memchr>
 80237f8:	b138      	cbz	r0, 802380a <_svfiprintf_r+0x142>
 80237fa:	2340      	movs	r3, #64	; 0x40
 80237fc:	1b40      	subs	r0, r0, r5
 80237fe:	fa03 f000 	lsl.w	r0, r3, r0
 8023802:	9b04      	ldr	r3, [sp, #16]
 8023804:	4303      	orrs	r3, r0
 8023806:	3701      	adds	r7, #1
 8023808:	9304      	str	r3, [sp, #16]
 802380a:	7839      	ldrb	r1, [r7, #0]
 802380c:	4827      	ldr	r0, [pc, #156]	; (80238ac <_svfiprintf_r+0x1e4>)
 802380e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023812:	2206      	movs	r2, #6
 8023814:	1c7e      	adds	r6, r7, #1
 8023816:	f7dc fd2b 	bl	8000270 <memchr>
 802381a:	2800      	cmp	r0, #0
 802381c:	d038      	beq.n	8023890 <_svfiprintf_r+0x1c8>
 802381e:	4b24      	ldr	r3, [pc, #144]	; (80238b0 <_svfiprintf_r+0x1e8>)
 8023820:	bb13      	cbnz	r3, 8023868 <_svfiprintf_r+0x1a0>
 8023822:	9b03      	ldr	r3, [sp, #12]
 8023824:	3307      	adds	r3, #7
 8023826:	f023 0307 	bic.w	r3, r3, #7
 802382a:	3308      	adds	r3, #8
 802382c:	9303      	str	r3, [sp, #12]
 802382e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023830:	444b      	add	r3, r9
 8023832:	9309      	str	r3, [sp, #36]	; 0x24
 8023834:	e76d      	b.n	8023712 <_svfiprintf_r+0x4a>
 8023836:	fb05 3202 	mla	r2, r5, r2, r3
 802383a:	2001      	movs	r0, #1
 802383c:	460f      	mov	r7, r1
 802383e:	e7a6      	b.n	802378e <_svfiprintf_r+0xc6>
 8023840:	2300      	movs	r3, #0
 8023842:	3701      	adds	r7, #1
 8023844:	9305      	str	r3, [sp, #20]
 8023846:	4619      	mov	r1, r3
 8023848:	250a      	movs	r5, #10
 802384a:	4638      	mov	r0, r7
 802384c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023850:	3a30      	subs	r2, #48	; 0x30
 8023852:	2a09      	cmp	r2, #9
 8023854:	d903      	bls.n	802385e <_svfiprintf_r+0x196>
 8023856:	2b00      	cmp	r3, #0
 8023858:	d0c8      	beq.n	80237ec <_svfiprintf_r+0x124>
 802385a:	9105      	str	r1, [sp, #20]
 802385c:	e7c6      	b.n	80237ec <_svfiprintf_r+0x124>
 802385e:	fb05 2101 	mla	r1, r5, r1, r2
 8023862:	2301      	movs	r3, #1
 8023864:	4607      	mov	r7, r0
 8023866:	e7f0      	b.n	802384a <_svfiprintf_r+0x182>
 8023868:	ab03      	add	r3, sp, #12
 802386a:	9300      	str	r3, [sp, #0]
 802386c:	4622      	mov	r2, r4
 802386e:	4b11      	ldr	r3, [pc, #68]	; (80238b4 <_svfiprintf_r+0x1ec>)
 8023870:	a904      	add	r1, sp, #16
 8023872:	4640      	mov	r0, r8
 8023874:	f7fc fadc 	bl	801fe30 <_printf_float>
 8023878:	f1b0 3fff 	cmp.w	r0, #4294967295
 802387c:	4681      	mov	r9, r0
 802387e:	d1d6      	bne.n	802382e <_svfiprintf_r+0x166>
 8023880:	89a3      	ldrh	r3, [r4, #12]
 8023882:	065b      	lsls	r3, r3, #25
 8023884:	f53f af35 	bmi.w	80236f2 <_svfiprintf_r+0x2a>
 8023888:	9809      	ldr	r0, [sp, #36]	; 0x24
 802388a:	b01d      	add	sp, #116	; 0x74
 802388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023890:	ab03      	add	r3, sp, #12
 8023892:	9300      	str	r3, [sp, #0]
 8023894:	4622      	mov	r2, r4
 8023896:	4b07      	ldr	r3, [pc, #28]	; (80238b4 <_svfiprintf_r+0x1ec>)
 8023898:	a904      	add	r1, sp, #16
 802389a:	4640      	mov	r0, r8
 802389c:	f7fc fd6a 	bl	8020374 <_printf_i>
 80238a0:	e7ea      	b.n	8023878 <_svfiprintf_r+0x1b0>
 80238a2:	bf00      	nop
 80238a4:	0803fd64 	.word	0x0803fd64
 80238a8:	0803fd6a 	.word	0x0803fd6a
 80238ac:	0803fd6e 	.word	0x0803fd6e
 80238b0:	0801fe31 	.word	0x0801fe31
 80238b4:	08023615 	.word	0x08023615

080238b8 <_sungetc_r>:
 80238b8:	b538      	push	{r3, r4, r5, lr}
 80238ba:	1c4b      	adds	r3, r1, #1
 80238bc:	4614      	mov	r4, r2
 80238be:	d103      	bne.n	80238c8 <_sungetc_r+0x10>
 80238c0:	f04f 35ff 	mov.w	r5, #4294967295
 80238c4:	4628      	mov	r0, r5
 80238c6:	bd38      	pop	{r3, r4, r5, pc}
 80238c8:	8993      	ldrh	r3, [r2, #12]
 80238ca:	f023 0320 	bic.w	r3, r3, #32
 80238ce:	8193      	strh	r3, [r2, #12]
 80238d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80238d2:	6852      	ldr	r2, [r2, #4]
 80238d4:	b2cd      	uxtb	r5, r1
 80238d6:	b18b      	cbz	r3, 80238fc <_sungetc_r+0x44>
 80238d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80238da:	4293      	cmp	r3, r2
 80238dc:	dd08      	ble.n	80238f0 <_sungetc_r+0x38>
 80238de:	6823      	ldr	r3, [r4, #0]
 80238e0:	1e5a      	subs	r2, r3, #1
 80238e2:	6022      	str	r2, [r4, #0]
 80238e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80238e8:	6863      	ldr	r3, [r4, #4]
 80238ea:	3301      	adds	r3, #1
 80238ec:	6063      	str	r3, [r4, #4]
 80238ee:	e7e9      	b.n	80238c4 <_sungetc_r+0xc>
 80238f0:	4621      	mov	r1, r4
 80238f2:	f000 fc9d 	bl	8024230 <__submore>
 80238f6:	2800      	cmp	r0, #0
 80238f8:	d0f1      	beq.n	80238de <_sungetc_r+0x26>
 80238fa:	e7e1      	b.n	80238c0 <_sungetc_r+0x8>
 80238fc:	6921      	ldr	r1, [r4, #16]
 80238fe:	6823      	ldr	r3, [r4, #0]
 8023900:	b151      	cbz	r1, 8023918 <_sungetc_r+0x60>
 8023902:	4299      	cmp	r1, r3
 8023904:	d208      	bcs.n	8023918 <_sungetc_r+0x60>
 8023906:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802390a:	42a9      	cmp	r1, r5
 802390c:	d104      	bne.n	8023918 <_sungetc_r+0x60>
 802390e:	3b01      	subs	r3, #1
 8023910:	3201      	adds	r2, #1
 8023912:	6023      	str	r3, [r4, #0]
 8023914:	6062      	str	r2, [r4, #4]
 8023916:	e7d5      	b.n	80238c4 <_sungetc_r+0xc>
 8023918:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802391c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023920:	6363      	str	r3, [r4, #52]	; 0x34
 8023922:	2303      	movs	r3, #3
 8023924:	63a3      	str	r3, [r4, #56]	; 0x38
 8023926:	4623      	mov	r3, r4
 8023928:	f803 5f46 	strb.w	r5, [r3, #70]!
 802392c:	6023      	str	r3, [r4, #0]
 802392e:	2301      	movs	r3, #1
 8023930:	e7dc      	b.n	80238ec <_sungetc_r+0x34>

08023932 <__ssrefill_r>:
 8023932:	b510      	push	{r4, lr}
 8023934:	460c      	mov	r4, r1
 8023936:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023938:	b169      	cbz	r1, 8023956 <__ssrefill_r+0x24>
 802393a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802393e:	4299      	cmp	r1, r3
 8023940:	d001      	beq.n	8023946 <__ssrefill_r+0x14>
 8023942:	f7fc f947 	bl	801fbd4 <_free_r>
 8023946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023948:	6063      	str	r3, [r4, #4]
 802394a:	2000      	movs	r0, #0
 802394c:	6360      	str	r0, [r4, #52]	; 0x34
 802394e:	b113      	cbz	r3, 8023956 <__ssrefill_r+0x24>
 8023950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023952:	6023      	str	r3, [r4, #0]
 8023954:	bd10      	pop	{r4, pc}
 8023956:	6923      	ldr	r3, [r4, #16]
 8023958:	6023      	str	r3, [r4, #0]
 802395a:	2300      	movs	r3, #0
 802395c:	6063      	str	r3, [r4, #4]
 802395e:	89a3      	ldrh	r3, [r4, #12]
 8023960:	f043 0320 	orr.w	r3, r3, #32
 8023964:	81a3      	strh	r3, [r4, #12]
 8023966:	f04f 30ff 	mov.w	r0, #4294967295
 802396a:	e7f3      	b.n	8023954 <__ssrefill_r+0x22>

0802396c <__ssvfiscanf_r>:
 802396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023970:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023974:	460c      	mov	r4, r1
 8023976:	2100      	movs	r1, #0
 8023978:	9144      	str	r1, [sp, #272]	; 0x110
 802397a:	9145      	str	r1, [sp, #276]	; 0x114
 802397c:	499f      	ldr	r1, [pc, #636]	; (8023bfc <__ssvfiscanf_r+0x290>)
 802397e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023980:	f10d 0804 	add.w	r8, sp, #4
 8023984:	499e      	ldr	r1, [pc, #632]	; (8023c00 <__ssvfiscanf_r+0x294>)
 8023986:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8023c04 <__ssvfiscanf_r+0x298>
 802398a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802398e:	4606      	mov	r6, r0
 8023990:	4692      	mov	sl, r2
 8023992:	91a1      	str	r1, [sp, #644]	; 0x284
 8023994:	9300      	str	r3, [sp, #0]
 8023996:	270a      	movs	r7, #10
 8023998:	f89a 3000 	ldrb.w	r3, [sl]
 802399c:	2b00      	cmp	r3, #0
 802399e:	f000 812a 	beq.w	8023bf6 <__ssvfiscanf_r+0x28a>
 80239a2:	4655      	mov	r5, sl
 80239a4:	f7fb fe16 	bl	801f5d4 <__locale_ctype_ptr>
 80239a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80239ac:	4458      	add	r0, fp
 80239ae:	7843      	ldrb	r3, [r0, #1]
 80239b0:	f013 0308 	ands.w	r3, r3, #8
 80239b4:	d01c      	beq.n	80239f0 <__ssvfiscanf_r+0x84>
 80239b6:	6863      	ldr	r3, [r4, #4]
 80239b8:	2b00      	cmp	r3, #0
 80239ba:	dd12      	ble.n	80239e2 <__ssvfiscanf_r+0x76>
 80239bc:	f7fb fe0a 	bl	801f5d4 <__locale_ctype_ptr>
 80239c0:	6823      	ldr	r3, [r4, #0]
 80239c2:	781a      	ldrb	r2, [r3, #0]
 80239c4:	4410      	add	r0, r2
 80239c6:	7842      	ldrb	r2, [r0, #1]
 80239c8:	0712      	lsls	r2, r2, #28
 80239ca:	d401      	bmi.n	80239d0 <__ssvfiscanf_r+0x64>
 80239cc:	46aa      	mov	sl, r5
 80239ce:	e7e3      	b.n	8023998 <__ssvfiscanf_r+0x2c>
 80239d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80239d2:	3201      	adds	r2, #1
 80239d4:	9245      	str	r2, [sp, #276]	; 0x114
 80239d6:	6862      	ldr	r2, [r4, #4]
 80239d8:	3301      	adds	r3, #1
 80239da:	3a01      	subs	r2, #1
 80239dc:	6062      	str	r2, [r4, #4]
 80239de:	6023      	str	r3, [r4, #0]
 80239e0:	e7e9      	b.n	80239b6 <__ssvfiscanf_r+0x4a>
 80239e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80239e4:	4621      	mov	r1, r4
 80239e6:	4630      	mov	r0, r6
 80239e8:	4798      	blx	r3
 80239ea:	2800      	cmp	r0, #0
 80239ec:	d0e6      	beq.n	80239bc <__ssvfiscanf_r+0x50>
 80239ee:	e7ed      	b.n	80239cc <__ssvfiscanf_r+0x60>
 80239f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80239f4:	f040 8082 	bne.w	8023afc <__ssvfiscanf_r+0x190>
 80239f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80239fa:	9341      	str	r3, [sp, #260]	; 0x104
 80239fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8023a00:	2b2a      	cmp	r3, #42	; 0x2a
 8023a02:	d103      	bne.n	8023a0c <__ssvfiscanf_r+0xa0>
 8023a04:	2310      	movs	r3, #16
 8023a06:	9341      	str	r3, [sp, #260]	; 0x104
 8023a08:	f10a 0502 	add.w	r5, sl, #2
 8023a0c:	46aa      	mov	sl, r5
 8023a0e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8023a12:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8023a16:	2a09      	cmp	r2, #9
 8023a18:	d922      	bls.n	8023a60 <__ssvfiscanf_r+0xf4>
 8023a1a:	2203      	movs	r2, #3
 8023a1c:	4879      	ldr	r0, [pc, #484]	; (8023c04 <__ssvfiscanf_r+0x298>)
 8023a1e:	f7dc fc27 	bl	8000270 <memchr>
 8023a22:	b138      	cbz	r0, 8023a34 <__ssvfiscanf_r+0xc8>
 8023a24:	eba0 0309 	sub.w	r3, r0, r9
 8023a28:	2001      	movs	r0, #1
 8023a2a:	4098      	lsls	r0, r3
 8023a2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023a2e:	4318      	orrs	r0, r3
 8023a30:	9041      	str	r0, [sp, #260]	; 0x104
 8023a32:	46aa      	mov	sl, r5
 8023a34:	f89a 3000 	ldrb.w	r3, [sl]
 8023a38:	2b67      	cmp	r3, #103	; 0x67
 8023a3a:	f10a 0501 	add.w	r5, sl, #1
 8023a3e:	d82b      	bhi.n	8023a98 <__ssvfiscanf_r+0x12c>
 8023a40:	2b65      	cmp	r3, #101	; 0x65
 8023a42:	f080 809f 	bcs.w	8023b84 <__ssvfiscanf_r+0x218>
 8023a46:	2b47      	cmp	r3, #71	; 0x47
 8023a48:	d810      	bhi.n	8023a6c <__ssvfiscanf_r+0x100>
 8023a4a:	2b45      	cmp	r3, #69	; 0x45
 8023a4c:	f080 809a 	bcs.w	8023b84 <__ssvfiscanf_r+0x218>
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d06c      	beq.n	8023b2e <__ssvfiscanf_r+0x1c2>
 8023a54:	2b25      	cmp	r3, #37	; 0x25
 8023a56:	d051      	beq.n	8023afc <__ssvfiscanf_r+0x190>
 8023a58:	2303      	movs	r3, #3
 8023a5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8023a5c:	9742      	str	r7, [sp, #264]	; 0x108
 8023a5e:	e027      	b.n	8023ab0 <__ssvfiscanf_r+0x144>
 8023a60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023a62:	fb07 1303 	mla	r3, r7, r3, r1
 8023a66:	3b30      	subs	r3, #48	; 0x30
 8023a68:	9343      	str	r3, [sp, #268]	; 0x10c
 8023a6a:	e7cf      	b.n	8023a0c <__ssvfiscanf_r+0xa0>
 8023a6c:	2b5b      	cmp	r3, #91	; 0x5b
 8023a6e:	d06a      	beq.n	8023b46 <__ssvfiscanf_r+0x1da>
 8023a70:	d80c      	bhi.n	8023a8c <__ssvfiscanf_r+0x120>
 8023a72:	2b58      	cmp	r3, #88	; 0x58
 8023a74:	d1f0      	bne.n	8023a58 <__ssvfiscanf_r+0xec>
 8023a76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023a7c:	9241      	str	r2, [sp, #260]	; 0x104
 8023a7e:	2210      	movs	r2, #16
 8023a80:	9242      	str	r2, [sp, #264]	; 0x108
 8023a82:	2b6e      	cmp	r3, #110	; 0x6e
 8023a84:	bf8c      	ite	hi
 8023a86:	2304      	movhi	r3, #4
 8023a88:	2303      	movls	r3, #3
 8023a8a:	e010      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023a8c:	2b63      	cmp	r3, #99	; 0x63
 8023a8e:	d065      	beq.n	8023b5c <__ssvfiscanf_r+0x1f0>
 8023a90:	2b64      	cmp	r3, #100	; 0x64
 8023a92:	d1e1      	bne.n	8023a58 <__ssvfiscanf_r+0xec>
 8023a94:	9742      	str	r7, [sp, #264]	; 0x108
 8023a96:	e7f4      	b.n	8023a82 <__ssvfiscanf_r+0x116>
 8023a98:	2b70      	cmp	r3, #112	; 0x70
 8023a9a:	d04b      	beq.n	8023b34 <__ssvfiscanf_r+0x1c8>
 8023a9c:	d826      	bhi.n	8023aec <__ssvfiscanf_r+0x180>
 8023a9e:	2b6e      	cmp	r3, #110	; 0x6e
 8023aa0:	d062      	beq.n	8023b68 <__ssvfiscanf_r+0x1fc>
 8023aa2:	d84c      	bhi.n	8023b3e <__ssvfiscanf_r+0x1d2>
 8023aa4:	2b69      	cmp	r3, #105	; 0x69
 8023aa6:	d1d7      	bne.n	8023a58 <__ssvfiscanf_r+0xec>
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	9342      	str	r3, [sp, #264]	; 0x108
 8023aac:	2303      	movs	r3, #3
 8023aae:	9347      	str	r3, [sp, #284]	; 0x11c
 8023ab0:	6863      	ldr	r3, [r4, #4]
 8023ab2:	2b00      	cmp	r3, #0
 8023ab4:	dd68      	ble.n	8023b88 <__ssvfiscanf_r+0x21c>
 8023ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023ab8:	0659      	lsls	r1, r3, #25
 8023aba:	d407      	bmi.n	8023acc <__ssvfiscanf_r+0x160>
 8023abc:	f7fb fd8a 	bl	801f5d4 <__locale_ctype_ptr>
 8023ac0:	6823      	ldr	r3, [r4, #0]
 8023ac2:	781a      	ldrb	r2, [r3, #0]
 8023ac4:	4410      	add	r0, r2
 8023ac6:	7842      	ldrb	r2, [r0, #1]
 8023ac8:	0712      	lsls	r2, r2, #28
 8023aca:	d464      	bmi.n	8023b96 <__ssvfiscanf_r+0x22a>
 8023acc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023ace:	2b02      	cmp	r3, #2
 8023ad0:	dc73      	bgt.n	8023bba <__ssvfiscanf_r+0x24e>
 8023ad2:	466b      	mov	r3, sp
 8023ad4:	4622      	mov	r2, r4
 8023ad6:	a941      	add	r1, sp, #260	; 0x104
 8023ad8:	4630      	mov	r0, r6
 8023ada:	f000 f9d7 	bl	8023e8c <_scanf_chars>
 8023ade:	2801      	cmp	r0, #1
 8023ae0:	f000 8089 	beq.w	8023bf6 <__ssvfiscanf_r+0x28a>
 8023ae4:	2802      	cmp	r0, #2
 8023ae6:	f47f af71 	bne.w	80239cc <__ssvfiscanf_r+0x60>
 8023aea:	e01d      	b.n	8023b28 <__ssvfiscanf_r+0x1bc>
 8023aec:	2b75      	cmp	r3, #117	; 0x75
 8023aee:	d0d1      	beq.n	8023a94 <__ssvfiscanf_r+0x128>
 8023af0:	2b78      	cmp	r3, #120	; 0x78
 8023af2:	d0c0      	beq.n	8023a76 <__ssvfiscanf_r+0x10a>
 8023af4:	2b73      	cmp	r3, #115	; 0x73
 8023af6:	d1af      	bne.n	8023a58 <__ssvfiscanf_r+0xec>
 8023af8:	2302      	movs	r3, #2
 8023afa:	e7d8      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023afc:	6863      	ldr	r3, [r4, #4]
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	dd0c      	ble.n	8023b1c <__ssvfiscanf_r+0x1b0>
 8023b02:	6823      	ldr	r3, [r4, #0]
 8023b04:	781a      	ldrb	r2, [r3, #0]
 8023b06:	455a      	cmp	r2, fp
 8023b08:	d175      	bne.n	8023bf6 <__ssvfiscanf_r+0x28a>
 8023b0a:	3301      	adds	r3, #1
 8023b0c:	6862      	ldr	r2, [r4, #4]
 8023b0e:	6023      	str	r3, [r4, #0]
 8023b10:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8023b12:	3a01      	subs	r2, #1
 8023b14:	3301      	adds	r3, #1
 8023b16:	6062      	str	r2, [r4, #4]
 8023b18:	9345      	str	r3, [sp, #276]	; 0x114
 8023b1a:	e757      	b.n	80239cc <__ssvfiscanf_r+0x60>
 8023b1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023b1e:	4621      	mov	r1, r4
 8023b20:	4630      	mov	r0, r6
 8023b22:	4798      	blx	r3
 8023b24:	2800      	cmp	r0, #0
 8023b26:	d0ec      	beq.n	8023b02 <__ssvfiscanf_r+0x196>
 8023b28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023b2a:	2800      	cmp	r0, #0
 8023b2c:	d159      	bne.n	8023be2 <__ssvfiscanf_r+0x276>
 8023b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8023b32:	e05c      	b.n	8023bee <__ssvfiscanf_r+0x282>
 8023b34:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023b36:	f042 0220 	orr.w	r2, r2, #32
 8023b3a:	9241      	str	r2, [sp, #260]	; 0x104
 8023b3c:	e79b      	b.n	8023a76 <__ssvfiscanf_r+0x10a>
 8023b3e:	2308      	movs	r3, #8
 8023b40:	9342      	str	r3, [sp, #264]	; 0x108
 8023b42:	2304      	movs	r3, #4
 8023b44:	e7b3      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023b46:	4629      	mov	r1, r5
 8023b48:	4640      	mov	r0, r8
 8023b4a:	f000 fb3f 	bl	80241cc <__sccl>
 8023b4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b54:	9341      	str	r3, [sp, #260]	; 0x104
 8023b56:	4605      	mov	r5, r0
 8023b58:	2301      	movs	r3, #1
 8023b5a:	e7a8      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023b5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b62:	9341      	str	r3, [sp, #260]	; 0x104
 8023b64:	2300      	movs	r3, #0
 8023b66:	e7a2      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023b68:	9841      	ldr	r0, [sp, #260]	; 0x104
 8023b6a:	06c3      	lsls	r3, r0, #27
 8023b6c:	f53f af2e 	bmi.w	80239cc <__ssvfiscanf_r+0x60>
 8023b70:	9b00      	ldr	r3, [sp, #0]
 8023b72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023b74:	1d19      	adds	r1, r3, #4
 8023b76:	9100      	str	r1, [sp, #0]
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	07c0      	lsls	r0, r0, #31
 8023b7c:	bf4c      	ite	mi
 8023b7e:	801a      	strhmi	r2, [r3, #0]
 8023b80:	601a      	strpl	r2, [r3, #0]
 8023b82:	e723      	b.n	80239cc <__ssvfiscanf_r+0x60>
 8023b84:	2305      	movs	r3, #5
 8023b86:	e792      	b.n	8023aae <__ssvfiscanf_r+0x142>
 8023b88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023b8a:	4621      	mov	r1, r4
 8023b8c:	4630      	mov	r0, r6
 8023b8e:	4798      	blx	r3
 8023b90:	2800      	cmp	r0, #0
 8023b92:	d090      	beq.n	8023ab6 <__ssvfiscanf_r+0x14a>
 8023b94:	e7c8      	b.n	8023b28 <__ssvfiscanf_r+0x1bc>
 8023b96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023b98:	3201      	adds	r2, #1
 8023b9a:	9245      	str	r2, [sp, #276]	; 0x114
 8023b9c:	6862      	ldr	r2, [r4, #4]
 8023b9e:	3a01      	subs	r2, #1
 8023ba0:	2a00      	cmp	r2, #0
 8023ba2:	6062      	str	r2, [r4, #4]
 8023ba4:	dd02      	ble.n	8023bac <__ssvfiscanf_r+0x240>
 8023ba6:	3301      	adds	r3, #1
 8023ba8:	6023      	str	r3, [r4, #0]
 8023baa:	e787      	b.n	8023abc <__ssvfiscanf_r+0x150>
 8023bac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023bae:	4621      	mov	r1, r4
 8023bb0:	4630      	mov	r0, r6
 8023bb2:	4798      	blx	r3
 8023bb4:	2800      	cmp	r0, #0
 8023bb6:	d081      	beq.n	8023abc <__ssvfiscanf_r+0x150>
 8023bb8:	e7b6      	b.n	8023b28 <__ssvfiscanf_r+0x1bc>
 8023bba:	2b04      	cmp	r3, #4
 8023bbc:	dc06      	bgt.n	8023bcc <__ssvfiscanf_r+0x260>
 8023bbe:	466b      	mov	r3, sp
 8023bc0:	4622      	mov	r2, r4
 8023bc2:	a941      	add	r1, sp, #260	; 0x104
 8023bc4:	4630      	mov	r0, r6
 8023bc6:	f000 f9c5 	bl	8023f54 <_scanf_i>
 8023bca:	e788      	b.n	8023ade <__ssvfiscanf_r+0x172>
 8023bcc:	4b0e      	ldr	r3, [pc, #56]	; (8023c08 <__ssvfiscanf_r+0x29c>)
 8023bce:	2b00      	cmp	r3, #0
 8023bd0:	f43f aefc 	beq.w	80239cc <__ssvfiscanf_r+0x60>
 8023bd4:	466b      	mov	r3, sp
 8023bd6:	4622      	mov	r2, r4
 8023bd8:	a941      	add	r1, sp, #260	; 0x104
 8023bda:	4630      	mov	r0, r6
 8023bdc:	f3af 8000 	nop.w
 8023be0:	e77d      	b.n	8023ade <__ssvfiscanf_r+0x172>
 8023be2:	89a3      	ldrh	r3, [r4, #12]
 8023be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023be8:	bf18      	it	ne
 8023bea:	f04f 30ff 	movne.w	r0, #4294967295
 8023bee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bf6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023bf8:	e7f9      	b.n	8023bee <__ssvfiscanf_r+0x282>
 8023bfa:	bf00      	nop
 8023bfc:	080238b9 	.word	0x080238b9
 8023c00:	08023933 	.word	0x08023933
 8023c04:	0803fd6a 	.word	0x0803fd6a
 8023c08:	00000000 	.word	0x00000000

08023c0c <__sfputc_r>:
 8023c0c:	6893      	ldr	r3, [r2, #8]
 8023c0e:	3b01      	subs	r3, #1
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	b410      	push	{r4}
 8023c14:	6093      	str	r3, [r2, #8]
 8023c16:	da08      	bge.n	8023c2a <__sfputc_r+0x1e>
 8023c18:	6994      	ldr	r4, [r2, #24]
 8023c1a:	42a3      	cmp	r3, r4
 8023c1c:	db01      	blt.n	8023c22 <__sfputc_r+0x16>
 8023c1e:	290a      	cmp	r1, #10
 8023c20:	d103      	bne.n	8023c2a <__sfputc_r+0x1e>
 8023c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023c26:	f7fd bfcd 	b.w	8021bc4 <__swbuf_r>
 8023c2a:	6813      	ldr	r3, [r2, #0]
 8023c2c:	1c58      	adds	r0, r3, #1
 8023c2e:	6010      	str	r0, [r2, #0]
 8023c30:	7019      	strb	r1, [r3, #0]
 8023c32:	4608      	mov	r0, r1
 8023c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023c38:	4770      	bx	lr

08023c3a <__sfputs_r>:
 8023c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c3c:	4606      	mov	r6, r0
 8023c3e:	460f      	mov	r7, r1
 8023c40:	4614      	mov	r4, r2
 8023c42:	18d5      	adds	r5, r2, r3
 8023c44:	42ac      	cmp	r4, r5
 8023c46:	d101      	bne.n	8023c4c <__sfputs_r+0x12>
 8023c48:	2000      	movs	r0, #0
 8023c4a:	e007      	b.n	8023c5c <__sfputs_r+0x22>
 8023c4c:	463a      	mov	r2, r7
 8023c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c52:	4630      	mov	r0, r6
 8023c54:	f7ff ffda 	bl	8023c0c <__sfputc_r>
 8023c58:	1c43      	adds	r3, r0, #1
 8023c5a:	d1f3      	bne.n	8023c44 <__sfputs_r+0xa>
 8023c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023c60 <_vfiprintf_r>:
 8023c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c64:	460c      	mov	r4, r1
 8023c66:	b09d      	sub	sp, #116	; 0x74
 8023c68:	4617      	mov	r7, r2
 8023c6a:	461d      	mov	r5, r3
 8023c6c:	4606      	mov	r6, r0
 8023c6e:	b118      	cbz	r0, 8023c78 <_vfiprintf_r+0x18>
 8023c70:	6983      	ldr	r3, [r0, #24]
 8023c72:	b90b      	cbnz	r3, 8023c78 <_vfiprintf_r+0x18>
 8023c74:	f7fe ffb4 	bl	8022be0 <__sinit>
 8023c78:	4b7c      	ldr	r3, [pc, #496]	; (8023e6c <_vfiprintf_r+0x20c>)
 8023c7a:	429c      	cmp	r4, r3
 8023c7c:	d158      	bne.n	8023d30 <_vfiprintf_r+0xd0>
 8023c7e:	6874      	ldr	r4, [r6, #4]
 8023c80:	89a3      	ldrh	r3, [r4, #12]
 8023c82:	0718      	lsls	r0, r3, #28
 8023c84:	d55e      	bpl.n	8023d44 <_vfiprintf_r+0xe4>
 8023c86:	6923      	ldr	r3, [r4, #16]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d05b      	beq.n	8023d44 <_vfiprintf_r+0xe4>
 8023c8c:	2300      	movs	r3, #0
 8023c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8023c90:	2320      	movs	r3, #32
 8023c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023c96:	2330      	movs	r3, #48	; 0x30
 8023c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023c9c:	9503      	str	r5, [sp, #12]
 8023c9e:	f04f 0b01 	mov.w	fp, #1
 8023ca2:	46b8      	mov	r8, r7
 8023ca4:	4645      	mov	r5, r8
 8023ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023caa:	b10b      	cbz	r3, 8023cb0 <_vfiprintf_r+0x50>
 8023cac:	2b25      	cmp	r3, #37	; 0x25
 8023cae:	d154      	bne.n	8023d5a <_vfiprintf_r+0xfa>
 8023cb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8023cb4:	d00b      	beq.n	8023cce <_vfiprintf_r+0x6e>
 8023cb6:	4653      	mov	r3, sl
 8023cb8:	463a      	mov	r2, r7
 8023cba:	4621      	mov	r1, r4
 8023cbc:	4630      	mov	r0, r6
 8023cbe:	f7ff ffbc 	bl	8023c3a <__sfputs_r>
 8023cc2:	3001      	adds	r0, #1
 8023cc4:	f000 80c2 	beq.w	8023e4c <_vfiprintf_r+0x1ec>
 8023cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cca:	4453      	add	r3, sl
 8023ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8023cce:	f898 3000 	ldrb.w	r3, [r8]
 8023cd2:	2b00      	cmp	r3, #0
 8023cd4:	f000 80ba 	beq.w	8023e4c <_vfiprintf_r+0x1ec>
 8023cd8:	2300      	movs	r3, #0
 8023cda:	f04f 32ff 	mov.w	r2, #4294967295
 8023cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023ce2:	9304      	str	r3, [sp, #16]
 8023ce4:	9307      	str	r3, [sp, #28]
 8023ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023cea:	931a      	str	r3, [sp, #104]	; 0x68
 8023cec:	46a8      	mov	r8, r5
 8023cee:	2205      	movs	r2, #5
 8023cf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8023cf4:	485e      	ldr	r0, [pc, #376]	; (8023e70 <_vfiprintf_r+0x210>)
 8023cf6:	f7dc fabb 	bl	8000270 <memchr>
 8023cfa:	9b04      	ldr	r3, [sp, #16]
 8023cfc:	bb78      	cbnz	r0, 8023d5e <_vfiprintf_r+0xfe>
 8023cfe:	06d9      	lsls	r1, r3, #27
 8023d00:	bf44      	itt	mi
 8023d02:	2220      	movmi	r2, #32
 8023d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023d08:	071a      	lsls	r2, r3, #28
 8023d0a:	bf44      	itt	mi
 8023d0c:	222b      	movmi	r2, #43	; 0x2b
 8023d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023d12:	782a      	ldrb	r2, [r5, #0]
 8023d14:	2a2a      	cmp	r2, #42	; 0x2a
 8023d16:	d02a      	beq.n	8023d6e <_vfiprintf_r+0x10e>
 8023d18:	9a07      	ldr	r2, [sp, #28]
 8023d1a:	46a8      	mov	r8, r5
 8023d1c:	2000      	movs	r0, #0
 8023d1e:	250a      	movs	r5, #10
 8023d20:	4641      	mov	r1, r8
 8023d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023d26:	3b30      	subs	r3, #48	; 0x30
 8023d28:	2b09      	cmp	r3, #9
 8023d2a:	d969      	bls.n	8023e00 <_vfiprintf_r+0x1a0>
 8023d2c:	b360      	cbz	r0, 8023d88 <_vfiprintf_r+0x128>
 8023d2e:	e024      	b.n	8023d7a <_vfiprintf_r+0x11a>
 8023d30:	4b50      	ldr	r3, [pc, #320]	; (8023e74 <_vfiprintf_r+0x214>)
 8023d32:	429c      	cmp	r4, r3
 8023d34:	d101      	bne.n	8023d3a <_vfiprintf_r+0xda>
 8023d36:	68b4      	ldr	r4, [r6, #8]
 8023d38:	e7a2      	b.n	8023c80 <_vfiprintf_r+0x20>
 8023d3a:	4b4f      	ldr	r3, [pc, #316]	; (8023e78 <_vfiprintf_r+0x218>)
 8023d3c:	429c      	cmp	r4, r3
 8023d3e:	bf08      	it	eq
 8023d40:	68f4      	ldreq	r4, [r6, #12]
 8023d42:	e79d      	b.n	8023c80 <_vfiprintf_r+0x20>
 8023d44:	4621      	mov	r1, r4
 8023d46:	4630      	mov	r0, r6
 8023d48:	f7fd ffae 	bl	8021ca8 <__swsetup_r>
 8023d4c:	2800      	cmp	r0, #0
 8023d4e:	d09d      	beq.n	8023c8c <_vfiprintf_r+0x2c>
 8023d50:	f04f 30ff 	mov.w	r0, #4294967295
 8023d54:	b01d      	add	sp, #116	; 0x74
 8023d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d5a:	46a8      	mov	r8, r5
 8023d5c:	e7a2      	b.n	8023ca4 <_vfiprintf_r+0x44>
 8023d5e:	4a44      	ldr	r2, [pc, #272]	; (8023e70 <_vfiprintf_r+0x210>)
 8023d60:	1a80      	subs	r0, r0, r2
 8023d62:	fa0b f000 	lsl.w	r0, fp, r0
 8023d66:	4318      	orrs	r0, r3
 8023d68:	9004      	str	r0, [sp, #16]
 8023d6a:	4645      	mov	r5, r8
 8023d6c:	e7be      	b.n	8023cec <_vfiprintf_r+0x8c>
 8023d6e:	9a03      	ldr	r2, [sp, #12]
 8023d70:	1d11      	adds	r1, r2, #4
 8023d72:	6812      	ldr	r2, [r2, #0]
 8023d74:	9103      	str	r1, [sp, #12]
 8023d76:	2a00      	cmp	r2, #0
 8023d78:	db01      	blt.n	8023d7e <_vfiprintf_r+0x11e>
 8023d7a:	9207      	str	r2, [sp, #28]
 8023d7c:	e004      	b.n	8023d88 <_vfiprintf_r+0x128>
 8023d7e:	4252      	negs	r2, r2
 8023d80:	f043 0302 	orr.w	r3, r3, #2
 8023d84:	9207      	str	r2, [sp, #28]
 8023d86:	9304      	str	r3, [sp, #16]
 8023d88:	f898 3000 	ldrb.w	r3, [r8]
 8023d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8023d8e:	d10e      	bne.n	8023dae <_vfiprintf_r+0x14e>
 8023d90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8023d94:	2b2a      	cmp	r3, #42	; 0x2a
 8023d96:	d138      	bne.n	8023e0a <_vfiprintf_r+0x1aa>
 8023d98:	9b03      	ldr	r3, [sp, #12]
 8023d9a:	1d1a      	adds	r2, r3, #4
 8023d9c:	681b      	ldr	r3, [r3, #0]
 8023d9e:	9203      	str	r2, [sp, #12]
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	bfb8      	it	lt
 8023da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8023da8:	f108 0802 	add.w	r8, r8, #2
 8023dac:	9305      	str	r3, [sp, #20]
 8023dae:	4d33      	ldr	r5, [pc, #204]	; (8023e7c <_vfiprintf_r+0x21c>)
 8023db0:	f898 1000 	ldrb.w	r1, [r8]
 8023db4:	2203      	movs	r2, #3
 8023db6:	4628      	mov	r0, r5
 8023db8:	f7dc fa5a 	bl	8000270 <memchr>
 8023dbc:	b140      	cbz	r0, 8023dd0 <_vfiprintf_r+0x170>
 8023dbe:	2340      	movs	r3, #64	; 0x40
 8023dc0:	1b40      	subs	r0, r0, r5
 8023dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8023dc6:	9b04      	ldr	r3, [sp, #16]
 8023dc8:	4303      	orrs	r3, r0
 8023dca:	f108 0801 	add.w	r8, r8, #1
 8023dce:	9304      	str	r3, [sp, #16]
 8023dd0:	f898 1000 	ldrb.w	r1, [r8]
 8023dd4:	482a      	ldr	r0, [pc, #168]	; (8023e80 <_vfiprintf_r+0x220>)
 8023dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023dda:	2206      	movs	r2, #6
 8023ddc:	f108 0701 	add.w	r7, r8, #1
 8023de0:	f7dc fa46 	bl	8000270 <memchr>
 8023de4:	2800      	cmp	r0, #0
 8023de6:	d037      	beq.n	8023e58 <_vfiprintf_r+0x1f8>
 8023de8:	4b26      	ldr	r3, [pc, #152]	; (8023e84 <_vfiprintf_r+0x224>)
 8023dea:	bb1b      	cbnz	r3, 8023e34 <_vfiprintf_r+0x1d4>
 8023dec:	9b03      	ldr	r3, [sp, #12]
 8023dee:	3307      	adds	r3, #7
 8023df0:	f023 0307 	bic.w	r3, r3, #7
 8023df4:	3308      	adds	r3, #8
 8023df6:	9303      	str	r3, [sp, #12]
 8023df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dfa:	444b      	add	r3, r9
 8023dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8023dfe:	e750      	b.n	8023ca2 <_vfiprintf_r+0x42>
 8023e00:	fb05 3202 	mla	r2, r5, r2, r3
 8023e04:	2001      	movs	r0, #1
 8023e06:	4688      	mov	r8, r1
 8023e08:	e78a      	b.n	8023d20 <_vfiprintf_r+0xc0>
 8023e0a:	2300      	movs	r3, #0
 8023e0c:	f108 0801 	add.w	r8, r8, #1
 8023e10:	9305      	str	r3, [sp, #20]
 8023e12:	4619      	mov	r1, r3
 8023e14:	250a      	movs	r5, #10
 8023e16:	4640      	mov	r0, r8
 8023e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023e1c:	3a30      	subs	r2, #48	; 0x30
 8023e1e:	2a09      	cmp	r2, #9
 8023e20:	d903      	bls.n	8023e2a <_vfiprintf_r+0x1ca>
 8023e22:	2b00      	cmp	r3, #0
 8023e24:	d0c3      	beq.n	8023dae <_vfiprintf_r+0x14e>
 8023e26:	9105      	str	r1, [sp, #20]
 8023e28:	e7c1      	b.n	8023dae <_vfiprintf_r+0x14e>
 8023e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8023e2e:	2301      	movs	r3, #1
 8023e30:	4680      	mov	r8, r0
 8023e32:	e7f0      	b.n	8023e16 <_vfiprintf_r+0x1b6>
 8023e34:	ab03      	add	r3, sp, #12
 8023e36:	9300      	str	r3, [sp, #0]
 8023e38:	4622      	mov	r2, r4
 8023e3a:	4b13      	ldr	r3, [pc, #76]	; (8023e88 <_vfiprintf_r+0x228>)
 8023e3c:	a904      	add	r1, sp, #16
 8023e3e:	4630      	mov	r0, r6
 8023e40:	f7fb fff6 	bl	801fe30 <_printf_float>
 8023e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023e48:	4681      	mov	r9, r0
 8023e4a:	d1d5      	bne.n	8023df8 <_vfiprintf_r+0x198>
 8023e4c:	89a3      	ldrh	r3, [r4, #12]
 8023e4e:	065b      	lsls	r3, r3, #25
 8023e50:	f53f af7e 	bmi.w	8023d50 <_vfiprintf_r+0xf0>
 8023e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023e56:	e77d      	b.n	8023d54 <_vfiprintf_r+0xf4>
 8023e58:	ab03      	add	r3, sp, #12
 8023e5a:	9300      	str	r3, [sp, #0]
 8023e5c:	4622      	mov	r2, r4
 8023e5e:	4b0a      	ldr	r3, [pc, #40]	; (8023e88 <_vfiprintf_r+0x228>)
 8023e60:	a904      	add	r1, sp, #16
 8023e62:	4630      	mov	r0, r6
 8023e64:	f7fc fa86 	bl	8020374 <_printf_i>
 8023e68:	e7ec      	b.n	8023e44 <_vfiprintf_r+0x1e4>
 8023e6a:	bf00      	nop
 8023e6c:	0803fc24 	.word	0x0803fc24
 8023e70:	0803fd64 	.word	0x0803fd64
 8023e74:	0803fc44 	.word	0x0803fc44
 8023e78:	0803fc04 	.word	0x0803fc04
 8023e7c:	0803fd6a 	.word	0x0803fd6a
 8023e80:	0803fd6e 	.word	0x0803fd6e
 8023e84:	0801fe31 	.word	0x0801fe31
 8023e88:	08023c3b 	.word	0x08023c3b

08023e8c <_scanf_chars>:
 8023e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e90:	4615      	mov	r5, r2
 8023e92:	688a      	ldr	r2, [r1, #8]
 8023e94:	4680      	mov	r8, r0
 8023e96:	460c      	mov	r4, r1
 8023e98:	b932      	cbnz	r2, 8023ea8 <_scanf_chars+0x1c>
 8023e9a:	698a      	ldr	r2, [r1, #24]
 8023e9c:	2a00      	cmp	r2, #0
 8023e9e:	bf14      	ite	ne
 8023ea0:	f04f 32ff 	movne.w	r2, #4294967295
 8023ea4:	2201      	moveq	r2, #1
 8023ea6:	608a      	str	r2, [r1, #8]
 8023ea8:	6822      	ldr	r2, [r4, #0]
 8023eaa:	06d1      	lsls	r1, r2, #27
 8023eac:	bf5f      	itttt	pl
 8023eae:	681a      	ldrpl	r2, [r3, #0]
 8023eb0:	1d11      	addpl	r1, r2, #4
 8023eb2:	6019      	strpl	r1, [r3, #0]
 8023eb4:	6817      	ldrpl	r7, [r2, #0]
 8023eb6:	2600      	movs	r6, #0
 8023eb8:	69a3      	ldr	r3, [r4, #24]
 8023eba:	b1db      	cbz	r3, 8023ef4 <_scanf_chars+0x68>
 8023ebc:	2b01      	cmp	r3, #1
 8023ebe:	d107      	bne.n	8023ed0 <_scanf_chars+0x44>
 8023ec0:	682b      	ldr	r3, [r5, #0]
 8023ec2:	6962      	ldr	r2, [r4, #20]
 8023ec4:	781b      	ldrb	r3, [r3, #0]
 8023ec6:	5cd3      	ldrb	r3, [r2, r3]
 8023ec8:	b9a3      	cbnz	r3, 8023ef4 <_scanf_chars+0x68>
 8023eca:	2e00      	cmp	r6, #0
 8023ecc:	d132      	bne.n	8023f34 <_scanf_chars+0xa8>
 8023ece:	e006      	b.n	8023ede <_scanf_chars+0x52>
 8023ed0:	2b02      	cmp	r3, #2
 8023ed2:	d007      	beq.n	8023ee4 <_scanf_chars+0x58>
 8023ed4:	2e00      	cmp	r6, #0
 8023ed6:	d12d      	bne.n	8023f34 <_scanf_chars+0xa8>
 8023ed8:	69a3      	ldr	r3, [r4, #24]
 8023eda:	2b01      	cmp	r3, #1
 8023edc:	d12a      	bne.n	8023f34 <_scanf_chars+0xa8>
 8023ede:	2001      	movs	r0, #1
 8023ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ee4:	f7fb fb76 	bl	801f5d4 <__locale_ctype_ptr>
 8023ee8:	682b      	ldr	r3, [r5, #0]
 8023eea:	781b      	ldrb	r3, [r3, #0]
 8023eec:	4418      	add	r0, r3
 8023eee:	7843      	ldrb	r3, [r0, #1]
 8023ef0:	071b      	lsls	r3, r3, #28
 8023ef2:	d4ef      	bmi.n	8023ed4 <_scanf_chars+0x48>
 8023ef4:	6823      	ldr	r3, [r4, #0]
 8023ef6:	06da      	lsls	r2, r3, #27
 8023ef8:	bf5e      	ittt	pl
 8023efa:	682b      	ldrpl	r3, [r5, #0]
 8023efc:	781b      	ldrbpl	r3, [r3, #0]
 8023efe:	703b      	strbpl	r3, [r7, #0]
 8023f00:	682a      	ldr	r2, [r5, #0]
 8023f02:	686b      	ldr	r3, [r5, #4]
 8023f04:	f102 0201 	add.w	r2, r2, #1
 8023f08:	602a      	str	r2, [r5, #0]
 8023f0a:	68a2      	ldr	r2, [r4, #8]
 8023f0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8023f10:	f102 32ff 	add.w	r2, r2, #4294967295
 8023f14:	606b      	str	r3, [r5, #4]
 8023f16:	f106 0601 	add.w	r6, r6, #1
 8023f1a:	bf58      	it	pl
 8023f1c:	3701      	addpl	r7, #1
 8023f1e:	60a2      	str	r2, [r4, #8]
 8023f20:	b142      	cbz	r2, 8023f34 <_scanf_chars+0xa8>
 8023f22:	2b00      	cmp	r3, #0
 8023f24:	dcc8      	bgt.n	8023eb8 <_scanf_chars+0x2c>
 8023f26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023f2a:	4629      	mov	r1, r5
 8023f2c:	4640      	mov	r0, r8
 8023f2e:	4798      	blx	r3
 8023f30:	2800      	cmp	r0, #0
 8023f32:	d0c1      	beq.n	8023eb8 <_scanf_chars+0x2c>
 8023f34:	6823      	ldr	r3, [r4, #0]
 8023f36:	f013 0310 	ands.w	r3, r3, #16
 8023f3a:	d105      	bne.n	8023f48 <_scanf_chars+0xbc>
 8023f3c:	68e2      	ldr	r2, [r4, #12]
 8023f3e:	3201      	adds	r2, #1
 8023f40:	60e2      	str	r2, [r4, #12]
 8023f42:	69a2      	ldr	r2, [r4, #24]
 8023f44:	b102      	cbz	r2, 8023f48 <_scanf_chars+0xbc>
 8023f46:	703b      	strb	r3, [r7, #0]
 8023f48:	6923      	ldr	r3, [r4, #16]
 8023f4a:	441e      	add	r6, r3
 8023f4c:	6126      	str	r6, [r4, #16]
 8023f4e:	2000      	movs	r0, #0
 8023f50:	e7c6      	b.n	8023ee0 <_scanf_chars+0x54>
	...

08023f54 <_scanf_i>:
 8023f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f58:	469a      	mov	sl, r3
 8023f5a:	4b74      	ldr	r3, [pc, #464]	; (802412c <_scanf_i+0x1d8>)
 8023f5c:	460c      	mov	r4, r1
 8023f5e:	4683      	mov	fp, r0
 8023f60:	4616      	mov	r6, r2
 8023f62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023f66:	b087      	sub	sp, #28
 8023f68:	ab03      	add	r3, sp, #12
 8023f6a:	68a7      	ldr	r7, [r4, #8]
 8023f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023f70:	4b6f      	ldr	r3, [pc, #444]	; (8024130 <_scanf_i+0x1dc>)
 8023f72:	69a1      	ldr	r1, [r4, #24]
 8023f74:	4a6f      	ldr	r2, [pc, #444]	; (8024134 <_scanf_i+0x1e0>)
 8023f76:	2903      	cmp	r1, #3
 8023f78:	bf08      	it	eq
 8023f7a:	461a      	moveq	r2, r3
 8023f7c:	1e7b      	subs	r3, r7, #1
 8023f7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8023f82:	bf84      	itt	hi
 8023f84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8023f88:	60a3      	strhi	r3, [r4, #8]
 8023f8a:	6823      	ldr	r3, [r4, #0]
 8023f8c:	9200      	str	r2, [sp, #0]
 8023f8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023f92:	bf88      	it	hi
 8023f94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023f98:	f104 091c 	add.w	r9, r4, #28
 8023f9c:	6023      	str	r3, [r4, #0]
 8023f9e:	bf8c      	ite	hi
 8023fa0:	197f      	addhi	r7, r7, r5
 8023fa2:	2700      	movls	r7, #0
 8023fa4:	464b      	mov	r3, r9
 8023fa6:	f04f 0800 	mov.w	r8, #0
 8023faa:	9301      	str	r3, [sp, #4]
 8023fac:	6831      	ldr	r1, [r6, #0]
 8023fae:	ab03      	add	r3, sp, #12
 8023fb0:	2202      	movs	r2, #2
 8023fb2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023fb6:	7809      	ldrb	r1, [r1, #0]
 8023fb8:	f7dc f95a 	bl	8000270 <memchr>
 8023fbc:	9b01      	ldr	r3, [sp, #4]
 8023fbe:	b330      	cbz	r0, 802400e <_scanf_i+0xba>
 8023fc0:	f1b8 0f01 	cmp.w	r8, #1
 8023fc4:	d15a      	bne.n	802407c <_scanf_i+0x128>
 8023fc6:	6862      	ldr	r2, [r4, #4]
 8023fc8:	b92a      	cbnz	r2, 8023fd6 <_scanf_i+0x82>
 8023fca:	6822      	ldr	r2, [r4, #0]
 8023fcc:	2108      	movs	r1, #8
 8023fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023fd2:	6061      	str	r1, [r4, #4]
 8023fd4:	6022      	str	r2, [r4, #0]
 8023fd6:	6822      	ldr	r2, [r4, #0]
 8023fd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8023fdc:	6022      	str	r2, [r4, #0]
 8023fde:	68a2      	ldr	r2, [r4, #8]
 8023fe0:	1e51      	subs	r1, r2, #1
 8023fe2:	60a1      	str	r1, [r4, #8]
 8023fe4:	b19a      	cbz	r2, 802400e <_scanf_i+0xba>
 8023fe6:	6832      	ldr	r2, [r6, #0]
 8023fe8:	1c51      	adds	r1, r2, #1
 8023fea:	6031      	str	r1, [r6, #0]
 8023fec:	7812      	ldrb	r2, [r2, #0]
 8023fee:	701a      	strb	r2, [r3, #0]
 8023ff0:	1c5d      	adds	r5, r3, #1
 8023ff2:	6873      	ldr	r3, [r6, #4]
 8023ff4:	3b01      	subs	r3, #1
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	6073      	str	r3, [r6, #4]
 8023ffa:	dc07      	bgt.n	802400c <_scanf_i+0xb8>
 8023ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024000:	4631      	mov	r1, r6
 8024002:	4658      	mov	r0, fp
 8024004:	4798      	blx	r3
 8024006:	2800      	cmp	r0, #0
 8024008:	f040 8086 	bne.w	8024118 <_scanf_i+0x1c4>
 802400c:	462b      	mov	r3, r5
 802400e:	f108 0801 	add.w	r8, r8, #1
 8024012:	f1b8 0f03 	cmp.w	r8, #3
 8024016:	d1c8      	bne.n	8023faa <_scanf_i+0x56>
 8024018:	6862      	ldr	r2, [r4, #4]
 802401a:	b90a      	cbnz	r2, 8024020 <_scanf_i+0xcc>
 802401c:	220a      	movs	r2, #10
 802401e:	6062      	str	r2, [r4, #4]
 8024020:	6862      	ldr	r2, [r4, #4]
 8024022:	4945      	ldr	r1, [pc, #276]	; (8024138 <_scanf_i+0x1e4>)
 8024024:	6960      	ldr	r0, [r4, #20]
 8024026:	9301      	str	r3, [sp, #4]
 8024028:	1a89      	subs	r1, r1, r2
 802402a:	f000 f8cf 	bl	80241cc <__sccl>
 802402e:	9b01      	ldr	r3, [sp, #4]
 8024030:	f04f 0800 	mov.w	r8, #0
 8024034:	461d      	mov	r5, r3
 8024036:	68a3      	ldr	r3, [r4, #8]
 8024038:	6822      	ldr	r2, [r4, #0]
 802403a:	2b00      	cmp	r3, #0
 802403c:	d03a      	beq.n	80240b4 <_scanf_i+0x160>
 802403e:	6831      	ldr	r1, [r6, #0]
 8024040:	6960      	ldr	r0, [r4, #20]
 8024042:	f891 c000 	ldrb.w	ip, [r1]
 8024046:	f810 000c 	ldrb.w	r0, [r0, ip]
 802404a:	2800      	cmp	r0, #0
 802404c:	d032      	beq.n	80240b4 <_scanf_i+0x160>
 802404e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024052:	d121      	bne.n	8024098 <_scanf_i+0x144>
 8024054:	0510      	lsls	r0, r2, #20
 8024056:	d51f      	bpl.n	8024098 <_scanf_i+0x144>
 8024058:	f108 0801 	add.w	r8, r8, #1
 802405c:	b117      	cbz	r7, 8024064 <_scanf_i+0x110>
 802405e:	3301      	adds	r3, #1
 8024060:	3f01      	subs	r7, #1
 8024062:	60a3      	str	r3, [r4, #8]
 8024064:	6873      	ldr	r3, [r6, #4]
 8024066:	3b01      	subs	r3, #1
 8024068:	2b00      	cmp	r3, #0
 802406a:	6073      	str	r3, [r6, #4]
 802406c:	dd1b      	ble.n	80240a6 <_scanf_i+0x152>
 802406e:	6833      	ldr	r3, [r6, #0]
 8024070:	3301      	adds	r3, #1
 8024072:	6033      	str	r3, [r6, #0]
 8024074:	68a3      	ldr	r3, [r4, #8]
 8024076:	3b01      	subs	r3, #1
 8024078:	60a3      	str	r3, [r4, #8]
 802407a:	e7dc      	b.n	8024036 <_scanf_i+0xe2>
 802407c:	f1b8 0f02 	cmp.w	r8, #2
 8024080:	d1ad      	bne.n	8023fde <_scanf_i+0x8a>
 8024082:	6822      	ldr	r2, [r4, #0]
 8024084:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8024088:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802408c:	d1bf      	bne.n	802400e <_scanf_i+0xba>
 802408e:	2110      	movs	r1, #16
 8024090:	6061      	str	r1, [r4, #4]
 8024092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024096:	e7a1      	b.n	8023fdc <_scanf_i+0x88>
 8024098:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802409c:	6022      	str	r2, [r4, #0]
 802409e:	780b      	ldrb	r3, [r1, #0]
 80240a0:	702b      	strb	r3, [r5, #0]
 80240a2:	3501      	adds	r5, #1
 80240a4:	e7de      	b.n	8024064 <_scanf_i+0x110>
 80240a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80240aa:	4631      	mov	r1, r6
 80240ac:	4658      	mov	r0, fp
 80240ae:	4798      	blx	r3
 80240b0:	2800      	cmp	r0, #0
 80240b2:	d0df      	beq.n	8024074 <_scanf_i+0x120>
 80240b4:	6823      	ldr	r3, [r4, #0]
 80240b6:	05d9      	lsls	r1, r3, #23
 80240b8:	d50c      	bpl.n	80240d4 <_scanf_i+0x180>
 80240ba:	454d      	cmp	r5, r9
 80240bc:	d908      	bls.n	80240d0 <_scanf_i+0x17c>
 80240be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80240c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80240c6:	4632      	mov	r2, r6
 80240c8:	4658      	mov	r0, fp
 80240ca:	4798      	blx	r3
 80240cc:	1e6f      	subs	r7, r5, #1
 80240ce:	463d      	mov	r5, r7
 80240d0:	454d      	cmp	r5, r9
 80240d2:	d029      	beq.n	8024128 <_scanf_i+0x1d4>
 80240d4:	6822      	ldr	r2, [r4, #0]
 80240d6:	f012 0210 	ands.w	r2, r2, #16
 80240da:	d113      	bne.n	8024104 <_scanf_i+0x1b0>
 80240dc:	702a      	strb	r2, [r5, #0]
 80240de:	6863      	ldr	r3, [r4, #4]
 80240e0:	9e00      	ldr	r6, [sp, #0]
 80240e2:	4649      	mov	r1, r9
 80240e4:	4658      	mov	r0, fp
 80240e6:	47b0      	blx	r6
 80240e8:	f8da 3000 	ldr.w	r3, [sl]
 80240ec:	6821      	ldr	r1, [r4, #0]
 80240ee:	1d1a      	adds	r2, r3, #4
 80240f0:	f8ca 2000 	str.w	r2, [sl]
 80240f4:	f011 0f20 	tst.w	r1, #32
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	d010      	beq.n	802411e <_scanf_i+0x1ca>
 80240fc:	6018      	str	r0, [r3, #0]
 80240fe:	68e3      	ldr	r3, [r4, #12]
 8024100:	3301      	adds	r3, #1
 8024102:	60e3      	str	r3, [r4, #12]
 8024104:	eba5 0509 	sub.w	r5, r5, r9
 8024108:	44a8      	add	r8, r5
 802410a:	6925      	ldr	r5, [r4, #16]
 802410c:	4445      	add	r5, r8
 802410e:	6125      	str	r5, [r4, #16]
 8024110:	2000      	movs	r0, #0
 8024112:	b007      	add	sp, #28
 8024114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024118:	f04f 0800 	mov.w	r8, #0
 802411c:	e7ca      	b.n	80240b4 <_scanf_i+0x160>
 802411e:	07ca      	lsls	r2, r1, #31
 8024120:	bf4c      	ite	mi
 8024122:	8018      	strhmi	r0, [r3, #0]
 8024124:	6018      	strpl	r0, [r3, #0]
 8024126:	e7ea      	b.n	80240fe <_scanf_i+0x1aa>
 8024128:	2001      	movs	r0, #1
 802412a:	e7f2      	b.n	8024112 <_scanf_i+0x1be>
 802412c:	080244bc 	.word	0x080244bc
 8024130:	080215d5 	.word	0x080215d5
 8024134:	08021719 	.word	0x08021719
 8024138:	0803fd85 	.word	0x0803fd85

0802413c <_putc_r>:
 802413c:	b570      	push	{r4, r5, r6, lr}
 802413e:	460d      	mov	r5, r1
 8024140:	4614      	mov	r4, r2
 8024142:	4606      	mov	r6, r0
 8024144:	b118      	cbz	r0, 802414e <_putc_r+0x12>
 8024146:	6983      	ldr	r3, [r0, #24]
 8024148:	b90b      	cbnz	r3, 802414e <_putc_r+0x12>
 802414a:	f7fe fd49 	bl	8022be0 <__sinit>
 802414e:	4b13      	ldr	r3, [pc, #76]	; (802419c <_putc_r+0x60>)
 8024150:	429c      	cmp	r4, r3
 8024152:	d112      	bne.n	802417a <_putc_r+0x3e>
 8024154:	6874      	ldr	r4, [r6, #4]
 8024156:	68a3      	ldr	r3, [r4, #8]
 8024158:	3b01      	subs	r3, #1
 802415a:	2b00      	cmp	r3, #0
 802415c:	60a3      	str	r3, [r4, #8]
 802415e:	da16      	bge.n	802418e <_putc_r+0x52>
 8024160:	69a2      	ldr	r2, [r4, #24]
 8024162:	4293      	cmp	r3, r2
 8024164:	db02      	blt.n	802416c <_putc_r+0x30>
 8024166:	b2eb      	uxtb	r3, r5
 8024168:	2b0a      	cmp	r3, #10
 802416a:	d110      	bne.n	802418e <_putc_r+0x52>
 802416c:	4622      	mov	r2, r4
 802416e:	4629      	mov	r1, r5
 8024170:	4630      	mov	r0, r6
 8024172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024176:	f7fd bd25 	b.w	8021bc4 <__swbuf_r>
 802417a:	4b09      	ldr	r3, [pc, #36]	; (80241a0 <_putc_r+0x64>)
 802417c:	429c      	cmp	r4, r3
 802417e:	d101      	bne.n	8024184 <_putc_r+0x48>
 8024180:	68b4      	ldr	r4, [r6, #8]
 8024182:	e7e8      	b.n	8024156 <_putc_r+0x1a>
 8024184:	4b07      	ldr	r3, [pc, #28]	; (80241a4 <_putc_r+0x68>)
 8024186:	429c      	cmp	r4, r3
 8024188:	bf08      	it	eq
 802418a:	68f4      	ldreq	r4, [r6, #12]
 802418c:	e7e3      	b.n	8024156 <_putc_r+0x1a>
 802418e:	6823      	ldr	r3, [r4, #0]
 8024190:	1c5a      	adds	r2, r3, #1
 8024192:	6022      	str	r2, [r4, #0]
 8024194:	701d      	strb	r5, [r3, #0]
 8024196:	b2e8      	uxtb	r0, r5
 8024198:	bd70      	pop	{r4, r5, r6, pc}
 802419a:	bf00      	nop
 802419c:	0803fc24 	.word	0x0803fc24
 80241a0:	0803fc44 	.word	0x0803fc44
 80241a4:	0803fc04 	.word	0x0803fc04

080241a8 <_read_r>:
 80241a8:	b538      	push	{r3, r4, r5, lr}
 80241aa:	4c07      	ldr	r4, [pc, #28]	; (80241c8 <_read_r+0x20>)
 80241ac:	4605      	mov	r5, r0
 80241ae:	4608      	mov	r0, r1
 80241b0:	4611      	mov	r1, r2
 80241b2:	2200      	movs	r2, #0
 80241b4:	6022      	str	r2, [r4, #0]
 80241b6:	461a      	mov	r2, r3
 80241b8:	f7e0 fad0 	bl	800475c <_read>
 80241bc:	1c43      	adds	r3, r0, #1
 80241be:	d102      	bne.n	80241c6 <_read_r+0x1e>
 80241c0:	6823      	ldr	r3, [r4, #0]
 80241c2:	b103      	cbz	r3, 80241c6 <_read_r+0x1e>
 80241c4:	602b      	str	r3, [r5, #0]
 80241c6:	bd38      	pop	{r3, r4, r5, pc}
 80241c8:	2003634c 	.word	0x2003634c

080241cc <__sccl>:
 80241cc:	b570      	push	{r4, r5, r6, lr}
 80241ce:	780b      	ldrb	r3, [r1, #0]
 80241d0:	2b5e      	cmp	r3, #94	; 0x5e
 80241d2:	bf13      	iteet	ne
 80241d4:	1c4a      	addne	r2, r1, #1
 80241d6:	1c8a      	addeq	r2, r1, #2
 80241d8:	784b      	ldrbeq	r3, [r1, #1]
 80241da:	2100      	movne	r1, #0
 80241dc:	bf08      	it	eq
 80241de:	2101      	moveq	r1, #1
 80241e0:	1e44      	subs	r4, r0, #1
 80241e2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80241e6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80241ea:	42ac      	cmp	r4, r5
 80241ec:	d1fb      	bne.n	80241e6 <__sccl+0x1a>
 80241ee:	b913      	cbnz	r3, 80241f6 <__sccl+0x2a>
 80241f0:	3a01      	subs	r2, #1
 80241f2:	4610      	mov	r0, r2
 80241f4:	bd70      	pop	{r4, r5, r6, pc}
 80241f6:	f081 0401 	eor.w	r4, r1, #1
 80241fa:	54c4      	strb	r4, [r0, r3]
 80241fc:	1c51      	adds	r1, r2, #1
 80241fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8024202:	2d2d      	cmp	r5, #45	; 0x2d
 8024204:	f101 36ff 	add.w	r6, r1, #4294967295
 8024208:	460a      	mov	r2, r1
 802420a:	d006      	beq.n	802421a <__sccl+0x4e>
 802420c:	2d5d      	cmp	r5, #93	; 0x5d
 802420e:	d0f0      	beq.n	80241f2 <__sccl+0x26>
 8024210:	b90d      	cbnz	r5, 8024216 <__sccl+0x4a>
 8024212:	4632      	mov	r2, r6
 8024214:	e7ed      	b.n	80241f2 <__sccl+0x26>
 8024216:	462b      	mov	r3, r5
 8024218:	e7ef      	b.n	80241fa <__sccl+0x2e>
 802421a:	780e      	ldrb	r6, [r1, #0]
 802421c:	2e5d      	cmp	r6, #93	; 0x5d
 802421e:	d0fa      	beq.n	8024216 <__sccl+0x4a>
 8024220:	42b3      	cmp	r3, r6
 8024222:	dcf8      	bgt.n	8024216 <__sccl+0x4a>
 8024224:	3301      	adds	r3, #1
 8024226:	429e      	cmp	r6, r3
 8024228:	54c4      	strb	r4, [r0, r3]
 802422a:	dcfb      	bgt.n	8024224 <__sccl+0x58>
 802422c:	3102      	adds	r1, #2
 802422e:	e7e6      	b.n	80241fe <__sccl+0x32>

08024230 <__submore>:
 8024230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024234:	460c      	mov	r4, r1
 8024236:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802423c:	4299      	cmp	r1, r3
 802423e:	d11d      	bne.n	802427c <__submore+0x4c>
 8024240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024244:	f7fb fd14 	bl	801fc70 <_malloc_r>
 8024248:	b918      	cbnz	r0, 8024252 <__submore+0x22>
 802424a:	f04f 30ff 	mov.w	r0, #4294967295
 802424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024256:	63a3      	str	r3, [r4, #56]	; 0x38
 8024258:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802425c:	6360      	str	r0, [r4, #52]	; 0x34
 802425e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024262:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024266:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802426a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802426e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024272:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024276:	6020      	str	r0, [r4, #0]
 8024278:	2000      	movs	r0, #0
 802427a:	e7e8      	b.n	802424e <__submore+0x1e>
 802427c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802427e:	0077      	lsls	r7, r6, #1
 8024280:	463a      	mov	r2, r7
 8024282:	f7ff f9a1 	bl	80235c8 <_realloc_r>
 8024286:	4605      	mov	r5, r0
 8024288:	2800      	cmp	r0, #0
 802428a:	d0de      	beq.n	802424a <__submore+0x1a>
 802428c:	eb00 0806 	add.w	r8, r0, r6
 8024290:	4601      	mov	r1, r0
 8024292:	4632      	mov	r2, r6
 8024294:	4640      	mov	r0, r8
 8024296:	f7fb f9dc 	bl	801f652 <memcpy>
 802429a:	f8c4 8000 	str.w	r8, [r4]
 802429e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80242a2:	e7e9      	b.n	8024278 <__submore+0x48>

080242a4 <__env_lock>:
 80242a4:	4770      	bx	lr

080242a6 <__env_unlock>:
 80242a6:	4770      	bx	lr

080242a8 <_fstat_r>:
 80242a8:	b538      	push	{r3, r4, r5, lr}
 80242aa:	4c07      	ldr	r4, [pc, #28]	; (80242c8 <_fstat_r+0x20>)
 80242ac:	2300      	movs	r3, #0
 80242ae:	4605      	mov	r5, r0
 80242b0:	4608      	mov	r0, r1
 80242b2:	4611      	mov	r1, r2
 80242b4:	6023      	str	r3, [r4, #0]
 80242b6:	f7e0 fa63 	bl	8004780 <_fstat>
 80242ba:	1c43      	adds	r3, r0, #1
 80242bc:	d102      	bne.n	80242c4 <_fstat_r+0x1c>
 80242be:	6823      	ldr	r3, [r4, #0]
 80242c0:	b103      	cbz	r3, 80242c4 <_fstat_r+0x1c>
 80242c2:	602b      	str	r3, [r5, #0]
 80242c4:	bd38      	pop	{r3, r4, r5, pc}
 80242c6:	bf00      	nop
 80242c8:	2003634c 	.word	0x2003634c

080242cc <_isatty_r>:
 80242cc:	b538      	push	{r3, r4, r5, lr}
 80242ce:	4c06      	ldr	r4, [pc, #24]	; (80242e8 <_isatty_r+0x1c>)
 80242d0:	2300      	movs	r3, #0
 80242d2:	4605      	mov	r5, r0
 80242d4:	4608      	mov	r0, r1
 80242d6:	6023      	str	r3, [r4, #0]
 80242d8:	f7e0 fa58 	bl	800478c <_isatty>
 80242dc:	1c43      	adds	r3, r0, #1
 80242de:	d102      	bne.n	80242e6 <_isatty_r+0x1a>
 80242e0:	6823      	ldr	r3, [r4, #0]
 80242e2:	b103      	cbz	r3, 80242e6 <_isatty_r+0x1a>
 80242e4:	602b      	str	r3, [r5, #0]
 80242e6:	bd38      	pop	{r3, r4, r5, pc}
 80242e8:	2003634c 	.word	0x2003634c

080242ec <_malloc_usable_size_r>:
 80242ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80242f0:	1f18      	subs	r0, r3, #4
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	bfbc      	itt	lt
 80242f6:	580b      	ldrlt	r3, [r1, r0]
 80242f8:	18c0      	addlt	r0, r0, r3
 80242fa:	4770      	bx	lr

080242fc <_init>:
 80242fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242fe:	bf00      	nop
 8024300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024302:	bc08      	pop	{r3}
 8024304:	469e      	mov	lr, r3
 8024306:	4770      	bx	lr

08024308 <_fini>:
 8024308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802430a:	bf00      	nop
 802430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802430e:	bc08      	pop	{r3}
 8024310:	469e      	mov	lr, r3
 8024312:	4770      	bx	lr

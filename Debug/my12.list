
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028160  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001cb8c  08028360  08028360  00038360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044eec  08044eec  000606bc  2**0
                  CONTENTS
  4 .ARM          00000008  08044eec  08044eec  00054eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044ef4  08044ef4  000606bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044ef4  08044ef4  00054ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044ef8  08044ef8  00054ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  08044efc  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f1d4  200006c0  080455b8  000606c0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002f894  080455b8  0006f894  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008ce34  00000000  00000000  000606ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00012f69  00000000  00000000  000ed51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00051c16  00000000  00000000  00100487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003698  00000000  00000000  001520a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009430  00000000  00000000  00155738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047d17  00000000  00000000  0015eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008d553  00000000  00000000  001a687f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a21e  00000000  00000000  00233dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0036dff0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d37c  00000000  00000000  0036e040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08028348 	.word	0x08028348

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08028348 	.word	0x08028348

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f0 	.word	0x200006f0
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000076c 	.word	0x2000076c

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f0 	.word	0x200006f0
 8000708:	40000c00 	.word	0x40000c00
 800070c:	2000076c 	.word	0x2000076c

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f023 fe8a 	bl	802443c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 b923 	b.w	8007978 <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	08028538 	.word	0x08028538

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f003 ff6e 	bl	8004634 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f003 ff62 	bl	8004634 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f008 f9eb 	bl	8008bfc <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f003 feec 	bl	8004634 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08028550 	.word	0x08028550
 800086c:	2000027c 	.word	0x2000027c
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f015 fac1 	bl	8015fbc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f023 bceb 	b.w	802443c <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f0 	.word	0x200006f0
 8000a6c:	200006dc 	.word	0x200006dc
 8000a70:	20002ca4 	.word	0x20002ca4
 8000a74:	2000074c 	.word	0x2000074c
 8000a78:	200006ec 	.word	0x200006ec
 8000a7c:	2000076c 	.word	0x2000076c
 8000a80:	20000754 	.word	0x20000754
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e0 	.word	0x200006e0
 8000a90:	200007f4 	.word	0x200007f4
 8000a94:	20000770 	.word	0x20000770
 8000a98:	20000748 	.word	0x20000748
 8000a9c:	20000750 	.word	0x20000750
 8000aa0:	20000700 	.word	0x20000700
 8000aa4:	20000760 	.word	0x20000760
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	20000758 	.word	0x20000758
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006f4 	.word	0x200006f4
 8000ab8:	200007fc 	.word	0x200007fc
 8000abc:	2000075c 	.word	0x2000075c
 8000ac0:	200007f8 	.word	0x200007f8
 8000ac4:	08028568 	.word	0x08028568
 8000ac8:	20000764 	.word	0x20000764
 8000acc:	20000704 	.word	0x20000704
 8000ad0:	20000774 	.word	0x20000774

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f023 fca9 	bl	802443c <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f013 fc70 	bl	80143d0 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f015 ff50 	bl	8016998 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f022 fc5c 	bl	80233c8 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f022 fc56 	bl	80233c8 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f006 fe6d 	bl	800781c <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f006 fe69 	bl	800781c <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f006 fe65 	bl	800781c <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f023 fc70 	bl	802443c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f023 bc69 	b.w	802443c <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f023 fc66 	bl	802443c <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f023 fc62 	bl	802443c <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f023 fc5e 	bl	802443c <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002ca4 	.word	0x20002ca4
 8000b8c:	0802857c 	.word	0x0802857c
 8000b90:	2000074c 	.word	0x2000074c
 8000b94:	200006e8 	.word	0x200006e8
 8000b98:	200006e4 	.word	0x200006e4
 8000b9c:	20001e48 	.word	0x20001e48
 8000ba0:	200006ed 	.word	0x200006ed
 8000ba4:	20001ed8 	.word	0x20001ed8
 8000ba8:	20001e90 	.word	0x20001e90
 8000bac:	080285b8 	.word	0x080285b8
 8000bb0:	08028618 	.word	0x08028618
 8000bb4:	08028604 	.word	0x08028604
 8000bb8:	080285f0 	.word	0x080285f0
 8000bbc:	08028590 	.word	0x08028590

08000bc0 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000bc0:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bc2:	b169      	cbz	r1, 8000be0 <xcrc32+0x20>
 8000bc4:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bca:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bce:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bd2:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000bdc:	d1f5      	bne.n	8000bca <xcrc32+0xa>
 8000bde:	4770      	bx	lr
  unsigned int crc = init;
 8000be0:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000be2:	4770      	bx	lr
 8000be4:	0802862c 	.word	0x0802862c

08000be8 <fixboot>:
		return (0);
	}
}

/// fix up the boot vectors in the option flash
void fixboot() {
 8000be8:	b500      	push	{lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000bec:	4668      	mov	r0, sp
 8000bee:	f009 fd33 	bl	800a658 <HAL_FLASHEx_OBGetConfig>

	HAL_FLASH_OB_Unlock();
 8000bf2:	f009 fbe3 	bl	800a3bc <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000bf6:	9b06      	ldr	r3, [sp, #24]
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfc:	d008      	beq.n	8000c10 <fixboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	3201      	adds	r2, #1
 8000c06:	d009      	beq.n	8000c1c <fixboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000c08:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c0a:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000c0e:	e007      	b.n	8000c20 <fixboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	3301      	adds	r3, #1
 8000c14:	d0f9      	beq.n	8000c0a <fixboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000c16:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000c1a:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c20:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c22:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c24:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c26:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c2a:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c2c:	f009 fc3c 	bl	800a4a8 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000c30:	b990      	cbnz	r0, 8000c58 <fixboot+0x70>
		printf("fixboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000c32:	f009 fbdf 	bl	800a3f4 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000c36:	b950      	cbnz	r0, 8000c4e <fixboot+0x66>
		printf("fixboot: failed to OBLaunch %d\n", res);
	}
	printf("fixing boot....\n");
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <fixboot+0x7c>)
 8000c3a:	f023 fbff 	bl	802443c <puts>
	HAL_FLASH_OB_Lock();
 8000c3e:	f009 fbcf 	bl	800a3e0 <HAL_FLASH_OB_Lock>

	printf("fixboot ran\n");
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <fixboot+0x80>)
 8000c44:	f023 fbfa 	bl	802443c <puts>
}
 8000c48:	b009      	add	sp, #36	; 0x24
 8000c4a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("fixboot: failed to OBLaunch %d\n", res);
 8000c4e:	4601      	mov	r1, r0
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <fixboot+0x84>)
 8000c52:	f023 fb57 	bl	8024304 <iprintf>
 8000c56:	e7ef      	b.n	8000c38 <fixboot+0x50>
		printf("fixboot: failed to OBProgram %d\n", res);
 8000c58:	4601      	mov	r1, r0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <fixboot+0x88>)
 8000c5c:	f023 fb52 	bl	8024304 <iprintf>
 8000c60:	e7e7      	b.n	8000c32 <fixboot+0x4a>
 8000c62:	bf00      	nop
 8000c64:	08028a70 	.word	0x08028a70
 8000c68:	08028a80 	.word	0x08028a80
 8000c6c:	08028a50 	.word	0x08028a50
 8000c70:	08028a2c 	.word	0x08028a2c

08000c74 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <vApplicationMallocFailedHook>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <vApplicationGetIdleTaskMemory+0x18>)
{
 8000c82:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c84:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c8a:	4c04      	ldr	r4, [pc, #16]	; (8000c9c <vApplicationGetIdleTaskMemory+0x1c>)
 8000c8c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000c00 	.word	0x20000c00
 8000c9c:	20000800 	.word	0x20000800

08000ca0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <vApplicationGetTimerTaskMemory+0x18>)
{
 8000ca2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ca4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000caa:	4c04      	ldr	r4, [pc, #16]	; (8000cbc <vApplicationGetTimerTaskMemory+0x1c>)
 8000cac:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000cae:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200014b4 	.word	0x200014b4
 8000cbc:	20000cb4 	.word	0x20000cb4

08000cc0 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	4770      	bx	lr

08000cc4 <httpc_get_internal_addr>:
	altcp_output(req->pcb);
	return ERR_OK;
}

/** Start the http request when the server IP addr is known */
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8000cc4:	b570      	push	{r4, r5, r6, lr}
	err_t err;
	LWIP_ASSERT("req != NULL", req != NULL);
 8000cc6:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8000cc8:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 8000cca:	b158      	cbz	r0, 8000ce4 <httpc_get_internal_addr+0x20>

	if (&req->remote_addr != ipaddr) {
 8000ccc:	1d21      	adds	r1, r4, #4
 8000cce:	42a9      	cmp	r1, r5
 8000cd0:	d001      	beq.n	8000cd6 <httpc_get_internal_addr+0x12>
		/* fill in remote addr if called externally */
		req->remote_addr = *ipaddr;
 8000cd2:	682b      	ldr	r3, [r5, #0]
 8000cd4:	6063      	str	r3, [r4, #4]
	}

//	req->pcb->so_options |= SOF_KEEPALIVE;		// zzz

	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8000cd6:	8922      	ldrh	r2, [r4, #8]
 8000cd8:	6820      	ldr	r0, [r4, #0]
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <httpc_get_internal_addr+0x30>)
	if (err == ERR_OK) {
		return ERR_OK;
	}LWIP_DEBUGF(HTTPC_DEBUG_WARN_STATE, ("tcp_connect failed: %d\n", (int)err));
	return err;
}
 8000cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 8000ce0:	f019 bf00 	b.w	801aae4 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <httpc_get_internal_addr+0x34>)
 8000ce6:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8000cea:	4904      	ldr	r1, [pc, #16]	; (8000cfc <httpc_get_internal_addr+0x38>)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <httpc_get_internal_addr+0x3c>)
 8000cee:	f023 fb09 	bl	8024304 <iprintf>
 8000cf2:	e7eb      	b.n	8000ccc <httpc_get_internal_addr+0x8>
 8000cf4:	08001189 	.word	0x08001189
 8000cf8:	08028a8c 	.word	0x08028a8c
 8000cfc:	08028aa8 	.word	0x08028aa8
 8000d00:	08028ab4 	.word	0x08028ab4

08000d04 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4604      	mov	r4, r0
	if (req->request != NULL) {
 8000d08:	6900      	ldr	r0, [r0, #16]
 8000d0a:	b118      	cbz	r0, 8000d14 <httpc_free_state+0x10>
		pbuf_free(req->request);
 8000d0c:	f016 f860 	bl	8016dd0 <pbuf_free_callback>
		req->request = NULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 8000d14:	6960      	ldr	r0, [r4, #20]
 8000d16:	b118      	cbz	r0, 8000d20 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 8000d18:	f016 f85a 	bl	8016dd0 <pbuf_free_callback>
		req->rx_hdrs = NULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8000d20:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 8000d22:	4620      	mov	r0, r4
 8000d24:	f018 f978 	bl	8019018 <mem_free>
	if (tpcb != NULL) {
 8000d28:	b1c5      	cbz	r5, 8000d5c <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f019 ffdf 	bl	801acf0 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8000d32:	2100      	movs	r1, #0
 8000d34:	4628      	mov	r0, r5
 8000d36:	f019 ffdf 	bl	801acf8 <tcp_recv>
		altcp_err(tpcb, NULL);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f01a f813 	bl	801ad68 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	4628      	mov	r0, r5
 8000d46:	4611      	mov	r1, r2
 8000d48:	f01a f830 	bl	801adac <tcp_poll>
		altcp_sent(tpcb, NULL);
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f019 ffee 	bl	801ad30 <tcp_sent>
		r = altcp_close(tpcb);
 8000d54:	4628      	mov	r0, r5
 8000d56:	f01a fe87 	bl	801ba68 <tcp_close>
		if (r != ERR_OK) {
 8000d5a:	b908      	cbnz	r0, 8000d60 <httpc_free_state+0x5c>
	return ERR_OK;
 8000d5c:	2000      	movs	r0, #0
}
 8000d5e:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8000d60:	4628      	mov	r0, r5
 8000d62:	f01a fc89 	bl	801b678 <tcp_abort>
			return ERR_ABRT;
 8000d66:	f06f 000c 	mvn.w	r0, #12
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}

08000d6c <RecvHttpHeaderCallback>:

char url[80];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 8000d6c:	b538      	push	{r3, r4, r5, lr}
	int i;
	char *buf;

	printf("RecvHttpHeaderCallback: len=%u, content len=%lu\n", hdr_len, content_len);
 8000d6e:	4619      	mov	r1, r3
err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 8000d70:	4614      	mov	r4, r2
 8000d72:	461d      	mov	r5, r3
	printf("RecvHttpHeaderCallback: len=%u, content len=%lu\n", hdr_len, content_len);
 8000d74:	9a04      	ldr	r2, [sp, #16]
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <RecvHttpHeaderCallback+0x34>)
 8000d78:	f023 fac4 	bl	8024304 <iprintf>
	printf("header=");
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <RecvHttpHeaderCallback+0x38>)
 8000d7e:	f023 fac1 	bl	8024304 <iprintf>
	buf = hdr->payload;
 8000d82:	6864      	ldr	r4, [r4, #4]
	for (i = 0; i < hdr_len; i++) {
 8000d84:	b135      	cbz	r5, 8000d94 <RecvHttpHeaderCallback+0x28>
 8000d86:	4425      	add	r5, r4
		putchar(buf[i]);
 8000d88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000d8c:	f023 fad2 	bl	8024334 <putchar>
	for (i = 0; i < hdr_len; i++) {
 8000d90:	42ac      	cmp	r4, r5
 8000d92:	d1f9      	bne.n	8000d88 <RecvHttpHeaderCallback+0x1c>
	buf = hdr->payload;
	for (i = 0; i < content_len; i++) {
		putchar(buf[i]);
	}
#endif
	printf("\n");
 8000d94:	200a      	movs	r0, #10
 8000d96:	f023 facd 	bl	8024334 <putchar>
	return ERR_OK;
}
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	bd38      	pop	{r3, r4, r5, pc}
 8000d9e:	bf00      	nop
 8000da0:	08028adc 	.word	0x08028adc
 8000da4:	08028b10 	.word	0x08028b10

08000da8 <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	460c      	mov	r4, r1
 8000db0:	461d      	mov	r5, r3
 8000db2:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 8000db6:	b968      	cbnz	r0, 8000dd4 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d032      	beq.n	8000e22 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8000dbe:	462b      	mov	r3, r5
 8000dc0:	4641      	mov	r1, r8
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 8000dca:	b004      	add	sp, #16
 8000dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8000dd0:	f023 bc4e 	b.w	8024670 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	b1e1      	cbz	r1, 8000e12 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 8000dd8:	2e50      	cmp	r6, #80	; 0x50
 8000dda:	d00d      	beq.n	8000df8 <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 8000ddc:	4623      	mov	r3, r4
 8000dde:	9403      	str	r4, [sp, #12]
 8000de0:	4c14      	ldr	r4, [pc, #80]	; (8000e34 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8000de2:	4641      	mov	r1, r8
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <httpc_create_request_string.constprop.0.isra.0+0x94>)
 8000de6:	4638      	mov	r0, r7
 8000de8:	9501      	str	r5, [sp, #4]
 8000dea:	9600      	str	r6, [sp, #0]
 8000dec:	9402      	str	r4, [sp, #8]
 8000dee:	f023 fc3f 	bl	8024670 <sniprintf>
}
 8000df2:	b004      	add	sp, #16
 8000df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8000dfa:	4641      	mov	r1, r8
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	4638      	mov	r0, r7
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8000e04:	9402      	str	r4, [sp, #8]
 8000e06:	9500      	str	r5, [sp, #0]
 8000e08:	f023 fc32 	bl	8024670 <sniprintf>
}
 8000e0c:	b004      	add	sp, #16
 8000e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8000e14:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8000e18:	490b      	ldr	r1, [pc, #44]	; (8000e48 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8000e1c:	f023 fa72 	bl	8024304 <iprintf>
 8000e20:	e7da      	b.n	8000dd8 <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8000e24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8000e2c:	f023 fa6a 	bl	8024304 <iprintf>
 8000e30:	e7c4      	b.n	8000dbc <httpc_create_request_string.constprop.0.isra.0+0x14>
 8000e32:	bf00      	nop
 8000e34:	08028b88 	.word	0x08028b88
 8000e38:	08028c18 	.word	0x08028c18
 8000e3c:	08028b2c 	.word	0x08028b2c
 8000e40:	08028bc0 	.word	0x08028bc0
 8000e44:	08028a8c 	.word	0x08028a8c
 8000e48:	08028b18 	.word	0x08028b18
 8000e4c:	08028ab4 	.word	0x08028ab4

08000e50 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	b085      	sub	sp, #20
 8000e56:	460d      	mov	r5, r1
 8000e58:	4690      	mov	r8, r2
 8000e5a:	461e      	mov	r6, r3
 8000e5c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8000e60:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8000e62:	f1ba 0f00 	cmp.w	sl, #0
 8000e66:	d063      	beq.n	8000f30 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8000e68:	f04f 0900 	mov.w	r9, #0
 8000e6c:	4653      	mov	r3, sl
 8000e6e:	4632      	mov	r2, r6
 8000e70:	4641      	mov	r1, r8
 8000e72:	46b3      	mov	fp, r6
 8000e74:	e9cd 9900 	strd	r9, r9, [sp]
 8000e78:	79a8      	ldrb	r0, [r5, #6]
 8000e7a:	f7ff ff95 	bl	8000da8 <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8000e7e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8000e82:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8000e84:	4298      	cmp	r0, r3
 8000e86:	d861      	bhi.n	8000f4c <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 8000e88:	2034      	movs	r0, #52	; 0x34
 8000e8a:	f018 fa81 	bl	8019390 <mem_malloc>
	if (req == NULL) {
 8000e8e:	4604      	mov	r4, r0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d064      	beq.n	8000f5e <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8000e94:	4649      	mov	r1, r9
 8000e96:	2234      	movs	r2, #52	; 0x34
 8000e98:	f022 fa96 	bl	80233c8 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8000e9c:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8000e9e:	231e      	movs	r3, #30
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8000ea0:	f107 0901 	add.w	r9, r7, #1
 8000ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ea8:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8000eac:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8000eae:	f018 ff8d 	bl	8019dcc <pbuf_alloc>
 8000eb2:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d043      	beq.n	8000f40 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d140      	bne.n	8000f40 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 8000ec4:	f01a fcf8 	bl	801b8b8 <tcp_new>
 8000ec8:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d038      	beq.n	8000f40 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8000ece:	79ab      	ldrb	r3, [r5, #6]
 8000ed0:	bb63      	cbnz	r3, 8000f2c <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 8000ed2:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8000ed4:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 8000ed6:	f019 ff0b 	bl	801acf0 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 8000eda:	4922      	ldr	r1, [pc, #136]	; (8000f64 <httpc_init_connection_common.constprop.0+0x114>)
 8000edc:	6820      	ldr	r0, [r4, #0]
 8000ede:	f019 ff0b 	bl	801acf8 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 8000ee2:	4921      	ldr	r1, [pc, #132]	; (8000f68 <httpc_init_connection_common.constprop.0+0x118>)
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f019 ff3f 	bl	801ad68 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 8000eea:	2201      	movs	r2, #1
 8000eec:	491f      	ldr	r1, [pc, #124]	; (8000f6c <httpc_init_connection_common.constprop.0+0x11c>)
 8000eee:	6820      	ldr	r0, [r4, #0]
 8000ef0:	f019 ff5c 	bl	801adac <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 8000ef4:	491e      	ldr	r1, [pc, #120]	; (8000f70 <httpc_init_connection_common.constprop.0+0x120>)
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	f019 ff1a 	bl	801ad30 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8000efc:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8000f00:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8000f02:	4653      	mov	r3, sl
 8000f04:	465a      	mov	r2, fp
 8000f06:	4641      	mov	r1, r8
 8000f08:	6840      	ldr	r0, [r0, #4]
 8000f0a:	9000      	str	r0, [sp, #0]
 8000f0c:	79a8      	ldrb	r0, [r5, #6]
 8000f0e:	f7ff ff4b 	bl	8000da8 <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 8000f12:	4287      	cmp	r7, r0
 8000f14:	d11d      	bne.n	8000f52 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 8000f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 8000f18:	2000      	movs	r0, #0
	req->conn_settings = settings;
 8000f1a:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 8000f1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f20:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8000f22:	9b03      	ldr	r3, [sp, #12]
 8000f24:	601c      	str	r4, [r3, #0]
}
 8000f26:	b005      	add	sp, #20
 8000f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8000f2c:	88ae      	ldrh	r6, [r5, #4]
 8000f2e:	e7d0      	b.n	8000ed2 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <httpc_init_connection_common.constprop.0+0x124>)
 8000f32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f36:	4910      	ldr	r1, [pc, #64]	; (8000f78 <httpc_init_connection_common.constprop.0+0x128>)
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <httpc_init_connection_common.constprop.0+0x12c>)
 8000f3a:	f023 f9e3 	bl	8024304 <iprintf>
 8000f3e:	e793      	b.n	8000e68 <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff fedf 	bl	8000d04 <httpc_free_state>
		return ERR_MEM;
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	e7ec      	b.n	8000f26 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 8000f4c:	f06f 0005 	mvn.w	r0, #5
 8000f50:	e7e9      	b.n	8000f26 <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff fed6 	bl	8000d04 <httpc_free_state>
		return ERR_VAL;
 8000f58:	f06f 0005 	mvn.w	r0, #5
 8000f5c:	e7e3      	b.n	8000f26 <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f62:	e7e0      	b.n	8000f26 <httpc_init_connection_common.constprop.0+0xd6>
 8000f64:	08001215 	.word	0x08001215
 8000f68:	0800110d 	.word	0x0800110d
 8000f6c:	080011d9 	.word	0x080011d9
 8000f70:	08000cc1 	.word	0x08000cc1
 8000f74:	08028a8c 	.word	0x08028a8c
 8000f78:	08028c68 	.word	0x08028c68
 8000f7c:	08028ab4 	.word	0x08028ab4

08000f80 <HttpClientResultCallback>:



void HttpClientResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res, err_t err) {
 8000f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("HttpClientResultCallback: mytot=%u\n",mytot);
 8000f84:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001024 <HttpClientResultCallback+0xa4>
void HttpClientResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res, err_t err) {
 8000f88:	460c      	mov	r4, r1
	printf("HttpClientResultCallback: mytot=%u\n",mytot);
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <HttpClientResultCallback+0x84>)
void HttpClientResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res, err_t err) {
 8000f8c:	4617      	mov	r7, r2
	printf("HttpClientResultCallback: mytot=%u\n",mytot);
 8000f8e:	f8d8 1000 	ldr.w	r1, [r8]
void HttpClientResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res, err_t err) {
 8000f92:	461d      	mov	r5, r3
 8000f94:	f99d 6018 	ldrsb.w	r6, [sp, #24]
	printf("HttpClientResultCallback: mytot=%u\n",mytot);
 8000f98:	f023 f9b4 	bl	8024304 <iprintf>
	if (httpc_result != HTTPC_RESULT_OK) {
 8000f9c:	b144      	cbz	r4, 8000fb0 <HttpClientResultCallback+0x30>
	switch (err) {
 8000f9e:	2c09      	cmp	r4, #9
 8000fa0:	d80e      	bhi.n	8000fc0 <HttpClientResultCallback+0x40>
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HttpClientResultCallback+0x88>)
 8000fa4:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
		printf("HttpClientResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <HttpClientResultCallback+0x8c>)
 8000fac:	f023 f9aa 	bl	8024304 <iprintf>
	}
	if (err != ERR_OK) {
 8000fb0:	b946      	cbnz	r6, 8000fc4 <HttpClientResultCallback+0x44>
		printlwiperr(err);
	}
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000fb2:	463a      	mov	r2, r7
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	4816      	ldr	r0, [pc, #88]	; (8001010 <HttpClientResultCallback+0x90>)
}
 8000fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000fbc:	f023 b9a2 	b.w	8024304 <iprintf>
		printf("HttpClientResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HttpClientResultCallback+0x94>)
 8000fc2:	e7f1      	b.n	8000fa8 <HttpClientResultCallback+0x28>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8000fc4:	f106 0310 	add.w	r3, r6, #16
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d909      	bls.n	8000fe2 <HttpClientResultCallback+0x62>
		printf("LWIP: Unknown error");
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <HttpClientResultCallback+0x98>)
 8000fd0:	f023 f998 	bl	8024304 <iprintf>
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <HttpClientResultCallback+0x90>)
}
 8000fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000fde:	f023 b991 	b.w	8024304 <iprintf>
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 8000fe2:	4271      	negs	r1, r6
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HttpClientResultCallback+0x9c>)
 8000fe6:	f8d8 2000 	ldr.w	r2, [r8]
 8000fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <HttpClientResultCallback+0xa0>)
 8000ff0:	f023 f988 	bl	8024304 <iprintf>
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000ff4:	463a      	mov	r2, r7
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HttpClientResultCallback+0x90>)
}
 8000ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8000ffe:	f023 b981 	b.w	8024304 <iprintf>
 8001002:	bf00      	nop
 8001004:	08028c90 	.word	0x08028c90
 8001008:	08029018 	.word	0x08029018
 800100c:	08028cb4 	.word	0x08028cb4
 8001010:	08028d0c 	.word	0x08028d0c
 8001014:	08028c74 	.word	0x08028c74
 8001018:	08028cd8 	.word	0x08028cd8
 800101c:	08029040 	.word	0x08029040
 8001020:	08028cec 	.word	0x08028cec
 8001024:	200015c0 	.word	0x200015c0

08001028 <HttpClientReceiveCallback>:


void HttpClientReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800102c:	461c      	mov	r4, r3
 800102e:	b081      	sub	sp, #4
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001030:	2a00      	cmp	r2, #0
 8001032:	d03a      	beq.n	80010aa <HttpClientReceiveCallback+0x82>
	if (err != ERR_OK) {
 8001034:	2b00      	cmp	r3, #0
 8001036:	d141      	bne.n	80010bc <HttpClientReceiveCallback+0x94>
 8001038:	4688      	mov	r8, r1
 800103a:	4616      	mov	r6, r2
 800103c:	4615      	mov	r5, r2
 800103e:	4f2c      	ldr	r7, [pc, #176]	; (80010f0 <HttpClientReceiveCallback+0xc8>)
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 8001040:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001108 <HttpClientReceiveCallback+0xe0>
		printf("LWIP: Unknown error");
 8001044:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8001104 <HttpClientReceiveCallback+0xdc>
 8001048:	e001      	b.n	800104e <HttpClientReceiveCallback+0x26>
		printlwiperr(err);
		return;
	}


	for (q = p; q != NULL; q = q->next) {
 800104a:	682d      	ldr	r5, [r5, #0]
 800104c:	b315      	cbz	r5, 8001094 <HttpClientReceiveCallback+0x6c>

//		buf = q->payload;
//		for (i = 0; i < q->len; i++) {
//			putchar(buf[i]);
//		}
		putchar('.');
 800104e:	202e      	movs	r0, #46	; 0x2e
 8001050:	f023 f970 	bl	8024334 <putchar>

		mytot += q->len;
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	896b      	ldrh	r3, [r5, #10]

		altcp_recved(pcb, p->tot_len);
 8001058:	4640      	mov	r0, r8
 800105a:	8931      	ldrh	r1, [r6, #8]
		mytot += q->len;
 800105c:	4413      	add	r3, r2
 800105e:	603b      	str	r3, [r7, #0]
		altcp_recved(pcb, p->tot_len);
 8001060:	f019 fd06 	bl	801aa70 <tcp_recved>
		err = pbuf_free(p);
 8001064:	4630      	mov	r0, r6
 8001066:	f015 feb3 	bl	8016dd0 <pbuf_free_callback>
 800106a:	4604      	mov	r4, r0
 800106c:	fa4f fb80 	sxtb.w	fp, r0
		if (err != ERR_OK) {
 8001070:	f1bb 0f00 	cmp.w	fp, #0
 8001074:	d0e9      	beq.n	800104a <HttpClientReceiveCallback+0x22>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001076:	3410      	adds	r4, #16
			putchar('!');
 8001078:	2021      	movs	r0, #33	; 0x21
 800107a:	f023 f95b 	bl	8024334 <putchar>
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 800107e:	f1cb 0100 	rsb	r1, fp, #0
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001082:	b2e4      	uxtb	r4, r4
		printf("LWIP: Unknown error");
 8001084:	4648      	mov	r0, r9
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001086:	2c10      	cmp	r4, #16
 8001088:	d907      	bls.n	800109a <HttpClientReceiveCallback+0x72>
		printf("LWIP: Unknown error");
 800108a:	f023 f93b 	bl	8024304 <iprintf>
	for (q = p; q != NULL; q = q->next) {
 800108e:	682d      	ldr	r5, [r5, #0]
 8001090:	2d00      	cmp	r5, #0
 8001092:	d1dc      	bne.n	800104e <HttpClientReceiveCallback+0x26>
	}

//	altcp_recved(pcb, p->tot_len);
//	pbuf_free_callback(p);
	//pbuf_free(p);
}
 8001094:	b001      	add	sp, #4
 8001096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HttpClientReceiveCallback+0xcc>)
 800109c:	4650      	mov	r0, sl
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010a4:	f023 f92e 	bl	8024304 <iprintf>
}
 80010a8:	e7cf      	b.n	800104a <HttpClientReceiveCallback+0x22>
	LWIP_ASSERT("p != NULL", p != NULL);
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HttpClientReceiveCallback+0xd0>)
 80010ac:	f240 32fb 	movw	r2, #1019	; 0x3fb
 80010b0:	4912      	ldr	r1, [pc, #72]	; (80010fc <HttpClientReceiveCallback+0xd4>)
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <HttpClientReceiveCallback+0xd8>)
 80010b4:	f023 f926 	bl	8024304 <iprintf>
	if (err != ERR_OK) {
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d0eb      	beq.n	8001094 <HttpClientReceiveCallback+0x6c>
		putchar('#');
 80010bc:	2023      	movs	r0, #35	; 0x23
 80010be:	f023 f939 	bl	8024334 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80010c2:	f104 0310 	add.w	r3, r4, #16
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b10      	cmp	r3, #16
 80010ca:	d905      	bls.n	80010d8 <HttpClientReceiveCallback+0xb0>
		printf("LWIP: Unknown error");
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <HttpClientReceiveCallback+0xdc>)
}
 80010ce:	b001      	add	sp, #4
 80010d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP: Unknown error");
 80010d4:	f023 b916 	b.w	8024304 <iprintf>
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 80010d8:	4261      	negs	r1, r4
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HttpClientReceiveCallback+0xcc>)
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HttpClientReceiveCallback+0xc8>)
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <HttpClientReceiveCallback+0xe0>)
 80010e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010e4:	6812      	ldr	r2, [r2, #0]
}
 80010e6:	b001      	add	sp, #4
 80010e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP error %d: mytot=%d, %s\n", -err, mytot, lerr_strerr[-err]);
 80010ec:	f023 b90a 	b.w	8024304 <iprintf>
 80010f0:	200015c0 	.word	0x200015c0
 80010f4:	08029040 	.word	0x08029040
 80010f8:	08028a8c 	.word	0x08028a8c
 80010fc:	08043e20 	.word	0x08043e20
 8001100:	08028ab4 	.word	0x08028ab4
 8001104:	08028cd8 	.word	0x08028cd8
 8001108:	08028cec 	.word	0x08028cec

0800110c <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	4604      	mov	r4, r0
 8001110:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d",err);
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 8001114:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d",err);
 8001116:	f023 f8f5 	bl	8024304 <iprintf>
	if (req != NULL) {
 800111a:	b184      	cbz	r4, 800113e <httpc_tcp_err+0x32>
		req->pcb = NULL;
 800111c:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 800111e:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001120:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 8001122:	b132      	cbz	r2, 8001132 <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001124:	6896      	ldr	r6, [r2, #8]
 8001126:	b126      	cbz	r6, 8001132 <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800112a:	2104      	movs	r1, #4
 800112c:	9500      	str	r5, [sp, #0]
 800112e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001130:	47b0      	blx	r6
		return httpc_free_state(req);
 8001132:	4620      	mov	r0, r4
}
 8001134:	b002      	add	sp, #8
 8001136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 800113a:	f7ff bde3 	b.w	8000d04 <httpc_free_state>
}
 800113e:	b002      	add	sp, #8
 8001140:	bd70      	pop	{r4, r5, r6, pc}
 8001142:	bf00      	nop
 8001144:	08028d2c 	.word	0x08028d2c

08001148 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	4614      	mov	r4, r2
 800114c:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 800114e:	b1b1      	cbz	r1, 800117e <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001150:	4610      	mov	r0, r2
 8001152:	f7ff fdb7 	bl	8000cc4 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 8001156:	b180      	cbz	r0, 800117a <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001158:	2102      	movs	r1, #2
	if (req != NULL) {
 800115a:	b174      	cbz	r4, 800117a <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 800115c:	6a23      	ldr	r3, [r4, #32]
 800115e:	b133      	cbz	r3, 800116e <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001160:	689d      	ldr	r5, [r3, #8]
 8001162:	b125      	cbz	r5, 800116e <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001164:	9000      	str	r0, [sp, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800116c:	47a8      	blx	r5
		return httpc_free_state(req);
 800116e:	4620      	mov	r0, r4
}
 8001170:	b003      	add	sp, #12
 8001172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 8001176:	f7ff bdc5 	b.w	8000d04 <httpc_free_state>
}
 800117a:	b003      	add	sp, #12
 800117c:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 800117e:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001180:	f06f 000f 	mvn.w	r0, #15
 8001184:	e7e9      	b.n	800115a <httpc_dns_found+0x12>
 8001186:	bf00      	nop

08001188 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001188:	6901      	ldr	r1, [r0, #16]
 800118a:	2301      	movs	r3, #1
 800118c:	894a      	ldrh	r2, [r1, #10]
 800118e:	6849      	ldr	r1, [r1, #4]
 8001190:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001192:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001194:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001196:	b082      	sub	sp, #8
 8001198:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 800119a:	6800      	ldr	r0, [r0, #0]
 800119c:	f01c fb80 	bl	801d8a0 <tcp_write>
	if (r != ERR_OK) {
 80011a0:	4605      	mov	r5, r0
 80011a2:	b948      	cbnz	r0, 80011b8 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 80011a4:	6920      	ldr	r0, [r4, #16]
 80011a6:	f015 fe13 	bl	8016dd0 <pbuf_free_callback>
	altcp_output(req->pcb);
 80011aa:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 80011ac:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 80011ae:	f01d f991 	bl	801e4d4 <tcp_output>
}
 80011b2:	4628      	mov	r0, r5
 80011b4:	b002      	add	sp, #8
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 80011b8:	6a23      	ldr	r3, [r4, #32]
 80011ba:	b13b      	cbz	r3, 80011cc <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 80011bc:	689e      	ldr	r6, [r3, #8]
 80011be:	b12e      	cbz	r6, 80011cc <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80011c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011c2:	2300      	movs	r3, #0
 80011c4:	9000      	str	r0, [sp, #0]
 80011c6:	2107      	movs	r1, #7
 80011c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011ca:	47b0      	blx	r6
		return httpc_free_state(req);
 80011cc:	4620      	mov	r0, r4
}
 80011ce:	b002      	add	sp, #8
 80011d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 80011d4:	f7ff bd96 	b.w	8000d04 <httpc_free_state>

080011d8 <httpc_tcp_poll>:
	if (req != NULL) {
 80011d8:	b1d0      	cbz	r0, 8001210 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 80011da:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 80011dc:	b530      	push	{r4, r5, lr}
 80011de:	4604      	mov	r4, r0
 80011e0:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 80011e2:	b12b      	cbz	r3, 80011f0 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 80011e4:	3b01      	subs	r3, #1
 80011e6:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 80011e8:	b113      	cbz	r3, 80011f0 <httpc_tcp_poll+0x18>
}
 80011ea:	2000      	movs	r0, #0
 80011ec:	b003      	add	sp, #12
 80011ee:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80011f0:	6a23      	ldr	r3, [r4, #32]
 80011f2:	b13b      	cbz	r3, 8001204 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80011f4:	689d      	ldr	r5, [r3, #8]
 80011f6:	b12d      	cbz	r5, 8001204 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80011f8:	2300      	movs	r3, #0
 80011fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011fc:	2105      	movs	r1, #5
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001202:	47a8      	blx	r5
		return httpc_free_state(req);
 8001204:	4620      	mov	r0, r4
}
 8001206:	b003      	add	sp, #12
 8001208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800120c:	f7ff bd7a 	b.w	8000d04 <httpc_free_state>
}
 8001210:	2000      	movs	r0, #0
 8001212:	4770      	bx	lr

08001214 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 8001214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	4604      	mov	r4, r0
 800121a:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 800121c:	4615      	mov	r5, r2
 800121e:	2a00      	cmp	r2, #0
 8001220:	f000 80e2 	beq.w	80013e8 <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001224:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 8001228:	460e      	mov	r6, r1
 800122a:	461f      	mov	r7, r3
 800122c:	f1ba 0f02 	cmp.w	sl, #2
 8001230:	f000 80c8 	beq.w	80013c4 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 8001234:	6940      	ldr	r0, [r0, #20]
 8001236:	b190      	cbz	r0, 800125e <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 8001238:	4611      	mov	r1, r2
 800123a:	f018 ffcb 	bl	801a1d4 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 800123e:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001242:	f1ba 0f00 	cmp.w	sl, #0
 8001246:	d00e      	beq.n	8001266 <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001248:	f1ba 0f01 	cmp.w	sl, #1
 800124c:	d06e      	beq.n	800132c <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 800124e:	f1ba 0f02 	cmp.w	sl, #2
 8001252:	f000 80b7 	beq.w	80013c4 <httpc_tcp_recv+0x1b0>
}
 8001256:	2000      	movs	r0, #0
 8001258:	b009      	add	sp, #36	; 0x24
 800125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 800125e:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001260:	f1ba 0f00 	cmp.w	sl, #0
 8001264:	d1f0      	bne.n	8001248 <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 8001266:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 800126a:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 800126e:	4653      	mov	r3, sl
 8001270:	2202      	movs	r2, #2
 8001272:	4989      	ldr	r1, [pc, #548]	; (8001498 <httpc_tcp_recv+0x284>)
 8001274:	4640      	mov	r0, r8
 8001276:	f019 f99b 	bl	801a5b0 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 800127a:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 800127c:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 800127e:	f000 8105 	beq.w	800148c <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001282:	4653      	mov	r3, sl
 8001284:	2201      	movs	r2, #1
 8001286:	4985      	ldr	r1, [pc, #532]	; (800149c <httpc_tcp_recv+0x288>)
 8001288:	4640      	mov	r0, r8
 800128a:	f019 f991 	bl	801a5b0 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 800128e:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001290:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 8001292:	f000 80fb 	beq.w	800148c <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 8001296:	4651      	mov	r1, sl
 8001298:	2305      	movs	r3, #5
 800129a:	4a81      	ldr	r2, [pc, #516]	; (80014a0 <httpc_tcp_recv+0x28c>)
 800129c:	4640      	mov	r0, r8
 800129e:	f019 f94f 	bl	801a540 <pbuf_memcmp>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	f040 80f2 	bne.w	800148c <httpc_tcp_recv+0x278>
 80012a8:	2106      	movs	r1, #6
 80012aa:	4640      	mov	r0, r8
 80012ac:	f019 f91c 	bl	801a4e8 <pbuf_get_at>
 80012b0:	282e      	cmp	r0, #46	; 0x2e
 80012b2:	f040 80eb 	bne.w	800148c <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 80012b6:	2105      	movs	r1, #5
 80012b8:	4640      	mov	r0, r8
 80012ba:	f019 f915 	bl	801a4e8 <pbuf_get_at>
 80012be:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 80012c0:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 80012c2:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 80012c6:	4640      	mov	r0, r8
 80012c8:	f019 f90e 	bl	801a4e8 <pbuf_get_at>
 80012cc:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80012ce:	f109 0301 	add.w	r3, r9, #1
 80012d2:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 80012d4:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80012d8:	4970      	ldr	r1, [pc, #448]	; (800149c <httpc_tcp_recv+0x288>)
 80012da:	b29b      	uxth	r3, r3
				*http_version = version;
 80012dc:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 80012de:	4640      	mov	r0, r8
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	f019 f965 	bl	801a5b0 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 80012e6:	4558      	cmp	r0, fp
 80012e8:	9b02      	ldr	r3, [sp, #8]
 80012ea:	f000 80a2 	beq.w	8001432 <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 80012ee:	eba0 0909 	sub.w	r9, r0, r9
 80012f2:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80012f6:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80012f8:	4640      	mov	r0, r8
 80012fa:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80012fc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8001300:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 8001304:	fa1f f289 	uxth.w	r2, r9
 8001308:	f018 ffd6 	bl	801a2b8 <pbuf_copy_partial>
 800130c:	4581      	cmp	r9, r0
 800130e:	f040 80bd 	bne.w	800148c <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 8001312:	a804      	add	r0, sp, #16
 8001314:	f021 fdd2 	bl	8022ebc <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 8001318:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800131c:	1e42      	subs	r2, r0, #1
 800131e:	429a      	cmp	r2, r3
 8001320:	f200 80b4 	bhi.w	800148c <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001324:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 8001326:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001328:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 800132c:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001330:	2300      	movs	r3, #0
 8001332:	2204      	movs	r2, #4
 8001334:	495b      	ldr	r1, [pc, #364]	; (80014a4 <httpc_tcp_recv+0x290>)
 8001336:	4648      	mov	r0, r9
 8001338:	f019 f93a 	bl	801a5b0 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 800133c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001340:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001342:	4298      	cmp	r0, r3
 8001344:	f200 80a5 	bhi.w	8001492 <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 800134c:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001350:	2210      	movs	r2, #16
 8001352:	4955      	ldr	r1, [pc, #340]	; (80014a8 <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001354:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001356:	4648      	mov	r0, r9
 8001358:	2300      	movs	r3, #0
 800135a:	f019 f929 	bl	801a5b0 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 800135e:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001360:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001362:	d16e      	bne.n	8001442 <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001364:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001368:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 800136a:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 800136c:	4629      	mov	r1, r5
 800136e:	f019 fb7f 	bl	801aa70 <tcp_recved>
				if (req->conn_settings) {
 8001372:	6a23      	ldr	r3, [r4, #32]
 8001374:	b1cb      	cbz	r3, 80013aa <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001376:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800137a:	f1b8 0f00 	cmp.w	r8, #0
 800137e:	d014      	beq.n	80013aa <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001382:	4620      	mov	r0, r4
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	462b      	mov	r3, r5
 8001388:	6962      	ldr	r2, [r4, #20]
 800138a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800138c:	47c0      	blx	r8
						if (err != ERR_OK) {
 800138e:	b160      	cbz	r0, 80013aa <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001390:	6a23      	ldr	r3, [r4, #32]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d037      	beq.n	8001406 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001396:	689d      	ldr	r5, [r3, #8]
 8001398:	2d00      	cmp	r5, #0
 800139a:	d034      	beq.n	8001406 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 800139c:	8b63      	ldrh	r3, [r4, #26]
 800139e:	2108      	movs	r1, #8
 80013a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013a2:	9000      	str	r0, [sp, #0]
 80013a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013a6:	47a8      	blx	r5
 80013a8:	e02d      	b.n	8001406 <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 80013aa:	4629      	mov	r1, r5
 80013ac:	6960      	ldr	r0, [r4, #20]
 80013ae:	f018 fec3 	bl	801a138 <pbuf_free_header>
				req->rx_hdrs = NULL;
 80013b2:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 80013b4:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 80013b6:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 80013be:	2800      	cmp	r0, #0
 80013c0:	f43f af49 	beq.w	8001256 <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 80013c4:	8929      	ldrh	r1, [r5, #8]
 80013c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 80013c8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 80013cc:	440b      	add	r3, r1
 80013ce:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 80013d0:	f1be 0f00 	cmp.w	lr, #0
 80013d4:	d026      	beq.n	8001424 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 80013d6:	463b      	mov	r3, r7
 80013d8:	462a      	mov	r2, r5
 80013da:	4631      	mov	r1, r6
 80013dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013de:	46f4      	mov	ip, lr
}
 80013e0:	b009      	add	sp, #36	; 0x24
 80013e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 80013e6:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80013e8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d010      	beq.n	8001412 <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 80013f0:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 80013f2:	6a23      	ldr	r3, [r4, #32]
 80013f4:	b13b      	cbz	r3, 8001406 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 80013f6:	689d      	ldr	r5, [r3, #8]
 80013f8:	b12d      	cbz	r5, 8001406 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80013fa:	2200      	movs	r2, #0
 80013fc:	8b63      	ldrh	r3, [r4, #26]
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001404:	47a8      	blx	r5
		return httpc_free_state(req);
 8001406:	4620      	mov	r0, r4
}
 8001408:	b009      	add	sp, #36	; 0x24
 800140a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 800140e:	f7ff bc79 	b.w	8000d04 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001412:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001414:	1c4b      	adds	r3, r1, #1
 8001416:	d012      	beq.n	800143e <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001418:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 800141a:	42a9      	cmp	r1, r5
 800141c:	bf14      	ite	ne
 800141e:	2109      	movne	r1, #9
 8001420:	2100      	moveq	r1, #0
 8001422:	e7e6      	b.n	80013f2 <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001424:	4630      	mov	r0, r6
 8001426:	f019 fb23 	bl	801aa70 <tcp_recved>
			pbuf_free(p);
 800142a:	4628      	mov	r0, r5
 800142c:	f015 fcd0 	bl	8016dd0 <pbuf_free_callback>
 8001430:	e711      	b.n	8001256 <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001432:	9a03      	ldr	r2, [sp, #12]
 8001434:	eba2 0909 	sub.w	r9, r2, r9
 8001438:	f109 39ff 	add.w	r9, r9, #4294967295
 800143c:	e75b      	b.n	80012f6 <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 800143e:	4611      	mov	r1, r2
 8001440:	e7d7      	b.n	80013f2 <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001442:	4603      	mov	r3, r0
 8001444:	2202      	movs	r2, #2
 8001446:	4914      	ldr	r1, [pc, #80]	; (8001498 <httpc_tcp_recv+0x284>)
 8001448:	4648      	mov	r0, r9
 800144a:	f019 f8b1 	bl	801a5b0 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 800144e:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001450:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001452:	d087      	beq.n	8001364 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001454:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001458:	4648      	mov	r0, r9
 800145a:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 800145c:	1b52      	subs	r2, r2, r5
 800145e:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001460:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001464:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001466:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001468:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 800146a:	e9cd 2204 	strd	r2, r2, [sp, #16]
 800146e:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001472:	462a      	mov	r2, r5
 8001474:	f018 ff20 	bl	801a2b8 <pbuf_copy_partial>
 8001478:	4285      	cmp	r5, r0
 800147a:	f47f af73 	bne.w	8001364 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 800147e:	a804      	add	r0, sp, #16
 8001480:	f021 fd1c 	bl	8022ebc <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001484:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001486:	bfa8      	it	ge
 8001488:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 800148a:	e76b      	b.n	8001364 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 800148c:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001490:	e6da      	b.n	8001248 <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001492:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001496:	e6da      	b.n	800124e <httpc_tcp_recv+0x3a>
 8001498:	08028c14 	.word	0x08028c14
 800149c:	0802af5c 	.word	0x0802af5c
 80014a0:	08028d40 	.word	0x08028d40
 80014a4:	08028d48 	.word	0x08028d48
 80014a8:	08028d50 	.word	0x08028d50

080014ac <httpc_get_file_dns>:
altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 80014b2:	2d00      	cmp	r5, #0
 80014b4:	bf18      	it	ne
 80014b6:	2a00      	cmpne	r2, #0
 80014b8:	d044      	beq.n	8001544 <httpc_get_file_dns+0x98>
 80014ba:	4604      	mov	r4, r0
 80014bc:	2800      	cmp	r0, #0
 80014be:	d041      	beq.n	8001544 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 80014c0:	4610      	mov	r0, r2
 80014c2:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 80014c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80014c6:	460b      	mov	r3, r1
 80014c8:	9000      	str	r0, [sp, #0]
 80014ca:	4631      	mov	r1, r6
 80014cc:	a807      	add	r0, sp, #28
 80014ce:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80014d2:	4622      	mov	r2, r4
 80014d4:	f7ff fcbc 	bl	8000e50 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 80014d8:	4605      	mov	r5, r0
 80014da:	b998      	cbnz	r0, 8001504 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 80014dc:	79b3      	ldrb	r3, [r6, #6]
 80014de:	b9a3      	cbnz	r3, 800150a <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 80014e0:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 80014e2:	b33e      	cbz	r6, 8001534 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 80014e4:	1d31      	adds	r1, r6, #4
 80014e6:	4633      	mov	r3, r6
 80014e8:	4620      	mov	r0, r4
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <httpc_get_file_dns+0xac>)
 80014ec:	9105      	str	r1, [sp, #20]
 80014ee:	f017 fb17 	bl	8018b20 <dns_gethostbyname>
	if (err == ERR_OK) {
 80014f2:	9905      	ldr	r1, [sp, #20]
 80014f4:	4603      	mov	r3, r0
 80014f6:	b1c0      	cbz	r0, 800152a <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 80014f8:	1d42      	adds	r2, r0, #5
 80014fa:	d00d      	beq.n	8001518 <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 80014fc:	9807      	ldr	r0, [sp, #28]
		return err;
 80014fe:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001500:	f7ff fc00 	bl	8000d04 <httpc_free_state>
}
 8001504:	4628      	mov	r0, r5
 8001506:	b008      	add	sp, #32
 8001508:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 800150a:	4631      	mov	r1, r6
 800150c:	9807      	ldr	r0, [sp, #28]
 800150e:	f7ff fbd9 	bl	8000cc4 <httpc_get_internal_addr>
 8001512:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f1      	bne.n	80014fc <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f2      	beq.n	8001504 <httpc_get_file_dns+0x58>
		*connection = req;
 800151e:	9b07      	ldr	r3, [sp, #28]
}
 8001520:	4628      	mov	r0, r5
		*connection = req;
 8001522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	b008      	add	sp, #32
 8001528:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 800152a:	4630      	mov	r0, r6
 800152c:	f7ff fbca 	bl	8000cc4 <httpc_get_internal_addr>
 8001530:	4603      	mov	r3, r0
 8001532:	e7ef      	b.n	8001514 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <httpc_get_file_dns+0xb0>)
 8001536:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 800153a:	4909      	ldr	r1, [pc, #36]	; (8001560 <httpc_get_file_dns+0xb4>)
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <httpc_get_file_dns+0xb8>)
 800153e:	f022 fee1 	bl	8024304 <iprintf>
 8001542:	e7cf      	b.n	80014e4 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <httpc_get_file_dns+0xb0>)
 8001546:	f240 228e 	movw	r2, #654	; 0x28e
 800154a:	4907      	ldr	r1, [pc, #28]	; (8001568 <httpc_get_file_dns+0xbc>)
 800154c:	f06f 050f 	mvn.w	r5, #15
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <httpc_get_file_dns+0xb8>)
 8001552:	f022 fed7 	bl	8024304 <iprintf>
 8001556:	e7d5      	b.n	8001504 <httpc_get_file_dns+0x58>
 8001558:	08001149 	.word	0x08001149
 800155c:	08028a8c 	.word	0x08028a8c
 8001560:	08028aa8 	.word	0x08028aa8
 8001564:	08028ab4 	.word	0x08028ab4
 8001568:	08028d64 	.word	0x08028d64

0800156c <initfilehttpclient>:

void initfilehttpclient() {
 800156c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	err_t error;
	connection = &conn;	// point to static
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <initfilehttpclient+0xb0>)
	settings = &set;		// point to static
	memset(&set, 0, sizeof(set));
 8001572:	f04f 0800 	mov.w	r8, #0
	settings = &set;		// point to static
 8001576:	4f2a      	ldr	r7, [pc, #168]	; (8001620 <initfilehttpclient+0xb4>)
void initfilehttpclient() {
 8001578:	b085      	sub	sp, #20
	connection = &conn;	// point to static
 800157a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8001644 <initfilehttpclient+0xd8>
	memset(&conn, 0, sizeof(conn));
 800157e:	2234      	movs	r2, #52	; 0x34
	settings = &set;		// point to static
 8001580:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001648 <initfilehttpclient+0xdc>
	memset(&conn, 0, sizeof(conn));
 8001584:	4641      	mov	r1, r8
 8001586:	4618      	mov	r0, r3
	connection = &conn;	// point to static
 8001588:	f8cb 3000 	str.w	r3, [fp]
	memset(&set, 0, sizeof(set));
 800158c:	f8c7 8000 	str.w	r8, [r7]
	settings = &set;		// point to static
 8001590:	f8ca 7000 	str.w	r7, [sl]
	memset(&set, 0, sizeof(set));
 8001594:	f8c7 8004 	str.w	r8, [r7, #4]
	memset(&conn, 0, sizeof(conn));
 8001598:	f021 ff16 	bl	80233c8 <memset>

	settings->use_proxy = 0;
	settings->headers_done_fn = RecvHttpHeaderCallback;
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <initfilehttpclient+0xb8>)
	connection->timeout_ticks = 1;

//	strcpy(domain_name, "xen.local");
//	strcpy(url, "/firmware/my12.bin");

	strcpy(domain_name, "lightning.vk4ya.com");
 800159e:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800164c <initfilehttpclient+0xe0>
	settings->headers_done_fn = RecvHttpHeaderCallback;
 80015a2:	60fa      	str	r2, [r7, #12]
	connection->timeout_ticks = 1;
 80015a4:	2201      	movs	r2, #1
	strcpy(domain_name, "lightning.vk4ya.com");
 80015a6:	4d20      	ldr	r5, [pc, #128]	; (8001628 <initfilehttpclient+0xbc>)
	connection->timeout_ticks = 1;
 80015a8:	60c2      	str	r2, [r0, #12]
	strcpy(url, "/firmware/my12.bin");
 80015aa:	4e20      	ldr	r6, [pc, #128]	; (800162c <initfilehttpclient+0xc0>)
 80015ac:	4c20      	ldr	r4, [pc, #128]	; (8001630 <initfilehttpclient+0xc4>)
	settings->result_fn = HttpClientResultCallback;
 80015ae:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001650 <initfilehttpclient+0xe4>
	strcpy(domain_name, "lightning.vk4ya.com");
 80015b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b8:	f8dc 3000 	ldr.w	r3, [ip]
	settings->result_fn = HttpClientResultCallback;
 80015bc:	f8c7 9008 	str.w	r9, [r7, #8]
	strcpy(domain_name, "lightning.vk4ya.com");
 80015c0:	602b      	str	r3, [r5, #0]
	strcpy(url, "/firmware/my12.bin");
 80015c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c6:	6833      	ldr	r3, [r6, #0]

	printf("domain:%s, url:%s\n", domain_name, url);
 80015c8:	f1a5 0110 	sub.w	r1, r5, #16
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <initfilehttpclient+0xc8>)
	strcpy(url, "/firmware/my12.bin");
 80015ce:	f824 3b02 	strh.w	r3, [r4], #2
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	4622      	mov	r2, r4
 80015d6:	f802 3912 	strb.w	r3, [r2], #-18
	printf("domain:%s, url:%s\n", domain_name, url);
 80015da:	f022 fe93 	bl	8024304 <iprintf>

	mytot = 0;
	error = httpc_get_file_dns(domain_name, 8082, url, settings, HttpClientReceiveCallback, HttpClientResultCallback,&connection);
 80015de:	4916      	ldr	r1, [pc, #88]	; (8001638 <initfilehttpclient+0xcc>)
 80015e0:	f1a4 0212 	sub.w	r2, r4, #18
	mytot = 0;
 80015e4:	4c15      	ldr	r4, [pc, #84]	; (800163c <initfilehttpclient+0xd0>)
	error = httpc_get_file_dns(domain_name, 8082, url, settings, HttpClientReceiveCallback, HttpClientResultCallback,&connection);
 80015e6:	9100      	str	r1, [sp, #0]
 80015e8:	f1a5 0010 	sub.w	r0, r5, #16
 80015ec:	f8cd b008 	str.w	fp, [sp, #8]
 80015f0:	f641 7192 	movw	r1, #8082	; 0x1f92
 80015f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80015f8:	f8da 3000 	ldr.w	r3, [sl]
	mytot = 0;
 80015fc:	f8c4 8000 	str.w	r8, [r4]
	error = httpc_get_file_dns(domain_name, 8082, url, settings, HttpClientReceiveCallback, HttpClientResultCallback,&connection);
 8001600:	f7ff ff54 	bl	80014ac <httpc_get_file_dns>
	if (error != HTTPC_RESULT_OK) {
 8001604:	b910      	cbnz	r0, 800160c <initfilehttpclient+0xa0>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001606:	b005      	add	sp, #20
 8001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 800160c:	4601      	mov	r1, r0
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <initfilehttpclient+0xd4>)
}
 8001610:	b005      	add	sp, #20
 8001612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001616:	f022 be75 	b.w	8024304 <iprintf>
 800161a:	bf00      	nop
 800161c:	20001568 	.word	0x20001568
 8001620:	200015c4 	.word	0x200015c4
 8001624:	08000d6d 	.word	0x08000d6d
 8001628:	200015a0 	.word	0x200015a0
 800162c:	08028d8c 	.word	0x08028d8c
 8001630:	200015d8 	.word	0x200015d8
 8001634:	08028da0 	.word	0x08028da0
 8001638:	08001029 	.word	0x08001029
 800163c:	200015c0 	.word	0x200015c0
 8001640:	08028db4 	.word	0x08028db4
 8001644:	2000159c 	.word	0x2000159c
 8001648:	200015d4 	.word	0x200015d4
 800164c:	08028d78 	.word	0x08028d78
 8001650:	08000f81 	.word	0x08000f81

08001654 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001654:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001656:	b510      	push	{r4, lr}
 8001658:	b082      	sub	sp, #8
	timeoutcnt = 0;
 800165a:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	2b95      	cmp	r3, #149	; 0x95
 8001660:	dc0d      	bgt.n	800167e <wait_armtx+0x2a>
 8001662:	4c0e      	ldr	r4, [pc, #56]	; (800169c <wait_armtx+0x48>)
 8001664:	e007      	b.n	8001676 <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001666:	9b01      	ldr	r3, [sp, #4]
 8001668:	4403      	add	r3, r0
 800166a:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 800166c:	f012 feb0 	bl	80143d0 <osDelay>
	while (timeoutcnt < 150) {
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	2b95      	cmp	r3, #149	; 0x95
 8001674:	dc03      	bgt.n	800167e <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001676:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	4283      	cmp	r3, r0
 800167c:	d1f3      	bne.n	8001666 <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 800167e:	9b01      	ldr	r3, [sp, #4]
 8001680:	2bf9      	cmp	r3, #249	; 0xf9
 8001682:	dc02      	bgt.n	800168a <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001684:	2000      	movs	r0, #0
}
 8001686:	b002      	add	sp, #8
 8001688:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <wait_armtx+0x4c>)
 800168c:	f022 fed6 	bl	802443c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <wait_armtx+0x48>)
 8001692:	2201      	movs	r2, #1
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	601a      	str	r2, [r3, #0]
		return (-1);
 800169a:	e7f4      	b.n	8001686 <wait_armtx+0x32>
 800169c:	20001dec 	.word	0x20001dec
 80016a0:	08029084 	.word	0x08029084

080016a4 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_UART_TxCpltCallback+0x14>)
 80016aa:	6802      	ldr	r2, [r0, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d000      	beq.n	80016b2 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 80016b0:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 80016b2:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_UART_TxCpltCallback+0x18>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40005000 	.word	0x40005000
 80016c0:	20001dec 	.word	0x20001dec

080016c4 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 80016c4:	b570      	push	{r4, r5, r6, lr}
 80016c6:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 80016c8:	4c1b      	ldr	r4, [pc, #108]	; (8001738 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 80016ca:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 80016cc:	481b      	ldr	r0, [pc, #108]	; (800173c <lcd_uart_init+0x78>)
 80016ce:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 80016d0:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 80016d2:	f022 fe17 	bl	8024304 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 80016d8:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 80016da:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 80016dc:	f00f fc32 	bl	8010f44 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f00f fb7d 	bl	8010de0 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 80016e8:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80016ea:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 80016ec:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80016f0:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80016f4:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001700:	f010 fc1a 	bl	8011f38 <HAL_UART_Init>
 8001704:	b958      	cbnz	r0, 800171e <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	490f      	ldr	r1, [pc, #60]	; (8001748 <lcd_uart_init+0x84>)
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <lcd_uart_init+0x74>)
 800170c:	f010 fe04 	bl	8012318 <HAL_UART_Receive_DMA>
 8001710:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001714:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001718:	b933      	cbnz	r3, 8001728 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 800171a:	b002      	add	sp, #8
 800171c:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 800171e:	4631      	mov	r1, r6
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <lcd_uart_init+0x88>)
 8001722:	f022 fdef 	bl	8024304 <iprintf>
 8001726:	e7ee      	b.n	8001706 <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001728:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <lcd_uart_init+0x8c>)
}
 800172e:	b002      	add	sp, #8
 8001730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001734:	f022 bde6 	b.w	8024304 <iprintf>
 8001738:	20002874 	.word	0x20002874
 800173c:	08029098 	.word	0x08029098
 8001740:	200017f0 	.word	0x200017f0
 8001744:	40005000 	.word	0x40005000
 8001748:	200016b0 	.word	0x200016b0
 800174c:	080290b4 	.word	0x080290b4
 8001750:	080290e4 	.word	0x080290e4

08001754 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <lcd_init+0xec>)
void lcd_init(int baud) {
 8001758:	b08d      	sub	sp, #52	; 0x34
 800175a:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800175e:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001760:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001762:	4e39      	ldr	r6, [pc, #228]	; (8001848 <lcd_init+0xf4>)
 8001764:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176c:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8001770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001772:	c407      	stmia	r4!, {r0, r1, r2}
 8001774:	f824 3b02 	strh.w	r3, [r4], #2
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 800177c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001780:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 8001784:	4629      	mov	r1, r5
 8001786:	4831      	ldr	r0, [pc, #196]	; (800184c <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001788:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 800178c:	f022 fdba 	bl	8024304 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001790:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8001794:	d008      	beq.n	80017a8 <lcd_init+0x54>
 8001796:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 800179a:	d005      	beq.n	80017a8 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 800179c:	4629      	mov	r1, r5
 800179e:	482c      	ldr	r0, [pc, #176]	; (8001850 <lcd_init+0xfc>)
 80017a0:	f022 fdb0 	bl	8024304 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 80017a4:	b00d      	add	sp, #52	; 0x34
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 80017a8:	2300      	movs	r3, #0
 80017aa:	4c2a      	ldr	r4, [pc, #168]	; (8001854 <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80017ac:	4639      	mov	r1, r7
 80017ae:	2207      	movs	r2, #7
 80017b0:	4829      	ldr	r0, [pc, #164]	; (8001858 <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 80017b2:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80017b4:	f00f fb70 	bl	8010e98 <HAL_UART_Transmit_DMA>
 80017b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80017bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017c0:	b14b      	cbz	r3, 80017d6 <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80017c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80017c6:	4825      	ldr	r0, [pc, #148]	; (800185c <lcd_init+0x108>)
 80017c8:	f022 fd9c 	bl	8024304 <iprintf>
	while (!(txdmadone)) {
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	b92b      	cbnz	r3, 80017dc <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 80017d0:	2001      	movs	r0, #1
 80017d2:	f012 fdfd 	bl	80143d0 <osDelay>
	while (!(txdmadone)) {
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f9      	beq.n	80017d0 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 80017dc:	2300      	movs	r3, #0
	osDelay(800);
 80017de:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 80017e2:	6023      	str	r3, [r4, #0]
	osDelay(800);
 80017e4:	f012 fdf4 	bl	80143d0 <osDelay>
	if (baud == 9600)
 80017e8:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80017ec:	d017      	beq.n	800181e <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 80017ee:	220e      	movs	r2, #14
 80017f0:	a908      	add	r1, sp, #32
 80017f2:	4819      	ldr	r0, [pc, #100]	; (8001858 <lcd_init+0x104>)
 80017f4:	f00f fb50 	bl	8010e98 <HAL_UART_Transmit_DMA>
 80017f8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80017fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001800:	b11b      	cbz	r3, 800180a <lcd_init+0xb6>
 8001802:	e017      	b.n	8001834 <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 8001804:	2001      	movs	r0, #1
 8001806:	f012 fde3 	bl	80143d0 <osDelay>
	while (!(txdmadone)) {
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 8001810:	2300      	movs	r3, #0
	osDelay(120);
 8001812:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 8001814:	6023      	str	r3, [r4, #0]
	osDelay(120);
 8001816:	f012 fddb 	bl	80143d0 <osDelay>
}
 800181a:	b00d      	add	sp, #52	; 0x34
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 800181e:	220c      	movs	r2, #12
 8001820:	a904      	add	r1, sp, #16
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <lcd_init+0x104>)
 8001824:	f00f fb38 	bl	8010e98 <HAL_UART_Transmit_DMA>
 8001828:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 800182c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ea      	beq.n	800180a <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001834:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <lcd_init+0x108>)
 800183a:	f022 fd63 	bl	8024304 <iprintf>
 800183e:	e7e4      	b.n	800180a <lcd_init+0xb6>
 8001840:	0802918c 	.word	0x0802918c
 8001844:	08029194 	.word	0x08029194
 8001848:	080291a4 	.word	0x080291a4
 800184c:	08029114 	.word	0x08029114
 8001850:	08029128 	.word	0x08029128
 8001854:	20001dec 	.word	0x20001dec
 8001858:	20002874 	.word	0x20002874
 800185c:	0802915c 	.word	0x0802915c

08001860 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 8001860:	b530      	push	{r4, r5, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 8001866:	f7ff fef5 	bl	8001654 <wait_armtx>
 800186a:	4605      	mov	r5, r0
 800186c:	3001      	adds	r0, #1
 800186e:	d01d      	beq.n	80018ac <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	4813      	ldr	r0, [pc, #76]	; (80018c0 <lcd_puts+0x60>)
 8001874:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001876:	9b01      	ldr	r3, [sp, #4]
 8001878:	5ce3      	ldrb	r3, [r4, r3]
 800187a:	b153      	cbz	r3, 8001892 <lcd_puts+0x32>
		buffer[i] = str[i];
 800187c:	9901      	ldr	r1, [sp, #4]
 800187e:	9a01      	ldr	r2, [sp, #4]
		i++;
 8001880:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 8001882:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8001884:	3301      	adds	r3, #1
		buffer[i] = str[i];
 8001886:	5481      	strb	r1, [r0, r2]
		i++;
 8001888:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	5ce3      	ldrb	r3, [r4, r3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f4      	bne.n	800187c <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 8001892:	9901      	ldr	r1, [sp, #4]
 8001894:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001896:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001898:	4c0a      	ldr	r4, [pc, #40]	; (80018c4 <lcd_puts+0x64>)
	buffer[i] = '\0';
 800189a:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800189c:	b292      	uxth	r2, r2
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <lcd_puts+0x60>)
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80018a2:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80018a4:	f00f faf8 	bl	8010e98 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80018a8:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80018aa:	b910      	cbnz	r0, 80018b2 <lcd_puts+0x52>
	}
	return (stat);
}
 80018ac:	4628      	mov	r0, r5
 80018ae:	b003      	add	sp, #12
 80018b0:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80018b2:	4629      	mov	r1, r5
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <lcd_puts+0x6c>)
 80018b6:	f022 fd25 	bl	8024304 <iprintf>
}
 80018ba:	4628      	mov	r0, r5
 80018bc:	b003      	add	sp, #12
 80018be:	bd30      	pop	{r4, r5, pc}
 80018c0:	20001650 	.word	0x20001650
 80018c4:	20001dec 	.word	0x20001dec
 80018c8:	20002874 	.word	0x20002874
 80018cc:	080291b4 	.word	0x080291b4

080018d0 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 80018d0:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 80018d2:	2300      	movs	r3, #0
int lcd_rxdma() {
 80018d4:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <lcd_rxdma+0x64>)
	volatile int count = 0;
 80018d8:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 80018da:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 80018dc:	6953      	ldr	r3, [r2, #20]
 80018de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80018e2:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 80018e4:	9a01      	ldr	r2, [sp, #4]
 80018e6:	2a80      	cmp	r2, #128	; 0x80
 80018e8:	d016      	beq.n	8001918 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80018ea:	4d13      	ldr	r5, [pc, #76]	; (8001938 <lcd_rxdma+0x68>)
 80018ec:	9a01      	ldr	r2, [sp, #4]
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00e      	beq.n	8001912 <lcd_rxdma+0x42>
 80018f4:	4c11      	ldr	r4, [pc, #68]	; (800193c <lcd_rxdma+0x6c>)
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80018f8:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 80018fa:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80018fc:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 80018fe:	3301      	adds	r3, #1
		count++;
 8001900:	3201      	adds	r2, #1
		return (0);
 8001902:	2b80      	cmp	r3, #128	; 0x80
		count++;
 8001904:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001906:	9a01      	ldr	r2, [sp, #4]
		return (0);
 8001908:	bfa8      	it	ge
 800190a:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800190c:	429a      	cmp	r2, r3
 800190e:	d1f3      	bne.n	80018f8 <lcd_rxdma+0x28>
 8001910:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 8001912:	9800      	ldr	r0, [sp, #0]
}
 8001914:	b003      	add	sp, #12
 8001916:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 8001918:	4909      	ldr	r1, [pc, #36]	; (8001940 <lcd_rxdma+0x70>)
 800191a:	480a      	ldr	r0, [pc, #40]	; (8001944 <lcd_rxdma+0x74>)
 800191c:	f010 fcfc 	bl	8012318 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8001920:	b910      	cbnz	r0, 8001928 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	e7e0      	b.n	80018ea <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001928:	4601      	mov	r1, r0
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <lcd_rxdma+0x78>)
 800192c:	f022 fcea 	bl	8024304 <iprintf>
 8001930:	e7f7      	b.n	8001922 <lcd_rxdma+0x52>
 8001932:	bf00      	nop
 8001934:	40026000 	.word	0x40026000
 8001938:	200017f0 	.word	0x200017f0
 800193c:	20001770 	.word	0x20001770
 8001940:	200016b0 	.word	0x200016b0
 8001944:	20002874 	.word	0x20002874
 8001948:	080291e4 	.word	0x080291e4

0800194c <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 800194c:	b500      	push	{lr}
 800194e:	b099      	sub	sp, #100	; 0x64
 8001950:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8001952:	4668      	mov	r0, sp
 8001954:	f022 ff51 	bl	80247fa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <writelcdcmd+0x30>)
	strcpy(pkt, str);
 800195c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800195e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001960:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001962:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001964:	b92b      	cbnz	r3, 8001972 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 8001966:	4668      	mov	r0, sp
 8001968:	f7ff ff7a 	bl	8001860 <lcd_puts>
	else
		return (-1);
}
 800196c:	b019      	add	sp, #100	; 0x64
 800196e:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 8001972:	f04f 30ff 	mov.w	r0, #4294967295
 8001976:	e7f9      	b.n	800196c <writelcdcmd+0x20>
 8001978:	08029190 	.word	0x08029190
 800197c:	2000176c 	.word	0x2000176c

08001980 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001980:	b510      	push	{r4, lr}
 8001982:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 8001984:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800198a:	a802      	add	r0, sp, #8
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <setlcdtext+0x40>)
	volatile int result = 0;
 800198e:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001990:	f022 fea2 	bl	80246d8 <siprintf>
	strcpy(pkt, str);
 8001994:	a902      	add	r1, sp, #8
 8001996:	a81a      	add	r0, sp, #104	; 0x68
 8001998:	f022 ff2f 	bl	80247fa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <setlcdtext+0x48>)
	strcpy(pkt, str);
 80019a0:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80019a2:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80019a4:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80019a6:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80019a8:	b933      	cbnz	r3, 80019b8 <setlcdtext+0x38>
		return (lcd_puts(pkt));
 80019aa:	a81a      	add	r0, sp, #104	; 0x68
 80019ac:	f7ff ff58 	bl	8001860 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 80019b0:	9001      	str	r0, [sp, #4]
	return (result);
 80019b2:	9801      	ldr	r0, [sp, #4]
}
 80019b4:	b032      	add	sp, #200	; 0xc8
 80019b6:	bd10      	pop	{r4, pc}
		return (-1);
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	e7f8      	b.n	80019b0 <setlcdtext+0x30>
 80019be:	bf00      	nop
 80019c0:	08029214 	.word	0x08029214
 80019c4:	08029190 	.word	0x08029190
 80019c8:	2000176c 	.word	0x2000176c

080019cc <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 80019cc:	b500      	push	{lr}
 80019ce:	b0a1      	sub	sp, #132	; 0x84
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 80019d4:	4911      	ldr	r1, [pc, #68]	; (8001a1c <setlcdbin+0x50>)
 80019d6:	4668      	mov	r0, sp
 80019d8:	f022 fe7e 	bl	80246d8 <siprintf>
	strcpy(pkt, str);
 80019dc:	4669      	mov	r1, sp
 80019de:	a808      	add	r0, sp, #32
 80019e0:	f022 ff0b 	bl	80247fa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <setlcdbin+0x58>)
	strcpy(pkt, str);
 80019e8:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80019ea:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80019ec:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80019ee:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80019f0:	b98b      	cbnz	r3, 8001a16 <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 80019f2:	a808      	add	r0, sp, #32
 80019f4:	f7ff ff34 	bl	8001860 <lcd_puts>
	result = writelcdcmd(buffer);
 80019f8:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 80019fa:	9b08      	ldr	r3, [sp, #32]
 80019fc:	3301      	adds	r3, #1
 80019fe:	d003      	beq.n	8001a08 <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001a00:	9808      	ldr	r0, [sp, #32]
}
 8001a02:	b021      	add	sp, #132	; 0x84
 8001a04:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <setlcdbin+0x5c>)
 8001a0a:	f022 fc7b 	bl	8024304 <iprintf>
	return (result);
 8001a0e:	9808      	ldr	r0, [sp, #32]
}
 8001a10:	b021      	add	sp, #132	; 0x84
 8001a12:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 8001a16:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1a:	e7ed      	b.n	80019f8 <setlcdbin+0x2c>
 8001a1c:	0802921c 	.word	0x0802921c
 8001a20:	08029190 	.word	0x08029190
 8001a24:	2000176c 	.word	0x2000176c
 8001a28:	08029224 	.word	0x08029224

08001a2c <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001a2c:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8001a30:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 8001a32:	4c2c      	ldr	r4, [pc, #176]	; (8001ae4 <isnexpkt+0xb8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d04f      	beq.n	8001adc <isnexpkt+0xb0>
	if (++index >= limit)
 8001a3c:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 8001a3e:	4d2a      	ldr	r5, [pc, #168]	; (8001ae8 <isnexpkt+0xbc>)
		return (0);
 8001a40:	2b80      	cmp	r3, #128	; 0x80
 8001a42:	bfa8      	it	ge
 8001a44:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8001a46:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 8001a48:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 8001a4a:	4c28      	ldr	r4, [pc, #160]	; (8001aec <isnexpkt+0xc0>)
		rxtimeout = 100;
 8001a4c:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 8001a4e:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <isnexpkt+0xc4>)
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 8001a52:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 8001a56:	7823      	ldrb	r3, [r4, #0]
 8001a58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001a5c:	54c2      	strb	r2, [r0, r3]
 8001a5e:	3301      	adds	r3, #1
		if (ch == 0xff) {
 8001a60:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 8001a64:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 8001a66:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 8001a68:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 8001a6a:	d021      	beq.n	8001ab0 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8001a6c:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8001a70:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <isnexpkt+0xc8>)
 8001a72:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 8001a74:	2200      	movs	r2, #0
 8001a76:	4e20      	ldr	r6, [pc, #128]	; (8001af8 <isnexpkt+0xcc>)
 8001a78:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 8001a7a:	428b      	cmp	r3, r1
 8001a7c:	d027      	beq.n	8001ace <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	b133      	cbz	r3, 8001a90 <isnexpkt+0x64>
		rxtimeout--;
 8001a82:	3b01      	subs	r3, #1
 8001a84:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 8001a86:	b11b      	cbz	r3, 8001a90 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 8001a88:	f06f 0001 	mvn.w	r0, #1
}
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 8001a94:	4c15      	ldr	r4, [pc, #84]	; (8001aec <isnexpkt+0xc0>)
		termcnt = 0;
 8001a96:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8001a98:	7023      	strb	r3, [r4, #0]
 8001a9a:	b119      	cbz	r1, 8001aa4 <isnexpkt+0x78>
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f021 fc92 	bl	80233c8 <memset>
		i = 0;
 8001aa4:	2300      	movs	r3, #0
		return (-1);
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001aaa:	7023      	strb	r3, [r4, #0]
}
 8001aac:	b002      	add	sp, #8
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8001ab0:	4e11      	ldr	r6, [pc, #68]	; (8001af8 <isnexpkt+0xcc>)
 8001ab2:	7832      	ldrb	r2, [r6, #0]
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 8001ab8:	2a03      	cmp	r2, #3
			termcnt++;
 8001aba:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8001abc:	d1dd      	bne.n	8001a7a <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8001abe:	480f      	ldr	r0, [pc, #60]	; (8001afc <isnexpkt+0xd0>)
 8001ac0:	f022 fc20 	bl	8024304 <iprintf>
				i = 0;
 8001ac4:	2300      	movs	r3, #0
				index = i;
 8001ac6:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001ac8:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001aca:	7023      	strb	r3, [r4, #0]
				return (index);
 8001acc:	e7de      	b.n	8001a8c <isnexpkt+0x60>
			i = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8001ad2:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1d3      	bne.n	8001a82 <isnexpkt+0x56>
 8001ada:	e7d9      	b.n	8001a90 <isnexpkt+0x64>
 8001adc:	4d02      	ldr	r5, [pc, #8]	; (8001ae8 <isnexpkt+0xbc>)
 8001ade:	e7ce      	b.n	8001a7e <isnexpkt+0x52>
 8001ae0:	200017f0 	.word	0x200017f0
 8001ae4:	2000175c 	.word	0x2000175c
 8001ae8:	20001bd4 	.word	0x20001bd4
 8001aec:	20001754 	.word	0x20001754
 8001af0:	20001770 	.word	0x20001770
 8001af4:	20001bd0 	.word	0x20001bd0
 8001af8:	20001bd8 	.word	0x20001bd8
 8001afc:	08029240 	.word	0x08029240

08001b00 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <lcd_time+0x7c>)
 8001b02:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001b06:	481e      	ldr	r0, [pc, #120]	; (8001b80 <lcd_time+0x80>)
 8001b08:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 8001b0c:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001b0e:	185b      	adds	r3, r3, r1
void lcd_time() {
 8001b10:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 8001b12:	4c1c      	ldr	r4, [pc, #112]	; (8001b84 <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001b14:	f142 0200 	adc.w	r2, r2, #0
 8001b18:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 8001b1c:	f021 faf4 	bl	8023108 <localtime>
 8001b20:	4684      	mov	ip, r0
 8001b22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	4623      	mov	r3, r4
 8001b30:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <lcd_time+0x88>)
 8001b36:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 8001b38:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 8001b3c:	4813      	ldr	r0, [pc, #76]	; (8001b8c <lcd_time+0x8c>)
 8001b3e:	f023 fbb3 	bl	80252a8 <strftime>
	setlcdtext("t0.txt", buffer);
 8001b42:	4912      	ldr	r1, [pc, #72]	; (8001b8c <lcd_time+0x8c>)
 8001b44:	4812      	ldr	r0, [pc, #72]	; (8001b90 <lcd_time+0x90>)
 8001b46:	f7ff ff1b 	bl	8001980 <setlcdtext>

	if (gpslocked) {
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <lcd_time+0x94>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b12b      	cbz	r3, 8001b5c <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 8001b52:	b004      	add	sp, #16
 8001b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 8001b58:	f7ff bef8 	b.w	800194c <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <lcd_time+0x9c>)
 8001b5e:	4668      	mov	r0, sp
 8001b60:	490f      	ldr	r1, [pc, #60]	; (8001ba0 <lcd_time+0xa0>)
 8001b62:	7eda      	ldrb	r2, [r3, #27]
 8001b64:	f022 fdb8 	bl	80246d8 <siprintf>
		setlcdtext("t3.txt", str);
 8001b68:	4669      	mov	r1, sp
 8001b6a:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <lcd_time+0xa4>)
 8001b6c:	f7ff ff08 	bl	8001980 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <lcd_time+0xa8>)
 8001b72:	f7ff feeb 	bl	800194c <writelcdcmd>
}
 8001b76:	b004      	add	sp, #16
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20002b58 	.word	0x20002b58
 8001b80:	20001800 	.word	0x20001800
 8001b84:	20001bdc 	.word	0x20001bdc
 8001b88:	08029244 	.word	0x08029244
 8001b8c:	20001628 	.word	0x20001628
 8001b90:	08029250 	.word	0x08029250
 8001b94:	20002e50 	.word	0x20002e50
 8001b98:	08029258 	.word	0x08029258
 8001b9c:	20002ca4 	.word	0x20002ca4
 8001ba0:	08029264 	.word	0x08029264
 8001ba4:	08029274 	.word	0x08029274
 8001ba8:	0802927c 	.word	0x0802927c

08001bac <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001bae:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <lcd_date+0x58>)
void lcd_date() {
 8001bb4:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 8001bb6:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 8001bb8:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 8001bba:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001bbc:	4812      	ldr	r0, [pc, #72]	; (8001c08 <lcd_date+0x5c>)
 8001bbe:	f023 fb73 	bl	80252a8 <strftime>
	volatile int result = 0;
 8001bc2:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <lcd_date+0x5c>)
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <lcd_date+0x60>)
 8001bc8:	4911      	ldr	r1, [pc, #68]	; (8001c10 <lcd_date+0x64>)
	volatile int result = 0;
 8001bca:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001bcc:	a802      	add	r0, sp, #8
 8001bce:	f022 fd83 	bl	80246d8 <siprintf>
	strcpy(pkt, str);
 8001bd2:	a902      	add	r1, sp, #8
 8001bd4:	a81a      	add	r0, sp, #104	; 0x68
 8001bd6:	f022 fe10 	bl	80247fa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001bda:	490e      	ldr	r1, [pc, #56]	; (8001c14 <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <lcd_date+0x6c>)
	strcpy(pkt, str);
 8001bde:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8001be0:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001be2:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001be4:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001be6:	b933      	cbnz	r3, 8001bf6 <lcd_date+0x4a>
		return (lcd_puts(pkt));
 8001be8:	a81a      	add	r0, sp, #104	; 0x68
 8001bea:	f7ff fe39 	bl	8001860 <lcd_puts>
	result = writelcdcmd(str);
 8001bee:	9001      	str	r0, [sp, #4]
	return (result);
 8001bf0:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 8001bf2:	b032      	add	sp, #200	; 0xc8
 8001bf4:	bd10      	pop	{r4, pc}
		return (-1);
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	e7f8      	b.n	8001bee <lcd_date+0x42>
 8001bfc:	20001bdc 	.word	0x20001bdc
 8001c00:	20001758 	.word	0x20001758
 8001c04:	08029288 	.word	0x08029288
 8001c08:	20001628 	.word	0x20001628
 8001c0c:	08029298 	.word	0x08029298
 8001c10:	08029214 	.word	0x08029214
 8001c14:	08029190 	.word	0x08029190
 8001c18:	2000176c 	.word	0x2000176c

08001c1c <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 8001c1c:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8001c1e:	4c62      	ldr	r4, [pc, #392]	; (8001da8 <lcd_showvars+0x18c>)
void lcd_showvars() {
 8001c20:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 8001c22:	8823      	ldrh	r3, [r4, #0]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d81f      	bhi.n	8001c68 <lcd_showvars+0x4c>
 8001c28:	e8df f003 	tbb	[pc, r3]
 8001c2c:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8001c30:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <lcd_showvars+0x190>)
 8001c32:	495f      	ldr	r1, [pc, #380]	; (8001db0 <lcd_showvars+0x194>)
 8001c34:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8001c38:	6808      	ldr	r0, [r1, #0]
 8001c3a:	9204      	str	r2, [sp, #16]
 8001c3c:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8001c40:	9203      	str	r2, [sp, #12]
 8001c42:	f242 722c 	movw	r2, #10028	; 0x272c
 8001c46:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	e9cd 2000 	strd	r2, r0, [sp]
 8001c50:	9102      	str	r1, [sp, #8]
 8001c52:	2200      	movs	r2, #0
 8001c54:	4957      	ldr	r1, [pc, #348]	; (8001db4 <lcd_showvars+0x198>)
 8001c56:	a806      	add	r0, sp, #24
 8001c58:	f022 fd3e 	bl	80246d8 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 8001c5c:	a906      	add	r1, sp, #24
 8001c5e:	4856      	ldr	r0, [pc, #344]	; (8001db8 <lcd_showvars+0x19c>)
 8001c60:	f7ff fe8e 	bl	8001980 <setlcdtext>
		toggle = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 8001c68:	b01f      	add	sp, #124	; 0x7c
 8001c6a:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001c6c:	4d53      	ldr	r5, [pc, #332]	; (8001dbc <lcd_showvars+0x1a0>)
 8001c6e:	a806      	add	r0, sp, #24
 8001c70:	4953      	ldr	r1, [pc, #332]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001c72:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001c74:	f022 fd30 	bl	80246d8 <siprintf>
		setlcdtext("t4.txt", str);
 8001c78:	a906      	add	r1, sp, #24
 8001c7a:	4852      	ldr	r0, [pc, #328]	; (8001dc4 <lcd_showvars+0x1a8>)
 8001c7c:	f7ff fe80 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8001c80:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001c82:	494f      	ldr	r1, [pc, #316]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001c84:	a806      	add	r0, sp, #24
 8001c86:	f022 fd27 	bl	80246d8 <siprintf>
		setlcdtext("t5.txt", str);
 8001c8a:	a906      	add	r1, sp, #24
 8001c8c:	484e      	ldr	r0, [pc, #312]	; (8001dc8 <lcd_showvars+0x1ac>)
 8001c8e:	f7ff fe77 	bl	8001980 <setlcdtext>
		toggle = 3;
 8001c92:	2303      	movs	r3, #3
 8001c94:	8023      	strh	r3, [r4, #0]
}
 8001c96:	b01f      	add	sp, #124	; 0x7c
 8001c98:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001c9a:	4d48      	ldr	r5, [pc, #288]	; (8001dbc <lcd_showvars+0x1a0>)
 8001c9c:	a806      	add	r0, sp, #24
 8001c9e:	4948      	ldr	r1, [pc, #288]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001ca0:	7eea      	ldrb	r2, [r5, #27]
 8001ca2:	f022 fd19 	bl	80246d8 <siprintf>
		setlcdtext("t0.txt", str);
 8001ca6:	a906      	add	r1, sp, #24
 8001ca8:	4848      	ldr	r0, [pc, #288]	; (8001dcc <lcd_showvars+0x1b0>)
 8001caa:	f7ff fe69 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001cae:	6a2a      	ldr	r2, [r5, #32]
 8001cb0:	4943      	ldr	r1, [pc, #268]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001cb2:	a806      	add	r0, sp, #24
 8001cb4:	f022 fd10 	bl	80246d8 <siprintf>
		setlcdtext("t1.txt", str);
 8001cb8:	a906      	add	r1, sp, #24
 8001cba:	4845      	ldr	r0, [pc, #276]	; (8001dd0 <lcd_showvars+0x1b4>)
 8001cbc:	f7ff fe60 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8001cc0:	69ea      	ldr	r2, [r5, #28]
 8001cc2:	493f      	ldr	r1, [pc, #252]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001cc4:	a806      	add	r0, sp, #24
 8001cc6:	f022 fd07 	bl	80246d8 <siprintf>
		setlcdtext("t2.txt", str);
 8001cca:	a906      	add	r1, sp, #24
 8001ccc:	4841      	ldr	r0, [pc, #260]	; (8001dd4 <lcd_showvars+0x1b8>)
 8001cce:	f7ff fe57 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 8001cd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001cd4:	493a      	ldr	r1, [pc, #232]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001cd6:	a806      	add	r0, sp, #24
 8001cd8:	f022 fcfe 	bl	80246d8 <siprintf>
		setlcdtext("t3.txt", str);
 8001cdc:	a906      	add	r1, sp, #24
 8001cde:	483e      	ldr	r0, [pc, #248]	; (8001dd8 <lcd_showvars+0x1bc>)
 8001ce0:	f7ff fe4e 	bl	8001980 <setlcdtext>
		toggle = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	8023      	strh	r3, [r4, #0]
}
 8001ce8:	b01f      	add	sp, #124	; 0x7c
 8001cea:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <lcd_showvars+0x1c0>)
 8001cee:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 8001cf0:	4d32      	ldr	r5, [pc, #200]	; (8001dbc <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	0e11      	lsrs	r1, r2, #24
 8001cf6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8001cfa:	e9cd 3100 	strd	r3, r1, [sp]
 8001cfe:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001d02:	4937      	ldr	r1, [pc, #220]	; (8001de0 <lcd_showvars+0x1c4>)
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f022 fce7 	bl	80246d8 <siprintf>
		setlcdtext("t11.txt", str);
 8001d0a:	a906      	add	r1, sp, #24
 8001d0c:	4835      	ldr	r0, [pc, #212]	; (8001de4 <lcd_showvars+0x1c8>)
 8001d0e:	f7ff fe37 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 8001d12:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 8001d16:	492a      	ldr	r1, [pc, #168]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d18:	a806      	add	r0, sp, #24
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f022 fcdc 	bl	80246d8 <siprintf>
		setlcdtext("t10.txt", str);
 8001d20:	a906      	add	r1, sp, #24
 8001d22:	4831      	ldr	r0, [pc, #196]	; (8001de8 <lcd_showvars+0x1cc>)
 8001d24:	f7ff fe2c 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 8001d28:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8001d2c:	4924      	ldr	r1, [pc, #144]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d2e:	a806      	add	r0, sp, #24
 8001d30:	b292      	uxth	r2, r2
 8001d32:	f022 fcd1 	bl	80246d8 <siprintf>
		setlcdtext("t9.txt", str);
 8001d36:	a906      	add	r1, sp, #24
 8001d38:	482c      	ldr	r0, [pc, #176]	; (8001dec <lcd_showvars+0x1d0>)
 8001d3a:	f7ff fe21 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <lcd_showvars+0x1d4>)
 8001d40:	491f      	ldr	r1, [pc, #124]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d42:	a806      	add	r0, sp, #24
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d4a:	f022 fcc5 	bl	80246d8 <siprintf>
		setlcdtext("t8.txt", str);
 8001d4e:	a906      	add	r1, sp, #24
 8001d50:	4828      	ldr	r0, [pc, #160]	; (8001df4 <lcd_showvars+0x1d8>)
 8001d52:	f7ff fe15 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <lcd_showvars+0x1dc>)
 8001d58:	4919      	ldr	r1, [pc, #100]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d5a:	a806      	add	r0, sp, #24
 8001d5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	bfb8      	it	lt
 8001d64:	4252      	neglt	r2, r2
 8001d66:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001d6a:	f022 fcb5 	bl	80246d8 <siprintf>
		setlcdtext("t7.txt", str);
 8001d6e:	a906      	add	r1, sp, #24
 8001d70:	4822      	ldr	r0, [pc, #136]	; (8001dfc <lcd_showvars+0x1e0>)
 8001d72:	f7ff fe05 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <lcd_showvars+0x1e4>)
 8001d78:	4911      	ldr	r1, [pc, #68]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d7a:	a806      	add	r0, sp, #24
 8001d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d80:	f022 fcaa 	bl	80246d8 <siprintf>
		setlcdtext("t6.txt", str);
 8001d84:	a906      	add	r1, sp, #24
 8001d86:	481f      	ldr	r0, [pc, #124]	; (8001e04 <lcd_showvars+0x1e8>)
 8001d88:	f7ff fdfa 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8001d8c:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8001d8e:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <lcd_showvars+0x1a4>)
 8001d90:	a806      	add	r0, sp, #24
 8001d92:	f022 fca1 	bl	80246d8 <siprintf>
		setlcdtext("t24.txt", str);
 8001d96:	a906      	add	r1, sp, #24
 8001d98:	481b      	ldr	r0, [pc, #108]	; (8001e08 <lcd_showvars+0x1ec>)
 8001d9a:	f7ff fdf1 	bl	8001980 <setlcdtext>
		toggle = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	8023      	strh	r3, [r4, #0]
}
 8001da2:	b01f      	add	sp, #124	; 0x7c
 8001da4:	bd30      	pop	{r4, r5, pc}
 8001da6:	bf00      	nop
 8001da8:	20001c00 	.word	0x20001c00
 8001dac:	1ff0f000 	.word	0x1ff0f000
 8001db0:	20001df4 	.word	0x20001df4
 8001db4:	08029300 	.word	0x08029300
 8001db8:	0802932c 	.word	0x0802932c
 8001dbc:	20002ca4 	.word	0x20002ca4
 8001dc0:	08029364 	.word	0x08029364
 8001dc4:	080292f0 	.word	0x080292f0
 8001dc8:	080292f8 	.word	0x080292f8
 8001dcc:	08029250 	.word	0x08029250
 8001dd0:	08029298 	.word	0x08029298
 8001dd4:	080292e8 	.word	0x080292e8
 8001dd8:	08029274 	.word	0x08029274
 8001ddc:	20002aa4 	.word	0x20002aa4
 8001de0:	080292a0 	.word	0x080292a0
 8001de4:	080292b0 	.word	0x080292b0
 8001de8:	080292b8 	.word	0x080292b8
 8001dec:	080292c0 	.word	0x080292c0
 8001df0:	200006f4 	.word	0x200006f4
 8001df4:	080292c8 	.word	0x080292c8
 8001df8:	20000748 	.word	0x20000748
 8001dfc:	080292d0 	.word	0x080292d0
 8001e00:	20002dd8 	.word	0x20002dd8
 8001e04:	080292d8 	.word	0x080292d8
 8001e08:	080292e0 	.word	0x080292e0

08001e0c <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8001e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 8001e10:	4931      	ldr	r1, [pc, #196]	; (8001ed8 <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 8001e12:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8001e14:	4831      	ldr	r0, [pc, #196]	; (8001edc <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8001e16:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 8001e1a:	f7ff fdb1 	bl	8001980 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 8001e1e:	492e      	ldr	r1, [pc, #184]	; (8001ed8 <lcd_trigcharts+0xcc>)
 8001e20:	482f      	ldr	r0, [pc, #188]	; (8001ee0 <lcd_trigcharts+0xd4>)
 8001e22:	f7ff fdad 	bl	8001980 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 8001e26:	492f      	ldr	r1, [pc, #188]	; (8001ee4 <lcd_trigcharts+0xd8>)
 8001e28:	482f      	ldr	r0, [pc, #188]	; (8001ee8 <lcd_trigcharts+0xdc>)
 8001e2a:	f7ff fda9 	bl	8001980 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 8001e2e:	492d      	ldr	r1, [pc, #180]	; (8001ee4 <lcd_trigcharts+0xd8>)
 8001e30:	482e      	ldr	r0, [pc, #184]	; (8001eec <lcd_trigcharts+0xe0>)
 8001e32:	f7ff fda5 	bl	8001980 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <lcd_trigcharts+0xe4>)
 8001e38:	492e      	ldr	r1, [pc, #184]	; (8001ef4 <lcd_trigcharts+0xe8>)
 8001e3a:	4668      	mov	r0, sp
 8001e3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e3e:	f022 fc4b 	bl	80246d8 <siprintf>
	setlcdtext("t0.txt", str);
 8001e42:	4669      	mov	r1, sp
 8001e44:	482c      	ldr	r0, [pc, #176]	; (8001ef8 <lcd_trigcharts+0xec>)
 8001e46:	f7ff fd9b 	bl	8001980 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <lcd_trigcharts+0xf0>)
 8001e4c:	4929      	ldr	r1, [pc, #164]	; (8001ef4 <lcd_trigcharts+0xe8>)
 8001e4e:	4668      	mov	r0, sp
 8001e50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e54:	4f2a      	ldr	r7, [pc, #168]	; (8001f00 <lcd_trigcharts+0xf4>)
 8001e56:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001e58:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001f1c <lcd_trigcharts+0x110>
 8001e5c:	4e29      	ldr	r6, [pc, #164]	; (8001f04 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001e5e:	bfb8      	it	lt
 8001e60:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001e62:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001f20 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001e66:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e6a:	f022 fc35 	bl	80246d8 <siprintf>
	setlcdtext("t2.txt", str);
 8001e6e:	4669      	mov	r1, sp
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <lcd_trigcharts+0xfc>)
 8001e72:	f7ff fd85 	bl	8001980 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8001e76:	4825      	ldr	r0, [pc, #148]	; (8001f0c <lcd_trigcharts+0x100>)
 8001e78:	f7ff fd68 	bl	800194c <writelcdcmd>
	buffi = trigindex;
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <lcd_trigcharts+0x104>)
 8001e7e:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8001e80:	e01c      	b.n	8001ebc <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001e82:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001e86:	f022 fc27 	bl	80246d8 <siprintf>
		writelcdcmd(str);
 8001e8a:	4668      	mov	r0, sp
 8001e8c:	f7ff fd5e 	bl	800194c <writelcdcmd>
		osDelay(15);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f012 fa9d 	bl	80143d0 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001e96:	f818 2004 	ldrb.w	r2, [r8, r4]
 8001e9a:	491e      	ldr	r1, [pc, #120]	; (8001f14 <lcd_trigcharts+0x108>)
 8001e9c:	4668      	mov	r0, sp
 8001e9e:	f022 fc1b 	bl	80246d8 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8001ea2:	3401      	adds	r4, #1
		writelcdcmd(str);
 8001ea4:	4668      	mov	r0, sp
 8001ea6:	f7ff fd51 	bl	800194c <writelcdcmd>
		osDelay(15);
 8001eaa:	200f      	movs	r0, #15
 8001eac:	f012 fa90 	bl	80143d0 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001eb0:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001eb4:	bfc8      	it	gt
 8001eb6:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001eb8:	3d01      	subs	r5, #1
 8001eba:	d007      	beq.n	8001ecc <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8001ebc:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d0dd      	beq.n	8001e82 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001ec6:	b009      	add	sp, #36	; 0x24
 8001ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001ecc:	4812      	ldr	r0, [pc, #72]	; (8001f18 <lcd_trigcharts+0x10c>)
 8001ece:	f7ff fd3d 	bl	800194c <writelcdcmd>
}
 8001ed2:	b009      	add	sp, #36	; 0x24
 8001ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ed8:	08029334 	.word	0x08029334
 8001edc:	08029274 	.word	0x08029274
 8001ee0:	08029340 	.word	0x08029340
 8001ee4:	08029348 	.word	0x08029348
 8001ee8:	080292f0 	.word	0x080292f0
 8001eec:	08029298 	.word	0x08029298
 8001ef0:	20002ca4 	.word	0x20002ca4
 8001ef4:	08029364 	.word	0x08029364
 8001ef8:	08029250 	.word	0x08029250
 8001efc:	20000748 	.word	0x20000748
 8001f00:	200019e8 	.word	0x200019e8
 8001f04:	0802935c 	.word	0x0802935c
 8001f08:	080292e8 	.word	0x080292e8
 8001f0c:	08029350 	.word	0x08029350
 8001f10:	20001c04 	.word	0x20001c04
 8001f14:	08029368 	.word	0x08029368
 8001f18:	08029374 	.word	0x08029374
 8001f1c:	20001c08 	.word	0x20001c08
 8001f20:	20001808 	.word	0x20001808

08001f24 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001f28:	493a      	ldr	r1, [pc, #232]	; (8002014 <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 8001f2a:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001f2c:	4d3a      	ldr	r5, [pc, #232]	; (8002018 <lcd_trigplot+0xf4>)
 8001f2e:	680b      	ldr	r3, [r1, #0]
 8001f30:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8001f32:	4e3a      	ldr	r6, [pc, #232]	; (800201c <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001f34:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001f36:	483a      	ldr	r0, [pc, #232]	; (8002020 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 8001f38:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 8001f3c:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 8001f3e:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 8001f42:	4c38      	ldr	r4, [pc, #224]	; (8002024 <lcd_trigplot+0x100>)
 8001f44:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001f46:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 8001f48:	4f37      	ldr	r7, [pc, #220]	; (8002028 <lcd_trigplot+0x104>)
 8001f4a:	bfa8      	it	ge
 8001f4c:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8001f4e:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8001f50:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002060 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 8001f54:	bfb8      	it	lt
 8001f56:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 8001f58:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8001f5c:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8001f62:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8001f64:	2b77      	cmp	r3, #119	; 0x77
 8001f66:	bfa8      	it	ge
 8001f68:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001f6a:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8001f6c:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001f70:	d00c      	beq.n	8001f8c <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8001f72:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8001f74:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8001f78:	da03      	bge.n	8001f82 <lcd_trigplot+0x5e>
	trigindex++;
 8001f7a:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8001f7c:	b008      	add	sp, #32
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	6023      	str	r3, [r4, #0]
}
 8001f86:	b008      	add	sp, #32
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8001f8c:	4927      	ldr	r1, [pc, #156]	; (800202c <lcd_trigplot+0x108>)
 8001f8e:	4828      	ldr	r0, [pc, #160]	; (8002030 <lcd_trigplot+0x10c>)
 8001f90:	f7ff fcf6 	bl	8001980 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 8001f94:	4925      	ldr	r1, [pc, #148]	; (800202c <lcd_trigplot+0x108>)
 8001f96:	4827      	ldr	r0, [pc, #156]	; (8002034 <lcd_trigplot+0x110>)
 8001f98:	f7ff fcf2 	bl	8001980 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8001f9c:	4926      	ldr	r1, [pc, #152]	; (8002038 <lcd_trigplot+0x114>)
 8001f9e:	4827      	ldr	r0, [pc, #156]	; (800203c <lcd_trigplot+0x118>)
 8001fa0:	f7ff fcee 	bl	8001980 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 8001fa4:	4924      	ldr	r1, [pc, #144]	; (8002038 <lcd_trigplot+0x114>)
 8001fa6:	4826      	ldr	r0, [pc, #152]	; (8002040 <lcd_trigplot+0x11c>)
 8001fa8:	f7ff fcea 	bl	8001980 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <lcd_trigplot+0x120>)
 8001fb0:	4668      	mov	r0, sp
 8001fb2:	5cfa      	ldrb	r2, [r7, r3]
 8001fb4:	f022 fb90 	bl	80246d8 <siprintf>
		writelcdcmd(str);
 8001fb8:	4668      	mov	r0, sp
 8001fba:	f7ff fcc7 	bl	800194c <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	4921      	ldr	r1, [pc, #132]	; (8002048 <lcd_trigplot+0x124>)
 8001fc2:	4668      	mov	r0, sp
 8001fc4:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001fc8:	f022 fb86 	bl	80246d8 <siprintf>
		writelcdcmd(str);
 8001fcc:	4668      	mov	r0, sp
 8001fce:	f7ff fcbd 	bl	800194c <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001fd2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001fd4:	491d      	ldr	r1, [pc, #116]	; (800204c <lcd_trigplot+0x128>)
 8001fd6:	4668      	mov	r0, sp
 8001fd8:	f022 fb7e 	bl	80246d8 <siprintf>
		setlcdtext("t0.txt", str);
 8001fdc:	4669      	mov	r1, sp
 8001fde:	481c      	ldr	r0, [pc, #112]	; (8002050 <lcd_trigplot+0x12c>)
 8001fe0:	f7ff fcce 	bl	8001980 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001fe4:	f9b6 2000 	ldrsh.w	r2, [r6]
 8001fe8:	4918      	ldr	r1, [pc, #96]	; (800204c <lcd_trigplot+0x128>)
 8001fea:	4668      	mov	r0, sp
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	bfb8      	it	lt
 8001ff0:	4252      	neglt	r2, r2
 8001ff2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ff6:	f022 fb6f 	bl	80246d8 <siprintf>
		setlcdtext("t2.txt", str);
 8001ffa:	4669      	mov	r1, sp
 8001ffc:	4815      	ldr	r0, [pc, #84]	; (8002054 <lcd_trigplot+0x130>)
 8001ffe:	f7ff fcbf 	bl	8001980 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002002:	4815      	ldr	r0, [pc, #84]	; (8002058 <lcd_trigplot+0x134>)
 8002004:	f7ff fca2 	bl	800194c <writelcdcmd>
		writelcdcmd("vis t4,1");
 8002008:	4814      	ldr	r0, [pc, #80]	; (800205c <lcd_trigplot+0x138>)
 800200a:	f7ff fc9f 	bl	800194c <writelcdcmd>
	trigindex++;
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	e7af      	b.n	8001f72 <lcd_trigplot+0x4e>
 8002012:	bf00      	nop
 8002014:	20001760 	.word	0x20001760
 8002018:	20002ca4 	.word	0x20002ca4
 800201c:	20000748 	.word	0x20000748
 8002020:	200019e8 	.word	0x200019e8
 8002024:	20001c04 	.word	0x20001c04
 8002028:	20001c08 	.word	0x20001c08
 800202c:	08029334 	.word	0x08029334
 8002030:	08029274 	.word	0x08029274
 8002034:	08029340 	.word	0x08029340
 8002038:	08029348 	.word	0x08029348
 800203c:	080292f0 	.word	0x080292f0
 8002040:	08029298 	.word	0x08029298
 8002044:	0802935c 	.word	0x0802935c
 8002048:	08029368 	.word	0x08029368
 800204c:	08029364 	.word	0x08029364
 8002050:	08029250 	.word	0x08029250
 8002054:	080292e8 	.word	0x080292e8
 8002058:	0802927c 	.word	0x0802927c
 800205c:	08029384 	.word	0x08029384
 8002060:	20001808 	.word	0x20001808

08002064 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 8002068:	4920      	ldr	r1, [pc, #128]	; (80020ec <lcd_presscharts+0x88>)
void lcd_presscharts() {
 800206a:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 800206c:	4820      	ldr	r0, [pc, #128]	; (80020f0 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 800206e:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8002072:	f7ff fc85 	bl	8001980 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 8002076:	491d      	ldr	r1, [pc, #116]	; (80020ec <lcd_presscharts+0x88>)
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <lcd_presscharts+0x90>)
 800207a:	f7ff fc81 	bl	8001980 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <lcd_presscharts+0x94>)
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <lcd_presscharts+0x98>)
 8002082:	4668      	mov	r0, sp
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	491d      	ldr	r1, [pc, #116]	; (8002100 <lcd_presscharts+0x9c>)
 800208c:	f022 fb24 	bl	80246d8 <siprintf>
	setlcdtext("t0.txt", str);
 8002090:	4669      	mov	r1, sp
 8002092:	481c      	ldr	r0, [pc, #112]	; (8002104 <lcd_presscharts+0xa0>)
 8002094:	f7ff fc74 	bl	8001980 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 8002098:	481b      	ldr	r0, [pc, #108]	; (8002108 <lcd_presscharts+0xa4>)
 800209a:	f7ff fc57 	bl	800194c <writelcdcmd>
	buffi = pressindex;
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <lcd_presscharts+0xa8>)
 80020a0:	4f1b      	ldr	r7, [pc, #108]	; (8002110 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80020a2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800211c <lcd_presscharts+0xb8>
	buffi = pressindex;
 80020a6:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80020a8:	4e1a      	ldr	r6, [pc, #104]	; (8002114 <lcd_presscharts+0xb0>)
 80020aa:	e010      	b.n	80020ce <lcd_presscharts+0x6a>
 80020ac:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80020b0:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80020b2:	f022 fb11 	bl	80246d8 <siprintf>
		writelcdcmd(str);
 80020b6:	4668      	mov	r0, sp
 80020b8:	f7ff fc48 	bl	800194c <writelcdcmd>
		osDelay(15);
 80020bc:	200f      	movs	r0, #15
 80020be:	f012 f987 	bl	80143d0 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80020c2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80020c6:	bfc8      	it	gt
 80020c8:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80020ca:	3d01      	subs	r5, #1
 80020cc:	d007      	beq.n	80020de <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 80020ce:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80020d0:	4631      	mov	r1, r6
 80020d2:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d0e9      	beq.n	80020ac <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80020d8:	b008      	add	sp, #32
 80020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80020de:	480e      	ldr	r0, [pc, #56]	; (8002118 <lcd_presscharts+0xb4>)
 80020e0:	f7ff fc34 	bl	800194c <writelcdcmd>
}
 80020e4:	b008      	add	sp, #32
 80020e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020ea:	bf00      	nop
 80020ec:	08029390 	.word	0x08029390
 80020f0:	08029274 	.word	0x08029274
 80020f4:	08029340 	.word	0x08029340
 80020f8:	20002ddc 	.word	0x20002ddc
 80020fc:	20002de0 	.word	0x20002de0
 8002100:	0802939c 	.word	0x0802939c
 8002104:	08029250 	.word	0x08029250
 8002108:	08029350 	.word	0x08029350
 800210c:	200019ec 	.word	0x200019ec
 8002110:	200019e8 	.word	0x200019e8
 8002114:	0802935c 	.word	0x0802935c
 8002118:	08029374 	.word	0x08029374
 800211c:	200019f0 	.word	0x200019f0

08002120 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 8002120:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8002122:	4d2c      	ldr	r5, [pc, #176]	; (80021d4 <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 8002124:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8002126:	4c2c      	ldr	r4, [pc, #176]	; (80021d8 <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 8002128:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 800212c:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 800212e:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002130:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8002132:	482a      	ldr	r0, [pc, #168]	; (80021dc <lcd_pressplot+0xbc>)
	p = pressure;
 8002134:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8002136:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8002138:	9b02      	ldr	r3, [sp, #8]
 800213a:	fb06 3301 	mla	r3, r6, r1, r3
 800213e:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 8002140:	9b01      	ldr	r3, [sp, #4]
 8002142:	4283      	cmp	r3, r0
 8002144:	dc01      	bgt.n	800214a <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <lcd_pressplot+0xc0>)
 8002148:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 800214a:	9a01      	ldr	r2, [sp, #4]
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <lcd_pressplot+0xc4>)
 800214e:	429a      	cmp	r2, r3
 8002150:	dd00      	ble.n	8002154 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002152:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8002154:	9901      	ldr	r1, [sp, #4]
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <lcd_pressplot+0xcc>)
	p = p - 93000;
 800215a:	440b      	add	r3, r1
 800215c:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	fb82 1203 	smull	r1, r2, r2, r3
 8002164:	17db      	asrs	r3, r3, #31
 8002166:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800216a:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 800216c:	9b03      	ldr	r3, [sp, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	da01      	bge.n	8002176 <lcd_pressplot+0x56>
		val = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8002176:	9b03      	ldr	r3, [sp, #12]
 8002178:	2bef      	cmp	r3, #239	; 0xef
 800217a:	dd01      	ble.n	8002180 <lcd_pressplot+0x60>
		val = 239;		// max Y
 800217c:	23ef      	movs	r3, #239	; 0xef
 800217e:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002180:	491b      	ldr	r1, [pc, #108]	; (80021f0 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8002182:	9a03      	ldr	r2, [sp, #12]
 8002184:	4e1b      	ldr	r6, [pc, #108]	; (80021f4 <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002186:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002188:	6833      	ldr	r3, [r6, #0]
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 800218c:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 800218e:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002190:	d007      	beq.n	80021a2 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002192:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002194:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002198:	bfa8      	it	ge
 800219a:	2300      	movge	r3, #0
 800219c:	6033      	str	r3, [r6, #0]
}
 800219e:	b00c      	add	sp, #48	; 0x30
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	4915      	ldr	r1, [pc, #84]	; (80021fc <lcd_pressplot+0xdc>)
 80021a6:	a804      	add	r0, sp, #16
 80021a8:	f022 fa96 	bl	80246d8 <siprintf>
		writelcdcmd(str);
 80021ac:	a804      	add	r0, sp, #16
 80021ae:	f7ff fbcd 	bl	800194c <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	a804      	add	r0, sp, #16
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	4911      	ldr	r1, [pc, #68]	; (8002200 <lcd_pressplot+0xe0>)
 80021bc:	f022 fa8c 	bl	80246d8 <siprintf>
		setlcdtext("t0.txt", str);
 80021c0:	a904      	add	r1, sp, #16
 80021c2:	4810      	ldr	r0, [pc, #64]	; (8002204 <lcd_pressplot+0xe4>)
 80021c4:	f7ff fbdc 	bl	8001980 <setlcdtext>
		writelcdcmd("vis t3,1");
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <lcd_pressplot+0xe8>)
 80021ca:	f7ff fbbf 	bl	800194c <writelcdcmd>
	pressindex++;
 80021ce:	6833      	ldr	r3, [r6, #0]
 80021d0:	e7df      	b.n	8002192 <lcd_pressplot+0x72>
 80021d2:	bf00      	nop
 80021d4:	20002ddc 	.word	0x20002ddc
 80021d8:	20002de0 	.word	0x20002de0
 80021dc:	00016b47 	.word	0x00016b47
 80021e0:	00016b48 	.word	0x00016b48
 80021e4:	00019258 	.word	0x00019258
 80021e8:	fffe94b8 	.word	0xfffe94b8
 80021ec:	63e7063f 	.word	0x63e7063f
 80021f0:	200019e8 	.word	0x200019e8
 80021f4:	200019ec 	.word	0x200019ec
 80021f8:	200019f0 	.word	0x200019f0
 80021fc:	0802935c 	.word	0x0802935c
 8002200:	0802939c 	.word	0x0802939c
 8002204:	08029250 	.word	0x08029250
 8002208:	0802927c 	.word	0x0802927c

0800220c <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 800220c:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 800220e:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002210:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8002212:	f012 f8dd 	bl	80143d0 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <lcd_controls+0x48>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 800221e:	b00d      	add	sp, #52	; 0x34
 8002220:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <lcd_controls+0x4c>)
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <lcd_controls+0x50>)
 8002228:	f7ff fbaa 	bl	8001980 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <lcd_controls+0x54>)
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <lcd_controls+0x58>)
 8002230:	f7ff fba6 	bl	8001980 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <lcd_controls+0x5c>)
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <lcd_controls+0x60>)
 8002238:	f7ff fba2 	bl	8001980 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <lcd_controls+0x64>)
 800223e:	490d      	ldr	r1, [pc, #52]	; (8002274 <lcd_controls+0x68>)
 8002240:	4668      	mov	r0, sp
 8002242:	f022 fa49 	bl	80246d8 <siprintf>
		setlcdtext("t3.txt", str);
 8002246:	4669      	mov	r1, sp
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <lcd_controls+0x6c>)
 800224a:	f7ff fb99 	bl	8001980 <setlcdtext>
}
 800224e:	b00d      	add	sp, #52	; 0x34
 8002250:	f85d fb04 	ldr.w	pc, [sp], #4
 8002254:	200019e8 	.word	0x200019e8
 8002258:	080293a8 	.word	0x080293a8
 800225c:	08029250 	.word	0x08029250
 8002260:	080293b0 	.word	0x080293b0
 8002264:	08029298 	.word	0x08029298
 8002268:	080293b8 	.word	0x080293b8
 800226c:	080292e8 	.word	0x080292e8
 8002270:	20002eb8 	.word	0x20002eb8
 8002274:	080293c8 	.word	0x080293c8
 8002278:	08029274 	.word	0x08029274

0800227c <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 800227c:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 800227e:	4c1b      	ldr	r4, [pc, #108]	; (80022ec <lcd_pagechange+0x70>)
 8002280:	7823      	ldrb	r3, [r4, #0]
 8002282:	4283      	cmp	r3, r0
 8002284:	d016      	beq.n	80022b4 <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8002286:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8002288:	2805      	cmp	r0, #5
 800228a:	d82a      	bhi.n	80022e2 <lcd_pagechange+0x66>
 800228c:	e8df f000 	tbb	[pc, r0]
 8002290:	241f1a03 	.word	0x241f1a03
 8002294:	1215      	.short	0x1215
		lcd_time();
 8002296:	f7ff fc33 	bl	8001b00 <lcd_time>
	lastday = timeinfo.tm_yday;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <lcd_pagechange+0x74>)
 800229c:	4915      	ldr	r1, [pc, #84]	; (80022f4 <lcd_pagechange+0x78>)
 800229e:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 80022a2:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 80022a4:	2128      	movs	r1, #40	; 0x28
 80022a6:	4815      	ldr	r0, [pc, #84]	; (80022fc <lcd_pagechange+0x80>)
 80022a8:	f022 fffe 	bl	80252a8 <strftime>
	setlcdtext("t1.txt", buffer);
 80022ac:	4913      	ldr	r1, [pc, #76]	; (80022fc <lcd_pagechange+0x80>)
 80022ae:	4814      	ldr	r0, [pc, #80]	; (8002300 <lcd_pagechange+0x84>)
 80022b0:	f7ff fb66 	bl	8001980 <setlcdtext>
	return (our_currentpage);
 80022b4:	7820      	ldrb	r0, [r4, #0]
 80022b6:	b2c0      	uxtb	r0, r0
}
 80022b8:	bd10      	pop	{r4, pc}
		lcd_controls();
 80022ba:	f7ff ffa7 	bl	800220c <lcd_controls>
	return (our_currentpage);
 80022be:	7820      	ldrb	r0, [r4, #0]
 80022c0:	b2c0      	uxtb	r0, r0
}
 80022c2:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 80022c4:	f7ff fcaa 	bl	8001c1c <lcd_showvars>
	return (our_currentpage);
 80022c8:	7820      	ldrb	r0, [r4, #0]
 80022ca:	b2c0      	uxtb	r0, r0
}
 80022cc:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 80022ce:	f7ff fd9d 	bl	8001e0c <lcd_trigcharts>
	return (our_currentpage);
 80022d2:	7820      	ldrb	r0, [r4, #0]
 80022d4:	b2c0      	uxtb	r0, r0
}
 80022d6:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 80022d8:	f7ff fec4 	bl	8002064 <lcd_presscharts>
	return (our_currentpage);
 80022dc:	7820      	ldrb	r0, [r4, #0]
 80022de:	b2c0      	uxtb	r0, r0
}
 80022e0:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 80022e2:	4808      	ldr	r0, [pc, #32]	; (8002304 <lcd_pagechange+0x88>)
 80022e4:	f022 f8aa 	bl	802443c <puts>
		break;
 80022e8:	e7e4      	b.n	80022b4 <lcd_pagechange+0x38>
 80022ea:	bf00      	nop
 80022ec:	200019e8 	.word	0x200019e8
 80022f0:	20001bdc 	.word	0x20001bdc
 80022f4:	20001758 	.word	0x20001758
 80022f8:	08029288 	.word	0x08029288
 80022fc:	20001628 	.word	0x20001628
 8002300:	08029298 	.word	0x08029298
 8002304:	080293e0 	.word	0x080293e0

08002308 <lcd_event_process>:
int lcd_event_process(void) {
 8002308:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800230a:	4c8f      	ldr	r4, [pc, #572]	; (8002548 <lcd_event_process+0x240>)
int lcd_event_process(void) {
 800230c:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 800230e:	2120      	movs	r1, #32
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff fb8b 	bl	8001a2c <isnexpkt>
 8002316:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8002318:	9b01      	ldr	r3, [sp, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	dd47      	ble.n	80023ae <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 800231e:	7821      	ldrb	r1, [r4, #0]
 8002320:	4b8a      	ldr	r3, [pc, #552]	; (800254c <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002322:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8002324:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002326:	d925      	bls.n	8002374 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8002328:	2965      	cmp	r1, #101	; 0x65
 800232a:	d067      	beq.n	80023fc <lcd_event_process+0xf4>
 800232c:	2966      	cmp	r1, #102	; 0x66
 800232e:	d046      	beq.n	80023be <lcd_event_process+0xb6>
 8002330:	2924      	cmp	r1, #36	; 0x24
 8002332:	d03f      	beq.n	80023b4 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8002334:	4886      	ldr	r0, [pc, #536]	; (8002550 <lcd_event_process+0x248>)
 8002336:	f021 ffe5 	bl	8024304 <iprintf>
				i = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 800233e:	9b00      	ldr	r3, [sp, #0]
 8002340:	5ce3      	ldrb	r3, [r4, r3]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d00f      	beq.n	8002366 <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8002346:	4d83      	ldr	r5, [pc, #524]	; (8002554 <lcd_event_process+0x24c>)
 8002348:	e009      	b.n	800235e <lcd_event_process+0x56>
 800234a:	9b00      	ldr	r3, [sp, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	5ce1      	ldrb	r1, [r4, r3]
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	f021 ffd7 	bl	8024304 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002356:	9b00      	ldr	r3, [sp, #0]
 8002358:	5ce3      	ldrb	r3, [r4, r3]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d003      	beq.n	8002366 <lcd_event_process+0x5e>
 800235e:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8002360:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002362:	2b1f      	cmp	r3, #31
 8002364:	d9f1      	bls.n	800234a <lcd_event_process+0x42>
				printf("\n");
 8002366:	200a      	movs	r0, #10
 8002368:	f021 ffe4 	bl	8024334 <putchar>
				return (-1);
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002370:	b003      	add	sp, #12
 8002372:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8002374:	2901      	cmp	r1, #1
 8002376:	d0fb      	beq.n	8002370 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8002378:	4877      	ldr	r0, [pc, #476]	; (8002558 <lcd_event_process+0x250>)
 800237a:	f021 ffc3 	bl	8024304 <iprintf>
				switch (eventbuffer[0]) {
 800237e:	7821      	ldrb	r1, [r4, #0]
 8002380:	2924      	cmp	r1, #36	; 0x24
 8002382:	d846      	bhi.n	8002412 <lcd_event_process+0x10a>
 8002384:	e8df f001 	tbb	[pc, r1]
 8002388:	4582878c 	.word	0x4582878c
 800238c:	45454545 	.word	0x45454545
 8002390:	45454545 	.word	0x45454545
 8002394:	45454545 	.word	0x45454545
 8002398:	457a4545 	.word	0x457a4545
 800239c:	45454545 	.word	0x45454545
 80023a0:	45724545 	.word	0x45724545
 80023a4:	4566456c 	.word	0x4566456c
 80023a8:	5a454560 	.word	0x5a454560
 80023ac:	54          	.byte	0x54
 80023ad:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 80023ae:	9801      	ldr	r0, [sp, #4]
}
 80023b0:	b003      	add	sp, #12
 80023b2:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 80023b4:	4869      	ldr	r0, [pc, #420]	; (800255c <lcd_event_process+0x254>)
 80023b6:	f022 f841 	bl	802443c <puts>
				return (1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	e7d8      	b.n	8002370 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 80023be:	4968      	ldr	r1, [pc, #416]	; (8002560 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 80023c0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 80023c6:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 80023c8:	4867      	ldr	r0, [pc, #412]	; (8002568 <lcd_event_process+0x260>)
 80023ca:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 80023cc:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 80023ce:	bf28      	it	cs
 80023d0:	2163      	movcs	r1, #99	; 0x63
 80023d2:	f7ff fafb 	bl	80019cc <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 80023d6:	7860      	ldrb	r0, [r4, #1]
 80023d8:	f7ff ff50 	bl	800227c <lcd_pagechange>
 80023dc:	2800      	cmp	r0, #0
 80023de:	db04      	blt.n	80023ea <lcd_event_process+0xe2>
 80023e0:	7860      	ldrb	r0, [r4, #1]
 80023e2:	f7ff ff4b 	bl	800227c <lcd_pagechange>
 80023e6:	2805      	cmp	r0, #5
 80023e8:	dd19      	ble.n	800241e <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 80023ea:	7860      	ldrb	r0, [r4, #1]
 80023ec:	f7ff ff46 	bl	800227c <lcd_pagechange>
 80023f0:	4601      	mov	r1, r0
 80023f2:	485e      	ldr	r0, [pc, #376]	; (800256c <lcd_event_process+0x264>)
 80023f4:	f021 ff86 	bl	8024304 <iprintf>
			return (0);
 80023f8:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 80023fa:	e7b9      	b.n	8002370 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 80023fc:	78e3      	ldrb	r3, [r4, #3]
 80023fe:	78a2      	ldrb	r2, [r4, #2]
 8002400:	7861      	ldrb	r1, [r4, #1]
 8002402:	485b      	ldr	r0, [pc, #364]	; (8002570 <lcd_event_process+0x268>)
 8002404:	f021 ff7e 	bl	8024304 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002408:	7863      	ldrb	r3, [r4, #1]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d04e      	beq.n	80024ac <lcd_event_process+0x1a4>
			return (0);
 800240e:	2000      	movs	r0, #0
 8002410:	e7ae      	b.n	8002370 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8002412:	4858      	ldr	r0, [pc, #352]	; (8002574 <lcd_event_process+0x26c>)
 8002414:	f021 ff76 	bl	8024304 <iprintf>
				return (-1);		// some kindof error
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800241c:	e7a8      	b.n	8002370 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 800241e:	7860      	ldrb	r0, [r4, #1]
 8002420:	f7ff ff2c 	bl	800227c <lcd_pagechange>
 8002424:	4603      	mov	r3, r0
 8002426:	4a54      	ldr	r2, [pc, #336]	; (8002578 <lcd_event_process+0x270>)
			return (0);
 8002428:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 800242a:	b2db      	uxtb	r3, r3
 800242c:	7013      	strb	r3, [r2, #0]
 800242e:	e79f      	b.n	8002370 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8002430:	4852      	ldr	r0, [pc, #328]	; (800257c <lcd_event_process+0x274>)
 8002432:	f022 f803 	bl	802443c <puts>
				return (-1);		// some kindof error
 8002436:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800243a:	e799      	b.n	8002370 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 800243c:	4850      	ldr	r0, [pc, #320]	; (8002580 <lcd_event_process+0x278>)
 800243e:	f021 fffd 	bl	802443c <puts>
				return (-1);		// some kindof error
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002446:	e793      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8002448:	484e      	ldr	r0, [pc, #312]	; (8002584 <lcd_event_process+0x27c>)
 800244a:	f021 fff7 	bl	802443c <puts>
				return (-1);		// some kindof error
 800244e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002452:	e78d      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8002454:	484c      	ldr	r0, [pc, #304]	; (8002588 <lcd_event_process+0x280>)
 8002456:	f021 fff1 	bl	802443c <puts>
				return (-1);		// some kindof error
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800245e:	e787      	b.n	8002370 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8002460:	484a      	ldr	r0, [pc, #296]	; (800258c <lcd_event_process+0x284>)
 8002462:	f021 ffeb 	bl	802443c <puts>
				return (-1);		// some kindof error
 8002466:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800246a:	e781      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 800246c:	4848      	ldr	r0, [pc, #288]	; (8002590 <lcd_event_process+0x288>)
 800246e:	f021 ffe5 	bl	802443c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002472:	f000 f961 	bl	8002738 <getlcdpage>
				return (-1);		// some kindof error
 8002476:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800247a:	e779      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 800247c:	4845      	ldr	r0, [pc, #276]	; (8002594 <lcd_event_process+0x28c>)
 800247e:	f021 ffdd 	bl	802443c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002482:	f000 f959 	bl	8002738 <getlcdpage>
				return (-1);		// some kindof error
 8002486:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 800248a:	e771      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 800248c:	4842      	ldr	r0, [pc, #264]	; (8002598 <lcd_event_process+0x290>)
 800248e:	f021 ffd5 	bl	802443c <puts>
					return (0);
 8002492:	2000      	movs	r0, #0
 8002494:	e76c      	b.n	8002370 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8002496:	4841      	ldr	r0, [pc, #260]	; (800259c <lcd_event_process+0x294>)
 8002498:	f021 ffd0 	bl	802443c <puts>
					return (0);
 800249c:	2000      	movs	r0, #0
 800249e:	e767      	b.n	8002370 <lcd_event_process+0x68>
					printf("Invalid command\n");
 80024a0:	483f      	ldr	r0, [pc, #252]	; (80025a0 <lcd_event_process+0x298>)
 80024a2:	f021 ffcb 	bl	802443c <puts>
				return (-1);		// some kindof error
 80024a6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 80024aa:	e761      	b.n	8002370 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 80024ac:	78a3      	ldrb	r3, [r4, #2]
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d012      	beq.n	80024d8 <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d039      	beq.n	800252a <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d026      	beq.n	8002508 <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d1a7      	bne.n	800240e <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 80024be:	78e3      	ldrb	r3, [r4, #3]
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <lcd_event_process+0x29c>)
 80024c2:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 80024c6:	4838      	ldr	r0, [pc, #224]	; (80025a8 <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 80024d0:	f021 ffb4 	bl	802443c <puts>
			return (0);
 80024d4:	2000      	movs	r0, #0
 80024d6:	e74b      	b.n	8002370 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <lcd_event_process+0x258>)
 80024da:	78e2      	ldrb	r2, [r4, #3]
 80024dc:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2a0d      	cmp	r2, #13
 80024e2:	dc01      	bgt.n	80024e8 <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 80024e4:	220e      	movs	r2, #14
 80024e6:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 80024e8:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 80024ea:	f64e 2260 	movw	r2, #60000	; 0xea60
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 80024f0:	2963      	cmp	r1, #99	; 0x63
 80024f2:	481d      	ldr	r0, [pc, #116]	; (8002568 <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 80024f4:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 80024f6:	bf28      	it	cs
 80024f8:	2163      	movcs	r1, #99	; 0x63
 80024fa:	f7ff fa67 	bl	80019cc <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 80024fe:	7863      	ldrb	r3, [r4, #1]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d184      	bne.n	800240e <lcd_event_process+0x106>
 8002504:	78a3      	ldrb	r3, [r4, #2]
 8002506:	e7d4      	b.n	80024b2 <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8002508:	78e3      	ldrb	r3, [r4, #3]
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <lcd_event_process+0x2a4>)
 800250c:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002510:	4827      	ldr	r0, [pc, #156]	; (80025b0 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 800251a:	f021 ff8f 	bl	802443c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 800251e:	7863      	ldrb	r3, [r4, #1]
 8002520:	2b04      	cmp	r3, #4
 8002522:	f47f af74 	bne.w	800240e <lcd_event_process+0x106>
 8002526:	78a3      	ldrb	r3, [r4, #2]
 8002528:	e7c7      	b.n	80024ba <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 800252a:	4822      	ldr	r0, [pc, #136]	; (80025b4 <lcd_event_process+0x2ac>)
 800252c:	f021 ff86 	bl	802443c <puts>
					osDelay(100);
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	f011 ff4d 	bl	80143d0 <osDelay>
					rebootme();
 8002536:	f000 fa93 	bl	8002a60 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 800253a:	7863      	ldrb	r3, [r4, #1]
 800253c:	2b04      	cmp	r3, #4
 800253e:	f47f af66 	bne.w	800240e <lcd_event_process+0x106>
 8002542:	78a3      	ldrb	r3, [r4, #2]
 8002544:	e7b7      	b.n	80024b6 <lcd_event_process+0x1ae>
 8002546:	bf00      	nop
 8002548:	20001730 	.word	0x20001730
 800254c:	200017f4 	.word	0x200017f4
 8002550:	080295a4 	.word	0x080295a4
 8002554:	080295d8 	.word	0x080295d8
 8002558:	080293f4 	.word	0x080293f4
 800255c:	08029504 	.word	0x08029504
 8002560:	2000000c 	.word	0x2000000c
 8002564:	20000004 	.word	0x20000004
 8002568:	0802923c 	.word	0x0802923c
 800256c:	08029574 	.word	0x08029574
 8002570:	0802951c 	.word	0x0802951c
 8002574:	080294ec 	.word	0x080294ec
 8002578:	20001764 	.word	0x20001764
 800257c:	08029444 	.word	0x08029444
 8002580:	0802942c 	.word	0x0802942c
 8002584:	08029478 	.word	0x08029478
 8002588:	08029458 	.word	0x08029458
 800258c:	0802948c 	.word	0x0802948c
 8002590:	08029418 	.word	0x08029418
 8002594:	080294a8 	.word	0x080294a8
 8002598:	080294d4 	.word	0x080294d4
 800259c:	080294bc 	.word	0x080294bc
 80025a0:	08029408 	.word	0x08029408
 80025a4:	20000270 	.word	0x20000270
 80025a8:	08029568 	.word	0x08029568
 80025ac:	20000276 	.word	0x20000276
 80025b0:	0802955c 	.word	0x0802955c
 80025b4:	0802954c 	.word	0x0802954c

080025b8 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 80025b8:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 80025ba:	4d50      	ldr	r5, [pc, #320]	; (80026fc <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 80025bc:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d06d      	beq.n	80026a0 <processnex+0xe8>
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d066      	beq.n	8002696 <processnex+0xde>
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d04b      	beq.n	8002664 <processnex+0xac>
 80025cc:	4c4c      	ldr	r4, [pc, #304]	; (8002700 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80025ce:	2600      	movs	r6, #0
 80025d0:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d04e      	beq.n	8002676 <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d07f      	beq.n	80026de <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d069      	beq.n	80026b8 <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 80025e4:	f7ff f974 	bl	80018d0 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 80025e8:	f7ff fe8e 	bl	8002308 <lcd_event_process>
	if (dimtimer > 50000) {
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <processnex+0x14c>)
 80025ee:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 80025f2:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	428b      	cmp	r3, r1
 80025f8:	d903      	bls.n	8002602 <processnex+0x4a>
		dimtimer--;
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	b022      	add	sp, #136	; 0x88
 8002600:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002602:	4841      	ldr	r0, [pc, #260]	; (8002708 <processnex+0x150>)
		dimtimer = 60000;
 8002604:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002608:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 800260a:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 800260c:	6804      	ldr	r4, [r0, #0]
 800260e:	6803      	ldr	r3, [r0, #0]
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	109b      	asrs	r3, r3, #2
 8002614:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8002618:	eb03 1322 	add.w	r3, r3, r2, asr #4
 800261c:	1aca      	subs	r2, r1, r3
		if (i < 2)
 800261e:	2a01      	cmp	r2, #1
 8002620:	dd45      	ble.n	80026ae <processnex+0xf6>
 8002622:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002624:	4939      	ldr	r1, [pc, #228]	; (800270c <processnex+0x154>)
 8002626:	4613      	mov	r3, r2
 8002628:	bf28      	it	cs
 800262a:	2363      	movcs	r3, #99	; 0x63
 800262c:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 800262e:	4a38      	ldr	r2, [pc, #224]	; (8002710 <processnex+0x158>)
 8002630:	a802      	add	r0, sp, #8
 8002632:	4938      	ldr	r1, [pc, #224]	; (8002714 <processnex+0x15c>)
 8002634:	f022 f850 	bl	80246d8 <siprintf>
	strcpy(pkt, str);
 8002638:	a902      	add	r1, sp, #8
 800263a:	a80a      	add	r0, sp, #40	; 0x28
 800263c:	f022 f8dd 	bl	80247fa <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <processnex+0x160>)
	if (!(lcd_txblocked))
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <processnex+0x164>)
	strcpy(pkt, str);
 8002644:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002646:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002648:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800264a:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800264c:	2b00      	cmp	r3, #0
 800264e:	d152      	bne.n	80026f6 <processnex+0x13e>
		return (lcd_puts(pkt));
 8002650:	a80a      	add	r0, sp, #40	; 0x28
 8002652:	f7ff f905 	bl	8001860 <lcd_puts>
	result = writelcdcmd(buffer);
 8002656:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 8002658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800265a:	3301      	adds	r3, #1
 800265c:	d047      	beq.n	80026ee <processnex+0x136>
	return (result);
 800265e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8002660:	b022      	add	sp, #136	; 0x88
 8002662:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8002664:	4c26      	ldr	r4, [pc, #152]	; (8002700 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002666:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8002668:	482d      	ldr	r0, [pc, #180]	; (8002720 <processnex+0x168>)
 800266a:	f021 fee7 	bl	802443c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 800266e:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d1b0      	bne.n	80025d8 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002676:	482b      	ldr	r0, [pc, #172]	; (8002724 <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002678:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 800267a:	f021 fedf 	bl	802443c <puts>
		lcd_uart_init(9600);	// switch us to 9600
 800267e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002682:	f7ff f81f 	bl	80016c4 <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8002686:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800268a:	f7ff f863 	bl	8001754 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 800268e:	2302      	movs	r3, #2
 8002690:	6023      	str	r3, [r4, #0]
}
 8002692:	b022      	add	sp, #136	; 0x88
 8002694:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8002696:	4824      	ldr	r0, [pc, #144]	; (8002728 <processnex+0x170>)
 8002698:	4c19      	ldr	r4, [pc, #100]	; (8002700 <processnex+0x148>)
 800269a:	f021 fecf 	bl	802443c <puts>
 800269e:	e796      	b.n	80025ce <processnex+0x16>
		printf("LCD UART FRAMING\n");
 80026a0:	4822      	ldr	r0, [pc, #136]	; (800272c <processnex+0x174>)
 80026a2:	f021 fecb 	bl	802443c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 80026a6:	4c16      	ldr	r4, [pc, #88]	; (8002700 <processnex+0x148>)
 80026a8:	2301      	movs	r3, #1
 80026aa:	6023      	str	r3, [r4, #0]
		break;
 80026ac:	e78f      	b.n	80025ce <processnex+0x16>
			i = 2;	// prevent black
 80026ae:	2202      	movs	r2, #2
 80026b0:	4916      	ldr	r1, [pc, #88]	; (800270c <processnex+0x154>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	600a      	str	r2, [r1, #0]
 80026b6:	e7ba      	b.n	800262e <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 80026b8:	481d      	ldr	r0, [pc, #116]	; (8002730 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 80026ba:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 80026bc:	f021 febe 	bl	802443c <puts>
		lcd_uart_init(230400);
 80026c0:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80026c4:	f7fe fffe 	bl	80016c4 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 80026c8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80026cc:	f7ff f842 	bl	8001754 <lcd_init>
		osDelay(100);
 80026d0:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 80026d2:	6026      	str	r6, [r4, #0]
}
 80026d4:	b022      	add	sp, #136	; 0x88
 80026d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 80026da:	f011 be79 	b.w	80143d0 <osDelay>
		osDelay(500);
 80026de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026e2:	f011 fe75 	bl	80143d0 <osDelay>
		lcd_initflag = 3;
 80026e6:	2303      	movs	r3, #3
 80026e8:	6023      	str	r3, [r4, #0]
}
 80026ea:	b022      	add	sp, #136	; 0x88
 80026ec:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80026ee:	4811      	ldr	r0, [pc, #68]	; (8002734 <processnex+0x17c>)
 80026f0:	f021 fe08 	bl	8024304 <iprintf>
 80026f4:	e7b3      	b.n	800265e <processnex+0xa6>
		return (-1);
 80026f6:	f04f 30ff 	mov.w	r0, #4294967295
 80026fa:	e7ac      	b.n	8002656 <processnex+0x9e>
 80026fc:	200017f8 	.word	0x200017f8
 8002700:	20001768 	.word	0x20001768
 8002704:	20000004 	.word	0x20000004
 8002708:	2000000c 	.word	0x2000000c
 800270c:	20001750 	.word	0x20001750
 8002710:	0802923c 	.word	0x0802923c
 8002714:	0802921c 	.word	0x0802921c
 8002718:	08029190 	.word	0x08029190
 800271c:	2000176c 	.word	0x2000176c
 8002720:	080295e0 	.word	0x080295e0
 8002724:	08029618 	.word	0x08029618
 8002728:	08029604 	.word	0x08029604
 800272c:	080295f0 	.word	0x080295f0
 8002730:	08029640 	.word	0x08029640
 8002734:	08029224 	.word	0x08029224

08002738 <getlcdpage>:
int getlcdpage(void) {
 8002738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 800273c:	4842      	ldr	r0, [pc, #264]	; (8002848 <getlcdpage+0x110>)
int getlcdpage(void) {
 800273e:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 8002740:	f021 fe7c 	bl	802443c <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002744:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8002864 <getlcdpage+0x12c>
 8002748:	2301      	movs	r3, #1
	strcpy(pkt, str);
 800274a:	4e40      	ldr	r6, [pc, #256]	; (800284c <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800274c:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 800274e:	4f40      	ldr	r7, [pc, #256]	; (8002850 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002750:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8002754:	f011 fe3c 	bl	80143d0 <osDelay>
	lcdstatus = 0xff;
 8002758:	4d3e      	ldr	r5, [pc, #248]	; (8002854 <getlcdpage+0x11c>)
 800275a:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 800275c:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 8002760:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8002762:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8002764:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 8002766:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800276a:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 800276e:	a802      	add	r0, sp, #8
 8002770:	f7ff f876 	bl	8001860 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8002774:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	3301      	adds	r3, #1
 800277a:	d060      	beq.n	800283e <getlcdpage+0x106>
	processnex();
 800277c:	f7ff ff1c 	bl	80025b8 <processnex>
	while (lcdstatus == 0xff) {
 8002780:	782b      	ldrb	r3, [r5, #0]
 8002782:	2bff      	cmp	r3, #255	; 0xff
 8002784:	d121      	bne.n	80027ca <getlcdpage+0x92>
 8002786:	4c34      	ldr	r4, [pc, #208]	; (8002858 <getlcdpage+0x120>)
 8002788:	e007      	b.n	800279a <getlcdpage+0x62>
		trys++;
 800278a:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800278c:	f011 fe20 	bl	80143d0 <osDelay>
		processnex();
 8002790:	f7ff ff12 	bl	80025b8 <processnex>
	while (lcdstatus == 0xff) {
 8002794:	782b      	ldrb	r3, [r5, #0]
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d117      	bne.n	80027ca <getlcdpage+0x92>
		if (trys > 1000) {
 800279a:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800279c:	2001      	movs	r0, #1
		if (trys > 1000) {
 800279e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80027a2:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80027a6:	d9f0      	bls.n	800278a <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80027a8:	482c      	ldr	r0, [pc, #176]	; (800285c <getlcdpage+0x124>)
 80027aa:	f021 fdab 	bl	8024304 <iprintf>
			trys = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 80027b4:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d00c      	beq.n	80027d6 <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 80027c2:	9801      	ldr	r0, [sp, #4]
}
 80027c4:	b01b      	add	sp, #108	; 0x6c
 80027c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 80027ca:	782b      	ldrb	r3, [r5, #0]
 80027cc:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 80027ce:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80027d0:	9b01      	ldr	r3, [sp, #4]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d1f2      	bne.n	80027bc <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 80027d6:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 80027d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002868 <getlcdpage+0x130>
 80027dc:	4c1e      	ldr	r4, [pc, #120]	; (8002858 <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 80027de:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 80027e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80027e6:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 80027e8:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 80027ea:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80027ee:	f7ff f837 	bl	8001860 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80027f2:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	d10a      	bne.n	8002810 <getlcdpage+0xd8>
 80027fa:	e01c      	b.n	8002836 <getlcdpage+0xfe>
		if (trys > 1000) {
 80027fc:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80027fe:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8002804:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8002808:	d80e      	bhi.n	8002828 <getlcdpage+0xf0>
		trys++;
 800280a:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800280c:	f011 fde0 	bl	80143d0 <osDelay>
		processnex();
 8002810:	f7ff fed2 	bl	80025b8 <processnex>
	while (lcdstatus == 0xff) {
 8002814:	782b      	ldrb	r3, [r5, #0]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d0f0      	beq.n	80027fc <getlcdpage+0xc4>
	return (lcdstatus);
 800281a:	782b      	ldrb	r3, [r5, #0]
 800281c:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 800281e:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8002820:	9b01      	ldr	r3, [sp, #4]
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d0db      	beq.n	80027de <getlcdpage+0xa6>
 8002826:	e7c9      	b.n	80027bc <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <getlcdpage+0x124>)
 800282a:	f021 fd6b 	bl	8024304 <iprintf>
			trys = 0;
 800282e:	2200      	movs	r2, #0
 8002830:	23ff      	movs	r3, #255	; 0xff
 8002832:	6022      	str	r2, [r4, #0]
			return (-1);
 8002834:	e7f3      	b.n	800281e <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 8002836:	4648      	mov	r0, r9
 8002838:	f021 fd64 	bl	8024304 <iprintf>
 800283c:	e7e8      	b.n	8002810 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 800283e:	4808      	ldr	r0, [pc, #32]	; (8002860 <getlcdpage+0x128>)
 8002840:	f021 fd60 	bl	8024304 <iprintf>
 8002844:	e79a      	b.n	800277c <getlcdpage+0x44>
 8002846:	bf00      	nop
 8002848:	0802969c 	.word	0x0802969c
 800284c:	080296a8 	.word	0x080296a8
 8002850:	08029190 	.word	0x08029190
 8002854:	200017f4 	.word	0x200017f4
 8002858:	20001de8 	.word	0x20001de8
 800285c:	0802966c 	.word	0x0802966c
 8002860:	080296b0 	.word	0x080296b0
 8002864:	2000176c 	.word	0x2000176c
 8002868:	080296cc 	.word	0x080296cc

0800286c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800286c:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2107      	movs	r1, #7
 8002872:	2026      	movs	r0, #38	; 0x26
 8002874:	f005 faa6 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002878:	2026      	movs	r0, #38	; 0x26
 800287a:	f005 faed 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2106      	movs	r1, #6
 8002882:	2047      	movs	r0, #71	; 0x47
 8002884:	f005 fa9e 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002888:	2047      	movs	r0, #71	; 0x47
 800288a:	f005 fae5 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2106      	movs	r1, #6
 8002892:	2012      	movs	r0, #18
 8002894:	f005 fa96 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002898:	2012      	movs	r0, #18
 800289a:	f005 fadd 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2106      	movs	r1, #6
 80028a2:	2028      	movs	r0, #40	; 0x28
 80028a4:	f005 fa8e 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028a8:	2028      	movs	r0, #40	; 0x28
 80028aa:	f005 fad5 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80028ae:	202d      	movs	r0, #45	; 0x2d
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	f005 fa86 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80028b8:	202d      	movs	r0, #45	; 0x2d
}
 80028ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80028be:	f005 bacb 	b.w	8007e58 <HAL_NVIC_EnableIRQ>
 80028c2:	bf00      	nop

080028c4 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <netif_status_callbk_fn+0x8>)
 80028c6:	f021 bdb9 	b.w	802443c <puts>
 80028ca:	bf00      	nop
 80028cc:	080296fc 	.word	0x080296fc

080028d0 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 80028d0:	4801      	ldr	r0, [pc, #4]	; (80028d8 <Callback01+0x8>)
 80028d2:	f021 bdb3 	b.w	802443c <puts>
 80028d6:	bf00      	nop
 80028d8:	08029714 	.word	0x08029714

080028dc <_write>:
	if (file == 1) {
 80028dc:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 80028de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e0:	460c      	mov	r4, r1
 80028e2:	4617      	mov	r7, r2
	if (file == 1) {
 80028e4:	d00e      	beq.n	8002904 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	dd0a      	ble.n	8002900 <_write+0x24>
 80028ea:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 80028ec:	4d0b      	ldr	r5, [pc, #44]	; (800291c <_write+0x40>)
 80028ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f2:	230a      	movs	r3, #10
 80028f4:	2201      	movs	r2, #1
 80028f6:	4628      	mov	r0, r5
 80028f8:	f00f fa76 	bl	8011de8 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d1f6      	bne.n	80028ee <_write+0x12>
}
 8002900:	4638      	mov	r0, r7
 8002902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002904:	2a00      	cmp	r2, #0
 8002906:	ddfb      	ble.n	8002900 <_write+0x24>
 8002908:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 800290a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800290e:	f001 fe93 	bl	8004638 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002912:	42ac      	cmp	r4, r5
 8002914:	d1f9      	bne.n	800290a <_write+0x2e>
}
 8002916:	4638      	mov	r0, r7
 8002918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291a:	bf00      	nop
 800291c:	20002874 	.word	0x20002874

08002920 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <crc_rom+0x44>)
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8002922:	4811      	ldr	r0, [pc, #68]	; (8002968 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8002924:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <crc_rom+0x4c>)
 800292a:	4a11      	ldr	r2, [pc, #68]	; (8002970 <crc_rom+0x50>)
 800292c:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 800292e:	bf2c      	ite	cs
 8002930:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8002934:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8002938:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 800293a:	f04f 32ff 	mov.w	r2, #4294967295
{
 800293e:	b510      	push	{r4, lr}
	length = (uint32_t)&__fini_array_end - (uint32_t)base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8002940:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 8002942:	460c      	mov	r4, r1
{
 8002944:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8002946:	4619      	mov	r1, r3
 8002948:	4620      	mov	r0, r4
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f7fe f938 	bl	8000bc0 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 8002950:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8002952:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 8002954:	4622      	mov	r2, r4
 8002956:	4807      	ldr	r0, [pc, #28]	; (8002974 <crc_rom+0x54>)
}
 8002958:	b002      	add	sp, #8
 800295a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc,base,length);
 800295e:	f021 bcd1 	b.w	8024304 <iprintf>
 8002962:	bf00      	nop
 8002964:	0800286d 	.word	0x0800286d
 8002968:	200006bc 	.word	0x200006bc
 800296c:	08044efc 	.word	0x08044efc
 8002970:	20000000 	.word	0x20000000
 8002974:	08029720 	.word	0x08029720

08002978 <err_leds>:
err_leds(int why) {
 8002978:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800297a:	4e37      	ldr	r6, [pc, #220]	; (8002a58 <err_leds+0xe0>)
err_leds(int why) {
 800297c:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 800297e:	4d37      	ldr	r5, [pc, #220]	; (8002a5c <err_leds+0xe4>)
 8002980:	1e44      	subs	r4, r0, #1
		switch (why) {
 8002982:	2c07      	cmp	r4, #7
 8002984:	d80f      	bhi.n	80029a6 <err_leds+0x2e>
 8002986:	e8df f004 	tbb	[pc, r4]
 800298a:	5c51      	.short	0x5c51
 800298c:	25303b46 	.word	0x25303b46
 8002990:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	4630      	mov	r0, r6
 8002998:	f008 f94e 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	4630      	mov	r0, r6
 80029a2:	f008 f949 	bl	800ac38 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	42ab      	cmp	r3, r5
 80029ae:	dae8      	bge.n	8002982 <err_leds+0xa>
 80029b0:	9b01      	ldr	r3, [sp, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	9b01      	ldr	r3, [sp, #4]
 80029b8:	42ab      	cmp	r3, r5
 80029ba:	dbf9      	blt.n	80029b0 <err_leds+0x38>
 80029bc:	e7e1      	b.n	8002982 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80029be:	4630      	mov	r0, r6
 80029c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c4:	f008 f938 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80029c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029cc:	4630      	mov	r0, r6
 80029ce:	f008 f933 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 80029d2:	e7e8      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80029d4:	4630      	mov	r0, r6
 80029d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029da:	f008 f92d 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80029de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e2:	4630      	mov	r0, r6
 80029e4:	f008 f928 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 80029e8:	e7dd      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80029ea:	4630      	mov	r0, r6
 80029ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029f0:	f008 f922 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80029f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f8:	4630      	mov	r0, r6
 80029fa:	f008 f91d 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 80029fe:	e7d2      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002a00:	4630      	mov	r0, r6
 8002a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a06:	f008 f917 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f008 f912 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 8002a14:	e7c7      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002a16:	4630      	mov	r0, r6
 8002a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a1c:	f008 f90c 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8002a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a24:	4630      	mov	r0, r6
 8002a26:	f008 f907 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 8002a2a:	e7bc      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a32:	f008 f901 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a3a:	4630      	mov	r0, r6
 8002a3c:	f008 f8fc 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 8002a40:	e7b1      	b.n	80029a6 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002a42:	4630      	mov	r0, r6
 8002a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a48:	f008 f8f6 	bl	800ac38 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8002a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a50:	4630      	mov	r0, r6
 8002a52:	f008 f8f1 	bl	800ac38 <HAL_GPIO_TogglePin>
			break;
 8002a56:	e7a6      	b.n	80029a6 <err_leds+0x2e>
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	003567e0 	.word	0x003567e0

08002a60 <rebootme>:
void rebootme(int why) {
 8002a60:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a62:	b672      	cpsid	i
		err_leds(why);
 8002a64:	f7ff ff88 	bl	8002978 <err_leds>

08002a68 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8002a68:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8002a6c:	074a      	lsls	r2, r1, #29
 8002a6e:	d502      	bpl.n	8002a76 <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8002a70:	4809      	ldr	r0, [pc, #36]	; (8002a98 <netif_link_callbk_fn+0x30>)
 8002a72:	f021 bc47 	b.w	8024304 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8002a76:	b510      	push	{r4, lr}
 8002a78:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8002a7a:	4808      	ldr	r0, [pc, #32]	; (8002a9c <netif_link_callbk_fn+0x34>)
 8002a7c:	f021 fc42 	bl	8024304 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8002a80:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002a84:	075b      	lsls	r3, r3, #29
 8002a86:	d500      	bpl.n	8002a8a <netif_link_callbk_fn+0x22>
}
 8002a88:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <netif_link_callbk_fn+0x38>)
 8002a8c:	f021 fcd6 	bl	802443c <puts>
			rebootme(1);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7ff ffe5 	bl	8002a60 <rebootme>
 8002a96:	bf00      	nop
 8002a98:	08029744 	.word	0x08029744
 8002a9c:	08029764 	.word	0x08029764
 8002aa0:	08029784 	.word	0x08029784

08002aa4 <StarLPTask>:
	char str[82] = { "empty" };
 8002aa4:	4ba7      	ldr	r3, [pc, #668]	; (8002d44 <StarLPTask+0x2a0>)
 8002aa6:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8002aac:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8002ab0:	b09f      	sub	sp, #124	; 0x7c
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002ab2:	2400      	movs	r4, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002ab4:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8002dc4 <StarLPTask+0x320>
	char str[82] = { "empty" };
 8002ab8:	9009      	str	r0, [sp, #36]	; 0x24
 8002aba:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8002abe:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	f020 fc80 	bl	80233c8 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002ac8:	4b9f      	ldr	r3, [pc, #636]	; (8002d48 <StarLPTask+0x2a4>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002aca:	4622      	mov	r2, r4
 8002acc:	2101      	movs	r1, #1
 8002ace:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8002ad0:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8002ad2:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002ad4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8002ad8:	f011 ff72 	bl	80149c0 <xQueueGenericCreate>
 8002adc:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f000 8454 	beq.w	800338e <StarLPTask+0x8ea>
	strcpy(udp_target,SERVER_DESTINATION);
 8002ae6:	4e99      	ldr	r6, [pc, #612]	; (8002d4c <StarLPTask+0x2a8>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8002ae8:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
	strcpy(udp_target,SERVER_DESTINATION);
 8002aec:	4f98      	ldr	r7, [pc, #608]	; (8002d50 <StarLPTask+0x2ac>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002aee:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8002dc8 <StarLPTask+0x324>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002af2:	4d98      	ldr	r5, [pc, #608]	; (8002d54 <StarLPTask+0x2b0>)
	strcpy(udp_target,SERVER_DESTINATION);
 8002af4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002af6:	6038      	str	r0, [r7, #0]
 8002af8:	6830      	ldr	r0, [r6, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	6079      	str	r1, [r7, #4]
 8002afe:	60ba      	str	r2, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002b00:	2201      	movs	r2, #1
 8002b02:	4995      	ldr	r1, [pc, #596]	; (8002d58 <StarLPTask+0x2b4>)
	strcpy(udp_target,SERVER_DESTINATION);
 8002b04:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8002b06:	4895      	ldr	r0, [pc, #596]	; (8002d5c <StarLPTask+0x2b8>)
 8002b08:	f00f fb8c 	bl	8012224 <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002b0c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 8002b10:	f8c8 4000 	str.w	r4, [r8]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002b14:	f7fe fe1e 	bl	8001754 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 8002b18:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002b1c:	f7fe fdd2 	bl	80016c4 <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 8002b20:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002b24:	f7fe fe16 	bl	8001754 <lcd_init>
	osDelay(600);
 8002b28:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002b2c:	f011 fc50 	bl	80143d0 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 8002b30:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002b34:	f7fe fe0e 	bl	8001754 <lcd_init>
	osDelay(600);
 8002b38:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002b3c:	f011 fc48 	bl	80143d0 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 8002b40:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002b44:	f7fe fdbe 	bl	80016c4 <lcd_uart_init>
	osDelay(600);
 8002b48:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002b4c:	f011 fc40 	bl	80143d0 <osDelay>
	writelcdcmd("page 0");
 8002b50:	4883      	ldr	r0, [pc, #524]	; (8002d60 <StarLPTask+0x2bc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002b52:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("page 0");
 8002b56:	f7fe fef9 	bl	800194c <writelcdcmd>
	printf("LCD page 0\n");
 8002b5a:	4882      	ldr	r0, [pc, #520]	; (8002d64 <StarLPTask+0x2c0>)
 8002b5c:	f021 fc6e 	bl	802443c <puts>
	osDelay(600);
 8002b60:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002b64:	f011 fc34 	bl	80143d0 <osDelay>
	writelcdcmd("cls BLACK");
 8002b68:	487f      	ldr	r0, [pc, #508]	; (8002d68 <StarLPTask+0x2c4>)
 8002b6a:	f7fe feef 	bl	800194c <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8002b6e:	f242 732c 	movw	r3, #10028	; 0x272c
 8002b72:	4622      	mov	r2, r4
 8002b74:	497d      	ldr	r1, [pc, #500]	; (8002d6c <StarLPTask+0x2c8>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4650      	mov	r0, sl
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	f021 fdac 	bl	80246d8 <siprintf>
	writelcdcmd(str);
 8002b80:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 8002b82:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd(str);
 8002b86:	f7fe fee1 	bl	800194c <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002b8a:	f8c8 4000 	str.w	r4, [r8]
	while (main_init_done == 0) { // wait from main to complete the init {
 8002b8e:	682c      	ldr	r4, [r5, #0]
 8002b90:	2c00      	cmp	r4, #0
 8002b92:	d147      	bne.n	8002c24 <StarLPTask+0x180>
 8002b94:	4e76      	ldr	r6, [pc, #472]	; (8002d70 <StarLPTask+0x2cc>)
 8002b96:	e017      	b.n	8002bc8 <StarLPTask+0x124>
		switch (i & 3) {
 8002b98:	f1b9 0f01 	cmp.w	r9, #1
 8002b9c:	f000 80a4 	beq.w	8002ce8 <StarLPTask+0x244>
			writelcdcmd(strcat(str, ".\""));
 8002ba0:	4b74      	ldr	r3, [pc, #464]	; (8002d74 <StarLPTask+0x2d0>)
 8002ba2:	4650      	mov	r0, sl
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	789b      	ldrb	r3, [r3, #2]
 8002ba8:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 8002bac:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8002bb0:	f7fe fecc 	bl	800194c <writelcdcmd>
		osDelay(250);
 8002bb4:	20fa      	movs	r0, #250	; 0xfa
		i++;
 8002bb6:	3401      	adds	r4, #1
		osDelay(250);
 8002bb8:	f011 fc0a 	bl	80143d0 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8002bbc:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8002bc0:	075a      	lsls	r2, r3, #29
 8002bc2:	d529      	bpl.n	8002c18 <StarLPTask+0x174>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	bb6b      	cbnz	r3, 8002c24 <StarLPTask+0x180>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002bc8:	f8df e200 	ldr.w	lr, [pc, #512]	; 8002dcc <StarLPTask+0x328>
 8002bcc:	46d4      	mov	ip, sl
		switch (i & 3) {
 8002bce:	f004 0903 	and.w	r9, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002bd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002bd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002bda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002bde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002be2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 8002be6:	f1b9 0f02 	cmp.w	r9, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002bea:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8002bee:	f82c 3b02 	strh.w	r3, [ip], #2
 8002bf2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8002bf6:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 8002bfa:	d07d      	beq.n	8002cf8 <StarLPTask+0x254>
 8002bfc:	f1b9 0f03 	cmp.w	r9, #3
 8002c00:	d1ca      	bne.n	8002b98 <StarLPTask+0xf4>
			writelcdcmd(strcat(str, "....\""));
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <StarLPTask+0x2d4>)
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	889b      	ldrh	r3, [r3, #4]
 8002c08:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 8002c12:	f7fe fe9b 	bl	800194c <writelcdcmd>
			break;
 8002c16:	e7cd      	b.n	8002bb4 <StarLPTask+0x110>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 8002c18:	4858      	ldr	r0, [pc, #352]	; (8002d7c <StarLPTask+0x2d8>)
 8002c1a:	f7fe fe97 	bl	800194c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0d1      	beq.n	8002bc8 <StarLPTask+0x124>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002c24:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 8002c26:	4856      	ldr	r0, [pc, #344]	; (8002d80 <StarLPTask+0x2dc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002c28:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("ref 0");		// refresh screen
 8002c2c:	f7fe fe8e 	bl	800194c <writelcdcmd>
	writelcdcmd("page 0");
 8002c30:	484b      	ldr	r0, [pc, #300]	; (8002d60 <StarLPTask+0x2bc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002c32:	f8c8 4000 	str.w	r4, [r8]
	int last3min = 0;
 8002c36:	46a0      	mov	r8, r4
 8002c38:	9407      	str	r4, [sp, #28]
	writelcdcmd("page 0");
 8002c3a:	f7fe fe87 	bl	800194c <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <StarLPTask+0x2a4>)
	uint16_t onesectimer = 0;
 8002c40:	46c1      	mov	r9, r8
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002c42:	4850      	ldr	r0, [pc, #320]	; (8002d84 <StarLPTask+0x2e0>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002c44:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002c48:	f8df c184 	ldr.w	ip, [pc, #388]	; 8002dd0 <StarLPTask+0x32c>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002c4c:	f893 5070 	ldrb.w	r5, [r3, #112]	; 0x70
 8002c50:	b2a4      	uxth	r4, r4
 8002c52:	f893 6071 	ldrb.w	r6, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002c56:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8002c5a:	f8d0 3424 	ldr.w	r3, [r0, #1060]	; 0x424
 8002c5e:	9401      	str	r4, [sp, #4]
 8002c60:	4949      	ldr	r1, [pc, #292]	; (8002d88 <StarLPTask+0x2e4>)
 8002c62:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8002c66:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8002c6a:	f8d0 0428 	ldr.w	r0, [r0, #1064]	; 0x428
	gainchanged = 0;
 8002c6e:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 8002c70:	4d46      	ldr	r5, [pc, #280]	; (8002d8c <StarLPTask+0x2e8>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002c72:	9000      	str	r0, [sp, #0]
 8002c74:	4846      	ldr	r0, [pc, #280]	; (8002d90 <StarLPTask+0x2ec>)
 8002c76:	f021 fd2f 	bl	80246d8 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8002c7a:	4846      	ldr	r0, [pc, #280]	; (8002d94 <StarLPTask+0x2f0>)
 8002c7c:	f00b fc40 	bl	800e500 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <StarLPTask+0x2f4>)
 8002c82:	2201      	movs	r2, #1
	gainchanged = 0;
 8002c84:	f8cd 8018 	str.w	r8, [sp, #24]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8002c88:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8002c8a:	4844      	ldr	r0, [pc, #272]	; (8002d9c <StarLPTask+0x2f8>)
		tenmstimer++;
 8002c8c:	3701      	adds	r7, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8002c8e:	f008 fe3d 	bl	800b90c <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8002c92:	200a      	movs	r0, #10
 8002c94:	f011 fb9c 	bl	80143d0 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <StarLPTask+0x2fc>)
 8002c9a:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <StarLPTask+0x300>)
		tenmstimer++;
 8002c9c:	b2bf      	uxth	r7, r7
		globaladcnoise = abs(meanwindiff);
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
				printf("AGC is ");
 8002ca2:	4e41      	ldr	r6, [pc, #260]	; (8002da8 <StarLPTask+0x304>)
		globaladcnoise = abs(meanwindiff);
 8002ca4:	2b00      	cmp	r3, #0
					printf("OFF\n");
 8002ca6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002dd4 <StarLPTask+0x330>
		globaladcnoise = abs(meanwindiff);
 8002caa:	bfb8      	it	lt
 8002cac:	425b      	neglt	r3, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8002cb2:	09db      	lsrs	r3, r3, #7
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <StarLPTask+0x308>)
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8002cc0:	f8db 0000 	ldr.w	r0, [fp]
 8002cc4:	f012 f880 	bl	8014dc8 <xQueueReceive>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	f000 8085 	beq.w	8002dd8 <StarLPTask+0x334>
			if (inch == 0x03) {		// control C
 8002cce:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002cd2:	2803      	cmp	r0, #3
 8002cd4:	d024      	beq.n	8002d20 <StarLPTask+0x27c>
			if ((isdigit(inch)) && (agc == 0)) {
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <StarLPTask+0x30c>)
 8002cd8:	5cc3      	ldrb	r3, [r0, r3]
 8002cda:	075b      	lsls	r3, r3, #29
 8002cdc:	d501      	bpl.n	8002ce2 <StarLPTask+0x23e>
 8002cde:	882b      	ldrh	r3, [r5, #0]
 8002ce0:	b1ab      	cbz	r3, 8002d0e <StarLPTask+0x26a>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 8002ce2:	f001 fca9 	bl	8004638 <__io_putchar>
 8002ce6:	e7e8      	b.n	8002cba <StarLPTask+0x216>
			writelcdcmd(strcat(str, "..\""));
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <StarLPTask+0x310>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	f7fe fe2b 	bl	800194c <writelcdcmd>
			break;
 8002cf6:	e75d      	b.n	8002bb4 <StarLPTask+0x110>
			writelcdcmd(strcat(str, "...\""));
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <StarLPTask+0x314>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002d02:	4650      	mov	r0, sl
 8002d04:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8002d08:	f7fe fe20 	bl	800194c <writelcdcmd>
			break;
 8002d0c:	e752      	b.n	8002bb4 <StarLPTask+0x110>
				setpgagain(inch - '0');
 8002d0e:	3830      	subs	r0, #48	; 0x30
 8002d10:	f002 f90e 	bl	8004f30 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 8002d14:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8002d18:	4828      	ldr	r0, [pc, #160]	; (8002dbc <StarLPTask+0x318>)
 8002d1a:	f021 faf3 	bl	8024304 <iprintf>
 8002d1e:	e7cc      	b.n	8002cba <StarLPTask+0x216>
				agc = (agc) ? 0 : 1;
 8002d20:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 8002d22:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 8002d2c:	f021 faea 	bl	8024304 <iprintf>
				if (agc)
 8002d30:	882b      	ldrh	r3, [r5, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8136 	beq.w	8002fa4 <StarLPTask+0x500>
					printf("ON\n");
 8002d38:	4821      	ldr	r0, [pc, #132]	; (8002dc0 <StarLPTask+0x31c>)
 8002d3a:	f021 fb7f 	bl	802443c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002d3e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002d42:	e7c8      	b.n	8002cd6 <StarLPTask+0x232>
 8002d44:	08028360 	.word	0x08028360
 8002d48:	20002ca4 	.word	0x20002ca4
 8002d4c:	08028d78 	.word	0x08028d78
 8002d50:	20002eb8 	.word	0x20002eb8
 8002d54:	20002a94 	.word	0x20002a94
 8002d58:	20001df8 	.word	0x20001df8
 8002d5c:	200026e8 	.word	0x200026e8
 8002d60:	080297ec 	.word	0x080297ec
 8002d64:	080297e8 	.word	0x080297e8
 8002d68:	080297f4 	.word	0x080297f4
 8002d6c:	08029800 	.word	0x08029800
 8002d70:	20002f24 	.word	0x20002f24
 8002d74:	080298bc 	.word	0x080298bc
 8002d78:	080298cc 	.word	0x080298cc
 8002d7c:	080298d4 	.word	0x080298d4
 8002d80:	0802983c 	.word	0x0802983c
 8002d84:	1ff0f000 	.word	0x1ff0f000
 8002d88:	08029844 	.word	0x08029844
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	20000084 	.word	0x20000084
 8002d94:	2000269c 	.word	0x2000269c
 8002d98:	20002a90 	.word	0x20002a90
 8002d9c:	2000233c 	.word	0x2000233c
 8002da0:	20000748 	.word	0x20000748
 8002da4:	200006f8 	.word	0x200006f8
 8002da8:	08029910 	.word	0x08029910
 8002dac:	20000000 	.word	0x20000000
 8002db0:	08044609 	.word	0x08044609
 8002db4:	080298c0 	.word	0x080298c0
 8002db8:	080298c4 	.word	0x080298c4
 8002dbc:	08029920 	.word	0x08029920
 8002dc0:	08029918 	.word	0x08029918
 8002dc4:	20001dfc 	.word	0x20001dfc
 8002dc8:	200017f8 	.word	0x200017f8
 8002dcc:	0802988c 	.word	0x0802988c
 8002dd0:	20002e5c 	.word	0x20002e5c
 8002dd4:	0802991c 	.word	0x0802991c
		if (!(ledsenabled)) {
 8002dd8:	4b9c      	ldr	r3, [pc, #624]	; (800304c <StarLPTask+0x5a8>)
 8002dda:	4604      	mov	r4, r0
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80e6 	beq.w	8002fb0 <StarLPTask+0x50c>
		} else if (ledhang) {	// trigger led
 8002de4:	4a9a      	ldr	r2, [pc, #616]	; (8003050 <StarLPTask+0x5ac>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80e1 	beq.w	8002fb0 <StarLPTask+0x50c>
			ledhang--;
 8002dee:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df4:	4897      	ldr	r0, [pc, #604]	; (8003054 <StarLPTask+0x5b0>)
			ledhang--;
 8002df6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f007 ff03 	bl	800ac04 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8002dfe:	4996      	ldr	r1, [pc, #600]	; (8003058 <StarLPTask+0x5b4>)
 8002e00:	4896      	ldr	r0, [pc, #600]	; (800305c <StarLPTask+0x5b8>)
 8002e02:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 8002e04:	6803      	ldr	r3, [r0, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f040 80d9 	bne.w	8002fbe <StarLPTask+0x51a>
		processnex();		// process Nextion
 8002e0c:	f7ff fbd4 	bl	80025b8 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8002e10:	4a93      	ldr	r2, [pc, #588]	; (8003060 <StarLPTask+0x5bc>)
 8002e12:	1cfb      	adds	r3, r7, #3
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	4a92      	ldr	r2, [pc, #584]	; (8003064 <StarLPTask+0x5c0>)
 8002e1a:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 8002e1e:	d31e      	bcc.n	8002e5e <StarLPTask+0x3ba>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8002e20:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <StarLPTask+0x5b4>)
 8002e22:	4c91      	ldr	r4, [pc, #580]	; (8003068 <StarLPTask+0x5c4>)
 8002e24:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	f103 0219 	add.w	r2, r3, #25
 8002e2c:	4291      	cmp	r1, r2
 8002e2e:	f200 820c 	bhi.w	800324a <StarLPTask+0x7a6>
				if (jabbertimeout) {
 8002e32:	4a8e      	ldr	r2, [pc, #568]	; (800306c <StarLPTask+0x5c8>)
 8002e34:	6813      	ldr	r3, [r2, #0]
 8002e36:	b10b      	cbz	r3, 8002e3c <StarLPTask+0x398>
					jabbertimeout--;		// de-arm count
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8002e3c:	4b86      	ldr	r3, [pc, #536]	; (8003058 <StarLPTask+0x5b4>)
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e40:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 8002e42:	9b06      	ldr	r3, [sp, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8221 	beq.w	800328c <StarLPTask+0x7e8>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8002e4a:	4b89      	ldr	r3, [pc, #548]	; (8003070 <StarLPTask+0x5cc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 81d2 	beq.w	80031f8 <StarLPTask+0x754>
 8002e54:	4b87      	ldr	r3, [pc, #540]	; (8003074 <StarLPTask+0x5d0>)
			} else if (lcd_currentpage == 1) {
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	f000 8258 	beq.w	800330e <StarLPTask+0x86a>
				lcd_showvars();
 8002e5e:	4a86      	ldr	r2, [pc, #536]	; (8003078 <StarLPTask+0x5d4>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002e60:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002e68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002e72:	f080 80dd 	bcs.w	8003030 <StarLPTask+0x58c>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002e76:	4a81      	ldr	r2, [pc, #516]	; (800307c <StarLPTask+0x5d8>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002e78:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002e80:	4a7f      	ldr	r2, [pc, #508]	; (8003080 <StarLPTask+0x5dc>)
 8002e82:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8002e86:	d31a      	bcc.n	8002ebe <StarLPTask+0x41a>
			if (agc) {
 8002e88:	882b      	ldrh	r3, [r5, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 81b2 	beq.w	80031f4 <StarLPTask+0x750>
				trigsin10sec = trigs - prevtrigs;
 8002e90:	4b72      	ldr	r3, [pc, #456]	; (800305c <StarLPTask+0x5b8>)
 8002e92:	4c7c      	ldr	r4, [pc, #496]	; (8003084 <StarLPTask+0x5e0>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002e94:	4e7c      	ldr	r6, [pc, #496]	; (8003088 <StarLPTask+0x5e4>)
				trigsin10sec = trigs - prevtrigs;
 8002e96:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002e98:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80030ec <StarLPTask+0x648>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002ea0:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 8002ea2:	eba2 0303 	sub.w	r3, r2, r3
 8002ea6:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002eaa:	d802      	bhi.n	8002eb2 <StarLPTask+0x40e>
					if (trigsin10sec < MINTRIGS10S)
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f240 825a 	bls.w	8003366 <StarLPTask+0x8c2>
				if (trigsin10sec > MAXTRIGS10S)
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	f200 822e 	bhi.w	8003314 <StarLPTask+0x870>
			gainchanged = 0;
 8002eb8:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8002eba:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8002ebc:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8002ebe:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002ec2:	429f      	cmp	r7, r3
 8002ec4:	d94e      	bls.n	8002f64 <StarLPTask+0x4c0>
			if (gpsgood == 0) {	// gps is not talking to us
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <StarLPTask+0x5e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 818e 	bne.w	80031ec <StarLPTask+0x748>
				printf("GPS serial comms problem?\n");
 8002ed0:	486f      	ldr	r0, [pc, #444]	; (8003090 <StarLPTask+0x5ec>)
 8002ed2:	f021 fab3 	bl	802443c <puts>
				if (gpsbadcount++ > 9) {
 8002ed6:	496f      	ldr	r1, [pc, #444]	; (8003094 <StarLPTask+0x5f0>)
 8002ed8:	680b      	ldr	r3, [r1, #0]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	600a      	str	r2, [r1, #0]
 8002ee0:	f300 824b 	bgt.w	800337a <StarLPTask+0x8d6>
			if (psensor == MPL115A2) {
 8002ee4:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <StarLPTask+0x5f4>)
			gpsgood = 0;			// reset the good flag
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4968      	ldr	r1, [pc, #416]	; (800308c <StarLPTask+0x5e8>)
			if (psensor == MPL115A2) {
 8002eea:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 8002eec:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	f000 8204 	beq.w	80032fc <StarLPTask+0x858>
			} else if (psensor == MPL3115A2) {
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f000 8223 	beq.w	8003340 <StarLPTask+0x89c>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002efa:	4b68      	ldr	r3, [pc, #416]	; (800309c <StarLPTask+0x5f8>)
			tenmstimer = 0;
 8002efc:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002efe:	4a56      	ldr	r2, [pc, #344]	; (8003058 <StarLPTask+0x5b4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8002f06:	0e1a      	lsrs	r2, r3, #24
 8002f08:	4865      	ldr	r0, [pc, #404]	; (80030a0 <StarLPTask+0x5fc>)
 8002f0a:	b289      	uxth	r1, r1
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002f12:	9201      	str	r2, [sp, #4]
 8002f14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	9200      	str	r2, [sp, #0]
 8002f1c:	f242 722c 	movw	r2, #10028	; 0x272c
 8002f20:	f021 f9f0 	bl	8024304 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 8002f24:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <StarLPTask+0x600>)
 8002f26:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <StarLPTask+0x604>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	494c      	ldr	r1, [pc, #304]	; (800305c <StarLPTask+0x5b8>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	485e      	ldr	r0, [pc, #376]	; (80030ac <StarLPTask+0x608>)
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	9304      	str	r3, [sp, #16]
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <StarLPTask+0x60c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	9302      	str	r3, [sp, #8]
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <StarLPTask+0x610>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	9303      	str	r3, [sp, #12]
 8002f44:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <StarLPTask+0x614>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <StarLPTask+0x5e4>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <StarLPTask+0x618>)
 8002f52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f56:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <StarLPTask+0x61c>)
 8002f58:	9305      	str	r3, [sp, #20]
 8002f5a:	4b5a      	ldr	r3, [pc, #360]	; (80030c4 <StarLPTask+0x620>)
 8002f5c:	6809      	ldr	r1, [r1, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f021 f9d0 	bl	8024304 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 8002f64:	f109 0315 	add.w	r3, r9, #21
 8002f68:	4a57      	ldr	r2, [pc, #348]	; (80030c8 <StarLPTask+0x624>)
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	4a56      	ldr	r2, [pc, #344]	; (80030cc <StarLPTask+0x628>)
 8002f72:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002f76:	d30b      	bcc.n	8002f90 <StarLPTask+0x4ec>
 8002f78:	9b07      	ldr	r3, [sp, #28]
 8002f7a:	4599      	cmp	r9, r3
 8002f7c:	d008      	beq.n	8002f90 <StarLPTask+0x4ec>
			if (boosttrys > 0)		// timer for boost gain oscillating
 8002f7e:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <StarLPTask+0x62c>)
 8002f80:	8813      	ldrh	r3, [r2, #0]
 8002f82:	b10b      	cbz	r3, 8002f88 <StarLPTask+0x4e4>
				boosttrys--;
 8002f84:	3b01      	subs	r3, #1
 8002f86:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8002f88:	f7ff f8ca 	bl	8002120 <lcd_pressplot>
 8002f8c:	f8cd 901c 	str.w	r9, [sp, #28]
		if (onesectimer > 900) {			// 15 mins
 8002f90:	f240 3385 	movw	r3, #901	; 0x385
 8002f94:	4599      	cmp	r9, r3
 8002f96:	f47f ae78 	bne.w	8002c8a <StarLPTask+0x1e6>
			onesectimer = 0;
 8002f9a:	f04f 0900 	mov.w	r9, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 8002f9e:	f004 fa63 	bl	8007468 <requestapisn>
 8002fa2:	e672      	b.n	8002c8a <StarLPTask+0x1e6>
					printf("OFF\n");
 8002fa4:	4640      	mov	r0, r8
 8002fa6:	f021 fa49 	bl	802443c <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8002faa:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8002fae:	e692      	b.n	8002cd6 <StarLPTask+0x232>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb6:	4827      	ldr	r0, [pc, #156]	; (8003054 <StarLPTask+0x5b0>)
 8002fb8:	f007 fe24 	bl	800ac04 <HAL_GPIO_WritePin>
 8002fbc:	e71f      	b.n	8002dfe <StarLPTask+0x35a>
			if (soundenabled) {
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <StarLPTask+0x630>)
			trigs = statuspkt.trigcount;
 8002fc0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 8002fc2:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8002fc4:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 8173 	bne.w	80032b2 <StarLPTask+0x80e>
 8002fcc:	4e42      	ldr	r6, [pc, #264]	; (80030d8 <StarLPTask+0x634>)
				printf("sem wait 1a\n");
 8002fce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80030f0 <StarLPTask+0x64c>
 8002fd2:	e002      	b.n	8002fda <StarLPTask+0x536>
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	f021 fa31 	bl	802443c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	6830      	ldr	r0, [r6, #0]
 8002fde:	f011 ffbb 	bl	8014f58 <xQueueSemaphoreTake>
 8002fe2:	2801      	cmp	r0, #1
 8002fe4:	d1f6      	bne.n	8002fd4 <StarLPTask+0x530>
			strcpy(str, ctime(&epochtime));		// ctime
 8002fe6:	483d      	ldr	r0, [pc, #244]	; (80030dc <StarLPTask+0x638>)
 8002fe8:	f01f ff6c 	bl	8022ec4 <ctime>
 8002fec:	4601      	mov	r1, r0
 8002fee:	4650      	mov	r0, sl
 8002ff0:	f021 fc03 	bl	80247fa <stpcpy>
			i = 0;
 8002ff4:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 8002ff6:	eba0 000a 	sub.w	r0, r0, sl
 8002ffa:	4939      	ldr	r1, [pc, #228]	; (80030e0 <StarLPTask+0x63c>)
 8002ffc:	e008      	b.n	8003010 <StarLPTask+0x56c>
				if ((str[i] != '\n') && (str[i] != '\r'))
 8002ffe:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8003002:	2a0a      	cmp	r2, #10
 8003004:	d003      	beq.n	800300e <StarLPTask+0x56a>
 8003006:	2a0d      	cmp	r2, #13
 8003008:	d001      	beq.n	800300e <StarLPTask+0x56a>
					trigtimestr[n++] = str[i];
 800300a:	550a      	strb	r2, [r1, r4]
 800300c:	3401      	adds	r4, #1
				i++;
 800300e:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 8003010:	4283      	cmp	r3, r0
 8003012:	d3f4      	bcc.n	8002ffe <StarLPTask+0x55a>
			trigtimestr[n] = '\0';
 8003014:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8003016:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 8003018:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800301a:	461a      	mov	r2, r3
 800301c:	4619      	mov	r1, r3
 800301e:	f011 fd01 	bl	8014a24 <xQueueGenericSend>
 8003022:	2801      	cmp	r0, #1
 8003024:	f43f aef2 	beq.w	8002e0c <StarLPTask+0x368>
				printf("semaphore 1a release failed\n");
 8003028:	482e      	ldr	r0, [pc, #184]	; (80030e4 <StarLPTask+0x640>)
 800302a:	f021 fa07 	bl	802443c <puts>
 800302e:	e6ed      	b.n	8002e0c <StarLPTask+0x368>
			if (ledsenabled)
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <StarLPTask+0x5a8>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003036:	4807      	ldr	r0, [pc, #28]	; (8003054 <StarLPTask+0x5b0>)
			if (ledsenabled)
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	2a00      	cmp	r2, #0
 800303c:	f000 8152 	beq.w	80032e4 <StarLPTask+0x840>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003040:	f007 fdfa 	bl	800ac38 <HAL_GPIO_TogglePin>
 8003044:	4e24      	ldr	r6, [pc, #144]	; (80030d8 <StarLPTask+0x634>)
				printf("sem wait 1b\n");
 8003046:	4c28      	ldr	r4, [pc, #160]	; (80030e8 <StarLPTask+0x644>)
 8003048:	e057      	b.n	80030fa <StarLPTask+0x656>
 800304a:	bf00      	nop
 800304c:	20000270 	.word	0x20000270
 8003050:	20000744 	.word	0x20000744
 8003054:	40020c00 	.word	0x40020c00
 8003058:	20002ca4 	.word	0x20002ca4
 800305c:	20002abc 	.word	0x20002abc
 8003060:	cccccccd 	.word	0xcccccccd
 8003064:	19999999 	.word	0x19999999
 8003068:	20002a84 	.word	0x20002a84
 800306c:	200006fc 	.word	0x200006fc
 8003070:	20001768 	.word	0x20001768
 8003074:	20001764 	.word	0x20001764
 8003078:	c28f5c29 	.word	0xc28f5c29
 800307c:	26e978d5 	.word	0x26e978d5
 8003080:	00418937 	.word	0x00418937
 8003084:	20002aac 	.word	0x20002aac
 8003088:	20000002 	.word	0x20000002
 800308c:	20002b64 	.word	0x20002b64
 8003090:	08029ad4 	.word	0x08029ad4
 8003094:	20001e44 	.word	0x20001e44
 8003098:	20002de4 	.word	0x20002de4
 800309c:	20002aa4 	.word	0x20002aa4
 80030a0:	08029b30 	.word	0x08029b30
 80030a4:	20002dec 	.word	0x20002dec
 80030a8:	10624dd3 	.word	0x10624dd3
 80030ac:	08029b4c 	.word	0x08029b4c
 80030b0:	20002ddc 	.word	0x20002ddc
 80030b4:	20002de8 	.word	0x20002de8
 80030b8:	20002de0 	.word	0x20002de0
 80030bc:	20002dd8 	.word	0x20002dd8
 80030c0:	20000054 	.word	0x20000054
 80030c4:	200006f8 	.word	0x200006f8
 80030c8:	a4fa4fa5 	.word	0xa4fa4fa5
 80030cc:	016c16c1 	.word	0x016c16c1
 80030d0:	20002d58 	.word	0x20002d58
 80030d4:	20000276 	.word	0x20000276
 80030d8:	20002ab4 	.word	0x20002ab4
 80030dc:	20002b58 	.word	0x20002b58
 80030e0:	2000023c 	.word	0x2000023c
 80030e4:	08029950 	.word	0x08029950
 80030e8:	0802997c 	.word	0x0802997c
 80030ec:	20002ac0 	.word	0x20002ac0
 80030f0:	08029944 	.word	0x08029944
 80030f4:	4620      	mov	r0, r4
 80030f6:	f021 f9a1 	bl	802443c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80030fa:	2101      	movs	r1, #1
 80030fc:	6830      	ldr	r0, [r6, #0]
 80030fe:	f011 ff2b 	bl	8014f58 <xQueueSemaphoreTake>
 8003102:	2801      	cmp	r0, #1
 8003104:	d1f6      	bne.n	80030f4 <StarLPTask+0x650>
			strcpy(str, ctime(&epochtime));
 8003106:	48a5      	ldr	r0, [pc, #660]	; (800339c <StarLPTask+0x8f8>)
 8003108:	f01f fedc 	bl	8022ec4 <ctime>
 800310c:	4601      	mov	r1, r0
 800310e:	4650      	mov	r0, sl
			sprintf(statstr,
 8003110:	4ca3      	ldr	r4, [pc, #652]	; (80033a0 <StarLPTask+0x8fc>)
			strcpy(str, ctime(&epochtime));
 8003112:	f021 fb72 	bl	80247fa <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8003116:	eba0 000a 	sub.w	r0, r0, sl
 800311a:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 800311c:	49a1      	ldr	r1, [pc, #644]	; (80033a4 <StarLPTask+0x900>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800311e:	f100 0378 	add.w	r3, r0, #120	; 0x78
			sprintf(nowtimestr, "\"%s\"", str);
 8003122:	48a1      	ldr	r0, [pc, #644]	; (80033a8 <StarLPTask+0x904>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8003124:	446b      	add	r3, sp
 8003126:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 800312a:	4652      	mov	r2, sl
 800312c:	f021 fad4 	bl	80246d8 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8003130:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <StarLPTask+0x908>)
 8003132:	4a9f      	ldr	r2, [pc, #636]	; (80033b0 <StarLPTask+0x90c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	499e      	ldr	r1, [pc, #632]	; (80033b4 <StarLPTask+0x910>)
 800313a:	489f      	ldr	r0, [pc, #636]	; (80033b8 <StarLPTask+0x914>)
 800313c:	f021 facc 	bl	80246d8 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8003140:	4b9e      	ldr	r3, [pc, #632]	; (80033bc <StarLPTask+0x918>)
 8003142:	4a9f      	ldr	r2, [pc, #636]	; (80033c0 <StarLPTask+0x91c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	499a      	ldr	r1, [pc, #616]	; (80033b4 <StarLPTask+0x910>)
 800314a:	489e      	ldr	r0, [pc, #632]	; (80033c4 <StarLPTask+0x920>)
 800314c:	f021 fac4 	bl	80246d8 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003150:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <StarLPTask+0x924>)
			sprintf(statstr,
 8003152:	499e      	ldr	r1, [pc, #632]	; (80033cc <StarLPTask+0x928>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003154:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8003158:	489d      	ldr	r0, [pc, #628]	; (80033d0 <StarLPTask+0x92c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800315a:	2b00      	cmp	r3, #0
 800315c:	bfb8      	it	lt
 800315e:	425b      	neglt	r3, r3
			sprintf(statstr,
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	4b9b      	ldr	r3, [pc, #620]	; (80033d4 <StarLPTask+0x930>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316e:	9302      	str	r3, [sp, #8]
 8003170:	4b99      	ldr	r3, [pc, #612]	; (80033d8 <StarLPTask+0x934>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003178:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4b97      	ldr	r3, [pc, #604]	; (80033dc <StarLPTask+0x938>)
 800317e:	f021 faab 	bl	80246d8 <siprintf>
			if (gpslocked) {
 8003182:	4b97      	ldr	r3, [pc, #604]	; (80033e0 <StarLPTask+0x93c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 809d 	beq.w	80032c6 <StarLPTask+0x822>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 800318c:	7ee2      	ldrb	r2, [r4, #27]
 800318e:	69e3      	ldr	r3, [r4, #28]
 8003190:	6a21      	ldr	r1, [r4, #32]
 8003192:	4894      	ldr	r0, [pc, #592]	; (80033e4 <StarLPTask+0x940>)
 8003194:	9100      	str	r1, [sp, #0]
 8003196:	4994      	ldr	r1, [pc, #592]	; (80033e8 <StarLPTask+0x944>)
 8003198:	f021 fa9e 	bl	80246d8 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800319c:	2300      	movs	r3, #0
 800319e:	6830      	ldr	r0, [r6, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	f011 fc3e 	bl	8014a24 <xQueueGenericSend>
 80031a8:	2801      	cmp	r0, #1
 80031aa:	d002      	beq.n	80031b2 <StarLPTask+0x70e>
				printf("semaphore 1b release failed\n");
 80031ac:	488f      	ldr	r0, [pc, #572]	; (80033ec <StarLPTask+0x948>)
 80031ae:	f021 f945 	bl	802443c <puts>
			onesectimer++;
 80031b2:	f109 0901 	add.w	r9, r9, #1
				printf("sem wait 1c\n");
 80031b6:	4c8e      	ldr	r4, [pc, #568]	; (80033f0 <StarLPTask+0x94c>)
			onesectimer++;
 80031b8:	fa1f f989 	uxth.w	r9, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80031bc:	e002      	b.n	80031c4 <StarLPTask+0x720>
				printf("sem wait 1c\n");
 80031be:	4620      	mov	r0, r4
 80031c0:	f021 f93c 	bl	802443c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80031c4:	2119      	movs	r1, #25
 80031c6:	6830      	ldr	r0, [r6, #0]
 80031c8:	f011 fec6 	bl	8014f58 <xQueueSemaphoreTake>
 80031cc:	2801      	cmp	r0, #1
 80031ce:	d1f6      	bne.n	80031be <StarLPTask+0x71a>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80031d0:	2300      	movs	r3, #0
 80031d2:	6830      	ldr	r0, [r6, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	f011 fc24 	bl	8014a24 <xQueueGenericSend>
 80031dc:	2801      	cmp	r0, #1
 80031de:	d002      	beq.n	80031e6 <StarLPTask+0x742>
				printf("semaphore 1c release failed\n");
 80031e0:	4884      	ldr	r0, [pc, #528]	; (80033f4 <StarLPTask+0x950>)
 80031e2:	f021 f92b 	bl	802443c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 80031e6:	f7fe fe9d 	bl	8001f24 <lcd_trigplot>
 80031ea:	e644      	b.n	8002e76 <StarLPTask+0x3d2>
				gpsbadcount = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	4a82      	ldr	r2, [pc, #520]	; (80033f8 <StarLPTask+0x954>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e677      	b.n	8002ee4 <StarLPTask+0x440>
			gainchanged = 0;
 80031f4:	9306      	str	r3, [sp, #24]
 80031f6:	e662      	b.n	8002ebe <StarLPTask+0x41a>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80031f8:	4c80      	ldr	r4, [pc, #512]	; (80033fc <StarLPTask+0x958>)
 80031fa:	8823      	ldrh	r3, [r4, #0]
 80031fc:	454b      	cmp	r3, r9
 80031fe:	4b80      	ldr	r3, [pc, #512]	; (8003400 <StarLPTask+0x95c>)
 8003200:	f43f ae29 	beq.w	8002e56 <StarLPTask+0x3b2>
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	2a00      	cmp	r2, #0
 8003208:	f47f ae25 	bne.w	8002e56 <StarLPTask+0x3b2>
				timeinfo = *localtime(&localepochtime);
 800320c:	487d      	ldr	r0, [pc, #500]	; (8003404 <StarLPTask+0x960>)
 800320e:	f01f ff7b 	bl	8023108 <localtime>
 8003212:	4e7d      	ldr	r6, [pc, #500]	; (8003408 <StarLPTask+0x964>)
 8003214:	4684      	mov	ip, r0
 8003216:	46b6      	mov	lr, r6
 8003218:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800321c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003220:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003224:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003228:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 800322c:	f8a4 9000 	strh.w	r9, [r4]
				timeinfo = *localtime(&localepochtime);
 8003230:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8003234:	f7fe fc64 	bl	8001b00 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8003238:	4b74      	ldr	r3, [pc, #464]	; (800340c <StarLPTask+0x968>)
 800323a:	69f2      	ldr	r2, [r6, #28]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	f43f ae0d 	beq.w	8002e5e <StarLPTask+0x3ba>
					lcd_date();
 8003244:	f7fe fcb2 	bl	8001bac <lcd_date>
 8003248:	e609      	b.n	8002e5e <StarLPTask+0x3ba>
				statuspkt.jabcnt++;
 800324a:	4955      	ldr	r1, [pc, #340]	; (80033a0 <StarLPTask+0x8fc>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800324c:	4870      	ldr	r0, [pc, #448]	; (8003410 <StarLPTask+0x96c>)
				statuspkt.jabcnt++;
 800324e:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8003252:	3201      	adds	r2, #1
 8003254:	b292      	uxth	r2, r2
 8003256:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 800325a:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800325c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800325e:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <StarLPTask+0x970>)
 8003262:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003264:	f021 f84e 	bl	8024304 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8003268:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <StarLPTask+0x974>)
 800326a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800326e:	b93b      	cbnz	r3, 8003280 <StarLPTask+0x7dc>
					if (trigthresh < 4095)
 8003270:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <StarLPTask+0x934>)
 8003272:	f640 71fe 	movw	r1, #4094	; 0xffe
 8003276:	8813      	ldrh	r3, [r2, #0]
 8003278:	428b      	cmp	r3, r1
 800327a:	d801      	bhi.n	8003280 <StarLPTask+0x7dc>
						trigthresh++;
 800327c:	3301      	adds	r3, #1
 800327e:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8003280:	882b      	ldrh	r3, [r5, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d165      	bne.n	8003352 <StarLPTask+0x8ae>
				jabtrigcnt = statuspkt.trigcount;
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <StarLPTask+0x8fc>)
 8003288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800328a:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <StarLPTask+0x978>)
 800328e:	4a64      	ldr	r2, [pc, #400]	; (8003420 <StarLPTask+0x97c>)
 8003290:	6819      	ldr	r1, [r3, #0]
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8003296:	2b05      	cmp	r3, #5
 8003298:	dd27      	ble.n	80032ea <StarLPTask+0x846>
					if (trigthresh < 4095)
 800329a:	484f      	ldr	r0, [pc, #316]	; (80033d8 <StarLPTask+0x934>)
 800329c:	f640 74fe 	movw	r4, #4094	; 0xffe
 80032a0:	8803      	ldrh	r3, [r0, #0]
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	d801      	bhi.n	80032aa <StarLPTask+0x806>
						trigthresh++;
 80032a6:	3301      	adds	r3, #1
 80032a8:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 80032aa:	2300      	movs	r3, #0
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	9306      	str	r3, [sp, #24]
 80032b0:	e5cb      	b.n	8002e4a <StarLPTask+0x3a6>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80032b2:	2308      	movs	r3, #8
 80032b4:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <StarLPTask+0x980>)
 80032b6:	2100      	movs	r1, #0
 80032b8:	485b      	ldr	r0, [pc, #364]	; (8003428 <StarLPTask+0x984>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032c0:	f004 fed8 	bl	8008074 <HAL_DAC_Start_DMA>
 80032c4:	e682      	b.n	8002fcc <StarLPTask+0x528>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 80032c6:	f8df c178 	ldr.w	ip, [pc, #376]	; 8003440 <StarLPTask+0x99c>
 80032ca:	4c46      	ldr	r4, [pc, #280]	; (80033e4 <StarLPTask+0x940>)
 80032cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80032d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80032dc:	f844 0b04 	str.w	r0, [r4], #4
 80032e0:	8021      	strh	r1, [r4, #0]
 80032e2:	e75b      	b.n	800319c <StarLPTask+0x6f8>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80032e4:	f007 fc8e 	bl	800ac04 <HAL_GPIO_WritePin>
 80032e8:	e6ac      	b.n	8003044 <StarLPTask+0x5a0>
				if (n == 0) {		// no triggers in last 100mS
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1dd      	bne.n	80032aa <StarLPTask+0x806>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80032ee:	483a      	ldr	r0, [pc, #232]	; (80033d8 <StarLPTask+0x934>)
 80032f0:	8803      	ldrh	r3, [r0, #0]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d9d9      	bls.n	80032aa <StarLPTask+0x806>
						trigthresh--;
 80032f6:	3b01      	subs	r3, #1
 80032f8:	8003      	strh	r3, [r0, #0]
 80032fa:	e7d6      	b.n	80032aa <StarLPTask+0x806>
				if (getpressure115() != HAL_OK) {
 80032fc:	f001 ff22 	bl	8005144 <getpressure115>
 8003300:	2800      	cmp	r0, #0
 8003302:	f43f adfa 	beq.w	8002efa <StarLPTask+0x456>
					printf("MPL115A2 error\n\r");
 8003306:	4849      	ldr	r0, [pc, #292]	; (800342c <StarLPTask+0x988>)
 8003308:	f020 fffc 	bl	8024304 <iprintf>
 800330c:	e5f5      	b.n	8002efa <StarLPTask+0x456>
				lcd_showvars();
 800330e:	f7fe fc85 	bl	8001c1c <lcd_showvars>
 8003312:	e5a4      	b.n	8002e5e <StarLPTask+0x3ba>
					gainchanged = bumppga(-1);
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f001 fece 	bl	80050b8 <bumppga>
 800331c:	b203      	sxth	r3, r0
 800331e:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <StarLPTask+0x98c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8003326:	9b06      	ldr	r3, [sp, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f77f adc8 	ble.w	8002ebe <StarLPTask+0x41a>
					if (trigthresh < (4095 - 10))
 800332e:	8833      	ldrh	r3, [r6, #0]
 8003330:	f640 72f4 	movw	r2, #4084	; 0xff4
 8003334:	4293      	cmp	r3, r2
 8003336:	f63f adc2 	bhi.w	8002ebe <StarLPTask+0x41a>
						trigthresh += 5;
 800333a:	3305      	adds	r3, #5
 800333c:	8033      	strh	r3, [r6, #0]
 800333e:	e5be      	b.n	8002ebe <StarLPTask+0x41a>
				if (getpressure3115() != HAL_OK) {
 8003340:	f001 ffae 	bl	80052a0 <getpressure3115>
 8003344:	2800      	cmp	r0, #0
 8003346:	f43f add8 	beq.w	8002efa <StarLPTask+0x456>
					printf("MPL3115A2 error\n\r");
 800334a:	483a      	ldr	r0, [pc, #232]	; (8003434 <StarLPTask+0x990>)
 800334c:	f020 ffda 	bl	8024304 <iprintf>
 8003350:	e5d3      	b.n	8002efa <StarLPTask+0x456>
					gainchanged = bumppga(-1);	// decrease gain
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	f001 feaf 	bl	80050b8 <bumppga>
 800335a:	b203      	sxth	r3, r0
 800335c:	9306      	str	r3, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <StarLPTask+0x8fc>)
 8003360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	e56d      	b.n	8002e42 <StarLPTask+0x39e>
						gainchanged = bumppga(1);
 8003366:	2001      	movs	r0, #1
 8003368:	f001 fea6 	bl	80050b8 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 800336c:	f8d8 3000 	ldr.w	r3, [r8]
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d8cf      	bhi.n	8003314 <StarLPTask+0x870>
						gainchanged = bumppga(1);
 8003374:	b203      	sxth	r3, r0
 8003376:	9306      	str	r3, [sp, #24]
 8003378:	e7d2      	b.n	8003320 <StarLPTask+0x87c>
					printf("GPS bad - rebooting...\n");
 800337a:	482f      	ldr	r0, [pc, #188]	; (8003438 <StarLPTask+0x994>)
 800337c:	f021 f85e 	bl	802443c <puts>
					osDelay(3000);
 8003380:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003384:	f011 f824 	bl	80143d0 <osDelay>
					rebootme(5);
 8003388:	2005      	movs	r0, #5
 800338a:	f7ff fb69 	bl	8002a60 <rebootme>
 800338e:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8003390:	482a      	ldr	r0, [pc, #168]	; (800343c <StarLPTask+0x998>)
 8003392:	f021 f853 	bl	802443c <puts>
		rebootme(0);
 8003396:	4628      	mov	r0, r5
 8003398:	f7ff fb62 	bl	8002a60 <rebootme>
 800339c:	20002b58 	.word	0x20002b58
 80033a0:	20002ca4 	.word	0x20002ca4
 80033a4:	08029988 	.word	0x08029988
 80033a8:	20000054 	.word	0x20000054
 80033ac:	20002dec 	.word	0x20002dec
 80033b0:	20002de8 	.word	0x20002de8
 80033b4:	08029990 	.word	0x08029990
 80033b8:	20000230 	.word	0x20000230
 80033bc:	20002ddc 	.word	0x20002ddc
 80033c0:	20002de0 	.word	0x20002de0
 80033c4:	20000074 	.word	0x20000074
 80033c8:	20000748 	.word	0x20000748
 80033cc:	08029998 	.word	0x08029998
 80033d0:	20000128 	.word	0x20000128
 80033d4:	200006f4 	.word	0x200006f4
 80033d8:	20000002 	.word	0x20000002
 80033dc:	2000023c 	.word	0x2000023c
 80033e0:	20002e50 	.word	0x20002e50
 80033e4:	20000014 	.word	0x20000014
 80033e8:	08029a40 	.word	0x08029a40
 80033ec:	08029a90 	.word	0x08029a90
 80033f0:	08029aac 	.word	0x08029aac
 80033f4:	08029ab8 	.word	0x08029ab8
 80033f8:	20001e44 	.word	0x20001e44
 80033fc:	20000008 	.word	0x20000008
 8003400:	20001764 	.word	0x20001764
 8003404:	20001800 	.word	0x20001800
 8003408:	20001bdc 	.word	0x20001bdc
 800340c:	20001758 	.word	0x20001758
 8003410:	0802996c 	.word	0x0802996c
 8003414:	200006fc 	.word	0x200006fc
 8003418:	20002dd8 	.word	0x20002dd8
 800341c:	20000750 	.word	0x20000750
 8003420:	20002a8c 	.word	0x20002a8c
 8003424:	08029e48 	.word	0x08029e48
 8003428:	20001f44 	.word	0x20001f44
 800342c:	08029b08 	.word	0x08029b08
 8003430:	20002abc 	.word	0x20002abc
 8003434:	08029b1c 	.word	0x08029b1c
 8003438:	08029af0 	.word	0x08029af0
 800343c:	080297b8 	.word	0x080297b8
 8003440:	08029a68 	.word	0x08029a68

08003444 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8003444:	2100      	movs	r1, #0
 8003446:	f004 beb1 	b.w	80081ac <HAL_DAC_Stop_DMA>
 800344a:	bf00      	nop

0800344c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 800344e:	6803      	ldr	r3, [r0, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d003      	beq.n	800345e <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02d      	beq.n	80034b8 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 800345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800345e:	4c1a      	ldr	r4, [pc, #104]	; (80034c8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_TIM_IC_CaptureCallback+0x80>)
 8003462:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8003464:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003466:	3101      	adds	r1, #1
 8003468:	481a      	ldr	r0, [pc, #104]	; (80034d4 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 800346a:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800346c:	fba3 5301 	umull	r5, r3, r3, r1
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003476:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800347a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800347e:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003480:	4815      	ldr	r0, [pc, #84]	; (80034d8 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8003482:	b1b2      	cbz	r2, 80034b2 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003484:	f007 fbd8 	bl	800ac38 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8003488:	4d14      	ldr	r5, [pc, #80]	; (80034dc <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 800348a:	2100      	movs	r1, #0
		diff = lastcap;
 800348c:	4e14      	ldr	r6, [pc, #80]	; (80034e0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800348e:	462b      	mov	r3, r5
 8003490:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003494:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 800349c:	4298      	cmp	r0, r3
		sum += data[i];
 800349e:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 80034a0:	d1f9      	bne.n	8003496 <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 80034a2:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 80034a6:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 80034a8:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80034aa:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 80034ac:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 80034ae:	6033      	str	r3, [r6, #0]
}
 80034b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 80034b2:	f007 fba7 	bl	800ac04 <HAL_GPIO_WritePin>
 80034b6:	e7e7      	b.n	8003488 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 80034b8:	480b      	ldr	r0, [pc, #44]	; (80034e8 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 80034ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 80034be:	f020 bfbd 	b.w	802443c <puts>
 80034c2:	bf00      	nop
 80034c4:	40000800 	.word	0x40000800
 80034c8:	20002ca4 	.word	0x20002ca4
 80034cc:	88888889 	.word	0x88888889
 80034d0:	20000270 	.word	0x20000270
 80034d4:	20000754 	.word	0x20000754
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	20001e00 	.word	0x20001e00
 80034e0:	20002a88 	.word	0x20002a88
 80034e4:	20000768 	.word	0x20000768
 80034e8:	08029bac 	.word	0x08029bac

080034ec <getboardpcb>:
void getboardpcb() {
 80034ec:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 80034ee:	2101      	movs	r1, #1
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <getboardpcb+0x18>)
 80034f2:	f007 fb75 	bl	800abe0 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 80034f6:	2800      	cmp	r0, #0
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <getboardpcb+0x1c>)
 80034fa:	bf0c      	ite	eq
 80034fc:	2216      	moveq	r2, #22
 80034fe:	220b      	movne	r2, #11
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bd08      	pop	{r3, pc}
 8003504:	40020800 	.word	0x40020800
 8003508:	20001df4 	.word	0x20001df4

0800350c <uart2_rxdone>:
void uart2_rxdone() {
 800350c:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <uart2_rxdone+0x20>)
 8003510:	2300      	movs	r3, #0
 8003512:	4907      	ldr	r1, [pc, #28]	; (8003530 <uart2_rxdone+0x24>)
 8003514:	461a      	mov	r2, r3
 8003516:	6800      	ldr	r0, [r0, #0]
 8003518:	f011 fb84 	bl	8014c24 <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800351c:	2201      	movs	r2, #1
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <uart2_rxdone+0x24>)
 8003520:	4804      	ldr	r0, [pc, #16]	; (8003534 <uart2_rxdone+0x28>)
}
 8003522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003526:	f00e be7d 	b.w	8012224 <HAL_UART_Receive_IT>
 800352a:	bf00      	nop
 800352c:	20001dfc 	.word	0x20001dfc
 8003530:	20001df8 	.word	0x20001df8
 8003534:	200026e8 	.word	0x200026e8

08003538 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800353a:	6803      	ldr	r3, [r0, #0]
 800353c:	4293      	cmp	r3, r2
 800353e:	d029      	beq.n	8003594 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8003540:	4a24      	ldr	r2, [pc, #144]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02d      	beq.n	80035a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d02c      	beq.n	80035a6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 800354c:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d030      	beq.n	80035b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d005      	beq.n	8003564 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8003558:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 800355e:	4821      	ldr	r0, [pc, #132]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003560:	f020 bf6c 	b.w	802443c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003564:	b510      	push	{r4, lr}
		t1sec++;
 8003566:	4920      	ldr	r1, [pc, #128]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8003568:	4c20      	ldr	r4, [pc, #128]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 800356a:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 800356c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 800356e:	4820      	ldr	r0, [pc, #128]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8003570:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8003572:	3301      	adds	r3, #1
		if (netup)
 8003574:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8003576:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003578:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 800357a:	b110      	cbz	r0, 8003582 <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 800357c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800357e:	3301      	adds	r3, #1
 8003580:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b9c3      	cbnz	r3, 80035ba <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8003588:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 800358a:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 800358c:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 800358e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 8003592:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	6013      	str	r3, [r2, #0]
		return;
 800359c:	4770      	bx	lr
		HAL_IncTick();
 800359e:	f003 bfad 	b.w	80074fc <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 80035a2:	f7fd b973 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035aa:	4816      	ldr	r0, [pc, #88]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80035ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	f020 bea8 	b.w	8024304 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 80035b4:	4814      	ldr	r0, [pc, #80]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80035b6:	f020 bf41 	b.w	802443c <puts>
			statuspkt.gpsuptime++;
 80035ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80035bc:	3301      	adds	r3, #1
 80035be:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 80035c0:	f001 f858 	bl	8004674 <calcepoch32>
				epochvalid = 1;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80035c6:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 80035c8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 80035cc:	701a      	strb	r2, [r3, #0]
}
 80035ce:	bd10      	pop	{r4, pc}
 80035d0:	40002000 	.word	0x40002000
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40001000 	.word	0x40001000
 80035e0:	40001800 	.word	0x40001800
 80035e4:	08029bfc 	.word	0x08029bfc
 80035e8:	20002ab8 	.word	0x20002ab8
 80035ec:	20002ca4 	.word	0x20002ca4
 80035f0:	2000074a 	.word	0x2000074a
 80035f4:	20002e50 	.word	0x20002e50
 80035f8:	20002e48 	.word	0x20002e48
 80035fc:	20002ab0 	.word	0x20002ab0
 8003600:	20000768 	.word	0x20000768
 8003604:	08029bbc 	.word	0x08029bbc
 8003608:	08029be0 	.word	0x08029be0

0800360c <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 800360c:	4c02      	ldr	r4, [pc, #8]	; (8003618 <Error_Handler+0xc>)
void Error_Handler(void) {
 800360e:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8003610:	4620      	mov	r0, r4
 8003612:	f020 ff13 	bl	802443c <puts>
	while (1) {
 8003616:	e7fb      	b.n	8003610 <Error_Handler+0x4>
 8003618:	08029c24 	.word	0x08029c24

0800361c <SystemClock_Config>:
void SystemClock_Config(void) {
 800361c:	b530      	push	{r4, r5, lr}
 800361e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003620:	2234      	movs	r2, #52	; 0x34
 8003622:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003624:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003626:	a807      	add	r0, sp, #28
 8003628:	f01f fece 	bl	80233c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800362c:	2300      	movs	r3, #0
 800362e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003632:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003636:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8003638:	f008 fef8 	bl	800c42c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800363e:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8003642:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003644:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003648:	6411      	str	r1, [r2, #64]	; 0x40
 800364a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800364c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003650:	9200      	str	r2, [sp, #0]
 8003652:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800365a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800365c:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800365e:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003660:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003666:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003668:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800366a:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800366c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003670:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003672:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003676:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800367c:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 800367e:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003680:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003682:	23d8      	movs	r3, #216	; 0xd8
 8003684:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8003688:	2306      	movs	r3, #6
 800368a:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800368c:	f008 ff10 	bl	800c4b0 <HAL_RCC_OscConfig>
 8003690:	b9a0      	cbnz	r0, 80036bc <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003692:	f008 fed3 	bl	800c43c <HAL_PWREx_EnableOverDrive>
 8003696:	4603      	mov	r3, r0
 8003698:	b980      	cbnz	r0, 80036bc <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800369a:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800369c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80036a0:	a802      	add	r0, sp, #8
 80036a2:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036ac:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036b0:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80036b2:	f009 f9d3 	bl	800ca5c <HAL_RCC_ClockConfig>
 80036b6:	b908      	cbnz	r0, 80036bc <SystemClock_Config+0xa0>
}
 80036b8:	b015      	add	sp, #84	; 0x54
 80036ba:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80036bc:	f7ff ffa6 	bl	800360c <Error_Handler>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000

080036c8 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 80036c8:	b510      	push	{r4, lr}
 80036ca:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80036cc:	228c      	movs	r2, #140	; 0x8c
 80036ce:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80036d0:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80036d2:	a801      	add	r0, sp, #4
 80036d4:	f01f fe78 	bl	80233c8 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80036d8:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80036da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80036de:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80036e0:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80036e2:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80036e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80036e8:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80036ea:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80036ec:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80036ee:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80036f0:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80036f2:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80036f6:	f009 fb17 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 80036fa:	b908      	cbnz	r0, 8003700 <PeriphCommonClock_Config+0x38>
}
 80036fc:	b024      	add	sp, #144	; 0x90
 80036fe:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003700:	f7ff ff84 	bl	800360c <Error_Handler>

08003704 <main>:
int main(void) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b0dc      	sub	sp, #368	; 0x170
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800370c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003710:	4bc2      	ldr	r3, [pc, #776]	; (8003a1c <main+0x318>)
 8003712:	2400      	movs	r4, #0
 8003714:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800371c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003726:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003728:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800372c:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003730:	4dbb      	ldr	r5, [pc, #748]	; (8003a20 <main+0x31c>)
	HAL_Init();
 8003732:	f003 fed1 	bl	80074d8 <HAL_Init>
	SystemClock_Config();
 8003736:	f7ff ff71 	bl	800361c <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800373a:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 800373c:	f7ff ffc4 	bl	80036c8 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003740:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8003742:	4622      	mov	r2, r4
 8003744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003748:	48b6      	ldr	r0, [pc, #728]	; (8003a24 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800374a:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374e:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003750:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 8003754:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003758:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 800375c:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003760:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	632b      	str	r3, [r5, #48]	; 0x30
 8003768:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003772:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	632b      	str	r3, [r5, #48]	; 0x30
 800377a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	9304      	str	r3, [sp, #16]
 8003782:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003784:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003786:	f043 0320 	orr.w	r3, r3, #32
 800378a:	632b      	str	r3, [r5, #48]	; 0x30
 800378c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	9305      	str	r3, [sp, #20]
 8003794:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003796:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379c:	632b      	str	r3, [r5, #48]	; 0x30
 800379e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	9306      	str	r3, [sp, #24]
 80037a6:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	632b      	str	r3, [r5, #48]	; 0x30
 80037b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	9307      	str	r3, [sp, #28]
 80037b8:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	632b      	str	r3, [r5, #48]	; 0x30
 80037c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	9308      	str	r3, [sp, #32]
 80037ca:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80037cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d2:	632b      	str	r3, [r5, #48]	; 0x30
 80037d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
 80037dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	632b      	str	r3, [r5, #48]	; 0x30
 80037e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	930a      	str	r3, [sp, #40]	; 0x28
 80037ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80037f0:	f007 fa08 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80037f4:	4622      	mov	r2, r4
 80037f6:	f644 0181 	movw	r1, #18561	; 0x4881
 80037fa:	488b      	ldr	r0, [pc, #556]	; (8003a28 <main+0x324>)
 80037fc:	f007 fa02 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8003800:	4622      	mov	r2, r4
 8003802:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8003806:	4889      	ldr	r0, [pc, #548]	; (8003a2c <main+0x328>)
 8003808:	f007 f9fc 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 800380c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003810:	4887      	ldr	r0, [pc, #540]	; (8003a30 <main+0x32c>)
 8003812:	2201      	movs	r2, #1
 8003814:	f007 f9f6 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003818:	4622      	mov	r2, r4
 800381a:	2144      	movs	r1, #68	; 0x44
 800381c:	4885      	ldr	r0, [pc, #532]	; (8003a34 <main+0x330>)
 800381e:	f007 f9f1 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8003822:	4622      	mov	r2, r4
 8003824:	2102      	movs	r1, #2
 8003826:	4882      	ldr	r0, [pc, #520]	; (8003a30 <main+0x32c>)
 8003828:	f007 f9ec 	bl	800ac04 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 800382c:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003830:	a955      	add	r1, sp, #340	; 0x154
 8003832:	487e      	ldr	r0, [pc, #504]	; (8003a2c <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8003834:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003836:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800383a:	f006 ff37 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800383e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003842:	a955      	add	r1, sp, #340	; 0x154
 8003844:	487c      	ldr	r0, [pc, #496]	; (8003a38 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003846:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003848:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800384e:	f006 ff2d 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8003852:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003856:	a955      	add	r1, sp, #340	; 0x154
 8003858:	4872      	ldr	r0, [pc, #456]	; (8003a24 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 800385a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003860:	f006 ff24 	bl	800a6ac <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003864:	a955      	add	r1, sp, #340	; 0x154
 8003866:	486f      	ldr	r0, [pc, #444]	; (8003a24 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8003868:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386c:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003870:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003874:	f006 ff1a 	bl	800a6ac <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003878:	a955      	add	r1, sp, #340	; 0x154
 800387a:	486f      	ldr	r0, [pc, #444]	; (8003a38 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387c:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800387e:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003882:	f006 ff13 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003886:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	a955      	add	r1, sp, #340	; 0x154
 800388a:	486c      	ldr	r0, [pc, #432]	; (8003a3c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800388c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	f006 ff0b 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8003896:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	a955      	add	r1, sp, #340	; 0x154
 800389c:	4862      	ldr	r0, [pc, #392]	; (8003a28 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 800389e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a6:	f006 ff01 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80038aa:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	a955      	add	r1, sp, #340	; 0x154
 80038ae:	485e      	ldr	r0, [pc, #376]	; (8003a28 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80038b0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b6:	f006 fef9 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80038ba:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038be:	a955      	add	r1, sp, #340	; 0x154
 80038c0:	485c      	ldr	r0, [pc, #368]	; (8003a34 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80038c2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038c8:	f006 fef0 	bl	800a6ac <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038cc:	a955      	add	r1, sp, #340	; 0x154
 80038ce:	4857      	ldr	r0, [pc, #348]	; (8003a2c <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038d2:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d6:	f006 fee9 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 80038da:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038de:	a955      	add	r1, sp, #340	; 0x154
 80038e0:	4852      	ldr	r0, [pc, #328]	; (8003a2c <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 80038e2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80038e4:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 80038ea:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038f2:	f006 fedb 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 80038f6:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038fa:	a955      	add	r1, sp, #340	; 0x154
 80038fc:	484c      	ldr	r0, [pc, #304]	; (8003a30 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 80038fe:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003904:	f006 fed2 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003908:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800390c:	a955      	add	r1, sp, #340	; 0x154
 800390e:	4848      	ldr	r0, [pc, #288]	; (8003a30 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003910:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003918:	f006 fec8 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800391c:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800391e:	a955      	add	r1, sp, #340	; 0x154
 8003920:	4844      	ldr	r0, [pc, #272]	; (8003a34 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8003922:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800392a:	f006 febf 	bl	800a6ac <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800392e:	a955      	add	r1, sp, #340	; 0x154
 8003930:	4840      	ldr	r0, [pc, #256]	; (8003a34 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003932:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800393a:	f006 feb7 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800393e:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003942:	a955      	add	r1, sp, #340	; 0x154
 8003944:	483c      	ldr	r0, [pc, #240]	; (8003a38 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003946:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f006 feae 	bl	800a6ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003950:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	a955      	add	r1, sp, #340	; 0x154
 8003956:	4839      	ldr	r0, [pc, #228]	; (8003a3c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003958:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395a:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800395c:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f006 fea2 	bl	800a6ac <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003968:	a955      	add	r1, sp, #340	; 0x154
 800396a:	4831      	ldr	r0, [pc, #196]	; (8003a30 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396c:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003970:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003974:	f006 fe9a 	bl	800a6ac <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003978:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800397a:	4639      	mov	r1, r7
 800397c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800397e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003982:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003984:	632b      	str	r3, [r5, #48]	; 0x30
 8003986:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003990:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003996:	632b      	str	r3, [r5, #48]	; 0x30
 8003998:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 800399a:	4d29      	ldr	r5, [pc, #164]	; (8003a40 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 800399c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80039a4:	f004 fa0e 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80039a8:	200b      	movs	r0, #11
 80039aa:	f004 fa55 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80039ae:	4622      	mov	r2, r4
 80039b0:	2106      	movs	r1, #6
 80039b2:	4650      	mov	r0, sl
 80039b4:	f004 fa06 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039b8:	4650      	mov	r0, sl
 80039ba:	f004 fa4d 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80039be:	4622      	mov	r2, r4
 80039c0:	2106      	movs	r1, #6
 80039c2:	2010      	movs	r0, #16
 80039c4:	f004 f9fe 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80039c8:	2010      	movs	r0, #16
 80039ca:	f004 fa45 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 80039ce:	4622      	mov	r2, r4
 80039d0:	4639      	mov	r1, r7
 80039d2:	2011      	movs	r0, #17
 80039d4:	f004 f9f6 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80039d8:	2011      	movs	r0, #17
 80039da:	f004 fa3d 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 80039de:	4622      	mov	r2, r4
 80039e0:	4639      	mov	r1, r7
 80039e2:	202f      	movs	r0, #47	; 0x2f
 80039e4:	f004 f9ee 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80039e8:	202f      	movs	r0, #47	; 0x2f
 80039ea:	f004 fa35 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80039ee:	4622      	mov	r2, r4
 80039f0:	2106      	movs	r1, #6
 80039f2:	2039      	movs	r0, #57	; 0x39
 80039f4:	f004 f9e6 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80039f8:	2039      	movs	r0, #57	; 0x39
 80039fa:	f004 fa2d 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80039fe:	4622      	mov	r2, r4
 8003a00:	4649      	mov	r1, r9
 8003a02:	203c      	movs	r0, #60	; 0x3c
 8003a04:	f004 f9de 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003a08:	203c      	movs	r0, #60	; 0x3c
 8003a0a:	f004 fa25 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8003a0e:	4622      	mov	r2, r4
 8003a10:	4639      	mov	r1, r7
 8003a12:	2045      	movs	r0, #69	; 0x45
 8003a14:	f004 f9d6 	bl	8007dc4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003a18:	2045      	movs	r0, #69	; 0x45
 8003a1a:	e013      	b.n	8003a44 <main+0x340>
 8003a1c:	e000ed00 	.word	0xe000ed00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40021400 	.word	0x40021400
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021800 	.word	0x40021800
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40004400 	.word	0x40004400
 8003a44:	f004 fa08 	bl	8007e58 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8003a48:	48bd      	ldr	r0, [pc, #756]	; (8003d40 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8003a4a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003a4e:	4622      	mov	r2, r4
 8003a50:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003a52:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003a56:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8003a58:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003a5c:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003a5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a62:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a66:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003a6a:	f00e fc7d 	bl	8012368 <HAL_RS485Ex_Init>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f040 8446 	bne.w	8004300 <main+0xbfc>
	hadc1.Instance = ADC1;
 8003a74:	4cb3      	ldr	r4, [pc, #716]	; (8003d44 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a76:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8003a7a:	4bb3      	ldr	r3, [pc, #716]	; (8003d48 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8003a7c:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003a7e:	9045      	str	r0, [sp, #276]	; 0x114
 8003a80:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a82:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a84:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a86:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a8a:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a8c:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a8e:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003a90:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8003a92:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a94:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a98:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a9c:	4bab      	ldr	r3, [pc, #684]	; (8003d4c <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8003a9e:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003aa2:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003aa6:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003aa8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003aaa:	f003 fd4b 	bl	8007544 <HAL_ADC_Init>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	f040 8426 	bne.w	8004300 <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8003ab8:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003aba:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003abc:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003abe:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f004 f8fe 	bl	8007cc4 <HAL_ADCEx_MultiModeConfigChannel>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f040 8419 	bne.w	8004300 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ace:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003ad0:	a945      	add	r1, sp, #276	; 0x114
 8003ad2:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ad4:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003ad8:	f004 f800 	bl	8007adc <HAL_ADC_ConfigChannel>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f040 840f 	bne.w	8004300 <main+0xbfc>
	hadc2.Instance = ADC2;
 8003ae2:	4c9b      	ldr	r4, [pc, #620]	; (8003d50 <main+0x64c>)
 8003ae4:	4b9b      	ldr	r3, [pc, #620]	; (8003d54 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ae6:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003ae8:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aec:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8003aee:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003af2:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8003af4:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8003af6:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8003af8:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003afa:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8003afe:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003b02:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8003b06:	4620      	mov	r0, r4
 8003b08:	f003 fd1c 	bl	8007544 <HAL_ADC_Init>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	f040 83f7 	bne.w	8004300 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b12:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003b14:	a941      	add	r1, sp, #260	; 0x104
 8003b16:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b18:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003b1c:	f003 ffde 	bl	8007adc <HAL_ADC_ConfigChannel>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f040 83ed 	bne.w	8004300 <main+0xbfc>
	hadc3.Instance = ADC3;
 8003b26:	4c8c      	ldr	r4, [pc, #560]	; (8003d58 <main+0x654>)
 8003b28:	4b8c      	ldr	r3, [pc, #560]	; (8003d5c <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b2a:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003b2c:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b30:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8003b32:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b36:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8003b38:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8003b3a:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8003b3c:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003b3e:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8003b42:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003b46:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f003 fcfa 	bl	8007544 <HAL_ADC_Init>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f040 83d5 	bne.w	8004300 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b56:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8003b58:	a93d      	add	r1, sp, #244	; 0xf4
 8003b5a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b5c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8003b60:	f003 ffbc 	bl	8007adc <HAL_ADC_ConfigChannel>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	f040 83cb 	bne.w	8004300 <main+0xbfc>
	hrng.Instance = RNG;
 8003b6a:	487d      	ldr	r0, [pc, #500]	; (8003d60 <main+0x65c>)
 8003b6c:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <main+0x660>)
 8003b6e:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8003b70:	f009 fdba 	bl	800d6e8 <HAL_RNG_Init>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	f040 83c3 	bne.w	8004300 <main+0xbfc>
	htim6.Instance = TIM6;
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8003b7c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8003b80:	497a      	ldr	r1, [pc, #488]	; (8003d6c <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b82:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b84:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b86:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8003b8a:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8003b8e:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003b92:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003b96:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8003b98:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003b9a:	f00b fb95 	bl	800f2c8 <HAL_TIM_Base_Init>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f040 83ae 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003ba4:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8003ba6:	a91f      	add	r1, sp, #124	; 0x7c
 8003ba8:	486f      	ldr	r0, [pc, #444]	; (8003d68 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003baa:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8003bb0:	f00c fff4 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f040 83a3 	bne.w	8004300 <main+0xbfc>
	htim3.Instance = TIM3;
 8003bba:	4c6d      	ldr	r4, [pc, #436]	; (8003d70 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8003bbc:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003bc0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003d94 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bc4:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bc6:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003bc8:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003bca:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bcc:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bce:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bd0:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bd2:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8003bd4:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8003bd8:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003bdc:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8003be0:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8003be4:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003be8:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003bec:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003bf0:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8003bf2:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003bf4:	f00b fb68 	bl	800f2c8 <HAL_TIM_Base_Init>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	f040 8381 	bne.w	8004300 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bfe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003c02:	a939      	add	r1, sp, #228	; 0xe4
 8003c04:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c06:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003c08:	f00a fdf4 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f040 8377 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003c12:	4620      	mov	r0, r4
 8003c14:	f00b fcf4 	bl	800f600 <HAL_TIM_PWM_Init>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	f040 8371 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c1e:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003c20:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c22:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003c24:	4620      	mov	r0, r4
 8003c26:	f00c ffb9 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f040 8368 	bne.w	8004300 <main+0xbfc>
	sConfigOC.Pulse = 10;
 8003c30:	230a      	movs	r3, #10
 8003c32:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c36:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003c38:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c3a:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003c3c:	a955      	add	r1, sp, #340	; 0x154
 8003c3e:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8003c40:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003c44:	f00c f85a 	bl	800fcfc <HAL_TIM_PWM_ConfigChannel>
 8003c48:	4605      	mov	r5, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	f040 8358 	bne.w	8004300 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8003c50:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8003c52:	4c48      	ldr	r4, [pc, #288]	; (8003d74 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8003c54:	f002 fa14 	bl	8006080 <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003c5a:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c5c:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8003c5e:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8003c60:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c64:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8003c66:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c68:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c6c:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003c70:	f00b fb2a 	bl	800f2c8 <HAL_TIM_Base_Init>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	f040 8343 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c7a:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7c:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003c7e:	a919      	add	r1, sp, #100	; 0x64
 8003c80:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c82:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003c84:	f00c ff8a 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	f040 8339 	bne.w	8004300 <main+0xbfc>
	htim1.Instance = TIM1;
 8003c8e:	4c3b      	ldr	r4, [pc, #236]	; (8003d7c <main+0x678>)
 8003c90:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c92:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8003c94:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8003c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c9a:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8003c9c:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003c9e:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8003ca2:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8003caa:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003cae:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f00b fb08 	bl	800f2c8 <HAL_TIM_Base_Init>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f040 8321 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003cbe:	a935      	add	r1, sp, #212	; 0xd4
 8003cc0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cc2:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003cc4:	f00a fd96 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f040 8319 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cce:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003cd0:	a916      	add	r1, sp, #88	; 0x58
 8003cd2:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd4:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cd6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003cda:	f00c ff5f 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	f040 830d 	bne.w	8004300 <main+0xbfc>
	hcrc.Instance = CRC;
 8003ce6:	4827      	ldr	r0, [pc, #156]	; (8003d84 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003ce8:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003cea:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003cec:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003cee:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <main+0x684>)
 8003cf4:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003cf6:	f004 f8dd 	bl	8007eb4 <HAL_CRC_Init>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	f040 8300 	bne.w	8004300 <main+0xbfc>
	htim2.Instance = TIM2;
 8003d00:	4c22      	ldr	r4, [pc, #136]	; (8003d8c <main+0x688>)
 8003d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d06:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003d08:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8003d0a:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8003d0c:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003d0e:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003d10:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d12:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003d14:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d16:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d18:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d1a:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8003d1c:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d1e:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003d22:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8003d26:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003d2a:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d32:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003d36:	4620      	mov	r0, r4
 8003d38:	f00b fac6 	bl	800f2c8 <HAL_TIM_Base_Init>
 8003d3c:	e02c      	b.n	8003d98 <main+0x694>
 8003d3e:	bf00      	nop
 8003d40:	200026e8 	.word	0x200026e8
 8003d44:	20001e48 	.word	0x20001e48
 8003d48:	40012000 	.word	0x40012000
 8003d4c:	0f000001 	.word	0x0f000001
 8003d50:	20001e90 	.word	0x20001e90
 8003d54:	40012100 	.word	0x40012100
 8003d58:	20001ed8 	.word	0x20001ed8
 8003d5c:	40012200 	.word	0x40012200
 8003d60:	2000234c 	.word	0x2000234c
 8003d64:	50060800 	.word	0x50060800
 8003d68:	20002650 	.word	0x20002650
 8003d6c:	40001000 	.word	0x40001000
 8003d70:	2000256c 	.word	0x2000256c
 8003d74:	2000269c 	.word	0x2000269c
 8003d78:	40001400 	.word	0x40001400
 8003d7c:	20002488 	.word	0x20002488
 8003d80:	40010000 	.word	0x40010000
 8003d84:	20001f20 	.word	0x20001f20
 8003d88:	40023000 	.word	0x40023000
 8003d8c:	20002520 	.word	0x20002520
 8003d90:	ee6b2800 	.word	0xee6b2800
 8003d94:	40000400 	.word	0x40000400
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	f040 82b1 	bne.w	8004300 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003da2:	a92d      	add	r1, sp, #180	; 0xb4
 8003da4:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003da6:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003da8:	f00a fd24 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f040 82a7 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003db2:	4620      	mov	r0, r4
 8003db4:	f00b fcf2 	bl	800f79c <HAL_TIM_IC_Init>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	f040 82a1 	bne.w	8004300 <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003dbe:	2704      	movs	r7, #4
 8003dc0:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dc2:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003dc4:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8003dc6:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003dc8:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003dca:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003dce:	f00a ffeb 	bl	800eda8 <HAL_TIM_SlaveConfigSynchro>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f040 8294 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd8:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003dda:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ddc:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003dde:	4620      	mov	r0, r4
 8003de0:	f00c fedc 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 8003de4:	4602      	mov	r2, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	f040 828a 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003dec:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003dee:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8003df2:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003df6:	4620      	mov	r0, r4
 8003df8:	f00c f9a0 	bl	801013c <HAL_TIM_IC_ConfigChannel>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	f040 827f 	bne.w	8004300 <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003e02:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003e04:	463a      	mov	r2, r7
 8003e06:	a931      	add	r1, sp, #196	; 0xc4
 8003e08:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003e0a:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003e0c:	f00c f996 	bl	801013c <HAL_TIM_IC_ConfigChannel>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	f040 8275 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003e16:	a931      	add	r1, sp, #196	; 0xc4
 8003e18:	4620      	mov	r0, r4
 8003e1a:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e1c:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003e1e:	f00c f98d 	bl	801013c <HAL_TIM_IC_ConfigChannel>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f040 826c 	bne.w	8004300 <main+0xbfc>
	huart6.Instance = USART6;
 8003e28:	48c1      	ldr	r0, [pc, #772]	; (8004130 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003e2a:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8003e2c:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003e30:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8003e32:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e34:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003e36:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003e38:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8003e40:	4bbc      	ldr	r3, [pc, #752]	; (8004134 <main+0xa30>)
 8003e42:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003e46:	2310      	movs	r3, #16
 8003e48:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4e:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003e50:	f00e f872 	bl	8011f38 <HAL_UART_Init>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	f040 8253 	bne.w	8004300 <main+0xbfc>
	hdac.Instance = DAC;
 8003e5a:	4cb7      	ldr	r4, [pc, #732]	; (8004138 <main+0xa34>)
 8003e5c:	4bb7      	ldr	r3, [pc, #732]	; (800413c <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8003e5e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8003e62:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8003e64:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8003e66:	f004 f8e1 	bl	800802c <HAL_DAC_Init>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	f040 8247 	bne.w	8004300 <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003e72:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8003e74:	4620      	mov	r0, r4
 8003e76:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e78:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003e7a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8003e7c:	f004 fa32 	bl	80082e4 <HAL_DAC_ConfigChannel>
 8003e80:	4607      	mov	r7, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	f040 823c 	bne.w	8004300 <main+0xbfc>
	MX_FATFS_Init();
 8003e88:	f00f f8ca 	bl	8013020 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8003e8c:	4cac      	ldr	r4, [pc, #688]	; (8004140 <main+0xa3c>)
 8003e8e:	4bad      	ldr	r3, [pc, #692]	; (8004144 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003e90:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 8003e92:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 8003e94:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 8003e96:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e9a:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8003e9c:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8003ea0:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ea2:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 8003ea4:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ea8:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eac:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003eae:	f007 f8dd 	bl	800b06c <HAL_I2C_Init>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	f040 8223 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f007 fc2e 	bl	800b71c <HAL_I2CEx_ConfigAnalogFilter>
 8003ec0:	4601      	mov	r1, r0
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	f040 821c 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f007 fc79 	bl	800b7c0 <HAL_I2CEx_ConfigDigitalFilter>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f040 8215 	bne.w	8004300 <main+0xbfc>
	huart4.Instance = UART4;
 8003ed6:	489c      	ldr	r0, [pc, #624]	; (8004148 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8003ed8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003edc:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ee0:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003ee2:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003ee4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003ee8:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eec:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8003ef0:	4b96      	ldr	r3, [pc, #600]	; (800414c <main+0xa48>)
 8003ef2:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8003ef6:	f00e f81f 	bl	8011f38 <HAL_UART_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2800      	cmp	r0, #0
 8003efe:	f040 81ff 	bne.w	8004300 <main+0xbfc>
	huart5.Instance = UART5;
 8003f02:	4893      	ldr	r0, [pc, #588]	; (8004150 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003f04:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0c:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f10:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f14:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8003f16:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <main+0xa50>)
 8003f18:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8003f1a:	f00e f80d 	bl	8011f38 <HAL_UART_Init>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f040 81ed 	bne.w	8004300 <main+0xbfc>
	huart3.Instance = USART3;
 8003f26:	488c      	ldr	r0, [pc, #560]	; (8004158 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003f28:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 8003f2a:	4b8c      	ldr	r3, [pc, #560]	; (800415c <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 8003f2c:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 8003f2e:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003f30:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003f32:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003f34:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f3c:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8003f40:	f00e f8a8 	bl	8012094 <HAL_MultiProcessor_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f040 81da 	bne.w	8004300 <main+0xbfc>
	hspi4.Instance = SPI4;
 8003f4c:	4884      	ldr	r0, [pc, #528]	; (8004160 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003f4e:	4a85      	ldr	r2, [pc, #532]	; (8004164 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f50:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003f52:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f5a:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8003f62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f66:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003f6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f6e:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8003f70:	2307      	movs	r3, #7
 8003f72:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f74:	2308      	movs	r3, #8
 8003f76:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8003f78:	f009 fcec 	bl	800d954 <HAL_SPI_Init>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	f040 81bf 	bne.w	8004300 <main+0xbfc>
	hspi3.Instance = SPI3;
 8003f82:	4879      	ldr	r0, [pc, #484]	; (8004168 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003f84:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f86:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8a:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003f8c:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8003f8e:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f90:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 8003f92:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003f94:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f98:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f9c:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003fa0:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 8003fa4:	4b71      	ldr	r3, [pc, #452]	; (800416c <main+0xa68>)
 8003fa6:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8003fa8:	f009 fcd4 	bl	800d954 <HAL_SPI_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	f040 81a6 	bne.w	8004300 <main+0xbfc>
	hspi2.Instance = SPI2;
 8003fb4:	486e      	ldr	r0, [pc, #440]	; (8004170 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fb6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80041a0 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fba:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fbc:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003fbe:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fc0:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 8003fc2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fc8:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fcc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003fd0:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003fd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003fd8:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003fda:	2338      	movs	r3, #56	; 0x38
 8003fdc:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fde:	2308      	movs	r3, #8
 8003fe0:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003fe2:	f009 fcb7 	bl	800d954 <HAL_SPI_Init>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f040 818a 	bne.w	8004300 <main+0xbfc>
	hi2c4.Instance = I2C4;
 8003fec:	4c61      	ldr	r4, [pc, #388]	; (8004174 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fee:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <main+0xa74>)
 8003ff2:	4f62      	ldr	r7, [pc, #392]	; (800417c <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8003ff4:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ff6:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ff8:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 8003ffa:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ffe:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004002:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8004004:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004008:	f007 f830 	bl	800b06c <HAL_I2C_Init>
 800400c:	4601      	mov	r1, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	f040 8176 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004014:	4620      	mov	r0, r4
 8004016:	f007 fb81 	bl	800b71c <HAL_I2CEx_ConfigAnalogFilter>
 800401a:	4601      	mov	r1, r0
 800401c:	2800      	cmp	r0, #0
 800401e:	f040 816f 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8004022:	4620      	mov	r0, r4
 8004024:	f007 fbcc 	bl	800b7c0 <HAL_I2CEx_ConfigDigitalFilter>
 8004028:	2800      	cmp	r0, #0
 800402a:	f040 8169 	bne.w	8004300 <main+0xbfc>
	hi2c2.Instance = I2C2;
 800402e:	4c54      	ldr	r4, [pc, #336]	; (8004180 <main+0xa7c>)
 8004030:	4b54      	ldr	r3, [pc, #336]	; (8004184 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004032:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8004034:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8004036:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8004038:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 800403c:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004040:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004044:	4620      	mov	r0, r4
 8004046:	f007 f811 	bl	800b06c <HAL_I2C_Init>
 800404a:	4601      	mov	r1, r0
 800404c:	2800      	cmp	r0, #0
 800404e:	f040 8157 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004052:	4620      	mov	r0, r4
 8004054:	f007 fb62 	bl	800b71c <HAL_I2CEx_ConfigAnalogFilter>
 8004058:	4601      	mov	r1, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	f040 8150 	bne.w	8004300 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004060:	4620      	mov	r0, r4
 8004062:	f007 fbad 	bl	800b7c0 <HAL_I2CEx_ConfigDigitalFilter>
 8004066:	2800      	cmp	r0, #0
 8004068:	f040 814a 	bne.w	8004300 <main+0xbfc>
	htim4.Instance = TIM4;
 800406c:	4c46      	ldr	r4, [pc, #280]	; (8004188 <main+0xa84>)
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004070:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 8004072:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8004074:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004078:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 800407a:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800407c:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800407e:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004080:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004082:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004084:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004086:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800408a:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 800408e:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 8004092:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004096:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800409a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800409e:	4620      	mov	r0, r4
 80040a0:	f00b f912 	bl	800f2c8 <HAL_TIM_Base_Init>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f040 812b 	bne.w	8004300 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80040ae:	a929      	add	r1, sp, #164	; 0xa4
 80040b0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040b2:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80040b4:	f00a fb9e 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f040 8121 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80040be:	4620      	mov	r0, r4
 80040c0:	f00b f9d0 	bl	800f464 <HAL_TIM_OC_Init>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f040 811b 	bne.w	8004300 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80040ca:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040cc:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80040ce:	a910      	add	r1, sp, #64	; 0x40
 80040d0:	482d      	ldr	r0, [pc, #180]	; (8004188 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80040d2:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80040d4:	f00c fd62 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 80040d8:	2800      	cmp	r0, #0
 80040da:	f040 8111 	bne.w	8004300 <main+0xbfc>
	sConfigOC.Pulse = 550;
 80040de:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e2:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e4:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80040e6:	2208      	movs	r2, #8
 80040e8:	a94e      	add	r1, sp, #312	; 0x138
 80040ea:	4827      	ldr	r0, [pc, #156]	; (8004188 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80040ec:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 80040ee:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80040f0:	f00b fc86 	bl	800fa00 <HAL_TIM_OC_ConfigChannel>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f040 8103 	bne.w	8004300 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 80040fa:	4823      	ldr	r0, [pc, #140]	; (8004188 <main+0xa84>)
 80040fc:	f001 ffc0 	bl	8006080 <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 8004100:	4823      	ldr	r0, [pc, #140]	; (8004190 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 8004102:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004106:	4f23      	ldr	r7, [pc, #140]	; (8004194 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8004108:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800410c:	2306      	movs	r3, #6
 800410e:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8004112:	f007 fba5 	bl	800b860 <HAL_IWDG_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2800      	cmp	r0, #0
 800411a:	f040 80f1 	bne.w	8004300 <main+0xbfc>
	htim14.Instance = TIM14;
 800411e:	481e      	ldr	r0, [pc, #120]	; (8004198 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004120:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004124:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <main+0xa98>)
 8004128:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 800412a:	f642 2330 	movw	r3, #10800	; 0x2a30
 800412e:	e039      	b.n	80041a4 <main+0xaa0>
 8004130:	200028f8 	.word	0x200028f8
 8004134:	40011400 	.word	0x40011400
 8004138:	20001f44 	.word	0x20001f44
 800413c:	40007400 	.word	0x40007400
 8004140:	20002258 	.word	0x20002258
 8004144:	40005400 	.word	0x40005400
 8004148:	200027f0 	.word	0x200027f0
 800414c:	40004c00 	.word	0x40004c00
 8004150:	20002874 	.word	0x20002874
 8004154:	40005000 	.word	0x40005000
 8004158:	2000276c 	.word	0x2000276c
 800415c:	40004800 	.word	0x40004800
 8004160:	20002424 	.word	0x20002424
 8004164:	40013400 	.word	0x40013400
 8004168:	200023c0 	.word	0x200023c0
 800416c:	40003c00 	.word	0x40003c00
 8004170:	2000235c 	.word	0x2000235c
 8004174:	200022f0 	.word	0x200022f0
 8004178:	40006000 	.word	0x40006000
 800417c:	20404768 	.word	0x20404768
 8004180:	200022a4 	.word	0x200022a4
 8004184:	40005800 	.word	0x40005800
 8004188:	200025b8 	.word	0x200025b8
 800418c:	40000800 	.word	0x40000800
 8004190:	2000233c 	.word	0x2000233c
 8004194:	40003000 	.word	0x40003000
 8004198:	200024d4 	.word	0x200024d4
 800419c:	40002000 	.word	0x40002000
 80041a0:	40003800 	.word	0x40003800
 80041a4:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80041aa:	f00b f88d 	bl	800f2c8 <HAL_TIM_Base_Init>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	f040 80a6 	bne.w	8004300 <main+0xbfc>
	htim5.Instance = TIM5;
 80041b4:	4f53      	ldr	r7, [pc, #332]	; (8004304 <main+0xc00>)
	htim5.Init.Period = 4;
 80041b6:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 80041b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004338 <main+0xc34>
	htim5.Init.Period = 4;
 80041bc:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 80041c0:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c2:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c4:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80041c6:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 80041c8:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80041cc:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 80041d0:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80041d4:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80041d8:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 80041da:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80041de:	f00b f873 	bl	800f2c8 <HAL_TIM_Base_Init>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f040 808c 	bne.w	8004300 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80041ec:	a925      	add	r1, sp, #148	; 0x94
 80041ee:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f0:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80041f2:	f00a faff 	bl	800e7f4 <HAL_TIM_ConfigClockSource>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2800      	cmp	r0, #0
 80041fa:	f040 8081 	bne.w	8004300 <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80041fe:	4638      	mov	r0, r7
 8004200:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004202:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004204:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8004206:	f00c fcc9 	bl	8010b9c <HAL_TIMEx_MasterConfigSynchronization>
 800420a:	4603      	mov	r3, r0
 800420c:	2800      	cmp	r0, #0
 800420e:	d177      	bne.n	8004300 <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004210:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8004214:	483c      	ldr	r0, [pc, #240]	; (8004308 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004216:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 800421a:	493c      	ldr	r1, [pc, #240]	; (800430c <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 800421c:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8004220:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 8004222:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004226:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8004228:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800422c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004230:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8004234:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004238:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 800423c:	f00d fe7c 	bl	8011f38 <HAL_UART_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2800      	cmp	r0, #0
 8004244:	d15c      	bne.n	8004300 <main+0xbfc>
	huart7.Instance = UART7;
 8004246:	4832      	ldr	r0, [pc, #200]	; (8004310 <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8004248:	4a32      	ldr	r2, [pc, #200]	; (8004314 <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 800424a:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800424c:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800424e:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004250:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 8004252:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004256:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 800425a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800425e:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8004262:	230c      	movs	r3, #12
 8004264:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8004266:	f00d fe67 	bl	8011f38 <HAL_UART_Init>
 800426a:	2800      	cmp	r0, #0
 800426c:	d148      	bne.n	8004300 <main+0xbfc>
	osMutexDef(myMutex01);
 800426e:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8004270:	f7fe fafc 	bl	800286c <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004274:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8004276:	4c28      	ldr	r4, [pc, #160]	; (8004318 <main+0xc14>)
	osMutexDef(myMutex01);
 8004278:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800427c:	f010 f8d2 	bl	8014424 <osMutexCreate>
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <main+0xc18>)
 8004282:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004284:	2101      	movs	r1, #1
 8004286:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004288:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800428c:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 800428e:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004292:	f010 f923 	bl	80144dc <osSemaphoreCreate>
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <main+0xc1c>)
 8004298:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800429a:	2101      	movs	r1, #1
 800429c:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 800429e:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80042a0:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80042a2:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <main+0xc20>)
 80042a6:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80042a8:	f010 f89a 	bl	80143e0 <osTimerCreate>
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <main+0xc24>)
 80042ae:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 80042b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80042b8:	4628      	mov	r0, r5
 80042ba:	4631      	mov	r1, r6
 80042bc:	f010 f988 	bl	80145d0 <osMessageCreate>
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80042c2:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80042c4:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80042c6:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80042c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80042ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042cc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80042d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042d4:	4631      	mov	r1, r6
 80042d6:	a84e      	add	r0, sp, #312	; 0x138
 80042d8:	f010 f848 	bl	801436c <osThreadCreate>
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80042de:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042e0:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80042e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80042ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 80042ee:	4631      	mov	r1, r6
 80042f0:	a855      	add	r0, sp, #340	; 0x154
 80042f2:	f010 f83b 	bl	801436c <osThreadCreate>
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <main+0xc30>)
 80042f8:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80042fa:	f010 f829 	bl	8014350 <osKernelStart>
	while (1) {
 80042fe:	e7fe      	b.n	80042fe <main+0xbfa>
		Error_Handler();
 8004300:	f7ff f984 	bl	800360c <Error_Handler>
 8004304:	20002604 	.word	0x20002604
 8004308:	20002a00 	.word	0x20002a00
 800430c:	40007c00 	.word	0x40007c00
 8004310:	2000297c 	.word	0x2000297c
 8004314:	40007800 	.word	0x40007800
 8004318:	080283b4 	.word	0x080283b4
 800431c:	20002a98 	.word	0x20002a98
 8004320:	20002ab4 	.word	0x20002ab4
 8004324:	080028d1 	.word	0x080028d1
 8004328:	20002aa0 	.word	0x20002aa0
 800432c:	20002a9c 	.word	0x20002a9c
 8004330:	20001e40 	.word	0x20001e40
 8004334:	20001df0 	.word	0x20001df0
 8004338:	40000c00 	.word	0x40000c00

0800433c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 800433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004340:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 8004342:	f01e fb27 	bl	8022994 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8004346:	f00e fe8f 	bl	8013068 <MX_LWIP_Init>
	if ((i=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 800434a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800434e:	4893      	ldr	r0, [pc, #588]	; (800459c <StartDefaultTask+0x260>)
 8004350:	f006 fc46 	bl	800abe0 <HAL_GPIO_ReadPin>
 8004354:	2801      	cmp	r0, #1
 8004356:	f000 8110 	beq.w	800457a <StartDefaultTask+0x23e>
	getboardpcb();		// find our daughterboard
 800435a:	f7ff f8c7 	bl	80034ec <getboardpcb>
	printf("\n\n----------------------------------------------------------------------------\n");
 800435e:	4890      	ldr	r0, [pc, #576]	; (80045a0 <StartDefaultTask+0x264>)
 8004360:	f020 f86c 	bl	802443c <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8004364:	4f8f      	ldr	r7, [pc, #572]	; (80045a4 <StartDefaultTask+0x268>)
 8004366:	4990      	ldr	r1, [pc, #576]	; (80045a8 <StartDefaultTask+0x26c>)
 8004368:	260f      	movs	r6, #15
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f242 752c 	movw	r5, #10028	; 0x272c
 8004370:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8004374:	2400      	movs	r4, #0
 8004376:	c90e      	ldmia	r1, {r1, r2, r3}
 8004378:	9003      	str	r0, [sp, #12]
 800437a:	9400      	str	r4, [sp, #0]
 800437c:	488b      	ldr	r0, [pc, #556]	; (80045ac <StartDefaultTask+0x270>)
 800437e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8004382:	f01f ffbf 	bl	8024304 <iprintf>
	crc_rom();
 8004386:	f7fe facb 	bl	8002920 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 800438a:	4b89      	ldr	r3, [pc, #548]	; (80045b0 <StartDefaultTask+0x274>)
 800438c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004390:	075b      	lsls	r3, r3, #29
 8004392:	d41e      	bmi.n	80043d2 <StartDefaultTask+0x96>
		printf("LAN interface appears disconnected\n\r");
 8004394:	4887      	ldr	r0, [pc, #540]	; (80045b4 <StartDefaultTask+0x278>)
 8004396:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004398:	4d87      	ldr	r5, [pc, #540]	; (80045b8 <StartDefaultTask+0x27c>)
		printf("LAN interface appears disconnected\n\r");
 800439a:	f01f ffb3 	bl	8024304 <iprintf>
			osDelay(50);
 800439e:	2032      	movs	r0, #50	; 0x32
 80043a0:	f010 f816 	bl	80143d0 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80043a4:	2201      	movs	r2, #1
 80043a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043aa:	4628      	mov	r0, r5
 80043ac:	f006 fc2a 	bl	800ac04 <HAL_GPIO_WritePin>
			osDelay(50);
 80043b0:	2032      	movs	r0, #50	; 0x32
 80043b2:	f010 f80d 	bl	80143d0 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80043b6:	2200      	movs	r2, #0
 80043b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043bc:	4628      	mov	r0, r5
 80043be:	f006 fc21 	bl	800ac04 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 80043c2:	3c01      	subs	r4, #1
 80043c4:	d1eb      	bne.n	800439e <StartDefaultTask+0x62>
		printf("************* REBOOTING **************\n");
 80043c6:	487d      	ldr	r0, [pc, #500]	; (80045bc <StartDefaultTask+0x280>)
 80043c8:	f020 f838 	bl	802443c <puts>
		rebootme(0);
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7fe fb47 	bl	8002a60 <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 80043d2:	4b7b      	ldr	r3, [pc, #492]	; (80045c0 <StartDefaultTask+0x284>)
	netif = netif_default;
 80043d4:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8004630 <StartDefaultTask+0x2f4>
	globalfreeze = 0;		// Allow UDP streaming
 80043d8:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 80043da:	4b7a      	ldr	r3, [pc, #488]	; (80045c4 <StartDefaultTask+0x288>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80043dc:	497a      	ldr	r1, [pc, #488]	; (80045c8 <StartDefaultTask+0x28c>)
	netif = netif_default;
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 80043e4:	f015 fb9a 	bl	8019b1c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 80043e8:	4978      	ldr	r1, [pc, #480]	; (80045cc <StartDefaultTask+0x290>)
 80043ea:	f8d8 0000 	ldr.w	r0, [r8]
 80043ee:	f015 fb51 	bl	8019a94 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80043f2:	4b77      	ldr	r3, [pc, #476]	; (80045d0 <StartDefaultTask+0x294>)
 80043f4:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 80043f8:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80043fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 80043fe:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 8004400:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8004404:	f883 6071 	strb.w	r6, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8004408:	f8a3 5084 	strh.w	r5, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 800440c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 800440e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8004410:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8004412:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8004414:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8004418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 800441c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800441e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8004420:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8004424:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8004428:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800442c:	f041 0101 	orr.w	r1, r1, #1
 8004430:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004434:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004438:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800443c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8004440:	4b64      	ldr	r3, [pc, #400]	; (80045d4 <StartDefaultTask+0x298>)
 8004442:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <StartDefaultTask+0x29c>)
 8004444:	601a      	str	r2, [r3, #0]
	initsplat();
 8004446:	f001 f9ab 	bl	80057a0 <initsplat>
	stat = setupneo();
 800444a:	f000 fa47 	bl	80048dc <setupneo>
	if (stat != HAL_OK) {
 800444e:	2800      	cmp	r0, #0
 8004450:	f040 8096 	bne.w	8004580 <StartDefaultTask+0x244>
	printf("Setting up timers\n");
 8004454:	4861      	ldr	r0, [pc, #388]	; (80045dc <StartDefaultTask+0x2a0>)
 8004456:	f01f fff1 	bl	802443c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800445a:	2300      	movs	r3, #0
 800445c:	4860      	ldr	r0, [pc, #384]	; (80045e0 <StartDefaultTask+0x2a4>)
 800445e:	461a      	mov	r2, r3
 8004460:	4619      	mov	r1, r3
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f010 fade 	bl	8014a24 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8004468:	485e      	ldr	r0, [pc, #376]	; (80045e4 <StartDefaultTask+0x2a8>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 800446a:	4c5f      	ldr	r4, [pc, #380]	; (80045e8 <StartDefaultTask+0x2ac>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800446c:	f00a f900 	bl	800e670 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004470:	2200      	movs	r2, #0
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	4611      	mov	r1, r2
 8004476:	f00c f825 	bl	80104c4 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 800447a:	2200      	movs	r2, #0
 800447c:	2104      	movs	r1, #4
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	f00c f820 	bl	80104c4 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8004484:	2200      	movs	r2, #0
 8004486:	210c      	movs	r1, #12
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	f00c f81b 	bl	80104c4 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 800448e:	2100      	movs	r1, #0
 8004490:	4620      	mov	r0, r4
 8004492:	f00c fa65 	bl	8010960 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8004496:	2104      	movs	r1, #4
 8004498:	4620      	mov	r0, r4
 800449a:	f00c fa61 	bl	8010960 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 800449e:	210c      	movs	r1, #12
 80044a0:	4620      	mov	r0, r4
 80044a2:	f00c fa5d 	bl	8010960 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80044a6:	2301      	movs	r3, #1
 80044a8:	4a4a      	ldr	r2, [pc, #296]	; (80045d4 <StartDefaultTask+0x298>)
 80044aa:	2108      	movs	r1, #8
 80044ac:	4620      	mov	r0, r4
 80044ae:	f00c f867 	bl	8010580 <HAL_TIM_IC_Start_DMA>
 80044b2:	4605      	mov	r5, r0
 80044b4:	b128      	cbz	r0, 80044c2 <StartDefaultTask+0x186>
		printf("TIM_Base_Start_DMA err %i", err);
 80044b6:	4601      	mov	r1, r0
 80044b8:	484c      	ldr	r0, [pc, #304]	; (80045ec <StartDefaultTask+0x2b0>)
 80044ba:	f01f ff23 	bl	8024304 <iprintf>
		Error_Handler();
 80044be:	f7ff f8a5 	bl	800360c <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	2201      	movs	r2, #1
 80044c6:	2108      	movs	r1, #8
	myip = ip.addr;
 80044c8:	4c49      	ldr	r4, [pc, #292]	; (80045f0 <StartDefaultTask+0x2b4>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80044ca:	f00b fffb 	bl	80104c4 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80044ce:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 80044d6:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d055      	beq.n	8004588 <StartDefaultTask+0x24c>
	printf("*****************************************\n");
 80044dc:	4845      	ldr	r0, [pc, #276]	; (80045f4 <StartDefaultTask+0x2b8>)
 80044de:	f01f ffad 	bl	802443c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80044e2:	6821      	ldr	r1, [r4, #0]
	uip = locateudp();
 80044e4:	4e44      	ldr	r6, [pc, #272]	; (80045f8 <StartDefaultTask+0x2bc>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80044e6:	0e08      	lsrs	r0, r1, #24
 80044e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80044ec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80044f0:	b2c9      	uxtb	r1, r1
 80044f2:	9000      	str	r0, [sp, #0]
 80044f4:	4841      	ldr	r0, [pc, #260]	; (80045fc <StartDefaultTask+0x2c0>)
 80044f6:	f01f ff05 	bl	8024304 <iprintf>
	printf("*****************************************\n");
 80044fa:	483e      	ldr	r0, [pc, #248]	; (80045f4 <StartDefaultTask+0x2b8>)
 80044fc:	f01f ff9e 	bl	802443c <puts>
	while (lptask_init_done == 0)
 8004500:	4c3f      	ldr	r4, [pc, #252]	; (8004600 <StartDefaultTask+0x2c4>)
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8004502:	f002 ff4d 	bl	80073a0 <initialapisn>
	osDelay(2200);
 8004506:	f640 0098 	movw	r0, #2200	; 0x898
 800450a:	f00f ff61 	bl	80143d0 <osDelay>
	printf("Starting httpd web server\n");
 800450e:	483d      	ldr	r0, [pc, #244]	; (8004604 <StartDefaultTask+0x2c8>)
 8004510:	f01f ff94 	bl	802443c <puts>
	httpd_init();		// start the www server
 8004514:	f013 fd70 	bl	8017ff8 <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8004518:	f002 ff12 	bl	8007340 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 800451c:	483a      	ldr	r0, [pc, #232]	; (8004608 <StartDefaultTask+0x2cc>)
 800451e:	f01f ff8d 	bl	802443c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004522:	2008      	movs	r0, #8
 8004524:	4a39      	ldr	r2, [pc, #228]	; (800460c <StartDefaultTask+0x2d0>)
 8004526:	4629      	mov	r1, r5
 8004528:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800452c:	9000      	str	r0, [sp, #0]
 800452e:	4838      	ldr	r0, [pc, #224]	; (8004610 <StartDefaultTask+0x2d4>)
 8004530:	f003 fda0 	bl	8008074 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8004534:	4837      	ldr	r0, [pc, #220]	; (8004614 <StartDefaultTask+0x2d8>)
 8004536:	f009 ffe3 	bl	800e500 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800453a:	f011 fbbf 	bl	8015cbc <xTaskGetCurrentTaskHandle>
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <StartDefaultTask+0x2dc>)
 8004540:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8004542:	f002 fbb1 	bl	8006ca8 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8004546:	4b35      	ldr	r3, [pc, #212]	; (800461c <StartDefaultTask+0x2e0>)
 8004548:	2201      	movs	r2, #1
	uip = locateudp();
 800454a:	6030      	str	r0, [r6, #0]
	printf("Waiting for lptask to start\n");
 800454c:	4834      	ldr	r0, [pc, #208]	; (8004620 <StartDefaultTask+0x2e4>)
	main_init_done = 1; // let lptask now main has initialised
 800454e:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8004550:	f01f ff74 	bl	802443c <puts>
	while (lptask_init_done == 0)
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	b92b      	cbnz	r3, 8004564 <StartDefaultTask+0x228>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8004558:	2064      	movs	r0, #100	; 0x64
 800455a:	f00f ff39 	bl	80143d0 <osDelay>
	while (lptask_init_done == 0)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f9      	beq.n	8004558 <StartDefaultTask+0x21c>
	startadc();		// start the ADC DMA loop
 8004564:	f7fc fab6 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 8004568:	6830      	ldr	r0, [r6, #0]
 800456a:	f002 fbd3 	bl	8006d14 <startudp>
		printf("UDP stream exited!!!\n\r");
 800456e:	482d      	ldr	r0, [pc, #180]	; (8004624 <StartDefaultTask+0x2e8>)
 8004570:	f01f fec8 	bl	8024304 <iprintf>
		rebootme(4);
 8004574:	2004      	movs	r0, #4
 8004576:	f7fe fa73 	bl	8002a60 <rebootme>
			fixboot();	// zzz reset the boot vectors
 800457a:	f7fc fb35 	bl	8000be8 <fixboot>
 800457e:	e6ec      	b.n	800435a <StartDefaultTask+0x1e>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8004580:	4829      	ldr	r0, [pc, #164]	; (8004628 <StartDefaultTask+0x2ec>)
 8004582:	f01f febf 	bl	8024304 <iprintf>
 8004586:	e765      	b.n	8004454 <StartDefaultTask+0x118>
		printf("***** DHCP Failed ******\n");
 8004588:	4828      	ldr	r0, [pc, #160]	; (800462c <StartDefaultTask+0x2f0>)
 800458a:	f01f ff57 	bl	802443c <puts>
		osDelay(200);
 800458e:	20c8      	movs	r0, #200	; 0xc8
 8004590:	f00f ff1e 	bl	80143d0 <osDelay>
		rebootme(1);
 8004594:	2001      	movs	r0, #1
 8004596:	f7fe fa63 	bl	8002a60 <rebootme>
 800459a:	bf00      	nop
 800459c:	40020800 	.word	0x40020800
 80045a0:	08029c3c 	.word	0x08029c3c
 80045a4:	20001df4 	.word	0x20001df4
 80045a8:	1ff0f000 	.word	0x1ff0f000
 80045ac:	08029c8c 	.word	0x08029c8c
 80045b0:	20002f24 	.word	0x20002f24
 80045b4:	08029ccc 	.word	0x08029ccc
 80045b8:	40020c00 	.word	0x40020c00
 80045bc:	08029cf4 	.word	0x08029cf4
 80045c0:	20002e4c 	.word	0x20002e4c
 80045c4:	2002dbbc 	.word	0x2002dbbc
 80045c8:	08002a69 	.word	0x08002a69
 80045cc:	080028c5 	.word	0x080028c5
 80045d0:	20002ca4 	.word	0x20002ca4
 80045d4:	20000768 	.word	0x20000768
 80045d8:	02a62b1c 	.word	0x02a62b1c
 80045dc:	08029d3c 	.word	0x08029d3c
 80045e0:	20002ab4 	.word	0x20002ab4
 80045e4:	20002650 	.word	0x20002650
 80045e8:	20002520 	.word	0x20002520
 80045ec:	08029d50 	.word	0x08029d50
 80045f0:	20002aa4 	.word	0x20002aa4
 80045f4:	08029d88 	.word	0x08029d88
 80045f8:	20002ac4 	.word	0x20002ac4
 80045fc:	08029db4 	.word	0x08029db4
 8004600:	20002a90 	.word	0x20002a90
 8004604:	08029ddc 	.word	0x08029ddc
 8004608:	08029df8 	.word	0x08029df8
 800460c:	08029e48 	.word	0x08029e48
 8004610:	20001f44 	.word	0x20001f44
 8004614:	2000269c 	.word	0x2000269c
 8004618:	200007fc 	.word	0x200007fc
 800461c:	20002a94 	.word	0x20002a94
 8004620:	08029e14 	.word	0x08029e14
 8004624:	08029e30 	.word	0x08029e30
 8004628:	08029d1c 	.word	0x08029d1c
 800462c:	08029d6c 	.word	0x08029d6c
 8004630:	20002aa8 	.word	0x20002aa8

08004634 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004638:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 800463a:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 800463c:	b083      	sub	sp, #12
 800463e:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8004640:	d009      	beq.n	8004656 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8004642:	230a      	movs	r3, #10
 8004644:	2201      	movs	r2, #1
 8004646:	a901      	add	r1, sp, #4
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <__io_putchar+0x34>)
 800464a:	f00d fbcd 	bl	8011de8 <HAL_UART_Transmit>

	return ch;
	}
}
 800464e:	9801      	ldr	r0, [sp, #4]
 8004650:	b003      	add	sp, #12
 8004652:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8004656:	4603      	mov	r3, r0
 8004658:	2202      	movs	r2, #2
 800465a:	4905      	ldr	r1, [pc, #20]	; (8004670 <__io_putchar+0x38>)
 800465c:	4803      	ldr	r0, [pc, #12]	; (800466c <__io_putchar+0x34>)
 800465e:	f00d fbc3 	bl	8011de8 <HAL_UART_Transmit>
}
 8004662:	9801      	ldr	r0, [sp, #4]
 8004664:	b003      	add	sp, #12
 8004666:	f85d fb04 	ldr.w	pc, [sp], #4
 800466a:	bf00      	nop
 800466c:	200026e8 	.word	0x200026e8
 8004670:	08028c14 	.word	0x08028c14

08004674 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <calcepoch32+0x40>)
 8004676:	4810      	ldr	r0, [pc, #64]	; (80046b8 <calcepoch32+0x44>)
 8004678:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 800467a:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 800467c:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8004680:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004682:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8004684:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8004686:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004688:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800468c:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 800468e:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004690:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8004692:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8004694:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8004696:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8004698:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 800469a:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 800469e:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 80046a0:	f01e ff72 	bl	8023588 <mktime>
 80046a4:	4a05      	ldr	r2, [pc, #20]	; (80046bc <calcepoch32+0x48>)
 80046a6:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80046a8:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80046ac:	e9c2 3100 	strd	r3, r1, [r2]
}
 80046b0:	4418      	add	r0, r3
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	20002ca4 	.word	0x20002ca4
 80046b8:	20002c78 	.word	0x20002c78
 80046bc:	20002b58 	.word	0x20002b58

080046c0 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 80046c6:	b33a      	cbz	r2, 8004718 <printPacket+0x58>
 80046c8:	4607      	mov	r7, r0
 80046ca:	4616      	mov	r6, r2
 80046cc:	1e4d      	subs	r5, r1, #1
 80046ce:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 80046d0:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004728 <printPacket+0x68>
 80046d4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800472c <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 80046d8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004730 <printPacket+0x70>
 80046dc:	e013      	b.n	8004706 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 80046de:	f8da 1000 	ldr.w	r1, [sl]
 80046e2:	1c4b      	adds	r3, r1, #1
 80046e4:	f8ca 3000 	str.w	r3, [sl]
 80046e8:	f01f fe0c 	bl	8024304 <iprintf>
	for (byte i = 0; i < len; i++) {
 80046ec:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 80046ee:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80046f2:	4641      	mov	r1, r8
 80046f4:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 80046f6:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 80046f8:	f01f ffee 	bl	80246d8 <siprintf>
		printf(temp);
 80046fc:	a801      	add	r0, sp, #4
 80046fe:	f01f fe01 	bl	8024304 <iprintf>
	for (byte i = 0; i < len; i++) {
 8004702:	42a6      	cmp	r6, r4
 8004704:	d008      	beq.n	8004718 <printPacket+0x58>
		if (i % 16 == 0) {
 8004706:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 800470a:	463a      	mov	r2, r7
 800470c:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 800470e:	d0e6      	beq.n	80046de <printPacket+0x1e>
			printf(" ");
 8004710:	2020      	movs	r0, #32
 8004712:	f01f fe0f 	bl	8024334 <putchar>
 8004716:	e7e9      	b.n	80046ec <printPacket+0x2c>
	}
	printf("\n\r");
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <printPacket+0x64>)
 800471a:	f01f fdf3 	bl	8024304 <iprintf>
}
 800471e:	b002      	add	sp, #8
 8004720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004724:	08029e44 	.word	0x08029e44
 8004728:	20002b4c 	.word	0x20002b4c
 800472c:	0802a548 	.word	0x0802a548
 8004730:	0802a554 	.word	0x0802a554

08004734 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8004734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004738:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80047d8 <disableNmea+0xa4>
void disableNmea() {
 800473c:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 800473e:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004740:	4f24      	ldr	r7, [pc, #144]	; (80047d4 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004742:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8004746:	f10d 0904 	add.w	r9, sp, #4
 800474a:	ad04      	add	r5, sp, #16
 800474c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004750:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004754:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004758:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800475c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004760:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004764:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8004768:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800476c:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8004770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004774:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8004778:	f829 2b02 	strh.w	r2, [r9], #2
 800477c:	0c12      	lsrs	r2, r2, #16
 800477e:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8004782:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8004786:	7829      	ldrb	r1, [r5, #0]
 8004788:	786a      	ldrb	r2, [r5, #1]
 800478a:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 800478e:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8004790:	f88d 100a 	strb.w	r1, [sp, #10]
 8004794:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8004798:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 800479c:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 80047a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a4:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 80047a6:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 80047a8:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 80047ac:	44e6      	add	lr, ip
 80047ae:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 80047b2:	d1f5      	bne.n	80047a0 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80047b4:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80047b6:	2364      	movs	r3, #100	; 0x64
 80047b8:	220b      	movs	r2, #11
 80047ba:	a901      	add	r1, sp, #4
 80047bc:	4638      	mov	r0, r7
 80047be:	f88d c00d 	strb.w	ip, [sp, #13]
 80047c2:	f88d e00e 	strb.w	lr, [sp, #14]
 80047c6:	f00d fb0f 	bl	8011de8 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80047ca:	4545      	cmp	r5, r8
 80047cc:	d1d9      	bne.n	8004782 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 80047ce:	b00f      	add	sp, #60	; 0x3c
 80047d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d4:	20002bec 	.word	0x20002bec
 80047d8:	0802841c 	.word	0x0802841c

080047dc <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80047dc:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 80047de:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80047e0:	db1c      	blt.n	800481c <isGoodChecksum+0x40>
 80047e2:	4910      	ldr	r1, [pc, #64]	; (8004824 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 80047e4:	2200      	movs	r2, #0
 80047e6:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 80047ea:	4613      	mov	r3, r2
 80047ec:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 80047ee:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80047f2:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80047f4:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 80047f6:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 80047f8:	441a      	add	r2, r3
 80047fa:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80047fc:	d1f7      	bne.n	80047ee <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 80047fe:	490a      	ldr	r1, [pc, #40]	; (8004828 <isGoodChecksum+0x4c>)
 8004800:	4408      	add	r0, r1
 8004802:	7981      	ldrb	r1, [r0, #6]
 8004804:	4299      	cmp	r1, r3
 8004806:	d002      	beq.n	800480e <isGoodChecksum+0x32>
 8004808:	2000      	movs	r0, #0
}
 800480a:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800480e:	79c0      	ldrb	r0, [r0, #7]
 8004810:	1a80      	subs	r0, r0, r2
 8004812:	fab0 f080 	clz	r0, r0
 8004816:	0940      	lsrs	r0, r0, #5
}
 8004818:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 800481c:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 800481e:	4613      	mov	r3, r2
 8004820:	e7ed      	b.n	80047fe <isGoodChecksum+0x22>
 8004822:	bf00      	nop
 8004824:	20002acd 	.word	0x20002acd
 8004828:	20002acc 	.word	0x20002acc

0800482c <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 800482c:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 800482e:	4c25      	ldr	r4, [pc, #148]	; (80048c4 <IsPacketReady+0x98>)
 8004830:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8004832:	2b03      	cmp	r3, #3
 8004834:	d814      	bhi.n	8004860 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8004836:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <IsPacketReady+0x9c>)
 8004838:	4619      	mov	r1, r3
 800483a:	5cd2      	ldrb	r2, [r2, r3]
 800483c:	4282      	cmp	r2, r0
 800483e:	d00a      	beq.n	8004856 <IsPacketReady+0x2a>
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <IsPacketReady+0xa0>)
 8004842:	5cd2      	ldrb	r2, [r2, r3]
 8004844:	4282      	cmp	r2, r0
 8004846:	d006      	beq.n	8004856 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004848:	2200      	movs	r2, #0
 800484a:	4921      	ldr	r1, [pc, #132]	; (80048d0 <IsPacketReady+0xa4>)
			p = 0;
 800484c:	4613      	mov	r3, r2
			len = 0;
 800484e:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8004850:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8004852:	70e3      	strb	r3, [r4, #3]
}
 8004854:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8004856:	3301      	adds	r3, #1
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <IsPacketReady+0xa8>)
 800485a:	b2db      	uxtb	r3, r3
 800485c:	5450      	strb	r0, [r2, r1]
 800485e:	e7f7      	b.n	8004850 <IsPacketReady+0x24>
		if (p < 6) {
 8004860:	2b05      	cmp	r3, #5
 8004862:	d917      	bls.n	8004894 <IsPacketReady+0x68>
		if (p == 6) {
 8004864:	2b06      	cmp	r3, #6
 8004866:	d01b      	beq.n	80048a0 <IsPacketReady+0x74>
 8004868:	4d19      	ldr	r5, [pc, #100]	; (80048d0 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 800486a:	682a      	ldr	r2, [r5, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	3207      	adds	r2, #7
 8004870:	429a      	cmp	r2, r3
 8004872:	dbed      	blt.n	8004850 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004874:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8004876:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8004878:	4e16      	ldr	r6, [pc, #88]	; (80048d4 <IsPacketReady+0xa8>)
 800487a:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 800487c:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 800487e:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8004880:	4293      	cmp	r3, r2
 8004882:	d1e5      	bne.n	8004850 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8004884:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8004886:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8004888:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 800488a:	f7ff ffa7 	bl	80047dc <isGoodChecksum>
 800488e:	b998      	cbnz	r0, 80048b8 <IsPacketReady+0x8c>
				p = 0;
 8004890:	4603      	mov	r3, r0
 8004892:	e7dd      	b.n	8004850 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004894:	490f      	ldr	r1, [pc, #60]	; (80048d4 <IsPacketReady+0xa8>)
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	54c8      	strb	r0, [r1, r3]
			return (0);
 800489a:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 800489c:	70e2      	strb	r2, [r4, #3]
}
 800489e:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 80048a0:	490c      	ldr	r1, [pc, #48]	; (80048d4 <IsPacketReady+0xa8>)
 80048a2:	794d      	ldrb	r5, [r1, #5]
 80048a4:	790a      	ldrb	r2, [r1, #4]
 80048a6:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80048aa:	4d09      	ldr	r5, [pc, #36]	; (80048d0 <IsPacketReady+0xa4>)
 80048ac:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 80048ae:	682a      	ldr	r2, [r5, #0]
 80048b0:	2a7f      	cmp	r2, #127	; 0x7f
 80048b2:	d9da      	bls.n	800486a <IsPacketReady+0x3e>
				return 0;
 80048b4:	2000      	movs	r0, #0
}
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <IsPacketReady+0xac>)
 80048ba:	2201      	movs	r2, #1
					return len;
 80048bc:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	bf00      	nop
 80048c4:	2000025c 	.word	0x2000025c
 80048c8:	0802a744 	.word	0x0802a744
 80048cc:	0802a748 	.word	0x0802a748
 80048d0:	20002c70 	.word	0x20002c70
 80048d4:	20002acc 	.word	0x20002acc
 80048d8:	20002b64 	.word	0x20002b64

080048dc <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80048dc:	4b74      	ldr	r3, [pc, #464]	; (8004ab0 <setupneo+0x1d4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 80048e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e4:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 80048e6:	f000 80ba 	beq.w	8004a5e <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 80048ea:	2284      	movs	r2, #132	; 0x84
 80048ec:	4971      	ldr	r1, [pc, #452]	; (8004ab4 <setupneo+0x1d8>)
 80048ee:	4872      	ldr	r0, [pc, #456]	; (8004ab8 <setupneo+0x1dc>)
 80048f0:	f01e fd42 	bl	8023378 <memcpy>
		gpsuarttx = huart6;
 80048f4:	2284      	movs	r2, #132	; 0x84
 80048f6:	496f      	ldr	r1, [pc, #444]	; (8004ab4 <setupneo+0x1d8>)
 80048f8:	4870      	ldr	r0, [pc, #448]	; (8004abc <setupneo+0x1e0>)
 80048fa:	f01e fd3d 	bl	8023378 <memcpy>
		GPSUARTRX = USART6;
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <setupneo+0x1e4>)
 8004900:	4a70      	ldr	r2, [pc, #448]	; (8004ac4 <setupneo+0x1e8>)
 8004902:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004904:	2201      	movs	r2, #1
 8004906:	4970      	ldr	r1, [pc, #448]	; (8004ac8 <setupneo+0x1ec>)
 8004908:	486b      	ldr	r0, [pc, #428]	; (8004ab8 <setupneo+0x1dc>)
 800490a:	f00d fd05 	bl	8012318 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 800490e:	4607      	mov	r7, r0
 8004910:	2800      	cmp	r0, #0
 8004912:	f040 809d 	bne.w	8004a50 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8004916:	f7ff ff0d 	bl	8004734 <disableNmea>
	osDelay(500);
 800491a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800491e:	f00f fd57 	bl	80143d0 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <setupneo+0x1f0>)
 8004924:	ae01      	add	r6, sp, #4
 8004926:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800492a:	4d69      	ldr	r5, [pc, #420]	; (8004ad0 <setupneo+0x1f4>)
 800492c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004930:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8004934:	4867      	ldr	r0, [pc, #412]	; (8004ad4 <setupneo+0x1f8>)
 8004936:	f01f fd81 	bl	802443c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800493a:	2364      	movs	r3, #100	; 0x64
 800493c:	2208      	movs	r2, #8
 800493e:	4631      	mov	r1, r6
 8004940:	485e      	ldr	r0, [pc, #376]	; (8004abc <setupneo+0x1e0>)
 8004942:	f00d fa51 	bl	8011de8 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004946:	e004      	b.n	8004952 <setupneo+0x76>
		i++;
		osDelay(1);
 8004948:	f00f fd42 	bl	80143d0 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 800494c:	3c01      	subs	r4, #1
 800494e:	f000 80a5 	beq.w	8004a9c <setupneo+0x1c0>
 8004952:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8004954:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f6      	beq.n	8004948 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 800495a:	4c5f      	ldr	r4, [pc, #380]	; (8004ad8 <setupneo+0x1fc>)
 800495c:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 800495e:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004966:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800496a:	2364      	movs	r3, #100	; 0x64
 800496c:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 800496e:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004972:	4852      	ldr	r0, [pc, #328]	; (8004abc <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004974:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004978:	4631      	mov	r1, r6
 800497a:	f00d fa35 	bl	8011de8 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 800497e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004982:	f00f fd25 	bl	80143d0 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8004986:	4855      	ldr	r0, [pc, #340]	; (8004adc <setupneo+0x200>)
 8004988:	f01f fcbc 	bl	8024304 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 800498c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8004990:	46b4      	mov	ip, r6
 8004992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004994:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004998:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 800499a:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800499e:	220e      	movs	r2, #14
 80049a0:	2364      	movs	r3, #100	; 0x64
 80049a2:	4846      	ldr	r0, [pc, #280]	; (8004abc <setupneo+0x1e0>)
 80049a4:	f00d fa20 	bl	8011de8 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 80049a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ac:	f00f fd10 	bl	80143d0 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 80049b0:	484b      	ldr	r0, [pc, #300]	; (8004ae0 <setupneo+0x204>)
 80049b2:	f01f fd43 	bl	802443c <puts>
	byte packet[] = { 0xB5, // sync char 1
 80049b6:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 80049ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80049be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80049c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80049ca:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 80049cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80049d0:	4631      	mov	r1, r6
 80049d2:	222c      	movs	r2, #44	; 0x2c
 80049d4:	4839      	ldr	r0, [pc, #228]	; (8004abc <setupneo+0x1e0>)
 80049d6:	f00d fa07 	bl	8011de8 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 80049da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049de:	f00f fcf7 	bl	80143d0 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 80049e2:	4840      	ldr	r0, [pc, #256]	; (8004ae4 <setupneo+0x208>)
 80049e4:	f01f fc8e 	bl	8024304 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 80049e8:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 80049ec:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80049ee:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80049f0:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 80049f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80049f4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80049f8:	f82c 2b02 	strh.w	r2, [ip], #2
 80049fc:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80049fe:	4631      	mov	r1, r6
 8004a00:	482e      	ldr	r0, [pc, #184]	; (8004abc <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8004a02:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004a06:	220b      	movs	r2, #11
 8004a08:	f00d f9ee 	bl	8011de8 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8004a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a10:	f00f fcde 	bl	80143d0 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004a14:	46b4      	mov	ip, r6
 8004a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004a22:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004a26:	2364      	movs	r3, #100	; 0x64
 8004a28:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004a2a:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4822      	ldr	r0, [pc, #136]	; (8004abc <setupneo+0x1e0>)
 8004a32:	f00d f9d9 	bl	8011de8 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8004a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a3a:	f00f fcc9 	bl	80143d0 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <setupneo+0x20c>)
 8004a40:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8004a42:	482a      	ldr	r0, [pc, #168]	; (8004aec <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004a44:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8004a46:	f01f fc5d 	bl	8024304 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	b00d      	add	sp, #52	; 0x34
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004a50:	4601      	mov	r1, r0
 8004a52:	4827      	ldr	r0, [pc, #156]	; (8004af0 <setupneo+0x214>)
 8004a54:	f01f fc56 	bl	8024304 <iprintf>
}
 8004a58:	4638      	mov	r0, r7
 8004a5a:	b00d      	add	sp, #52	; 0x34
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8004a5e:	4c25      	ldr	r4, [pc, #148]	; (8004af4 <setupneo+0x218>)
 8004a60:	4620      	mov	r0, r4
 8004a62:	f00c fb55 	bl	8011110 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8004a66:	4620      	mov	r0, r4
 8004a68:	f00c f9ba 	bl	8010de0 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8004a6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8004a70:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8004a72:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8004a74:	f00d fa60 	bl	8011f38 <HAL_UART_Init>
 8004a78:	b968      	cbnz	r0, 8004a96 <setupneo+0x1ba>
		gpsuartrx = huart8;
 8004a7a:	2284      	movs	r2, #132	; 0x84
 8004a7c:	491e      	ldr	r1, [pc, #120]	; (8004af8 <setupneo+0x21c>)
 8004a7e:	480e      	ldr	r0, [pc, #56]	; (8004ab8 <setupneo+0x1dc>)
 8004a80:	f01e fc7a 	bl	8023378 <memcpy>
		gpsuarttx = huart7;
 8004a84:	2284      	movs	r2, #132	; 0x84
 8004a86:	491b      	ldr	r1, [pc, #108]	; (8004af4 <setupneo+0x218>)
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <setupneo+0x1e0>)
 8004a8a:	f01e fc75 	bl	8023378 <memcpy>
		GPSUARTRX = UART8;
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <setupneo+0x1e4>)
 8004a90:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <setupneo+0x220>)
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e736      	b.n	8004904 <setupneo+0x28>
			Error_Handler();
 8004a96:	f7fe fdb9 	bl	800360c <Error_Handler>
 8004a9a:	e7ee      	b.n	8004a7a <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8004a9c:	4818      	ldr	r0, [pc, #96]	; (8004b00 <setupneo+0x224>)
 8004a9e:	f01f fccd 	bl	802443c <puts>
		osDelay(200);
 8004aa2:	20c8      	movs	r0, #200	; 0xc8
 8004aa4:	f00f fc94 	bl	80143d0 <osDelay>
		rebootme(2);
 8004aa8:	2002      	movs	r0, #2
 8004aaa:	f7fd ffd9 	bl	8002a60 <rebootme>
 8004aae:	e754      	b.n	800495a <setupneo+0x7e>
 8004ab0:	20001df4 	.word	0x20001df4
 8004ab4:	200028f8 	.word	0x200028f8
 8004ab8:	20002b68 	.word	0x20002b68
 8004abc:	20002bec 	.word	0x20002bec
 8004ac0:	20002ac8 	.word	0x20002ac8
 8004ac4:	40011400 	.word	0x40011400
 8004ac8:	20002c9c 	.word	0x20002c9c
 8004acc:	08028414 	.word	0x08028414
 8004ad0:	20002c74 	.word	0x20002c74
 8004ad4:	0802a55c 	.word	0x0802a55c
 8004ad8:	080283fc 	.word	0x080283fc
 8004adc:	0802a59c 	.word	0x0802a59c
 8004ae0:	0802a5cc 	.word	0x0802a5cc
 8004ae4:	0802a5f4 	.word	0x0802a5f4
 8004ae8:	20002ca4 	.word	0x20002ca4
 8004aec:	0802a618 	.word	0x0802a618
 8004af0:	0802a574 	.word	0x0802a574
 8004af4:	2000297c 	.word	0x2000297c
 8004af8:	20002a00 	.word	0x20002a00
 8004afc:	40007c00 	.word	0x40007c00
 8004b00:	0802a640 	.word	0x0802a640

08004b04 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8004b04:	4a2a      	ldr	r2, [pc, #168]	; (8004bb0 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004b06:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6803      	ldr	r3, [r0, #0]
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d011      	beq.n	8004b34 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004b10:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <HAL_UART_RxCpltCallback+0xb0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d024      	beq.n	8004b60 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8004b16:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <HAL_UART_RxCpltCallback+0xb4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d025      	beq.n	8004b68 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_UART_RxCpltCallback+0xb8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8004b22:	4827      	ldr	r0, [pc, #156]	; (8004bc0 <HAL_UART_RxCpltCallback+0xbc>)
}
 8004b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8004b28:	f01f bc88 	b.w	802443c <puts>
}
 8004b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8004b30:	f7fe bcec 	b.w	800350c <uart2_rxdone>
		data = rxdatabuf[0];
 8004b34:	4923      	ldr	r1, [pc, #140]	; (8004bc4 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8004b36:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8004b3a:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8004b3c:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8004b3e:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8004b40:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8004b42:	f7ff fe73 	bl	800482c <IsPacketReady>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	dd1c      	ble.n	8004b84 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8004b4a:	2854      	cmp	r0, #84	; 0x54
 8004b4c:	d01b      	beq.n	8004b86 <HAL_UART_RxCpltCallback+0x82>
 8004b4e:	2864      	cmp	r0, #100	; 0x64
 8004b50:	d00e      	beq.n	8004b70 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004b52:	b2c2      	uxtb	r2, r0
 8004b54:	491e      	ldr	r1, [pc, #120]	; (8004bd0 <HAL_UART_RxCpltCallback+0xcc>)
 8004b56:	481f      	ldr	r0, [pc, #124]	; (8004bd4 <HAL_UART_RxCpltCallback+0xd0>)
}
 8004b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004b5c:	f7ff bdb0 	b.w	80046c0 <printPacket>
}
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 8004b64:	f7fc bd9e 	b.w	80016a4 <uart5_rxdone>
}
 8004b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8004b6c:	f000 bd0e 	b.w	800558c <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_UART_RxCpltCallback+0xd4>)
 8004b72:	481a      	ldr	r0, [pc, #104]	; (8004bdc <HAL_UART_RxCpltCallback+0xd8>)
 8004b74:	f1a3 020a 	sub.w	r2, r3, #10
 8004b78:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8004b7c:	f01f fbc2 	bl	8024304 <iprintf>
				neoispresent = 1;
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_UART_RxCpltCallback+0xdc>)
 8004b82:	601c      	str	r4, [r3, #0]
}
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8004b86:	4d17      	ldr	r5, [pc, #92]	; (8004be4 <HAL_UART_RxCpltCallback+0xe0>)
 8004b88:	224e      	movs	r2, #78	; 0x4e
 8004b8a:	4917      	ldr	r1, [pc, #92]	; (8004be8 <HAL_UART_RxCpltCallback+0xe4>)
 8004b8c:	1d28      	adds	r0, r5, #4
 8004b8e:	f01e fbf3 	bl	8023378 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8004b92:	f7ff fd6f 	bl	8004674 <calcepoch32>
 8004b96:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8004b9a:	7e6b      	ldrb	r3, [r5, #25]
 8004b9c:	f013 0301 	ands.w	r3, r3, #1
 8004ba0:	d002      	beq.n	8004ba8 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_UART_RxCpltCallback+0xe8>)
 8004ba4:	701c      	strb	r4, [r3, #0]
}
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8004ba8:	4a10      	ldr	r2, [pc, #64]	; (8004bec <HAL_UART_RxCpltCallback+0xe8>)
 8004baa:	7013      	strb	r3, [r2, #0]
}
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	20002ac8 	.word	0x20002ac8
 8004bb4:	40005000 	.word	0x40005000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	0802a6b4 	.word	0x0802a6b4
 8004bc4:	20002c9c 	.word	0x20002c9c
 8004bc8:	20002b50 	.word	0x20002b50
 8004bcc:	20002b60 	.word	0x20002b60
 8004bd0:	20002acc 	.word	0x20002acc
 8004bd4:	0802a698 	.word	0x0802a698
 8004bd8:	20002afa 	.word	0x20002afa
 8004bdc:	0802a66c 	.word	0x0802a66c
 8004be0:	20002c74 	.word	0x20002c74
 8004be4:	20002ca4 	.word	0x20002ca4
 8004be8:	20002ad2 	.word	0x20002ad2
 8004bec:	20002e50 	.word	0x20002e50

08004bf0 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004bf0:	4926      	ldr	r1, [pc, #152]	; (8004c8c <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004bf2:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004bf6:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004bf8:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004bfa:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004bfc:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004bfe:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004c00:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004c02:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004c04:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004c06:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004c08:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004c0a:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004c0c:	d02b      	beq.n	8004c66 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8004c0e:	4920      	ldr	r1, [pc, #128]	; (8004c90 <HAL_UART_ErrorCallback+0xa0>)
 8004c10:	428b      	cmp	r3, r1
 8004c12:	d00f      	beq.n	8004c34 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8004c14:	491f      	ldr	r1, [pc, #124]	; (8004c94 <HAL_UART_ErrorCallback+0xa4>)
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d000      	beq.n	8004c1c <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8004c1c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004c20:	481d      	ldr	r0, [pc, #116]	; (8004c98 <HAL_UART_ErrorCallback+0xa8>)
 8004c22:	f01f fb6f 	bl	8024304 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8004c2c:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8004c2e:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004c30:	621d      	str	r5, [r3, #32]
}
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_UART_ErrorCallback+0xac>)
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	d1ee      	bne.n	8004c1a <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8004c3c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <HAL_UART_ErrorCallback+0xb0>)
 8004c42:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	0710      	lsls	r0, r2, #28
 8004c48:	d500      	bpl.n	8004c4c <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8004c4a:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_UART_ErrorCallback+0xa0>)
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	0751      	lsls	r1, r2, #29
 8004c52:	d501      	bpl.n	8004c58 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8004c54:	2204      	movs	r2, #4
 8004c56:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_UART_ErrorCallback+0xa0>)
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	0792      	lsls	r2, r2, #30
 8004c5e:	d5dc      	bpl.n	8004c1a <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8004c60:	2202      	movs	r2, #2
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8004c66:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004c6a:	480e      	ldr	r0, [pc, #56]	; (8004ca4 <HAL_UART_ErrorCallback+0xb4>)
 8004c6c:	f01f fb4a 	bl	8024304 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004c70:	462a      	mov	r2, r5
 8004c72:	490d      	ldr	r1, [pc, #52]	; (8004ca8 <HAL_UART_ErrorCallback+0xb8>)
 8004c74:	480d      	ldr	r0, [pc, #52]	; (8004cac <HAL_UART_ErrorCallback+0xbc>)
 8004c76:	f00d fb4f 	bl	8012318 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 8004c7a:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8004c7e:	d0cc      	beq.n	8004c1a <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004c80:	4601      	mov	r1, r0
 8004c82:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <HAL_UART_ErrorCallback+0xc0>)
}
 8004c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004c88:	f01f bb3c 	b.w	8024304 <iprintf>
 8004c8c:	20002ac8 	.word	0x20002ac8
 8004c90:	40005000 	.word	0x40005000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	0802a718 	.word	0x0802a718
 8004c9c:	20001768 	.word	0x20001768
 8004ca0:	200017f8 	.word	0x200017f8
 8004ca4:	0802a6cc 	.word	0x0802a6cc
 8004ca8:	20002c9c 	.word	0x20002c9c
 8004cac:	20002b68 	.word	0x20002b68
 8004cb0:	0802a6ec 	.word	0x0802a6ec
 8004cb4:	ffffffff 	.word	0xffffffff

08004cb8 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8004cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	ed2d 8b02 	vpush	{d8}
 8004cc0:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 8004cc2:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 8004cc4:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004cc6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004cca:	ae0c      	add	r6, sp, #48	; 0x30
 8004ccc:	4f6e      	ldr	r7, [pc, #440]	; (8004e88 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004cce:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8004eb0 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 8004cd2:	f00f fb7d 	bl	80143d0 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	9600      	str	r6, [sp, #0]
 8004cda:	b2aa      	uxth	r2, r5
 8004cdc:	21c1      	movs	r1, #193	; 0xc1
 8004cde:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8004ce0:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8004ce2:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8004ce6:	f006 fc27 	bl	800b538 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004cea:	4604      	mov	r4, r0
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f040 80a6 	bne.w	8004e3e <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	2d04      	cmp	r5, #4
 8004cf6:	d1ee      	bne.n	8004cd6 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8004cf8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 8004cfc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8004d00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8004d04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8004d08:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d0c:	485f      	ldr	r0, [pc, #380]	; (8004e8c <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 8004d0e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d12:	495f      	ldr	r1, [pc, #380]	; (8004e90 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8004d14:	0992      	lsrs	r2, r2, #6
	t = tr;
 8004d16:	099c      	lsrs	r4, r3, #6
	p = pr;
 8004d18:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	; (8004e94 <getpressure115.part.0+0x1dc>)
	t = tr;
 8004d1e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 8004d22:	119d      	asrs	r5, r3, #6
	p = pr;
 8004d24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8004d28:	2400      	movs	r4, #0
	t = tr;
 8004d2a:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d2e:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 8004d32:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 8004d36:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d3a:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004d3e:	ed91 4b00 	vldr	d4, [r1]
 8004d42:	4955      	ldr	r1, [pc, #340]	; (8004e98 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 8004d44:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d46:	eea1 4b07 	vfma.f64	d4, d1, d7
 8004d4a:	ed91 6b00 	vldr	d6, [r1]
 8004d4e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004d52:	ed92 0b00 	vldr	d0, [r2]
 8004d56:	eeb0 7b46 	vmov.f64	d7, d6
 8004d5a:	ed9d 2b08 	vldr	d2, [sp, #32]
 8004d5e:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8004d62:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8004e58 <getpressure115.part.0+0x1a0>
 8004d66:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8004e60 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004d6a:	eea0 7b02 	vfma.f64	d7, d0, d2
 8004d6e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8004d72:	ed9d 6b06 	vldr	d6, [sp, #24]
 8004d76:	eea6 5b03 	vfma.f64	d5, d6, d3
 8004d7a:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 8004d7e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8004d82:	f01f fc0b 	bl	802459c <modf>
	t = tr * -0.1706 + 112.27; //C
 8004d86:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004d8a:	4944      	ldr	r1, [pc, #272]	; (8004e9c <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004d8c:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8004d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 8004d94:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 8004d96:	2264      	movs	r2, #100	; 0x64
 8004d98:	4842      	ldr	r0, [pc, #264]	; (8004ea4 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 8004d9a:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8004e68 <getpressure115.part.0+0x1b0>
 8004d9e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8004e70 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 8004da2:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 8004da6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004daa:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8004e78 <getpressure115.part.0+0x1c0>
 8004dae:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 8004db2:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004db6:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 8004dba:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004dbe:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8004e80 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004dc2:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 8004dc6:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 8004dca:	4b37      	ldr	r3, [pc, #220]	; (8004ea8 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 8004dcc:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004dd0:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004dd4:	4935      	ldr	r1, [pc, #212]	; (8004eac <getpressure115.part.0+0x1f4>)
	temperature = t;
 8004dd6:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 8004dda:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004dde:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8004de2:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004de6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004dea:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 8004dee:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004df2:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8004df6:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004dfa:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 8004dfe:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004e02:	feb8 7b47 	vrinta.f64	d7, d7
 8004e06:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 8004e0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004e0e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004e12:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8004e16:	ee16 3a10 	vmov	r3, s12
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004e20:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 8004e24:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004e26:	ee17 2a10 	vmov	r2, s14
}
 8004e2a:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004e2c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e34:	b00f      	add	sp, #60	; 0x3c
 8004e36:	ecbd 8b02 	vpop	{d8}
 8004e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004e3e:	4648      	mov	r0, r9
 8004e40:	4621      	mov	r1, r4
 8004e42:	f01f fa5f 	bl	8024304 <iprintf>
			if (i == 3)
 8004e46:	2d03      	cmp	r5, #3
 8004e48:	f47f af53 	bne.w	8004cf2 <getpressure115.part.0+0x3a>
}
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	b00f      	add	sp, #60	; 0x3c
 8004e50:	ecbd 8b02 	vpop	{d8}
 8004e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e58:	04411044 	.word	0x04411044
 8004e5c:	3fb04411 	.word	0x3fb04411
 8004e60:	00000000 	.word	0x00000000
 8004e64:	40490000 	.word	0x40490000
 8004e68:	86594af5 	.word	0x86594af5
 8004e6c:	bfc5d638 	.word	0xbfc5d638
 8004e70:	ae147ae1 	.word	0xae147ae1
 8004e74:	405c1147 	.word	0x405c1147
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	40590000 	.word	0x40590000
 8004e80:	00000000 	.word	0x00000000
 8004e84:	40af4000 	.word	0x40af4000
 8004e88:	20002258 	.word	0x20002258
 8004e8c:	20002d60 	.word	0x20002d60
 8004e90:	20002d48 	.word	0x20002d48
 8004e94:	20002d50 	.word	0x20002d50
 8004e98:	20002d40 	.word	0x20002d40
 8004e9c:	20002ddc 	.word	0x20002ddc
 8004ea0:	20002de0 	.word	0x20002de0
 8004ea4:	20002dec 	.word	0x20002dec
 8004ea8:	20002de8 	.word	0x20002de8
 8004eac:	20002ca4 	.word	0x20002ca4
 8004eb0:	0802a74c 	.word	0x0802a74c

08004eb4 <cycleleds>:
void cycleleds(void) {
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004eba:	4f1c      	ldr	r7, [pc, #112]	; (8004f2c <cycleleds+0x78>)
 8004ebc:	ac01      	add	r4, sp, #4
 8004ebe:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8004ec2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	4626      	mov	r6, r4
 8004ec8:	c303      	stmia	r3!, {r0, r1}
 8004eca:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004ecc:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f005 fe96 	bl	800ac04 <HAL_GPIO_WritePin>
		osDelay(140);
 8004ed8:	208c      	movs	r0, #140	; 0x8c
 8004eda:	f00f fa79 	bl	80143d0 <osDelay>
	for (i = 0; i < 5; i++) {
 8004ede:	42ae      	cmp	r6, r5
 8004ee0:	d1f4      	bne.n	8004ecc <cycleleds+0x18>
	osDelay(600);
 8004ee2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004ee6:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004ee8:	4f10      	ldr	r7, [pc, #64]	; (8004f2c <cycleleds+0x78>)
	osDelay(600);
 8004eea:	f00f fa71 	bl	80143d0 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004eee:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f005 fe85 	bl	800ac04 <HAL_GPIO_WritePin>
		osDelay(140);
 8004efa:	208c      	movs	r0, #140	; 0x8c
 8004efc:	f00f fa68 	bl	80143d0 <osDelay>
	for (i = 0; i < 5; i++) {
 8004f00:	42ae      	cmp	r6, r5
 8004f02:	d1f4      	bne.n	8004eee <cycleleds+0x3a>
	osDelay(500);
 8004f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004f08:	4e08      	ldr	r6, [pc, #32]	; (8004f2c <cycleleds+0x78>)
	osDelay(500);
 8004f0a:	f00f fa61 	bl	80143d0 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004f0e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004f12:	4630      	mov	r0, r6
 8004f14:	2200      	movs	r2, #0
 8004f16:	f005 fe75 	bl	800ac04 <HAL_GPIO_WritePin>
		osDelay(140);
 8004f1a:	208c      	movs	r0, #140	; 0x8c
 8004f1c:	f00f fa58 	bl	80143d0 <osDelay>
	for (i = 0; i < 5; i++) {
 8004f20:	42ac      	cmp	r4, r5
 8004f22:	d1f4      	bne.n	8004f0e <cycleleds+0x5a>
}
 8004f24:	b005      	add	sp, #20
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f28:	080284dc 	.word	0x080284dc
 8004f2c:	40020c00 	.word	0x40020c00

08004f30 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4604      	mov	r4, r0
 8004f34:	b082      	sub	sp, #8
	osDelay(5);
 8004f36:	2005      	movs	r0, #5
 8004f38:	f00f fa4a 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2104      	movs	r1, #4
 8004f40:	482b      	ldr	r0, [pc, #172]	; (8004ff0 <setpgagain+0xc0>)
 8004f42:	f005 fe5f 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8004f46:	2005      	movs	r0, #5
 8004f48:	f00f fa42 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2104      	movs	r1, #4
 8004f50:	4827      	ldr	r0, [pc, #156]	; (8004ff0 <setpgagain+0xc0>)
 8004f52:	f005 fe57 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8004f56:	2005      	movs	r0, #5
 8004f58:	f00f fa3a 	bl	80143d0 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004f5c:	4925      	ldr	r1, [pc, #148]	; (8004ff4 <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f62:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004f64:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004f66:	4824      	ldr	r0, [pc, #144]	; (8004ff8 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004f68:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004f6c:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004f70:	a901      	add	r1, sp, #4
 8004f72:	f008 fe4d 	bl	800dc10 <HAL_SPI_Transmit>
 8004f76:	bb70      	cbnz	r0, 8004fd6 <setpgagain+0xa6>
	osDelay(5);
 8004f78:	2005      	movs	r0, #5
 8004f7a:	f00f fa29 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004f7e:	2201      	movs	r2, #1
 8004f80:	2104      	movs	r1, #4
 8004f82:	481b      	ldr	r0, [pc, #108]	; (8004ff0 <setpgagain+0xc0>)
 8004f84:	f005 fe3e 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8004f88:	2005      	movs	r0, #5
 8004f8a:	f00f fa21 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2104      	movs	r1, #4
 8004f92:	4817      	ldr	r0, [pc, #92]	; (8004ff0 <setpgagain+0xc0>)
 8004f94:	f005 fe36 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8004f98:	2005      	movs	r0, #5
 8004f9a:	f00f fa19 	bl	80143d0 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004f9e:	2c08      	cmp	r4, #8
 8004fa0:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8004fa8:	bfb8      	it	lt
 8004faa:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8004fae:	2201      	movs	r2, #1
 8004fb0:	a901      	add	r1, sp, #4
 8004fb2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004fb6:	4810      	ldr	r0, [pc, #64]	; (8004ff8 <setpgagain+0xc8>)
 8004fb8:	f008 fe2a 	bl	800dc10 <HAL_SPI_Transmit>
 8004fbc:	b990      	cbnz	r0, 8004fe4 <setpgagain+0xb4>
	osDelay(5);
 8004fbe:	2005      	movs	r0, #5
 8004fc0:	f00f fa06 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <setpgagain+0xc0>)
 8004fca:	f005 fe1b 	bl	800ac04 <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <setpgagain+0xcc>)
 8004fd0:	801c      	strh	r4, [r3, #0]
}
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004fdc:	4808      	ldr	r0, [pc, #32]	; (8005000 <setpgagain+0xd0>)
 8004fde:	f01f f991 	bl	8024304 <iprintf>
 8004fe2:	e7c9      	b.n	8004f78 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8004fe4:	4601      	mov	r1, r0
 8004fe6:	4807      	ldr	r0, [pc, #28]	; (8005004 <setpgagain+0xd4>)
 8004fe8:	f01f f98c 	bl	8024304 <iprintf>
 8004fec:	e7e7      	b.n	8004fbe <setpgagain+0x8e>
 8004fee:	bf00      	nop
 8004ff0:	40021800 	.word	0x40021800
 8004ff4:	0802aba8 	.word	0x0802aba8
 8004ff8:	2000235c 	.word	0x2000235c
 8004ffc:	20002dd8 	.word	0x20002dd8
 8005000:	0802a770 	.word	0x0802a770
 8005004:	0802a79c 	.word	0x0802a79c

08005008 <initpga>:
int initpga() {
 8005008:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800500a:	2201      	movs	r2, #1
int initpga() {
 800500c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800500e:	2104      	movs	r1, #4
 8005010:	4826      	ldr	r0, [pc, #152]	; (80050ac <initpga+0xa4>)
 8005012:	f005 fdf7 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8005016:	2200      	movs	r2, #0
 8005018:	2104      	movs	r1, #4
 800501a:	4824      	ldr	r0, [pc, #144]	; (80050ac <initpga+0xa4>)
 800501c:	f005 fdf2 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(50);
 8005020:	2032      	movs	r0, #50	; 0x32
 8005022:	f00f f9d5 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8005026:	2201      	movs	r2, #1
 8005028:	2104      	movs	r1, #4
 800502a:	4820      	ldr	r0, [pc, #128]	; (80050ac <initpga+0xa4>)
 800502c:	f005 fdea 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8005030:	2005      	movs	r0, #5
 8005032:	f00f f9cd 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8005036:	2200      	movs	r2, #0
 8005038:	2104      	movs	r1, #4
 800503a:	481c      	ldr	r0, [pc, #112]	; (80050ac <initpga+0xa4>)
 800503c:	f005 fde2 	bl	800ac04 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8005040:	2000      	movs	r0, #0
 8005042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005046:	2201      	movs	r2, #1
 8005048:	f8ad 0004 	strh.w	r0, [sp, #4]
 800504c:	a901      	add	r1, sp, #4
 800504e:	4818      	ldr	r0, [pc, #96]	; (80050b0 <initpga+0xa8>)
 8005050:	f008 fdde 	bl	800dc10 <HAL_SPI_Transmit>
 8005054:	4604      	mov	r4, r0
 8005056:	bb08      	cbnz	r0, 800509c <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8005058:	2104      	movs	r1, #4
 800505a:	2201      	movs	r2, #1
 800505c:	4813      	ldr	r0, [pc, #76]	; (80050ac <initpga+0xa4>)
 800505e:	f005 fdd1 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(5);
 8005062:	2005      	movs	r0, #5
 8005064:	f00f f9b4 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8005068:	4622      	mov	r2, r4
 800506a:	2104      	movs	r1, #4
 800506c:	480f      	ldr	r0, [pc, #60]	; (80050ac <initpga+0xa4>)
 800506e:	f005 fdc9 	bl	800ac04 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8005072:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 8005076:	2005      	movs	r0, #5
 8005078:	f00f f9aa 	bl	80143d0 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 800507c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005080:	2201      	movs	r2, #1
 8005082:	a901      	add	r1, sp, #4
 8005084:	480a      	ldr	r0, [pc, #40]	; (80050b0 <initpga+0xa8>)
 8005086:	f8ad 4004 	strh.w	r4, [sp, #4]
 800508a:	f008 fdc1 	bl	800dc10 <HAL_SPI_Transmit>
 800508e:	4604      	mov	r4, r0
 8005090:	b920      	cbnz	r0, 800509c <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8005092:	f7ff ff4d 	bl	8004f30 <setpgagain>
	return (0);
 8005096:	4620      	mov	r0, r4
}
 8005098:	b002      	add	sp, #8
 800509a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 800509c:	4621      	mov	r1, r4
 800509e:	4805      	ldr	r0, [pc, #20]	; (80050b4 <initpga+0xac>)
 80050a0:	f01f f930 	bl	8024304 <iprintf>
		return (1);
 80050a4:	2001      	movs	r0, #1
}
 80050a6:	b002      	add	sp, #8
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	bf00      	nop
 80050ac:	40021800 	.word	0x40021800
 80050b0:	2000235c 	.word	0x2000235c
 80050b4:	0802a7b8 	.word	0x0802a7b8

080050b8 <bumppga>:
int bumppga(int i) {
 80050b8:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 80050ba:	4d1f      	ldr	r5, [pc, #124]	; (8005138 <bumppga+0x80>)
int bumppga(int i) {
 80050bc:	b083      	sub	sp, #12
 80050be:	4604      	mov	r4, r0
	gain = pgagain;
 80050c0:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 80050c4:	b28b      	uxth	r3, r1
	gain = pgagain;
 80050c6:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 80050c8:	2b09      	cmp	r3, #9
 80050ca:	d827      	bhi.n	800511c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <bumppga+0x84>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b0b      	cmp	r3, #11
 80050d2:	d00c      	beq.n	80050ee <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	9b01      	ldr	r3, [sp, #4]
 80050d8:	da01      	bge.n	80050de <bumppga+0x26>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dd04      	ble.n	80050e8 <bumppga+0x30>
 80050de:	2c00      	cmp	r4, #0
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	dd12      	ble.n	800510a <bumppga+0x52>
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	dd10      	ble.n	800510a <bumppga+0x52>
	return (0);
 80050e8:	2000      	movs	r0, #0
}
 80050ea:	b003      	add	sp, #12
 80050ec:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 80050ee:	2907      	cmp	r1, #7
 80050f0:	dd01      	ble.n	80050f6 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 80050f2:	2307      	movs	r3, #7
 80050f4:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 80050f6:	2c00      	cmp	r4, #0
 80050f8:	9b01      	ldr	r3, [sp, #4]
 80050fa:	da01      	bge.n	8005100 <bumppga+0x48>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	ddf3      	ble.n	80050e8 <bumppga+0x30>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	2b06      	cmp	r3, #6
 8005104:	dd01      	ble.n	800510a <bumppga+0x52>
 8005106:	2c00      	cmp	r4, #0
 8005108:	dcee      	bgt.n	80050e8 <bumppga+0x30>
			gain = gain + i;
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	4423      	add	r3, r4
 800510e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8005110:	9801      	ldr	r0, [sp, #4]
 8005112:	f7ff ff0d 	bl	8004f30 <setpgagain>
			return (i);
 8005116:	4620      	mov	r0, r4
}
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <bumppga+0x88>)
 800511e:	f01f f8f1 	bl	8024304 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <bumppga+0x84>)
		pgagain = 0;
 8005124:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005126:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8005128:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 800512a:	2b0b      	cmp	r3, #11
 800512c:	d0e3      	beq.n	80050f6 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 800512e:	2c00      	cmp	r4, #0
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	dbd2      	blt.n	80050da <bumppga+0x22>
 8005134:	e7d3      	b.n	80050de <bumppga+0x26>
 8005136:	bf00      	nop
 8005138:	20002dd8 	.word	0x20002dd8
 800513c:	20001df4 	.word	0x20001df4
 8005140:	0802a7d4 	.word	0x0802a7d4

08005144 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8005144:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005146:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8005148:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800514a:	2100      	movs	r1, #0
 800514c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005150:	f88d 000c 	strb.w	r0, [sp, #12]
 8005154:	2302      	movs	r3, #2
 8005156:	f88d 100d 	strb.w	r1, [sp, #13]
 800515a:	aa03      	add	r2, sp, #12
 800515c:	21c0      	movs	r1, #192	; 0xc0
 800515e:	4809      	ldr	r0, [pc, #36]	; (8005184 <getpressure115+0x40>)
 8005160:	9400      	str	r4, [sp, #0]
 8005162:	f006 f855 	bl	800b210 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005166:	b928      	cbnz	r0, 8005174 <getpressure115+0x30>
 8005168:	f7ff fda6 	bl	8004cb8 <getpressure115.part.0>
 800516c:	4604      	mov	r4, r0
}
 800516e:	4620      	mov	r0, r4
 8005170:	b004      	add	sp, #16
 8005172:	bd10      	pop	{r4, pc}
 8005174:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005176:	4804      	ldr	r0, [pc, #16]	; (8005188 <getpressure115+0x44>)
 8005178:	f01f f8c4 	bl	8024304 <iprintf>
}
 800517c:	4620      	mov	r0, r4
 800517e:	b004      	add	sp, #16
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	20002258 	.word	0x20002258
 8005188:	0802a80c 	.word	0x0802a80c

0800518c <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8005192:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005196:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800519a:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 800519e:	ac06      	add	r4, sp, #24
 80051a0:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80051a4:	4f36      	ldr	r7, [pc, #216]	; (8005280 <initpressure115+0xf4>)
 80051a6:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 80051aa:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80051ae:	eb09 0204 	add.w	r2, r9, r4
 80051b2:	2301      	movs	r3, #1
 80051b4:	9400      	str	r4, [sp, #0]
 80051b6:	21c0      	movs	r1, #192	; 0xc0
 80051b8:	b292      	uxth	r2, r2
 80051ba:	4638      	mov	r0, r7
 80051bc:	441c      	add	r4, r3
 80051be:	e9cd 8601 	strd	r8, r6, [sp, #4]
 80051c2:	f006 f9b9 	bl	800b538 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80051c6:	4605      	mov	r5, r0
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d141      	bne.n	8005250 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 80051cc:	45a2      	cmp	sl, r4
 80051ce:	d1ee      	bne.n	80051ae <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 80051d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80051d4:	2b5a      	cmp	r3, #90	; 0x5a
 80051d6:	d04a      	beq.n	800526e <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 80051d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80051dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80051e0:	badb      	revsh	r3, r3
 80051e2:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 80051e6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80051ea:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 80051ec:	109b      	asrs	r3, r3, #2
 80051ee:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 80051f0:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 80051f2:	ee06 2a10 	vmov	s12, r2
 80051f6:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 80051fa:	ee07 3a10 	vmov	s14, r3
 80051fe:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8005202:	4a20      	ldr	r2, [pc, #128]	; (8005284 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8005204:	ee05 1a10 	vmov	s10, r1
 8005208:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800520c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 800520e:	ee04 0a10 	vmov	s8, r0
 8005212:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8005218:	481c      	ldr	r0, [pc, #112]	; (800528c <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 800521a:	491d      	ldr	r1, [pc, #116]	; (8005290 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800521c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8005220:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005224:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8005226:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 800522a:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 800522e:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005232:	f88d 2014 	strb.w	r2, [sp, #20]
 8005236:	2302      	movs	r3, #2
 8005238:	aa05      	add	r2, sp, #20
 800523a:	21c0      	movs	r1, #192	; 0xc0
 800523c:	4810      	ldr	r0, [pc, #64]	; (8005280 <initpressure115+0xf4>)
 800523e:	f005 ffe7 	bl	800b210 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005242:	b968      	cbnz	r0, 8005260 <initpressure115+0xd4>
 8005244:	f7ff fd38 	bl	8004cb8 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8005248:	4628      	mov	r0, r5
 800524a:	b008      	add	sp, #32
 800524c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8005250:	4601      	mov	r1, r0
 8005252:	4810      	ldr	r0, [pc, #64]	; (8005294 <initpressure115+0x108>)
 8005254:	f01f f856 	bl	8024304 <iprintf>
}
 8005258:	4628      	mov	r0, r5
 800525a:	b008      	add	sp, #32
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005260:	480d      	ldr	r0, [pc, #52]	; (8005298 <initpressure115+0x10c>)
 8005262:	f01f f84f 	bl	8024304 <iprintf>
}
 8005266:	4628      	mov	r0, r5
 8005268:	b008      	add	sp, #32
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 800526e:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8005270:	480a      	ldr	r0, [pc, #40]	; (800529c <initpressure115+0x110>)
 8005272:	f01f f847 	bl	8024304 <iprintf>
}
 8005276:	4628      	mov	r0, r5
 8005278:	b008      	add	sp, #32
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	bf00      	nop
 8005280:	20002258 	.word	0x20002258
 8005284:	20002d60 	.word	0x20002d60
 8005288:	20002d40 	.word	0x20002d40
 800528c:	20002d48 	.word	0x20002d48
 8005290:	20002d50 	.word	0x20002d50
 8005294:	0802a830 	.word	0x0802a830
 8005298:	0802a80c 	.word	0x0802a80c
 800529c:	0802a860 	.word	0x0802a860

080052a0 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 80052a6:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 80052a8:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80052aa:	4f46      	ldr	r7, [pc, #280]	; (80053c4 <getpressure3115+0x124>)
 80052ac:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80052ae:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80053e4 <getpressure3115+0x144>
	data[0] = 0x55;
 80052b2:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 80052b6:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80052b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 80052bc:	f00f f888 	bl	80143d0 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80052c0:	2301      	movs	r3, #1
 80052c2:	2200      	movs	r2, #0
 80052c4:	21c0      	movs	r1, #192	; 0xc0
 80052c6:	4638      	mov	r0, r7
 80052c8:	9600      	str	r6, [sp, #0]
 80052ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052ce:	f006 f933 	bl	800b538 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80052d2:	4604      	mov	r4, r0
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d163      	bne.n	80053a0 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 80052d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 80052dc:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 80052de:	071b      	lsls	r3, r3, #28
 80052e0:	d401      	bmi.n	80052e6 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 80052e2:	2d04      	cmp	r5, #4
 80052e4:	d1e7      	bne.n	80052b6 <getpressure3115+0x16>
 80052e6:	2501      	movs	r5, #1
 80052e8:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80052ea:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80052ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80053c4 <getpressure3115+0x124>
 80052f2:	46a9      	mov	r9, r5
 80052f4:	b2aa      	uxth	r2, r5
 80052f6:	2301      	movs	r3, #1
 80052f8:	21c0      	movs	r1, #192	; 0xc0
 80052fa:	4640      	mov	r0, r8
 80052fc:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 80052fe:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005300:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005304:	f006 f918 	bl	800b538 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005308:	4604      	mov	r4, r0
 800530a:	2800      	cmp	r0, #0
 800530c:	d152      	bne.n	80053b4 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 800530e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8005312:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8005314:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8005318:	d1ec      	bne.n	80052f4 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800531a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 800531e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005322:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005326:	0209      	lsls	r1, r1, #8
 8005328:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800532c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005334:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005338:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 800533a:	4923      	ldr	r1, [pc, #140]	; (80053c8 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800533c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005340:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005342:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005344:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005346:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8005348:	9805      	ldr	r0, [sp, #20]
 800534a:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 800534c:	4b1f      	ldr	r3, [pc, #124]	; (80053cc <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 800534e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005352:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005356:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 800535a:	9a04      	ldr	r2, [sp, #16]
 800535c:	fba3 0202 	umull	r0, r2, r3, r2
 8005360:	0a12      	lsrs	r2, r2, #8
 8005362:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005364:	9a04      	ldr	r2, [sp, #16]
 8005366:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 800536a:	4819      	ldr	r0, [pc, #100]	; (80053d0 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8005374:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005378:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 800537a:	9b06      	ldr	r3, [sp, #24]
 800537c:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 800537e:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8005380:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005382:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8005384:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8005386:	0912      	lsrs	r2, r2, #4
 8005388:	4813      	ldr	r0, [pc, #76]	; (80053d8 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 800538a:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 800538e:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8005390:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <getpressure3115+0x13c>)
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	6013      	str	r3, [r2, #0]
}
 800539a:	b00c      	add	sp, #48	; 0x30
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80053a0:	4601      	mov	r1, r0
 80053a2:	4640      	mov	r0, r8
 80053a4:	f01e ffae 	bl	8024304 <iprintf>
			if (trys == 3)
 80053a8:	2d03      	cmp	r5, #3
 80053aa:	d195      	bne.n	80052d8 <getpressure3115+0x38>
}
 80053ac:	4620      	mov	r0, r4
 80053ae:	b00c      	add	sp, #48	; 0x30
 80053b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 80053b4:	4601      	mov	r1, r0
 80053b6:	480a      	ldr	r0, [pc, #40]	; (80053e0 <getpressure3115+0x140>)
 80053b8:	f01e ffa4 	bl	8024304 <iprintf>
}
 80053bc:	4620      	mov	r0, r4
 80053be:	b00c      	add	sp, #48	; 0x30
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	20002258 	.word	0x20002258
 80053c8:	20002ca4 	.word	0x20002ca4
 80053cc:	10624dd3 	.word	0x10624dd3
 80053d0:	20002ddc 	.word	0x20002ddc
 80053d4:	20002de0 	.word	0x20002de0
 80053d8:	20002de8 	.word	0x20002de8
 80053dc:	20002dec 	.word	0x20002dec
 80053e0:	0802a8b0 	.word	0x0802a8b0
 80053e4:	0802a888 	.word	0x0802a888

080053e8 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 80053ec:	2501      	movs	r5, #1
 80053ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80053f2:	220c      	movs	r2, #12
 80053f4:	a908      	add	r1, sp, #32
 80053f6:	462b      	mov	r3, r5
 80053f8:	4832      	ldr	r0, [pc, #200]	; (80054c4 <initpressure3115+0xdc>)
 80053fa:	9100      	str	r1, [sp, #0]
 80053fc:	21c0      	movs	r1, #192	; 0xc0
 80053fe:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005402:	f006 f899 	bl	800b538 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005406:	2800      	cmp	r0, #0
 8005408:	d145      	bne.n	8005496 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 800540a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800540e:	2bc4      	cmp	r3, #196	; 0xc4
 8005410:	d003      	beq.n	800541a <initpressure3115+0x32>
		return (HAL_ERROR);
 8005412:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8005414:	4620      	mov	r0, r4
 8005416:	b00b      	add	sp, #44	; 0x2c
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 800541a:	4f2b      	ldr	r7, [pc, #172]	; (80054c8 <initpressure3115+0xe0>)
 800541c:	aa05      	add	r2, sp, #20
 800541e:	21c0      	movs	r1, #192	; 0xc0
 8005420:	4828      	ldr	r0, [pc, #160]	; (80054c4 <initpressure3115+0xdc>)
 8005422:	89bb      	ldrh	r3, [r7, #12]
 8005424:	9600      	str	r6, [sp, #0]
 8005426:	f8ad 3014 	strh.w	r3, [sp, #20]
 800542a:	2302      	movs	r3, #2
 800542c:	f005 fef0 	bl	800b210 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005430:	4604      	mov	r4, r0
 8005432:	2800      	cmp	r0, #0
 8005434:	d136      	bne.n	80054a4 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8005436:	8a3b      	ldrh	r3, [r7, #16]
 8005438:	aa06      	add	r2, sp, #24
 800543a:	21c0      	movs	r1, #192	; 0xc0
 800543c:	4821      	ldr	r0, [pc, #132]	; (80054c4 <initpressure3115+0xdc>)
 800543e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005442:	2302      	movs	r3, #2
 8005444:	9600      	str	r6, [sp, #0]
 8005446:	f005 fee3 	bl	800b210 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800544a:	4604      	mov	r4, r0
 800544c:	bb70      	cbnz	r0, 80054ac <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 800544e:	8aba      	ldrh	r2, [r7, #20]
 8005450:	2302      	movs	r3, #2
 8005452:	21c0      	movs	r1, #192	; 0xc0
 8005454:	481b      	ldr	r0, [pc, #108]	; (80054c4 <initpressure3115+0xdc>)
 8005456:	f8ad 201c 	strh.w	r2, [sp, #28]
 800545a:	aa07      	add	r2, sp, #28
 800545c:	9600      	str	r6, [sp, #0]
 800545e:	f005 fed7 	bl	800b210 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005462:	4604      	mov	r4, r0
 8005464:	bb50      	cbnz	r0, 80054bc <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8005466:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8005468:	2064      	movs	r0, #100	; 0x64
 800546a:	f00e ffb1 	bl	80143d0 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 800546e:	462b      	mov	r3, r5
 8005470:	9400      	str	r4, [sp, #0]
 8005472:	462a      	mov	r2, r5
 8005474:	21c0      	movs	r1, #192	; 0xc0
 8005476:	4813      	ldr	r0, [pc, #76]	; (80054c4 <initpressure3115+0xdc>)
 8005478:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800547c:	f006 f85c 	bl	800b538 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005480:	4604      	mov	r4, r0
 8005482:	b9b8      	cbnz	r0, 80054b4 <initpressure3115+0xcc>
	result = getpressure3115();
 8005484:	f7ff ff0c 	bl	80052a0 <getpressure3115>
	if (result != HAL_OK) {
 8005488:	4604      	mov	r4, r0
 800548a:	2800      	cmp	r0, #0
 800548c:	d0c2      	beq.n	8005414 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 800548e:	480f      	ldr	r0, [pc, #60]	; (80054cc <initpressure3115+0xe4>)
 8005490:	f01e ff38 	bl	8024304 <iprintf>
 8005494:	e7be      	b.n	8005414 <initpressure3115+0x2c>
 8005496:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8005498:	480d      	ldr	r0, [pc, #52]	; (80054d0 <initpressure3115+0xe8>)
 800549a:	f01e ff33 	bl	8024304 <iprintf>
}
 800549e:	4620      	mov	r0, r4
 80054a0:	b00b      	add	sp, #44	; 0x2c
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 80054a4:	480b      	ldr	r0, [pc, #44]	; (80054d4 <initpressure3115+0xec>)
 80054a6:	f01e ff2d 	bl	8024304 <iprintf>
		return (result);
 80054aa:	e7b3      	b.n	8005414 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 80054ac:	480a      	ldr	r0, [pc, #40]	; (80054d8 <initpressure3115+0xf0>)
 80054ae:	f01e ff29 	bl	8024304 <iprintf>
		return (result);
 80054b2:	e7af      	b.n	8005414 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 80054b4:	4809      	ldr	r0, [pc, #36]	; (80054dc <initpressure3115+0xf4>)
 80054b6:	f01e ff25 	bl	8024304 <iprintf>
		return (result);
 80054ba:	e7ab      	b.n	8005414 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 80054bc:	4808      	ldr	r0, [pc, #32]	; (80054e0 <initpressure3115+0xf8>)
 80054be:	f01e ff21 	bl	8024304 <iprintf>
		return (result);
 80054c2:	e7a7      	b.n	8005414 <initpressure3115+0x2c>
 80054c4:	20002258 	.word	0x20002258
 80054c8:	080284dc 	.word	0x080284dc
 80054cc:	0802a948 	.word	0x0802a948
 80054d0:	0802a7f0 	.word	0x0802a7f0
 80054d4:	0802a8d8 	.word	0x0802a8d8
 80054d8:	0802a8f4 	.word	0x0802a8f4
 80054dc:	0802a92c 	.word	0x0802a92c
 80054e0:	0802a910 	.word	0x0802a910

080054e4 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 80054e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 80054e8:	4820      	ldr	r0, [pc, #128]	; (800556c <init_esp+0x88>)
 80054ea:	f01e ffa7 	bl	802443c <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 80054ee:	2201      	movs	r2, #1
 80054f0:	491f      	ldr	r1, [pc, #124]	; (8005570 <init_esp+0x8c>)
 80054f2:	4820      	ldr	r0, [pc, #128]	; (8005574 <init_esp+0x90>)
 80054f4:	f00c ff10 	bl	8012318 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 80054f8:	bb98      	cbnz	r0, 8005562 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 80054fa:	2200      	movs	r2, #0
 80054fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005500:	481d      	ldr	r0, [pc, #116]	; (8005578 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005502:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005506:	f005 fb7d 	bl	800ac04 <HAL_GPIO_WritePin>
	osDelay(20);
 800550a:	4c1c      	ldr	r4, [pc, #112]	; (800557c <init_esp+0x98>)
 800550c:	2014      	movs	r0, #20
 800550e:	4d1c      	ldr	r5, [pc, #112]	; (8005580 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8005510:	4e1c      	ldr	r6, [pc, #112]	; (8005584 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8005512:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8005516:	f00e ff5b 	bl	80143d0 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 800551a:	2201      	movs	r2, #1
 800551c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005520:	4815      	ldr	r0, [pc, #84]	; (8005578 <init_esp+0x94>)
 8005522:	f005 fb6f 	bl	800ac04 <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	e006      	b.n	8005538 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 800552a:	5cf0      	ldrb	r0, [r6, r3]
 800552c:	6021      	str	r1, [r4, #0]
 800552e:	f01e ff01 	bl	8024334 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	2b60      	cmp	r3, #96	; 0x60
 8005536:	d810      	bhi.n	800555a <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005538:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 800553a:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 800553c:	429a      	cmp	r2, r3
 800553e:	d1f4      	bne.n	800552a <init_esp+0x46>
		osDelay(1);
 8005540:	2001      	movs	r0, #1
 8005542:	f00e ff45 	bl	80143d0 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8005546:	3f01      	subs	r7, #1
 8005548:	d1ed      	bne.n	8005526 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 800554a:	20c8      	movs	r0, #200	; 0xc8
 800554c:	f00e ff40 	bl	80143d0 <osDelay>
	printf("\n");
 8005550:	200a      	movs	r0, #10
}
 8005552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8005556:	f01e beed 	b.w	8024334 <putchar>
			espoutindex = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	f8c4 8000 	str.w	r8, [r4]
 8005560:	e7ea      	b.n	8005538 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8005562:	4809      	ldr	r0, [pc, #36]	; (8005588 <init_esp+0xa4>)
 8005564:	f01e ff6a 	bl	802443c <puts>
 8005568:	e7c7      	b.n	80054fa <init_esp+0x16>
 800556a:	bf00      	nop
 800556c:	0802a968 	.word	0x0802a968
 8005570:	20002d68 	.word	0x20002d68
 8005574:	200028f8 	.word	0x200028f8
 8005578:	40021000 	.word	0x40021000
 800557c:	20002d6c 	.word	0x20002d6c
 8005580:	20002dd0 	.word	0x20002dd0
 8005584:	20002d70 	.word	0x20002d70
 8005588:	0802a97c 	.word	0x0802a97c

0800558c <uart6_rxdone>:
uart6_rxdone() {
 800558c:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 800558e:	4c0b      	ldr	r4, [pc, #44]	; (80055bc <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <uart6_rxdone+0x34>)
	i = esprxindex;
 8005592:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8005594:	7819      	ldrb	r1, [r3, #0]
 8005596:	1c6b      	adds	r3, r5, #1
 8005598:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 800559a:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 800559c:	5551      	strb	r1, [r2, r5]
 800559e:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 80055a0:	d902      	bls.n	80055a8 <uart6_rxdone+0x1c>
		esprxindex = 0;
 80055a2:	2200      	movs	r2, #0
 80055a4:	4613      	mov	r3, r2
 80055a6:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 80055a8:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <uart6_rxdone+0x3c>)
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d000      	beq.n	80055b2 <uart6_rxdone+0x26>
}
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 80055b2:	4806      	ldr	r0, [pc, #24]	; (80055cc <uart6_rxdone+0x40>)
 80055b4:	f01e ff42 	bl	802443c <puts>
		esprxindex = i;
 80055b8:	6025      	str	r5, [r4, #0]
}
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20002dd0 	.word	0x20002dd0
 80055c0:	20002d68 	.word	0x20002d68
 80055c4:	20002d70 	.word	0x20002d70
 80055c8:	20002d6c 	.word	0x20002d6c
 80055cc:	0802a994 	.word	0x0802a994

080055d0 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 80055d0:	b510      	push	{r4, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 80055d6:	ac02      	add	r4, sp, #8
 80055d8:	4620      	mov	r0, r4
 80055da:	f01f f90e 	bl	80247fa <stpcpy>
	strcat(txbuf, "\r\n");
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <esp_cmd+0x44>)
 80055e0:	8819      	ldrh	r1, [r3, #0]
 80055e2:	789a      	ldrb	r2, [r3, #2]
 80055e4:	1b03      	subs	r3, r0, r4
 80055e6:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 80055e8:	4621      	mov	r1, r4
	len = strlen(txbuf);
 80055ea:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 80055ec:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 80055ee:	480a      	ldr	r0, [pc, #40]	; (8005618 <esp_cmd+0x48>)
	len = strlen(txbuf);
 80055f0:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 80055f2:	f01e fe87 	bl	8024304 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 80055f6:	9a01      	ldr	r2, [sp, #4]
 80055f8:	4621      	mov	r1, r4
 80055fa:	4808      	ldr	r0, [pc, #32]	; (800561c <esp_cmd+0x4c>)
 80055fc:	b292      	uxth	r2, r2
 80055fe:	f00b fc4b 	bl	8010e98 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8005602:	b908      	cbnz	r0, 8005608 <esp_cmd+0x38>
}
 8005604:	b006      	add	sp, #24
 8005606:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005608:	4601      	mov	r1, r0
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <esp_cmd+0x50>)
 800560c:	f01e fe7a 	bl	8024304 <iprintf>
}
 8005610:	b006      	add	sp, #24
 8005612:	bd10      	pop	{r4, pc}
 8005614:	08028c14 	.word	0x08028c14
 8005618:	0802a9b0 	.word	0x0802a9b0
 800561c:	200028f8 	.word	0x200028f8
 8005620:	0802a9c4 	.word	0x0802a9c4

08005624 <test_esp>:
void test_esp() {
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005628:	4813      	ldr	r0, [pc, #76]	; (8005678 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 800562a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 800562e:	f01e ff05 	bl	802443c <puts>
	osDelay(200);
 8005632:	4c12      	ldr	r4, [pc, #72]	; (800567c <test_esp+0x58>)
 8005634:	20c8      	movs	r0, #200	; 0xc8
 8005636:	4d12      	ldr	r5, [pc, #72]	; (8005680 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005638:	4e12      	ldr	r6, [pc, #72]	; (8005684 <test_esp+0x60>)
			espoutindex = 0;
 800563a:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 800563e:	f00e fec7 	bl	80143d0 <osDelay>
	esp_cmd(getstatus);	// send the command
 8005642:	4811      	ldr	r0, [pc, #68]	; (8005688 <test_esp+0x64>)
 8005644:	f7ff ffc4 	bl	80055d0 <esp_cmd>
	while (espoutindex != esprxindex) {
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	e006      	b.n	800565a <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 800564c:	5cf0      	ldrb	r0, [r6, r3]
 800564e:	6021      	str	r1, [r4, #0]
 8005650:	f01e fe70 	bl	8024334 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	2b60      	cmp	r3, #96	; 0x60
 8005658:	d80a      	bhi.n	8005670 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 800565a:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 800565c:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 800565e:	429a      	cmp	r2, r3
 8005660:	d1f4      	bne.n	800564c <test_esp+0x28>
		osDelay(1);
 8005662:	2001      	movs	r0, #1
 8005664:	f00e feb4 	bl	80143d0 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8005668:	3f01      	subs	r7, #1
 800566a:	d1ed      	bne.n	8005648 <test_esp+0x24>
}
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	f8c4 8000 	str.w	r8, [r4]
 8005676:	e7f0      	b.n	800565a <test_esp+0x36>
 8005678:	0802a9e4 	.word	0x0802a9e4
 800567c:	20002d6c 	.word	0x20002d6c
 8005680:	20002dd0 	.word	0x20002dd0
 8005684:	20002d70 	.word	0x20002d70
 8005688:	20000268 	.word	0x20000268

0800568c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 800568c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 800568e:	4818      	ldr	r0, [pc, #96]	; (80056f0 <init_ds2485+0x64>)
void init_ds2485(void) {
 8005690:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8005692:	f01e fed3 	bl	802443c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8005696:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8005698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800569c:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 800569e:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80056a2:	2303      	movs	r3, #3
 80056a4:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 80056a6:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80056aa:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 80056ac:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 80056b0:	aa02      	add	r2, sp, #8
 80056b2:	4810      	ldr	r0, [pc, #64]	; (80056f4 <init_ds2485+0x68>)
 80056b4:	f005 fdac 	bl	800b210 <HAL_I2C_Master_Transmit>
 80056b8:	b9a8      	cbnz	r0, 80056e6 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 80056ba:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80056bc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 80056c0:	f00e fe86 	bl	80143d0 <osDelay>
		data[i] = 0xA5 + i;
 80056c4:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80056c6:	2181      	movs	r1, #129	; 0x81
 80056c8:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 80056ca:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 80056ce:	aa02      	add	r2, sp, #8
 80056d0:	4808      	ldr	r0, [pc, #32]	; (80056f4 <init_ds2485+0x68>)
 80056d2:	9400      	str	r4, [sp, #0]
 80056d4:	f005 fe64 	bl	800b3a0 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 80056d8:	4601      	mov	r1, r0
 80056da:	b110      	cbz	r0, 80056e2 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 80056dc:	4806      	ldr	r0, [pc, #24]	; (80056f8 <init_ds2485+0x6c>)
 80056de:	f01e fe11 	bl	8024304 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 80056e2:	b006      	add	sp, #24
 80056e4:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 80056e6:	4601      	mov	r1, r0
 80056e8:	4803      	ldr	r0, [pc, #12]	; (80056f8 <init_ds2485+0x6c>)
 80056ea:	f01e fe0b 	bl	8024304 <iprintf>
 80056ee:	e7e4      	b.n	80056ba <init_ds2485+0x2e>
 80056f0:	0802aa0c 	.word	0x0802aa0c
 80056f4:	20002258 	.word	0x20002258
 80056f8:	0802aa18 	.word	0x0802aa18

080056fc <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	4604      	mov	r4, r0
 8005700:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8005702:	4821      	ldr	r0, [pc, #132]	; (8005788 <readp_ds2485+0x8c>)
 8005704:	f01e fe9a 	bl	802443c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8005708:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800570a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800570e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8005710:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8005714:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800571a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800571e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8005720:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005724:	aa03      	add	r2, sp, #12
 8005726:	4819      	ldr	r0, [pc, #100]	; (800578c <readp_ds2485+0x90>)
 8005728:	f005 fd72 	bl	800b210 <HAL_I2C_Master_Transmit>
 800572c:	bb18      	cbnz	r0, 8005776 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 800572e:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005730:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8005734:	f00e fe4c 	bl	80143d0 <osDelay>
		data[i] = 0x5A + i;
 8005738:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 800573a:	b2a3      	uxth	r3, r4
 800573c:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 800573e:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005742:	2181      	movs	r1, #129	; 0x81
 8005744:	4811      	ldr	r0, [pc, #68]	; (800578c <readp_ds2485+0x90>)
 8005746:	9500      	str	r5, [sp, #0]
 8005748:	f005 fe2a 	bl	800b3a0 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 800574c:	b9b8      	cbnz	r0, 800577e <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 800574e:	4810      	ldr	r0, [pc, #64]	; (8005790 <readp_ds2485+0x94>)
 8005750:	f10d 040b 	add.w	r4, sp, #11
 8005754:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8005758:	4d0e      	ldr	r5, [pc, #56]	; (8005794 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 800575a:	f01e fdd3 	bl	8024304 <iprintf>
		printf("0x%02x ", data[i]);
 800575e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005762:	4628      	mov	r0, r5
 8005764:	f01e fdce 	bl	8024304 <iprintf>
	for (i = 0; i < 8; i++) {
 8005768:	42b4      	cmp	r4, r6
 800576a:	d1f8      	bne.n	800575e <readp_ds2485+0x62>
	}
	printf("\n");
 800576c:	200a      	movs	r0, #10
 800576e:	f01e fde1 	bl	8024334 <putchar>
}
 8005772:	b006      	add	sp, #24
 8005774:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 8005776:	4808      	ldr	r0, [pc, #32]	; (8005798 <readp_ds2485+0x9c>)
 8005778:	f01e fdc4 	bl	8024304 <iprintf>
 800577c:	e7d7      	b.n	800572e <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 800577e:	4601      	mov	r1, r0
 8005780:	4806      	ldr	r0, [pc, #24]	; (800579c <readp_ds2485+0xa0>)
 8005782:	f01e fdbf 	bl	8024304 <iprintf>
 8005786:	e7e2      	b.n	800574e <readp_ds2485+0x52>
 8005788:	0802aa3c 	.word	0x0802aa3c
 800578c:	20002258 	.word	0x20002258
 8005790:	0802aa9c 	.word	0x0802aa9c
 8005794:	0802aac4 	.word	0x0802aac4
 8005798:	0802aa54 	.word	0x0802aa54
 800579c:	0802aa78 	.word	0x0802aa78

080057a0 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80057a0:	b530      	push	{r4, r5, lr}
 80057a2:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80057a4:	4c41      	ldr	r4, [pc, #260]	; (80058ac <initsplat+0x10c>)
	cycleleds();
 80057a6:	f7ff fb85 	bl	8004eb4 <cycleleds>
	osDelay(500);
 80057aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ae:	f00e fe0f 	bl	80143d0 <osDelay>
	printf("Initsplat: LED cycle\n");
 80057b2:	483f      	ldr	r0, [pc, #252]	; (80058b0 <initsplat+0x110>)
 80057b4:	f01e fe42 	bl	802443c <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	2b0b      	cmp	r3, #11
 80057bc:	d05d      	beq.n	800587a <initsplat+0xda>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 80057be:	483d      	ldr	r0, [pc, #244]	; (80058b4 <initsplat+0x114>)
 80057c0:	f01e fe3c 	bl	802443c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 80057c4:	4d3c      	ldr	r5, [pc, #240]	; (80058b8 <initsplat+0x118>)
	initpga();
 80057c6:	f7ff fc1f 	bl	8005008 <initpga>
	osDelay(500);
 80057ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ce:	f00e fdff 	bl	80143d0 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 80057d2:	483a      	ldr	r0, [pc, #232]	; (80058bc <initsplat+0x11c>)
 80057d4:	f01e fd96 	bl	8024304 <iprintf>
	psensor = PNONE;
 80057d8:	2300      	movs	r3, #0
 80057da:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 80057dc:	f7ff fe04 	bl	80053e8 <initpressure3115>
 80057e0:	b9e0      	cbnz	r0, 800581c <initsplat+0x7c>
		printf("MPL3115A2 pressure sensor present\n\r");
 80057e2:	4837      	ldr	r0, [pc, #220]	; (80058c0 <initsplat+0x120>)
 80057e4:	f01e fd8e 	bl	8024304 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 80057e8:	4a36      	ldr	r2, [pc, #216]	; (80058c4 <initsplat+0x124>)
		psensor = MPL3115A2;
 80057ea:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 80057ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 80057f0:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 80057f2:	f043 0310 	orr.w	r3, r3, #16
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 80057fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057fe:	f00e fde7 	bl	80143d0 <osDelay>

	if ((circuitboardpcb == LIGHTNINGBOARD1) || (circuitboardpcb == LIGHTNINGBOARD2)) {
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	3b15      	subs	r3, #21
 8005806:	2b01      	cmp	r3, #1
 8005808:	d91c      	bls.n	8005844 <initsplat+0xa4>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800580a:	2200      	movs	r2, #0
 800580c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005810:	482d      	ldr	r0, [pc, #180]	; (80058c8 <initsplat+0x128>)
}
 8005812:	b003      	add	sp, #12
 8005814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005818:	f005 b9f4 	b.w	800ac04 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 800581c:	f7ff fcb6 	bl	800518c <initpressure115>
 8005820:	b960      	cbnz	r0, 800583c <initsplat+0x9c>
			printf("MPL115A2 pressure sensor present\n\r");
 8005822:	482a      	ldr	r0, [pc, #168]	; (80058cc <initsplat+0x12c>)
 8005824:	f01e fd6e 	bl	8024304 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <initsplat+0x124>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800582a:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 800582c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005830:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8005832:	f043 0308 	orr.w	r3, r3, #8
 8005836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800583a:	e7de      	b.n	80057fa <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 800583c:	4824      	ldr	r0, [pc, #144]	; (80058d0 <initsplat+0x130>)
 800583e:	f01e fd61 	bl	8024304 <iprintf>
 8005842:	e7da      	b.n	80057fa <initsplat+0x5a>
		huart6.Init.BaudRate = 115200;
 8005844:	4823      	ldr	r0, [pc, #140]	; (80058d4 <initsplat+0x134>)
 8005846:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800584a:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 800584c:	f00c fb74 	bl	8011f38 <HAL_UART_Init>
 8005850:	bb28      	cbnz	r0, 800589e <initsplat+0xfe>
	init_ds2485();
 8005852:	f7ff ff1b 	bl	800568c <init_ds2485>
	osDelay(80);
 8005856:	2050      	movs	r0, #80	; 0x50
 8005858:	f00e fdba 	bl	80143d0 <osDelay>
	readp_ds2485(8);
 800585c:	2008      	movs	r0, #8
 800585e:	f7ff ff4d 	bl	80056fc <readp_ds2485>
		init_esp();
 8005862:	f7ff fe3f 	bl	80054e4 <init_esp>
		osDelay(500);
 8005866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800586a:	f00e fdb1 	bl	80143d0 <osDelay>
		test_esp();
 800586e:	f7ff fed9 	bl	8005624 <test_esp>
		osDelay(200);
 8005872:	20c8      	movs	r0, #200	; 0xc8
 8005874:	f00e fdac 	bl	80143d0 <osDelay>
 8005878:	e7c7      	b.n	800580a <initsplat+0x6a>
		printf("Initsplat: Dual Mux\n\r");
 800587a:	4817      	ldr	r0, [pc, #92]	; (80058d8 <initsplat+0x138>)
 800587c:	f01e fd42 	bl	8024304 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8005880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005884:	2301      	movs	r3, #1
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <initsplat+0x13c>)
 8005888:	9000      	str	r0, [sp, #0]
 800588a:	2188      	movs	r1, #136	; 0x88
 800588c:	4814      	ldr	r0, [pc, #80]	; (80058e0 <initsplat+0x140>)
 800588e:	f005 fcbf 	bl	800b210 <HAL_I2C_Master_Transmit>
 8005892:	b938      	cbnz	r0, 80058a4 <initsplat+0x104>
		osDelay(500);
 8005894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005898:	f00e fd9a 	bl	80143d0 <osDelay>
 800589c:	e78f      	b.n	80057be <initsplat+0x1e>
			Error_Handler();
 800589e:	f7fd feb5 	bl	800360c <Error_Handler>
 80058a2:	e7d6      	b.n	8005852 <initsplat+0xb2>
		printf("I2C HAL returned error 1\n\r");
 80058a4:	480f      	ldr	r0, [pc, #60]	; (80058e4 <initsplat+0x144>)
 80058a6:	f01e fd2d 	bl	8024304 <iprintf>
 80058aa:	e7f3      	b.n	8005894 <initsplat+0xf4>
 80058ac:	20001df4 	.word	0x20001df4
 80058b0:	0802aacc 	.word	0x0802aacc
 80058b4:	0802aafc 	.word	0x0802aafc
 80058b8:	20002de4 	.word	0x20002de4
 80058bc:	0802ab20 	.word	0x0802ab20
 80058c0:	0802ab40 	.word	0x0802ab40
 80058c4:	20002ca4 	.word	0x20002ca4
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0802ab64 	.word	0x0802ab64
 80058d0:	0802ab88 	.word	0x0802ab88
 80058d4:	200028f8 	.word	0x200028f8
 80058d8:	0802aae4 	.word	0x0802aae4
 80058dc:	20000274 	.word	0x20000274
 80058e0:	20002258 	.word	0x20002258
 80058e4:	0802a7f0 	.word	0x0802a7f0

080058e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058ea:	2200      	movs	r2, #0
 80058ec:	210f      	movs	r1, #15
 80058ee:	f06f 0001 	mvn.w	r0, #1
{
 80058f2:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80058f4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 80058f6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80058f8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80058fc:	641c      	str	r4, [r3, #64]	; 0x40
 80058fe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005900:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8005904:	9400      	str	r4, [sp, #0]
 8005906:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005908:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800590a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800590e:	645c      	str	r4, [r3, #68]	; 0x44
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800591a:	f002 fa53 	bl	8007dc4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800591e:	2200      	movs	r2, #0
 8005920:	2106      	movs	r1, #6
 8005922:	2005      	movs	r0, #5
 8005924:	f002 fa4e 	bl	8007dc4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005928:	2005      	movs	r0, #5
 800592a:	f002 fa95 	bl	8007e58 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800592e:	2200      	movs	r2, #0
 8005930:	2106      	movs	r1, #6
 8005932:	2005      	movs	r0, #5
 8005934:	f002 fa46 	bl	8007dc4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005938:	2005      	movs	r0, #5
 800593a:	f002 fa8d 	bl	8007e58 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 800593e:	2051      	movs	r0, #81	; 0x51
 8005940:	2200      	movs	r2, #0
 8005942:	2106      	movs	r1, #6
 8005944:	f002 fa3e 	bl	8007dc4 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005948:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800594a:	b002      	add	sp, #8
 800594c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005950:	f002 ba82 	b.w	8007e58 <HAL_NVIC_EnableIRQ>
 8005954:	40023800 	.word	0x40023800

08005958 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005958:	4a49      	ldr	r2, [pc, #292]	; (8005a80 <HAL_ADC_MspInit+0x128>)
 800595a:	6803      	ldr	r3, [r0, #0]
{
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800595e:	4293      	cmp	r3, r2
{
 8005960:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005962:	f04f 0400 	mov.w	r4, #0
 8005966:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800596a:	9409      	str	r4, [sp, #36]	; 0x24
 800596c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8005970:	d007      	beq.n	8005982 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8005972:	4a44      	ldr	r2, [pc, #272]	; (8005a84 <HAL_ADC_MspInit+0x12c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d045      	beq.n	8005a04 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8005978:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <HAL_ADC_MspInit+0x130>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d05f      	beq.n	8005a3e <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800597e:	b00d      	add	sp, #52	; 0x34
 8005980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005982:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005984:	2703      	movs	r7, #3
 8005986:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005988:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 800598a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800598c:	4840      	ldr	r0, [pc, #256]	; (8005a90 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800598e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8005992:	4e40      	ldr	r6, [pc, #256]	; (8005a94 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
 8005996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005998:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800599c:	9201      	str	r2, [sp, #4]
 800599e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059b0:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80059b4:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b8:	f004 fe78 	bl	800a6ac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80059be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059c2:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 80059c4:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80059c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80059ca:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80059d0:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80059d6:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059d8:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059da:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80059de:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80059e0:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059e2:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80059e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059ea:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059ec:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80059f0:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059f4:	f002 fcf8 	bl	80083e8 <HAL_DMA_Init>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d13d      	bne.n	8005a78 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80059fc:	63ae      	str	r6, [r5, #56]	; 0x38
 80059fe:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8005a00:	b00d      	add	sp, #52	; 0x34
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a06:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a08:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a0a:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005a1a:	9203      	str	r2, [sp, #12]
 8005a1c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a28:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a2e:	4818      	ldr	r0, [pc, #96]	; (8005a90 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a30:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a36:	f004 fe39 	bl	800a6ac <HAL_GPIO_Init>
}
 8005a3a:	b00d      	add	sp, #52	; 0x34
 8005a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a40:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a42:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a44:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a50:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005a54:	9205      	str	r2, [sp, #20]
 8005a56:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a62:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a64:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a68:	4809      	ldr	r0, [pc, #36]	; (8005a90 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a6a:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a6c:	9306      	str	r3, [sp, #24]
 8005a6e:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a70:	f004 fe1c 	bl	800a6ac <HAL_GPIO_Init>
}
 8005a74:	b00d      	add	sp, #52	; 0x34
 8005a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005a78:	f7fd fdc8 	bl	800360c <Error_Handler>
 8005a7c:	e7be      	b.n	80059fc <HAL_ADC_MspInit+0xa4>
 8005a7e:	bf00      	nop
 8005a80:	40012000 	.word	0x40012000
 8005a84:	40012100 	.word	0x40012100
 8005a88:	40012200 	.word	0x40012200
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40020000 	.word	0x40020000
 8005a94:	20001f58 	.word	0x20001f58
 8005a98:	40026470 	.word	0x40026470

08005a9c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <HAL_CRC_MspInit+0x28>)
 8005a9e:	6802      	ldr	r2, [r0, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d000      	beq.n	8005aa6 <HAL_CRC_MspInit+0xa>
 8005aa4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005aa6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8005aae:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8005ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005ac0:	b002      	add	sp, #8
 8005ac2:	4770      	bx	lr
 8005ac4:	40023000 	.word	0x40023000

08005ac8 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_DAC_MspInit+0xb0>)
 8005aca:	6802      	ldr	r2, [r0, #0]
{
 8005acc:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 8005ace:	429a      	cmp	r2, r3
{
 8005ad0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad2:	f04f 0400 	mov.w	r4, #0
 8005ad6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005ada:	9405      	str	r4, [sp, #20]
 8005adc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 8005ae0:	d001      	beq.n	8005ae6 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005ae2:	b008      	add	sp, #32
 8005ae4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8005ae6:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005aea:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aec:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 8005aee:	4e23      	ldr	r6, [pc, #140]	; (8005b7c <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8005af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005af2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
 8005af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005afa:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005afe:	9201      	str	r2, [sp, #4]
 8005b00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b0a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b14:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b16:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b18:	4819      	ldr	r0, [pc, #100]	; (8005b80 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b1a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b1e:	f004 fdc5 	bl	800a6ac <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005b22:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005b28:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005b2a:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 8005b30:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b32:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005b34:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005b36:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b38:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005b3a:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005b3c:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005b3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b42:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b44:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b46:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8005b48:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005b4a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005b4c:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005b4e:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005b52:	f002 fc49 	bl	80083e8 <HAL_DMA_Init>
 8005b56:	b958      	cbnz	r0, 8005b70 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005b5c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005b5e:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005b60:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005b62:	f002 f92f 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b66:	2036      	movs	r0, #54	; 0x36
 8005b68:	f002 f976 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 8005b6c:	b008      	add	sp, #32
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005b70:	f7fd fd4c 	bl	800360c <Error_Handler>
 8005b74:	e7f0      	b.n	8005b58 <HAL_DAC_MspInit+0x90>
 8005b76:	bf00      	nop
 8005b78:	40007400 	.word	0x40007400
 8005b7c:	20001fb8 	.word	0x20001fb8
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40026088 	.word	0x40026088

08005b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b88:	b530      	push	{r4, r5, lr}
 8005b8a:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b8c:	2100      	movs	r1, #0
{
 8005b8e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b90:	2290      	movs	r2, #144	; 0x90
 8005b92:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b94:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b96:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8005b9a:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b9e:	f01d fc13 	bl	80233c8 <memset>
  if(hi2c->Instance==I2C1)
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	4a4a      	ldr	r2, [pc, #296]	; (8005cd0 <HAL_I2C_MspInit+0x148>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8005baa:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <HAL_I2C_MspInit+0x14c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d030      	beq.n	8005c12 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8005bb0:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_I2C_MspInit+0x150>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d057      	beq.n	8005c66 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8005bb6:	b031      	add	sp, #196	; 0xc4
 8005bb8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bbe:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bc0:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bc2:	f007 f8b1 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d178      	bne.n	8005cbc <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bca:	4c44      	ldr	r4, [pc, #272]	; (8005cdc <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005bcc:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bd0:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bd2:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd6:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd8:	f043 0302 	orr.w	r3, r3, #2
 8005bdc:	6323      	str	r3, [r4, #48]	; 0x30
 8005bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005be0:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005be4:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bec:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bee:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf0:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf4:	483a      	ldr	r0, [pc, #232]	; (8005ce0 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bf6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf8:	f004 fd58 	bl	800a6ac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c02:	6423      	str	r3, [r4, #64]	; 0x40
 8005c04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c0a:	9302      	str	r3, [sp, #8]
 8005c0c:	9b02      	ldr	r3, [sp, #8]
}
 8005c0e:	b031      	add	sp, #196	; 0xc4
 8005c10:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c16:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005c18:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c1a:	f007 f885 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d14f      	bne.n	8005cc2 <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c22:	4c2e      	ldr	r4, [pc, #184]	; (8005cdc <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c24:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c26:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c28:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c2c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6323      	str	r3, [r4, #48]	; 0x30
 8005c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c36:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c38:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c3c:	4829      	ldr	r0, [pc, #164]	; (8005ce4 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005c40:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c42:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005c46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c4a:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c4c:	f004 fd2e 	bl	800a6ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c56:	6423      	str	r3, [r4, #64]	; 0x40
 8005c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	9b04      	ldr	r3, [sp, #16]
}
 8005c62:	b031      	add	sp, #196	; 0xc4
 8005c64:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c6a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005c6c:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c6e:	f007 f85b 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8005c72:	bb48      	cbnz	r0, 8005cc8 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c74:	4c19      	ldr	r4, [pc, #100]	; (8005cdc <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005c76:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c7a:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c7c:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c80:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	6323      	str	r3, [r4, #48]	; 0x30
 8005c88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c8a:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c8e:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c92:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8005c96:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c98:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9a:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c9e:	4811      	ldr	r0, [pc, #68]	; (8005ce4 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8005ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ca2:	f004 fd03 	bl	800a6ac <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8005ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cac:	6423      	str	r3, [r4, #64]	; 0x40
 8005cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb4:	9306      	str	r3, [sp, #24]
 8005cb6:	9b06      	ldr	r3, [sp, #24]
}
 8005cb8:	b031      	add	sp, #196	; 0xc4
 8005cba:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8005cbc:	f7fd fca6 	bl	800360c <Error_Handler>
 8005cc0:	e783      	b.n	8005bca <HAL_I2C_MspInit+0x42>
      Error_Handler();
 8005cc2:	f7fd fca3 	bl	800360c <Error_Handler>
 8005cc6:	e7ac      	b.n	8005c22 <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8005cc8:	f7fd fca0 	bl	800360c <Error_Handler>
 8005ccc:	e7d2      	b.n	8005c74 <HAL_I2C_MspInit+0xec>
 8005cce:	bf00      	nop
 8005cd0:	40005400 	.word	0x40005400
 8005cd4:	40005800 	.word	0x40005800
 8005cd8:	40006000 	.word	0x40006000
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40020400 	.word	0x40020400
 8005ce4:	40021400 	.word	0x40021400

08005ce8 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_RNG_MspInit+0x24>)
 8005cea:	6802      	ldr	r2, [r0, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d000      	beq.n	8005cf2 <HAL_RNG_MspInit+0xa>
 8005cf0:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005cf2:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <HAL_RNG_MspInit+0x28>)
{
 8005cf4:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8005cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005d08:	b002      	add	sp, #8
 8005d0a:	4770      	bx	lr
 8005d0c:	50060800 	.word	0x50060800
 8005d10:	40023800 	.word	0x40023800

08005d14 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8005d14:	4a52      	ldr	r2, [pc, #328]	; (8005e60 <HAL_SPI_MspInit+0x14c>)
 8005d16:	6803      	ldr	r3, [r0, #0]
{
 8005d18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8005d1a:	4293      	cmp	r3, r2
{
 8005d1c:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d1e:	f04f 0400 	mov.w	r4, #0
 8005d22:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005d26:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005d2a:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8005d2c:	d007      	beq.n	8005d3e <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8005d2e:	4a4d      	ldr	r2, [pc, #308]	; (8005e64 <HAL_SPI_MspInit+0x150>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d038      	beq.n	8005da6 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8005d34:	4a4c      	ldr	r2, [pc, #304]	; (8005e68 <HAL_SPI_MspInit+0x154>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d071      	beq.n	8005e1e <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005d3a:	b00f      	add	sp, #60	; 0x3c
 8005d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d3e:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d40:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d42:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d44:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d48:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d4a:	4849      	ldr	r0, [pc, #292]	; (8005e70 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
 8005d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005d58:	9201      	str	r2, [sp, #4]
 8005d5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5e:	f042 0204 	orr.w	r2, r2, #4
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	f002 0204 	and.w	r2, r2, #4
 8005d6a:	9202      	str	r2, [sp, #8]
 8005d6c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d78:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d7a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d7e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d80:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d84:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d86:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d88:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d8a:	f004 fc8f 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d8e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d90:	a909      	add	r1, sp, #36	; 0x24
 8005d92:	4838      	ldr	r0, [pc, #224]	; (8005e74 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d94:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d96:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d98:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005d9a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d9e:	f004 fc85 	bl	800a6ac <HAL_GPIO_Init>
}
 8005da2:	b00f      	add	sp, #60	; 0x3c
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005daa:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dac:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005db0:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db2:	4831      	ldr	r0, [pc, #196]	; (8005e78 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40
 8005dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005dc0:	9204      	str	r2, [sp, #16]
 8005dc2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc6:	4332      	orrs	r2, r6
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8005dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dcc:	4032      	ands	r2, r6
 8005dce:	9205      	str	r2, [sp, #20]
 8005dd0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dda:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ddc:	400b      	ands	r3, r1
 8005dde:	9306      	str	r3, [sp, #24]
 8005de0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005de2:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de4:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de8:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005dea:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dec:	f004 fc5e 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005df4:	a909      	add	r1, sp, #36	; 0x24
 8005df6:	481e      	ldr	r0, [pc, #120]	; (8005e70 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005df8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfa:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005dfe:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e02:	f004 fc53 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005e06:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e08:	a909      	add	r1, sp, #36	; 0x24
 8005e0a:	481b      	ldr	r0, [pc, #108]	; (8005e78 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e0c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005e0e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e12:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e16:	f004 fc49 	bl	800a6ac <HAL_GPIO_Init>
}
 8005e1a:	b00f      	add	sp, #60	; 0x3c
 8005e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e20:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005e22:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e24:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e28:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
 8005e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e36:	9207      	str	r2, [sp, #28]
 8005e38:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3c:	f042 0210 	orr.w	r2, r2, #16
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005e42:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e46:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e48:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e4c:	480b      	ldr	r0, [pc, #44]	; (8005e7c <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005e4e:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e50:	9308      	str	r3, [sp, #32]
 8005e52:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005e54:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e58:	f004 fc28 	bl	800a6ac <HAL_GPIO_Init>
}
 8005e5c:	b00f      	add	sp, #60	; 0x3c
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e60:	40003800 	.word	0x40003800
 8005e64:	40003c00 	.word	0x40003c00
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40020800 	.word	0x40020800
 8005e74:	40020c00 	.word	0x40020c00
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40021000 	.word	0x40021000

08005e80 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8005e80:	4a73      	ldr	r2, [pc, #460]	; (8006050 <HAL_TIM_Base_MspInit+0x1d0>)
 8005e82:	6803      	ldr	r3, [r0, #0]
{
 8005e84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8005e86:	4293      	cmp	r3, r2
{
 8005e88:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005e92:	940d      	str	r4, [sp, #52]	; 0x34
 8005e94:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8005e98:	d021      	beq.n	8005ede <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d055      	beq.n	8005f4c <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005ea0:	4a6c      	ldr	r2, [pc, #432]	; (8006054 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8005ea6:	4a6c      	ldr	r2, [pc, #432]	; (8006058 <HAL_TIM_Base_MspInit+0x1d8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d043      	beq.n	8005f34 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8005eac:	4a6b      	ldr	r2, [pc, #428]	; (800605c <HAL_TIM_Base_MspInit+0x1dc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	f000 80a5 	beq.w	8005ffe <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005eb4:	4a6a      	ldr	r2, [pc, #424]	; (8006060 <HAL_TIM_Base_MspInit+0x1e0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f000 80b4 	beq.w	8006024 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005ebc:	4a69      	ldr	r2, [pc, #420]	; (8006064 <HAL_TIM_Base_MspInit+0x1e4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d02d      	beq.n	8005f1e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8005ec2:	4a69      	ldr	r2, [pc, #420]	; (8006068 <HAL_TIM_Base_MspInit+0x1e8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d114      	bne.n	8005ef2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
 8005eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8005eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005edc:	e009      	b.n	8005ef2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ede:	4b63      	ldr	r3, [pc, #396]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	9b01      	ldr	r3, [sp, #4]
}
 8005ef2:	b011      	add	sp, #68	; 0x44
 8005ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ef6:	4b5d      	ldr	r3, [pc, #372]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005ef8:	4622      	mov	r2, r4
 8005efa:	2106      	movs	r1, #6
 8005efc:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005efe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005f00:	f044 0402 	orr.w	r4, r4, #2
 8005f04:	641c      	str	r4, [r3, #64]	; 0x40
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8005f10:	f001 ff58 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005f14:	201d      	movs	r0, #29
 8005f16:	f001 ff9f 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 8005f1a:	b011      	add	sp, #68	; 0x44
 8005f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f1e:	4b53      	ldr	r3, [pc, #332]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
 8005f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f22:	f042 0220 	orr.w	r2, r2, #32
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	e7de      	b.n	8005ef2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f34:	4b4d      	ldr	r3, [pc, #308]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
 8005f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f38:	f042 0204 	orr.w	r2, r2, #4
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	9306      	str	r3, [sp, #24]
 8005f46:	9b06      	ldr	r3, [sp, #24]
}
 8005f48:	b011      	add	sp, #68	; 0x44
 8005f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f4c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f50:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f52:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f54:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f58:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f5a:	4845      	ldr	r0, [pc, #276]	; (8006070 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
 8005f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f64:	f002 0201 	and.w	r2, r2, #1
 8005f68:	9202      	str	r2, [sp, #8]
 8005f6a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	f002 0201 	and.w	r2, r2, #1
 8005f7a:	9203      	str	r2, [sp, #12]
 8005f7c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f80:	f042 0202 	orr.w	r2, r2, #2
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f88:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f8e:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005f92:	2320      	movs	r3, #32
 8005f94:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f96:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f98:	f004 fb88 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f9c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f9e:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa2:	4834      	ldr	r0, [pc, #208]	; (8006074 <HAL_TIM_Base_MspInit+0x1f4>)
 8005fa4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa6:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005fa8:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005faa:	4e33      	ldr	r6, [pc, #204]	; (8006078 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fac:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fb0:	f004 fb7c 	bl	800a6ac <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005fb8:	4a30      	ldr	r2, [pc, #192]	; (800607c <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005fba:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fbc:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8005fc2:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005fc4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fc8:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005fca:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005fce:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005fd0:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005fd2:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fd4:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8005fd6:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fd8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8005fdc:	f002 fa04 	bl	80083e8 <HAL_DMA_Init>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d132      	bne.n	800604a <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8005fe8:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005fea:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8005fec:	62ee      	str	r6, [r5, #44]	; 0x2c
 8005fee:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8005ff0:	f001 fee8 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ff4:	201c      	movs	r0, #28
 8005ff6:	f001 ff2f 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 8005ffa:	b011      	add	sp, #68	; 0x44
 8005ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006000:	4622      	mov	r2, r4
 8006002:	2105      	movs	r1, #5
 8006004:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006006:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006008:	f044 0408 	orr.w	r4, r4, #8
 800600c:	641c      	str	r4, [r3, #64]	; 0x40
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	9307      	str	r3, [sp, #28]
 8006016:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006018:	f001 fed4 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800601c:	2032      	movs	r0, #50	; 0x32
 800601e:	f001 ff1b 	bl	8007e58 <HAL_NVIC_EnableIRQ>
 8006022:	e766      	b.n	8005ef2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8006026:	4622      	mov	r2, r4
 8006028:	2106      	movs	r1, #6
 800602a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800602c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800602e:	f044 0410 	orr.w	r4, r4, #16
 8006032:	641c      	str	r4, [r3, #64]	; 0x40
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800603e:	f001 fec1 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006042:	2036      	movs	r0, #54	; 0x36
 8006044:	f001 ff08 	bl	8007e58 <HAL_NVIC_EnableIRQ>
 8006048:	e753      	b.n	8005ef2 <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 800604a:	f7fd fadf 	bl	800360c <Error_Handler>
 800604e:	e7c9      	b.n	8005fe4 <HAL_TIM_Base_MspInit+0x164>
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40001000 	.word	0x40001000
 8006064:	40001400 	.word	0x40001400
 8006068:	40002000 	.word	0x40002000
 800606c:	40023800 	.word	0x40023800
 8006070:	40020000 	.word	0x40020000
 8006074:	40020400 	.word	0x40020400
 8006078:	20002018 	.word	0x20002018
 800607c:	40026028 	.word	0x40026028

08006080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8006080:	491d      	ldr	r1, [pc, #116]	; (80060f8 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006082:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8006084:	6802      	ldr	r2, [r0, #0]
{
 8006086:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8006088:	428a      	cmp	r2, r1
{
 800608a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800608c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006090:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006094:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8006096:	d004      	beq.n	80060a2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8006098:	4b18      	ldr	r3, [pc, #96]	; (80060fc <HAL_TIM_MspPostInit+0x7c>)
 800609a:	429a      	cmp	r2, r3
 800609c:	d016      	beq.n	80060cc <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800609e:	b008      	add	sp, #32
 80060a0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80060a4:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a6:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060a8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ac:	f042 0204 	orr.w	r2, r2, #4
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80060b4:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060b6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060ba:	4812      	ldr	r0, [pc, #72]	; (8006104 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060bc:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80060c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060c4:	f004 faf2 	bl	800a6ac <HAL_GPIO_Init>
}
 80060c8:	b008      	add	sp, #32
 80060ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060cc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060d2:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060d6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060da:	4322      	orrs	r2, r4
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060e0:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e2:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e4:	4808      	ldr	r0, [pc, #32]	; (8006108 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e6:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e8:	9302      	str	r3, [sp, #8]
 80060ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80060ec:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060ee:	f004 fadd 	bl	800a6ac <HAL_GPIO_Init>
}
 80060f2:	b008      	add	sp, #32
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	bf00      	nop
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40023800 	.word	0x40023800
 8006104:	40020800 	.word	0x40020800
 8006108:	40020400 	.word	0x40020400

0800610c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006112:	2100      	movs	r1, #0
{
 8006114:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006116:	2290      	movs	r2, #144	; 0x90
 8006118:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800611a:	9117      	str	r1, [sp, #92]	; 0x5c
 800611c:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8006120:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006124:	f01d f950 	bl	80233c8 <memset>
  if(huart->Instance==UART4)
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	4aa2      	ldr	r2, [pc, #648]	; (80063b4 <HAL_UART_MspInit+0x2a8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d070      	beq.n	8006212 <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8006130:	4aa1      	ldr	r2, [pc, #644]	; (80063b8 <HAL_UART_MspInit+0x2ac>)
 8006132:	4293      	cmp	r3, r2
 8006134:	f000 80c1 	beq.w	80062ba <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8006138:	4aa0      	ldr	r2, [pc, #640]	; (80063bc <HAL_UART_MspInit+0x2b0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	f000 815e 	beq.w	80063fc <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8006140:	4a9f      	ldr	r2, [pc, #636]	; (80063c0 <HAL_UART_MspInit+0x2b4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006146:	4a9f      	ldr	r2, [pc, #636]	; (80063c4 <HAL_UART_MspInit+0x2b8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	f000 818e 	beq.w	800646a <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800614e:	4a9e      	ldr	r2, [pc, #632]	; (80063c8 <HAL_UART_MspInit+0x2bc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	f000 81b4 	beq.w	80064be <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006156:	4a9d      	ldr	r2, [pc, #628]	; (80063cc <HAL_UART_MspInit+0x2c0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	f000 81df 	beq.w	800651c <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800615e:	b03c      	add	sp, #240	; 0xf0
 8006160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006168:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800616a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800616c:	f006 fddc 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 8261 	bne.w	8006638 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8006176:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006178:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800617c:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 800617e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006180:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006182:	4894      	ldr	r0, [pc, #592]	; (80063d4 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8006184:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006188:	6419      	str	r1, [r3, #64]	; 0x40
 800618a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800618c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006190:	910a      	str	r1, [sp, #40]	; 0x28
 8006192:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006194:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006196:	f041 0110 	orr.w	r1, r1, #16
 800619a:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800619c:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80061a0:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061aa:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80061ae:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061b2:	f004 fa7b 	bl	800a6ac <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061b6:	4887      	ldr	r0, [pc, #540]	; (80063d4 <HAL_UART_MspInit+0x2c8>)
 80061b8:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80061ba:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061bc:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061c0:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061c4:	f004 fa72 	bl	800a6ac <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 80061c8:	4d83      	ldr	r5, [pc, #524]	; (80063d8 <HAL_UART_MspInit+0x2cc>)
 80061ca:	4a84      	ldr	r2, [pc, #528]	; (80063dc <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80061cc:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80061d0:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80061d2:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80061d6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80061de:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80061e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061e4:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e6:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061ea:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80061ee:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80061f2:	f002 f8f9 	bl	80083e8 <HAL_DMA_Init>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f040 8221 	bne.w	800663e <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2103      	movs	r1, #3
 8006200:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006202:	6725      	str	r5, [r4, #112]	; 0x70
 8006204:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006206:	f001 fddd 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800620a:	2053      	movs	r0, #83	; 0x53
 800620c:	f001 fe24 	bl	8007e58 <HAL_NVIC_EnableIRQ>
 8006210:	e7a5      	b.n	800615e <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006212:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006216:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006218:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800621a:	f006 fd85 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 8179 	bne.w	8006516 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006224:	4b6a      	ldr	r3, [pc, #424]	; (80063d0 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006228:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622a:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 800622c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800622e:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006230:	a913      	add	r1, sp, #76	; 0x4c
 8006232:	486b      	ldr	r0, [pc, #428]	; (80063e0 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8006234:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
 800623a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8006240:	9201      	str	r2, [sp, #4]
 8006242:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
 800624c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624e:	f002 0201 	and.w	r2, r2, #1
 8006252:	9202      	str	r2, [sp, #8]
 8006254:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006258:	433a      	orrs	r2, r7
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
 800625c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625e:	403a      	ands	r2, r7
 8006260:	9203      	str	r2, [sp, #12]
 8006262:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006266:	f042 0204 	orr.w	r2, r2, #4
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800626e:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006270:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006274:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006276:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8006278:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800627c:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800627e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006280:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006284:	f004 fa12 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800628c:	a913      	add	r1, sp, #76	; 0x4c
 800628e:	4855      	ldr	r0, [pc, #340]	; (80063e4 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006290:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006296:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800629a:	f004 fa07 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800629e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062a2:	a913      	add	r1, sp, #76	; 0x4c
 80062a4:	4850      	ldr	r0, [pc, #320]	; (80063e8 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a6:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80062a8:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80062aa:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ac:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062b0:	f004 f9fc 	bl	800a6ac <HAL_GPIO_Init>
}
 80062b4:	b03c      	add	sp, #240	; 0xf0
 80062b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062be:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80062c0:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062c2:	f006 fd31 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 81b0 	bne.w	800662c <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 80062cc:	4b40      	ldr	r3, [pc, #256]	; (80063d0 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ce:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80062d2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 80062d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d8:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062dc:	a913      	add	r1, sp, #76	; 0x4c
 80062de:	4841      	ldr	r0, [pc, #260]	; (80063e4 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80062e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
 80062e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80062ec:	9205      	str	r2, [sp, #20]
 80062ee:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f2:	4332      	orrs	r2, r6
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
 80062f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f8:	4032      	ands	r2, r6
 80062fa:	9206      	str	r2, [sp, #24]
 80062fc:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	f042 0204 	orr.w	r2, r2, #4
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006308:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	9307      	str	r3, [sp, #28]
 8006310:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006312:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006314:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006318:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631c:	f004 f9c6 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006320:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006322:	4831      	ldr	r0, [pc, #196]	; (80063e8 <HAL_UART_MspInit+0x2dc>)
 8006324:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006326:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006328:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800632a:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800632c:	4e2f      	ldr	r6, [pc, #188]	; (80063ec <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800632e:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006330:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006334:	f004 f9ba 	bl	800a6ac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006338:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800633a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800633e:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006340:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006342:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006344:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006348:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800634a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800634e:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006350:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006354:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006358:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800635c:	f002 f844 	bl	80083e8 <HAL_DMA_Init>
 8006360:	2800      	cmp	r0, #0
 8006362:	f040 8160 	bne.w	8006626 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006366:	4d23      	ldr	r5, [pc, #140]	; (80063f4 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006368:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800636c:	4922      	ldr	r1, [pc, #136]	; (80063f8 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800636e:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006370:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006372:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006376:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006378:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800637a:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800637c:	6726      	str	r6, [r4, #112]	; 0x70
 800637e:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006380:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006382:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006384:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006386:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006388:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800638a:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800638c:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006390:	f002 f82a 	bl	80083e8 <HAL_DMA_Init>
 8006394:	2800      	cmp	r0, #0
 8006396:	f040 8143 	bne.w	8006620 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 800639a:	2200      	movs	r2, #0
 800639c:	2107      	movs	r1, #7
 800639e:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80063a0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80063a2:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80063a4:	f001 fd0e 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80063a8:	2035      	movs	r0, #53	; 0x35
 80063aa:	f001 fd55 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 80063ae:	b03c      	add	sp, #240	; 0xf0
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	40004c00 	.word	0x40004c00
 80063b8:	40005000 	.word	0x40005000
 80063bc:	40007800 	.word	0x40007800
 80063c0:	40007c00 	.word	0x40007c00
 80063c4:	40004400 	.word	0x40004400
 80063c8:	40004800 	.word	0x40004800
 80063cc:	40011400 	.word	0x40011400
 80063d0:	40023800 	.word	0x40023800
 80063d4:	40021000 	.word	0x40021000
 80063d8:	20002138 	.word	0x20002138
 80063dc:	400260a0 	.word	0x400260a0
 80063e0:	40020000 	.word	0x40020000
 80063e4:	40020400 	.word	0x40020400
 80063e8:	40020800 	.word	0x40020800
 80063ec:	20002078 	.word	0x20002078
 80063f0:	40026010 	.word	0x40026010
 80063f4:	200020d8 	.word	0x200020d8
 80063f8:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80063fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006400:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006402:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006404:	f006 fc90 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 8112 	bne.w	8006632 <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 800640e:	4b8f      	ldr	r3, [pc, #572]	; (800664c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006410:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006412:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006414:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8006416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006418:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800641a:	488d      	ldr	r0, [pc, #564]	; (8006650 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 800641c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
 8006422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006424:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006428:	9208      	str	r2, [sp, #32]
 800642a:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800642c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642e:	f042 0220 	orr.w	r2, r2, #32
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006438:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800643a:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800643c:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006442:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006444:	9309      	str	r3, [sp, #36]	; 0x24
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006448:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800644c:	f004 f92e 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006450:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006452:	a913      	add	r1, sp, #76	; 0x4c
 8006454:	487e      	ldr	r0, [pc, #504]	; (8006650 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006456:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006458:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800645a:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800645c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006460:	f004 f924 	bl	800a6ac <HAL_GPIO_Init>
}
 8006464:	b03c      	add	sp, #240	; 0xf0
 8006466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800646a:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800646c:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800646e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006470:	f006 fc5a 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 80e5 	bne.w	8006644 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 800647a:	4b74      	ldr	r3, [pc, #464]	; (800664c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800647e:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006484:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8006486:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800648a:	641a      	str	r2, [r3, #64]	; 0x40
 800648c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006492:	920c      	str	r2, [sp, #48]	; 0x30
 8006494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006498:	f042 0208 	orr.w	r2, r2, #8
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800649e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064a2:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064a4:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064a8:	486a      	ldr	r0, [pc, #424]	; (8006654 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80064aa:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ac:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064ae:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064b2:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b4:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064b8:	f004 f8f8 	bl	800a6ac <HAL_GPIO_Init>
 80064bc:	e64f      	b.n	800615e <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064be:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064c2:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064c4:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064c6:	f006 fc2f 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 809c 	bne.w	8006608 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064d0:	4b5e      	ldr	r3, [pc, #376]	; (800664c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064d2:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80064d4:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80064da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064dc:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 80064de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
 80064e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80064ea:	920e      	str	r2, [sp, #56]	; 0x38
 80064ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f0:	f042 0208 	orr.w	r2, r2, #8
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f6:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064fa:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064fc:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006500:	4854      	ldr	r0, [pc, #336]	; (8006654 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006502:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006504:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006506:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006508:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800650a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006510:	f004 f8cc 	bl	800a6ac <HAL_GPIO_Init>
 8006514:	e623      	b.n	800615e <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006516:	f7fd f879 	bl	800360c <Error_Handler>
 800651a:	e683      	b.n	8006224 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800651c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006520:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006522:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006524:	f006 fc00 	bl	800cd28 <HAL_RCCEx_PeriphCLKConfig>
 8006528:	2800      	cmp	r0, #0
 800652a:	d176      	bne.n	800661a <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800652c:	4b47      	ldr	r3, [pc, #284]	; (800664c <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800652e:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006530:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006532:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8006534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006536:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006538:	4847      	ldr	r0, [pc, #284]	; (8006658 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800653a:	f042 0220 	orr.w	r2, r2, #32
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
 8006540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006542:	f002 0220 	and.w	r2, r2, #32
 8006546:	9210      	str	r2, [sp, #64]	; 0x40
 8006548:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800654a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654c:	f042 0204 	orr.w	r2, r2, #4
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
 8006552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006554:	f002 0204 	and.w	r2, r2, #4
 8006558:	9211      	str	r2, [sp, #68]	; 0x44
 800655a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	430a      	orrs	r2, r1
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006564:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006566:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006568:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800656a:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800656c:	9312      	str	r3, [sp, #72]	; 0x48
 800656e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006570:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006574:	a913      	add	r1, sp, #76	; 0x4c
 8006576:	f004 f899 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800657a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800657c:	4837      	ldr	r0, [pc, #220]	; (800665c <HAL_UART_MspInit+0x550>)
 800657e:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006580:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006582:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006586:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006588:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800658a:	4e35      	ldr	r6, [pc, #212]	; (8006660 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800658c:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006590:	f004 f88c 	bl	800a6ac <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006594:	4a33      	ldr	r2, [pc, #204]	; (8006664 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006596:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800659a:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800659c:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80065a0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80065a8:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065ae:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065b2:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065b6:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80065ba:	f001 ff15 	bl	80083e8 <HAL_DMA_Init>
 80065be:	bb48      	cbnz	r0, 8006614 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80065c0:	4d29      	ldr	r5, [pc, #164]	; (8006668 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80065c2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80065c6:	4929      	ldr	r1, [pc, #164]	; (800666c <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065c8:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80065ca:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80065d0:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065d2:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065d4:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065d6:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065d8:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065de:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80065e0:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065e2:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065e4:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065e6:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065e8:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 80065ea:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80065ec:	6726      	str	r6, [r4, #112]	; 0x70
 80065ee:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065f0:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 80065f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065f8:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80065fc:	f001 fef4 	bl	80083e8 <HAL_DMA_Init>
 8006600:	b928      	cbnz	r0, 800660e <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006602:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006604:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8006606:	e5aa      	b.n	800615e <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006608:	f7fd f800 	bl	800360c <Error_Handler>
 800660c:	e760      	b.n	80064d0 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800660e:	f7fc fffd 	bl	800360c <Error_Handler>
 8006612:	e7f6      	b.n	8006602 <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8006614:	f7fc fffa 	bl	800360c <Error_Handler>
 8006618:	e7d2      	b.n	80065c0 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 800661a:	f7fc fff7 	bl	800360c <Error_Handler>
 800661e:	e785      	b.n	800652c <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006620:	f7fc fff4 	bl	800360c <Error_Handler>
 8006624:	e6b9      	b.n	800639a <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006626:	f7fc fff1 	bl	800360c <Error_Handler>
 800662a:	e69c      	b.n	8006366 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 800662c:	f7fc ffee 	bl	800360c <Error_Handler>
 8006630:	e64c      	b.n	80062cc <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8006632:	f7fc ffeb 	bl	800360c <Error_Handler>
 8006636:	e6ea      	b.n	800640e <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006638:	f7fc ffe8 	bl	800360c <Error_Handler>
 800663c:	e59b      	b.n	8006176 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 800663e:	f7fc ffe5 	bl	800360c <Error_Handler>
 8006642:	e5db      	b.n	80061fc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8006644:	f7fc ffe2 	bl	800360c <Error_Handler>
 8006648:	e717      	b.n	800647a <HAL_UART_MspInit+0x36e>
 800664a:	bf00      	nop
 800664c:	40023800 	.word	0x40023800
 8006650:	40021400 	.word	0x40021400
 8006654:	40020c00 	.word	0x40020c00
 8006658:	40020800 	.word	0x40020800
 800665c:	40021800 	.word	0x40021800
 8006660:	20002198 	.word	0x20002198
 8006664:	40026428 	.word	0x40026428
 8006668:	200021f8 	.word	0x200021f8
 800666c:	400264a0 	.word	0x400264a0

08006670 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8006670:	4a4f      	ldr	r2, [pc, #316]	; (80067b0 <HAL_UART_MspDeInit+0x140>)
 8006672:	6803      	ldr	r3, [r0, #0]
 8006674:	4293      	cmp	r3, r2
{
 8006676:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8006678:	d025      	beq.n	80066c6 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 800667a:	4a4e      	ldr	r2, [pc, #312]	; (80067b4 <HAL_UART_MspDeInit+0x144>)
 800667c:	4604      	mov	r4, r0
 800667e:	4293      	cmp	r3, r2
 8006680:	d038      	beq.n	80066f4 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8006682:	4a4d      	ldr	r2, [pc, #308]	; (80067b8 <HAL_UART_MspDeInit+0x148>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d050      	beq.n	800672a <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8006688:	4a4c      	ldr	r2, [pc, #304]	; (80067bc <HAL_UART_MspDeInit+0x14c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800668e:	4a4c      	ldr	r2, [pc, #304]	; (80067c0 <HAL_UART_MspDeInit+0x150>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d056      	beq.n	8006742 <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8006694:	4a4b      	ldr	r2, [pc, #300]	; (80067c4 <HAL_UART_MspDeInit+0x154>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d062      	beq.n	8006760 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 800669a:	4a4b      	ldr	r2, [pc, #300]	; (80067c8 <HAL_UART_MspDeInit+0x158>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d06c      	beq.n	800677a <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80066a0:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 80066a2:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80066a6:	2103      	movs	r1, #3
 80066a8:	4848      	ldr	r0, [pc, #288]	; (80067cc <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 80066aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80066ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80066b2:	f004 f9a1 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80066b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80066b8:	f002 f842 	bl	8008740 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80066bc:	2053      	movs	r0, #83	; 0x53
}
 80066be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80066c2:	f001 bbdd 	b.w	8007e80 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 80066c6:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80066ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80066ce:	4840      	ldr	r0, [pc, #256]	; (80067d0 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 80066d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80066d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80066d6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80066d8:	f004 f98e 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80066dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066e0:	483c      	ldr	r0, [pc, #240]	; (80067d4 <HAL_UART_MspDeInit+0x164>)
 80066e2:	f004 f989 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80066e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ea:	483b      	ldr	r0, [pc, #236]	; (80067d8 <HAL_UART_MspDeInit+0x168>)
}
 80066ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80066f0:	f004 b982 	b.w	800a9f8 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 80066f4:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 80066f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066fc:	4835      	ldr	r0, [pc, #212]	; (80067d4 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 80066fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006700:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006706:	f004 f977 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800670a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800670e:	4832      	ldr	r0, [pc, #200]	; (80067d8 <HAL_UART_MspDeInit+0x168>)
 8006710:	f004 f972 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006714:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006716:	f002 f813 	bl	8008740 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800671a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800671c:	f002 f810 	bl	8008740 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006720:	2035      	movs	r0, #53	; 0x35
}
 8006722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006726:	f001 bbab 	b.w	8007e80 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 800672a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800672e:	21c0      	movs	r1, #192	; 0xc0
 8006730:	482a      	ldr	r0, [pc, #168]	; (80067dc <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8006732:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006734:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 800673c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 800673e:	f004 b95b 	b.w	800a9f8 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8006742:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006746:	4826      	ldr	r0, [pc, #152]	; (80067e0 <HAL_UART_MspDeInit+0x170>)
 8006748:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 800674a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800674c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006750:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006752:	f004 f951 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006756:	2026      	movs	r0, #38	; 0x26
}
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800675c:	f001 bb90 	b.w	8007e80 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006760:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8006764:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006768:	481d      	ldr	r0, [pc, #116]	; (80067e0 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 800676a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800676c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8006774:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8006776:	f004 b93f 	b.w	800a9f8 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 800677a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800677e:	2140      	movs	r1, #64	; 0x40
 8006780:	4815      	ldr	r0, [pc, #84]	; (80067d8 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8006782:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006784:	f023 0320 	bic.w	r3, r3, #32
 8006788:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800678a:	f004 f935 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800678e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006792:	4814      	ldr	r0, [pc, #80]	; (80067e4 <HAL_UART_MspDeInit+0x174>)
 8006794:	f004 f930 	bl	800a9f8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006798:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800679a:	f001 ffd1 	bl	8008740 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800679e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80067a0:	f001 ffce 	bl	8008740 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80067a4:	2047      	movs	r0, #71	; 0x47
}
 80067a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80067aa:	f001 bb69 	b.w	8007e80 <HAL_NVIC_DisableIRQ>
 80067ae:	bf00      	nop
 80067b0:	40004c00 	.word	0x40004c00
 80067b4:	40005000 	.word	0x40005000
 80067b8:	40007800 	.word	0x40007800
 80067bc:	40007c00 	.word	0x40007c00
 80067c0:	40004400 	.word	0x40004400
 80067c4:	40004800 	.word	0x40004800
 80067c8:	40011400 	.word	0x40011400
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020400 	.word	0x40020400
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40021400 	.word	0x40021400
 80067e0:	40020c00 	.word	0x40020c00
 80067e4:	40021800 	.word	0x40021800

080067e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067e8:	b530      	push	{r4, r5, lr}
 80067ea:	4601      	mov	r1, r0
 80067ec:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80067ee:	2200      	movs	r2, #0
 80067f0:	202b      	movs	r0, #43	; 0x2b
 80067f2:	f001 fae7 	bl	8007dc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80067f6:	202b      	movs	r0, #43	; 0x2b
 80067f8:	f001 fb2e 	bl	8007e58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 80067fc:	4b15      	ldr	r3, [pc, #84]	; (8006854 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067fe:	a901      	add	r1, sp, #4
 8006800:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8006804:	4c14      	ldr	r4, [pc, #80]	; (8006858 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800680a:	4d14      	ldr	r5, [pc, #80]	; (800685c <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	9302      	str	r3, [sp, #8]
 8006816:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006818:	f006 fa64 	bl	800cce4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800681c:	f006 fa42 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8006820:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006822:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8006824:	490e      	ldr	r1, [pc, #56]	; (8006860 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 8006826:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006828:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800682a:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800682c:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006830:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 8006834:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006836:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006838:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800683a:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 800683c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800683e:	f008 fd43 	bl	800f2c8 <HAL_TIM_Base_Init>
 8006842:	b110      	cbz	r0, 800684a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8006844:	2001      	movs	r0, #1
}
 8006846:	b009      	add	sp, #36	; 0x24
 8006848:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 800684a:	4620      	mov	r0, r4
 800684c:	f007 ff10 	bl	800e670 <HAL_TIM_Base_Start_IT>
}
 8006850:	b009      	add	sp, #36	; 0x24
 8006852:	bd30      	pop	{r4, r5, pc}
 8006854:	40023800 	.word	0x40023800
 8006858:	20002df0 	.word	0x20002df0
 800685c:	431bde83 	.word	0x431bde83
 8006860:	40001800 	.word	0x40001800

08006864 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop

08006868 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006868:	e7fe      	b.n	8006868 <HardFault_Handler>
 800686a:	bf00      	nop

0800686c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800686c:	e7fe      	b.n	800686c <MemManage_Handler>
 800686e:	bf00      	nop

08006870 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006870:	e7fe      	b.n	8006870 <BusFault_Handler>
 8006872:	bf00      	nop

08006874 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006874:	e7fe      	b.n	8006874 <UsageFault_Handler>
 8006876:	bf00      	nop

08006878 <RCC_IRQHandler>:
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop

0800687c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <DMA1_Stream0_IRQHandler+0x8>)
 800687e:	f002 b8cb 	b.w	8008a18 <HAL_DMA_IRQHandler>
 8006882:	bf00      	nop
 8006884:	20002078 	.word	0x20002078

08006888 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <DMA1_Stream1_IRQHandler+0x8>)
 800688a:	f002 b8c5 	b.w	8008a18 <HAL_DMA_IRQHandler>
 800688e:	bf00      	nop
 8006890:	20002018 	.word	0x20002018

08006894 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <DMA1_Stream5_IRQHandler+0x8>)
 8006896:	f002 b8bf 	b.w	8008a18 <HAL_DMA_IRQHandler>
 800689a:	bf00      	nop
 800689c:	20001fb8 	.word	0x20001fb8

080068a0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <DMA1_Stream6_IRQHandler+0x8>)
 80068a2:	f002 b8b9 	b.w	8008a18 <HAL_DMA_IRQHandler>
 80068a6:	bf00      	nop
 80068a8:	20002138 	.word	0x20002138

080068ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80068ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <ADC_IRQHandler+0x18>)
 80068b0:	f001 f864 	bl	800797c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <ADC_IRQHandler+0x1c>)
 80068b6:	f001 f861 	bl	800797c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80068ba:	4804      	ldr	r0, [pc, #16]	; (80068cc <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80068bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 80068c0:	f001 b85c 	b.w	800797c <HAL_ADC_IRQHandler>
 80068c4:	20001e48 	.word	0x20001e48
 80068c8:	20001e90 	.word	0x20001e90
 80068cc:	20001ed8 	.word	0x20001ed8

080068d0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <TIM2_IRQHandler+0x8>)
 80068d2:	f008 bb71 	b.w	800efb8 <HAL_TIM_IRQHandler>
 80068d6:	bf00      	nop
 80068d8:	20002520 	.word	0x20002520

080068dc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <TIM3_IRQHandler+0x8>)
 80068de:	f008 bb6b 	b.w	800efb8 <HAL_TIM_IRQHandler>
 80068e2:	bf00      	nop
 80068e4:	2000256c 	.word	0x2000256c

080068e8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80068e8:	4801      	ldr	r0, [pc, #4]	; (80068f0 <USART2_IRQHandler+0x8>)
 80068ea:	f00a bde9 	b.w	80114c0 <HAL_UART_IRQHandler>
 80068ee:	bf00      	nop
 80068f0:	200026e8 	.word	0x200026e8

080068f4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80068f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80068f8:	f004 b9b6 	b.w	800ac68 <HAL_GPIO_EXTI_IRQHandler>

080068fc <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 80068fe:	f008 bb5b 	b.w	800efb8 <HAL_TIM_IRQHandler>
 8006902:	bf00      	nop
 8006904:	20002df0 	.word	0x20002df0

08006908 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800690a:	f008 bb55 	b.w	800efb8 <HAL_TIM_IRQHandler>
 800690e:	bf00      	nop
 8006910:	200024d4 	.word	0x200024d4

08006914 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <DMA1_Stream7_IRQHandler+0x8>)
 8006916:	f002 b87f 	b.w	8008a18 <HAL_DMA_IRQHandler>
 800691a:	bf00      	nop
 800691c:	200020d8 	.word	0x200020d8

08006920 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <TIM5_IRQHandler+0x8>)
 8006922:	f008 bb49 	b.w	800efb8 <HAL_TIM_IRQHandler>
 8006926:	bf00      	nop
 8006928:	20002604 	.word	0x20002604

0800692c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <UART5_IRQHandler+0x8>)
 800692e:	f00a bdc7 	b.w	80114c0 <HAL_UART_IRQHandler>
 8006932:	bf00      	nop
 8006934:	20002874 	.word	0x20002874

08006938 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006938:	4804      	ldr	r0, [pc, #16]	; (800694c <TIM6_DAC_IRQHandler+0x14>)
{
 800693a:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 800693c:	f001 fc9e 	bl	800827c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006940:	4803      	ldr	r0, [pc, #12]	; (8006950 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8006946:	f008 bb37 	b.w	800efb8 <HAL_TIM_IRQHandler>
 800694a:	bf00      	nop
 800694c:	20001f44 	.word	0x20001f44
 8006950:	20002650 	.word	0x20002650

08006954 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006954:	4801      	ldr	r0, [pc, #4]	; (800695c <DMA2_Stream1_IRQHandler+0x8>)
 8006956:	f002 b85f 	b.w	8008a18 <HAL_DMA_IRQHandler>
 800695a:	bf00      	nop
 800695c:	20002198 	.word	0x20002198

08006960 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006960:	4801      	ldr	r0, [pc, #4]	; (8006968 <DMA2_Stream4_IRQHandler+0x8>)
 8006962:	f002 b859 	b.w	8008a18 <HAL_DMA_IRQHandler>
 8006966:	bf00      	nop
 8006968:	20001f58 	.word	0x20001f58

0800696c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800696c:	4801      	ldr	r0, [pc, #4]	; (8006974 <ETH_IRQHandler+0x8>)
 800696e:	f002 bfd7 	b.w	8009920 <HAL_ETH_IRQHandler>
 8006972:	bf00      	nop
 8006974:	20006014 	.word	0x20006014

08006978 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <OTG_FS_IRQHandler+0x8>)
 800697a:	f005 b893 	b.w	800baa4 <HAL_PCD_IRQHandler>
 800697e:	bf00      	nop
 8006980:	2002f458 	.word	0x2002f458

08006984 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <DMA2_Stream6_IRQHandler+0x8>)
 8006986:	f002 b847 	b.w	8008a18 <HAL_DMA_IRQHandler>
 800698a:	bf00      	nop
 800698c:	200021f8 	.word	0x200021f8

08006990 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <USART6_IRQHandler+0x8>)
 8006992:	f00a bd95 	b.w	80114c0 <HAL_UART_IRQHandler>
 8006996:	bf00      	nop
 8006998:	200028f8 	.word	0x200028f8

0800699c <FPU_IRQHandler>:
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop

080069a0 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <UART8_IRQHandler+0x8>)
 80069a2:	f00a bd8d 	b.w	80114c0 <HAL_UART_IRQHandler>
 80069a6:	bf00      	nop
 80069a8:	20002a00 	.word	0x20002a00

080069ac <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80069ac:	2001      	movs	r0, #1
 80069ae:	4770      	bx	lr

080069b0 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80069b0:	4b02      	ldr	r3, [pc, #8]	; (80069bc <_kill+0xc>)
 80069b2:	2216      	movs	r2, #22
	return -1;
}
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	4770      	bx	lr
 80069bc:	2002f86c 	.word	0x2002f86c

080069c0 <_exit>:
	errno = EINVAL;
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <_exit+0x8>)
 80069c2:	2216      	movs	r2, #22
 80069c4:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 80069c6:	e7fe      	b.n	80069c6 <_exit+0x6>
 80069c8:	2002f86c 	.word	0x2002f86c

080069cc <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80069cc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80069ce:	1e16      	subs	r6, r2, #0
 80069d0:	dd07      	ble.n	80069e2 <_read+0x16>
 80069d2:	460c      	mov	r4, r1
 80069d4:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 80069d6:	f3af 8000 	nop.w
 80069da:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80069de:	42a5      	cmp	r5, r4
 80069e0:	d1f9      	bne.n	80069d6 <_read+0xa>
	}

	return len;
}
 80069e2:	4630      	mov	r0, r6
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	bf00      	nop

080069e8 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop

080069f0 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80069f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80069f4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80069f6:	604b      	str	r3, [r1, #4]
}
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop

080069fc <_isatty>:

int _isatty(int file) {
	return 1;
}
 80069fc:	2001      	movs	r0, #1
 80069fe:	4770      	bx	lr

08006a00 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006a00:	2000      	movs	r0, #0
 8006a02:	4770      	bx	lr

08006a04 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006a04:	490d      	ldr	r1, [pc, #52]	; (8006a3c <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8006a06:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006a08:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8006a0a:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8006a0c:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006a0e:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <_sbrk+0x40>)
 8006a10:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8006a12:	b170      	cbz	r0, 8006a32 <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006a14:	4403      	add	r3, r0
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d803      	bhi.n	8006a22 <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8006a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8006a1e:	600b      	str	r3, [r1, #0]
}
 8006a20:	4770      	bx	lr
		errno = ENOMEM;
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <_sbrk+0x44>)
 8006a24:	220c      	movs	r2, #12
		return (void*) -1;
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8006a2e:	601a      	str	r2, [r3, #0]
}
 8006a30:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8006a32:	4c06      	ldr	r4, [pc, #24]	; (8006a4c <_sbrk+0x48>)
 8006a34:	4620      	mov	r0, r4
 8006a36:	600c      	str	r4, [r1, #0]
 8006a38:	e7ec      	b.n	8006a14 <_sbrk+0x10>
 8006a3a:	bf00      	nop
 8006a3c:	20002e40 	.word	0x20002e40
 8006a40:	20080000 	.word	0x20080000
 8006a44:	00006800 	.word	0x00006800
 8006a48:	2002f86c 	.word	0x2002f86c
 8006a4c:	2002f898 	.word	0x2002f898

08006a50 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a50:	4a0f      	ldr	r2, [pc, #60]	; (8006a90 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a54:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006a58:	490f      	ldr	r1, [pc, #60]	; (8006a98 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a5a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8006a5e:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a60:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8006a64:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	f040 0001 	orr.w	r0, r0, #1
 8006a6c:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8006a6e:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8006a74:	4809      	ldr	r0, [pc, #36]	; (8006a9c <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006a76:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8006a78:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006a7a:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a7c:	4808      	ldr	r0, [pc, #32]	; (8006aa0 <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006a7e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006a82:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8006a84:	60dc      	str	r4, [r3, #12]

#endif
}
 8006a86:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a8a:	6090      	str	r0, [r2, #8]
}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	e000ed00 	.word	0xe000ed00
 8006a94:	40023800 	.word	0x40023800
 8006a98:	fef6ffff 	.word	0xfef6ffff
 8006a9c:	24003010 	.word	0x24003010
 8006aa0:	08000000 	.word	0x08000000

08006aa4 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8006aa4:	680b      	ldr	r3, [r1, #0]
 8006aa6:	4a03      	ldr	r2, [pc, #12]	; (8006ab4 <dnsfound+0x10>)
		ip_ready = -1;
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf08      	it	eq
 8006aac:	f04f 33ff 	moveq.w	r3, #4294967295
 8006ab0:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 8006ab2:	4770      	bx	lr
 8006ab4:	20002e54 	.word	0x20002e54

08006ab8 <myreboot>:
void myreboot(char *msg) {
 8006ab8:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8006aba:	480a      	ldr	r0, [pc, #40]	; (8006ae4 <myreboot+0x2c>)
void myreboot(char *msg) {
 8006abc:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8006abe:	f01d fc21 	bl	8024304 <iprintf>
	osDelay(2000);
 8006ac2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006ac6:	f00d fc83 	bl	80143d0 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006aca:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ace:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ad2:	68ca      	ldr	r2, [r1, #12]
 8006ad4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60cb      	str	r3, [r1, #12]
 8006adc:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006ae0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006ae2:	e7fd      	b.n	8006ae0 <myreboot+0x28>
 8006ae4:	0802abcc 	.word	0x0802abcc
 8006ae8:	e000ed00 	.word	0xe000ed00
 8006aec:	05fa0004 	.word	0x05fa0004

08006af0 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8006af0:	b500      	push	{lr}
 8006af2:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006af4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <sendudp+0x64>)
 8006afa:	f018 fb6d 	bl	801f1d8 <udp_sendto>
 8006afe:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006b02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b06:	b943      	cbnz	r3, 8006b1a <sendudp+0x2a>
 8006b08:	b25a      	sxtb	r2, r3
		busycount = 0;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <sendudp+0x68>)
 8006b0c:	601a      	str	r2, [r3, #0]
	return (err);
 8006b0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006b12:	b240      	sxtb	r0, r0
 8006b14:	b003      	add	sp, #12
 8006b16:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8006b1a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006b1e:	480f      	ldr	r0, [pc, #60]	; (8006b5c <sendudp+0x6c>)
 8006b20:	b249      	sxtb	r1, r1
 8006b22:	f01d fbef 	bl	8024304 <iprintf>
		vTaskDelay(100); //some delay!
 8006b26:	2064      	movs	r0, #100	; 0x64
 8006b28:	f00e ffa0 	bl	8015a6c <vTaskDelay>
		if (err == ERR_MEM) {
 8006b2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b30:	2bff      	cmp	r3, #255	; 0xff
 8006b32:	d00c      	beq.n	8006b4e <sendudp+0x5e>
		if (err == ERR_USE) {
 8006b34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b38:	2bf8      	cmp	r3, #248	; 0xf8
 8006b3a:	d1e8      	bne.n	8006b0e <sendudp+0x1e>
			if (busycount++ > 10)
 8006b3c:	4a06      	ldr	r2, [pc, #24]	; (8006b58 <sendudp+0x68>)
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	1c59      	adds	r1, r3, #1
 8006b42:	2b0a      	cmp	r3, #10
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	dde2      	ble.n	8006b0e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8006b48:	4805      	ldr	r0, [pc, #20]	; (8006b60 <sendudp+0x70>)
 8006b4a:	f7ff ffb5 	bl	8006ab8 <myreboot>
			myreboot("sendudp: out of mem");
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <sendudp+0x74>)
 8006b50:	f7ff ffb2 	bl	8006ab8 <myreboot>
 8006b54:	20002e6c 	.word	0x20002e6c
 8006b58:	20002e44 	.word	0x20002e44
 8006b5c:	0802abe0 	.word	0x0802abe0
 8006b60:	0802ac08 	.word	0x0802ac08
 8006b64:	0802abf4 	.word	0x0802abf4

08006b68 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006b6a:	4684      	mov	ip, r0
 8006b6c:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006b72:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b74:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006b78:	4c22      	ldr	r4, [pc, #136]	; (8006c04 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006b7a:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006b7c:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006b82:	4c21      	ldr	r4, [pc, #132]	; (8006c08 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b84:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006b88:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8006b8c:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b90:	4c1e      	ldr	r4, [pc, #120]	; (8006c0c <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006b92:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006b96:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006b9a:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006b9e:	4a1c      	ldr	r2, [pc, #112]	; (8006c10 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006ba0:	bfc8      	it	gt
 8006ba2:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006ba6:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8006baa:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006bac:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	4d18      	ldr	r5, [pc, #96]	; (8006c14 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bb4:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bba:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bbc:	bfb8      	it	lt
 8006bbe:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bc0:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8006bc2:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bc4:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bc6:	4d15      	ldr	r5, [pc, #84]	; (8006c1c <sendstatus+0xb4>)
 8006bc8:	b292      	uxth	r2, r2
 8006bca:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bcc:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bd0:	432a      	orrs	r2, r5
 8006bd2:	4d13      	ldr	r5, [pc, #76]	; (8006c20 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bd4:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8006bd6:	4035      	ands	r5, r6
 8006bd8:	432a      	orrs	r2, r5
 8006bda:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006bdc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006be0:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006be2:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006be4:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006be8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bec:	f7ff ff80 	bl	8006af0 <sendudp>
 8006bf0:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	6023      	str	r3, [r4, #0]
}
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000748 	.word	0x20000748
 8006c04:	200006f4 	.word	0x200006f4
 8006c08:	20002dd8 	.word	0x20002dd8
 8006c0c:	20002ca4 	.word	0x20002ca4
 8006c10:	20000700 	.word	0x20000700
 8006c14:	20000002 	.word	0x20000002
 8006c18:	200006fc 	.word	0x200006fc
 8006c1c:	200006dc 	.word	0x200006dc
 8006c20:	ffff0000 	.word	0xffff0000
 8006c24:	20002e6c 	.word	0x20002e6c

08006c28 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 8006c2e:	4818      	ldr	r0, [pc, #96]	; (8006c90 <dnslookup+0x68>)
 8006c30:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 8006c32:	4e18      	ldr	r6, [pc, #96]	; (8006c94 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8006c34:	f01d fb66 	bl	8024304 <iprintf>
	ip_ready = 0;
 8006c38:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <dnslookup+0x70>)
 8006c3e:	4639      	mov	r1, r7
	ip_ready = 0;
 8006c40:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006c42:	f011 ff6d 	bl	8018b20 <dns_gethostbyname>
 8006c46:	4604      	mov	r4, r0

	switch (err) {
 8006c48:	3005      	adds	r0, #5
 8006c4a:	d005      	beq.n	8006c58 <dnslookup+0x30>
 8006c4c:	b114      	cbz	r4, 8006c54 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 8006c4e:	4813      	ldr	r0, [pc, #76]	; (8006c9c <dnslookup+0x74>)
 8006c50:	f01d fb58 	bl	8024304 <iprintf>
		break;
	}
	return (err);
}
 8006c54:	4620      	mov	r0, r4
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8006c58:	4811      	ldr	r0, [pc, #68]	; (8006ca0 <dnslookup+0x78>)
 8006c5a:	2514      	movs	r5, #20
 8006c5c:	f01d fb52 	bl	8024304 <iprintf>
		for (i = 0; i < 20; i++) {
 8006c60:	e001      	b.n	8006c66 <dnslookup+0x3e>
 8006c62:	3d01      	subs	r5, #1
 8006c64:	d0f3      	beq.n	8006c4e <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 8006c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c6a:	f00d fbb1 	bl	80143d0 <osDelay>
			printf(".");
 8006c6e:	202e      	movs	r0, #46	; 0x2e
 8006c70:	f01d fb60 	bl	8024334 <putchar>
			if (ip_ready) {
 8006c74:	6833      	ldr	r3, [r6, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f3      	beq.n	8006c62 <dnslookup+0x3a>
				if (ip_ready == -1) {
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	d002      	beq.n	8006c84 <dnslookup+0x5c>
				return (ERR_OK);
 8006c7e:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 8006c80:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 8006c82:	e7e7      	b.n	8006c54 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8006c86:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8006c8a:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8006c8c:	e7e2      	b.n	8006c54 <dnslookup+0x2c>
 8006c8e:	bf00      	nop
 8006c90:	0802ac24 	.word	0x0802ac24
 8006c94:	20002e54 	.word	0x20002e54
 8006c98:	08006aa5 	.word	0x08006aa5
 8006c9c:	0802ac60 	.word	0x0802ac60
 8006ca0:	0802ac38 	.word	0x0802ac38
 8006ca4:	0802ac54 	.word	0x0802ac54

08006ca8 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8006ca8:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8006caa:	4914      	ldr	r1, [pc, #80]	; (8006cfc <locateudp+0x54>)
{
 8006cac:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 8006cae:	4814      	ldr	r0, [pc, #80]	; (8006d00 <locateudp+0x58>)
 8006cb0:	f01d fb28 	bl	8024304 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8006cb4:	4913      	ldr	r1, [pc, #76]	; (8006d04 <locateudp+0x5c>)
 8006cb6:	4811      	ldr	r0, [pc, #68]	; (8006cfc <locateudp+0x54>)
 8006cb8:	f7ff ffb6 	bl	8006c28 <dnslookup>
 8006cbc:	b240      	sxtb	r0, r0
 8006cbe:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8006cc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006cc6:	b9a3      	cbnz	r3, 8006cf2 <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8006cca:	490f      	ldr	r1, [pc, #60]	; (8006d08 <locateudp+0x60>)
	ip = udpdestip.addr;
 8006ccc:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8006cce:	480f      	ldr	r0, [pc, #60]	; (8006d0c <locateudp+0x64>)
 8006cd0:	0e22      	lsrs	r2, r4, #24
 8006cd2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006cd6:	e9cd 3200 	strd	r3, r2, [sp]
 8006cda:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006cde:	b2e2      	uxtb	r2, r4
 8006ce0:	f01d fcfa 	bl	80246d8 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8006ce4:	4909      	ldr	r1, [pc, #36]	; (8006d0c <locateudp+0x64>)
 8006ce6:	480a      	ldr	r0, [pc, #40]	; (8006d10 <locateudp+0x68>)
 8006ce8:	f01d fb0c 	bl	8024304 <iprintf>
	return (ip);
}
 8006cec:	4620      	mov	r0, r4
 8006cee:	b004      	add	sp, #16
 8006cf0:	bd10      	pop	{r4, pc}
		rebootme(3);
 8006cf2:	2003      	movs	r0, #3
 8006cf4:	f7fb feb4 	bl	8002a60 <rebootme>
 8006cf8:	e7e6      	b.n	8006cc8 <locateudp+0x20>
 8006cfa:	bf00      	nop
 8006cfc:	20002eb8 	.word	0x20002eb8
 8006d00:	0802ac84 	.word	0x0802ac84
 8006d04:	20002e6c 	.word	0x20002e6c
 8006d08:	0802aca4 	.word	0x0802aca4
 8006d0c:	20002e5c 	.word	0x20002e5c
 8006d10:	0802acb4 	.word	0x0802acb4

08006d14 <startudp>:

void startudp(uint32_t ip) {
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	ed2d 8b02 	vpush	{d8}
 8006d1c:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006d1e:	f00e ffcd 	bl	8015cbc <xTaskGetCurrentTaskHandle>
 8006d22:	4b75      	ldr	r3, [pc, #468]	; (8006ef8 <startudp+0x1e4>)
 8006d24:	4602      	mov	r2, r0
	osDelay(1000);
 8006d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006d2a:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8006d2c:	f00d fb50 	bl	80143d0 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8006d30:	f018 fb1e 	bl	801f370 <udp_new>
	if (pcb == NULL) {
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f000 80ce 	beq.w	8006ed6 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8006d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3e:	496f      	ldr	r1, [pc, #444]	; (8006efc <startudp+0x1e8>)
 8006d40:	ee08 0a10 	vmov	s16, r0
 8006d44:	f018 f8c4 	bl	801eed0 <udp_bind>
 8006d48:	4605      	mov	r5, r0
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f040 80bf 	bne.w	8006ece <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006d50:	2241      	movs	r2, #65	; 0x41
 8006d52:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8006d56:	2036      	movs	r0, #54	; 0x36
 8006d58:	f013 f838 	bl	8019dcc <pbuf_alloc>

	if (p1 == NULL) {
 8006d5c:	9000      	str	r0, [sp, #0]
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f000 80bd 	beq.w	8006ede <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8006d64:	4c66      	ldr	r4, [pc, #408]	; (8006f00 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006d66:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8006d6a:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006d6c:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8006d72:	2241      	movs	r2, #65	; 0x41
 8006d74:	f013 f82a 	bl	8019dcc <pbuf_alloc>
	if (p2 == NULL) {
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f000 80b7 	beq.w	8006eee <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8006d80:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8006d82:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8006d84:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8006d86:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8006d88:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8006d8c:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f013 f81c 	bl	8019dcc <pbuf_alloc>
	if (ps == NULL) {
 8006d94:	ee08 0a90 	vmov	s17, r0
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 80aa 	beq.w	8006ef2 <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8006d9e:	4c59      	ldr	r4, [pc, #356]	; (8006f04 <startudp+0x1f0>)
 8006da0:	4f59      	ldr	r7, [pc, #356]	; (8006f08 <startudp+0x1f4>)
 8006da2:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8006da4:	f241 3088 	movw	r0, #5000	; 0x1388
 8006da8:	f00d fb12 	bl	80143d0 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8006dac:	4b57      	ldr	r3, [pc, #348]	; (8006f0c <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 8006dae:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006db0:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 8006db2:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8006db4:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8006db6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8006dba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006dbe:	4b54      	ldr	r3, [pc, #336]	; (8006f10 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006dc0:	4854      	ldr	r0, [pc, #336]	; (8006f14 <startudp+0x200>)
 8006dc2:	4e55      	ldr	r6, [pc, #340]	; (8006f18 <startudp+0x204>)
 8006dc4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8006f50 <startudp+0x23c>
 8006dc8:	f8df a188 	ldr.w	sl, [pc, #392]	; 8006f54 <startudp+0x240>
 8006dcc:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006f58 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006dd0:	4d52      	ldr	r5, [pc, #328]	; (8006f1c <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006dd2:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006dd4:	f01d fb32 	bl	802443c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f00f f8b5 	bl	8015f4c <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d05a      	beq.n	8006e9c <startudp+0x188>
			sigsend = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8006dea:	7833      	ldrb	r3, [r6, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f3      	beq.n	8006dd8 <startudp+0xc4>
 8006df0:	f8db 3000 	ldr.w	r3, [fp]
 8006df4:	f8da 2000 	ldr.w	r2, [sl]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d1ed      	bne.n	8006dd8 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006dfc:	4a48      	ldr	r2, [pc, #288]	; (8006f20 <startudp+0x20c>)
 8006dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	bf08      	it	eq
 8006e08:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006e0a:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006e0c:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006e0e:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	684b      	ldr	r3, [r1, #4]
 8006e14:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	684a      	ldr	r2, [r1, #4]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	684a      	ldr	r2, [r1, #4]
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8006e26:	7b89      	ldrb	r1, [r1, #14]
 8006e28:	2901      	cmp	r1, #1
 8006e2a:	d006      	beq.n	8006e3a <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f01d fa69 	bl	8024304 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8006e32:	f899 100e 	ldrb.w	r1, [r9, #14]
 8006e36:	2901      	cmp	r1, #1
 8006e38:	d1f8      	bne.n	8006e2c <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8006e3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e3e:	4649      	mov	r1, r9
 8006e40:	4a38      	ldr	r2, [pc, #224]	; (8006f24 <startudp+0x210>)
 8006e42:	ee18 0a10 	vmov	r0, s16
 8006e46:	f7ff fe53 	bl	8006af0 <sendudp>
 8006e4a:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 8006e4e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006e52:	3301      	adds	r3, #1
 8006e54:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8006e58:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <startudp+0x214>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0b2      	beq.n	8006dd8 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8006e72:	492e      	ldr	r1, [pc, #184]	; (8006f2c <startudp+0x218>)
 8006e74:	ee18 2a10 	vmov	r2, s16
 8006e78:	2001      	movs	r0, #1
 8006e7a:	780b      	ldrb	r3, [r1, #0]
 8006e7c:	ee18 1a90 	vmov	r1, s17
 8006e80:	f7ff fe72 	bl	8006b68 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8006e84:	2300      	movs	r3, #0
 8006e86:	4a28      	ldr	r2, [pc, #160]	; (8006f28 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006e88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e8c:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8006e8e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8006e92:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8006e94:	f00f f85a 	bl	8015f4c <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1a4      	bne.n	8006de6 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <startudp+0x21c>)
 8006e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d097      	beq.n	8006dd8 <startudp+0xc4>
 8006ea8:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <startudp+0x220>)
 8006eaa:	4923      	ldr	r1, [pc, #140]	; (8006f38 <startudp+0x224>)
 8006eac:	fb02 f203 	mul.w	r2, r2, r3
 8006eb0:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8006eb4:	d390      	bcc.n	8006dd8 <startudp+0xc4>
		talive = t1sec;
 8006eb6:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8006eba:	ee18 2a10 	vmov	r2, s16
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <startudp+0x218>)
 8006ec0:	ee18 1a90 	vmov	r1, s17
 8006ec4:	2002      	movs	r0, #2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f7ff fe4e 	bl	8006b68 <sendstatus>
 8006ecc:	e784      	b.n	8006dd8 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 8006ece:	481b      	ldr	r0, [pc, #108]	; (8006f3c <startudp+0x228>)
 8006ed0:	f01d fab4 	bl	802443c <puts>
		for (;;)
 8006ed4:	e7fe      	b.n	8006ed4 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8006ed6:	481a      	ldr	r0, [pc, #104]	; (8006f40 <startudp+0x22c>)
 8006ed8:	f01d fab0 	bl	802443c <puts>
		for (;;)
 8006edc:	e7fe      	b.n	8006edc <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 8006ede:	4819      	ldr	r0, [pc, #100]	; (8006f44 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8006ee0:	b005      	add	sp, #20
 8006ee2:	ecbd 8b02 	vpop	{d8}
 8006ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8006eea:	f01d baa7 	b.w	802443c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 8006eee:	4816      	ldr	r0, [pc, #88]	; (8006f48 <startudp+0x234>)
 8006ef0:	e7f6      	b.n	8006ee0 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 8006ef2:	4816      	ldr	r0, [pc, #88]	; (8006f4c <startudp+0x238>)
 8006ef4:	e7f4      	b.n	8006ee0 <startudp+0x1cc>
 8006ef6:	bf00      	nop
 8006ef8:	200007fc 	.word	0x200007fc
 8006efc:	080443ac 	.word	0x080443ac
 8006f00:	2000074c 	.word	0x2000074c
 8006f04:	20002ca4 	.word	0x20002ca4
 8006f08:	20000764 	.word	0x20000764
 8006f0c:	dec0edfe 	.word	0xdec0edfe
 8006f10:	2000074a 	.word	0x2000074a
 8006f14:	0802ad60 	.word	0x0802ad60
 8006f18:	20002e50 	.word	0x20002e50
 8006f1c:	0802ad94 	.word	0x0802ad94
 8006f20:	200006f0 	.word	0x200006f0
 8006f24:	20002e6c 	.word	0x20002e6c
 8006f28:	2000075c 	.word	0x2000075c
 8006f2c:	200006dc 	.word	0x200006dc
 8006f30:	20002ab8 	.word	0x20002ab8
 8006f34:	eeeeeeef 	.word	0xeeeeeeef
 8006f38:	02222222 	.word	0x02222222
 8006f3c:	0802ace4 	.word	0x0802ace4
 8006f40:	0802acc8 	.word	0x0802acc8
 8006f44:	0802ad00 	.word	0x0802ad00
 8006f48:	0802ad20 	.word	0x0802ad20
 8006f4c:	0802ad40 	.word	0x0802ad40
 8006f50:	20002e4c 	.word	0x20002e4c
 8006f54:	200006fc 	.word	0x200006fc
 8006f58:	20002e58 	.word	0x20002e58

08006f5c <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8006f5e:	4b52      	ldr	r3, [pc, #328]	; (80070a8 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006f60:	4606      	mov	r6, r0
 8006f62:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006f64:	4851      	ldr	r0, [pc, #324]	; (80070ac <tag_callback+0x150>)
	if (ledsenabled) {
 8006f66:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8006f6c:	b35a      	cbz	r2, 8006fc6 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006f6e:	f003 fe63 	bl	800ac38 <HAL_GPIO_TogglePin>
 8006f72:	4c4f      	ldr	r4, [pc, #316]	; (80070b0 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8006f74:	4d4f      	ldr	r5, [pc, #316]	; (80070b4 <tag_callback+0x158>)
 8006f76:	e001      	b.n	8006f7c <tag_callback+0x20>
 8006f78:	f01d fa60 	bl	802443c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	f00d ffea 	bl	8014f58 <xQueueSemaphoreTake>
 8006f84:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8006f86:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d1f5      	bne.n	8006f78 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8006f8c:	1f32      	subs	r2, r6, #4
 8006f8e:	2a07      	cmp	r2, #7
 8006f90:	d81c      	bhi.n	8006fcc <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8006f92:	4949      	ldr	r1, [pc, #292]	; (80070b8 <tag_callback+0x15c>)
 8006f94:	4093      	lsls	r3, r2
 8006f96:	780a      	ldrb	r2, [r1, #0]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	4a48      	ldr	r2, [pc, #288]	; (80070bc <tag_callback+0x160>)
 8006f9c:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8006f9e:	bb5b      	cbnz	r3, 8006ff8 <tag_callback+0x9c>
			strcpy(newstring, "0");
 8006fa0:	4b47      	ldr	r3, [pc, #284]	; (80070c0 <tag_callback+0x164>)
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	f00d fd39 	bl	8014a24 <xQueueGenericSend>
 8006fb2:	2801      	cmp	r0, #1
 8006fb4:	d002      	beq.n	8006fbc <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8006fb6:	4843      	ldr	r0, [pc, #268]	; (80070c4 <tag_callback+0x168>)
 8006fb8:	f01d fa40 	bl	802443c <puts>
	}
	return (strlen(newstring));
 8006fbc:	4638      	mov	r0, r7
}
 8006fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8006fc2:	f7f9 b947 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8006fc6:	f003 fe1d 	bl	800ac04 <HAL_GPIO_WritePin>
 8006fca:	e7d2      	b.n	8006f72 <tag_callback+0x16>
		switch (index) {
 8006fcc:	2e14      	cmp	r6, #20
 8006fce:	d817      	bhi.n	8007000 <tag_callback+0xa4>
 8006fd0:	e8df f006 	tbb	[pc, r6]
 8006fd4:	0b655055 	.word	0x0b655055
 8006fd8:	16161616 	.word	0x16161616
 8006fdc:	16161616 	.word	0x16161616
 8006fe0:	343d5a61 	.word	0x343d5a61
 8006fe4:	464b2429 	.word	0x464b2429
 8006fe8:	1c          	.byte	0x1c
 8006fe9:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8006fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fee:	482f      	ldr	r0, [pc, #188]	; (80070ac <tag_callback+0x150>)
 8006ff0:	f003 fdf6 	bl	800abe0 <HAL_GPIO_ReadPin>
 8006ff4:	2801      	cmp	r0, #1
 8006ff6:	d1d3      	bne.n	8006fa0 <tag_callback+0x44>
			strcpy(newstring, "1");
 8006ff8:	4b33      	ldr	r3, [pc, #204]	; (80070c8 <tag_callback+0x16c>)
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	803b      	strh	r3, [r7, #0]
 8006ffe:	e7d2      	b.n	8006fa6 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8007000:	4632      	mov	r2, r6
 8007002:	4932      	ldr	r1, [pc, #200]	; (80070cc <tag_callback+0x170>)
 8007004:	4638      	mov	r0, r7
 8007006:	f01d fb67 	bl	80246d8 <siprintf>
			break;
 800700a:	e7cc      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 800700c:	4b30      	ldr	r3, [pc, #192]	; (80070d0 <tag_callback+0x174>)
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf14      	ite	ne
 8007014:	2331      	movne	r3, #49	; 0x31
 8007016:	2330      	moveq	r3, #48	; 0x30
 8007018:	803b      	strh	r3, [r7, #0]
			break;
 800701a:	e7c4      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 800701c:	492d      	ldr	r1, [pc, #180]	; (80070d4 <tag_callback+0x178>)
 800701e:	4638      	mov	r0, r7
 8007020:	f01d fc01 	bl	8024826 <strcpy>
			break;
 8007024:	e7bf      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8007026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800702a:	482b      	ldr	r0, [pc, #172]	; (80070d8 <tag_callback+0x17c>)
 800702c:	f003 fdd8 	bl	800abe0 <HAL_GPIO_ReadPin>
 8007030:	2800      	cmp	r0, #0
 8007032:	bf14      	ite	ne
 8007034:	2330      	movne	r3, #48	; 0x30
 8007036:	2331      	moveq	r3, #49	; 0x31
 8007038:	803b      	strh	r3, [r7, #0]
			break;
 800703a:	e7b4      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <tag_callback+0x180>)
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	f013 0f04 	tst.w	r3, #4
 8007044:	bf14      	ite	ne
 8007046:	2331      	movne	r3, #49	; 0x31
 8007048:	2330      	moveq	r3, #48	; 0x30
 800704a:	803b      	strh	r3, [r7, #0]
			break;
 800704c:	e7ab      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 800704e:	4b23      	ldr	r3, [pc, #140]	; (80070dc <tag_callback+0x180>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f013 0f02 	tst.w	r3, #2
 8007056:	bf14      	ite	ne
 8007058:	2331      	movne	r3, #49	; 0x31
 800705a:	2330      	moveq	r3, #48	; 0x30
 800705c:	803b      	strh	r3, [r7, #0]
			break;
 800705e:	e7a2      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 8007060:	491f      	ldr	r1, [pc, #124]	; (80070e0 <tag_callback+0x184>)
 8007062:	4638      	mov	r0, r7
 8007064:	f01d fbdf 	bl	8024826 <strcpy>
			break;
 8007068:	e79d      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 800706a:	491e      	ldr	r1, [pc, #120]	; (80070e4 <tag_callback+0x188>)
 800706c:	4638      	mov	r0, r7
 800706e:	f01d fbda 	bl	8024826 <strcpy>
			break;
 8007072:	e798      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 8007074:	491c      	ldr	r1, [pc, #112]	; (80070e8 <tag_callback+0x18c>)
 8007076:	4638      	mov	r0, r7
 8007078:	f01d fbd5 	bl	8024826 <strcpy>
			break;
 800707c:	e793      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 800707e:	491b      	ldr	r1, [pc, #108]	; (80070ec <tag_callback+0x190>)
 8007080:	4638      	mov	r0, r7
 8007082:	f01d fbd0 	bl	8024826 <strcpy>
			break;
 8007086:	e78e      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8007088:	4b14      	ldr	r3, [pc, #80]	; (80070dc <tag_callback+0x180>)
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	3330      	adds	r3, #48	; 0x30
 8007092:	803b      	strh	r3, [r7, #0]
			break;
 8007094:	e787      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8007096:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <tag_callback+0x194>)
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	803b      	strh	r3, [r7, #0]
			break;
 800709c:	e783      	b.n	8006fa6 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 800709e:	4915      	ldr	r1, [pc, #84]	; (80070f4 <tag_callback+0x198>)
 80070a0:	4638      	mov	r0, r7
 80070a2:	f01d fbc0 	bl	8024826 <strcpy>
			break;
 80070a6:	e77e      	b.n	8006fa6 <tag_callback+0x4a>
 80070a8:	20000270 	.word	0x20000270
 80070ac:	40020c00 	.word	0x40020c00
 80070b0:	20002ab4 	.word	0x20002ab4
 80070b4:	0802ae7c 	.word	0x0802ae7c
 80070b8:	20000274 	.word	0x20000274
 80070bc:	20002e70 	.word	0x20002e70
 80070c0:	08043f88 	.word	0x08043f88
 80070c4:	0802aea8 	.word	0x0802aea8
 80070c8:	0802ac5c 	.word	0x0802ac5c
 80070cc:	0802ae88 	.word	0x0802ae88
 80070d0:	20000010 	.word	0x20000010
 80070d4:	20000084 	.word	0x20000084
 80070d8:	40021000 	.word	0x40021000
 80070dc:	20002dd8 	.word	0x20002dd8
 80070e0:	20000014 	.word	0x20000014
 80070e4:	20000128 	.word	0x20000128
 80070e8:	20000074 	.word	0x20000074
 80070ec:	20000230 	.word	0x20000230
 80070f0:	0804236c 	.word	0x0804236c
 80070f4:	20000054 	.word	0x20000054

080070f8 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	b085      	sub	sp, #20
 80070fe:	4615      	mov	r5, r2
 8007100:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007102:	220a      	movs	r2, #10
 8007104:	a903      	add	r1, sp, #12
 8007106:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8007108:	4699      	mov	r9, r3
 800710a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800710c:	f01e f966 	bl	80253dc <strtol>
 8007110:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8007112:	4621      	mov	r1, r4
 8007114:	462a      	mov	r2, r5
 8007116:	4871      	ldr	r0, [pc, #452]	; (80072dc <httpd_cgi_handler+0x1e4>)
 8007118:	4633      	mov	r3, r6
 800711a:	f01d f8f3 	bl	8024304 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800711e:	2d00      	cmp	r5, #0
 8007120:	dd37      	ble.n	8007192 <httpd_cgi_handler+0x9a>
 8007122:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007124:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 800730c <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007128:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8007310 <httpd_cgi_handler+0x218>
		switch (j) {
 800712c:	f1a6 030a 	sub.w	r3, r6, #10
 8007130:	2b0e      	cmp	r3, #14
 8007132:	f200 80cc 	bhi.w	80072ce <httpd_cgi_handler+0x1d6>
 8007136:	e8df f003 	tbb	[pc, r3]
 800713a:	9eb6      	.short	0x9eb6
 800713c:	08080808 	.word	0x08080808
 8007140:	08080808 	.word	0x08080808
 8007144:	864d6073 	.word	0x864d6073
 8007148:	3a          	.byte	0x3a
 8007149:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 800714a:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 800714c:	2101      	movs	r1, #1
 800714e:	f1a6 000c 	sub.w	r0, r6, #12
 8007152:	4b63      	ldr	r3, [pc, #396]	; (80072e0 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007154:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8007156:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 800715a:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 800715c:	2a30      	cmp	r2, #48	; 0x30
 800715e:	d01b      	beq.n	8007198 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	4311      	orrs	r1, r2
 8007164:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007166:	f001 0202 	and.w	r2, r1, #2
 800716a:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 800716c:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 800716e:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007170:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007174:	f01d f8c6 	bl	8024304 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8007178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800717c:	2301      	movs	r3, #1
 800717e:	4a58      	ldr	r2, [pc, #352]	; (80072e0 <httpd_cgi_handler+0x1e8>)
 8007180:	9100      	str	r1, [sp, #0]
 8007182:	2188      	movs	r1, #136	; 0x88
 8007184:	4857      	ldr	r0, [pc, #348]	; (80072e4 <httpd_cgi_handler+0x1ec>)
 8007186:	f004 f843 	bl	800b210 <HAL_I2C_Master_Transmit>
 800718a:	b960      	cbnz	r0, 80071a6 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800718c:	3401      	adds	r4, #1
 800718e:	42a5      	cmp	r5, r4
 8007190:	d1cc      	bne.n	800712c <httpd_cgi_handler+0x34>
}
 8007192:	b005      	add	sp, #20
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f600 	lsl.w	r6, r1, r0
 800719e:	7819      	ldrb	r1, [r3, #0]
 80071a0:	ea21 0106 	bic.w	r1, r1, r6
 80071a4:	e7df      	b.n	8007166 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 80071a6:	4850      	ldr	r0, [pc, #320]	; (80072e8 <httpd_cgi_handler+0x1f0>)
 80071a8:	f01d f8ac 	bl	8024304 <iprintf>
 80071ac:	e7ee      	b.n	800718c <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	3c01      	subs	r4, #1
 80071b2:	484e      	ldr	r0, [pc, #312]	; (80072ec <httpd_cgi_handler+0x1f4>)
 80071b4:	440c      	add	r4, r1
 80071b6:	4623      	mov	r3, r4
 80071b8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071bc:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80071be:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071c0:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80071c4:	bf18      	it	ne
 80071c6:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071c8:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80071ca:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071cc:	dcf3      	bgt.n	80071b6 <httpd_cgi_handler+0xbe>
}
 80071ce:	b005      	add	sp, #20
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	4e46      	ldr	r6, [pc, #280]	; (80072f0 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f9b6 0000 	ldrsh.w	r0, [r6]
 80071dc:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071de:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 80071e0:	2b30      	cmp	r3, #48	; 0x30
 80071e2:	bf0c      	ite	eq
 80071e4:	f020 0001 	biceq.w	r0, r0, #1
 80071e8:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 80071ec:	f7fd fea0 	bl	8004f30 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80071f0:	42a5      	cmp	r5, r4
 80071f2:	dcf0      	bgt.n	80071d6 <httpd_cgi_handler+0xde>
}
 80071f4:	b005      	add	sp, #20
 80071f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fa:	4e3d      	ldr	r6, [pc, #244]	; (80072f0 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007202:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007204:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007206:	2b30      	cmp	r3, #48	; 0x30
 8007208:	bf0c      	ite	eq
 800720a:	f020 0002 	biceq.w	r0, r0, #2
 800720e:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8007212:	f7fd fe8d 	bl	8004f30 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007216:	42a5      	cmp	r5, r4
 8007218:	dcf0      	bgt.n	80071fc <httpd_cgi_handler+0x104>
}
 800721a:	b005      	add	sp, #20
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	4e33      	ldr	r6, [pc, #204]	; (80072f0 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007228:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800722a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800722c:	2b30      	cmp	r3, #48	; 0x30
 800722e:	bf0c      	ite	eq
 8007230:	f020 0004 	biceq.w	r0, r0, #4
 8007234:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8007238:	f7fd fe7a 	bl	8004f30 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800723c:	42a5      	cmp	r5, r4
 800723e:	dcf0      	bgt.n	8007222 <httpd_cgi_handler+0x12a>
}
 8007240:	b005      	add	sp, #20
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007248:	4e2a      	ldr	r6, [pc, #168]	; (80072f4 <httpd_cgi_handler+0x1fc>)
 800724a:	e004      	b.n	8007256 <httpd_cgi_handler+0x15e>
 800724c:	f003 fcda 	bl	800ac04 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007250:	42a5      	cmp	r5, r4
 8007252:	dd9e      	ble.n	8007192 <httpd_cgi_handler+0x9a>
 8007254:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8007256:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007258:	2201      	movs	r2, #1
 800725a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800725e:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8007260:	4423      	add	r3, r4
 8007262:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007266:	2b31      	cmp	r3, #49	; 0x31
 8007268:	d1f0      	bne.n	800724c <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 800726a:	2200      	movs	r2, #0
 800726c:	f003 fcca 	bl	800ac04 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007270:	42a5      	cmp	r5, r4
 8007272:	dcef      	bgt.n	8007254 <httpd_cgi_handler+0x15c>
 8007274:	e78d      	b.n	8007192 <httpd_cgi_handler+0x9a>
 8007276:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007278:	4e1f      	ldr	r6, [pc, #124]	; (80072f8 <httpd_cgi_handler+0x200>)
 800727a:	e004      	b.n	8007286 <httpd_cgi_handler+0x18e>
 800727c:	f003 fcc2 	bl	800ac04 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007280:	42ac      	cmp	r4, r5
 8007282:	da86      	bge.n	8007192 <httpd_cgi_handler+0x9a>
 8007284:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8007286:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007288:	2201      	movs	r2, #1
 800728a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800728e:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8007290:	4423      	add	r3, r4
 8007292:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	d1f0      	bne.n	800727c <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 800729a:	2200      	movs	r2, #0
 800729c:	f003 fcb2 	bl	800ac04 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80072a0:	42a5      	cmp	r5, r4
 80072a2:	dcef      	bgt.n	8007284 <httpd_cgi_handler+0x18c>
 80072a4:	e775      	b.n	8007192 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 80072a6:	4815      	ldr	r0, [pc, #84]	; (80072fc <httpd_cgi_handler+0x204>)
 80072a8:	f01d f8c8 	bl	802443c <puts>
			osDelay(1000);
 80072ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072b0:	f00d f88e 	bl	80143d0 <osDelay>
 80072b4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072b8:	4911      	ldr	r1, [pc, #68]	; (8007300 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072bc:	68ca      	ldr	r2, [r1, #12]
 80072be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60cb      	str	r3, [r1, #12]
 80072c6:	f3bf 8f4f 	dsb	sy
    __NOP();
 80072ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80072cc:	e7fd      	b.n	80072ca <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80072ce:	f8d9 1000 	ldr.w	r1, [r9]
 80072d2:	480d      	ldr	r0, [pc, #52]	; (8007308 <httpd_cgi_handler+0x210>)
 80072d4:	f01d f816 	bl	8024304 <iprintf>
			break;
 80072d8:	e758      	b.n	800718c <httpd_cgi_handler+0x94>
 80072da:	bf00      	nop
 80072dc:	0802aec0 	.word	0x0802aec0
 80072e0:	20000274 	.word	0x20000274
 80072e4:	20002258 	.word	0x20002258
 80072e8:	0802a7f0 	.word	0x0802a7f0
 80072ec:	20000010 	.word	0x20000010
 80072f0:	20002dd8 	.word	0x20002dd8
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40020c00 	.word	0x40020c00
 80072fc:	0802aeec 	.word	0x0802aeec
 8007300:	e000ed00 	.word	0xe000ed00
 8007304:	05fa0004 	.word	0x05fa0004
 8007308:	0802af24 	.word	0x0802af24
 800730c:	20002dd4 	.word	0x20002dd4
 8007310:	0802af08 	.word	0x0802af08

08007314 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8007314:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8007316:	4802      	ldr	r0, [pc, #8]	; (8007320 <httpd_post_receive_data+0xc>)
 8007318:	f01d f890 	bl	802443c <puts>
}
 800731c:	2000      	movs	r0, #0
 800731e:	bd08      	pop	{r3, pc}
 8007320:	0802af44 	.word	0x0802af44

08007324 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8007324:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8007326:	4802      	ldr	r0, [pc, #8]	; (8007330 <httpd_post_begin+0xc>)
 8007328:	f01d f888 	bl	802443c <puts>
}
 800732c:	2000      	movs	r0, #0
 800732e:	bd08      	pop	{r3, pc}
 8007330:	0802af60 	.word	0x0802af60

08007334 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8007334:	4801      	ldr	r0, [pc, #4]	; (800733c <httpd_post_finished+0x8>)
 8007336:	f01d b881 	b.w	802443c <puts>
 800733a:	bf00      	nop
 800733c:	0802af74 	.word	0x0802af74

08007340 <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007340:	4803      	ldr	r0, [pc, #12]	; (8007350 <init_httpd_ssi+0x10>)
 8007342:	2215      	movs	r2, #21
 8007344:	4903      	ldr	r1, [pc, #12]	; (8007354 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8007346:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007348:	f010 fe9e 	bl	8018088 <http_set_ssi_handler>
}
 800734c:	bd08      	pop	{r3, pc}
 800734e:	bf00      	nop
 8007350:	08006f5d 	.word	0x08006f5d
 8007354:	20000280 	.word	0x20000280

08007358 <httpclient>:
		}
	}
}

// sends a URL request to a http server
void httpclient(char Page[64]) {
 8007358:	b510      	push	{r4, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 800735a:	490e      	ldr	r1, [pc, #56]	; (8007394 <httpclient+0x3c>)
void httpclient(char Page[64]) {
 800735c:	b082      	sub	sp, #8
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 800735e:	480e      	ldr	r0, [pc, #56]	; (8007398 <httpclient+0x40>)
 8007360:	f7ff fc62 	bl	8006c28 <dnslookup>
	if (err != ERR_OK)
 8007364:	b990      	cbnz	r0, 800738c <httpclient+0x34>
		rebootme(7);
	ip = remoteip.addr;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <httpclient+0x3c>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8007368:	490b      	ldr	r1, [pc, #44]	; (8007398 <httpclient+0x40>)
	ip = remoteip.addr;
 800736a:	681a      	ldr	r2, [r3, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800736c:	480b      	ldr	r0, [pc, #44]	; (800739c <httpclient+0x44>)
 800736e:	0e14      	lsrs	r4, r2, #24
 8007370:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8007374:	e9cd 3400 	strd	r3, r4, [sp]
 8007378:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	f01c ffc1 	bl	8024304 <iprintf>
	result = hc_open(remoteip, Page, Postvars, returnpage);
#endif
	initfilehttpclient();
//	printf("result=%d\n", result);

}
 8007382:	b002      	add	sp, #8
 8007384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	initfilehttpclient();
 8007388:	f7fa b8f0 	b.w	800156c <initfilehttpclient>
		rebootme(7);
 800738c:	2007      	movs	r0, #7
 800738e:	f7fb fb67 	bl	8002a60 <rebootme>
 8007392:	e7e8      	b.n	8007366 <httpclient+0xe>
 8007394:	20002e74 	.word	0x20002e74
 8007398:	08028d78 	.word	0x08028d78
 800739c:	0802b144 	.word	0x0802b144

080073a0 <initialapisn>:


// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 80073a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int i;

	i = 1;
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80073a4:	4e2a      	ldr	r6, [pc, #168]	; (8007450 <initialapisn+0xb0>)
 80073a6:	f64f 62ed 	movw	r2, #65261	; 0xfeed
void initialapisn() {
 80073aa:	b083      	sub	sp, #12
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80073ac:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d148      	bne.n	8007448 <initialapisn+0xa8>
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
		sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80073b6:	4d27      	ldr	r5, [pc, #156]	; (8007454 <initialapisn+0xb4>)
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80073b8:	2101      	movs	r1, #1
 80073ba:	4827      	ldr	r0, [pc, #156]	; (8007458 <initialapisn+0xb8>)
		httpclient(stmuid);		// get sn and targ
#if 1
		statuspkt.uid = 3;		// zzz
#endif
		osDelay(5000);
		i++;
 80073bc:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80073be:	f01c ffa1 	bl	8024304 <iprintf>
		sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80073c2:	f8d5 1428 	ldr.w	r1, [r5, #1064]	; 0x428
 80073c6:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 80073ca:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 80073ce:	4823      	ldr	r0, [pc, #140]	; (800745c <initialapisn+0xbc>)
 80073d0:	9100      	str	r1, [sp, #0]
 80073d2:	4923      	ldr	r1, [pc, #140]	; (8007460 <initialapisn+0xc0>)
 80073d4:	f01d f980 	bl	80246d8 <siprintf>
		httpclient(stmuid);		// get sn and targ
 80073d8:	4820      	ldr	r0, [pc, #128]	; (800745c <initialapisn+0xbc>)
 80073da:	f7ff ffbd 	bl	8007358 <httpclient>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80073de:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007458 <initialapisn+0xb8>
		statuspkt.uid = 3;		// zzz
 80073e2:	2303      	movs	r3, #3
		sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80073e4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007460 <initialapisn+0xc0>
		osDelay(5000);
 80073e8:	f241 3088 	movw	r0, #5000	; 0x1388
		statuspkt.uid = 3;		// zzz
 80073ec:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
		osDelay(5000);
 80073f0:	f00c ffee 	bl	80143d0 <osDelay>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 80073f4:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
 80073f8:	f64f 62ed 	movw	r2, #65261	; 0xfeed
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80073fc:	4621      	mov	r1, r4
 80073fe:	4648      	mov	r0, r9
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007400:	b29b      	uxth	r3, r3
		i++;
 8007402:	3401      	adds	r4, #1
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007404:	4293      	cmp	r3, r2
 8007406:	d11f      	bne.n	8007448 <initialapisn+0xa8>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8007408:	f01c ff7c 	bl	8024304 <iprintf>
		sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800740c:	f8d5 7428 	ldr.w	r7, [r5, #1064]	; 0x428
 8007410:	f8d5 3424 	ldr.w	r3, [r5, #1060]	; 0x424
 8007414:	4641      	mov	r1, r8
 8007416:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
 800741a:	4810      	ldr	r0, [pc, #64]	; (800745c <initialapisn+0xbc>)
 800741c:	9700      	str	r7, [sp, #0]
 800741e:	f01d f95b 	bl	80246d8 <siprintf>
		httpclient(stmuid);		// get sn and targ
 8007422:	480e      	ldr	r0, [pc, #56]	; (800745c <initialapisn+0xbc>)
 8007424:	f7ff ff98 	bl	8007358 <httpclient>
		statuspkt.uid = 3;		// zzz
 8007428:	2303      	movs	r3, #3
		osDelay(5000);
 800742a:	f241 3088 	movw	r0, #5000	; 0x1388
		statuspkt.uid = 3;		// zzz
 800742e:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
		osDelay(5000);
 8007432:	f00c ffcd 	bl	80143d0 <osDelay>
		if (i > 10) {
 8007436:	2c0a      	cmp	r4, #10
 8007438:	dddc      	ble.n	80073f4 <initialapisn+0x54>
			printf("************* ABORTED **************\n");
 800743a:	480a      	ldr	r0, [pc, #40]	; (8007464 <initialapisn+0xc4>)
 800743c:	f01c fffe 	bl	802443c <puts>
			rebootme(8);
 8007440:	2008      	movs	r0, #8
 8007442:	f7fb fb0d 	bl	8002a60 <rebootme>
 8007446:	e7d5      	b.n	80073f4 <initialapisn+0x54>
		}
	}
}
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800744e:	bf00      	nop
 8007450:	20002ca4 	.word	0x20002ca4
 8007454:	1ff0f000 	.word	0x1ff0f000
 8007458:	0802b16c 	.word	0x0802b16c
 800745c:	20002e78 	.word	0x20002e78
 8007460:	0802b19c 	.word	0x0802b19c
 8007464:	0802b1b4 	.word	0x0802b1b4

08007468 <requestapisn>:

void requestapisn() {
 8007468:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 800746a:	4804      	ldr	r0, [pc, #16]	; (800747c <requestapisn+0x14>)
 800746c:	f01c ffe6 	bl	802443c <puts>
	httpclient(stmuid);		// get sn and targ
 8007470:	4803      	ldr	r0, [pc, #12]	; (8007480 <requestapisn+0x18>)
}
 8007472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 8007476:	f7ff bf6f 	b.w	8007358 <httpclient>
 800747a:	bf00      	nop
 800747c:	0802b1dc 	.word	0x0802b1dc
 8007480:	20002e78 	.word	0x20002e78

08007484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8007484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800748a:	e003      	b.n	8007494 <LoopCopyDataInit>

0800748c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800748e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007492:	3104      	adds	r1, #4

08007494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007494:	480b      	ldr	r0, [pc, #44]	; (80074c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800749a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800749c:	d3f6      	bcc.n	800748c <CopyDataInit>
  ldr  r2, =_sbss
 800749e:	4a0b      	ldr	r2, [pc, #44]	; (80074cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80074a0:	e002      	b.n	80074a8 <LoopFillZerobss>

080074a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80074a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074a4:	f842 3b04 	str.w	r3, [r2], #4

080074a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074a8:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074ac:	d3f9      	bcc.n	80074a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80074ae:	f7ff facf 	bl	8006a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074b2:	f01b fe05 	bl	80230c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074b6:	f7fc f925 	bl	8003704 <main>
  bx  lr    
 80074ba:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80074bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80074c0:	08044efc 	.word	0x08044efc
  ldr  r0, =_sdata
 80074c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80074c8:	200006bc 	.word	0x200006bc
  ldr  r2, =_sbss
 80074cc:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 80074d0:	2002f894 	.word	0x2002f894

080074d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074d4:	e7fe      	b.n	80074d4 <CAN1_RX0_IRQHandler>
 80074d6:	Address 0x00000000080074d6 is out of bounds.


080074d8 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074d8:	4a07      	ldr	r2, [pc, #28]	; (80074f8 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074da:	2003      	movs	r0, #3
{
 80074dc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074de:	6813      	ldr	r3, [r2, #0]
 80074e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074e6:	f000 fc4f 	bl	8007d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7ff f97c 	bl	80067e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074f0:	f7fe f9fa 	bl	80058e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80074f4:	2000      	movs	r0, #0
 80074f6:	bd08      	pop	{r3, pc}
 80074f8:	40023c00 	.word	0x40023c00

080074fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80074fc:	4a03      	ldr	r2, [pc, #12]	; (800750c <HAL_IncTick+0x10>)
 80074fe:	4b04      	ldr	r3, [pc, #16]	; (8007510 <HAL_IncTick+0x14>)
 8007500:	6811      	ldr	r1, [r2, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	440b      	add	r3, r1
 8007506:	6013      	str	r3, [r2, #0]
}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20002ef8 	.word	0x20002ef8
 8007510:	200002d8 	.word	0x200002d8

08007514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007514:	4b01      	ldr	r3, [pc, #4]	; (800751c <HAL_GetTick+0x8>)
 8007516:	6818      	ldr	r0, [r3, #0]
}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20002ef8 	.word	0x20002ef8

08007520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007524:	f7ff fff6 	bl	8007514 <HAL_GetTick>
 8007528:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800752a:	1c63      	adds	r3, r4, #1
 800752c:	d002      	beq.n	8007534 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800752e:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_Delay+0x20>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007534:	f7ff ffee 	bl	8007514 <HAL_GetTick>
 8007538:	1b43      	subs	r3, r0, r5
 800753a:	42a3      	cmp	r3, r4
 800753c:	d3fa      	bcc.n	8007534 <HAL_Delay+0x14>
  {
  }
}
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	200002d8 	.word	0x200002d8

08007544 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007544:	2800      	cmp	r0, #0
 8007546:	f000 8144 	beq.w	80077d2 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800754a:	6803      	ldr	r3, [r0, #0]
 800754c:	49a7      	ldr	r1, [pc, #668]	; (80077ec <HAL_ADC_Init+0x2a8>)
 800754e:	4aa8      	ldr	r2, [pc, #672]	; (80077f0 <HAL_ADC_Init+0x2ac>)
 8007550:	428b      	cmp	r3, r1
 8007552:	bf18      	it	ne
 8007554:	4293      	cmpne	r3, r2
{
 8007556:	b570      	push	{r4, r5, r6, lr}
 8007558:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800755a:	d003      	beq.n	8007564 <HAL_ADC_Init+0x20>
 800755c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007560:	4293      	cmp	r3, r2
 8007562:	d177      	bne.n	8007654 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800756a:	d17c      	bne.n	8007666 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007572:	f040 8082 	bne.w	800767a <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d84e      	bhi.n	800761a <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800757c:	69a3      	ldr	r3, [r4, #24]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d845      	bhi.n	800760e <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007584:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007588:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 800758c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007590:	bf18      	it	ne
 8007592:	2900      	cmpne	r1, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800759e:	bf0c      	ite	eq
 80075a0:	2300      	moveq	r3, #0
 80075a2:	f003 0301 	andne.w	r3, r3, #1
 80075a6:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 80075aa:	bf0c      	ite	eq
 80075ac:	2300      	moveq	r3, #0
 80075ae:	f003 0301 	andne.w	r3, r3, #1
 80075b2:	b123      	cbz	r3, 80075be <HAL_ADC_Init+0x7a>
 80075b4:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 80075b8:	2a01      	cmp	r2, #1
 80075ba:	f200 8111 	bhi.w	80077e0 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80075c4:	d165      	bne.n	8007692 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80075c6:	69e3      	ldr	r3, [r4, #28]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d85b      	bhi.n	8007686 <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80075ce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d830      	bhi.n	8007638 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80075d6:	6963      	ldr	r3, [r4, #20]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d835      	bhi.n	8007648 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80075dc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d823      	bhi.n	800762c <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80075e4:	4b83      	ldr	r3, [pc, #524]	; (80077f4 <HAL_ADC_Init+0x2b0>)
 80075e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d004      	beq.n	80075f6 <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80075ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075ee:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80075f2:	f040 80e8 	bne.w	80077c6 <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80075f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80075f8:	2d00      	cmp	r5, #0
 80075fa:	f000 80d4 	beq.w	80077a6 <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007600:	06db      	lsls	r3, r3, #27
 8007602:	d54c      	bpl.n	800769e <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007604:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8007606:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007608:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800760c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800760e:	f240 1151 	movw	r1, #337	; 0x151
 8007612:	4879      	ldr	r0, [pc, #484]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 8007614:	f7fd f80e 	bl	8004634 <assert_failed>
 8007618:	e7b3      	b.n	8007582 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800761a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800761e:	4876      	ldr	r0, [pc, #472]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 8007620:	f7fd f808 	bl	8004634 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007624:	69a3      	ldr	r3, [r4, #24]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d9ab      	bls.n	8007582 <HAL_ADC_Init+0x3e>
 800762a:	e7f0      	b.n	800760e <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800762c:	f240 1157 	movw	r1, #343	; 0x157
 8007630:	4871      	ldr	r0, [pc, #452]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 8007632:	f7fc ffff 	bl	8004634 <assert_failed>
 8007636:	e7d5      	b.n	80075e4 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007638:	f240 1155 	movw	r1, #341	; 0x155
 800763c:	486e      	ldr	r0, [pc, #440]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 800763e:	f7fc fff9 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007642:	6963      	ldr	r3, [r4, #20]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d9c9      	bls.n	80075dc <HAL_ADC_Init+0x98>
 8007648:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800764c:	486a      	ldr	r0, [pc, #424]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 800764e:	f7fc fff1 	bl	8004634 <assert_failed>
 8007652:	e7c3      	b.n	80075dc <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007654:	f240 114d 	movw	r1, #333	; 0x14d
 8007658:	4867      	ldr	r0, [pc, #412]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 800765a:	f7fc ffeb 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800765e:	6863      	ldr	r3, [r4, #4]
 8007660:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007664:	d082      	beq.n	800756c <HAL_ADC_Init+0x28>
 8007666:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800766a:	4863      	ldr	r0, [pc, #396]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 800766c:	f7fc ffe2 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007676:	f43f af7e 	beq.w	8007576 <HAL_ADC_Init+0x32>
 800767a:	f240 114f 	movw	r1, #335	; 0x14f
 800767e:	485e      	ldr	r0, [pc, #376]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 8007680:	f7fc ffd8 	bl	8004634 <assert_failed>
 8007684:	e777      	b.n	8007576 <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007686:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800768a:	485b      	ldr	r0, [pc, #364]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 800768c:	f7fc ffd2 	bl	8004634 <assert_failed>
 8007690:	e79d      	b.n	80075ce <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007692:	f240 1153 	movw	r1, #339	; 0x153
 8007696:	4858      	ldr	r0, [pc, #352]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 8007698:	f7fc ffcc 	bl	8004634 <assert_failed>
 800769c:	e793      	b.n	80075c6 <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 800769e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076a0:	4b56      	ldr	r3, [pc, #344]	; (80077fc <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80076a2:	4a57      	ldr	r2, [pc, #348]	; (8007800 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 80076a4:	400b      	ands	r3, r1
 80076a6:	f043 0302 	orr.w	r3, r3, #2
 80076aa:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80076ac:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80076ae:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80076b0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80076b4:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80076b6:	6851      	ldr	r1, [r2, #4]
 80076b8:	6860      	ldr	r0, [r4, #4]
 80076ba:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076bc:	484d      	ldr	r0, [pc, #308]	; (80077f4 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80076be:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80076c0:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80076c2:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80076c4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80076c8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076d0:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80076d2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80076da:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076dc:	6859      	ldr	r1, [r3, #4]
 80076de:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076e0:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076e2:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076e4:	6899      	ldr	r1, [r3, #8]
 80076e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80076ea:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076ee:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076f0:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076f2:	ea42 0205 	orr.w	r2, r2, r5
 80076f6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076f8:	d05c      	beq.n	80077b4 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076fa:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80076fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076fe:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007702:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	4311      	orrs	r1, r2
 8007708:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800770a:	6899      	ldr	r1, [r3, #8]
 800770c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8007710:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	432a      	orrs	r2, r5
 8007716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007718:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800771a:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800771c:	f021 0102 	bic.w	r1, r1, #2
 8007720:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007728:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800772a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800772e:	2a00      	cmp	r2, #0
 8007730:	d051      	beq.n	80077d6 <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007732:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007734:	3a01      	subs	r2, #1
 8007736:	2a07      	cmp	r2, #7
 8007738:	d864      	bhi.n	8007804 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800773a:	6859      	ldr	r1, [r3, #4]
 800773c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007740:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007742:	6859      	ldr	r1, [r3, #4]
 8007744:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8007748:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8007750:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8007754:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007756:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007758:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800775c:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800775e:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007764:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007768:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800776a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800776c:	6899      	ldr	r1, [r3, #8]
 800776e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007772:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007774:	6899      	ldr	r1, [r3, #8]
 8007776:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800777a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800777e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007780:	6899      	ldr	r1, [r3, #8]
 8007782:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007786:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800778e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007790:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007794:	f023 0303 	bic.w	r3, r3, #3
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800779e:	2300      	movs	r3, #0
 80077a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7fe f8d6 	bl	8005958 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80077ac:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80077ae:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 80077b2:	e724      	b.n	80075fe <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	e7a8      	b.n	8007718 <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80077c6:	f240 115b 	movw	r1, #347	; 0x15b
 80077ca:	480b      	ldr	r0, [pc, #44]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 80077cc:	f7fc ff32 	bl	8004634 <assert_failed>
 80077d0:	e711      	b.n	80075f6 <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 80077d2:	2001      	movs	r0, #1
}
 80077d4:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	e7b8      	b.n	8007752 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80077e0:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80077e4:	4804      	ldr	r0, [pc, #16]	; (80077f8 <HAL_ADC_Init+0x2b4>)
 80077e6:	f7fc ff25 	bl	8004634 <assert_failed>
 80077ea:	e6e8      	b.n	80075be <HAL_ADC_Init+0x7a>
 80077ec:	40012000 	.word	0x40012000
 80077f0:	40012100 	.word	0x40012100
 80077f4:	0f000001 	.word	0x0f000001
 80077f8:	0802b204 	.word	0x0802b204
 80077fc:	ffffeefd 	.word	0xffffeefd
 8007800:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007804:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8007808:	4803      	ldr	r0, [pc, #12]	; (8007818 <HAL_ADC_Init+0x2d4>)
 800780a:	f7fc ff13 	bl	8004634 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800780e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007810:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007812:	3a01      	subs	r2, #1
 8007814:	e791      	b.n	800773a <HAL_ADC_Init+0x1f6>
 8007816:	bf00      	nop
 8007818:	0802b204 	.word	0x0802b204

0800781c <HAL_ADC_Start>:
{
 800781c:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 800781e:	2300      	movs	r3, #0
{
 8007820:	b082      	sub	sp, #8
 8007822:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8007824:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007826:	6983      	ldr	r3, [r0, #24]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d904      	bls.n	8007836 <HAL_ADC_Start+0x1a>
 800782c:	f240 21df 	movw	r1, #735	; 0x2df
 8007830:	4848      	ldr	r0, [pc, #288]	; (8007954 <HAL_ADC_Start+0x138>)
 8007832:	f7fc feff 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007838:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800783c:	d174      	bne.n	8007928 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 800783e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d079      	beq.n	800793a <HAL_ADC_Start+0x11e>
 8007846:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007848:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 800784a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800784e:	6893      	ldr	r3, [r2, #8]
 8007850:	07d8      	lsls	r0, r3, #31
 8007852:	d414      	bmi.n	800787e <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007854:	4b40      	ldr	r3, [pc, #256]	; (8007958 <HAL_ADC_Start+0x13c>)
 8007856:	4841      	ldr	r0, [pc, #260]	; (800795c <HAL_ADC_Start+0x140>)
 8007858:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800785a:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800785c:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8007860:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007864:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8007866:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800786c:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	b12b      	cbz	r3, 800787e <HAL_ADC_Start+0x62>
      counter--;
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	3b01      	subs	r3, #1
 8007876:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f9      	bne.n	8007872 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800787e:	6890      	ldr	r0, [r2, #8]
 8007880:	f010 0001 	ands.w	r0, r0, #1
 8007884:	d02c      	beq.n	80078e0 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8007886:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007888:	4b35      	ldr	r3, [pc, #212]	; (8007960 <HAL_ADC_Start+0x144>)
 800788a:	400b      	ands	r3, r1
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007892:	6853      	ldr	r3, [r2, #4]
 8007894:	0559      	lsls	r1, r3, #21
 8007896:	d505      	bpl.n	80078a4 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800789a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800789e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078a2:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078a6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80078aa:	d02f      	beq.n	800790c <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80078ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078ae:	f023 0306 	bic.w	r3, r3, #6
 80078b2:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80078b8:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80078ba:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 80078bc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078c0:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80078c2:	6858      	ldr	r0, [r3, #4]
 80078c4:	f010 001f 	ands.w	r0, r0, #31
 80078c8:	d114      	bne.n	80078f4 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80078ca:	6893      	ldr	r3, [r2, #8]
 80078cc:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80078d0:	d10e      	bne.n	80078f0 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078d2:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 80078d4:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078d6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80078da:	6091      	str	r1, [r2, #8]
}
 80078dc:	b002      	add	sp, #8
 80078de:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078e2:	f043 0310 	orr.w	r3, r3, #16
 80078e6:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6463      	str	r3, [r4, #68]	; 0x44
}
 80078f0:	b002      	add	sp, #8
 80078f2:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078f4:	481c      	ldr	r0, [pc, #112]	; (8007968 <HAL_ADC_Start+0x14c>)
 80078f6:	4282      	cmp	r2, r0
 80078f8:	d00a      	beq.n	8007910 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80078fa:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078fc:	06db      	lsls	r3, r3, #27
 80078fe:	d402      	bmi.n	8007906 <HAL_ADC_Start+0xea>
 8007900:	4c1a      	ldr	r4, [pc, #104]	; (800796c <HAL_ADC_Start+0x150>)
 8007902:	42a2      	cmp	r2, r4
 8007904:	d01c      	beq.n	8007940 <HAL_ADC_Start+0x124>
  return HAL_OK;
 8007906:	2000      	movs	r0, #0
}
 8007908:	b002      	add	sp, #8
 800790a:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 800790c:	6463      	str	r3, [r4, #68]	; 0x44
 800790e:	e7d1      	b.n	80078b4 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007910:	6893      	ldr	r3, [r2, #8]
 8007912:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8007916:	d103      	bne.n	8007920 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007918:	6893      	ldr	r3, [r2, #8]
 800791a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800791e:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8007922:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007924:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007926:	e7e3      	b.n	80078f0 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007928:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800792c:	4809      	ldr	r0, [pc, #36]	; (8007954 <HAL_ADC_Start+0x138>)
 800792e:	f7fc fe81 	bl	8004634 <assert_failed>
  __HAL_LOCK(hadc);
 8007932:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d185      	bne.n	8007846 <HAL_ADC_Start+0x2a>
 800793a:	2002      	movs	r0, #2
}
 800793c:	b002      	add	sp, #8
 800793e:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007940:	68a0      	ldr	r0, [r4, #8]
 8007942:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8007946:	d1de      	bne.n	8007906 <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800794e:	60a3      	str	r3, [r4, #8]
 8007950:	e7ce      	b.n	80078f0 <HAL_ADC_Start+0xd4>
 8007952:	bf00      	nop
 8007954:	0802b204 	.word	0x0802b204
 8007958:	2000027c 	.word	0x2000027c
 800795c:	431bde83 	.word	0x431bde83
 8007960:	fffff8fe 	.word	0xfffff8fe
 8007964:	40012300 	.word	0x40012300
 8007968:	40012000 	.word	0x40012000
 800796c:	40012200 	.word	0x40012200

08007970 <HAL_ADC_ConvCpltCallback>:
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop

08007974 <HAL_ADC_LevelOutOfWindowCallback>:
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop

08007978 <HAL_ADC_ErrorCallback>:
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop

0800797c <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800797c:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 800797e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007980:	2a01      	cmp	r2, #1
{
 8007982:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8007984:	681d      	ldr	r5, [r3, #0]
{
 8007986:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007988:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800798a:	d904      	bls.n	8007996 <HAL_ADC_IRQHandler+0x1a>
 800798c:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8007990:	4851      	ldr	r0, [pc, #324]	; (8007ad8 <HAL_ADC_IRQHandler+0x15c>)
 8007992:	f7fc fe4f 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007996:	69e3      	ldr	r3, [r4, #28]
 8007998:	3b01      	subs	r3, #1
 800799a:	2b0f      	cmp	r3, #15
 800799c:	f200 8086 	bhi.w	8007aac <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80079a0:	6963      	ldr	r3, [r4, #20]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d87c      	bhi.n	8007aa0 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80079a6:	07ab      	lsls	r3, r5, #30
 80079a8:	d52c      	bpl.n	8007a04 <HAL_ADC_IRQHandler+0x88>
 80079aa:	06b0      	lsls	r0, r6, #26
 80079ac:	d52a      	bpl.n	8007a04 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80079ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b0:	06d9      	lsls	r1, r3, #27
 80079b2:	d403      	bmi.n	80079bc <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80079b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079ba:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80079c4:	d117      	bne.n	80079f6 <HAL_ADC_IRQHandler+0x7a>
 80079c6:	69a2      	ldr	r2, [r4, #24]
 80079c8:	b9aa      	cbnz	r2, 80079f6 <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079cc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80079d0:	d002      	beq.n	80079d8 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80079d2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079d4:	0552      	lsls	r2, r2, #21
 80079d6:	d40e      	bmi.n	80079f6 <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	f022 0220 	bic.w	r2, r2, #32
 80079de:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079ea:	04d8      	lsls	r0, r3, #19
 80079ec:	d403      	bmi.n	80079f6 <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff ffba 	bl	8007970 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	f06f 0212 	mvn.w	r2, #18
 8007a02:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8007a04:	0769      	lsls	r1, r5, #29
 8007a06:	d530      	bpl.n	8007a6a <HAL_ADC_IRQHandler+0xee>
 8007a08:	0632      	lsls	r2, r6, #24
 8007a0a:	d52e      	bpl.n	8007a6a <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a0e:	06db      	lsls	r3, r3, #27
 8007a10:	d403      	bmi.n	8007a1a <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a18:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007a22:	d11b      	bne.n	8007a5c <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007a26:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007a2a:	d151      	bne.n	8007ad0 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007a2c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007a2e:	0551      	lsls	r1, r2, #21
 8007a30:	d414      	bmi.n	8007a5c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007a32:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007a34:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007a38:	d110      	bne.n	8007a5c <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007a3a:	69a2      	ldr	r2, [r4, #24]
 8007a3c:	b972      	cbnz	r2, 8007a5c <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a44:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a4c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a50:	05da      	lsls	r2, r3, #23
 8007a52:	d403      	bmi.n	8007a5c <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f92f 	bl	8007cc0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	f06f 020c 	mvn.w	r2, #12
 8007a68:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8007a6a:	0673      	lsls	r3, r6, #25
 8007a6c:	d505      	bpl.n	8007a7a <HAL_ADC_IRQHandler+0xfe>
 8007a6e:	07e8      	lsls	r0, r5, #31
 8007a70:	d503      	bpl.n	8007a7a <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d41e      	bmi.n	8007ab8 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 8007a7a:	06aa      	lsls	r2, r5, #26
 8007a7c:	d501      	bpl.n	8007a82 <HAL_ADC_IRQHandler+0x106>
 8007a7e:	0173      	lsls	r3, r6, #5
 8007a80:	d400      	bmi.n	8007a84 <HAL_ADC_IRQHandler+0x108>
}
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007a86:	f06f 0520 	mvn.w	r5, #32
 8007a8a:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8007a8c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007a8e:	f043 0302 	orr.w	r3, r3, #2
 8007a92:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007a94:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 8007a96:	f7ff ff6f 	bl	8007978 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	601d      	str	r5, [r3, #0]
}
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007aa0:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8007aa4:	480c      	ldr	r0, [pc, #48]	; (8007ad8 <HAL_ADC_IRQHandler+0x15c>)
 8007aa6:	f7fc fdc5 	bl	8004634 <assert_failed>
 8007aaa:	e77c      	b.n	80079a6 <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007aac:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8007ab0:	4809      	ldr	r0, [pc, #36]	; (8007ad8 <HAL_ADC_IRQHandler+0x15c>)
 8007ab2:	f7fc fdbf 	bl	8004634 <assert_failed>
 8007ab6:	e773      	b.n	80079a0 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007aba:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ac0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007ac2:	f7ff ff57 	bl	8007974 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f06f 0201 	mvn.w	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e7d4      	b.n	8007a7a <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007ad0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8007ad2:	0550      	lsls	r0, r2, #21
 8007ad4:	d4c2      	bmi.n	8007a5c <HAL_ADC_IRQHandler+0xe0>
 8007ad6:	e7a9      	b.n	8007a2c <HAL_ADC_IRQHandler+0xb0>
 8007ad8:	0802b204 	.word	0x0802b204

08007adc <HAL_ADC_ConfigChannel>:
{
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8007ade:	2300      	movs	r3, #0
{
 8007ae0:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007ae2:	4a71      	ldr	r2, [pc, #452]	; (8007ca8 <HAL_ADC_ConfigChannel+0x1cc>)
{
 8007ae4:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 8007ae6:	9301      	str	r3, [sp, #4]
{
 8007ae8:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007aea:	680b      	ldr	r3, [r1, #0]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	bf18      	it	ne
 8007af0:	2b12      	cmpne	r3, #18
 8007af2:	d902      	bls.n	8007afa <HAL_ADC_ConfigChannel+0x1e>
 8007af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af8:	d142      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d847      	bhi.n	8007b92 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	2b07      	cmp	r3, #7
 8007b06:	d84c      	bhi.n	8007ba2 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8007b08:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d051      	beq.n	8007bb4 <HAL_ADC_ConfigChannel+0xd8>
 8007b10:	2301      	movs	r3, #1
 8007b12:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007b16:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b18:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007b1a:	2809      	cmp	r0, #9
 8007b1c:	d94d      	bls.n	8007bba <HAL_ADC_ConfigChannel+0xde>
 8007b1e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007b22:	d04a      	beq.n	8007bba <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b24:	b281      	uxth	r1, r0
 8007b26:	f04f 0c07 	mov.w	ip, #7
 8007b2a:	68de      	ldr	r6, [r3, #12]
 8007b2c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b30:	4f5d      	ldr	r7, [pc, #372]	; (8007ca8 <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b32:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b34:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b36:	fa0c fc02 	lsl.w	ip, ip, r2
 8007b3a:	ea26 060c 	bic.w	r6, r6, ip
 8007b3e:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b40:	f000 8083 	beq.w	8007c4a <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b44:	68a6      	ldr	r6, [r4, #8]
 8007b46:	4096      	lsls	r6, r2
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	4316      	orrs	r6, r2
 8007b4c:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8007b4e:	6862      	ldr	r2, [r4, #4]
 8007b50:	2a06      	cmp	r2, #6
 8007b52:	d846      	bhi.n	8007be2 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007b58:	241f      	movs	r4, #31
 8007b5a:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007b5c:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b5e:	4094      	lsls	r4, r2
 8007b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b62:	ea22 0204 	bic.w	r2, r2, r4
 8007b66:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b6a:	4311      	orrs	r1, r2
 8007b6c:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007b6e:	4a4f      	ldr	r2, [pc, #316]	; (8007cac <HAL_ADC_ConfigChannel+0x1d0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d048      	beq.n	8007c06 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 8007b74:	2300      	movs	r3, #0
  return HAL_OK;
 8007b76:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8007b78:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8007b7c:	b003      	add	sp, #12
 8007b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007b80:	f240 618b 	movw	r1, #1675	; 0x68b
 8007b84:	484a      	ldr	r0, [pc, #296]	; (8007cb0 <HAL_ADC_ConfigChannel+0x1d4>)
 8007b86:	f7fc fd55 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d9b7      	bls.n	8007b02 <HAL_ADC_ConfigChannel+0x26>
 8007b92:	f240 618c 	movw	r1, #1676	; 0x68c
 8007b96:	4846      	ldr	r0, [pc, #280]	; (8007cb0 <HAL_ADC_ConfigChannel+0x1d4>)
 8007b98:	f7fc fd4c 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8007b9c:	68a3      	ldr	r3, [r4, #8]
 8007b9e:	2b07      	cmp	r3, #7
 8007ba0:	d9b2      	bls.n	8007b08 <HAL_ADC_ConfigChannel+0x2c>
 8007ba2:	f240 618d 	movw	r1, #1677	; 0x68d
 8007ba6:	4842      	ldr	r0, [pc, #264]	; (8007cb0 <HAL_ADC_ConfigChannel+0x1d4>)
 8007ba8:	f7fc fd44 	bl	8004634 <assert_failed>
  __HAL_LOCK(hadc);
 8007bac:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d1ad      	bne.n	8007b10 <HAL_ADC_ConfigChannel+0x34>
 8007bb4:	2002      	movs	r0, #2
}
 8007bb6:	b003      	add	sp, #12
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007bba:	b281      	uxth	r1, r0
 8007bbc:	f04f 0c07 	mov.w	ip, #7
 8007bc0:	691e      	ldr	r6, [r3, #16]
 8007bc2:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bc6:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007bc8:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bcc:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007bd0:	ea26 060c 	bic.w	r6, r6, ip
 8007bd4:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bd6:	691e      	ldr	r6, [r3, #16]
 8007bd8:	4332      	orrs	r2, r6
 8007bda:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	2a06      	cmp	r2, #6
 8007be0:	d9b8      	bls.n	8007b54 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8007be2:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007be4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 8007be8:	d81c      	bhi.n	8007c24 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007bea:	3a23      	subs	r2, #35	; 0x23
 8007bec:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007bee:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007bf0:	4094      	lsls	r4, r2
 8007bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf4:	ea22 0204 	bic.w	r2, r2, r4
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007bfe:	4a2b      	ldr	r2, [pc, #172]	; (8007cac <HAL_ADC_ConfigChannel+0x1d0>)
 8007c00:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c02:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007c04:	d1b6      	bne.n	8007b74 <HAL_ADC_ConfigChannel+0x98>
 8007c06:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8007c0a:	d017      	beq.n	8007c3c <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c0c:	2812      	cmp	r0, #18
 8007c0e:	d123      	bne.n	8007c58 <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8007c10:	4b28      	ldr	r3, [pc, #160]	; (8007cb4 <HAL_ADC_ConfigChannel+0x1d8>)
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007c18:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007c20:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c22:	e7a7      	b.n	8007b74 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c24:	3a41      	subs	r2, #65	; 0x41
 8007c26:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c28:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c2a:	4094      	lsls	r4, r2
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	ea22 0204 	bic.w	r2, r2, r4
 8007c32:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4311      	orrs	r1, r2
 8007c38:	62d9      	str	r1, [r3, #44]	; 0x2c
 8007c3a:	e798      	b.n	8007b6e <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007c3c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8007c40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007c44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c48:	e794      	b.n	8007b74 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007c4a:	68a1      	ldr	r1, [r4, #8]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007c52:	2112      	movs	r1, #18
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e77a      	b.n	8007b4e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c58:	4b13      	ldr	r3, [pc, #76]	; (8007ca8 <HAL_ADC_ConfigChannel+0x1cc>)
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	d001      	beq.n	8007c62 <HAL_ADC_ConfigChannel+0x186>
 8007c5e:	2811      	cmp	r0, #17
 8007c60:	d188      	bne.n	8007b74 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007c64:	4910      	ldr	r1, [pc, #64]	; (8007ca8 <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007c66:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007c68:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007c6a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8007c6e:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007c76:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007c78:	f47f af7c 	bne.w	8007b74 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <HAL_ADC_ConfigChannel+0x1dc>)
 8007c7e:	4a0f      	ldr	r2, [pc, #60]	; (8007cbc <HAL_ADC_ConfigChannel+0x1e0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	0c9b      	lsrs	r3, r3, #18
 8007c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f43f af6e 	beq.w	8007b74 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 8007c98:	9b01      	ldr	r3, [sp, #4]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f9      	bne.n	8007c98 <HAL_ADC_ConfigChannel+0x1bc>
 8007ca4:	e766      	b.n	8007b74 <HAL_ADC_ConfigChannel+0x98>
 8007ca6:	bf00      	nop
 8007ca8:	10000012 	.word	0x10000012
 8007cac:	40012000 	.word	0x40012000
 8007cb0:	0802b204 	.word	0x0802b204
 8007cb4:	40012300 	.word	0x40012300
 8007cb8:	2000027c 	.word	0x2000027c
 8007cbc:	431bde83 	.word	0x431bde83

08007cc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007cc4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007cc6:	680b      	ldr	r3, [r1, #0]
{
 8007cc8:	460c      	mov	r4, r1
 8007cca:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007ccc:	2b19      	cmp	r3, #25
 8007cce:	d93e      	bls.n	8007d4e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8007cd0:	f240 31af 	movw	r1, #943	; 0x3af
 8007cd4:	4829      	ldr	r0, [pc, #164]	; (8007d7c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007cd6:	f7fc fcad 	bl	8004634 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007cda:	6863      	ldr	r3, [r4, #4]
 8007cdc:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8007ce0:	d13e      	bne.n	8007d60 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cec:	bf18      	it	ne
 8007cee:	2b00      	cmpne	r3, #0
 8007cf0:	bf14      	ite	ne
 8007cf2:	2201      	movne	r2, #1
 8007cf4:	2200      	moveq	r2, #0
 8007cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2200      	moveq	r2, #0
 8007cfe:	f002 0201 	andne.w	r2, r2, #1
 8007d02:	b112      	cbz	r2, 8007d0a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d08:	d132      	bne.n	8007d70 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d0a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d02c      	beq.n	8007d6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8007d12:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	f022 021f 	bic.w	r2, r2, #31
 8007d1a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	6821      	ldr	r1, [r4, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d2a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	6861      	ldr	r1, [r4, #4]
 8007d30:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d32:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8007d34:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007d3c:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8007d3e:	68a0      	ldr	r0, [r4, #8]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8007d44:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 8007d46:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007d48:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007d4e:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	07db      	lsls	r3, r3, #31
 8007d56:	d5bb      	bpl.n	8007cd0 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8007d5e:	d0c0      	beq.n	8007ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007d60:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007d66:	f7fc fc65 	bl	8004634 <assert_failed>
 8007d6a:	e7ba      	b.n	8007ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8007d6c:	2002      	movs	r0, #2
}
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8007d70:	f240 31b1 	movw	r1, #945	; 0x3b1
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007d76:	f7fc fc5d 	bl	8004634 <assert_failed>
 8007d7a:	e7c6      	b.n	8007d0a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007d7c:	0802b23c 	.word	0x0802b23c
 8007d80:	40012300 	.word	0x40012300
 8007d84:	02e602e7 	.word	0x02e602e7

08007d88 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007d88:	1ec3      	subs	r3, r0, #3
 8007d8a:	2b04      	cmp	r3, #4
{
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007d90:	d80c      	bhi.n	8007dac <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d92:	4909      	ldr	r1, [pc, #36]	; (8007db8 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d94:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d96:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d9c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d9e:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007da2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007da4:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8007da6:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8007da8:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007daa:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8007dac:	2191      	movs	r1, #145	; 0x91
 8007dae:	4804      	ldr	r0, [pc, #16]	; (8007dc0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8007db0:	f7fc fc40 	bl	8004634 <assert_failed>
 8007db4:	e7ed      	b.n	8007d92 <HAL_NVIC_SetPriorityGrouping+0xa>
 8007db6:	bf00      	nop
 8007db8:	e000ed00 	.word	0xe000ed00
 8007dbc:	05fa0000 	.word	0x05fa0000
 8007dc0:	0802b278 	.word	0x0802b278

08007dc4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007dc4:	2a0f      	cmp	r2, #15
{ 
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	4616      	mov	r6, r2
 8007dca:	4605      	mov	r5, r0
 8007dcc:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007dce:	d836      	bhi.n	8007e3e <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007dd0:	2c0f      	cmp	r4, #15
 8007dd2:	d82f      	bhi.n	8007e34 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dd4:	4b1c      	ldr	r3, [pc, #112]	; (8007e48 <HAL_NVIC_SetPriority+0x84>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ddc:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007de0:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007de2:	2804      	cmp	r0, #4
 8007de4:	bf28      	it	cs
 8007de6:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007de8:	2a06      	cmp	r2, #6
 8007dea:	d918      	bls.n	8007e1e <HAL_NVIC_SetPriority+0x5a>
 8007dec:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	409a      	lsls	r2, r3
 8007df4:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007df8:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8007dfc:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007dfe:	fa01 f100 	lsl.w	r1, r1, r0
 8007e02:	ea24 0401 	bic.w	r4, r4, r1
 8007e06:	fa04 f403 	lsl.w	r4, r4, r3
 8007e0a:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8007e0e:	db09      	blt.n	8007e24 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e10:	0124      	lsls	r4, r4, #4
 8007e12:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <HAL_NVIC_SetPriority+0x88>)
 8007e14:	b2e4      	uxtb	r4, r4
 8007e16:	442b      	add	r3, r5
 8007e18:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e20:	4633      	mov	r3, r6
 8007e22:	e7e9      	b.n	8007df8 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e24:	f005 050f 	and.w	r5, r5, #15
 8007e28:	0124      	lsls	r4, r4, #4
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_NVIC_SetPriority+0x8c>)
 8007e2c:	b2e4      	uxtb	r4, r4
 8007e2e:	442b      	add	r3, r5
 8007e30:	761c      	strb	r4, [r3, #24]
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007e34:	21aa      	movs	r1, #170	; 0xaa
 8007e36:	4807      	ldr	r0, [pc, #28]	; (8007e54 <HAL_NVIC_SetPriority+0x90>)
 8007e38:	f7fc fbfc 	bl	8004634 <assert_failed>
 8007e3c:	e7ca      	b.n	8007dd4 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007e3e:	21a9      	movs	r1, #169	; 0xa9
 8007e40:	4804      	ldr	r0, [pc, #16]	; (8007e54 <HAL_NVIC_SetPriority+0x90>)
 8007e42:	f7fc fbf7 	bl	8004634 <assert_failed>
 8007e46:	e7c3      	b.n	8007dd0 <HAL_NVIC_SetPriority+0xc>
 8007e48:	e000ed00 	.word	0xe000ed00
 8007e4c:	e000e100 	.word	0xe000e100
 8007e50:	e000ecfc 	.word	0xe000ecfc
 8007e54:	0802b278 	.word	0x0802b278

08007e58 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	db08      	blt.n	8007e6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e5c:	f000 011f 	and.w	r1, r0, #31
 8007e60:	2301      	movs	r3, #1
 8007e62:	0940      	lsrs	r0, r0, #5
 8007e64:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <HAL_NVIC_EnableIRQ+0x20>)
 8007e66:	408b      	lsls	r3, r1
 8007e68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007e6c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007e6e:	21bd      	movs	r1, #189	; 0xbd
 8007e70:	4802      	ldr	r0, [pc, #8]	; (8007e7c <HAL_NVIC_EnableIRQ+0x24>)
 8007e72:	f7fc bbdf 	b.w	8004634 <assert_failed>
 8007e76:	bf00      	nop
 8007e78:	e000e100 	.word	0xe000e100
 8007e7c:	0802b278 	.word	0x0802b278

08007e80 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007e80:	2800      	cmp	r0, #0
 8007e82:	db0e      	blt.n	8007ea2 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e84:	0943      	lsrs	r3, r0, #5
 8007e86:	2201      	movs	r2, #1
 8007e88:	f000 001f 	and.w	r0, r0, #31
 8007e8c:	4907      	ldr	r1, [pc, #28]	; (8007eac <HAL_NVIC_DisableIRQ+0x2c>)
 8007e8e:	3320      	adds	r3, #32
 8007e90:	fa02 f000 	lsl.w	r0, r2, r0
 8007e94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e9c:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007ea0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007ea2:	21cd      	movs	r1, #205	; 0xcd
 8007ea4:	4802      	ldr	r0, [pc, #8]	; (8007eb0 <HAL_NVIC_DisableIRQ+0x30>)
 8007ea6:	f7fc bbc5 	b.w	8004634 <assert_failed>
 8007eaa:	bf00      	nop
 8007eac:	e000e100 	.word	0xe000e100
 8007eb0:	0802b278 	.word	0x0802b278

08007eb4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d075      	beq.n	8007fa4 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8007eb8:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <HAL_CRC_Init+0xf4>)
 8007eba:	6802      	ldr	r2, [r0, #0]
 8007ebc:	429a      	cmp	r2, r3
{
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8007ec2:	d003      	beq.n	8007ecc <HAL_CRC_Init+0x18>
 8007ec4:	2170      	movs	r1, #112	; 0x70
 8007ec6:	4839      	ldr	r0, [pc, #228]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007ec8:	f7fc fbb4 	bl	8004634 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007ecc:	7f63      	ldrb	r3, [r4, #29]
 8007ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d055      	beq.n	8007f82 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007ed6:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ed8:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007eda:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007edc:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007ede:	d838      	bhi.n	8007f52 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d13d      	bne.n	8007f60 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	4a32      	ldr	r2, [pc, #200]	; (8007fb0 <HAL_CRC_Init+0xfc>)
 8007ee8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	f022 0218 	bic.w	r2, r2, #24
 8007ef0:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8007ef2:	7963      	ldrb	r3, [r4, #5]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d83c      	bhi.n	8007f72 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007ef8:	b1e3      	cbz	r3, 8007f34 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8007f00:	6962      	ldr	r2, [r4, #20]
 8007f02:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8007f06:	d11d      	bne.n	8007f44 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f08:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007f0a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f0c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007f10:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007f12:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f16:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007f18:	d13d      	bne.n	8007f96 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f1a:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007f1c:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007f22:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f24:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007f26:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f28:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007f2a:	d82f      	bhi.n	8007f8c <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007f2c:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8007f2e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8007f30:	7763      	strb	r3, [r4, #29]
}
 8007f32:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8007f3c:	6962      	ldr	r2, [r4, #20]
 8007f3e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8007f42:	d0e1      	beq.n	8007f08 <HAL_CRC_Init+0x54>
 8007f44:	219c      	movs	r1, #156	; 0x9c
 8007f46:	4819      	ldr	r0, [pc, #100]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007f48:	f7fc fb74 	bl	8004634 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f4c:	6962      	ldr	r2, [r4, #20]
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	e7da      	b.n	8007f08 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007f52:	217e      	movs	r1, #126	; 0x7e
 8007f54:	4815      	ldr	r0, [pc, #84]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007f56:	f7fc fb6d 	bl	8004634 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007f5a:	7923      	ldrb	r3, [r4, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0c1      	beq.n	8007ee4 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007f60:	4620      	mov	r0, r4
 8007f62:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007f66:	f000 f825 	bl	8007fb4 <HAL_CRCEx_Polynomial_Set>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d0c1      	beq.n	8007ef2 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8007f6e:	2001      	movs	r0, #1
}
 8007f70:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8007f72:	2190      	movs	r1, #144	; 0x90
 8007f74:	480d      	ldr	r0, [pc, #52]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007f76:	f7fc fb5d 	bl	8004634 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f7a:	7963      	ldrb	r3, [r4, #5]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1bc      	bne.n	8007efa <HAL_CRC_Init+0x46>
 8007f80:	e7d8      	b.n	8007f34 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8007f82:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8007f84:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8007f86:	f7fd fd89 	bl	8005a9c <HAL_CRC_MspInit>
 8007f8a:	e7a4      	b.n	8007ed6 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007f8c:	21a5      	movs	r1, #165	; 0xa5
 8007f8e:	4807      	ldr	r0, [pc, #28]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007f90:	f7fc fb50 	bl	8004634 <assert_failed>
 8007f94:	e7ca      	b.n	8007f2c <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007f96:	4805      	ldr	r0, [pc, #20]	; (8007fac <HAL_CRC_Init+0xf8>)
 8007f98:	21a0      	movs	r1, #160	; 0xa0
 8007f9a:	f7fc fb4b 	bl	8004634 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	69a0      	ldr	r0, [r4, #24]
 8007fa2:	e7ba      	b.n	8007f1a <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8007fa4:	2001      	movs	r0, #1
}
 8007fa6:	4770      	bx	lr
 8007fa8:	40023000 	.word	0x40023000
 8007fac:	0802b2b4 	.word	0x0802b2b4
 8007fb0:	04c11db7 	.word	0x04c11db7

08007fb4 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8007fb4:	f032 0318 	bics.w	r3, r2, #24
{
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4616      	mov	r6, r2
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8007fc0:	d003      	beq.n	8007fca <HAL_CRCEx_Polynomial_Set+0x16>
 8007fc2:	215f      	movs	r1, #95	; 0x5f
 8007fc4:	4818      	ldr	r0, [pc, #96]	; (8008028 <HAL_CRCEx_Polynomial_Set+0x74>)
 8007fc6:	f7fc fb35 	bl	8004634 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007fca:	231e      	movs	r3, #30
 8007fcc:	e001      	b.n	8007fd2 <HAL_CRCEx_Polynomial_Set+0x1e>
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	d315      	bcc.n	8007ffe <HAL_CRCEx_Polynomial_Set+0x4a>
 8007fd2:	fa24 fc03 	lsr.w	ip, r4, r3
 8007fd6:	f01c 0f01 	tst.w	ip, #1
 8007fda:	d0f8      	beq.n	8007fce <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8007fdc:	2e18      	cmp	r6, #24
 8007fde:	d80f      	bhi.n	8008000 <HAL_CRCEx_Polynomial_Set+0x4c>
 8007fe0:	e8df f006 	tbb	[pc, r6]
 8007fe4:	0e0e0e12 	.word	0x0e0e0e12
 8007fe8:	0e0e0e0e 	.word	0x0e0e0e0e
 8007fec:	0e0e0e1b 	.word	0x0e0e0e1b
 8007ff0:	0e0e0e0e 	.word	0x0e0e0e0e
 8007ff4:	0e0e0e1e 	.word	0x0e0e0e1e
 8007ff8:	0e0e0e0e 	.word	0x0e0e0e0e
 8007ffc:	10          	.byte	0x10
 8007ffd:	00          	.byte	0x00
 8007ffe:	b11e      	cbz	r6, 8008008 <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008000:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8008002:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8008004:	2b06      	cmp	r3, #6
 8008006:	d8fb      	bhi.n	8008000 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008008:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800800a:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 800800c:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800800e:	688b      	ldr	r3, [r1, #8]
 8008010:	f023 0318 	bic.w	r3, r3, #24
 8008014:	4333      	orrs	r3, r6
 8008016:	608b      	str	r3, [r1, #8]
}
 8008018:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d9f4      	bls.n	8008008 <HAL_CRCEx_Polynomial_Set+0x54>
 800801e:	e7ef      	b.n	8008000 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8008020:	2b07      	cmp	r3, #7
 8008022:	d9f1      	bls.n	8008008 <HAL_CRCEx_Polynomial_Set+0x54>
 8008024:	e7ec      	b.n	8008000 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008026:	bf00      	nop
 8008028:	0802b2ec 	.word	0x0802b2ec

0800802c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800802c:	b1d8      	cbz	r0, 8008066 <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_DAC_Init+0x40>)
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	429a      	cmp	r2, r3
{
 8008034:	b510      	push	{r4, lr}
 8008036:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008038:	d004      	beq.n	8008044 <HAL_DAC_Init+0x18>
 800803a:	f240 1115 	movw	r1, #277	; 0x115
 800803e:	480c      	ldr	r0, [pc, #48]	; (8008070 <HAL_DAC_Init+0x44>)
 8008040:	f7fc faf8 	bl	8004634 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008044:	7923      	ldrb	r3, [r4, #4]
 8008046:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800804a:	b13b      	cbz	r3, 800805c <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800804c:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800804e:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008050:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008052:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008054:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008056:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008058:	7122      	strb	r2, [r4, #4]
}
 800805a:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 800805c:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 800805e:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8008060:	f7fd fd32 	bl	8005ac8 <HAL_DAC_MspInit>
 8008064:	e7f2      	b.n	800804c <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8008066:	2001      	movs	r0, #1
}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40007400 	.word	0x40007400
 8008070:	0802b328 	.word	0x0802b328

08008074 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800807a:	f031 0310 	bics.w	r3, r1, #16
{
 800807e:	460d      	mov	r5, r1
 8008080:	4604      	mov	r4, r0
 8008082:	4617      	mov	r7, r2
 8008084:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8008086:	d16b      	bne.n	8008160 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008088:	f036 0304 	bics.w	r3, r6, #4
 800808c:	d001      	beq.n	8008092 <HAL_DAC_Start_DMA+0x1e>
 800808e:	2e08      	cmp	r6, #8
 8008090:	d15b      	bne.n	800814a <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8008092:	7962      	ldrb	r2, [r4, #5]
 8008094:	2a01      	cmp	r2, #1
 8008096:	d060      	beq.n	800815a <HAL_DAC_Start_DMA+0xe6>
 8008098:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800809a:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 800809e:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80080a0:	2302      	movs	r3, #2
 80080a2:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80080a4:	bb35      	cbnz	r5, 80080f4 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80080a6:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 80080a8:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80080aa:	4b39      	ldr	r3, [pc, #228]	; (8008190 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80080ac:	4a39      	ldr	r2, [pc, #228]	; (8008194 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80080ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80080b0:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80080b4:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80080b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80080ba:	4a37      	ldr	r2, [pc, #220]	; (8008198 <HAL_DAC_Start_DMA+0x124>)
 80080bc:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80080be:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 80080c2:	d059      	beq.n	8008178 <HAL_DAC_Start_DMA+0x104>
 80080c4:	2e08      	cmp	r6, #8
 80080c6:	d054      	beq.n	8008172 <HAL_DAC_Start_DMA+0xfe>
 80080c8:	2e00      	cmp	r6, #0
 80080ca:	d04f      	beq.n	800816c <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80080cc:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80080ce:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80080d2:	4643      	mov	r3, r8
 80080d4:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80080d6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 80080da:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80080de:	f000 fbe3 	bl	80088a8 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80080e2:	2300      	movs	r3, #0
 80080e4:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80080e6:	b330      	cbz	r0, 8008136 <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	f043 0304 	orr.w	r3, r3, #4
 80080ee:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80080f4:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80080f6:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80080f8:	4b28      	ldr	r3, [pc, #160]	; (800819c <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80080fa:	4a29      	ldr	r2, [pc, #164]	; (80081a0 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80080fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80080fe:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008102:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008108:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_DAC_Start_DMA+0x130>)
 800810a:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800810c:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008110:	d03b      	beq.n	800818a <HAL_DAC_Start_DMA+0x116>
 8008112:	2e08      	cmp	r6, #8
 8008114:	d036      	beq.n	8008184 <HAL_DAC_Start_DMA+0x110>
 8008116:	b396      	cbz	r6, 800817e <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008118:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800811a:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800811e:	4643      	mov	r3, r8
 8008120:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008122:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008126:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800812a:	f000 fbbd 	bl	80088a8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800812e:	2300      	movs	r3, #0
 8008130:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008132:	2800      	cmp	r0, #0
 8008134:	d1d8      	bne.n	80080e8 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f005 0110 	and.w	r1, r5, #16
 800813c:	2501      	movs	r5, #1
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	408d      	lsls	r5, r1
 8008142:	4315      	orrs	r5, r2
 8008144:	601d      	str	r5, [r3, #0]
}
 8008146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 800814a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800814e:	4816      	ldr	r0, [pc, #88]	; (80081a8 <HAL_DAC_Start_DMA+0x134>)
 8008150:	f7fc fa70 	bl	8004634 <assert_failed>
  __HAL_LOCK(hdac);
 8008154:	7962      	ldrb	r2, [r4, #5]
 8008156:	2a01      	cmp	r2, #1
 8008158:	d19e      	bne.n	8008098 <HAL_DAC_Start_DMA+0x24>
 800815a:	2002      	movs	r0, #2
}
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008160:	f240 210f 	movw	r1, #527	; 0x20f
 8008164:	4810      	ldr	r0, [pc, #64]	; (80081a8 <HAL_DAC_Start_DMA+0x134>)
 8008166:	f7fc fa65 	bl	8004634 <assert_failed>
 800816a:	e78d      	b.n	8008088 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800816c:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008170:	e7ad      	b.n	80080ce <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008172:	f10c 0210 	add.w	r2, ip, #16
        break;
 8008176:	e7aa      	b.n	80080ce <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008178:	f10c 020c 	add.w	r2, ip, #12
        break;
 800817c:	e7a7      	b.n	80080ce <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800817e:	f10c 0214 	add.w	r2, ip, #20
        break;
 8008182:	e7ca      	b.n	800811a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008184:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008188:	e7c7      	b.n	800811a <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800818a:	f10c 0218 	add.w	r2, ip, #24
        break;
 800818e:	e7c4      	b.n	800811a <HAL_DAC_Start_DMA+0xa6>
 8008190:	0800823d 	.word	0x0800823d
 8008194:	08008251 	.word	0x08008251
 8008198:	08008261 	.word	0x08008261
 800819c:	080083b5 	.word	0x080083b5
 80081a0:	080083c5 	.word	0x080083c5
 80081a4:	080083d1 	.word	0x080083d1
 80081a8:	0802b328 	.word	0x0802b328

080081ac <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80081ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80081ae:	f031 0310 	bics.w	r3, r1, #16
{
 80081b2:	460d      	mov	r5, r1
 80081b4:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80081b6:	d11e      	bne.n	80081f6 <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80081b8:	6803      	ldr	r3, [r0, #0]
 80081ba:	f001 0e10 	and.w	lr, r1, #16
 80081be:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80081c2:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 80081ca:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80081ce:	ea20 000c 	bic.w	r0, r0, ip
 80081d2:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	ea22 0201 	bic.w	r2, r2, r1
 80081da:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80081dc:	bb05      	cbnz	r5, 8008220 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80081de:	68a0      	ldr	r0, [r4, #8]
 80081e0:	f000 fbbe 	bl	8008960 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80081e4:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80081e6:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80081e8:	6813      	ldr	r3, [r2, #0]
 80081ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ee:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80081f0:	2301      	movs	r3, #1
 80081f2:	7123      	strb	r3, [r4, #4]
}
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80081f6:	f240 218f 	movw	r1, #655	; 0x28f
 80081fa:	480f      	ldr	r0, [pc, #60]	; (8008238 <HAL_DAC_Stop_DMA+0x8c>)
 80081fc:	f7fc fa1a 	bl	8004634 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008200:	f005 0510 	and.w	r5, r5, #16
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800820a:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8008210:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008212:	ea22 0200 	bic.w	r2, r2, r0
 8008216:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	ea25 0501 	bic.w	r5, r5, r1
 800821e:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008220:	68e0      	ldr	r0, [r4, #12]
 8008222:	f000 fb9d 	bl	8008960 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008226:	6822      	ldr	r2, [r4, #0]
}
 8008228:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008230:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008232:	2301      	movs	r3, #1
 8008234:	7123      	strb	r3, [r4, #4]
}
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	0802b328 	.word	0x0802b328

0800823c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800823c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008240:	4620      	mov	r0, r4
 8008242:	f7fb f8ff 	bl	8003444 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008246:	2301      	movs	r3, #1
 8008248:	7123      	strb	r3, [r4, #4]
}
 800824a:	bd10      	pop	{r4, pc}

0800824c <HAL_DAC_ConvHalfCpltCallbackCh1>:
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop

08008250 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008250:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008252:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008254:	f7ff fffa 	bl	800824c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008258:	bd08      	pop	{r3, pc}
 800825a:	bf00      	nop

0800825c <HAL_DAC_ErrorCallbackCh1>:
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop

08008260 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008260:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008262:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008264:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008266:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008268:	f043 0304 	orr.w	r3, r3, #4
 800826c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800826e:	f7ff fff5 	bl	800825c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008272:	2301      	movs	r3, #1
 8008274:	7123      	strb	r3, [r4, #4]
}
 8008276:	bd10      	pop	{r4, pc}

08008278 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800827c:	6803      	ldr	r3, [r0, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	0491      	lsls	r1, r2, #18
{
 8008282:	b510      	push	{r4, lr}
 8008284:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008286:	d502      	bpl.n	800828e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828a:	0492      	lsls	r2, r2, #18
 800828c:	d418      	bmi.n	80082c0 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	0091      	lsls	r1, r2, #2
 8008292:	d502      	bpl.n	800829a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008296:	0092      	lsls	r2, r2, #2
 8008298:	d400      	bmi.n	800829c <HAL_DAC_IRQHandler+0x20>
}
 800829a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 800829c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800829e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80082a2:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80082a4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80082a6:	6922      	ldr	r2, [r4, #16]
 80082a8:	f042 0202 	orr.w	r2, r2, #2
 80082ac:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80082ae:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80082b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082ba:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80082bc:	f000 b878 	b.w	80083b0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80082c0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80082c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 80082c6:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80082c8:	6902      	ldr	r2, [r0, #16]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80082d0:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082d8:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80082da:	f7ff ffcd 	bl	8008278 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	e7d5      	b.n	800828e <HAL_DAC_IRQHandler+0x12>
 80082e2:	bf00      	nop

080082e4 <HAL_DAC_ConfigChannel>:
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80082e8:	6808      	ldr	r0, [r1, #0]
{
 80082ea:	4616      	mov	r6, r2
 80082ec:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 80082ee:	f020 0308 	bic.w	r3, r0, #8
 80082f2:	f020 0204 	bic.w	r2, r0, #4
 80082f6:	2b24      	cmp	r3, #36	; 0x24
 80082f8:	bf18      	it	ne
 80082fa:	2a00      	cmpne	r2, #0
 80082fc:	f020 0210 	bic.w	r2, r0, #16
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	283c      	cmp	r0, #60	; 0x3c
 8008308:	bf0c      	ite	eq
 800830a:	2300      	moveq	r3, #0
 800830c:	f003 0301 	andne.w	r3, r3, #1
 8008310:	2a0c      	cmp	r2, #12
 8008312:	bf0c      	ite	eq
 8008314:	2300      	moveq	r3, #0
 8008316:	f003 0301 	andne.w	r3, r3, #1
 800831a:	b11b      	cbz	r3, 8008324 <HAL_DAC_ConfigChannel+0x40>
 800831c:	f020 0020 	bic.w	r0, r0, #32
 8008320:	2814      	cmp	r0, #20
 8008322:	d137      	bne.n	8008394 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008324:	686b      	ldr	r3, [r5, #4]
 8008326:	f033 0302 	bics.w	r3, r3, #2
 800832a:	d12d      	bne.n	8008388 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 800832c:	f036 0310 	bics.w	r3, r6, #16
 8008330:	d120      	bne.n	8008374 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8008332:	7963      	ldrb	r3, [r4, #5]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d025      	beq.n	8008384 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008338:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800833c:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800833e:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8008342:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008344:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008346:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800834a:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 800834e:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008350:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008352:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008354:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008356:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 800835a:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800835c:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800835e:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008360:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008362:	4082      	lsls	r2, r0
 8008364:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8008366:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008368:	ea23 0302 	bic.w	r3, r3, r2
 800836c:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800836e:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008370:	7165      	strb	r5, [r4, #5]
}
 8008372:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008374:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008378:	4809      	ldr	r0, [pc, #36]	; (80083a0 <HAL_DAC_ConfigChannel+0xbc>)
 800837a:	f7fc f95b 	bl	8004634 <assert_failed>
  __HAL_LOCK(hdac);
 800837e:	7963      	ldrb	r3, [r4, #5]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d1d9      	bne.n	8008338 <HAL_DAC_ConfigChannel+0x54>
 8008384:	2002      	movs	r0, #2
}
 8008386:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008388:	f240 31a5 	movw	r1, #933	; 0x3a5
 800838c:	4804      	ldr	r0, [pc, #16]	; (80083a0 <HAL_DAC_ConfigChannel+0xbc>)
 800838e:	f7fc f951 	bl	8004634 <assert_failed>
 8008392:	e7cb      	b.n	800832c <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008394:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8008398:	4801      	ldr	r0, [pc, #4]	; (80083a0 <HAL_DAC_ConfigChannel+0xbc>)
 800839a:	f7fc f94b 	bl	8004634 <assert_failed>
 800839e:	e7c1      	b.n	8008324 <HAL_DAC_ConfigChannel+0x40>
 80083a0:	0802b328 	.word	0x0802b328

080083a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop

080083a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop

080083ac <HAL_DACEx_ErrorCallbackCh2>:
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80083b4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff fff3 	bl	80083a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083be:	2301      	movs	r3, #1
 80083c0:	7123      	strb	r3, [r4, #4]
}
 80083c2:	bd10      	pop	{r4, pc}

080083c4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80083c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80083c6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80083c8:	f7ff ffee 	bl	80083a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80083cc:	bd08      	pop	{r3, pc}
 80083ce:	bf00      	nop

080083d0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80083d0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083d4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80083d6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083d8:	f043 0304 	orr.w	r3, r3, #4
 80083dc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80083de:	f7ff ffe5 	bl	80083ac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083e2:	2301      	movs	r3, #1
 80083e4:	7123      	strb	r3, [r4, #4]
}
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80083ec:	f7ff f892 	bl	8007514 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	f000 8156 	beq.w	80086a2 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80083f6:	6822      	ldr	r2, [r4, #0]
 80083f8:	4605      	mov	r5, r0
 80083fa:	4bad      	ldr	r3, [pc, #692]	; (80086b0 <HAL_DMA_Init+0x2c8>)
 80083fc:	49ad      	ldr	r1, [pc, #692]	; (80086b4 <HAL_DMA_Init+0x2cc>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	bf18      	it	ne
 8008402:	428a      	cmpne	r2, r1
 8008404:	f101 0118 	add.w	r1, r1, #24
 8008408:	bf14      	ite	ne
 800840a:	2301      	movne	r3, #1
 800840c:	2300      	moveq	r3, #0
 800840e:	428a      	cmp	r2, r1
 8008410:	bf0c      	ite	eq
 8008412:	2300      	moveq	r3, #0
 8008414:	f003 0301 	andne.w	r3, r3, #1
 8008418:	3118      	adds	r1, #24
 800841a:	428a      	cmp	r2, r1
 800841c:	bf0c      	ite	eq
 800841e:	2300      	moveq	r3, #0
 8008420:	f003 0301 	andne.w	r3, r3, #1
 8008424:	3118      	adds	r1, #24
 8008426:	428a      	cmp	r2, r1
 8008428:	bf0c      	ite	eq
 800842a:	2300      	moveq	r3, #0
 800842c:	f003 0301 	andne.w	r3, r3, #1
 8008430:	3118      	adds	r1, #24
 8008432:	428a      	cmp	r2, r1
 8008434:	bf0c      	ite	eq
 8008436:	2300      	moveq	r3, #0
 8008438:	f003 0301 	andne.w	r3, r3, #1
 800843c:	3118      	adds	r1, #24
 800843e:	428a      	cmp	r2, r1
 8008440:	bf0c      	ite	eq
 8008442:	2300      	moveq	r3, #0
 8008444:	f003 0301 	andne.w	r3, r3, #1
 8008448:	3118      	adds	r1, #24
 800844a:	428a      	cmp	r2, r1
 800844c:	bf0c      	ite	eq
 800844e:	2300      	moveq	r3, #0
 8008450:	f003 0301 	andne.w	r3, r3, #1
 8008454:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8008458:	428a      	cmp	r2, r1
 800845a:	bf0c      	ite	eq
 800845c:	2300      	moveq	r3, #0
 800845e:	f003 0301 	andne.w	r3, r3, #1
 8008462:	3118      	adds	r1, #24
 8008464:	428a      	cmp	r2, r1
 8008466:	bf0c      	ite	eq
 8008468:	2300      	moveq	r3, #0
 800846a:	f003 0301 	andne.w	r3, r3, #1
 800846e:	3118      	adds	r1, #24
 8008470:	428a      	cmp	r2, r1
 8008472:	bf0c      	ite	eq
 8008474:	2300      	moveq	r3, #0
 8008476:	f003 0301 	andne.w	r3, r3, #1
 800847a:	3118      	adds	r1, #24
 800847c:	428a      	cmp	r2, r1
 800847e:	bf0c      	ite	eq
 8008480:	2300      	moveq	r3, #0
 8008482:	f003 0301 	andne.w	r3, r3, #1
 8008486:	3118      	adds	r1, #24
 8008488:	428a      	cmp	r2, r1
 800848a:	bf0c      	ite	eq
 800848c:	2300      	moveq	r3, #0
 800848e:	f003 0301 	andne.w	r3, r3, #1
 8008492:	3118      	adds	r1, #24
 8008494:	428a      	cmp	r2, r1
 8008496:	bf0c      	ite	eq
 8008498:	2300      	moveq	r3, #0
 800849a:	f003 0301 	andne.w	r3, r3, #1
 800849e:	3118      	adds	r1, #24
 80084a0:	428a      	cmp	r2, r1
 80084a2:	bf0c      	ite	eq
 80084a4:	2300      	moveq	r3, #0
 80084a6:	f003 0301 	andne.w	r3, r3, #1
 80084aa:	b11b      	cbz	r3, 80084b4 <HAL_DMA_Init+0xcc>
 80084ac:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <HAL_DMA_Init+0x2d0>)
 80084ae:	429a      	cmp	r2, r3
 80084b0:	f040 8139 	bne.w	8008726 <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80084b4:	6863      	ldr	r3, [r4, #4]
 80084b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80084ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084be:	bf18      	it	ne
 80084c0:	2b00      	cmpne	r3, #0
 80084c2:	bf14      	ite	ne
 80084c4:	2201      	movne	r2, #1
 80084c6:	2200      	moveq	r2, #0
 80084c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084cc:	bf0c      	ite	eq
 80084ce:	2200      	moveq	r2, #0
 80084d0:	f002 0201 	andne.w	r2, r2, #1
 80084d4:	b11a      	cbz	r2, 80084de <HAL_DMA_Init+0xf6>
 80084d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084da:	f040 8129 	bne.w	8008730 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80084e4:	d002      	beq.n	80084ec <HAL_DMA_Init+0x104>
 80084e6:	2b80      	cmp	r3, #128	; 0x80
 80084e8:	f040 80a8 	bne.w	800863c <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80084ec:	68e3      	ldr	r3, [r4, #12]
 80084ee:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80084f2:	f040 80ac 	bne.w	800864e <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80084fc:	f040 80b0 	bne.w	8008660 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008500:	6963      	ldr	r3, [r4, #20]
 8008502:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008506:	d003      	beq.n	8008510 <HAL_DMA_Init+0x128>
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850c:	f040 8091 	bne.w	8008632 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008510:	69a3      	ldr	r3, [r4, #24]
 8008512:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8008516:	d003      	beq.n	8008520 <HAL_DMA_Init+0x138>
 8008518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800851c:	f040 8084 	bne.w	8008628 <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008520:	69e3      	ldr	r3, [r4, #28]
 8008522:	f033 0220 	bics.w	r2, r3, #32
 8008526:	d002      	beq.n	800852e <HAL_DMA_Init+0x146>
 8008528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852c:	d16f      	bne.n	800860e <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800852e:	6a23      	ldr	r3, [r4, #32]
 8008530:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008534:	d173      	bne.n	800861e <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008538:	f033 0204 	bics.w	r2, r3, #4
 800853c:	d15f      	bne.n	80085fe <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800853e:	2b00      	cmp	r3, #0
 8008540:	d14d      	bne.n	80085de <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008542:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8008544:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8008546:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 8008548:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800854c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008558:	e006      	b.n	8008568 <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800855a:	f7fe ffdb 	bl	8007514 <HAL_GetTick>
 800855e:	1b40      	subs	r0, r0, r5
 8008560:	2805      	cmp	r0, #5
 8008562:	f200 8082 	bhi.w	800866a <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	07d1      	lsls	r1, r2, #31
 800856c:	d4f5      	bmi.n	800855a <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800856e:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8008572:	68e1      	ldr	r1, [r4, #12]
 8008574:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008576:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8008578:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800857a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	430a      	orrs	r2, r1
 8008580:	6961      	ldr	r1, [r4, #20]
 8008582:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008584:	69e1      	ldr	r1, [r4, #28]
 8008586:	4302      	orrs	r2, r0
 8008588:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800858a:	494c      	ldr	r1, [pc, #304]	; (80086bc <HAL_DMA_Init+0x2d4>)
 800858c:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800858e:	6a25      	ldr	r5, [r4, #32]
 8008590:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008592:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008594:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008596:	2904      	cmp	r1, #4
 8008598:	d06e      	beq.n	8008678 <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800859a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800859c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800859e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80085a2:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085a4:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 80085a6:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085a8:	4945      	ldr	r1, [pc, #276]	; (80086c0 <HAL_DMA_Init+0x2d8>)
 80085aa:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085ac:	4845      	ldr	r0, [pc, #276]	; (80086c4 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085ae:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 80085b2:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085b4:	4a44      	ldr	r2, [pc, #272]	; (80086c8 <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085b6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085ba:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085be:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085c2:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c4:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085c8:	bf88      	it	hi
 80085ca:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085cc:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085ce:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085d0:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d2:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80085d4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085d6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80085d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80085dc:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80085de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d860      	bhi.n	80086a6 <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80085e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085e6:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80085ea:	d171      	bne.n	80086d0 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80085ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80085ee:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80085f2:	d0a6      	beq.n	8008542 <HAL_DMA_Init+0x15a>
 80085f4:	21c8      	movs	r1, #200	; 0xc8
 80085f6:	4835      	ldr	r0, [pc, #212]	; (80086cc <HAL_DMA_Init+0x2e4>)
 80085f8:	f7fc f81c 	bl	8004634 <assert_failed>
 80085fc:	e7a1      	b.n	8008542 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80085fe:	21c1      	movs	r1, #193	; 0xc1
 8008600:	4832      	ldr	r0, [pc, #200]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008602:	f7fc f817 	bl	8004634 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d09a      	beq.n	8008542 <HAL_DMA_Init+0x15a>
 800860c:	e7e7      	b.n	80085de <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800860e:	21bf      	movs	r1, #191	; 0xbf
 8008610:	482e      	ldr	r0, [pc, #184]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008612:	f7fc f80f 	bl	8004634 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008616:	6a23      	ldr	r3, [r4, #32]
 8008618:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800861c:	d08b      	beq.n	8008536 <HAL_DMA_Init+0x14e>
 800861e:	21c0      	movs	r1, #192	; 0xc0
 8008620:	482a      	ldr	r0, [pc, #168]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008622:	f7fc f807 	bl	8004634 <assert_failed>
 8008626:	e786      	b.n	8008536 <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008628:	21be      	movs	r1, #190	; 0xbe
 800862a:	4828      	ldr	r0, [pc, #160]	; (80086cc <HAL_DMA_Init+0x2e4>)
 800862c:	f7fc f802 	bl	8004634 <assert_failed>
 8008630:	e776      	b.n	8008520 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008632:	21bd      	movs	r1, #189	; 0xbd
 8008634:	4825      	ldr	r0, [pc, #148]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008636:	f7fb fffd 	bl	8004634 <assert_failed>
 800863a:	e769      	b.n	8008510 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800863c:	21ba      	movs	r1, #186	; 0xba
 800863e:	4823      	ldr	r0, [pc, #140]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008640:	f7fb fff8 	bl	8004634 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008644:	68e3      	ldr	r3, [r4, #12]
 8008646:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800864a:	f43f af54 	beq.w	80084f6 <HAL_DMA_Init+0x10e>
 800864e:	21bb      	movs	r1, #187	; 0xbb
 8008650:	481e      	ldr	r0, [pc, #120]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008652:	f7fb ffef 	bl	8004634 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008656:	6923      	ldr	r3, [r4, #16]
 8008658:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800865c:	f43f af50 	beq.w	8008500 <HAL_DMA_Init+0x118>
 8008660:	21bc      	movs	r1, #188	; 0xbc
 8008662:	481a      	ldr	r0, [pc, #104]	; (80086cc <HAL_DMA_Init+0x2e4>)
 8008664:	f7fb ffe6 	bl	8004634 <assert_failed>
 8008668:	e74a      	b.n	8008500 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800866a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800866c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800866e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008670:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008672:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008676:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008678:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800867c:	4329      	orrs	r1, r5
 800867e:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8008680:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008682:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008684:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008686:	f021 0107 	bic.w	r1, r1, #7
 800868a:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800868c:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008690:	2d00      	cmp	r5, #0
 8008692:	d087      	beq.n	80085a4 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008694:	bb08      	cbnz	r0, 80086da <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8008696:	2a01      	cmp	r2, #1
 8008698:	d040      	beq.n	800871c <HAL_DMA_Init+0x334>
 800869a:	f032 0202 	bics.w	r2, r2, #2
 800869e:	d181      	bne.n	80085a4 <HAL_DMA_Init+0x1bc>
 80086a0:	e023      	b.n	80086ea <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 80086a2:	2001      	movs	r0, #1
}
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80086a6:	21c6      	movs	r1, #198	; 0xc6
 80086a8:	4808      	ldr	r0, [pc, #32]	; (80086cc <HAL_DMA_Init+0x2e4>)
 80086aa:	f7fb ffc3 	bl	8004634 <assert_failed>
 80086ae:	e799      	b.n	80085e4 <HAL_DMA_Init+0x1fc>
 80086b0:	40026010 	.word	0x40026010
 80086b4:	40026028 	.word	0x40026028
 80086b8:	400264b8 	.word	0x400264b8
 80086bc:	e010803f 	.word	0xe010803f
 80086c0:	aaaaaaab 	.word	0xaaaaaaab
 80086c4:	0802b398 	.word	0x0802b398
 80086c8:	fffffc00 	.word	0xfffffc00
 80086cc:	0802b360 	.word	0x0802b360
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80086d0:	21c7      	movs	r1, #199	; 0xc7
 80086d2:	481a      	ldr	r0, [pc, #104]	; (800873c <HAL_DMA_Init+0x354>)
 80086d4:	f7fb ffae 	bl	8004634 <assert_failed>
 80086d8:	e788      	b.n	80085ec <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086da:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80086de:	d00e      	beq.n	80086fe <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086e0:	2a02      	cmp	r2, #2
 80086e2:	d905      	bls.n	80086f0 <HAL_DMA_Init+0x308>
 80086e4:	2a03      	cmp	r2, #3
 80086e6:	f47f af5d 	bne.w	80085a4 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086ea:	01ea      	lsls	r2, r5, #7
 80086ec:	f57f af5a 	bpl.w	80085a4 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 80086f0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086f2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80086f4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086f6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80086f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80086fe:	2a03      	cmp	r2, #3
 8008700:	f63f af50 	bhi.w	80085a4 <HAL_DMA_Init+0x1bc>
 8008704:	a001      	add	r0, pc, #4	; (adr r0, 800870c <HAL_DMA_Init+0x324>)
 8008706:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800870a:	bf00      	nop
 800870c:	080086f1 	.word	0x080086f1
 8008710:	080086eb 	.word	0x080086eb
 8008714:	080086f1 	.word	0x080086f1
 8008718:	0800871d 	.word	0x0800871d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800871c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8008720:	f47f af40 	bne.w	80085a4 <HAL_DMA_Init+0x1bc>
 8008724:	e7e4      	b.n	80086f0 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008726:	21b8      	movs	r1, #184	; 0xb8
 8008728:	4804      	ldr	r0, [pc, #16]	; (800873c <HAL_DMA_Init+0x354>)
 800872a:	f7fb ff83 	bl	8004634 <assert_failed>
 800872e:	e6c1      	b.n	80084b4 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008730:	21b9      	movs	r1, #185	; 0xb9
 8008732:	4802      	ldr	r0, [pc, #8]	; (800873c <HAL_DMA_Init+0x354>)
 8008734:	f7fb ff7e 	bl	8004634 <assert_failed>
 8008738:	e6d1      	b.n	80084de <HAL_DMA_Init+0xf6>
 800873a:	bf00      	nop
 800873c:	0802b360 	.word	0x0802b360

08008740 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8008740:	2800      	cmp	r0, #0
 8008742:	f000 8097 	beq.w	8008874 <HAL_DMA_DeInit+0x134>
{
 8008746:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008748:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800874c:	4604      	mov	r4, r0
 800874e:	2b02      	cmp	r3, #2
 8008750:	b2d8      	uxtb	r0, r3
 8008752:	f000 808e 	beq.w	8008872 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	4b4b      	ldr	r3, [pc, #300]	; (8008888 <HAL_DMA_DeInit+0x148>)
 800875a:	484c      	ldr	r0, [pc, #304]	; (800888c <HAL_DMA_DeInit+0x14c>)
 800875c:	494c      	ldr	r1, [pc, #304]	; (8008890 <HAL_DMA_DeInit+0x150>)
 800875e:	429a      	cmp	r2, r3
 8008760:	bf18      	it	ne
 8008762:	4282      	cmpne	r2, r0
 8008764:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	428a      	cmp	r2, r1
 8008770:	bf0c      	ite	eq
 8008772:	2300      	moveq	r3, #0
 8008774:	f003 0301 	andne.w	r3, r3, #1
 8008778:	3130      	adds	r1, #48	; 0x30
 800877a:	4282      	cmp	r2, r0
 800877c:	bf0c      	ite	eq
 800877e:	2300      	moveq	r3, #0
 8008780:	f003 0301 	andne.w	r3, r3, #1
 8008784:	3030      	adds	r0, #48	; 0x30
 8008786:	428a      	cmp	r2, r1
 8008788:	bf0c      	ite	eq
 800878a:	2300      	moveq	r3, #0
 800878c:	f003 0301 	andne.w	r3, r3, #1
 8008790:	3130      	adds	r1, #48	; 0x30
 8008792:	4282      	cmp	r2, r0
 8008794:	bf0c      	ite	eq
 8008796:	2300      	moveq	r3, #0
 8008798:	f003 0301 	andne.w	r3, r3, #1
 800879c:	3030      	adds	r0, #48	; 0x30
 800879e:	428a      	cmp	r2, r1
 80087a0:	bf0c      	ite	eq
 80087a2:	2300      	moveq	r3, #0
 80087a4:	f003 0301 	andne.w	r3, r3, #1
 80087a8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80087ac:	4282      	cmp	r2, r0
 80087ae:	bf0c      	ite	eq
 80087b0:	2300      	moveq	r3, #0
 80087b2:	f003 0301 	andne.w	r3, r3, #1
 80087b6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80087ba:	428a      	cmp	r2, r1
 80087bc:	bf0c      	ite	eq
 80087be:	2300      	moveq	r3, #0
 80087c0:	f003 0301 	andne.w	r3, r3, #1
 80087c4:	3130      	adds	r1, #48	; 0x30
 80087c6:	4282      	cmp	r2, r0
 80087c8:	bf0c      	ite	eq
 80087ca:	2300      	moveq	r3, #0
 80087cc:	f003 0301 	andne.w	r3, r3, #1
 80087d0:	3030      	adds	r0, #48	; 0x30
 80087d2:	428a      	cmp	r2, r1
 80087d4:	bf0c      	ite	eq
 80087d6:	2300      	moveq	r3, #0
 80087d8:	f003 0301 	andne.w	r3, r3, #1
 80087dc:	3130      	adds	r1, #48	; 0x30
 80087de:	4282      	cmp	r2, r0
 80087e0:	bf0c      	ite	eq
 80087e2:	2300      	moveq	r3, #0
 80087e4:	f003 0301 	andne.w	r3, r3, #1
 80087e8:	3030      	adds	r0, #48	; 0x30
 80087ea:	428a      	cmp	r2, r1
 80087ec:	bf0c      	ite	eq
 80087ee:	2300      	moveq	r3, #0
 80087f0:	f003 0301 	andne.w	r3, r3, #1
 80087f4:	3130      	adds	r1, #48	; 0x30
 80087f6:	4282      	cmp	r2, r0
 80087f8:	bf0c      	ite	eq
 80087fa:	2300      	moveq	r3, #0
 80087fc:	f003 0301 	andne.w	r3, r3, #1
 8008800:	428a      	cmp	r2, r1
 8008802:	bf0c      	ite	eq
 8008804:	2300      	moveq	r3, #0
 8008806:	f003 0301 	andne.w	r3, r3, #1
 800880a:	b113      	cbz	r3, 8008812 <HAL_DMA_DeInit+0xd2>
 800880c:	4b21      	ldr	r3, [pc, #132]	; (8008894 <HAL_DMA_DeInit+0x154>)
 800880e:	429a      	cmp	r2, r3
 8008810:	d132      	bne.n	8008878 <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 8008812:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008814:	b2d3      	uxtb	r3, r2
 8008816:	4920      	ldr	r1, [pc, #128]	; (8008898 <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 8008818:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800881c:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 800881e:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008820:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008822:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 8008826:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 8008828:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800882a:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 800882e:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008830:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 8008834:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8008836:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8008838:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800883a:	f04f 0021 	mov.w	r0, #33	; 0x21
 800883e:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008840:	4816      	ldr	r0, [pc, #88]	; (800889c <HAL_DMA_DeInit+0x15c>)
 8008842:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008844:	4916      	ldr	r1, [pc, #88]	; (80088a0 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008846:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008848:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800884c:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008850:	bf88      	it	hi
 8008852:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008854:	4082      	lsls	r2, r0
  return HAL_OK;
 8008856:	4618      	mov	r0, r3
 8008858:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800885a:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800885c:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 800885e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8008862:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8008866:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800886a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 800886e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8008872:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008874:	2001      	movs	r0, #1
}
 8008876:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008878:	f240 1149 	movw	r1, #329	; 0x149
 800887c:	4809      	ldr	r0, [pc, #36]	; (80088a4 <HAL_DMA_DeInit+0x164>)
 800887e:	f7fb fed9 	bl	8004634 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	e7c5      	b.n	8008812 <HAL_DMA_DeInit+0xd2>
 8008886:	bf00      	nop
 8008888:	40026010 	.word	0x40026010
 800888c:	40026028 	.word	0x40026028
 8008890:	40026040 	.word	0x40026040
 8008894:	400264b8 	.word	0x400264b8
 8008898:	aaaaaaab 	.word	0xaaaaaaab
 800889c:	0802b398 	.word	0x0802b398
 80088a0:	fffffc00 	.word	0xfffffc00
 80088a4:	0802b360 	.word	0x0802b360

080088a8 <HAL_DMA_Start_IT>:
{
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	461e      	mov	r6, r3
 80088ae:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088b0:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80088b4:	1e58      	subs	r0, r3, #1
 80088b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 80088ba:	4688      	mov	r8, r1
 80088bc:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80088be:	4298      	cmp	r0, r3
 80088c0:	d83b      	bhi.n	800893a <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 80088c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d040      	beq.n	800894c <HAL_DMA_Start_IT+0xa4>
 80088ca:	2301      	movs	r3, #1
 80088cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80088d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d005      	beq.n	80088e4 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80088d8:	2300      	movs	r3, #0
    status = HAL_BUSY;
 80088da:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80088dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80088e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80088e4:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80088e6:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80088e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f6:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088f8:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 80088fa:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d028      	beq.n	8008952 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8008900:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8008904:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008906:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008908:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800890a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800890c:	408b      	lsls	r3, r1
 800890e:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	f043 0316 	orr.w	r3, r3, #22
 8008918:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800891a:	696b      	ldr	r3, [r5, #20]
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008922:	b11a      	cbz	r2, 800892c <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	f043 0308 	orr.w	r3, r3, #8
 800892a:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800892c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800892e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008930:	f043 0301 	orr.w	r3, r3, #1
 8008934:	602b      	str	r3, [r5, #0]
}
 8008936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800893a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800893e:	4807      	ldr	r0, [pc, #28]	; (800895c <HAL_DMA_Start_IT+0xb4>)
 8008940:	f7fb fe78 	bl	8004634 <assert_failed>
  __HAL_LOCK(hdma);
 8008944:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008948:	2b01      	cmp	r3, #1
 800894a:	d1be      	bne.n	80088ca <HAL_DMA_Start_IT+0x22>
 800894c:	2002      	movs	r0, #2
}
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8008952:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8008954:	f8c5 800c 	str.w	r8, [r5, #12]
 8008958:	e7d5      	b.n	8008906 <HAL_DMA_Start_IT+0x5e>
 800895a:	bf00      	nop
 800895c:	0802b360 	.word	0x0802b360

08008960 <HAL_DMA_Abort>:
{
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008964:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8008966:	f7fe fdd5 	bl	8007514 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800896a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800896e:	2b02      	cmp	r3, #2
 8008970:	d006      	beq.n	8008980 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008972:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8008974:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008976:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008978:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800897a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800897e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	4605      	mov	r5, r0
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f022 0216 	bic.w	r2, r2, #22
 800898a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008992:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008994:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008996:	b33a      	cbz	r2, 80089e8 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	f022 0208 	bic.w	r2, r2, #8
 800899e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	f022 0201 	bic.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089a8:	e005      	b.n	80089b6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089aa:	f7fe fdb3 	bl	8007514 <HAL_GetTick>
 80089ae:	1b43      	subs	r3, r0, r5
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	d80f      	bhi.n	80089d4 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f013 0301 	ands.w	r3, r3, #1
 80089bc:	d1f5      	bne.n	80089aa <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089be:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089c0:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80089c2:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089c4:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80089c6:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089c8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80089ca:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80089ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089d6:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80089d8:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089da:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80089dc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80089e2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d1d4      	bne.n	8008998 <HAL_DMA_Abort+0x38>
 80089ee:	e7d7      	b.n	80089a0 <HAL_DMA_Abort+0x40>

080089f0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089f0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 80089f4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089f6:	2a02      	cmp	r2, #2
 80089f8:	d003      	beq.n	8008a02 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089fa:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80089fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a00:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8008a02:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a04:	2105      	movs	r1, #5
  return HAL_OK;
 8008a06:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a08:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8008a0c:	6813      	ldr	r3, [r2, #0]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	6013      	str	r3, [r2, #0]
}
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <HAL_DMA_IRQHandler>:
{
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8008a1c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8008a1e:	4b74      	ldr	r3, [pc, #464]	; (8008bf0 <HAL_DMA_IRQHandler+0x1d8>)
{
 8008a20:	b082      	sub	sp, #8
 8008a22:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8008a24:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 8008a26:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a28:	2208      	movs	r2, #8
 8008a2a:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8008a2e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a30:	409a      	lsls	r2, r3
 8008a32:	4222      	tst	r2, r4
 8008a34:	d004      	beq.n	8008a40 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a36:	6801      	ldr	r1, [r0, #0]
 8008a38:	680f      	ldr	r7, [r1, #0]
 8008a3a:	0778      	lsls	r0, r7, #29
 8008a3c:	f100 80ab 	bmi.w	8008b96 <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	4222      	tst	r2, r4
 8008a46:	d005      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008a48:	f8d8 1000 	ldr.w	r1, [r8]
 8008a4c:	6949      	ldr	r1, [r1, #20]
 8008a4e:	0609      	lsls	r1, r1, #24
 8008a50:	f100 8099 	bmi.w	8008b86 <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a54:	2204      	movs	r2, #4
 8008a56:	409a      	lsls	r2, r3
 8008a58:	4222      	tst	r2, r4
 8008a5a:	d005      	beq.n	8008a68 <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008a5c:	f8d8 1000 	ldr.w	r1, [r8]
 8008a60:	6809      	ldr	r1, [r1, #0]
 8008a62:	078f      	lsls	r7, r1, #30
 8008a64:	f100 8087 	bmi.w	8008b76 <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008a68:	2210      	movs	r2, #16
 8008a6a:	409a      	lsls	r2, r3
 8008a6c:	4222      	tst	r2, r4
 8008a6e:	d004      	beq.n	8008a7a <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008a70:	f8d8 1000 	ldr.w	r1, [r8]
 8008a74:	680f      	ldr	r7, [r1, #0]
 8008a76:	0738      	lsls	r0, r7, #28
 8008a78:	d468      	bmi.n	8008b4c <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	4222      	tst	r2, r4
 8008a80:	d017      	beq.n	8008ab2 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a82:	f8d8 1000 	ldr.w	r1, [r8]
 8008a86:	680c      	ldr	r4, [r1, #0]
 8008a88:	06e0      	lsls	r0, r4, #27
 8008a8a:	d512      	bpl.n	8008ab2 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a8c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a8e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8008a92:	2a05      	cmp	r2, #5
 8008a94:	d039      	beq.n	8008b0a <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a96:	680b      	ldr	r3, [r1, #0]
 8008a98:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a9c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a9e:	f000 808d 	beq.w	8008bbc <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008aa2:	0319      	lsls	r1, r3, #12
 8008aa4:	f140 8098 	bpl.w	8008bd8 <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 8008aa8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8008aac:	b10b      	cbz	r3, 8008ab2 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ab2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d045      	beq.n	8008b46 <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008aba:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008abe:	07da      	lsls	r2, r3, #31
 8008ac0:	d51b      	bpl.n	8008afa <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 8008ac2:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ac6:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8008ac8:	494a      	ldr	r1, [pc, #296]	; (8008bf4 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8008aca:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008ace:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8008ad0:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8008ad8:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e002      	b.n	8008ae4 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ade:	6813      	ldr	r3, [r2, #0]
 8008ae0:	07db      	lsls	r3, r3, #31
 8008ae2:	d504      	bpl.n	8008aee <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	d9f7      	bls.n	8008ade <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 8008aee:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8008af0:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8008af2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008af6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008afa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008afe:	b313      	cbz	r3, 8008b46 <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 8008b00:	4640      	mov	r0, r8
}
 8008b02:	b002      	add	sp, #8
 8008b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8008b08:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b0a:	680a      	ldr	r2, [r1, #0]
 8008b0c:	f022 0216 	bic.w	r2, r2, #22
 8008b10:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b12:	694a      	ldr	r2, [r1, #20]
 8008b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b18:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b1a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d060      	beq.n	8008be4 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b22:	680a      	ldr	r2, [r1, #0]
 8008b24:	f022 0208 	bic.w	r2, r2, #8
 8008b28:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b2a:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8008b2c:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b2e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8008b32:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b34:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 8008b36:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 8008b3a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008b3e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1dc      	bne.n	8008b00 <HAL_DMA_IRQHandler+0xe8>
}
 8008b46:	b002      	add	sp, #8
 8008b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b4c:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b4e:	680a      	ldr	r2, [r1, #0]
 8008b50:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b54:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b56:	d12a      	bne.n	8008bae <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b58:	05d7      	lsls	r7, r2, #23
 8008b5a:	d403      	bmi.n	8008b64 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b5c:	680a      	ldr	r2, [r1, #0]
 8008b5e:	f022 0208 	bic.w	r2, r2, #8
 8008b62:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8008b64:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d086      	beq.n	8008a7a <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b70:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008b74:	e781      	b.n	8008a7a <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b76:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b78:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008b7c:	f042 0204 	orr.w	r2, r2, #4
 8008b80:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008b84:	e770      	b.n	8008a68 <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008b86:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b88:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008b8c:	f042 0202 	orr.w	r2, r2, #2
 8008b90:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008b94:	e75e      	b.n	8008a54 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008b96:	680f      	ldr	r7, [r1, #0]
 8008b98:	f027 0704 	bic.w	r7, r7, #4
 8008b9c:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008b9e:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ba0:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8008ba4:	f042 0201 	orr.w	r2, r2, #1
 8008ba8:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008bac:	e748      	b.n	8008a40 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008bae:	0312      	lsls	r2, r2, #12
 8008bb0:	d5d8      	bpl.n	8008b64 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008bb2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d1d8      	bne.n	8008b6c <HAL_DMA_IRQHandler+0x154>
 8008bba:	e75e      	b.n	8008a7a <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008bbc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8008bc0:	f47f af72 	bne.w	8008aa8 <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008bc4:	680a      	ldr	r2, [r1, #0]
 8008bc6:	f022 0210 	bic.w	r2, r2, #16
 8008bca:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008bcc:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8008bce:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8008bd2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008bd6:	e767      	b.n	8008aa8 <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 8008bd8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f47f af66 	bne.w	8008aae <HAL_DMA_IRQHandler+0x96>
 8008be2:	e766      	b.n	8008ab2 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008be4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	d19a      	bne.n	8008b22 <HAL_DMA_IRQHandler+0x10a>
 8008bec:	e79d      	b.n	8008b2a <HAL_DMA_IRQHandler+0x112>
 8008bee:	bf00      	nop
 8008bf0:	2000027c 	.word	0x2000027c
 8008bf4:	1b4e81b5 	.word	0x1b4e81b5

08008bf8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8008bf8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8008bfa:	4770      	bx	lr

08008bfc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	9f08      	ldr	r7, [sp, #32]
 8008c02:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008c04:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 8008c08:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008c0a:	1e7d      	subs	r5, r7, #1
{
 8008c0c:	4691      	mov	r9, r2
 8008c0e:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008c10:	4285      	cmp	r5, r0
 8008c12:	d85f      	bhi.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008c14:	68a0      	ldr	r0, [r4, #8]
 8008c16:	2880      	cmp	r0, #128	; 0x80
 8008c18:	d063      	beq.n	8008ce2 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008c1a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	f000 8090 	beq.w	8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8008c24:	2301      	movs	r3, #1
 8008c26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008c2a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d005      	beq.n	8008c3e <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008c32:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 8008c34:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8008c36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c3e:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008c40:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c42:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c54:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 8008c56:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 8008c58:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c5a:	d06a      	beq.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8008c5c:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8008c60:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008c64:	4b93      	ldr	r3, [pc, #588]	; (8008eb4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008c66:	429d      	cmp	r5, r3
 8008c68:	d941      	bls.n	8008cee <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 8008c6a:	3b48      	subs	r3, #72	; 0x48
 8008c6c:	4992      	ldr	r1, [pc, #584]	; (8008eb8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008c6e:	4a93      	ldr	r2, [pc, #588]	; (8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008c70:	429d      	cmp	r5, r3
 8008c72:	bf18      	it	ne
 8008c74:	428d      	cmpne	r5, r1
 8008c76:	bf14      	ite	ne
 8008c78:	2301      	movne	r3, #1
 8008c7a:	2300      	moveq	r3, #0
 8008c7c:	4295      	cmp	r5, r2
 8008c7e:	bf0c      	ite	eq
 8008c80:	2300      	moveq	r3, #0
 8008c82:	f003 0301 	andne.w	r3, r3, #1
 8008c86:	b11b      	cbz	r3, 8008c90 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 8008c88:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008c8a:	429d      	cmp	r5, r3
 8008c8c:	f040 812e 	bne.w	8008eec <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8008c90:	4b8c      	ldr	r3, [pc, #560]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008c92:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008c94:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008c96:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008c98:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008c9a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008c9c:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008c9e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008ca0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4b87      	ldr	r3, [pc, #540]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008ca6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ca8:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008cac:	f043 0316 	orr.w	r3, r3, #22
 8008cb0:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008cb2:	696b      	ldr	r3, [r5, #20]
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d03e      	beq.n	8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	f043 0308 	orr.w	r3, r3, #8
 8008cc4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 8008cc6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	602b      	str	r3, [r5, #0]
}
 8008cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008cd4:	487c      	ldr	r0, [pc, #496]	; (8008ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8008cd6:	21a1      	movs	r1, #161	; 0xa1
 8008cd8:	f7fb fcac 	bl	8004634 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008cdc:	68a0      	ldr	r0, [r4, #8]
 8008cde:	2880      	cmp	r0, #128	; 0x80
 8008ce0:	d19b      	bne.n	8008c1a <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8008ce6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008ce8:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008cee:	4b77      	ldr	r3, [pc, #476]	; (8008ecc <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8008cf0:	429d      	cmp	r5, r3
 8008cf2:	d929      	bls.n	8008d48 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008cf4:	3ba8      	subs	r3, #168	; 0xa8
 8008cf6:	4976      	ldr	r1, [pc, #472]	; (8008ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008cf8:	4a70      	ldr	r2, [pc, #448]	; (8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008cfa:	429d      	cmp	r5, r3
 8008cfc:	bf18      	it	ne
 8008cfe:	428d      	cmpne	r5, r1
 8008d00:	bf14      	ite	ne
 8008d02:	2301      	movne	r3, #1
 8008d04:	2300      	moveq	r3, #0
 8008d06:	4295      	cmp	r5, r2
 8008d08:	bf0c      	ite	eq
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	f003 0301 	andne.w	r3, r3, #1
 8008d10:	b113      	cbz	r3, 8008d18 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8008d12:	4b6b      	ldr	r3, [pc, #428]	; (8008ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008d14:	429d      	cmp	r5, r3
 8008d16:	d15a      	bne.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 8008d18:	4b6a      	ldr	r3, [pc, #424]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008d1a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d1c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d1e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d20:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d22:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d24:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d26:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d28:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4a65      	ldr	r2, [pc, #404]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8008d2e:	6093      	str	r3, [r2, #8]
 8008d30:	e7ba      	b.n	8008ca8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 8008d32:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8008d36:	f8c5 800c 	str.w	r8, [r5, #12]
 8008d3a:	e793      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1bd      	bne.n	8008cbe <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 8008d42:	e7c0      	b.n	8008cc6 <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 8008d44:	2002      	movs	r0, #2
 8008d46:	e778      	b.n	8008c3a <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d48:	4b62      	ldr	r3, [pc, #392]	; (8008ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	d91f      	bls.n	8008d8e <HAL_DMAEx_MultiBufferStart_IT+0x192>
 8008d4e:	3b48      	subs	r3, #72	; 0x48
 8008d50:	495f      	ldr	r1, [pc, #380]	; (8008ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008d52:	4a5a      	ldr	r2, [pc, #360]	; (8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008d54:	429d      	cmp	r5, r3
 8008d56:	bf18      	it	ne
 8008d58:	428d      	cmpne	r5, r1
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	4295      	cmp	r5, r2
 8008d62:	bf0c      	ite	eq
 8008d64:	2300      	moveq	r3, #0
 8008d66:	f003 0301 	andne.w	r3, r3, #1
 8008d6a:	b11b      	cbz	r3, 8008d74 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8008d6c:	4b54      	ldr	r3, [pc, #336]	; (8008ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	f040 8152 	bne.w	8009018 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8008d74:	4b58      	ldr	r3, [pc, #352]	; (8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008d76:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d78:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d7a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d7c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d7e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d80:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d82:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d84:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d86:	2301      	movs	r3, #1
 8008d88:	4a53      	ldr	r2, [pc, #332]	; (8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008d8a:	60d3      	str	r3, [r2, #12]
 8008d8c:	e78c      	b.n	8008ca8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d8e:	4b50      	ldr	r3, [pc, #320]	; (8008ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8008d90:	4949      	ldr	r1, [pc, #292]	; (8008eb8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008d92:	4a4a      	ldr	r2, [pc, #296]	; (8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008d94:	429d      	cmp	r5, r3
 8008d96:	bf18      	it	ne
 8008d98:	428d      	cmpne	r5, r1
 8008d9a:	bf14      	ite	ne
 8008d9c:	2301      	movne	r3, #1
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	4295      	cmp	r5, r2
 8008da2:	bf0c      	ite	eq
 8008da4:	2300      	moveq	r3, #0
 8008da6:	f003 0301 	andne.w	r3, r3, #1
 8008daa:	b11b      	cbz	r3, 8008db4 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 8008dac:	4b44      	ldr	r3, [pc, #272]	; (8008ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008dae:	429d      	cmp	r5, r3
 8008db0:	f040 80be 	bne.w	8008f30 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8008db4:	4b48      	ldr	r3, [pc, #288]	; (8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008db6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008db8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008dba:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008dbc:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008dbe:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008dc0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008dc2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008dc4:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4a43      	ldr	r2, [pc, #268]	; (8008ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8008dca:	6093      	str	r3, [r2, #8]
 8008dcc:	e76c      	b.n	8008ca8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008dce:	3b48      	subs	r3, #72	; 0x48
 8008dd0:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008dd4:	3218      	adds	r2, #24
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	bf18      	it	ne
 8008dda:	428d      	cmpne	r5, r1
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	4295      	cmp	r5, r2
 8008de4:	bf0c      	ite	eq
 8008de6:	2300      	moveq	r3, #0
 8008de8:	f003 0301 	andne.w	r3, r3, #1
 8008dec:	b11b      	cbz	r3, 8008df6 <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 8008dee:	4b3b      	ldr	r3, [pc, #236]	; (8008edc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008df0:	429d      	cmp	r5, r3
 8008df2:	f040 8210 	bne.w	8009216 <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 8008df6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008dfa:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008dfc:	4839      	ldr	r0, [pc, #228]	; (8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008dfe:	4a31      	ldr	r2, [pc, #196]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e00:	429d      	cmp	r5, r3
 8008e02:	bf18      	it	ne
 8008e04:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008e06:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e08:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8008e0c:	bf14      	ite	ne
 8008e0e:	2301      	movne	r3, #1
 8008e10:	2300      	moveq	r3, #0
 8008e12:	4295      	cmp	r5, r2
 8008e14:	bf0c      	ite	eq
 8008e16:	2300      	moveq	r3, #0
 8008e18:	f003 0301 	andne.w	r3, r3, #1
 8008e1c:	b11b      	cbz	r3, 8008e26 <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8008e1e:	4b2f      	ldr	r3, [pc, #188]	; (8008edc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008e20:	429d      	cmp	r5, r3
 8008e22:	f040 8212 	bne.w	800924a <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 8008e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e2a:	4b2d      	ldr	r3, [pc, #180]	; (8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008e2c:	482d      	ldr	r0, [pc, #180]	; (8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e2e:	4925      	ldr	r1, [pc, #148]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e30:	429d      	cmp	r5, r3
 8008e32:	bf18      	it	ne
 8008e34:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008e36:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e38:	bf14      	ite	ne
 8008e3a:	2301      	movne	r3, #1
 8008e3c:	2300      	moveq	r3, #0
 8008e3e:	4a2a      	ldr	r2, [pc, #168]	; (8008ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008e40:	4295      	cmp	r5, r2
 8008e42:	bf0c      	ite	eq
 8008e44:	2300      	moveq	r3, #0
 8008e46:	f003 0301 	andne.w	r3, r3, #1
 8008e4a:	b11b      	cbz	r3, 8008e54 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8008e4c:	4b23      	ldr	r3, [pc, #140]	; (8008edc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008e4e:	429d      	cmp	r5, r3
 8008e50:	f040 822b 	bne.w	80092aa <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8008e54:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e58:	4b22      	ldr	r3, [pc, #136]	; (8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008e5a:	4821      	ldr	r0, [pc, #132]	; (8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e5c:	4919      	ldr	r1, [pc, #100]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e5e:	429d      	cmp	r5, r3
 8008e60:	bf18      	it	ne
 8008e62:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008e64:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e66:	bf14      	ite	ne
 8008e68:	2301      	movne	r3, #1
 8008e6a:	2300      	moveq	r3, #0
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008e6e:	4295      	cmp	r5, r2
 8008e70:	bf0c      	ite	eq
 8008e72:	2300      	moveq	r3, #0
 8008e74:	f003 0301 	andne.w	r3, r3, #1
 8008e78:	b11b      	cbz	r3, 8008e82 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 8008e7a:	4b18      	ldr	r3, [pc, #96]	; (8008edc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008e7c:	429d      	cmp	r5, r3
 8008e7e:	f040 81fc 	bne.w	800927a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8008e82:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008e88:	4815      	ldr	r0, [pc, #84]	; (8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e8a:	490e      	ldr	r1, [pc, #56]	; (8008ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008e8c:	429d      	cmp	r5, r3
 8008e8e:	bf18      	it	ne
 8008e90:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008e92:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	4a13      	ldr	r2, [pc, #76]	; (8008ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008e9c:	4295      	cmp	r5, r2
 8008e9e:	bf0c      	ite	eq
 8008ea0:	2300      	moveq	r3, #0
 8008ea2:	f003 0301 	andne.w	r3, r3, #1
 8008ea6:	b11b      	cbz	r3, 8008eb0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	f040 8215 	bne.w	80092da <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	e73b      	b.n	8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8008eb4:	40026458 	.word	0x40026458
 8008eb8:	40026010 	.word	0x40026010
 8008ebc:	40026070 	.word	0x40026070
 8008ec0:	40026470 	.word	0x40026470
 8008ec4:	40026400 	.word	0x40026400
 8008ec8:	0802b3a0 	.word	0x0802b3a0
 8008ecc:	400260b8 	.word	0x400260b8
 8008ed0:	40026410 	.word	0x40026410
 8008ed4:	40026058 	.word	0x40026058
 8008ed8:	40026000 	.word	0x40026000
 8008edc:	40026488 	.word	0x40026488
 8008ee0:	40026028 	.word	0x40026028
 8008ee4:	40026428 	.word	0x40026428
 8008ee8:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008eec:	3b48      	subs	r3, #72	; 0x48
 8008eee:	3118      	adds	r1, #24
 8008ef0:	3218      	adds	r2, #24
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	bf18      	it	ne
 8008ef6:	428d      	cmpne	r5, r1
 8008ef8:	bf14      	ite	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	2300      	moveq	r3, #0
 8008efe:	4295      	cmp	r5, r2
 8008f00:	bf0c      	ite	eq
 8008f02:	2300      	moveq	r3, #0
 8008f04:	f003 0301 	andne.w	r3, r3, #1
 8008f08:	b11b      	cbz	r3, 8008f12 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 8008f0a:	4b7d      	ldr	r3, [pc, #500]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	f040 8103 	bne.w	8009118 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8008f12:	4b7c      	ldr	r3, [pc, #496]	; (8009104 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8008f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f1c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f22:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f24:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f28:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008f2a:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008f2c:	2240      	movs	r2, #64	; 0x40
 8008f2e:	e6b9      	b.n	8008ca4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f30:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8008f34:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8008f38:	3218      	adds	r2, #24
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	bf18      	it	ne
 8008f3e:	428d      	cmpne	r5, r1
 8008f40:	bf14      	ite	ne
 8008f42:	2301      	movne	r3, #1
 8008f44:	2300      	moveq	r3, #0
 8008f46:	4295      	cmp	r5, r2
 8008f48:	bf0c      	ite	eq
 8008f4a:	2300      	moveq	r3, #0
 8008f4c:	f003 0301 	andne.w	r3, r3, #1
 8008f50:	b11b      	cbz	r3, 8008f5a <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 8008f52:	4b6b      	ldr	r3, [pc, #428]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8008f54:	429d      	cmp	r5, r3
 8008f56:	f040 81d8 	bne.w	800930a <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8008f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f5e:	4b6a      	ldr	r3, [pc, #424]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8008f60:	486a      	ldr	r0, [pc, #424]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f62:	4a6b      	ldr	r2, [pc, #428]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f64:	429d      	cmp	r5, r3
 8008f66:	bf18      	it	ne
 8008f68:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f6a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f6c:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8008f70:	bf14      	ite	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	2300      	moveq	r3, #0
 8008f76:	4295      	cmp	r5, r2
 8008f78:	bf0c      	ite	eq
 8008f7a:	2300      	moveq	r3, #0
 8008f7c:	f003 0301 	andne.w	r3, r3, #1
 8008f80:	b11b      	cbz	r3, 8008f8a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008f82:	4b5f      	ldr	r3, [pc, #380]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8008f84:	429d      	cmp	r5, r3
 8008f86:	f040 81d9 	bne.w	800933c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8008f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f8e:	4b5e      	ldr	r3, [pc, #376]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8008f90:	485e      	ldr	r0, [pc, #376]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f92:	495f      	ldr	r1, [pc, #380]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f94:	429d      	cmp	r5, r3
 8008f96:	bf18      	it	ne
 8008f98:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008f9a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008f9c:	bf14      	ite	ne
 8008f9e:	2301      	movne	r3, #1
 8008fa0:	2300      	moveq	r3, #0
 8008fa2:	4a5c      	ldr	r2, [pc, #368]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8008fa4:	4295      	cmp	r5, r2
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2300      	moveq	r3, #0
 8008faa:	f003 0301 	andne.w	r3, r3, #1
 8008fae:	b11b      	cbz	r3, 8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8008fb0:	4b53      	ldr	r3, [pc, #332]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	f040 822c 	bne.w	8009410 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8008fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fbc:	4b53      	ldr	r3, [pc, #332]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8008fbe:	4852      	ldr	r0, [pc, #328]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fc0:	4953      	ldr	r1, [pc, #332]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	bf18      	it	ne
 8008fc6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008fc8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	4a50      	ldr	r2, [pc, #320]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8008fd2:	4295      	cmp	r5, r2
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	f003 0301 	andne.w	r3, r3, #1
 8008fdc:	b11b      	cbz	r3, 8008fe6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8008fde:	4b48      	ldr	r3, [pc, #288]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8008fe0:	429d      	cmp	r5, r3
 8008fe2:	f040 81db 	bne.w	800939c <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 8008fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008fea:	4b47      	ldr	r3, [pc, #284]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8008fec:	4847      	ldr	r0, [pc, #284]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008fee:	4948      	ldr	r1, [pc, #288]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008ff0:	429d      	cmp	r5, r3
 8008ff2:	bf18      	it	ne
 8008ff4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008ff6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008ff8:	bf14      	ite	ne
 8008ffa:	2301      	movne	r3, #1
 8008ffc:	2300      	moveq	r3, #0
 8008ffe:	4a45      	ldr	r2, [pc, #276]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009000:	4295      	cmp	r5, r2
 8009002:	bf0c      	ite	eq
 8009004:	2300      	moveq	r3, #0
 8009006:	f003 0301 	andne.w	r3, r3, #1
 800900a:	b11b      	cbz	r3, 8009014 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 800900c:	4b3c      	ldr	r3, [pc, #240]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800900e:	429d      	cmp	r5, r3
 8009010:	f040 822d 	bne.w	800946e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8009014:	2340      	movs	r3, #64	; 0x40
 8009016:	e6d7      	b.n	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009018:	3b48      	subs	r3, #72	; 0x48
 800901a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800901e:	3218      	adds	r2, #24
 8009020:	429d      	cmp	r5, r3
 8009022:	bf18      	it	ne
 8009024:	428d      	cmpne	r5, r1
 8009026:	bf14      	ite	ne
 8009028:	2301      	movne	r3, #1
 800902a:	2300      	moveq	r3, #0
 800902c:	4295      	cmp	r5, r2
 800902e:	bf0c      	ite	eq
 8009030:	2300      	moveq	r3, #0
 8009032:	f003 0301 	andne.w	r3, r3, #1
 8009036:	b11b      	cbz	r3, 8009040 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8009038:	4b31      	ldr	r3, [pc, #196]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800903a:	429d      	cmp	r5, r3
 800903c:	f040 81d0 	bne.w	80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8009040:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009044:	4b31      	ldr	r3, [pc, #196]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009046:	4830      	ldr	r0, [pc, #192]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009048:	4a31      	ldr	r2, [pc, #196]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800904a:	429d      	cmp	r5, r3
 800904c:	bf18      	it	ne
 800904e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009050:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009052:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	4295      	cmp	r5, r2
 800905e:	bf0c      	ite	eq
 8009060:	2300      	moveq	r3, #0
 8009062:	f003 0301 	andne.w	r3, r3, #1
 8009066:	b11b      	cbz	r3, 8009070 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8009068:	4b25      	ldr	r3, [pc, #148]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800906a:	429d      	cmp	r5, r3
 800906c:	f040 817e 	bne.w	800936c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009070:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009076:	4825      	ldr	r0, [pc, #148]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009078:	4925      	ldr	r1, [pc, #148]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800907a:	429d      	cmp	r5, r3
 800907c:	bf18      	it	ne
 800907e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009080:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009082:	bf14      	ite	ne
 8009084:	2301      	movne	r3, #1
 8009086:	2300      	moveq	r3, #0
 8009088:	4a22      	ldr	r2, [pc, #136]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800908a:	4295      	cmp	r5, r2
 800908c:	bf0c      	ite	eq
 800908e:	2300      	moveq	r3, #0
 8009090:	f003 0301 	andne.w	r3, r3, #1
 8009094:	b11b      	cbz	r3, 800909e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009096:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009098:	429d      	cmp	r5, r3
 800909a:	f040 81fe 	bne.w	800949a <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 800909e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090a2:	4b1a      	ldr	r3, [pc, #104]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80090a4:	4818      	ldr	r0, [pc, #96]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80090a6:	491a      	ldr	r1, [pc, #104]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090a8:	429d      	cmp	r5, r3
 80090aa:	bf18      	it	ne
 80090ac:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80090ae:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090b0:	bf14      	ite	ne
 80090b2:	2301      	movne	r3, #1
 80090b4:	2300      	moveq	r3, #0
 80090b6:	4a17      	ldr	r2, [pc, #92]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80090b8:	4295      	cmp	r5, r2
 80090ba:	bf0c      	ite	eq
 80090bc:	2300      	moveq	r3, #0
 80090be:	f003 0301 	andne.w	r3, r3, #1
 80090c2:	b11b      	cbz	r3, 80090cc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80090c6:	429d      	cmp	r5, r3
 80090c8:	f040 81ba 	bne.w	8009440 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 80090cc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80090d0:	4b0e      	ldr	r3, [pc, #56]	; (800910c <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80090d2:	480d      	ldr	r0, [pc, #52]	; (8009108 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090d4:	490e      	ldr	r1, [pc, #56]	; (8009110 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80090d6:	429d      	cmp	r5, r3
 80090d8:	bf18      	it	ne
 80090da:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090dc:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	4a0b      	ldr	r2, [pc, #44]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80090e6:	4295      	cmp	r5, r2
 80090e8:	bf0c      	ite	eq
 80090ea:	2300      	moveq	r3, #0
 80090ec:	f003 0301 	andne.w	r3, r3, #1
 80090f0:	b11b      	cbz	r3, 80090fa <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80090f2:	4b03      	ldr	r3, [pc, #12]	; (8009100 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80090f4:	429d      	cmp	r5, r3
 80090f6:	f040 81e6 	bne.w	80094c6 <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	e644      	b.n	8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 80090fe:	bf00      	nop
 8009100:	40026488 	.word	0x40026488
 8009104:	40026400 	.word	0x40026400
 8009108:	40026428 	.word	0x40026428
 800910c:	40026028 	.word	0x40026028
 8009110:	40026000 	.word	0x40026000
 8009114:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009118:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800911c:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009120:	3218      	adds	r2, #24
 8009122:	429d      	cmp	r5, r3
 8009124:	bf18      	it	ne
 8009126:	428d      	cmpne	r5, r1
 8009128:	bf14      	ite	ne
 800912a:	2301      	movne	r3, #1
 800912c:	2300      	moveq	r3, #0
 800912e:	4295      	cmp	r5, r2
 8009130:	bf0c      	ite	eq
 8009132:	2300      	moveq	r3, #0
 8009134:	f003 0301 	andne.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 81e6 	beq.w	800950a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800913e:	4ba3      	ldr	r3, [pc, #652]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009140:	429d      	cmp	r5, r3
 8009142:	f000 81e2 	beq.w	800950a <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009146:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800914a:	4ba1      	ldr	r3, [pc, #644]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800914c:	48a1      	ldr	r0, [pc, #644]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800914e:	4aa2      	ldr	r2, [pc, #648]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009150:	429d      	cmp	r5, r3
 8009152:	bf18      	it	ne
 8009154:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009156:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009158:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800915c:	bf14      	ite	ne
 800915e:	2301      	movne	r3, #1
 8009160:	2300      	moveq	r3, #0
 8009162:	4295      	cmp	r5, r2
 8009164:	bf0c      	ite	eq
 8009166:	2300      	moveq	r3, #0
 8009168:	f003 0301 	andne.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 81c9 	beq.w	8009504 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009172:	4b96      	ldr	r3, [pc, #600]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009174:	429d      	cmp	r5, r3
 8009176:	f000 81c5 	beq.w	8009504 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 800917a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800917e:	4b94      	ldr	r3, [pc, #592]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009180:	4894      	ldr	r0, [pc, #592]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009182:	4995      	ldr	r1, [pc, #596]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009184:	429d      	cmp	r5, r3
 8009186:	bf18      	it	ne
 8009188:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800918a:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	4a92      	ldr	r2, [pc, #584]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009194:	4295      	cmp	r5, r2
 8009196:	bf0c      	ite	eq
 8009198:	2300      	moveq	r3, #0
 800919a:	f003 0301 	andne.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 81ad 	beq.w	80094fe <HAL_DMAEx_MultiBufferStart_IT+0x902>
 80091a4:	4b89      	ldr	r3, [pc, #548]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80091a6:	429d      	cmp	r5, r3
 80091a8:	f000 81a9 	beq.w	80094fe <HAL_DMAEx_MultiBufferStart_IT+0x902>
 80091ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80091b0:	4b87      	ldr	r3, [pc, #540]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80091b2:	4888      	ldr	r0, [pc, #544]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80091b4:	4988      	ldr	r1, [pc, #544]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80091b6:	429d      	cmp	r5, r3
 80091b8:	bf18      	it	ne
 80091ba:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80091bc:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80091be:	bf14      	ite	ne
 80091c0:	2301      	movne	r3, #1
 80091c2:	2300      	moveq	r3, #0
 80091c4:	4a85      	ldr	r2, [pc, #532]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80091c6:	4295      	cmp	r5, r2
 80091c8:	bf0c      	ite	eq
 80091ca:	2300      	moveq	r3, #0
 80091cc:	f003 0301 	andne.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 8191 	beq.w	80094f8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 80091d6:	4b7d      	ldr	r3, [pc, #500]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80091d8:	429d      	cmp	r5, r3
 80091da:	f000 818d 	beq.w	80094f8 <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 80091de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80091e2:	4b7b      	ldr	r3, [pc, #492]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80091e4:	487b      	ldr	r0, [pc, #492]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80091e6:	497c      	ldr	r1, [pc, #496]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80091e8:	429d      	cmp	r5, r3
 80091ea:	bf18      	it	ne
 80091ec:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80091ee:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80091f0:	bf14      	ite	ne
 80091f2:	2301      	movne	r3, #1
 80091f4:	2300      	moveq	r3, #0
 80091f6:	4a79      	ldr	r2, [pc, #484]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80091f8:	4295      	cmp	r5, r2
 80091fa:	bf0c      	ite	eq
 80091fc:	2300      	moveq	r3, #0
 80091fe:	f003 0301 	andne.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8174 	beq.w	80094f0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009208:	4b70      	ldr	r3, [pc, #448]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800920a:	429d      	cmp	r5, r3
 800920c:	f000 8170 	beq.w	80094f0 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009210:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009214:	e546      	b.n	8008ca4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009216:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800921a:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800921e:	3218      	adds	r2, #24
 8009220:	429d      	cmp	r5, r3
 8009222:	bf18      	it	ne
 8009224:	428d      	cmpne	r5, r1
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	4295      	cmp	r5, r2
 800922e:	bf0c      	ite	eq
 8009230:	2300      	moveq	r3, #0
 8009232:	f003 0301 	andne.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 816d 	beq.w	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800923c:	4b63      	ldr	r3, [pc, #396]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800923e:	429d      	cmp	r5, r3
 8009240:	f000 8169 	beq.w	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009244:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009248:	e5d7      	b.n	8008dfa <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800924a:	4b62      	ldr	r3, [pc, #392]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800924c:	4960      	ldr	r1, [pc, #384]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800924e:	4a63      	ldr	r2, [pc, #396]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009250:	429d      	cmp	r5, r3
 8009252:	bf18      	it	ne
 8009254:	428d      	cmpne	r5, r1
 8009256:	bf14      	ite	ne
 8009258:	2301      	movne	r3, #1
 800925a:	2300      	moveq	r3, #0
 800925c:	4295      	cmp	r5, r2
 800925e:	bf0c      	ite	eq
 8009260:	2300      	moveq	r3, #0
 8009262:	f003 0301 	andne.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 815b 	beq.w	8009522 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 800926c:	4b57      	ldr	r3, [pc, #348]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800926e:	429d      	cmp	r5, r3
 8009270:	f000 8157 	beq.w	8009522 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009278:	e5d7      	b.n	8008e2a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800927a:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800927c:	4955      	ldr	r1, [pc, #340]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800927e:	4a57      	ldr	r2, [pc, #348]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009280:	429d      	cmp	r5, r3
 8009282:	bf18      	it	ne
 8009284:	428d      	cmpne	r5, r1
 8009286:	bf14      	ite	ne
 8009288:	2301      	movne	r3, #1
 800928a:	2300      	moveq	r3, #0
 800928c:	4295      	cmp	r5, r2
 800928e:	bf0c      	ite	eq
 8009290:	2300      	moveq	r3, #0
 8009292:	f003 0301 	andne.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 8140 	beq.w	800951c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800929c:	4b4b      	ldr	r3, [pc, #300]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800929e:	429d      	cmp	r5, r3
 80092a0:	f000 813c 	beq.w	800951c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 80092a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092a8:	e5ed      	b.n	8008e86 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80092aa:	4b49      	ldr	r3, [pc, #292]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80092ac:	4949      	ldr	r1, [pc, #292]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80092ae:	4a4b      	ldr	r2, [pc, #300]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80092b0:	429d      	cmp	r5, r3
 80092b2:	bf18      	it	ne
 80092b4:	428d      	cmpne	r5, r1
 80092b6:	bf14      	ite	ne
 80092b8:	2301      	movne	r3, #1
 80092ba:	2300      	moveq	r3, #0
 80092bc:	4295      	cmp	r5, r2
 80092be:	bf0c      	ite	eq
 80092c0:	2300      	moveq	r3, #0
 80092c2:	f003 0301 	andne.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 812e 	beq.w	8009528 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 80092cc:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80092ce:	429d      	cmp	r5, r3
 80092d0:	f000 812a 	beq.w	8009528 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 80092d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092d8:	e5be      	b.n	8008e58 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80092da:	4b3d      	ldr	r3, [pc, #244]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80092dc:	493d      	ldr	r1, [pc, #244]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80092de:	4a3f      	ldr	r2, [pc, #252]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80092e0:	429d      	cmp	r5, r3
 80092e2:	bf18      	it	ne
 80092e4:	428d      	cmpne	r5, r1
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	4295      	cmp	r5, r2
 80092ee:	bf0c      	ite	eq
 80092f0:	2300      	moveq	r3, #0
 80092f2:	f003 0301 	andne.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 810a 	beq.w	8009510 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80092fc:	4b33      	ldr	r3, [pc, #204]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80092fe:	429d      	cmp	r5, r3
 8009300:	f000 8106 	beq.w	8009510 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009308:	e510      	b.n	8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800930a:	3b48      	subs	r3, #72	; 0x48
 800930c:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009310:	3218      	adds	r2, #24
 8009312:	429d      	cmp	r5, r3
 8009314:	bf18      	it	ne
 8009316:	428d      	cmpne	r5, r1
 8009318:	bf14      	ite	ne
 800931a:	2301      	movne	r3, #1
 800931c:	2300      	moveq	r3, #0
 800931e:	4295      	cmp	r5, r2
 8009320:	bf0c      	ite	eq
 8009322:	2300      	moveq	r3, #0
 8009324:	f003 0301 	andne.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8112 	beq.w	8009552 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800932e:	4b27      	ldr	r3, [pc, #156]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009330:	429d      	cmp	r5, r3
 8009332:	f000 810e 	beq.w	8009552 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009336:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800933a:	e610      	b.n	8008f5e <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800933c:	4b24      	ldr	r3, [pc, #144]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800933e:	4925      	ldr	r1, [pc, #148]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009340:	4a26      	ldr	r2, [pc, #152]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009342:	429d      	cmp	r5, r3
 8009344:	bf18      	it	ne
 8009346:	428d      	cmpne	r5, r1
 8009348:	bf14      	ite	ne
 800934a:	2301      	movne	r3, #1
 800934c:	2300      	moveq	r3, #0
 800934e:	4295      	cmp	r5, r2
 8009350:	bf0c      	ite	eq
 8009352:	2300      	moveq	r3, #0
 8009354:	f003 0301 	andne.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80ee 	beq.w	800953a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800935e:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009360:	429d      	cmp	r5, r3
 8009362:	f000 80ea 	beq.w	800953a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009366:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800936a:	e610      	b.n	8008f8e <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800936c:	4b19      	ldr	r3, [pc, #100]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800936e:	4918      	ldr	r1, [pc, #96]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009370:	4a1a      	ldr	r2, [pc, #104]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009372:	429d      	cmp	r5, r3
 8009374:	bf18      	it	ne
 8009376:	428d      	cmpne	r5, r1
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	4295      	cmp	r5, r2
 8009380:	bf0c      	ite	eq
 8009382:	2300      	moveq	r3, #0
 8009384:	f003 0301 	andne.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80e8 	beq.w	800955e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800938e:	4b0f      	ldr	r3, [pc, #60]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009390:	429d      	cmp	r5, r3
 8009392:	f000 80e4 	beq.w	800955e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800939a:	e66b      	b.n	8009074 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800939e:	490c      	ldr	r1, [pc, #48]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80093a0:	4a0e      	ldr	r2, [pc, #56]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80093a2:	429d      	cmp	r5, r3
 80093a4:	bf18      	it	ne
 80093a6:	428d      	cmpne	r5, r1
 80093a8:	bf14      	ite	ne
 80093aa:	2301      	movne	r3, #1
 80093ac:	2300      	moveq	r3, #0
 80093ae:	4295      	cmp	r5, r2
 80093b0:	bf0c      	ite	eq
 80093b2:	2300      	moveq	r3, #0
 80093b4:	f003 0301 	andne.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80bb 	beq.w	8009534 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80093be:	4b03      	ldr	r3, [pc, #12]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80093c0:	429d      	cmp	r5, r3
 80093c2:	f000 80b7 	beq.w	8009534 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 80093c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093ca:	e60e      	b.n	8008fea <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80093cc:	400264a0 	.word	0x400264a0
 80093d0:	40026040 	.word	0x40026040
 80093d4:	40026440 	.word	0x40026440
 80093d8:	40026400 	.word	0x40026400
 80093dc:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093e0:	3b48      	subs	r3, #72	; 0x48
 80093e2:	3118      	adds	r1, #24
 80093e4:	3218      	adds	r2, #24
 80093e6:	429d      	cmp	r5, r3
 80093e8:	bf18      	it	ne
 80093ea:	428d      	cmpne	r5, r1
 80093ec:	bf14      	ite	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	2300      	moveq	r3, #0
 80093f2:	4295      	cmp	r5, r2
 80093f4:	bf0c      	ite	eq
 80093f6:	2300      	moveq	r3, #0
 80093f8:	f003 0301 	andne.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 80ab 	beq.w	8009558 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009402:	4b5a      	ldr	r3, [pc, #360]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009404:	429d      	cmp	r5, r3
 8009406:	f000 80a7 	beq.w	8009558 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800940a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800940e:	e619      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009410:	4b57      	ldr	r3, [pc, #348]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009412:	4958      	ldr	r1, [pc, #352]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009414:	4a58      	ldr	r2, [pc, #352]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009416:	429d      	cmp	r5, r3
 8009418:	bf18      	it	ne
 800941a:	428d      	cmpne	r5, r1
 800941c:	bf14      	ite	ne
 800941e:	2301      	movne	r3, #1
 8009420:	2300      	moveq	r3, #0
 8009422:	4295      	cmp	r5, r2
 8009424:	bf0c      	ite	eq
 8009426:	2300      	moveq	r3, #0
 8009428:	f003 0301 	andne.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 808a 	beq.w	8009546 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009432:	4b4e      	ldr	r3, [pc, #312]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009434:	429d      	cmp	r5, r3
 8009436:	f000 8086 	beq.w	8009546 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800943a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800943e:	e5bd      	b.n	8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009440:	4b4c      	ldr	r3, [pc, #304]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009442:	494b      	ldr	r1, [pc, #300]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009444:	4a4c      	ldr	r2, [pc, #304]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009446:	429d      	cmp	r5, r3
 8009448:	bf18      	it	ne
 800944a:	428d      	cmpne	r5, r1
 800944c:	bf14      	ite	ne
 800944e:	2301      	movne	r3, #1
 8009450:	2300      	moveq	r3, #0
 8009452:	4295      	cmp	r5, r2
 8009454:	bf0c      	ite	eq
 8009456:	2300      	moveq	r3, #0
 8009458:	f003 0301 	andne.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8081 	beq.w	8009564 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009462:	4b42      	ldr	r3, [pc, #264]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009464:	429d      	cmp	r5, r3
 8009466:	d07d      	beq.n	8009564 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800946c:	e630      	b.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800946e:	4b40      	ldr	r3, [pc, #256]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009470:	4940      	ldr	r1, [pc, #256]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009472:	4a41      	ldr	r2, [pc, #260]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009474:	429d      	cmp	r5, r3
 8009476:	bf18      	it	ne
 8009478:	428d      	cmpne	r5, r1
 800947a:	bf14      	ite	ne
 800947c:	2301      	movne	r3, #1
 800947e:	2300      	moveq	r3, #0
 8009480:	4295      	cmp	r5, r2
 8009482:	bf0c      	ite	eq
 8009484:	2300      	moveq	r3, #0
 8009486:	f003 0301 	andne.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d058      	beq.n	8009540 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800948e:	4b37      	ldr	r3, [pc, #220]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009490:	429d      	cmp	r5, r3
 8009492:	d055      	beq.n	8009540 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009498:	e496      	b.n	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800949a:	4b35      	ldr	r3, [pc, #212]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800949c:	4935      	ldr	r1, [pc, #212]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800949e:	4a36      	ldr	r2, [pc, #216]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 80094a0:	429d      	cmp	r5, r3
 80094a2:	bf18      	it	ne
 80094a4:	428d      	cmpne	r5, r1
 80094a6:	bf14      	ite	ne
 80094a8:	2301      	movne	r3, #1
 80094aa:	2300      	moveq	r3, #0
 80094ac:	4295      	cmp	r5, r2
 80094ae:	bf0c      	ite	eq
 80094b0:	2300      	moveq	r3, #0
 80094b2:	f003 0301 	andne.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d048      	beq.n	800954c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80094ba:	4b2c      	ldr	r3, [pc, #176]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 80094bc:	429d      	cmp	r5, r3
 80094be:	d045      	beq.n	800954c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80094c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094c4:	e5ed      	b.n	80090a2 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80094c6:	4b2a      	ldr	r3, [pc, #168]	; (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 80094c8:	492a      	ldr	r1, [pc, #168]	; (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 80094ca:	4a2b      	ldr	r2, [pc, #172]	; (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 80094cc:	429d      	cmp	r5, r3
 80094ce:	bf18      	it	ne
 80094d0:	428d      	cmpne	r5, r1
 80094d2:	bf14      	ite	ne
 80094d4:	2301      	movne	r3, #1
 80094d6:	2300      	moveq	r3, #0
 80094d8:	4295      	cmp	r5, r2
 80094da:	bf0c      	ite	eq
 80094dc:	2300      	moveq	r3, #0
 80094de:	f003 0301 	andne.w	r3, r3, #1
 80094e2:	b323      	cbz	r3, 800952e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 80094e4:	4b21      	ldr	r3, [pc, #132]	; (800956c <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 80094e6:	429d      	cmp	r5, r3
 80094e8:	d021      	beq.n	800952e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 80094ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ee:	e44b      	b.n	8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 80094f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094f4:	f7ff bbd6 	b.w	8008ca4 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80094f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80094fc:	e671      	b.n	80091e2 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009502:	e655      	b.n	80091b0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009504:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009508:	e639      	b.n	800917e <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800950a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800950e:	e61c      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009514:	e40a      	b.n	8008d2c <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800951a:	e46e      	b.n	8008dfa <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800951c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009520:	e4b1      	b.n	8008e86 <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009526:	e480      	b.n	8008e2a <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009528:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800952c:	e494      	b.n	8008e58 <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800952e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009532:	e429      	b.n	8008d88 <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009534:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009538:	e557      	b.n	8008fea <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800953a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800953e:	e526      	b.n	8008f8e <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009544:	e440      	b.n	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009546:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800954a:	e537      	b.n	8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800954c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009550:	e5a7      	b.n	80090a2 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009556:	e502      	b.n	8008f5e <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8009558:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800955c:	e572      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800955e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009562:	e587      	b.n	8009074 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009564:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009568:	e5b2      	b.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800956a:	bf00      	nop
 800956c:	400264a0 	.word	0x400264a0
 8009570:	40026040 	.word	0x40026040
 8009574:	40026440 	.word	0x40026440
 8009578:	400260a0 	.word	0x400260a0

0800957c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009580:	2900      	cmp	r1, #0
 8009582:	d15b      	bne.n	800963c <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8009584:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8009588:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800958a:	69e3      	ldr	r3, [r4, #28]
 800958c:	b90b      	cbnz	r3, 8009592 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800958e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8009592:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009594:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009596:	4b2e      	ldr	r3, [pc, #184]	; (8009650 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 8009598:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800959a:	402b      	ands	r3, r5
 800959c:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800959e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80095a2:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80095a4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80095a6:	f7fd ffbb 	bl	8007520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80095aa:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80095ac:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80095ae:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80095b0:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80095b2:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80095b4:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80095b6:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80095b8:	f7fd ffb2 	bl	8007520 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80095bc:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80095be:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80095c2:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80095c4:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80095c6:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80095c8:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80095ca:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80095cc:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80095ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80095d2:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80095d4:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80095d6:	f7fd ffa3 	bl	8007520 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80095da:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80095dc:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80095de:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80095e0:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80095e2:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80095e4:	f7fd ff9c 	bl	8007520 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80095e8:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80095ea:	491a      	ldr	r1, [pc, #104]	; (8009654 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 80095ec:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 80095f0:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80095f2:	4a19      	ldr	r2, [pc, #100]	; (8009658 <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 80095f4:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80095f6:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80095f8:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80095fa:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80095fc:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 80095fe:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009600:	f7fd ff8e 	bl	8007520 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009604:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009606:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009608:	4a14      	ldr	r2, [pc, #80]	; (800965c <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800960a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960e:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009610:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8009612:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009614:	f7fd ff84 	bl	8007520 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8009618:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800961a:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800961c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009620:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8009622:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009624:	d103      	bne.n	800962e <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009626:	69d9      	ldr	r1, [r3, #28]
 8009628:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <ETH_MACDMAConfig+0xe4>)
 800962a:	430a      	orrs	r2, r1
 800962c:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800962e:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8009632:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009634:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8009636:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8009638:	645a      	str	r2, [r3, #68]	; 0x44
}
 800963a:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800963c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8009640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009644:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8009648:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800964c:	e79d      	b.n	800958a <ETH_MACDMAConfig+0xe>
 800964e:	bf00      	nop
 8009650:	ff20810f 	.word	0xff20810f
 8009654:	f8de3f23 	.word	0xf8de3f23
 8009658:	02200004 	.word	0x02200004
 800965c:	02c12080 	.word	0x02c12080
 8009660:	00010040 	.word	0x00010040
 8009664:	40028000 	.word	0x40028000

08009668 <HAL_ETH_DMATxDescListInit>:
{
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800966e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009672:	2801      	cmp	r0, #1
 8009674:	d03b      	beq.n	80096ee <HAL_ETH_DMATxDescListInit+0x86>
 8009676:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800967a:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800967c:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8009680:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009684:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8009688:	b31b      	cbz	r3, 80096d2 <HAL_ETH_DMATxDescListInit+0x6a>
 800968a:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800968c:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 8009690:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009694:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800969a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800969e:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80096a2:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80096a4:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80096a6:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80096a8:	f1ba 0f00 	cmp.w	sl, #0
 80096ac:	d103      	bne.n	80096b6 <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80096ae:	6817      	ldr	r7, [r2, #0]
 80096b0:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 80096b4:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 80096b6:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 80096b8:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 80096bc:	bf34      	ite	cc
 80096be:	4675      	movcc	r5, lr
 80096c0:	f102 0e20 	addcs.w	lr, r2, #32
 80096c4:	4563      	cmp	r3, ip
 80096c6:	60d5      	str	r5, [r2, #12]
 80096c8:	f10c 0501 	add.w	r5, ip, #1
 80096cc:	4672      	mov	r2, lr
 80096ce:	46ac      	mov	ip, r5
 80096d0:	d8e3      	bhi.n	800969a <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80096d2:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 80096d6:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 80096d8:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80096da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096de:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 80096e0:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 80096e4:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 80096e6:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 80096ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 80096ee:	2002      	movs	r0, #2
}
 80096f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080096f4 <HAL_ETH_DMARxDescListInit>:
{
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 80096fa:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80096fe:	2801      	cmp	r0, #1
 8009700:	d033      	beq.n	800976a <HAL_ETH_DMARxDescListInit+0x76>
 8009702:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009706:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 8009708:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800970a:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800970e:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8009712:	b1eb      	cbz	r3, 8009750 <HAL_ETH_DMARxDescListInit+0x5c>
 8009714:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 8009716:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800971a:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800971c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009720:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 8009724:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009728:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800972a:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800972c:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8009730:	45c6      	cmp	lr, r8
 8009732:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009736:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009738:	bf34      	ite	cc
 800973a:	4675      	movcc	r5, lr
 800973c:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 8009740:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009742:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 8009744:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 8009746:	f10c 0501 	add.w	r5, ip, #1
 800974a:	4672      	mov	r2, lr
 800974c:	46ac      	mov	ip, r5
 800974e:	d8e9      	bhi.n	8009724 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009750:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 8009752:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009754:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975a:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800975c:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 8009760:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009762:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 8009766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800976a:	2002      	movs	r0, #2
}
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009770 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009770:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009774:	2b01      	cmp	r3, #1
 8009776:	d078      	beq.n	800986a <HAL_ETH_TransmitFrame+0xfa>
 8009778:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800977c:	2302      	movs	r3, #2
 800977e:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 8009780:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009784:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8009788:	2900      	cmp	r1, #0
 800978a:	d03c      	beq.n	8009806 <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800978c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	db60      	blt.n	8009856 <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009794:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8009798:	4281      	cmp	r1, r0
{
 800979a:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800979c:	d93c      	bls.n	8009818 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800979e:	4c34      	ldr	r4, [pc, #208]	; (8009870 <HAL_ETH_TransmitFrame+0x100>)
 80097a0:	fba4 4c01 	umull	r4, ip, r4, r1
 80097a4:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80097a8:	fb00 101c 	mls	r0, r0, ip, r1
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d030      	beq.n	8009812 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 80097b0:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80097b4:	482f      	ldr	r0, [pc, #188]	; (8009874 <HAL_ETH_TransmitFrame+0x104>)
 80097b6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 80097ba:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80097bc:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80097c0:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 80097c4:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80097c8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80097cc:	e00f      	b.n	80097ee <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 80097ce:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80097d0:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 80097d2:	d104      	bne.n	80097de <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80097d4:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80097d6:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80097d8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80097dc:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80097de:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 80097e0:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80097e2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80097e6:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80097e8:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80097ea:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80097ec:	d03b      	beq.n	8009866 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80097f4:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	d1e9      	bne.n	80097ce <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80097fa:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80097fc:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80097fe:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8009802:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 8009804:	e7eb      	b.n	80097de <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 8009806:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 8009808:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800980c:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8009810:	4770      	bx	lr
  if (bufcount == 1)
 8009812:	f1bc 0f01 	cmp.w	ip, #1
 8009816:	d1cd      	bne.n	80097b4 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009818:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800981a:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800981e:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009820:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009824:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009826:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009828:	6819      	ldr	r1, [r3, #0]
 800982a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800982e:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009830:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8009832:	6813      	ldr	r3, [r2, #0]
 8009834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009838:	6959      	ldr	r1, [r3, #20]
 800983a:	0749      	lsls	r1, r1, #29
 800983c:	d503      	bpl.n	8009846 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800983e:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 8009840:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8009842:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 8009844:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 8009846:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8009848:	2101      	movs	r1, #1
  return HAL_OK;
 800984a:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800984c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009850:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8009854:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009856:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8009858:	2300      	movs	r3, #0
    return HAL_ERROR;
 800985a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800985c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009860:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 8009864:	4770      	bx	lr
 8009866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009868:	e7e3      	b.n	8009832 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800986a:	2002      	movs	r0, #2
}
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	ac02b00b 	.word	0xac02b00b
 8009874:	fffffa0c 	.word	0xfffffa0c

08009878 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8009878:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800987c:	2b01      	cmp	r3, #1
 800987e:	d02f      	beq.n	80098e0 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 8009880:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009882:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009884:	4602      	mov	r2, r0
{
 8009886:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 8009888:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800988a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800988e:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	2900      	cmp	r1, #0
 8009896:	db15      	blt.n	80098c4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 8009898:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800989a:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800989c:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800989e:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80098a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80098a6:	d016      	beq.n	80098d6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80098a8:	6819      	ldr	r1, [r3, #0]
 80098aa:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 80098ae:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80098b0:	d118      	bne.n	80098e4 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80098b2:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 80098b4:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80098b6:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 80098b8:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80098ba:	6819      	ldr	r1, [r3, #0]
 80098bc:	2900      	cmp	r1, #0
 80098be:	db01      	blt.n	80098c4 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 80098c0:	2804      	cmp	r0, #4
 80098c2:	d1ea      	bne.n	800989a <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 80098c4:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80098c6:	2100      	movs	r1, #0
  return HAL_ERROR;
 80098c8:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 80098ca:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80098ce:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 80098d2:	bc30      	pop	{r4, r5}
 80098d4:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80098d6:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80098d8:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 80098da:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80098dc:	6293      	str	r3, [r2, #40]	; 0x28
 80098de:	e7ec      	b.n	80098ba <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 80098e0:	2002      	movs	r0, #2
}
 80098e2:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 80098e4:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80098e6:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 80098e8:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 80098ea:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 80098ec:	d011      	beq.n	8009912 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80098ee:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80098f0:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 80098f2:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80098f4:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80098f6:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80098f8:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 80098fc:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80098fe:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009900:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009902:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8009904:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 8009908:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800990a:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800990c:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 8009910:	e7df      	b.n	80098d2 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009912:	4618      	mov	r0, r3
 8009914:	6313      	str	r3, [r2, #48]	; 0x30
 8009916:	e7eb      	b.n	80098f0 <HAL_ETH_GetReceivedFrame_IT+0x78>

08009918 <HAL_ETH_TxCpltCallback>:
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop

0800991c <HAL_ETH_ErrorCallback>:
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop

08009920 <HAL_ETH_IRQHandler>:
{
 8009920:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009922:	6803      	ldr	r3, [r0, #0]
{
 8009924:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992a:	695d      	ldr	r5, [r3, #20]
 800992c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8009930:	d125      	bne.n	800997e <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8009932:	695a      	ldr	r2, [r3, #20]
 8009934:	07d2      	lsls	r2, r2, #31
 8009936:	d416      	bmi.n	8009966 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800993c:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	d400      	bmi.n	8009946 <HAL_ETH_IRQHandler+0x26>
}
 8009944:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff ffe8 	bl	800991c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8009952:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 8009958:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800995a:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800995c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009960:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 8009964:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 8009966:	f7ff ffd7 	bl	8009918 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	2201      	movs	r2, #1
 800996e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009972:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8009974:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009978:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800997c:	e7dc      	b.n	8009938 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800997e:	f009 fd45 	bl	801340c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8009986:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800998c:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800998e:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 8009990:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009994:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009998:	e7ce      	b.n	8009938 <HAL_ETH_IRQHandler+0x18>
 800999a:	bf00      	nop

0800999c <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800999c:	8a03      	ldrh	r3, [r0, #16]
 800999e:	2b20      	cmp	r3, #32
{
 80099a0:	b570      	push	{r4, r5, r6, lr}
 80099a2:	4604      	mov	r4, r0
 80099a4:	460e      	mov	r6, r1
 80099a6:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80099a8:	d834      	bhi.n	8009a14 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80099aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80099ae:	2b82      	cmp	r3, #130	; 0x82
 80099b0:	d039      	beq.n	8009a26 <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80099b2:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 80099b4:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80099b6:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80099b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80099bc:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80099be:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80099c2:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80099c4:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80099c6:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80099ca:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80099cc:	430b      	orrs	r3, r1
 80099ce:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80099d0:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 80099d4:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 80099d6:	f7fd fd9d 	bl	8007514 <HAL_GetTick>
 80099da:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80099dc:	e004      	b.n	80099e8 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 80099de:	6821      	ldr	r1, [r4, #0]
 80099e0:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80099e2:	f013 0301 	ands.w	r3, r3, #1
 80099e6:	d00d      	beq.n	8009a04 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80099e8:	f7fd fd94 	bl	8007514 <HAL_GetTick>
 80099ec:	1b83      	subs	r3, r0, r6
 80099ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f2:	d3f4      	bcc.n	80099de <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 80099f4:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 80099f6:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80099f8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80099fa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80099fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009a04:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 8009a06:	2101      	movs	r1, #1
  return HAL_OK;
 8009a08:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009a0a:	b292      	uxth	r2, r2
 8009a0c:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8009a0e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009a14:	f240 5116 	movw	r1, #1302	; 0x516
 8009a18:	4804      	ldr	r0, [pc, #16]	; (8009a2c <HAL_ETH_ReadPHYRegister+0x90>)
 8009a1a:	f7fa fe0b 	bl	8004634 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009a1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a22:	2b82      	cmp	r3, #130	; 0x82
 8009a24:	d1c5      	bne.n	80099b2 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 8009a26:	2002      	movs	r0, #2
}
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0802b3dc 	.word	0x0802b3dc

08009a30 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009a30:	8a03      	ldrh	r3, [r0, #16]
 8009a32:	2b20      	cmp	r3, #32
{
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009a3c:	d833      	bhi.n	8009aa6 <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009a3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009a42:	2b42      	cmp	r3, #66	; 0x42
 8009a44:	d038      	beq.n	8009ab8 <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009a46:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 8009a48:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009a4a:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009a4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8009a50:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009a52:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009a54:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8009a58:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009a5a:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009a5c:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009a5e:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009a62:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009a64:	430b      	orrs	r3, r1
 8009a66:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009a68:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 8009a6c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8009a6e:	f7fd fd51 	bl	8007514 <HAL_GetTick>
 8009a72:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009a74:	e004      	b.n	8009a80 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009a7a:	f013 0301 	ands.w	r3, r3, #1
 8009a7e:	d00d      	beq.n	8009a9c <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009a80:	f7fd fd48 	bl	8007514 <HAL_GetTick>
 8009a84:	1b43      	subs	r3, r0, r5
 8009a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a8a:	d3f4      	bcc.n	8009a76 <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8009a8c:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8009a8e:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009a90:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8009a92:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8009a9c:	2201      	movs	r2, #1
  return HAL_OK; 
 8009a9e:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009aa0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009aa6:	f240 515e 	movw	r1, #1374	; 0x55e
 8009aaa:	4804      	ldr	r0, [pc, #16]	; (8009abc <HAL_ETH_WritePHYRegister+0x8c>)
 8009aac:	f7fa fdc2 	bl	8004634 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009ab0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ab4:	2b42      	cmp	r3, #66	; 0x42
 8009ab6:	d1c6      	bne.n	8009a46 <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8009ab8:	2002      	movs	r0, #2
}
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	0802b3dc 	.word	0x0802b3dc

08009ac0 <HAL_ETH_Init>:
{
 8009ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8009ac2:	2300      	movs	r3, #0
{
 8009ac4:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 8009ac6:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f000 80f5 	beq.w	8009cb8 <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009ace:	6843      	ldr	r3, [r0, #4]
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	f200 809c 	bhi.w	8009c10 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009ad8:	69a3      	ldr	r3, [r4, #24]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	f200 808f 	bhi.w	8009bfe <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009ae0:	69e3      	ldr	r3, [r4, #28]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d873      	bhi.n	8009bce <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8009ae6:	6a23      	ldr	r3, [r4, #32]
 8009ae8:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009aec:	d177      	bne.n	8009bde <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 8009aee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d07b      	beq.n	8009bf2 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009afa:	4b91      	ldr	r3, [pc, #580]	; (8009d40 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009afc:	4a91      	ldr	r2, [pc, #580]	; (8009d44 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009afe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009b00:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8009b04:	6459      	str	r1, [r3, #68]	; 0x44
 8009b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009b10:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009b12:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009b14:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009b1c:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009b1e:	6851      	ldr	r1, [r2, #4]
 8009b20:	6a20      	ldr	r0, [r4, #32]
 8009b22:	4301      	orrs	r1, r0
 8009b24:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8009b2e:	f7fd fcf1 	bl	8007514 <HAL_GetTick>
 8009b32:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009b34:	e005      	b.n	8009b42 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8009b36:	f7fd fced 	bl	8007514 <HAL_GetTick>
 8009b3a:	1b43      	subs	r3, r0, r5
 8009b3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b40:	d86f      	bhi.n	8009c22 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	07d0      	lsls	r0, r2, #31
 8009b4c:	d4f3      	bmi.n	8009b36 <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 8009b4e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8009b50:	f003 f8a2 	bl	800cc98 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009b54:	4b7c      	ldr	r3, [pc, #496]	; (8009d48 <HAL_ETH_Init+0x288>)
 8009b56:	4a7d      	ldr	r2, [pc, #500]	; (8009d4c <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8009b58:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009b5c:	4403      	add	r3, r0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d274      	bcs.n	8009c4c <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009b62:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009b66:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009b68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009b70:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009b72:	f7ff ff5d 	bl	8009a30 <HAL_ETH_WritePHYRegister>
 8009b76:	4605      	mov	r5, r0
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d15c      	bne.n	8009c36 <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 8009b7c:	20ff      	movs	r0, #255	; 0xff
 8009b7e:	f7fd fccf 	bl	8007520 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009b82:	6863      	ldr	r3, [r4, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d178      	bne.n	8009c7a <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009b88:	68a3      	ldr	r3, [r4, #8]
 8009b8a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009b8e:	f040 809e 	bne.w	8009cce <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8009b98:	f040 8092 	bne.w	8009cc0 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009b9c:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009b9e:	08db      	lsrs	r3, r3, #3
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8009ba8:	b292      	uxth	r2, r2
 8009baa:	f7ff ff41 	bl	8009a30 <HAL_ETH_WritePHYRegister>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d141      	bne.n	8009c36 <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 8009bb2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009bb6:	f7fd fcb3 	bl	8007520 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8009bba:	4620      	mov	r0, r4
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	f7ff fcdd 	bl	800957c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8009bc2:	2301      	movs	r3, #1
}
 8009bc4:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 8009bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009bca:	b003      	add	sp, #12
 8009bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009bce:	21e0      	movs	r1, #224	; 0xe0
 8009bd0:	485f      	ldr	r0, [pc, #380]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009bd2:	f7fa fd2f 	bl	8004634 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8009bd6:	6a23      	ldr	r3, [r4, #32]
 8009bd8:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009bdc:	d087      	beq.n	8009aee <HAL_ETH_Init+0x2e>
 8009bde:	21e1      	movs	r1, #225	; 0xe1
 8009be0:	485b      	ldr	r0, [pc, #364]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009be2:	f7fa fd27 	bl	8004634 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 8009be6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d183      	bne.n	8009afa <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 8009bf2:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 8009bf4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8009bf8:	f009 fb7a 	bl	80132f0 <HAL_ETH_MspInit>
 8009bfc:	e77d      	b.n	8009afa <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009bfe:	21df      	movs	r1, #223	; 0xdf
 8009c00:	4853      	ldr	r0, [pc, #332]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009c02:	f7fa fd17 	bl	8004634 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009c06:	69e3      	ldr	r3, [r4, #28]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	f67f af6c 	bls.w	8009ae6 <HAL_ETH_Init+0x26>
 8009c0e:	e7de      	b.n	8009bce <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009c10:	21de      	movs	r1, #222	; 0xde
 8009c12:	484f      	ldr	r0, [pc, #316]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009c14:	f7fa fd0e 	bl	8004634 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009c18:	69a3      	ldr	r3, [r4, #24]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	f67f af60 	bls.w	8009ae0 <HAL_ETH_Init+0x20>
 8009c20:	e7ed      	b.n	8009bfe <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 8009c24:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 8009c26:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009c28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009c2c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 8009c30:	4628      	mov	r0, r5
 8009c32:	b003      	add	sp, #12
 8009c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 8009c36:	4620      	mov	r0, r4
 8009c38:	2101      	movs	r1, #1
 8009c3a:	f7ff fc9f 	bl	800957c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8009c3e:	2301      	movs	r3, #1
      return HAL_ERROR;
 8009c40:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 8009c42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009c46:	4628      	mov	r0, r5
 8009c48:	b003      	add	sp, #12
 8009c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8009c4c:	4b41      	ldr	r3, [pc, #260]	; (8009d54 <HAL_ETH_Init+0x294>)
 8009c4e:	4a42      	ldr	r2, [pc, #264]	; (8009d58 <HAL_ETH_Init+0x298>)
 8009c50:	4403      	add	r3, r0
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d90e      	bls.n	8009c74 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8009c56:	4b41      	ldr	r3, [pc, #260]	; (8009d5c <HAL_ETH_Init+0x29c>)
 8009c58:	4a41      	ldr	r2, [pc, #260]	; (8009d60 <HAL_ETH_Init+0x2a0>)
 8009c5a:	4403      	add	r3, r0
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d382      	bcc.n	8009b66 <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8009c60:	4b40      	ldr	r3, [pc, #256]	; (8009d64 <HAL_ETH_Init+0x2a4>)
 8009c62:	4a41      	ldr	r2, [pc, #260]	; (8009d68 <HAL_ETH_Init+0x2a8>)
 8009c64:	4403      	add	r3, r0
 8009c66:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8009c68:	bf94      	ite	ls
 8009c6a:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009c6e:	f045 0510 	orrhi.w	r5, r5, #16
 8009c72:	e778      	b.n	8009b66 <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8009c74:	f045 050c 	orr.w	r5, r5, #12
 8009c78:	e775      	b.n	8009b66 <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 8009c7a:	f7fd fc4b 	bl	8007514 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009c7e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009c82:	4606      	mov	r6, r0
 8009c84:	e002      	b.n	8009c8c <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009c86:	9b00      	ldr	r3, [sp, #0]
 8009c88:	0759      	lsls	r1, r3, #29
 8009c8a:	d426      	bmi.n	8009cda <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009c8c:	466a      	mov	r2, sp
 8009c8e:	2101      	movs	r1, #1
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7ff fe83 	bl	800999c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009c96:	f7fd fc3d 	bl	8007514 <HAL_GetTick>
 8009c9a:	1b80      	subs	r0, r0, r6
 8009c9c:	42b8      	cmp	r0, r7
 8009c9e:	d9f2      	bls.n	8009c86 <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7ff fc6a 	bl	800957c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8009ca8:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8009caa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8009cac:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8009cae:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8009cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8009cb6:	e7bb      	b.n	8009c30 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 8009cb8:	2501      	movs	r5, #1
}
 8009cba:	4628      	mov	r0, r5
 8009cbc:	b003      	add	sp, #12
 8009cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009cc0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8009cc4:	4822      	ldr	r0, [pc, #136]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009cc6:	f7fa fcb5 	bl	8004634 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009cca:	68e3      	ldr	r3, [r4, #12]
 8009ccc:	e766      	b.n	8009b9c <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009cce:	f240 11c5 	movw	r1, #453	; 0x1c5
 8009cd2:	481f      	ldr	r0, [pc, #124]	; (8009d50 <HAL_ETH_Init+0x290>)
 8009cd4:	f7fa fcae 	bl	8004634 <assert_failed>
 8009cd8:	e75b      	b.n	8009b92 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8009cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cde:	2100      	movs	r1, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff fea5 	bl	8009a30 <HAL_ETH_WritePHYRegister>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d1a5      	bne.n	8009c36 <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 8009cea:	f7fd fc13 	bl	8007514 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009cee:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	e002      	b.n	8009cfc <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	069a      	lsls	r2, r3, #26
 8009cfa:	d40a      	bmi.n	8009d12 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009cfc:	466a      	mov	r2, sp
 8009cfe:	2101      	movs	r1, #1
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7ff fe4b 	bl	800999c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009d06:	f7fd fc05 	bl	8007514 <HAL_GetTick>
 8009d0a:	1b80      	subs	r0, r0, r6
 8009d0c:	42b8      	cmp	r0, r7
 8009d0e:	d9f2      	bls.n	8009cf6 <HAL_ETH_Init+0x236>
 8009d10:	e7c6      	b.n	8009ca0 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009d12:	466a      	mov	r2, sp
 8009d14:	2110      	movs	r1, #16
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7ff fe40 	bl	800999c <HAL_ETH_ReadPHYRegister>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d18a      	bne.n	8009c36 <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009d20:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009d22:	f013 0204 	ands.w	r2, r3, #4
 8009d26:	bf18      	it	ne
 8009d28:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009d2c:	079b      	lsls	r3, r3, #30
 8009d2e:	60e2      	str	r2, [r4, #12]
 8009d30:	d501      	bpl.n	8009d36 <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009d32:	60a0      	str	r0, [r4, #8]
 8009d34:	e741      	b.n	8009bba <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 8009d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d3a:	60a3      	str	r3, [r4, #8]
 8009d3c:	e73d      	b.n	8009bba <HAL_ETH_Init+0xfa>
 8009d3e:	bf00      	nop
 8009d40:	40023800 	.word	0x40023800
 8009d44:	40013800 	.word	0x40013800
 8009d48:	feced300 	.word	0xfeced300
 8009d4c:	00e4e1c0 	.word	0x00e4e1c0
 8009d50:	0802b3dc 	.word	0x0802b3dc
 8009d54:	fde9f140 	.word	0xfde9f140
 8009d58:	017d783f 	.word	0x017d783f
 8009d5c:	fc6c7900 	.word	0xfc6c7900
 8009d60:	02625a00 	.word	0x02625a00
 8009d64:	fa0a1f00 	.word	0xfa0a1f00
 8009d68:	02faf07f 	.word	0x02faf07f

08009d6c <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8009d6c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d044      	beq.n	8009dfe <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009d74:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8009d76:	2202      	movs	r2, #2
{  
 8009d78:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8009d7a:	2601      	movs	r6, #1
{  
 8009d7c:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 8009d7e:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8009d80:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009d84:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 8009d88:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8009d8a:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d8c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	f042 0208 	orr.w	r2, r2, #8
 8009d94:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d9a:	f7fd fbc1 	bl	8007520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009d9e:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009da0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8009da6:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	f042 0204 	orr.w	r2, r2, #4
 8009dae:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009db4:	f7fd fbb4 	bl	8007520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009db8:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009dba:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 8009dc4:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009dcc:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009dd2:	f7fd fba5 	bl	8007520 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009dd6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8009dd8:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 8009dda:	9a01      	ldr	r2, [sp, #4]
 8009ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de0:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009de2:	699a      	ldr	r2, [r3, #24]
 8009de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009de8:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8009dea:	699a      	ldr	r2, [r3, #24]
 8009dec:	f042 0202 	orr.w	r2, r2, #2
 8009df0:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 8009df2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009df6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8009dfa:	b004      	add	sp, #16
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8009dfe:	2002      	movs	r0, #2
}
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop

08009e04 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8009e04:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d046      	beq.n	8009e9a <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009e0c:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8009e0e:	2102      	movs	r1, #2
{  
 8009e10:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009e12:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 8009e16:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009e18:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 8009e1c:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 8009e1e:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 8009e22:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009e24:	6991      	ldr	r1, [r2, #24]
 8009e26:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e28:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009e2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009e2e:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009e30:	6991      	ldr	r1, [r2, #24]
 8009e32:	f021 0102 	bic.w	r1, r1, #2
 8009e36:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 8009e38:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f022 0204 	bic.w	r2, r2, #4
 8009e40:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e46:	f7fd fb6b 	bl	8007520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009e4a:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e4c:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 8009e56:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e5e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e64:	f7fd fb5c 	bl	8007520 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009e68:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e6a:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 8009e6c:	9902      	ldr	r1, [sp, #8]
 8009e6e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009e72:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 8009e74:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	f022 0208 	bic.w	r2, r2, #8
 8009e7c:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009e82:	f7fd fb4d 	bl	8007520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009e86:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 8009e88:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8009e8e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009e92:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8009e96:	b004      	add	sp, #16
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8009e9a:	2002      	movs	r0, #2
}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop

08009ea0 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8009ea0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	f000 8249 	beq.w	800a33c <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009eaa:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 8009eac:	2202      	movs	r2, #2
{
 8009eae:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009eb0:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009eb4:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8009eb6:	f04f 0101 	mov.w	r1, #1
 8009eba:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 8009ebc:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009ec0:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009ec4:	f040 8207 	bne.w	800a2d6 <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8009ec8:	68eb      	ldr	r3, [r5, #12]
 8009eca:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8009ece:	f040 8114 	bne.w	800a0fa <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	f000 8119 	beq.w	800a10a <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009ede:	f040 8139 	bne.w	800a154 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8009ee8:	f040 816b 	bne.w	800a1c2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8009ef2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ef6:	d002      	beq.n	8009efe <HAL_ETH_ConfigMAC+0x5e>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 8221 	bne.w	800a340 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8009efe:	68e3      	ldr	r3, [r4, #12]
 8009f00:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009f04:	f040 8152 	bne.w	800a1ac <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009f0e:	f040 8142 	bne.w	800a196 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8009f12:	6963      	ldr	r3, [r4, #20]
 8009f14:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009f18:	f040 8132 	bne.w	800a180 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8009f1c:	69a3      	ldr	r3, [r4, #24]
 8009f1e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8009f22:	f040 8122 	bne.w	800a16a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8009f26:	69e3      	ldr	r3, [r4, #28]
 8009f28:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009f2c:	f040 81a3 	bne.w	800a276 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8009f30:	6a23      	ldr	r3, [r4, #32]
 8009f32:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009f36:	f040 818e 	bne.w	800a256 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8009f40:	f040 8193 	bne.w	800a26a <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8009f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f46:	f033 0310 	bics.w	r3, r3, #16
 8009f4a:	f040 8179 	bne.w	800a240 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8009f4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f50:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8009f54:	f040 819a 	bne.w	800a28c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f5a:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8009f5e:	d003      	beq.n	8009f68 <HAL_ETH_ConfigMAC+0xc8>
 8009f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f64:	f040 81d8 	bne.w	800a318 <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8009f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f6e:	2a40      	cmp	r2, #64	; 0x40
 8009f70:	d002      	beq.n	8009f78 <HAL_ETH_ConfigMAC+0xd8>
 8009f72:	2b80      	cmp	r3, #128	; 0x80
 8009f74:	f040 81ba 	bne.w	800a2ec <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8009f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f7a:	f033 0320 	bics.w	r3, r3, #32
 8009f7e:	f040 80de 	bne.w	800a13e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8009f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f84:	f033 0308 	bics.w	r3, r3, #8
 8009f88:	f040 80cf 	bne.w	800a12a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8009f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	f200 80a5 	bhi.w	800a0de <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8009f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009f96:	f240 4204 	movw	r2, #1028	; 0x404
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bf18      	it	ne
 8009f9e:	2b10      	cmpne	r3, #16
 8009fa0:	d003      	beq.n	8009faa <HAL_ETH_ConfigMAC+0x10a>
 8009fa2:	f033 0304 	bics.w	r3, r3, #4
 8009fa6:	f040 81c3 	bne.w	800a330 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8009faa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009fac:	f033 0202 	bics.w	r2, r3, #2
 8009fb0:	d004      	beq.n	8009fbc <HAL_ETH_ConfigMAC+0x11c>
 8009fb2:	f240 4202 	movw	r2, #1026	; 0x402
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	f040 81a3 	bne.w	800a302 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009fbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc2:	f080 816e 	bcs.w	800a2a2 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8009fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fc8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009fcc:	f040 8173 	bne.w	800a2b6 <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8009fd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009fd2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009fd6:	f040 8178 	bne.w	800a2ca <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8009fda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009fdc:	f033 0308 	bics.w	r3, r3, #8
 8009fe0:	f040 8123 	bne.w	800a22a <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8009fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe6:	f033 0304 	bics.w	r3, r3, #4
 8009fea:	f040 8113 	bne.w	800a214 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009fee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ff0:	f033 0302 	bics.w	r3, r3, #2
 8009ff4:	f040 8103 	bne.w	800a1fe <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009ff8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009ffa:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009ffe:	f040 80f3 	bne.w	800a1e8 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a002:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a008:	f080 80e8 	bcs.w	800a1dc <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800a00c:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a00e:	49b5      	ldr	r1, [pc, #724]	; (800a2e4 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800a010:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800a012:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a014:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800a016:	6860      	ldr	r0, [r4, #4]
 800a018:	4303      	orrs	r3, r0
 800a01a:	68a0      	ldr	r0, [r4, #8]
 800a01c:	4303      	orrs	r3, r0
 800a01e:	68e0      	ldr	r0, [r4, #12]
 800a020:	4303      	orrs	r3, r0
 800a022:	6920      	ldr	r0, [r4, #16]
 800a024:	4303      	orrs	r3, r0
 800a026:	6960      	ldr	r0, [r4, #20]
 800a028:	4303      	orrs	r3, r0
 800a02a:	69a0      	ldr	r0, [r4, #24]
 800a02c:	4303      	orrs	r3, r0
 800a02e:	69e0      	ldr	r0, [r4, #28]
 800a030:	4303      	orrs	r3, r0
 800a032:	6a20      	ldr	r0, [r4, #32]
 800a034:	4303      	orrs	r3, r0
 800a036:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a038:	4303      	orrs	r3, r0
 800a03a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a03c:	4303      	orrs	r3, r0
 800a03e:	68a8      	ldr	r0, [r5, #8]
 800a040:	4303      	orrs	r3, r0
 800a042:	68e8      	ldr	r0, [r5, #12]
 800a044:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a046:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800a048:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a04a:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a04c:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a04e:	f7fd fa67 	bl	8007520 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800a052:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a054:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a056:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800a05a:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a05c:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800a05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a060:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800a062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a064:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800a066:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a068:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800a06a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a06c:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800a06e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a070:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800a072:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a074:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a076:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800a078:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a07a:	f7fd fa51 	bl	8007520 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800a07e:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a082:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800a084:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a086:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a088:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a08c:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800a08e:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a090:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800a092:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800a096:	4303      	orrs	r3, r0
 800a098:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a09a:	4303      	orrs	r3, r0
 800a09c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a09e:	4303      	orrs	r3, r0
 800a0a0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a0a2:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a0a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800a0a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a0aa:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a0ac:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a0ae:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800a0b0:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a0b2:	f7fd fa35 	bl	8007520 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800a0b6:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a0b8:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a0ba:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800a0be:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800a0c4:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a0c6:	f7fd fa2b 	bl	8007520 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800a0ce:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800a0d0:	2201      	movs	r2, #1
  return HAL_OK;  
 800a0d2:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800a0d4:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a0d8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800a0dc:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a0de:	f240 6123 	movw	r1, #1571	; 0x623
 800a0e2:	4881      	ldr	r0, [pc, #516]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a0e4:	f7fa faa6 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a0e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a0ea:	f240 4204 	movw	r2, #1028	; 0x404
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bf18      	it	ne
 800a0f2:	2b10      	cmpne	r3, #16
 800a0f4:	f47f af55 	bne.w	8009fa2 <HAL_ETH_ConfigMAC+0x102>
 800a0f8:	e757      	b.n	8009faa <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a0fa:	f240 610e 	movw	r1, #1550	; 0x60e
 800a0fe:	487a      	ldr	r0, [pc, #488]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a100:	f7fa fa98 	bl	8004634 <assert_failed>
  if (macconf != NULL)
 800a104:	2c00      	cmp	r4, #0
 800a106:	f47f aee7 	bne.w	8009ed8 <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800a10a:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a10c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a10e:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800a112:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a114:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800a116:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a11a:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a11c:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a11e:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a120:	f7fd f9fe 	bl	8007520 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	601c      	str	r4, [r3, #0]
 800a128:	e7d1      	b.n	800a0ce <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a12a:	f240 6122 	movw	r1, #1570	; 0x622
 800a12e:	486e      	ldr	r0, [pc, #440]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a130:	f7fa fa80 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a134:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a136:	2b01      	cmp	r3, #1
 800a138:	f67f af2c 	bls.w	8009f94 <HAL_ETH_ConfigMAC+0xf4>
 800a13c:	e7cf      	b.n	800a0de <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a13e:	f240 6121 	movw	r1, #1569	; 0x621
 800a142:	4869      	ldr	r0, [pc, #420]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a144:	f7fa fa76 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a14a:	f033 0308 	bics.w	r3, r3, #8
 800a14e:	f43f af1d 	beq.w	8009f8c <HAL_ETH_ConfigMAC+0xec>
 800a152:	e7ea      	b.n	800a12a <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a154:	f240 6113 	movw	r1, #1555	; 0x613
 800a158:	4863      	ldr	r0, [pc, #396]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a15a:	f7fa fa6b 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a164:	f43f aec2 	beq.w	8009eec <HAL_ETH_ConfigMAC+0x4c>
 800a168:	e02b      	b.n	800a1c2 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a16a:	f240 6119 	movw	r1, #1561	; 0x619
 800a16e:	485e      	ldr	r0, [pc, #376]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a170:	f7fa fa60 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a174:	69e3      	ldr	r3, [r4, #28]
 800a176:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a17a:	f43f aed9 	beq.w	8009f30 <HAL_ETH_ConfigMAC+0x90>
 800a17e:	e07a      	b.n	800a276 <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a180:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800a184:	4858      	ldr	r0, [pc, #352]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a186:	f7fa fa55 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a18a:	69a3      	ldr	r3, [r4, #24]
 800a18c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a190:	f43f aec9 	beq.w	8009f26 <HAL_ETH_ConfigMAC+0x86>
 800a194:	e7e9      	b.n	800a16a <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a196:	f240 6117 	movw	r1, #1559	; 0x617
 800a19a:	4853      	ldr	r0, [pc, #332]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a19c:	f7fa fa4a 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a1a0:	6963      	ldr	r3, [r4, #20]
 800a1a2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a1a6:	f43f aeb9 	beq.w	8009f1c <HAL_ETH_ConfigMAC+0x7c>
 800a1aa:	e7e9      	b.n	800a180 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a1ac:	f240 6116 	movw	r1, #1558	; 0x616
 800a1b0:	484d      	ldr	r0, [pc, #308]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a1b2:	f7fa fa3f 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a1bc:	f43f aea9 	beq.w	8009f12 <HAL_ETH_ConfigMAC+0x72>
 800a1c0:	e7e9      	b.n	800a196 <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a1c2:	f240 6114 	movw	r1, #1556	; 0x614
 800a1c6:	4848      	ldr	r0, [pc, #288]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a1c8:	f7fa fa34 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a1cc:	68a3      	ldr	r3, [r4, #8]
 800a1ce:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a1d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1d6:	f47f ae8f 	bne.w	8009ef8 <HAL_ETH_ConfigMAC+0x58>
 800a1da:	e690      	b.n	8009efe <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a1dc:	f240 612d 	movw	r1, #1581	; 0x62d
 800a1e0:	4841      	ldr	r0, [pc, #260]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a1e2:	f7fa fa27 	bl	8004634 <assert_failed>
 800a1e6:	e711      	b.n	800a00c <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a1e8:	f240 612c 	movw	r1, #1580	; 0x62c
 800a1ec:	483e      	ldr	r0, [pc, #248]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a1ee:	f7fa fa21 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a1f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f8:	f4ff af08 	bcc.w	800a00c <HAL_ETH_ConfigMAC+0x16c>
 800a1fc:	e7ee      	b.n	800a1dc <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a1fe:	f240 612b 	movw	r1, #1579	; 0x62b
 800a202:	4839      	ldr	r0, [pc, #228]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a204:	f7fa fa16 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a208:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a20a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a20e:	f43f aef8 	beq.w	800a002 <HAL_ETH_ConfigMAC+0x162>
 800a212:	e7e9      	b.n	800a1e8 <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a214:	f240 612a 	movw	r1, #1578	; 0x62a
 800a218:	4833      	ldr	r0, [pc, #204]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a21a:	f7fa fa0b 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a21e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a220:	f033 0302 	bics.w	r3, r3, #2
 800a224:	f43f aee8 	beq.w	8009ff8 <HAL_ETH_ConfigMAC+0x158>
 800a228:	e7e9      	b.n	800a1fe <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a22a:	f240 6129 	movw	r1, #1577	; 0x629
 800a22e:	482e      	ldr	r0, [pc, #184]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a230:	f7fa fa00 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a236:	f033 0304 	bics.w	r3, r3, #4
 800a23a:	f43f aed8 	beq.w	8009fee <HAL_ETH_ConfigMAC+0x14e>
 800a23e:	e7e9      	b.n	800a214 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a240:	f240 611d 	movw	r1, #1565	; 0x61d
 800a244:	4828      	ldr	r0, [pc, #160]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a246:	f7fa f9f5 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a24a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a24c:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a250:	f43f ae82 	beq.w	8009f58 <HAL_ETH_ConfigMAC+0xb8>
 800a254:	e01a      	b.n	800a28c <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a256:	f240 611b 	movw	r1, #1563	; 0x61b
 800a25a:	4823      	ldr	r0, [pc, #140]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a25c:	f7fa f9ea 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a262:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a266:	f43f ae6d 	beq.w	8009f44 <HAL_ETH_ConfigMAC+0xa4>
 800a26a:	f240 611c 	movw	r1, #1564	; 0x61c
 800a26e:	481e      	ldr	r0, [pc, #120]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a270:	f7fa f9e0 	bl	8004634 <assert_failed>
 800a274:	e666      	b.n	8009f44 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a276:	f240 611a 	movw	r1, #1562	; 0x61a
 800a27a:	481b      	ldr	r0, [pc, #108]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a27c:	f7fa f9da 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a280:	6a23      	ldr	r3, [r4, #32]
 800a282:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a286:	f43f ae58 	beq.w	8009f3a <HAL_ETH_ConfigMAC+0x9a>
 800a28a:	e7e4      	b.n	800a256 <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a28c:	f240 611e 	movw	r1, #1566	; 0x61e
 800a290:	4815      	ldr	r0, [pc, #84]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a292:	f7fa f9cf 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a298:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a29c:	f47f ae60 	bne.w	8009f60 <HAL_ETH_ConfigMAC+0xc0>
 800a2a0:	e662      	b.n	8009f68 <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a2a2:	f240 6126 	movw	r1, #1574	; 0x626
 800a2a6:	4810      	ldr	r0, [pc, #64]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a2a8:	f7fa f9c4 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a2ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ae:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a2b2:	f43f ae8d 	beq.w	8009fd0 <HAL_ETH_ConfigMAC+0x130>
 800a2b6:	f240 6127 	movw	r1, #1575	; 0x627
 800a2ba:	480b      	ldr	r0, [pc, #44]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a2bc:	f7fa f9ba 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a2c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a2c2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a2c6:	f43f ae88 	beq.w	8009fda <HAL_ETH_ConfigMAC+0x13a>
 800a2ca:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800a2ce:	4806      	ldr	r0, [pc, #24]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a2d0:	f7fa f9b0 	bl	8004634 <assert_failed>
 800a2d4:	e681      	b.n	8009fda <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a2d6:	f240 610d 	movw	r1, #1549	; 0x60d
 800a2da:	4803      	ldr	r0, [pc, #12]	; (800a2e8 <HAL_ETH_ConfigMAC+0x448>)
 800a2dc:	f7fa f9aa 	bl	8004634 <assert_failed>
 800a2e0:	e5f2      	b.n	8009ec8 <HAL_ETH_ConfigMAC+0x28>
 800a2e2:	bf00      	nop
 800a2e4:	ff20810f 	.word	0xff20810f
 800a2e8:	0802b3dc 	.word	0x0802b3dc
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a2ec:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a2f0:	4816      	ldr	r0, [pc, #88]	; (800a34c <HAL_ETH_ConfigMAC+0x4ac>)
 800a2f2:	f7fa f99f 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a2f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2f8:	f033 0320 	bics.w	r3, r3, #32
 800a2fc:	f43f ae41 	beq.w	8009f82 <HAL_ETH_ConfigMAC+0xe2>
 800a300:	e71d      	b.n	800a13e <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a302:	f240 6125 	movw	r1, #1573	; 0x625
 800a306:	4811      	ldr	r0, [pc, #68]	; (800a34c <HAL_ETH_ConfigMAC+0x4ac>)
 800a308:	f7fa f994 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a30c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a312:	f4ff ae58 	bcc.w	8009fc6 <HAL_ETH_ConfigMAC+0x126>
 800a316:	e7c4      	b.n	800a2a2 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a318:	f240 611f 	movw	r1, #1567	; 0x61f
 800a31c:	480b      	ldr	r0, [pc, #44]	; (800a34c <HAL_ETH_ConfigMAC+0x4ac>)
 800a31e:	f7fa f989 	bl	8004634 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a324:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a328:	2a40      	cmp	r2, #64	; 0x40
 800a32a:	f47f ae22 	bne.w	8009f72 <HAL_ETH_ConfigMAC+0xd2>
 800a32e:	e623      	b.n	8009f78 <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a330:	f240 6124 	movw	r1, #1572	; 0x624
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <HAL_ETH_ConfigMAC+0x4ac>)
 800a336:	f7fa f97d 	bl	8004634 <assert_failed>
 800a33a:	e636      	b.n	8009faa <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800a33c:	2002      	movs	r0, #2
}
 800a33e:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a340:	f240 6115 	movw	r1, #1557	; 0x615
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <HAL_ETH_ConfigMAC+0x4ac>)
 800a346:	f7fa f975 	bl	8004634 <assert_failed>
 800a34a:	e5d8      	b.n	8009efe <HAL_ETH_ConfigMAC+0x5e>
 800a34c:	0802b3dc 	.word	0x0802b3dc

0800a350 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a350:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	079b      	lsls	r3, r3, #30
 800a356:	d504      	bpl.n	800a362 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a358:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <FLASH_SetErrorCode+0x68>)
 800a35a:	6993      	ldr	r3, [r2, #24]
 800a35c:	f043 0320 	orr.w	r3, r3, #32
 800a360:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	06d8      	lsls	r0, r3, #27
 800a368:	d504      	bpl.n	800a374 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a36a:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <FLASH_SetErrorCode+0x68>)
 800a36c:	6993      	ldr	r3, [r2, #24]
 800a36e:	f043 0310 	orr.w	r3, r3, #16
 800a372:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a374:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	0699      	lsls	r1, r3, #26
 800a37a:	d504      	bpl.n	800a386 <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a37c:	4a0e      	ldr	r2, [pc, #56]	; (800a3b8 <FLASH_SetErrorCode+0x68>)
 800a37e:	6993      	ldr	r3, [r2, #24]
 800a380:	f043 0308 	orr.w	r3, r3, #8
 800a384:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	065a      	lsls	r2, r3, #25
 800a38c:	d504      	bpl.n	800a398 <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a38e:	4a0a      	ldr	r2, [pc, #40]	; (800a3b8 <FLASH_SetErrorCode+0x68>)
 800a390:	6993      	ldr	r3, [r2, #24]
 800a392:	f043 0304 	orr.w	r3, r3, #4
 800a396:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	061b      	lsls	r3, r3, #24
 800a39e:	d504      	bpl.n	800a3aa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800a3a0:	4a05      	ldr	r2, [pc, #20]	; (800a3b8 <FLASH_SetErrorCode+0x68>)
 800a3a2:	6993      	ldr	r3, [r2, #24]
 800a3a4:	f043 0302 	orr.w	r3, r3, #2
 800a3a8:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800a3aa:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <FLASH_SetErrorCode+0x64>)
 800a3ac:	22f2      	movs	r2, #242	; 0xf2
 800a3ae:	60da      	str	r2, [r3, #12]
}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	40023c00 	.word	0x40023c00
 800a3b8:	20002efc 	.word	0x20002efc

0800a3bc <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <HAL_FLASH_OB_Unlock+0x18>)
 800a3be:	695a      	ldr	r2, [r3, #20]
 800a3c0:	07d2      	lsls	r2, r2, #31
 800a3c2:	d505      	bpl.n	800a3d0 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a3c4:	4904      	ldr	r1, [pc, #16]	; (800a3d8 <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800a3c6:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a3c8:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a3ca:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a3cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800a3ce:	4770      	bx	lr
    return HAL_ERROR;
 800a3d0:	2001      	movs	r0, #1
}
 800a3d2:	4770      	bx	lr
 800a3d4:	40023c00 	.word	0x40023c00
 800a3d8:	08192a3b 	.word	0x08192a3b
 800a3dc:	4c5d6e7f 	.word	0x4c5d6e7f

0800a3e0 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a3e0:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <HAL_FLASH_OB_Lock+0x10>)
}
 800a3e2:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a3e4:	6953      	ldr	r3, [r2, #20]
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6153      	str	r3, [r2, #20]
}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40023c00 	.word	0x40023c00

0800a3f4 <HAL_FLASH_OB_Launch>:
{
 800a3f4:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800a3f6:	4c14      	ldr	r4, [pc, #80]	; (800a448 <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4a14      	ldr	r2, [pc, #80]	; (800a44c <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800a3fc:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800a400:	6963      	ldr	r3, [r4, #20]
 800a402:	f043 0302 	orr.w	r3, r3, #2
 800a406:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a408:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800a40a:	f7fd f883 	bl	8007514 <HAL_GetTick>
 800a40e:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a410:	e004      	b.n	800a41c <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800a412:	f7fd f87f 	bl	8007514 <HAL_GetTick>
 800a416:	1b40      	subs	r0, r0, r5
 800a418:	42b0      	cmp	r0, r6
 800a41a:	d80e      	bhi.n	800a43a <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a41c:	68e3      	ldr	r3, [r4, #12]
 800a41e:	03db      	lsls	r3, r3, #15
 800a420:	d4f7      	bmi.n	800a412 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800a422:	68e2      	ldr	r2, [r4, #12]
 800a424:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800a428:	d109      	bne.n	800a43e <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a42a:	68e0      	ldr	r0, [r4, #12]
 800a42c:	f010 0001 	ands.w	r0, r0, #1
 800a430:	d002      	beq.n	800a438 <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a432:	2301      	movs	r3, #1
  return HAL_OK;
 800a434:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a436:	60e3      	str	r3, [r4, #12]
}
 800a438:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800a43a:	2003      	movs	r0, #3
}
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800a43e:	f7ff ff87 	bl	800a350 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a442:	2001      	movs	r0, #1
}
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	bf00      	nop
 800a448:	40023c00 	.word	0x40023c00
 800a44c:	20002efc 	.word	0x20002efc

0800a450 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a450:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <FLASH_WaitForLastOperation+0x50>)
 800a452:	2200      	movs	r2, #0
{ 
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a458:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a45a:	4d12      	ldr	r5, [pc, #72]	; (800a4a4 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800a45c:	f7fd f85a 	bl	8007514 <HAL_GetTick>
 800a460:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a462:	e001      	b.n	800a468 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800a464:	1c62      	adds	r2, r4, #1
 800a466:	d10e      	bne.n	800a486 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a468:	68eb      	ldr	r3, [r5, #12]
 800a46a:	03db      	lsls	r3, r3, #15
 800a46c:	d4fa      	bmi.n	800a464 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800a46e:	68ea      	ldr	r2, [r5, #12]
 800a470:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800a474:	d10f      	bne.n	800a496 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a476:	68e8      	ldr	r0, [r5, #12]
 800a478:	f010 0001 	ands.w	r0, r0, #1
 800a47c:	d002      	beq.n	800a484 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a47e:	2301      	movs	r3, #1
  return HAL_OK;
 800a480:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a482:	60eb      	str	r3, [r5, #12]
}  
 800a484:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800a486:	b124      	cbz	r4, 800a492 <FLASH_WaitForLastOperation+0x42>
 800a488:	f7fd f844 	bl	8007514 <HAL_GetTick>
 800a48c:	1b80      	subs	r0, r0, r6
 800a48e:	42a0      	cmp	r0, r4
 800a490:	d9ea      	bls.n	800a468 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800a492:	2003      	movs	r0, #3
}  
 800a494:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800a496:	f7ff ff5b 	bl	800a350 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a49a:	2001      	movs	r0, #1
}  
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
 800a49e:	bf00      	nop
 800a4a0:	20002efc 	.word	0x20002efc
 800a4a4:	40023c00 	.word	0x40023c00

0800a4a8 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a4a8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a4aa:	4d64      	ldr	r5, [pc, #400]	; (800a63c <HAL_FLASHEx_OBProgram+0x194>)
 800a4ac:	7d2b      	ldrb	r3, [r5, #20]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	f000 80bb 	beq.w	800a62a <HAL_FLASHEx_OBProgram+0x182>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	752b      	strb	r3, [r5, #20]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800a4ba:	6803      	ldr	r3, [r0, #0]
 800a4bc:	2b3f      	cmp	r3, #63	; 0x3f
 800a4be:	f200 808c 	bhi.w	800a5da <HAL_FLASHEx_OBProgram+0x132>

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a4c2:	07d9      	lsls	r1, r3, #31
 800a4c4:	d40d      	bmi.n	800a4e2 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800a4c6:	2001      	movs	r0, #1
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector);
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a4c8:	079a      	lsls	r2, r3, #30
 800a4ca:	d42c      	bmi.n	800a526 <HAL_FLASHEx_OBProgram+0x7e>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
  }

  /* USER  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a4cc:	075e      	lsls	r6, r3, #29
 800a4ce:	d440      	bmi.n	800a552 <HAL_FLASHEx_OBProgram+0xaa>
                                 pOBInit->USERConfig & OB_IWDG_STDBY_ACTIVE);    
#endif /* FLASH_OPTCR_nDBANK */
  }
  
  /* BOR Level  configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a4d0:	0719      	lsls	r1, r3, #28
 800a4d2:	d44f      	bmi.n	800a574 <HAL_FLASHEx_OBProgram+0xcc>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
  }
  
  /* Boot 0 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800a4d4:	06da      	lsls	r2, r3, #27
 800a4d6:	d45b      	bmi.n	800a590 <HAL_FLASHEx_OBProgram+0xe8>
  {
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
  }
  
  /* Boot 1 Address configuration */
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800a4d8:	069b      	lsls	r3, r3, #26
 800a4da:	d46c      	bmi.n	800a5b6 <HAL_FLASHEx_OBProgram+0x10e>
    status = FLASH_OB_PCROP_RDP_Config(pOBInit->PCROPRdp);
  }
#endif /* FLASH_OPTCR2_PCROP */

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	752b      	strb	r3, [r5, #20]

  return status;
}
 800a4e0:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d905      	bls.n	800a4f4 <HAL_FLASHEx_OBProgram+0x4c>
 800a4e8:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800a4ec:	4854      	ldr	r0, [pc, #336]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a4ee:	f7fa f8a1 	bl	8004634 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a4f2:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800a4f4:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a4f6:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800a4f8:	4b52      	ldr	r3, [pc, #328]	; (800a644 <HAL_FLASHEx_OBProgram+0x19c>)
 800a4fa:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a4fe:	d07f      	beq.n	800a600 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800a500:	b903      	cbnz	r3, 800a504 <HAL_FLASHEx_OBProgram+0x5c>
 800a502:	b926      	cbnz	r6, 800a50e <HAL_FLASHEx_OBProgram+0x66>
 800a504:	f240 314f 	movw	r1, #847	; 0x34f
 800a508:	484d      	ldr	r0, [pc, #308]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a50a:	f7fa f893 	bl	8004634 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a50e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a512:	f7ff ff9d 	bl	800a450 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800a516:	b918      	cbnz	r0, 800a520 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800a518:	4b4b      	ldr	r3, [pc, #300]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a51a:	695a      	ldr	r2, [r3, #20]
 800a51c:	4316      	orrs	r6, r2
 800a51e:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	079a      	lsls	r2, r3, #30
 800a524:	d5d2      	bpl.n	800a4cc <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a526:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800a528:	2eaa      	cmp	r6, #170	; 0xaa
 800a52a:	bf18      	it	ne
 800a52c:	2e55      	cmpne	r6, #85	; 0x55
 800a52e:	d006      	beq.n	800a53e <HAL_FLASHEx_OBProgram+0x96>
 800a530:	2ecc      	cmp	r6, #204	; 0xcc
 800a532:	d004      	beq.n	800a53e <HAL_FLASHEx_OBProgram+0x96>
 800a534:	f240 316e 	movw	r1, #878	; 0x36e
 800a538:	4841      	ldr	r0, [pc, #260]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a53a:	f7fa f87b 	bl	8004634 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a53e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a542:	f7ff ff85 	bl	800a450 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800a546:	b908      	cbnz	r0, 800a54c <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800a548:	4b3f      	ldr	r3, [pc, #252]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a54a:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	075e      	lsls	r6, r3, #29
 800a550:	d5be      	bpl.n	800a4d0 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a552:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800a556:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a558:	f7ff ff7a 	bl	800a450 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800a55c:	b938      	cbnz	r0, 800a56e <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800a55e:	493a      	ldr	r1, [pc, #232]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800a560:	4b3a      	ldr	r3, [pc, #232]	; (800a64c <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800a562:	4a3b      	ldr	r2, [pc, #236]	; (800a650 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800a564:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800a566:	694e      	ldr	r6, [r1, #20]
 800a568:	4032      	ands	r2, r6
 800a56a:	4313      	orrs	r3, r2
 800a56c:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	0719      	lsls	r1, r3, #28
 800a572:	d5af      	bpl.n	800a4d4 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a574:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800a576:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800a57a:	d158      	bne.n	800a62e <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800a57c:	4932      	ldr	r1, [pc, #200]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a57e:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a580:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800a582:	694a      	ldr	r2, [r1, #20]
 800a584:	f022 020c 	bic.w	r2, r2, #12
 800a588:	4332      	orrs	r2, r6
 800a58a:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800a58c:	06da      	lsls	r2, r3, #27
 800a58e:	d5a3      	bpl.n	800a4d8 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800a590:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800a592:	f248 0313 	movw	r3, #32787	; 0x8013
 800a596:	429e      	cmp	r6, r3
 800a598:	d826      	bhi.n	800a5e8 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a59a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a59e:	f7ff ff57 	bl	800a450 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800a5a2:	b928      	cbnz	r0, 800a5b0 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800a5a4:	4a28      	ldr	r2, [pc, #160]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a5a6:	4b2b      	ldr	r3, [pc, #172]	; (800a654 <HAL_FLASHEx_OBProgram+0x1ac>)
 800a5a8:	6991      	ldr	r1, [r2, #24]
 800a5aa:	400b      	ands	r3, r1
 800a5ac:	4333      	orrs	r3, r6
 800a5ae:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	069b      	lsls	r3, r3, #26
 800a5b4:	d592      	bpl.n	800a4dc <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800a5b6:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800a5b8:	f248 0313 	movw	r3, #32787	; 0x8013
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	d819      	bhi.n	800a5f4 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a5c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a5c4:	f7ff ff44 	bl	800a450 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d187      	bne.n	800a4dc <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800a5cc:	4a1e      	ldr	r2, [pc, #120]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a5ce:	6993      	ldr	r3, [r2, #24]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5d6:	6193      	str	r3, [r2, #24]
 800a5d8:	e780      	b.n	800a4dc <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800a5da:	f240 1125 	movw	r1, #293	; 0x125
 800a5de:	4818      	ldr	r0, [pc, #96]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a5e0:	f7fa f828 	bl	8004634 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	e76c      	b.n	800a4c2 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800a5e8:	f240 31a9 	movw	r1, #937	; 0x3a9
 800a5ec:	4814      	ldr	r0, [pc, #80]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a5ee:	f7fa f821 	bl	8004634 <assert_failed>
 800a5f2:	e7d2      	b.n	800a59a <HAL_FLASHEx_OBProgram+0xf2>
 800a5f4:	f240 31a9 	movw	r1, #937	; 0x3a9
 800a5f8:	4811      	ldr	r0, [pc, #68]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a5fa:	f7fa f81b 	bl	8004634 <assert_failed>
 800a5fe:	e7df      	b.n	800a5c0 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800a600:	b96b      	cbnz	r3, 800a61e <HAL_FLASHEx_OBProgram+0x176>
 800a602:	b166      	cbz	r6, 800a61e <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a604:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a608:	f7ff ff22 	bl	800a450 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d187      	bne.n	800a520 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800a610:	4a0d      	ldr	r2, [pc, #52]	; (800a648 <HAL_FLASHEx_OBProgram+0x1a0>)
 800a612:	6953      	ldr	r3, [r2, #20]
 800a614:	ea23 0606 	bic.w	r6, r3, r6
 800a618:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	e754      	b.n	800a4c8 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800a61e:	f240 312b 	movw	r1, #811	; 0x32b
 800a622:	4807      	ldr	r0, [pc, #28]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a624:	f7fa f806 	bl	8004634 <assert_failed>
 800a628:	e7ec      	b.n	800a604 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800a62a:	2002      	movs	r0, #2
}
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800a62e:	f44f 7162 	mov.w	r1, #904	; 0x388
 800a632:	4803      	ldr	r0, [pc, #12]	; (800a640 <HAL_FLASHEx_OBProgram+0x198>)
 800a634:	f7f9 fffe 	bl	8004634 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	e79f      	b.n	800a57c <HAL_FLASHEx_OBProgram+0xd4>
 800a63c:	20002efc 	.word	0x20002efc
 800a640:	0802b414 	.word	0x0802b414
 800a644:	f000ffff 	.word	0xf000ffff
 800a648:	40023c00 	.word	0x40023c00
 800a64c:	f00000f0 	.word	0xf00000f0
 800a650:	0fffff0f 	.word	0x0fffff0f
 800a654:	ffff0000 	.word	0xffff0000

0800a658 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800a658:	4a11      	ldr	r2, [pc, #68]	; (800a6a0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800a65a:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800a65c:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800a65e:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800a660:	6951      	ldr	r1, [r2, #20]
 800a662:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800a664:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800a666:	7d51      	ldrb	r1, [r2, #21]
 800a668:	29aa      	cmp	r1, #170	; 0xaa
 800a66a:	b2cb      	uxtb	r3, r1
 800a66c:	d015      	beq.n	800a69a <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800a66e:	7d53      	ldrb	r3, [r2, #21]
 800a670:	2bcc      	cmp	r3, #204	; 0xcc
 800a672:	bf0c      	ite	eq
 800a674:	22cc      	moveq	r2, #204	; 0xcc
 800a676:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800a678:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800a67a:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800a67c:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <HAL_FLASHEx_OBGetConfig+0x50>)
 800a67e:	6959      	ldr	r1, [r3, #20]
 800a680:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800a682:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800a684:	695a      	ldr	r2, [r3, #20]
 800a686:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800a68a:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800a690:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800a696:	61c3      	str	r3, [r0, #28]
}
 800a698:	4770      	bx	lr
 800a69a:	461a      	mov	r2, r3
 800a69c:	e7ec      	b.n	800a678 <HAL_FLASHEx_OBGetConfig+0x20>
 800a69e:	bf00      	nop
 800a6a0:	40023c00 	.word	0x40023c00
 800a6a4:	0fff0000 	.word	0x0fff0000
 800a6a8:	f00000f0 	.word	0xf00000f0

0800a6ac <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a6ac:	4bb9      	ldr	r3, [pc, #740]	; (800a994 <HAL_GPIO_Init+0x2e8>)
 800a6ae:	4aba      	ldr	r2, [pc, #744]	; (800a998 <HAL_GPIO_Init+0x2ec>)
 800a6b0:	4290      	cmp	r0, r2
 800a6b2:	bf18      	it	ne
 800a6b4:	4298      	cmpne	r0, r3
{
 800a6b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a6ba:	bf18      	it	ne
 800a6bc:	2301      	movne	r3, #1
{
 800a6be:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a6c0:	bf08      	it	eq
 800a6c2:	2300      	moveq	r3, #0
{
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	d026      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6cc:	4bb3      	ldr	r3, [pc, #716]	; (800a99c <HAL_GPIO_Init+0x2f0>)
 800a6ce:	4298      	cmp	r0, r3
 800a6d0:	d023      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6d6:	4298      	cmp	r0, r3
 800a6d8:	d01f      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	d01b      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	d017      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	d013      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6f6:	4298      	cmp	r0, r3
 800a6f8:	d00f      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a6fa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	4290      	cmp	r0, r2
 800a704:	bf18      	it	ne
 800a706:	4298      	cmpne	r0, r3
 800a708:	d007      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a70a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a70e:	4298      	cmp	r0, r3
 800a710:	d003      	beq.n	800a71a <HAL_GPIO_Init+0x6e>
 800a712:	21aa      	movs	r1, #170	; 0xaa
 800a714:	48a2      	ldr	r0, [pc, #648]	; (800a9a0 <HAL_GPIO_Init+0x2f4>)
 800a716:	f7f9 ff8d 	bl	8004634 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a71a:	883b      	ldrh	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 811a 	beq.w	800a956 <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800a728:	bf18      	it	ne
 800a72a:	2a03      	cmpne	r2, #3
 800a72c:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800a730:	bf8c      	ite	hi
 800a732:	2301      	movhi	r3, #1
 800a734:	2300      	movls	r3, #0
 800a736:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800a73a:	bf0c      	ite	eq
 800a73c:	2300      	moveq	r3, #0
 800a73e:	f003 0301 	andne.w	r3, r3, #1
 800a742:	3a11      	subs	r2, #17
 800a744:	2a01      	cmp	r2, #1
 800a746:	bf94      	ite	ls
 800a748:	2300      	movls	r3, #0
 800a74a:	f003 0301 	andhi.w	r3, r3, #1
 800a74e:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800a752:	bf0c      	ite	eq
 800a754:	2300      	moveq	r3, #0
 800a756:	f003 0301 	andne.w	r3, r3, #1
 800a75a:	b11b      	cbz	r3, 800a764 <HAL_GPIO_Init+0xb8>
 800a75c:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800a760:	f040 813e 	bne.w	800a9e0 <HAL_GPIO_Init+0x334>
{
 800a764:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a766:	f8df a260 	ldr.w	sl, [pc, #608]	; 800a9c8 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a76a:	46b8      	mov	r8, r7
 800a76c:	e003      	b.n	800a776 <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800a76e:	3501      	adds	r5, #1
 800a770:	2d10      	cmp	r5, #16
 800a772:	f000 80b3 	beq.w	800a8dc <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800a776:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a778:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800a77c:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a77e:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800a782:	ea34 0303 	bics.w	r3, r4, r3
 800a786:	d1f2      	bne.n	800a76e <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a788:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a78c:	f001 0303 	and.w	r3, r1, #3
 800a790:	1e5a      	subs	r2, r3, #1
 800a792:	2a01      	cmp	r2, #1
 800a794:	f240 80a5 	bls.w	800a8e2 <HAL_GPIO_Init+0x236>
 800a798:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a79a:	f04f 0b03 	mov.w	fp, #3
 800a79e:	fa0b fb07 	lsl.w	fp, fp, r7
 800a7a2:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d025      	beq.n	800a7f6 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a7aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a7ae:	2802      	cmp	r0, #2
 800a7b0:	f200 80b3 	bhi.w	800a91a <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800a7b4:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a7b6:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7b8:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a7ba:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a7be:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800a7c2:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7c4:	d117      	bne.n	800a7f6 <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a7c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800a7ca:	280f      	cmp	r0, #15
 800a7cc:	f200 80c8 	bhi.w	800a960 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800a7d0:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a7d2:	f005 0e07 	and.w	lr, r5, #7
 800a7d6:	f04f 0c0f 	mov.w	ip, #15
 800a7da:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a7de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800a7e2:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a7e4:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a7e8:	fa0c fe0e 	lsl.w	lr, ip, lr
 800a7ec:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a7f0:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800a7f4:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800a7f6:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a7f8:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a7fa:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a7fe:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a802:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800a806:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a808:	d0b1      	beq.n	800a76e <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a80a:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800a80e:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a812:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a81a:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a81c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800a820:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800a824:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a828:	9203      	str	r2, [sp, #12]
 800a82a:	4a5e      	ldr	r2, [pc, #376]	; (800a9a4 <HAL_GPIO_Init+0x2f8>)
 800a82c:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800a82e:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a830:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800a832:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a834:	40a3      	lsls	r3, r4
 800a836:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a83a:	4857      	ldr	r0, [pc, #348]	; (800a998 <HAL_GPIO_Init+0x2ec>)
 800a83c:	4286      	cmp	r6, r0
 800a83e:	d025      	beq.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a840:	9801      	ldr	r0, [sp, #4]
 800a842:	2800      	cmp	r0, #0
 800a844:	d07d      	beq.n	800a942 <HAL_GPIO_Init+0x296>
 800a846:	4855      	ldr	r0, [pc, #340]	; (800a99c <HAL_GPIO_Init+0x2f0>)
 800a848:	4286      	cmp	r6, r0
 800a84a:	d07f      	beq.n	800a94c <HAL_GPIO_Init+0x2a0>
 800a84c:	4856      	ldr	r0, [pc, #344]	; (800a9a8 <HAL_GPIO_Init+0x2fc>)
 800a84e:	4286      	cmp	r6, r0
 800a850:	f000 8091 	beq.w	800a976 <HAL_GPIO_Init+0x2ca>
 800a854:	4855      	ldr	r0, [pc, #340]	; (800a9ac <HAL_GPIO_Init+0x300>)
 800a856:	4286      	cmp	r6, r0
 800a858:	f000 8092 	beq.w	800a980 <HAL_GPIO_Init+0x2d4>
 800a85c:	4854      	ldr	r0, [pc, #336]	; (800a9b0 <HAL_GPIO_Init+0x304>)
 800a85e:	4286      	cmp	r6, r0
 800a860:	f000 80b4 	beq.w	800a9cc <HAL_GPIO_Init+0x320>
 800a864:	4853      	ldr	r0, [pc, #332]	; (800a9b4 <HAL_GPIO_Init+0x308>)
 800a866:	4286      	cmp	r6, r0
 800a868:	f000 80b5 	beq.w	800a9d6 <HAL_GPIO_Init+0x32a>
 800a86c:	4852      	ldr	r0, [pc, #328]	; (800a9b8 <HAL_GPIO_Init+0x30c>)
 800a86e:	4286      	cmp	r6, r0
 800a870:	f000 808b 	beq.w	800a98a <HAL_GPIO_Init+0x2de>
 800a874:	4851      	ldr	r0, [pc, #324]	; (800a9bc <HAL_GPIO_Init+0x310>)
 800a876:	4286      	cmp	r6, r0
 800a878:	f000 80b7 	beq.w	800a9ea <HAL_GPIO_Init+0x33e>
 800a87c:	4850      	ldr	r0, [pc, #320]	; (800a9c0 <HAL_GPIO_Init+0x314>)
 800a87e:	4286      	cmp	r6, r0
 800a880:	bf0c      	ite	eq
 800a882:	2009      	moveq	r0, #9
 800a884:	200a      	movne	r0, #10
 800a886:	fa00 f404 	lsl.w	r4, r0, r4
 800a88a:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800a88c:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800a88e:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800a892:	4b4c      	ldr	r3, [pc, #304]	; (800a9c4 <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800a894:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800a896:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a898:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800a89a:	4b4a      	ldr	r3, [pc, #296]	; (800a9c4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a89c:	bf54      	ite	pl
 800a89e:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a8a0:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a8a4:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800a8a6:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800a8a8:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800a8aa:	4b46      	ldr	r3, [pc, #280]	; (800a9c4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a8ac:	bf54      	ite	pl
 800a8ae:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a8b0:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a8b4:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800a8b6:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800a8b8:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800a8ba:	4b42      	ldr	r3, [pc, #264]	; (800a9c4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a8bc:	bf54      	ite	pl
 800a8be:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800a8c0:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800a8c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a8c6:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800a8c8:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800a8ca:	4a3e      	ldr	r2, [pc, #248]	; (800a9c4 <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800a8cc:	bf54      	ite	pl
 800a8ce:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800a8d0:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8d4:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800a8d6:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8d8:	f47f af4d 	bne.w	800a776 <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800a8dc:	b005      	add	sp, #20
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a8e2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a8e6:	2803      	cmp	r0, #3
 800a8e8:	d820      	bhi.n	800a92c <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800a8ea:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a8ec:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800a8f0:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a8f4:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800a8f8:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a8fa:	ea20 000b 	bic.w	r0, r0, fp
 800a8fe:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800a902:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800a906:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800a908:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a90a:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a90e:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800a912:	40ac      	lsls	r4, r5
 800a914:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800a916:	6074      	str	r4, [r6, #4]
 800a918:	e745      	b.n	800a7a6 <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a91a:	21ce      	movs	r1, #206	; 0xce
 800a91c:	4820      	ldr	r0, [pc, #128]	; (800a9a0 <HAL_GPIO_Init+0x2f4>)
 800a91e:	f7f9 fe89 	bl	8004634 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a922:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a926:	f001 0303 	and.w	r3, r1, #3
 800a92a:	e743      	b.n	800a7b4 <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a92c:	21bd      	movs	r1, #189	; 0xbd
 800a92e:	481c      	ldr	r0, [pc, #112]	; (800a9a0 <HAL_GPIO_Init+0x2f4>)
 800a930:	f7f9 fe80 	bl	8004634 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a934:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a938:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a93c:	f001 0303 	and.w	r3, r1, #3
 800a940:	e7d3      	b.n	800a8ea <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a942:	2001      	movs	r0, #1
 800a944:	fa00 f404 	lsl.w	r4, r0, r4
 800a948:	4323      	orrs	r3, r4
 800a94a:	e79f      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a94c:	2002      	movs	r0, #2
 800a94e:	fa00 f404 	lsl.w	r4, r0, r4
 800a952:	4323      	orrs	r3, r4
 800a954:	e79a      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a956:	21ab      	movs	r1, #171	; 0xab
 800a958:	4811      	ldr	r0, [pc, #68]	; (800a9a0 <HAL_GPIO_Init+0x2f4>)
 800a95a:	f7f9 fe6b 	bl	8004634 <assert_failed>
 800a95e:	e6e0      	b.n	800a722 <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a960:	21db      	movs	r1, #219	; 0xdb
 800a962:	480f      	ldr	r0, [pc, #60]	; (800a9a0 <HAL_GPIO_Init+0x2f4>)
 800a964:	f7f9 fe66 	bl	8004634 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a968:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a96c:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a970:	f001 0303 	and.w	r3, r1, #3
 800a974:	e72c      	b.n	800a7d0 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a976:	2003      	movs	r0, #3
 800a978:	fa00 f404 	lsl.w	r4, r0, r4
 800a97c:	4323      	orrs	r3, r4
 800a97e:	e785      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a980:	2004      	movs	r0, #4
 800a982:	fa00 f404 	lsl.w	r4, r0, r4
 800a986:	4323      	orrs	r3, r4
 800a988:	e780      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a98a:	2007      	movs	r0, #7
 800a98c:	fa00 f404 	lsl.w	r4, r0, r4
 800a990:	4323      	orrs	r3, r4
 800a992:	e77b      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a994:	40020400 	.word	0x40020400
 800a998:	40020000 	.word	0x40020000
 800a99c:	40020800 	.word	0x40020800
 800a9a0:	0802b454 	.word	0x0802b454
 800a9a4:	40013800 	.word	0x40013800
 800a9a8:	40020c00 	.word	0x40020c00
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	40021400 	.word	0x40021400
 800a9b4:	40021800 	.word	0x40021800
 800a9b8:	40021c00 	.word	0x40021c00
 800a9bc:	40022000 	.word	0x40022000
 800a9c0:	40022400 	.word	0x40022400
 800a9c4:	40013c00 	.word	0x40013c00
 800a9c8:	40023800 	.word	0x40023800
 800a9cc:	2005      	movs	r0, #5
 800a9ce:	fa00 f404 	lsl.w	r4, r0, r4
 800a9d2:	4323      	orrs	r3, r4
 800a9d4:	e75a      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a9d6:	2006      	movs	r0, #6
 800a9d8:	fa00 f404 	lsl.w	r4, r0, r4
 800a9dc:	4323      	orrs	r3, r4
 800a9de:	e755      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a9e0:	21ac      	movs	r1, #172	; 0xac
 800a9e2:	4804      	ldr	r0, [pc, #16]	; (800a9f4 <HAL_GPIO_Init+0x348>)
 800a9e4:	f7f9 fe26 	bl	8004634 <assert_failed>
 800a9e8:	e6bc      	b.n	800a764 <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a9ea:	2008      	movs	r0, #8
 800a9ec:	fa00 f404 	lsl.w	r4, r0, r4
 800a9f0:	4323      	orrs	r3, r4
 800a9f2:	e74b      	b.n	800a88c <HAL_GPIO_Init+0x1e0>
 800a9f4:	0802b454 	.word	0x0802b454

0800a9f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a9fc:	4f6b      	ldr	r7, [pc, #428]	; (800abac <HAL_GPIO_DeInit+0x1b4>)
{
 800a9fe:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aa00:	4b6b      	ldr	r3, [pc, #428]	; (800abb0 <HAL_GPIO_DeInit+0x1b8>)
{
 800aa02:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800aa04:	42b8      	cmp	r0, r7
 800aa06:	bf18      	it	ne
 800aa08:	4298      	cmpne	r0, r3
 800aa0a:	bf14      	ite	ne
 800aa0c:	2701      	movne	r7, #1
 800aa0e:	2700      	moveq	r7, #0
 800aa10:	d027      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa16:	4298      	cmp	r0, r3
 800aa18:	d023      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa1e:	4298      	cmp	r0, r3
 800aa20:	d01f      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa26:	4298      	cmp	r0, r3
 800aa28:	d01b      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	d017      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa36:	4298      	cmp	r0, r3
 800aa38:	d013      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa3e:	4298      	cmp	r0, r3
 800aa40:	d00f      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa42:	4a5c      	ldr	r2, [pc, #368]	; (800abb4 <HAL_GPIO_DeInit+0x1bc>)
 800aa44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa48:	4290      	cmp	r0, r2
 800aa4a:	bf18      	it	ne
 800aa4c:	4298      	cmpne	r0, r3
 800aa4e:	d008      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa54:	4298      	cmp	r0, r3
 800aa56:	d004      	beq.n	800aa62 <HAL_GPIO_DeInit+0x6a>
 800aa58:	f240 112b 	movw	r1, #299	; 0x12b
 800aa5c:	4856      	ldr	r0, [pc, #344]	; (800abb8 <HAL_GPIO_DeInit+0x1c0>)
 800aa5e:	f7f9 fde9 	bl	8004634 <assert_failed>
{
 800aa62:	2300      	movs	r3, #0
 800aa64:	f8df b170 	ldr.w	fp, [pc, #368]	; 800abd8 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800aa68:	f8df a140 	ldr.w	sl, [pc, #320]	; 800abac <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aa6c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800abdc <HAL_GPIO_DeInit+0x1e4>
 800aa70:	e002      	b.n	800aa78 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800aa72:	3301      	adds	r3, #1
 800aa74:	2b10      	cmp	r3, #16
 800aa76:	d07b      	beq.n	800ab70 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800aa78:	2001      	movs	r0, #1
 800aa7a:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800aa7e:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800aa82:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800aa86:	d1f4      	bne.n	800aa72 <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800aa88:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aa8c:	f003 0103 	and.w	r1, r3, #3
 800aa90:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800aa94:	4554      	cmp	r4, sl
 800aa96:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aa98:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800aa9c:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aaa0:	fa0c fc01 	lsl.w	ip, ip, r1
 800aaa4:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800aaa8:	d01e      	beq.n	800aae8 <HAL_GPIO_DeInit+0xf0>
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	d063      	beq.n	800ab76 <HAL_GPIO_DeInit+0x17e>
 800aaae:	4843      	ldr	r0, [pc, #268]	; (800abbc <HAL_GPIO_DeInit+0x1c4>)
 800aab0:	4284      	cmp	r4, r0
 800aab2:	d063      	beq.n	800ab7c <HAL_GPIO_DeInit+0x184>
 800aab4:	4842      	ldr	r0, [pc, #264]	; (800abc0 <HAL_GPIO_DeInit+0x1c8>)
 800aab6:	4284      	cmp	r4, r0
 800aab8:	d064      	beq.n	800ab84 <HAL_GPIO_DeInit+0x18c>
 800aaba:	4842      	ldr	r0, [pc, #264]	; (800abc4 <HAL_GPIO_DeInit+0x1cc>)
 800aabc:	4284      	cmp	r4, r0
 800aabe:	d065      	beq.n	800ab8c <HAL_GPIO_DeInit+0x194>
 800aac0:	4841      	ldr	r0, [pc, #260]	; (800abc8 <HAL_GPIO_DeInit+0x1d0>)
 800aac2:	4284      	cmp	r4, r0
 800aac4:	d066      	beq.n	800ab94 <HAL_GPIO_DeInit+0x19c>
 800aac6:	4841      	ldr	r0, [pc, #260]	; (800abcc <HAL_GPIO_DeInit+0x1d4>)
 800aac8:	4284      	cmp	r4, r0
 800aaca:	d053      	beq.n	800ab74 <HAL_GPIO_DeInit+0x17c>
 800aacc:	4840      	ldr	r0, [pc, #256]	; (800abd0 <HAL_GPIO_DeInit+0x1d8>)
 800aace:	4284      	cmp	r4, r0
 800aad0:	d064      	beq.n	800ab9c <HAL_GPIO_DeInit+0x1a4>
 800aad2:	4838      	ldr	r0, [pc, #224]	; (800abb4 <HAL_GPIO_DeInit+0x1bc>)
 800aad4:	4284      	cmp	r4, r0
 800aad6:	d065      	beq.n	800aba4 <HAL_GPIO_DeInit+0x1ac>
 800aad8:	483e      	ldr	r0, [pc, #248]	; (800abd4 <HAL_GPIO_DeInit+0x1dc>)
 800aada:	4284      	cmp	r4, r0
 800aadc:	bf14      	ite	ne
 800aade:	200a      	movne	r0, #10
 800aae0:	2009      	moveq	r0, #9
 800aae2:	fa00 f101 	lsl.w	r1, r0, r1
 800aae6:	e000      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800aae8:	2100      	movs	r1, #0
 800aaea:	4588      	cmp	r8, r1
 800aaec:	d11b      	bne.n	800ab26 <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aaee:	f8d9 1000 	ldr.w	r1, [r9]
 800aaf2:	ea21 010e 	bic.w	r1, r1, lr
 800aaf6:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aafa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aafe:	ea21 010e 	bic.w	r1, r1, lr
 800ab02:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ab06:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800ab0a:	ea21 010e 	bic.w	r1, r1, lr
 800ab0e:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ab12:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ab16:	ea21 010e 	bic.w	r1, r1, lr
 800ab1a:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800ab1e:	68b1      	ldr	r1, [r6, #8]
 800ab20:	ea21 010c 	bic.w	r1, r1, ip
 800ab24:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ab26:	0059      	lsls	r1, r3, #1
 800ab28:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab2a:	f003 0c07 	and.w	ip, r3, #7
 800ab2e:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ab30:	fa00 f101 	lsl.w	r1, r0, r1
 800ab34:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ab3a:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab3e:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ab42:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab44:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab46:	3301      	adds	r3, #1
 800ab48:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800ab4c:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab4e:	6a06      	ldr	r6, [r0, #32]
 800ab50:	ea26 060c 	bic.w	r6, r6, ip
 800ab54:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ab56:	68e0      	ldr	r0, [r4, #12]
 800ab58:	ea20 0001 	bic.w	r0, r0, r1
 800ab5c:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab5e:	6860      	ldr	r0, [r4, #4]
 800ab60:	ea20 0202 	bic.w	r2, r0, r2
 800ab64:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ab66:	68a2      	ldr	r2, [r4, #8]
 800ab68:	ea22 0101 	bic.w	r1, r2, r1
 800ab6c:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab6e:	d183      	bne.n	800aa78 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800ab70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800ab74:	2006      	movs	r0, #6
 800ab76:	fa00 f101 	lsl.w	r1, r0, r1
 800ab7a:	e7b6      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800ab7c:	2002      	movs	r0, #2
 800ab7e:	fa00 f101 	lsl.w	r1, r0, r1
 800ab82:	e7b2      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800ab84:	2003      	movs	r0, #3
 800ab86:	fa00 f101 	lsl.w	r1, r0, r1
 800ab8a:	e7ae      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800ab8c:	2004      	movs	r0, #4
 800ab8e:	fa00 f101 	lsl.w	r1, r0, r1
 800ab92:	e7aa      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800ab94:	2005      	movs	r0, #5
 800ab96:	fa00 f101 	lsl.w	r1, r0, r1
 800ab9a:	e7a6      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800ab9c:	2007      	movs	r0, #7
 800ab9e:	fa00 f101 	lsl.w	r1, r0, r1
 800aba2:	e7a2      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800aba4:	2008      	movs	r0, #8
 800aba6:	fa00 f101 	lsl.w	r1, r0, r1
 800abaa:	e79e      	b.n	800aaea <HAL_GPIO_DeInit+0xf2>
 800abac:	40020000 	.word	0x40020000
 800abb0:	40020400 	.word	0x40020400
 800abb4:	40022000 	.word	0x40022000
 800abb8:	0802b454 	.word	0x0802b454
 800abbc:	40020800 	.word	0x40020800
 800abc0:	40020c00 	.word	0x40020c00
 800abc4:	40021000 	.word	0x40021000
 800abc8:	40021400 	.word	0x40021400
 800abcc:	40021800 	.word	0x40021800
 800abd0:	40021c00 	.word	0x40021c00
 800abd4:	40022400 	.word	0x40022400
 800abd8:	40013800 	.word	0x40013800
 800abdc:	40013c00 	.word	0x40013c00

0800abe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800abe4:	460c      	mov	r4, r1
 800abe6:	b129      	cbz	r1, 800abf4 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800abe8:	692b      	ldr	r3, [r5, #16]
 800abea:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800abec:	bf14      	ite	ne
 800abee:	2001      	movne	r0, #1
 800abf0:	2000      	moveq	r0, #0
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800abf4:	f240 1177 	movw	r1, #375	; 0x177
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <HAL_GPIO_ReadPin+0x20>)
 800abfa:	f7f9 fd1b 	bl	8004634 <assert_failed>
 800abfe:	e7f3      	b.n	800abe8 <HAL_GPIO_ReadPin+0x8>
 800ac00:	0802b454 	.word	0x0802b454

0800ac04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ac08:	460c      	mov	r4, r1
{
 800ac0a:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ac0c:	b161      	cbz	r1, 800ac28 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ac0e:	2d01      	cmp	r5, #1
 800ac10:	d803      	bhi.n	800ac1a <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800ac12:	b905      	cbnz	r5, 800ac16 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ac14:	0424      	lsls	r4, r4, #16
 800ac16:	61b4      	str	r4, [r6, #24]
  }
}
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ac1a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800ac1e:	4805      	ldr	r0, [pc, #20]	; (800ac34 <HAL_GPIO_WritePin+0x30>)
 800ac20:	f7f9 fd08 	bl	8004634 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ac24:	61b4      	str	r4, [r6, #24]
}
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ac28:	f240 1197 	movw	r1, #407	; 0x197
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <HAL_GPIO_WritePin+0x30>)
 800ac2e:	f7f9 fd01 	bl	8004634 <assert_failed>
 800ac32:	e7ec      	b.n	800ac0e <HAL_GPIO_WritePin+0xa>
 800ac34:	0802b454 	.word	0x0802b454

0800ac38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	b141      	cbz	r1, 800ac52 <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ac40:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac42:	ea04 0301 	and.w	r3, r4, r1
 800ac46:	ea24 0401 	bic.w	r4, r4, r1
 800ac4a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ac4e:	61ac      	str	r4, [r5, #24]
}
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ac52:	f240 11af 	movw	r1, #431	; 0x1af
 800ac56:	4802      	ldr	r0, [pc, #8]	; (800ac60 <HAL_GPIO_TogglePin+0x28>)
 800ac58:	f7f9 fcec 	bl	8004634 <assert_failed>
 800ac5c:	e7f0      	b.n	800ac40 <HAL_GPIO_TogglePin+0x8>
 800ac5e:	bf00      	nop
 800ac60:	0802b454 	.word	0x0802b454

0800ac64 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop

0800ac68 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ac68:	4a04      	ldr	r2, [pc, #16]	; (800ac7c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800ac6a:	6951      	ldr	r1, [r2, #20]
 800ac6c:	4201      	tst	r1, r0
 800ac6e:	d100      	bne.n	800ac72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800ac70:	4770      	bx	lr
{
 800ac72:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ac74:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ac76:	f7ff fff5 	bl	800ac64 <HAL_GPIO_EXTI_Callback>
}
 800ac7a:	bd08      	pop	{r3, pc}
 800ac7c:	40013c00 	.word	0x40013c00

0800ac80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ac80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac84:	460d      	mov	r5, r1
 800ac86:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac88:	4926      	ldr	r1, [pc, #152]	; (800ad24 <I2C_TransferConfig+0xa4>)
{
 800ac8a:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac8c:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <I2C_TransferConfig+0xa8>)
{
 800ac8e:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac90:	6803      	ldr	r3, [r0, #0]
{
 800ac92:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bf18      	it	ne
 800ac98:	428b      	cmpne	r3, r1
 800ac9a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac9e:	bf14      	ite	ne
 800aca0:	2201      	movne	r2, #1
 800aca2:	2200      	moveq	r2, #0
 800aca4:	428b      	cmp	r3, r1
 800aca6:	bf0c      	ite	eq
 800aca8:	2200      	moveq	r2, #0
 800acaa:	f002 0201 	andne.w	r2, r2, #1
 800acae:	b112      	cbz	r2, 800acb6 <I2C_TransferConfig+0x36>
 800acb0:	4a1e      	ldr	r2, [pc, #120]	; (800ad2c <I2C_TransferConfig+0xac>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d123      	bne.n	800acfe <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800acb6:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800acba:	d002      	beq.n	800acc2 <I2C_TransferConfig+0x42>
 800acbc:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800acc0:	d129      	bne.n	800ad16 <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800acc2:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <I2C_TransferConfig+0xb0>)
 800acc4:	429f      	cmp	r7, r3
 800acc6:	d005      	beq.n	800acd4 <I2C_TransferConfig+0x54>
 800acc8:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800accc:	4a19      	ldr	r2, [pc, #100]	; (800ad34 <I2C_TransferConfig+0xb4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d000      	beq.n	800acd4 <I2C_TransferConfig+0x54>
 800acd2:	b9d7      	cbnz	r7, 800ad0a <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800acd4:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800acd8:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800acdc:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800ace0:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800ace4:	4a14      	ldr	r2, [pc, #80]	; (800ad38 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ace6:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800ace8:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800acec:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800acee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800acf2:	ea27 0702 	bic.w	r7, r7, r2
 800acf6:	433b      	orrs	r3, r7
 800acf8:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800acfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800acfe:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800ad02:	480e      	ldr	r0, [pc, #56]	; (800ad3c <I2C_TransferConfig+0xbc>)
 800ad04:	f7f9 fc96 	bl	8004634 <assert_failed>
 800ad08:	e7d5      	b.n	800acb6 <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800ad0a:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800ad0e:	480b      	ldr	r0, [pc, #44]	; (800ad3c <I2C_TransferConfig+0xbc>)
 800ad10:	f7f9 fc90 	bl	8004634 <assert_failed>
 800ad14:	e7de      	b.n	800acd4 <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ad16:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800ad1a:	4808      	ldr	r0, [pc, #32]	; (800ad3c <I2C_TransferConfig+0xbc>)
 800ad1c:	f7f9 fc8a 	bl	8004634 <assert_failed>
 800ad20:	e7cf      	b.n	800acc2 <I2C_TransferConfig+0x42>
 800ad22:	bf00      	nop
 800ad24:	40005800 	.word	0x40005800
 800ad28:	40005400 	.word	0x40005400
 800ad2c:	40006000 	.word	0x40006000
 800ad30:	80004000 	.word	0x80004000
 800ad34:	80002000 	.word	0x80002000
 800ad38:	03ff63ff 	.word	0x03ff63ff
 800ad3c:	0802b490 	.word	0x0802b490

0800ad40 <I2C_IsErrorOccurred>:
{
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad44:	6803      	ldr	r3, [r0, #0]
{
 800ad46:	460d      	mov	r5, r1
 800ad48:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad4a:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad4c:	f011 0110 	ands.w	r1, r1, #16
 800ad50:	d045      	beq.n	800adde <I2C_IsErrorOccurred+0x9e>
 800ad52:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800ad54:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad58:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800ad5a:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	0696      	lsls	r6, r2, #26
 800ad64:	f100 808d 	bmi.w	800ae82 <I2C_IsErrorOccurred+0x142>
 800ad68:	f1b9 0f00 	cmp.w	r9, #0
 800ad6c:	f040 808d 	bne.w	800ae8a <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800ad70:	1c6a      	adds	r2, r5, #1
 800ad72:	d152      	bne.n	800ae1a <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad74:	699a      	ldr	r2, [r3, #24]
 800ad76:	0697      	lsls	r7, r2, #26
 800ad78:	d5fc      	bpl.n	800ad74 <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad7a:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800ad7c:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800ad7e:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad82:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800ad84:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ad86:	05d5      	lsls	r5, r2, #23
 800ad88:	d42d      	bmi.n	800ade6 <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ad8a:	0557      	lsls	r7, r2, #21
 800ad8c:	d53d      	bpl.n	800ae0a <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ad8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800ad92:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ad96:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ad98:	0596      	lsls	r6, r2, #22
 800ad9a:	d504      	bpl.n	800ada6 <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ad9c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800ada0:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ada4:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ada6:	699a      	ldr	r2, [r3, #24]
 800ada8:	0790      	lsls	r0, r2, #30
 800adaa:	d501      	bpl.n	800adb0 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800adac:	2200      	movs	r2, #0
 800adae:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	07d2      	lsls	r2, r2, #31
 800adb4:	d524      	bpl.n	800ae00 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800adb6:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800adb8:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800adba:	4835      	ldr	r0, [pc, #212]	; (800ae90 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800adbc:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800adc0:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800adc2:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800adc4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800adc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800adc8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800adcc:	4319      	orrs	r1, r3
 800adce:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800add0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800add4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800add8:	4648      	mov	r0, r9
 800adda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800adde:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800ade0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ade2:	05d5      	lsls	r5, r2, #23
 800ade4:	d5d1      	bpl.n	800ad8a <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ade6:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800adea:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800adee:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800adf0:	0550      	lsls	r0, r2, #21
 800adf2:	d5d1      	bpl.n	800ad98 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800adf4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800adf8:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800adfc:	61d8      	str	r0, [r3, #28]
 800adfe:	e7cb      	b.n	800ad98 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae00:	699a      	ldr	r2, [r3, #24]
 800ae02:	f042 0201 	orr.w	r2, r2, #1
 800ae06:	619a      	str	r2, [r3, #24]
 800ae08:	e7d5      	b.n	800adb6 <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae0a:	0595      	lsls	r5, r2, #22
 800ae0c:	d4c6      	bmi.n	800ad9c <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800ae0e:	f1b9 0f00 	cmp.w	r9, #0
 800ae12:	d1c8      	bne.n	800ada6 <I2C_IsErrorOccurred+0x66>
}
 800ae14:	4648      	mov	r0, r9
 800ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae1a:	f7fc fb7b 	bl	8007514 <HAL_GetTick>
 800ae1e:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae20:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae22:	42a8      	cmp	r0, r5
 800ae24:	d801      	bhi.n	800ae2a <I2C_IsErrorOccurred+0xea>
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	d19a      	bne.n	800ad60 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae2a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ae2c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae30:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800ae32:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae34:	040e      	lsls	r6, r1, #16
 800ae36:	d50d      	bpl.n	800ae54 <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800ae38:	0441      	lsls	r1, r0, #17
 800ae3a:	d40b      	bmi.n	800ae54 <I2C_IsErrorOccurred+0x114>
 800ae3c:	2a20      	cmp	r2, #32
 800ae3e:	d009      	beq.n	800ae54 <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae46:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ae48:	f7fc fb64 	bl	8007514 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae4c:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800ae4e:	4607      	mov	r7, r0
 800ae50:	e000      	b.n	800ae54 <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	699e      	ldr	r6, [r3, #24]
 800ae56:	f016 0620 	ands.w	r6, r6, #32
 800ae5a:	d181      	bne.n	800ad60 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae5c:	f7fc fb5a 	bl	8007514 <HAL_GetTick>
 800ae60:	1bc0      	subs	r0, r0, r7
 800ae62:	2819      	cmp	r0, #25
 800ae64:	d9f5      	bls.n	800ae52 <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae66:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800ae68:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800ae6c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae70:	f043 0320 	orr.w	r3, r3, #32
 800ae74:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ae76:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae7a:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae7c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800ae80:	e7e8      	b.n	800ae54 <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800ae82:	f1b9 0f00 	cmp.w	r9, #0
 800ae86:	f43f af78 	beq.w	800ad7a <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800ae8a:	2104      	movs	r1, #4
 800ae8c:	e7a8      	b.n	800ade0 <I2C_IsErrorOccurred+0xa0>
 800ae8e:	bf00      	nop
 800ae90:	fe00e800 	.word	0xfe00e800

0800ae94 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae9c:	e004      	b.n	800aea8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae9e:	f7ff ff4f 	bl	800ad40 <I2C_IsErrorOccurred>
 800aea2:	b950      	cbnz	r0, 800aeba <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800aea4:	1c6a      	adds	r2, r5, #1
 800aea6:	d10a      	bne.n	800aebe <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aea8:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeaa:	4632      	mov	r2, r6
 800aeac:	4629      	mov	r1, r5
 800aeae:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	079b      	lsls	r3, r3, #30
 800aeb4:	d5f3      	bpl.n	800ae9e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800aeb6:	2000      	movs	r0, #0
}
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800aeba:	2001      	movs	r0, #1
}
 800aebc:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aebe:	f7fc fb29 	bl	8007514 <HAL_GetTick>
 800aec2:	1b80      	subs	r0, r0, r6
 800aec4:	42a8      	cmp	r0, r5
 800aec6:	d801      	bhi.n	800aecc <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	d1ed      	bne.n	800aea8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aece:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aed0:	2200      	movs	r2, #0
        return HAL_ERROR;
 800aed2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aed4:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800aed6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aeda:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aedc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aee0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
 800aee6:	bf00      	nop

0800aee8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	4605      	mov	r5, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aef0:	e008      	b.n	800af04 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aef2:	f7ff ff25 	bl	800ad40 <I2C_IsErrorOccurred>
 800aef6:	b9d8      	cbnz	r0, 800af30 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aef8:	f7fc fb0c 	bl	8007514 <HAL_GetTick>
 800aefc:	1b80      	subs	r0, r0, r6
 800aefe:	42a0      	cmp	r0, r4
 800af00:	d809      	bhi.n	800af16 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800af02:	b144      	cbz	r4, 800af16 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af04:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af06:	4632      	mov	r2, r6
 800af08:	4621      	mov	r1, r4
 800af0a:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	069b      	lsls	r3, r3, #26
 800af10:	d5ef      	bpl.n	800aef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800af12:	2000      	movs	r0, #0
}
 800af14:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af18:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af1a:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800af1c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af1e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800af20:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af24:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af26:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af2a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800af30:	2001      	movs	r0, #1
}
 800af32:	bd70      	pop	{r4, r5, r6, pc}

0800af34 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af3c:	e00c      	b.n	800af58 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af3e:	f7ff feff 	bl	800ad40 <I2C_IsErrorOccurred>
 800af42:	b9e8      	cbnz	r0, 800af80 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	699a      	ldr	r2, [r3, #24]
 800af48:	0691      	lsls	r1, r2, #26
 800af4a:	d41b      	bmi.n	800af84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af4c:	f7fc fae2 	bl	8007514 <HAL_GetTick>
 800af50:	1b80      	subs	r0, r0, r6
 800af52:	42a8      	cmp	r0, r5
 800af54:	d809      	bhi.n	800af6a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800af56:	b145      	cbz	r5, 800af6a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af58:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af5a:	4632      	mov	r2, r6
 800af5c:	4629      	mov	r1, r5
 800af5e:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	075b      	lsls	r3, r3, #29
 800af64:	d5eb      	bpl.n	800af3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800af66:	2000      	movs	r0, #0
}
 800af68:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af6c:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800af6e:	2100      	movs	r1, #0
      return HAL_ERROR;
 800af70:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af72:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800af74:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af78:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af7a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800af80:	2001      	movs	r0, #1
}
 800af82:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	0752      	lsls	r2, r2, #29
 800af88:	d502      	bpl.n	800af90 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800af8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800af8c:	2a00      	cmp	r2, #0
 800af8e:	d1ea      	bne.n	800af66 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	f012 0210 	ands.w	r2, r2, #16
 800af96:	d012      	beq.n	800afbe <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af98:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800af9a:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af9c:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800af9e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afa0:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800afa2:	4808      	ldr	r0, [pc, #32]	; (800afc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afa4:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afa6:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	4002      	ands	r2, r0
        return HAL_ERROR;
 800afac:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800afae:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800afb0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800afb4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800afbc:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afbe:	6462      	str	r2, [r4, #68]	; 0x44
 800afc0:	e7ee      	b.n	800afa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800afc2:	bf00      	nop
 800afc4:	fe00e800 	.word	0xfe00e800

0800afc8 <I2C_RequestMemoryRead>:
{
 800afc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800afcc:	4c26      	ldr	r4, [pc, #152]	; (800b068 <I2C_RequestMemoryRead+0xa0>)
{
 800afce:	b083      	sub	sp, #12
 800afd0:	4698      	mov	r8, r3
 800afd2:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800afd4:	9400      	str	r4, [sp, #0]
{
 800afd6:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800afd8:	2300      	movs	r3, #0
 800afda:	fa5f f288 	uxtb.w	r2, r8
{
 800afde:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800afe2:	f7ff fe4d 	bl	800ac80 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afe6:	4628      	mov	r0, r5
 800afe8:	463a      	mov	r2, r7
 800afea:	4621      	mov	r1, r4
 800afec:	f7ff ff52 	bl	800ae94 <I2C_WaitOnTXISFlagUntilTimeout>
 800aff0:	b9e0      	cbnz	r0, 800b02c <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aff2:	f1b8 0f01 	cmp.w	r8, #1
 800aff6:	4606      	mov	r6, r0
 800aff8:	d10d      	bne.n	800b016 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800affa:	fa5f f389 	uxtb.w	r3, r9
 800affe:	682a      	ldr	r2, [r5, #0]
 800b000:	6293      	str	r3, [r2, #40]	; 0x28
 800b002:	e001      	b.n	800b008 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800b004:	1c61      	adds	r1, r4, #1
 800b006:	d116      	bne.n	800b036 <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b008:	6993      	ldr	r3, [r2, #24]
 800b00a:	065b      	lsls	r3, r3, #25
 800b00c:	d5fa      	bpl.n	800b004 <I2C_RequestMemoryRead+0x3c>
}
 800b00e:	4630      	mov	r0, r6
 800b010:	b003      	add	sp, #12
 800b012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b016:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800b01a:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b01c:	4621      	mov	r1, r4
 800b01e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b020:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b022:	463a      	mov	r2, r7
 800b024:	f7ff ff36 	bl	800ae94 <I2C_WaitOnTXISFlagUntilTimeout>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0e6      	beq.n	800affa <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800b02c:	2601      	movs	r6, #1
}
 800b02e:	4630      	mov	r0, r6
 800b030:	b003      	add	sp, #12
 800b032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b036:	f7fc fa6d 	bl	8007514 <HAL_GetTick>
 800b03a:	1bc0      	subs	r0, r0, r7
 800b03c:	4284      	cmp	r4, r0
 800b03e:	d302      	bcc.n	800b046 <I2C_RequestMemoryRead+0x7e>
 800b040:	b10c      	cbz	r4, 800b046 <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b042:	682a      	ldr	r2, [r5, #0]
 800b044:	e7e0      	b.n	800b008 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b046:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b048:	2120      	movs	r1, #32
    return HAL_ERROR;
 800b04a:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b04c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b04e:	430b      	orrs	r3, r1
}
 800b050:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800b052:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b056:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b058:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b05c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800b060:	b003      	add	sp, #12
 800b062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b066:	bf00      	nop
 800b068:	80002000 	.word	0x80002000

0800b06c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f000 80c1 	beq.w	800b1f4 <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b072:	4b61      	ldr	r3, [pc, #388]	; (800b1f8 <HAL_I2C_Init+0x18c>)
 800b074:	6802      	ldr	r2, [r0, #0]
 800b076:	4961      	ldr	r1, [pc, #388]	; (800b1fc <HAL_I2C_Init+0x190>)
{
 800b078:	b510      	push	{r4, lr}
 800b07a:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b07c:	4860      	ldr	r0, [pc, #384]	; (800b200 <HAL_I2C_Init+0x194>)
 800b07e:	429a      	cmp	r2, r3
 800b080:	bf18      	it	ne
 800b082:	4282      	cmpne	r2, r0
 800b084:	bf14      	ite	ne
 800b086:	2301      	movne	r3, #1
 800b088:	2300      	moveq	r3, #0
 800b08a:	428a      	cmp	r2, r1
 800b08c:	bf0c      	ite	eq
 800b08e:	2300      	moveq	r3, #0
 800b090:	f003 0301 	andne.w	r3, r3, #1
 800b094:	b11b      	cbz	r3, 800b09e <HAL_I2C_Init+0x32>
 800b096:	4b5b      	ldr	r3, [pc, #364]	; (800b204 <HAL_I2C_Init+0x198>)
 800b098:	429a      	cmp	r2, r3
 800b09a:	f040 80a5 	bne.w	800b1e8 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800b09e:	68a3      	ldr	r3, [r4, #8]
 800b0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a4:	f080 809a 	bcs.w	800b1dc <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800b0a8:	68e3      	ldr	r3, [r4, #12]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d855      	bhi.n	800b15c <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b0b6:	d15a      	bne.n	800b16e <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b0b8:	6963      	ldr	r3, [r4, #20]
 800b0ba:	2bff      	cmp	r3, #255	; 0xff
 800b0bc:	d85f      	bhi.n	800b17e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b0be:	69a3      	ldr	r3, [r4, #24]
 800b0c0:	2b07      	cmp	r3, #7
 800b0c2:	d864      	bhi.n	800b18e <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b0c4:	69e3      	ldr	r3, [r4, #28]
 800b0c6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800b0ca:	d169      	bne.n	800b1a0 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b0cc:	6a23      	ldr	r3, [r4, #32]
 800b0ce:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800b0d2:	d16e      	bne.n	800b1b2 <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0d4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b0d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d073      	beq.n	800b1c8 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800b0e0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0e2:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0e4:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b0ea:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0f0:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800b0f2:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b0f6:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800b0f8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b0fa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b102:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b104:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b106:	d065      	beq.n	800b1d4 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b108:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b10c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b10e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b110:	d102      	bne.n	800b118 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b112:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b116:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b118:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800b11a:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b11e:	493a      	ldr	r1, [pc, #232]	; (800b208 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b120:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b122:	4301      	orrs	r1, r0
 800b124:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b126:	68d9      	ldr	r1, [r3, #12]
 800b128:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800b12c:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b12e:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b132:	4302      	orrs	r2, r0
 800b134:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b138:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b13c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b13e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b140:	4301      	orrs	r1, r0
  return HAL_OK;
 800b142:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b144:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b146:	6819      	ldr	r1, [r3, #0]
 800b148:	f041 0101 	orr.w	r1, r1, #1
 800b14c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b14e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b150:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b154:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b156:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b15a:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800b15c:	f240 2117 	movw	r1, #535	; 0x217
 800b160:	482a      	ldr	r0, [pc, #168]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b162:	f7f9 fa67 	bl	8004634 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b16c:	d0a4      	beq.n	800b0b8 <HAL_I2C_Init+0x4c>
 800b16e:	f44f 7106 	mov.w	r1, #536	; 0x218
 800b172:	4826      	ldr	r0, [pc, #152]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b174:	f7f9 fa5e 	bl	8004634 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800b178:	6963      	ldr	r3, [r4, #20]
 800b17a:	2bff      	cmp	r3, #255	; 0xff
 800b17c:	d99f      	bls.n	800b0be <HAL_I2C_Init+0x52>
 800b17e:	f240 2119 	movw	r1, #537	; 0x219
 800b182:	4822      	ldr	r0, [pc, #136]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b184:	f7f9 fa56 	bl	8004634 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800b188:	69a3      	ldr	r3, [r4, #24]
 800b18a:	2b07      	cmp	r3, #7
 800b18c:	d99a      	bls.n	800b0c4 <HAL_I2C_Init+0x58>
 800b18e:	f240 211a 	movw	r1, #538	; 0x21a
 800b192:	481e      	ldr	r0, [pc, #120]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b194:	f7f9 fa4e 	bl	8004634 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800b198:	69e3      	ldr	r3, [r4, #28]
 800b19a:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800b19e:	d095      	beq.n	800b0cc <HAL_I2C_Init+0x60>
 800b1a0:	f240 211b 	movw	r1, #539	; 0x21b
 800b1a4:	4819      	ldr	r0, [pc, #100]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b1a6:	f7f9 fa45 	bl	8004634 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800b1aa:	6a23      	ldr	r3, [r4, #32]
 800b1ac:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800b1b0:	d090      	beq.n	800b0d4 <HAL_I2C_Init+0x68>
 800b1b2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800b1b6:	4815      	ldr	r0, [pc, #84]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b1b8:	f7f9 fa3c 	bl	8004634 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b1bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b1c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d18b      	bne.n	800b0e0 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800b1c8:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800b1ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b1ce:	f7fa fcdb 	bl	8005b88 <HAL_I2C_MspInit>
 800b1d2:	e785      	b.n	800b0e0 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b1d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1d8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b1da:	e79d      	b.n	800b118 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800b1dc:	f240 2116 	movw	r1, #534	; 0x216
 800b1e0:	480a      	ldr	r0, [pc, #40]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b1e2:	f7f9 fa27 	bl	8004634 <assert_failed>
 800b1e6:	e75f      	b.n	800b0a8 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b1e8:	f240 2115 	movw	r1, #533	; 0x215
 800b1ec:	4807      	ldr	r0, [pc, #28]	; (800b20c <HAL_I2C_Init+0x1a0>)
 800b1ee:	f7f9 fa21 	bl	8004634 <assert_failed>
 800b1f2:	e754      	b.n	800b09e <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800b1f4:	2001      	movs	r0, #1
}
 800b1f6:	4770      	bx	lr
 800b1f8:	40005400 	.word	0x40005400
 800b1fc:	40005c00 	.word	0x40005c00
 800b200:	40005800 	.word	0x40005800
 800b204:	40006000 	.word	0x40006000
 800b208:	02008000 	.word	0x02008000
 800b20c:	0802b490 	.word	0x0802b490

0800b210 <HAL_I2C_Master_Transmit>:
{
 800b210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b214:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b216:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b21a:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b21c:	2b20      	cmp	r3, #32
{
 800b21e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b220:	d16d      	bne.n	800b2fe <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800b222:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b226:	4604      	mov	r4, r0
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d068      	beq.n	800b2fe <HAL_I2C_Master_Transmit+0xee>
 800b22c:	2301      	movs	r3, #1
 800b22e:	460f      	mov	r7, r1
 800b230:	4691      	mov	r9, r2
 800b232:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b236:	f7fc f96d 	bl	8007514 <HAL_GetTick>
 800b23a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b23c:	e004      	b.n	800b248 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b23e:	f7fc f969 	bl	8007514 <HAL_GetTick>
 800b242:	1b80      	subs	r0, r0, r6
 800b244:	2819      	cmp	r0, #25
 800b246:	d85e      	bhi.n	800b306 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	6999      	ldr	r1, [r3, #24]
 800b24c:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800b250:	d1f5      	bne.n	800b23e <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b252:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800b254:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800b258:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b25a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b25e:	2310      	movs	r3, #16
 800b260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b264:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b266:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b26a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	2bff      	cmp	r3, #255	; 0xff
 800b270:	d86d      	bhi.n	800b34e <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800b272:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b274:	4639      	mov	r1, r7
 800b276:	4b48      	ldr	r3, [pc, #288]	; (800b398 <HAL_I2C_Master_Transmit+0x188>)
 800b278:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800b27a:	b292      	uxth	r2, r2
 800b27c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	9300      	str	r3, [sp, #0]
 800b282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b286:	f7ff fcfb 	bl	800ac80 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b28a:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b28e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800b292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b294:	4632      	mov	r2, r6
 800b296:	4629      	mov	r1, r5
 800b298:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	b1eb      	cbz	r3, 800b2da <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b29e:	f7ff fdf9 	bl	800ae94 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d174      	bne.n	800b390 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b2a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2a8:	6821      	ldr	r1, [r4, #0]
 800b2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800b2ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b2b0:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800b2b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b2b4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b2b6:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b2b8:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800b2ba:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b2bc:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b2be:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b2c0:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b2c4:	b292      	uxth	r2, r2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e3      	bne.n	800b292 <HAL_I2C_Master_Transmit+0x82>
 800b2ca:	bb6a      	cbnz	r2, 800b328 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800b2cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e1      	bne.n	800b29e <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2da:	f7ff fe05 	bl	800aee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d156      	bne.n	800b390 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b2e6:	4d2d      	ldr	r5, [pc, #180]	; (800b39c <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2e8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	402a      	ands	r2, r5
 800b2ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b2f0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b2f4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b2f8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b2fc:	e000      	b.n	800b300 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800b2fe:	2002      	movs	r0, #2
}
 800b300:	b003      	add	sp, #12
 800b302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b306:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b308:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b30a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b30c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b30e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b310:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b314:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b316:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b31a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b31e:	b003      	add	sp, #12
 800b320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b324:	1c6a      	adds	r2, r5, #1
 800b326:	d11d      	bne.n	800b364 <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b328:	698b      	ldr	r3, [r1, #24]
 800b32a:	061b      	lsls	r3, r3, #24
 800b32c:	d5fa      	bpl.n	800b324 <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b32e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b330:	b29b      	uxth	r3, r3
 800b332:	2bff      	cmp	r3, #255	; 0xff
 800b334:	d91f      	bls.n	800b376 <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b336:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b33a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b33e:	22ff      	movs	r2, #255	; 0xff
 800b340:	4639      	mov	r1, r7
 800b342:	4620      	mov	r0, r4
 800b344:	f8cd 8000 	str.w	r8, [sp]
 800b348:	f7ff fc9a 	bl	800ac80 <I2C_TransferConfig>
 800b34c:	e7a1      	b.n	800b292 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b34e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b350:	4b11      	ldr	r3, [pc, #68]	; (800b398 <HAL_I2C_Master_Transmit+0x188>)
 800b352:	4639      	mov	r1, r7
 800b354:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b356:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b35e:	f7ff fc8f 	bl	800ac80 <I2C_TransferConfig>
 800b362:	e792      	b.n	800b28a <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b364:	f7fc f8d6 	bl	8007514 <HAL_GetTick>
 800b368:	1b80      	subs	r0, r0, r6
 800b36a:	4285      	cmp	r5, r0
 800b36c:	d3cb      	bcc.n	800b306 <HAL_I2C_Master_Transmit+0xf6>
 800b36e:	2d00      	cmp	r5, #0
 800b370:	d0c9      	beq.n	800b306 <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b372:	6821      	ldr	r1, [r4, #0]
 800b374:	e7d8      	b.n	800b328 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b376:	f8cd 8000 	str.w	r8, [sp]
 800b37a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b37e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b380:	4639      	mov	r1, r7
 800b382:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800b384:	b292      	uxth	r2, r2
 800b386:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b388:	b2d2      	uxtb	r2, r2
 800b38a:	f7ff fc79 	bl	800ac80 <I2C_TransferConfig>
 800b38e:	e780      	b.n	800b292 <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800b390:	2001      	movs	r0, #1
}
 800b392:	b003      	add	sp, #12
 800b394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b398:	80002000 	.word	0x80002000
 800b39c:	fe00e800 	.word	0xfe00e800

0800b3a0 <HAL_I2C_Master_Receive>:
{
 800b3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b3aa:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3ac:	2b20      	cmp	r3, #32
{
 800b3ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3b0:	f040 8088 	bne.w	800b4c4 <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800b3b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	f000 8082 	beq.w	800b4c4 <HAL_I2C_Master_Receive+0x124>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	460f      	mov	r7, r1
 800b3c4:	4691      	mov	r9, r2
 800b3c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b3ca:	f7fc f8a3 	bl	8007514 <HAL_GetTick>
 800b3ce:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3d0:	e004      	b.n	800b3dc <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3d2:	f7fc f89f 	bl	8007514 <HAL_GetTick>
 800b3d6:	1b80      	subs	r0, r0, r6
 800b3d8:	2819      	cmp	r0, #25
 800b3da:	d87e      	bhi.n	800b4da <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	6999      	ldr	r1, [r3, #24]
 800b3e0:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800b3e4:	d1f5      	bne.n	800b3d2 <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3e6:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800b3e8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800b3ec:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b3f2:	2310      	movs	r3, #16
 800b3f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3f8:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b3fa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b400:	b29b      	uxth	r3, r3
 800b402:	2bff      	cmp	r3, #255	; 0xff
 800b404:	d878      	bhi.n	800b4f8 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800b406:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b408:	4639      	mov	r1, r7
 800b40a:	4b49      	ldr	r3, [pc, #292]	; (800b530 <HAL_I2C_Master_Receive+0x190>)
 800b40c:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800b40e:	b292      	uxth	r2, r2
 800b410:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b41a:	f7ff fc31 	bl	800ac80 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b41e:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b422:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800b426:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b428:	4632      	mov	r2, r6
 800b42a:	4629      	mov	r1, r5
 800b42c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b42e:	b29b      	uxth	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	d035      	beq.n	800b4a0 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b434:	f7ff fd7e 	bl	800af34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d175      	bne.n	800b528 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b43c:	6822      	ldr	r2, [r4, #0]
 800b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b442:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b444:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b446:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b448:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b44a:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b44c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800b44e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b450:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b452:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b454:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b456:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b458:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b45a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b45c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1e1      	bne.n	800b426 <HAL_I2C_Master_Receive+0x86>
 800b462:	2a00      	cmp	r2, #0
 800b464:	d0df      	beq.n	800b426 <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	e001      	b.n	800b46e <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800b46a:	1c69      	adds	r1, r5, #1
 800b46c:	d12e      	bne.n	800b4cc <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b46e:	6993      	ldr	r3, [r2, #24]
 800b470:	061b      	lsls	r3, r3, #24
 800b472:	d5fa      	bpl.n	800b46a <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b474:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b476:	b29b      	uxth	r3, r3
 800b478:	2bff      	cmp	r3, #255	; 0xff
 800b47a:	d948      	bls.n	800b50e <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b47c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b480:	22ff      	movs	r2, #255	; 0xff
 800b482:	4639      	mov	r1, r7
 800b484:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b486:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b48a:	f8cd 8000 	str.w	r8, [sp]
 800b48e:	f7ff fbf7 	bl	800ac80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b492:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b494:	4632      	mov	r2, r6
 800b496:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800b498:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b49a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1c9      	bne.n	800b434 <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4a0:	f7ff fd22 	bl	800aee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d13f      	bne.n	800b528 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b4ac:	4d21      	ldr	r5, [pc, #132]	; (800b534 <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4ae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	402a      	ands	r2, r5
 800b4b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b4b6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b4ba:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b4be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b4c2:	e000      	b.n	800b4c6 <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800b4c4:	2002      	movs	r0, #2
}
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4cc:	f7fc f822 	bl	8007514 <HAL_GetTick>
 800b4d0:	1b80      	subs	r0, r0, r6
 800b4d2:	4285      	cmp	r5, r0
 800b4d4:	d301      	bcc.n	800b4da <HAL_I2C_Master_Receive+0x13a>
 800b4d6:	2d00      	cmp	r5, #0
 800b4d8:	d1c5      	bne.n	800b466 <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4da:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b4dc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4de:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b4e0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4e2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b4e4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4e8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b4ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800b4f2:	b003      	add	sp, #12
 800b4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4f8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <HAL_I2C_Master_Receive+0x190>)
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b500:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b508:	f7ff fbba 	bl	800ac80 <I2C_TransferConfig>
 800b50c:	e787      	b.n	800b41e <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b50e:	f8cd 8000 	str.w	r8, [sp]
 800b512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b516:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b518:	4639      	mov	r1, r7
 800b51a:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800b51c:	b292      	uxth	r2, r2
 800b51e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	f7ff fbad 	bl	800ac80 <I2C_TransferConfig>
 800b526:	e77e      	b.n	800b426 <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800b528:	2001      	movs	r0, #1
}
 800b52a:	b003      	add	sp, #12
 800b52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b530:	80002400 	.word	0x80002400
 800b534:	fe00e800 	.word	0xfe00e800

0800b538 <HAL_I2C_Mem_Read>:
{
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b53e:	3b01      	subs	r3, #1
{
 800b540:	b083      	sub	sp, #12
 800b542:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b544:	2b01      	cmp	r3, #1
{
 800b546:	4688      	mov	r8, r1
 800b548:	4691      	mov	r9, r2
 800b54a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b54e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800b550:	d904      	bls.n	800b55c <HAL_I2C_Mem_Read+0x24>
 800b552:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800b556:	486e      	ldr	r0, [pc, #440]	; (800b710 <HAL_I2C_Mem_Read+0x1d8>)
 800b558:	f7f9 f86c 	bl	8004634 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b55c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800b560:	2b20      	cmp	r3, #32
 800b562:	d17f      	bne.n	800b664 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800b564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b566:	2b00      	cmp	r3, #0
 800b568:	d075      	beq.n	800b656 <HAL_I2C_Mem_Read+0x11e>
 800b56a:	f1ba 0f00 	cmp.w	sl, #0
 800b56e:	d072      	beq.n	800b656 <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800b570:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800b574:	2b01      	cmp	r3, #1
 800b576:	d075      	beq.n	800b664 <HAL_I2C_Mem_Read+0x12c>
 800b578:	2301      	movs	r3, #1
 800b57a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b57e:	f7fb ffc9 	bl	8007514 <HAL_GetTick>
 800b582:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b584:	e004      	b.n	800b590 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b586:	f7fb ffc5 	bl	8007514 <HAL_GetTick>
 800b58a:	1b80      	subs	r0, r0, r6
 800b58c:	2819      	cmp	r0, #25
 800b58e:	d874      	bhi.n	800b67a <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800b598:	d1f5      	bne.n	800b586 <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800b59a:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b59c:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800b59e:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5a2:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800b5a4:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5a6:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5ae:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b5b2:	2140      	movs	r1, #64	; 0x40
 800b5b4:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5b8:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5ba:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800b5be:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5c2:	f7ff fd01 	bl	800afc8 <I2C_RequestMemoryRead>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f040 8083 	bne.w	800b6d2 <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5cc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	2bff      	cmp	r3, #255	; 0xff
 800b5d2:	f240 808e 	bls.w	800b6f2 <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5d6:	4b4f      	ldr	r3, [pc, #316]	; (800b714 <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5d8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5da:	4641      	mov	r1, r8
 800b5dc:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5de:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5e6:	f7ff fb4b 	bl	800ac80 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5ea:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5ec:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5f0:	682a      	ldr	r2, [r5, #0]
 800b5f2:	e001      	b.n	800b5f8 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800b5f4:	1c63      	adds	r3, r4, #1
 800b5f6:	d139      	bne.n	800b66c <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5f8:	6993      	ldr	r3, [r2, #24]
 800b5fa:	0758      	lsls	r0, r3, #29
 800b5fc:	d5fa      	bpl.n	800b5f4 <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b600:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b602:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b604:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800b606:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800b608:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b60a:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800b60c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800b60e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b610:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b612:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b614:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b616:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b618:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b61a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b61c:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b61e:	b90b      	cbnz	r3, 800b624 <HAL_I2C_Mem_Read+0xec>
 800b620:	2a00      	cmp	r2, #0
 800b622:	d140      	bne.n	800b6a6 <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800b624:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b626:	b29b      	uxth	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e1      	bne.n	800b5f0 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b62c:	4632      	mov	r2, r6
 800b62e:	4621      	mov	r1, r4
 800b630:	4628      	mov	r0, r5
 800b632:	f7ff fc59 	bl	800aee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b636:	2800      	cmp	r0, #0
 800b638:	d168      	bne.n	800b70c <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800b63e:	4c36      	ldr	r4, [pc, #216]	; (800b718 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b640:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	4022      	ands	r2, r4
 800b646:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b648:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b64c:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b650:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800b654:	e003      	b.n	800b65e <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b656:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800b65a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b65c:	646b      	str	r3, [r5, #68]	; 0x44
}
 800b65e:	b003      	add	sp, #12
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800b664:	2002      	movs	r0, #2
}
 800b666:	b003      	add	sp, #12
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b66c:	f7fb ff52 	bl	8007514 <HAL_GetTick>
 800b670:	1b80      	subs	r0, r0, r6
 800b672:	4284      	cmp	r4, r0
 800b674:	d301      	bcc.n	800b67a <HAL_I2C_Mem_Read+0x142>
 800b676:	2c00      	cmp	r4, #0
 800b678:	d1ba      	bne.n	800b5f0 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b67a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b67c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b67e:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b680:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b682:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800b684:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b688:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b68a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b68e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800b692:	b003      	add	sp, #12
 800b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b698:	f7fb ff3c 	bl	8007514 <HAL_GetTick>
 800b69c:	1b80      	subs	r0, r0, r6
 800b69e:	4284      	cmp	r4, r0
 800b6a0:	d3eb      	bcc.n	800b67a <HAL_I2C_Mem_Read+0x142>
 800b6a2:	2c00      	cmp	r4, #0
 800b6a4:	d0e9      	beq.n	800b67a <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6a6:	682a      	ldr	r2, [r5, #0]
 800b6a8:	e001      	b.n	800b6ae <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800b6aa:	1c61      	adds	r1, r4, #1
 800b6ac:	d1f4      	bne.n	800b698 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6ae:	6993      	ldr	r3, [r2, #24]
 800b6b0:	061b      	lsls	r3, r3, #24
 800b6b2:	d5fa      	bpl.n	800b6aa <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6b4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	2bff      	cmp	r3, #255	; 0xff
 800b6ba:	d90e      	bls.n	800b6da <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6bc:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b6c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	9700      	str	r7, [sp, #0]
 800b6cc:	f7ff fad8 	bl	800ac80 <I2C_TransferConfig>
 800b6d0:	e7a8      	b.n	800b624 <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800b6d2:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800b6d4:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800b6d8:	e7c1      	b.n	800b65e <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6da:	9700      	str	r7, [sp, #0]
 800b6dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800b6e0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6e2:	4641      	mov	r1, r8
 800b6e4:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800b6e6:	b292      	uxth	r2, r2
 800b6e8:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	f7ff fac8 	bl	800ac80 <I2C_TransferConfig>
 800b6f0:	e798      	b.n	800b624 <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800b6f2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6f4:	4641      	mov	r1, r8
 800b6f6:	4b07      	ldr	r3, [pc, #28]	; (800b714 <HAL_I2C_Mem_Read+0x1dc>)
 800b6f8:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800b6fa:	b292      	uxth	r2, r2
 800b6fc:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6fe:	b2d2      	uxtb	r2, r2
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b706:	f7ff fabb 	bl	800ac80 <I2C_TransferConfig>
 800b70a:	e76e      	b.n	800b5ea <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800b70c:	2001      	movs	r0, #1
 800b70e:	e7a6      	b.n	800b65e <HAL_I2C_Mem_Read+0x126>
 800b710:	0802b490 	.word	0x0802b490
 800b714:	80002400 	.word	0x80002400
 800b718:	fe00e800 	.word	0xfe00e800

0800b71c <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b71c:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800b71e:	6802      	ldr	r2, [r0, #0]
{
 800b720:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b722:	4d23      	ldr	r5, [pc, #140]	; (800b7b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800b724:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b726:	4e23      	ldr	r6, [pc, #140]	; (800b7b4 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800b728:	429a      	cmp	r2, r3
 800b72a:	bf18      	it	ne
 800b72c:	42aa      	cmpne	r2, r5
{
 800b72e:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b730:	bf14      	ite	ne
 800b732:	2301      	movne	r3, #1
 800b734:	2300      	moveq	r3, #0
 800b736:	42b2      	cmp	r2, r6
 800b738:	bf0c      	ite	eq
 800b73a:	2300      	moveq	r3, #0
 800b73c:	f003 0301 	andne.w	r3, r3, #1
 800b740:	b113      	cbz	r3, 800b748 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800b742:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800b744:	429a      	cmp	r2, r3
 800b746:	d12c      	bne.n	800b7a2 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800b748:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800b74c:	d124      	bne.n	800b798 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b74e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b752:	2b20      	cmp	r3, #32
 800b754:	b2de      	uxtb	r6, r3
 800b756:	d11d      	bne.n	800b794 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b758:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d019      	beq.n	800b794 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b760:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b762:	2224      	movs	r2, #36	; 0x24
 800b764:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	f022 0201 	bic.w	r2, r2, #1
 800b76e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b77c:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800b77e:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800b780:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	f042 0201 	orr.w	r2, r2, #1
 800b788:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b78a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b78e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b792:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b794:	2002      	movs	r0, #2
}
 800b796:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800b798:	215f      	movs	r1, #95	; 0x5f
 800b79a:	4808      	ldr	r0, [pc, #32]	; (800b7bc <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800b79c:	f7f8 ff4a 	bl	8004634 <assert_failed>
 800b7a0:	e7d5      	b.n	800b74e <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7a2:	215e      	movs	r1, #94	; 0x5e
 800b7a4:	4805      	ldr	r0, [pc, #20]	; (800b7bc <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800b7a6:	f7f8 ff45 	bl	8004634 <assert_failed>
 800b7aa:	e7cd      	b.n	800b748 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800b7ac:	40005400 	.word	0x40005400
 800b7b0:	40005800 	.word	0x40005800
 800b7b4:	40005c00 	.word	0x40005c00
 800b7b8:	40006000 	.word	0x40006000
 800b7bc:	0802b4c8 	.word	0x0802b4c8

0800b7c0 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7c0:	4b22      	ldr	r3, [pc, #136]	; (800b84c <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800b7c2:	6802      	ldr	r2, [r0, #0]
{
 800b7c4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7c6:	4d22      	ldr	r5, [pc, #136]	; (800b850 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800b7c8:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7ca:	4e22      	ldr	r6, [pc, #136]	; (800b854 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bf18      	it	ne
 800b7d0:	42aa      	cmpne	r2, r5
{
 800b7d2:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7d4:	bf14      	ite	ne
 800b7d6:	2301      	movne	r3, #1
 800b7d8:	2300      	moveq	r3, #0
 800b7da:	42b2      	cmp	r2, r6
 800b7dc:	bf0c      	ite	eq
 800b7de:	2300      	moveq	r3, #0
 800b7e0:	f003 0301 	andne.w	r3, r3, #1
 800b7e4:	b113      	cbz	r3, 800b7ec <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800b7e6:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d12a      	bne.n	800b842 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800b7ec:	2d0f      	cmp	r5, #15
 800b7ee:	d823      	bhi.n	800b838 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	b2de      	uxtb	r6, r3
 800b7f8:	d11c      	bne.n	800b834 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d018      	beq.n	800b834 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b802:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b804:	2224      	movs	r2, #36	; 0x24
 800b806:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f022 0201 	bic.w	r2, r2, #1
 800b810:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b812:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b814:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b818:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b81c:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800b81e:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800b820:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	f042 0201 	orr.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b82a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b82e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b832:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b834:	2002      	movs	r0, #2
}
 800b836:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800b838:	218d      	movs	r1, #141	; 0x8d
 800b83a:	4808      	ldr	r0, [pc, #32]	; (800b85c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800b83c:	f7f8 fefa 	bl	8004634 <assert_failed>
 800b840:	e7d6      	b.n	800b7f0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b842:	218c      	movs	r1, #140	; 0x8c
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800b846:	f7f8 fef5 	bl	8004634 <assert_failed>
 800b84a:	e7cf      	b.n	800b7ec <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800b84c:	40005400 	.word	0x40005400
 800b850:	40005800 	.word	0x40005800
 800b854:	40005c00 	.word	0x40005c00
 800b858:	40006000 	.word	0x40006000
 800b85c:	0802b4c8 	.word	0x0802b4c8

0800b860 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b860:	2800      	cmp	r0, #0
 800b862:	d04c      	beq.n	800b8fe <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800b864:	6802      	ldr	r2, [r0, #0]
{
 800b866:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800b868:	4b26      	ldr	r3, [pc, #152]	; (800b904 <HAL_IWDG_Init+0xa4>)
 800b86a:	4604      	mov	r4, r0
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d003      	beq.n	800b878 <HAL_IWDG_Init+0x18>
 800b870:	21b5      	movs	r1, #181	; 0xb5
 800b872:	4825      	ldr	r0, [pc, #148]	; (800b908 <HAL_IWDG_Init+0xa8>)
 800b874:	f7f8 fede 	bl	8004634 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800b878:	6863      	ldr	r3, [r4, #4]
 800b87a:	2b06      	cmp	r3, #6
 800b87c:	d835      	bhi.n	800b8ea <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800b87e:	68a3      	ldr	r3, [r4, #8]
 800b880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b884:	d22c      	bcs.n	800b8e0 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800b886:	68e3      	ldr	r3, [r4, #12]
 800b888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b88c:	d223      	bcs.n	800b8d6 <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b88e:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b892:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b894:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800b898:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b89a:	f245 5055 	movw	r0, #21845	; 0x5555
 800b89e:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b8a0:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b8a2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b8a4:	f7fb fe36 	bl	8007514 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b8a8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b8aa:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	0751      	lsls	r1, r2, #29
 800b8b0:	d00a      	beq.n	800b8c8 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b8b2:	f7fb fe2f 	bl	8007514 <HAL_GetTick>
 800b8b6:	1b43      	subs	r3, r0, r5
 800b8b8:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b8ba:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b8bc:	d9f6      	bls.n	800b8ac <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b8be:	68da      	ldr	r2, [r3, #12]
 800b8c0:	0752      	lsls	r2, r2, #29
 800b8c2:	d0f3      	beq.n	800b8ac <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800b8c4:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b8c8:	6919      	ldr	r1, [r3, #16]
 800b8ca:	68e2      	ldr	r2, [r4, #12]
 800b8cc:	4291      	cmp	r1, r2
 800b8ce:	d011      	beq.n	800b8f4 <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800b8d0:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b8d2:	611a      	str	r2, [r3, #16]
}
 800b8d4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800b8d6:	21b8      	movs	r1, #184	; 0xb8
 800b8d8:	480b      	ldr	r0, [pc, #44]	; (800b908 <HAL_IWDG_Init+0xa8>)
 800b8da:	f7f8 feab 	bl	8004634 <assert_failed>
 800b8de:	e7d6      	b.n	800b88e <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800b8e0:	21b7      	movs	r1, #183	; 0xb7
 800b8e2:	4809      	ldr	r0, [pc, #36]	; (800b908 <HAL_IWDG_Init+0xa8>)
 800b8e4:	f7f8 fea6 	bl	8004634 <assert_failed>
 800b8e8:	e7cd      	b.n	800b886 <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800b8ea:	21b6      	movs	r1, #182	; 0xb6
 800b8ec:	4806      	ldr	r0, [pc, #24]	; (800b908 <HAL_IWDG_Init+0xa8>)
 800b8ee:	f7f8 fea1 	bl	8004634 <assert_failed>
 800b8f2:	e7c4      	b.n	800b87e <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b8f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800b8f8:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b8fa:	601a      	str	r2, [r3, #0]
}
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b8fe:	2001      	movs	r0, #1
}
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	40003000 	.word	0x40003000
 800b908:	0802b504 	.word	0x0802b504

0800b90c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b90c:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b90e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800b912:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	601a      	str	r2, [r3, #0]
}
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop

0800b91c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91e:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b920:	2800      	cmp	r0, #0
 800b922:	f000 809d 	beq.w	800ba60 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800b926:	6804      	ldr	r4, [r0, #0]
 800b928:	4605      	mov	r5, r0
 800b92a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800b92e:	d003      	beq.n	800b938 <HAL_PCD_Init+0x1c>
 800b930:	4b4f      	ldr	r3, [pc, #316]	; (800ba70 <HAL_PCD_Init+0x154>)
 800b932:	429c      	cmp	r4, r3
 800b934:	f040 8081 	bne.w	800ba3a <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b938:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800b93c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 8086 	beq.w	800ba52 <HAL_PCD_Init+0x136>
 800b946:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b948:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b94a:	462e      	mov	r6, r5
 800b94c:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800b94e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b954:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b956:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800b95a:	bf08      	it	eq
 800b95c:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800b95e:	f006 fe87 	bl	8012670 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b962:	f856 eb10 	ldr.w	lr, [r6], #16
 800b966:	46b4      	mov	ip, r6
 800b968:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b96c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b96e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b974:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b978:	e884 0003 	stmia.w	r4, {r0, r1}
 800b97c:	4670      	mov	r0, lr
 800b97e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800b982:	f006 fdb5 	bl	80124f0 <USB_CoreInit>
 800b986:	4604      	mov	r4, r0
 800b988:	b130      	cbz	r0, 800b998 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800b98a:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b98c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800b98e:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b990:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800b994:	b00b      	add	sp, #44	; 0x2c
 800b996:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b998:	4601      	mov	r1, r0
 800b99a:	6828      	ldr	r0, [r5, #0]
 800b99c:	f006 fe70 	bl	8012680 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9a0:	6868      	ldr	r0, [r5, #4]
 800b9a2:	b358      	cbz	r0, 800b9fc <HAL_PCD_Init+0xe0>
 800b9a4:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b9a6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b9aa:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800b9ac:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9b0:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800b9b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800b9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b9bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9c0:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800b9c4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9c8:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b9ca:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800b9ce:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b9d0:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9d4:	d3ea      	bcc.n	800b9ac <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9dc:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800b9de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800b9e2:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9e6:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800b9e8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9ec:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b9ee:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b9f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b9f6:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9fa:	d3ed      	bcc.n	800b9d8 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b9fc:	466c      	mov	r4, sp
 800b9fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ba00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ba04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba06:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ba0a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba0e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ba12:	6828      	ldr	r0, [r5, #0]
 800ba14:	f006 feb8 	bl	8012788 <USB_DevInit>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d1b5      	bne.n	800b98a <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800ba1e:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800ba20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800ba22:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800ba26:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800ba28:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800ba2c:	d01c      	beq.n	800ba68 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800ba2e:	6828      	ldr	r0, [r5, #0]
 800ba30:	f007 fa72 	bl	8012f18 <USB_DevDisconnect>
}
 800ba34:	4620      	mov	r0, r4
 800ba36:	b00b      	add	sp, #44	; 0x2c
 800ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800ba3a:	2187      	movs	r1, #135	; 0x87
 800ba3c:	480d      	ldr	r0, [pc, #52]	; (800ba74 <HAL_PCD_Init+0x158>)
 800ba3e:	f7f8 fdf9 	bl	8004634 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ba42:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800ba46:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ba48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f47f af7a 	bne.w	800b946 <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800ba52:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800ba54:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800ba58:	f017 f890 	bl	8022b7c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800ba5c:	6828      	ldr	r0, [r5, #0]
 800ba5e:	e773      	b.n	800b948 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800ba60:	2401      	movs	r4, #1
}
 800ba62:	4620      	mov	r0, r4
 800ba64:	b00b      	add	sp, #44	; 0x2c
 800ba66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f000 fcc7 	bl	800c3fc <HAL_PCDEx_ActivateLPM>
 800ba6e:	e7de      	b.n	800ba2e <HAL_PCD_Init+0x112>
 800ba70:	40040000 	.word	0x40040000
 800ba74:	0802b540 	.word	0x0802b540

0800ba78 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800ba78:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d00f      	beq.n	800baa0 <HAL_PCD_Start+0x28>
 800ba80:	2301      	movs	r3, #1
{
 800ba82:	b510      	push	{r4, lr}
 800ba84:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800ba86:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800ba88:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800ba8c:	f006 fde8 	bl	8012660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	f007 fa31 	bl	8012ef8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ba96:	2300      	movs	r3, #0

  return HAL_OK;
 800ba98:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ba9a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800ba9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800baa0:	2002      	movs	r0, #2
}
 800baa2:	4770      	bx	lr

0800baa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800baa8:	6807      	ldr	r7, [r0, #0]
{
 800baaa:	b089      	sub	sp, #36	; 0x24
 800baac:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800baae:	4638      	mov	r0, r7
 800bab0:	f007 fa70 	bl	8012f94 <USB_GetMode>
 800bab4:	b110      	cbz	r0, 800babc <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800bab6:	b009      	add	sp, #36	; 0x24
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800babc:	4683      	mov	fp, r0
 800babe:	6820      	ldr	r0, [r4, #0]
 800bac0:	f007 fa3a 	bl	8012f38 <USB_ReadInterrupts>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d0f6      	beq.n	800bab6 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bac8:	6820      	ldr	r0, [r4, #0]
 800baca:	f007 fa35 	bl	8012f38 <USB_ReadInterrupts>
 800bace:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bad2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bad4:	d003      	beq.n	800bade <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bad6:	6943      	ldr	r3, [r0, #20]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bade:	f007 fa2b 	bl	8012f38 <USB_ReadInterrupts>
 800bae2:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bae6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bae8:	d012      	beq.n	800bb10 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800baea:	6983      	ldr	r3, [r0, #24]
 800baec:	f023 0310 	bic.w	r3, r3, #16
 800baf0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800baf2:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800baf4:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800baf8:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	f000 8253 	beq.w	800bfa8 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800bb02:	2b06      	cmp	r3, #6
 800bb04:	f000 81b1 	beq.w	800be6a <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bb08:	6983      	ldr	r3, [r0, #24]
 800bb0a:	f043 0310 	orr.w	r3, r3, #16
 800bb0e:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bb10:	f007 fa12 	bl	8012f38 <USB_ReadInterrupts>
 800bb14:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bb18:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bb1a:	f040 80cf 	bne.w	800bcbc <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bb1e:	f007 fa0b 	bl	8012f38 <USB_ReadInterrupts>
 800bb22:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bb26:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bb28:	d175      	bne.n	800bc16 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bb2a:	f007 fa05 	bl	8012f38 <USB_ReadInterrupts>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	db5d      	blt.n	800bbee <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bb32:	6820      	ldr	r0, [r4, #0]
 800bb34:	f007 fa00 	bl	8012f38 <USB_ReadInterrupts>
 800bb38:	0500      	lsls	r0, r0, #20
 800bb3a:	d44d      	bmi.n	800bbd8 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800bb3c:	6820      	ldr	r0, [r4, #0]
 800bb3e:	f007 f9fb 	bl	8012f38 <USB_ReadInterrupts>
 800bb42:	0102      	lsls	r2, r0, #4
 800bb44:	d514      	bpl.n	800bb70 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800bb46:	6822      	ldr	r2, [r4, #0]
 800bb48:	6953      	ldr	r3, [r2, #20]
 800bb4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb4e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800bb50:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f040 8172 	bne.w	800be3e <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800bb5a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bb5c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800bb5e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800bb62:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800bb64:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800bb68:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bb6c:	f017 f974 	bl	8022e58 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	f007 f9e1 	bl	8012f38 <USB_ReadInterrupts>
 800bb76:	04c3      	lsls	r3, r0, #19
 800bb78:	f100 8116 	bmi.w	800bda8 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bb7c:	6820      	ldr	r0, [r4, #0]
 800bb7e:	f007 f9db 	bl	8012f38 <USB_ReadInterrupts>
 800bb82:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800bb86:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bb88:	f040 80f7 	bne.w	800bd7a <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bb8c:	f007 f9d4 	bl	8012f38 <USB_ReadInterrupts>
 800bb90:	0707      	lsls	r7, r0, #28
 800bb92:	f100 80e9 	bmi.w	800bd68 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bb96:	6820      	ldr	r0, [r4, #0]
 800bb98:	f007 f9ce 	bl	8012f38 <USB_ReadInterrupts>
 800bb9c:	02c6      	lsls	r6, r0, #11
 800bb9e:	f100 80d9 	bmi.w	800bd54 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bba2:	6820      	ldr	r0, [r4, #0]
 800bba4:	f007 f9c8 	bl	8012f38 <USB_ReadInterrupts>
 800bba8:	0285      	lsls	r5, r0, #10
 800bbaa:	f100 80c9 	bmi.w	800bd40 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bbae:	6820      	ldr	r0, [r4, #0]
 800bbb0:	f007 f9c2 	bl	8012f38 <USB_ReadInterrupts>
 800bbb4:	0040      	lsls	r0, r0, #1
 800bbb6:	f100 80ba 	bmi.w	800bd2e <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bbba:	6820      	ldr	r0, [r4, #0]
 800bbbc:	f007 f9bc 	bl	8012f38 <USB_ReadInterrupts>
 800bbc0:	0741      	lsls	r1, r0, #29
 800bbc2:	f57f af78 	bpl.w	800bab6 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bbca:	076a      	lsls	r2, r5, #29
 800bbcc:	f100 820d 	bmi.w	800bfea <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	432a      	orrs	r2, r5
 800bbd4:	605a      	str	r2, [r3, #4]
 800bbd6:	e76e      	b.n	800bab6 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bbd8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800bbdc:	07d9      	lsls	r1, r3, #31
 800bbde:	f100 8200 	bmi.w	800bfe2 <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bbe2:	6820      	ldr	r0, [r4, #0]
 800bbe4:	6943      	ldr	r3, [r0, #20]
 800bbe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbea:	6143      	str	r3, [r0, #20]
 800bbec:	e7a7      	b.n	800bb3e <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bbee:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800bbf2:	f022 0201 	bic.w	r2, r2, #1
 800bbf6:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800bbfa:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	f000 812c 	beq.w	800be5c <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800bc04:	4620      	mov	r0, r4
 800bc06:	f017 f855 	bl	8022cb4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bc0a:	6820      	ldr	r0, [r4, #0]
 800bc0c:	6943      	ldr	r3, [r0, #20]
 800bc0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc12:	6143      	str	r3, [r0, #20]
 800bc14:	e78e      	b.n	800bb34 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bc16:	f007 f99b 	bl	8012f50 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800bc1a:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bc1c:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800bc1e:	f1b8 0f00 	cmp.w	r8, #0
 800bc22:	d082      	beq.n	800bb2a <HAL_PCD_IRQHandler+0x86>
 800bc24:	4626      	mov	r6, r4
 800bc26:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800bc2a:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bc2e:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800bc32:	e009      	b.n	800bc48 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800bc34:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800bc38:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800bc3c:	f106 061c 	add.w	r6, r6, #28
 800bc40:	f109 0920 	add.w	r9, r9, #32
 800bc44:	f000 8126 	beq.w	800be94 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bc48:	f018 0f01 	tst.w	r8, #1
 800bc4c:	d0f2      	beq.n	800bc34 <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bc4e:	fa5f f78a 	uxtb.w	r7, sl
 800bc52:	4639      	mov	r1, r7
 800bc54:	f007 f98e 	bl	8012f74 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bc58:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bc5a:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bc5c:	d515      	bpl.n	800bc8a <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bc5e:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bc60:	f00a 030f 	and.w	r3, sl, #15
 800bc64:	2201      	movs	r2, #1
 800bc66:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bc68:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800bc6c:	ea23 0302 	bic.w	r3, r3, r2
 800bc70:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bc74:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800bc76:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800bc78:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800bc7c:	4299      	cmp	r1, r3
 800bc7e:	f000 81b9 	beq.w	800bff4 <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bc82:	4639      	mov	r1, r7
 800bc84:	4620      	mov	r0, r4
 800bc86:	f016 ffd9 	bl	8022c3c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bc8a:	0728      	lsls	r0, r5, #28
 800bc8c:	d502      	bpl.n	800bc94 <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bc8e:	2308      	movs	r3, #8
 800bc90:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bc94:	06e9      	lsls	r1, r5, #27
 800bc96:	d502      	bpl.n	800bc9e <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bc98:	2310      	movs	r3, #16
 800bc9a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bc9e:	066a      	lsls	r2, r5, #25
 800bca0:	d502      	bpl.n	800bca8 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bca8:	07ab      	lsls	r3, r5, #30
 800bcaa:	d502      	bpl.n	800bcb2 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bcac:	2302      	movs	r3, #2
 800bcae:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bcb2:	062d      	lsls	r5, r5, #24
 800bcb4:	f100 80f1 	bmi.w	800be9a <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bcb8:	6820      	ldr	r0, [r4, #0]
 800bcba:	e7bb      	b.n	800bc34 <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bcbc:	f007 f940 	bl	8012f40 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800bcc0:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bcc2:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	f43f af2a 	beq.w	800bb1e <HAL_PCD_IRQHandler+0x7a>
 800bcca:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800bcce:	46a2      	mov	sl, r4
      epnum = 0U;
 800bcd0:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bcd4:	9703      	str	r7, [sp, #12]
 800bcd6:	e008      	b.n	800bcea <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800bcd8:	086d      	lsrs	r5, r5, #1
        epnum++;
 800bcda:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800bcde:	f106 0620 	add.w	r6, r6, #32
 800bce2:	f10a 0a1c 	add.w	sl, sl, #28
 800bce6:	f000 80d3 	beq.w	800be90 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800bcea:	07ef      	lsls	r7, r5, #31
 800bcec:	d5f4      	bpl.n	800bcd8 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bcee:	fa5f f788 	uxtb.w	r7, r8
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f007 f934 	bl	8012f60 <USB_ReadDevOutEPInterrupt>
 800bcf8:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcfa:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bcfc:	f019 0f01 	tst.w	r9, #1
 800bd00:	f040 8135 	bne.w	800bf6e <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bd04:	f019 0f08 	tst.w	r9, #8
 800bd08:	f040 8119 	bne.w	800bf3e <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bd0c:	f019 0f10 	tst.w	r9, #16
 800bd10:	d001      	beq.n	800bd16 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bd12:	2310      	movs	r3, #16
 800bd14:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bd16:	f019 0f20 	tst.w	r9, #32
 800bd1a:	d001      	beq.n	800bd20 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd1c:	2320      	movs	r3, #32
 800bd1e:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bd20:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800bd24:	d0d8      	beq.n	800bcd8 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bd26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd2a:	60b3      	str	r3, [r6, #8]
 800bd2c:	e7d4      	b.n	800bcd8 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f016 ffcc 	bl	8022ccc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd34:	6820      	ldr	r0, [r4, #0]
 800bd36:	6943      	ldr	r3, [r0, #20]
 800bd38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd3c:	6143      	str	r3, [r0, #20]
 800bd3e:	e73d      	b.n	800bbbc <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bd40:	4620      	mov	r0, r4
 800bd42:	2100      	movs	r1, #0
 800bd44:	f016 ffba 	bl	8022cbc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bd48:	6820      	ldr	r0, [r4, #0]
 800bd4a:	6943      	ldr	r3, [r0, #20]
 800bd4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd50:	6143      	str	r3, [r0, #20]
 800bd52:	e72d      	b.n	800bbb0 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bd54:	4620      	mov	r0, r4
 800bd56:	2100      	movs	r1, #0
 800bd58:	f016 ffb4 	bl	8022cc4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	6943      	ldr	r3, [r0, #20]
 800bd60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd64:	6143      	str	r3, [r0, #20]
 800bd66:	e71d      	b.n	800bba4 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f016 ff71 	bl	8022c50 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	6943      	ldr	r3, [r0, #20]
 800bd72:	f003 0308 	and.w	r3, r3, #8
 800bd76:	6143      	str	r3, [r0, #20]
 800bd78:	e70e      	b.n	800bb98 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800bd7a:	f007 f90f 	bl	8012f9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	f006 fdc0 	bl	8012904 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bd84:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bd86:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bd88:	f000 ff86 	bl	800cc98 <HAL_RCC_GetHCLKFreq>
 800bd8c:	7b22      	ldrb	r2, [r4, #12]
 800bd8e:	4601      	mov	r1, r0
 800bd90:	4628      	mov	r0, r5
 800bd92:	f006 fbeb 	bl	801256c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800bd96:	4620      	mov	r0, r4
 800bd98:	f016 ff5e 	bl	8022c58 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bd9c:	6820      	ldr	r0, [r4, #0]
 800bd9e:	6943      	ldr	r3, [r0, #20]
 800bda0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bda4:	6143      	str	r3, [r0, #20]
 800bda6:	e6f1      	b.n	800bb8c <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bda8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800bdac:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bdb0:	2110      	movs	r1, #16
 800bdb2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bdb4:	f023 0301 	bic.w	r3, r3, #1
 800bdb8:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bdba:	f006 fc97 	bl	80126ec <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdbe:	6860      	ldr	r0, [r4, #4]
 800bdc0:	b1e0      	cbz	r0, 800bdfc <HAL_PCD_IRQHandler+0x358>
 800bdc2:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bdc6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800bdca:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdcc:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bdd0:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdd2:	3320      	adds	r3, #32
 800bdd4:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bdd6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800bdda:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bdde:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bde2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800bde6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800bdea:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bdee:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800bdf2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bdf6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdfa:	d1e6      	bne.n	800bdca <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bdfc:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bdfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800be00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800be04:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800be06:	b9f2      	cbnz	r2, 800be46 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800be08:	696a      	ldr	r2, [r5, #20]
 800be0a:	f242 032b 	movw	r3, #8235	; 0x202b
 800be0e:	4313      	orrs	r3, r2
 800be10:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800be12:	692b      	ldr	r3, [r5, #16]
 800be14:	f043 030b 	orr.w	r3, r3, #11
 800be18:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800be1a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be1e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800be22:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800be24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be28:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800be2a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be2e:	f007 f8cb 	bl	8012fc8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800be32:	6820      	ldr	r0, [r4, #0]
 800be34:	6943      	ldr	r3, [r0, #20]
 800be36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be3a:	6143      	str	r3, [r0, #20]
 800be3c:	e69f      	b.n	800bb7e <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800be3e:	4620      	mov	r0, r4
 800be40:	f016 ff20 	bl	8022c84 <HAL_PCD_SuspendCallback>
 800be44:	e694      	b.n	800bb70 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800be46:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800be4a:	f043 030b 	orr.w	r3, r3, #11
 800be4e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800be52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800be54:	f043 030b 	orr.w	r3, r3, #11
 800be58:	646b      	str	r3, [r5, #68]	; 0x44
 800be5a:	e7de      	b.n	800be1a <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800be5c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800be5e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800be60:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800be64:	f016 fff8 	bl	8022e58 <HAL_PCDEx_LPM_Callback>
 800be68:	e6cf      	b.n	800bc0a <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be6a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800be6e:	2208      	movs	r2, #8
 800be70:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800be74:	4638      	mov	r0, r7
 800be76:	f006 ffa9 	bl	8012dcc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be7a:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800be7e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800be82:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800be84:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800be88:	440b      	add	r3, r1
 800be8a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800be8e:	e63b      	b.n	800bb08 <HAL_PCD_IRQHandler+0x64>
 800be90:	9f03      	ldr	r7, [sp, #12]
 800be92:	e644      	b.n	800bb1e <HAL_PCD_IRQHandler+0x7a>
 800be94:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800be98:	e647      	b.n	800bb2a <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800be9a:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be9e:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800bea2:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bea4:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800bea6:	f63f aec5 	bhi.w	800bc34 <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800beaa:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800beae:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb0:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800beb4:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800beb8:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800beba:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800bebc:	428a      	cmp	r2, r1
 800bebe:	bf28      	it	cs
 800bec0:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bec2:	9905      	ldr	r1, [sp, #20]
 800bec4:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800bec6:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bec8:	b289      	uxth	r1, r1
 800beca:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800bece:	f0c0 80bc 	bcc.w	800c04a <HAL_PCD_IRQHandler+0x5a6>
 800bed2:	f8cd 8018 	str.w	r8, [sp, #24]
 800bed6:	46a0      	mov	r8, r4
 800bed8:	9c05      	ldr	r4, [sp, #20]
 800beda:	e01a      	b.n	800bf12 <HAL_PCD_IRQHandler+0x46e>
 800bedc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bede:	463a      	mov	r2, r7
 800bee0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800bee2:	4658      	mov	r0, fp
 800bee4:	429d      	cmp	r5, r3
 800bee6:	bf28      	it	cs
 800bee8:	461d      	movcs	r5, r3
 800beea:	f898 3010 	ldrb.w	r3, [r8, #16]
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	b2ab      	uxth	r3, r5
 800bef2:	f006 ff55 	bl	8012da0 <USB_WritePacket>
    ep->xfer_buff  += len;
 800bef6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bef8:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800befa:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800befc:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800befe:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800bf00:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800bf02:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800bf04:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bf06:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800bf0a:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bf0c:	f0c0 8096 	bcc.w	800c03c <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bf10:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800bf12:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800bf14:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bf18:	d3e0      	bcc.n	800bedc <HAL_PCD_IRQHandler+0x438>
 800bf1a:	4644      	mov	r4, r8
 800bf1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bf20:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bf24:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bf26:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bf28:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bf2a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bf2e:	f00a 030f 	and.w	r3, sl, #15
 800bf32:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bf34:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bf36:	ea23 0302 	bic.w	r3, r3, r2
 800bf3a:	634b      	str	r3, [r1, #52]	; 0x34
 800bf3c:	e67a      	b.n	800bc34 <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bf3e:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf40:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bf44:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf4a:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf4c:	485f      	ldr	r0, [pc, #380]	; (800c0cc <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf4e:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf50:	4282      	cmp	r2, r0
 800bf52:	d961      	bls.n	800c018 <HAL_PCD_IRQHandler+0x574>
 800bf54:	040a      	lsls	r2, r1, #16
 800bf56:	d502      	bpl.n	800bf5e <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf5c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f016 fe5c 	bl	8022c1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf64:	6921      	ldr	r1, [r4, #16]
 800bf66:	2901      	cmp	r1, #1
 800bf68:	d07f      	beq.n	800c06a <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	e6ce      	b.n	800bd0c <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bf6e:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800bf70:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bf72:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf74:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800bf78:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf7a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf7e:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800bf82:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800bf84:	d04d      	beq.n	800c022 <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bf86:	4952      	ldr	r1, [pc, #328]	; (800c0d0 <HAL_PCD_IRQHandler+0x62c>)
 800bf88:	458c      	cmp	ip, r1
 800bf8a:	d062      	beq.n	800c052 <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bf8c:	f1b8 0f00 	cmp.w	r8, #0
 800bf90:	d104      	bne.n	800bf9c <HAL_PCD_IRQHandler+0x4f8>
 800bf92:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800bf96:	2a00      	cmp	r2, #0
 800bf98:	f000 8092 	beq.w	800c0c0 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f016 fe42 	bl	8022c28 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	e6ad      	b.n	800bd04 <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bfa8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800bfac:	421d      	tst	r5, r3
 800bfae:	f43f adab 	beq.w	800bb08 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bfb2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800bfb6:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800bfba:	4638      	mov	r0, r7
 800bfbc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bfc0:	4615      	mov	r5, r2
 800bfc2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800bfc6:	f006 ff01 	bl	8012dcc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfca:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bfce:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfd0:	442b      	add	r3, r5
 800bfd2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfd6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800bfda:	442b      	add	r3, r5
 800bfdc:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800bfe0:	e592      	b.n	800bb08 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f016 fe4e 	bl	8022c84 <HAL_PCD_SuspendCallback>
 800bfe8:	e5fb      	b.n	800bbe2 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800bfea:	4620      	mov	r0, r4
 800bfec:	f016 fe72 	bl	8022cd4 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	e5ed      	b.n	800bbd0 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800bff4:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800bff8:	4413      	add	r3, r2
 800bffa:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800bffc:	f1ba 0f00 	cmp.w	sl, #0
 800c000:	f47f ae3f 	bne.w	800bc82 <HAL_PCD_IRQHandler+0x1de>
 800c004:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c006:	2b00      	cmp	r3, #0
 800c008:	f47f ae3b 	bne.w	800bc82 <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c00c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c010:	6820      	ldr	r0, [r4, #0]
 800c012:	f006 ffd9 	bl	8012fc8 <USB_EP0_OutStart>
 800c016:	e634      	b.n	800bc82 <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800c018:	4620      	mov	r0, r4
 800c01a:	f016 fdff 	bl	8022c1c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c01e:	6820      	ldr	r0, [r4, #0]
 800c020:	e674      	b.n	800bd0c <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c022:	0719      	lsls	r1, r3, #28
 800c024:	d51c      	bpl.n	800c060 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c026:	4929      	ldr	r1, [pc, #164]	; (800c0cc <HAL_PCD_IRQHandler+0x628>)
 800c028:	458c      	cmp	ip, r1
 800c02a:	f67f ae6b 	bls.w	800bd04 <HAL_PCD_IRQHandler+0x260>
 800c02e:	041f      	lsls	r7, r3, #16
 800c030:	f57f ae68 	bpl.w	800bd04 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c038:	6093      	str	r3, [r2, #8]
 800c03a:	e663      	b.n	800bd04 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c03c:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800c03e:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c040:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c044:	f8d4 b000 	ldr.w	fp, [r4]
 800c048:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800c04a:	42ab      	cmp	r3, r5
 800c04c:	f4ff adf2 	bcc.w	800bc34 <HAL_PCD_IRQHandler+0x190>
 800c050:	e768      	b.n	800bf24 <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c052:	0419      	lsls	r1, r3, #16
 800c054:	d4ee      	bmi.n	800c034 <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c056:	0699      	lsls	r1, r3, #26
 800c058:	d5a0      	bpl.n	800bf9c <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c05a:	2120      	movs	r1, #32
 800c05c:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c05e:	e79d      	b.n	800bf9c <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c060:	0699      	lsls	r1, r3, #26
 800c062:	d508      	bpl.n	800c076 <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c064:	2320      	movs	r3, #32
 800c066:	6093      	str	r3, [r2, #8]
 800c068:	e64c      	b.n	800bd04 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c06a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	f006 ffaa 	bl	8012fc8 <USB_EP0_OutStart>
 800c074:	e779      	b.n	800bf6a <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c076:	f013 0f28 	tst.w	r3, #40	; 0x28
 800c07a:	f47f ae43 	bne.w	800bd04 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c07e:	4913      	ldr	r1, [pc, #76]	; (800c0cc <HAL_PCD_IRQHandler+0x628>)
 800c080:	458c      	cmp	ip, r1
 800c082:	d901      	bls.n	800c088 <HAL_PCD_IRQHandler+0x5e4>
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	d4d5      	bmi.n	800c034 <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c088:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800c08a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c08e:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c092:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800c094:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c098:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800c09c:	440a      	add	r2, r1
 800c09e:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c0a2:	f1b8 0f00 	cmp.w	r8, #0
 800c0a6:	f47f af79 	bne.w	800bf9c <HAL_PCD_IRQHandler+0x4f8>
 800c0aa:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	f47f af74 	bne.w	800bf9c <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c0b4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	f006 ff85 	bl	8012fc8 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0be:	e76d      	b.n	800bf9c <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c0c0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c0c4:	4641      	mov	r1, r8
 800c0c6:	f006 ff7f 	bl	8012fc8 <USB_EP0_OutStart>
 800c0ca:	e767      	b.n	800bf9c <HAL_PCD_IRQHandler+0x4f8>
 800c0cc:	4f54300a 	.word	0x4f54300a
 800c0d0:	4f54310a 	.word	0x4f54310a

0800c0d4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800c0d4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800c0d8:	2a01      	cmp	r2, #1
 800c0da:	d00e      	beq.n	800c0fa <HAL_PCD_SetAddress+0x26>
 800c0dc:	2201      	movs	r2, #1
{
 800c0de:	b510      	push	{r4, lr}
 800c0e0:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c0e2:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800c0e4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800c0e8:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c0ec:	f006 fef2 	bl	8012ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c0f0:	2300      	movs	r3, #0
  return HAL_OK;
 800c0f2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c0f4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c0f8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c0fa:	2002      	movs	r0, #2
}
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop

0800c100 <HAL_PCD_EP_Open>:
{
 800c100:	b510      	push	{r4, lr}
 800c102:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800c106:	0609      	lsls	r1, r1, #24
{
 800c108:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c10a:	d427      	bmi.n	800c15c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c10c:	f04f 0c1c 	mov.w	ip, #28
 800c110:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800c114:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800c118:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800c11c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800c120:	2000      	movs	r0, #0
 800c122:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800c126:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800c128:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c12a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800c12e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800c130:	b10a      	cbz	r2, 800c136 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800c132:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800c136:	2b02      	cmp	r3, #2
 800c138:	d101      	bne.n	800c13e <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800c13e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c142:	2b01      	cmp	r3, #1
 800c144:	d018      	beq.n	800c178 <HAL_PCD_EP_Open+0x78>
 800c146:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c148:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c14a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c14e:	f006 fbe5 	bl	801291c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c152:	2300      	movs	r3, #0
  return ret;
 800c154:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c156:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c15a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c15c:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800c15e:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c162:	fb00 400e 	mla	r0, r0, lr, r4
 800c166:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800c16a:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800c16e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800c172:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800c176:	e7d6      	b.n	800c126 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800c178:	2002      	movs	r0, #2
}
 800c17a:	bd10      	pop	{r4, pc}

0800c17c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800c17c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c180:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c184:	f04f 011c 	mov.w	r1, #28
{
 800c188:	b510      	push	{r4, lr}
 800c18a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800c18c:	d11a      	bne.n	800c1c4 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c18e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800c192:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800c196:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c198:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c19c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c1a0:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c1a4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800c1a6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d019      	beq.n	800c1e2 <HAL_PCD_EP_Close+0x66>
 800c1ae:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c1b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c1b2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c1b6:	f006 fbf9 	bl	80129ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1ba:	2300      	movs	r3, #0
  return HAL_OK;
 800c1bc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c1be:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c1c2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1c4:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800c1c8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1d2:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c1d4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c1d8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800c1da:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d1e5      	bne.n	800c1ae <HAL_PCD_EP_Close+0x32>
 800c1e2:	2002      	movs	r0, #2
}
 800c1e4:	bd10      	pop	{r4, pc}
 800c1e6:	bf00      	nop

0800c1e8 <HAL_PCD_EP_Receive>:
{
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1ee:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800c1f0:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1f4:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800c1f8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1fc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800c200:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800c204:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800c206:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800c20a:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800c20e:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800c212:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800c216:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c218:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800c21a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800c21c:	bf08      	it	eq
 800c21e:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c222:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c224:	b91c      	cbnz	r4, 800c22e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c226:	f006 fd37 	bl	8012c98 <USB_EP0StartXfer>
}
 800c22a:	2000      	movs	r0, #0
 800c22c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c22e:	f006 fc1b 	bl	8012a68 <USB_EPStartXfer>
}
 800c232:	2000      	movs	r0, #0
 800c234:	bd10      	pop	{r4, pc}
 800c236:	bf00      	nop

0800c238 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c238:	f001 010f 	and.w	r1, r1, #15
 800c23c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c240:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800c244:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop

0800c24c <HAL_PCD_EP_Transmit>:
{
 800c24c:	b510      	push	{r4, lr}
 800c24e:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c252:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800c254:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c258:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800c25c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c260:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800c262:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800c266:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800c268:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800c26c:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800c270:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c272:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800c276:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800c27a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c27c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800c27e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800c280:	bf08      	it	eq
 800c282:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c286:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c288:	b91c      	cbnz	r4, 800c292 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c28a:	f006 fd05 	bl	8012c98 <USB_EP0StartXfer>
}
 800c28e:	2000      	movs	r0, #0
 800c290:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c292:	f006 fbe9 	bl	8012a68 <USB_EPStartXfer>
}
 800c296:	2000      	movs	r0, #0
 800c298:	bd10      	pop	{r4, pc}
 800c29a:	bf00      	nop

0800c29c <HAL_PCD_EP_SetStall>:
{
 800c29c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c29e:	6843      	ldr	r3, [r0, #4]
 800c2a0:	f001 050f 	and.w	r5, r1, #15
 800c2a4:	429d      	cmp	r5, r3
 800c2a6:	d834      	bhi.n	800c312 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800c2a8:	060b      	lsls	r3, r1, #24
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	d41d      	bmi.n	800c2ea <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800c2ae:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800c2b0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800c2b4:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800c2b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c2bc:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800c2be:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c2c2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800c2c6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2c8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800c2ca:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800c2cc:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d01c      	beq.n	800c30e <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c2d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c2d6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c2da:	f006 fd9b 	bl	8012e14 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c2de:	b1d5      	cbz	r5, 800c316 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800c2e0:	2300      	movs	r3, #0
  return HAL_OK;
 800c2e2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c2e4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c2e8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2ea:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800c2ec:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800c2f0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2f2:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800c2f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2fa:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800c300:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800c302:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800c304:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800c306:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d1e2      	bne.n	800c2d4 <HAL_PCD_EP_SetStall+0x38>
 800c30e:	2002      	movs	r0, #2
}
 800c310:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c312:	2001      	movs	r0, #1
}
 800c314:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c316:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c31a:	7c21      	ldrb	r1, [r4, #16]
 800c31c:	6820      	ldr	r0, [r4, #0]
 800c31e:	f006 fe53 	bl	8012fc8 <USB_EP0_OutStart>
 800c322:	e7dd      	b.n	800c2e0 <HAL_PCD_EP_SetStall+0x44>

0800c324 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c324:	6842      	ldr	r2, [r0, #4]
{
 800c326:	b538      	push	{r3, r4, r5, lr}
 800c328:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d832      	bhi.n	800c396 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800c330:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c334:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c336:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800c33a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800c33e:	d119      	bne.n	800c374 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c340:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800c344:	2000      	movs	r0, #0
 800c346:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800c34a:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c34c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800c350:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800c354:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800c356:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800c358:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d018      	beq.n	800c392 <HAL_PCD_EP_ClrStall+0x6e>
 800c360:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c362:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800c364:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c368:	f006 fd88 	bl	8012e7c <USB_EPClearStall>
  return HAL_OK;
 800c36c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800c36e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800c372:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c374:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800c378:	2001      	movs	r0, #1
 800c37a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800c37e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c380:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800c382:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800c386:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800c388:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800c38a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d1e6      	bne.n	800c360 <HAL_PCD_EP_ClrStall+0x3c>
 800c392:	2002      	movs	r0, #2
}
 800c394:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c396:	2001      	movs	r0, #1
}
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	bf00      	nop

0800c39c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c39c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c39e:	6804      	ldr	r4, [r0, #0]
 800c3a0:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800c3a2:	b931      	cbnz	r1, 800c3b2 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c3a4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c3a8:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b0:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c3b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800c3b4:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c3b8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800c3bc:	d00b      	beq.n	800c3d6 <HAL_PCDEx_SetTxFiFo+0x3a>
 800c3be:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c3c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800c3c4:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c3c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800c3ca:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c3cc:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800c3ce:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c3d0:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800c3d4:	d3f4      	bcc.n	800c3c0 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c3d6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800c3da:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c3de:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800c3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c3e6:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop

0800c3f0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c3f0:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800c3f2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6259      	str	r1, [r3, #36]	; 0x24
}
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop

0800c3fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c3fc:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800c3fe:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c402:	4909      	ldr	r1, [pc, #36]	; (800c428 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c404:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800c406:	4660      	mov	r0, ip
{
 800c408:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800c40a:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800c40c:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800c410:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c414:	6993      	ldr	r3, [r2, #24]
}
 800c416:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c41a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c41e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c420:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c422:	4319      	orrs	r1, r3
 800c424:	6551      	str	r1, [r2, #84]	; 0x54
}
 800c426:	4770      	bx	lr
 800c428:	10000003 	.word	0x10000003

0800c42c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c42c:	4a02      	ldr	r2, [pc, #8]	; (800c438 <HAL_PWR_EnableBkUpAccess+0xc>)
 800c42e:	6813      	ldr	r3, [r2, #0]
 800c430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c434:	6013      	str	r3, [r2, #0]
}
 800c436:	4770      	bx	lr
 800c438:	40007000 	.word	0x40007000

0800c43c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800c43c:	4b1a      	ldr	r3, [pc, #104]	; (800c4a8 <HAL_PWREx_EnableOverDrive+0x6c>)
 800c43e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c440:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800c444:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800c446:	641a      	str	r2, [r3, #64]	; 0x40
{
 800c448:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800c44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c44c:	4c17      	ldr	r4, [pc, #92]	; (800c4ac <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c44e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c45c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c45e:	f7fb f859 	bl	8007514 <HAL_GetTick>
 800c462:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c464:	e005      	b.n	800c472 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c466:	f7fb f855 	bl	8007514 <HAL_GetTick>
 800c46a:	1b40      	subs	r0, r0, r5
 800c46c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c470:	d817      	bhi.n	800c4a2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	03da      	lsls	r2, r3, #15
 800c476:	d5f6      	bpl.n	800c466 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c478:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c47a:	4d0c      	ldr	r5, [pc, #48]	; (800c4ac <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c47c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c480:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c482:	f7fb f847 	bl	8007514 <HAL_GetTick>
 800c486:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c488:	e005      	b.n	800c496 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c48a:	f7fb f843 	bl	8007514 <HAL_GetTick>
 800c48e:	1b00      	subs	r0, r0, r4
 800c490:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c494:	d805      	bhi.n	800c4a2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c496:	686b      	ldr	r3, [r5, #4]
 800c498:	039b      	lsls	r3, r3, #14
 800c49a:	d5f6      	bpl.n	800c48a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800c49c:	2000      	movs	r0, #0
}
 800c49e:	b003      	add	sp, #12
 800c4a0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800c4a2:	2003      	movs	r0, #3
}
 800c4a4:	b003      	add	sp, #12
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	40023800 	.word	0x40023800
 800c4ac:	40007000 	.word	0x40007000

0800c4b0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f000 828c 	beq.w	800c9ce <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c4b6:	6803      	ldr	r3, [r0, #0]
 800c4b8:	2b0f      	cmp	r3, #15
{
 800c4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c4c2:	f200 8123 	bhi.w	800c70c <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4c6:	07dd      	lsls	r5, r3, #31
 800c4c8:	d534      	bpl.n	800c534 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c4ca:	6863      	ldr	r3, [r4, #4]
 800c4cc:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800c4d0:	d003      	beq.n	800c4da <HAL_RCC_OscConfig+0x2a>
 800c4d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4d6:	f040 8175 	bne.w	800c7c4 <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4da:	4aa3      	ldr	r2, [pc, #652]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c4dc:	6893      	ldr	r3, [r2, #8]
 800c4de:	f003 030c 	and.w	r3, r3, #12
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	d01d      	beq.n	800c522 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c4e6:	6893      	ldr	r3, [r2, #8]
 800c4e8:	f003 030c 	and.w	r3, r3, #12
 800c4ec:	2b08      	cmp	r3, #8
 800c4ee:	d015      	beq.n	800c51c <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f6:	f000 816b 	beq.w	800c7d0 <HAL_RCC_OscConfig+0x320>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 819c 	beq.w	800c838 <HAL_RCC_OscConfig+0x388>
 800c500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c504:	4b98      	ldr	r3, [pc, #608]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	f000 822d 	beq.w	800c966 <HAL_RCC_OscConfig+0x4b6>
 800c50c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	e15e      	b.n	800c7da <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c51c:	6853      	ldr	r3, [r2, #4]
 800c51e:	0258      	lsls	r0, r3, #9
 800c520:	d5e6      	bpl.n	800c4f0 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c522:	4b91      	ldr	r3, [pc, #580]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	0399      	lsls	r1, r3, #14
 800c528:	d503      	bpl.n	800c532 <HAL_RCC_OscConfig+0x82>
 800c52a:	6863      	ldr	r3, [r4, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 80ff 	beq.w	800c730 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	079f      	lsls	r7, r3, #30
 800c536:	d531      	bpl.n	800c59c <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c538:	68e3      	ldr	r3, [r4, #12]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	f200 80fc 	bhi.w	800c738 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c540:	6923      	ldr	r3, [r4, #16]
 800c542:	2b1f      	cmp	r3, #31
 800c544:	f200 8101 	bhi.w	800c74a <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c548:	4b87      	ldr	r3, [pc, #540]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	f012 0f0c 	tst.w	r2, #12
 800c550:	f000 80e7 	beq.w	800c722 <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c554:	689a      	ldr	r2, [r3, #8]
 800c556:	f002 020c 	and.w	r2, r2, #12
 800c55a:	2a08      	cmp	r2, #8
 800c55c:	f000 80dd 	beq.w	800c71a <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c560:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c562:	4d81      	ldr	r5, [pc, #516]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 819d 	beq.w	800c8a4 <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	f043 0301 	orr.w	r3, r3, #1
 800c570:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c572:	f7fa ffcf 	bl	8007514 <HAL_GetTick>
 800c576:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c578:	e005      	b.n	800c586 <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c57a:	f7fa ffcb 	bl	8007514 <HAL_GetTick>
 800c57e:	1b80      	subs	r0, r0, r6
 800c580:	2802      	cmp	r0, #2
 800c582:	f200 8155 	bhi.w	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c586:	682b      	ldr	r3, [r5, #0]
 800c588:	0798      	lsls	r0, r3, #30
 800c58a:	d5f6      	bpl.n	800c57a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c58c:	682b      	ldr	r3, [r5, #0]
 800c58e:	6922      	ldr	r2, [r4, #16]
 800c590:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c594:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c598:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	071a      	lsls	r2, r3, #28
 800c59e:	d42a      	bmi.n	800c5f6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5a0:	075e      	lsls	r6, r3, #29
 800c5a2:	d544      	bpl.n	800c62e <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c5a4:	68a3      	ldr	r3, [r4, #8]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d906      	bls.n	800c5b8 <HAL_RCC_OscConfig+0x108>
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d004      	beq.n	800c5b8 <HAL_RCC_OscConfig+0x108>
 800c5ae:	f240 2106 	movw	r1, #518	; 0x206
 800c5b2:	486e      	ldr	r0, [pc, #440]	; (800c76c <HAL_RCC_OscConfig+0x2bc>)
 800c5b4:	f7f8 f83e 	bl	8004634 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5b8:	4b6b      	ldr	r3, [pc, #428]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c5ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5bc:	00d5      	lsls	r5, r2, #3
 800c5be:	f140 80ec 	bpl.w	800c79a <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800c5c2:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5c4:	4e6a      	ldr	r6, [pc, #424]	; (800c770 <HAL_RCC_OscConfig+0x2c0>)
 800c5c6:	6833      	ldr	r3, [r6, #0]
 800c5c8:	05d8      	lsls	r0, r3, #23
 800c5ca:	f140 8121 	bpl.w	800c810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	f000 8179 	beq.w	800c8c8 <HAL_RCC_OscConfig+0x418>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f000 8144 	beq.w	800c864 <HAL_RCC_OscConfig+0x3b4>
 800c5dc:	2b05      	cmp	r3, #5
 800c5de:	4b62      	ldr	r3, [pc, #392]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c5e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c5e2:	f000 81c8 	beq.w	800c976 <HAL_RCC_OscConfig+0x4c6>
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	671a      	str	r2, [r3, #112]	; 0x70
 800c5ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c5ee:	f022 0204 	bic.w	r2, r2, #4
 800c5f2:	671a      	str	r2, [r3, #112]	; 0x70
 800c5f4:	e16d      	b.n	800c8d2 <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c5f6:	6963      	ldr	r3, [r4, #20]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	f200 80c4 	bhi.w	800c786 <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800c5fe:	4d5a      	ldr	r5, [pc, #360]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 80a8 	beq.w	800c756 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800c606:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c60e:	f7fa ff81 	bl	8007514 <HAL_GetTick>
 800c612:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c614:	e005      	b.n	800c622 <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c616:	f7fa ff7d 	bl	8007514 <HAL_GetTick>
 800c61a:	1b80      	subs	r0, r0, r6
 800c61c:	2802      	cmp	r0, #2
 800c61e:	f200 8107 	bhi.w	800c830 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c622:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c624:	079b      	lsls	r3, r3, #30
 800c626:	d5f6      	bpl.n	800c616 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	075e      	lsls	r6, r3, #29
 800c62c:	d4ba      	bmi.n	800c5a4 <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c62e:	69a0      	ldr	r0, [r4, #24]
 800c630:	2802      	cmp	r0, #2
 800c632:	f200 80bd 	bhi.w	800c7b0 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c636:	2800      	cmp	r0, #0
 800c638:	d064      	beq.n	800c704 <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c63a:	4d4b      	ldr	r5, [pc, #300]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c63c:	68ab      	ldr	r3, [r5, #8]
 800c63e:	f003 030c 	and.w	r3, r3, #12
 800c642:	2b08      	cmp	r3, #8
 800c644:	f000 8158 	beq.w	800c8f8 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c648:	2802      	cmp	r0, #2
 800c64a:	f040 81ae 	bne.w	800c9aa <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c64e:	69e3      	ldr	r3, [r4, #28]
 800c650:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800c654:	f040 81a3 	bne.w	800c99e <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c658:	6a23      	ldr	r3, [r4, #32]
 800c65a:	3b02      	subs	r3, #2
 800c65c:	2b3d      	cmp	r3, #61	; 0x3d
 800c65e:	f200 8198 	bhi.w	800c992 <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c664:	3b32      	subs	r3, #50	; 0x32
 800c666:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800c66a:	f200 818c 	bhi.w	800c986 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c66e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c670:	2b08      	cmp	r3, #8
 800c672:	f200 8172 	bhi.w	800c95a <HAL_RCC_OscConfig+0x4aa>
 800c676:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800c67a:	fa22 f303 	lsr.w	r3, r2, r3
 800c67e:	07d8      	lsls	r0, r3, #31
 800c680:	f140 816b 	bpl.w	800c95a <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c686:	3b02      	subs	r3, #2
 800c688:	2b0d      	cmp	r3, #13
 800c68a:	f200 81a8 	bhi.w	800c9de <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c68e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c690:	3b02      	subs	r3, #2
 800c692:	2b05      	cmp	r3, #5
 800c694:	f200 819d 	bhi.w	800c9d2 <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c698:	4d33      	ldr	r5, [pc, #204]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6a0:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a2:	f7fa ff37 	bl	8007514 <HAL_GetTick>
 800c6a6:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6a8:	e005      	b.n	800c6b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6aa:	f7fa ff33 	bl	8007514 <HAL_GetTick>
 800c6ae:	1b80      	subs	r0, r0, r6
 800c6b0:	2802      	cmp	r0, #2
 800c6b2:	f200 80bd 	bhi.w	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	0199      	lsls	r1, r3, #6
 800c6ba:	d4f6      	bmi.n	800c6aa <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6bc:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800c6c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c6c2:	430b      	orrs	r3, r1
 800c6c4:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6c6:	4e28      	ldr	r6, [pc, #160]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c6cc:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800c6d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c6d4:	0852      	lsrs	r2, r2, #1
 800c6d6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800c6da:	3a01      	subs	r2, #1
 800c6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c6ea:	f7fa ff13 	bl	8007514 <HAL_GetTick>
 800c6ee:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6f0:	e005      	b.n	800c6fe <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6f2:	f7fa ff0f 	bl	8007514 <HAL_GetTick>
 800c6f6:	1b00      	subs	r0, r0, r4
 800c6f8:	2802      	cmp	r0, #2
 800c6fa:	f200 8099 	bhi.w	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6fe:	6833      	ldr	r3, [r6, #0]
 800c700:	019a      	lsls	r2, r3, #6
 800c702:	d5f6      	bpl.n	800c6f2 <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800c704:	2000      	movs	r0, #0
}
 800c706:	b002      	add	sp, #8
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c70c:	f240 1163 	movw	r1, #355	; 0x163
 800c710:	4816      	ldr	r0, [pc, #88]	; (800c76c <HAL_RCC_OscConfig+0x2bc>)
 800c712:	f7f7 ff8f 	bl	8004634 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	e6d5      	b.n	800c4c6 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	025e      	lsls	r6, r3, #9
 800c71e:	f53f af1f 	bmi.w	800c560 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c722:	4b11      	ldr	r3, [pc, #68]	; (800c768 <HAL_RCC_OscConfig+0x2b8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	079d      	lsls	r5, r3, #30
 800c728:	d565      	bpl.n	800c7f6 <HAL_RCC_OscConfig+0x346>
 800c72a:	68e3      	ldr	r3, [r4, #12]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d062      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800c730:	2001      	movs	r0, #1
}
 800c732:	b002      	add	sp, #8
 800c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c738:	f240 119b 	movw	r1, #411	; 0x19b
 800c73c:	480b      	ldr	r0, [pc, #44]	; (800c76c <HAL_RCC_OscConfig+0x2bc>)
 800c73e:	f7f7 ff79 	bl	8004634 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	2b1f      	cmp	r3, #31
 800c746:	f67f aeff 	bls.w	800c548 <HAL_RCC_OscConfig+0x98>
 800c74a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800c74e:	4807      	ldr	r0, [pc, #28]	; (800c76c <HAL_RCC_OscConfig+0x2bc>)
 800c750:	f7f7 ff70 	bl	8004634 <assert_failed>
 800c754:	e6f8      	b.n	800c548 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800c756:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c75e:	f7fa fed9 	bl	8007514 <HAL_GetTick>
 800c762:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c764:	e00b      	b.n	800c77e <HAL_RCC_OscConfig+0x2ce>
 800c766:	bf00      	nop
 800c768:	40023800 	.word	0x40023800
 800c76c:	0802b578 	.word	0x0802b578
 800c770:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c774:	f7fa fece 	bl	8007514 <HAL_GetTick>
 800c778:	1b80      	subs	r0, r0, r6
 800c77a:	2802      	cmp	r0, #2
 800c77c:	d858      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c77e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c780:	079f      	lsls	r7, r3, #30
 800c782:	d4f7      	bmi.n	800c774 <HAL_RCC_OscConfig+0x2c4>
 800c784:	e750      	b.n	800c628 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c786:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800c78a:	4898      	ldr	r0, [pc, #608]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c78c:	f7f7 ff52 	bl	8004634 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c790:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800c792:	4d97      	ldr	r5, [pc, #604]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c794:	2b00      	cmp	r3, #0
 800c796:	d0de      	beq.n	800c756 <HAL_RCC_OscConfig+0x2a6>
 800c798:	e735      	b.n	800c606 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800c79c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800c79e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c7a2:	641a      	str	r2, [r3, #64]	; 0x40
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c7ae:	e709      	b.n	800c5c4 <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c7b0:	488e      	ldr	r0, [pc, #568]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c7b2:	f240 214a 	movw	r1, #586	; 0x24a
 800c7b6:	f7f7 ff3d 	bl	8004634 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7ba:	69a0      	ldr	r0, [r4, #24]
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f47f af3c 	bne.w	800c63a <HAL_RCC_OscConfig+0x18a>
 800c7c2:	e79f      	b.n	800c704 <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c7c4:	f240 1169 	movw	r1, #361	; 0x169
 800c7c8:	4888      	ldr	r0, [pc, #544]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c7ca:	f7f7 ff33 	bl	8004634 <assert_failed>
 800c7ce:	e684      	b.n	800c4da <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7d0:	4a87      	ldr	r2, [pc, #540]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
 800c7d2:	6813      	ldr	r3, [r2, #0]
 800c7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c7da:	f7fa fe9b 	bl	8007514 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7de:	4e84      	ldr	r6, [pc, #528]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800c7e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7e2:	e004      	b.n	800c7ee <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c7e4:	f7fa fe96 	bl	8007514 <HAL_GetTick>
 800c7e8:	1b40      	subs	r0, r0, r5
 800c7ea:	2864      	cmp	r0, #100	; 0x64
 800c7ec:	d820      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7ee:	6833      	ldr	r3, [r6, #0]
 800c7f0:	039a      	lsls	r2, r3, #14
 800c7f2:	d5f7      	bpl.n	800c7e4 <HAL_RCC_OscConfig+0x334>
 800c7f4:	e69d      	b.n	800c532 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7f6:	4a7e      	ldr	r2, [pc, #504]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
 800c7f8:	6921      	ldr	r1, [r4, #16]
 800c7fa:	6813      	ldr	r3, [r2, #0]
 800c7fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c800:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c804:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	071a      	lsls	r2, r3, #28
 800c80a:	f57f aec9 	bpl.w	800c5a0 <HAL_RCC_OscConfig+0xf0>
 800c80e:	e6f2      	b.n	800c5f6 <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800c810:	6833      	ldr	r3, [r6, #0]
 800c812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c816:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800c818:	f7fa fe7c 	bl	8007514 <HAL_GetTick>
 800c81c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c81e:	6833      	ldr	r3, [r6, #0]
 800c820:	05d9      	lsls	r1, r3, #23
 800c822:	f53f aed4 	bmi.w	800c5ce <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c826:	f7fa fe75 	bl	8007514 <HAL_GetTick>
 800c82a:	1bc0      	subs	r0, r0, r7
 800c82c:	2864      	cmp	r0, #100	; 0x64
 800c82e:	d9f6      	bls.n	800c81e <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800c830:	2003      	movs	r0, #3
}
 800c832:	b002      	add	sp, #8
 800c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c838:	4d6d      	ldr	r5, [pc, #436]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
 800c83a:	682b      	ldr	r3, [r5, #0]
 800c83c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c840:	602b      	str	r3, [r5, #0]
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c848:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c84a:	f7fa fe63 	bl	8007514 <HAL_GetTick>
 800c84e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c850:	e004      	b.n	800c85c <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c852:	f7fa fe5f 	bl	8007514 <HAL_GetTick>
 800c856:	1b80      	subs	r0, r0, r6
 800c858:	2864      	cmp	r0, #100	; 0x64
 800c85a:	d8e9      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	039b      	lsls	r3, r3, #14
 800c860:	d4f7      	bmi.n	800c852 <HAL_RCC_OscConfig+0x3a2>
 800c862:	e666      	b.n	800c532 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c864:	4e62      	ldr	r6, [pc, #392]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c866:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c86a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c86c:	f023 0301 	bic.w	r3, r3, #1
 800c870:	6733      	str	r3, [r6, #112]	; 0x70
 800c872:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c874:	f023 0304 	bic.w	r3, r3, #4
 800c878:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c87a:	f7fa fe4b 	bl	8007514 <HAL_GetTick>
 800c87e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c880:	e004      	b.n	800c88c <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c882:	f7fa fe47 	bl	8007514 <HAL_GetTick>
 800c886:	1bc0      	subs	r0, r0, r7
 800c888:	4540      	cmp	r0, r8
 800c88a:	d8d1      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c88c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c88e:	079b      	lsls	r3, r3, #30
 800c890:	d4f7      	bmi.n	800c882 <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800c892:	2d00      	cmp	r5, #0
 800c894:	f43f aecb 	beq.w	800c62e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c898:	4a55      	ldr	r2, [pc, #340]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
 800c89a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c89c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8a0:	6413      	str	r3, [r2, #64]	; 0x40
 800c8a2:	e6c4      	b.n	800c62e <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	f023 0301 	bic.w	r3, r3, #1
 800c8aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c8ac:	f7fa fe32 	bl	8007514 <HAL_GetTick>
 800c8b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8b2:	e004      	b.n	800c8be <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c8b4:	f7fa fe2e 	bl	8007514 <HAL_GetTick>
 800c8b8:	1b80      	subs	r0, r0, r6
 800c8ba:	2802      	cmp	r0, #2
 800c8bc:	d8b8      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	0799      	lsls	r1, r3, #30
 800c8c2:	d4f7      	bmi.n	800c8b4 <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	e669      	b.n	800c59c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8c8:	4a49      	ldr	r2, [pc, #292]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
 800c8ca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800c8cc:	f043 0301 	orr.w	r3, r3, #1
 800c8d0:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c8d2:	f7fa fe1f 	bl	8007514 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8d6:	4f46      	ldr	r7, [pc, #280]	; (800c9f0 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8d8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800c8dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8de:	e004      	b.n	800c8ea <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8e0:	f7fa fe18 	bl	8007514 <HAL_GetTick>
 800c8e4:	1b80      	subs	r0, r0, r6
 800c8e6:	4540      	cmp	r0, r8
 800c8e8:	d8a2      	bhi.n	800c830 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8ec:	079a      	lsls	r2, r3, #30
 800c8ee:	d5f7      	bpl.n	800c8e0 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	f43f ae9c 	beq.w	800c62e <HAL_RCC_OscConfig+0x17e>
 800c8f6:	e7cf      	b.n	800c898 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8f8:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800c8fa:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8fc:	f43f af03 	beq.w	800c706 <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c900:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c904:	69e1      	ldr	r1, [r4, #28]
 800c906:	428b      	cmp	r3, r1
 800c908:	f47f af12 	bne.w	800c730 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c90c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c910:	6a21      	ldr	r1, [r4, #32]
 800c912:	428b      	cmp	r3, r1
 800c914:	f47f af0c 	bne.w	800c730 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c91c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c91e:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c920:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800c924:	f47f af04 	bne.w	800c730 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c92a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800c92e:	085b      	lsrs	r3, r3, #1
 800c930:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c932:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800c936:	f47f aefb 	bne.w	800c730 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c93a:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800c93e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c940:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800c944:	f47f aef4 	bne.w	800c730 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c948:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c94a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c94e:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800c952:	bf14      	ite	ne
 800c954:	2001      	movne	r0, #1
 800c956:	2000      	moveq	r0, #0
 800c958:	e6d5      	b.n	800c706 <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800c95a:	f240 2156 	movw	r1, #598	; 0x256
 800c95e:	4823      	ldr	r0, [pc, #140]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c960:	f7f7 fe68 	bl	8004634 <assert_failed>
 800c964:	e68e      	b.n	800c684 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c966:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e731      	b.n	800c7da <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c976:	f042 0204 	orr.w	r2, r2, #4
 800c97a:	671a      	str	r2, [r3, #112]	; 0x70
 800c97c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c97e:	f042 0201 	orr.w	r2, r2, #1
 800c982:	671a      	str	r2, [r3, #112]	; 0x70
 800c984:	e7a5      	b.n	800c8d2 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800c986:	f240 2155 	movw	r1, #597	; 0x255
 800c98a:	4818      	ldr	r0, [pc, #96]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c98c:	f7f7 fe52 	bl	8004634 <assert_failed>
 800c990:	e66d      	b.n	800c66e <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800c992:	f44f 7115 	mov.w	r1, #596	; 0x254
 800c996:	4815      	ldr	r0, [pc, #84]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c998:	f7f7 fe4c 	bl	8004634 <assert_failed>
 800c99c:	e661      	b.n	800c662 <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c99e:	f240 2153 	movw	r1, #595	; 0x253
 800c9a2:	4812      	ldr	r0, [pc, #72]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c9a4:	f7f7 fe46 	bl	8004634 <assert_failed>
 800c9a8:	e656      	b.n	800c658 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c9b2:	f7fa fdaf 	bl	8007514 <HAL_GetTick>
 800c9b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9b8:	e005      	b.n	800c9c6 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9ba:	f7fa fdab 	bl	8007514 <HAL_GetTick>
 800c9be:	1b00      	subs	r0, r0, r4
 800c9c0:	2802      	cmp	r0, #2
 800c9c2:	f63f af35 	bhi.w	800c830 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9c6:	682b      	ldr	r3, [r5, #0]
 800c9c8:	019b      	lsls	r3, r3, #6
 800c9ca:	d4f6      	bmi.n	800c9ba <HAL_RCC_OscConfig+0x50a>
 800c9cc:	e69a      	b.n	800c704 <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800c9ce:	2001      	movs	r0, #1
}
 800c9d0:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800c9d2:	f240 2159 	movw	r1, #601	; 0x259
 800c9d6:	4805      	ldr	r0, [pc, #20]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c9d8:	f7f7 fe2c 	bl	8004634 <assert_failed>
 800c9dc:	e65c      	b.n	800c698 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800c9de:	f240 2157 	movw	r1, #599	; 0x257
 800c9e2:	4802      	ldr	r0, [pc, #8]	; (800c9ec <HAL_RCC_OscConfig+0x53c>)
 800c9e4:	f7f7 fe26 	bl	8004634 <assert_failed>
 800c9e8:	e651      	b.n	800c68e <HAL_RCC_OscConfig+0x1de>
 800c9ea:	bf00      	nop
 800c9ec:	0802b578 	.word	0x0802b578
 800c9f0:	40023800 	.word	0x40023800

0800c9f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c9f4:	4916      	ldr	r1, [pc, #88]	; (800ca50 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800c9f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c9f8:	688b      	ldr	r3, [r1, #8]
 800c9fa:	f003 030c 	and.w	r3, r3, #12
 800c9fe:	2b04      	cmp	r3, #4
 800ca00:	d01b      	beq.n	800ca3a <HAL_RCC_GetSysClockFreq+0x46>
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	d117      	bne.n	800ca36 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca06:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ca08:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca0e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ca10:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800ca14:	d113      	bne.n	800ca3e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca16:	480f      	ldr	r0, [pc, #60]	; (800ca54 <HAL_RCC_GetSysClockFreq+0x60>)
 800ca18:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ca1c:	fba1 0100 	umull	r0, r1, r1, r0
 800ca20:	f7f3 fcc6 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <HAL_RCC_GetSysClockFreq+0x5c>)
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800ca30:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ca34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800ca36:	4807      	ldr	r0, [pc, #28]	; (800ca54 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800ca38:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca3a:	4807      	ldr	r0, [pc, #28]	; (800ca58 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800ca3c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca3e:	4806      	ldr	r0, [pc, #24]	; (800ca58 <HAL_RCC_GetSysClockFreq+0x64>)
 800ca40:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800ca44:	2300      	movs	r3, #0
 800ca46:	fba1 0100 	umull	r0, r1, r1, r0
 800ca4a:	f7f3 fcb1 	bl	80003b0 <__aeabi_uldivmod>
 800ca4e:	e7e9      	b.n	800ca24 <HAL_RCC_GetSysClockFreq+0x30>
 800ca50:	40023800 	.word	0x40023800
 800ca54:	00f42400 	.word	0x00f42400
 800ca58:	007a1200 	.word	0x007a1200

0800ca5c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f000 80f6 	beq.w	800cc4e <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ca62:	6803      	ldr	r3, [r0, #0]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	2b0e      	cmp	r3, #14
{
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800ca70:	f200 80d6 	bhi.w	800cc20 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800ca74:	2d0f      	cmp	r5, #15
 800ca76:	f200 80c3 	bhi.w	800cc00 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca7a:	4a81      	ldr	r2, [pc, #516]	; (800cc80 <HAL_RCC_ClockConfig+0x224>)
 800ca7c:	6813      	ldr	r3, [r2, #0]
 800ca7e:	f003 030f 	and.w	r3, r3, #15
 800ca82:	42ab      	cmp	r3, r5
 800ca84:	d36f      	bcc.n	800cb66 <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	0798      	lsls	r0, r3, #30
 800ca8a:	d530      	bpl.n	800caee <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca8c:	0759      	lsls	r1, r3, #29
 800ca8e:	d504      	bpl.n	800ca9a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca90:	497c      	ldr	r1, [pc, #496]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800ca92:	688a      	ldr	r2, [r1, #8]
 800ca94:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800ca98:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca9a:	071a      	lsls	r2, r3, #28
 800ca9c:	d504      	bpl.n	800caa8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca9e:	4979      	ldr	r1, [pc, #484]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800caa0:	688a      	ldr	r2, [r1, #8]
 800caa2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800caa6:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800caa8:	68a1      	ldr	r1, [r4, #8]
 800caaa:	f021 0220 	bic.w	r2, r1, #32
 800caae:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800cab2:	2a90      	cmp	r2, #144	; 0x90
 800cab4:	bf18      	it	ne
 800cab6:	2800      	cmpne	r0, #0
 800cab8:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800cabc:	bf14      	ite	ne
 800cabe:	2201      	movne	r2, #1
 800cac0:	2200      	moveq	r2, #0
 800cac2:	29f0      	cmp	r1, #240	; 0xf0
 800cac4:	bf0c      	ite	eq
 800cac6:	2200      	moveq	r2, #0
 800cac8:	f002 0201 	andne.w	r2, r2, #1
 800cacc:	28a0      	cmp	r0, #160	; 0xa0
 800cace:	bf0c      	ite	eq
 800cad0:	2200      	moveq	r2, #0
 800cad2:	f002 0201 	andne.w	r2, r2, #1
 800cad6:	b122      	cbz	r2, 800cae2 <HAL_RCC_ClockConfig+0x86>
 800cad8:	f021 0210 	bic.w	r2, r1, #16
 800cadc:	2ac0      	cmp	r2, #192	; 0xc0
 800cade:	f040 80b8 	bne.w	800cc52 <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cae2:	4868      	ldr	r0, [pc, #416]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800cae4:	6882      	ldr	r2, [r0, #8]
 800cae6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800caea:	4311      	orrs	r1, r2
 800caec:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800caee:	07df      	lsls	r7, r3, #31
 800caf0:	d526      	bpl.n	800cb40 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800caf2:	6863      	ldr	r3, [r4, #4]
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	f200 80a1 	bhi.w	800cc3c <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cafa:	4a62      	ldr	r2, [pc, #392]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cafc:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cafe:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb00:	f000 8098 	beq.w	800cc34 <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	f000 8091 	beq.w	800cc2c <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb0a:	0791      	lsls	r1, r2, #30
 800cb0c:	d528      	bpl.n	800cb60 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb0e:	4e5d      	ldr	r6, [pc, #372]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb14:	68b2      	ldr	r2, [r6, #8]
 800cb16:	f022 0203 	bic.w	r2, r2, #3
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800cb1e:	f7fa fcf9 	bl	8007514 <HAL_GetTick>
 800cb22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb24:	e005      	b.n	800cb32 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb26:	f7fa fcf5 	bl	8007514 <HAL_GetTick>
 800cb2a:	1bc0      	subs	r0, r0, r7
 800cb2c:	4540      	cmp	r0, r8
 800cb2e:	f200 808c 	bhi.w	800cc4a <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb32:	68b3      	ldr	r3, [r6, #8]
 800cb34:	6862      	ldr	r2, [r4, #4]
 800cb36:	f003 030c 	and.w	r3, r3, #12
 800cb3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800cb3e:	d1f2      	bne.n	800cb26 <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb40:	4a4f      	ldr	r2, [pc, #316]	; (800cc80 <HAL_RCC_ClockConfig+0x224>)
 800cb42:	6813      	ldr	r3, [r2, #0]
 800cb44:	f003 030f 	and.w	r3, r3, #15
 800cb48:	42ab      	cmp	r3, r5
 800cb4a:	d91a      	bls.n	800cb82 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb4c:	6813      	ldr	r3, [r2, #0]
 800cb4e:	f023 030f 	bic.w	r3, r3, #15
 800cb52:	432b      	orrs	r3, r5
 800cb54:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb56:	6813      	ldr	r3, [r2, #0]
 800cb58:	f003 030f 	and.w	r3, r3, #15
 800cb5c:	42ab      	cmp	r3, r5
 800cb5e:	d010      	beq.n	800cb82 <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800cb60:	2001      	movs	r0, #1
}
 800cb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb66:	6813      	ldr	r3, [r2, #0]
 800cb68:	f023 030f 	bic.w	r3, r3, #15
 800cb6c:	432b      	orrs	r3, r5
 800cb6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb70:	6813      	ldr	r3, [r2, #0]
 800cb72:	f003 030f 	and.w	r3, r3, #15
 800cb76:	42ab      	cmp	r3, r5
 800cb78:	d1f2      	bne.n	800cb60 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	0798      	lsls	r0, r3, #30
 800cb7e:	d485      	bmi.n	800ca8c <HAL_RCC_ClockConfig+0x30>
 800cb80:	e7b5      	b.n	800caee <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	075a      	lsls	r2, r3, #29
 800cb86:	d512      	bpl.n	800cbae <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cb88:	68e1      	ldr	r1, [r4, #12]
 800cb8a:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800cb8e:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800cb92:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800cb96:	bf18      	it	ne
 800cb98:	2a00      	cmpne	r2, #0
 800cb9a:	d002      	beq.n	800cba2 <HAL_RCC_ClockConfig+0x146>
 800cb9c:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800cba0:	d15f      	bne.n	800cc62 <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cba2:	4838      	ldr	r0, [pc, #224]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800cba4:	6882      	ldr	r2, [r0, #8]
 800cba6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbae:	071b      	lsls	r3, r3, #28
 800cbb0:	d513      	bpl.n	800cbda <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cbb2:	6922      	ldr	r2, [r4, #16]
 800cbb4:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800cbb8:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800cbbc:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800cbc0:	bf18      	it	ne
 800cbc2:	2b00      	cmpne	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_RCC_ClockConfig+0x170>
 800cbc6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800cbca:	d152      	bne.n	800cc72 <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cbcc:	492d      	ldr	r1, [pc, #180]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800cbce:	688b      	ldr	r3, [r1, #8]
 800cbd0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800cbd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cbd8:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbda:	f7ff ff0b 	bl	800c9f4 <HAL_RCC_GetSysClockFreq>
 800cbde:	4a29      	ldr	r2, [pc, #164]	; (800cc84 <HAL_RCC_ClockConfig+0x228>)
 800cbe0:	4c29      	ldr	r4, [pc, #164]	; (800cc88 <HAL_RCC_ClockConfig+0x22c>)
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800cbe6:	4829      	ldr	r0, [pc, #164]	; (800cc8c <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbe8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800cbec:	4928      	ldr	r1, [pc, #160]	; (800cc90 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800cbee:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbf0:	5ca2      	ldrb	r2, [r4, r2]
 800cbf2:	40d3      	lsrs	r3, r2
 800cbf4:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800cbf6:	f7f9 fdf7 	bl	80067e8 <HAL_InitTick>
  return HAL_OK;
 800cbfa:	2000      	movs	r0, #0
}
 800cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800cc00:	f240 21de 	movw	r1, #734	; 0x2de
 800cc04:	4823      	ldr	r0, [pc, #140]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc06:	f7f7 fd15 	bl	8004634 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cc0a:	4b1d      	ldr	r3, [pc, #116]	; (800cc80 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800cc0c:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cc0e:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc10:	6819      	ldr	r1, [r3, #0]
 800cc12:	f021 010f 	bic.w	r1, r1, #15
 800cc16:	430d      	orrs	r5, r1
 800cc18:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc1a:	681b      	ldr	r3, [r3, #0]
}
 800cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800cc20:	f240 21dd 	movw	r1, #733	; 0x2dd
 800cc24:	481b      	ldr	r0, [pc, #108]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc26:	f7f7 fd05 	bl	8004634 <assert_failed>
 800cc2a:	e723      	b.n	800ca74 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc2c:	0190      	lsls	r0, r2, #6
 800cc2e:	f53f af6e 	bmi.w	800cb0e <HAL_RCC_ClockConfig+0xb2>
 800cc32:	e795      	b.n	800cb60 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc34:	0396      	lsls	r6, r2, #14
 800cc36:	f53f af6a 	bmi.w	800cb0e <HAL_RCC_ClockConfig+0xb2>
 800cc3a:	e791      	b.n	800cb60 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800cc3c:	f240 3109 	movw	r1, #777	; 0x309
 800cc40:	4814      	ldr	r0, [pc, #80]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc42:	f7f7 fcf7 	bl	8004634 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc46:	6863      	ldr	r3, [r4, #4]
 800cc48:	e757      	b.n	800cafa <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800cc4a:	2003      	movs	r0, #3
 800cc4c:	e789      	b.n	800cb62 <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800cc4e:	2001      	movs	r0, #1
}
 800cc50:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800cc52:	f240 3102 	movw	r1, #770	; 0x302
 800cc56:	480f      	ldr	r0, [pc, #60]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc58:	f7f7 fcec 	bl	8004634 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc5c:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	e73f      	b.n	800cae2 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800cc62:	f240 3146 	movw	r1, #838	; 0x346
 800cc66:	480b      	ldr	r0, [pc, #44]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc68:	f7f7 fce4 	bl	8004634 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc6c:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	e797      	b.n	800cba2 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800cc72:	f240 314d 	movw	r1, #845	; 0x34d
 800cc76:	4807      	ldr	r0, [pc, #28]	; (800cc94 <HAL_RCC_ClockConfig+0x238>)
 800cc78:	f7f7 fcdc 	bl	8004634 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cc7c:	6922      	ldr	r2, [r4, #16]
 800cc7e:	e7a5      	b.n	800cbcc <HAL_RCC_ClockConfig+0x170>
 800cc80:	40023c00 	.word	0x40023c00
 800cc84:	40023800 	.word	0x40023800
 800cc88:	0802abb4 	.word	0x0802abb4
 800cc8c:	200002dc 	.word	0x200002dc
 800cc90:	2000027c 	.word	0x2000027c
 800cc94:	0802b578 	.word	0x0802b578

0800cc98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800cc98:	4b01      	ldr	r3, [pc, #4]	; (800cca0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	2000027c 	.word	0x2000027c

0800cca4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cca4:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800cca6:	4905      	ldr	r1, [pc, #20]	; (800ccbc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	4a05      	ldr	r2, [pc, #20]	; (800ccc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ccac:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800ccb0:	6808      	ldr	r0, [r1, #0]
 800ccb2:	5cd3      	ldrb	r3, [r2, r3]
}
 800ccb4:	40d8      	lsrs	r0, r3
 800ccb6:	4770      	bx	lr
 800ccb8:	40023800 	.word	0x40023800
 800ccbc:	2000027c 	.word	0x2000027c
 800ccc0:	0802abc4 	.word	0x0802abc4

0800ccc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccc4:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ccc6:	4905      	ldr	r1, [pc, #20]	; (800ccdc <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cccc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800ccd0:	6808      	ldr	r0, [r1, #0]
 800ccd2:	5cd3      	ldrb	r3, [r2, r3]
}
 800ccd4:	40d8      	lsrs	r0, r3
 800ccd6:	4770      	bx	lr
 800ccd8:	40023800 	.word	0x40023800
 800ccdc:	2000027c 	.word	0x2000027c
 800cce0:	0802abc4 	.word	0x0802abc4

0800cce4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cce4:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cce6:	220f      	movs	r2, #15
 800cce8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ccea:	689a      	ldr	r2, [r3, #8]
 800ccec:	f002 0203 	and.w	r2, r2, #3
 800ccf0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ccf8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ccfa:	689a      	ldr	r2, [r3, #8]
 800ccfc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800cd00:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	08db      	lsrs	r3, r3, #3
{
 800cd06:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd08:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd0c:	4c05      	ldr	r4, [pc, #20]	; (800cd24 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd0e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd10:	6823      	ldr	r3, [r4, #0]
}
 800cd12:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	600b      	str	r3, [r1, #0]
}
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	40023800 	.word	0x40023800
 800cd24:	40023c00 	.word	0x40023c00

0800cd28 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800cd28:	4a56      	ldr	r2, [pc, #344]	; (800ce84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800cd2a:	6803      	ldr	r3, [r0, #0]
 800cd2c:	401a      	ands	r2, r3
{
 800cd2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd32:	4604      	mov	r4, r0
 800cd34:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800cd36:	2a00      	cmp	r2, #0
 800cd38:	f000 833f 	beq.w	800d3ba <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cd3c:	f013 0601 	ands.w	r6, r3, #1
 800cd40:	d00f      	beq.n	800cd62 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800cd42:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800cd44:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800cd48:	f040 8342 	bne.w	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd4c:	4a4e      	ldr	r2, [pc, #312]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cd4e:	6891      	ldr	r1, [r2, #8]
 800cd50:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800cd54:	6091      	str	r1, [r2, #8]
 800cd56:	6891      	ldr	r1, [r2, #8]
 800cd58:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cd5a:	fab6 f686 	clz	r6, r6
 800cd5e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd60:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cd62:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800cd66:	d014      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800cd68:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800cd6a:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800cd6e:	f040 838d 	bne.w	800d48c <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd72:	4945      	ldr	r1, [pc, #276]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cd74:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd78:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800cd7c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800cd80:	ea42 0205 	orr.w	r2, r2, r5
 800cd84:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cd88:	f000 831f 	beq.w	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cd8c:	fab5 f585 	clz	r5, r5
 800cd90:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cd92:	02d9      	lsls	r1, r3, #11
 800cd94:	d514      	bpl.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800cd96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd98:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800cd9c:	f040 837d 	bne.w	800d49a <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cda0:	4839      	ldr	r0, [pc, #228]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cda2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cda6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800cdaa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cdae:	ea42 0201 	orr.w	r2, r2, r1
 800cdb2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cdb6:	f000 8306 	beq.w	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800cdba:	2900      	cmp	r1, #0
 800cdbc:	bf08      	it	eq
 800cdbe:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800cdc0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800cdc4:	bf18      	it	ne
 800cdc6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cdc8:	069a      	lsls	r2, r3, #26
 800cdca:	f140 8099 	bpl.w	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800cdce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cdd0:	482e      	ldr	r0, [pc, #184]	; (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800cdd2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cdd6:	bf18      	it	ne
 800cdd8:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800cddc:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800cde0:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800cde4:	bf14      	ite	ne
 800cde6:	2301      	movne	r3, #1
 800cde8:	2300      	moveq	r3, #0
 800cdea:	4287      	cmp	r7, r0
 800cdec:	bf0c      	ite	eq
 800cdee:	2300      	moveq	r3, #0
 800cdf0:	f003 0301 	andne.w	r3, r3, #1
 800cdf4:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800cdf8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800cdfc:	4287      	cmp	r7, r0
 800cdfe:	bf0c      	ite	eq
 800ce00:	2300      	moveq	r3, #0
 800ce02:	f003 0301 	andne.w	r3, r3, #1
 800ce06:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ce0a:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800ce0e:	4281      	cmp	r1, r0
 800ce10:	bf0c      	ite	eq
 800ce12:	2300      	moveq	r3, #0
 800ce14:	f003 0301 	andne.w	r3, r3, #1
 800ce18:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800ce1c:	4287      	cmp	r7, r0
 800ce1e:	bf0c      	ite	eq
 800ce20:	2300      	moveq	r3, #0
 800ce22:	f003 0301 	andne.w	r3, r3, #1
 800ce26:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800ce2a:	4281      	cmp	r1, r0
 800ce2c:	bf0c      	ite	eq
 800ce2e:	2300      	moveq	r3, #0
 800ce30:	f003 0301 	andne.w	r3, r3, #1
 800ce34:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ce38:	4281      	cmp	r1, r0
 800ce3a:	bf0c      	ite	eq
 800ce3c:	2300      	moveq	r3, #0
 800ce3e:	f003 0301 	andne.w	r3, r3, #1
 800ce42:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800ce46:	4281      	cmp	r1, r0
 800ce48:	bf0c      	ite	eq
 800ce4a:	2300      	moveq	r3, #0
 800ce4c:	f003 0301 	andne.w	r3, r3, #1
 800ce50:	b12b      	cbz	r3, 800ce5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ce52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ce56:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	f040 8438 	bne.w	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce5e:	4b0a      	ldr	r3, [pc, #40]	; (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce60:	4f0c      	ldr	r7, [pc, #48]	; (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ce68:	641a      	str	r2, [r3, #64]	; 0x40
 800ce6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce7a:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce7c:	f7fa fb4a 	bl	8007514 <HAL_GetTick>
 800ce80:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce82:	e010      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ce84:	1dfffff9 	.word	0x1dfffff9
 800ce88:	40023800 	.word	0x40023800
 800ce8c:	00020300 	.word	0x00020300
 800ce90:	001c0300 	.word	0x001c0300
 800ce94:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce98:	f7fa fb3c 	bl	8007514 <HAL_GetTick>
 800ce9c:	eba0 0008 	sub.w	r0, r0, r8
 800cea0:	2864      	cmp	r0, #100	; 0x64
 800cea2:	f200 8286 	bhi.w	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	05db      	lsls	r3, r3, #23
 800ceaa:	d5f5      	bpl.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ceac:	4fb0      	ldr	r7, [pc, #704]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ceae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ceb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ceb2:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800ceb6:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800ceba:	d011      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800cebc:	4291      	cmp	r1, r2
 800cebe:	d00f      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cec0:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cec2:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800cec8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800cecc:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cece:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ced0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800ced4:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ced6:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ced8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ceda:	07d0      	lsls	r0, r2, #31
 800cedc:	f100 836c 	bmi.w	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cee0:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800cee4:	f000 82c9 	beq.w	800d47a <HAL_RCCEx_PeriphCLKConfig+0x752>
 800cee8:	49a1      	ldr	r1, [pc, #644]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800ceea:	688a      	ldr	r2, [r1, #8]
 800ceec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800cef0:	608a      	str	r2, [r1, #8]
 800cef2:	4a9f      	ldr	r2, [pc, #636]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cef8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800cefa:	430b      	orrs	r3, r1
 800cefc:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	06da      	lsls	r2, r3, #27
 800cf02:	d510      	bpl.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800cf04:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800cf06:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800cf0a:	f040 82db 	bne.w	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf0e:	4a98      	ldr	r2, [pc, #608]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf10:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800cf14:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800cf18:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800cf1c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800cf20:	4339      	orrs	r1, r7
 800cf22:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf26:	045f      	lsls	r7, r3, #17
 800cf28:	d50f      	bpl.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800cf2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cf2c:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800cf30:	d003      	beq.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800cf32:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800cf36:	f040 8299 	bne.w	800d46c <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf3a:	488d      	ldr	r0, [pc, #564]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf3c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800cf44:	430a      	orrs	r2, r1
 800cf46:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf4a:	0418      	lsls	r0, r3, #16
 800cf4c:	d50f      	bpl.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800cf4e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800cf50:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800cf54:	d003      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800cf56:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800cf5a:	f040 826a 	bne.w	800d432 <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf5e:	4884      	ldr	r0, [pc, #528]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf60:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf64:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf6e:	03d9      	lsls	r1, r3, #15
 800cf70:	d50f      	bpl.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800cf72:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cf74:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800cf78:	d003      	beq.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800cf7a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800cf7e:	f040 8260 	bne.w	800d442 <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf82:	487b      	ldr	r0, [pc, #492]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cf84:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cf88:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf92:	039a      	lsls	r2, r3, #14
 800cf94:	d50f      	bpl.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800cf96:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cf98:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800cf9c:	d003      	beq.n	800cfa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800cf9e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800cfa2:	f040 825b 	bne.w	800d45c <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cfa6:	4872      	ldr	r0, [pc, #456]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cfa8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cfac:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cfb6:	065f      	lsls	r7, r3, #25
 800cfb8:	d50b      	bpl.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800cfba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cfbc:	2903      	cmp	r1, #3
 800cfbe:	f200 82b3 	bhi.w	800d528 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cfc2:	486b      	ldr	r0, [pc, #428]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cfc4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cfc8:	f022 0203 	bic.w	r2, r2, #3
 800cfcc:	430a      	orrs	r2, r1
 800cfce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cfd2:	0618      	lsls	r0, r3, #24
 800cfd4:	d50c      	bpl.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800cfd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cfd8:	f031 020c 	bics.w	r2, r1, #12
 800cfdc:	f040 82b4 	bne.w	800d548 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cfe0:	4863      	ldr	r0, [pc, #396]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800cfe2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800cfe6:	f022 020c 	bic.w	r2, r2, #12
 800cfea:	430a      	orrs	r2, r1
 800cfec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cff0:	05d9      	lsls	r1, r3, #23
 800cff2:	d50c      	bpl.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800cff4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cff6:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800cffa:	f040 82ad 	bne.w	800d558 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cffe:	485c      	ldr	r0, [pc, #368]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d000:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d004:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800d008:	430a      	orrs	r2, r1
 800d00a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d00e:	059a      	lsls	r2, r3, #22
 800d010:	d50c      	bpl.n	800d02c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d012:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d014:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800d018:	f040 82a6 	bne.w	800d568 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d01c:	4854      	ldr	r0, [pc, #336]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d01e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d022:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d026:	430a      	orrs	r2, r1
 800d028:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d02c:	055f      	lsls	r7, r3, #21
 800d02e:	d50c      	bpl.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d030:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d032:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800d036:	f040 829f 	bne.w	800d578 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d03a:	484d      	ldr	r0, [pc, #308]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d03c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d040:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d044:	430a      	orrs	r2, r1
 800d046:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d04a:	0518      	lsls	r0, r3, #20
 800d04c:	d50c      	bpl.n	800d068 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800d04e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d050:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800d054:	f040 8298 	bne.w	800d588 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d058:	4845      	ldr	r0, [pc, #276]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d05a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d05e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d062:	430a      	orrs	r2, r1
 800d064:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d068:	04d9      	lsls	r1, r3, #19
 800d06a:	d50c      	bpl.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800d06c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d06e:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800d072:	f040 8291 	bne.w	800d598 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d076:	483e      	ldr	r0, [pc, #248]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d078:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d07c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d080:	430a      	orrs	r2, r1
 800d082:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d086:	049a      	lsls	r2, r3, #18
 800d088:	d50c      	bpl.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800d08a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800d08c:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800d090:	f040 828a 	bne.w	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d094:	4836      	ldr	r0, [pc, #216]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d096:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d09a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d0a4:	025f      	lsls	r7, r3, #9
 800d0a6:	d50c      	bpl.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800d0a8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800d0aa:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800d0ae:	f040 8222 	bne.w	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d0b2:	482f      	ldr	r0, [pc, #188]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d0b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d0b8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d0bc:	430a      	orrs	r2, r1
 800d0be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d0c2:	0298      	lsls	r0, r3, #10
 800d0c4:	d510      	bpl.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800d0c6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d0c8:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800d0cc:	f040 821b 	bne.w	800d506 <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d0d0:	4827      	ldr	r0, [pc, #156]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800d0d2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d0d6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800d0da:	bf08      	it	eq
 800d0dc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d0de:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800d0e8:	f013 0f08 	tst.w	r3, #8
 800d0ec:	bf18      	it	ne
 800d0ee:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0f0:	0359      	lsls	r1, r3, #13
 800d0f2:	d50c      	bpl.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800d0f4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d0f6:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800d0fa:	f040 821d 	bne.w	800d538 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0fe:	481c      	ldr	r0, [pc, #112]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d100:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d104:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800d108:	430a      	orrs	r2, r1
 800d10a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d10e:	021a      	lsls	r2, r3, #8
 800d110:	d50d      	bpl.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800d112:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d116:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800d11a:	f040 81fc 	bne.w	800d516 <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d11e:	4814      	ldr	r0, [pc, #80]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d120:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d124:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d128:	430a      	orrs	r2, r1
 800d12a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d12e:	015f      	lsls	r7, r3, #5
 800d130:	d50d      	bpl.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800d132:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800d136:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800d13a:	f040 81ca 	bne.w	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d13e:	480c      	ldr	r0, [pc, #48]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d140:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800d144:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800d148:	430a      	orrs	r2, r1
 800d14a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d14e:	0118      	lsls	r0, r3, #4
 800d150:	d510      	bpl.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800d152:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800d156:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800d15a:	f040 81c3 	bne.w	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d15e:	4804      	ldr	r0, [pc, #16]	; (800d170 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800d160:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800d164:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800d168:	430a      	orrs	r2, r1
 800d16a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800d16e:	e001      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800d170:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d174:	00d9      	lsls	r1, r3, #3
 800d176:	d50d      	bpl.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800d178:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d17c:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800d180:	f040 8198 	bne.w	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d184:	49b3      	ldr	r1, [pc, #716]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d186:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800d18a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d18e:	4313      	orrs	r3, r2
 800d190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d194:	2e01      	cmp	r6, #1
 800d196:	d003      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	019a      	lsls	r2, r3, #6
 800d19c:	f140 8083 	bpl.w	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1a0:	4eac      	ldr	r6, [pc, #688]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d1a2:	6833      	ldr	r3, [r6, #0]
 800d1a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1a8:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1aa:	f7fa f9b3 	bl	8007514 <HAL_GetTick>
 800d1ae:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1b0:	e005      	b.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d1b2:	f7fa f9af 	bl	8007514 <HAL_GetTick>
 800d1b6:	1bc0      	subs	r0, r0, r7
 800d1b8:	2864      	cmp	r0, #100	; 0x64
 800d1ba:	f200 80fa 	bhi.w	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1be:	6833      	ldr	r3, [r6, #0]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	d4f6      	bmi.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800d1c4:	6863      	ldr	r3, [r4, #4]
 800d1c6:	3b32      	subs	r3, #50	; 0x32
 800d1c8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d1cc:	f200 816c 	bhi.w	800d4a8 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	07df      	lsls	r7, r3, #31
 800d1d4:	d517      	bpl.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d1d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d1d8:	b9aa      	cbnz	r2, 800d206 <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d1da:	68a7      	ldr	r7, [r4, #8]
 800d1dc:	1eba      	subs	r2, r7, #2
 800d1de:	2a05      	cmp	r2, #5
 800d1e0:	f200 820c 	bhi.w	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d1e4:	499b      	ldr	r1, [pc, #620]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d1e6:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d1e8:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d1ec:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d1f0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800d1f4:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800d1f8:	4332      	orrs	r2, r6
 800d1fa:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800d1fe:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800d202:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d206:	031e      	lsls	r6, r3, #12
 800d208:	f100 80e9 	bmi.w	800d3de <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800d20c:	02d8      	lsls	r0, r3, #11
 800d20e:	d504      	bpl.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d210:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d212:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800d216:	f000 80e7 	beq.w	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d21a:	01d9      	lsls	r1, r3, #7
 800d21c:	d514      	bpl.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d21e:	6927      	ldr	r7, [r4, #16]
 800d220:	2f03      	cmp	r7, #3
 800d222:	f200 81f9 	bhi.w	800d618 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d226:	498b      	ldr	r1, [pc, #556]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d228:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d22a:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d22e:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d232:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800d236:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800d23a:	4332      	orrs	r2, r6
 800d23c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800d240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800d244:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d248:	019a      	lsls	r2, r3, #6
 800d24a:	d51a      	bpl.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	2b03      	cmp	r3, #3
 800d250:	f200 81dc 	bhi.w	800d60c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d254:	68a3      	ldr	r3, [r4, #8]
 800d256:	3b02      	subs	r3, #2
 800d258:	2b05      	cmp	r3, #5
 800d25a:	f200 81ec 	bhi.w	800d636 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d25e:	68e2      	ldr	r2, [r4, #12]
 800d260:	1e93      	subs	r3, r2, #2
 800d262:	2b0d      	cmp	r3, #13
 800d264:	f200 81e0 	bhi.w	800d628 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	6861      	ldr	r1, [r4, #4]
 800d26c:	041b      	lsls	r3, r3, #16
 800d26e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d272:	68a1      	ldr	r1, [r4, #8]
 800d274:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d278:	4976      	ldr	r1, [pc, #472]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d27a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d27e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d282:	4e74      	ldr	r6, [pc, #464]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d284:	6833      	ldr	r3, [r6, #0]
 800d286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d28a:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d28c:	f7fa f942 	bl	8007514 <HAL_GetTick>
 800d290:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d292:	e005      	b.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d294:	f7fa f93e 	bl	8007514 <HAL_GetTick>
 800d298:	1bc0      	subs	r0, r0, r7
 800d29a:	2864      	cmp	r0, #100	; 0x64
 800d29c:	f200 8089 	bhi.w	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d2a0:	6833      	ldr	r3, [r6, #0]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	d5f6      	bpl.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d2a6:	2d01      	cmp	r5, #1
 800d2a8:	d003      	beq.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800d2aa:	2000      	movs	r0, #0
}
 800d2ac:	b003      	add	sp, #12
 800d2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800d2b2:	4d68      	ldr	r5, [pc, #416]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2ba:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d2bc:	f7fa f92a 	bl	8007514 <HAL_GetTick>
 800d2c0:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2c2:	e004      	b.n	800d2ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d2c4:	f7fa f926 	bl	8007514 <HAL_GetTick>
 800d2c8:	1b80      	subs	r0, r0, r6
 800d2ca:	2864      	cmp	r0, #100	; 0x64
 800d2cc:	d871      	bhi.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	009f      	lsls	r7, r3, #2
 800d2d2:	d4f7      	bmi.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800d2d4:	6963      	ldr	r3, [r4, #20]
 800d2d6:	3b32      	subs	r3, #50	; 0x32
 800d2d8:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d2dc:	f200 81b9 	bhi.w	800d652 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	031d      	lsls	r5, r3, #12
 800d2e4:	f140 81ad 	bpl.w	800d642 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800d2e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	f040 81a9 	bne.w	800d642 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800d2f0:	69a3      	ldr	r3, [r4, #24]
 800d2f2:	3b02      	subs	r3, #2
 800d2f4:	2b0d      	cmp	r3, #13
 800d2f6:	f200 81d5 	bhi.w	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800d2fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d2fc:	1e59      	subs	r1, r3, #1
 800d2fe:	291f      	cmp	r1, #31
 800d300:	f200 81c8 	bhi.w	800d694 <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d304:	4a53      	ldr	r2, [pc, #332]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d306:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d30a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d30e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d312:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d316:	4303      	orrs	r3, r0
 800d318:	6960      	ldr	r0, [r4, #20]
 800d31a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d31e:	69a0      	ldr	r0, [r4, #24]
 800d320:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d328:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d32c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800d330:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d334:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	0299      	lsls	r1, r3, #10
 800d33c:	d504      	bpl.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800d33e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d340:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800d344:	f000 818b 	beq.w	800d65e <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d348:	071a      	lsls	r2, r3, #28
 800d34a:	d522      	bpl.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800d34c:	69e3      	ldr	r3, [r4, #28]
 800d34e:	3b02      	subs	r3, #2
 800d350:	2b05      	cmp	r3, #5
 800d352:	f200 8199 	bhi.w	800d688 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800d356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d358:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800d35c:	f040 81a8 	bne.w	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d360:	4a3c      	ldr	r2, [pc, #240]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d362:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d364:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d368:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d36c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800d370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d374:	430b      	orrs	r3, r1
 800d376:	69e1      	ldr	r1, [r4, #28]
 800d378:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800d37c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d384:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d388:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d38c:	4303      	orrs	r3, r0
 800d38e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800d392:	4c30      	ldr	r4, [pc, #192]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d39a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800d39c:	f7fa f8ba 	bl	8007514 <HAL_GetTick>
 800d3a0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	d480      	bmi.n	800d2aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d3a8:	f7fa f8b4 	bl	8007514 <HAL_GetTick>
 800d3ac:	1b40      	subs	r0, r0, r5
 800d3ae:	2864      	cmp	r0, #100	; 0x64
 800d3b0:	d9f7      	bls.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800d3b2:	2003      	movs	r0, #3
}
 800d3b4:	b003      	add	sp, #12
 800d3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d3ba:	2172      	movs	r1, #114	; 0x72
 800d3bc:	4826      	ldr	r0, [pc, #152]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d3be:	f7f7 f939 	bl	8004634 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	e4ba      	b.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800d3c6:	2601      	movs	r6, #1
 800d3c8:	e4fa      	b.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800d3ca:	2500      	movs	r5, #0
      plli2sused = 1;
 800d3cc:	2601      	movs	r6, #1
 800d3ce:	e4e0      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d3d0:	2178      	movs	r1, #120	; 0x78
 800d3d2:	4821      	ldr	r0, [pc, #132]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d3d4:	f7f7 f92e 	bl	8004634 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d3d8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	e4b6      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d3de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d3e0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d3e4:	f47f af12 	bne.w	800d20c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d3e8:	68e3      	ldr	r3, [r4, #12]
 800d3ea:	3b02      	subs	r3, #2
 800d3ec:	2b0d      	cmp	r3, #13
 800d3ee:	f200 80f7 	bhi.w	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800d3f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f4:	1e59      	subs	r1, r3, #1
 800d3f6:	291f      	cmp	r1, #31
 800d3f8:	f200 80f8 	bhi.w	800d5ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d3fc:	4a15      	ldr	r2, [pc, #84]	; (800d454 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800d3fe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d402:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d40a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d40e:	4303      	orrs	r3, r0
 800d410:	6860      	ldr	r0, [r4, #4]
 800d412:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d416:	68e0      	ldr	r0, [r4, #12]
 800d418:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d41c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d420:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d424:	f023 031f 	bic.w	r3, r3, #31
 800d428:	430b      	orrs	r3, r1
 800d42a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	e6f3      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800d432:	f240 1105 	movw	r1, #261	; 0x105
 800d436:	4808      	ldr	r0, [pc, #32]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d438:	f7f7 f8fc 	bl	8004634 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d43c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	e58d      	b.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800d442:	f240 110f 	movw	r1, #271	; 0x10f
 800d446:	4804      	ldr	r0, [pc, #16]	; (800d458 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800d448:	f7f7 f8f4 	bl	8004634 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d44c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	e597      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d452:	bf00      	nop
 800d454:	40023800 	.word	0x40023800
 800d458:	0802b5b0 	.word	0x0802b5b0
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800d45c:	f240 1119 	movw	r1, #281	; 0x119
 800d460:	489e      	ldr	r0, [pc, #632]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d462:	f7f7 f8e7 	bl	8004634 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d466:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	e59c      	b.n	800cfa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800d46c:	21fb      	movs	r1, #251	; 0xfb
 800d46e:	489b      	ldr	r0, [pc, #620]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d470:	f7f7 f8e0 	bl	8004634 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d474:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	e55f      	b.n	800cf3a <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d47a:	4899      	ldr	r0, [pc, #612]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d47c:	4999      	ldr	r1, [pc, #612]	; (800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800d47e:	6882      	ldr	r2, [r0, #8]
 800d480:	4019      	ands	r1, r3
 800d482:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d486:	430a      	orrs	r2, r1
 800d488:	6082      	str	r2, [r0, #8]
 800d48a:	e532      	b.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d48c:	2188      	movs	r1, #136	; 0x88
 800d48e:	4893      	ldr	r0, [pc, #588]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d490:	f7f7 f8d0 	bl	8004634 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d494:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	e46b      	b.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800d49a:	219c      	movs	r1, #156	; 0x9c
 800d49c:	488f      	ldr	r0, [pc, #572]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d49e:	f7f7 f8c9 	bl	8004634 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d4a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	e47b      	b.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800d4a8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800d4ac:	488b      	ldr	r0, [pc, #556]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4ae:	f7f7 f8c1 	bl	8004634 <assert_failed>
 800d4b2:	e68d      	b.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800d4b4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800d4b8:	4888      	ldr	r0, [pc, #544]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4ba:	f7f7 f8bb 	bl	8004634 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d4be:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d4c2:	e65f      	b.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800d4c4:	21f1      	movs	r1, #241	; 0xf1
 800d4c6:	4885      	ldr	r0, [pc, #532]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4c8:	f7f7 f8b4 	bl	8004634 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d4cc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	e51d      	b.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800d4d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d4d6:	4881      	ldr	r0, [pc, #516]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4d8:	f7f7 f8ac 	bl	8004634 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d4dc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	e62c      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800d4e4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d4e8:	487c      	ldr	r0, [pc, #496]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4ea:	f7f7 f8a3 	bl	8004634 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d4ee:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	e633      	b.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800d4f6:	f240 1173 	movw	r1, #371	; 0x173
 800d4fa:	4878      	ldr	r0, [pc, #480]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d4fc:	f7f7 f89a 	bl	8004634 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d500:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	e5d5      	b.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800d506:	f240 117d 	movw	r1, #381	; 0x17d
 800d50a:	4874      	ldr	r0, [pc, #464]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d50c:	f7f7 f892 	bl	8004634 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d510:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	e5dc      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800d516:	f240 119f 	movw	r1, #415	; 0x19f
 800d51a:	4870      	ldr	r0, [pc, #448]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d51c:	f7f7 f88a 	bl	8004634 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d520:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	e5fa      	b.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800d528:	f240 1123 	movw	r1, #291	; 0x123
 800d52c:	486b      	ldr	r0, [pc, #428]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d52e:	f7f7 f881 	bl	8004634 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d532:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	e544      	b.n	800cfc2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800d538:	f240 1195 	movw	r1, #405	; 0x195
 800d53c:	4867      	ldr	r0, [pc, #412]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d53e:	f7f7 f879 	bl	8004634 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d542:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	e5da      	b.n	800d0fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800d548:	f240 112d 	movw	r1, #301	; 0x12d
 800d54c:	4863      	ldr	r0, [pc, #396]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d54e:	f7f7 f871 	bl	8004634 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d552:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	e543      	b.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800d558:	f240 1137 	movw	r1, #311	; 0x137
 800d55c:	485f      	ldr	r0, [pc, #380]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d55e:	f7f7 f869 	bl	8004634 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d562:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	e54a      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800d568:	f240 1141 	movw	r1, #321	; 0x141
 800d56c:	485b      	ldr	r0, [pc, #364]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d56e:	f7f7 f861 	bl	8004634 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d572:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	e551      	b.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800d578:	f240 114b 	movw	r1, #331	; 0x14b
 800d57c:	4857      	ldr	r0, [pc, #348]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d57e:	f7f7 f859 	bl	8004634 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d582:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	e558      	b.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800d588:	f240 1155 	movw	r1, #341	; 0x155
 800d58c:	4853      	ldr	r0, [pc, #332]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d58e:	f7f7 f851 	bl	8004634 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d592:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	e55f      	b.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800d598:	f240 115f 	movw	r1, #351	; 0x15f
 800d59c:	484f      	ldr	r0, [pc, #316]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d59e:	f7f7 f849 	bl	8004634 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d5a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	e566      	b.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800d5a8:	f240 1169 	movw	r1, #361	; 0x169
 800d5ac:	484b      	ldr	r0, [pc, #300]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d5ae:	f7f7 f841 	bl	8004634 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d5b2:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	e56d      	b.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800d5b8:	f7f9 ffac 	bl	8007514 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d5bc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800d5c0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5c2:	e006      	b.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d5c4:	f7f9 ffa6 	bl	8007514 <HAL_GetTick>
 800d5c8:	eba0 0008 	sub.w	r0, r0, r8
 800d5cc:	4548      	cmp	r0, r9
 800d5ce:	f63f aef0 	bhi.w	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5d4:	0799      	lsls	r1, r3, #30
 800d5d6:	d5f5      	bpl.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d5d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d5da:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800d5de:	e47f      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d5e0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800d5e4:	483d      	ldr	r0, [pc, #244]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d5e6:	f7f7 f825 	bl	8004634 <assert_failed>
 800d5ea:	e702      	b.n	800d3f2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800d5ec:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800d5f0:	483a      	ldr	r0, [pc, #232]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d5f2:	f7f7 f81f 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f8:	1e59      	subs	r1, r3, #1
 800d5fa:	e6ff      	b.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d5fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800d600:	4836      	ldr	r0, [pc, #216]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d602:	f7f7 f817 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d606:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	e5eb      	b.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d60c:	f44f 7105 	mov.w	r1, #532	; 0x214
 800d610:	4832      	ldr	r0, [pc, #200]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d612:	f7f7 f80f 	bl	8004634 <assert_failed>
 800d616:	e61d      	b.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800d618:	f240 2105 	movw	r1, #517	; 0x205
 800d61c:	482f      	ldr	r0, [pc, #188]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d61e:	f7f7 f809 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d622:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	e5fe      	b.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800d628:	f240 2116 	movw	r1, #534	; 0x216
 800d62c:	482b      	ldr	r0, [pc, #172]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d62e:	f7f7 f801 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d632:	68e2      	ldr	r2, [r4, #12]
 800d634:	e618      	b.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800d636:	f240 2115 	movw	r1, #533	; 0x215
 800d63a:	4828      	ldr	r0, [pc, #160]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d63c:	f7f6 fffa 	bl	8004634 <assert_failed>
 800d640:	e60d      	b.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d642:	02d8      	lsls	r0, r3, #11
 800d644:	f57f ae79 	bpl.w	800d33a <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d648:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	f47f ae75 	bne.w	800d33a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800d650:	e64e      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800d652:	f44f 7111 	mov.w	r1, #580	; 0x244
 800d656:	4821      	ldr	r0, [pc, #132]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d658:	f7f6 ffec 	bl	8004634 <assert_failed>
 800d65c:	e640      	b.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800d65e:	6a20      	ldr	r0, [r4, #32]
 800d660:	2803      	cmp	r0, #3
 800d662:	d82c      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d664:	491e      	ldr	r1, [pc, #120]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d666:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d66a:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d66e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800d672:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800d676:	432a      	orrs	r2, r5
 800d678:	6965      	ldr	r5, [r4, #20]
 800d67a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800d67e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d682:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800d686:	e65f      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800d688:	f240 216f 	movw	r1, #623	; 0x26f
 800d68c:	4813      	ldr	r0, [pc, #76]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d68e:	f7f6 ffd1 	bl	8004634 <assert_failed>
 800d692:	e660      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800d694:	f240 214d 	movw	r1, #589	; 0x24d
 800d698:	4810      	ldr	r0, [pc, #64]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d69a:	f7f6 ffcb 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d69e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d6a0:	1e59      	subs	r1, r3, #1
 800d6a2:	e62f      	b.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800d6a4:	f240 214b 	movw	r1, #587	; 0x24b
 800d6a8:	480c      	ldr	r0, [pc, #48]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d6aa:	f7f6 ffc3 	bl	8004634 <assert_failed>
 800d6ae:	e624      	b.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800d6b0:	480a      	ldr	r0, [pc, #40]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d6b2:	f44f 711c 	mov.w	r1, #624	; 0x270
 800d6b6:	f7f6 ffbd 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d6ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6bc:	e650      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800d6be:	4807      	ldr	r0, [pc, #28]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d6c0:	f44f 7118 	mov.w	r1, #608	; 0x260
 800d6c4:	f7f6 ffb6 	bl	8004634 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d6c8:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	e7ca      	b.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d6ce:	21b7      	movs	r1, #183	; 0xb7
 800d6d0:	4802      	ldr	r0, [pc, #8]	; (800d6dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800d6d2:	f7f6 ffaf 	bl	8004634 <assert_failed>
 800d6d6:	f7ff bbc2 	b.w	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d6da:	bf00      	nop
 800d6dc:	0802b5b0 	.word	0x0802b5b0
 800d6e0:	40023800 	.word	0x40023800
 800d6e4:	0ffffcff 	.word	0x0ffffcff

0800d6e8 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d6e8:	b308      	cbz	r0, 800d72e <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800d6ea:	4b12      	ldr	r3, [pc, #72]	; (800d734 <HAL_RNG_Init+0x4c>)
 800d6ec:	6802      	ldr	r2, [r0, #0]
 800d6ee:	429a      	cmp	r2, r3
{
 800d6f0:	b510      	push	{r4, lr}
 800d6f2:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800d6f4:	d003      	beq.n	800d6fe <HAL_RNG_Init+0x16>
 800d6f6:	21a3      	movs	r1, #163	; 0xa3
 800d6f8:	480f      	ldr	r0, [pc, #60]	; (800d738 <HAL_RNG_Init+0x50>)
 800d6fa:	f7f6 ff9b 	bl	8004634 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d6fe:	7963      	ldrb	r3, [r4, #5]
 800d700:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d704:	b173      	cbz	r3, 800d724 <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d706:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800d708:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d70a:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800d70c:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800d710:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800d712:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800d714:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800d716:	f043 0304 	orr.w	r3, r3, #4
 800d71a:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800d71c:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d720:	60a2      	str	r2, [r4, #8]
}
 800d722:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800d724:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800d726:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800d728:	f7f8 fade 	bl	8005ce8 <HAL_RNG_MspInit>
 800d72c:	e7eb      	b.n	800d706 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800d72e:	2001      	movs	r0, #1
}
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	50060800 	.word	0x50060800
 800d738:	0802b5ec 	.word	0x0802b5ec

0800d73c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800d73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73e:	460c      	mov	r4, r1
 800d740:	4615      	mov	r5, r2
 800d742:	b083      	sub	sp, #12
 800d744:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d746:	4425      	add	r5, r4
 800d748:	f7f9 fee4 	bl	8007514 <HAL_GetTick>
 800d74c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800d74e:	f7f9 fee1 	bl	8007514 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d752:	4b25      	ldr	r3, [pc, #148]	; (800d7e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800d754:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800d75c:	fb05 f303 	mul.w	r3, r5, r3
 800d760:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d762:	6832      	ldr	r2, [r6, #0]
 800d764:	e001      	b.n	800d76a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d766:	1c63      	adds	r3, r4, #1
 800d768:	d106      	bne.n	800d778 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d76a:	6893      	ldr	r3, [r2, #8]
 800d76c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800d770:	d1f9      	bne.n	800d766 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800d772:	4618      	mov	r0, r3
}
 800d774:	b003      	add	sp, #12
 800d776:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d778:	f7f9 fecc 	bl	8007514 <HAL_GetTick>
 800d77c:	1bc0      	subs	r0, r0, r7
 800d77e:	42a8      	cmp	r0, r5
 800d780:	d208      	bcs.n	800d794 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800d782:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800d784:	2b00      	cmp	r3, #0
      count--;
 800d786:	9b01      	ldr	r3, [sp, #4]
 800d788:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d78c:	bf08      	it	eq
 800d78e:	2500      	moveq	r5, #0
      count--;
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	e7e6      	b.n	800d762 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d794:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d798:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d79a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d79e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d7a2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7a4:	d014      	beq.n	800d7d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d7a6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800d7a8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d7ac:	d007      	beq.n	800d7be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800d7ae:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800d7b0:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800d7b2:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800d7b4:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d7b8:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d7bc:	e7da      	b.n	800d774 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	e7ee      	b.n	800d7ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d7d0:	68b2      	ldr	r2, [r6, #8]
 800d7d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d7d6:	d002      	beq.n	800d7de <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800d7d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d7dc:	d1e3      	bne.n	800d7a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	e7de      	b.n	800d7a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800d7e8:	2000027c 	.word	0x2000027c

0800d7ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7f0:	4615      	mov	r5, r2
 800d7f2:	4698      	mov	r8, r3
 800d7f4:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d7f6:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d7f8:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d7fa:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800d7fc:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800d800:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d802:	f7f9 fe87 	bl	8007514 <HAL_GetTick>
 800d806:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800d80a:	f7f9 fe83 	bl	8007514 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d80e:	4b2e      	ldr	r3, [pc, #184]	; (800d8c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d810:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800d814:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d816:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800d818:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d81a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d81e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d822:	0d1b      	lsrs	r3, r3, #20
 800d824:	fb07 f303 	mul.w	r3, r7, r3
 800d828:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800d82a:	e00b      	b.n	800d844 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d82c:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800d830:	d106      	bne.n	800d840 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d832:	f899 300c 	ldrb.w	r3, [r9, #12]
 800d836:	b2db      	uxtb	r3, r3
 800d838:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d83c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d840:	1c6b      	adds	r3, r5, #1
 800d842:	d106      	bne.n	800d852 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800d844:	6893      	ldr	r3, [r2, #8]
 800d846:	4023      	ands	r3, r4
 800d848:	d1f0      	bne.n	800d82c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800d84a:	4618      	mov	r0, r3
}
 800d84c:	b003      	add	sp, #12
 800d84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d852:	f7f9 fe5f 	bl	8007514 <HAL_GetTick>
 800d856:	eba0 0008 	sub.w	r0, r0, r8
 800d85a:	42b8      	cmp	r0, r7
 800d85c:	d209      	bcs.n	800d872 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800d85e:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800d860:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800d862:	2b00      	cmp	r3, #0
      count--;
 800d864:	9b01      	ldr	r3, [sp, #4]
 800d866:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800d86a:	bf08      	it	eq
 800d86c:	2700      	moveq	r7, #0
      count--;
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	e7e8      	b.n	800d844 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d872:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d876:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d878:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d87c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d880:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d882:	d014      	beq.n	800d8ae <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d884:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800d886:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d88a:	d007      	beq.n	800d89c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800d88c:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800d88e:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800d890:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800d892:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800d896:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800d89a:	e7d7      	b.n	800d84c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	e7ee      	b.n	800d88c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8ae:	68b2      	ldr	r2, [r6, #8]
 800d8b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d8b4:	d002      	beq.n	800d8bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800d8b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d8ba:	d1e3      	bne.n	800d884 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e7de      	b.n	800d884 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800d8c6:	bf00      	nop
 800d8c8:	2000027c 	.word	0x2000027c

0800d8cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	460e      	mov	r6, r1
 800d8d4:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d8d6:	9201      	str	r2, [sp, #4]
 800d8d8:	460a      	mov	r2, r1
 800d8da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d8de:	f7ff ff85 	bl	800d7ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	bb58      	cbnz	r0, 800d93e <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d8e6:	4919      	ldr	r1, [pc, #100]	; (800d94c <SPI_EndRxTxTransaction+0x80>)
 800d8e8:	4a19      	ldr	r2, [pc, #100]	; (800d950 <SPI_EndRxTxTransaction+0x84>)
 800d8ea:	6808      	ldr	r0, [r1, #0]
 800d8ec:	fba2 2000 	umull	r2, r0, r2, r0
 800d8f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8f4:	0d40      	lsrs	r0, r0, #21
 800d8f6:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8fa:	686a      	ldr	r2, [r5, #4]
 800d8fc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d900:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d902:	d107      	bne.n	800d914 <SPI_EndRxTxTransaction+0x48>
 800d904:	e012      	b.n	800d92c <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800d906:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d908:	682a      	ldr	r2, [r5, #0]
      count--;
 800d90a:	3c01      	subs	r4, #1
 800d90c:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d90e:	6894      	ldr	r4, [r2, #8]
 800d910:	0622      	lsls	r2, r4, #24
 800d912:	d502      	bpl.n	800d91a <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800d914:	9c03      	ldr	r4, [sp, #12]
 800d916:	2c00      	cmp	r4, #0
 800d918:	d1f5      	bne.n	800d906 <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d91a:	4632      	mov	r2, r6
 800d91c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d920:	4628      	mov	r0, r5
 800d922:	f7ff ff63 	bl	800d7ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800d926:	b950      	cbnz	r0, 800d93e <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800d928:	b004      	add	sp, #16
 800d92a:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d92c:	461a      	mov	r2, r3
 800d92e:	4631      	mov	r1, r6
 800d930:	4628      	mov	r0, r5
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	f7ff ff02 	bl	800d73c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800d938:	9b01      	ldr	r3, [sp, #4]
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d0ed      	beq.n	800d91a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d93e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800d940:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d942:	f043 0320 	orr.w	r3, r3, #32
 800d946:	662b      	str	r3, [r5, #96]	; 0x60
}
 800d948:	b004      	add	sp, #16
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	2000027c 	.word	0x2000027c
 800d950:	165e9f81 	.word	0x165e9f81

0800d954 <HAL_SPI_Init>:
  if (hspi == NULL)
 800d954:	2800      	cmp	r0, #0
 800d956:	f000 8128 	beq.w	800dbaa <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d95a:	6802      	ldr	r2, [r0, #0]
 800d95c:	4ba7      	ldr	r3, [pc, #668]	; (800dbfc <HAL_SPI_Init+0x2a8>)
 800d95e:	49a8      	ldr	r1, [pc, #672]	; (800dc00 <HAL_SPI_Init+0x2ac>)
{
 800d960:	b570      	push	{r4, r5, r6, lr}
 800d962:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d964:	48a7      	ldr	r0, [pc, #668]	; (800dc04 <HAL_SPI_Init+0x2b0>)
 800d966:	429a      	cmp	r2, r3
 800d968:	bf18      	it	ne
 800d96a:	4282      	cmpne	r2, r0
 800d96c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d970:	bf14      	ite	ne
 800d972:	2301      	movne	r3, #1
 800d974:	2300      	moveq	r3, #0
 800d976:	428a      	cmp	r2, r1
 800d978:	bf0c      	ite	eq
 800d97a:	2300      	moveq	r3, #0
 800d97c:	f003 0301 	andne.w	r3, r3, #1
 800d980:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800d984:	4282      	cmp	r2, r0
 800d986:	bf0c      	ite	eq
 800d988:	2300      	moveq	r3, #0
 800d98a:	f003 0301 	andne.w	r3, r3, #1
 800d98e:	428a      	cmp	r2, r1
 800d990:	bf0c      	ite	eq
 800d992:	2300      	moveq	r3, #0
 800d994:	f003 0301 	andne.w	r3, r3, #1
 800d998:	b11b      	cbz	r3, 800d9a2 <HAL_SPI_Init+0x4e>
 800d99a:	4b9b      	ldr	r3, [pc, #620]	; (800dc08 <HAL_SPI_Init+0x2b4>)
 800d99c:	429a      	cmp	r2, r3
 800d99e:	f040 80fe 	bne.w	800db9e <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800d9a2:	6863      	ldr	r3, [r4, #4]
 800d9a4:	b11b      	cbz	r3, 800d9ae <HAL_SPI_Init+0x5a>
 800d9a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9aa:	f040 80cd 	bne.w	800db48 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800d9b4:	d003      	beq.n	800d9be <HAL_SPI_Init+0x6a>
 800d9b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ba:	f040 80db 	bne.w	800db74 <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800d9be:	68e2      	ldr	r2, [r4, #12]
 800d9c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800d9c4:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800d9c8:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800d9cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d9d0:	bf18      	it	ne
 800d9d2:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800d9d6:	bf14      	ite	ne
 800d9d8:	2301      	movne	r3, #1
 800d9da:	2300      	moveq	r3, #0
 800d9dc:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800d9e0:	bf0c      	ite	eq
 800d9e2:	2300      	moveq	r3, #0
 800d9e4:	f003 0301 	andne.w	r3, r3, #1
 800d9e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2300      	moveq	r3, #0
 800d9f0:	f003 0301 	andne.w	r3, r3, #1
 800d9f4:	b12b      	cbz	r3, 800da02 <HAL_SPI_Init+0xae>
 800d9f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9fa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800d9fe:	f040 80f7 	bne.w	800dbf0 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800da02:	69a3      	ldr	r3, [r4, #24]
 800da04:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800da08:	d003      	beq.n	800da12 <HAL_SPI_Init+0xbe>
 800da0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da0e:	f040 80a1 	bne.w	800db54 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800da12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da14:	f033 0308 	bics.w	r3, r3, #8
 800da18:	f040 80a6 	bne.w	800db68 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800da1c:	69e3      	ldr	r3, [r4, #28]
 800da1e:	f023 0318 	bic.w	r3, r3, #24
 800da22:	2b20      	cmp	r3, #32
 800da24:	d002      	beq.n	800da2c <HAL_SPI_Init+0xd8>
 800da26:	2b00      	cmp	r3, #0
 800da28:	f040 80d6 	bne.w	800dbd8 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800da2c:	6a23      	ldr	r3, [r4, #32]
 800da2e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800da32:	f040 80a8 	bne.w	800db86 <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800da36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da38:	f033 0210 	bics.w	r2, r3, #16
 800da3c:	d17b      	bne.n	800db36 <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d16e      	bne.n	800db20 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	f033 0302 	bics.w	r3, r3, #2
 800da48:	f040 80c0 	bne.w	800dbcc <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800da4c:	6963      	ldr	r3, [r4, #20]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d904      	bls.n	800da5c <HAL_SPI_Init+0x108>
 800da52:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800da56:	486d      	ldr	r0, [pc, #436]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800da58:	f7f6 fdec 	bl	8004634 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da5c:	6863      	ldr	r3, [r4, #4]
 800da5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da62:	f000 80a4 	beq.w	800dbae <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800da66:	2300      	movs	r3, #0
 800da68:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da6a:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800da6c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da70:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800da72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800da76:	2b00      	cmp	r3, #0
 800da78:	f000 808b 	beq.w	800db92 <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800da7c:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800da7e:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da80:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800da82:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800da86:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800da8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da90:	bf8c      	ite	hi
 800da92:	f04f 0c00 	movhi.w	ip, #0
 800da96:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800da9a:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800daa0:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800daa4:	d16c      	bne.n	800db80 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800daa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800daa8:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800daac:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800daae:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800dab8:	68a1      	ldr	r1, [r4, #8]
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	69a6      	ldr	r6, [r4, #24]
 800dac0:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800dac4:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dac8:	431a      	orrs	r2, r3
 800daca:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dacc:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad8:	f003 0310 	and.w	r3, r3, #16
 800dadc:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dade:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dae0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dae4:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800dae8:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800daec:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800daee:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800daf2:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800daf6:	430a      	orrs	r2, r1
 800daf8:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dafa:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dafc:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800db00:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db04:	430a      	orrs	r2, r1
 800db06:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db08:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800db0a:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800db0c:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800db0e:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db10:	69eb      	ldr	r3, [r5, #28]
 800db12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db16:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db18:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800db1a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800db1e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800db20:	69e3      	ldr	r3, [r4, #28]
 800db22:	f023 0318 	bic.w	r3, r3, #24
 800db26:	2b20      	cmp	r3, #32
 800db28:	d001      	beq.n	800db2e <HAL_SPI_Init+0x1da>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d15a      	bne.n	800dbe4 <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800db2e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db30:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800db34:	e799      	b.n	800da6a <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800db36:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800db3a:	4834      	ldr	r0, [pc, #208]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db3c:	f7f6 fd7a 	bl	8004634 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800db40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1ec      	bne.n	800db20 <HAL_SPI_Init+0x1cc>
 800db46:	e77c      	b.n	800da42 <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800db48:	f240 1147 	movw	r1, #327	; 0x147
 800db4c:	482f      	ldr	r0, [pc, #188]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db4e:	f7f6 fd71 	bl	8004634 <assert_failed>
 800db52:	e72c      	b.n	800d9ae <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800db54:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800db58:	482c      	ldr	r0, [pc, #176]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db5a:	f7f6 fd6b 	bl	8004634 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800db5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db60:	f033 0308 	bics.w	r3, r3, #8
 800db64:	f43f af5a 	beq.w	800da1c <HAL_SPI_Init+0xc8>
 800db68:	f240 114b 	movw	r1, #331	; 0x14b
 800db6c:	4827      	ldr	r0, [pc, #156]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db6e:	f7f6 fd61 	bl	8004634 <assert_failed>
 800db72:	e753      	b.n	800da1c <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800db74:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800db78:	4824      	ldr	r0, [pc, #144]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db7a:	f7f6 fd5b 	bl	8004634 <assert_failed>
 800db7e:	e71e      	b.n	800d9be <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db80:	2000      	movs	r0, #0
 800db82:	62a0      	str	r0, [r4, #40]	; 0x28
 800db84:	e792      	b.n	800daac <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800db86:	f240 114d 	movw	r1, #333	; 0x14d
 800db8a:	4820      	ldr	r0, [pc, #128]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800db8c:	f7f6 fd52 	bl	8004634 <assert_failed>
 800db90:	e751      	b.n	800da36 <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800db92:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800db94:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800db98:	f7f8 f8bc 	bl	8005d14 <HAL_SPI_MspInit>
 800db9c:	e76e      	b.n	800da7c <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800db9e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800dba2:	481a      	ldr	r0, [pc, #104]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dba4:	f7f6 fd46 	bl	8004634 <assert_failed>
 800dba8:	e6fb      	b.n	800d9a2 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800dbaa:	2001      	movs	r0, #1
}
 800dbac:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800dbae:	69e3      	ldr	r3, [r4, #28]
 800dbb0:	f023 0318 	bic.w	r3, r3, #24
 800dbb4:	2b20      	cmp	r3, #32
 800dbb6:	f43f af58 	beq.w	800da6a <HAL_SPI_Init+0x116>
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f43f af55 	beq.w	800da6a <HAL_SPI_Init+0x116>
 800dbc0:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800dbc4:	4811      	ldr	r0, [pc, #68]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dbc6:	f7f6 fd35 	bl	8004634 <assert_failed>
 800dbca:	e74e      	b.n	800da6a <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800dbcc:	f240 1151 	movw	r1, #337	; 0x151
 800dbd0:	480e      	ldr	r0, [pc, #56]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dbd2:	f7f6 fd2f 	bl	8004634 <assert_failed>
 800dbd6:	e739      	b.n	800da4c <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800dbd8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800dbdc:	480b      	ldr	r0, [pc, #44]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dbde:	f7f6 fd29 	bl	8004634 <assert_failed>
 800dbe2:	e723      	b.n	800da2c <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800dbe4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800dbe8:	4808      	ldr	r0, [pc, #32]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dbea:	f7f6 fd23 	bl	8004634 <assert_failed>
 800dbee:	e79e      	b.n	800db2e <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800dbf0:	f240 1149 	movw	r1, #329	; 0x149
 800dbf4:	4805      	ldr	r0, [pc, #20]	; (800dc0c <HAL_SPI_Init+0x2b8>)
 800dbf6:	f7f6 fd1d 	bl	8004634 <assert_failed>
 800dbfa:	e702      	b.n	800da02 <HAL_SPI_Init+0xae>
 800dbfc:	40013000 	.word	0x40013000
 800dc00:	40003c00 	.word	0x40003c00
 800dc04:	40003800 	.word	0x40003800
 800dc08:	40015400 	.word	0x40015400
 800dc0c:	0802b624 	.word	0x0802b624

0800dc10 <HAL_SPI_Transmit>:
{
 800dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc14:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800dc16:	6883      	ldr	r3, [r0, #8]
{
 800dc18:	b082      	sub	sp, #8
 800dc1a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800dc1c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800dc20:	460f      	mov	r7, r1
 800dc22:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800dc24:	d171      	bne.n	800dd0a <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800dc26:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d076      	beq.n	800dd1c <HAL_SPI_Transmit+0x10c>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800dc34:	f7f9 fc6e 	bl	8007514 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800dc38:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800dc3c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	b2d8      	uxtb	r0, r3
 800dc42:	d009      	beq.n	800dc58 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800dc44:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800dc46:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800dc48:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800dc4a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dc4e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800dc52:	b002      	add	sp, #8
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800dc58:	2f00      	cmp	r7, #0
 800dc5a:	d0f4      	beq.n	800dc46 <HAL_SPI_Transmit+0x36>
 800dc5c:	fab8 f388 	clz	r3, r8
 800dc60:	095b      	lsrs	r3, r3, #5
 800dc62:	f1b8 0f00 	cmp.w	r8, #0
 800dc66:	d0ee      	beq.n	800dc46 <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc68:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dc6a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dc6c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc70:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc74:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dc76:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800dc7a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dc7e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dc80:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800dc84:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc88:	68a3      	ldr	r3, [r4, #8]
 800dc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800dc8e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc90:	d07a      	beq.n	800dd88 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	0652      	lsls	r2, r2, #25
 800dc96:	d403      	bmi.n	800dca0 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dca0:	68e2      	ldr	r2, [r4, #12]
 800dca2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dca6:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dca8:	d93c      	bls.n	800dd24 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcaa:	b112      	cbz	r2, 800dcb2 <HAL_SPI_Transmit+0xa2>
 800dcac:	f1b8 0f01 	cmp.w	r8, #1
 800dcb0:	d107      	bne.n	800dcc2 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcb2:	f837 2b02 	ldrh.w	r2, [r7], #2
 800dcb6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800dcb8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcba:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800dcbc:	3a01      	subs	r2, #1
 800dcbe:	b292      	uxth	r2, r2
 800dcc0:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800dcc2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dcc4:	b292      	uxth	r2, r2
 800dcc6:	b992      	cbnz	r2, 800dcee <HAL_SPI_Transmit+0xde>
 800dcc8:	e072      	b.n	800ddb0 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dccc:	f832 1b02 	ldrh.w	r1, [r2], #2
 800dcd0:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800dcd2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcd6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dcd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dcdc:	fa1f fc8c 	uxth.w	ip, ip
 800dce0:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800dce4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d061      	beq.n	800ddb0 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	689a      	ldr	r2, [r3, #8]
 800dcf0:	0797      	lsls	r7, r2, #30
 800dcf2:	d4ea      	bmi.n	800dcca <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcf4:	f7f9 fc0e 	bl	8007514 <HAL_GetTick>
 800dcf8:	1b80      	subs	r0, r0, r6
 800dcfa:	42a8      	cmp	r0, r5
 800dcfc:	d301      	bcc.n	800dd02 <HAL_SPI_Transmit+0xf2>
 800dcfe:	1c68      	adds	r0, r5, #1
 800dd00:	d101      	bne.n	800dd06 <HAL_SPI_Transmit+0xf6>
 800dd02:	2d00      	cmp	r5, #0
 800dd04:	d1ee      	bne.n	800dce4 <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800dd06:	2003      	movs	r0, #3
 800dd08:	e79d      	b.n	800dc46 <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800dd0a:	f240 313d 	movw	r1, #829	; 0x33d
 800dd0e:	4838      	ldr	r0, [pc, #224]	; (800ddf0 <HAL_SPI_Transmit+0x1e0>)
 800dd10:	f7f6 fc90 	bl	8004634 <assert_failed>
  __HAL_LOCK(hspi);
 800dd14:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d188      	bne.n	800dc2e <HAL_SPI_Transmit+0x1e>
 800dd1c:	2002      	movs	r0, #2
}
 800dd1e:	b002      	add	sp, #8
 800dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd24:	b112      	cbz	r2, 800dd2c <HAL_SPI_Transmit+0x11c>
 800dd26:	f1b8 0f01 	cmp.w	r8, #1
 800dd2a:	d10b      	bne.n	800dd44 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800dd2c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dd2e:	b292      	uxth	r2, r2
 800dd30:	2a01      	cmp	r2, #1
 800dd32:	d953      	bls.n	800dddc <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd34:	f837 2b02 	ldrh.w	r2, [r7], #2
 800dd38:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800dd3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd3c:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dd3e:	3b02      	subs	r3, #2
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800dd44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	b983      	cbnz	r3, 800dd6c <HAL_SPI_Transmit+0x15c>
 800dd4a:	e031      	b.n	800ddb0 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800dd4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d922      	bls.n	800dd9a <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd56:	f831 3b02 	ldrh.w	r3, [r1], #2
 800dd5a:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800dd5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd5e:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dd60:	3b02      	subs	r3, #2
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800dd66:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800dd68:	b289      	uxth	r1, r1
 800dd6a:	b309      	cbz	r1, 800ddb0 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd6c:	6822      	ldr	r2, [r4, #0]
 800dd6e:	6893      	ldr	r3, [r2, #8]
 800dd70:	0799      	lsls	r1, r3, #30
 800dd72:	d4eb      	bmi.n	800dd4c <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd74:	f7f9 fbce 	bl	8007514 <HAL_GetTick>
 800dd78:	1b80      	subs	r0, r0, r6
 800dd7a:	42a8      	cmp	r0, r5
 800dd7c:	d301      	bcc.n	800dd82 <HAL_SPI_Transmit+0x172>
 800dd7e:	1c6b      	adds	r3, r5, #1
 800dd80:	d1c1      	bne.n	800dd06 <HAL_SPI_Transmit+0xf6>
 800dd82:	2d00      	cmp	r5, #0
 800dd84:	d1ef      	bne.n	800dd66 <HAL_SPI_Transmit+0x156>
 800dd86:	e7be      	b.n	800dd06 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	e77b      	b.n	800dc92 <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800dda0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800dda2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800dda4:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800dda6:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800dda8:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800ddaa:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ddac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ddae:	e7da      	b.n	800dd66 <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7ff fd89 	bl	800d8cc <SPI_EndRxTxTransaction>
 800ddba:	b108      	cbz	r0, 800ddc0 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddbc:	2320      	movs	r3, #32
 800ddbe:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	b933      	cbnz	r3, 800ddd2 <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddc4:	6822      	ldr	r2, [r4, #0]
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	68d3      	ldr	r3, [r2, #12]
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	6893      	ldr	r3, [r2, #8]
 800ddce:	9301      	str	r3, [sp, #4]
 800ddd0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddd2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800ddd4:	3800      	subs	r0, #0
 800ddd6:	bf18      	it	ne
 800ddd8:	2001      	movne	r0, #1
error:
 800ddda:	e734      	b.n	800dc46 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dddc:	783a      	ldrb	r2, [r7, #0]
 800ddde:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800dde0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800dde2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dde4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800dde6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800dde8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800ddea:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ddec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ddee:	e7a9      	b.n	800dd44 <HAL_SPI_Transmit+0x134>
 800ddf0:	0802b624 	.word	0x0802b624

0800ddf4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddf4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ddf6:	4a12      	ldr	r2, [pc, #72]	; (800de40 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800ddfc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddfe:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800de00:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800de02:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800de04:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de0a:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800de0c:	680d      	ldr	r5, [r1, #0]
 800de0e:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de10:	688d      	ldr	r5, [r1, #8]
 800de12:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de16:	4d0b      	ldr	r5, [pc, #44]	; (800de44 <TIM_OC5_SetConfig+0x50>)
 800de18:	42a8      	cmp	r0, r5
 800de1a:	d00a      	beq.n	800de32 <TIM_OC5_SetConfig+0x3e>
 800de1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800de20:	42a8      	cmp	r0, r5
 800de22:	d006      	beq.n	800de32 <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800de26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800de28:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800de2a:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de2c:	6203      	str	r3, [r0, #32]
}
 800de2e:	bc30      	pop	{r4, r5}
 800de30:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de32:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de36:	694d      	ldr	r5, [r1, #20]
 800de38:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800de3c:	e7f2      	b.n	800de24 <TIM_OC5_SetConfig+0x30>
 800de3e:	bf00      	nop
 800de40:	fffeff8f 	.word	0xfffeff8f
 800de44:	40010000 	.word	0x40010000

0800de48 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de48:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de4a:	4a12      	ldr	r2, [pc, #72]	; (800de94 <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800de50:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de52:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800de54:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800de56:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800de58:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de5e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de60:	680d      	ldr	r5, [r1, #0]
 800de62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de66:	688d      	ldr	r5, [r1, #8]
 800de68:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6c:	4d0a      	ldr	r5, [pc, #40]	; (800de98 <TIM_OC6_SetConfig+0x50>)
 800de6e:	42a8      	cmp	r0, r5
 800de70:	d00a      	beq.n	800de88 <TIM_OC6_SetConfig+0x40>
 800de72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800de76:	42a8      	cmp	r0, r5
 800de78:	d006      	beq.n	800de88 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800de7a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800de7c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800de7e:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800de80:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de82:	6203      	str	r3, [r0, #32]
}
 800de84:	bc30      	pop	{r4, r5}
 800de86:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800de88:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800de8c:	694d      	ldr	r5, [r1, #20]
 800de8e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800de92:	e7f2      	b.n	800de7a <TIM_OC6_SetConfig+0x32>
 800de94:	feff8fff 	.word	0xfeff8fff
 800de98:	40010000 	.word	0x40010000

0800de9c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de9c:	6a03      	ldr	r3, [r0, #32]
 800de9e:	f023 0301 	bic.w	r3, r3, #1
{
 800dea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dea6:	6203      	str	r3, [r0, #32]
{
 800dea8:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800deaa:	6a05      	ldr	r5, [r0, #32]
{
 800deac:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800deae:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800deb2:	4b27      	ldr	r3, [pc, #156]	; (800df50 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800deb4:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800deb8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800deba:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800debc:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800debe:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800dec0:	688b      	ldr	r3, [r1, #8]
 800dec2:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dec4:	4b23      	ldr	r3, [pc, #140]	; (800df54 <TIM_OC1_SetConfig+0xb8>)
 800dec6:	4298      	cmp	r0, r3
 800dec8:	d00b      	beq.n	800dee2 <TIM_OC1_SetConfig+0x46>
 800deca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dece:	4298      	cmp	r0, r3
 800ded0:	d007      	beq.n	800dee2 <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ded2:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ded4:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ded8:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800deda:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800dedc:	6225      	str	r5, [r4, #32]
}
 800dede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dee2:	68f3      	ldr	r3, [r6, #12]
 800dee4:	f033 0208 	bics.w	r2, r3, #8
 800dee8:	d120      	bne.n	800df2c <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800deea:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800deee:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800def0:	69b3      	ldr	r3, [r6, #24]
 800def2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800def6:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800defa:	d11e      	bne.n	800df3a <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800defc:	6973      	ldr	r3, [r6, #20]
 800defe:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800df02:	d106      	bne.n	800df12 <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df04:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800df08:	69b1      	ldr	r1, [r6, #24]
 800df0a:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800df0c:	ea42 0803 	orr.w	r8, r2, r3
 800df10:	e7df      	b.n	800ded2 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800df12:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800df16:	4810      	ldr	r0, [pc, #64]	; (800df58 <TIM_OC1_SetConfig+0xbc>)
 800df18:	f7f6 fb8c 	bl	8004634 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df1c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800df20:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800df22:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800df24:	430a      	orrs	r2, r1
 800df26:	ea42 0803 	orr.w	r8, r2, r3
 800df2a:	e7d2      	b.n	800ded2 <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800df2c:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800df30:	4809      	ldr	r0, [pc, #36]	; (800df58 <TIM_OC1_SetConfig+0xbc>)
 800df32:	f7f6 fb7f 	bl	8004634 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800df36:	68f3      	ldr	r3, [r6, #12]
 800df38:	e7d7      	b.n	800deea <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800df3a:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800df3e:	4806      	ldr	r0, [pc, #24]	; (800df58 <TIM_OC1_SetConfig+0xbc>)
 800df40:	f7f6 fb78 	bl	8004634 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800df44:	6973      	ldr	r3, [r6, #20]
 800df46:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800df4a:	d0db      	beq.n	800df04 <TIM_OC1_SetConfig+0x68>
 800df4c:	e7e1      	b.n	800df12 <TIM_OC1_SetConfig+0x76>
 800df4e:	bf00      	nop
 800df50:	fffeff8c 	.word	0xfffeff8c
 800df54:	40010000 	.word	0x40010000
 800df58:	0802b65c 	.word	0x0802b65c

0800df5c <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df5c:	6a03      	ldr	r3, [r0, #32]
 800df5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800df62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df66:	6203      	str	r3, [r0, #32]
{
 800df68:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800df6a:	6a05      	ldr	r5, [r0, #32]
{
 800df6c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800df6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df72:	4b29      	ldr	r3, [pc, #164]	; (800e018 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800df74:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800df78:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800df7a:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df7c:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800df7e:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df80:	688b      	ldr	r3, [r1, #8]
 800df82:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df86:	4b25      	ldr	r3, [pc, #148]	; (800e01c <TIM_OC3_SetConfig+0xc0>)
 800df88:	4298      	cmp	r0, r3
 800df8a:	d00b      	beq.n	800dfa4 <TIM_OC3_SetConfig+0x48>
 800df8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df90:	4298      	cmp	r0, r3
 800df92:	d007      	beq.n	800dfa4 <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800df94:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800df96:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800df9a:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800df9c:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800df9e:	6225      	str	r5, [r4, #32]
}
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dfa4:	68f3      	ldr	r3, [r6, #12]
 800dfa6:	f033 0208 	bics.w	r2, r3, #8
 800dfaa:	d123      	bne.n	800dff4 <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800dfac:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dfb0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dfb4:	69b3      	ldr	r3, [r6, #24]
 800dfb6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800dfba:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800dfbe:	d120      	bne.n	800e002 <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800dfc0:	6973      	ldr	r3, [r6, #20]
 800dfc2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800dfc6:	d107      	bne.n	800dfd8 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfc8:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfcc:	69b1      	ldr	r1, [r6, #24]
 800dfce:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800dfd2:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800dfd6:	e7dd      	b.n	800df94 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800dfd8:	f641 4103 	movw	r1, #7171	; 0x1c03
 800dfdc:	4810      	ldr	r0, [pc, #64]	; (800e020 <TIM_OC3_SetConfig+0xc4>)
 800dfde:	f7f6 fb29 	bl	8004634 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfe2:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfe6:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfe8:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfea:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800dfee:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800dff2:	e7cf      	b.n	800df94 <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dff4:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800dff8:	4809      	ldr	r0, [pc, #36]	; (800e020 <TIM_OC3_SetConfig+0xc4>)
 800dffa:	f7f6 fb1b 	bl	8004634 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dffe:	68f3      	ldr	r3, [r6, #12]
 800e000:	e7d4      	b.n	800dfac <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e002:	f641 4102 	movw	r1, #7170	; 0x1c02
 800e006:	4806      	ldr	r0, [pc, #24]	; (800e020 <TIM_OC3_SetConfig+0xc4>)
 800e008:	f7f6 fb14 	bl	8004634 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e00c:	6973      	ldr	r3, [r6, #20]
 800e00e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e012:	d0d9      	beq.n	800dfc8 <TIM_OC3_SetConfig+0x6c>
 800e014:	e7e0      	b.n	800dfd8 <TIM_OC3_SetConfig+0x7c>
 800e016:	bf00      	nop
 800e018:	fffeff8c 	.word	0xfffeff8c
 800e01c:	40010000 	.word	0x40010000
 800e020:	0802b65c 	.word	0x0802b65c

0800e024 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e024:	6a03      	ldr	r3, [r0, #32]
 800e026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800e02a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e02c:	6203      	str	r3, [r0, #32]
{
 800e02e:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800e030:	6a06      	ldr	r6, [r0, #32]
{
 800e032:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800e034:	6842      	ldr	r2, [r0, #4]
{
 800e036:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800e038:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800e03a:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e03e:	4b16      	ldr	r3, [pc, #88]	; (800e098 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e040:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e042:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e044:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e048:	68ab      	ldr	r3, [r5, #8]
 800e04a:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <TIM_OC4_SetConfig+0x78>)
 800e050:	4298      	cmp	r0, r3
 800e052:	d00a      	beq.n	800e06a <TIM_OC4_SetConfig+0x46>
 800e054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e058:	4298      	cmp	r0, r3
 800e05a:	d006      	beq.n	800e06a <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800e05c:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800e05e:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800e060:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800e062:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800e064:	6226      	str	r6, [r4, #32]
}
 800e066:	b003      	add	sp, #12
 800e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e06a:	696b      	ldr	r3, [r5, #20]
 800e06c:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800e070:	d104      	bne.n	800e07c <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e072:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e076:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800e07a:	e7ef      	b.n	800e05c <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e07c:	f641 4141 	movw	r1, #7233	; 0x1c41
 800e080:	4807      	ldr	r0, [pc, #28]	; (800e0a0 <TIM_OC4_SetConfig+0x7c>)
 800e082:	9201      	str	r2, [sp, #4]
 800e084:	f7f6 fad6 	bl	8004634 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e088:	9a01      	ldr	r2, [sp, #4]
 800e08a:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e08c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e090:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800e094:	e7e2      	b.n	800e05c <TIM_OC4_SetConfig+0x38>
 800e096:	bf00      	nop
 800e098:	feff8cff 	.word	0xfeff8cff
 800e09c:	40010000 	.word	0x40010000
 800e0a0:	0802b65c 	.word	0x0802b65c

0800e0a4 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0a4:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e0a6:	684a      	ldr	r2, [r1, #4]
{
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800e0ac:	6899      	ldr	r1, [r3, #8]
{
 800e0ae:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e0b0:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0b2:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e0b6:	4980      	ldr	r1, [pc, #512]	; (800e2b8 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e0b8:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e0ba:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e0be:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e0c2:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800e0c6:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800e0c8:	f000 8104 	beq.w	800e2d4 <TIM_SlaveTimer_SetConfig+0x230>
 800e0cc:	d953      	bls.n	800e176 <TIM_SlaveTimer_SetConfig+0xd2>
 800e0ce:	2a60      	cmp	r2, #96	; 0x60
 800e0d0:	f000 816b 	beq.w	800e3aa <TIM_SlaveTimer_SetConfig+0x306>
 800e0d4:	2a70      	cmp	r2, #112	; 0x70
 800e0d6:	d151      	bne.n	800e17c <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e0d8:	4a78      	ldr	r2, [pc, #480]	; (800e2bc <TIM_SlaveTimer_SetConfig+0x218>)
 800e0da:	4979      	ldr	r1, [pc, #484]	; (800e2c0 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	bf18      	it	ne
 800e0e0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e0e4:	bf14      	ite	ne
 800e0e6:	2201      	movne	r2, #1
 800e0e8:	2200      	moveq	r2, #0
 800e0ea:	428b      	cmp	r3, r1
 800e0ec:	bf0c      	ite	eq
 800e0ee:	2200      	moveq	r2, #0
 800e0f0:	f002 0201 	andne.w	r2, r2, #1
 800e0f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e0f8:	428b      	cmp	r3, r1
 800e0fa:	bf0c      	ite	eq
 800e0fc:	2200      	moveq	r2, #0
 800e0fe:	f002 0201 	andne.w	r2, r2, #1
 800e102:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e106:	428b      	cmp	r3, r1
 800e108:	bf0c      	ite	eq
 800e10a:	2200      	moveq	r2, #0
 800e10c:	f002 0201 	andne.w	r2, r2, #1
 800e110:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e114:	428b      	cmp	r3, r1
 800e116:	bf0c      	ite	eq
 800e118:	2200      	moveq	r2, #0
 800e11a:	f002 0201 	andne.w	r2, r2, #1
 800e11e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e122:	428b      	cmp	r3, r1
 800e124:	bf0c      	ite	eq
 800e126:	2200      	moveq	r2, #0
 800e128:	f002 0201 	andne.w	r2, r2, #1
 800e12c:	b11a      	cbz	r2, 800e136 <TIM_SlaveTimer_SetConfig+0x92>
 800e12e:	4a65      	ldr	r2, [pc, #404]	; (800e2c4 <TIM_SlaveTimer_SetConfig+0x220>)
 800e130:	4293      	cmp	r3, r2
 800e132:	f040 81bb 	bne.w	800e4ac <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800e136:	68e3      	ldr	r3, [r4, #12]
 800e138:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e13c:	f040 819e 	bne.w	800e47c <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e146:	bf18      	it	ne
 800e148:	2b0a      	cmpne	r3, #10
 800e14a:	d003      	beq.n	800e154 <TIM_SlaveTimer_SetConfig+0xb0>
 800e14c:	f033 0302 	bics.w	r3, r3, #2
 800e150:	f040 81a6 	bne.w	800e4a0 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e154:	6921      	ldr	r1, [r4, #16]
 800e156:	290f      	cmp	r1, #15
 800e158:	f200 8175 	bhi.w	800e446 <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e15c:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e15e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800e162:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e164:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e166:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e168:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800e16c:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e16e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e172:	60ab      	str	r3, [r5, #8]
}
 800e174:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e176:	2a40      	cmp	r2, #64	; 0x40
 800e178:	d03a      	beq.n	800e1f0 <TIM_SlaveTimer_SetConfig+0x14c>
 800e17a:	d901      	bls.n	800e180 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800e17c:	2001      	movs	r0, #1
}
 800e17e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e180:	2a20      	cmp	r2, #32
 800e182:	d002      	beq.n	800e18a <TIM_SlaveTimer_SetConfig+0xe6>
 800e184:	d930      	bls.n	800e1e8 <TIM_SlaveTimer_SetConfig+0x144>
 800e186:	2a30      	cmp	r2, #48	; 0x30
 800e188:	d1f8      	bne.n	800e17c <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e18a:	4a4c      	ldr	r2, [pc, #304]	; (800e2bc <TIM_SlaveTimer_SetConfig+0x218>)
 800e18c:	484c      	ldr	r0, [pc, #304]	; (800e2c0 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	bf18      	it	ne
 800e192:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e196:	494c      	ldr	r1, [pc, #304]	; (800e2c8 <TIM_SlaveTimer_SetConfig+0x224>)
 800e198:	4c4c      	ldr	r4, [pc, #304]	; (800e2cc <TIM_SlaveTimer_SetConfig+0x228>)
 800e19a:	bf14      	ite	ne
 800e19c:	2201      	movne	r2, #1
 800e19e:	2200      	moveq	r2, #0
 800e1a0:	4283      	cmp	r3, r0
 800e1a2:	bf0c      	ite	eq
 800e1a4:	2200      	moveq	r2, #0
 800e1a6:	f002 0201 	andne.w	r2, r2, #1
 800e1aa:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800e1ae:	428b      	cmp	r3, r1
 800e1b0:	bf0c      	ite	eq
 800e1b2:	2200      	moveq	r2, #0
 800e1b4:	f002 0201 	andne.w	r2, r2, #1
 800e1b8:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800e1bc:	42a3      	cmp	r3, r4
 800e1be:	bf0c      	ite	eq
 800e1c0:	2200      	moveq	r2, #0
 800e1c2:	f002 0201 	andne.w	r2, r2, #1
 800e1c6:	4283      	cmp	r3, r0
 800e1c8:	bf0c      	ite	eq
 800e1ca:	2200      	moveq	r2, #0
 800e1cc:	f002 0201 	andne.w	r2, r2, #1
 800e1d0:	428b      	cmp	r3, r1
 800e1d2:	bf0c      	ite	eq
 800e1d4:	2200      	moveq	r2, #0
 800e1d6:	f002 0201 	andne.w	r2, r2, #1
 800e1da:	b11a      	cbz	r2, 800e1e4 <TIM_SlaveTimer_SetConfig+0x140>
 800e1dc:	4a39      	ldr	r2, [pc, #228]	; (800e2c4 <TIM_SlaveTimer_SetConfig+0x220>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	f040 816a 	bne.w	800e4b8 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800e1e4:	2000      	movs	r0, #0
}
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800e1e8:	f032 0210 	bics.w	r2, r2, #16
 800e1ec:	d1c6      	bne.n	800e17c <TIM_SlaveTimer_SetConfig+0xd8>
 800e1ee:	e7cc      	b.n	800e18a <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e1f0:	4a32      	ldr	r2, [pc, #200]	; (800e2bc <TIM_SlaveTimer_SetConfig+0x218>)
 800e1f2:	4933      	ldr	r1, [pc, #204]	; (800e2c0 <TIM_SlaveTimer_SetConfig+0x21c>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	bf18      	it	ne
 800e1f8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e1fc:	bf14      	ite	ne
 800e1fe:	2201      	movne	r2, #1
 800e200:	2200      	moveq	r2, #0
 800e202:	428b      	cmp	r3, r1
 800e204:	bf0c      	ite	eq
 800e206:	2200      	moveq	r2, #0
 800e208:	f002 0201 	andne.w	r2, r2, #1
 800e20c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e210:	428b      	cmp	r3, r1
 800e212:	bf0c      	ite	eq
 800e214:	2200      	moveq	r2, #0
 800e216:	f002 0201 	andne.w	r2, r2, #1
 800e21a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e21e:	428b      	cmp	r3, r1
 800e220:	bf0c      	ite	eq
 800e222:	2200      	moveq	r2, #0
 800e224:	f002 0201 	andne.w	r2, r2, #1
 800e228:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e22c:	428b      	cmp	r3, r1
 800e22e:	bf0c      	ite	eq
 800e230:	2200      	moveq	r2, #0
 800e232:	f002 0201 	andne.w	r2, r2, #1
 800e236:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e23a:	428b      	cmp	r3, r1
 800e23c:	bf0c      	ite	eq
 800e23e:	2200      	moveq	r2, #0
 800e240:	f002 0201 	andne.w	r2, r2, #1
 800e244:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e248:	428b      	cmp	r3, r1
 800e24a:	bf0c      	ite	eq
 800e24c:	2200      	moveq	r2, #0
 800e24e:	f002 0201 	andne.w	r2, r2, #1
 800e252:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e256:	428b      	cmp	r3, r1
 800e258:	bf0c      	ite	eq
 800e25a:	2200      	moveq	r2, #0
 800e25c:	f002 0201 	andne.w	r2, r2, #1
 800e260:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800e264:	428b      	cmp	r3, r1
 800e266:	bf0c      	ite	eq
 800e268:	2200      	moveq	r2, #0
 800e26a:	f002 0201 	andne.w	r2, r2, #1
 800e26e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e272:	428b      	cmp	r3, r1
 800e274:	bf0c      	ite	eq
 800e276:	2200      	moveq	r2, #0
 800e278:	f002 0201 	andne.w	r2, r2, #1
 800e27c:	b11a      	cbz	r2, 800e286 <TIM_SlaveTimer_SetConfig+0x1e2>
 800e27e:	4a14      	ldr	r2, [pc, #80]	; (800e2d0 <TIM_SlaveTimer_SetConfig+0x22c>)
 800e280:	4293      	cmp	r3, r2
 800e282:	f040 8126 	bne.w	800e4d2 <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e286:	6923      	ldr	r3, [r4, #16]
 800e288:	2b0f      	cmp	r3, #15
 800e28a:	f200 80ea 	bhi.w	800e462 <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	2b05      	cmp	r3, #5
 800e292:	f43f af73 	beq.w	800e17c <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800e296:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e298:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e29a:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800e29c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e29e:	6a19      	ldr	r1, [r3, #32]
 800e2a0:	f021 0101 	bic.w	r1, r1, #1
 800e2a4:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e2a6:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e2a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e2ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800e2b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e2b2:	621c      	str	r4, [r3, #32]
}
 800e2b4:	bd70      	pop	{r4, r5, r6, pc}
 800e2b6:	bf00      	nop
 800e2b8:	fffefff8 	.word	0xfffefff8
 800e2bc:	40010000 	.word	0x40010000
 800e2c0:	40000400 	.word	0x40000400
 800e2c4:	40001800 	.word	0x40001800
 800e2c8:	40000800 	.word	0x40000800
 800e2cc:	40000c00 	.word	0x40000c00
 800e2d0:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e2d4:	4a85      	ldr	r2, [pc, #532]	; (800e4ec <TIM_SlaveTimer_SetConfig+0x448>)
 800e2d6:	4986      	ldr	r1, [pc, #536]	; (800e4f0 <TIM_SlaveTimer_SetConfig+0x44c>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	bf18      	it	ne
 800e2dc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e2e0:	bf14      	ite	ne
 800e2e2:	2201      	movne	r2, #1
 800e2e4:	2200      	moveq	r2, #0
 800e2e6:	428b      	cmp	r3, r1
 800e2e8:	bf0c      	ite	eq
 800e2ea:	2200      	moveq	r2, #0
 800e2ec:	f002 0201 	andne.w	r2, r2, #1
 800e2f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e2f4:	428b      	cmp	r3, r1
 800e2f6:	bf0c      	ite	eq
 800e2f8:	2200      	moveq	r2, #0
 800e2fa:	f002 0201 	andne.w	r2, r2, #1
 800e2fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e302:	428b      	cmp	r3, r1
 800e304:	bf0c      	ite	eq
 800e306:	2200      	moveq	r2, #0
 800e308:	f002 0201 	andne.w	r2, r2, #1
 800e30c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e310:	428b      	cmp	r3, r1
 800e312:	bf0c      	ite	eq
 800e314:	2200      	moveq	r2, #0
 800e316:	f002 0201 	andne.w	r2, r2, #1
 800e31a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e31e:	428b      	cmp	r3, r1
 800e320:	bf0c      	ite	eq
 800e322:	2200      	moveq	r2, #0
 800e324:	f002 0201 	andne.w	r2, r2, #1
 800e328:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e32c:	428b      	cmp	r3, r1
 800e32e:	bf0c      	ite	eq
 800e330:	2200      	moveq	r2, #0
 800e332:	f002 0201 	andne.w	r2, r2, #1
 800e336:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e33a:	428b      	cmp	r3, r1
 800e33c:	bf0c      	ite	eq
 800e33e:	2200      	moveq	r2, #0
 800e340:	f002 0201 	andne.w	r2, r2, #1
 800e344:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800e348:	428b      	cmp	r3, r1
 800e34a:	bf0c      	ite	eq
 800e34c:	2200      	moveq	r2, #0
 800e34e:	f002 0201 	andne.w	r2, r2, #1
 800e352:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e356:	428b      	cmp	r3, r1
 800e358:	bf0c      	ite	eq
 800e35a:	2200      	moveq	r2, #0
 800e35c:	f002 0201 	andne.w	r2, r2, #1
 800e360:	b11a      	cbz	r2, 800e36a <TIM_SlaveTimer_SetConfig+0x2c6>
 800e362:	4a64      	ldr	r2, [pc, #400]	; (800e4f4 <TIM_SlaveTimer_SetConfig+0x450>)
 800e364:	4293      	cmp	r3, r2
 800e366:	f040 80ba 	bne.w	800e4de <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e370:	bf18      	it	ne
 800e372:	2b0a      	cmpne	r3, #10
 800e374:	d003      	beq.n	800e37e <TIM_SlaveTimer_SetConfig+0x2da>
 800e376:	f033 0302 	bics.w	r3, r3, #2
 800e37a:	f040 808b 	bne.w	800e494 <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e37e:	6926      	ldr	r6, [r4, #16]
 800e380:	2e0f      	cmp	r6, #15
 800e382:	d874      	bhi.n	800e46e <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800e388:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e38a:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e38c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e390:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800e394:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e396:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e398:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e39a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e39c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3a0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e3a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3a6:	6219      	str	r1, [r3, #32]
}
 800e3a8:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e3aa:	4a50      	ldr	r2, [pc, #320]	; (800e4ec <TIM_SlaveTimer_SetConfig+0x448>)
 800e3ac:	4950      	ldr	r1, [pc, #320]	; (800e4f0 <TIM_SlaveTimer_SetConfig+0x44c>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	bf18      	it	ne
 800e3b2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e3b6:	bf14      	ite	ne
 800e3b8:	2201      	movne	r2, #1
 800e3ba:	2200      	moveq	r2, #0
 800e3bc:	428b      	cmp	r3, r1
 800e3be:	bf0c      	ite	eq
 800e3c0:	2200      	moveq	r2, #0
 800e3c2:	f002 0201 	andne.w	r2, r2, #1
 800e3c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e3ca:	428b      	cmp	r3, r1
 800e3cc:	bf0c      	ite	eq
 800e3ce:	2200      	moveq	r2, #0
 800e3d0:	f002 0201 	andne.w	r2, r2, #1
 800e3d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e3d8:	428b      	cmp	r3, r1
 800e3da:	bf0c      	ite	eq
 800e3dc:	2200      	moveq	r2, #0
 800e3de:	f002 0201 	andne.w	r2, r2, #1
 800e3e2:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800e3e6:	428b      	cmp	r3, r1
 800e3e8:	bf0c      	ite	eq
 800e3ea:	2200      	moveq	r2, #0
 800e3ec:	f002 0201 	andne.w	r2, r2, #1
 800e3f0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800e3f4:	428b      	cmp	r3, r1
 800e3f6:	bf0c      	ite	eq
 800e3f8:	2200      	moveq	r2, #0
 800e3fa:	f002 0201 	andne.w	r2, r2, #1
 800e3fe:	b112      	cbz	r2, 800e406 <TIM_SlaveTimer_SetConfig+0x362>
 800e400:	4a3d      	ldr	r2, [pc, #244]	; (800e4f8 <TIM_SlaveTimer_SetConfig+0x454>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d15f      	bne.n	800e4c6 <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e40c:	bf18      	it	ne
 800e40e:	2b0a      	cmpne	r3, #10
 800e410:	d002      	beq.n	800e418 <TIM_SlaveTimer_SetConfig+0x374>
 800e412:	f033 0302 	bics.w	r3, r3, #2
 800e416:	d137      	bne.n	800e488 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e418:	6926      	ldr	r6, [r4, #16]
 800e41a:	2e0f      	cmp	r6, #15
 800e41c:	d81a      	bhi.n	800e454 <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e41e:	682b      	ldr	r3, [r5, #0]
 800e420:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e422:	6a18      	ldr	r0, [r3, #32]
 800e424:	f020 0010 	bic.w	r0, r0, #16
 800e428:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800e42a:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800e42c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800e42e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e430:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e438:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800e43c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800e440:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e442:	621a      	str	r2, [r3, #32]
}
 800e444:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e446:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800e44a:	482c      	ldr	r0, [pc, #176]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e44c:	f7f6 f8f2 	bl	8004634 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800e450:	6921      	ldr	r1, [r4, #16]
 800e452:	e683      	b.n	800e15c <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e454:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800e458:	4828      	ldr	r0, [pc, #160]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e45a:	f7f6 f8eb 	bl	8004634 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e45e:	6926      	ldr	r6, [r4, #16]
 800e460:	e7dd      	b.n	800e41e <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e462:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800e466:	4825      	ldr	r0, [pc, #148]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e468:	f7f6 f8e4 	bl	8004634 <assert_failed>
 800e46c:	e70f      	b.n	800e28e <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800e46e:	f641 5111 	movw	r1, #7441	; 0x1d11
 800e472:	4822      	ldr	r0, [pc, #136]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e474:	f7f6 f8de 	bl	8004634 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e478:	6926      	ldr	r6, [r4, #16]
 800e47a:	e783      	b.n	800e384 <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800e47c:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800e480:	481e      	ldr	r0, [pc, #120]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e482:	f7f6 f8d7 	bl	8004634 <assert_failed>
 800e486:	e65b      	b.n	800e140 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e488:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800e48c:	481b      	ldr	r0, [pc, #108]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e48e:	f7f6 f8d1 	bl	8004634 <assert_failed>
 800e492:	e7c1      	b.n	800e418 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e494:	f641 5110 	movw	r1, #7440	; 0x1d10
 800e498:	4818      	ldr	r0, [pc, #96]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e49a:	f7f6 f8cb 	bl	8004634 <assert_failed>
 800e49e:	e76e      	b.n	800e37e <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800e4a0:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800e4a4:	4815      	ldr	r0, [pc, #84]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4a6:	f7f6 f8c5 	bl	8004634 <assert_failed>
 800e4aa:	e653      	b.n	800e154 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e4ac:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800e4b0:	4812      	ldr	r0, [pc, #72]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4b2:	f7f6 f8bf 	bl	8004634 <assert_failed>
 800e4b6:	e63e      	b.n	800e136 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e4b8:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800e4bc:	480f      	ldr	r0, [pc, #60]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4be:	f7f6 f8b9 	bl	8004634 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800e4c2:	2000      	movs	r0, #0
}
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e4c6:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800e4ca:	480c      	ldr	r0, [pc, #48]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4cc:	f7f6 f8b2 	bl	8004634 <assert_failed>
 800e4d0:	e799      	b.n	800e406 <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e4d2:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800e4d6:	4809      	ldr	r0, [pc, #36]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4d8:	f7f6 f8ac 	bl	8004634 <assert_failed>
 800e4dc:	e6d3      	b.n	800e286 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e4de:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800e4e2:	4806      	ldr	r0, [pc, #24]	; (800e4fc <TIM_SlaveTimer_SetConfig+0x458>)
 800e4e4:	f7f6 f8a6 	bl	8004634 <assert_failed>
 800e4e8:	e73f      	b.n	800e36a <TIM_SlaveTimer_SetConfig+0x2c6>
 800e4ea:	bf00      	nop
 800e4ec:	40010000 	.word	0x40010000
 800e4f0:	40000400 	.word	0x40000400
 800e4f4:	40002000 	.word	0x40002000
 800e4f8:	40001800 	.word	0x40001800
 800e4fc:	0802b65c 	.word	0x0802b65c

0800e500 <HAL_TIM_Base_Start>:
{
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e504:	4b52      	ldr	r3, [pc, #328]	; (800e650 <HAL_TIM_Base_Start+0x150>)
 800e506:	4d53      	ldr	r5, [pc, #332]	; (800e654 <HAL_TIM_Base_Start+0x154>)
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	4953      	ldr	r1, [pc, #332]	; (800e658 <HAL_TIM_Base_Start+0x158>)
 800e50c:	429a      	cmp	r2, r3
 800e50e:	bf18      	it	ne
 800e510:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e514:	4851      	ldr	r0, [pc, #324]	; (800e65c <HAL_TIM_Base_Start+0x15c>)
 800e516:	bf14      	ite	ne
 800e518:	2301      	movne	r3, #1
 800e51a:	2300      	moveq	r3, #0
 800e51c:	42aa      	cmp	r2, r5
 800e51e:	bf0c      	ite	eq
 800e520:	2300      	moveq	r3, #0
 800e522:	f003 0301 	andne.w	r3, r3, #1
 800e526:	428a      	cmp	r2, r1
 800e528:	bf0c      	ite	eq
 800e52a:	2300      	moveq	r3, #0
 800e52c:	f003 0301 	andne.w	r3, r3, #1
 800e530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e534:	4282      	cmp	r2, r0
 800e536:	bf0c      	ite	eq
 800e538:	2300      	moveq	r3, #0
 800e53a:	f003 0301 	andne.w	r3, r3, #1
 800e53e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e542:	428a      	cmp	r2, r1
 800e544:	bf0c      	ite	eq
 800e546:	2300      	moveq	r3, #0
 800e548:	f003 0301 	andne.w	r3, r3, #1
 800e54c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800e550:	4282      	cmp	r2, r0
 800e552:	bf0c      	ite	eq
 800e554:	2300      	moveq	r3, #0
 800e556:	f003 0301 	andne.w	r3, r3, #1
 800e55a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800e55e:	428a      	cmp	r2, r1
 800e560:	bf0c      	ite	eq
 800e562:	2300      	moveq	r3, #0
 800e564:	f003 0301 	andne.w	r3, r3, #1
 800e568:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e56c:	4282      	cmp	r2, r0
 800e56e:	bf0c      	ite	eq
 800e570:	2300      	moveq	r3, #0
 800e572:	f003 0301 	andne.w	r3, r3, #1
 800e576:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e57a:	428a      	cmp	r2, r1
 800e57c:	bf0c      	ite	eq
 800e57e:	2300      	moveq	r3, #0
 800e580:	f003 0301 	andne.w	r3, r3, #1
 800e584:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e588:	4282      	cmp	r2, r0
 800e58a:	bf0c      	ite	eq
 800e58c:	2300      	moveq	r3, #0
 800e58e:	f003 0301 	andne.w	r3, r3, #1
 800e592:	428a      	cmp	r2, r1
 800e594:	bf0c      	ite	eq
 800e596:	2300      	moveq	r3, #0
 800e598:	f003 0301 	andne.w	r3, r3, #1
 800e59c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e5a0:	428a      	cmp	r2, r1
 800e5a2:	bf0c      	ite	eq
 800e5a4:	2300      	moveq	r3, #0
 800e5a6:	f003 0301 	andne.w	r3, r3, #1
 800e5aa:	b113      	cbz	r3, 800e5b2 <HAL_TIM_Base_Start+0xb2>
 800e5ac:	4b2c      	ldr	r3, [pc, #176]	; (800e660 <HAL_TIM_Base_Start+0x160>)
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d143      	bne.n	800e63a <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800e5b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d13b      	bne.n	800e632 <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5ba:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e5bc:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5be:	4b24      	ldr	r3, [pc, #144]	; (800e650 <HAL_TIM_Base_Start+0x150>)
 800e5c0:	4d24      	ldr	r5, [pc, #144]	; (800e654 <HAL_TIM_Base_Start+0x154>)
 800e5c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e5c6:	bf18      	it	ne
 800e5c8:	429a      	cmpne	r2, r3
 800e5ca:	4923      	ldr	r1, [pc, #140]	; (800e658 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e5cc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5d0:	bf0c      	ite	eq
 800e5d2:	2301      	moveq	r3, #1
 800e5d4:	2300      	movne	r3, #0
 800e5d6:	4c21      	ldr	r4, [pc, #132]	; (800e65c <HAL_TIM_Base_Start+0x15c>)
 800e5d8:	42aa      	cmp	r2, r5
 800e5da:	bf08      	it	eq
 800e5dc:	f043 0301 	orreq.w	r3, r3, #1
 800e5e0:	4820      	ldr	r0, [pc, #128]	; (800e664 <HAL_TIM_Base_Start+0x164>)
 800e5e2:	428a      	cmp	r2, r1
 800e5e4:	bf08      	it	eq
 800e5e6:	f043 0301 	orreq.w	r3, r3, #1
 800e5ea:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800e5ee:	42a2      	cmp	r2, r4
 800e5f0:	bf08      	it	eq
 800e5f2:	f043 0301 	orreq.w	r3, r3, #1
 800e5f6:	4282      	cmp	r2, r0
 800e5f8:	bf08      	it	eq
 800e5fa:	f043 0301 	orreq.w	r3, r3, #1
 800e5fe:	428a      	cmp	r2, r1
 800e600:	bf08      	it	eq
 800e602:	f043 0301 	orreq.w	r3, r3, #1
 800e606:	b933      	cbnz	r3, 800e616 <HAL_TIM_Base_Start+0x116>
 800e608:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800e60c:	1a10      	subs	r0, r2, r0
 800e60e:	fab0 f080 	clz	r0, r0
 800e612:	0940      	lsrs	r0, r0, #5
 800e614:	b1b8      	cbz	r0, 800e646 <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e616:	6891      	ldr	r1, [r2, #8]
 800e618:	4b13      	ldr	r3, [pc, #76]	; (800e668 <HAL_TIM_Base_Start+0x168>)
 800e61a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e61c:	2b06      	cmp	r3, #6
 800e61e:	d00a      	beq.n	800e636 <HAL_TIM_Base_Start+0x136>
 800e620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e624:	d007      	beq.n	800e636 <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800e626:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800e628:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800e62a:	f043 0301 	orr.w	r3, r3, #1
 800e62e:	6013      	str	r3, [r2, #0]
}
 800e630:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e632:	2001      	movs	r0, #1
}
 800e634:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800e636:	2000      	movs	r0, #0
}
 800e638:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e63a:	f240 1197 	movw	r1, #407	; 0x197
 800e63e:	480b      	ldr	r0, [pc, #44]	; (800e66c <HAL_TIM_Base_Start+0x16c>)
 800e640:	f7f5 fff8 	bl	8004634 <assert_failed>
 800e644:	e7b5      	b.n	800e5b2 <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800e646:	6813      	ldr	r3, [r2, #0]
 800e648:	f043 0301 	orr.w	r3, r3, #1
 800e64c:	6013      	str	r3, [r2, #0]
}
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	40010000 	.word	0x40010000
 800e654:	40000400 	.word	0x40000400
 800e658:	40000800 	.word	0x40000800
 800e65c:	40000c00 	.word	0x40000c00
 800e660:	40002000 	.word	0x40002000
 800e664:	40010400 	.word	0x40010400
 800e668:	00010007 	.word	0x00010007
 800e66c:	0802b65c 	.word	0x0802b65c

0800e670 <HAL_TIM_Base_Start_IT>:
{
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e674:	4b54      	ldr	r3, [pc, #336]	; (800e7c8 <HAL_TIM_Base_Start_IT+0x158>)
 800e676:	4d55      	ldr	r5, [pc, #340]	; (800e7cc <HAL_TIM_Base_Start_IT+0x15c>)
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	4955      	ldr	r1, [pc, #340]	; (800e7d0 <HAL_TIM_Base_Start_IT+0x160>)
 800e67c:	429a      	cmp	r2, r3
 800e67e:	bf18      	it	ne
 800e680:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e684:	4853      	ldr	r0, [pc, #332]	; (800e7d4 <HAL_TIM_Base_Start_IT+0x164>)
 800e686:	bf14      	ite	ne
 800e688:	2301      	movne	r3, #1
 800e68a:	2300      	moveq	r3, #0
 800e68c:	42aa      	cmp	r2, r5
 800e68e:	bf0c      	ite	eq
 800e690:	2300      	moveq	r3, #0
 800e692:	f003 0301 	andne.w	r3, r3, #1
 800e696:	428a      	cmp	r2, r1
 800e698:	bf0c      	ite	eq
 800e69a:	2300      	moveq	r3, #0
 800e69c:	f003 0301 	andne.w	r3, r3, #1
 800e6a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6a4:	4282      	cmp	r2, r0
 800e6a6:	bf0c      	ite	eq
 800e6a8:	2300      	moveq	r3, #0
 800e6aa:	f003 0301 	andne.w	r3, r3, #1
 800e6ae:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e6b2:	428a      	cmp	r2, r1
 800e6b4:	bf0c      	ite	eq
 800e6b6:	2300      	moveq	r3, #0
 800e6b8:	f003 0301 	andne.w	r3, r3, #1
 800e6bc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800e6c0:	4282      	cmp	r2, r0
 800e6c2:	bf0c      	ite	eq
 800e6c4:	2300      	moveq	r3, #0
 800e6c6:	f003 0301 	andne.w	r3, r3, #1
 800e6ca:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800e6ce:	428a      	cmp	r2, r1
 800e6d0:	bf0c      	ite	eq
 800e6d2:	2300      	moveq	r3, #0
 800e6d4:	f003 0301 	andne.w	r3, r3, #1
 800e6d8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e6dc:	4282      	cmp	r2, r0
 800e6de:	bf0c      	ite	eq
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	f003 0301 	andne.w	r3, r3, #1
 800e6e6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800e6ea:	428a      	cmp	r2, r1
 800e6ec:	bf0c      	ite	eq
 800e6ee:	2300      	moveq	r3, #0
 800e6f0:	f003 0301 	andne.w	r3, r3, #1
 800e6f4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e6f8:	4282      	cmp	r2, r0
 800e6fa:	bf0c      	ite	eq
 800e6fc:	2300      	moveq	r3, #0
 800e6fe:	f003 0301 	andne.w	r3, r3, #1
 800e702:	428a      	cmp	r2, r1
 800e704:	bf0c      	ite	eq
 800e706:	2300      	moveq	r3, #0
 800e708:	f003 0301 	andne.w	r3, r3, #1
 800e70c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e710:	428a      	cmp	r2, r1
 800e712:	bf0c      	ite	eq
 800e714:	2300      	moveq	r3, #0
 800e716:	f003 0301 	andne.w	r3, r3, #1
 800e71a:	b113      	cbz	r3, 800e722 <HAL_TIM_Base_Start_IT+0xb2>
 800e71c:	4b2e      	ldr	r3, [pc, #184]	; (800e7d8 <HAL_TIM_Base_Start_IT+0x168>)
 800e71e:	429a      	cmp	r2, r3
 800e720:	d147      	bne.n	800e7b2 <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800e722:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e726:	2b01      	cmp	r3, #1
 800e728:	d13f      	bne.n	800e7aa <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e72a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e72c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e72e:	4b26      	ldr	r3, [pc, #152]	; (800e7c8 <HAL_TIM_Base_Start_IT+0x158>)
 800e730:	4d26      	ldr	r5, [pc, #152]	; (800e7cc <HAL_TIM_Base_Start_IT+0x15c>)
 800e732:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e736:	bf18      	it	ne
 800e738:	429a      	cmpne	r2, r3
 800e73a:	4825      	ldr	r0, [pc, #148]	; (800e7d0 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e73c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e740:	bf0c      	ite	eq
 800e742:	2301      	moveq	r3, #1
 800e744:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e746:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e748:	42aa      	cmp	r2, r5
 800e74a:	bf08      	it	eq
 800e74c:	f043 0301 	orreq.w	r3, r3, #1
 800e750:	4c20      	ldr	r4, [pc, #128]	; (800e7d4 <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e752:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e756:	4282      	cmp	r2, r0
 800e758:	bf08      	it	eq
 800e75a:	f043 0301 	orreq.w	r3, r3, #1
 800e75e:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e762:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e764:	42a2      	cmp	r2, r4
 800e766:	bf08      	it	eq
 800e768:	f043 0301 	orreq.w	r3, r3, #1
 800e76c:	491b      	ldr	r1, [pc, #108]	; (800e7dc <HAL_TIM_Base_Start_IT+0x16c>)
 800e76e:	4282      	cmp	r2, r0
 800e770:	bf08      	it	eq
 800e772:	f043 0301 	orreq.w	r3, r3, #1
 800e776:	428a      	cmp	r2, r1
 800e778:	bf08      	it	eq
 800e77a:	f043 0301 	orreq.w	r3, r3, #1
 800e77e:	b933      	cbnz	r3, 800e78e <HAL_TIM_Base_Start_IT+0x11e>
 800e780:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800e784:	1a10      	subs	r0, r2, r0
 800e786:	fab0 f080 	clz	r0, r0
 800e78a:	0940      	lsrs	r0, r0, #5
 800e78c:	b1b8      	cbz	r0, 800e7be <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e78e:	6891      	ldr	r1, [r2, #8]
 800e790:	4b13      	ldr	r3, [pc, #76]	; (800e7e0 <HAL_TIM_Base_Start_IT+0x170>)
 800e792:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e794:	2b06      	cmp	r3, #6
 800e796:	d00a      	beq.n	800e7ae <HAL_TIM_Base_Start_IT+0x13e>
 800e798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e79c:	d007      	beq.n	800e7ae <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800e79e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800e7a0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800e7a2:	f043 0301 	orr.w	r3, r3, #1
 800e7a6:	6013      	str	r3, [r2, #0]
}
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e7aa:	2001      	movs	r0, #1
}
 800e7ac:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800e7ae:	2000      	movs	r0, #0
}
 800e7b0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e7b2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800e7b6:	480b      	ldr	r0, [pc, #44]	; (800e7e4 <HAL_TIM_Base_Start_IT+0x174>)
 800e7b8:	f7f5 ff3c 	bl	8004634 <assert_failed>
 800e7bc:	e7b1      	b.n	800e722 <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800e7be:	6813      	ldr	r3, [r2, #0]
 800e7c0:	f043 0301 	orr.w	r3, r3, #1
 800e7c4:	6013      	str	r3, [r2, #0]
}
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	40010000 	.word	0x40010000
 800e7cc:	40000400 	.word	0x40000400
 800e7d0:	40000800 	.word	0x40000800
 800e7d4:	40000c00 	.word	0x40000c00
 800e7d8:	40002000 	.word	0x40002000
 800e7dc:	40014000 	.word	0x40014000
 800e7e0:	00010007 	.word	0x00010007
 800e7e4:	0802b65c 	.word	0x0802b65c

0800e7e8 <HAL_TIM_OC_MspInit>:
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop

0800e7ec <HAL_TIM_PWM_MspInit>:
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop

0800e7f0 <HAL_TIM_IC_MspInit>:
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop

0800e7f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800e7f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	f000 8151 	beq.w	800eaa0 <HAL_TIM_ConfigClockSource+0x2ac>
 800e7fe:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e800:	2302      	movs	r3, #2
{
 800e802:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800e804:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800e808:	460d      	mov	r5, r1
 800e80a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800e80e:	4604      	mov	r4, r0
 800e810:	680b      	ldr	r3, [r1, #0]
 800e812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e816:	bf18      	it	ne
 800e818:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800e81c:	bf14      	ite	ne
 800e81e:	2201      	movne	r2, #1
 800e820:	2200      	moveq	r2, #0
 800e822:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800e826:	f002 0201 	and.w	r2, r2, #1
 800e82a:	bf08      	it	eq
 800e82c:	2200      	moveq	r2, #0
 800e82e:	b112      	cbz	r2, 800e836 <HAL_TIM_ConfigClockSource+0x42>
 800e830:	2940      	cmp	r1, #64	; 0x40
 800e832:	f040 8267 	bne.w	800ed04 <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800e836:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800e838:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e83a:	499a      	ldr	r1, [pc, #616]	; (800eaa4 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800e83c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e83e:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800e842:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800e844:	f000 8138 	beq.w	800eab8 <HAL_TIM_ConfigClockSource+0x2c4>
 800e848:	d84f      	bhi.n	800e8ea <HAL_TIM_ConfigClockSource+0xf6>
 800e84a:	2b40      	cmp	r3, #64	; 0x40
 800e84c:	f000 81d7 	beq.w	800ebfe <HAL_TIM_ConfigClockSource+0x40a>
 800e850:	f240 80a2 	bls.w	800e998 <HAL_TIM_ConfigClockSource+0x1a4>
 800e854:	2b50      	cmp	r3, #80	; 0x50
 800e856:	f040 8097 	bne.w	800e988 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e85a:	4b93      	ldr	r3, [pc, #588]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800e85c:	4993      	ldr	r1, [pc, #588]	; (800eaac <HAL_TIM_ConfigClockSource+0x2b8>)
 800e85e:	429a      	cmp	r2, r3
 800e860:	bf18      	it	ne
 800e862:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e866:	bf14      	ite	ne
 800e868:	2301      	movne	r3, #1
 800e86a:	2300      	moveq	r3, #0
 800e86c:	428a      	cmp	r2, r1
 800e86e:	bf0c      	ite	eq
 800e870:	2300      	moveq	r3, #0
 800e872:	f003 0301 	andne.w	r3, r3, #1
 800e876:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e87a:	428a      	cmp	r2, r1
 800e87c:	bf0c      	ite	eq
 800e87e:	2300      	moveq	r3, #0
 800e880:	f003 0301 	andne.w	r3, r3, #1
 800e884:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e888:	428a      	cmp	r2, r1
 800e88a:	bf0c      	ite	eq
 800e88c:	2300      	moveq	r3, #0
 800e88e:	f003 0301 	andne.w	r3, r3, #1
 800e892:	b11b      	cbz	r3, 800e89c <HAL_TIM_ConfigClockSource+0xa8>
 800e894:	4b86      	ldr	r3, [pc, #536]	; (800eab0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e896:	429a      	cmp	r2, r3
 800e898:	f040 8222 	bne.w	800ece0 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e89c:	686b      	ldr	r3, [r5, #4]
 800e89e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a2:	bf18      	it	ne
 800e8a4:	2b0a      	cmpne	r3, #10
 800e8a6:	d003      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0xbc>
 800e8a8:	f033 0302 	bics.w	r3, r3, #2
 800e8ac:	f040 81fe 	bne.w	800ecac <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e8b0:	68ee      	ldr	r6, [r5, #12]
 800e8b2:	2e0f      	cmp	r6, #15
 800e8b4:	f200 8242 	bhi.w	800ed3c <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800e8bc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8be:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8c0:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8c4:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800e8c8:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e8ca:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8cc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8ce:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e8d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8da:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800e8dc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e8de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e8e2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800e8e6:	609a      	str	r2, [r3, #8]
}
 800e8e8:	e04f      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e8ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8ee:	f000 812c 	beq.w	800eb4a <HAL_TIM_ConfigClockSource+0x356>
 800e8f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8f6:	d17e      	bne.n	800e9f6 <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800e8f8:	4b6b      	ldr	r3, [pc, #428]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800e8fa:	496c      	ldr	r1, [pc, #432]	; (800eaac <HAL_TIM_ConfigClockSource+0x2b8>)
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	bf18      	it	ne
 800e900:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e904:	bf14      	ite	ne
 800e906:	2301      	movne	r3, #1
 800e908:	2300      	moveq	r3, #0
 800e90a:	428a      	cmp	r2, r1
 800e90c:	bf0c      	ite	eq
 800e90e:	2300      	moveq	r3, #0
 800e910:	f003 0301 	andne.w	r3, r3, #1
 800e914:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e918:	428a      	cmp	r2, r1
 800e91a:	bf0c      	ite	eq
 800e91c:	2300      	moveq	r3, #0
 800e91e:	f003 0301 	andne.w	r3, r3, #1
 800e922:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e926:	428a      	cmp	r2, r1
 800e928:	bf0c      	ite	eq
 800e92a:	2300      	moveq	r3, #0
 800e92c:	f003 0301 	andne.w	r3, r3, #1
 800e930:	b11b      	cbz	r3, 800e93a <HAL_TIM_ConfigClockSource+0x146>
 800e932:	4b5f      	ldr	r3, [pc, #380]	; (800eab0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e934:	429a      	cmp	r2, r3
 800e936:	f040 81c5 	bne.w	800ecc4 <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e93a:	68ab      	ldr	r3, [r5, #8]
 800e93c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800e940:	f040 8210 	bne.w	800ed64 <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e944:	686b      	ldr	r3, [r5, #4]
 800e946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e94a:	bf18      	it	ne
 800e94c:	2b0a      	cmpne	r3, #10
 800e94e:	d003      	beq.n	800e958 <HAL_TIM_ConfigClockSource+0x164>
 800e950:	f033 0302 	bics.w	r3, r3, #2
 800e954:	f040 81a4 	bne.w	800eca0 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e958:	68ee      	ldr	r6, [r5, #12]
 800e95a:	2e0f      	cmp	r6, #15
 800e95c:	f200 81d9 	bhi.w	800ed12 <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800e960:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800e962:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800e966:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e968:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800e96a:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e96c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800e970:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e972:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800e976:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e978:	6893      	ldr	r3, [r2, #8]
 800e97a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e97e:	6093      	str	r3, [r2, #8]
      break;
 800e980:	e003      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e982:	f033 0110 	bics.w	r1, r3, #16
 800e986:	d00c      	beq.n	800e9a2 <HAL_TIM_ConfigClockSource+0x1ae>
 800e988:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800e98a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800e98c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e98e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e992:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e996:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800e998:	2b20      	cmp	r3, #32
 800e99a:	d002      	beq.n	800e9a2 <HAL_TIM_ConfigClockSource+0x1ae>
 800e99c:	d9f1      	bls.n	800e982 <HAL_TIM_ConfigClockSource+0x18e>
 800e99e:	2b30      	cmp	r3, #48	; 0x30
 800e9a0:	d1f2      	bne.n	800e988 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800e9a2:	4941      	ldr	r1, [pc, #260]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800e9a4:	4841      	ldr	r0, [pc, #260]	; (800eaac <HAL_TIM_ConfigClockSource+0x2b8>)
 800e9a6:	428a      	cmp	r2, r1
 800e9a8:	bf18      	it	ne
 800e9aa:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e9ae:	bf14      	ite	ne
 800e9b0:	2101      	movne	r1, #1
 800e9b2:	2100      	moveq	r1, #0
 800e9b4:	4282      	cmp	r2, r0
 800e9b6:	bf0c      	ite	eq
 800e9b8:	2100      	moveq	r1, #0
 800e9ba:	f001 0101 	andne.w	r1, r1, #1
 800e9be:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800e9c2:	4282      	cmp	r2, r0
 800e9c4:	bf0c      	ite	eq
 800e9c6:	2100      	moveq	r1, #0
 800e9c8:	f001 0101 	andne.w	r1, r1, #1
 800e9cc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800e9d0:	4282      	cmp	r2, r0
 800e9d2:	bf0c      	ite	eq
 800e9d4:	2100      	moveq	r1, #0
 800e9d6:	f001 0101 	andne.w	r1, r1, #1
 800e9da:	b119      	cbz	r1, 800e9e4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9dc:	4934      	ldr	r1, [pc, #208]	; (800eab0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800e9de:	428a      	cmp	r2, r1
 800e9e0:	f040 8176 	bne.w	800ecd0 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800e9e4:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800e9e6:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9e8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800e9f2:	6093      	str	r3, [r2, #8]
}
 800e9f4:	e7c9      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800e9f6:	2b70      	cmp	r3, #112	; 0x70
 800e9f8:	d1c6      	bne.n	800e988 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e9fa:	4b2b      	ldr	r3, [pc, #172]	; (800eaa8 <HAL_TIM_ConfigClockSource+0x2b4>)
 800e9fc:	492b      	ldr	r1, [pc, #172]	; (800eaac <HAL_TIM_ConfigClockSource+0x2b8>)
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	bf18      	it	ne
 800ea02:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ea06:	bf14      	ite	ne
 800ea08:	2301      	movne	r3, #1
 800ea0a:	2300      	moveq	r3, #0
 800ea0c:	428a      	cmp	r2, r1
 800ea0e:	bf0c      	ite	eq
 800ea10:	2300      	moveq	r3, #0
 800ea12:	f003 0301 	andne.w	r3, r3, #1
 800ea16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea1a:	428a      	cmp	r2, r1
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	f003 0301 	andne.w	r3, r3, #1
 800ea24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea28:	428a      	cmp	r2, r1
 800ea2a:	bf0c      	ite	eq
 800ea2c:	2300      	moveq	r3, #0
 800ea2e:	f003 0301 	andne.w	r3, r3, #1
 800ea32:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ea36:	428a      	cmp	r2, r1
 800ea38:	bf0c      	ite	eq
 800ea3a:	2300      	moveq	r3, #0
 800ea3c:	f003 0301 	andne.w	r3, r3, #1
 800ea40:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ea44:	428a      	cmp	r2, r1
 800ea46:	bf0c      	ite	eq
 800ea48:	2300      	moveq	r3, #0
 800ea4a:	f003 0301 	andne.w	r3, r3, #1
 800ea4e:	b11b      	cbz	r3, 800ea58 <HAL_TIM_ConfigClockSource+0x264>
 800ea50:	4b18      	ldr	r3, [pc, #96]	; (800eab4 <HAL_TIM_ConfigClockSource+0x2c0>)
 800ea52:	429a      	cmp	r2, r3
 800ea54:	f040 818c 	bne.w	800ed70 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ea58:	68ab      	ldr	r3, [r5, #8]
 800ea5a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ea5e:	f040 817b 	bne.w	800ed58 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ea62:	686b      	ldr	r3, [r5, #4]
 800ea64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea68:	bf18      	it	ne
 800ea6a:	2b0a      	cmpne	r3, #10
 800ea6c:	d003      	beq.n	800ea76 <HAL_TIM_ConfigClockSource+0x282>
 800ea6e:	f033 0302 	bics.w	r3, r3, #2
 800ea72:	f040 8121 	bne.w	800ecb8 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ea76:	68ee      	ldr	r6, [r5, #12]
 800ea78:	2e0f      	cmp	r6, #15
 800ea7a:	f200 8166 	bhi.w	800ed4a <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800ea7e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800ea80:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800ea84:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea86:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ea88:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea8a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800ea8e:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea90:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800ea94:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ea96:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ea98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ea9c:	6093      	str	r3, [r2, #8]
      break;
 800ea9e:	e774      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800eaa0:	2002      	movs	r0, #2
}
 800eaa2:	4770      	bx	lr
 800eaa4:	fffe0088 	.word	0xfffe0088
 800eaa8:	40010000 	.word	0x40010000
 800eaac:	40000400 	.word	0x40000400
 800eab0:	40010400 	.word	0x40010400
 800eab4:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800eab8:	4bb0      	ldr	r3, [pc, #704]	; (800ed7c <HAL_TIM_ConfigClockSource+0x588>)
 800eaba:	49b1      	ldr	r1, [pc, #708]	; (800ed80 <HAL_TIM_ConfigClockSource+0x58c>)
 800eabc:	429a      	cmp	r2, r3
 800eabe:	bf18      	it	ne
 800eac0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800eac4:	bf14      	ite	ne
 800eac6:	2301      	movne	r3, #1
 800eac8:	2300      	moveq	r3, #0
 800eaca:	428a      	cmp	r2, r1
 800eacc:	bf0c      	ite	eq
 800eace:	2300      	moveq	r3, #0
 800ead0:	f003 0301 	andne.w	r3, r3, #1
 800ead4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ead8:	428a      	cmp	r2, r1
 800eada:	bf0c      	ite	eq
 800eadc:	2300      	moveq	r3, #0
 800eade:	f003 0301 	andne.w	r3, r3, #1
 800eae2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eae6:	428a      	cmp	r2, r1
 800eae8:	bf0c      	ite	eq
 800eaea:	2300      	moveq	r3, #0
 800eaec:	f003 0301 	andne.w	r3, r3, #1
 800eaf0:	b11b      	cbz	r3, 800eafa <HAL_TIM_ConfigClockSource+0x306>
 800eaf2:	4ba4      	ldr	r3, [pc, #656]	; (800ed84 <HAL_TIM_ConfigClockSource+0x590>)
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	f040 80ff 	bne.w	800ecf8 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eafa:	686b      	ldr	r3, [r5, #4]
 800eafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb00:	bf18      	it	ne
 800eb02:	2b0a      	cmpne	r3, #10
 800eb04:	d003      	beq.n	800eb0e <HAL_TIM_ConfigClockSource+0x31a>
 800eb06:	f033 0302 	bics.w	r3, r3, #2
 800eb0a:	f040 80c3 	bne.w	800ec94 <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800eb0e:	68ee      	ldr	r6, [r5, #12]
 800eb10:	2e0f      	cmp	r6, #15
 800eb12:	f200 810c 	bhi.w	800ed2e <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb1a:	6a18      	ldr	r0, [r3, #32]
 800eb1c:	f020 0010 	bic.w	r0, r0, #16
 800eb20:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800eb22:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800eb24:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800eb26:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb28:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb30:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800eb34:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800eb38:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb3a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800eb3c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb42:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800eb46:	609a      	str	r2, [r3, #8]
}
 800eb48:	e71f      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eb4a:	4b8c      	ldr	r3, [pc, #560]	; (800ed7c <HAL_TIM_ConfigClockSource+0x588>)
 800eb4c:	488c      	ldr	r0, [pc, #560]	; (800ed80 <HAL_TIM_ConfigClockSource+0x58c>)
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	bf18      	it	ne
 800eb52:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800eb56:	498c      	ldr	r1, [pc, #560]	; (800ed88 <HAL_TIM_ConfigClockSource+0x594>)
 800eb58:	bf14      	ite	ne
 800eb5a:	2301      	movne	r3, #1
 800eb5c:	2300      	moveq	r3, #0
 800eb5e:	4282      	cmp	r2, r0
 800eb60:	bf0c      	ite	eq
 800eb62:	2300      	moveq	r3, #0
 800eb64:	f003 0301 	andne.w	r3, r3, #1
 800eb68:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800eb6c:	428a      	cmp	r2, r1
 800eb6e:	bf0c      	ite	eq
 800eb70:	2300      	moveq	r3, #0
 800eb72:	f003 0301 	andne.w	r3, r3, #1
 800eb76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb7a:	4282      	cmp	r2, r0
 800eb7c:	bf0c      	ite	eq
 800eb7e:	2300      	moveq	r3, #0
 800eb80:	f003 0301 	andne.w	r3, r3, #1
 800eb84:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800eb88:	428a      	cmp	r2, r1
 800eb8a:	bf0c      	ite	eq
 800eb8c:	2300      	moveq	r3, #0
 800eb8e:	f003 0301 	andne.w	r3, r3, #1
 800eb92:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800eb96:	4282      	cmp	r2, r0
 800eb98:	bf0c      	ite	eq
 800eb9a:	2300      	moveq	r3, #0
 800eb9c:	f003 0301 	andne.w	r3, r3, #1
 800eba0:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800eba4:	428a      	cmp	r2, r1
 800eba6:	bf0c      	ite	eq
 800eba8:	2300      	moveq	r3, #0
 800ebaa:	f003 0301 	andne.w	r3, r3, #1
 800ebae:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800ebb2:	4282      	cmp	r2, r0
 800ebb4:	bf0c      	ite	eq
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	f003 0301 	andne.w	r3, r3, #1
 800ebbc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ebc0:	428a      	cmp	r2, r1
 800ebc2:	bf0c      	ite	eq
 800ebc4:	2300      	moveq	r3, #0
 800ebc6:	f003 0301 	andne.w	r3, r3, #1
 800ebca:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ebce:	4282      	cmp	r2, r0
 800ebd0:	bf0c      	ite	eq
 800ebd2:	2300      	moveq	r3, #0
 800ebd4:	f003 0301 	andne.w	r3, r3, #1
 800ebd8:	428a      	cmp	r2, r1
 800ebda:	bf0c      	ite	eq
 800ebdc:	2300      	moveq	r3, #0
 800ebde:	f003 0301 	andne.w	r3, r3, #1
 800ebe2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ebe6:	428a      	cmp	r2, r1
 800ebe8:	bf0c      	ite	eq
 800ebea:	2300      	moveq	r3, #0
 800ebec:	f003 0301 	andne.w	r3, r3, #1
 800ebf0:	b11b      	cbz	r3, 800ebfa <HAL_TIM_ConfigClockSource+0x406>
 800ebf2:	4b66      	ldr	r3, [pc, #408]	; (800ed8c <HAL_TIM_ConfigClockSource+0x598>)
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	f040 80cd 	bne.w	800ed94 <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	e6c5      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ebfe:	4b5f      	ldr	r3, [pc, #380]	; (800ed7c <HAL_TIM_ConfigClockSource+0x588>)
 800ec00:	495f      	ldr	r1, [pc, #380]	; (800ed80 <HAL_TIM_ConfigClockSource+0x58c>)
 800ec02:	429a      	cmp	r2, r3
 800ec04:	bf18      	it	ne
 800ec06:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ec0a:	bf14      	ite	ne
 800ec0c:	2301      	movne	r3, #1
 800ec0e:	2300      	moveq	r3, #0
 800ec10:	428a      	cmp	r2, r1
 800ec12:	bf0c      	ite	eq
 800ec14:	2300      	moveq	r3, #0
 800ec16:	f003 0301 	andne.w	r3, r3, #1
 800ec1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec1e:	428a      	cmp	r2, r1
 800ec20:	bf0c      	ite	eq
 800ec22:	2300      	moveq	r3, #0
 800ec24:	f003 0301 	andne.w	r3, r3, #1
 800ec28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec2c:	428a      	cmp	r2, r1
 800ec2e:	bf0c      	ite	eq
 800ec30:	2300      	moveq	r3, #0
 800ec32:	f003 0301 	andne.w	r3, r3, #1
 800ec36:	b113      	cbz	r3, 800ec3e <HAL_TIM_ConfigClockSource+0x44a>
 800ec38:	4b52      	ldr	r3, [pc, #328]	; (800ed84 <HAL_TIM_ConfigClockSource+0x590>)
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d156      	bne.n	800ecec <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ec3e:	686b      	ldr	r3, [r5, #4]
 800ec40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec44:	bf18      	it	ne
 800ec46:	2b0a      	cmpne	r3, #10
 800ec48:	d002      	beq.n	800ec50 <HAL_TIM_ConfigClockSource+0x45c>
 800ec4a:	f033 0302 	bics.w	r3, r3, #2
 800ec4e:	d11b      	bne.n	800ec88 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ec50:	68ee      	ldr	r6, [r5, #12]
 800ec52:	2e0f      	cmp	r6, #15
 800ec54:	d864      	bhi.n	800ed20 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800ec5a:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec5c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec5e:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec62:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800ec66:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ec68:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec6a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec6c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec72:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ec76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec78:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800ec7a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec80:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800ec84:	609a      	str	r2, [r3, #8]
}
 800ec86:	e680      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ec88:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800ec8c:	4840      	ldr	r0, [pc, #256]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ec8e:	f7f5 fcd1 	bl	8004634 <assert_failed>
 800ec92:	e7dd      	b.n	800ec50 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ec94:	f241 5196 	movw	r1, #5526	; 0x1596
 800ec98:	483d      	ldr	r0, [pc, #244]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ec9a:	f7f5 fccb 	bl	8004634 <assert_failed>
 800ec9e:	e736      	b.n	800eb0e <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800eca0:	f241 5173 	movw	r1, #5491	; 0x1573
 800eca4:	483a      	ldr	r0, [pc, #232]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800eca6:	f7f5 fcc5 	bl	8004634 <assert_failed>
 800ecaa:	e655      	b.n	800e958 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ecac:	f241 5186 	movw	r1, #5510	; 0x1586
 800ecb0:	4837      	ldr	r0, [pc, #220]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecb2:	f7f5 fcbf 	bl	8004634 <assert_failed>
 800ecb6:	e5fb      	b.n	800e8b0 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ecb8:	f241 515b 	movw	r1, #5467	; 0x155b
 800ecbc:	4834      	ldr	r0, [pc, #208]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecbe:	f7f5 fcb9 	bl	8004634 <assert_failed>
 800ecc2:	e6d8      	b.n	800ea76 <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ecc4:	f241 516f 	movw	r1, #5487	; 0x156f
 800ecc8:	4831      	ldr	r0, [pc, #196]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecca:	f7f5 fcb3 	bl	8004634 <assert_failed>
 800ecce:	e634      	b.n	800e93a <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ecd0:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800ecd4:	482e      	ldr	r0, [pc, #184]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecd6:	f7f5 fcad 	bl	8004634 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ecda:	6822      	ldr	r2, [r4, #0]
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	e681      	b.n	800e9e4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ece0:	f241 5183 	movw	r1, #5507	; 0x1583
 800ece4:	482a      	ldr	r0, [pc, #168]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ece6:	f7f5 fca5 	bl	8004634 <assert_failed>
 800ecea:	e5d7      	b.n	800e89c <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ecec:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800ecf0:	4827      	ldr	r0, [pc, #156]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecf2:	f7f5 fc9f 	bl	8004634 <assert_failed>
 800ecf6:	e7a2      	b.n	800ec3e <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ecf8:	f241 5193 	movw	r1, #5523	; 0x1593
 800ecfc:	4824      	ldr	r0, [pc, #144]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ecfe:	f7f5 fc99 	bl	8004634 <assert_failed>
 800ed02:	e6fa      	b.n	800eafa <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ed04:	f241 5144 	movw	r1, #5444	; 0x1544
 800ed08:	4821      	ldr	r0, [pc, #132]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed0a:	f7f5 fc93 	bl	8004634 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800ed0e:	682b      	ldr	r3, [r5, #0]
 800ed10:	e591      	b.n	800e836 <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed12:	f241 5174 	movw	r1, #5492	; 0x1574
 800ed16:	481e      	ldr	r0, [pc, #120]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed18:	f7f5 fc8c 	bl	8004634 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ed1c:	68ee      	ldr	r6, [r5, #12]
 800ed1e:	e61f      	b.n	800e960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed20:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800ed24:	481a      	ldr	r0, [pc, #104]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed26:	f7f5 fc85 	bl	8004634 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed2a:	68ee      	ldr	r6, [r5, #12]
 800ed2c:	e793      	b.n	800ec56 <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed2e:	f241 5197 	movw	r1, #5527	; 0x1597
 800ed32:	4817      	ldr	r0, [pc, #92]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed34:	f7f5 fc7e 	bl	8004634 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ed38:	68ee      	ldr	r6, [r5, #12]
 800ed3a:	e6ec      	b.n	800eb16 <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed3c:	f241 5187 	movw	r1, #5511	; 0x1587
 800ed40:	4813      	ldr	r0, [pc, #76]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed42:	f7f5 fc77 	bl	8004634 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ed46:	68ee      	ldr	r6, [r5, #12]
 800ed48:	e5b6      	b.n	800e8b8 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ed4a:	f241 515c 	movw	r1, #5468	; 0x155c
 800ed4e:	4810      	ldr	r0, [pc, #64]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed50:	f7f5 fc70 	bl	8004634 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ed54:	68ee      	ldr	r6, [r5, #12]
 800ed56:	e692      	b.n	800ea7e <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ed58:	f241 515a 	movw	r1, #5466	; 0x155a
 800ed5c:	480c      	ldr	r0, [pc, #48]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed5e:	f7f5 fc69 	bl	8004634 <assert_failed>
 800ed62:	e67e      	b.n	800ea62 <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ed64:	f241 5172 	movw	r1, #5490	; 0x1572
 800ed68:	4809      	ldr	r0, [pc, #36]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed6a:	f7f5 fc63 	bl	8004634 <assert_failed>
 800ed6e:	e5e9      	b.n	800e944 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ed70:	f241 5157 	movw	r1, #5463	; 0x1557
 800ed74:	4806      	ldr	r0, [pc, #24]	; (800ed90 <HAL_TIM_ConfigClockSource+0x59c>)
 800ed76:	f7f5 fc5d 	bl	8004634 <assert_failed>
 800ed7a:	e66d      	b.n	800ea58 <HAL_TIM_ConfigClockSource+0x264>
 800ed7c:	40010000 	.word	0x40010000
 800ed80:	40000400 	.word	0x40000400
 800ed84:	40010400 	.word	0x40010400
 800ed88:	40000800 	.word	0x40000800
 800ed8c:	40002000 	.word	0x40002000
 800ed90:	0802b65c 	.word	0x0802b65c
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ed94:	4803      	ldr	r0, [pc, #12]	; (800eda4 <HAL_TIM_ConfigClockSource+0x5b0>)
 800ed96:	f241 5150 	movw	r1, #5456	; 0x1550
 800ed9a:	f7f5 fc4b 	bl	8004634 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800ed9e:	2000      	movs	r0, #0
 800eda0:	e5f3      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x196>
 800eda2:	bf00      	nop
 800eda4:	0802b65c 	.word	0x0802b65c

0800eda8 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800eda8:	6802      	ldr	r2, [r0, #0]
{
 800edaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800edac:	4b39      	ldr	r3, [pc, #228]	; (800ee94 <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800edae:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800edb0:	4f39      	ldr	r7, [pc, #228]	; (800ee98 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800edb2:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800edb4:	429a      	cmp	r2, r3
 800edb6:	bf18      	it	ne
 800edb8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800edbc:	4e37      	ldr	r6, [pc, #220]	; (800ee9c <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800edbe:	4938      	ldr	r1, [pc, #224]	; (800eea0 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800edc0:	bf14      	ite	ne
 800edc2:	2301      	movne	r3, #1
 800edc4:	2300      	moveq	r3, #0
 800edc6:	42ba      	cmp	r2, r7
 800edc8:	bf0c      	ite	eq
 800edca:	2300      	moveq	r3, #0
 800edcc:	f003 0301 	andne.w	r3, r3, #1
 800edd0:	42b2      	cmp	r2, r6
 800edd2:	bf0c      	ite	eq
 800edd4:	2300      	moveq	r3, #0
 800edd6:	f003 0301 	andne.w	r3, r3, #1
 800edda:	428a      	cmp	r2, r1
 800eddc:	bf0c      	ite	eq
 800edde:	2300      	moveq	r3, #0
 800ede0:	f003 0301 	andne.w	r3, r3, #1
 800ede4:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ede8:	428a      	cmp	r2, r1
 800edea:	bf0c      	ite	eq
 800edec:	2300      	moveq	r3, #0
 800edee:	f003 0301 	andne.w	r3, r3, #1
 800edf2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800edf6:	428a      	cmp	r2, r1
 800edf8:	bf0c      	ite	eq
 800edfa:	2300      	moveq	r3, #0
 800edfc:	f003 0301 	andne.w	r3, r3, #1
 800ee00:	b113      	cbz	r3, 800ee08 <HAL_TIM_SlaveConfigSynchro+0x60>
 800ee02:	4b28      	ldr	r3, [pc, #160]	; (800eea4 <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d138      	bne.n	800ee7a <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	1f1a      	subs	r2, r3, #4
 800ee0c:	2a03      	cmp	r2, #3
 800ee0e:	d902      	bls.n	800ee16 <HAL_TIM_SlaveConfigSynchro+0x6e>
 800ee10:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ee14:	d12b      	bne.n	800ee6e <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ee16:	686b      	ldr	r3, [r5, #4]
 800ee18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ee1c:	2b40      	cmp	r3, #64	; 0x40
 800ee1e:	d000      	beq.n	800ee22 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ee20:	bb8b      	cbnz	r3, 800ee86 <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800ee22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d01f      	beq.n	800ee6a <HAL_TIM_SlaveConfigSynchro+0xc2>
 800ee2a:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ee2c:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ee2e:	4629      	mov	r1, r5
 800ee30:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800ee32:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ee36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ee3a:	f7ff f933 	bl	800e0a4 <TIM_SlaveTimer_SetConfig>
 800ee3e:	b968      	cbnz	r0, 800ee5c <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	68da      	ldr	r2, [r3, #12]
 800ee44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ee4a:	68da      	ldr	r2, [r3, #12]
 800ee4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ee50:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800ee52:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ee56:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ee5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800ee5c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ee5e:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800ee60:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ee64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800ee6a:	2002      	movs	r0, #2
}
 800ee6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ee6e:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800ee72:	480d      	ldr	r0, [pc, #52]	; (800eea8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ee74:	f7f5 fbde 	bl	8004634 <assert_failed>
 800ee78:	e7cd      	b.n	800ee16 <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ee7a:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800ee7e:	480a      	ldr	r0, [pc, #40]	; (800eea8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ee80:	f7f5 fbd8 	bl	8004634 <assert_failed>
 800ee84:	e7c0      	b.n	800ee08 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ee86:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800ee8a:	4807      	ldr	r0, [pc, #28]	; (800eea8 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ee8c:	f7f5 fbd2 	bl	8004634 <assert_failed>
 800ee90:	e7c7      	b.n	800ee22 <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ee92:	bf00      	nop
 800ee94:	40010000 	.word	0x40010000
 800ee98:	40000400 	.word	0x40000400
 800ee9c:	40000800 	.word	0x40000800
 800eea0:	40000c00 	.word	0x40000c00
 800eea4:	40001800 	.word	0x40001800
 800eea8:	0802b65c 	.word	0x0802b65c

0800eeac <HAL_TIM_OC_DelayElapsedCallback>:
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <TIM_DMACaptureCplt>:
{
 800eeb0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eeb2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eeb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeb6:	4283      	cmp	r3, r0
 800eeb8:	d01e      	beq.n	800eef8 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eeba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eebc:	4283      	cmp	r3, r0
 800eebe:	d00b      	beq.n	800eed8 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eec0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eec2:	4283      	cmp	r3, r0
 800eec4:	d027      	beq.n	800ef16 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eec6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eec8:	4283      	cmp	r3, r0
 800eeca:	d02f      	beq.n	800ef2c <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800eecc:	4620      	mov	r0, r4
 800eece:	f7f4 fabd 	bl	800344c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eed2:	2300      	movs	r3, #0
 800eed4:	7723      	strb	r3, [r4, #28]
}
 800eed6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eed8:	2202      	movs	r2, #2
 800eeda:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1f4      	bne.n	800eecc <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eee2:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800eee4:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eee6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eeea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800eeee:	f7f4 faad 	bl	800344c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eef2:	2300      	movs	r3, #0
 800eef4:	7723      	strb	r3, [r4, #28]
}
 800eef6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eef8:	2201      	movs	r2, #1
 800eefa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800eefc:	69db      	ldr	r3, [r3, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e4      	bne.n	800eecc <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef02:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800ef06:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ef08:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800ef0c:	f7f4 fa9e 	bl	800344c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef10:	2300      	movs	r3, #0
 800ef12:	7723      	strb	r3, [r4, #28]
}
 800ef14:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef16:	2204      	movs	r2, #4
 800ef18:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ef1a:	69db      	ldr	r3, [r3, #28]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1d5      	bne.n	800eecc <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ef20:	2301      	movs	r3, #1
 800ef22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ef26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ef2a:	e7cf      	b.n	800eecc <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef2c:	2208      	movs	r2, #8
 800ef2e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ef30:	69db      	ldr	r3, [r3, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1ca      	bne.n	800eecc <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ef36:	2301      	movs	r3, #1
 800ef38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ef3c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800ef40:	e7c4      	b.n	800eecc <TIM_DMACaptureCplt+0x1c>
 800ef42:	bf00      	nop

0800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop

0800ef48 <TIM_DMACaptureHalfCplt>:
{
 800ef48:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ef4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef4e:	4283      	cmp	r3, r0
 800ef50:	d016      	beq.n	800ef80 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ef52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef54:	4283      	cmp	r3, r0
 800ef56:	d00b      	beq.n	800ef70 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ef58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef5a:	4283      	cmp	r3, r0
 800ef5c:	d018      	beq.n	800ef90 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ef5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef60:	4283      	cmp	r3, r0
 800ef62:	d01d      	beq.n	800efa0 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef64:	4620      	mov	r0, r4
 800ef66:	f7ff ffed 	bl	800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	7723      	strb	r3, [r4, #28]
}
 800ef6e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef70:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef72:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef74:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef76:	f7ff ffe5 	bl	800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	7723      	strb	r3, [r4, #28]
}
 800ef7e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef80:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef82:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef84:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef86:	f7ff ffdd 	bl	800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	7723      	strb	r3, [r4, #28]
}
 800ef8e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef90:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef92:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef94:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ef96:	f7ff ffd5 	bl	800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	7723      	strb	r3, [r4, #28]
}
 800ef9e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efa0:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800efa2:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efa4:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800efa6:	f7ff ffcd 	bl	800ef44 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efaa:	2300      	movs	r3, #0
 800efac:	7723      	strb	r3, [r4, #28]
}
 800efae:	bd10      	pop	{r4, pc}

0800efb0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop

0800efb4 <HAL_TIM_TriggerCallback>:
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop

0800efb8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800efb8:	6803      	ldr	r3, [r0, #0]
 800efba:	691a      	ldr	r2, [r3, #16]
 800efbc:	0791      	lsls	r1, r2, #30
{
 800efbe:	b510      	push	{r4, lr}
 800efc0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800efc2:	d502      	bpl.n	800efca <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800efc4:	68da      	ldr	r2, [r3, #12]
 800efc6:	0792      	lsls	r2, r2, #30
 800efc8:	d468      	bmi.n	800f09c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800efca:	691a      	ldr	r2, [r3, #16]
 800efcc:	0752      	lsls	r2, r2, #29
 800efce:	d502      	bpl.n	800efd6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800efd0:	68da      	ldr	r2, [r3, #12]
 800efd2:	0750      	lsls	r0, r2, #29
 800efd4:	d44f      	bmi.n	800f076 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efd6:	691a      	ldr	r2, [r3, #16]
 800efd8:	0711      	lsls	r1, r2, #28
 800efda:	d502      	bpl.n	800efe2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efdc:	68da      	ldr	r2, [r3, #12]
 800efde:	0712      	lsls	r2, r2, #28
 800efe0:	d437      	bmi.n	800f052 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efe2:	691a      	ldr	r2, [r3, #16]
 800efe4:	06d0      	lsls	r0, r2, #27
 800efe6:	d502      	bpl.n	800efee <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800efe8:	68da      	ldr	r2, [r3, #12]
 800efea:	06d1      	lsls	r1, r2, #27
 800efec:	d41e      	bmi.n	800f02c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800efee:	691a      	ldr	r2, [r3, #16]
 800eff0:	07d2      	lsls	r2, r2, #31
 800eff2:	d502      	bpl.n	800effa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eff4:	68da      	ldr	r2, [r3, #12]
 800eff6:	07d0      	lsls	r0, r2, #31
 800eff8:	d469      	bmi.n	800f0ce <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800effa:	691a      	ldr	r2, [r3, #16]
 800effc:	0611      	lsls	r1, r2, #24
 800effe:	d502      	bpl.n	800f006 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	0612      	lsls	r2, r2, #24
 800f004:	d46b      	bmi.n	800f0de <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f006:	691a      	ldr	r2, [r3, #16]
 800f008:	05d0      	lsls	r0, r2, #23
 800f00a:	d502      	bpl.n	800f012 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	0611      	lsls	r1, r2, #24
 800f010:	d46d      	bmi.n	800f0ee <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f012:	691a      	ldr	r2, [r3, #16]
 800f014:	0652      	lsls	r2, r2, #25
 800f016:	d502      	bpl.n	800f01e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f018:	68da      	ldr	r2, [r3, #12]
 800f01a:	0650      	lsls	r0, r2, #25
 800f01c:	d46f      	bmi.n	800f0fe <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f01e:	691a      	ldr	r2, [r3, #16]
 800f020:	0691      	lsls	r1, r2, #26
 800f022:	d502      	bpl.n	800f02a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	0692      	lsls	r2, r2, #26
 800f028:	d449      	bmi.n	800f0be <HAL_TIM_IRQHandler+0x106>
}
 800f02a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f02c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f030:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f032:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f034:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f036:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f038:	69db      	ldr	r3, [r3, #28]
 800f03a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f03e:	d16f      	bne.n	800f120 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f040:	f7ff ff34 	bl	800eeac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f044:	4620      	mov	r0, r4
 800f046:	f7ff ffb3 	bl	800efb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f04a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f04c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f04e:	7722      	strb	r2, [r4, #28]
 800f050:	e7cd      	b.n	800efee <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f052:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f056:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f058:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f05a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f05c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f05e:	69db      	ldr	r3, [r3, #28]
 800f060:	079b      	lsls	r3, r3, #30
 800f062:	d15a      	bne.n	800f11a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f064:	f7ff ff22 	bl	800eeac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f068:	4620      	mov	r0, r4
 800f06a:	f7ff ffa1 	bl	800efb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f070:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f072:	7722      	strb	r2, [r4, #28]
 800f074:	e7b5      	b.n	800efe2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f076:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f07a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800f07c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f07e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f080:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f088:	d144      	bne.n	800f114 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f08a:	f7ff ff0f 	bl	800eeac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f08e:	4620      	mov	r0, r4
 800f090:	f7ff ff8e 	bl	800efb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f094:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f096:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f098:	7722      	strb	r2, [r4, #28]
 800f09a:	e79c      	b.n	800efd6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f09c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0a0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0a2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0a4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	0799      	lsls	r1, r3, #30
 800f0aa:	d130      	bne.n	800f10e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0ac:	f7ff fefe 	bl	800eeac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f7ff ff7d 	bl	800efb0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f0b8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ba:	7722      	strb	r2, [r4, #28]
 800f0bc:	e785      	b.n	800efca <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800f0c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0c4:	611a      	str	r2, [r3, #16]
}
 800f0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800f0ca:	f001 be53 	b.w	8010d74 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0ce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0d6:	f7f4 fa2f 	bl	8003538 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	e78d      	b.n	800effa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800f0e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f0e6:	f001 fe47 	bl	8010d78 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	e78b      	b.n	800f006 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800f0f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f0f6:	f001 fe41 	bl	8010d7c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	e789      	b.n	800f012 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800f102:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f104:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f106:	f7ff ff55 	bl	800efb4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	e787      	b.n	800f01e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800f10e:	f7f4 f99d 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 800f112:	e7d0      	b.n	800f0b6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800f114:	f7f4 f99a 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 800f118:	e7bc      	b.n	800f094 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800f11a:	f7f4 f997 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 800f11e:	e7a6      	b.n	800f06e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800f120:	f7f4 f994 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 800f124:	e791      	b.n	800f04a <HAL_TIM_IRQHandler+0x92>
 800f126:	bf00      	nop

0800f128 <HAL_TIM_ErrorCallback>:
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop

0800f12c <TIM_DMAError>:
{
 800f12c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f12e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f132:	4283      	cmp	r3, r0
 800f134:	d01c      	beq.n	800f170 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f138:	4283      	cmp	r3, r0
 800f13a:	d00e      	beq.n	800f15a <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f13c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f13e:	4283      	cmp	r3, r0
 800f140:	d020      	beq.n	800f184 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f144:	4283      	cmp	r3, r0
 800f146:	d028      	beq.n	800f19a <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800f148:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800f14a:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800f14c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800f150:	f7ff ffea 	bl	800f128 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f154:	2300      	movs	r3, #0
 800f156:	7723      	strb	r3, [r4, #28]
}
 800f158:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f15a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f15c:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800f15e:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f160:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f164:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f166:	f7ff ffdf 	bl	800f128 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f16a:	2300      	movs	r3, #0
 800f16c:	7723      	strb	r3, [r4, #28]
}
 800f16e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f170:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800f172:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f174:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f176:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800f17a:	f7ff ffd5 	bl	800f128 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f17e:	2300      	movs	r3, #0
 800f180:	7723      	strb	r3, [r4, #28]
}
 800f182:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f184:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f186:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800f188:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f18a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f18e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f190:	f7ff ffca 	bl	800f128 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f194:	2300      	movs	r3, #0
 800f196:	7723      	strb	r3, [r4, #28]
}
 800f198:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f19a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f19c:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800f19e:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f1a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f1a4:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800f1a6:	f7ff ffbf 	bl	800f128 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	7723      	strb	r3, [r4, #28]
}
 800f1ae:	bd10      	pop	{r4, pc}

0800f1b0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1b0:	4a3c      	ldr	r2, [pc, #240]	; (800f2a4 <TIM_Base_SetConfig+0xf4>)
 800f1b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800f1b6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1b8:	eba0 0202 	sub.w	r2, r0, r2
 800f1bc:	fab2 f282 	clz	r2, r2
{
 800f1c0:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1c2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800f1c6:	d010      	beq.n	800f1ea <TIM_Base_SetConfig+0x3a>
 800f1c8:	b97a      	cbnz	r2, 800f1ea <TIM_Base_SetConfig+0x3a>
 800f1ca:	4d37      	ldr	r5, [pc, #220]	; (800f2a8 <TIM_Base_SetConfig+0xf8>)
 800f1cc:	4c37      	ldr	r4, [pc, #220]	; (800f2ac <TIM_Base_SetConfig+0xfc>)
 800f1ce:	42a0      	cmp	r0, r4
 800f1d0:	bf18      	it	ne
 800f1d2:	42a8      	cmpne	r0, r5
 800f1d4:	d12b      	bne.n	800f22e <TIM_Base_SetConfig+0x7e>
 800f1d6:	4c36      	ldr	r4, [pc, #216]	; (800f2b0 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f1dc:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1de:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800f1e0:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1e2:	fab4 f484 	clz	r4, r4
 800f1e6:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1e8:	e008      	b.n	800f1fc <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800f1ea:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f1f0:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1f2:	4c2f      	ldr	r4, [pc, #188]	; (800f2b0 <TIM_Base_SetConfig+0x100>)
 800f1f4:	1b04      	subs	r4, r0, r4
 800f1f6:	fab4 f484 	clz	r4, r4
 800f1fa:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1fc:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f202:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f204:	694d      	ldr	r5, [r1, #20]
 800f206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f20a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800f20c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f20e:	688b      	ldr	r3, [r1, #8]
 800f210:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f212:	680b      	ldr	r3, [r1, #0]
 800f214:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f216:	b922      	cbnz	r2, 800f222 <TIM_Base_SetConfig+0x72>
 800f218:	b91c      	cbnz	r4, 800f222 <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 800f21a:	2301      	movs	r3, #1
}
 800f21c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800f21e:	6143      	str	r3, [r0, #20]
}
 800f220:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800f222:	690b      	ldr	r3, [r1, #16]
 800f224:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800f226:	2301      	movs	r3, #1
}
 800f228:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800f22a:	6143      	str	r3, [r0, #20]
}
 800f22c:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f22e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f232:	42a0      	cmp	r0, r4
 800f234:	d024      	beq.n	800f280 <TIM_Base_SetConfig+0xd0>
 800f236:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800f23a:	42a0      	cmp	r0, r4
 800f23c:	d020      	beq.n	800f280 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f23e:	4c1d      	ldr	r4, [pc, #116]	; (800f2b4 <TIM_Base_SetConfig+0x104>)
 800f240:	4d1d      	ldr	r5, [pc, #116]	; (800f2b8 <TIM_Base_SetConfig+0x108>)
 800f242:	42a0      	cmp	r0, r4
 800f244:	bf18      	it	ne
 800f246:	42a8      	cmpne	r0, r5
 800f248:	bf0c      	ite	eq
 800f24a:	2401      	moveq	r4, #1
 800f24c:	2400      	movne	r4, #0
 800f24e:	d027      	beq.n	800f2a0 <TIM_Base_SetConfig+0xf0>
 800f250:	4e1a      	ldr	r6, [pc, #104]	; (800f2bc <TIM_Base_SetConfig+0x10c>)
 800f252:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800f256:	42a8      	cmp	r0, r5
 800f258:	bf18      	it	ne
 800f25a:	42b0      	cmpne	r0, r6
 800f25c:	d0ce      	beq.n	800f1fc <TIM_Base_SetConfig+0x4c>
 800f25e:	4c18      	ldr	r4, [pc, #96]	; (800f2c0 <TIM_Base_SetConfig+0x110>)
 800f260:	42a0      	cmp	r0, r4
 800f262:	d01d      	beq.n	800f2a0 <TIM_Base_SetConfig+0xf0>
 800f264:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800f268:	42a0      	cmp	r0, r4
 800f26a:	d019      	beq.n	800f2a0 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f26c:	694d      	ldr	r5, [r1, #20]
 800f26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f272:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800f274:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f276:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800f278:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f27a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800f27c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f27e:	e7cc      	b.n	800f21a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800f280:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f286:	4c0a      	ldr	r4, [pc, #40]	; (800f2b0 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 800f288:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f28a:	4d0e      	ldr	r5, [pc, #56]	; (800f2c4 <TIM_Base_SetConfig+0x114>)
 800f28c:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f28e:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f290:	fab4 f484 	clz	r4, r4
 800f294:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f298:	d0b0      	beq.n	800f1fc <TIM_Base_SetConfig+0x4c>
 800f29a:	2c00      	cmp	r4, #0
 800f29c:	d1ae      	bne.n	800f1fc <TIM_Base_SetConfig+0x4c>
 800f29e:	e7ce      	b.n	800f23e <TIM_Base_SetConfig+0x8e>
 800f2a0:	2400      	movs	r4, #0
 800f2a2:	e7ab      	b.n	800f1fc <TIM_Base_SetConfig+0x4c>
 800f2a4:	40010000 	.word	0x40010000
 800f2a8:	40000400 	.word	0x40000400
 800f2ac:	40000800 	.word	0x40000800
 800f2b0:	40010400 	.word	0x40010400
 800f2b4:	40014400 	.word	0x40014400
 800f2b8:	40014000 	.word	0x40014000
 800f2bc:	40014800 	.word	0x40014800
 800f2c0:	40001c00 	.word	0x40001c00
 800f2c4:	40000c00 	.word	0x40000c00

0800f2c8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	f000 80b8 	beq.w	800f43e <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f2ce:	6802      	ldr	r2, [r0, #0]
 800f2d0:	4b5f      	ldr	r3, [pc, #380]	; (800f450 <HAL_TIM_Base_Init+0x188>)
 800f2d2:	4960      	ldr	r1, [pc, #384]	; (800f454 <HAL_TIM_Base_Init+0x18c>)
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	bf18      	it	ne
 800f2d8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f2dc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f2de:	bf14      	ite	ne
 800f2e0:	2301      	movne	r3, #1
 800f2e2:	2300      	moveq	r3, #0
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	485c      	ldr	r0, [pc, #368]	; (800f458 <HAL_TIM_Base_Init+0x190>)
 800f2e8:	4282      	cmp	r2, r0
 800f2ea:	bf0c      	ite	eq
 800f2ec:	2300      	moveq	r3, #0
 800f2ee:	f003 0301 	andne.w	r3, r3, #1
 800f2f2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f2f6:	428a      	cmp	r2, r1
 800f2f8:	bf0c      	ite	eq
 800f2fa:	2300      	moveq	r3, #0
 800f2fc:	f003 0301 	andne.w	r3, r3, #1
 800f300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f304:	4282      	cmp	r2, r0
 800f306:	bf0c      	ite	eq
 800f308:	2300      	moveq	r3, #0
 800f30a:	f003 0301 	andne.w	r3, r3, #1
 800f30e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f312:	428a      	cmp	r2, r1
 800f314:	bf0c      	ite	eq
 800f316:	2300      	moveq	r3, #0
 800f318:	f003 0301 	andne.w	r3, r3, #1
 800f31c:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f320:	4282      	cmp	r2, r0
 800f322:	bf0c      	ite	eq
 800f324:	2300      	moveq	r3, #0
 800f326:	f003 0301 	andne.w	r3, r3, #1
 800f32a:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f32e:	428a      	cmp	r2, r1
 800f330:	bf0c      	ite	eq
 800f332:	2300      	moveq	r3, #0
 800f334:	f003 0301 	andne.w	r3, r3, #1
 800f338:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f33c:	4282      	cmp	r2, r0
 800f33e:	bf0c      	ite	eq
 800f340:	2300      	moveq	r3, #0
 800f342:	f003 0301 	andne.w	r3, r3, #1
 800f346:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f34a:	428a      	cmp	r2, r1
 800f34c:	bf0c      	ite	eq
 800f34e:	2300      	moveq	r3, #0
 800f350:	f003 0301 	andne.w	r3, r3, #1
 800f354:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f358:	4282      	cmp	r2, r0
 800f35a:	bf0c      	ite	eq
 800f35c:	2300      	moveq	r3, #0
 800f35e:	f003 0301 	andne.w	r3, r3, #1
 800f362:	428a      	cmp	r2, r1
 800f364:	bf0c      	ite	eq
 800f366:	2300      	moveq	r3, #0
 800f368:	f003 0301 	andne.w	r3, r3, #1
 800f36c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f370:	428a      	cmp	r2, r1
 800f372:	bf0c      	ite	eq
 800f374:	2300      	moveq	r3, #0
 800f376:	f003 0301 	andne.w	r3, r3, #1
 800f37a:	b113      	cbz	r3, 800f382 <HAL_TIM_Base_Init+0xba>
 800f37c:	4b37      	ldr	r3, [pc, #220]	; (800f45c <HAL_TIM_Base_Init+0x194>)
 800f37e:	429a      	cmp	r2, r3
 800f380:	d15f      	bne.n	800f442 <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	f023 0210 	bic.w	r2, r3, #16
 800f388:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f38c:	2920      	cmp	r1, #32
 800f38e:	bf18      	it	ne
 800f390:	2a00      	cmpne	r2, #0
 800f392:	d001      	beq.n	800f398 <HAL_TIM_Base_Init+0xd0>
 800f394:	2b40      	cmp	r3, #64	; 0x40
 800f396:	d14c      	bne.n	800f432 <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f39e:	d002      	beq.n	800f3a6 <HAL_TIM_Base_Init+0xde>
 800f3a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3a4:	d12b      	bne.n	800f3fe <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f3a6:	69a3      	ldr	r3, [r4, #24]
 800f3a8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f3ac:	d130      	bne.n	800f410 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f3ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f3b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f3b6:	b3b3      	cbz	r3, 800f426 <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3b8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3c0:	f851 0b04 	ldr.w	r0, [r1], #4
 800f3c4:	f7ff fef4 	bl	800f1b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3c8:	2301      	movs	r3, #1
  return HAL_OK;
 800f3ca:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f3d4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f3d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f3dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f3ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3f0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f3f4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f3f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f3fc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f3fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f402:	4817      	ldr	r0, [pc, #92]	; (800f460 <HAL_TIM_Base_Init+0x198>)
 800f404:	f7f5 f916 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f408:	69a3      	ldr	r3, [r4, #24]
 800f40a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f40e:	d0ce      	beq.n	800f3ae <HAL_TIM_Base_Init+0xe6>
 800f410:	f240 1119 	movw	r1, #281	; 0x119
 800f414:	4812      	ldr	r0, [pc, #72]	; (800f460 <HAL_TIM_Base_Init+0x198>)
 800f416:	f7f5 f90d 	bl	8004634 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f41a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f41e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1c8      	bne.n	800f3b8 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 800f426:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f428:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f42c:	f7f6 fd28 	bl	8005e80 <HAL_TIM_Base_MspInit>
 800f430:	e7c2      	b.n	800f3b8 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f432:	f240 1117 	movw	r1, #279	; 0x117
 800f436:	480a      	ldr	r0, [pc, #40]	; (800f460 <HAL_TIM_Base_Init+0x198>)
 800f438:	f7f5 f8fc 	bl	8004634 <assert_failed>
 800f43c:	e7ac      	b.n	800f398 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 800f43e:	2001      	movs	r0, #1
}
 800f440:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f442:	f44f 718b 	mov.w	r1, #278	; 0x116
 800f446:	4806      	ldr	r0, [pc, #24]	; (800f460 <HAL_TIM_Base_Init+0x198>)
 800f448:	f7f5 f8f4 	bl	8004634 <assert_failed>
 800f44c:	e799      	b.n	800f382 <HAL_TIM_Base_Init+0xba>
 800f44e:	bf00      	nop
 800f450:	40010000 	.word	0x40010000
 800f454:	40000800 	.word	0x40000800
 800f458:	40000400 	.word	0x40000400
 800f45c:	40002000 	.word	0x40002000
 800f460:	0802b65c 	.word	0x0802b65c

0800f464 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800f464:	2800      	cmp	r0, #0
 800f466:	f000 80b8 	beq.w	800f5da <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f46a:	6802      	ldr	r2, [r0, #0]
 800f46c:	4b5f      	ldr	r3, [pc, #380]	; (800f5ec <HAL_TIM_OC_Init+0x188>)
 800f46e:	4960      	ldr	r1, [pc, #384]	; (800f5f0 <HAL_TIM_OC_Init+0x18c>)
 800f470:	429a      	cmp	r2, r3
 800f472:	bf18      	it	ne
 800f474:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f478:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f47a:	bf14      	ite	ne
 800f47c:	2301      	movne	r3, #1
 800f47e:	2300      	moveq	r3, #0
 800f480:	4604      	mov	r4, r0
 800f482:	485c      	ldr	r0, [pc, #368]	; (800f5f4 <HAL_TIM_OC_Init+0x190>)
 800f484:	4282      	cmp	r2, r0
 800f486:	bf0c      	ite	eq
 800f488:	2300      	moveq	r3, #0
 800f48a:	f003 0301 	andne.w	r3, r3, #1
 800f48e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f492:	428a      	cmp	r2, r1
 800f494:	bf0c      	ite	eq
 800f496:	2300      	moveq	r3, #0
 800f498:	f003 0301 	andne.w	r3, r3, #1
 800f49c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4a0:	4282      	cmp	r2, r0
 800f4a2:	bf0c      	ite	eq
 800f4a4:	2300      	moveq	r3, #0
 800f4a6:	f003 0301 	andne.w	r3, r3, #1
 800f4aa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f4ae:	428a      	cmp	r2, r1
 800f4b0:	bf0c      	ite	eq
 800f4b2:	2300      	moveq	r3, #0
 800f4b4:	f003 0301 	andne.w	r3, r3, #1
 800f4b8:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f4bc:	4282      	cmp	r2, r0
 800f4be:	bf0c      	ite	eq
 800f4c0:	2300      	moveq	r3, #0
 800f4c2:	f003 0301 	andne.w	r3, r3, #1
 800f4c6:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f4ca:	428a      	cmp	r2, r1
 800f4cc:	bf0c      	ite	eq
 800f4ce:	2300      	moveq	r3, #0
 800f4d0:	f003 0301 	andne.w	r3, r3, #1
 800f4d4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f4d8:	4282      	cmp	r2, r0
 800f4da:	bf0c      	ite	eq
 800f4dc:	2300      	moveq	r3, #0
 800f4de:	f003 0301 	andne.w	r3, r3, #1
 800f4e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f4e6:	428a      	cmp	r2, r1
 800f4e8:	bf0c      	ite	eq
 800f4ea:	2300      	moveq	r3, #0
 800f4ec:	f003 0301 	andne.w	r3, r3, #1
 800f4f0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f4f4:	4282      	cmp	r2, r0
 800f4f6:	bf0c      	ite	eq
 800f4f8:	2300      	moveq	r3, #0
 800f4fa:	f003 0301 	andne.w	r3, r3, #1
 800f4fe:	428a      	cmp	r2, r1
 800f500:	bf0c      	ite	eq
 800f502:	2300      	moveq	r3, #0
 800f504:	f003 0301 	andne.w	r3, r3, #1
 800f508:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f50c:	428a      	cmp	r2, r1
 800f50e:	bf0c      	ite	eq
 800f510:	2300      	moveq	r3, #0
 800f512:	f003 0301 	andne.w	r3, r3, #1
 800f516:	b113      	cbz	r3, 800f51e <HAL_TIM_OC_Init+0xba>
 800f518:	4b37      	ldr	r3, [pc, #220]	; (800f5f8 <HAL_TIM_OC_Init+0x194>)
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d15f      	bne.n	800f5de <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	f023 0210 	bic.w	r2, r3, #16
 800f524:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f528:	2920      	cmp	r1, #32
 800f52a:	bf18      	it	ne
 800f52c:	2a00      	cmpne	r2, #0
 800f52e:	d001      	beq.n	800f534 <HAL_TIM_OC_Init+0xd0>
 800f530:	2b40      	cmp	r3, #64	; 0x40
 800f532:	d14c      	bne.n	800f5ce <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f53a:	d002      	beq.n	800f542 <HAL_TIM_OC_Init+0xde>
 800f53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f540:	d12b      	bne.n	800f59a <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f542:	69a3      	ldr	r3, [r4, #24]
 800f544:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f548:	d130      	bne.n	800f5ac <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f54a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f54e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f552:	b3b3      	cbz	r3, 800f5c2 <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f554:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f556:	2302      	movs	r3, #2
 800f558:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f55c:	f851 0b04 	ldr.w	r0, [r1], #4
 800f560:	f7ff fe26 	bl	800f1b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f564:	2301      	movs	r3, #1
  return HAL_OK;
 800f566:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f568:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f56c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f570:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f574:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f578:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f584:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f58c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f590:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f594:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f598:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f59a:	f240 2197 	movw	r1, #663	; 0x297
 800f59e:	4817      	ldr	r0, [pc, #92]	; (800f5fc <HAL_TIM_OC_Init+0x198>)
 800f5a0:	f7f5 f848 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f5a4:	69a3      	ldr	r3, [r4, #24]
 800f5a6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f5aa:	d0ce      	beq.n	800f54a <HAL_TIM_OC_Init+0xe6>
 800f5ac:	f44f 7126 	mov.w	r1, #664	; 0x298
 800f5b0:	4812      	ldr	r0, [pc, #72]	; (800f5fc <HAL_TIM_OC_Init+0x198>)
 800f5b2:	f7f5 f83f 	bl	8004634 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f5b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f5ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1c8      	bne.n	800f554 <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 800f5c2:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f5c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800f5c8:	f7ff f90e 	bl	800e7e8 <HAL_TIM_OC_MspInit>
 800f5cc:	e7c2      	b.n	800f554 <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f5ce:	f240 2196 	movw	r1, #662	; 0x296
 800f5d2:	480a      	ldr	r0, [pc, #40]	; (800f5fc <HAL_TIM_OC_Init+0x198>)
 800f5d4:	f7f5 f82e 	bl	8004634 <assert_failed>
 800f5d8:	e7ac      	b.n	800f534 <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 800f5da:	2001      	movs	r0, #1
}
 800f5dc:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f5de:	f240 2195 	movw	r1, #661	; 0x295
 800f5e2:	4806      	ldr	r0, [pc, #24]	; (800f5fc <HAL_TIM_OC_Init+0x198>)
 800f5e4:	f7f5 f826 	bl	8004634 <assert_failed>
 800f5e8:	e799      	b.n	800f51e <HAL_TIM_OC_Init+0xba>
 800f5ea:	bf00      	nop
 800f5ec:	40010000 	.word	0x40010000
 800f5f0:	40000800 	.word	0x40000800
 800f5f4:	40000400 	.word	0x40000400
 800f5f8:	40002000 	.word	0x40002000
 800f5fc:	0802b65c 	.word	0x0802b65c

0800f600 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800f600:	2800      	cmp	r0, #0
 800f602:	f000 80b8 	beq.w	800f776 <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f606:	6802      	ldr	r2, [r0, #0]
 800f608:	4b5f      	ldr	r3, [pc, #380]	; (800f788 <HAL_TIM_PWM_Init+0x188>)
 800f60a:	4960      	ldr	r1, [pc, #384]	; (800f78c <HAL_TIM_PWM_Init+0x18c>)
 800f60c:	429a      	cmp	r2, r3
 800f60e:	bf18      	it	ne
 800f610:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f614:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f616:	bf14      	ite	ne
 800f618:	2301      	movne	r3, #1
 800f61a:	2300      	moveq	r3, #0
 800f61c:	4604      	mov	r4, r0
 800f61e:	485c      	ldr	r0, [pc, #368]	; (800f790 <HAL_TIM_PWM_Init+0x190>)
 800f620:	4282      	cmp	r2, r0
 800f622:	bf0c      	ite	eq
 800f624:	2300      	moveq	r3, #0
 800f626:	f003 0301 	andne.w	r3, r3, #1
 800f62a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f62e:	428a      	cmp	r2, r1
 800f630:	bf0c      	ite	eq
 800f632:	2300      	moveq	r3, #0
 800f634:	f003 0301 	andne.w	r3, r3, #1
 800f638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f63c:	4282      	cmp	r2, r0
 800f63e:	bf0c      	ite	eq
 800f640:	2300      	moveq	r3, #0
 800f642:	f003 0301 	andne.w	r3, r3, #1
 800f646:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f64a:	428a      	cmp	r2, r1
 800f64c:	bf0c      	ite	eq
 800f64e:	2300      	moveq	r3, #0
 800f650:	f003 0301 	andne.w	r3, r3, #1
 800f654:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f658:	4282      	cmp	r2, r0
 800f65a:	bf0c      	ite	eq
 800f65c:	2300      	moveq	r3, #0
 800f65e:	f003 0301 	andne.w	r3, r3, #1
 800f662:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f666:	428a      	cmp	r2, r1
 800f668:	bf0c      	ite	eq
 800f66a:	2300      	moveq	r3, #0
 800f66c:	f003 0301 	andne.w	r3, r3, #1
 800f670:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f674:	4282      	cmp	r2, r0
 800f676:	bf0c      	ite	eq
 800f678:	2300      	moveq	r3, #0
 800f67a:	f003 0301 	andne.w	r3, r3, #1
 800f67e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f682:	428a      	cmp	r2, r1
 800f684:	bf0c      	ite	eq
 800f686:	2300      	moveq	r3, #0
 800f688:	f003 0301 	andne.w	r3, r3, #1
 800f68c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f690:	4282      	cmp	r2, r0
 800f692:	bf0c      	ite	eq
 800f694:	2300      	moveq	r3, #0
 800f696:	f003 0301 	andne.w	r3, r3, #1
 800f69a:	428a      	cmp	r2, r1
 800f69c:	bf0c      	ite	eq
 800f69e:	2300      	moveq	r3, #0
 800f6a0:	f003 0301 	andne.w	r3, r3, #1
 800f6a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f6a8:	428a      	cmp	r2, r1
 800f6aa:	bf0c      	ite	eq
 800f6ac:	2300      	moveq	r3, #0
 800f6ae:	f003 0301 	andne.w	r3, r3, #1
 800f6b2:	b113      	cbz	r3, 800f6ba <HAL_TIM_PWM_Init+0xba>
 800f6b4:	4b37      	ldr	r3, [pc, #220]	; (800f794 <HAL_TIM_PWM_Init+0x194>)
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d15f      	bne.n	800f77a <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f6ba:	68a3      	ldr	r3, [r4, #8]
 800f6bc:	f023 0210 	bic.w	r2, r3, #16
 800f6c0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f6c4:	2920      	cmp	r1, #32
 800f6c6:	bf18      	it	ne
 800f6c8:	2a00      	cmpne	r2, #0
 800f6ca:	d001      	beq.n	800f6d0 <HAL_TIM_PWM_Init+0xd0>
 800f6cc:	2b40      	cmp	r3, #64	; 0x40
 800f6ce:	d14c      	bne.n	800f76a <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f6d6:	d002      	beq.n	800f6de <HAL_TIM_PWM_Init+0xde>
 800f6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6dc:	d12b      	bne.n	800f736 <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f6de:	69a3      	ldr	r3, [r4, #24]
 800f6e0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f6e4:	d130      	bne.n	800f748 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f6e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f6ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f6ee:	b3b3      	cbz	r3, 800f75e <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6f0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6f8:	f851 0b04 	ldr.w	r0, [r1], #4
 800f6fc:	f7ff fd58 	bl	800f1b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f700:	2301      	movs	r3, #1
  return HAL_OK;
 800f702:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f704:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f708:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f70c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f710:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f714:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f720:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f724:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f728:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f72c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f730:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f734:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f736:	f240 5132 	movw	r1, #1330	; 0x532
 800f73a:	4817      	ldr	r0, [pc, #92]	; (800f798 <HAL_TIM_PWM_Init+0x198>)
 800f73c:	f7f4 ff7a 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f740:	69a3      	ldr	r3, [r4, #24]
 800f742:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f746:	d0ce      	beq.n	800f6e6 <HAL_TIM_PWM_Init+0xe6>
 800f748:	f240 5133 	movw	r1, #1331	; 0x533
 800f74c:	4812      	ldr	r0, [pc, #72]	; (800f798 <HAL_TIM_PWM_Init+0x198>)
 800f74e:	f7f4 ff71 	bl	8004634 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f752:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1c8      	bne.n	800f6f0 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 800f75e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f760:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800f764:	f7ff f842 	bl	800e7ec <HAL_TIM_PWM_MspInit>
 800f768:	e7c2      	b.n	800f6f0 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f76a:	f240 5131 	movw	r1, #1329	; 0x531
 800f76e:	480a      	ldr	r0, [pc, #40]	; (800f798 <HAL_TIM_PWM_Init+0x198>)
 800f770:	f7f4 ff60 	bl	8004634 <assert_failed>
 800f774:	e7ac      	b.n	800f6d0 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 800f776:	2001      	movs	r0, #1
}
 800f778:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f77a:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 800f77e:	4806      	ldr	r0, [pc, #24]	; (800f798 <HAL_TIM_PWM_Init+0x198>)
 800f780:	f7f4 ff58 	bl	8004634 <assert_failed>
 800f784:	e799      	b.n	800f6ba <HAL_TIM_PWM_Init+0xba>
 800f786:	bf00      	nop
 800f788:	40010000 	.word	0x40010000
 800f78c:	40000800 	.word	0x40000800
 800f790:	40000400 	.word	0x40000400
 800f794:	40002000 	.word	0x40002000
 800f798:	0802b65c 	.word	0x0802b65c

0800f79c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800f79c:	2800      	cmp	r0, #0
 800f79e:	f000 80b8 	beq.w	800f912 <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f7a2:	6802      	ldr	r2, [r0, #0]
 800f7a4:	4b5f      	ldr	r3, [pc, #380]	; (800f924 <HAL_TIM_IC_Init+0x188>)
 800f7a6:	4960      	ldr	r1, [pc, #384]	; (800f928 <HAL_TIM_IC_Init+0x18c>)
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	bf18      	it	ne
 800f7ac:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800f7b0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f7b2:	bf14      	ite	ne
 800f7b4:	2301      	movne	r3, #1
 800f7b6:	2300      	moveq	r3, #0
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	485c      	ldr	r0, [pc, #368]	; (800f92c <HAL_TIM_IC_Init+0x190>)
 800f7bc:	4282      	cmp	r2, r0
 800f7be:	bf0c      	ite	eq
 800f7c0:	2300      	moveq	r3, #0
 800f7c2:	f003 0301 	andne.w	r3, r3, #1
 800f7c6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f7ca:	428a      	cmp	r2, r1
 800f7cc:	bf0c      	ite	eq
 800f7ce:	2300      	moveq	r3, #0
 800f7d0:	f003 0301 	andne.w	r3, r3, #1
 800f7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7d8:	4282      	cmp	r2, r0
 800f7da:	bf0c      	ite	eq
 800f7dc:	2300      	moveq	r3, #0
 800f7de:	f003 0301 	andne.w	r3, r3, #1
 800f7e2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f7e6:	428a      	cmp	r2, r1
 800f7e8:	bf0c      	ite	eq
 800f7ea:	2300      	moveq	r3, #0
 800f7ec:	f003 0301 	andne.w	r3, r3, #1
 800f7f0:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f7f4:	4282      	cmp	r2, r0
 800f7f6:	bf0c      	ite	eq
 800f7f8:	2300      	moveq	r3, #0
 800f7fa:	f003 0301 	andne.w	r3, r3, #1
 800f7fe:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f802:	428a      	cmp	r2, r1
 800f804:	bf0c      	ite	eq
 800f806:	2300      	moveq	r3, #0
 800f808:	f003 0301 	andne.w	r3, r3, #1
 800f80c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f810:	4282      	cmp	r2, r0
 800f812:	bf0c      	ite	eq
 800f814:	2300      	moveq	r3, #0
 800f816:	f003 0301 	andne.w	r3, r3, #1
 800f81a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f81e:	428a      	cmp	r2, r1
 800f820:	bf0c      	ite	eq
 800f822:	2300      	moveq	r3, #0
 800f824:	f003 0301 	andne.w	r3, r3, #1
 800f828:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f82c:	4282      	cmp	r2, r0
 800f82e:	bf0c      	ite	eq
 800f830:	2300      	moveq	r3, #0
 800f832:	f003 0301 	andne.w	r3, r3, #1
 800f836:	428a      	cmp	r2, r1
 800f838:	bf0c      	ite	eq
 800f83a:	2300      	moveq	r3, #0
 800f83c:	f003 0301 	andne.w	r3, r3, #1
 800f840:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f844:	428a      	cmp	r2, r1
 800f846:	bf0c      	ite	eq
 800f848:	2300      	moveq	r3, #0
 800f84a:	f003 0301 	andne.w	r3, r3, #1
 800f84e:	b113      	cbz	r3, 800f856 <HAL_TIM_IC_Init+0xba>
 800f850:	4b37      	ldr	r3, [pc, #220]	; (800f930 <HAL_TIM_IC_Init+0x194>)
 800f852:	429a      	cmp	r2, r3
 800f854:	d15f      	bne.n	800f916 <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	f023 0210 	bic.w	r2, r3, #16
 800f85c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f860:	2920      	cmp	r1, #32
 800f862:	bf18      	it	ne
 800f864:	2a00      	cmpne	r2, #0
 800f866:	d001      	beq.n	800f86c <HAL_TIM_IC_Init+0xd0>
 800f868:	2b40      	cmp	r3, #64	; 0x40
 800f86a:	d14c      	bne.n	800f906 <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f872:	d002      	beq.n	800f87a <HAL_TIM_IC_Init+0xde>
 800f874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f878:	d12b      	bne.n	800f8d2 <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f87a:	69a3      	ldr	r3, [r4, #24]
 800f87c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f880:	d130      	bne.n	800f8e4 <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f882:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f886:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f88a:	b3b3      	cbz	r3, 800f8fa <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f88c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800f88e:	2302      	movs	r3, #2
 800f890:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f894:	f851 0b04 	ldr.w	r0, [r1], #4
 800f898:	f7ff fc8a 	bl	800f1b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f89c:	2301      	movs	r3, #1
  return HAL_OK;
 800f89e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f8a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f8ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f8b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f8c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8c4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f8c8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f8cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800f8d0:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800f8d2:	f240 71cc 	movw	r1, #1996	; 0x7cc
 800f8d6:	4817      	ldr	r0, [pc, #92]	; (800f934 <HAL_TIM_IC_Init+0x198>)
 800f8d8:	f7f4 feac 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800f8dc:	69a3      	ldr	r3, [r4, #24]
 800f8de:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800f8e2:	d0ce      	beq.n	800f882 <HAL_TIM_IC_Init+0xe6>
 800f8e4:	f240 71cd 	movw	r1, #1997	; 0x7cd
 800f8e8:	4812      	ldr	r0, [pc, #72]	; (800f934 <HAL_TIM_IC_Init+0x198>)
 800f8ea:	f7f4 fea3 	bl	8004634 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f8ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f8f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1c8      	bne.n	800f88c <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 800f8fa:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800f8fc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800f900:	f7fe ff76 	bl	800e7f0 <HAL_TIM_IC_MspInit>
 800f904:	e7c2      	b.n	800f88c <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800f906:	f240 71cb 	movw	r1, #1995	; 0x7cb
 800f90a:	480a      	ldr	r0, [pc, #40]	; (800f934 <HAL_TIM_IC_Init+0x198>)
 800f90c:	f7f4 fe92 	bl	8004634 <assert_failed>
 800f910:	e7ac      	b.n	800f86c <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 800f912:	2001      	movs	r0, #1
}
 800f914:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f916:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800f91a:	4806      	ldr	r0, [pc, #24]	; (800f934 <HAL_TIM_IC_Init+0x198>)
 800f91c:	f7f4 fe8a 	bl	8004634 <assert_failed>
 800f920:	e799      	b.n	800f856 <HAL_TIM_IC_Init+0xba>
 800f922:	bf00      	nop
 800f924:	40010000 	.word	0x40010000
 800f928:	40000800 	.word	0x40000800
 800f92c:	40000400 	.word	0x40000400
 800f930:	40002000 	.word	0x40002000
 800f934:	0802b65c 	.word	0x0802b65c

0800f938 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f938:	6a03      	ldr	r3, [r0, #32]
 800f93a:	f023 0310 	bic.w	r3, r3, #16
{
 800f93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f942:	6203      	str	r3, [r0, #32]
{
 800f944:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800f946:	6a05      	ldr	r5, [r0, #32]
{
 800f948:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800f94a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f94e:	4b29      	ldr	r3, [pc, #164]	; (800f9f4 <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 800f950:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 800f954:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f956:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f958:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f95a:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f95e:	688b      	ldr	r3, [r1, #8]
 800f960:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f964:	4b24      	ldr	r3, [pc, #144]	; (800f9f8 <TIM_OC2_SetConfig+0xc0>)
 800f966:	4298      	cmp	r0, r3
 800f968:	d00b      	beq.n	800f982 <TIM_OC2_SetConfig+0x4a>
 800f96a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f96e:	4298      	cmp	r0, r3
 800f970:	d007      	beq.n	800f982 <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 800f972:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800f974:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800f978:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800f97a:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800f97c:	6225      	str	r5, [r4, #32]
}
 800f97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f982:	68f3      	ldr	r3, [r6, #12]
 800f984:	f033 0208 	bics.w	r2, r3, #8
 800f988:	d123      	bne.n	800f9d2 <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800f98a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f98e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f992:	69b3      	ldr	r3, [r6, #24]
 800f994:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800f998:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f99c:	d120      	bne.n	800f9e0 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f99e:	6973      	ldr	r3, [r6, #20]
 800f9a0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f9a4:	d107      	bne.n	800f9b6 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9a6:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9aa:	69b1      	ldr	r1, [r6, #24]
 800f9ac:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800f9b0:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800f9b4:	e7dd      	b.n	800f972 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f9b6:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 800f9ba:	4810      	ldr	r0, [pc, #64]	; (800f9fc <TIM_OC2_SetConfig+0xc4>)
 800f9bc:	f7f4 fe3a 	bl	8004634 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9c0:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9c4:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9c6:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9c8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800f9cc:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 800f9d0:	e7cf      	b.n	800f972 <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f9d2:	f641 31aa 	movw	r1, #7082	; 0x1baa
 800f9d6:	4809      	ldr	r0, [pc, #36]	; (800f9fc <TIM_OC2_SetConfig+0xc4>)
 800f9d8:	f7f4 fe2c 	bl	8004634 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9dc:	68f3      	ldr	r3, [r6, #12]
 800f9de:	e7d4      	b.n	800f98a <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f9e0:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 800f9e4:	4805      	ldr	r0, [pc, #20]	; (800f9fc <TIM_OC2_SetConfig+0xc4>)
 800f9e6:	f7f4 fe25 	bl	8004634 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f9ea:	6973      	ldr	r3, [r6, #20]
 800f9ec:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f9f0:	d0d9      	beq.n	800f9a6 <TIM_OC2_SetConfig+0x6e>
 800f9f2:	e7e0      	b.n	800f9b6 <TIM_OC2_SetConfig+0x7e>
 800f9f4:	feff8cff 	.word	0xfeff8cff
 800f9f8:	40010000 	.word	0x40010000
 800f9fc:	0802b65c 	.word	0x0802b65c

0800fa00 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800fa00:	2a14      	cmp	r2, #20
{
 800fa02:	b570      	push	{r4, r5, r6, lr}
 800fa04:	4614      	mov	r4, r2
 800fa06:	4605      	mov	r5, r0
 800fa08:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800fa0a:	d937      	bls.n	800fa7c <HAL_TIM_OC_ConfigChannel+0x7c>
 800fa0c:	2a3c      	cmp	r2, #60	; 0x3c
 800fa0e:	d139      	bne.n	800fa84 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800fa10:	6833      	ldr	r3, [r6, #0]
 800fa12:	f023 0210 	bic.w	r2, r3, #16
 800fa16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800fa1a:	2a40      	cmp	r2, #64	; 0x40
 800fa1c:	bf18      	it	ne
 800fa1e:	2b00      	cmpne	r3, #0
 800fa20:	d003      	beq.n	800fa2a <HAL_TIM_OC_ConfigChannel+0x2a>
 800fa22:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fa26:	f040 8138 	bne.w	800fc9a <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fa2a:	68b3      	ldr	r3, [r6, #8]
 800fa2c:	f033 0302 	bics.w	r3, r3, #2
 800fa30:	d12e      	bne.n	800fa90 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 800fa32:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d033      	beq.n	800faa2 <HAL_TIM_OC_ConfigChannel+0xa2>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800fa40:	2c14      	cmp	r4, #20
 800fa42:	d816      	bhi.n	800fa72 <HAL_TIM_OC_ConfigChannel+0x72>
 800fa44:	e8df f014 	tbh	[pc, r4, lsl #1]
 800fa48:	0015002f 	.word	0x0015002f
 800fa4c:	00150015 	.word	0x00150015
 800fa50:	00150080 	.word	0x00150080
 800fa54:	00150015 	.word	0x00150015
 800fa58:	001500b5 	.word	0x001500b5
 800fa5c:	00150015 	.word	0x00150015
 800fa60:	001500db 	.word	0x001500db
 800fa64:	00150015 	.word	0x00150015
 800fa68:	00150101 	.word	0x00150101
 800fa6c:	00150015 	.word	0x00150015
 800fa70:	010e      	.short	0x010e
 800fa72:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800fa74:	2300      	movs	r3, #0
 800fa76:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800fa7c:	4b98      	ldr	r3, [pc, #608]	; (800fce0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800fa7e:	40d3      	lsrs	r3, r2
 800fa80:	07db      	lsls	r3, r3, #31
 800fa82:	d4c5      	bmi.n	800fa10 <HAL_TIM_OC_ConfigChannel+0x10>
 800fa84:	f640 71df 	movw	r1, #4063	; 0xfdf
 800fa88:	4896      	ldr	r0, [pc, #600]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fa8a:	f7f4 fdd3 	bl	8004634 <assert_failed>
 800fa8e:	e7bf      	b.n	800fa10 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fa90:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800fa94:	4893      	ldr	r0, [pc, #588]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fa96:	f7f4 fdcd 	bl	8004634 <assert_failed>
  __HAL_LOCK(htim);
 800fa9a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d1cb      	bne.n	800fa3a <HAL_TIM_OC_ConfigChannel+0x3a>
 800faa2:	2002      	movs	r0, #2
}
 800faa4:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800faa6:	6828      	ldr	r0, [r5, #0]
 800faa8:	4b8f      	ldr	r3, [pc, #572]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800faaa:	4a90      	ldr	r2, [pc, #576]	; (800fcec <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800faac:	4298      	cmp	r0, r3
 800faae:	bf18      	it	ne
 800fab0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fab4:	bf14      	ite	ne
 800fab6:	2301      	movne	r3, #1
 800fab8:	2300      	moveq	r3, #0
 800faba:	4290      	cmp	r0, r2
 800fabc:	bf0c      	ite	eq
 800fabe:	2300      	moveq	r3, #0
 800fac0:	f003 0301 	andne.w	r3, r3, #1
 800fac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fac8:	4290      	cmp	r0, r2
 800faca:	bf0c      	ite	eq
 800facc:	2300      	moveq	r3, #0
 800face:	f003 0301 	andne.w	r3, r3, #1
 800fad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fad6:	4290      	cmp	r0, r2
 800fad8:	bf0c      	ite	eq
 800fada:	2300      	moveq	r3, #0
 800fadc:	f003 0301 	andne.w	r3, r3, #1
 800fae0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fae4:	4290      	cmp	r0, r2
 800fae6:	bf0c      	ite	eq
 800fae8:	2300      	moveq	r3, #0
 800faea:	f003 0301 	andne.w	r3, r3, #1
 800faee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800faf2:	4290      	cmp	r0, r2
 800faf4:	bf0c      	ite	eq
 800faf6:	2300      	moveq	r3, #0
 800faf8:	f003 0301 	andne.w	r3, r3, #1
 800fafc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb00:	4290      	cmp	r0, r2
 800fb02:	bf0c      	ite	eq
 800fb04:	2300      	moveq	r3, #0
 800fb06:	f003 0301 	andne.w	r3, r3, #1
 800fb0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb0e:	4290      	cmp	r0, r2
 800fb10:	bf0c      	ite	eq
 800fb12:	2300      	moveq	r3, #0
 800fb14:	f003 0301 	andne.w	r3, r3, #1
 800fb18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800fb1c:	4290      	cmp	r0, r2
 800fb1e:	bf0c      	ite	eq
 800fb20:	2300      	moveq	r3, #0
 800fb22:	f003 0301 	andne.w	r3, r3, #1
 800fb26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb2a:	4290      	cmp	r0, r2
 800fb2c:	bf0c      	ite	eq
 800fb2e:	2300      	moveq	r3, #0
 800fb30:	f003 0301 	andne.w	r3, r3, #1
 800fb34:	b11b      	cbz	r3, 800fb3e <HAL_TIM_OC_ConfigChannel+0x13e>
 800fb36:	4b6e      	ldr	r3, [pc, #440]	; (800fcf0 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800fb38:	4298      	cmp	r0, r3
 800fb3a:	f040 80c9 	bne.w	800fcd0 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb3e:	4631      	mov	r1, r6
 800fb40:	f7fe f9ac 	bl	800de9c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fb44:	2000      	movs	r0, #0
      break;
 800fb46:	e795      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800fb48:	6828      	ldr	r0, [r5, #0]
 800fb4a:	4b67      	ldr	r3, [pc, #412]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fb4c:	4a67      	ldr	r2, [pc, #412]	; (800fcec <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800fb4e:	4298      	cmp	r0, r3
 800fb50:	bf18      	it	ne
 800fb52:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fb56:	bf14      	ite	ne
 800fb58:	2301      	movne	r3, #1
 800fb5a:	2300      	moveq	r3, #0
 800fb5c:	4290      	cmp	r0, r2
 800fb5e:	bf0c      	ite	eq
 800fb60:	2300      	moveq	r3, #0
 800fb62:	f003 0301 	andne.w	r3, r3, #1
 800fb66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb6a:	4290      	cmp	r0, r2
 800fb6c:	bf0c      	ite	eq
 800fb6e:	2300      	moveq	r3, #0
 800fb70:	f003 0301 	andne.w	r3, r3, #1
 800fb74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fb78:	4290      	cmp	r0, r2
 800fb7a:	bf0c      	ite	eq
 800fb7c:	2300      	moveq	r3, #0
 800fb7e:	f003 0301 	andne.w	r3, r3, #1
 800fb82:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fb86:	4290      	cmp	r0, r2
 800fb88:	bf0c      	ite	eq
 800fb8a:	2300      	moveq	r3, #0
 800fb8c:	f003 0301 	andne.w	r3, r3, #1
 800fb90:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800fb94:	4290      	cmp	r0, r2
 800fb96:	bf0c      	ite	eq
 800fb98:	2300      	moveq	r3, #0
 800fb9a:	f003 0301 	andne.w	r3, r3, #1
 800fb9e:	b11b      	cbz	r3, 800fba8 <HAL_TIM_OC_ConfigChannel+0x1a8>
 800fba0:	4b54      	ldr	r3, [pc, #336]	; (800fcf4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800fba2:	4298      	cmp	r0, r3
 800fba4:	f040 808d 	bne.w	800fcc2 <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fba8:	4631      	mov	r1, r6
 800fbaa:	f7ff fec5 	bl	800f938 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fbae:	2000      	movs	r0, #0
      break;
 800fbb0:	e760      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800fbb2:	6828      	ldr	r0, [r5, #0]
 800fbb4:	4b4c      	ldr	r3, [pc, #304]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fbb6:	4a4d      	ldr	r2, [pc, #308]	; (800fcec <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800fbb8:	4298      	cmp	r0, r3
 800fbba:	bf18      	it	ne
 800fbbc:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fbc0:	bf14      	ite	ne
 800fbc2:	2301      	movne	r3, #1
 800fbc4:	2300      	moveq	r3, #0
 800fbc6:	4290      	cmp	r0, r2
 800fbc8:	bf0c      	ite	eq
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	f003 0301 	andne.w	r3, r3, #1
 800fbd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fbd4:	4290      	cmp	r0, r2
 800fbd6:	bf0c      	ite	eq
 800fbd8:	2300      	moveq	r3, #0
 800fbda:	f003 0301 	andne.w	r3, r3, #1
 800fbde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fbe2:	4290      	cmp	r0, r2
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2300      	moveq	r3, #0
 800fbe8:	f003 0301 	andne.w	r3, r3, #1
 800fbec:	b113      	cbz	r3, 800fbf4 <HAL_TIM_OC_ConfigChannel+0x1f4>
 800fbee:	4b42      	ldr	r3, [pc, #264]	; (800fcf8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800fbf0:	4298      	cmp	r0, r3
 800fbf2:	d15f      	bne.n	800fcb4 <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fbf4:	4631      	mov	r1, r6
 800fbf6:	f7fe f9b1 	bl	800df5c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fbfa:	2000      	movs	r0, #0
      break;
 800fbfc:	e73a      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fbfe:	6828      	ldr	r0, [r5, #0]
 800fc00:	4b39      	ldr	r3, [pc, #228]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fc02:	4a3a      	ldr	r2, [pc, #232]	; (800fcec <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800fc04:	4298      	cmp	r0, r3
 800fc06:	bf18      	it	ne
 800fc08:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fc0c:	bf14      	ite	ne
 800fc0e:	2301      	movne	r3, #1
 800fc10:	2300      	moveq	r3, #0
 800fc12:	4290      	cmp	r0, r2
 800fc14:	bf0c      	ite	eq
 800fc16:	2300      	moveq	r3, #0
 800fc18:	f003 0301 	andne.w	r3, r3, #1
 800fc1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc20:	4290      	cmp	r0, r2
 800fc22:	bf0c      	ite	eq
 800fc24:	2300      	moveq	r3, #0
 800fc26:	f003 0301 	andne.w	r3, r3, #1
 800fc2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fc2e:	4290      	cmp	r0, r2
 800fc30:	bf0c      	ite	eq
 800fc32:	2300      	moveq	r3, #0
 800fc34:	f003 0301 	andne.w	r3, r3, #1
 800fc38:	b113      	cbz	r3, 800fc40 <HAL_TIM_OC_ConfigChannel+0x240>
 800fc3a:	4b2f      	ldr	r3, [pc, #188]	; (800fcf8 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800fc3c:	4298      	cmp	r0, r3
 800fc3e:	d132      	bne.n	800fca6 <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fc40:	4631      	mov	r1, r6
 800fc42:	f7fe f9ef 	bl	800e024 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fc46:	2000      	movs	r0, #0
      break;
 800fc48:	e714      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fc4a:	6828      	ldr	r0, [r5, #0]
 800fc4c:	4b26      	ldr	r3, [pc, #152]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fc4e:	4298      	cmp	r0, r3
 800fc50:	d003      	beq.n	800fc5a <HAL_TIM_OC_ConfigChannel+0x25a>
 800fc52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc56:	4298      	cmp	r0, r3
 800fc58:	d118      	bne.n	800fc8c <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	f7fe f8ca 	bl	800ddf4 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fc60:	2000      	movs	r0, #0
      break;
 800fc62:	e707      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fc64:	6828      	ldr	r0, [r5, #0]
 800fc66:	4b20      	ldr	r3, [pc, #128]	; (800fce8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800fc68:	4298      	cmp	r0, r3
 800fc6a:	d003      	beq.n	800fc74 <HAL_TIM_OC_ConfigChannel+0x274>
 800fc6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc70:	4298      	cmp	r0, r3
 800fc72:	d104      	bne.n	800fc7e <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc74:	4631      	mov	r1, r6
 800fc76:	f7fe f8e7 	bl	800de48 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800fc7a:	2000      	movs	r0, #0
      break;
 800fc7c:	e6fa      	b.n	800fa74 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fc7e:	4819      	ldr	r0, [pc, #100]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fc80:	f241 011d 	movw	r1, #4125	; 0x101d
 800fc84:	f7f4 fcd6 	bl	8004634 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc88:	6828      	ldr	r0, [r5, #0]
 800fc8a:	e7f3      	b.n	800fc74 <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fc8c:	4815      	ldr	r0, [pc, #84]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fc8e:	f241 0113 	movw	r1, #4115	; 0x1013
 800fc92:	f7f4 fccf 	bl	8004634 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fc96:	6828      	ldr	r0, [r5, #0]
 800fc98:	e7df      	b.n	800fc5a <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800fc9a:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800fc9e:	4811      	ldr	r0, [pc, #68]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fca0:	f7f4 fcc8 	bl	8004634 <assert_failed>
 800fca4:	e6c1      	b.n	800fa2a <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fca6:	480f      	ldr	r0, [pc, #60]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fca8:	f241 0109 	movw	r1, #4105	; 0x1009
 800fcac:	f7f4 fcc2 	bl	8004634 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fcb0:	6828      	ldr	r0, [r5, #0]
 800fcb2:	e7c5      	b.n	800fc40 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800fcb4:	480b      	ldr	r0, [pc, #44]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fcb6:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fcba:	f7f4 fcbb 	bl	8004634 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fcbe:	6828      	ldr	r0, [r5, #0]
 800fcc0:	e798      	b.n	800fbf4 <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800fcc2:	4808      	ldr	r0, [pc, #32]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fcc4:	f640 71f5 	movw	r1, #4085	; 0xff5
 800fcc8:	f7f4 fcb4 	bl	8004634 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fccc:	6828      	ldr	r0, [r5, #0]
 800fcce:	e76b      	b.n	800fba8 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800fcd0:	4804      	ldr	r0, [pc, #16]	; (800fce4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800fcd2:	f640 71eb 	movw	r1, #4075	; 0xfeb
 800fcd6:	f7f4 fcad 	bl	8004634 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fcda:	6828      	ldr	r0, [r5, #0]
 800fcdc:	e72f      	b.n	800fb3e <HAL_TIM_OC_ConfigChannel+0x13e>
 800fcde:	bf00      	nop
 800fce0:	00111111 	.word	0x00111111
 800fce4:	0802b65c 	.word	0x0802b65c
 800fce8:	40010000 	.word	0x40010000
 800fcec:	40000400 	.word	0x40000400
 800fcf0:	40002000 	.word	0x40002000
 800fcf4:	40001800 	.word	0x40001800
 800fcf8:	40010400 	.word	0x40010400

0800fcfc <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800fcfc:	2a14      	cmp	r2, #20
{
 800fcfe:	b570      	push	{r4, r5, r6, lr}
 800fd00:	4616      	mov	r6, r2
 800fd02:	4605      	mov	r5, r0
 800fd04:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800fd06:	d933      	bls.n	800fd70 <HAL_TIM_PWM_ConfigChannel+0x74>
 800fd08:	2a3c      	cmp	r2, #60	; 0x3c
 800fd0a:	d135      	bne.n	800fd78 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800fd0c:	6822      	ldr	r2, [r4, #0]
 800fd0e:	4b90      	ldr	r3, [pc, #576]	; (800ff50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800fd10:	4013      	ands	r3, r2
 800fd12:	2b60      	cmp	r3, #96	; 0x60
 800fd14:	d004      	beq.n	800fd20 <HAL_TIM_PWM_ConfigChannel+0x24>
 800fd16:	f022 0210 	bic.w	r2, r2, #16
 800fd1a:	4b8e      	ldr	r3, [pc, #568]	; (800ff54 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d147      	bne.n	800fdb0 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fd20:	68a3      	ldr	r3, [r4, #8]
 800fd22:	f033 0302 	bics.w	r3, r3, #2
 800fd26:	d13d      	bne.n	800fda4 <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800fd28:	6923      	ldr	r3, [r4, #16]
 800fd2a:	f033 0304 	bics.w	r3, r3, #4
 800fd2e:	d12e      	bne.n	800fd8e <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 800fd30:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d033      	beq.n	800fda0 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800fd38:	2301      	movs	r3, #1
 800fd3a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800fd3e:	2e14      	cmp	r6, #20
 800fd40:	d820      	bhi.n	800fd84 <HAL_TIM_PWM_ConfigChannel+0x88>
 800fd42:	e8df f016 	tbh	[pc, r6, lsl #1]
 800fd46:	00a7      	.short	0x00a7
 800fd48:	001f001f 	.word	0x001f001f
 800fd4c:	0115001f 	.word	0x0115001f
 800fd50:	001f001f 	.word	0x001f001f
 800fd54:	0157001f 	.word	0x0157001f
 800fd58:	001f001f 	.word	0x001f001f
 800fd5c:	0057001f 	.word	0x0057001f
 800fd60:	001f001f 	.word	0x001f001f
 800fd64:	008c001f 	.word	0x008c001f
 800fd68:	001f001f 	.word	0x001f001f
 800fd6c:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 800fd70:	4b79      	ldr	r3, [pc, #484]	; (800ff58 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800fd72:	40d3      	lsrs	r3, r2
 800fd74:	07db      	lsls	r3, r3, #31
 800fd76:	d4c9      	bmi.n	800fd0c <HAL_TIM_PWM_ConfigChannel+0x10>
 800fd78:	f241 01a7 	movw	r1, #4263	; 0x10a7
 800fd7c:	4877      	ldr	r0, [pc, #476]	; (800ff5c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fd7e:	f7f4 fc59 	bl	8004634 <assert_failed>
 800fd82:	e7c3      	b.n	800fd0c <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 800fd84:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800fd86:	2300      	movs	r3, #0
 800fd88:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800fd8c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800fd8e:	f241 01aa 	movw	r1, #4266	; 0x10aa
 800fd92:	4872      	ldr	r0, [pc, #456]	; (800ff5c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fd94:	f7f4 fc4e 	bl	8004634 <assert_failed>
  __HAL_LOCK(htim);
 800fd98:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d1cb      	bne.n	800fd38 <HAL_TIM_PWM_ConfigChannel+0x3c>
 800fda0:	2002      	movs	r0, #2
}
 800fda2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800fda4:	f241 01a9 	movw	r1, #4265	; 0x10a9
 800fda8:	486c      	ldr	r0, [pc, #432]	; (800ff5c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fdaa:	f7f4 fc43 	bl	8004634 <assert_failed>
 800fdae:	e7bb      	b.n	800fd28 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800fdb0:	f241 01a8 	movw	r1, #4264	; 0x10a8
 800fdb4:	4869      	ldr	r0, [pc, #420]	; (800ff5c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800fdb6:	f7f4 fc3d 	bl	8004634 <assert_failed>
 800fdba:	e7b1      	b.n	800fd20 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800fdbc:	6828      	ldr	r0, [r5, #0]
 800fdbe:	4b68      	ldr	r3, [pc, #416]	; (800ff60 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fdc0:	4298      	cmp	r0, r3
 800fdc2:	d004      	beq.n	800fdce <HAL_TIM_PWM_ConfigChannel+0xd2>
 800fdc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fdc8:	4298      	cmp	r0, r3
 800fdca:	f040 814d 	bne.w	8010068 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fdce:	4621      	mov	r1, r4
 800fdd0:	f7fe f83a 	bl	800de48 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fdd4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fdd6:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fdd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fdda:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800fdde:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fde0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fde2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800fde6:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fde8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fdea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800fdee:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fdf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fdf2:	e7c8      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800fdf4:	6828      	ldr	r0, [r5, #0]
 800fdf6:	4b5a      	ldr	r3, [pc, #360]	; (800ff60 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fdf8:	4a5a      	ldr	r2, [pc, #360]	; (800ff64 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800fdfa:	4298      	cmp	r0, r3
 800fdfc:	bf18      	it	ne
 800fdfe:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fe02:	bf14      	ite	ne
 800fe04:	2301      	movne	r3, #1
 800fe06:	2300      	moveq	r3, #0
 800fe08:	4290      	cmp	r0, r2
 800fe0a:	bf0c      	ite	eq
 800fe0c:	2300      	moveq	r3, #0
 800fe0e:	f003 0301 	andne.w	r3, r3, #1
 800fe12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe16:	4290      	cmp	r0, r2
 800fe18:	bf0c      	ite	eq
 800fe1a:	2300      	moveq	r3, #0
 800fe1c:	f003 0301 	andne.w	r3, r3, #1
 800fe20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe24:	4290      	cmp	r0, r2
 800fe26:	bf0c      	ite	eq
 800fe28:	2300      	moveq	r3, #0
 800fe2a:	f003 0301 	andne.w	r3, r3, #1
 800fe2e:	b11b      	cbz	r3, 800fe38 <HAL_TIM_PWM_ConfigChannel+0x13c>
 800fe30:	4b4d      	ldr	r3, [pc, #308]	; (800ff68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800fe32:	4298      	cmp	r0, r3
 800fe34:	f040 811f 	bne.w	8010076 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe38:	4621      	mov	r1, r4
 800fe3a:	f7fe f8f3 	bl	800e024 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe3e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe40:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe42:	69d9      	ldr	r1, [r3, #28]
 800fe44:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800fe48:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe4a:	69d9      	ldr	r1, [r3, #28]
 800fe4c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800fe50:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe52:	69da      	ldr	r2, [r3, #28]
 800fe54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800fe58:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe5a:	61da      	str	r2, [r3, #28]
      break;
 800fe5c:	e793      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800fe5e:	6828      	ldr	r0, [r5, #0]
 800fe60:	4b3f      	ldr	r3, [pc, #252]	; (800ff60 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fe62:	4298      	cmp	r0, r3
 800fe64:	d004      	beq.n	800fe70 <HAL_TIM_PWM_ConfigChannel+0x174>
 800fe66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fe6a:	4298      	cmp	r0, r3
 800fe6c:	f040 80f5 	bne.w	801005a <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe70:	4621      	mov	r1, r4
 800fe72:	f7fd ffbf 	bl	800ddf4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe76:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe78:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe7c:	f041 0108 	orr.w	r1, r1, #8
 800fe80:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe84:	f021 0104 	bic.w	r1, r1, #4
 800fe88:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe8c:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fe8e:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe92:	e778      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800fe94:	6828      	ldr	r0, [r5, #0]
 800fe96:	4b32      	ldr	r3, [pc, #200]	; (800ff60 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800fe98:	4a32      	ldr	r2, [pc, #200]	; (800ff64 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800fe9a:	4298      	cmp	r0, r3
 800fe9c:	bf18      	it	ne
 800fe9e:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fea2:	bf14      	ite	ne
 800fea4:	2301      	movne	r3, #1
 800fea6:	2300      	moveq	r3, #0
 800fea8:	4290      	cmp	r0, r2
 800feaa:	bf0c      	ite	eq
 800feac:	2300      	moveq	r3, #0
 800feae:	f003 0301 	andne.w	r3, r3, #1
 800feb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800feb6:	4290      	cmp	r0, r2
 800feb8:	bf0c      	ite	eq
 800feba:	2300      	moveq	r3, #0
 800febc:	f003 0301 	andne.w	r3, r3, #1
 800fec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fec4:	4290      	cmp	r0, r2
 800fec6:	bf0c      	ite	eq
 800fec8:	2300      	moveq	r3, #0
 800feca:	f003 0301 	andne.w	r3, r3, #1
 800fece:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800fed2:	4290      	cmp	r0, r2
 800fed4:	bf0c      	ite	eq
 800fed6:	2300      	moveq	r3, #0
 800fed8:	f003 0301 	andne.w	r3, r3, #1
 800fedc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800fee0:	4290      	cmp	r0, r2
 800fee2:	bf0c      	ite	eq
 800fee4:	2300      	moveq	r3, #0
 800fee6:	f003 0301 	andne.w	r3, r3, #1
 800feea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800feee:	4290      	cmp	r0, r2
 800fef0:	bf0c      	ite	eq
 800fef2:	2300      	moveq	r3, #0
 800fef4:	f003 0301 	andne.w	r3, r3, #1
 800fef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fefc:	4290      	cmp	r0, r2
 800fefe:	bf0c      	ite	eq
 800ff00:	2300      	moveq	r3, #0
 800ff02:	f003 0301 	andne.w	r3, r3, #1
 800ff06:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ff0a:	4290      	cmp	r0, r2
 800ff0c:	bf0c      	ite	eq
 800ff0e:	2300      	moveq	r3, #0
 800ff10:	f003 0301 	andne.w	r3, r3, #1
 800ff14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff18:	4290      	cmp	r0, r2
 800ff1a:	bf0c      	ite	eq
 800ff1c:	2300      	moveq	r3, #0
 800ff1e:	f003 0301 	andne.w	r3, r3, #1
 800ff22:	b11b      	cbz	r3, 800ff2c <HAL_TIM_PWM_ConfigChannel+0x230>
 800ff24:	4b11      	ldr	r3, [pc, #68]	; (800ff6c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800ff26:	4298      	cmp	r0, r3
 800ff28:	f040 80ba 	bne.w	80100a0 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7fd ffb5 	bl	800de9c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff32:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff34:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff36:	6999      	ldr	r1, [r3, #24]
 800ff38:	f041 0108 	orr.w	r1, r1, #8
 800ff3c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff3e:	6999      	ldr	r1, [r3, #24]
 800ff40:	f021 0104 	bic.w	r1, r1, #4
 800ff44:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff46:	699a      	ldr	r2, [r3, #24]
 800ff48:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ff4a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff4c:	619a      	str	r2, [r3, #24]
      break;
 800ff4e:	e71a      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
 800ff50:	fffeffef 	.word	0xfffeffef
 800ff54:	00010040 	.word	0x00010040
 800ff58:	00111111 	.word	0x00111111
 800ff5c:	0802b65c 	.word	0x0802b65c
 800ff60:	40010000 	.word	0x40010000
 800ff64:	40000400 	.word	0x40000400
 800ff68:	40010400 	.word	0x40010400
 800ff6c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ff70:	6828      	ldr	r0, [r5, #0]
 800ff72:	4b4f      	ldr	r3, [pc, #316]	; (80100b0 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800ff74:	4a4f      	ldr	r2, [pc, #316]	; (80100b4 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800ff76:	4298      	cmp	r0, r3
 800ff78:	bf18      	it	ne
 800ff7a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800ff7e:	bf14      	ite	ne
 800ff80:	2301      	movne	r3, #1
 800ff82:	2300      	moveq	r3, #0
 800ff84:	4290      	cmp	r0, r2
 800ff86:	bf0c      	ite	eq
 800ff88:	2300      	moveq	r3, #0
 800ff8a:	f003 0301 	andne.w	r3, r3, #1
 800ff8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff92:	4290      	cmp	r0, r2
 800ff94:	bf0c      	ite	eq
 800ff96:	2300      	moveq	r3, #0
 800ff98:	f003 0301 	andne.w	r3, r3, #1
 800ff9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ffa0:	4290      	cmp	r0, r2
 800ffa2:	bf0c      	ite	eq
 800ffa4:	2300      	moveq	r3, #0
 800ffa6:	f003 0301 	andne.w	r3, r3, #1
 800ffaa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ffae:	4290      	cmp	r0, r2
 800ffb0:	bf0c      	ite	eq
 800ffb2:	2300      	moveq	r3, #0
 800ffb4:	f003 0301 	andne.w	r3, r3, #1
 800ffb8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ffbc:	4290      	cmp	r0, r2
 800ffbe:	bf0c      	ite	eq
 800ffc0:	2300      	moveq	r3, #0
 800ffc2:	f003 0301 	andne.w	r3, r3, #1
 800ffc6:	b113      	cbz	r3, 800ffce <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800ffc8:	4b3b      	ldr	r3, [pc, #236]	; (80100b8 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 800ffca:	4298      	cmp	r0, r3
 800ffcc:	d161      	bne.n	8010092 <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ffce:	4621      	mov	r1, r4
 800ffd0:	f7ff fcb2 	bl	800f938 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ffd4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ffd6:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ffd8:	6999      	ldr	r1, [r3, #24]
 800ffda:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800ffde:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ffe0:	6999      	ldr	r1, [r3, #24]
 800ffe2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800ffe6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ffe8:	699a      	ldr	r2, [r3, #24]
 800ffea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 800ffee:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fff0:	619a      	str	r2, [r3, #24]
      break;
 800fff2:	e6c8      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800fff4:	6828      	ldr	r0, [r5, #0]
 800fff6:	4b2e      	ldr	r3, [pc, #184]	; (80100b0 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800fff8:	4a2e      	ldr	r2, [pc, #184]	; (80100b4 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800fffa:	4298      	cmp	r0, r3
 800fffc:	bf18      	it	ne
 800fffe:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010002:	bf14      	ite	ne
 8010004:	2301      	movne	r3, #1
 8010006:	2300      	moveq	r3, #0
 8010008:	4290      	cmp	r0, r2
 801000a:	bf0c      	ite	eq
 801000c:	2300      	moveq	r3, #0
 801000e:	f003 0301 	andne.w	r3, r3, #1
 8010012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010016:	4290      	cmp	r0, r2
 8010018:	bf0c      	ite	eq
 801001a:	2300      	moveq	r3, #0
 801001c:	f003 0301 	andne.w	r3, r3, #1
 8010020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010024:	4290      	cmp	r0, r2
 8010026:	bf0c      	ite	eq
 8010028:	2300      	moveq	r3, #0
 801002a:	f003 0301 	andne.w	r3, r3, #1
 801002e:	b113      	cbz	r3, 8010036 <HAL_TIM_PWM_ConfigChannel+0x33a>
 8010030:	4b22      	ldr	r3, [pc, #136]	; (80100bc <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8010032:	4298      	cmp	r0, r3
 8010034:	d126      	bne.n	8010084 <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010036:	4621      	mov	r1, r4
 8010038:	f7fd ff90 	bl	800df5c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801003c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801003e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010040:	69d9      	ldr	r1, [r3, #28]
 8010042:	f041 0108 	orr.w	r1, r1, #8
 8010046:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010048:	69d9      	ldr	r1, [r3, #28]
 801004a:	f021 0104 	bic.w	r1, r1, #4
 801004e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010050:	69da      	ldr	r2, [r3, #28]
 8010052:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010054:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010056:	61da      	str	r2, [r3, #28]
      break;
 8010058:	e695      	b.n	800fd86 <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 801005a:	4819      	ldr	r0, [pc, #100]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801005c:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8010060:	f7f4 fae8 	bl	8004634 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010064:	6828      	ldr	r0, [r5, #0]
 8010066:	e703      	b.n	800fe70 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010068:	4815      	ldr	r0, [pc, #84]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801006a:	f241 1109 	movw	r1, #4361	; 0x1109
 801006e:	f7f4 fae1 	bl	8004634 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010072:	6828      	ldr	r0, [r5, #0]
 8010074:	e6ab      	b.n	800fdce <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010076:	4812      	ldr	r0, [pc, #72]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010078:	f241 01e7 	movw	r1, #4327	; 0x10e7
 801007c:	f7f4 fada 	bl	8004634 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010080:	6828      	ldr	r0, [r5, #0]
 8010082:	e6d9      	b.n	800fe38 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010084:	480e      	ldr	r0, [pc, #56]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010086:	f241 01d6 	movw	r1, #4310	; 0x10d6
 801008a:	f7f4 fad3 	bl	8004634 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801008e:	6828      	ldr	r0, [r5, #0]
 8010090:	e7d1      	b.n	8010036 <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010092:	480b      	ldr	r0, [pc, #44]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010094:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8010098:	f7f4 facc 	bl	8004634 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801009c:	6828      	ldr	r0, [r5, #0]
 801009e:	e796      	b.n	800ffce <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80100a0:	4807      	ldr	r0, [pc, #28]	; (80100c0 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80100a2:	f241 01b4 	movw	r1, #4276	; 0x10b4
 80100a6:	f7f4 fac5 	bl	8004634 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80100aa:	6828      	ldr	r0, [r5, #0]
 80100ac:	e73e      	b.n	800ff2c <HAL_TIM_PWM_ConfigChannel+0x230>
 80100ae:	bf00      	nop
 80100b0:	40010000 	.word	0x40010000
 80100b4:	40000400 	.word	0x40000400
 80100b8:	40001800 	.word	0x40001800
 80100bc:	40010400 	.word	0x40010400
 80100c0:	0802b65c 	.word	0x0802b65c

080100c4 <TIM_TI1_SetConfig>:
{
 80100c4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100c6:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80100c8:	4e1b      	ldr	r6, [pc, #108]	; (8010138 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100ca:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80100ce:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100d0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80100d2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80100d4:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80100d6:	d01d      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80100dc:	d01a      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100de:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80100e2:	42b0      	cmp	r0, r6
 80100e4:	d016      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80100ea:	42b0      	cmp	r0, r6
 80100ec:	d012      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80100f2:	42b0      	cmp	r0, r6
 80100f4:	d00e      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100f6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80100fa:	42b0      	cmp	r0, r6
 80100fc:	d00a      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 80100fe:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010102:	42b0      	cmp	r0, r6
 8010104:	d006      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
 8010106:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 801010a:	42b0      	cmp	r0, r6
 801010c:	d002      	beq.n	8010114 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801010e:	f044 0201 	orr.w	r2, r4, #1
 8010112:	e002      	b.n	801011a <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010114:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8010118:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801011a:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801011c:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010120:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010124:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010128:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801012a:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801012c:	4313      	orrs	r3, r2
}
 801012e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8010130:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8010132:	6201      	str	r1, [r0, #32]
}
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	40010000 	.word	0x40010000

0801013c <HAL_TIM_IC_ConfigChannel>:
{
 801013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801013e:	4ba8      	ldr	r3, [pc, #672]	; (80103e0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8010140:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010142:	6801      	ldr	r1, [r0, #0]
{
 8010144:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010146:	4fa7      	ldr	r7, [pc, #668]	; (80103e4 <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 8010148:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801014a:	4299      	cmp	r1, r3
 801014c:	bf18      	it	ne
 801014e:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8010152:	4aa5      	ldr	r2, [pc, #660]	; (80103e8 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8010154:	bf14      	ite	ne
 8010156:	2301      	movne	r3, #1
 8010158:	2300      	moveq	r3, #0
 801015a:	42b9      	cmp	r1, r7
 801015c:	bf0c      	ite	eq
 801015e:	2300      	moveq	r3, #0
 8010160:	f003 0301 	andne.w	r3, r3, #1
 8010164:	4291      	cmp	r1, r2
 8010166:	bf0c      	ite	eq
 8010168:	2300      	moveq	r3, #0
 801016a:	f003 0301 	andne.w	r3, r3, #1
 801016e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010172:	4291      	cmp	r1, r2
 8010174:	bf0c      	ite	eq
 8010176:	2300      	moveq	r3, #0
 8010178:	f003 0301 	andne.w	r3, r3, #1
 801017c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010180:	4291      	cmp	r1, r2
 8010182:	bf0c      	ite	eq
 8010184:	2300      	moveq	r3, #0
 8010186:	f003 0301 	andne.w	r3, r3, #1
 801018a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801018e:	4291      	cmp	r1, r2
 8010190:	bf0c      	ite	eq
 8010192:	2300      	moveq	r3, #0
 8010194:	f003 0301 	andne.w	r3, r3, #1
 8010198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801019c:	4291      	cmp	r1, r2
 801019e:	bf0c      	ite	eq
 80101a0:	2300      	moveq	r3, #0
 80101a2:	f003 0301 	andne.w	r3, r3, #1
 80101a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80101aa:	4291      	cmp	r1, r2
 80101ac:	bf0c      	ite	eq
 80101ae:	2300      	moveq	r3, #0
 80101b0:	f003 0301 	andne.w	r3, r3, #1
 80101b4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80101b8:	4291      	cmp	r1, r2
 80101ba:	bf0c      	ite	eq
 80101bc:	2300      	moveq	r3, #0
 80101be:	f003 0301 	andne.w	r3, r3, #1
 80101c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80101c6:	4291      	cmp	r1, r2
 80101c8:	bf0c      	ite	eq
 80101ca:	2300      	moveq	r3, #0
 80101cc:	f003 0301 	andne.w	r3, r3, #1
 80101d0:	b11b      	cbz	r3, 80101da <HAL_TIM_IC_ConfigChannel+0x9e>
 80101d2:	4b86      	ldr	r3, [pc, #536]	; (80103ec <HAL_TIM_IC_ConfigChannel+0x2b0>)
 80101d4:	4299      	cmp	r1, r3
 80101d6:	f040 8158 	bne.w	801048a <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80101da:	6823      	ldr	r3, [r4, #0]
 80101dc:	f033 0202 	bics.w	r2, r3, #2
 80101e0:	d001      	beq.n	80101e6 <HAL_TIM_IC_ConfigChannel+0xaa>
 80101e2:	2b0a      	cmp	r3, #10
 80101e4:	d11e      	bne.n	8010224 <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80101e6:	6863      	ldr	r3, [r4, #4]
 80101e8:	3b01      	subs	r3, #1
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d823      	bhi.n	8010236 <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80101ee:	68a3      	ldr	r3, [r4, #8]
 80101f0:	f033 030c 	bics.w	r3, r3, #12
 80101f4:	d128      	bne.n	8010248 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80101f6:	68e3      	ldr	r3, [r4, #12]
 80101f8:	2b0f      	cmp	r3, #15
 80101fa:	d82d      	bhi.n	8010258 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 80101fc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010200:	2b01      	cmp	r3, #1
 8010202:	d032      	beq.n	801026a <HAL_TIM_IC_ConfigChannel+0x12e>
 8010204:	2001      	movs	r0, #1
 8010206:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 801020a:	b386      	cbz	r6, 801026e <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 801020c:	2e04      	cmp	r6, #4
 801020e:	d042      	beq.n	8010296 <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8010210:	2e08      	cmp	r6, #8
 8010212:	f000 80f3 	beq.w	80103fc <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 8010216:	2e0c      	cmp	r6, #12
 8010218:	f000 8095 	beq.w	8010346 <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 801021c:	2300      	movs	r3, #0
 801021e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010224:	f241 0141 	movw	r1, #4161	; 0x1041
 8010228:	4871      	ldr	r0, [pc, #452]	; (80103f0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801022a:	f7f4 fa03 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801022e:	6863      	ldr	r3, [r4, #4]
 8010230:	3b01      	subs	r3, #1
 8010232:	2b02      	cmp	r3, #2
 8010234:	d9db      	bls.n	80101ee <HAL_TIM_IC_ConfigChannel+0xb2>
 8010236:	f241 0142 	movw	r1, #4162	; 0x1042
 801023a:	486d      	ldr	r0, [pc, #436]	; (80103f0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801023c:	f7f4 f9fa 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010240:	68a3      	ldr	r3, [r4, #8]
 8010242:	f033 030c 	bics.w	r3, r3, #12
 8010246:	d0d6      	beq.n	80101f6 <HAL_TIM_IC_ConfigChannel+0xba>
 8010248:	f241 0143 	movw	r1, #4163	; 0x1043
 801024c:	4868      	ldr	r0, [pc, #416]	; (80103f0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801024e:	f7f4 f9f1 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010252:	68e3      	ldr	r3, [r4, #12]
 8010254:	2b0f      	cmp	r3, #15
 8010256:	d9d1      	bls.n	80101fc <HAL_TIM_IC_ConfigChannel+0xc0>
 8010258:	f241 0144 	movw	r1, #4164	; 0x1044
 801025c:	4864      	ldr	r0, [pc, #400]	; (80103f0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801025e:	f7f4 f9e9 	bl	8004634 <assert_failed>
  __HAL_LOCK(htim);
 8010262:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010266:	2b01      	cmp	r3, #1
 8010268:	d1cc      	bne.n	8010204 <HAL_TIM_IC_ConfigChannel+0xc8>
 801026a:	2002      	movs	r0, #2
}
 801026c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 801026e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8010272:	68e3      	ldr	r3, [r4, #12]
 8010274:	6828      	ldr	r0, [r5, #0]
 8010276:	f7ff ff25 	bl	80100c4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801027a:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801027c:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801027e:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010280:	6999      	ldr	r1, [r3, #24]
 8010282:	f021 010c 	bic.w	r1, r1, #12
 8010286:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010288:	699a      	ldr	r2, [r3, #24]
 801028a:	4322      	orrs	r2, r4
 801028c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 801028e:	2300      	movs	r3, #0
 8010290:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010294:	e7c5      	b.n	8010222 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010296:	682a      	ldr	r2, [r5, #0]
 8010298:	4b51      	ldr	r3, [pc, #324]	; (80103e0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801029a:	4952      	ldr	r1, [pc, #328]	; (80103e4 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 801029c:	429a      	cmp	r2, r3
 801029e:	bf18      	it	ne
 80102a0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 80102a4:	bf14      	ite	ne
 80102a6:	2301      	movne	r3, #1
 80102a8:	2300      	moveq	r3, #0
 80102aa:	428a      	cmp	r2, r1
 80102ac:	bf0c      	ite	eq
 80102ae:	2300      	moveq	r3, #0
 80102b0:	f003 0301 	andne.w	r3, r3, #1
 80102b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80102b8:	428a      	cmp	r2, r1
 80102ba:	bf0c      	ite	eq
 80102bc:	2300      	moveq	r3, #0
 80102be:	f003 0301 	andne.w	r3, r3, #1
 80102c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80102c6:	428a      	cmp	r2, r1
 80102c8:	bf0c      	ite	eq
 80102ca:	2300      	moveq	r3, #0
 80102cc:	f003 0301 	andne.w	r3, r3, #1
 80102d0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80102d4:	428a      	cmp	r2, r1
 80102d6:	bf0c      	ite	eq
 80102d8:	2300      	moveq	r3, #0
 80102da:	f003 0301 	andne.w	r3, r3, #1
 80102de:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80102e2:	428a      	cmp	r2, r1
 80102e4:	bf0c      	ite	eq
 80102e6:	2300      	moveq	r3, #0
 80102e8:	f003 0301 	andne.w	r3, r3, #1
 80102ec:	b11b      	cbz	r3, 80102f6 <HAL_TIM_IC_ConfigChannel+0x1ba>
 80102ee:	4b41      	ldr	r3, [pc, #260]	; (80103f4 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 80102f0:	429a      	cmp	r2, r3
 80102f2:	f040 80d7 	bne.w	80104a4 <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102f6:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80102f8:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102fa:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80102fe:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8010300:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010304:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010306:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8010308:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801030a:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801030c:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801030e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010312:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010316:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801031a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801031e:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8010320:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8010322:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010324:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010328:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 801032a:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 801032c:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801032e:	6991      	ldr	r1, [r2, #24]
 8010330:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010334:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010336:	6993      	ldr	r3, [r2, #24]
 8010338:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 801033c:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 801033e:	2300      	movs	r3, #0
 8010340:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010344:	e76d      	b.n	8010222 <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010346:	682b      	ldr	r3, [r5, #0]
 8010348:	4a25      	ldr	r2, [pc, #148]	; (80103e0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 801034a:	4926      	ldr	r1, [pc, #152]	; (80103e4 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 801034c:	4293      	cmp	r3, r2
 801034e:	bf18      	it	ne
 8010350:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010354:	bf14      	ite	ne
 8010356:	2201      	movne	r2, #1
 8010358:	2200      	moveq	r2, #0
 801035a:	428b      	cmp	r3, r1
 801035c:	bf0c      	ite	eq
 801035e:	2200      	moveq	r2, #0
 8010360:	f002 0201 	andne.w	r2, r2, #1
 8010364:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010368:	428b      	cmp	r3, r1
 801036a:	bf0c      	ite	eq
 801036c:	2200      	moveq	r2, #0
 801036e:	f002 0201 	andne.w	r2, r2, #1
 8010372:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010376:	428b      	cmp	r3, r1
 8010378:	bf0c      	ite	eq
 801037a:	2200      	moveq	r2, #0
 801037c:	f002 0201 	andne.w	r2, r2, #1
 8010380:	b142      	cbz	r2, 8010394 <HAL_TIM_IC_ConfigChannel+0x258>
 8010382:	4a1d      	ldr	r2, [pc, #116]	; (80103f8 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d005      	beq.n	8010394 <HAL_TIM_IC_ConfigChannel+0x258>
 8010388:	f241 017a 	movw	r1, #4218	; 0x107a
 801038c:	4818      	ldr	r0, [pc, #96]	; (80103f0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 801038e:	f7f4 f951 	bl	8004634 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 8010392:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010394:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8010396:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010398:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801039c:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 801039e:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80103a2:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80103a4:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80103a6:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80103a8:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80103aa:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80103ac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80103b0:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80103b4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80103b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80103bc:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80103be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 80103c0:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80103c2:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80103c6:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80103c8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 80103ca:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80103cc:	69d9      	ldr	r1, [r3, #28]
 80103ce:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80103d2:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80103d4:	69da      	ldr	r2, [r3, #28]
 80103d6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80103da:	61da      	str	r2, [r3, #28]
 80103dc:	e71e      	b.n	801021c <HAL_TIM_IC_ConfigChannel+0xe0>
 80103de:	bf00      	nop
 80103e0:	40010000 	.word	0x40010000
 80103e4:	40000400 	.word	0x40000400
 80103e8:	40000800 	.word	0x40000800
 80103ec:	40002000 	.word	0x40002000
 80103f0:	0802b65c 	.word	0x0802b65c
 80103f4:	40001800 	.word	0x40001800
 80103f8:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	4a2d      	ldr	r2, [pc, #180]	; (80104b4 <HAL_TIM_IC_ConfigChannel+0x378>)
 8010400:	492d      	ldr	r1, [pc, #180]	; (80104b8 <HAL_TIM_IC_ConfigChannel+0x37c>)
 8010402:	4293      	cmp	r3, r2
 8010404:	bf18      	it	ne
 8010406:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 801040a:	bf14      	ite	ne
 801040c:	2201      	movne	r2, #1
 801040e:	2200      	moveq	r2, #0
 8010410:	428b      	cmp	r3, r1
 8010412:	bf0c      	ite	eq
 8010414:	2200      	moveq	r2, #0
 8010416:	f002 0201 	andne.w	r2, r2, #1
 801041a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801041e:	428b      	cmp	r3, r1
 8010420:	bf0c      	ite	eq
 8010422:	2200      	moveq	r2, #0
 8010424:	f002 0201 	andne.w	r2, r2, #1
 8010428:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801042c:	428b      	cmp	r3, r1
 801042e:	bf0c      	ite	eq
 8010430:	2200      	moveq	r2, #0
 8010432:	f002 0201 	andne.w	r2, r2, #1
 8010436:	b112      	cbz	r2, 801043e <HAL_TIM_IC_ConfigChannel+0x302>
 8010438:	4a20      	ldr	r2, [pc, #128]	; (80104bc <HAL_TIM_IC_ConfigChannel+0x380>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d12b      	bne.n	8010496 <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801043e:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8010440:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010442:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010446:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 8010448:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801044c:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801044e:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010450:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010452:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010454:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010456:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801045a:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 801045e:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010460:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010464:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8010466:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010468:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 801046c:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801046e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010470:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010472:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010474:	69d9      	ldr	r1, [r3, #28]
 8010476:	f021 010c 	bic.w	r1, r1, #12
 801047a:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801047c:	69da      	ldr	r2, [r3, #28]
 801047e:	4322      	orrs	r2, r4
 8010480:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010482:	2300      	movs	r3, #0
 8010484:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010488:	e6cb      	b.n	8010222 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 801048a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 801048e:	480c      	ldr	r0, [pc, #48]	; (80104c0 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010490:	f7f4 f8d0 	bl	8004634 <assert_failed>
 8010494:	e6a1      	b.n	80101da <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010496:	f241 016a 	movw	r1, #4202	; 0x106a
 801049a:	4809      	ldr	r0, [pc, #36]	; (80104c0 <HAL_TIM_IC_ConfigChannel+0x384>)
 801049c:	f7f4 f8ca 	bl	8004634 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80104a0:	682b      	ldr	r3, [r5, #0]
 80104a2:	e7cc      	b.n	801043e <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80104a4:	f241 015a 	movw	r1, #4186	; 0x105a
 80104a8:	4805      	ldr	r0, [pc, #20]	; (80104c0 <HAL_TIM_IC_ConfigChannel+0x384>)
 80104aa:	f7f4 f8c3 	bl	8004634 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80104ae:	682a      	ldr	r2, [r5, #0]
 80104b0:	e721      	b.n	80102f6 <HAL_TIM_IC_ConfigChannel+0x1ba>
 80104b2:	bf00      	nop
 80104b4:	40010000 	.word	0x40010000
 80104b8:	40000400 	.word	0x40000400
 80104bc:	40010400 	.word	0x40010400
 80104c0:	0802b65c 	.word	0x0802b65c

080104c4 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80104c4:	4b2b      	ldr	r3, [pc, #172]	; (8010574 <TIM_CCxChannelCmd+0xb0>)
 80104c6:	4298      	cmp	r0, r3
{
 80104c8:	b530      	push	{r4, r5, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	b083      	sub	sp, #12
 80104ce:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80104d0:	d031      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80104d6:	d02e      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104d8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80104dc:	4298      	cmp	r0, r3
 80104de:	d02a      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104e4:	4298      	cmp	r0, r3
 80104e6:	d026      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104ec:	4298      	cmp	r0, r3
 80104ee:	d022      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104f0:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 80104f4:	4298      	cmp	r0, r3
 80104f6:	d01e      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 80104f8:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80104fc:	4298      	cmp	r0, r3
 80104fe:	d01a      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010504:	4298      	cmp	r0, r3
 8010506:	d016      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801050c:	4298      	cmp	r0, r3
 801050e:	d012      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010510:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8010514:	4298      	cmp	r0, r3
 8010516:	d00e      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801051c:	4298      	cmp	r0, r3
 801051e:	d00a      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010524:	4298      	cmp	r0, r3
 8010526:	d006      	beq.n	8010536 <TIM_CCxChannelCmd+0x72>
 8010528:	f641 6199 	movw	r1, #7833	; 0x1e99
 801052c:	4812      	ldr	r0, [pc, #72]	; (8010578 <TIM_CCxChannelCmd+0xb4>)
 801052e:	9201      	str	r2, [sp, #4]
 8010530:	f7f4 f880 	bl	8004634 <assert_failed>
 8010534:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 8010536:	2d14      	cmp	r5, #20
 8010538:	d90f      	bls.n	801055a <TIM_CCxChannelCmd+0x96>
 801053a:	2d3c      	cmp	r5, #60	; 0x3c
 801053c:	d111      	bne.n	8010562 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801053e:	f005 051f 	and.w	r5, r5, #31
 8010542:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010544:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010546:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010548:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 801054a:	ea23 0301 	bic.w	r3, r3, r1
 801054e:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010550:	6a25      	ldr	r5, [r4, #32]
 8010552:	4315      	orrs	r5, r2
 8010554:	6225      	str	r5, [r4, #32]
}
 8010556:	b003      	add	sp, #12
 8010558:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 801055a:	4b08      	ldr	r3, [pc, #32]	; (801057c <TIM_CCxChannelCmd+0xb8>)
 801055c:	40eb      	lsrs	r3, r5
 801055e:	07db      	lsls	r3, r3, #31
 8010560:	d4ed      	bmi.n	801053e <TIM_CCxChannelCmd+0x7a>
 8010562:	f641 619a 	movw	r1, #7834	; 0x1e9a
 8010566:	4804      	ldr	r0, [pc, #16]	; (8010578 <TIM_CCxChannelCmd+0xb4>)
 8010568:	9201      	str	r2, [sp, #4]
 801056a:	f7f4 f863 	bl	8004634 <assert_failed>
 801056e:	9a01      	ldr	r2, [sp, #4]
 8010570:	e7e5      	b.n	801053e <TIM_CCxChannelCmd+0x7a>
 8010572:	bf00      	nop
 8010574:	40010000 	.word	0x40010000
 8010578:	0802b65c 	.word	0x0802b65c
 801057c:	00111111 	.word	0x00111111

08010580 <HAL_TIM_IC_Start_DMA>:
{
 8010580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010584:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010586:	460d      	mov	r5, r1
{
 8010588:	4617      	mov	r7, r2
 801058a:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801058c:	2900      	cmp	r1, #0
 801058e:	f040 8087 	bne.w	80106a0 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010592:	6803      	ldr	r3, [r0, #0]
 8010594:	4aa4      	ldr	r2, [pc, #656]	; (8010828 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010596:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801059a:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801059c:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80105a0:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80105a2:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80105a6:	d037      	beq.n	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80105a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ac:	d034      	beq.n	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80105ae:	4a9f      	ldr	r2, [pc, #636]	; (801082c <HAL_TIM_IC_Start_DMA+0x2ac>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d031      	beq.n	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80105b4:	4a9e      	ldr	r2, [pc, #632]	; (8010830 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d066      	beq.n	8010688 <HAL_TIM_IC_Start_DMA+0x108>
 80105ba:	4a9e      	ldr	r2, [pc, #632]	; (8010834 <HAL_TIM_IC_Start_DMA+0x2b4>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d063      	beq.n	8010688 <HAL_TIM_IC_Start_DMA+0x108>
 80105c0:	4a9d      	ldr	r2, [pc, #628]	; (8010838 <HAL_TIM_IC_Start_DMA+0x2b8>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	f040 80f7 	bne.w	80107b6 <HAL_TIM_IC_Start_DMA+0x236>
 80105c8:	2d14      	cmp	r5, #20
 80105ca:	d862      	bhi.n	8010692 <HAL_TIM_IC_Start_DMA+0x112>
 80105cc:	4a9b      	ldr	r2, [pc, #620]	; (801083c <HAL_TIM_IC_Start_DMA+0x2bc>)
 80105ce:	40ea      	lsrs	r2, r5
 80105d0:	07d2      	lsls	r2, r2, #31
 80105d2:	d55e      	bpl.n	8010692 <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80105d4:	4994      	ldr	r1, [pc, #592]	; (8010828 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80105d6:	4a95      	ldr	r2, [pc, #596]	; (801082c <HAL_TIM_IC_Start_DMA+0x2ac>)
 80105d8:	428b      	cmp	r3, r1
 80105da:	bf18      	it	ne
 80105dc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80105e0:	bf14      	ite	ne
 80105e2:	2101      	movne	r1, #1
 80105e4:	2100      	moveq	r1, #0
 80105e6:	4293      	cmp	r3, r2
 80105e8:	bf0c      	ite	eq
 80105ea:	2100      	moveq	r1, #0
 80105ec:	f001 0101 	andne.w	r1, r1, #1
 80105f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80105f4:	4293      	cmp	r3, r2
 80105f6:	bf0c      	ite	eq
 80105f8:	2100      	moveq	r1, #0
 80105fa:	f001 0101 	andne.w	r1, r1, #1
 80105fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010602:	4293      	cmp	r3, r2
 8010604:	bf0c      	ite	eq
 8010606:	2100      	moveq	r1, #0
 8010608:	f001 0101 	andne.w	r1, r1, #1
 801060c:	b121      	cbz	r1, 8010618 <HAL_TIM_IC_Start_DMA+0x98>
 801060e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010612:	4293      	cmp	r3, r2
 8010614:	f040 80c5 	bne.w	80107a2 <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8010618:	2e02      	cmp	r6, #2
 801061a:	d06a      	beq.n	80106f2 <HAL_TIM_IC_Start_DMA+0x172>
 801061c:	f1b9 0f02 	cmp.w	r9, #2
 8010620:	d067      	beq.n	80106f2 <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8010622:	2e01      	cmp	r6, #1
 8010624:	d106      	bne.n	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
 8010626:	f1b9 0f01 	cmp.w	r9, #1
 801062a:	d103      	bne.n	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 801062c:	b92f      	cbnz	r7, 801063a <HAL_TIM_IC_Start_DMA+0xba>
 801062e:	f1b8 0f00 	cmp.w	r8, #0
 8010632:	d002      	beq.n	801063a <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 8010634:	2001      	movs	r0, #1
}
 8010636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801063a:	2302      	movs	r3, #2
 801063c:	2d00      	cmp	r5, #0
 801063e:	d05b      	beq.n	80106f8 <HAL_TIM_IC_Start_DMA+0x178>
 8010640:	2d04      	cmp	r5, #4
 8010642:	f000 8119 	beq.w	8010878 <HAL_TIM_IC_Start_DMA+0x2f8>
 8010646:	2d08      	cmp	r5, #8
 8010648:	f000 8141 	beq.w	80108ce <HAL_TIM_IC_Start_DMA+0x34e>
 801064c:	2d0c      	cmp	r5, #12
 801064e:	f000 815d 	beq.w	801090c <HAL_TIM_IC_Start_DMA+0x38c>
 8010652:	2d10      	cmp	r5, #16
 8010654:	f000 812f 	beq.w	80108b6 <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010658:	4629      	mov	r1, r5
  switch (Channel)
 801065a:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801065c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010660:	2201      	movs	r2, #1
 8010662:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010664:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010668:	f7ff ff2c 	bl	80104c4 <TIM_CCxChannelCmd>
  switch (Channel)
 801066c:	2d08      	cmp	r5, #8
 801066e:	f200 812b 	bhi.w	80108c8 <HAL_TIM_IC_Start_DMA+0x348>
 8010672:	e8df f015 	tbh	[pc, r5, lsl #1]
 8010676:	010a      	.short	0x010a
 8010678:	01290129 	.word	0x01290129
 801067c:	01350129 	.word	0x01350129
 8010680:	01290129 	.word	0x01290129
 8010684:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010688:	f035 0204 	bics.w	r2, r5, #4
 801068c:	d0a2      	beq.n	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
 801068e:	2a08      	cmp	r2, #8
 8010690:	d0a0      	beq.n	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
 8010692:	f640 114a 	movw	r1, #2378	; 0x94a
 8010696:	486a      	ldr	r0, [pc, #424]	; (8010840 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8010698:	f7f3 ffcc 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	e799      	b.n	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80106a0:	2904      	cmp	r1, #4
 80106a2:	f000 8090 	beq.w	80107c6 <HAL_TIM_IC_Start_DMA+0x246>
 80106a6:	2908      	cmp	r1, #8
 80106a8:	f000 80e0 	beq.w	801086c <HAL_TIM_IC_Start_DMA+0x2ec>
 80106ac:	290c      	cmp	r1, #12
 80106ae:	d07e      	beq.n	80107ae <HAL_TIM_IC_Start_DMA+0x22e>
 80106b0:	2910      	cmp	r1, #16
 80106b2:	f000 814a 	beq.w	801094a <HAL_TIM_IC_Start_DMA+0x3ca>
 80106b6:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 80106ba:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	4a5a      	ldr	r2, [pc, #360]	; (8010828 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80106c0:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80106c4:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80106c6:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80106ca:	f000 8098 	beq.w	80107fe <HAL_TIM_IC_Start_DMA+0x27e>
 80106ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106d2:	f000 8088 	beq.w	80107e6 <HAL_TIM_IC_Start_DMA+0x266>
 80106d6:	4a55      	ldr	r2, [pc, #340]	; (801082c <HAL_TIM_IC_Start_DMA+0x2ac>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	f47f af6b 	bne.w	80105b4 <HAL_TIM_IC_Start_DMA+0x34>
 80106de:	f035 020c 	bics.w	r2, r5, #12
 80106e2:	d099      	beq.n	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80106e4:	4a57      	ldr	r2, [pc, #348]	; (8010844 <HAL_TIM_IC_Start_DMA+0x2c4>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d1d3      	bne.n	8010692 <HAL_TIM_IC_Start_DMA+0x112>
 80106ea:	2d00      	cmp	r5, #0
 80106ec:	f43f af72 	beq.w	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
 80106f0:	e7cf      	b.n	8010692 <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 80106f2:	2002      	movs	r0, #2
}
 80106f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106fc:	4629      	mov	r1, r5
 80106fe:	2201      	movs	r2, #1
 8010700:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010702:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010706:	f7ff fedd 	bl	80104c4 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801070a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801070c:	494e      	ldr	r1, [pc, #312]	; (8010848 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 801070e:	4643      	mov	r3, r8
 8010710:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8010712:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010714:	494d      	ldr	r1, [pc, #308]	; (801084c <HAL_TIM_IC_Start_DMA+0x2cc>)
 8010716:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010718:	494d      	ldr	r1, [pc, #308]	; (8010850 <HAL_TIM_IC_Start_DMA+0x2d0>)
 801071a:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 801071c:	6821      	ldr	r1, [r4, #0]
 801071e:	3134      	adds	r1, #52	; 0x34
 8010720:	f7f8 f8c2 	bl	80088a8 <HAL_DMA_Start_IT>
 8010724:	2800      	cmp	r0, #0
 8010726:	d185      	bne.n	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010728:	6822      	ldr	r2, [r4, #0]
 801072a:	68d3      	ldr	r3, [r2, #12]
 801072c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010730:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010732:	4b3d      	ldr	r3, [pc, #244]	; (8010828 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8010734:	4c3d      	ldr	r4, [pc, #244]	; (801082c <HAL_TIM_IC_Start_DMA+0x2ac>)
 8010736:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801073a:	bf18      	it	ne
 801073c:	429a      	cmpne	r2, r3
 801073e:	493c      	ldr	r1, [pc, #240]	; (8010830 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8010740:	bf0c      	ite	eq
 8010742:	2301      	moveq	r3, #1
 8010744:	2300      	movne	r3, #0
 8010746:	42a2      	cmp	r2, r4
 8010748:	bf08      	it	eq
 801074a:	f043 0301 	orreq.w	r3, r3, #1
 801074e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8010752:	428a      	cmp	r2, r1
 8010754:	bf08      	it	eq
 8010756:	f043 0301 	orreq.w	r3, r3, #1
 801075a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 801075e:	42a2      	cmp	r2, r4
 8010760:	bf08      	it	eq
 8010762:	f043 0301 	orreq.w	r3, r3, #1
 8010766:	428a      	cmp	r2, r1
 8010768:	bf08      	it	eq
 801076a:	f043 0301 	orreq.w	r3, r3, #1
 801076e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010772:	428a      	cmp	r2, r1
 8010774:	bf08      	it	eq
 8010776:	f043 0301 	orreq.w	r3, r3, #1
 801077a:	b913      	cbnz	r3, 8010782 <HAL_TIM_IC_Start_DMA+0x202>
 801077c:	4b35      	ldr	r3, [pc, #212]	; (8010854 <HAL_TIM_IC_Start_DMA+0x2d4>)
 801077e:	429a      	cmp	r2, r3
 8010780:	d109      	bne.n	8010796 <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010782:	6891      	ldr	r1, [r2, #8]
 8010784:	4b34      	ldr	r3, [pc, #208]	; (8010858 <HAL_TIM_IC_Start_DMA+0x2d8>)
 8010786:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010788:	2b06      	cmp	r3, #6
 801078a:	f43f af54 	beq.w	8010636 <HAL_TIM_IC_Start_DMA+0xb6>
 801078e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010792:	f43f af50 	beq.w	8010636 <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 8010796:	6813      	ldr	r3, [r2, #0]
 8010798:	f043 0301 	orr.w	r3, r3, #1
 801079c:	6013      	str	r3, [r2, #0]
}
 801079e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80107a2:	f640 114b 	movw	r1, #2379	; 0x94b
 80107a6:	4826      	ldr	r0, [pc, #152]	; (8010840 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80107a8:	f7f3 ff44 	bl	8004634 <assert_failed>
 80107ac:	e734      	b.n	8010618 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80107ae:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 80107b2:	b2f6      	uxtb	r6, r6
 80107b4:	e782      	b.n	80106bc <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80107b6:	4a29      	ldr	r2, [pc, #164]	; (801085c <HAL_TIM_IC_Start_DMA+0x2dc>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d128      	bne.n	801080e <HAL_TIM_IC_Start_DMA+0x28e>
 80107bc:	f035 0204 	bics.w	r2, r5, #4
 80107c0:	f47f af67 	bne.w	8010692 <HAL_TIM_IC_Start_DMA+0x112>
 80107c4:	e706      	b.n	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80107c6:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80107ca:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80107ce:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80107d0:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80107d2:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80107d6:	4a14      	ldr	r2, [pc, #80]	; (8010828 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	f43f af1d 	beq.w	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80107de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107e2:	f47f af78 	bne.w	80106d6 <HAL_TIM_IC_Start_DMA+0x156>
 80107e6:	f035 020c 	bics.w	r2, r5, #12
 80107ea:	f43f af15 	beq.w	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 80107ee:	4a1c      	ldr	r2, [pc, #112]	; (8010860 <HAL_TIM_IC_Start_DMA+0x2e0>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	f47f af77 	bne.w	80106e4 <HAL_TIM_IC_Start_DMA+0x164>
 80107f6:	2d00      	cmp	r5, #0
 80107f8:	f43f aeec 	beq.w	80105d4 <HAL_TIM_IC_Start_DMA+0x54>
 80107fc:	e749      	b.n	8010692 <HAL_TIM_IC_Start_DMA+0x112>
 80107fe:	f025 0204 	bic.w	r2, r5, #4
 8010802:	2a08      	cmp	r2, #8
 8010804:	f43f af08 	beq.w	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 8010808:	2a10      	cmp	r2, #16
 801080a:	f43f af05 	beq.w	8010618 <HAL_TIM_IC_Start_DMA+0x98>
 801080e:	4a15      	ldr	r2, [pc, #84]	; (8010864 <HAL_TIM_IC_Start_DMA+0x2e4>)
 8010810:	4293      	cmp	r3, r2
 8010812:	f43f af6a 	beq.w	80106ea <HAL_TIM_IC_Start_DMA+0x16a>
 8010816:	4a14      	ldr	r2, [pc, #80]	; (8010868 <HAL_TIM_IC_Start_DMA+0x2e8>)
 8010818:	4293      	cmp	r3, r2
 801081a:	f43f af66 	beq.w	80106ea <HAL_TIM_IC_Start_DMA+0x16a>
 801081e:	4a0d      	ldr	r2, [pc, #52]	; (8010854 <HAL_TIM_IC_Start_DMA+0x2d4>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d0cb      	beq.n	80107bc <HAL_TIM_IC_Start_DMA+0x23c>
 8010824:	e7e3      	b.n	80107ee <HAL_TIM_IC_Start_DMA+0x26e>
 8010826:	bf00      	nop
 8010828:	40010000 	.word	0x40010000
 801082c:	40000400 	.word	0x40000400
 8010830:	40000800 	.word	0x40000800
 8010834:	40000c00 	.word	0x40000c00
 8010838:	40010400 	.word	0x40010400
 801083c:	00111111 	.word	0x00111111
 8010840:	0802b65c 	.word	0x0802b65c
 8010844:	40002000 	.word	0x40002000
 8010848:	0800eeb1 	.word	0x0800eeb1
 801084c:	0800ef49 	.word	0x0800ef49
 8010850:	0800f12d 	.word	0x0800f12d
 8010854:	40001800 	.word	0x40001800
 8010858:	00010007 	.word	0x00010007
 801085c:	40014000 	.word	0x40014000
 8010860:	40001c00 	.word	0x40001c00
 8010864:	40014400 	.word	0x40014400
 8010868:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801086c:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010870:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010874:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010876:	e7ab      	b.n	80107d0 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010878:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801087c:	4629      	mov	r1, r5
 801087e:	2201      	movs	r2, #1
 8010880:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010886:	f7ff fe1d 	bl	80104c4 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 801088a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 801088c:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 801088e:	4931      	ldr	r1, [pc, #196]	; (8010954 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8010890:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8010892:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010894:	4930      	ldr	r1, [pc, #192]	; (8010958 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8010896:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010898:	4930      	ldr	r1, [pc, #192]	; (801095c <HAL_TIM_IC_Start_DMA+0x3dc>)
 801089a:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 801089c:	6821      	ldr	r1, [r4, #0]
 801089e:	3138      	adds	r1, #56	; 0x38
 80108a0:	f7f8 f802 	bl	80088a8 <HAL_DMA_Start_IT>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	f47f aec5 	bne.w	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80108aa:	6822      	ldr	r2, [r4, #0]
 80108ac:	68d3      	ldr	r3, [r2, #12]
 80108ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80108b2:	60d3      	str	r3, [r2, #12]
      break;
 80108b4:	e73d      	b.n	8010732 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108ba:	2201      	movs	r2, #1
 80108bc:	4629      	mov	r1, r5
 80108be:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108c0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108c4:	f7ff fdfe 	bl	80104c4 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108c8:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 80108ca:	2001      	movs	r0, #1
 80108cc:	e731      	b.n	8010732 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108d2:	4629      	mov	r1, r5
 80108d4:	2201      	movs	r2, #1
 80108d6:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108dc:	f7ff fdf2 	bl	80104c4 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80108e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80108e2:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80108e4:	491b      	ldr	r1, [pc, #108]	; (8010954 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80108e6:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80108e8:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80108ea:	491b      	ldr	r1, [pc, #108]	; (8010958 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80108ec:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80108ee:	491b      	ldr	r1, [pc, #108]	; (801095c <HAL_TIM_IC_Start_DMA+0x3dc>)
 80108f0:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80108f2:	6821      	ldr	r1, [r4, #0]
 80108f4:	313c      	adds	r1, #60	; 0x3c
 80108f6:	f7f7 ffd7 	bl	80088a8 <HAL_DMA_Start_IT>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	f47f ae9a 	bne.w	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010900:	6822      	ldr	r2, [r4, #0]
 8010902:	68d3      	ldr	r3, [r2, #12]
 8010904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010908:	60d3      	str	r3, [r2, #12]
      break;
 801090a:	e712      	b.n	8010732 <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801090c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010910:	4629      	mov	r1, r5
 8010912:	2201      	movs	r2, #1
 8010914:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010916:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801091a:	f7ff fdd3 	bl	80104c4 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801091e:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010920:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010922:	490c      	ldr	r1, [pc, #48]	; (8010954 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010924:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8010926:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8010928:	490b      	ldr	r1, [pc, #44]	; (8010958 <HAL_TIM_IC_Start_DMA+0x3d8>)
 801092a:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 801092c:	490b      	ldr	r1, [pc, #44]	; (801095c <HAL_TIM_IC_Start_DMA+0x3dc>)
 801092e:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8010930:	6821      	ldr	r1, [r4, #0]
 8010932:	3140      	adds	r1, #64	; 0x40
 8010934:	f7f7 ffb8 	bl	80088a8 <HAL_DMA_Start_IT>
 8010938:	2800      	cmp	r0, #0
 801093a:	f47f ae7b 	bne.w	8010634 <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801093e:	6822      	ldr	r2, [r4, #0]
 8010940:	68d3      	ldr	r3, [r2, #12]
 8010942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010946:	60d3      	str	r3, [r2, #12]
      break;
 8010948:	e6f3      	b.n	8010732 <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801094a:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 801094e:	b2f6      	uxtb	r6, r6
 8010950:	e6b4      	b.n	80106bc <HAL_TIM_IC_Start_DMA+0x13c>
 8010952:	bf00      	nop
 8010954:	0800eeb1 	.word	0x0800eeb1
 8010958:	0800ef49 	.word	0x0800ef49
 801095c:	0800f12d 	.word	0x0800f12d

08010960 <HAL_TIM_IC_Stop_DMA>:
{
 8010960:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010962:	4b82      	ldr	r3, [pc, #520]	; (8010b6c <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 8010964:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010966:	6800      	ldr	r0, [r0, #0]
{
 8010968:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801096a:	4298      	cmp	r0, r3
 801096c:	f000 80cc 	beq.w	8010b08 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8010970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010974:	d056      	beq.n	8010a24 <HAL_TIM_IC_Stop_DMA+0xc4>
 8010976:	4b7e      	ldr	r3, [pc, #504]	; (8010b70 <HAL_TIM_IC_Stop_DMA+0x210>)
 8010978:	4298      	cmp	r0, r3
 801097a:	d053      	beq.n	8010a24 <HAL_TIM_IC_Stop_DMA+0xc4>
 801097c:	4b7d      	ldr	r3, [pc, #500]	; (8010b74 <HAL_TIM_IC_Stop_DMA+0x214>)
 801097e:	4298      	cmp	r0, r3
 8010980:	d050      	beq.n	8010a24 <HAL_TIM_IC_Stop_DMA+0xc4>
 8010982:	4b7d      	ldr	r3, [pc, #500]	; (8010b78 <HAL_TIM_IC_Stop_DMA+0x218>)
 8010984:	4298      	cmp	r0, r3
 8010986:	d04d      	beq.n	8010a24 <HAL_TIM_IC_Stop_DMA+0xc4>
 8010988:	4b7c      	ldr	r3, [pc, #496]	; (8010b7c <HAL_TIM_IC_Stop_DMA+0x21c>)
 801098a:	4298      	cmp	r0, r3
 801098c:	f000 80bc 	beq.w	8010b08 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8010990:	4b7b      	ldr	r3, [pc, #492]	; (8010b80 <HAL_TIM_IC_Stop_DMA+0x220>)
 8010992:	4298      	cmp	r0, r3
 8010994:	d00c      	beq.n	80109b0 <HAL_TIM_IC_Stop_DMA+0x50>
 8010996:	4b7b      	ldr	r3, [pc, #492]	; (8010b84 <HAL_TIM_IC_Stop_DMA+0x224>)
 8010998:	4298      	cmp	r0, r3
 801099a:	f000 80d9 	beq.w	8010b50 <HAL_TIM_IC_Stop_DMA+0x1f0>
 801099e:	4b7a      	ldr	r3, [pc, #488]	; (8010b88 <HAL_TIM_IC_Stop_DMA+0x228>)
 80109a0:	4298      	cmp	r0, r3
 80109a2:	f000 80d5 	beq.w	8010b50 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80109a6:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80109aa:	4298      	cmp	r0, r3
 80109ac:	f040 80c9 	bne.w	8010b42 <HAL_TIM_IC_Stop_DMA+0x1e2>
 80109b0:	f035 0304 	bics.w	r3, r5, #4
 80109b4:	f000 80cf 	beq.w	8010b56 <HAL_TIM_IC_Stop_DMA+0x1f6>
 80109b8:	4874      	ldr	r0, [pc, #464]	; (8010b8c <HAL_TIM_IC_Stop_DMA+0x22c>)
 80109ba:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80109be:	f7f3 fe39 	bl	8004634 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80109c2:	6820      	ldr	r0, [r4, #0]
 80109c4:	4b69      	ldr	r3, [pc, #420]	; (8010b6c <HAL_TIM_IC_Stop_DMA+0x20c>)
 80109c6:	4a6a      	ldr	r2, [pc, #424]	; (8010b70 <HAL_TIM_IC_Stop_DMA+0x210>)
 80109c8:	4298      	cmp	r0, r3
 80109ca:	bf18      	it	ne
 80109cc:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80109d0:	bf14      	ite	ne
 80109d2:	2301      	movne	r3, #1
 80109d4:	2300      	moveq	r3, #0
 80109d6:	4290      	cmp	r0, r2
 80109d8:	bf0c      	ite	eq
 80109da:	2300      	moveq	r3, #0
 80109dc:	f003 0301 	andne.w	r3, r3, #1
 80109e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109e4:	4290      	cmp	r0, r2
 80109e6:	bf0c      	ite	eq
 80109e8:	2300      	moveq	r3, #0
 80109ea:	f003 0301 	andne.w	r3, r3, #1
 80109ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80109f2:	4290      	cmp	r0, r2
 80109f4:	bf0c      	ite	eq
 80109f6:	2300      	moveq	r3, #0
 80109f8:	f003 0301 	andne.w	r3, r3, #1
 80109fc:	b11b      	cbz	r3, 8010a06 <HAL_TIM_IC_Stop_DMA+0xa6>
 80109fe:	4b5f      	ldr	r3, [pc, #380]	; (8010b7c <HAL_TIM_IC_Stop_DMA+0x21c>)
 8010a00:	4298      	cmp	r0, r3
 8010a02:	f040 80a8 	bne.w	8010b56 <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010a06:	2200      	movs	r2, #0
 8010a08:	4629      	mov	r1, r5
 8010a0a:	f7ff fd5b 	bl	80104c4 <TIM_CCxChannelCmd>
  switch (Channel)
 8010a0e:	2d0c      	cmp	r5, #12
 8010a10:	d80c      	bhi.n	8010a2c <HAL_TIM_IC_Stop_DMA+0xcc>
 8010a12:	e8df f005 	tbb	[pc, r5]
 8010a16:	0b0d      	.short	0x0b0d
 8010a18:	0b640b0b 	.word	0x0b640b0b
 8010a1c:	0b4a0b0b 	.word	0x0b4a0b0b
 8010a20:	0b0b      	.short	0x0b0b
 8010a22:	22          	.byte	0x22
 8010a23:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010a24:	f035 030c 	bics.w	r3, r5, #12
 8010a28:	d1c6      	bne.n	80109b8 <HAL_TIM_IC_Stop_DMA+0x58>
 8010a2a:	e7ec      	b.n	8010a06 <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8010a2c:	2001      	movs	r0, #1
}
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010a30:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010a32:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010a34:	68d3      	ldr	r3, [r2, #12]
 8010a36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010a3a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010a3c:	f7f7 ffd8 	bl	80089f0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	f241 1211 	movw	r2, #4369	; 0x1111
 8010a46:	6a19      	ldr	r1, [r3, #32]
 8010a48:	4211      	tst	r1, r2
 8010a4a:	d06c      	beq.n	8010b26 <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	2000      	movs	r0, #0
 8010a50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010a54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8010a58:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010a5a:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010a5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010a5e:	68d3      	ldr	r3, [r2, #12]
 8010a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a64:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010a66:	f7f7 ffc3 	bl	80089f0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	f241 1211 	movw	r2, #4369	; 0x1111
 8010a70:	6a19      	ldr	r1, [r3, #32]
 8010a72:	4211      	tst	r1, r2
 8010a74:	d161      	bne.n	8010b3a <HAL_TIM_IC_Stop_DMA+0x1da>
 8010a76:	6a19      	ldr	r1, [r3, #32]
 8010a78:	f240 4244 	movw	r2, #1092	; 0x444
 8010a7c:	4211      	tst	r1, r2
 8010a7e:	d15c      	bne.n	8010b3a <HAL_TIM_IC_Stop_DMA+0x1da>
 8010a80:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010a82:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8010a84:	f022 0201 	bic.w	r2, r2, #1
 8010a88:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010a8a:	d036      	beq.n	8010afa <HAL_TIM_IC_Stop_DMA+0x19a>
 8010a8c:	2d08      	cmp	r5, #8
 8010a8e:	d01f      	beq.n	8010ad0 <HAL_TIM_IC_Stop_DMA+0x170>
 8010a90:	2d0c      	cmp	r5, #12
 8010a92:	d052      	beq.n	8010b3a <HAL_TIM_IC_Stop_DMA+0x1da>
 8010a94:	2d10      	cmp	r5, #16
 8010a96:	f04f 0301 	mov.w	r3, #1
 8010a9a:	d063      	beq.n	8010b64 <HAL_TIM_IC_Stop_DMA+0x204>
 8010a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8010aa8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010aaa:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010aac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010aae:	68d3      	ldr	r3, [r2, #12]
 8010ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ab4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010ab6:	f7f7 ff9b 	bl	80089f0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	f241 1211 	movw	r2, #4369	; 0x1111
 8010ac0:	6a19      	ldr	r1, [r3, #32]
 8010ac2:	4211      	tst	r1, r2
 8010ac4:	d104      	bne.n	8010ad0 <HAL_TIM_IC_Stop_DMA+0x170>
 8010ac6:	6a19      	ldr	r1, [r3, #32]
 8010ac8:	f240 4244 	movw	r2, #1092	; 0x444
 8010acc:	4211      	tst	r1, r2
 8010ace:	d0d7      	beq.n	8010a80 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010ad8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010ade:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010ae0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010ae2:	68d3      	ldr	r3, [r2, #12]
 8010ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ae8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010aea:	f7f7 ff81 	bl	80089f0 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	f241 1211 	movw	r2, #4369	; 0x1111
 8010af4:	6a19      	ldr	r1, [r3, #32]
 8010af6:	4211      	tst	r1, r2
 8010af8:	d00f      	beq.n	8010b1a <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010afa:	2301      	movs	r3, #1
 8010afc:	2000      	movs	r0, #0
 8010afe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010b06:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010b08:	2d14      	cmp	r5, #20
 8010b0a:	f63f af55 	bhi.w	80109b8 <HAL_TIM_IC_Stop_DMA+0x58>
 8010b0e:	4b20      	ldr	r3, [pc, #128]	; (8010b90 <HAL_TIM_IC_Stop_DMA+0x230>)
 8010b10:	40eb      	lsrs	r3, r5
 8010b12:	07db      	lsls	r3, r3, #31
 8010b14:	f53f af77 	bmi.w	8010a06 <HAL_TIM_IC_Stop_DMA+0xa6>
 8010b18:	e74e      	b.n	80109b8 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8010b1a:	6a19      	ldr	r1, [r3, #32]
 8010b1c:	f240 4244 	movw	r2, #1092	; 0x444
 8010b20:	4211      	tst	r1, r2
 8010b22:	d0ad      	beq.n	8010a80 <HAL_TIM_IC_Stop_DMA+0x120>
 8010b24:	e7e9      	b.n	8010afa <HAL_TIM_IC_Stop_DMA+0x19a>
 8010b26:	6a19      	ldr	r1, [r3, #32]
 8010b28:	f240 4244 	movw	r2, #1092	; 0x444
 8010b2c:	4211      	tst	r1, r2
 8010b2e:	d18d      	bne.n	8010a4c <HAL_TIM_IC_Stop_DMA+0xec>
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	f022 0201 	bic.w	r2, r2, #1
 8010b36:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010b38:	e788      	b.n	8010a4c <HAL_TIM_IC_Stop_DMA+0xec>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010b40:	e7ae      	b.n	8010aa0 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8010b42:	4b14      	ldr	r3, [pc, #80]	; (8010b94 <HAL_TIM_IC_Stop_DMA+0x234>)
 8010b44:	4298      	cmp	r0, r3
 8010b46:	d003      	beq.n	8010b50 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8010b48:	4b13      	ldr	r3, [pc, #76]	; (8010b98 <HAL_TIM_IC_Stop_DMA+0x238>)
 8010b4a:	4298      	cmp	r0, r3
 8010b4c:	f47f af34 	bne.w	80109b8 <HAL_TIM_IC_Stop_DMA+0x58>
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	f47f af31 	bne.w	80109b8 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010b56:	480d      	ldr	r0, [pc, #52]	; (8010b8c <HAL_TIM_IC_Stop_DMA+0x22c>)
 8010b58:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8010b5c:	f7f3 fd6a 	bl	8004634 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010b60:	6820      	ldr	r0, [r4, #0]
 8010b62:	e750      	b.n	8010a06 <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b68:	e79a      	b.n	8010aa0 <HAL_TIM_IC_Stop_DMA+0x140>
 8010b6a:	bf00      	nop
 8010b6c:	40010000 	.word	0x40010000
 8010b70:	40000400 	.word	0x40000400
 8010b74:	40000800 	.word	0x40000800
 8010b78:	40000c00 	.word	0x40000c00
 8010b7c:	40010400 	.word	0x40010400
 8010b80:	40014000 	.word	0x40014000
 8010b84:	40014400 	.word	0x40014400
 8010b88:	40014800 	.word	0x40014800
 8010b8c:	0802b65c 	.word	0x0802b65c
 8010b90:	00111111 	.word	0x00111111
 8010b94:	40001c00 	.word	0x40001c00
 8010b98:	40002000 	.word	0x40002000

08010b9c <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010b9c:	6802      	ldr	r2, [r0, #0]
{
 8010b9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010ba2:	4b6d      	ldr	r3, [pc, #436]	; (8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8010ba4:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010ba6:	4f6d      	ldr	r7, [pc, #436]	; (8010d5c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8010ba8:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010baa:	429a      	cmp	r2, r3
 8010bac:	bf18      	it	ne
 8010bae:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010bb2:	4e6b      	ldr	r6, [pc, #428]	; (8010d60 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8010bb4:	496b      	ldr	r1, [pc, #428]	; (8010d64 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8010bb6:	bf14      	ite	ne
 8010bb8:	2301      	movne	r3, #1
 8010bba:	2300      	moveq	r3, #0
 8010bbc:	42ba      	cmp	r2, r7
 8010bbe:	bf0c      	ite	eq
 8010bc0:	2300      	moveq	r3, #0
 8010bc2:	f003 0301 	andne.w	r3, r3, #1
 8010bc6:	42b2      	cmp	r2, r6
 8010bc8:	bf0c      	ite	eq
 8010bca:	2300      	moveq	r3, #0
 8010bcc:	f003 0301 	andne.w	r3, r3, #1
 8010bd0:	428a      	cmp	r2, r1
 8010bd2:	bf0c      	ite	eq
 8010bd4:	2300      	moveq	r3, #0
 8010bd6:	f003 0301 	andne.w	r3, r3, #1
 8010bda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010bde:	428a      	cmp	r2, r1
 8010be0:	bf0c      	ite	eq
 8010be2:	2300      	moveq	r3, #0
 8010be4:	f003 0301 	andne.w	r3, r3, #1
 8010be8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010bec:	428a      	cmp	r2, r1
 8010bee:	bf0c      	ite	eq
 8010bf0:	2300      	moveq	r3, #0
 8010bf2:	f003 0301 	andne.w	r3, r3, #1
 8010bf6:	b11b      	cbz	r3, 8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8010bf8:	4b5b      	ldr	r3, [pc, #364]	; (8010d68 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	f040 808c 	bne.w	8010d18 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010c00:	682b      	ldr	r3, [r5, #0]
 8010c02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010c06:	2b40      	cmp	r3, #64	; 0x40
 8010c08:	d002      	beq.n	8010c10 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f040 808a 	bne.w	8010d24 <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010c10:	68ab      	ldr	r3, [r5, #8]
 8010c12:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010c16:	d173      	bne.n	8010d00 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8010c18:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d078      	beq.n	8010d12 <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c20:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8010c22:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c24:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8010d58 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8010c28:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c2a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8010d68 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8010c2e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c32:	eba2 0009 	sub.w	r0, r2, r9
 8010c36:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8010c3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c3e:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8010c42:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c44:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8010c48:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010c4a:	0940      	lsrs	r0, r0, #5
 8010c4c:	0949      	lsrs	r1, r1, #5
 8010c4e:	ea50 0301 	orrs.w	r3, r0, r1
 8010c52:	d135      	bne.n	8010cc0 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8010c54:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c56:	430b      	orrs	r3, r1
 8010c58:	4940      	ldr	r1, [pc, #256]	; (8010d5c <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8010c5a:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c5e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8010c62:	bf08      	it	eq
 8010c64:	f043 0301 	orreq.w	r3, r3, #1
 8010c68:	428a      	cmp	r2, r1
 8010c6a:	bf08      	it	eq
 8010c6c:	f043 0301 	orreq.w	r3, r3, #1
 8010c70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c74:	428a      	cmp	r2, r1
 8010c76:	bf08      	it	eq
 8010c78:	f043 0301 	orreq.w	r3, r3, #1
 8010c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010c80:	428a      	cmp	r2, r1
 8010c82:	bf08      	it	eq
 8010c84:	f043 0301 	orreq.w	r3, r3, #1
 8010c88:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8010c8c:	428a      	cmp	r2, r1
 8010c8e:	bf08      	it	eq
 8010c90:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c94:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c96:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c98:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8010c9a:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c9c:	b913      	cbnz	r3, 8010ca4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010c9e:	4b33      	ldr	r3, [pc, #204]	; (8010d6c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d104      	bne.n	8010cae <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ca4:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ca6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010caa:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010cac:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8010cae:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010cb0:	2201      	movs	r2, #1

  return HAL_OK;
 8010cb2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8010cb4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8010cc0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8010cc4:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8010cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ccc:	bf18      	it	ne
 8010cce:	2b00      	cmpne	r3, #0
 8010cd0:	bf14      	ite	ne
 8010cd2:	f04f 0c01 	movne.w	ip, #1
 8010cd6:	f04f 0c00 	moveq.w	ip, #0
 8010cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010cde:	bf0c      	ite	eq
 8010ce0:	f04f 0c00 	moveq.w	ip, #0
 8010ce4:	f00c 0c01 	andne.w	ip, ip, #1
 8010ce8:	f1bc 0f00 	cmp.w	ip, #0
 8010cec:	d002      	beq.n	8010cf4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8010cee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010cf2:	d11d      	bne.n	8010d30 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010cf4:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	ea47 070e 	orr.w	r7, r7, lr
 8010cfe:	e7aa      	b.n	8010c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010d00:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8010d04:	481a      	ldr	r0, [pc, #104]	; (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010d06:	f7f3 fc95 	bl	8004634 <assert_failed>
  __HAL_LOCK(htim);
 8010d0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d186      	bne.n	8010c20 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8010d12:	2002      	movs	r0, #2
}
 8010d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010d18:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8010d1c:	4814      	ldr	r0, [pc, #80]	; (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010d1e:	f7f3 fc89 	bl	8004634 <assert_failed>
 8010d22:	e76d      	b.n	8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8010d24:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8010d28:	4811      	ldr	r0, [pc, #68]	; (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010d2a:	f7f3 fc83 	bl	8004634 <assert_failed>
 8010d2e:	e76f      	b.n	8010c10 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8010d30:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8010d34:	480e      	ldr	r0, [pc, #56]	; (8010d70 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010d36:	f7f3 fc7d 	bl	8004634 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8010d3a:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d3c:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d40:	eba2 0309 	sub.w	r3, r2, r9
 8010d44:	eba2 0c08 	sub.w	ip, r2, r8
 8010d48:	4258      	negs	r0, r3
 8010d4a:	4158      	adcs	r0, r3
 8010d4c:	f1dc 0100 	rsbs	r1, ip, #0
 8010d50:	eb41 010c 	adc.w	r1, r1, ip
 8010d54:	e7ce      	b.n	8010cf4 <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8010d56:	bf00      	nop
 8010d58:	40010000 	.word	0x40010000
 8010d5c:	40000400 	.word	0x40000400
 8010d60:	40000800 	.word	0x40000800
 8010d64:	40000c00 	.word	0x40000c00
 8010d68:	40010400 	.word	0x40010400
 8010d6c:	40001800 	.word	0x40001800
 8010d70:	0802b694 	.word	0x0802b694

08010d74 <HAL_TIMEx_CommutCallback>:
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop

08010d78 <HAL_TIMEx_BreakCallback>:
 8010d78:	4770      	bx	lr
 8010d7a:	bf00      	nop

08010d7c <HAL_TIMEx_Break2Callback>:
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop

08010d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d80:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d82:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8a:	e842 3100 	strex	r1, r3, [r2]
 8010d8e:	2900      	cmp	r1, #0
 8010d90:	d1f7      	bne.n	8010d82 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d92:	f102 0308 	add.w	r3, r2, #8
 8010d96:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9e:	f102 0c08 	add.w	ip, r2, #8
 8010da2:	e84c 3100 	strex	r1, r3, [ip]
 8010da6:	2900      	cmp	r1, #0
 8010da8:	d1f3      	bne.n	8010d92 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010daa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d005      	beq.n	8010dbc <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010db0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8010db2:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010db4:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8010db6:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010db8:	6603      	str	r3, [r0, #96]	; 0x60
}
 8010dba:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dbc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc4:	e842 3100 	strex	r1, r3, [r2]
 8010dc8:	2900      	cmp	r1, #0
 8010dca:	d0f1      	beq.n	8010db0 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dcc:	e852 3f00 	ldrex	r3, [r2]
 8010dd0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	e842 3100 	strex	r1, r3, [r2]
 8010dd8:	2900      	cmp	r1, #0
 8010dda:	d1ef      	bne.n	8010dbc <UART_EndRxTransfer+0x3c>
 8010ddc:	e7e8      	b.n	8010db0 <UART_EndRxTransfer+0x30>
 8010dde:	bf00      	nop

08010de0 <HAL_UART_DeInit>:
  if (huart == NULL)
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d046      	beq.n	8010e72 <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010de4:	6802      	ldr	r2, [r0, #0]
 8010de6:	4927      	ldr	r1, [pc, #156]	; (8010e84 <HAL_UART_DeInit+0xa4>)
{
 8010de8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010dea:	4b27      	ldr	r3, [pc, #156]	; (8010e88 <HAL_UART_DeInit+0xa8>)
 8010dec:	4604      	mov	r4, r0
 8010dee:	4827      	ldr	r0, [pc, #156]	; (8010e8c <HAL_UART_DeInit+0xac>)
 8010df0:	429a      	cmp	r2, r3
 8010df2:	bf18      	it	ne
 8010df4:	4282      	cmpne	r2, r0
 8010df6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010dfa:	bf14      	ite	ne
 8010dfc:	2301      	movne	r3, #1
 8010dfe:	2300      	moveq	r3, #0
 8010e00:	428a      	cmp	r2, r1
 8010e02:	bf0c      	ite	eq
 8010e04:	2300      	moveq	r3, #0
 8010e06:	f003 0301 	andne.w	r3, r3, #1
 8010e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e0e:	4282      	cmp	r2, r0
 8010e10:	bf0c      	ite	eq
 8010e12:	2300      	moveq	r3, #0
 8010e14:	f003 0301 	andne.w	r3, r3, #1
 8010e18:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8010e1c:	428a      	cmp	r2, r1
 8010e1e:	bf0c      	ite	eq
 8010e20:	2300      	moveq	r3, #0
 8010e22:	f003 0301 	andne.w	r3, r3, #1
 8010e26:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8010e2a:	4282      	cmp	r2, r0
 8010e2c:	bf0c      	ite	eq
 8010e2e:	2300      	moveq	r3, #0
 8010e30:	f003 0301 	andne.w	r3, r3, #1
 8010e34:	428a      	cmp	r2, r1
 8010e36:	bf0c      	ite	eq
 8010e38:	2300      	moveq	r3, #0
 8010e3a:	f003 0301 	andne.w	r3, r3, #1
 8010e3e:	b113      	cbz	r3, 8010e46 <HAL_UART_DeInit+0x66>
 8010e40:	4b13      	ldr	r3, [pc, #76]	; (8010e90 <HAL_UART_DeInit+0xb0>)
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d117      	bne.n	8010e76 <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8010e46:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8010e48:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8010e4a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8010e4c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010e4e:	6813      	ldr	r3, [r2, #0]
 8010e50:	f023 0301 	bic.w	r3, r3, #1
 8010e54:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8010e56:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8010e58:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8010e5a:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8010e5c:	f7f5 fc08 	bl	8006670 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e60:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8010e64:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8010e66:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8010e68:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8010e6c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e6e:	6625      	str	r5, [r4, #96]	; 0x60
}
 8010e70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010e72:	2001      	movs	r0, #1
}
 8010e74:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010e76:	f240 2167 	movw	r1, #615	; 0x267
 8010e7a:	4806      	ldr	r0, [pc, #24]	; (8010e94 <HAL_UART_DeInit+0xb4>)
 8010e7c:	f7f3 fbda 	bl	8004634 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8010e80:	6822      	ldr	r2, [r4, #0]
 8010e82:	e7e0      	b.n	8010e46 <HAL_UART_DeInit+0x66>
 8010e84:	40004800 	.word	0x40004800
 8010e88:	40011000 	.word	0x40011000
 8010e8c:	40004400 	.word	0x40004400
 8010e90:	40007c00 	.word	0x40007c00
 8010e94:	0802b6d0 	.word	0x0802b6d0

08010e98 <HAL_UART_Transmit_DMA>:
{
 8010e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8010e9a:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8010e9c:	2f20      	cmp	r7, #32
 8010e9e:	d141      	bne.n	8010f24 <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8010ea0:	2900      	cmp	r1, #0
 8010ea2:	d03d      	beq.n	8010f20 <HAL_UART_Transmit_DMA+0x88>
 8010ea4:	fab2 f682 	clz	r6, r2
 8010ea8:	0976      	lsrs	r6, r6, #5
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	d038      	beq.n	8010f20 <HAL_UART_Transmit_DMA+0x88>
 8010eae:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8010eb0:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8010eb4:	2801      	cmp	r0, #1
 8010eb6:	d035      	beq.n	8010f24 <HAL_UART_Transmit_DMA+0x8c>
 8010eb8:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010eba:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8010ebc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8010ebe:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8010ec2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ec4:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8010ec8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8010ecc:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ed0:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8010ed2:	b190      	cbz	r0, 8010efa <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010ed4:	f8df c060 	ldr.w	ip, [pc, #96]	; 8010f38 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010ed8:	4613      	mov	r3, r2
 8010eda:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010edc:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010ee0:	f8df c058 	ldr.w	ip, [pc, #88]	; 8010f3c <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010ee4:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8010ee6:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010ee8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010eec:	f8df c050 	ldr.w	ip, [pc, #80]	; 8010f40 <HAL_UART_Transmit_DMA+0xa8>
 8010ef0:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010ef4:	f7f7 fcd8 	bl	80088a8 <HAL_DMA_Start_IT>
 8010ef8:	b9b0      	cbnz	r0, 8010f28 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010efa:	6822      	ldr	r2, [r4, #0]
 8010efc:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8010efe:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010f00:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8010f02:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f06:	f102 0308 	add.w	r3, r2, #8
 8010f0a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f12:	f102 0108 	add.w	r1, r2, #8
 8010f16:	e841 3000 	strex	r0, r3, [r1]
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d1f3      	bne.n	8010f06 <HAL_UART_Transmit_DMA+0x6e>
}
 8010f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8010f20:	2001      	movs	r0, #1
}
 8010f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8010f24:	2002      	movs	r0, #2
}
 8010f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010f28:	2310      	movs	r3, #16
        return HAL_ERROR;
 8010f2a:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8010f2c:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010f30:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8010f34:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8010f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f38:	08011049 	.word	0x08011049
 8010f3c:	08011091 	.word	0x08011091
 8010f40:	080110a1 	.word	0x080110a1

08010f44 <HAL_UART_Abort>:
{
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4604      	mov	r4, r0
 8010f48:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f4a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f4e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f52:	e843 2100 	strex	r1, r2, [r3]
 8010f56:	2900      	cmp	r1, #0
 8010f58:	d1f7      	bne.n	8010f4a <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f5a:	f103 0208 	add.w	r2, r3, #8
 8010f5e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f62:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f66:	f103 0008 	add.w	r0, r3, #8
 8010f6a:	e840 2100 	strex	r1, r2, [r0]
 8010f6e:	2900      	cmp	r1, #0
 8010f70:	d1f3      	bne.n	8010f5a <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f72:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010f74:	2a01      	cmp	r2, #1
 8010f76:	d043      	beq.n	8011000 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010f78:	6899      	ldr	r1, [r3, #8]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	0608      	lsls	r0, r1, #24
 8010f7e:	d42a      	bmi.n	8010fd6 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f80:	6899      	ldr	r1, [r3, #8]
 8010f82:	0649      	lsls	r1, r1, #25
 8010f84:	d514      	bpl.n	8010fb0 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f86:	f103 0208 	add.w	r2, r3, #8
 8010f8a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f92:	f103 0008 	add.w	r0, r3, #8
 8010f96:	e840 2100 	strex	r1, r2, [r0]
 8010f9a:	2900      	cmp	r1, #0
 8010f9c:	d1f3      	bne.n	8010f86 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8010f9e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d03e      	beq.n	8011022 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8010fa4:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010fa6:	f7f7 fcdb 	bl	8008960 <HAL_DMA_Abort>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d145      	bne.n	801103a <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fae:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8010fb0:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fb2:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8010fb4:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8010fb6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8010fba:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8010fbc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010fc0:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010fc2:	6991      	ldr	r1, [r2, #24]
 8010fc4:	f041 0108 	orr.w	r1, r1, #8
 8010fc8:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8010fca:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010fcc:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fce:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fd0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8010fd4:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd6:	f103 0208 	add.w	r2, r3, #8
 8010fda:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe2:	f103 0008 	add.w	r0, r3, #8
 8010fe6:	e840 2100 	strex	r1, r2, [r0]
 8010fea:	2900      	cmp	r1, #0
 8010fec:	d1f3      	bne.n	8010fd6 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8010fee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010ff0:	b120      	cbz	r0, 8010ffc <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8010ff2:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010ff4:	f7f7 fcb4 	bl	8008960 <HAL_DMA_Abort>
 8010ff8:	b9a8      	cbnz	r0, 8011026 <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	e7bf      	b.n	8010f80 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011004:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011008:	e843 2100 	strex	r1, r2, [r3]
 801100c:	2900      	cmp	r1, #0
 801100e:	d0b3      	beq.n	8010f78 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011010:	e853 2f00 	ldrex	r2, [r3]
 8011014:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011018:	e843 2100 	strex	r1, r2, [r3]
 801101c:	2900      	cmp	r1, #0
 801101e:	d1ef      	bne.n	8011000 <HAL_UART_Abort+0xbc>
 8011020:	e7aa      	b.n	8010f78 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011022:	461a      	mov	r2, r3
 8011024:	e7c4      	b.n	8010fb0 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011026:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011028:	f7f7 fde6 	bl	8008bf8 <HAL_DMA_GetError>
 801102c:	2820      	cmp	r0, #32
 801102e:	d1e4      	bne.n	8010ffa <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011030:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8011032:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011034:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011038:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801103a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801103c:	f7f7 fddc 	bl	8008bf8 <HAL_DMA_GetError>
 8011040:	2820      	cmp	r0, #32
 8011042:	d1b4      	bne.n	8010fae <HAL_UART_Abort+0x6a>
 8011044:	e7f4      	b.n	8011030 <HAL_UART_Abort+0xec>
 8011046:	bf00      	nop

08011048 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011048:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801104a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801104c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801104e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011052:	d018      	beq.n	8011086 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8011054:	2300      	movs	r3, #0
 8011056:	6802      	ldr	r2, [r0, #0]
 8011058:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105c:	f102 0308 	add.w	r3, r2, #8
 8011060:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011068:	f102 0008 	add.w	r0, r2, #8
 801106c:	e840 3100 	strex	r1, r3, [r0]
 8011070:	2900      	cmp	r1, #0
 8011072:	d1f3      	bne.n	801105c <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011074:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107c:	e842 3100 	strex	r1, r3, [r2]
 8011080:	2900      	cmp	r1, #0
 8011082:	d1f7      	bne.n	8011074 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011084:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011086:	f7f0 fb0f 	bl	80016a8 <HAL_UART_TxCpltCallback>
}
 801108a:	bd08      	pop	{r3, pc}

0801108c <HAL_UART_TxHalfCpltCallback>:
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop

08011090 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011090:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011092:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011094:	f7ff fffa 	bl	801108c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011098:	bd08      	pop	{r3, pc}
 801109a:	bf00      	nop

0801109c <HAL_UART_RxHalfCpltCallback>:
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop

080110a0 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110a0:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80110a2:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80110a4:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80110a6:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80110a8:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80110aa:	6893      	ldr	r3, [r2, #8]
 80110ac:	061b      	lsls	r3, r3, #24
 80110ae:	d501      	bpl.n	80110b4 <UART_DMAError+0x14>
 80110b0:	2921      	cmp	r1, #33	; 0x21
 80110b2:	d00d      	beq.n	80110d0 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80110b4:	6893      	ldr	r3, [r2, #8]
 80110b6:	065b      	lsls	r3, r3, #25
 80110b8:	d501      	bpl.n	80110be <UART_DMAError+0x1e>
 80110ba:	2c22      	cmp	r4, #34	; 0x22
 80110bc:	d016      	beq.n	80110ec <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80110be:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80110c2:	f043 0310 	orr.w	r3, r3, #16
 80110c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80110ca:	f7f3 fd91 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110ce:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80110d0:	2300      	movs	r3, #0
 80110d2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80110da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110de:	e842 3100 	strex	r1, r3, [r2]
 80110e2:	2900      	cmp	r1, #0
 80110e4:	d1f7      	bne.n	80110d6 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80110e6:	2320      	movs	r3, #32
 80110e8:	6783      	str	r3, [r0, #120]	; 0x78
}
 80110ea:	e7e3      	b.n	80110b4 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80110ec:	2300      	movs	r3, #0
 80110ee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80110f2:	f7ff fe45 	bl	8010d80 <UART_EndRxTransfer>
 80110f6:	e7e2      	b.n	80110be <UART_DMAError+0x1e>

080110f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80110f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80110fc:	2300      	movs	r3, #0
 80110fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011102:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011106:	f7f3 fd73 	bl	8004bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801110a:	bd08      	pop	{r3, pc}

0801110c <HAL_UART_AbortCpltCallback>:
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop

08011110 <HAL_UART_Abort_IT>:
{
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	6803      	ldr	r3, [r0, #0]
 8011114:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011116:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801111a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111e:	e843 2100 	strex	r1, r2, [r3]
 8011122:	2900      	cmp	r1, #0
 8011124:	d1f7      	bne.n	8011116 <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011126:	f103 0208 	add.w	r2, r3, #8
 801112a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801112e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011132:	f103 0008 	add.w	r0, r3, #8
 8011136:	e840 2100 	strex	r1, r2, [r0]
 801113a:	2900      	cmp	r1, #0
 801113c:	d1f3      	bne.n	8011126 <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801113e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8011140:	2a01      	cmp	r2, #1
 8011142:	d05e      	beq.n	8011202 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8011144:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011146:	2800      	cmp	r0, #0
 8011148:	d071      	beq.n	801122e <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801114a:	689a      	ldr	r2, [r3, #8]
 801114c:	461c      	mov	r4, r3
 801114e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8011152:	bf18      	it	ne
 8011154:	4a3b      	ldrne	r2, [pc, #236]	; (8011244 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8011156:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011158:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801115a:	b129      	cbz	r1, 8011168 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801115c:	689a      	ldr	r2, [r3, #8]
 801115e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8011162:	bf18      	it	ne
 8011164:	4a38      	ldrne	r2, [pc, #224]	; (8011248 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8011166:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011168:	689a      	ldr	r2, [r3, #8]
 801116a:	0612      	lsls	r2, r2, #24
 801116c:	d430      	bmi.n	80111d0 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801116e:	689a      	ldr	r2, [r3, #8]
 8011170:	0656      	lsls	r6, r2, #25
 8011172:	d515      	bpl.n	80111a0 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011174:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011176:	f103 0208 	add.w	r2, r3, #8
 801117a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801117e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011182:	f103 0008 	add.w	r0, r3, #8
 8011186:	e840 2600 	strex	r6, r2, [r0]
 801118a:	2e00      	cmp	r6, #0
 801118c:	d1f3      	bne.n	8011176 <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 801118e:	2900      	cmp	r1, #0
 8011190:	d04f      	beq.n	8011232 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011192:	4608      	mov	r0, r1
 8011194:	f7f7 fc2c 	bl	80089f0 <HAL_DMA_Abort_IT>
 8011198:	b1c0      	cbz	r0, 80111cc <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 801119a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801119c:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 801119e:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 80111a0:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80111a2:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 80111a4:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 80111a6:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 80111a8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 80111ac:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 80111ae:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 80111b2:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111b4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80111b8:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80111ba:	69a2      	ldr	r2, [r4, #24]
 80111bc:	f042 0208 	orr.w	r2, r2, #8
 80111c0:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 80111c2:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 80111c4:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111c6:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 80111c8:	f7ff ffa0 	bl	801110c <HAL_UART_AbortCpltCallback>
}
 80111cc:	2000      	movs	r0, #0
 80111ce:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111d0:	f103 0208 	add.w	r2, r3, #8
 80111d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80111d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111dc:	f103 0608 	add.w	r6, r3, #8
 80111e0:	e846 2400 	strex	r4, r2, [r6]
 80111e4:	2c00      	cmp	r4, #0
 80111e6:	d1f3      	bne.n	80111d0 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 80111e8:	b1e0      	cbz	r0, 8011224 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80111ea:	f7f7 fc01 	bl	80089f0 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111ee:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80111f0:	b318      	cbz	r0, 801123a <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 80111f2:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111f4:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 80111f6:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111f8:	461c      	mov	r4, r3
 80111fa:	0651      	lsls	r1, r2, #25
 80111fc:	d5d0      	bpl.n	80111a0 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80111fe:	2401      	movs	r4, #1
 8011200:	e01e      	b.n	8011240 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011202:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011206:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120a:	e843 2100 	strex	r1, r2, [r3]
 801120e:	2900      	cmp	r1, #0
 8011210:	d098      	beq.n	8011144 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011212:	e853 2f00 	ldrex	r2, [r3]
 8011216:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801121a:	e843 2100 	strex	r1, r2, [r3]
 801121e:	2900      	cmp	r1, #0
 8011220:	d1ef      	bne.n	8011202 <HAL_UART_Abort_IT+0xf2>
 8011222:	e78f      	b.n	8011144 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011224:	689a      	ldr	r2, [r3, #8]
 8011226:	461c      	mov	r4, r3
 8011228:	0652      	lsls	r2, r2, #25
 801122a:	d5b9      	bpl.n	80111a0 <HAL_UART_Abort_IT+0x90>
 801122c:	e7a2      	b.n	8011174 <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801122e:	461c      	mov	r4, r3
 8011230:	e792      	b.n	8011158 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8011232:	2c01      	cmp	r4, #1
 8011234:	d1ca      	bne.n	80111cc <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011236:	461c      	mov	r4, r3
 8011238:	e7b2      	b.n	80111a0 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801123a:	689a      	ldr	r2, [r3, #8]
 801123c:	0650      	lsls	r0, r2, #25
 801123e:	d5c5      	bpl.n	80111cc <HAL_UART_Abort_IT+0xbc>
 8011240:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011242:	e798      	b.n	8011176 <HAL_UART_Abort_IT+0x66>
 8011244:	0801128d 	.word	0x0801128d
 8011248:	0801124d 	.word	0x0801124d

0801124c <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801124c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 801124e:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011250:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8011254:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8011256:	b113      	cbz	r3, 801125e <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801125a:	b103      	cbz	r3, 801125e <UART_DMARxAbortCallback+0x12>
 801125c:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801125e:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011260:	6802      	ldr	r2, [r0, #0]
 8011262:	210f      	movs	r1, #15
{
 8011264:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011266:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801126a:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 801126c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011270:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011274:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011276:	6991      	ldr	r1, [r2, #24]
 8011278:	f041 0108 	orr.w	r1, r1, #8
 801127c:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801127e:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011280:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011282:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011284:	f7ff ff42 	bl	801110c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011288:	bd10      	pop	{r4, pc}
 801128a:	bf00      	nop

0801128c <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801128c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 801128e:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8011290:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8011294:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011296:	b113      	cbz	r3, 801129e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801129a:	b103      	cbz	r3, 801129e <UART_DMATxAbortCallback+0x12>
 801129c:	4770      	bx	lr
{
 801129e:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80112a0:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 80112a2:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80112a4:	6801      	ldr	r1, [r0, #0]
 80112a6:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 80112a8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 80112ac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112b0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80112b4:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 80112b6:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80112b8:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112ba:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 80112bc:	f7ff ff26 	bl	801110c <HAL_UART_AbortCpltCallback>
}
 80112c0:	bd10      	pop	{r4, pc}
 80112c2:	bf00      	nop

080112c4 <HAL_UARTEx_RxEventCallback>:
}
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop

080112c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80112c8:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112ca:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80112cc:	2b22      	cmp	r3, #34	; 0x22
 80112ce:	d005      	beq.n	80112dc <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112d0:	6802      	ldr	r2, [r0, #0]
 80112d2:	6993      	ldr	r3, [r2, #24]
 80112d4:	f043 0308 	orr.w	r3, r3, #8
 80112d8:	6193      	str	r3, [r2, #24]
  }
}
 80112da:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80112dc:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80112de:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80112e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80112e4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80112e6:	400b      	ands	r3, r1
 80112e8:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 80112ea:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 80112ee:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80112f0:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 80112f2:	3201      	adds	r2, #1
    huart->RxXferCount--;
 80112f4:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 80112f6:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80112f8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80112fc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011300:	b29b      	uxth	r3, r3
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1e9      	bne.n	80112da <UART_RxISR_8BIT+0x12>
 8011306:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011308:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801130c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011310:	e843 2100 	strex	r1, r2, [r3]
 8011314:	2900      	cmp	r1, #0
 8011316:	d1f7      	bne.n	8011308 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011318:	f103 0208 	add.w	r2, r3, #8
 801131c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011320:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011324:	f103 0c08 	add.w	ip, r3, #8
 8011328:	e84c 2100 	strex	r1, r2, [ip]
 801132c:	2900      	cmp	r1, #0
 801132e:	d1f3      	bne.n	8011318 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8011330:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011332:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011334:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011336:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011338:	2a01      	cmp	r2, #1
 801133a:	d112      	bne.n	8011362 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801133c:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801133e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011342:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011346:	e843 2100 	strex	r1, r2, [r3]
 801134a:	2900      	cmp	r1, #0
 801134c:	d1f7      	bne.n	801133e <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801134e:	69da      	ldr	r2, [r3, #28]
 8011350:	06d2      	lsls	r2, r2, #27
 8011352:	d501      	bpl.n	8011358 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011354:	2210      	movs	r2, #16
 8011356:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011358:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801135c:	f7ff ffb2 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
}
 8011360:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011362:	f7f3 fbcf 	bl	8004b04 <HAL_UART_RxCpltCallback>
}
 8011366:	bd08      	pop	{r3, pc}

08011368 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011368:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801136a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801136c:	2b22      	cmp	r3, #34	; 0x22
 801136e:	d005      	beq.n	801137c <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011370:	6802      	ldr	r2, [r0, #0]
 8011372:	6993      	ldr	r3, [r2, #24]
 8011374:	f043 0308 	orr.w	r3, r3, #8
 8011378:	6193      	str	r3, [r2, #24]
  }
}
 801137a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801137c:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 801137e:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8011384:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8011386:	ea02 020c 	and.w	r2, r2, ip
 801138a:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 801138e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8011392:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011394:	3a01      	subs	r2, #1
 8011396:	b292      	uxth	r2, r2
 8011398:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 801139c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80113a0:	b292      	uxth	r2, r2
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	d1e9      	bne.n	801137a <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113a6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80113aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ae:	e843 2100 	strex	r1, r2, [r3]
 80113b2:	2900      	cmp	r1, #0
 80113b4:	d1f7      	bne.n	80113a6 <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b6:	f103 0208 	add.w	r2, r3, #8
 80113ba:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113be:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113c2:	f103 0c08 	add.w	ip, r3, #8
 80113c6:	e84c 2100 	strex	r1, r2, [ip]
 80113ca:	2900      	cmp	r1, #0
 80113cc:	d1f3      	bne.n	80113b6 <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 80113ce:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80113d0:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80113d2:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80113d6:	2a01      	cmp	r2, #1
 80113d8:	d112      	bne.n	8011400 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113da:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113dc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e4:	e843 2100 	strex	r1, r2, [r3]
 80113e8:	2900      	cmp	r1, #0
 80113ea:	d1f7      	bne.n	80113dc <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80113ec:	69da      	ldr	r2, [r3, #28]
 80113ee:	06d2      	lsls	r2, r2, #27
 80113f0:	d501      	bpl.n	80113f6 <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80113f2:	2210      	movs	r2, #16
 80113f4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80113f6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80113fa:	f7ff ff63 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
}
 80113fe:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011400:	f7f3 fb80 	bl	8004b04 <HAL_UART_RxCpltCallback>
}
 8011404:	bd08      	pop	{r3, pc}
 8011406:	bf00      	nop

08011408 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011408:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801140a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801140c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801140e:	2b01      	cmp	r3, #1
 8011410:	d002      	beq.n	8011418 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8011412:	f7ff fe43 	bl	801109c <HAL_UART_RxHalfCpltCallback>
}
 8011416:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011418:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801141c:	0849      	lsrs	r1, r1, #1
 801141e:	f7ff ff51 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
}
 8011422:	bd08      	pop	{r3, pc}

08011424 <UART_DMAReceiveCplt>:
{
 8011424:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011426:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011428:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801142a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801142e:	d028      	beq.n	8011482 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8011430:	2200      	movs	r2, #0
 8011432:	6803      	ldr	r3, [r0, #0]
 8011434:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011438:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801143c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011440:	e843 2100 	strex	r1, r2, [r3]
 8011444:	2900      	cmp	r1, #0
 8011446:	d1f7      	bne.n	8011438 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011448:	f103 0208 	add.w	r2, r3, #8
 801144c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011450:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011454:	f103 0c08 	add.w	ip, r3, #8
 8011458:	e84c 2100 	strex	r1, r2, [ip]
 801145c:	2900      	cmp	r1, #0
 801145e:	d1f3      	bne.n	8011448 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011460:	f103 0208 	add.w	r2, r3, #8
 8011464:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146c:	f103 0c08 	add.w	ip, r3, #8
 8011470:	e84c 2100 	strex	r1, r2, [ip]
 8011474:	2900      	cmp	r1, #0
 8011476:	d1f3      	bne.n	8011460 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8011478:	2220      	movs	r2, #32
 801147a:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801147c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801147e:	2a01      	cmp	r2, #1
 8011480:	d005      	beq.n	801148e <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011482:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011484:	2b01      	cmp	r3, #1
 8011486:	d013      	beq.n	80114b0 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8011488:	f7f3 fb3c 	bl	8004b04 <HAL_UART_RxCpltCallback>
}
 801148c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801148e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011492:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011496:	e843 2100 	strex	r1, r2, [r3]
 801149a:	2900      	cmp	r1, #0
 801149c:	d0f1      	beq.n	8011482 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801149e:	e853 2f00 	ldrex	r2, [r3]
 80114a2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114a6:	e843 2100 	strex	r1, r2, [r3]
 80114aa:	2900      	cmp	r1, #0
 80114ac:	d1ef      	bne.n	801148e <UART_DMAReceiveCplt+0x6a>
 80114ae:	e7e8      	b.n	8011482 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114b0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80114b4:	f7ff ff06 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
}
 80114b8:	bd08      	pop	{r3, pc}
 80114ba:	bf00      	nop

080114bc <HAL_UARTEx_WakeupCallback>:
}
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop

080114c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80114c0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80114c2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80114c6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80114c8:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 80114ca:	ea12 0f0c 	tst.w	r2, ip
{
 80114ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80114d4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80114d6:	d17d      	bne.n	80115d4 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80114d8:	0697      	lsls	r7, r2, #26
 80114da:	d502      	bpl.n	80114e2 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80114dc:	068e      	lsls	r6, r1, #26
 80114de:	f100 80f4 	bmi.w	80116ca <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80114e4:	2801      	cmp	r0, #1
 80114e6:	d024      	beq.n	8011532 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80114e8:	02d0      	lsls	r0, r2, #11
 80114ea:	d502      	bpl.n	80114f2 <HAL_UART_IRQHandler+0x32>
 80114ec:	026f      	lsls	r7, r5, #9
 80114ee:	f100 80f1 	bmi.w	80116d4 <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80114f2:	0616      	lsls	r6, r2, #24
 80114f4:	d414      	bmi.n	8011520 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80114f6:	0650      	lsls	r0, r2, #25
 80114f8:	d501      	bpl.n	80114fe <HAL_UART_IRQHandler+0x3e>
 80114fa:	064a      	lsls	r2, r1, #25
 80114fc:	d401      	bmi.n	8011502 <HAL_UART_IRQHandler+0x42>
}
 80114fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011502:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801150a:	e843 2100 	strex	r1, r2, [r3]
 801150e:	2900      	cmp	r1, #0
 8011510:	d1f7      	bne.n	8011502 <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 8011512:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 8011514:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8011516:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8011518:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 801151a:	f7f0 f8c5 	bl	80016a8 <HAL_UART_TxCpltCallback>
}
 801151e:	e7ee      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011520:	060d      	lsls	r5, r1, #24
 8011522:	d5e8      	bpl.n	80114f6 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8011524:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0e9      	beq.n	80114fe <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 801152a:	4620      	mov	r0, r4
}
 801152c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8011530:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011532:	06d7      	lsls	r7, r2, #27
 8011534:	d5d8      	bpl.n	80114e8 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011536:	06ce      	lsls	r6, r1, #27
 8011538:	d5d6      	bpl.n	80114e8 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801153a:	2210      	movs	r2, #16
 801153c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801153e:	689a      	ldr	r2, [r3, #8]
 8011540:	0655      	lsls	r5, r2, #25
 8011542:	f140 80d9 	bpl.w	80116f8 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011546:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011548:	6802      	ldr	r2, [r0, #0]
 801154a:	6852      	ldr	r2, [r2, #4]
 801154c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 801154e:	2a00      	cmp	r2, #0
 8011550:	d0d5      	beq.n	80114fe <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011552:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8011556:	4291      	cmp	r1, r2
 8011558:	d9d1      	bls.n	80114fe <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 801155a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801155e:	69c2      	ldr	r2, [r0, #28]
 8011560:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011564:	d02e      	beq.n	80115c4 <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011566:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801156a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156e:	e843 2100 	strex	r1, r2, [r3]
 8011572:	2900      	cmp	r1, #0
 8011574:	d1f7      	bne.n	8011566 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011576:	f103 0208 	add.w	r2, r3, #8
 801157a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801157e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011582:	f103 0508 	add.w	r5, r3, #8
 8011586:	e845 2100 	strex	r1, r2, [r5]
 801158a:	2900      	cmp	r1, #0
 801158c:	d1f3      	bne.n	8011576 <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158e:	f103 0208 	add.w	r2, r3, #8
 8011592:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801159a:	f103 0508 	add.w	r5, r3, #8
 801159e:	e845 2100 	strex	r1, r2, [r5]
 80115a2:	2900      	cmp	r1, #0
 80115a4:	d1f3      	bne.n	801158e <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80115a6:	2220      	movs	r2, #32
 80115a8:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115aa:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ac:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b4:	e843 2100 	strex	r1, r2, [r3]
 80115b8:	2900      	cmp	r1, #0
 80115ba:	d1f7      	bne.n	80115ac <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80115bc:	f7f7 f9d0 	bl	8008960 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80115c0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80115c4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80115c8:	4620      	mov	r0, r4
 80115ca:	1ac9      	subs	r1, r1, r3
 80115cc:	b289      	uxth	r1, r1
 80115ce:	f7ff fe79 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
 80115d2:	e794      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80115d4:	4864      	ldr	r0, [pc, #400]	; (8011768 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80115d6:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80115da:	4008      	ands	r0, r1
 80115dc:	4330      	orrs	r0, r6
 80115de:	d080      	beq.n	80114e2 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80115e0:	07d5      	lsls	r5, r2, #31
 80115e2:	461f      	mov	r7, r3
 80115e4:	d509      	bpl.n	80115fa <HAL_UART_IRQHandler+0x13a>
 80115e6:	05c8      	lsls	r0, r1, #23
 80115e8:	d507      	bpl.n	80115fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115ea:	2001      	movs	r0, #1
 80115ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115ee:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80115f2:	f040 0001 	orr.w	r0, r0, #1
 80115f6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80115fa:	0795      	lsls	r5, r2, #30
 80115fc:	d560      	bpl.n	80116c0 <HAL_UART_IRQHandler+0x200>
 80115fe:	b18e      	cbz	r6, 8011624 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011600:	2002      	movs	r0, #2
 8011602:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011604:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011608:	f040 0004 	orr.w	r0, r0, #4
 801160c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011610:	0750      	lsls	r0, r2, #29
 8011612:	d507      	bpl.n	8011624 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011614:	2004      	movs	r0, #4
 8011616:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011618:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801161c:	f040 0002 	orr.w	r0, r0, #2
 8011620:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011624:	0710      	lsls	r0, r2, #28
 8011626:	d50b      	bpl.n	8011640 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011628:	f001 0020 	and.w	r0, r1, #32
 801162c:	4330      	orrs	r0, r6
 801162e:	d007      	beq.n	8011640 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011630:	2008      	movs	r0, #8
 8011632:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011634:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8011638:	f040 0008 	orr.w	r0, r0, #8
 801163c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011640:	0516      	lsls	r6, r2, #20
 8011642:	d50a      	bpl.n	801165a <HAL_UART_IRQHandler+0x19a>
 8011644:	014d      	lsls	r5, r1, #5
 8011646:	d508      	bpl.n	801165a <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011648:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801164c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801164e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011652:	f043 0320 	orr.w	r3, r3, #32
 8011656:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801165a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801165e:	2b00      	cmp	r3, #0
 8011660:	f43f af4d 	beq.w	80114fe <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011664:	0690      	lsls	r0, r2, #26
 8011666:	d501      	bpl.n	801166c <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011668:	0689      	lsls	r1, r1, #26
 801166a:	d43e      	bmi.n	80116ea <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 801166c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 8011670:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011672:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011674:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801167c:	431d      	orrs	r5, r3
 801167e:	d06e      	beq.n	801175e <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8011680:	f7ff fb7e 	bl	8010d80 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011684:	6823      	ldr	r3, [r4, #0]
 8011686:	689a      	ldr	r2, [r3, #8]
 8011688:	0652      	lsls	r2, r2, #25
 801168a:	d52a      	bpl.n	80116e2 <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	f103 0208 	add.w	r2, r3, #8
 8011690:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011698:	f103 0008 	add.w	r0, r3, #8
 801169c:	e840 2100 	strex	r1, r2, [r0]
 80116a0:	2900      	cmp	r1, #0
 80116a2:	d1f3      	bne.n	801168c <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80116a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80116a6:	b1e0      	cbz	r0, 80116e2 <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80116a8:	4b30      	ldr	r3, [pc, #192]	; (801176c <HAL_UART_IRQHandler+0x2ac>)
 80116aa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80116ac:	f7f7 f9a0 	bl	80089f0 <HAL_DMA_Abort_IT>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	f43f af24 	beq.w	80114fe <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80116b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80116b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80116bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80116be:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116c0:	0755      	lsls	r5, r2, #29
 80116c2:	d5af      	bpl.n	8011624 <HAL_UART_IRQHandler+0x164>
 80116c4:	2e00      	cmp	r6, #0
 80116c6:	d1a5      	bne.n	8011614 <HAL_UART_IRQHandler+0x154>
 80116c8:	e7ac      	b.n	8011624 <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 80116ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f47f af2d 	bne.w	801152c <HAL_UART_IRQHandler+0x6c>
 80116d2:	e714      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80116d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80116d8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80116da:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80116dc:	f7ff feee 	bl	80114bc <HAL_UARTEx_WakeupCallback>
    return;
 80116e0:	e70d      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 80116e2:	4620      	mov	r0, r4
 80116e4:	f7f3 fa84 	bl	8004bf0 <HAL_UART_ErrorCallback>
 80116e8:	e709      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 80116ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d0bd      	beq.n	801166c <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 80116f0:	4620      	mov	r0, r4
 80116f2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80116f4:	6827      	ldr	r7, [r4, #0]
 80116f6:	e7b9      	b.n	801166c <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80116f8:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80116fc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8011700:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011704:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8011706:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011708:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 801170a:	2900      	cmp	r1, #0
 801170c:	f43f aef7 	beq.w	80114fe <HAL_UART_IRQHandler+0x3e>
 8011710:	2a00      	cmp	r2, #0
 8011712:	f43f aef4 	beq.w	80114fe <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011716:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801171a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801171e:	e843 2000 	strex	r0, r2, [r3]
 8011722:	2800      	cmp	r0, #0
 8011724:	d1f7      	bne.n	8011716 <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011726:	f103 0208 	add.w	r2, r3, #8
 801172a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801172e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	f103 0508 	add.w	r5, r3, #8
 8011736:	e845 2000 	strex	r0, r2, [r5]
 801173a:	2800      	cmp	r0, #0
 801173c:	d1f3      	bne.n	8011726 <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 801173e:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8011740:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8011742:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011744:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011746:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801174a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801174e:	e843 2000 	strex	r0, r2, [r3]
 8011752:	2800      	cmp	r0, #0
 8011754:	d1f7      	bne.n	8011746 <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011756:	4620      	mov	r0, r4
 8011758:	f7ff fdb4 	bl	80112c4 <HAL_UARTEx_RxEventCallback>
 801175c:	e6cf      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 801175e:	f7f3 fa47 	bl	8004bf0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011762:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8011766:	e6ca      	b.n	80114fe <HAL_UART_IRQHandler+0x3e>
 8011768:	04000120 	.word	0x04000120
 801176c:	080110f9 	.word	0x080110f9

08011770 <UART_SetConfig>:
{
 8011770:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8011772:	6842      	ldr	r2, [r0, #4]
{
 8011774:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8011776:	4bac      	ldr	r3, [pc, #688]	; (8011a28 <UART_SetConfig+0x2b8>)
 8011778:	429a      	cmp	r2, r3
 801177a:	f200 80bb 	bhi.w	80118f4 <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 801177e:	68a3      	ldr	r3, [r4, #8]
 8011780:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8011784:	d002      	beq.n	801178c <UART_SetConfig+0x1c>
 8011786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801178a:	d179      	bne.n	8011880 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 801178c:	68e3      	ldr	r3, [r4, #12]
 801178e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8011792:	d17e      	bne.n	8011892 <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8011794:	6a23      	ldr	r3, [r4, #32]
 8011796:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 801179a:	f040 8084 	bne.w	80118a6 <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 801179e:	6923      	ldr	r3, [r4, #16]
 80117a0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80117a4:	d002      	beq.n	80117ac <UART_SetConfig+0x3c>
 80117a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80117aa:	d163      	bne.n	8011874 <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80117ac:	6963      	ldr	r3, [r4, #20]
 80117ae:	f033 020c 	bics.w	r2, r3, #12
 80117b2:	d146      	bne.n	8011842 <UART_SetConfig+0xd2>
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d044      	beq.n	8011842 <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80117b8:	69a3      	ldr	r3, [r4, #24]
 80117ba:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80117be:	d149      	bne.n	8011854 <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80117c0:	69e0      	ldr	r0, [r4, #28]
 80117c2:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80117c6:	d14e      	bne.n	8011866 <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80117c8:	6921      	ldr	r1, [r4, #16]
 80117ca:	68a2      	ldr	r2, [r4, #8]
 80117cc:	6823      	ldr	r3, [r4, #0]
 80117ce:	430a      	orrs	r2, r1
 80117d0:	6961      	ldr	r1, [r4, #20]
 80117d2:	681d      	ldr	r5, [r3, #0]
 80117d4:	430a      	orrs	r2, r1
 80117d6:	4995      	ldr	r1, [pc, #596]	; (8011a2c <UART_SetConfig+0x2bc>)
 80117d8:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117da:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80117dc:	430a      	orrs	r2, r1
 80117de:	4302      	orrs	r2, r0
 80117e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117e2:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80117e4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80117e6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80117ea:	4329      	orrs	r1, r5
 80117ec:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80117ee:	6a21      	ldr	r1, [r4, #32]
 80117f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80117f2:	6899      	ldr	r1, [r3, #8]
 80117f4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80117f8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80117fa:	498d      	ldr	r1, [pc, #564]	; (8011a30 <UART_SetConfig+0x2c0>)
 80117fc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80117fe:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011800:	d07e      	beq.n	8011900 <UART_SetConfig+0x190>
 8011802:	4a8c      	ldr	r2, [pc, #560]	; (8011a34 <UART_SetConfig+0x2c4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d054      	beq.n	80118b2 <UART_SetConfig+0x142>
 8011808:	4a8b      	ldr	r2, [pc, #556]	; (8011a38 <UART_SetConfig+0x2c8>)
 801180a:	4293      	cmp	r3, r2
 801180c:	f000 812a 	beq.w	8011a64 <UART_SetConfig+0x2f4>
 8011810:	4a8a      	ldr	r2, [pc, #552]	; (8011a3c <UART_SetConfig+0x2cc>)
 8011812:	4293      	cmp	r3, r2
 8011814:	f000 8137 	beq.w	8011a86 <UART_SetConfig+0x316>
 8011818:	4a89      	ldr	r2, [pc, #548]	; (8011a40 <UART_SetConfig+0x2d0>)
 801181a:	4293      	cmp	r3, r2
 801181c:	f000 809e 	beq.w	801195c <UART_SetConfig+0x1ec>
 8011820:	4a88      	ldr	r2, [pc, #544]	; (8011a44 <UART_SetConfig+0x2d4>)
 8011822:	4293      	cmp	r3, r2
 8011824:	f000 80d1 	beq.w	80119ca <UART_SetConfig+0x25a>
 8011828:	4a87      	ldr	r2, [pc, #540]	; (8011a48 <UART_SetConfig+0x2d8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	f000 8151 	beq.w	8011ad2 <UART_SetConfig+0x362>
 8011830:	4a86      	ldr	r2, [pc, #536]	; (8011a4c <UART_SetConfig+0x2dc>)
 8011832:	4293      	cmp	r3, r2
 8011834:	f000 8164 	beq.w	8011b00 <UART_SetConfig+0x390>
    switch (clocksource)
 8011838:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 801183a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 801183c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8011840:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8011842:	f640 3176 	movw	r1, #2934	; 0xb76
 8011846:	4882      	ldr	r0, [pc, #520]	; (8011a50 <UART_SetConfig+0x2e0>)
 8011848:	f7f2 fef4 	bl	8004634 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 801184c:	69a3      	ldr	r3, [r4, #24]
 801184e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8011852:	d0b5      	beq.n	80117c0 <UART_SetConfig+0x50>
 8011854:	487e      	ldr	r0, [pc, #504]	; (8011a50 <UART_SetConfig+0x2e0>)
 8011856:	f640 3177 	movw	r1, #2935	; 0xb77
 801185a:	f7f2 feeb 	bl	8004634 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 801185e:	69e0      	ldr	r0, [r4, #28]
 8011860:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8011864:	d0b0      	beq.n	80117c8 <UART_SetConfig+0x58>
 8011866:	487a      	ldr	r0, [pc, #488]	; (8011a50 <UART_SetConfig+0x2e0>)
 8011868:	f640 3178 	movw	r1, #2936	; 0xb78
 801186c:	f7f2 fee2 	bl	8004634 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011870:	69e0      	ldr	r0, [r4, #28]
 8011872:	e7a9      	b.n	80117c8 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8011874:	f640 3175 	movw	r1, #2933	; 0xb75
 8011878:	4875      	ldr	r0, [pc, #468]	; (8011a50 <UART_SetConfig+0x2e0>)
 801187a:	f7f2 fedb 	bl	8004634 <assert_failed>
 801187e:	e795      	b.n	80117ac <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8011880:	f640 3171 	movw	r1, #2929	; 0xb71
 8011884:	4872      	ldr	r0, [pc, #456]	; (8011a50 <UART_SetConfig+0x2e0>)
 8011886:	f7f2 fed5 	bl	8004634 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 801188a:	68e3      	ldr	r3, [r4, #12]
 801188c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8011890:	d080      	beq.n	8011794 <UART_SetConfig+0x24>
 8011892:	f640 3172 	movw	r1, #2930	; 0xb72
 8011896:	486e      	ldr	r0, [pc, #440]	; (8011a50 <UART_SetConfig+0x2e0>)
 8011898:	f7f2 fecc 	bl	8004634 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 801189c:	6a23      	ldr	r3, [r4, #32]
 801189e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80118a2:	f43f af7c 	beq.w	801179e <UART_SetConfig+0x2e>
 80118a6:	f640 3173 	movw	r1, #2931	; 0xb73
 80118aa:	4869      	ldr	r0, [pc, #420]	; (8011a50 <UART_SetConfig+0x2e0>)
 80118ac:	f7f2 fec2 	bl	8004634 <assert_failed>
 80118b0:	e775      	b.n	801179e <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80118b2:	4b68      	ldr	r3, [pc, #416]	; (8011a54 <UART_SetConfig+0x2e4>)
 80118b4:	4a68      	ldr	r2, [pc, #416]	; (8011a58 <UART_SetConfig+0x2e8>)
 80118b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118ba:	f003 030c 	and.w	r3, r3, #12
 80118be:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80118c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80118c4:	d033      	beq.n	801192e <UART_SetConfig+0x1be>
    switch (clocksource)
 80118c6:	2b08      	cmp	r3, #8
 80118c8:	d8b6      	bhi.n	8011838 <UART_SetConfig+0xc8>
 80118ca:	a201      	add	r2, pc, #4	; (adr r2, 80118d0 <UART_SetConfig+0x160>)
 80118cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d0:	0801198b 	.word	0x0801198b
 80118d4:	08011917 	.word	0x08011917
 80118d8:	080119e1 	.word	0x080119e1
 80118dc:	08011839 	.word	0x08011839
 80118e0:	0801197f 	.word	0x0801197f
 80118e4:	08011839 	.word	0x08011839
 80118e8:	08011839 	.word	0x08011839
 80118ec:	08011839 	.word	0x08011839
 80118f0:	080119a1 	.word	0x080119a1
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80118f4:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 80118f8:	4855      	ldr	r0, [pc, #340]	; (8011a50 <UART_SetConfig+0x2e0>)
 80118fa:	f7f2 fe9b 	bl	8004634 <assert_failed>
 80118fe:	e73e      	b.n	801177e <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011900:	4b54      	ldr	r3, [pc, #336]	; (8011a54 <UART_SetConfig+0x2e4>)
 8011902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011906:	f003 0303 	and.w	r3, r3, #3
 801190a:	3b01      	subs	r3, #1
 801190c:	2b02      	cmp	r3, #2
 801190e:	d90b      	bls.n	8011928 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011910:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011914:	d066      	beq.n	80119e4 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 8011916:	f7fb f9d5 	bl	800ccc4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801191a:	2800      	cmp	r0, #0
 801191c:	d142      	bne.n	80119a4 <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 801191e:	2300      	movs	r3, #0
 8011920:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8011922:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8011926:	bd38      	pop	{r3, r4, r5, pc}
 8011928:	4a4c      	ldr	r2, [pc, #304]	; (8011a5c <UART_SetConfig+0x2ec>)
 801192a:	5cd3      	ldrb	r3, [r2, r3]
 801192c:	e7c8      	b.n	80118c0 <UART_SetConfig+0x150>
    switch (clocksource)
 801192e:	2b08      	cmp	r3, #8
 8011930:	d882      	bhi.n	8011838 <UART_SetConfig+0xc8>
 8011932:	a201      	add	r2, pc, #4	; (adr r2, 8011938 <UART_SetConfig+0x1c8>)
 8011934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011938:	08011a21 	.word	0x08011a21
 801193c:	080119e5 	.word	0x080119e5
 8011940:	08011ac9 	.word	0x08011ac9
 8011944:	08011839 	.word	0x08011839
 8011948:	08011a1b 	.word	0x08011a1b
 801194c:	08011839 	.word	0x08011839
 8011950:	08011839 	.word	0x08011839
 8011954:	08011839 	.word	0x08011839
 8011958:	08011acd 	.word	0x08011acd
  UART_GETCLOCKSOURCE(huart, clocksource);
 801195c:	4b3d      	ldr	r3, [pc, #244]	; (8011a54 <UART_SetConfig+0x2e4>)
 801195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196a:	d036      	beq.n	80119da <UART_SetConfig+0x26a>
 801196c:	d810      	bhi.n	8011990 <UART_SetConfig+0x220>
 801196e:	b14b      	cbz	r3, 8011984 <UART_SetConfig+0x214>
 8011970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011974:	f47f af60 	bne.w	8011838 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011978:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801197c:	d04d      	beq.n	8011a1a <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 801197e:	f7fb f839 	bl	800c9f4 <HAL_RCC_GetSysClockFreq>
        break;
 8011982:	e7ca      	b.n	801191a <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011984:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011988:	d04a      	beq.n	8011a20 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 801198a:	f7fb f98b 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
        break;
 801198e:	e7c4      	b.n	801191a <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011994:	f47f af50 	bne.w	8011838 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011998:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801199c:	f000 8096 	beq.w	8011acc <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80119a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80119a4:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119a6:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80119aa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80119ae:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119b2:	f1a3 0110 	sub.w	r1, r3, #16
 80119b6:	4291      	cmp	r1, r2
 80119b8:	f63f af3e 	bhi.w	8011838 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80119bc:	6822      	ldr	r2, [r4, #0]
 80119be:	2000      	movs	r0, #0
 80119c0:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80119c2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80119c4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80119c8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80119ca:	4b22      	ldr	r3, [pc, #136]	; (8011a54 <UART_SetConfig+0x2e4>)
 80119cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80119d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80119d8:	d168      	bne.n	8011aac <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80119de:	d073      	beq.n	8011ac8 <UART_SetConfig+0x358>
    switch (clocksource)
 80119e0:	481f      	ldr	r0, [pc, #124]	; (8011a60 <UART_SetConfig+0x2f0>)
 80119e2:	e7df      	b.n	80119a4 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 80119e4:	f7fb f96e 	bl	800ccc4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d098      	beq.n	801191e <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80119ec:	0043      	lsls	r3, r0, #1
 80119ee:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119f0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80119f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80119f8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80119fc:	f1a3 0210 	sub.w	r2, r3, #16
 8011a00:	428a      	cmp	r2, r1
 8011a02:	f63f af19 	bhi.w	8011838 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a06:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8011a0e:	6821      	ldr	r1, [r4, #0]
 8011a10:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a12:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8011a14:	4313      	orrs	r3, r2
 8011a16:	60cb      	str	r3, [r1, #12]
 8011a18:	e70f      	b.n	801183a <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8011a1a:	f7fa ffeb 	bl	800c9f4 <HAL_RCC_GetSysClockFreq>
        break;
 8011a1e:	e7e3      	b.n	80119e8 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a20:	f7fb f940 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
        break;
 8011a24:	e7e0      	b.n	80119e8 <UART_SetConfig+0x278>
 8011a26:	bf00      	nop
 8011a28:	019bfcc0 	.word	0x019bfcc0
 8011a2c:	efff69f3 	.word	0xefff69f3
 8011a30:	40011000 	.word	0x40011000
 8011a34:	40004400 	.word	0x40004400
 8011a38:	40004800 	.word	0x40004800
 8011a3c:	40004c00 	.word	0x40004c00
 8011a40:	40005000 	.word	0x40005000
 8011a44:	40011400 	.word	0x40011400
 8011a48:	40007800 	.word	0x40007800
 8011a4c:	40007c00 	.word	0x40007c00
 8011a50:	0802b6d0 	.word	0x0802b6d0
 8011a54:	40023800 	.word	0x40023800
 8011a58:	0802b710 	.word	0x0802b710
 8011a5c:	0802b70c 	.word	0x0802b70c
 8011a60:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011a64:	4b32      	ldr	r3, [pc, #200]	; (8011b30 <UART_SetConfig+0x3c0>)
 8011a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011a6e:	2b20      	cmp	r3, #32
 8011a70:	d0b3      	beq.n	80119da <UART_SetConfig+0x26a>
 8011a72:	d805      	bhi.n	8011a80 <UART_SetConfig+0x310>
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d085      	beq.n	8011984 <UART_SetConfig+0x214>
 8011a78:	2b10      	cmp	r3, #16
 8011a7a:	f43f af7d 	beq.w	8011978 <UART_SetConfig+0x208>
 8011a7e:	e6db      	b.n	8011838 <UART_SetConfig+0xc8>
 8011a80:	2b30      	cmp	r3, #48	; 0x30
 8011a82:	d089      	beq.n	8011998 <UART_SetConfig+0x228>
 8011a84:	e6d8      	b.n	8011838 <UART_SetConfig+0xc8>
 8011a86:	4b2a      	ldr	r3, [pc, #168]	; (8011b30 <UART_SetConfig+0x3c0>)
 8011a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011a90:	2b80      	cmp	r3, #128	; 0x80
 8011a92:	d0a2      	beq.n	80119da <UART_SetConfig+0x26a>
 8011a94:	d806      	bhi.n	8011aa4 <UART_SetConfig+0x334>
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f43f af74 	beq.w	8011984 <UART_SetConfig+0x214>
 8011a9c:	2b40      	cmp	r3, #64	; 0x40
 8011a9e:	f43f af6b 	beq.w	8011978 <UART_SetConfig+0x208>
 8011aa2:	e6c9      	b.n	8011838 <UART_SetConfig+0xc8>
 8011aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8011aa6:	f43f af77 	beq.w	8011998 <UART_SetConfig+0x228>
 8011aaa:	e6c5      	b.n	8011838 <UART_SetConfig+0xc8>
 8011aac:	d807      	bhi.n	8011abe <UART_SetConfig+0x34e>
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f43f af2e 	beq.w	8011910 <UART_SetConfig+0x1a0>
 8011ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ab8:	f43f af5e 	beq.w	8011978 <UART_SetConfig+0x208>
 8011abc:	e6bc      	b.n	8011838 <UART_SetConfig+0xc8>
 8011abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011ac2:	f43f af69 	beq.w	8011998 <UART_SetConfig+0x228>
 8011ac6:	e6b7      	b.n	8011838 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ac8:	4b1a      	ldr	r3, [pc, #104]	; (8011b34 <UART_SetConfig+0x3c4>)
 8011aca:	e790      	b.n	80119ee <UART_SetConfig+0x27e>
    switch (clocksource)
 8011acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011ad0:	e78d      	b.n	80119ee <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ad2:	4b17      	ldr	r3, [pc, #92]	; (8011b30 <UART_SetConfig+0x3c0>)
 8011ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ae0:	f43f af7b 	beq.w	80119da <UART_SetConfig+0x26a>
 8011ae4:	d807      	bhi.n	8011af6 <UART_SetConfig+0x386>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f43f af4c 	beq.w	8011984 <UART_SetConfig+0x214>
 8011aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011af0:	f43f af42 	beq.w	8011978 <UART_SetConfig+0x208>
 8011af4:	e6a0      	b.n	8011838 <UART_SetConfig+0xc8>
 8011af6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011afa:	f43f af4d 	beq.w	8011998 <UART_SetConfig+0x228>
 8011afe:	e69b      	b.n	8011838 <UART_SetConfig+0xc8>
 8011b00:	4b0b      	ldr	r3, [pc, #44]	; (8011b30 <UART_SetConfig+0x3c0>)
 8011b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b0e:	f43f af64 	beq.w	80119da <UART_SetConfig+0x26a>
 8011b12:	d807      	bhi.n	8011b24 <UART_SetConfig+0x3b4>
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f43f af35 	beq.w	8011984 <UART_SetConfig+0x214>
 8011b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b1e:	f43f af2b 	beq.w	8011978 <UART_SetConfig+0x208>
 8011b22:	e689      	b.n	8011838 <UART_SetConfig+0xc8>
 8011b24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b28:	f43f af36 	beq.w	8011998 <UART_SetConfig+0x228>
 8011b2c:	e684      	b.n	8011838 <UART_SetConfig+0xc8>
 8011b2e:	bf00      	nop
 8011b30:	40023800 	.word	0x40023800
 8011b34:	01e84800 	.word	0x01e84800

08011b38 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011b38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011b3a:	2bff      	cmp	r3, #255	; 0xff
{
 8011b3c:	b510      	push	{r4, lr}
 8011b3e:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011b40:	d87b      	bhi.n	8011c3a <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011b42:	07da      	lsls	r2, r3, #31
 8011b44:	d50a      	bpl.n	8011b5c <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8011b46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011b48:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8011b4c:	f040 808e 	bne.w	8011c6c <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011b50:	6820      	ldr	r0, [r4, #0]
 8011b52:	6842      	ldr	r2, [r0, #4]
 8011b54:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8011b58:	430a      	orrs	r2, r1
 8011b5a:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011b5c:	0798      	lsls	r0, r3, #30
 8011b5e:	d50a      	bpl.n	8011b76 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011b62:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8011b66:	f040 8089 	bne.w	8011c7c <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011b6a:	6820      	ldr	r0, [r4, #0]
 8011b6c:	6842      	ldr	r2, [r0, #4]
 8011b6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011b72:	430a      	orrs	r2, r1
 8011b74:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011b76:	0759      	lsls	r1, r3, #29
 8011b78:	d50a      	bpl.n	8011b90 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8011b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011b7c:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8011b80:	f040 8084 	bne.w	8011c8c <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011b84:	6820      	ldr	r0, [r4, #0]
 8011b86:	6842      	ldr	r2, [r0, #4]
 8011b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011b8c:	430a      	orrs	r2, r1
 8011b8e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011b90:	071a      	lsls	r2, r3, #28
 8011b92:	d509      	bpl.n	8011ba8 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8011b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b96:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8011b9a:	d17f      	bne.n	8011c9c <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011b9c:	6820      	ldr	r0, [r4, #0]
 8011b9e:	6842      	ldr	r2, [r0, #4]
 8011ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011ba4:	430a      	orrs	r2, r1
 8011ba6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011ba8:	06d8      	lsls	r0, r3, #27
 8011baa:	d509      	bpl.n	8011bc0 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8011bac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bae:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8011bb2:	d17b      	bne.n	8011cac <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011bb4:	6820      	ldr	r0, [r4, #0]
 8011bb6:	6882      	ldr	r2, [r0, #8]
 8011bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011bbc:	430a      	orrs	r2, r1
 8011bbe:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011bc0:	0699      	lsls	r1, r3, #26
 8011bc2:	d509      	bpl.n	8011bd8 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8011bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011bc6:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8011bca:	d177      	bne.n	8011cbc <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011bcc:	6820      	ldr	r0, [r4, #0]
 8011bce:	6882      	ldr	r2, [r0, #8]
 8011bd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011bd4:	430a      	orrs	r2, r1
 8011bd6:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011bd8:	065a      	lsls	r2, r3, #25
 8011bda:	d521      	bpl.n	8011c20 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8011bdc:	4b46      	ldr	r3, [pc, #280]	; (8011cf8 <UART_AdvFeatureConfig+0x1c0>)
 8011bde:	6822      	ldr	r2, [r4, #0]
 8011be0:	4846      	ldr	r0, [pc, #280]	; (8011cfc <UART_AdvFeatureConfig+0x1c4>)
 8011be2:	4947      	ldr	r1, [pc, #284]	; (8011d00 <UART_AdvFeatureConfig+0x1c8>)
 8011be4:	429a      	cmp	r2, r3
 8011be6:	bf18      	it	ne
 8011be8:	4282      	cmpne	r2, r0
 8011bea:	bf14      	ite	ne
 8011bec:	2301      	movne	r3, #1
 8011bee:	2300      	moveq	r3, #0
 8011bf0:	428a      	cmp	r2, r1
 8011bf2:	bf0c      	ite	eq
 8011bf4:	2300      	moveq	r3, #0
 8011bf6:	f003 0301 	andne.w	r3, r3, #1
 8011bfa:	b113      	cbz	r3, 8011c02 <UART_AdvFeatureConfig+0xca>
 8011bfc:	4b41      	ldr	r3, [pc, #260]	; (8011d04 <UART_AdvFeatureConfig+0x1cc>)
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d16b      	bne.n	8011cda <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011c02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011c04:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8011c08:	d160      	bne.n	8011ccc <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c0a:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c0c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c10:	684b      	ldr	r3, [r1, #4]
 8011c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011c16:	ea43 0302 	orr.w	r3, r3, r2
 8011c1a:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c1c:	d014      	beq.n	8011c48 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c20:	061b      	lsls	r3, r3, #24
 8011c22:	d509      	bpl.n	8011c38 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8011c24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011c26:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8011c2a:	d118      	bne.n	8011c5e <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011c2c:	6821      	ldr	r1, [r4, #0]
 8011c2e:	684b      	ldr	r3, [r1, #4]
 8011c30:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8011c34:	4313      	orrs	r3, r2
 8011c36:	604b      	str	r3, [r1, #4]
}
 8011c38:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8011c3a:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8011c3e:	4832      	ldr	r0, [pc, #200]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011c40:	f7f2 fcf8 	bl	8004634 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c46:	e77c      	b.n	8011b42 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8011c48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011c4a:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8011c4e:	d14a      	bne.n	8011ce6 <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c50:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c54:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8011c58:	4302      	orrs	r2, r0
 8011c5a:	604a      	str	r2, [r1, #4]
 8011c5c:	e7e0      	b.n	8011c20 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8011c5e:	f640 4136 	movw	r1, #3126	; 0xc36
 8011c62:	4829      	ldr	r0, [pc, #164]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011c64:	f7f2 fce6 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011c68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011c6a:	e7df      	b.n	8011c2c <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8011c6c:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8011c70:	4825      	ldr	r0, [pc, #148]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011c72:	f7f2 fcdf 	bl	8004634 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c76:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8011c7a:	e769      	b.n	8011b50 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011c7c:	f640 4105 	movw	r1, #3077	; 0xc05
 8011c80:	4821      	ldr	r0, [pc, #132]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011c82:	f7f2 fcd7 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c8a:	e76e      	b.n	8011b6a <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8011c8c:	f640 410c 	movw	r1, #3084	; 0xc0c
 8011c90:	481d      	ldr	r0, [pc, #116]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011c92:	f7f2 fccf 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c96:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c9a:	e773      	b.n	8011b84 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8011c9c:	f640 4113 	movw	r1, #3091	; 0xc13
 8011ca0:	4819      	ldr	r0, [pc, #100]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011ca2:	f7f2 fcc7 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011caa:	e777      	b.n	8011b9c <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8011cac:	f640 411a 	movw	r1, #3098	; 0xc1a
 8011cb0:	4815      	ldr	r0, [pc, #84]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011cb2:	f7f2 fcbf 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011cb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cba:	e77b      	b.n	8011bb4 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8011cbc:	f640 4121 	movw	r1, #3105	; 0xc21
 8011cc0:	4811      	ldr	r0, [pc, #68]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011cc2:	f7f2 fcb7 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011cc6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cca:	e77f      	b.n	8011bcc <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011ccc:	f640 4129 	movw	r1, #3113	; 0xc29
 8011cd0:	480d      	ldr	r0, [pc, #52]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011cd2:	f7f2 fcaf 	bl	8004634 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011cd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011cd8:	e797      	b.n	8011c0a <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8011cda:	f640 4128 	movw	r1, #3112	; 0xc28
 8011cde:	480a      	ldr	r0, [pc, #40]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011ce0:	f7f2 fca8 	bl	8004634 <assert_failed>
 8011ce4:	e78d      	b.n	8011c02 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8011ce6:	f640 412e 	movw	r1, #3118	; 0xc2e
 8011cea:	4807      	ldr	r0, [pc, #28]	; (8011d08 <UART_AdvFeatureConfig+0x1d0>)
 8011cec:	f7f2 fca2 	bl	8004634 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011cf0:	6821      	ldr	r1, [r4, #0]
 8011cf2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011cf4:	e7ac      	b.n	8011c50 <UART_AdvFeatureConfig+0x118>
 8011cf6:	bf00      	nop
 8011cf8:	40011000 	.word	0x40011000
 8011cfc:	40004400 	.word	0x40004400
 8011d00:	40004800 	.word	0x40004800
 8011d04:	40011400 	.word	0x40011400
 8011d08:	0802b6d0 	.word	0x0802b6d0

08011d0c <UART_WaitOnFlagUntilTimeout>:
{
 8011d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d14:	4681      	mov	r9, r0
 8011d16:	460f      	mov	r7, r1
 8011d18:	4616      	mov	r6, r2
 8011d1a:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d1c:	6805      	ldr	r5, [r0, #0]
 8011d1e:	e002      	b.n	8011d26 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8011d20:	f1b8 3fff 	cmp.w	r8, #4294967295
 8011d24:	d10c      	bne.n	8011d40 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d26:	69ec      	ldr	r4, [r5, #28]
 8011d28:	ea37 0304 	bics.w	r3, r7, r4
 8011d2c:	bf0c      	ite	eq
 8011d2e:	f04f 0c01 	moveq.w	ip, #1
 8011d32:	f04f 0c00 	movne.w	ip, #0
 8011d36:	45b4      	cmp	ip, r6
 8011d38:	d0f2      	beq.n	8011d20 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8011d3a:	2000      	movs	r0, #0
}
 8011d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d40:	f7f5 fbe8 	bl	8007514 <HAL_GetTick>
 8011d44:	eba0 000a 	sub.w	r0, r0, sl
 8011d48:	4540      	cmp	r0, r8
 8011d4a:	d82d      	bhi.n	8011da8 <UART_WaitOnFlagUntilTimeout+0x9c>
 8011d4c:	f1b8 0f00 	cmp.w	r8, #0
 8011d50:	d02a      	beq.n	8011da8 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011d52:	f8d9 5000 	ldr.w	r5, [r9]
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	462a      	mov	r2, r5
 8011d5a:	0759      	lsls	r1, r3, #29
 8011d5c:	d5e3      	bpl.n	8011d26 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d5e:	69eb      	ldr	r3, [r5, #28]
 8011d60:	051b      	lsls	r3, r3, #20
 8011d62:	d5e0      	bpl.n	8011d26 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d68:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6a:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d72:	e842 3100 	strex	r1, r3, [r2]
 8011d76:	2900      	cmp	r1, #0
 8011d78:	d1f7      	bne.n	8011d6a <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7a:	f102 0308 	add.w	r3, r2, #8
 8011d7e:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d82:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d86:	f102 0008 	add.w	r0, r2, #8
 8011d8a:	e840 3100 	strex	r1, r3, [r0]
 8011d8e:	2900      	cmp	r1, #0
 8011d90:	d1f3      	bne.n	8011d7a <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8011d92:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8011d94:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8011d96:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8011d9a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8011d9e:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011da2:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8011da6:	e7c9      	b.n	8011d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8011da8:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dac:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db4:	e842 3100 	strex	r1, r3, [r2]
 8011db8:	2900      	cmp	r1, #0
 8011dba:	d1f7      	bne.n	8011dac <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dbc:	f102 0308 	add.w	r3, r2, #8
 8011dc0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc8:	f102 0008 	add.w	r0, r2, #8
 8011dcc:	e840 3100 	strex	r1, r3, [r0]
 8011dd0:	2900      	cmp	r1, #0
 8011dd2:	d1f3      	bne.n	8011dbc <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8011dd4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8011dd6:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8011dd8:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8011ddc:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011de0:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8011de4:	e7aa      	b.n	8011d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8011de6:	bf00      	nop

08011de8 <HAL_UART_Transmit>:
{
 8011de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dec:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8011dee:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8011df0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8011df2:	2b20      	cmp	r3, #32
 8011df4:	d14b      	bne.n	8011e8e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8011df6:	460d      	mov	r5, r1
 8011df8:	2900      	cmp	r1, #0
 8011dfa:	d044      	beq.n	8011e86 <HAL_UART_Transmit+0x9e>
 8011dfc:	fab2 f982 	clz	r9, r2
 8011e00:	4617      	mov	r7, r2
 8011e02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011e06:	2a00      	cmp	r2, #0
 8011e08:	d03d      	beq.n	8011e86 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8011e0a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8011e0e:	4604      	mov	r4, r0
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d03c      	beq.n	8011e8e <HAL_UART_Transmit+0xa6>
 8011e14:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e16:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8011e1a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e1e:	2321      	movs	r3, #33	; 0x21
 8011e20:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8011e22:	f7f5 fb77 	bl	8007514 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e26:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8011e28:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8011e2a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8011e32:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e36:	d040      	beq.n	8011eba <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8011e38:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8011e3c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8011e3e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8011e40:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8011e44:	b973      	cbnz	r3, 8011e64 <HAL_UART_Transmit+0x7c>
 8011e46:	e02a      	b.n	8011e9e <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011e48:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8011e50:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8011e54:	3a01      	subs	r2, #1
 8011e56:	b292      	uxth	r2, r2
 8011e58:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011e5c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8011e60:	b292      	uxth	r2, r2
 8011e62:	b1e2      	cbz	r2, 8011e9e <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011e64:	4643      	mov	r3, r8
 8011e66:	2200      	movs	r2, #0
 8011e68:	2180      	movs	r1, #128	; 0x80
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	9600      	str	r6, [sp, #0]
 8011e6e:	f7ff ff4d 	bl	8011d0c <UART_WaitOnFlagUntilTimeout>
 8011e72:	b980      	cbnz	r0, 8011e96 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8011e74:	2d00      	cmp	r5, #0
 8011e76:	d1e7      	bne.n	8011e48 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011e78:	f839 3b02 	ldrh.w	r3, [r9], #2
 8011e7c:	6822      	ldr	r2, [r4, #0]
 8011e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e82:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8011e84:	e7e4      	b.n	8011e50 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8011e86:	2001      	movs	r0, #1
}
 8011e88:	b003      	add	sp, #12
 8011e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8011e8e:	2002      	movs	r0, #2
}
 8011e90:	b003      	add	sp, #12
 8011e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8011e96:	2003      	movs	r0, #3
}
 8011e98:	b003      	add	sp, #12
 8011e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011e9e:	4643      	mov	r3, r8
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	2140      	movs	r1, #64	; 0x40
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	9600      	str	r6, [sp, #0]
 8011ea8:	f7ff ff30 	bl	8011d0c <UART_WaitOnFlagUntilTimeout>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d1f2      	bne.n	8011e96 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8011eb0:	2320      	movs	r3, #32
 8011eb2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8011eb4:	b003      	add	sp, #12
 8011eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1bb      	bne.n	8011e38 <HAL_UART_Transmit+0x50>
 8011ec0:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8011ec2:	461d      	mov	r5, r3
 8011ec4:	e7b8      	b.n	8011e38 <HAL_UART_Transmit+0x50>
 8011ec6:	bf00      	nop

08011ec8 <UART_CheckIdleState>:
{
 8011ec8:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eca:	2600      	movs	r6, #0
{
 8011ecc:	4604      	mov	r4, r0
 8011ece:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ed0:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8011ed4:	f7f5 fb1e 	bl	8007514 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011ed8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8011eda:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	0712      	lsls	r2, r2, #28
 8011ee0:	d40c      	bmi.n	8011efc <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	075b      	lsls	r3, r3, #29
 8011ee6:	d418      	bmi.n	8011f1a <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ee8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8011eea:	2220      	movs	r2, #32
  return HAL_OK;
 8011eec:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8011eee:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011ef0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011ef4:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ef6:	6623      	str	r3, [r4, #96]	; 0x60
}
 8011ef8:	b002      	add	sp, #8
 8011efa:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011efc:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8011f00:	4603      	mov	r3, r0
 8011f02:	4632      	mov	r2, r6
 8011f04:	4620      	mov	r0, r4
 8011f06:	9100      	str	r1, [sp, #0]
 8011f08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f0c:	f7ff fefe 	bl	8011d0c <UART_WaitOnFlagUntilTimeout>
 8011f10:	b978      	cbnz	r0, 8011f32 <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f12:	6823      	ldr	r3, [r4, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	075b      	lsls	r3, r3, #29
 8011f18:	d5e6      	bpl.n	8011ee8 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f1a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8011f1e:	462b      	mov	r3, r5
 8011f20:	2200      	movs	r2, #0
 8011f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011f26:	9000      	str	r0, [sp, #0]
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f7ff feef 	bl	8011d0c <UART_WaitOnFlagUntilTimeout>
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	d0da      	beq.n	8011ee8 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8011f32:	2003      	movs	r0, #3
}
 8011f34:	b002      	add	sp, #8
 8011f36:	bd70      	pop	{r4, r5, r6, pc}

08011f38 <HAL_UART_Init>:
  if (huart == NULL)
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	f000 8099 	beq.w	8012070 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8011f3e:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011f40:	6802      	ldr	r2, [r0, #0]
{
 8011f42:	b510      	push	{r4, lr}
 8011f44:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d051      	beq.n	8011fee <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8011f4a:	4b4d      	ldr	r3, [pc, #308]	; (8012080 <HAL_UART_Init+0x148>)
 8011f4c:	484d      	ldr	r0, [pc, #308]	; (8012084 <HAL_UART_Init+0x14c>)
 8011f4e:	494e      	ldr	r1, [pc, #312]	; (8012088 <HAL_UART_Init+0x150>)
 8011f50:	429a      	cmp	r2, r3
 8011f52:	bf18      	it	ne
 8011f54:	4282      	cmpne	r2, r0
 8011f56:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011f5a:	bf14      	ite	ne
 8011f5c:	2301      	movne	r3, #1
 8011f5e:	2300      	moveq	r3, #0
 8011f60:	428a      	cmp	r2, r1
 8011f62:	bf0c      	ite	eq
 8011f64:	2300      	moveq	r3, #0
 8011f66:	f003 0301 	andne.w	r3, r3, #1
 8011f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f6e:	4282      	cmp	r2, r0
 8011f70:	bf0c      	ite	eq
 8011f72:	2300      	moveq	r3, #0
 8011f74:	f003 0301 	andne.w	r3, r3, #1
 8011f78:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011f7c:	428a      	cmp	r2, r1
 8011f7e:	bf0c      	ite	eq
 8011f80:	2300      	moveq	r3, #0
 8011f82:	f003 0301 	andne.w	r3, r3, #1
 8011f86:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011f8a:	4282      	cmp	r2, r0
 8011f8c:	bf0c      	ite	eq
 8011f8e:	2300      	moveq	r3, #0
 8011f90:	f003 0301 	andne.w	r3, r3, #1
 8011f94:	428a      	cmp	r2, r1
 8011f96:	bf0c      	ite	eq
 8011f98:	2300      	moveq	r3, #0
 8011f9a:	f003 0301 	andne.w	r3, r3, #1
 8011f9e:	b113      	cbz	r3, 8011fa6 <HAL_UART_Init+0x6e>
 8011fa0:	4b3a      	ldr	r3, [pc, #232]	; (801208c <HAL_UART_Init+0x154>)
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d166      	bne.n	8012074 <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011fa6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d057      	beq.n	801205c <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8011fac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8011fae:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011fb0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011fb2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011fb4:	6813      	ldr	r3, [r2, #0]
 8011fb6:	f023 0301 	bic.w	r3, r3, #1
 8011fba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011fbc:	f7ff fbd8 	bl	8011770 <UART_SetConfig>
 8011fc0:	2801      	cmp	r0, #1
 8011fc2:	d049      	beq.n	8012058 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d14e      	bne.n	8012068 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fca:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8011fcc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011fd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011fd6:	689a      	ldr	r2, [r3, #8]
 8011fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011fdc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	f042 0201 	orr.w	r2, r2, #1
}
 8011fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8011fe8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011fea:	f7ff bf6d 	b.w	8011ec8 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8011fee:	4b24      	ldr	r3, [pc, #144]	; (8012080 <HAL_UART_Init+0x148>)
 8011ff0:	4824      	ldr	r0, [pc, #144]	; (8012084 <HAL_UART_Init+0x14c>)
 8011ff2:	4925      	ldr	r1, [pc, #148]	; (8012088 <HAL_UART_Init+0x150>)
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	bf18      	it	ne
 8011ff8:	4282      	cmpne	r2, r0
 8011ffa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011ffe:	bf14      	ite	ne
 8012000:	2301      	movne	r3, #1
 8012002:	2300      	moveq	r3, #0
 8012004:	428a      	cmp	r2, r1
 8012006:	bf0c      	ite	eq
 8012008:	2300      	moveq	r3, #0
 801200a:	f003 0301 	andne.w	r3, r3, #1
 801200e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012012:	4282      	cmp	r2, r0
 8012014:	bf0c      	ite	eq
 8012016:	2300      	moveq	r3, #0
 8012018:	f003 0301 	andne.w	r3, r3, #1
 801201c:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012020:	428a      	cmp	r2, r1
 8012022:	bf0c      	ite	eq
 8012024:	2300      	moveq	r3, #0
 8012026:	f003 0301 	andne.w	r3, r3, #1
 801202a:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 801202e:	4282      	cmp	r2, r0
 8012030:	bf0c      	ite	eq
 8012032:	2300      	moveq	r3, #0
 8012034:	f003 0301 	andne.w	r3, r3, #1
 8012038:	428a      	cmp	r2, r1
 801203a:	bf0c      	ite	eq
 801203c:	2300      	moveq	r3, #0
 801203e:	f003 0301 	andne.w	r3, r3, #1
 8012042:	2b00      	cmp	r3, #0
 8012044:	d0af      	beq.n	8011fa6 <HAL_UART_Init+0x6e>
 8012046:	4b11      	ldr	r3, [pc, #68]	; (801208c <HAL_UART_Init+0x154>)
 8012048:	429a      	cmp	r2, r3
 801204a:	d0ac      	beq.n	8011fa6 <HAL_UART_Init+0x6e>
 801204c:	f240 1131 	movw	r1, #305	; 0x131
 8012050:	480f      	ldr	r0, [pc, #60]	; (8012090 <HAL_UART_Init+0x158>)
 8012052:	f7f2 faef 	bl	8004634 <assert_failed>
 8012056:	e7a6      	b.n	8011fa6 <HAL_UART_Init+0x6e>
}
 8012058:	2001      	movs	r0, #1
 801205a:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 801205c:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 801205e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012062:	f7f4 f853 	bl	800610c <HAL_UART_MspInit>
 8012066:	e7a1      	b.n	8011fac <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 8012068:	4620      	mov	r0, r4
 801206a:	f7ff fd65 	bl	8011b38 <UART_AdvFeatureConfig>
 801206e:	e7ac      	b.n	8011fca <HAL_UART_Init+0x92>
}
 8012070:	2001      	movs	r0, #1
 8012072:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012074:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012078:	4805      	ldr	r0, [pc, #20]	; (8012090 <HAL_UART_Init+0x158>)
 801207a:	f7f2 fadb 	bl	8004634 <assert_failed>
 801207e:	e792      	b.n	8011fa6 <HAL_UART_Init+0x6e>
 8012080:	40011000 	.word	0x40011000
 8012084:	40004400 	.word	0x40004400
 8012088:	40004800 	.word	0x40004800
 801208c:	40007c00 	.word	0x40007c00
 8012090:	0802b6d0 	.word	0x0802b6d0

08012094 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8012094:	2800      	cmp	r0, #0
 8012096:	d04a      	beq.n	801212e <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012098:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 801209c:	b570      	push	{r4, r5, r6, lr}
 801209e:	460e      	mov	r6, r1
 80120a0:	4604      	mov	r4, r0
 80120a2:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80120a4:	d13d      	bne.n	8012122 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 80120a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d034      	beq.n	8012116 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 80120ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80120ae:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80120b0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80120b2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80120b4:	6813      	ldr	r3, [r2, #0]
 80120b6:	f023 0301 	bic.w	r3, r3, #1
 80120ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80120bc:	f7ff fb58 	bl	8011770 <UART_SetConfig>
 80120c0:	2801      	cmp	r0, #1
 80120c2:	d026      	beq.n	8012112 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80120c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120c6:	bb03      	cbnz	r3, 801210a <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120c8:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80120ca:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120ce:	685a      	ldr	r2, [r3, #4]
 80120d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80120d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80120d6:	689a      	ldr	r2, [r3, #8]
 80120d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80120dc:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80120de:	d00d      	beq.n	80120fc <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80120e0:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80120e2:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80120e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80120e8:	4315      	orrs	r5, r2
 80120ea:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	f042 0201 	orr.w	r2, r2, #1
}
 80120f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 80120f6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80120f8:	f7ff bee6 	b.w	8011ec8 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80120fc:	6859      	ldr	r1, [r3, #4]
 80120fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012102:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8012106:	605e      	str	r6, [r3, #4]
 8012108:	e7ea      	b.n	80120e0 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801210a:	4620      	mov	r0, r4
 801210c:	f7ff fd14 	bl	8011b38 <UART_AdvFeatureConfig>
 8012110:	e7da      	b.n	80120c8 <HAL_MultiProcessor_Init+0x34>
}
 8012112:	2001      	movs	r0, #1
 8012114:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8012116:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012118:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 801211c:	f7f3 fff6 	bl	800610c <HAL_UART_MspInit>
 8012120:	e7c4      	b.n	80120ac <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012122:	f240 211d 	movw	r1, #541	; 0x21d
 8012126:	4803      	ldr	r0, [pc, #12]	; (8012134 <HAL_MultiProcessor_Init+0xa0>)
 8012128:	f7f2 fa84 	bl	8004634 <assert_failed>
 801212c:	e7bb      	b.n	80120a6 <HAL_MultiProcessor_Init+0x12>
}
 801212e:	2001      	movs	r0, #1
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	0802b6d0 	.word	0x0802b6d0

08012138 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8012138:	6883      	ldr	r3, [r0, #8]
{
 801213a:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 801213c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8012140:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8012144:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8012146:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 801214a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 801214e:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8012150:	d04f      	beq.n	80121f2 <UART_Start_Receive_IT+0xba>
 8012152:	2b00      	cmp	r3, #0
 8012154:	d043      	beq.n	80121de <UART_Start_Receive_IT+0xa6>
 8012156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801215a:	d057      	beq.n	801220c <UART_Start_Receive_IT+0xd4>
 801215c:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012160:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012162:	2322      	movs	r3, #34	; 0x22
 8012164:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012166:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801216a:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801216c:	f102 0308 	add.w	r3, r2, #8
 8012170:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012174:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012178:	f102 0408 	add.w	r4, r2, #8
 801217c:	e844 3100 	strex	r1, r3, [r4]
 8012180:	2900      	cmp	r1, #0
 8012182:	d1f3      	bne.n	801216c <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012184:	6883      	ldr	r3, [r0, #8]
 8012186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801218a:	d011      	beq.n	80121b0 <UART_Start_Receive_IT+0x78>
 801218c:	4c23      	ldr	r4, [pc, #140]	; (801221c <UART_Start_Receive_IT+0xe4>)
 801218e:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8012190:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012194:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012196:	b18b      	cbz	r3, 80121bc <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012198:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801219c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121a0:	e842 3100 	strex	r1, r3, [r2]
 80121a4:	2900      	cmp	r1, #0
 80121a6:	d1f7      	bne.n	8012198 <UART_Start_Receive_IT+0x60>
}
 80121a8:	2000      	movs	r0, #0
 80121aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ae:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80121b0:	6903      	ldr	r3, [r0, #16]
 80121b2:	bb33      	cbnz	r3, 8012202 <UART_Start_Receive_IT+0xca>
 80121b4:	491a      	ldr	r1, [pc, #104]	; (8012220 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 80121b6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 80121ba:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121bc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80121c0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c4:	e842 3100 	strex	r1, r3, [r2]
 80121c8:	2900      	cmp	r1, #0
 80121ca:	d0ed      	beq.n	80121a8 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121cc:	e852 3f00 	ldrex	r3, [r2]
 80121d0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d4:	e842 3100 	strex	r1, r3, [r2]
 80121d8:	2900      	cmp	r1, #0
 80121da:	d1ef      	bne.n	80121bc <UART_Start_Receive_IT+0x84>
 80121dc:	e7e4      	b.n	80121a8 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 80121de:	6903      	ldr	r3, [r0, #16]
 80121e0:	b91b      	cbnz	r3, 80121ea <UART_Start_Receive_IT+0xb2>
 80121e2:	23ff      	movs	r3, #255	; 0xff
 80121e4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80121e8:	e7ba      	b.n	8012160 <UART_Start_Receive_IT+0x28>
 80121ea:	237f      	movs	r3, #127	; 0x7f
 80121ec:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80121f0:	e7b6      	b.n	8012160 <UART_Start_Receive_IT+0x28>
 80121f2:	6903      	ldr	r3, [r0, #16]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1f4      	bne.n	80121e2 <UART_Start_Receive_IT+0xaa>
 80121f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80121fc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012200:	e7ae      	b.n	8012160 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8012202:	4b06      	ldr	r3, [pc, #24]	; (801221c <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8012204:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012208:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801220a:	e7c5      	b.n	8012198 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 801220c:	6903      	ldr	r3, [r0, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d0eb      	beq.n	80121ea <UART_Start_Receive_IT+0xb2>
 8012212:	233f      	movs	r3, #63	; 0x3f
 8012214:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012218:	e7a2      	b.n	8012160 <UART_Start_Receive_IT+0x28>
 801221a:	bf00      	nop
 801221c:	080112c9 	.word	0x080112c9
 8012220:	08011369 	.word	0x08011369

08012224 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012224:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012226:	2b20      	cmp	r3, #32
 8012228:	d11e      	bne.n	8012268 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 801222a:	b1d9      	cbz	r1, 8012264 <HAL_UART_Receive_IT+0x40>
 801222c:	fab2 f382 	clz	r3, r2
 8012230:	095b      	lsrs	r3, r3, #5
 8012232:	b1ba      	cbz	r2, 8012264 <HAL_UART_Receive_IT+0x40>
{
 8012234:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012236:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801223a:	2c01      	cmp	r4, #1
 801223c:	d016      	beq.n	801226c <HAL_UART_Receive_IT+0x48>
 801223e:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012240:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012242:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012244:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	021b      	lsls	r3, r3, #8
 801224c:	d507      	bpl.n	801225e <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012256:	e844 3500 	strex	r5, r3, [r4]
 801225a:	2d00      	cmp	r5, #0
 801225c:	d1f7      	bne.n	801224e <HAL_UART_Receive_IT+0x2a>
}
 801225e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8012260:	f7ff bf6a 	b.w	8012138 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8012264:	2001      	movs	r0, #1
}
 8012266:	4770      	bx	lr
    return HAL_BUSY;
 8012268:	2002      	movs	r0, #2
 801226a:	4770      	bx	lr
 801226c:	2002      	movs	r0, #2
}
 801226e:	bc30      	pop	{r4, r5}
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop

08012274 <UART_Start_Receive_DMA>:
{
 8012274:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012276:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012278:	2500      	movs	r5, #0
{
 801227a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 801227c:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801227e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8012282:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012286:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8012288:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801228a:	b168      	cbz	r0, 80122a8 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801228c:	4e1f      	ldr	r6, [pc, #124]	; (801230c <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801228e:	4613      	mov	r3, r2
 8012290:	460a      	mov	r2, r1
 8012292:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012294:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012296:	4e1e      	ldr	r6, [pc, #120]	; (8012310 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012298:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 801229a:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801229c:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801229e:	4e1d      	ldr	r6, [pc, #116]	; (8012314 <UART_Start_Receive_DMA+0xa0>)
 80122a0:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80122a2:	f7f6 fb01 	bl	80088a8 <HAL_DMA_Start_IT>
 80122a6:	bb40      	cbnz	r0, 80122fa <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80122a8:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80122aa:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80122ac:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80122b0:	b14b      	cbz	r3, 80122c6 <UART_Start_Receive_DMA+0x52>
 80122b2:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122bc:	e843 2100 	strex	r1, r2, [r3]
 80122c0:	2900      	cmp	r1, #0
 80122c2:	d1f7      	bne.n	80122b4 <UART_Start_Receive_DMA+0x40>
 80122c4:	e000      	b.n	80122c8 <UART_Start_Receive_DMA+0x54>
 80122c6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c8:	f103 0208 	add.w	r2, r3, #8
 80122cc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122d0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d4:	f103 0008 	add.w	r0, r3, #8
 80122d8:	e840 2100 	strex	r1, r2, [r0]
 80122dc:	2900      	cmp	r1, #0
 80122de:	d1f3      	bne.n	80122c8 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	f103 0208 	add.w	r2, r3, #8
 80122e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80122e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ec:	f103 0108 	add.w	r1, r3, #8
 80122f0:	e841 2000 	strex	r0, r2, [r1]
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d1f3      	bne.n	80122e0 <UART_Start_Receive_DMA+0x6c>
}
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80122fa:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 80122fc:	2320      	movs	r3, #32
      return HAL_ERROR;
 80122fe:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8012300:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012304:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8012308:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 801230a:	bd70      	pop	{r4, r5, r6, pc}
 801230c:	08011425 	.word	0x08011425
 8012310:	08011409 	.word	0x08011409
 8012314:	080110a1 	.word	0x080110a1

08012318 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012318:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801231a:	2b20      	cmp	r3, #32
 801231c:	d11e      	bne.n	801235c <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 801231e:	b1d9      	cbz	r1, 8012358 <HAL_UART_Receive_DMA+0x40>
 8012320:	fab2 f382 	clz	r3, r2
 8012324:	095b      	lsrs	r3, r3, #5
 8012326:	b1ba      	cbz	r2, 8012358 <HAL_UART_Receive_DMA+0x40>
{
 8012328:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801232a:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 801232e:	2c01      	cmp	r4, #1
 8012330:	d016      	beq.n	8012360 <HAL_UART_Receive_DMA+0x48>
 8012332:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012334:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012336:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012338:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801233c:	6863      	ldr	r3, [r4, #4]
 801233e:	021b      	lsls	r3, r3, #8
 8012340:	d507      	bpl.n	8012352 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012342:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801234a:	e844 3500 	strex	r5, r3, [r4]
 801234e:	2d00      	cmp	r5, #0
 8012350:	d1f7      	bne.n	8012342 <HAL_UART_Receive_DMA+0x2a>
}
 8012352:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012354:	f7ff bf8e 	b.w	8012274 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8012358:	2001      	movs	r0, #1
}
 801235a:	4770      	bx	lr
    return HAL_BUSY;
 801235c:	2002      	movs	r0, #2
 801235e:	4770      	bx	lr
 8012360:	2002      	movs	r0, #2
}
 8012362:	bc30      	pop	{r4, r5}
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop

08012368 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8012368:	2800      	cmp	r0, #0
 801236a:	f000 808a 	beq.w	8012482 <HAL_RS485Ex_Init+0x11a>
{
 801236e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012372:	4c47      	ldr	r4, [pc, #284]	; (8012490 <HAL_RS485Ex_Init+0x128>)
 8012374:	4617      	mov	r7, r2
 8012376:	461d      	mov	r5, r3
 8012378:	4a46      	ldr	r2, [pc, #280]	; (8012494 <HAL_RS485Ex_Init+0x12c>)
 801237a:	6803      	ldr	r3, [r0, #0]
 801237c:	460e      	mov	r6, r1
 801237e:	4680      	mov	r8, r0
 8012380:	42a3      	cmp	r3, r4
 8012382:	bf18      	it	ne
 8012384:	4293      	cmpne	r3, r2
 8012386:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801238a:	bf14      	ite	ne
 801238c:	2401      	movne	r4, #1
 801238e:	2400      	moveq	r4, #0
 8012390:	4293      	cmp	r3, r2
 8012392:	bf0c      	ite	eq
 8012394:	2400      	moveq	r4, #0
 8012396:	f004 0401 	andne.w	r4, r4, #1
 801239a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801239e:	4293      	cmp	r3, r2
 80123a0:	bf0c      	ite	eq
 80123a2:	2400      	moveq	r4, #0
 80123a4:	f004 0401 	andne.w	r4, r4, #1
 80123a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123ac:	4293      	cmp	r3, r2
 80123ae:	bf0c      	ite	eq
 80123b0:	2400      	moveq	r4, #0
 80123b2:	f004 0401 	andne.w	r4, r4, #1
 80123b6:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80123ba:	4293      	cmp	r3, r2
 80123bc:	bf0c      	ite	eq
 80123be:	2400      	moveq	r4, #0
 80123c0:	f004 0401 	andne.w	r4, r4, #1
 80123c4:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80123c8:	4293      	cmp	r3, r2
 80123ca:	bf0c      	ite	eq
 80123cc:	2400      	moveq	r4, #0
 80123ce:	f004 0401 	andne.w	r4, r4, #1
 80123d2:	b11c      	cbz	r4, 80123dc <HAL_RS485Ex_Init+0x74>
 80123d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80123d8:	4293      	cmp	r3, r2
 80123da:	d154      	bne.n	8012486 <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80123dc:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 80123e0:	d14a      	bne.n	8012478 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80123e2:	2f1f      	cmp	r7, #31
 80123e4:	d843      	bhi.n	801246e <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80123e6:	2d1f      	cmp	r5, #31
 80123e8:	d83c      	bhi.n	8012464 <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 80123ea:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 80123ee:	b39b      	cbz	r3, 8012458 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80123f0:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 80123f4:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80123f6:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 80123f8:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80123fc:	6813      	ldr	r3, [r2, #0]
 80123fe:	f023 0301 	bic.w	r3, r3, #1
 8012402:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012404:	f7ff f9b4 	bl	8011770 <UART_SetConfig>
 8012408:	2801      	cmp	r0, #1
 801240a:	d022      	beq.n	8012452 <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801240c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8012410:	b9db      	cbnz	r3, 801244a <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012412:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012416:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012418:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801241a:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801241c:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012420:	4d1d      	ldr	r5, [pc, #116]	; (8012498 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012426:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8012428:	6899      	ldr	r1, [r3, #8]
 801242a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801242e:	430e      	orrs	r6, r1
 8012430:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	4015      	ands	r5, r2
 8012436:	432f      	orrs	r7, r5
 8012438:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	f042 0201 	orr.w	r2, r2, #1
}
 8012440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8012444:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012446:	f7ff bd3f 	b.w	8011ec8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 801244a:	4640      	mov	r0, r8
 801244c:	f7ff fb74 	bl	8011b38 <UART_AdvFeatureConfig>
 8012450:	e7df      	b.n	8012412 <HAL_RS485Ex_Init+0xaa>
}
 8012452:	2001      	movs	r0, #1
 8012454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8012458:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801245a:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 801245e:	f7f3 fe55 	bl	800610c <HAL_UART_MspInit>
 8012462:	e7c5      	b.n	80123f0 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012464:	21aa      	movs	r1, #170	; 0xaa
 8012466:	480d      	ldr	r0, [pc, #52]	; (801249c <HAL_RS485Ex_Init+0x134>)
 8012468:	f7f2 f8e4 	bl	8004634 <assert_failed>
 801246c:	e7bd      	b.n	80123ea <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801246e:	21a7      	movs	r1, #167	; 0xa7
 8012470:	480a      	ldr	r0, [pc, #40]	; (801249c <HAL_RS485Ex_Init+0x134>)
 8012472:	f7f2 f8df 	bl	8004634 <assert_failed>
 8012476:	e7b6      	b.n	80123e6 <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012478:	21a4      	movs	r1, #164	; 0xa4
 801247a:	4808      	ldr	r0, [pc, #32]	; (801249c <HAL_RS485Ex_Init+0x134>)
 801247c:	f7f2 f8da 	bl	8004634 <assert_failed>
 8012480:	e7af      	b.n	80123e2 <HAL_RS485Ex_Init+0x7a>
}
 8012482:	2001      	movs	r0, #1
 8012484:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012486:	21a1      	movs	r1, #161	; 0xa1
 8012488:	4804      	ldr	r0, [pc, #16]	; (801249c <HAL_RS485Ex_Init+0x134>)
 801248a:	f7f2 f8d3 	bl	8004634 <assert_failed>
 801248e:	e7a5      	b.n	80123dc <HAL_RS485Ex_Init+0x74>
 8012490:	40011000 	.word	0x40011000
 8012494:	40004400 	.word	0x40004400
 8012498:	fc00ffff 	.word	0xfc00ffff
 801249c:	0802b720 	.word	0x0802b720

080124a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80124a0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80124a2:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80124a4:	4a11      	ldr	r2, [pc, #68]	; (80124ec <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	e002      	b.n	80124b0 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80124aa:	6903      	ldr	r3, [r0, #16]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	db07      	blt.n	80124c0 <USB_CoreReset+0x20>
    if (++count > 200000U)
 80124b0:	9b01      	ldr	r3, [sp, #4]
 80124b2:	3301      	adds	r3, #1
 80124b4:	4293      	cmp	r3, r2
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	d9f7      	bls.n	80124aa <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 80124ba:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 80124bc:	b002      	add	sp, #8
 80124be:	4770      	bx	lr
  count = 0U;
 80124c0:	2300      	movs	r3, #0
    if (++count > 200000U)
 80124c2:	4a0a      	ldr	r2, [pc, #40]	; (80124ec <USB_CoreReset+0x4c>)
  count = 0U;
 80124c4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80124c6:	6903      	ldr	r3, [r0, #16]
 80124c8:	f043 0301 	orr.w	r3, r3, #1
 80124cc:	6103      	str	r3, [r0, #16]
 80124ce:	e003      	b.n	80124d8 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80124d0:	6903      	ldr	r3, [r0, #16]
 80124d2:	f013 0301 	ands.w	r3, r3, #1
 80124d6:	d005      	beq.n	80124e4 <USB_CoreReset+0x44>
    if (++count > 200000U)
 80124d8:	9b01      	ldr	r3, [sp, #4]
 80124da:	3301      	adds	r3, #1
 80124dc:	4293      	cmp	r3, r2
 80124de:	9301      	str	r3, [sp, #4]
 80124e0:	d9f6      	bls.n	80124d0 <USB_CoreReset+0x30>
 80124e2:	e7ea      	b.n	80124ba <USB_CoreReset+0x1a>
  return HAL_OK;
 80124e4:	4618      	mov	r0, r3
}
 80124e6:	b002      	add	sp, #8
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop
 80124ec:	00030d40 	.word	0x00030d40

080124f0 <USB_CoreInit>:
{
 80124f0:	b084      	sub	sp, #16
 80124f2:	b510      	push	{r4, lr}
 80124f4:	f10d 0c0c 	add.w	ip, sp, #12
 80124f8:	4604      	mov	r4, r0
 80124fa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80124fe:	9b08      	ldr	r3, [sp, #32]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d122      	bne.n	801254a <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012504:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012506:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 801250a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801250c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8012510:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012512:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012514:	68c2      	ldr	r2, [r0, #12]
 8012516:	ea03 0302 	and.w	r3, r3, r2
 801251a:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801251c:	68c3      	ldr	r3, [r0, #12]
 801251e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012522:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8012524:	d01c      	beq.n	8012560 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 8012526:	4620      	mov	r0, r4
 8012528:	f7ff ffba 	bl	80124a0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 801252c:	9b06      	ldr	r3, [sp, #24]
 801252e:	2b01      	cmp	r3, #1
 8012530:	d107      	bne.n	8012542 <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012532:	68a3      	ldr	r3, [r4, #8]
 8012534:	f043 0306 	orr.w	r3, r3, #6
 8012538:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	f043 0320 	orr.w	r3, r3, #32
 8012540:	60a3      	str	r3, [r4, #8]
}
 8012542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012546:	b004      	add	sp, #16
 8012548:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801254a:	68c3      	ldr	r3, [r0, #12]
 801254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012550:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8012552:	f7ff ffa5 	bl	80124a0 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801255c:	63a3      	str	r3, [r4, #56]	; 0x38
 801255e:	e7e5      	b.n	801252c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012560:	68c3      	ldr	r3, [r0, #12]
 8012562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012566:	60c3      	str	r3, [r0, #12]
 8012568:	e7dd      	b.n	8012526 <USB_CoreInit+0x36>
 801256a:	bf00      	nop

0801256c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 801256c:	2a02      	cmp	r2, #2
{
 801256e:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8012570:	d00b      	beq.n	801258a <USB_SetTurnaroundTime+0x1e>
 8012572:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012576:	68d9      	ldr	r1, [r3, #12]
}
 8012578:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801257a:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 801257e:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012580:	68da      	ldr	r2, [r3, #12]
 8012582:	ea42 020c 	orr.w	r2, r2, ip
 8012586:	60da      	str	r2, [r3, #12]
}
 8012588:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801258a:	4a23      	ldr	r2, [pc, #140]	; (8012618 <USB_SetTurnaroundTime+0xac>)
 801258c:	4823      	ldr	r0, [pc, #140]	; (801261c <USB_SetTurnaroundTime+0xb0>)
 801258e:	440a      	add	r2, r1
 8012590:	4282      	cmp	r2, r0
 8012592:	d92c      	bls.n	80125ee <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012594:	4a22      	ldr	r2, [pc, #136]	; (8012620 <USB_SetTurnaroundTime+0xb4>)
 8012596:	4823      	ldr	r0, [pc, #140]	; (8012624 <USB_SetTurnaroundTime+0xb8>)
 8012598:	440a      	add	r2, r1
 801259a:	4282      	cmp	r2, r0
 801259c:	d92a      	bls.n	80125f4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801259e:	4a22      	ldr	r2, [pc, #136]	; (8012628 <USB_SetTurnaroundTime+0xbc>)
 80125a0:	4822      	ldr	r0, [pc, #136]	; (801262c <USB_SetTurnaroundTime+0xc0>)
 80125a2:	440a      	add	r2, r1
 80125a4:	4282      	cmp	r2, r0
 80125a6:	d928      	bls.n	80125fa <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80125a8:	4a21      	ldr	r2, [pc, #132]	; (8012630 <USB_SetTurnaroundTime+0xc4>)
 80125aa:	4822      	ldr	r0, [pc, #136]	; (8012634 <USB_SetTurnaroundTime+0xc8>)
 80125ac:	440a      	add	r2, r1
 80125ae:	4282      	cmp	r2, r0
 80125b0:	d326      	bcc.n	8012600 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80125b2:	4a21      	ldr	r2, [pc, #132]	; (8012638 <USB_SetTurnaroundTime+0xcc>)
 80125b4:	4821      	ldr	r0, [pc, #132]	; (801263c <USB_SetTurnaroundTime+0xd0>)
 80125b6:	440a      	add	r2, r1
 80125b8:	4282      	cmp	r2, r0
 80125ba:	d924      	bls.n	8012606 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80125bc:	4a20      	ldr	r2, [pc, #128]	; (8012640 <USB_SetTurnaroundTime+0xd4>)
 80125be:	4821      	ldr	r0, [pc, #132]	; (8012644 <USB_SetTurnaroundTime+0xd8>)
 80125c0:	440a      	add	r2, r1
 80125c2:	4282      	cmp	r2, r0
 80125c4:	d322      	bcc.n	801260c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80125c6:	4a20      	ldr	r2, [pc, #128]	; (8012648 <USB_SetTurnaroundTime+0xdc>)
 80125c8:	4820      	ldr	r0, [pc, #128]	; (801264c <USB_SetTurnaroundTime+0xe0>)
 80125ca:	440a      	add	r2, r1
 80125cc:	4282      	cmp	r2, r0
 80125ce:	d3d0      	bcc.n	8012572 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80125d0:	4a1f      	ldr	r2, [pc, #124]	; (8012650 <USB_SetTurnaroundTime+0xe4>)
 80125d2:	4820      	ldr	r0, [pc, #128]	; (8012654 <USB_SetTurnaroundTime+0xe8>)
 80125d4:	440a      	add	r2, r1
 80125d6:	4282      	cmp	r2, r0
 80125d8:	d31b      	bcc.n	8012612 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80125da:	4a1f      	ldr	r2, [pc, #124]	; (8012658 <USB_SetTurnaroundTime+0xec>)
 80125dc:	481f      	ldr	r0, [pc, #124]	; (801265c <USB_SetTurnaroundTime+0xf0>)
 80125de:	440a      	add	r2, r1
 80125e0:	4282      	cmp	r2, r0
 80125e2:	bf34      	ite	cc
 80125e4:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 80125e8:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 80125ec:	e7c3      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 80125ee:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 80125f2:	e7c0      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 80125f4:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 80125f8:	e7bd      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 80125fa:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80125fe:	e7ba      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 8012600:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8012604:	e7b7      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 8012606:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 801260a:	e7b4      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 801260c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8012610:	e7b1      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 8012612:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8012616:	e7ae      	b.n	8012576 <USB_SetTurnaroundTime+0xa>
 8012618:	ff275340 	.word	0xff275340
 801261c:	000c34ff 	.word	0x000c34ff
 8012620:	ff1b1e40 	.word	0xff1b1e40
 8012624:	000f423f 	.word	0x000f423f
 8012628:	ff0bdc00 	.word	0xff0bdc00
 801262c:	00124f7f 	.word	0x00124f7f
 8012630:	fef98c80 	.word	0xfef98c80
 8012634:	0013d620 	.word	0x0013d620
 8012638:	fee5b660 	.word	0xfee5b660
 801263c:	0016e35f 	.word	0x0016e35f
 8012640:	feced300 	.word	0xfeced300
 8012644:	001b7740 	.word	0x001b7740
 8012648:	feb35bc0 	.word	0xfeb35bc0
 801264c:	002191c0 	.word	0x002191c0
 8012650:	fe91ca00 	.word	0xfe91ca00
 8012654:	00387520 	.word	0x00387520
 8012658:	fe5954e0 	.word	0xfe5954e0
 801265c:	00419ce0 	.word	0x00419ce0

08012660 <USB_EnableGlobalInt>:
{
 8012660:	4603      	mov	r3, r0
}
 8012662:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012664:	689a      	ldr	r2, [r3, #8]
 8012666:	f042 0201 	orr.w	r2, r2, #1
 801266a:	609a      	str	r2, [r3, #8]
}
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop

08012670 <USB_DisableGlobalInt>:
{
 8012670:	4603      	mov	r3, r0
}
 8012672:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012674:	689a      	ldr	r2, [r3, #8]
 8012676:	f022 0201 	bic.w	r2, r2, #1
 801267a:	609a      	str	r2, [r3, #8]
}
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop

08012680 <USB_SetCurrentMode>:
{
 8012680:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012682:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8012684:	2901      	cmp	r1, #1
{
 8012686:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012688:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801268c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801268e:	d017      	beq.n	80126c0 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8012690:	b9a1      	cbnz	r1, 80126bc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012692:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8012694:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801269a:	60c3      	str	r3, [r0, #12]
 801269c:	e001      	b.n	80126a2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801269e:	2c32      	cmp	r4, #50	; 0x32
 80126a0:	d00c      	beq.n	80126bc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80126a2:	2001      	movs	r0, #1
      ms++;
 80126a4:	4404      	add	r4, r0
      HAL_Delay(1U);
 80126a6:	f7f4 ff3b 	bl	8007520 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80126aa:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80126ac:	07db      	lsls	r3, r3, #31
 80126ae:	d4f6      	bmi.n	801269e <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80126b0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80126b4:	fab0 f080 	clz	r0, r0
 80126b8:	0940      	lsrs	r0, r0, #5
}
 80126ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80126bc:	2001      	movs	r0, #1
}
 80126be:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80126c0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80126c2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80126c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126c8:	60c3      	str	r3, [r0, #12]
 80126ca:	e001      	b.n	80126d0 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80126cc:	2c32      	cmp	r4, #50	; 0x32
 80126ce:	d0f5      	beq.n	80126bc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80126d0:	2001      	movs	r0, #1
      ms++;
 80126d2:	4404      	add	r4, r0
      HAL_Delay(1U);
 80126d4:	f7f4 ff24 	bl	8007520 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80126d8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80126da:	07da      	lsls	r2, r3, #31
 80126dc:	d5f6      	bpl.n	80126cc <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 80126de:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 80126e2:	fab0 f080 	clz	r0, r0
 80126e6:	0940      	lsrs	r0, r0, #5
 80126e8:	e7e7      	b.n	80126ba <USB_SetCurrentMode+0x3a>
 80126ea:	bf00      	nop

080126ec <USB_FlushTxFifo>:
{
 80126ec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80126ee:	2300      	movs	r3, #0
    if (++count > 200000U)
 80126f0:	4a11      	ldr	r2, [pc, #68]	; (8012738 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 80126f2:	9301      	str	r3, [sp, #4]
 80126f4:	e002      	b.n	80126fc <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80126f6:	6903      	ldr	r3, [r0, #16]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	db07      	blt.n	801270c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 80126fc:	9b01      	ldr	r3, [sp, #4]
 80126fe:	3301      	adds	r3, #1
 8012700:	4293      	cmp	r3, r2
 8012702:	9301      	str	r3, [sp, #4]
 8012704:	d9f7      	bls.n	80126f6 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8012706:	2003      	movs	r0, #3
}
 8012708:	b002      	add	sp, #8
 801270a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801270c:	0189      	lsls	r1, r1, #6
  count = 0U;
 801270e:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012710:	4a09      	ldr	r2, [pc, #36]	; (8012738 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012712:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8012716:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012718:	6101      	str	r1, [r0, #16]
 801271a:	e003      	b.n	8012724 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801271c:	6903      	ldr	r3, [r0, #16]
 801271e:	f013 0320 	ands.w	r3, r3, #32
 8012722:	d005      	beq.n	8012730 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8012724:	9b01      	ldr	r3, [sp, #4]
 8012726:	3301      	adds	r3, #1
 8012728:	4293      	cmp	r3, r2
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	d9f6      	bls.n	801271c <USB_FlushTxFifo+0x30>
 801272e:	e7ea      	b.n	8012706 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8012730:	4618      	mov	r0, r3
}
 8012732:	b002      	add	sp, #8
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	00030d40 	.word	0x00030d40

0801273c <USB_FlushRxFifo>:
{
 801273c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801273e:	2300      	movs	r3, #0
    if (++count > 200000U)
 8012740:	4a10      	ldr	r2, [pc, #64]	; (8012784 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	e002      	b.n	801274c <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012746:	6903      	ldr	r3, [r0, #16]
 8012748:	2b00      	cmp	r3, #0
 801274a:	db07      	blt.n	801275c <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 801274c:	9b01      	ldr	r3, [sp, #4]
 801274e:	3301      	adds	r3, #1
 8012750:	4293      	cmp	r3, r2
 8012752:	9301      	str	r3, [sp, #4]
 8012754:	d9f7      	bls.n	8012746 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 8012756:	2003      	movs	r0, #3
}
 8012758:	b002      	add	sp, #8
 801275a:	4770      	bx	lr
  count = 0U;
 801275c:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801275e:	2310      	movs	r3, #16
    if (++count > 200000U)
 8012760:	4a08      	ldr	r2, [pc, #32]	; (8012784 <USB_FlushRxFifo+0x48>)
  count = 0U;
 8012762:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012764:	6103      	str	r3, [r0, #16]
 8012766:	e003      	b.n	8012770 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012768:	6903      	ldr	r3, [r0, #16]
 801276a:	f013 0310 	ands.w	r3, r3, #16
 801276e:	d005      	beq.n	801277c <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 8012770:	9b01      	ldr	r3, [sp, #4]
 8012772:	3301      	adds	r3, #1
 8012774:	4293      	cmp	r3, r2
 8012776:	9301      	str	r3, [sp, #4]
 8012778:	d9f6      	bls.n	8012768 <USB_FlushRxFifo+0x2c>
 801277a:	e7ec      	b.n	8012756 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 801277c:	4618      	mov	r0, r3
}
 801277e:	b002      	add	sp, #8
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	00030d40 	.word	0x00030d40

08012788 <USB_DevInit>:
{
 8012788:	b084      	sub	sp, #16
 801278a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278e:	ad09      	add	r5, sp, #36	; 0x24
 8012790:	4604      	mov	r4, r0
 8012792:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012794:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8012798:	2300      	movs	r3, #0
 801279a:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 801279c:	4619      	mov	r1, r3
 801279e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80127a2:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80127a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80127a8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80127aa:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80127ac:	d1f7      	bne.n	801279e <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	f040 8092 	bne.w	80128d8 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80127b4:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80127b8:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 80127bc:	f043 0302 	orr.w	r3, r3, #2
 80127c0:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80127c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80127c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80127c8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80127ca:	6823      	ldr	r3, [r4, #0]
 80127cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127d0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127d8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80127da:	2300      	movs	r3, #0
 80127dc:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80127e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d07d      	beq.n	80128e6 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	f043 0303 	orr.w	r3, r3, #3
 80127f0:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80127f2:	2110      	movs	r1, #16
 80127f4:	4620      	mov	r0, r4
 80127f6:	f7ff ff79 	bl	80126ec <USB_FlushTxFifo>
 80127fa:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7ff ff9d 	bl	801273c <USB_FlushRxFifo>
 8012802:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8012806:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012808:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801280a:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 801280c:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 801280e:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012810:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 8012812:	bf18      	it	ne
 8012814:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012816:	b1ed      	cbz	r5, 8012854 <USB_DevInit+0xcc>
 8012818:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801281c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012820:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8012824:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012826:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 801282a:	e009      	b.n	8012840 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 801282c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012830:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012832:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012836:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801283a:	3320      	adds	r3, #32
 801283c:	4295      	cmp	r5, r2
 801283e:	d02c      	beq.n	801289a <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012840:	6819      	ldr	r1, [r3, #0]
 8012842:	2900      	cmp	r1, #0
 8012844:	daf2      	bge.n	801282c <USB_DevInit+0xa4>
      if (i == 0U)
 8012846:	b112      	cbz	r2, 801284e <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012848:	f8c3 8000 	str.w	r8, [r3]
 801284c:	e7f0      	b.n	8012830 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801284e:	f8c3 9000 	str.w	r9, [r3]
 8012852:	e7ed      	b.n	8012830 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012854:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8012856:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801285c:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 801285e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8012862:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012864:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8012866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012868:	b91b      	cbnz	r3, 8012872 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801286a:	69a3      	ldr	r3, [r4, #24]
 801286c:	f043 0310 	orr.w	r3, r3, #16
 8012870:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012872:	69a2      	ldr	r2, [r4, #24]
 8012874:	4b21      	ldr	r3, [pc, #132]	; (80128fc <USB_DevInit+0x174>)
 8012876:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8012878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801287a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 801287c:	b11a      	cbz	r2, 8012886 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801287e:	69a3      	ldr	r3, [r4, #24]
 8012880:	f043 0308 	orr.w	r3, r3, #8
 8012884:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8012886:	2e01      	cmp	r6, #1
 8012888:	d103      	bne.n	8012892 <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801288a:	69a2      	ldr	r2, [r4, #24]
 801288c:	4b1c      	ldr	r3, [pc, #112]	; (8012900 <USB_DevInit+0x178>)
 801288e:	4313      	orrs	r3, r2
 8012890:	61a3      	str	r3, [r4, #24]
}
 8012892:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012896:	b004      	add	sp, #16
 8012898:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801289a:	2200      	movs	r2, #0
 801289c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80128a0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80128a4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80128a8:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80128aa:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80128ae:	e009      	b.n	80128c4 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80128b0:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128b4:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80128b6:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80128ba:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128be:	3320      	adds	r3, #32
 80128c0:	4295      	cmp	r5, r2
 80128c2:	d0c7      	beq.n	8012854 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80128c4:	6819      	ldr	r1, [r3, #0]
 80128c6:	2900      	cmp	r1, #0
 80128c8:	daf2      	bge.n	80128b0 <USB_DevInit+0x128>
      if (i == 0U)
 80128ca:	b112      	cbz	r2, 80128d2 <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80128cc:	f8c3 8000 	str.w	r8, [r3]
 80128d0:	e7f0      	b.n	80128b4 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80128d2:	f8c3 9000 	str.w	r9, [r3]
 80128d6:	e7ed      	b.n	80128b4 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80128d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80128da:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80128de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80128e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80128e4:	e779      	b.n	80127da <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 80128e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128e8:	b913      	cbnz	r3, 80128f0 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 80128ee:	e780      	b.n	80127f2 <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	f043 0301 	orr.w	r3, r3, #1
 80128f6:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 80128f8:	e77b      	b.n	80127f2 <USB_DevInit+0x6a>
 80128fa:	bf00      	nop
 80128fc:	803c3800 	.word	0x803c3800
 8012900:	40000004 	.word	0x40000004

08012904 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012904:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012908:	f013 0006 	ands.w	r0, r3, #6
 801290c:	d004      	beq.n	8012918 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 801290e:	f013 0f02 	tst.w	r3, #2
 8012912:	bf14      	ite	ne
 8012914:	2002      	movne	r0, #2
 8012916:	200f      	moveq	r0, #15
}
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop

0801291c <USB_ActivateEndpoint>:
{
 801291c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 801291e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012920:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8012922:	2b01      	cmp	r3, #1
 8012924:	d020      	beq.n	8012968 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012926:	f002 0c0f 	and.w	ip, r2, #15
 801292a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801292e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012932:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012936:	fa03 f30c 	lsl.w	r3, r3, ip
 801293a:	4323      	orrs	r3, r4
 801293c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012940:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8012944:	041b      	lsls	r3, r3, #16
 8012946:	d40c      	bmi.n	8012962 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012948:	688b      	ldr	r3, [r1, #8]
 801294a:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 801294e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012952:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012954:	4914      	ldr	r1, [pc, #80]	; (80129a8 <USB_ActivateEndpoint+0x8c>)
 8012956:	4323      	orrs	r3, r4
 8012958:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 801295c:	4319      	orrs	r1, r3
 801295e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8012962:	2000      	movs	r0, #0
 8012964:	bc30      	pop	{r4, r5}
 8012966:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012968:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 801296c:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012970:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012974:	40ab      	lsls	r3, r5
 8012976:	69e5      	ldr	r5, [r4, #28]
 8012978:	432b      	orrs	r3, r5
 801297a:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801297c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012980:	041c      	lsls	r4, r3, #16
 8012982:	d4ee      	bmi.n	8012962 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012984:	688b      	ldr	r3, [r1, #8]
 8012986:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 801298a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801298e:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012990:	4905      	ldr	r1, [pc, #20]	; (80129a8 <USB_ActivateEndpoint+0x8c>)
 8012992:	432b      	orrs	r3, r5
 8012994:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8012998:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 801299c:	4311      	orrs	r1, r2
}
 801299e:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80129a0:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80129a4:	2000      	movs	r0, #0
 80129a6:	4770      	bx	lr
 80129a8:	10008000 	.word	0x10008000

080129ac <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 80129ac:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80129ae:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80129b0:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80129b2:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80129b6:	d02a      	beq.n	8012a0e <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129b8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80129bc:	2a00      	cmp	r2, #0
 80129be:	db19      	blt.n	80129f4 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80129c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80129c4:	f003 030f 	and.w	r3, r3, #15
 80129c8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80129cc:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80129d0:	4a23      	ldr	r2, [pc, #140]	; (8012a60 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80129d2:	ea21 0103 	bic.w	r1, r1, r3
 80129d6:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80129da:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80129de:	ea21 0303 	bic.w	r3, r1, r3
 80129e2:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80129e6:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80129e8:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 80129ec:	401a      	ands	r2, r3
 80129ee:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 80129f2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80129f4:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 80129f8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80129fc:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012a00:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8012a04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012a08:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8012a0c:	e7d8      	b.n	80129c0 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012a0e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	da0b      	bge.n	8012a2e <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012a16:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8012a1a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8012a1e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012a22:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8012a26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012a2a:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012a2e:	f003 020f 	and.w	r2, r3, #15
 8012a32:	2301      	movs	r3, #1
 8012a34:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8012a38:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012a3a:	4a0a      	ldr	r2, [pc, #40]	; (8012a64 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012a3c:	ea21 0103 	bic.w	r1, r1, r3
 8012a40:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012a44:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8012a48:	ea21 0303 	bic.w	r3, r1, r3
 8012a4c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8012a50:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012a52:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8012a56:	401a      	ands	r2, r3
 8012a58:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	eff37800 	.word	0xeff37800
 8012a64:	ec337800 	.word	0xec337800

08012a68 <USB_EPStartXfer>:
{
 8012a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8012a6c:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012a6e:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d051      	beq.n	8012b1a <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012a76:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8012a7a:	4c84      	ldr	r4, [pc, #528]	; (8012c8c <USB_EPStartXfer+0x224>)
 8012a7c:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8012a80:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8012a84:	402c      	ands	r4, r5
 8012a86:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012a88:	4c81      	ldr	r4, [pc, #516]	; (8012c90 <USB_EPStartXfer+0x228>)
 8012a8a:	691d      	ldr	r5, [r3, #16]
 8012a8c:	402c      	ands	r4, r5
 8012a8e:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8012a90:	694c      	ldr	r4, [r1, #20]
 8012a92:	b384      	cbz	r4, 8012af6 <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a94:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8012a96:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012a98:	4e7e      	ldr	r6, [pc, #504]	; (8012c94 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a9a:	442c      	add	r4, r5
 8012a9c:	f104 34ff 	add.w	r4, r4, #4294967295
 8012aa0:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012aa4:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8012aa8:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012aaa:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012aae:	691d      	ldr	r5, [r3, #16]
 8012ab0:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012ab4:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012ab8:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012aba:	691d      	ldr	r5, [r3, #16]
 8012abc:	ea44 0405 	orr.w	r4, r4, r5
 8012ac0:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8012ac2:	d025      	beq.n	8012b10 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8012ac4:	78cb      	ldrb	r3, [r1, #3]
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d10c      	bne.n	8012ae4 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012aca:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012ace:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012ad2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8012ad6:	bf0c      	ite	eq
 8012ad8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012adc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012ae0:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012ae4:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8012ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012aec:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8012af0:	2000      	movs	r0, #0
 8012af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012af6:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8012af8:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012afa:	691d      	ldr	r5, [r3, #16]
 8012afc:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8012b00:	ea44 0405 	orr.w	r4, r4, r5
 8012b04:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b06:	691c      	ldr	r4, [r3, #16]
 8012b08:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8012b0c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8012b0e:	d1d9      	bne.n	8012ac4 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b10:	68ca      	ldr	r2, [r1, #12]
 8012b12:	2a00      	cmp	r2, #0
 8012b14:	d0d6      	beq.n	8012ac4 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b16:	615a      	str	r2, [r3, #20]
 8012b18:	e7d4      	b.n	8012ac4 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8012b1a:	694d      	ldr	r5, [r1, #20]
 8012b1c:	2d00      	cmp	r5, #0
 8012b1e:	d03d      	beq.n	8012b9c <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b20:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8012b24:	4e59      	ldr	r6, [pc, #356]	; (8012c8c <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012b26:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b2a:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b2e:	4f58      	ldr	r7, [pc, #352]	; (8012c90 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b30:	ea08 0606 	and.w	r6, r8, r6
 8012b34:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012b38:	eb05 060e 	add.w	r6, r5, lr
 8012b3c:	3e01      	subs	r6, #1
 8012b3e:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b42:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8012b46:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012b48:	4e52      	ldr	r6, [pc, #328]	; (8012c94 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b4a:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012b4e:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8012b52:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8012b56:	433e      	orrs	r6, r7
 8012b58:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b5c:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8012b60:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8012b64:	433e      	orrs	r6, r7
 8012b66:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b6a:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8012b6e:	f891 e003 	ldrb.w	lr, [r1, #3]
 8012b72:	f1be 0f01 	cmp.w	lr, #1
 8012b76:	d057      	beq.n	8012c28 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8012b78:	2a01      	cmp	r2, #1
 8012b7a:	d072      	beq.n	8012c62 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b7c:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b80:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b84:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b88:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b8c:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b90:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8012b94:	4313      	orrs	r3, r2
 8012b96:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8012b9a:	e7a9      	b.n	8012af0 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b9c:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8012ba0:	4e3b      	ldr	r6, [pc, #236]	; (8012c90 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ba2:	4c3a      	ldr	r4, [pc, #232]	; (8012c8c <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8012ba4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012ba6:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8012baa:	ea06 0607 	and.w	r6, r6, r7
 8012bae:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012bb2:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8012bb6:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8012bba:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012bbe:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8012bc2:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012bc6:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012bca:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8012bce:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8012bd2:	d03a      	beq.n	8012c4a <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bd4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012bd8:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bdc:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8012be0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012be4:	d184      	bne.n	8012af0 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012be6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012bea:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012bee:	6833      	ldr	r3, [r6, #0]
 8012bf0:	bf0c      	ite	eq
 8012bf2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012bf6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012bfa:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8012bfc:	2a00      	cmp	r2, #0
 8012bfe:	f47f af77 	bne.w	8012af0 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c02:	b2ad      	uxth	r5, r5
 8012c04:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8012c06:	08ad      	lsrs	r5, r5, #2
 8012c08:	f43f af72 	beq.w	8012af0 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012c0c:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c0e:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8012c12:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8012c16:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8012c1a:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8012c1e:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c20:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8012c24:	d1f9      	bne.n	8012c1a <USB_EPStartXfer+0x1b2>
 8012c26:	e763      	b.n	8012af0 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012c28:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8012c2a:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012c2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012c30:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012c32:	6933      	ldr	r3, [r6, #16]
 8012c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c38:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8012c3a:	d017      	beq.n	8012c6c <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012c3c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8012c40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c44:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8012c48:	e7cd      	b.n	8012be6 <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8012c4a:	690b      	ldr	r3, [r1, #16]
 8012c4c:	b963      	cbnz	r3, 8012c68 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8012c4e:	f1be 0f01 	cmp.w	lr, #1
 8012c52:	d00e      	beq.n	8012c72 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012c54:	6833      	ldr	r3, [r6, #0]
}
 8012c56:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c5c:	6033      	str	r3, [r6, #0]
}
 8012c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8012c62:	690b      	ldr	r3, [r1, #16]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d0f5      	beq.n	8012c54 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012c68:	6173      	str	r3, [r6, #20]
 8012c6a:	e7f0      	b.n	8012c4e <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8012c6c:	690b      	ldr	r3, [r1, #16]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d1fa      	bne.n	8012c68 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012c72:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8012c76:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012c7a:	6833      	ldr	r3, [r6, #0]
 8012c7c:	bf0c      	ite	eq
 8012c7e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012c82:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012c86:	6033      	str	r3, [r6, #0]
 8012c88:	e7e4      	b.n	8012c54 <USB_EPStartXfer+0x1ec>
 8012c8a:	bf00      	nop
 8012c8c:	fff80000 	.word	0xfff80000
 8012c90:	e007ffff 	.word	0xe007ffff
 8012c94:	1ff80000 	.word	0x1ff80000

08012c98 <USB_EP0StartXfer>:
{
 8012c98:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8012c9a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012c9c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	d027      	beq.n	8012cf2 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012ca2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8012ca6:	4c3c      	ldr	r4, [pc, #240]	; (8012d98 <USB_EP0StartXfer+0x100>)
 8012ca8:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8012cac:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8012cb0:	402c      	ands	r4, r5
 8012cb2:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012cb4:	4c39      	ldr	r4, [pc, #228]	; (8012d9c <USB_EP0StartXfer+0x104>)
 8012cb6:	691d      	ldr	r5, [r3, #16]
 8012cb8:	402c      	ands	r4, r5
 8012cba:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8012cbc:	694c      	ldr	r4, [r1, #20]
 8012cbe:	b9ac      	cbnz	r4, 8012cec <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8012cc0:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012cc2:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012cc4:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8012cc8:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012cca:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8012cce:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012cd0:	691d      	ldr	r5, [r3, #16]
 8012cd2:	ea44 0405 	orr.w	r4, r4, r5
 8012cd6:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8012cd8:	d03e      	beq.n	8012d58 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012cda:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ce2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	bcf0      	pop	{r4, r5, r6, r7}
 8012cea:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8012cec:	688c      	ldr	r4, [r1, #8]
 8012cee:	614c      	str	r4, [r1, #20]
 8012cf0:	e7e7      	b.n	8012cc2 <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cf2:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8012cf6:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8012cfc:	2d00      	cmp	r5, #0
 8012cfe:	d030      	beq.n	8012d62 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d00:	691f      	ldr	r7, [r3, #16]
 8012d02:	4e25      	ldr	r6, [pc, #148]	; (8012d98 <USB_EP0StartXfer+0x100>)
 8012d04:	403e      	ands	r6, r7
 8012d06:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d08:	4e24      	ldr	r6, [pc, #144]	; (8012d9c <USB_EP0StartXfer+0x104>)
 8012d0a:	691f      	ldr	r7, [r3, #16]
 8012d0c:	403e      	ands	r6, r7
 8012d0e:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8012d10:	688e      	ldr	r6, [r1, #8]
 8012d12:	42b5      	cmp	r5, r6
 8012d14:	d901      	bls.n	8012d1a <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8012d16:	4635      	mov	r5, r6
 8012d18:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d1a:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012d1c:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8012d20:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d22:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8012d26:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012d28:	691e      	ldr	r6, [r3, #16]
 8012d2a:	ea45 0506 	orr.w	r5, r5, r6
 8012d2e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8012d30:	d027      	beq.n	8012d82 <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d32:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8012d34:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d36:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8012d3a:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8012d3c:	2900      	cmp	r1, #0
 8012d3e:	d0d2      	beq.n	8012ce6 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012d40:	f004 020f 	and.w	r2, r4, #15
 8012d44:	2401      	movs	r4, #1
 8012d46:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8012d4a:	4094      	lsls	r4, r2
 8012d4c:	431c      	orrs	r4, r3
 8012d4e:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8012d52:	2000      	movs	r0, #0
 8012d54:	bcf0      	pop	{r4, r5, r6, r7}
 8012d56:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8012d58:	68ca      	ldr	r2, [r1, #12]
 8012d5a:	2a00      	cmp	r2, #0
 8012d5c:	d0bd      	beq.n	8012cda <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012d5e:	615a      	str	r2, [r3, #20]
 8012d60:	e7bb      	b.n	8012cda <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d62:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8012d64:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d66:	4d0d      	ldr	r5, [pc, #52]	; (8012d9c <USB_EP0StartXfer+0x104>)
 8012d68:	ea05 0506 	and.w	r5, r5, r6
 8012d6c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d6e:	691d      	ldr	r5, [r3, #16]
 8012d70:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8012d74:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d76:	4d08      	ldr	r5, [pc, #32]	; (8012d98 <USB_EP0StartXfer+0x100>)
 8012d78:	691e      	ldr	r6, [r3, #16]
 8012d7a:	ea05 0506 	and.w	r5, r5, r6
 8012d7e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8012d80:	d1d7      	bne.n	8012d32 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8012d82:	690a      	ldr	r2, [r1, #16]
 8012d84:	b102      	cbz	r2, 8012d88 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012d86:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d88:	681a      	ldr	r2, [r3, #0]
}
 8012d8a:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d8c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8012d90:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d92:	601a      	str	r2, [r3, #0]
}
 8012d94:	4770      	bx	lr
 8012d96:	bf00      	nop
 8012d98:	fff80000 	.word	0xfff80000
 8012d9c:	e007ffff 	.word	0xe007ffff

08012da0 <USB_WritePacket>:
{
 8012da0:	b410      	push	{r4}
 8012da2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8012da6:	b964      	cbnz	r4, 8012dc2 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8012da8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8012daa:	089b      	lsrs	r3, r3, #2
 8012dac:	d009      	beq.n	8012dc2 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012dae:	3201      	adds	r2, #1
 8012db0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012db4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8012db8:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8012dbc:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012dbe:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8012dc0:	d1fa      	bne.n	8012db8 <USB_WritePacket+0x18>
}
 8012dc2:	2000      	movs	r0, #0
 8012dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop

08012dcc <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8012dcc:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8012dd0:	b570      	push	{r4, r5, r6, lr}
 8012dd2:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8012dd4:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8012dd8:	d01a      	beq.n	8012e10 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012dda:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8012dde:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8012de0:	2300      	movs	r3, #0
 8012de2:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012de4:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8012de8:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012dea:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8012dee:	d1f8      	bne.n	8012de2 <USB_ReadPacket+0x16>
    pDest++;
 8012df0:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8012df4:	b15e      	cbz	r6, 8012e0e <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012df6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8012dfa:	4406      	add	r6, r0
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012e00:	fa21 f302 	lsr.w	r3, r1, r2
 8012e04:	3208      	adds	r2, #8
 8012e06:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8012e0a:	42b0      	cmp	r0, r6
 8012e0c:	d1f8      	bne.n	8012e00 <USB_ReadPacket+0x34>
}
 8012e0e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8012e10:	4608      	mov	r0, r1
 8012e12:	e7ef      	b.n	8012df4 <USB_ReadPacket+0x28>

08012e14 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8012e14:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012e16:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8012e18:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e1a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8012e1e:	d00c      	beq.n	8012e3a <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e20:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8012e24:	b10b      	cbz	r3, 8012e2a <USB_EPSetStall+0x16>
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	da14      	bge.n	8012e54 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012e2a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e32:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012e36:	2000      	movs	r0, #0
 8012e38:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e3a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8012e3e:	2a00      	cmp	r2, #0
 8012e40:	db00      	blt.n	8012e44 <USB_EPSetStall+0x30>
 8012e42:	b973      	cbnz	r3, 8012e62 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012e44:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e4c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8012e50:	2000      	movs	r0, #0
 8012e52:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012e54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012e58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e5c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8012e60:	e7e3      	b.n	8012e2a <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012e62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012e66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e6a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012e6e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e76:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8012e7a:	e7e9      	b.n	8012e50 <USB_EPSetStall+0x3c>

08012e7c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8012e7c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8012e7e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8012e80:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012e82:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8012e86:	d013      	beq.n	8012eb0 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012e8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e90:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e94:	78cb      	ldrb	r3, [r1, #3]
 8012e96:	3b02      	subs	r3, #2
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d901      	bls.n	8012ea0 <USB_EPClearStall+0x24>
}
 8012e9c:	2000      	movs	r0, #0
 8012e9e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012ea0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ea8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012eac:	2000      	movs	r0, #0
 8012eae:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012eb0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012eb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012eb8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ebc:	78cb      	ldrb	r3, [r1, #3]
 8012ebe:	3b02      	subs	r3, #2
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d8eb      	bhi.n	8012e9c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012ec4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ecc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	4770      	bx	lr

08012ed4 <USB_SetDevAddress>:
{
 8012ed4:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ed6:	0109      	lsls	r1, r1, #4
}
 8012ed8:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012eda:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ede:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ee2:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8012ee6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012eea:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8012eee:	4311      	orrs	r1, r2
 8012ef0:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop

08012ef8 <USB_DevConnect>:
{
 8012ef8:	4603      	mov	r3, r0
}
 8012efa:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012efc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f00:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f04:	f022 0203 	bic.w	r2, r2, #3
 8012f08:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f0c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012f10:	f023 0302 	bic.w	r3, r3, #2
 8012f14:	604b      	str	r3, [r1, #4]
}
 8012f16:	4770      	bx	lr

08012f18 <USB_DevDisconnect>:
{
 8012f18:	4603      	mov	r3, r0
}
 8012f1a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f1c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f20:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f24:	f022 0203 	bic.w	r2, r2, #3
 8012f28:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f2c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012f30:	f043 0302 	orr.w	r3, r3, #2
 8012f34:	604b      	str	r3, [r1, #4]
}
 8012f36:	4770      	bx	lr

08012f38 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8012f38:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8012f3a:	6980      	ldr	r0, [r0, #24]
}
 8012f3c:	4010      	ands	r0, r2
 8012f3e:	4770      	bx	lr

08012f40 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8012f40:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f44:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8012f48:	4018      	ands	r0, r3
}
 8012f4a:	0c00      	lsrs	r0, r0, #16
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop

08012f50 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8012f50:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f54:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8012f58:	4018      	ands	r0, r3
}
 8012f5a:	b280      	uxth	r0, r0
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop

08012f60 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f60:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012f64:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f68:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012f6c:	6940      	ldr	r0, [r0, #20]
}
 8012f6e:	4010      	ands	r0, r2
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop

08012f74 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8012f74:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012f78:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012f7c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012f80:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012f84:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012f88:	40cb      	lsrs	r3, r1
 8012f8a:	01db      	lsls	r3, r3, #7
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	4313      	orrs	r3, r2
}
 8012f90:	4018      	ands	r0, r3
 8012f92:	4770      	bx	lr

08012f94 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8012f94:	6940      	ldr	r0, [r0, #20]
}
 8012f96:	f000 0001 	and.w	r0, r0, #1
 8012f9a:	4770      	bx	lr

08012f9c <USB_ActivateSetup>:
{
 8012f9c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012f9e:	4a09      	ldr	r2, [pc, #36]	; (8012fc4 <USB_ActivateSetup+0x28>)
}
 8012fa0:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012fa2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8012fa6:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012fa8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8012fac:	4022      	ands	r2, r4
}
 8012fae:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012fb2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012fb6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fbe:	604b      	str	r3, [r1, #4]
}
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop
 8012fc4:	fffff800 	.word	0xfffff800

08012fc8 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012fc8:	4b14      	ldr	r3, [pc, #80]	; (801301c <USB_EP0_OutStart+0x54>)
{
 8012fca:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012fcc:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012fce:	429c      	cmp	r4, r3
 8012fd0:	d81a      	bhi.n	8013008 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012fd2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012fd6:	2300      	movs	r3, #0
  if (dma == 1U)
 8012fd8:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012fda:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012fdc:	6903      	ldr	r3, [r0, #16]
 8012fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012fe2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012fe4:	6903      	ldr	r3, [r0, #16]
 8012fe6:	f043 0318 	orr.w	r3, r3, #24
 8012fea:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012fec:	6903      	ldr	r3, [r0, #16]
 8012fee:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012ff2:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8012ff4:	d104      	bne.n	8013000 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012ff6:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012ff8:	6803      	ldr	r3, [r0, #0]
 8012ffa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012ffe:	6003      	str	r3, [r0, #0]
}
 8013000:	2000      	movs	r0, #0
 8013002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013006:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013008:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801300c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8013010:	2b00      	cmp	r3, #0
 8013012:	dae0      	bge.n	8012fd6 <USB_EP0_OutStart+0xe>
}
 8013014:	2000      	movs	r0, #0
 8013016:	f85d 4b04 	ldr.w	r4, [sp], #4
 801301a:	4770      	bx	lr
 801301c:	4f54300a 	.word	0x4f54300a

08013020 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013020:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8013022:	4903      	ldr	r1, [pc, #12]	; (8013030 <MX_FATFS_Init+0x10>)
 8013024:	4803      	ldr	r0, [pc, #12]	; (8013034 <MX_FATFS_Init+0x14>)
 8013026:	f001 f96f 	bl	8014308 <FATFS_LinkDriver>
 801302a:	4b03      	ldr	r3, [pc, #12]	; (8013038 <MX_FATFS_Init+0x18>)
 801302c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801302e:	bd08      	pop	{r3, pc}
 8013030:	20002f18 	.word	0x20002f18
 8013034:	200002e4 	.word	0x200002e4
 8013038:	20002f1c 	.word	0x20002f1c

0801303c <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 801303c:	4b02      	ldr	r3, [pc, #8]	; (8013048 <USER_initialize+0xc>)
 801303e:	2201      	movs	r2, #1
 8013040:	701a      	strb	r2, [r3, #0]
    return Stat;
 8013042:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	200002e0 	.word	0x200002e0

0801304c <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 801304c:	2000      	movs	r0, #0
 801304e:	4770      	bx	lr

08013050 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8013050:	2001      	movs	r0, #1
 8013052:	4770      	bx	lr

08013054 <USER_write>:
 8013054:	2000      	movs	r0, #0
 8013056:	4770      	bx	lr

08013058 <USER_status>:
 8013058:	4b02      	ldr	r3, [pc, #8]	; (8013064 <USER_status+0xc>)
 801305a:	2201      	movs	r2, #1
 801305c:	701a      	strb	r2, [r3, #0]
 801305e:	7818      	ldrb	r0, [r3, #0]
 8013060:	4770      	bx	lr
 8013062:	bf00      	nop
 8013064:	200002e0 	.word	0x200002e0

08013068 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013068:	2100      	movs	r1, #0
{
 801306a:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 801306c:	4608      	mov	r0, r1
{
 801306e:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8013070:	f003 fe68 	bl	8016d44 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8013074:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8013076:	4b1f      	ldr	r3, [pc, #124]	; (80130f4 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8013078:	491f      	ldr	r1, [pc, #124]	; (80130f8 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 801307a:	4a20      	ldr	r2, [pc, #128]	; (80130fc <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801307c:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 801307e:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8013080:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8013082:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013084:	481e      	ldr	r0, [pc, #120]	; (8013100 <MX_LWIP_Init+0x98>)
 8013086:	4d1f      	ldr	r5, [pc, #124]	; (8013104 <MX_LWIP_Init+0x9c>)
 8013088:	9002      	str	r0, [sp, #8]
 801308a:	481f      	ldr	r0, [pc, #124]	; (8013108 <MX_LWIP_Init+0xa0>)
 801308c:	9001      	str	r0, [sp, #4]
 801308e:	4628      	mov	r0, r5
 8013090:	f006 fc06 	bl	80198a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013094:	4628      	mov	r0, r5
 8013096:	f006 fcb1 	bl	80199fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801309a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801309e:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 80130a0:	075b      	lsls	r3, r3, #29
 80130a2:	d524      	bpl.n	80130ee <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 80130a4:	f006 fcb0 	bl	8019a08 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80130a8:	4918      	ldr	r1, [pc, #96]	; (801310c <MX_LWIP_Init+0xa4>)
 80130aa:	4816      	ldr	r0, [pc, #88]	; (8013104 <MX_LWIP_Init+0x9c>)
 80130ac:	f006 fd36 	bl	8019b1c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80130b0:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80130b2:	2101      	movs	r1, #1
 80130b4:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 80130b6:	4e16      	ldr	r6, [pc, #88]	; (8013110 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80130b8:	4c16      	ldr	r4, [pc, #88]	; (8013114 <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 80130ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80130be:	f001 fa0d 	bl	80144dc <osSemaphoreCreate>
 80130c2:	4b15      	ldr	r3, [pc, #84]	; (8013118 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 80130c4:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80130c6:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80130ca:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 80130cc:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80130ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80130d8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80130dc:	4631      	mov	r1, r6
 80130de:	a807      	add	r0, sp, #28
 80130e0:	f001 f944 	bl	801436c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80130e4:	4807      	ldr	r0, [pc, #28]	; (8013104 <MX_LWIP_Init+0x9c>)
 80130e6:	f00d fca3 	bl	8020a30 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80130ea:	b00e      	add	sp, #56	; 0x38
 80130ec:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 80130ee:	f006 fcad 	bl	8019a4c <netif_set_down>
 80130f2:	e7d9      	b.n	80130a8 <MX_LWIP_Init+0x40>
 80130f4:	20002f60 	.word	0x20002f60
 80130f8:	20002f64 	.word	0x20002f64
 80130fc:	20002f70 	.word	0x20002f70
 8013100:	08016cbd 	.word	0x08016cbd
 8013104:	20002f24 	.word	0x20002f24
 8013108:	08013419 	.word	0x08013419
 801310c:	080135f9 	.word	0x080135f9
 8013110:	20002f68 	.word	0x20002f68
 8013114:	080284f4 	.word	0x080284f4
 8013118:	20002f20 	.word	0x20002f20

0801311c <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801311c:	4b2c      	ldr	r3, [pc, #176]	; (80131d0 <low_level_output+0xb4>)
{
 801311e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013122:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8013124:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8013126:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013128:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 801312a:	2900      	cmp	r1, #0
 801312c:	d04d      	beq.n	80131ca <low_level_output+0xae>
  bufferoffset = 0;
 801312e:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013130:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8013134:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013136:	6822      	ldr	r2, [r4, #0]
 8013138:	2a00      	cmp	r2, #0
 801313a:	db1b      	blt.n	8013174 <low_level_output+0x58>
      byteslefttocopy = q->len;
 801313c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013140:	1995      	adds	r5, r2, r6
 8013142:	454d      	cmp	r5, r9
 8013144:	d93c      	bls.n	80131c0 <low_level_output+0xa4>
      payloadoffset = 0;
 8013146:	2700      	movs	r7, #0
 8013148:	e002      	b.n	8013150 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801314a:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801314c:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801314e:	d921      	bls.n	8013194 <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013150:	eba9 0a06 	sub.w	sl, r9, r6
 8013154:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013158:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 801315a:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801315c:	4439      	add	r1, r7
 801315e:	4652      	mov	r2, sl
 8013160:	f010 f90a 	bl	8023378 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8013164:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8013166:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801316a:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801316c:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801316e:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013170:	42b3      	cmp	r3, r6
 8013172:	daea      	bge.n	801314a <low_level_output+0x2e>
        errval = ERR_USE;
 8013174:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013178:	4b15      	ldr	r3, [pc, #84]	; (80131d0 <low_level_output+0xb4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013180:	695a      	ldr	r2, [r3, #20]
 8013182:	0692      	lsls	r2, r2, #26
 8013184:	d503      	bpl.n	801318e <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013186:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8013188:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801318a:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 801318c:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 801318e:	b003      	add	sp, #12
 8013190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013194:	4618      	mov	r0, r3
 8013196:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013198:	f8db 1004 	ldr.w	r1, [fp, #4]
 801319c:	462a      	mov	r2, r5
 801319e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80131a0:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80131a2:	4439      	add	r1, r7
 80131a4:	f010 f8e8 	bl	8023378 <memcpy>
  for(q = p; q != NULL; q = q->next)
 80131a8:	f8db b000 	ldr.w	fp, [fp]
 80131ac:	9b01      	ldr	r3, [sp, #4]
 80131ae:	f1bb 0f00 	cmp.w	fp, #0
 80131b2:	d1c0      	bne.n	8013136 <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 80131b4:	4641      	mov	r1, r8
 80131b6:	4806      	ldr	r0, [pc, #24]	; (80131d0 <low_level_output+0xb4>)
 80131b8:	f7f6 fada 	bl	8009770 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 80131bc:	2000      	movs	r0, #0
 80131be:	e7db      	b.n	8013178 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80131c0:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 80131c2:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80131c4:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 80131c6:	4615      	mov	r5, r2
 80131c8:	e7e6      	b.n	8013198 <low_level_output+0x7c>
  uint32_t framelength = 0;
 80131ca:	4688      	mov	r8, r1
 80131cc:	e7f2      	b.n	80131b4 <low_level_output+0x98>
 80131ce:	bf00      	nop
 80131d0:	20006014 	.word	0x20006014

080131d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d8:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80132ec <ethernetif_input+0x118>
 80131dc:	b083      	sub	sp, #12
 80131de:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80131e0:	4b40      	ldr	r3, [pc, #256]	; (80132e4 <ethernetif_input+0x110>)
 80131e2:	f04f 31ff 	mov.w	r1, #4294967295
 80131e6:	6818      	ldr	r0, [r3, #0]
 80131e8:	f001 f99e 	bl	8014528 <osSemaphoreWait>
 80131ec:	2800      	cmp	r0, #0
 80131ee:	d1f7      	bne.n	80131e0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80131f0:	483d      	ldr	r0, [pc, #244]	; (80132e8 <ethernetif_input+0x114>)
 80131f2:	f00f fbb1 	bl	8022958 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80131f6:	483d      	ldr	r0, [pc, #244]	; (80132ec <ethernetif_input+0x118>)
 80131f8:	f7f6 fb3e 	bl	8009878 <HAL_ETH_GetReceivedFrame_IT>
 80131fc:	4604      	mov	r4, r0
 80131fe:	2800      	cmp	r0, #0
 8013200:	d168      	bne.n	80132d4 <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8013202:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8013206:	bb51      	cbnz	r1, 801325e <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8013208:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801320c:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013210:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013214:	b140      	cbz	r0, 8013228 <ethernetif_input+0x54>
 8013216:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013218:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801321a:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801321c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013220:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013222:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013224:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013226:	d1f7      	bne.n	8013218 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013228:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 801322c:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8013232:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013236:	695a      	ldr	r2, [r3, #20]
 8013238:	0612      	lsls	r2, r2, #24
 801323a:	d503      	bpl.n	8013244 <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801323c:	2280      	movs	r2, #128	; 0x80
 801323e:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8013240:	2200      	movs	r2, #0
 8013242:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8013244:	f1ba 0f00 	cmp.w	sl, #0
 8013248:	d044      	beq.n	80132d4 <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 801324a:	9901      	ldr	r1, [sp, #4]
 801324c:	4650      	mov	r0, sl
 801324e:	690b      	ldr	r3, [r1, #16]
 8013250:	4798      	blx	r3
 8013252:	2800      	cmp	r0, #0
 8013254:	d142      	bne.n	80132dc <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8013256:	4824      	ldr	r0, [pc, #144]	; (80132e8 <ethernetif_input+0x114>)
 8013258:	f00f fb84 	bl	8022964 <sys_mutex_unlock>
      } while(p!=NULL);
 801325c:	e7c8      	b.n	80131f0 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801325e:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013262:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013266:	f006 fdb1 	bl	8019dcc <pbuf_alloc>
  if (p != NULL)
 801326a:	4682      	mov	sl, r0
 801326c:	2800      	cmp	r0, #0
 801326e:	d0cb      	beq.n	8013208 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013270:	4683      	mov	fp, r0
    bufferoffset = 0;
 8013272:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013274:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013278:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 801327c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013280:	1854      	adds	r4, r2, r1
 8013282:	4544      	cmp	r4, r8
 8013284:	d923      	bls.n	80132ce <ethernetif_input+0xfa>
      payloadoffset = 0;
 8013286:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013288:	f8db 0004 	ldr.w	r0, [fp, #4]
 801328c:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013290:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013294:	4439      	add	r1, r7
 8013296:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013298:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801329a:	f010 f86d 	bl	8023378 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801329e:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80132a0:	4544      	cmp	r4, r8
        bufferoffset = 0;
 80132a2:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80132a6:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80132a8:	d8ee      	bhi.n	8013288 <ethernetif_input+0xb4>
 80132aa:	4639      	mov	r1, r7
 80132ac:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80132ae:	f8db 0004 	ldr.w	r0, [fp, #4]
 80132b2:	4428      	add	r0, r5
 80132b4:	f010 f860 	bl	8023378 <memcpy>
    for(q = p; q != NULL; q = q->next)
 80132b8:	f8db b000 	ldr.w	fp, [fp]
 80132bc:	f1bb 0f00 	cmp.w	fp, #0
 80132c0:	d0a4      	beq.n	801320c <ethernetif_input+0x38>
 80132c2:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80132c4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80132c8:	1854      	adds	r4, r2, r1
 80132ca:	4544      	cmp	r4, r8
 80132cc:	d8db      	bhi.n	8013286 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80132ce:	4439      	add	r1, r7
      payloadoffset = 0;
 80132d0:	2500      	movs	r5, #0
 80132d2:	e7ec      	b.n	80132ae <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 80132d4:	4804      	ldr	r0, [pc, #16]	; (80132e8 <ethernetif_input+0x114>)
 80132d6:	f00f fb45 	bl	8022964 <sys_mutex_unlock>
      } while(p!=NULL);
 80132da:	e781      	b.n	80131e0 <ethernetif_input+0xc>
            pbuf_free(p);
 80132dc:	4650      	mov	r0, sl
 80132de:	f006 ff47 	bl	801a170 <pbuf_free>
 80132e2:	e7b8      	b.n	8013256 <ethernetif_input+0x82>
 80132e4:	2000605c 	.word	0x2000605c
 80132e8:	2001e31c 	.word	0x2001e31c
 80132ec:	20006014 	.word	0x20006014

080132f0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 80132f0:	4b41      	ldr	r3, [pc, #260]	; (80133f8 <HAL_ETH_MspInit+0x108>)
 80132f2:	6802      	ldr	r2, [r0, #0]
{
 80132f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 80132f6:	429a      	cmp	r2, r3
{
 80132f8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132fa:	f04f 0400 	mov.w	r4, #0
 80132fe:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8013302:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8013306:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8013308:	d001      	beq.n	801330e <HAL_ETH_MspInit+0x1e>
}
 801330a:	b00d      	add	sp, #52	; 0x34
 801330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 801330e:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013312:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013314:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013316:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8013318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801331a:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801331c:	4837      	ldr	r0, [pc, #220]	; (80133fc <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 801331e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8013322:	631a      	str	r2, [r3, #48]	; 0x30
 8013324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013326:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801332a:	9200      	str	r2, [sp, #0]
 801332c:	9a00      	ldr	r2, [sp, #0]
 801332e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013330:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013334:	631a      	str	r2, [r3, #48]	; 0x30
 8013336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013338:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801333c:	9201      	str	r2, [sp, #4]
 801333e:	9a01      	ldr	r2, [sp, #4]
 8013340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013342:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013346:	631a      	str	r2, [r3, #48]	; 0x30
 8013348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801334a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801334e:	9202      	str	r2, [sp, #8]
 8013350:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013354:	f042 0204 	orr.w	r2, r2, #4
 8013358:	631a      	str	r2, [r3, #48]	; 0x30
 801335a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801335c:	f002 0204 	and.w	r2, r2, #4
 8013360:	9203      	str	r2, [sp, #12]
 8013362:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013366:	f042 0201 	orr.w	r2, r2, #1
 801336a:	631a      	str	r2, [r3, #48]	; 0x30
 801336c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801336e:	f002 0201 	and.w	r2, r2, #1
 8013372:	9204      	str	r2, [sp, #16]
 8013374:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013378:	433a      	orrs	r2, r7
 801337a:	631a      	str	r2, [r3, #48]	; 0x30
 801337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801337e:	403a      	ands	r2, r7
 8013380:	9205      	str	r2, [sp, #20]
 8013382:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801338a:	631a      	str	r2, [r3, #48]	; 0x30
 801338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801338e:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013390:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013394:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013396:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801339a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801339c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801339e:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80133a0:	f7f7 f984 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80133a4:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133a6:	a907      	add	r1, sp, #28
 80133a8:	4815      	ldr	r0, [pc, #84]	; (8013400 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80133aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133ac:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80133b0:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133b4:	f7f7 f97a 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80133b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80133bc:	a907      	add	r1, sp, #28
 80133be:	4811      	ldr	r0, [pc, #68]	; (8013404 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80133c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133c2:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80133c6:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80133ca:	f7f7 f96f 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80133ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80133d2:	a907      	add	r1, sp, #28
 80133d4:	480c      	ldr	r0, [pc, #48]	; (8013408 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80133d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133d8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80133da:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133dc:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80133e0:	f7f7 f964 	bl	800a6ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 80133e4:	4622      	mov	r2, r4
 80133e6:	2106      	movs	r1, #6
 80133e8:	203d      	movs	r0, #61	; 0x3d
 80133ea:	f7f4 fceb 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80133ee:	203d      	movs	r0, #61	; 0x3d
 80133f0:	f7f4 fd32 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 80133f4:	b00d      	add	sp, #52	; 0x34
 80133f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133f8:	40028000 	.word	0x40028000
 80133fc:	40020800 	.word	0x40020800
 8013400:	40020000 	.word	0x40020000
 8013404:	40020400 	.word	0x40020400
 8013408:	40021800 	.word	0x40021800

0801340c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 801340c:	4b01      	ldr	r3, [pc, #4]	; (8013414 <HAL_ETH_RxCpltCallback+0x8>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	f001 b8b6 	b.w	8014580 <osSemaphoreRelease>
 8013414:	2000605c 	.word	0x2000605c

08013418 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013418:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801341a:	4604      	mov	r4, r0
{
 801341c:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801341e:	2800      	cmp	r0, #0
 8013420:	f000 809e 	beq.w	8013560 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8013424:	4d52      	ldr	r5, [pc, #328]	; (8013570 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 8013426:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013428:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801342c:	4b51      	ldr	r3, [pc, #324]	; (8013574 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 801342e:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8013430:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8013432:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 8013436:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801343a:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 801343c:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 801343e:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8013440:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013444:	494c      	ldr	r1, [pc, #304]	; (8013578 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 8013446:	4a4d      	ldr	r2, [pc, #308]	; (801357c <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8013448:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 801344a:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801344c:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801344e:	494c      	ldr	r1, [pc, #304]	; (8013580 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8013450:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013454:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 8013456:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013458:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 801345c:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013460:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013464:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013468:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 801346a:	4042      	eors	r2, r0
 801346c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013470:	404a      	eors	r2, r1
 8013472:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8013476:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 801347a:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 801347e:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013482:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801348a:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 801348c:	404b      	eors	r3, r1
 801348e:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013496:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 801349a:	ab01      	add	r3, sp, #4
 801349c:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801349e:	f7f6 fb0f 	bl	8009ac0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80134a2:	b928      	cbnz	r0, 80134b0 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80134a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80134a8:	f043 0304 	orr.w	r3, r3, #4
 80134ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80134b0:	2304      	movs	r3, #4
 80134b2:	4a34      	ldr	r2, [pc, #208]	; (8013584 <ethernetif_init+0x16c>)
 80134b4:	4934      	ldr	r1, [pc, #208]	; (8013588 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 80134b6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80134b8:	482d      	ldr	r0, [pc, #180]	; (8013570 <ethernetif_init+0x158>)
 80134ba:	f7f6 f8d5 	bl	8009668 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80134be:	2304      	movs	r3, #4
 80134c0:	4a32      	ldr	r2, [pc, #200]	; (801358c <ethernetif_init+0x174>)
 80134c2:	4933      	ldr	r1, [pc, #204]	; (8013590 <ethernetif_init+0x178>)
 80134c4:	482a      	ldr	r0, [pc, #168]	; (8013570 <ethernetif_init+0x158>)
 80134c6:	f7f6 f915 	bl	80096f4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80134ca:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80134cc:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80134ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 80134d2:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80134d6:	4e2f      	ldr	r6, [pc, #188]	; (8013594 <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80134d8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80134dc:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80134e0:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80134e2:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80134e4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80134e8:	7858      	ldrb	r0, [r3, #1]
 80134ea:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80134ee:	7898      	ldrb	r0, [r3, #2]
 80134f0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80134f4:	78d8      	ldrb	r0, [r3, #3]
 80134f6:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80134fa:	7918      	ldrb	r0, [r3, #4]
 80134fc:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013500:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013502:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 8013504:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013506:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013508:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801350c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8013510:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8013514:	f000 ffe2 	bl	80144dc <osSemaphoreCreate>
 8013518:	4b1f      	ldr	r3, [pc, #124]	; (8013598 <ethernetif_init+0x180>)
 801351a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801351c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801351e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013520:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8013528:	4621      	mov	r1, r4
 801352a:	a805      	add	r0, sp, #20
 801352c:	f000 ff1e 	bl	801436c <osThreadCreate>
  HAL_ETH_Start(&heth);
 8013530:	480f      	ldr	r0, [pc, #60]	; (8013570 <ethernetif_init+0x158>)
 8013532:	f7f6 fc1b 	bl	8009d6c <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8013536:	466a      	mov	r2, sp
 8013538:	211d      	movs	r1, #29
 801353a:	480d      	ldr	r0, [pc, #52]	; (8013570 <ethernetif_init+0x158>)
 801353c:	f7f6 fa2e 	bl	800999c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8013540:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013542:	211d      	movs	r1, #29
 8013544:	480a      	ldr	r0, [pc, #40]	; (8013570 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 8013546:	f042 020b 	orr.w	r2, r2, #11
 801354a:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801354c:	f7f6 fa70 	bl	8009a30 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8013550:	466a      	mov	r2, sp
 8013552:	211d      	movs	r1, #29
 8013554:	4806      	ldr	r0, [pc, #24]	; (8013570 <ethernetif_init+0x158>)
 8013556:	f7f6 fa21 	bl	800999c <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 801355a:	4638      	mov	r0, r7
 801355c:	b00d      	add	sp, #52	; 0x34
 801355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013560:	4b0e      	ldr	r3, [pc, #56]	; (801359c <ethernetif_init+0x184>)
 8013562:	f240 223a 	movw	r2, #570	; 0x23a
 8013566:	490e      	ldr	r1, [pc, #56]	; (80135a0 <ethernetif_init+0x188>)
 8013568:	480e      	ldr	r0, [pc, #56]	; (80135a4 <ethernetif_init+0x18c>)
 801356a:	f010 fecb 	bl	8024304 <iprintf>
 801356e:	e759      	b.n	8013424 <ethernetif_init+0xc>
 8013570:	20006014 	.word	0x20006014
 8013574:	1ff0f000 	.word	0x1ff0f000
 8013578:	080215b1 	.word	0x080215b1
 801357c:	40028000 	.word	0x40028000
 8013580:	0801311d 	.word	0x0801311d
 8013584:	20004844 	.word	0x20004844
 8013588:	20002ff4 	.word	0x20002ff4
 801358c:	20003074 	.word	0x20003074
 8013590:	20002f74 	.word	0x20002f74
 8013594:	08028510 	.word	0x08028510
 8013598:	2000605c 	.word	0x2000605c
 801359c:	0802b76c 	.word	0x0802b76c
 80135a0:	0802b788 	.word	0x0802b788
 80135a4:	08028ab4 	.word	0x08028ab4

080135a8 <sys_now>:
 80135a8:	f7f3 bfb4 	b.w	8007514 <HAL_GetTick>

080135ac <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80135ac:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 80135ae:	2300      	movs	r3, #0
{
 80135b0:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80135b2:	4d0f      	ldr	r5, [pc, #60]	; (80135f0 <ethernetif_set_link+0x44>)
{
 80135b4:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80135b6:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 80135b8:	e003      	b.n	80135c2 <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80135ba:	b1b3      	cbz	r3, 80135ea <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80135bc:	20c8      	movs	r0, #200	; 0xc8
 80135be:	f000 ff07 	bl	80143d0 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80135c2:	aa01      	add	r2, sp, #4
 80135c4:	2101      	movs	r1, #1
 80135c6:	4628      	mov	r0, r5
 80135c8:	f7f6 f9e8 	bl	800999c <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80135cc:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 80135ce:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80135d0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 80135d4:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80135d8:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80135da:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80135dc:	d4ed      	bmi.n	80135ba <ethernetif_set_link+0xe>
 80135de:	b113      	cbz	r3, 80135e6 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 80135e0:	f006 fa5c 	bl	8019a9c <netif_set_link_up>
 80135e4:	e7ea      	b.n	80135bc <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80135e6:	0753      	lsls	r3, r2, #29
 80135e8:	d5e8      	bpl.n	80135bc <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 80135ea:	f006 fa7d 	bl	8019ae8 <netif_set_link_down>
 80135ee:	e7e5      	b.n	80135bc <ethernetif_set_link+0x10>
 80135f0:	20006014 	.word	0x20006014

080135f4 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80135f4:	4770      	bx	lr
 80135f6:	bf00      	nop

080135f8 <ethernetif_update_config>:
{
 80135f8:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 80135fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 80135fe:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8013600:	2100      	movs	r1, #0
{
 8013602:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8013604:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8013606:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8013608:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 801360a:	d538      	bpl.n	801367e <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801360c:	4c32      	ldr	r4, [pc, #200]	; (80136d8 <ethernetif_update_config+0xe0>)
 801360e:	6863      	ldr	r3, [r4, #4]
 8013610:	b9e3      	cbnz	r3, 801364c <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8013612:	68a3      	ldr	r3, [r4, #8]
 8013614:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8013618:	d140      	bne.n	801369c <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801361a:	68e2      	ldr	r2, [r4, #12]
 801361c:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8013620:	d135      	bne.n	801368e <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8013622:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8013624:	08d2      	lsrs	r2, r2, #3
 8013626:	2100      	movs	r1, #0
 8013628:	482b      	ldr	r0, [pc, #172]	; (80136d8 <ethernetif_update_config+0xe0>)
 801362a:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 801362e:	b292      	uxth	r2, r2
 8013630:	f7f6 f9fe 	bl	8009a30 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8013634:	2100      	movs	r1, #0
 8013636:	4828      	ldr	r0, [pc, #160]	; (80136d8 <ethernetif_update_config+0xe0>)
 8013638:	f7f6 fc32 	bl	8009ea0 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 801363c:	4826      	ldr	r0, [pc, #152]	; (80136d8 <ethernetif_update_config+0xe0>)
 801363e:	f7f6 fb95 	bl	8009d6c <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8013642:	4628      	mov	r0, r5
 8013644:	f7ff ffd6 	bl	80135f4 <ethernetif_notify_conn_changed>
}
 8013648:	b003      	add	sp, #12
 801364a:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 801364c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013650:	4620      	mov	r0, r4
 8013652:	f7f6 f9ed 	bl	8009a30 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8013656:	f7f3 ff5d 	bl	8007514 <HAL_GetTick>
 801365a:	9000      	str	r0, [sp, #0]
 801365c:	e002      	b.n	8013664 <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801365e:	9b01      	ldr	r3, [sp, #4]
 8013660:	069a      	lsls	r2, r3, #26
 8013662:	d425      	bmi.n	80136b0 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8013664:	aa01      	add	r2, sp, #4
 8013666:	2101      	movs	r1, #1
 8013668:	4620      	mov	r0, r4
 801366a:	f7f6 f997 	bl	800999c <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 801366e:	f7f3 ff51 	bl	8007514 <HAL_GetTick>
 8013672:	9b00      	ldr	r3, [sp, #0]
 8013674:	1ac3      	subs	r3, r0, r3
 8013676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801367a:	d9f0      	bls.n	801365e <ethernetif_update_config+0x66>
 801367c:	e7c9      	b.n	8013612 <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 801367e:	4816      	ldr	r0, [pc, #88]	; (80136d8 <ethernetif_update_config+0xe0>)
 8013680:	f7f6 fbc0 	bl	8009e04 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8013684:	4628      	mov	r0, r5
 8013686:	f7ff ffb5 	bl	80135f4 <ethernetif_notify_conn_changed>
}
 801368a:	b003      	add	sp, #12
 801368c:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801368e:	f240 21e3 	movw	r1, #739	; 0x2e3
 8013692:	4812      	ldr	r0, [pc, #72]	; (80136dc <ethernetif_update_config+0xe4>)
 8013694:	f7f0 ffce 	bl	8004634 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8013698:	68e2      	ldr	r2, [r4, #12]
 801369a:	e7c2      	b.n	8013622 <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801369c:	f240 21e2 	movw	r1, #738	; 0x2e2
 80136a0:	480e      	ldr	r0, [pc, #56]	; (80136dc <ethernetif_update_config+0xe4>)
 80136a2:	f7f0 ffc7 	bl	8004634 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80136a6:	68e2      	ldr	r2, [r4, #12]
 80136a8:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80136ac:	d0b9      	beq.n	8013622 <ethernetif_update_config+0x2a>
 80136ae:	e7ee      	b.n	801368e <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80136b0:	aa01      	add	r2, sp, #4
 80136b2:	2110      	movs	r1, #16
 80136b4:	4808      	ldr	r0, [pc, #32]	; (80136d8 <ethernetif_update_config+0xe0>)
 80136b6:	f7f6 f971 	bl	800999c <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80136ba:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80136bc:	f013 0204 	ands.w	r2, r3, #4
 80136c0:	bf18      	it	ne
 80136c2:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 80136c6:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 80136c8:	bf4c      	ite	mi
 80136ca:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 80136cc:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 80136d0:	60e2      	str	r2, [r4, #12]
 80136d2:	60a3      	str	r3, [r4, #8]
 80136d4:	e7ae      	b.n	8013634 <ethernetif_update_config+0x3c>
 80136d6:	bf00      	nop
 80136d8:	20006014 	.word	0x20006014
 80136dc:	0802b76c 	.word	0x0802b76c

080136e0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80136e0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80136e4:	b183      	cbz	r3, 8013708 <USBD_CDC_EP0_RxReady+0x28>
{
 80136e6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80136e8:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80136ec:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80136f0:	28ff      	cmp	r0, #255	; 0xff
 80136f2:	d007      	beq.n	8013704 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80136f4:	689b      	ldr	r3, [r3, #8]
 80136f6:	4621      	mov	r1, r4
 80136f8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80136fc:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80136fe:	23ff      	movs	r3, #255	; 0xff
 8013700:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8013704:	2000      	movs	r0, #0
 8013706:	bd10      	pop	{r4, pc}
 8013708:	2000      	movs	r0, #0
 801370a:	4770      	bx	lr

0801370c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801370c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801370e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8013710:	4801      	ldr	r0, [pc, #4]	; (8013718 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013712:	801a      	strh	r2, [r3, #0]
}
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop
 8013718:	20000330 	.word	0x20000330

0801371c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801371c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801371e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8013720:	4801      	ldr	r0, [pc, #4]	; (8013728 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013722:	801a      	strh	r2, [r3, #0]
}
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop
 8013728:	20000374 	.word	0x20000374

0801372c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801372c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801372e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8013730:	4801      	ldr	r0, [pc, #4]	; (8013738 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013732:	801a      	strh	r2, [r3, #0]
}
 8013734:	4770      	bx	lr
 8013736:	bf00      	nop
 8013738:	200003c4 	.word	0x200003c4

0801373c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801373c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801373e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8013740:	4801      	ldr	r0, [pc, #4]	; (8013748 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013742:	801a      	strh	r2, [r3, #0]
}
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	200003b8 	.word	0x200003b8

0801374c <USBD_CDC_DataOut>:
{
 801374c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801374e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8013752:	b17d      	cbz	r5, 8013774 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013754:	4604      	mov	r4, r0
 8013756:	f00f fb7b 	bl	8022e50 <USBD_LL_GetRxDataSize>
 801375a:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801375c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8013760:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8013764:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8013768:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801376a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801376e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8013770:	2000      	movs	r0, #0
}
 8013772:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8013774:	2003      	movs	r0, #3
}
 8013776:	bd38      	pop	{r3, r4, r5, pc}

08013778 <USBD_CDC_DataIn>:
{
 8013778:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 801377a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 801377e:	b34d      	cbz	r5, 80137d4 <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013780:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8013784:	4686      	mov	lr, r0
 8013786:	460a      	mov	r2, r1
 8013788:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 801378c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8013790:	b15b      	cbz	r3, 80137aa <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013792:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8013796:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 801379a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 801379e:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80137a0:	fbb3 f6f4 	udiv	r6, r3, r4
 80137a4:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80137a8:	b164      	cbz	r4, 80137c4 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80137aa:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80137ae:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80137b0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80137b4:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 80137b8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 80137ba:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80137be:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80137c0:	4620      	mov	r0, r4
}
 80137c2:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80137c4:	4623      	mov	r3, r4
 80137c6:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 80137c8:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80137cc:	f00f fb24 	bl	8022e18 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 80137d0:	4620      	mov	r0, r4
}
 80137d2:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 80137d4:	2003      	movs	r0, #3
}
 80137d6:	bd70      	pop	{r4, r5, r6, pc}

080137d8 <USBD_CDC_Setup>:
{
 80137d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137da:	f891 c000 	ldrb.w	ip, [r1]
{
 80137de:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 80137e0:	2300      	movs	r3, #0
{
 80137e2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137e4:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 80137e8:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80137ea:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 80137ee:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 80137f2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137f6:	d01c      	beq.n	8013832 <USBD_CDC_Setup+0x5a>
 80137f8:	2e20      	cmp	r6, #32
 80137fa:	d112      	bne.n	8013822 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 80137fc:	88ca      	ldrh	r2, [r1, #6]
 80137fe:	2a00      	cmp	r2, #0
 8013800:	d036      	beq.n	8013870 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8013802:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8013806:	d055      	beq.n	80138b4 <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8013808:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801380a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801380e:	4639      	mov	r1, r7
 8013810:	7860      	ldrb	r0, [r4, #1]
 8013812:	689b      	ldr	r3, [r3, #8]
 8013814:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013816:	88e2      	ldrh	r2, [r4, #6]
 8013818:	4639      	mov	r1, r7
 801381a:	4628      	mov	r0, r5
 801381c:	f000 fd2c 	bl	8014278 <USBD_CtlSendData>
 8013820:	e004      	b.n	801382c <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 8013822:	4621      	mov	r1, r4
 8013824:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8013826:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8013828:	f000 fcf0 	bl	801420c <USBD_CtlError>
}
 801382c:	4630      	mov	r0, r6
 801382e:	b003      	add	sp, #12
 8013830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8013832:	784b      	ldrb	r3, [r1, #1]
 8013834:	2b0b      	cmp	r3, #11
 8013836:	d8f4      	bhi.n	8013822 <USBD_CDC_Setup+0x4a>
 8013838:	a201      	add	r2, pc, #4	; (adr r2, 8013840 <USBD_CDC_Setup+0x68>)
 801383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801383e:	bf00      	nop
 8013840:	08013883 	.word	0x08013883
 8013844:	0801382d 	.word	0x0801382d
 8013848:	08013823 	.word	0x08013823
 801384c:	08013823 	.word	0x08013823
 8013850:	08013823 	.word	0x08013823
 8013854:	08013823 	.word	0x08013823
 8013858:	08013823 	.word	0x08013823
 801385c:	08013823 	.word	0x08013823
 8013860:	08013823 	.word	0x08013823
 8013864:	08013823 	.word	0x08013823
 8013868:	080138a1 	.word	0x080138a1
 801386c:	08013897 	.word	0x08013897
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013870:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8013874:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013876:	7848      	ldrb	r0, [r1, #1]
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	4798      	blx	r3
}
 801387c:	4630      	mov	r0, r6
 801387e:	b003      	add	sp, #12
 8013880:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013882:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013886:	2a03      	cmp	r2, #3
 8013888:	d01e      	beq.n	80138c8 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 801388a:	4621      	mov	r1, r4
 801388c:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 801388e:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8013890:	f000 fcbc 	bl	801420c <USBD_CtlError>
        ret = USBD_FAIL;
 8013894:	e7ca      	b.n	801382c <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013896:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801389a:	2b03      	cmp	r3, #3
 801389c:	d0c6      	beq.n	801382c <USBD_CDC_Setup+0x54>
 801389e:	e7f4      	b.n	801388a <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80138a4:	2b03      	cmp	r3, #3
 80138a6:	d1f0      	bne.n	801388a <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80138a8:	2201      	movs	r2, #1
 80138aa:	f10d 0105 	add.w	r1, sp, #5
 80138ae:	f000 fce3 	bl	8014278 <USBD_CtlSendData>
 80138b2:	e7bb      	b.n	801382c <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 80138b4:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 80138b6:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 80138b8:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 80138bc:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80138c0:	4639      	mov	r1, r7
 80138c2:	f000 fcf1 	bl	80142a8 <USBD_CtlPrepareRx>
 80138c6:	e7b1      	b.n	801382c <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80138c8:	2202      	movs	r2, #2
 80138ca:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 80138ce:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80138d0:	f000 fcd2 	bl	8014278 <USBD_CtlSendData>
 80138d4:	e7aa      	b.n	801382c <USBD_CDC_Setup+0x54>
 80138d6:	bf00      	nop

080138d8 <USBD_CDC_DeInit>:
{
 80138d8:	b538      	push	{r3, r4, r5, lr}
 80138da:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80138dc:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80138de:	2181      	movs	r1, #129	; 0x81
 80138e0:	f00f fa4e 	bl	8022d80 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80138e4:	2101      	movs	r1, #1
 80138e6:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80138e8:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80138ea:	f00f fa49 	bl	8022d80 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80138ee:	2182      	movs	r1, #130	; 0x82
 80138f0:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80138f2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80138f6:	f00f fa43 	bl	8022d80 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80138fa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80138fe:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8013900:	b14b      	cbz	r3, 8013916 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013902:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801390a:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 801390e:	f00f fd1b 	bl	8023348 <free>
    pdev->pClassData = NULL;
 8013912:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8013916:	2000      	movs	r0, #0
 8013918:	bd38      	pop	{r3, r4, r5, pc}
 801391a:	bf00      	nop

0801391c <USBD_CDC_Init>:
{
 801391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013920:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013922:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013926:	f00f fd07 	bl	8023338 <malloc>
  if (hcdc == NULL)
 801392a:	4605      	mov	r5, r0
 801392c:	2800      	cmp	r0, #0
 801392e:	d04c      	beq.n	80139ca <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013930:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 8013932:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013936:	b393      	cbz	r3, 801399e <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013938:	2340      	movs	r3, #64	; 0x40
 801393a:	2202      	movs	r2, #2
 801393c:	2181      	movs	r1, #129	; 0x81
 801393e:	4620      	mov	r0, r4
 8013940:	f00f fa0c 	bl	8022d5c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013944:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013946:	2340      	movs	r3, #64	; 0x40
 8013948:	4631      	mov	r1, r6
 801394a:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801394c:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801394e:	4620      	mov	r0, r4
 8013950:	f00f fa04 	bl	8022d5c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013954:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013956:	2203      	movs	r2, #3
 8013958:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801395a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801395e:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013960:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013964:	2308      	movs	r3, #8
 8013966:	f00f f9f9 	bl	8022d5c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801396a:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801396e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8013972:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013974:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801397c:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 801397e:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8013982:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013986:	b9ae      	cbnz	r6, 80139b4 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013988:	f44f 7300 	mov.w	r3, #512	; 0x200
 801398c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8013990:	4641      	mov	r1, r8
 8013992:	4620      	mov	r0, r4
 8013994:	f00f fa4e 	bl	8022e34 <USBD_LL_PrepareReceive>
}
 8013998:	4630      	mov	r0, r6
 801399a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801399e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139a2:	2202      	movs	r2, #2
 80139a4:	2181      	movs	r1, #129	; 0x81
 80139a6:	4620      	mov	r0, r4
 80139a8:	f00f f9d8 	bl	8022d5c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80139ac:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80139ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139b2:	e7c9      	b.n	8013948 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 80139b4:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80139b6:	2340      	movs	r3, #64	; 0x40
 80139b8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80139bc:	4641      	mov	r1, r8
 80139be:	4620      	mov	r0, r4
 80139c0:	f00f fa38 	bl	8022e34 <USBD_LL_PrepareReceive>
}
 80139c4:	4630      	mov	r0, r6
 80139c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 80139ca:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 80139cc:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80139d0:	e7e2      	b.n	8013998 <USBD_CDC_Init+0x7c>
 80139d2:	bf00      	nop

080139d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80139d4:	4603      	mov	r3, r0
  if (fops == NULL)
 80139d6:	b119      	cbz	r1, 80139e0 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 80139d8:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 80139da:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 80139de:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 80139e0:	2003      	movs	r0, #3
}
 80139e2:	4770      	bx	lr

080139e4 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80139e4:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 80139e6:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80139e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 80139ec:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80139f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop

080139f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80139f8:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 80139fa:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80139fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a00:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop

08013a08 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a08:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8013a0c:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8013a0e:	b19a      	cbz	r2, 8013a38 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a10:	7c04      	ldrb	r4, [r0, #16]
 8013a12:	b144      	cbz	r4, 8013a26 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013a14:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013a16:	2340      	movs	r3, #64	; 0x40
 8013a18:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	f00f fa09 	bl	8022e34 <USBD_LL_PrepareReceive>
}
 8013a22:	4620      	mov	r0, r4
 8013a24:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a2a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8013a2e:	2101      	movs	r1, #1
 8013a30:	f00f fa00 	bl	8022e34 <USBD_LL_PrepareReceive>
}
 8013a34:	4620      	mov	r0, r4
 8013a36:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8013a38:	2403      	movs	r4, #3
}
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	bd10      	pop	{r4, pc}
 8013a3e:	bf00      	nop

08013a40 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a40:	b1a0      	cbz	r0, 8013a6c <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8013a42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013a46:	b113      	cbz	r3, 8013a4e <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8013a4e:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8013a52:	b113      	cbz	r3, 8013a5a <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a5a:	b109      	cbz	r1, 8013a60 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8013a5c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a60:	2301      	movs	r3, #1
  pdev->id = id;
 8013a62:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013a68:	f00f b938 	b.w	8022cdc <USBD_LL_Init>

  return ret;
}
 8013a6c:	2003      	movs	r0, #3
 8013a6e:	4770      	bx	lr

08013a70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013a70:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8013a72:	2400      	movs	r4, #0
{
 8013a74:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8013a76:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8013a7a:	b159      	cbz	r1, 8013a94 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013a7c:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8013a7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8013a80:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8013a84:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8013a88:	4798      	blx	r3
 8013a8a:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8013a8e:	4620      	mov	r0, r4
 8013a90:	b003      	add	sp, #12
 8013a92:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8013a94:	2403      	movs	r4, #3
}
 8013a96:	4620      	mov	r0, r4
 8013a98:	b003      	add	sp, #12
 8013a9a:	bd30      	pop	{r4, r5, pc}

08013a9c <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013a9c:	f00f b950 	b.w	8022d40 <USBD_LL_Start>

08013aa0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8013aa0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013aa4:	b10b      	cbz	r3, 8013aaa <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	4718      	bx	r3
  }

  return ret;
}
 8013aaa:	2003      	movs	r0, #3
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop

08013ab0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ab0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013ab2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013ab6:	b10b      	cbz	r3, 8013abc <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	4798      	blx	r3
  }

  return USBD_OK;
}
 8013abc:	2000      	movs	r0, #0
 8013abe:	bd08      	pop	{r3, pc}

08013ac0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013ac0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ac2:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8013ac6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f000 fb93 	bl	80141f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ace:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8013ad0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8013ad4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8013ad8:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8013adc:	f001 031f 	and.w	r3, r1, #31
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	d009      	beq.n	8013af8 <USBD_LL_SetupStage+0x38>
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	d013      	beq.n	8013b10 <USBD_LL_SetupStage+0x50>
 8013ae8:	b163      	cbz	r3, 8013b04 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013aea:	4620      	mov	r0, r4
 8013aec:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8013af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013af4:	f00f b952 	b.w	8022d9c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013af8:	4629      	mov	r1, r5
 8013afa:	4620      	mov	r0, r4
}
 8013afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013b00:	f000 ba9e 	b.w	8014040 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013b04:	4629      	mov	r1, r5
 8013b06:	4620      	mov	r0, r4
}
 8013b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013b0c:	f000 b8fa 	b.w	8013d04 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013b10:	4629      	mov	r1, r5
 8013b12:	4620      	mov	r0, r4
}
 8013b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013b18:	f000 baca 	b.w	80140b0 <USBD_StdEPReq>

08013b1c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013b20:	b939      	cbnz	r1, 8013b32 <USBD_LL_DataOutStage+0x16>
 8013b22:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013b24:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8013b28:	460c      	mov	r4, r1
 8013b2a:	2a03      	cmp	r2, #3
 8013b2c:	d00e      	beq.n	8013b4c <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8013b2e:	2000      	movs	r0, #0
}
 8013b30:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8013b32:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013b36:	699b      	ldr	r3, [r3, #24]
 8013b38:	b133      	cbz	r3, 8013b48 <USBD_LL_DataOutStage+0x2c>
 8013b3a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013b3e:	2a03      	cmp	r2, #3
 8013b40:	d102      	bne.n	8013b48 <USBD_LL_DataOutStage+0x2c>
}
 8013b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013b46:	4718      	bx	r3
    return USBD_FAIL;
 8013b48:	2003      	movs	r0, #3
}
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8013b4c:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8013b50:	4291      	cmp	r1, r2
 8013b52:	d80d      	bhi.n	8013b70 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013b54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013b58:	691b      	ldr	r3, [r3, #16]
 8013b5a:	b123      	cbz	r3, 8013b66 <USBD_LL_DataOutStage+0x4a>
 8013b5c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013b60:	2a03      	cmp	r2, #3
 8013b62:	d100      	bne.n	8013b66 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8013b64:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8013b66:	4628      	mov	r0, r5
 8013b68:	f000 fbb6 	bl	80142d8 <USBD_CtlSendStatus>
  return USBD_OK;
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	e7df      	b.n	8013b30 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8013b70:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013b72:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8013b74:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013b78:	bf28      	it	cs
 8013b7a:	460a      	movcs	r2, r1
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	f000 fba1 	bl	80142c4 <USBD_CtlContinueRx>
  return USBD_OK;
 8013b82:	4620      	mov	r0, r4
}
 8013b84:	bd70      	pop	{r4, r5, r6, pc}
 8013b86:	bf00      	nop

08013b88 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b88:	b570      	push	{r4, r5, r6, lr}
 8013b8a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013b8c:	b949      	cbnz	r1, 8013ba2 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b8e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d012      	beq.n	8013bbc <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013b96:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d027      	beq.n	8013bee <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8013b9e:	2000      	movs	r0, #0
}
 8013ba0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8013ba2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013ba6:	695b      	ldr	r3, [r3, #20]
 8013ba8:	b133      	cbz	r3, 8013bb8 <USBD_LL_DataInStage+0x30>
 8013baa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013bae:	2a03      	cmp	r2, #3
 8013bb0:	d102      	bne.n	8013bb8 <USBD_LL_DataInStage+0x30>
}
 8013bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013bb6:	4718      	bx	r3
    return USBD_FAIL;
 8013bb8:	2003      	movs	r0, #3
}
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8013bbc:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8013bc0:	460d      	mov	r5, r1
 8013bc2:	42b3      	cmp	r3, r6
 8013bc4:	d818      	bhi.n	8013bf8 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8013bc6:	d027      	beq.n	8013c18 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013bc8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013bcc:	68db      	ldr	r3, [r3, #12]
 8013bce:	b11b      	cbz	r3, 8013bd8 <USBD_LL_DataInStage+0x50>
 8013bd0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8013bd4:	2a03      	cmp	r2, #3
 8013bd6:	d01c      	beq.n	8013c12 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013bd8:	2180      	movs	r1, #128	; 0x80
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f00f f8de 	bl	8022d9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013be0:	4620      	mov	r0, r4
 8013be2:	f000 fb85 	bl	80142f0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8013be6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d1d7      	bne.n	8013b9e <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8013bee:	2300      	movs	r3, #0
  return USBD_OK;
 8013bf0:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8013bf2:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8013bf6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8013bf8:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013bfa:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8013bfc:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013bfe:	461a      	mov	r2, r3
 8013c00:	f000 fb48 	bl	8014294 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c04:	462b      	mov	r3, r5
 8013c06:	462a      	mov	r2, r5
 8013c08:	4629      	mov	r1, r5
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f00f f912 	bl	8022e34 <USBD_LL_PrepareReceive>
 8013c10:	e7c1      	b.n	8013b96 <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8013c12:	4620      	mov	r0, r4
 8013c14:	4798      	blx	r3
 8013c16:	e7df      	b.n	8013bd8 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8013c18:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8013c1a:	4293      	cmp	r3, r2
 8013c1c:	d8d4      	bhi.n	8013bc8 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8013c1e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d2d0      	bcs.n	8013bc8 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013c26:	460a      	mov	r2, r1
 8013c28:	f000 fb34 	bl	8014294 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	462a      	mov	r2, r5
 8013c30:	4629      	mov	r1, r5
 8013c32:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8013c34:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c38:	f00f f8fc 	bl	8022e34 <USBD_LL_PrepareReceive>
 8013c3c:	e7ab      	b.n	8013b96 <USBD_LL_DataInStage+0xe>
 8013c3e:	bf00      	nop

08013c40 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c40:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c42:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8013c44:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8013c48:	b570      	push	{r4, r5, r6, lr}
 8013c4a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c4c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c50:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8013c54:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8013c56:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8013c5a:	b11b      	cbz	r3, 8013c64 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013c5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c64:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c66:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013c68:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	462b      	mov	r3, r5
 8013c6e:	4611      	mov	r1, r2
 8013c70:	f00f f874 	bl	8022d5c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c74:	462b      	mov	r3, r5
 8013c76:	2200      	movs	r2, #0
 8013c78:	2180      	movs	r1, #128	; 0x80
 8013c7a:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013c7c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c80:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c84:	f00f f86a 	bl	8022d5c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8013c88:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c8a:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c8c:	6225      	str	r5, [r4, #32]
}
 8013c8e:	bd70      	pop	{r4, r5, r6, pc}

08013c90 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013c90:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8013c92:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8013c94:	7419      	strb	r1, [r3, #16]
}
 8013c96:	4770      	bx	lr

08013c98 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013c98:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013c9a:	2104      	movs	r1, #4

  return USBD_OK;
}
 8013c9c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8013c9e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ca2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8013ca6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8013caa:	4770      	bx	lr

08013cac <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013cac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013cb0:	2b04      	cmp	r3, #4
 8013cb2:	d103      	bne.n	8013cbc <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013cb4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8013cb8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	4770      	bx	lr

08013cc0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cc0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013cc4:	2a03      	cmp	r2, #3
 8013cc6:	d001      	beq.n	8013ccc <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8013cc8:	2000      	movs	r0, #0
 8013cca:	4770      	bx	lr
{
 8013ccc:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8013cce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013cd2:	69db      	ldr	r3, [r3, #28]
 8013cd4:	b103      	cbz	r3, 8013cd8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8013cd6:	4798      	blx	r3
}
 8013cd8:	2000      	movs	r0, #0
 8013cda:	bd08      	pop	{r3, pc}

08013cdc <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8013cdc:	2000      	movs	r0, #0
 8013cde:	4770      	bx	lr

08013ce0 <USBD_LL_IsoOUTIncomplete>:
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	4770      	bx	lr

08013ce4 <USBD_LL_DevConnected>:
 8013ce4:	2000      	movs	r0, #0
 8013ce6:	4770      	bx	lr

08013ce8 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ce8:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8013cea:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013cee:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8013cf2:	b12a      	cbz	r2, 8013d00 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013cf4:	6852      	ldr	r2, [r2, #4]
 8013cf6:	7901      	ldrb	r1, [r0, #4]
{
 8013cf8:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013cfa:	4790      	blx	r2
  }

  return USBD_OK;
}
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	bd08      	pop	{r3, pc}
 8013d00:	2000      	movs	r0, #0
 8013d02:	4770      	bx	lr

08013d04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	780c      	ldrb	r4, [r1, #0]
 8013d08:	b082      	sub	sp, #8
 8013d0a:	460e      	mov	r6, r1
 8013d0c:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d0e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8013d12:	2c20      	cmp	r4, #32
 8013d14:	d00e      	beq.n	8013d34 <USBD_StdDevReq+0x30>
 8013d16:	2c40      	cmp	r4, #64	; 0x40
 8013d18:	d00c      	beq.n	8013d34 <USBD_StdDevReq+0x30>
 8013d1a:	b1a4      	cbz	r4, 8013d46 <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d1c:	2180      	movs	r1, #128	; 0x80
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f00f f83c 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013d24:	2100      	movs	r1, #0
 8013d26:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8013d28:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8013d2a:	f00f f837 	bl	8022d9c <USBD_LL_StallEP>
}
 8013d2e:	4620      	mov	r0, r4
 8013d30:	b002      	add	sp, #8
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013d34:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8013d38:	4631      	mov	r1, r6
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	689b      	ldr	r3, [r3, #8]
}
 8013d3e:	b002      	add	sp, #8
 8013d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013d44:	4718      	bx	r3
    switch (req->bRequest)
 8013d46:	784b      	ldrb	r3, [r1, #1]
 8013d48:	2b09      	cmp	r3, #9
 8013d4a:	d8e7      	bhi.n	8013d1c <USBD_StdDevReq+0x18>
 8013d4c:	a201      	add	r2, pc, #4	; (adr r2, 8013d54 <USBD_StdDevReq+0x50>)
 8013d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d52:	bf00      	nop
 8013d54:	08013db3 	.word	0x08013db3
 8013d58:	08013de1 	.word	0x08013de1
 8013d5c:	08013d1d 	.word	0x08013d1d
 8013d60:	08013dff 	.word	0x08013dff
 8013d64:	08013d1d 	.word	0x08013d1d
 8013d68:	08013e07 	.word	0x08013e07
 8013d6c:	08013e3f 	.word	0x08013e3f
 8013d70:	08013d1d 	.word	0x08013d1d
 8013d74:	08013e63 	.word	0x08013e63
 8013d78:	08013d7d 	.word	0x08013d7d
  cfgidx = (uint8_t)(req->wValue);
 8013d7c:	7889      	ldrb	r1, [r1, #2]
 8013d7e:	4eaa      	ldr	r6, [pc, #680]	; (8014028 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d80:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8013d82:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d84:	f200 8146 	bhi.w	8014014 <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8013d88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013d8c:	2b02      	cmp	r3, #2
 8013d8e:	f000 8130 	beq.w	8013ff2 <USBD_StdDevReq+0x2ee>
 8013d92:	2b03      	cmp	r3, #3
 8013d94:	f000 810c 	beq.w	8013fb0 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d98:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8013d9a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d9c:	f00e fffe 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013da0:	2100      	movs	r1, #0
 8013da2:	4628      	mov	r0, r5
 8013da4:	f00e fffa 	bl	8022d9c <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013da8:	7831      	ldrb	r1, [r6, #0]
 8013daa:	4628      	mov	r0, r5
 8013dac:	f7ff fe80 	bl	8013ab0 <USBD_ClrClassConfig>
    break;
 8013db0:	e7bd      	b.n	8013d2e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8013db2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013db6:	3a01      	subs	r2, #1
 8013db8:	2a02      	cmp	r2, #2
 8013dba:	d868      	bhi.n	8013e8e <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8013dbc:	88ca      	ldrh	r2, [r1, #6]
 8013dbe:	2a02      	cmp	r2, #2
 8013dc0:	d165      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013dc2:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8013dc4:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013dc8:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8013dca:	b10a      	cbz	r2, 8013dd0 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013dcc:	2203      	movs	r2, #3
 8013dce:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	f105 010c 	add.w	r1, r5, #12
 8013dd6:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8013dd8:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013dda:	f000 fa4d 	bl	8014278 <USBD_CtlSendData>
    break;
 8013dde:	e7a6      	b.n	8013d2e <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8013de0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013de4:	3b01      	subs	r3, #1
 8013de6:	2b02      	cmp	r3, #2
 8013de8:	d851      	bhi.n	8013e8e <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013dea:	884b      	ldrh	r3, [r1, #2]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d19e      	bne.n	8013d2e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8013df0:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8013df2:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8013df4:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013df8:	f000 fa6e 	bl	80142d8 <USBD_CtlSendStatus>
 8013dfc:	e797      	b.n	8013d2e <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013dfe:	884b      	ldrh	r3, [r1, #2]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d194      	bne.n	8013d2e <USBD_StdDevReq+0x2a>
 8013e04:	e7f5      	b.n	8013df2 <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013e06:	888b      	ldrh	r3, [r1, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d140      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
 8013e0c:	88cb      	ldrh	r3, [r1, #6]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d13d      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
 8013e12:	884e      	ldrh	r6, [r1, #2]
 8013e14:	2e7f      	cmp	r6, #127	; 0x7f
 8013e16:	d83a      	bhi.n	8013e8e <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013e1c:	2b03      	cmp	r3, #3
 8013e1e:	d036      	beq.n	8013e8e <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013e20:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8013e22:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013e26:	f00e ffe9 	bl	8022dfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013e2a:	4628      	mov	r0, r5
 8013e2c:	f000 fa54 	bl	80142d8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8013e30:	2e00      	cmp	r6, #0
 8013e32:	f040 80da 	bne.w	8013fea <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013e36:	2301      	movs	r3, #1
 8013e38:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013e3c:	e777      	b.n	8013d2e <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8013e3e:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8013e40:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8013e42:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8013e46:	0a13      	lsrs	r3, r2, #8
 8013e48:	3b01      	subs	r3, #1
 8013e4a:	2b0e      	cmp	r3, #14
 8013e4c:	d81f      	bhi.n	8013e8e <USBD_StdDevReq+0x18a>
 8013e4e:	e8df f003 	tbb	[pc, r3]
 8013e52:	6b77      	.short	0x6b77
 8013e54:	4f1e1e59 	.word	0x4f1e1e59
 8013e58:	1e1e1e43 	.word	0x1e1e1e43
 8013e5c:	1e1e1e1e 	.word	0x1e1e1e1e
 8013e60:	29          	.byte	0x29
 8013e61:	00          	.byte	0x00
  if (req->wLength != 1U)
 8013e62:	88ca      	ldrh	r2, [r1, #6]
 8013e64:	2a01      	cmp	r2, #1
 8013e66:	d112      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8013e68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013e6c:	2b02      	cmp	r3, #2
 8013e6e:	f200 8098 	bhi.w	8013fa2 <USBD_StdDevReq+0x29e>
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f43f af52 	beq.w	8013d1c <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8013e78:	4601      	mov	r1, r0
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013e80:	f000 f9fa 	bl	8014278 <USBD_CtlSendData>
      break;
 8013e84:	e753      	b.n	8013d2e <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013e86:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013e8a:	699b      	ldr	r3, [r3, #24]
 8013e8c:	b97b      	cbnz	r3, 8013eae <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e8e:	2180      	movs	r1, #128	; 0x80
 8013e90:	4628      	mov	r0, r5
 8013e92:	f00e ff83 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013e96:	2100      	movs	r1, #0
 8013e98:	4628      	mov	r0, r5
 8013e9a:	f00e ff7f 	bl	8022d9c <USBD_LL_StallEP>
}
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	b002      	add	sp, #8
 8013ea2:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013ea4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013ea8:	69db      	ldr	r3, [r3, #28]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d0ef      	beq.n	8013e8e <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013eae:	f10d 0106 	add.w	r1, sp, #6
 8013eb2:	7c28      	ldrb	r0, [r5, #16]
 8013eb4:	4798      	blx	r3
    if (req->wLength != 0U)
 8013eb6:	88f2      	ldrh	r2, [r6, #6]
 8013eb8:	2a00      	cmp	r2, #0
 8013eba:	d06e      	beq.n	8013f9a <USBD_StdDevReq+0x296>
      if (len != 0U)
 8013ebc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d0e4      	beq.n	8013e8e <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8013ec4:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8013ec6:	4601      	mov	r1, r0
 8013ec8:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8013eca:	bf28      	it	cs
 8013ecc:	461a      	movcs	r2, r3
 8013ece:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8013ed2:	f000 f9d1 	bl	8014278 <USBD_CtlSendData>
 8013ed6:	e72a      	b.n	8013d2e <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ed8:	7c03      	ldrb	r3, [r0, #16]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d1d7      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013ede:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013ee2:	f10d 0006 	add.w	r0, sp, #6
 8013ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013eea:	2307      	movs	r3, #7
 8013eec:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013eee:	e7e2      	b.n	8013eb6 <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ef0:	7c03      	ldrb	r3, [r0, #16]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d1cb      	bne.n	8013e8e <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013ef6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013efa:	f10d 0006 	add.w	r0, sp, #6
 8013efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f00:	4798      	blx	r3
  if (err != 0U)
 8013f02:	e7d8      	b.n	8013eb6 <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8013f04:	b2d2      	uxtb	r2, r2
 8013f06:	2a05      	cmp	r2, #5
 8013f08:	d8c1      	bhi.n	8013e8e <USBD_StdDevReq+0x18a>
 8013f0a:	a301      	add	r3, pc, #4	; (adr r3, 8013f10 <USBD_StdDevReq+0x20c>)
 8013f0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8013f10:	08013f81 	.word	0x08013f81
 8013f14:	08013f75 	.word	0x08013f75
 8013f18:	08013f69 	.word	0x08013f69
 8013f1c:	08013f5d 	.word	0x08013f5d
 8013f20:	08013f51 	.word	0x08013f51
 8013f24:	08013e87 	.word	0x08013e87
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f28:	7c03      	ldrb	r3, [r0, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d17e      	bne.n	801402c <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013f2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013f32:	f10d 0006 	add.w	r0, sp, #6
 8013f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f38:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013f3e:	e7ba      	b.n	8013eb6 <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013f40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f44:	f10d 0106 	add.w	r1, sp, #6
 8013f48:	7c00      	ldrb	r0, [r0, #16]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4798      	blx	r3
  if (err != 0U)
 8013f4e:	e7b2      	b.n	8013eb6 <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013f50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f54:	695b      	ldr	r3, [r3, #20]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1a9      	bne.n	8013eae <USBD_StdDevReq+0x1aa>
 8013f5a:	e798      	b.n	8013e8e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013f5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f60:	691b      	ldr	r3, [r3, #16]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1a3      	bne.n	8013eae <USBD_StdDevReq+0x1aa>
 8013f66:	e792      	b.n	8013e8e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013f68:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d19d      	bne.n	8013eae <USBD_StdDevReq+0x1aa>
 8013f72:	e78c      	b.n	8013e8e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013f74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d197      	bne.n	8013eae <USBD_StdDevReq+0x1aa>
 8013f7e:	e786      	b.n	8013e8e <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013f80:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d191      	bne.n	8013eae <USBD_StdDevReq+0x1aa>
 8013f8a:	e780      	b.n	8013e8e <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f8c:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8013f8e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f90:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8013f92:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013f96:	f7ff fd8b 	bl	8013ab0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	f000 f99c 	bl	80142d8 <USBD_CtlSendStatus>
 8013fa0:	e6c5      	b.n	8013d2e <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8013fa2:	2b03      	cmp	r3, #3
 8013fa4:	f47f aeba 	bne.w	8013d1c <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013fa8:	1d01      	adds	r1, r0, #4
 8013faa:	f000 f965 	bl	8014278 <USBD_CtlSendData>
      break;
 8013fae:	e6be      	b.n	8013d2e <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8013fb0:	2900      	cmp	r1, #0
 8013fb2:	d0eb      	beq.n	8013f8c <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8013fb4:	6841      	ldr	r1, [r0, #4]
 8013fb6:	2901      	cmp	r1, #1
 8013fb8:	d0ef      	beq.n	8013f9a <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013fba:	b2c9      	uxtb	r1, r1
 8013fbc:	f7ff fd78 	bl	8013ab0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8013fc0:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013fc2:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8013fc4:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013fc6:	f7ff fd6b 	bl	8013aa0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8013fca:	4606      	mov	r6, r0
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d0e4      	beq.n	8013f9a <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fd0:	2180      	movs	r1, #128	; 0x80
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f00e fee2 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013fd8:	2100      	movs	r1, #0
 8013fda:	4628      	mov	r0, r5
 8013fdc:	4634      	mov	r4, r6
 8013fde:	f00e fedd 	bl	8022d9c <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013fe2:	7929      	ldrb	r1, [r5, #4]
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f7ff fd63 	bl	8013ab0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fea:	2302      	movs	r3, #2
 8013fec:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013ff0:	e69d      	b.n	8013d2e <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8013ff2:	2900      	cmp	r1, #0
 8013ff4:	d0d1      	beq.n	8013f9a <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 8013ff6:	2101      	movs	r1, #1
 8013ff8:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013ffa:	f7ff fd51 	bl	8013aa0 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8013ffe:	4604      	mov	r4, r0
 8014000:	2800      	cmp	r0, #0
 8014002:	f47f af44 	bne.w	8013e8e <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 8014006:	4628      	mov	r0, r5
 8014008:	f000 f966 	bl	80142d8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801400c:	2303      	movs	r3, #3
 801400e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014012:	e68c      	b.n	8013d2e <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014014:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8014016:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014018:	f00e fec0 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801401c:	2100      	movs	r1, #0
 801401e:	4628      	mov	r0, r5
 8014020:	f00e febc 	bl	8022d9c <USBD_LL_StallEP>
}
 8014024:	e683      	b.n	8013d2e <USBD_StdDevReq+0x2a>
 8014026:	bf00      	nop
 8014028:	20006060 	.word	0x20006060
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801402c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014030:	f10d 0006 	add.w	r0, sp, #6
 8014034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014036:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014038:	2302      	movs	r3, #2
 801403a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801403c:	e73b      	b.n	8013eb6 <USBD_StdDevReq+0x1b2>
 801403e:	bf00      	nop

08014040 <USBD_StdItfReq>:
{
 8014040:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014042:	780b      	ldrb	r3, [r1, #0]
{
 8014044:	460d      	mov	r5, r1
 8014046:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014048:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801404c:	2a40      	cmp	r2, #64	; 0x40
 801404e:	d00b      	beq.n	8014068 <USBD_StdItfReq+0x28>
 8014050:	065b      	lsls	r3, r3, #25
 8014052:	d509      	bpl.n	8014068 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8014054:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014056:	2180      	movs	r1, #128	; 0x80
 8014058:	f00e fea0 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801405c:	4620      	mov	r0, r4
 801405e:	4629      	mov	r1, r5
 8014060:	f00e fe9c 	bl	8022d9c <USBD_LL_StallEP>
}
 8014064:	4628      	mov	r0, r5
 8014066:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8014068:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 801406c:	3b01      	subs	r3, #1
 801406e:	2b02      	cmp	r3, #2
 8014070:	d812      	bhi.n	8014098 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014072:	792b      	ldrb	r3, [r5, #4]
 8014074:	2b01      	cmp	r3, #1
 8014076:	d80f      	bhi.n	8014098 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014078:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801407c:	4629      	mov	r1, r5
 801407e:	4620      	mov	r0, r4
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014084:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014086:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014088:	2b00      	cmp	r3, #0
 801408a:	d1eb      	bne.n	8014064 <USBD_StdItfReq+0x24>
 801408c:	2800      	cmp	r0, #0
 801408e:	d1e9      	bne.n	8014064 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8014090:	4620      	mov	r0, r4
 8014092:	f000 f921 	bl	80142d8 <USBD_CtlSendStatus>
 8014096:	e7e5      	b.n	8014064 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014098:	2180      	movs	r1, #128	; 0x80
 801409a:	4620      	mov	r0, r4
 801409c:	f00e fe7e 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80140a0:	2100      	movs	r1, #0
 80140a2:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80140a4:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80140a6:	f00e fe79 	bl	8022d9c <USBD_LL_StallEP>
}
 80140aa:	4628      	mov	r0, r5
 80140ac:	bd38      	pop	{r3, r4, r5, pc}
 80140ae:	bf00      	nop

080140b0 <USBD_StdEPReq>:
{
 80140b0:	b570      	push	{r4, r5, r6, lr}
 80140b2:	780b      	ldrb	r3, [r1, #0]
 80140b4:	460d      	mov	r5, r1
 80140b6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140bc:	2b20      	cmp	r3, #32
 80140be:	d00c      	beq.n	80140da <USBD_StdEPReq+0x2a>
 80140c0:	2b40      	cmp	r3, #64	; 0x40
 80140c2:	d00a      	beq.n	80140da <USBD_StdEPReq+0x2a>
 80140c4:	b18b      	cbz	r3, 80140ea <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80140c6:	2180      	movs	r1, #128	; 0x80
 80140c8:	4620      	mov	r0, r4
 80140ca:	f00e fe67 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80140ce:	2100      	movs	r1, #0
 80140d0:	4620      	mov	r0, r4
 80140d2:	f00e fe63 	bl	8022d9c <USBD_LL_StallEP>
}
 80140d6:	2000      	movs	r0, #0
 80140d8:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140da:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80140de:	4629      	mov	r1, r5
 80140e0:	4620      	mov	r0, r4
 80140e2:	689b      	ldr	r3, [r3, #8]
}
 80140e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140e8:	4718      	bx	r3
    switch (req->bRequest)
 80140ea:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 80140ec:	888a      	ldrh	r2, [r1, #4]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80140f2:	d036      	beq.n	8014162 <USBD_StdEPReq+0xb2>
 80140f4:	2b03      	cmp	r3, #3
 80140f6:	d023      	beq.n	8014140 <USBD_StdEPReq+0x90>
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d1e4      	bne.n	80140c6 <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 80140fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014100:	2b02      	cmp	r3, #2
 8014102:	d04c      	beq.n	801419e <USBD_StdEPReq+0xee>
 8014104:	2b03      	cmp	r3, #3
 8014106:	d1de      	bne.n	80140c6 <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014108:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 801410c:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801410e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014112:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8014116:	d453      	bmi.n	80141c0 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014118:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 801411c:	2b00      	cmp	r3, #0
 801411e:	d0d2      	beq.n	80140c6 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014120:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014124:	2514      	movs	r5, #20
 8014126:	fb05 0503 	mla	r5, r5, r3, r0
 801412a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801412e:	2b00      	cmp	r3, #0
 8014130:	d152      	bne.n	80141d8 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8014132:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014134:	2202      	movs	r2, #2
 8014136:	4629      	mov	r1, r5
 8014138:	4620      	mov	r0, r4
 801413a:	f000 f89d 	bl	8014278 <USBD_CtlSendData>
          break;
 801413e:	e7ca      	b.n	80140d6 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014140:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014144:	2b02      	cmp	r3, #2
 8014146:	d021      	beq.n	801418c <USBD_StdEPReq+0xdc>
 8014148:	2b03      	cmp	r3, #3
 801414a:	d1bc      	bne.n	80140c6 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 801414c:	886b      	ldrh	r3, [r5, #2]
 801414e:	b923      	cbnz	r3, 801415a <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014150:	064a      	lsls	r2, r1, #25
 8014152:	d002      	beq.n	801415a <USBD_StdEPReq+0xaa>
 8014154:	88eb      	ldrh	r3, [r5, #6]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d049      	beq.n	80141ee <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 801415a:	4620      	mov	r0, r4
 801415c:	f000 f8bc 	bl	80142d8 <USBD_CtlSendStatus>
        break;
 8014160:	e7b9      	b.n	80140d6 <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014162:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014166:	2b02      	cmp	r3, #2
 8014168:	d010      	beq.n	801418c <USBD_StdEPReq+0xdc>
 801416a:	2b03      	cmp	r3, #3
 801416c:	d1ab      	bne.n	80140c6 <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 801416e:	886b      	ldrh	r3, [r5, #2]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1b0      	bne.n	80140d6 <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8014174:	064e      	lsls	r6, r1, #25
 8014176:	d135      	bne.n	80141e4 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8014178:	4620      	mov	r0, r4
 801417a:	f000 f8ad 	bl	80142d8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801417e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014182:	4629      	mov	r1, r5
 8014184:	4620      	mov	r0, r4
 8014186:	689b      	ldr	r3, [r3, #8]
 8014188:	4798      	blx	r3
 801418a:	e7a4      	b.n	80140d6 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801418c:	064b      	lsls	r3, r1, #25
 801418e:	d09a      	beq.n	80140c6 <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014190:	f00e fe04 	bl	8022d9c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014194:	2180      	movs	r1, #128	; 0x80
 8014196:	4620      	mov	r0, r4
 8014198:	f00e fe00 	bl	8022d9c <USBD_LL_StallEP>
 801419c:	e79b      	b.n	80140d6 <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801419e:	0648      	lsls	r0, r1, #25
 80141a0:	d191      	bne.n	80140c6 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141a2:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80141a4:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80141a8:	f04f 0202 	mov.w	r2, #2
 80141ac:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141ae:	bf4c      	ite	mi
 80141b0:	f104 0114 	addmi.w	r1, r4, #20
 80141b4:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 80141b8:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80141ba:	f000 f85d 	bl	8014278 <USBD_CtlSendData>
        break;
 80141be:	e78a      	b.n	80140d6 <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80141c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f43f af7f 	beq.w	80140c6 <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141c8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80141cc:	1c5d      	adds	r5, r3, #1
 80141ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80141d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80141d6:	e7aa      	b.n	801412e <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80141d8:	4620      	mov	r0, r4
 80141da:	f00e fdfb 	bl	8022dd4 <USBD_LL_IsStallEP>
 80141de:	b120      	cbz	r0, 80141ea <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 80141e0:	2301      	movs	r3, #1
 80141e2:	e7a6      	b.n	8014132 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80141e4:	f00e fde8 	bl	8022db8 <USBD_LL_ClearStallEP>
 80141e8:	e7c6      	b.n	8014178 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 80141ea:	6028      	str	r0, [r5, #0]
 80141ec:	e7a2      	b.n	8014134 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80141ee:	f00e fdd5 	bl	8022d9c <USBD_LL_StallEP>
 80141f2:	e7b2      	b.n	801415a <USBD_StdEPReq+0xaa>

080141f4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80141f4:	780b      	ldrb	r3, [r1, #0]
 80141f6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80141f8:	784b      	ldrb	r3, [r1, #1]
 80141fa:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80141fc:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80141fe:	8043      	strh	r3, [r0, #2]
 8014200:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8014202:	8083      	strh	r3, [r0, #4]
 8014204:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8014206:	80c3      	strh	r3, [r0, #6]
}
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop

0801420c <USBD_CtlError>:
{
 801420c:	b510      	push	{r4, lr}
 801420e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014210:	2180      	movs	r1, #128	; 0x80
 8014212:	f00e fdc3 	bl	8022d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014216:	2100      	movs	r1, #0
 8014218:	4620      	mov	r0, r4
}
 801421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 801421e:	f00e bdbd 	b.w	8022d9c <USBD_LL_StallEP>
 8014222:	bf00      	nop

08014224 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8014224:	b318      	cbz	r0, 801426e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8014226:	7803      	ldrb	r3, [r0, #0]
{
 8014228:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 801422a:	b30b      	cbz	r3, 8014270 <USBD_GetString+0x4c>
 801422c:	4604      	mov	r4, r0
 801422e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8014232:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8014236:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801423a:	b2db      	uxtb	r3, r3
 801423c:	2d00      	cmp	r5, #0
 801423e:	d1f8      	bne.n	8014232 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014240:	3301      	adds	r3, #1
 8014242:	005b      	lsls	r3, r3, #1
 8014244:	b2dc      	uxtb	r4, r3
 8014246:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014248:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 801424a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801424c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 801424e:	7804      	ldrb	r4, [r0, #0]
 8014250:	b15c      	cbz	r4, 801426a <USBD_GetString+0x46>
  idx++;
 8014252:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8014254:	2500      	movs	r5, #0
    idx++;
 8014256:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8014258:	54cc      	strb	r4, [r1, r3]
    idx++;
 801425a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 801425c:	b2d2      	uxtb	r2, r2
    idx++;
 801425e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8014260:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8014262:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014266:	2c00      	cmp	r4, #0
 8014268:	d1f5      	bne.n	8014256 <USBD_GetString+0x32>
}
 801426a:	bc30      	pop	{r4, r5}
 801426c:	4770      	bx	lr
 801426e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8014270:	2402      	movs	r4, #2
 8014272:	4623      	mov	r3, r4
 8014274:	e7e7      	b.n	8014246 <USBD_GetString+0x22>
 8014276:	bf00      	nop

08014278 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014278:	b510      	push	{r4, lr}
 801427a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801427c:	2402      	movs	r4, #2
{
 801427e:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014280:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014282:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8014286:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801428a:	f00e fdc5 	bl	8022e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 801428e:	2000      	movs	r0, #0
 8014290:	bd10      	pop	{r4, pc}
 8014292:	bf00      	nop

08014294 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014294:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014296:	2100      	movs	r1, #0
{
 8014298:	b508      	push	{r3, lr}
 801429a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801429c:	4662      	mov	r2, ip
 801429e:	f00e fdbb 	bl	8022e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80142a2:	2000      	movs	r0, #0
 80142a4:	bd08      	pop	{r3, pc}
 80142a6:	bf00      	nop

080142a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80142a8:	b510      	push	{r4, lr}
 80142aa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80142ac:	2403      	movs	r4, #3
{
 80142ae:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142b0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80142b2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 80142b6:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142ba:	f00e fdbb 	bl	8022e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80142be:	2000      	movs	r0, #0
 80142c0:	bd10      	pop	{r4, pc}
 80142c2:	bf00      	nop

080142c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80142c4:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142c6:	2100      	movs	r1, #0
{
 80142c8:	b508      	push	{r3, lr}
 80142ca:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80142cc:	4662      	mov	r2, ip
 80142ce:	f00e fdb1 	bl	8022e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80142d2:	2000      	movs	r0, #0
 80142d4:	bd08      	pop	{r3, pc}
 80142d6:	bf00      	nop

080142d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80142d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80142da:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80142dc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80142de:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80142e2:	461a      	mov	r2, r3
 80142e4:	4619      	mov	r1, r3
 80142e6:	f00e fd97 	bl	8022e18 <USBD_LL_Transmit>

  return USBD_OK;
}
 80142ea:	2000      	movs	r0, #0
 80142ec:	bd08      	pop	{r3, pc}
 80142ee:	bf00      	nop

080142f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80142f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80142f2:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80142f4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80142f6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80142fa:	461a      	mov	r2, r3
 80142fc:	4619      	mov	r1, r3
 80142fe:	f00e fd99 	bl	8022e34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014302:	2000      	movs	r0, #0
 8014304:	bd08      	pop	{r3, pc}
 8014306:	bf00      	nop

08014308 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8014308:	4b10      	ldr	r3, [pc, #64]	; (801434c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801430a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 801430c:	7a5c      	ldrb	r4, [r3, #9]
 801430e:	b9cc      	cbnz	r4, 8014344 <FATFS_LinkDriver+0x3c>
 8014310:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8014312:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8014316:	7a5c      	ldrb	r4, [r3, #9]
 8014318:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801431a:	7a5c      	ldrb	r4, [r3, #9]
 801431c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014320:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8014322:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8014324:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8014326:	441c      	add	r4, r3
 8014328:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 801432a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 801432c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801432e:	b2e4      	uxtb	r4, r4
 8014330:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8014332:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8014334:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8014336:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8014338:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 801433a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801433c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8014340:	708b      	strb	r3, [r1, #2]
}
 8014342:	4770      	bx	lr
  uint8_t ret = 1;
 8014344:	2001      	movs	r0, #1
}
 8014346:	f85d 4b04 	ldr.w	r4, [sp], #4
 801434a:	4770      	bx	lr
 801434c:	20006064 	.word	0x20006064

08014350 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014350:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8014352:	f001 f9c9 	bl	80156e8 <vTaskStartScheduler>
  
  return osOK;
}
 8014356:	2000      	movs	r0, #0
 8014358:	bd08      	pop	{r3, pc}
 801435a:	bf00      	nop

0801435c <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801435c:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8014360:	b10b      	cbz	r3, 8014366 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8014362:	f001 ba23 	b.w	80157ac <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8014366:	f001 ba1b 	b.w	80157a0 <xTaskGetTickCount>
 801436a:	bf00      	nop

0801436c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801436c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801436e:	6944      	ldr	r4, [r0, #20]
{
 8014370:	b086      	sub	sp, #24
 8014372:	4684      	mov	ip, r0
 8014374:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014376:	b1ac      	cbz	r4, 80143a4 <osThreadCreate+0x38>
 8014378:	6986      	ldr	r6, [r0, #24]
 801437a:	b19e      	cbz	r6, 80143a4 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801437c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014380:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8014384:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014388:	f8dc 2010 	ldr.w	r2, [ip, #16]
 801438c:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 801438e:	bf14      	ite	ne
 8014390:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014394:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014396:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801439a:	9500      	str	r5, [sp, #0]
 801439c:	f001 f932 	bl	8015604 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80143a0:	b006      	add	sp, #24
 80143a2:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143a4:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 80143a8:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 80143ac:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80143ae:	bf14      	ite	ne
 80143b0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80143b2:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143b4:	e9dc 1000 	ldrd	r1, r0, [ip]
 80143b8:	9400      	str	r4, [sp, #0]
 80143ba:	ac05      	add	r4, sp, #20
 80143bc:	9401      	str	r4, [sp, #4]
 80143be:	f001 f961 	bl	8015684 <xTaskCreate>
 80143c2:	2801      	cmp	r0, #1
  return handle;
 80143c4:	bf0c      	ite	eq
 80143c6:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80143c8:	2000      	movne	r0, #0
}
 80143ca:	b006      	add	sp, #24
 80143cc:	bd70      	pop	{r4, r5, r6, pc}
 80143ce:	bf00      	nop

080143d0 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80143d0:	2801      	cmp	r0, #1
{
 80143d2:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80143d4:	bf38      	it	cc
 80143d6:	2001      	movcc	r0, #1
 80143d8:	f001 fb48 	bl	8015a6c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80143dc:	2000      	movs	r0, #0
 80143de:	bd08      	pop	{r3, pc}

080143e0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80143e0:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80143e2:	6844      	ldr	r4, [r0, #4]
{
 80143e4:	b082      	sub	sp, #8
 80143e6:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 80143e8:	b16c      	cbz	r4, 8014406 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80143ea:	f1a1 0201 	sub.w	r2, r1, #1
 80143ee:	6800      	ldr	r0, [r0, #0]
 80143f0:	2101      	movs	r1, #1
 80143f2:	fab2 f282 	clz	r2, r2
 80143f6:	0952      	lsrs	r2, r2, #5
 80143f8:	e9cd 0400 	strd	r0, r4, [sp]
 80143fc:	4808      	ldr	r0, [pc, #32]	; (8014420 <osTimerCreate+0x40>)
 80143fe:	f001 fee9 	bl	80161d4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8014402:	b002      	add	sp, #8
 8014404:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8014406:	f1a1 0201 	sub.w	r2, r1, #1
 801440a:	6804      	ldr	r4, [r0, #0]
 801440c:	2101      	movs	r1, #1
 801440e:	4804      	ldr	r0, [pc, #16]	; (8014420 <osTimerCreate+0x40>)
 8014410:	fab2 f282 	clz	r2, r2
 8014414:	9400      	str	r4, [sp, #0]
 8014416:	0952      	lsrs	r2, r2, #5
 8014418:	f001 feac 	bl	8016174 <xTimerCreate>
}
 801441c:	b002      	add	sp, #8
 801441e:	bd10      	pop	{r4, pc}
 8014420:	08028d4c 	.word	0x08028d4c

08014424 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014424:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014426:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8014428:	b109      	cbz	r1, 801442e <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801442a:	f000 bbc9 	b.w	8014bc0 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801442e:	f000 bbdf 	b.w	8014bf0 <xQueueCreateMutex>
 8014432:	bf00      	nop

08014434 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014434:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014436:	2400      	movs	r4, #0
{
 8014438:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801443a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 801443c:	b310      	cbz	r0, 8014484 <osMutexWait+0x50>
 801443e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014442:	b933      	cbnz	r3, 8014452 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014444:	f000 fd88 	bl	8014f58 <xQueueSemaphoreTake>
 8014448:	2801      	cmp	r0, #1
 801444a:	d118      	bne.n	801447e <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 801444c:	2000      	movs	r0, #0
}
 801444e:	b002      	add	sp, #8
 8014450:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014452:	aa01      	add	r2, sp, #4
 8014454:	4621      	mov	r1, r4
 8014456:	f000 fe63 	bl	8015120 <xQueueReceiveFromISR>
 801445a:	2801      	cmp	r0, #1
 801445c:	d10f      	bne.n	801447e <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 801445e:	9b01      	ldr	r3, [sp, #4]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d0f3      	beq.n	801444c <osMutexWait+0x18>
 8014464:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801446c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014470:	f3bf 8f4f 	dsb	sy
 8014474:	f3bf 8f6f 	isb	sy
  return osOK;
 8014478:	4620      	mov	r0, r4
}
 801447a:	b002      	add	sp, #8
 801447c:	bd10      	pop	{r4, pc}
    return osErrorOS;
 801447e:	20ff      	movs	r0, #255	; 0xff
}
 8014480:	b002      	add	sp, #8
 8014482:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8014484:	2080      	movs	r0, #128	; 0x80
}
 8014486:	b002      	add	sp, #8
 8014488:	bd10      	pop	{r4, pc}
 801448a:	bf00      	nop

0801448c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801448c:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 801448e:	2400      	movs	r4, #0
{
 8014490:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8014492:	9401      	str	r4, [sp, #4]
 8014494:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8014498:	b19b      	cbz	r3, 80144c2 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801449a:	a901      	add	r1, sp, #4
 801449c:	f000 fc34 	bl	8014d08 <xQueueGiveFromISR>
 80144a0:	2801      	cmp	r0, #1
 80144a2:	d114      	bne.n	80144ce <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80144a4:	9b01      	ldr	r3, [sp, #4]
 80144a6:	b1ab      	cbz	r3, 80144d4 <osMutexRelease+0x48>
 80144a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80144ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80144b4:	f3bf 8f4f 	dsb	sy
 80144b8:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80144bc:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80144be:	b002      	add	sp, #8
 80144c0:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80144c2:	461a      	mov	r2, r3
 80144c4:	4619      	mov	r1, r3
 80144c6:	f000 faad 	bl	8014a24 <xQueueGenericSend>
 80144ca:	2801      	cmp	r0, #1
 80144cc:	d002      	beq.n	80144d4 <osMutexRelease+0x48>
    result = osErrorOS;
 80144ce:	20ff      	movs	r0, #255	; 0xff
}
 80144d0:	b002      	add	sp, #8
 80144d2:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 80144d4:	2000      	movs	r0, #0
}
 80144d6:	b002      	add	sp, #8
 80144d8:	bd10      	pop	{r4, pc}
 80144da:	bf00      	nop

080144dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80144dc:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80144de:	6844      	ldr	r4, [r0, #4]
{ 
 80144e0:	b083      	sub	sp, #12
 80144e2:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 80144e4:	b184      	cbz	r4, 8014508 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 80144e6:	2901      	cmp	r1, #1
 80144e8:	d003      	beq.n	80144f2 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80144ea:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 80144ec:	4620      	mov	r0, r4
 80144ee:	b003      	add	sp, #12
 80144f0:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80144f2:	2200      	movs	r2, #0
 80144f4:	2503      	movs	r5, #3
 80144f6:	4623      	mov	r3, r4
 80144f8:	4611      	mov	r1, r2
 80144fa:	9500      	str	r5, [sp, #0]
 80144fc:	f000 fa08 	bl	8014910 <xQueueGenericCreateStatic>
 8014500:	4604      	mov	r4, r0
}
 8014502:	4620      	mov	r0, r4
 8014504:	b003      	add	sp, #12
 8014506:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8014508:	2901      	cmp	r1, #1
 801450a:	d1ef      	bne.n	80144ec <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 801450c:	4621      	mov	r1, r4
 801450e:	2203      	movs	r2, #3
 8014510:	f000 fa56 	bl	80149c0 <xQueueGenericCreate>
 8014514:	4604      	mov	r4, r0
 8014516:	2800      	cmp	r0, #0
 8014518:	d0e8      	beq.n	80144ec <osSemaphoreCreate+0x10>
 801451a:	2300      	movs	r3, #0
 801451c:	461a      	mov	r2, r3
 801451e:	4619      	mov	r1, r3
 8014520:	f000 fa80 	bl	8014a24 <xQueueGenericSend>
 8014524:	e7e2      	b.n	80144ec <osSemaphoreCreate+0x10>
 8014526:	bf00      	nop

08014528 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014528:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801452a:	2400      	movs	r4, #0
{
 801452c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 801452e:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8014530:	b310      	cbz	r0, 8014578 <osSemaphoreWait+0x50>
 8014532:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014536:	b933      	cbnz	r3, 8014546 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014538:	f000 fd0e 	bl	8014f58 <xQueueSemaphoreTake>
 801453c:	2801      	cmp	r0, #1
 801453e:	d118      	bne.n	8014572 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014540:	2000      	movs	r0, #0
}
 8014542:	b002      	add	sp, #8
 8014544:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014546:	aa01      	add	r2, sp, #4
 8014548:	4621      	mov	r1, r4
 801454a:	f000 fde9 	bl	8015120 <xQueueReceiveFromISR>
 801454e:	2801      	cmp	r0, #1
 8014550:	d10f      	bne.n	8014572 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014552:	9b01      	ldr	r3, [sp, #4]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d0f3      	beq.n	8014540 <osSemaphoreWait+0x18>
 8014558:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801455c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014560:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014564:	f3bf 8f4f 	dsb	sy
 8014568:	f3bf 8f6f 	isb	sy
  return osOK;
 801456c:	4620      	mov	r0, r4
}
 801456e:	b002      	add	sp, #8
 8014570:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8014572:	20ff      	movs	r0, #255	; 0xff
}
 8014574:	b002      	add	sp, #8
 8014576:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8014578:	2080      	movs	r0, #128	; 0x80
}
 801457a:	b002      	add	sp, #8
 801457c:	bd10      	pop	{r4, pc}
 801457e:	bf00      	nop

08014580 <osSemaphoreRelease>:
 8014580:	b510      	push	{r4, lr}
 8014582:	2400      	movs	r4, #0
 8014584:	b082      	sub	sp, #8
 8014586:	9401      	str	r4, [sp, #4]
 8014588:	f3ef 8305 	mrs	r3, IPSR
 801458c:	b19b      	cbz	r3, 80145b6 <osSemaphoreRelease+0x36>
 801458e:	a901      	add	r1, sp, #4
 8014590:	f000 fbba 	bl	8014d08 <xQueueGiveFromISR>
 8014594:	2801      	cmp	r0, #1
 8014596:	d114      	bne.n	80145c2 <osSemaphoreRelease+0x42>
 8014598:	9b01      	ldr	r3, [sp, #4]
 801459a:	b1ab      	cbz	r3, 80145c8 <osSemaphoreRelease+0x48>
 801459c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80145a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80145a8:	f3bf 8f4f 	dsb	sy
 80145ac:	f3bf 8f6f 	isb	sy
 80145b0:	4620      	mov	r0, r4
 80145b2:	b002      	add	sp, #8
 80145b4:	bd10      	pop	{r4, pc}
 80145b6:	461a      	mov	r2, r3
 80145b8:	4619      	mov	r1, r3
 80145ba:	f000 fa33 	bl	8014a24 <xQueueGenericSend>
 80145be:	2801      	cmp	r0, #1
 80145c0:	d002      	beq.n	80145c8 <osSemaphoreRelease+0x48>
 80145c2:	20ff      	movs	r0, #255	; 0xff
 80145c4:	b002      	add	sp, #8
 80145c6:	bd10      	pop	{r4, pc}
 80145c8:	2000      	movs	r0, #0
 80145ca:	b002      	add	sp, #8
 80145cc:	bd10      	pop	{r4, pc}
 80145ce:	bf00      	nop

080145d0 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80145d0:	6882      	ldr	r2, [r0, #8]
 80145d2:	b15a      	cbz	r2, 80145ec <osMessageCreate+0x1c>
 80145d4:	68c3      	ldr	r3, [r0, #12]
 80145d6:	b14b      	cbz	r3, 80145ec <osMessageCreate+0x1c>
{
 80145d8:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80145da:	2400      	movs	r4, #0
{
 80145dc:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80145de:	e9d0 0100 	ldrd	r0, r1, [r0]
 80145e2:	9400      	str	r4, [sp, #0]
 80145e4:	f000 f994 	bl	8014910 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80145e8:	b002      	add	sp, #8
 80145ea:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80145ec:	2200      	movs	r2, #0
 80145ee:	e9d0 0100 	ldrd	r0, r1, [r0]
 80145f2:	f000 b9e5 	b.w	80149c0 <xQueueGenericCreate>
 80145f6:	bf00      	nop

080145f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80145f8:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80145fa:	2400      	movs	r4, #0
{
 80145fc:	b084      	sub	sp, #16
 80145fe:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014600:	9403      	str	r4, [sp, #12]
 8014602:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8014606:	b15b      	cbz	r3, 8014620 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014608:	4623      	mov	r3, r4
 801460a:	aa03      	add	r2, sp, #12
 801460c:	a901      	add	r1, sp, #4
 801460e:	f000 fb09 	bl	8014c24 <xQueueGenericSendFromISR>
 8014612:	2801      	cmp	r0, #1
 8014614:	d10c      	bne.n	8014630 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014616:	9b03      	ldr	r3, [sp, #12]
 8014618:	b96b      	cbnz	r3, 8014636 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 801461a:	2000      	movs	r0, #0
}
 801461c:	b004      	add	sp, #16
 801461e:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014620:	2a01      	cmp	r2, #1
 8014622:	a901      	add	r1, sp, #4
 8014624:	bf38      	it	cc
 8014626:	2201      	movcc	r2, #1
 8014628:	f000 f9fc 	bl	8014a24 <xQueueGenericSend>
 801462c:	2801      	cmp	r0, #1
 801462e:	d0f4      	beq.n	801461a <osMessagePut+0x22>
      return osErrorOS;
 8014630:	20ff      	movs	r0, #255	; 0xff
}
 8014632:	b004      	add	sp, #16
 8014634:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8014636:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801463e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	f3bf 8f6f 	isb	sy
  return osOK;
 801464a:	4620      	mov	r0, r4
}
 801464c:	b004      	add	sp, #16
 801464e:	bd10      	pop	{r4, pc}

08014650 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014650:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8014652:	2600      	movs	r6, #0
{
 8014654:	b084      	sub	sp, #16
 8014656:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8014658:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 801465c:	b379      	cbz	r1, 80146be <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801465e:	460b      	mov	r3, r1
 8014660:	9600      	str	r6, [sp, #0]
 8014662:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014666:	b991      	cbnz	r1, 801468e <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014668:	a902      	add	r1, sp, #8
 801466a:	4618      	mov	r0, r3
 801466c:	4615      	mov	r5, r2
 801466e:	f000 fbab 	bl	8014dc8 <xQueueReceive>
 8014672:	2801      	cmp	r0, #1
 8014674:	d02d      	beq.n	80146d2 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014676:	2d00      	cmp	r5, #0
 8014678:	bf18      	it	ne
 801467a:	2540      	movne	r5, #64	; 0x40
 801467c:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 801467e:	ab04      	add	r3, sp, #16
 8014680:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014688:	4620      	mov	r0, r4
 801468a:	b004      	add	sp, #16
 801468c:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801468e:	466a      	mov	r2, sp
 8014690:	4618      	mov	r0, r3
 8014692:	a902      	add	r1, sp, #8
 8014694:	f000 fd44 	bl	8015120 <xQueueReceiveFromISR>
      event.status = osOK;
 8014698:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 801469a:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 801469c:	bf0c      	ite	eq
 801469e:	2210      	moveq	r2, #16
 80146a0:	2200      	movne	r2, #0
 80146a2:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d0ea      	beq.n	801467e <osMessageGet+0x2e>
 80146a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80146ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80146b4:	f3bf 8f4f 	dsb	sy
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	e7df      	b.n	801467e <osMessageGet+0x2e>
    event.status = osErrorParameter;
 80146be:	2380      	movs	r3, #128	; 0x80
 80146c0:	9301      	str	r3, [sp, #4]
    return event;
 80146c2:	ab04      	add	r3, sp, #16
 80146c4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80146c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80146cc:	4620      	mov	r0, r4
 80146ce:	b004      	add	sp, #16
 80146d0:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80146d2:	2310      	movs	r3, #16
 80146d4:	9301      	str	r3, [sp, #4]
 80146d6:	e7d2      	b.n	801467e <osMessageGet+0x2e>

080146d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80146d8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80146dc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80146e0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80146e2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80146e4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80146e6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80146e8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop

080146f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80146f0:	2300      	movs	r3, #0
 80146f2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop

080146f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80146f8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80146fa:	6802      	ldr	r2, [r0, #0]
{
 80146fc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80146fe:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8014700:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8014702:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014704:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014706:	689c      	ldr	r4, [r3, #8]
 8014708:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801470a:	6099      	str	r1, [r3, #8]
}
 801470c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8014710:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8014712:	6002      	str	r2, [r0, #0]
}
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop

08014718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014718:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801471a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801471c:	1c6b      	adds	r3, r5, #1
 801471e:	d010      	beq.n	8014742 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014720:	f100 0308 	add.w	r3, r0, #8
 8014724:	461c      	mov	r4, r3
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	681a      	ldr	r2, [r3, #0]
 801472a:	42aa      	cmp	r2, r5
 801472c:	d9fa      	bls.n	8014724 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801472e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014730:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8014732:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014734:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014736:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8014738:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 801473a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801473c:	6002      	str	r2, [r0, #0]
}
 801473e:	bc30      	pop	{r4, r5}
 8014740:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8014742:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8014744:	6863      	ldr	r3, [r4, #4]
 8014746:	e7f2      	b.n	801472e <vListInsert+0x16>

08014748 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014748:	6903      	ldr	r3, [r0, #16]
{
 801474a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801474c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801474e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8014752:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8014754:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014758:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801475a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 801475c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014760:	bf08      	it	eq
 8014762:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8014764:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8014766:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8014768:	3a01      	subs	r2, #1
 801476a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 801476c:	6818      	ldr	r0, [r3, #0]
}
 801476e:	4770      	bx	lr

08014770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014770:	b570      	push	{r4, r5, r6, lr}
 8014772:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014774:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8014776:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014778:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801477a:	b92a      	cbnz	r2, 8014788 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801477c:	6805      	ldr	r5, [r0, #0]
 801477e:	b365      	cbz	r5, 80147da <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014780:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8014782:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014784:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8014786:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8014788:	b97d      	cbnz	r5, 80147aa <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801478a:	6840      	ldr	r0, [r0, #4]
 801478c:	f00e fdf4 	bl	8023378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014790:	6863      	ldr	r3, [r4, #4]
 8014792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014794:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014796:	68a2      	ldr	r2, [r4, #8]
 8014798:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801479a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801479c:	d319      	bcc.n	80147d2 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801479e:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147a0:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80147a2:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147a4:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147a6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80147a8:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147aa:	68c0      	ldr	r0, [r0, #12]
 80147ac:	f00e fde4 	bl	8023378 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80147b2:	68e3      	ldr	r3, [r4, #12]
 80147b4:	4251      	negs	r1, r2
 80147b6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147b8:	6822      	ldr	r2, [r4, #0]
 80147ba:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147bc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147be:	d202      	bcs.n	80147c6 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80147c0:	68a3      	ldr	r3, [r4, #8]
 80147c2:	440b      	add	r3, r1
 80147c4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80147c6:	2d02      	cmp	r5, #2
 80147c8:	d00d      	beq.n	80147e6 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147ca:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80147cc:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147ce:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80147d0:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147d2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80147d4:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147d6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80147d8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147da:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147dc:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80147de:	f001 fadb 	bl	8015d98 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80147e2:	60a5      	str	r5, [r4, #8]
 80147e4:	e7ce      	b.n	8014784 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147e6:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80147e8:	f04f 0000 	mov.w	r0, #0
 80147ec:	bf38      	it	cc
 80147ee:	2601      	movcc	r6, #1
 80147f0:	e7c8      	b.n	8014784 <prvCopyDataToQueue+0x14>
 80147f2:	bf00      	nop

080147f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80147f8:	f001 ff64 	bl	80166c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80147fc:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8014800:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014802:	2c00      	cmp	r4, #0
 8014804:	dd14      	ble.n	8014830 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014806:	f105 0624 	add.w	r6, r5, #36	; 0x24
 801480a:	e003      	b.n	8014814 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801480c:	1e63      	subs	r3, r4, #1
 801480e:	b2da      	uxtb	r2, r3
 8014810:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014812:	b16a      	cbz	r2, 8014830 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014814:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014816:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014818:	b153      	cbz	r3, 8014830 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801481a:	f001 f9a5 	bl	8015b68 <xTaskRemoveFromEventList>
 801481e:	2800      	cmp	r0, #0
 8014820:	d0f4      	beq.n	801480c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8014822:	f001 fa45 	bl	8015cb0 <vTaskMissedYield>
			--cTxLock;
 8014826:	1e63      	subs	r3, r4, #1
 8014828:	b2da      	uxtb	r2, r3
 801482a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801482c:	2a00      	cmp	r2, #0
 801482e:	d1f1      	bne.n	8014814 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014830:	23ff      	movs	r3, #255	; 0xff
 8014832:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014836:	f001 ff6b 	bl	8016710 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801483a:	f001 ff43 	bl	80166c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801483e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8014842:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014844:	2c00      	cmp	r4, #0
 8014846:	dd14      	ble.n	8014872 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014848:	f105 0610 	add.w	r6, r5, #16
 801484c:	e003      	b.n	8014856 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801484e:	1e63      	subs	r3, r4, #1
 8014850:	b2da      	uxtb	r2, r3
 8014852:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014854:	b16a      	cbz	r2, 8014872 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014856:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014858:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801485a:	b153      	cbz	r3, 8014872 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801485c:	f001 f984 	bl	8015b68 <xTaskRemoveFromEventList>
 8014860:	2800      	cmp	r0, #0
 8014862:	d0f4      	beq.n	801484e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8014864:	f001 fa24 	bl	8015cb0 <vTaskMissedYield>
				--cRxLock;
 8014868:	1e63      	subs	r3, r4, #1
 801486a:	b2da      	uxtb	r2, r3
 801486c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801486e:	2a00      	cmp	r2, #0
 8014870:	d1f1      	bne.n	8014856 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014872:	23ff      	movs	r3, #255	; 0xff
 8014874:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8014878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801487c:	f001 bf48 	b.w	8016710 <vPortExitCritical>

08014880 <xQueueGenericReset>:
{
 8014880:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8014882:	b1e0      	cbz	r0, 80148be <xQueueGenericReset+0x3e>
 8014884:	4604      	mov	r4, r0
 8014886:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8014888:	f001 ff1c 	bl	80166c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801488c:	6822      	ldr	r2, [r4, #0]
 801488e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014892:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014894:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014898:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801489a:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801489c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801489e:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80148a0:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80148a2:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80148a4:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80148a6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80148a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80148ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80148b0:	b985      	cbnz	r5, 80148d4 <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148b2:	6923      	ldr	r3, [r4, #16]
 80148b4:	b9d3      	cbnz	r3, 80148ec <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 80148b6:	f001 ff2b 	bl	8016710 <vPortExitCritical>
}
 80148ba:	2001      	movs	r0, #1
 80148bc:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80148be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80148c2:	b672      	cpsid	i
 80148c4:	f383 8811 	msr	BASEPRI, r3
 80148c8:	f3bf 8f6f 	isb	sy
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	b662      	cpsie	i
	configASSERT( pxQueue );
 80148d2:	e7fe      	b.n	80148d2 <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80148d4:	f104 0010 	add.w	r0, r4, #16
 80148d8:	f7ff fefe 	bl	80146d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80148dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80148e0:	f7ff fefa 	bl	80146d8 <vListInitialise>
	taskEXIT_CRITICAL();
 80148e4:	f001 ff14 	bl	8016710 <vPortExitCritical>
}
 80148e8:	2001      	movs	r0, #1
 80148ea:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148ec:	f104 0010 	add.w	r0, r4, #16
 80148f0:	f001 f93a 	bl	8015b68 <xTaskRemoveFromEventList>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d0de      	beq.n	80148b6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80148f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80148fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014900:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014904:	f3bf 8f4f 	dsb	sy
 8014908:	f3bf 8f6f 	isb	sy
 801490c:	e7d3      	b.n	80148b6 <xQueueGenericReset+0x36>
 801490e:	bf00      	nop

08014910 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014910:	b950      	cbnz	r0, 8014928 <xQueueGenericCreateStatic+0x18>
 8014912:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014916:	b672      	cpsid	i
 8014918:	f383 8811 	msr	BASEPRI, r3
 801491c:	f3bf 8f6f 	isb	sy
 8014920:	f3bf 8f4f 	dsb	sy
 8014924:	b662      	cpsie	i
 8014926:	e7fe      	b.n	8014926 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8014928:	b17b      	cbz	r3, 801494a <xQueueGenericCreateStatic+0x3a>
	{
 801492a:	b510      	push	{r4, lr}
 801492c:	460c      	mov	r4, r1
 801492e:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014930:	b33a      	cbz	r2, 8014982 <xQueueGenericCreateStatic+0x72>
 8014932:	b9a9      	cbnz	r1, 8014960 <xQueueGenericCreateStatic+0x50>
 8014934:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014938:	b672      	cpsid	i
 801493a:	f383 8811 	msr	BASEPRI, r3
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	f3bf 8f4f 	dsb	sy
 8014946:	b662      	cpsie	i
 8014948:	e7fe      	b.n	8014948 <xQueueGenericCreateStatic+0x38>
 801494a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801494e:	b672      	cpsid	i
 8014950:	f383 8811 	msr	BASEPRI, r3
 8014954:	f3bf 8f6f 	isb	sy
 8014958:	f3bf 8f4f 	dsb	sy
 801495c:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 801495e:	e7fe      	b.n	801495e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014960:	b17a      	cbz	r2, 8014982 <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014962:	2148      	movs	r1, #72	; 0x48
 8014964:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014966:	9903      	ldr	r1, [sp, #12]
 8014968:	2948      	cmp	r1, #72	; 0x48
 801496a:	d017      	beq.n	801499c <xQueueGenericCreateStatic+0x8c>
 801496c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014970:	b672      	cpsid	i
 8014972:	f383 8811 	msr	BASEPRI, r3
 8014976:	f3bf 8f6f 	isb	sy
 801497a:	f3bf 8f4f 	dsb	sy
 801497e:	b662      	cpsie	i
 8014980:	e7fe      	b.n	8014980 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014982:	2c00      	cmp	r4, #0
 8014984:	d0ed      	beq.n	8014962 <xQueueGenericCreateStatic+0x52>
 8014986:	f04f 0330 	mov.w	r3, #48	; 0x30
 801498a:	b672      	cpsid	i
 801498c:	f383 8811 	msr	BASEPRI, r3
 8014990:	f3bf 8f6f 	isb	sy
 8014994:	f3bf 8f4f 	dsb	sy
 8014998:	b662      	cpsie	i
 801499a:	e7fe      	b.n	801499a <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801499c:	2c00      	cmp	r4, #0
 801499e:	bf08      	it	eq
 80149a0:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80149a2:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80149a4:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80149a6:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80149a8:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80149ac:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80149ae:	641c      	str	r4, [r3, #64]	; 0x40
 80149b0:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80149b2:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80149b4:	f7ff ff64 	bl	8014880 <xQueueGenericReset>
	}
 80149b8:	9b01      	ldr	r3, [sp, #4]
 80149ba:	4618      	mov	r0, r3
 80149bc:	b004      	add	sp, #16
 80149be:	bd10      	pop	{r4, pc}

080149c0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80149c0:	b950      	cbnz	r0, 80149d8 <xQueueGenericCreate+0x18>
 80149c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80149c6:	b672      	cpsid	i
 80149c8:	f383 8811 	msr	BASEPRI, r3
 80149cc:	f3bf 8f6f 	isb	sy
 80149d0:	f3bf 8f4f 	dsb	sy
 80149d4:	b662      	cpsie	i
 80149d6:	e7fe      	b.n	80149d6 <xQueueGenericCreate+0x16>
	{
 80149d8:	b570      	push	{r4, r5, r6, lr}
 80149da:	4605      	mov	r5, r0
 80149dc:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80149de:	b979      	cbnz	r1, 8014a00 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80149e0:	2048      	movs	r0, #72	; 0x48
 80149e2:	f001 ffd9 	bl	8016998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80149e6:	4604      	mov	r4, r0
 80149e8:	b1c0      	cbz	r0, 8014a1c <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80149ea:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80149ee:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80149f0:	2101      	movs	r1, #1
 80149f2:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80149f4:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80149f8:	f7ff ff42 	bl	8014880 <xQueueGenericReset>
	}
 80149fc:	4620      	mov	r0, r4
 80149fe:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a00:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014a04:	3048      	adds	r0, #72	; 0x48
 8014a06:	f001 ffc7 	bl	8016998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	b130      	cbz	r0, 8014a1c <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a0e:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014a10:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014a14:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014a18:	6003      	str	r3, [r0, #0]
 8014a1a:	e7e9      	b.n	80149f0 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014a1c:	2400      	movs	r4, #0
	}
 8014a1e:	4620      	mov	r0, r4
 8014a20:	bd70      	pop	{r4, r5, r6, pc}
 8014a22:	bf00      	nop

08014a24 <xQueueGenericSend>:
{
 8014a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a28:	b085      	sub	sp, #20
 8014a2a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	f000 8083 	beq.w	8014b38 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a32:	460f      	mov	r7, r1
 8014a34:	4604      	mov	r4, r0
 8014a36:	461e      	mov	r6, r3
 8014a38:	2900      	cmp	r1, #0
 8014a3a:	d06b      	beq.n	8014b14 <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014a3c:	2e02      	cmp	r6, #2
 8014a3e:	d10d      	bne.n	8014a5c <xQueueGenericSend+0x38>
 8014a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d00a      	beq.n	8014a5c <xQueueGenericSend+0x38>
 8014a46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a4a:	b672      	cpsid	i
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	b662      	cpsie	i
 8014a5a:	e7fe      	b.n	8014a5a <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014a5c:	f001 f934 	bl	8015cc8 <xTaskGetSchedulerState>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d074      	beq.n	8014b4e <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a64:	f1a6 0802 	sub.w	r8, r6, #2
 8014a68:	2500      	movs	r5, #0
 8014a6a:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8014a6e:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a70:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8014a74:	e007      	b.n	8014a86 <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8014a76:	f001 fe4b 	bl	8016710 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	f7ff feba 	bl	80147f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a80:	f000 ffe2 	bl	8015a48 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a84:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8014a86:	f001 fe1d 	bl	80166c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014a8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014a8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014a8e:	4290      	cmp	r0, r2
 8014a90:	d36b      	bcc.n	8014b6a <xQueueGenericSend+0x146>
 8014a92:	f1b8 0f00 	cmp.w	r8, #0
 8014a96:	d168      	bne.n	8014b6a <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a98:	9b01      	ldr	r3, [sp, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d07d      	beq.n	8014b9a <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8014a9e:	2d00      	cmp	r5, #0
 8014aa0:	d046      	beq.n	8014b30 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8014aa2:	f001 fe35 	bl	8016710 <vPortExitCritical>
		vTaskSuspendAll();
 8014aa6:	f000 fe73 	bl	8015790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014aaa:	f001 fe0b 	bl	80166c4 <vPortEnterCritical>
 8014aae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014ab2:	2bff      	cmp	r3, #255	; 0xff
 8014ab4:	d101      	bne.n	8014aba <xQueueGenericSend+0x96>
 8014ab6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8014aba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014abe:	2bff      	cmp	r3, #255	; 0xff
 8014ac0:	d101      	bne.n	8014ac6 <xQueueGenericSend+0xa2>
 8014ac2:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8014ac6:	f001 fe23 	bl	8016710 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014aca:	a901      	add	r1, sp, #4
 8014acc:	a802      	add	r0, sp, #8
 8014ace:	f001 f8a3 	bl	8015c18 <xTaskCheckForTimeOut>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d165      	bne.n	8014ba2 <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8014ad6:	f001 fdf5 	bl	80166c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014ada:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d1c9      	bne.n	8014a76 <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8014ae2:	f001 fe15 	bl	8016710 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014ae6:	9901      	ldr	r1, [sp, #4]
 8014ae8:	f104 0010 	add.w	r0, r4, #16
 8014aec:	f001 f800 	bl	8015af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7ff fe7f 	bl	80147f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014af6:	f000 ffa7 	bl	8015a48 <xTaskResumeAll>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d1c2      	bne.n	8014a84 <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8014afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014b0a:	f3bf 8f4f 	dsb	sy
 8014b0e:	f3bf 8f6f 	isb	sy
 8014b12:	e7b7      	b.n	8014a84 <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b14:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d090      	beq.n	8014a3c <xQueueGenericSend+0x18>
 8014b1a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b1e:	b672      	cpsid	i
 8014b20:	f383 8811 	msr	BASEPRI, r3
 8014b24:	f3bf 8f6f 	isb	sy
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	b662      	cpsie	i
 8014b2e:	e7fe      	b.n	8014b2e <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014b30:	a802      	add	r0, sp, #8
 8014b32:	f001 f865 	bl	8015c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014b36:	e7b4      	b.n	8014aa2 <xQueueGenericSend+0x7e>
 8014b38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b3c:	b672      	cpsid	i
 8014b3e:	f383 8811 	msr	BASEPRI, r3
 8014b42:	f3bf 8f6f 	isb	sy
 8014b46:	f3bf 8f4f 	dsb	sy
 8014b4a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014b4c:	e7fe      	b.n	8014b4c <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014b4e:	9b01      	ldr	r3, [sp, #4]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d087      	beq.n	8014a64 <xQueueGenericSend+0x40>
 8014b54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b58:	b672      	cpsid	i
 8014b5a:	f383 8811 	msr	BASEPRI, r3
 8014b5e:	f3bf 8f6f 	isb	sy
 8014b62:	f3bf 8f4f 	dsb	sy
 8014b66:	b662      	cpsie	i
 8014b68:	e7fe      	b.n	8014b68 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b6a:	4632      	mov	r2, r6
 8014b6c:	4639      	mov	r1, r7
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f7ff fdfe 	bl	8014770 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b76:	b9db      	cbnz	r3, 8014bb0 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8014b78:	b148      	cbz	r0, 8014b8e <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8014b7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014b86:	f3bf 8f4f 	dsb	sy
 8014b8a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8014b8e:	f001 fdbf 	bl	8016710 <vPortExitCritical>
				return pdPASS;
 8014b92:	2001      	movs	r0, #1
}
 8014b94:	b005      	add	sp, #20
 8014b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8014b9a:	f001 fdb9 	bl	8016710 <vPortExitCritical>
					return errQUEUE_FULL;
 8014b9e:	4640      	mov	r0, r8
 8014ba0:	e7f8      	b.n	8014b94 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f7ff fe26 	bl	80147f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ba8:	f000 ff4e 	bl	8015a48 <xTaskResumeAll>
			return errQUEUE_FULL;
 8014bac:	2000      	movs	r0, #0
 8014bae:	e7f1      	b.n	8014b94 <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014bb4:	f000 ffd8 	bl	8015b68 <xTaskRemoveFromEventList>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d0e8      	beq.n	8014b8e <xQueueGenericSend+0x16a>
 8014bbc:	e7dd      	b.n	8014b7a <xQueueGenericSend+0x156>
 8014bbe:	bf00      	nop

08014bc0 <xQueueCreateMutexStatic>:
	{
 8014bc0:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014bc2:	2200      	movs	r2, #0
	{
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014bca:	2001      	movs	r0, #1
 8014bcc:	4611      	mov	r1, r2
 8014bce:	9400      	str	r4, [sp, #0]
 8014bd0:	f7ff fe9e 	bl	8014910 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	b138      	cbz	r0, 8014be8 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014bd8:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014bda:	461a      	mov	r2, r3
 8014bdc:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014bde:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014be0:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014be2:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014be4:	f7ff ff1e 	bl	8014a24 <xQueueGenericSend>
	}
 8014be8:	4620      	mov	r0, r4
 8014bea:	b002      	add	sp, #8
 8014bec:	bd10      	pop	{r4, pc}
 8014bee:	bf00      	nop

08014bf0 <xQueueCreateMutex>:
	{
 8014bf0:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014bf2:	2048      	movs	r0, #72	; 0x48
 8014bf4:	f001 fed0 	bl	8016998 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	b188      	cbz	r0, 8014c20 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014bfc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8014bfe:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014c00:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014c02:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8014c06:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014c0a:	f7ff fe39 	bl	8014880 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014c0e:	462b      	mov	r3, r5
 8014c10:	462a      	mov	r2, r5
 8014c12:	4629      	mov	r1, r5
 8014c14:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014c16:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014c18:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014c1a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014c1c:	f7ff ff02 	bl	8014a24 <xQueueGenericSend>
	}
 8014c20:	4620      	mov	r0, r4
 8014c22:	bd38      	pop	{r3, r4, r5, pc}

08014c24 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d053      	beq.n	8014cd0 <xQueueGenericSendFromISR+0xac>
{
 8014c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2c:	460e      	mov	r6, r1
 8014c2e:	4604      	mov	r4, r0
 8014c30:	4617      	mov	r7, r2
 8014c32:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c34:	b359      	cbz	r1, 8014c8e <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c36:	2d02      	cmp	r5, #2
 8014c38:	d10d      	bne.n	8014c56 <xQueueGenericSendFromISR+0x32>
 8014c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d00a      	beq.n	8014c56 <xQueueGenericSendFromISR+0x32>
 8014c40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c44:	b672      	cpsid	i
 8014c46:	f383 8811 	msr	BASEPRI, r3
 8014c4a:	f3bf 8f6f 	isb	sy
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	b662      	cpsie	i
 8014c54:	e7fe      	b.n	8014c54 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c56:	f001 fe3b 	bl	80168d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014c5a:	f3ef 8811 	mrs	r8, BASEPRI
 8014c5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c62:	b672      	cpsid	i
 8014c64:	f383 8811 	msr	BASEPRI, r3
 8014c68:	f3bf 8f6f 	isb	sy
 8014c6c:	f3bf 8f4f 	dsb	sy
 8014c70:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014c72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d317      	bcc.n	8014caa <xQueueGenericSendFromISR+0x86>
 8014c7a:	f1a5 0002 	sub.w	r0, r5, #2
 8014c7e:	fab0 f080 	clz	r0, r0
 8014c82:	0940      	lsrs	r0, r0, #5
 8014c84:	b988      	cbnz	r0, 8014caa <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014c86:	f388 8811 	msr	BASEPRI, r8
}
 8014c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d0d0      	beq.n	8014c36 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8014c94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c98:	b672      	cpsid	i
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	b662      	cpsie	i
 8014ca8:	e7fe      	b.n	8014ca8 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014caa:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8014cac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8014cb4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014cb6:	f7ff fd5b 	bl	8014770 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8014cba:	1c6b      	adds	r3, r5, #1
 8014cbc:	d013      	beq.n	8014ce6 <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014cbe:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8014cc0:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014cc2:	b25b      	sxtb	r3, r3
 8014cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8014cc8:	f388 8811 	msr	BASEPRI, r8
}
 8014ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8014cd0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cd4:	b672      	cpsid	i
 8014cd6:	f383 8811 	msr	BASEPRI, r3
 8014cda:	f3bf 8f6f 	isb	sy
 8014cde:	f3bf 8f4f 	dsb	sy
 8014ce2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014ce4:	e7fe      	b.n	8014ce4 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ce8:	b90b      	cbnz	r3, 8014cee <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8014cea:	2001      	movs	r0, #1
 8014cec:	e7cb      	b.n	8014c86 <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014cee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014cf2:	f000 ff39 	bl	8015b68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d0f7      	beq.n	8014cea <xQueueGenericSendFromISR+0xc6>
 8014cfa:	2f00      	cmp	r7, #0
 8014cfc:	d0f5      	beq.n	8014cea <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014cfe:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8014d00:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014d02:	603b      	str	r3, [r7, #0]
 8014d04:	e7bf      	b.n	8014c86 <xQueueGenericSendFromISR+0x62>
 8014d06:	bf00      	nop

08014d08 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8014d08:	b380      	cbz	r0, 8014d6c <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8014d0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8014d0c:	b570      	push	{r4, r5, r6, lr}
 8014d0e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8014d10:	b153      	cbz	r3, 8014d28 <xQueueGiveFromISR+0x20>
 8014d12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d16:	b672      	cpsid	i
 8014d18:	f383 8811 	msr	BASEPRI, r3
 8014d1c:	f3bf 8f6f 	isb	sy
 8014d20:	f3bf 8f4f 	dsb	sy
 8014d24:	b662      	cpsie	i
 8014d26:	e7fe      	b.n	8014d26 <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014d28:	6803      	ldr	r3, [r0, #0]
 8014d2a:	460d      	mov	r5, r1
 8014d2c:	b34b      	cbz	r3, 8014d82 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d2e:	f001 fdcf 	bl	80168d0 <vPortValidateInterruptPriority>
	__asm volatile
 8014d32:	f3ef 8611 	mrs	r6, BASEPRI
 8014d36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d3a:	b672      	cpsid	i
 8014d3c:	f383 8811 	msr	BASEPRI, r3
 8014d40:	f3bf 8f6f 	isb	sy
 8014d44:	f3bf 8f4f 	dsb	sy
 8014d48:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014d4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d925      	bls.n	8014d9e <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8014d52:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014d56:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8014d58:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014d5a:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8014d5c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8014d5e:	d022      	beq.n	8014da6 <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014d60:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8014d62:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014d64:	b25b      	sxtb	r3, r3
 8014d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d6a:	e019      	b.n	8014da0 <xQueueGiveFromISR+0x98>
	__asm volatile
 8014d6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d70:	b672      	cpsid	i
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014d80:	e7fe      	b.n	8014d80 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014d82:	6883      	ldr	r3, [r0, #8]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d0d2      	beq.n	8014d2e <xQueueGiveFromISR+0x26>
 8014d88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d8c:	b672      	cpsid	i
 8014d8e:	f383 8811 	msr	BASEPRI, r3
 8014d92:	f3bf 8f6f 	isb	sy
 8014d96:	f3bf 8f4f 	dsb	sy
 8014d9a:	b662      	cpsie	i
 8014d9c:	e7fe      	b.n	8014d9c <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8014d9e:	2000      	movs	r0, #0
	__asm volatile
 8014da0:	f386 8811 	msr	BASEPRI, r6
}
 8014da4:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014da8:	b90b      	cbnz	r3, 8014dae <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8014daa:	2001      	movs	r0, #1
 8014dac:	e7f8      	b.n	8014da0 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014dae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014db2:	f000 fed9 	bl	8015b68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8014db6:	2d00      	cmp	r5, #0
 8014db8:	d0f7      	beq.n	8014daa <xQueueGiveFromISR+0xa2>
 8014dba:	2800      	cmp	r0, #0
 8014dbc:	d0f5      	beq.n	8014daa <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014dbe:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8014dc0:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014dc2:	602b      	str	r3, [r5, #0]
 8014dc4:	e7ec      	b.n	8014da0 <xQueueGiveFromISR+0x98>
 8014dc6:	bf00      	nop

08014dc8 <xQueueReceive>:
{
 8014dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dcc:	b085      	sub	sp, #20
 8014dce:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f000 80a4 	beq.w	8014f1e <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014dd6:	460d      	mov	r5, r1
 8014dd8:	4604      	mov	r4, r0
 8014dda:	2900      	cmp	r1, #0
 8014ddc:	d047      	beq.n	8014e6e <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014dde:	f000 ff73 	bl	8015cc8 <xTaskGetSchedulerState>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d051      	beq.n	8014e8a <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8014de6:	f001 fc6d 	bl	80166c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014dea:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014dec:	2e00      	cmp	r6, #0
 8014dee:	d16b      	bne.n	8014ec8 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014df0:	9b01      	ldr	r3, [sp, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d035      	beq.n	8014e62 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8014df6:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014df8:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8014dfc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e00:	a802      	add	r0, sp, #8
 8014e02:	f000 fefd 	bl	8015c00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8014e06:	f001 fc83 	bl	8016710 <vPortExitCritical>
		vTaskSuspendAll();
 8014e0a:	f000 fcc1 	bl	8015790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e0e:	f001 fc59 	bl	80166c4 <vPortEnterCritical>
 8014e12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014e16:	2bff      	cmp	r3, #255	; 0xff
 8014e18:	d101      	bne.n	8014e1e <xQueueReceive+0x56>
 8014e1a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8014e1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014e22:	2bff      	cmp	r3, #255	; 0xff
 8014e24:	d101      	bne.n	8014e2a <xQueueReceive+0x62>
 8014e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e2a:	f001 fc71 	bl	8016710 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014e2e:	a901      	add	r1, sp, #4
 8014e30:	a802      	add	r0, sp, #8
 8014e32:	f000 fef1 	bl	8015c18 <xTaskCheckForTimeOut>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d135      	bne.n	8014ea6 <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8014e3a:	f001 fc43 	bl	80166c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014e3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d056      	beq.n	8014ef2 <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8014e44:	f001 fc64 	bl	8016710 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f7ff fcd3 	bl	80147f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014e4e:	f000 fdfb 	bl	8015a48 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8014e52:	f001 fc37 	bl	80166c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e58:	2e00      	cmp	r6, #0
 8014e5a:	d135      	bne.n	8014ec8 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e5c:	9b01      	ldr	r3, [sp, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1d1      	bne.n	8014e06 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8014e62:	f001 fc55 	bl	8016710 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8014e66:	2000      	movs	r0, #0
}
 8014e68:	b005      	add	sp, #20
 8014e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014e6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d0b4      	beq.n	8014dde <xQueueReceive+0x16>
	__asm volatile
 8014e74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e78:	b672      	cpsid	i
 8014e7a:	f383 8811 	msr	BASEPRI, r3
 8014e7e:	f3bf 8f6f 	isb	sy
 8014e82:	f3bf 8f4f 	dsb	sy
 8014e86:	b662      	cpsie	i
 8014e88:	e7fe      	b.n	8014e88 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e8a:	9b01      	ldr	r3, [sp, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d0aa      	beq.n	8014de6 <xQueueReceive+0x1e>
 8014e90:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014e94:	b672      	cpsid	i
 8014e96:	f383 8811 	msr	BASEPRI, r3
 8014e9a:	f3bf 8f6f 	isb	sy
 8014e9e:	f3bf 8f4f 	dsb	sy
 8014ea2:	b662      	cpsie	i
 8014ea4:	e7fe      	b.n	8014ea4 <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f7ff fca4 	bl	80147f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014eac:	f000 fdcc 	bl	8015a48 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8014eb0:	f001 fc08 	bl	80166c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d0d3      	beq.n	8014e62 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8014eba:	f001 fc29 	bl	8016710 <vPortExitCritical>
		taskENTER_CRITICAL();
 8014ebe:	f001 fc01 	bl	80166c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ec2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014ec4:	2e00      	cmp	r6, #0
 8014ec6:	d0c9      	beq.n	8014e5c <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014eca:	b152      	cbz	r2, 8014ee2 <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014ecc:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014ece:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014ed0:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014ed2:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014ed4:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014ed6:	d301      	bcc.n	8014edc <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014ed8:	6821      	ldr	r1, [r4, #0]
 8014eda:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014edc:	4628      	mov	r0, r5
 8014ede:	f00e fa4b 	bl	8023378 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014ee2:	3e01      	subs	r6, #1
 8014ee4:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	bb23      	cbnz	r3, 8014f34 <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8014eea:	f001 fc11 	bl	8016710 <vPortExitCritical>
				return pdPASS;
 8014eee:	2001      	movs	r0, #1
 8014ef0:	e7ba      	b.n	8014e68 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8014ef2:	f001 fc0d 	bl	8016710 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014ef6:	9901      	ldr	r1, [sp, #4]
 8014ef8:	4640      	mov	r0, r8
 8014efa:	f000 fdf9 	bl	8015af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014efe:	4620      	mov	r0, r4
 8014f00:	f7ff fc78 	bl	80147f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014f04:	f000 fda0 	bl	8015a48 <xTaskResumeAll>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d1d8      	bne.n	8014ebe <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8014f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014f10:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8014f14:	f3bf 8f4f 	dsb	sy
 8014f18:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8014f1c:	e7cf      	b.n	8014ebe <xQueueReceive+0xf6>
 8014f1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f22:	b672      	cpsid	i
 8014f24:	f383 8811 	msr	BASEPRI, r3
 8014f28:	f3bf 8f6f 	isb	sy
 8014f2c:	f3bf 8f4f 	dsb	sy
 8014f30:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8014f32:	e7fe      	b.n	8014f32 <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f34:	f104 0010 	add.w	r0, r4, #16
 8014f38:	f000 fe16 	bl	8015b68 <xTaskRemoveFromEventList>
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d0d4      	beq.n	8014eea <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8014f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014f4c:	f3bf 8f4f 	dsb	sy
 8014f50:	f3bf 8f6f 	isb	sy
 8014f54:	e7c9      	b.n	8014eea <xQueueReceive+0x122>
 8014f56:	bf00      	nop

08014f58 <xQueueSemaphoreTake>:
{
 8014f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f5a:	b085      	sub	sp, #20
 8014f5c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d057      	beq.n	8015012 <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f62:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8014f64:	4604      	mov	r4, r0
 8014f66:	b156      	cbz	r6, 8014f7e <xQueueSemaphoreTake+0x26>
 8014f68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f6c:	b672      	cpsid	i
 8014f6e:	f383 8811 	msr	BASEPRI, r3
 8014f72:	f3bf 8f6f 	isb	sy
 8014f76:	f3bf 8f4f 	dsb	sy
 8014f7a:	b662      	cpsie	i
 8014f7c:	e7fe      	b.n	8014f7c <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f7e:	f000 fea3 	bl	8015cc8 <xTaskGetSchedulerState>
 8014f82:	4605      	mov	r5, r0
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d04f      	beq.n	8015028 <xQueueSemaphoreTake+0xd0>
 8014f88:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8014f8a:	f001 fb9b 	bl	80166c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8014f90:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014f92:	bb8b      	cbnz	r3, 8014ff8 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014f94:	9b01      	ldr	r3, [sp, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f000 809f 	beq.w	80150da <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8014f9c:	2d00      	cmp	r5, #0
 8014f9e:	d05d      	beq.n	801505c <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8014fa0:	f001 fbb6 	bl	8016710 <vPortExitCritical>
		vTaskSuspendAll();
 8014fa4:	f000 fbf4 	bl	8015790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014fa8:	f001 fb8c 	bl	80166c4 <vPortEnterCritical>
 8014fac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014fb0:	2bff      	cmp	r3, #255	; 0xff
 8014fb2:	d101      	bne.n	8014fb8 <xQueueSemaphoreTake+0x60>
 8014fb4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8014fb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014fbc:	2bff      	cmp	r3, #255	; 0xff
 8014fbe:	d101      	bne.n	8014fc4 <xQueueSemaphoreTake+0x6c>
 8014fc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014fc4:	f001 fba4 	bl	8016710 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014fc8:	a901      	add	r1, sp, #4
 8014fca:	a802      	add	r0, sp, #8
 8014fcc:	f000 fe24 	bl	8015c18 <xTaskCheckForTimeOut>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d137      	bne.n	8015044 <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8014fd4:	f001 fb76 	bl	80166c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d042      	beq.n	8015064 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8014fde:	f001 fb97 	bl	8016710 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f7ff fc06 	bl	80147f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014fe8:	f000 fd2e 	bl	8015a48 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8014fec:	f001 fb6a 	bl	80166c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014ff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ff2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d0cd      	beq.n	8014f94 <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014ff8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014ffa:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014ffc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014ffe:	2a00      	cmp	r2, #0
 8015000:	f000 8089 	beq.w	8015116 <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015004:	6923      	ldr	r3, [r4, #16]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d174      	bne.n	80150f4 <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 801500a:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 801500c:	f001 fb80 	bl	8016710 <vPortExitCritical>
				return pdPASS;
 8015010:	e046      	b.n	80150a0 <xQueueSemaphoreTake+0x148>
 8015012:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015016:	b672      	cpsid	i
 8015018:	f383 8811 	msr	BASEPRI, r3
 801501c:	f3bf 8f6f 	isb	sy
 8015020:	f3bf 8f4f 	dsb	sy
 8015024:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015026:	e7fe      	b.n	8015026 <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015028:	9b01      	ldr	r3, [sp, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d03b      	beq.n	80150a6 <xQueueSemaphoreTake+0x14e>
 801502e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015032:	b672      	cpsid	i
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	b662      	cpsie	i
 8015042:	e7fe      	b.n	8015042 <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8015044:	4620      	mov	r0, r4
 8015046:	f7ff fbd5 	bl	80147f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801504a:	f000 fcfd 	bl	8015a48 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801504e:	f001 fb39 	bl	80166c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015054:	b30b      	cbz	r3, 801509a <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 8015056:	f001 fb5b 	bl	8016710 <vPortExitCritical>
	return xReturn;
 801505a:	e7c7      	b.n	8014fec <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801505c:	a802      	add	r0, sp, #8
 801505e:	f000 fdcf 	bl	8015c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015062:	e79d      	b.n	8014fa0 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8015064:	f001 fb54 	bl	8016710 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015068:	6823      	ldr	r3, [r4, #0]
 801506a:	b36b      	cbz	r3, 80150c8 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801506c:	9901      	ldr	r1, [sp, #4]
 801506e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015072:	f000 fd3d 	bl	8015af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015076:	4620      	mov	r0, r4
 8015078:	f7ff fbbc 	bl	80147f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801507c:	f000 fce4 	bl	8015a48 <xTaskResumeAll>
 8015080:	2800      	cmp	r0, #0
 8015082:	d1b3      	bne.n	8014fec <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8015084:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801508c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015090:	f3bf 8f4f 	dsb	sy
 8015094:	f3bf 8f6f 	isb	sy
 8015098:	e7a8      	b.n	8014fec <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 801509a:	f001 fb39 	bl	8016710 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801509e:	b926      	cbnz	r6, 80150aa <xQueueSemaphoreTake+0x152>
}
 80150a0:	4630      	mov	r0, r6
 80150a2:	b005      	add	sp, #20
 80150a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150a6:	4606      	mov	r6, r0
 80150a8:	e76f      	b.n	8014f8a <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 80150aa:	f001 fb0b 	bl	80166c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80150ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80150b0:	b119      	cbz	r1, 80150ba <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80150b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80150b4:	6819      	ldr	r1, [r3, #0]
 80150b6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80150ba:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80150bc:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80150be:	f000 fecb 	bl	8015e58 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80150c2:	f001 fb25 	bl	8016710 <vPortExitCritical>
 80150c6:	e7eb      	b.n	80150a0 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 80150c8:	f001 fafc 	bl	80166c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80150cc:	68a0      	ldr	r0, [r4, #8]
 80150ce:	f000 fe0b 	bl	8015ce8 <xTaskPriorityInherit>
 80150d2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80150d4:	f001 fb1c 	bl	8016710 <vPortExitCritical>
 80150d8:	e7c8      	b.n	801506c <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80150da:	2e00      	cmp	r6, #0
 80150dc:	d0f1      	beq.n	80150c2 <xQueueSemaphoreTake+0x16a>
 80150de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80150e2:	b672      	cpsid	i
 80150e4:	f383 8811 	msr	BASEPRI, r3
 80150e8:	f3bf 8f6f 	isb	sy
 80150ec:	f3bf 8f4f 	dsb	sy
 80150f0:	b662      	cpsie	i
 80150f2:	e7fe      	b.n	80150f2 <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80150f4:	f104 0010 	add.w	r0, r4, #16
 80150f8:	f000 fd36 	bl	8015b68 <xTaskRemoveFromEventList>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d084      	beq.n	801500a <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8015100:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015108:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801510c:	f3bf 8f4f 	dsb	sy
 8015110:	f3bf 8f6f 	isb	sy
 8015114:	e779      	b.n	801500a <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015116:	f000 ff0d 	bl	8015f34 <pvTaskIncrementMutexHeldCount>
 801511a:	60a0      	str	r0, [r4, #8]
 801511c:	e772      	b.n	8015004 <xQueueSemaphoreTake+0xac>
 801511e:	bf00      	nop

08015120 <xQueueReceiveFromISR>:
{
 8015120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8015124:	b330      	cbz	r0, 8015174 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015126:	460e      	mov	r6, r1
 8015128:	4604      	mov	r4, r0
 801512a:	4617      	mov	r7, r2
 801512c:	b1a1      	cbz	r1, 8015158 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801512e:	f001 fbcf 	bl	80168d0 <vPortValidateInterruptPriority>
	__asm volatile
 8015132:	f3ef 8911 	mrs	r9, BASEPRI
 8015136:	f04f 0330 	mov.w	r3, #48	; 0x30
 801513a:	b672      	cpsid	i
 801513c:	f383 8811 	msr	BASEPRI, r3
 8015140:	f3bf 8f6f 	isb	sy
 8015144:	f3bf 8f4f 	dsb	sy
 8015148:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801514a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801514c:	b9ed      	cbnz	r5, 801518a <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 801514e:	4628      	mov	r0, r5
	__asm volatile
 8015150:	f389 8811 	msr	BASEPRI, r9
}
 8015154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015158:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801515a:	2b00      	cmp	r3, #0
 801515c:	d0e7      	beq.n	801512e <xQueueReceiveFromISR+0xe>
	__asm volatile
 801515e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015162:	b672      	cpsid	i
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	b662      	cpsie	i
 8015172:	e7fe      	b.n	8015172 <xQueueReceiveFromISR+0x52>
 8015174:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015178:	b672      	cpsid	i
 801517a:	f383 8811 	msr	BASEPRI, r3
 801517e:	f3bf 8f6f 	isb	sy
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015188:	e7fe      	b.n	8015188 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 801518a:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801518e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8015190:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015194:	b142      	cbz	r2, 80151a8 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015196:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015198:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801519a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801519c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801519e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80151a0:	d215      	bcs.n	80151ce <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80151a2:	4630      	mov	r0, r6
 80151a4:	f00e f8e8 	bl	8023378 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80151a8:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80151aa:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80151ae:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80151b0:	d009      	beq.n	80151c6 <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80151b2:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 80151b6:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80151b8:	b25b      	sxtb	r3, r3
 80151ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 80151be:	f389 8811 	msr	BASEPRI, r9
}
 80151c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151c6:	6923      	ldr	r3, [r4, #16]
 80151c8:	b923      	cbnz	r3, 80151d4 <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 80151ca:	2001      	movs	r0, #1
 80151cc:	e7c0      	b.n	8015150 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80151ce:	6821      	ldr	r1, [r4, #0]
 80151d0:	60e1      	str	r1, [r4, #12]
 80151d2:	e7e6      	b.n	80151a2 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151d4:	f104 0010 	add.w	r0, r4, #16
 80151d8:	f000 fcc6 	bl	8015b68 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80151dc:	2f00      	cmp	r7, #0
 80151de:	d0f4      	beq.n	80151ca <xQueueReceiveFromISR+0xaa>
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d0f2      	beq.n	80151ca <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80151e4:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80151e6:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 80151e8:	603b      	str	r3, [r7, #0]
 80151ea:	e7b1      	b.n	8015150 <xQueueReceiveFromISR+0x30>

080151ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80151ec:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80151ee:	2300      	movs	r3, #0
 80151f0:	4c08      	ldr	r4, [pc, #32]	; (8015214 <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80151f2:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80151f6:	b12a      	cbz	r2, 8015204 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80151f8:	3301      	adds	r3, #1
 80151fa:	2b08      	cmp	r3, #8
 80151fc:	d1f9      	bne.n	80151f2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80151fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015202:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015204:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015208:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 801520c:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015210:	6050      	str	r0, [r2, #4]
	}
 8015212:	4770      	bx	lr
 8015214:	20006070 	.word	0x20006070

08015218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015218:	b570      	push	{r4, r5, r6, lr}
 801521a:	4604      	mov	r4, r0
 801521c:	460e      	mov	r6, r1
 801521e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015220:	f001 fa50 	bl	80166c4 <vPortEnterCritical>
 8015224:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015228:	2bff      	cmp	r3, #255	; 0xff
 801522a:	d102      	bne.n	8015232 <vQueueWaitForMessageRestricted+0x1a>
 801522c:	2300      	movs	r3, #0
 801522e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015232:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015236:	2bff      	cmp	r3, #255	; 0xff
 8015238:	d102      	bne.n	8015240 <vQueueWaitForMessageRestricted+0x28>
 801523a:	2300      	movs	r3, #0
 801523c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015240:	f001 fa66 	bl	8016710 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015246:	b123      	cbz	r3, 8015252 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015248:	4620      	mov	r0, r4
	}
 801524a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801524e:	f7ff bad1 	b.w	80147f4 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015252:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015256:	462a      	mov	r2, r5
 8015258:	4631      	mov	r1, r6
 801525a:	f000 fc65 	bl	8015b28 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 801525e:	4620      	mov	r0, r4
	}
 8015260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015264:	f7ff bac6 	b.w	80147f4 <prvUnlockQueue>

08015268 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801526c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801526e:	f001 fa29 	bl	80166c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015272:	4a35      	ldr	r2, [pc, #212]	; (8015348 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8015274:	4d35      	ldr	r5, [pc, #212]	; (801534c <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8015276:	6813      	ldr	r3, [r2, #0]
 8015278:	3301      	adds	r3, #1
 801527a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801527c:	682b      	ldr	r3, [r5, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d034      	beq.n	80152ec <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015282:	4e33      	ldr	r6, [pc, #204]	; (8015350 <prvAddNewTaskToReadyList+0xe8>)
 8015284:	6833      	ldr	r3, [r6, #0]
 8015286:	b343      	cbz	r3, 80152da <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801528a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8015374 <prvAddNewTaskToReadyList+0x10c>
 801528e:	2201      	movs	r2, #1
		uxTaskNumber++;
 8015290:	4f30      	ldr	r7, [pc, #192]	; (8015354 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8015292:	4931      	ldr	r1, [pc, #196]	; (8015358 <prvAddNewTaskToReadyList+0xf0>)
 8015294:	409a      	lsls	r2, r3
 8015296:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801529a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	3301      	adds	r3, #1
 80152a2:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80152a4:	680b      	ldr	r3, [r1, #0]
 80152a6:	431a      	orrs	r2, r3
 80152a8:	600a      	str	r2, [r1, #0]
 80152aa:	1d21      	adds	r1, r4, #4
 80152ac:	f7ff fa24 	bl	80146f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80152b0:	f001 fa2e 	bl	8016710 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80152b4:	6833      	ldr	r3, [r6, #0]
 80152b6:	b173      	cbz	r3, 80152d6 <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80152b8:	682a      	ldr	r2, [r5, #0]
 80152ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80152bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80152be:	429a      	cmp	r2, r3
 80152c0:	d209      	bcs.n	80152d6 <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80152c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80152c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80152ce:	f3bf 8f4f 	dsb	sy
 80152d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80152da:	682a      	ldr	r2, [r5, #0]
 80152dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80152de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80152e0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8015374 <prvAddNewTaskToReadyList+0x10c>
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d8d2      	bhi.n	801528e <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 80152e8:	602c      	str	r4, [r5, #0]
 80152ea:	e7d0      	b.n	801528e <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80152ec:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80152ee:	6813      	ldr	r3, [r2, #0]
 80152f0:	2b01      	cmp	r3, #1
 80152f2:	d004      	beq.n	80152fe <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 80152f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80152f6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8015374 <prvAddNewTaskToReadyList+0x10c>
 80152fa:	4e15      	ldr	r6, [pc, #84]	; (8015350 <prvAddNewTaskToReadyList+0xe8>)
 80152fc:	e7c7      	b.n	801528e <prvAddNewTaskToReadyList+0x26>
 80152fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015374 <prvAddNewTaskToReadyList+0x10c>
 8015302:	4646      	mov	r6, r8
 8015304:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015308:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801530a:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801530c:	f7ff f9e4 	bl	80146d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015310:	42b7      	cmp	r7, r6
 8015312:	d1f9      	bne.n	8015308 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015314:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8015378 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8015318:	4f10      	ldr	r7, [pc, #64]	; (801535c <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 801531a:	4648      	mov	r0, r9
 801531c:	4e0c      	ldr	r6, [pc, #48]	; (8015350 <prvAddNewTaskToReadyList+0xe8>)
 801531e:	f7ff f9db 	bl	80146d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015322:	4638      	mov	r0, r7
 8015324:	f7ff f9d8 	bl	80146d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015328:	480d      	ldr	r0, [pc, #52]	; (8015360 <prvAddNewTaskToReadyList+0xf8>)
 801532a:	f7ff f9d5 	bl	80146d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801532e:	480d      	ldr	r0, [pc, #52]	; (8015364 <prvAddNewTaskToReadyList+0xfc>)
 8015330:	f7ff f9d2 	bl	80146d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015334:	480c      	ldr	r0, [pc, #48]	; (8015368 <prvAddNewTaskToReadyList+0x100>)
 8015336:	f7ff f9cf 	bl	80146d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801533a:	4b0c      	ldr	r3, [pc, #48]	; (801536c <prvAddNewTaskToReadyList+0x104>)
 801533c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015340:	4b0b      	ldr	r3, [pc, #44]	; (8015370 <prvAddNewTaskToReadyList+0x108>)
 8015342:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8015346:	e7a2      	b.n	801528e <prvAddNewTaskToReadyList+0x26>
 8015348:	20006148 	.word	0x20006148
 801534c:	200060b0 	.word	0x200060b0
 8015350:	200061a4 	.word	0x200061a4
 8015354:	20006158 	.word	0x20006158
 8015358:	2000615c 	.word	0x2000615c
 801535c:	20006174 	.word	0x20006174
 8015360:	20006190 	.word	0x20006190
 8015364:	200061bc 	.word	0x200061bc
 8015368:	200061a8 	.word	0x200061a8
 801536c:	200060b4 	.word	0x200060b4
 8015370:	200060b8 	.word	0x200060b8
 8015374:	200060bc 	.word	0x200060bc
 8015378:	20006160 	.word	0x20006160

0801537c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801537e:	4b1b      	ldr	r3, [pc, #108]	; (80153ec <prvAddCurrentTaskToDelayedList+0x70>)
{
 8015380:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015382:	4e1b      	ldr	r6, [pc, #108]	; (80153f0 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8015384:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8015386:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015388:	6833      	ldr	r3, [r6, #0]
 801538a:	1d18      	adds	r0, r3, #4
 801538c:	f7ff f9dc 	bl	8014748 <uxListRemove>
 8015390:	b948      	cbnz	r0, 80153a6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015392:	6833      	ldr	r3, [r6, #0]
 8015394:	4917      	ldr	r1, [pc, #92]	; (80153f4 <prvAddCurrentTaskToDelayedList+0x78>)
 8015396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015398:	2301      	movs	r3, #1
 801539a:	fa03 f202 	lsl.w	r2, r3, r2
 801539e:	680b      	ldr	r3, [r1, #0]
 80153a0:	ea23 0302 	bic.w	r3, r3, r2
 80153a4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153a6:	1c63      	adds	r3, r4, #1
 80153a8:	d100      	bne.n	80153ac <prvAddCurrentTaskToDelayedList+0x30>
 80153aa:	b9bf      	cbnz	r7, 80153dc <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80153ac:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80153ae:	6833      	ldr	r3, [r6, #0]
 80153b0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80153b2:	d307      	bcc.n	80153c4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153b4:	4b10      	ldr	r3, [pc, #64]	; (80153f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80153b6:	6818      	ldr	r0, [r3, #0]
 80153b8:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80153ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153be:	3104      	adds	r1, #4
 80153c0:	f7ff b9aa 	b.w	8014718 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153c4:	4b0d      	ldr	r3, [pc, #52]	; (80153fc <prvAddCurrentTaskToDelayedList+0x80>)
 80153c6:	6818      	ldr	r0, [r3, #0]
 80153c8:	6831      	ldr	r1, [r6, #0]
 80153ca:	3104      	adds	r1, #4
 80153cc:	f7ff f9a4 	bl	8014718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153d0:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <prvAddCurrentTaskToDelayedList+0x84>)
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	42a2      	cmp	r2, r4
 80153d6:	d900      	bls.n	80153da <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 80153d8:	601c      	str	r4, [r3, #0]
}
 80153da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153dc:	6831      	ldr	r1, [r6, #0]
 80153de:	4809      	ldr	r0, [pc, #36]	; (8015404 <prvAddCurrentTaskToDelayedList+0x88>)
 80153e0:	3104      	adds	r1, #4
}
 80153e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153e6:	f7ff b987 	b.w	80146f8 <vListInsertEnd>
 80153ea:	bf00      	nop
 80153ec:	200061d0 	.word	0x200061d0
 80153f0:	200060b0 	.word	0x200060b0
 80153f4:	2000615c 	.word	0x2000615c
 80153f8:	200060b8 	.word	0x200060b8
 80153fc:	200060b4 	.word	0x200060b4
 8015400:	20006188 	.word	0x20006188
 8015404:	200061a8 	.word	0x200061a8

08015408 <prvDeleteTCB>:
	{
 8015408:	b510      	push	{r4, lr}
 801540a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801540c:	304c      	adds	r0, #76	; 0x4c
 801540e:	f00f f869 	bl	80244e4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015412:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8015416:	b173      	cbz	r3, 8015436 <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015418:	2b01      	cmp	r3, #1
 801541a:	d015      	beq.n	8015448 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801541c:	2b02      	cmp	r3, #2
 801541e:	d012      	beq.n	8015446 <prvDeleteTCB+0x3e>
	__asm volatile
 8015420:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015424:	b672      	cpsid	i
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	b662      	cpsie	i
 8015434:	e7fe      	b.n	8015434 <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 8015436:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015438:	f001 fb4a 	bl	8016ad0 <vPortFree>
				vPortFree( pxTCB );
 801543c:	4620      	mov	r0, r4
	}
 801543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015442:	f001 bb45 	b.w	8016ad0 <vPortFree>
	}
 8015446:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8015448:	4620      	mov	r0, r4
	}
 801544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801544e:	f001 bb3f 	b.w	8016ad0 <vPortFree>
 8015452:	bf00      	nop

08015454 <prvIdleTask>:
{
 8015454:	4c16      	ldr	r4, [pc, #88]	; (80154b0 <prvIdleTask+0x5c>)
				taskYIELD();
 8015456:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801545a:	4e16      	ldr	r6, [pc, #88]	; (80154b4 <prvIdleTask+0x60>)
 801545c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8015460:	4d15      	ldr	r5, [pc, #84]	; (80154b8 <prvIdleTask+0x64>)
 8015462:	f8df a058 	ldr.w	sl, [pc, #88]	; 80154bc <prvIdleTask+0x68>
{
 8015466:	b580      	push	{r7, lr}
 8015468:	e011      	b.n	801548e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 801546a:	f001 f92b 	bl	80166c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801546e:	68f3      	ldr	r3, [r6, #12]
 8015470:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015472:	1d38      	adds	r0, r7, #4
 8015474:	f7ff f968 	bl	8014748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015478:	682b      	ldr	r3, [r5, #0]
 801547a:	3b01      	subs	r3, #1
 801547c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801547e:	6823      	ldr	r3, [r4, #0]
 8015480:	3b01      	subs	r3, #1
 8015482:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8015484:	f001 f944 	bl	8016710 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8015488:	4638      	mov	r0, r7
 801548a:	f7ff ffbd 	bl	8015408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801548e:	6823      	ldr	r3, [r4, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d1ea      	bne.n	801546a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015494:	f8da 3000 	ldr.w	r3, [sl]
 8015498:	2b01      	cmp	r3, #1
 801549a:	d905      	bls.n	80154a8 <prvIdleTask+0x54>
				taskYIELD();
 801549c:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80154a0:	f3bf 8f4f 	dsb	sy
 80154a4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80154a8:	f7eb fbe4 	bl	8000c74 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80154ac:	e7ef      	b.n	801548e <prvIdleTask+0x3a>
 80154ae:	bf00      	nop
 80154b0:	2000614c 	.word	0x2000614c
 80154b4:	200061bc 	.word	0x200061bc
 80154b8:	20006148 	.word	0x20006148
 80154bc:	200060bc 	.word	0x200060bc

080154c0 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 80154c0:	4b1d      	ldr	r3, [pc, #116]	; (8015538 <vTaskSwitchContext.part.0+0x78>)
 80154c2:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 80154c4:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 80154c6:	4c1d      	ldr	r4, [pc, #116]	; (801553c <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 80154c8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80154ca:	6822      	ldr	r2, [r4, #0]
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	6812      	ldr	r2, [r2, #0]
 80154d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d927      	bls.n	8015526 <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154d6:	4b1a      	ldr	r3, [pc, #104]	; (8015540 <vTaskSwitchContext.part.0+0x80>)
 80154d8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80154da:	fab3 f383 	clz	r3, r3
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	4a18      	ldr	r2, [pc, #96]	; (8015544 <vTaskSwitchContext.part.0+0x84>)
 80154e2:	f1c3 031f 	rsb	r3, r3, #31
 80154e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80154ea:	0099      	lsls	r1, r3, #2
 80154ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80154f0:	5850      	ldr	r0, [r2, r1]
 80154f2:	b950      	cbnz	r0, 801550a <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 80154f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154f8:	b672      	cpsid	i
 80154fa:	f383 8811 	msr	BASEPRI, r3
 80154fe:	f3bf 8f6f 	isb	sy
 8015502:	f3bf 8f4f 	dsb	sy
 8015506:	b662      	cpsie	i
 8015508:	e7fe      	b.n	8015508 <vTaskSwitchContext.part.0+0x48>
 801550a:	6858      	ldr	r0, [r3, #4]
 801550c:	3108      	adds	r1, #8
 801550e:	6840      	ldr	r0, [r0, #4]
 8015510:	440a      	add	r2, r1
 8015512:	4290      	cmp	r0, r2
 8015514:	6058      	str	r0, [r3, #4]
 8015516:	d00c      	beq.n	8015532 <vTaskSwitchContext.part.0+0x72>
 8015518:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801551a:	4a0b      	ldr	r2, [pc, #44]	; (8015548 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801551c:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801551e:	6823      	ldr	r3, [r4, #0]
 8015520:	334c      	adds	r3, #76	; 0x4c
 8015522:	6013      	str	r3, [r2, #0]
}
 8015524:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8015526:	6820      	ldr	r0, [r4, #0]
 8015528:	6821      	ldr	r1, [r4, #0]
 801552a:	3134      	adds	r1, #52	; 0x34
 801552c:	f7eb fba4 	bl	8000c78 <vApplicationStackOverflowHook>
 8015530:	e7d1      	b.n	80154d6 <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015532:	6840      	ldr	r0, [r0, #4]
 8015534:	6058      	str	r0, [r3, #4]
 8015536:	e7ef      	b.n	8015518 <vTaskSwitchContext.part.0+0x58>
 8015538:	200061d4 	.word	0x200061d4
 801553c:	200060b0 	.word	0x200060b0
 8015540:	2000615c 	.word	0x2000615c
 8015544:	200060bc 	.word	0x200060bc
 8015548:	20000488 	.word	0x20000488

0801554c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015552:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015554:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8015558:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801555a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801555c:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801555e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015562:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015566:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 801556a:	2900      	cmp	r1, #0
 801556c:	d041      	beq.n	80155f2 <prvInitialiseNewTask.constprop.0+0xa6>
 801556e:	f101 3cff 	add.w	ip, r1, #4294967295
 8015572:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8015576:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015578:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 801557c:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8015580:	b10d      	cbz	r5, 8015586 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015582:	458c      	cmp	ip, r1
 8015584:	d1f8      	bne.n	8015578 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015586:	2300      	movs	r3, #0
 8015588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801558c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 801558e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015592:	1d20      	adds	r0, r4, #4
 8015594:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8015596:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 801559a:	bf28      	it	cs
 801559c:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 801559e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80155a0:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155a2:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80155a6:	f7ff f8a3 	bl	80146f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80155aa:	f104 0018 	add.w	r0, r4, #24
 80155ae:	f7ff f89f 	bl	80146f0 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155b2:	4651      	mov	r1, sl
 80155b4:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 80155b6:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155ba:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80155c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80155c2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80155c4:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155c8:	f00d fefe 	bl	80233c8 <memset>
 80155cc:	4b0a      	ldr	r3, [pc, #40]	; (80155f8 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80155ce:	464a      	mov	r2, r9
 80155d0:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155d2:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80155d4:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80155d6:	4b09      	ldr	r3, [pc, #36]	; (80155fc <prvInitialiseNewTask.constprop.0+0xb0>)
 80155d8:	6563      	str	r3, [r4, #84]	; 0x54
 80155da:	4b09      	ldr	r3, [pc, #36]	; (8015600 <prvInitialiseNewTask.constprop.0+0xb4>)
 80155dc:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80155de:	f001 f847 	bl	8016670 <pxPortInitialiseStack>
 80155e2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80155e4:	f1b8 0f00 	cmp.w	r8, #0
 80155e8:	d001      	beq.n	80155ee <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80155ea:	f8c8 4000 	str.w	r4, [r8]
}
 80155ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80155f2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80155f6:	e7c9      	b.n	801558c <prvInitialiseNewTask.constprop.0+0x40>
 80155f8:	0804472c 	.word	0x0804472c
 80155fc:	0804474c 	.word	0x0804474c
 8015600:	0804470c 	.word	0x0804470c

08015604 <xTaskCreateStatic>:
	{
 8015604:	b530      	push	{r4, r5, lr}
 8015606:	b087      	sub	sp, #28
 8015608:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801560a:	b1e4      	cbz	r4, 8015646 <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 801560c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801560e:	b17d      	cbz	r5, 8015630 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8015610:	25b4      	movs	r5, #180	; 0xb4
 8015612:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015614:	9d05      	ldr	r5, [sp, #20]
 8015616:	2db4      	cmp	r5, #180	; 0xb4
 8015618:	d020      	beq.n	801565c <xTaskCreateStatic+0x58>
 801561a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801561e:	b672      	cpsid	i
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	b662      	cpsie	i
 801562e:	e7fe      	b.n	801562e <xTaskCreateStatic+0x2a>
 8015630:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015634:	b672      	cpsid	i
 8015636:	f383 8811 	msr	BASEPRI, r3
 801563a:	f3bf 8f6f 	isb	sy
 801563e:	f3bf 8f4f 	dsb	sy
 8015642:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8015644:	e7fe      	b.n	8015644 <xTaskCreateStatic+0x40>
 8015646:	f04f 0330 	mov.w	r3, #48	; 0x30
 801564a:	b672      	cpsid	i
 801564c:	f383 8811 	msr	BASEPRI, r3
 8015650:	f3bf 8f6f 	isb	sy
 8015654:	f3bf 8f4f 	dsb	sy
 8015658:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 801565a:	e7fe      	b.n	801565a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801565c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801565e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015660:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015662:	9502      	str	r5, [sp, #8]
 8015664:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015666:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015668:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801566a:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801566e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015670:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015672:	9401      	str	r4, [sp, #4]
 8015674:	f7ff ff6a 	bl	801554c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015678:	980c      	ldr	r0, [sp, #48]	; 0x30
 801567a:	f7ff fdf5 	bl	8015268 <prvAddNewTaskToReadyList>
	}
 801567e:	9804      	ldr	r0, [sp, #16]
 8015680:	b007      	add	sp, #28
 8015682:	bd30      	pop	{r4, r5, pc}

08015684 <xTaskCreate>:
	{
 8015684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015688:	4607      	mov	r7, r0
 801568a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801568c:	0090      	lsls	r0, r2, #2
	{
 801568e:	4615      	mov	r5, r2
 8015690:	4688      	mov	r8, r1
 8015692:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015694:	f001 f980 	bl	8016998 <pvPortMalloc>
			if( pxStack != NULL )
 8015698:	b1d8      	cbz	r0, 80156d2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801569a:	4604      	mov	r4, r0
 801569c:	20b4      	movs	r0, #180	; 0xb4
 801569e:	f001 f97b 	bl	8016998 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80156a2:	4606      	mov	r6, r0
 80156a4:	b1d0      	cbz	r0, 80156dc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80156a6:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80156a8:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80156aa:	464b      	mov	r3, r9
 80156ac:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80156ae:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80156b2:	4641      	mov	r1, r8
 80156b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80156b6:	4638      	mov	r0, r7
 80156b8:	9602      	str	r6, [sp, #8]
 80156ba:	9401      	str	r4, [sp, #4]
 80156bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80156be:	9400      	str	r4, [sp, #0]
 80156c0:	f7ff ff44 	bl	801554c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80156c4:	4630      	mov	r0, r6
 80156c6:	f7ff fdcf 	bl	8015268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80156ca:	2001      	movs	r0, #1
	}
 80156cc:	b005      	add	sp, #20
 80156ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80156d2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80156d6:	b005      	add	sp, #20
 80156d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80156dc:	4620      	mov	r0, r4
 80156de:	f001 f9f7 	bl	8016ad0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80156e2:	f04f 30ff 	mov.w	r0, #4294967295
 80156e6:	e7f1      	b.n	80156cc <xTaskCreate+0x48>

080156e8 <vTaskStartScheduler>:
{
 80156e8:	b510      	push	{r4, lr}
 80156ea:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80156ec:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80156ee:	aa07      	add	r2, sp, #28
 80156f0:	a906      	add	r1, sp, #24
 80156f2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80156f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80156f8:	f7eb fac2 	bl	8000c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80156fc:	4623      	mov	r3, r4
 80156fe:	9a07      	ldr	r2, [sp, #28]
 8015700:	9400      	str	r4, [sp, #0]
 8015702:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8015706:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801570a:	491a      	ldr	r1, [pc, #104]	; (8015774 <vTaskStartScheduler+0x8c>)
 801570c:	481a      	ldr	r0, [pc, #104]	; (8015778 <vTaskStartScheduler+0x90>)
 801570e:	f7ff ff79 	bl	8015604 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8015712:	b1f8      	cbz	r0, 8015754 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8015714:	f000 fcfa 	bl	801610c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8015718:	2801      	cmp	r0, #1
 801571a:	d11d      	bne.n	8015758 <vTaskStartScheduler+0x70>
 801571c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015720:	b672      	cpsid	i
 8015722:	f383 8811 	msr	BASEPRI, r3
 8015726:	f3bf 8f6f 	isb	sy
 801572a:	f3bf 8f4f 	dsb	sy
 801572e:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015730:	4b12      	ldr	r3, [pc, #72]	; (801577c <vTaskStartScheduler+0x94>)
 8015732:	4a13      	ldr	r2, [pc, #76]	; (8015780 <vTaskStartScheduler+0x98>)
 8015734:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8015736:	4913      	ldr	r1, [pc, #76]	; (8015784 <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015738:	334c      	adds	r3, #76	; 0x4c
 801573a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801573c:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8015740:	4a11      	ldr	r2, [pc, #68]	; (8015788 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8015742:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015744:	4b11      	ldr	r3, [pc, #68]	; (801578c <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 8015746:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015748:	601c      	str	r4, [r3, #0]
}
 801574a:	b008      	add	sp, #32
 801574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8015750:	f001 b854 	b.w	80167fc <xPortStartScheduler>
}
 8015754:	b008      	add	sp, #32
 8015756:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015758:	3001      	adds	r0, #1
 801575a:	d1fb      	bne.n	8015754 <vTaskStartScheduler+0x6c>
 801575c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015760:	b672      	cpsid	i
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	b662      	cpsie	i
 8015770:	e7fe      	b.n	8015770 <vTaskStartScheduler+0x88>
 8015772:	bf00      	nop
 8015774:	0802b798 	.word	0x0802b798
 8015778:	08015455 	.word	0x08015455
 801577c:	200060b0 	.word	0x200060b0
 8015780:	20000488 	.word	0x20000488
 8015784:	20006188 	.word	0x20006188
 8015788:	200061a4 	.word	0x200061a4
 801578c:	200061d0 	.word	0x200061d0

08015790 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8015790:	4a02      	ldr	r2, [pc, #8]	; (801579c <vTaskSuspendAll+0xc>)
 8015792:	6813      	ldr	r3, [r2, #0]
 8015794:	3301      	adds	r3, #1
 8015796:	6013      	str	r3, [r2, #0]
}
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop
 801579c:	20006154 	.word	0x20006154

080157a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80157a0:	4b01      	ldr	r3, [pc, #4]	; (80157a8 <xTaskGetTickCount+0x8>)
 80157a2:	6818      	ldr	r0, [r3, #0]
}
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	200061d0 	.word	0x200061d0

080157ac <xTaskGetTickCountFromISR>:
{
 80157ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157ae:	f001 f88f 	bl	80168d0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80157b2:	4b01      	ldr	r3, [pc, #4]	; (80157b8 <xTaskGetTickCountFromISR+0xc>)
 80157b4:	6818      	ldr	r0, [r3, #0]
}
 80157b6:	bd08      	pop	{r3, pc}
 80157b8:	200061d0 	.word	0x200061d0

080157bc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157bc:	4b52      	ldr	r3, [pc, #328]	; (8015908 <xTaskIncrementTick+0x14c>)
 80157be:	681b      	ldr	r3, [r3, #0]
{
 80157c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c4:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d14c      	bne.n	8015864 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80157ca:	4b50      	ldr	r3, [pc, #320]	; (801590c <xTaskIncrementTick+0x150>)
 80157cc:	681d      	ldr	r5, [r3, #0]
 80157ce:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80157d0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80157d2:	2d00      	cmp	r5, #0
 80157d4:	d054      	beq.n	8015880 <xTaskIncrementTick+0xc4>
 80157d6:	4b4e      	ldr	r3, [pc, #312]	; (8015910 <xTaskIncrementTick+0x154>)
 80157d8:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80157da:	9b01      	ldr	r3, [sp, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	42ab      	cmp	r3, r5
 80157e0:	d85d      	bhi.n	801589e <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157e2:	4e4c      	ldr	r6, [pc, #304]	; (8015914 <xTaskIncrementTick+0x158>)
 80157e4:	6833      	ldr	r3, [r6, #0]
 80157e6:	681c      	ldr	r4, [r3, #0]
 80157e8:	2c00      	cmp	r4, #0
 80157ea:	d07c      	beq.n	80158e6 <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 80157ec:	2400      	movs	r4, #0
 80157ee:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801592c <xTaskIncrementTick+0x170>
 80157f2:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8015930 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 80157f6:	f04f 0a01 	mov.w	sl, #1
 80157fa:	4f47      	ldr	r7, [pc, #284]	; (8015918 <xTaskIncrementTick+0x15c>)
 80157fc:	e024      	b.n	8015848 <xTaskIncrementTick+0x8c>
 80157fe:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015800:	f7fe ffa2 	bl	8014748 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015804:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015808:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801580c:	9900      	ldr	r1, [sp, #0]
 801580e:	b112      	cbz	r2, 8015816 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015810:	f7fe ff9a 	bl	8014748 <uxListRemove>
 8015814:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8015816:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	fa0a f200 	lsl.w	r2, sl, r0
 8015820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015824:	431a      	orrs	r2, r3
 8015826:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801582a:	603a      	str	r2, [r7, #0]
 801582c:	f7fe ff64 	bl	80146f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015830:	f8d9 3000 	ldr.w	r3, [r9]
 8015834:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8015838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801583a:	429a      	cmp	r2, r3
 801583c:	bf28      	it	cs
 801583e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015840:	6833      	ldr	r3, [r6, #0]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d052      	beq.n	80158ee <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015848:	6833      	ldr	r3, [r6, #0]
 801584a:	68db      	ldr	r3, [r3, #12]
 801584c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015850:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015854:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8015858:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801585a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 801585c:	d2cf      	bcs.n	80157fe <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 801585e:	9b01      	ldr	r3, [sp, #4]
 8015860:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015862:	e021      	b.n	80158a8 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 8015864:	4a2d      	ldr	r2, [pc, #180]	; (801591c <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 8015866:	2400      	movs	r4, #0
		++uxPendedTicks;
 8015868:	6813      	ldr	r3, [r2, #0]
 801586a:	3301      	adds	r3, #1
 801586c:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 801586e:	4b2c      	ldr	r3, [pc, #176]	; (8015920 <xTaskIncrementTick+0x164>)
 8015870:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8015872:	2b00      	cmp	r3, #0
}
 8015874:	bf0c      	ite	eq
 8015876:	4620      	moveq	r0, r4
 8015878:	2001      	movne	r0, #1
 801587a:	b003      	add	sp, #12
 801587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8015880:	4b24      	ldr	r3, [pc, #144]	; (8015914 <xTaskIncrementTick+0x158>)
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	6812      	ldr	r2, [r2, #0]
 8015886:	b1da      	cbz	r2, 80158c0 <xTaskIncrementTick+0x104>
 8015888:	f04f 0330 	mov.w	r3, #48	; 0x30
 801588c:	b672      	cpsid	i
 801588e:	f383 8811 	msr	BASEPRI, r3
 8015892:	f3bf 8f6f 	isb	sy
 8015896:	f3bf 8f4f 	dsb	sy
 801589a:	b662      	cpsie	i
 801589c:	e7fe      	b.n	801589c <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 801589e:	2400      	movs	r4, #0
 80158a0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801592c <xTaskIncrementTick+0x170>
 80158a4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8015930 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80158a8:	f8d9 3000 	ldr.w	r3, [r9]
 80158ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 80158b8:	2b02      	cmp	r3, #2
 80158ba:	bf28      	it	cs
 80158bc:	2401      	movcs	r4, #1
 80158be:	e7d6      	b.n	801586e <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 80158c0:	4a18      	ldr	r2, [pc, #96]	; (8015924 <xTaskIncrementTick+0x168>)
 80158c2:	6818      	ldr	r0, [r3, #0]
 80158c4:	6811      	ldr	r1, [r2, #0]
 80158c6:	6019      	str	r1, [r3, #0]
 80158c8:	4917      	ldr	r1, [pc, #92]	; (8015928 <xTaskIncrementTick+0x16c>)
 80158ca:	6010      	str	r0, [r2, #0]
 80158cc:	680a      	ldr	r2, [r1, #0]
 80158ce:	3201      	adds	r2, #1
 80158d0:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	6812      	ldr	r2, [r2, #0]
 80158d6:	b97a      	cbnz	r2, 80158f8 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 80158d8:	4b0d      	ldr	r3, [pc, #52]	; (8015910 <xTaskIncrementTick+0x154>)
 80158da:	461a      	mov	r2, r3
 80158dc:	9301      	str	r3, [sp, #4]
 80158de:	f04f 33ff 	mov.w	r3, #4294967295
 80158e2:	6013      	str	r3, [r2, #0]
 80158e4:	e779      	b.n	80157da <xTaskIncrementTick+0x1e>
 80158e6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801592c <xTaskIncrementTick+0x170>
 80158ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8015930 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158ee:	f04f 33ff 	mov.w	r3, #4294967295
 80158f2:	9a01      	ldr	r2, [sp, #4]
 80158f4:	6013      	str	r3, [r2, #0]
					break;
 80158f6:	e7d7      	b.n	80158a8 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158f8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80158fa:	4a05      	ldr	r2, [pc, #20]	; (8015910 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158fc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80158fe:	9201      	str	r2, [sp, #4]
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	6013      	str	r3, [r2, #0]
}
 8015906:	e768      	b.n	80157da <xTaskIncrementTick+0x1e>
 8015908:	20006154 	.word	0x20006154
 801590c:	200061d0 	.word	0x200061d0
 8015910:	20006188 	.word	0x20006188
 8015914:	200060b4 	.word	0x200060b4
 8015918:	2000615c 	.word	0x2000615c
 801591c:	20006150 	.word	0x20006150
 8015920:	200061d4 	.word	0x200061d4
 8015924:	200060b8 	.word	0x200060b8
 8015928:	2000618c 	.word	0x2000618c
 801592c:	200060bc 	.word	0x200060bc
 8015930:	200060b0 	.word	0x200060b0

08015934 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8015934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015938:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801593a:	f000 fec3 	bl	80166c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801593e:	4b38      	ldr	r3, [pc, #224]	; (8015a20 <xTaskResumeAll.part.0+0xec>)
 8015940:	681a      	ldr	r2, [r3, #0]
 8015942:	3a01      	subs	r2, #1
 8015944:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d159      	bne.n	8015a00 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801594c:	4b35      	ldr	r3, [pc, #212]	; (8015a24 <xTaskResumeAll.part.0+0xf0>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d055      	beq.n	8015a00 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015954:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015a3c <xTaskResumeAll.part.0+0x108>
 8015958:	f8da 3000 	ldr.w	r3, [sl]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d05c      	beq.n	8015a1a <xTaskResumeAll.part.0+0xe6>
 8015960:	4d31      	ldr	r5, [pc, #196]	; (8015a28 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8015962:	2601      	movs	r6, #1
 8015964:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8015a40 <xTaskResumeAll.part.0+0x10c>
 8015968:	4f30      	ldr	r7, [pc, #192]	; (8015a2c <xTaskResumeAll.part.0+0xf8>)
 801596a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8015a44 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801596e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8015972:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015974:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015978:	f104 0018 	add.w	r0, r4, #24
 801597c:	f7fe fee4 	bl	8014748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015980:	4658      	mov	r0, fp
 8015982:	f7fe fee1 	bl	8014748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015986:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015988:	682a      	ldr	r2, [r5, #0]
 801598a:	4659      	mov	r1, fp
 801598c:	fa06 f300 	lsl.w	r3, r6, r0
 8015990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015994:	4313      	orrs	r3, r2
 8015996:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801599a:	602b      	str	r3, [r5, #0]
 801599c:	f7fe feac 	bl	80146f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80159a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d301      	bcc.n	80159ae <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 80159aa:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159ae:	f8da 3000 	ldr.w	r3, [sl]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d1db      	bne.n	801596e <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159b6:	4b1e      	ldr	r3, [pc, #120]	; (8015a30 <xTaskResumeAll.part.0+0xfc>)
 80159b8:	681a      	ldr	r2, [r3, #0]
 80159ba:	6812      	ldr	r2, [r2, #0]
 80159bc:	b342      	cbz	r2, 8015a10 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159be:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80159c0:	4b1c      	ldr	r3, [pc, #112]	; (8015a34 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159c2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80159c4:	68d2      	ldr	r2, [r2, #12]
 80159c6:	6852      	ldr	r2, [r2, #4]
 80159c8:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80159ca:	4e1b      	ldr	r6, [pc, #108]	; (8015a38 <xTaskResumeAll.part.0+0x104>)
 80159cc:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80159ce:	b144      	cbz	r4, 80159e2 <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 80159d0:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80159d2:	f7ff fef3 	bl	80157bc <xTaskIncrementTick>
 80159d6:	b108      	cbz	r0, 80159dc <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 80159d8:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80159dc:	3c01      	subs	r4, #1
 80159de:	d1f8      	bne.n	80159d2 <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 80159e0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80159e2:	f8d9 3000 	ldr.w	r3, [r9]
 80159e6:	b15b      	cbz	r3, 8015a00 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 80159e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80159ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80159fc:	2001      	movs	r0, #1
 80159fe:	e000      	b.n	8015a02 <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8015a00:	2000      	movs	r0, #0
 8015a02:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8015a04:	f000 fe84 	bl	8016710 <vPortExitCritical>
}
 8015a08:	9801      	ldr	r0, [sp, #4]
 8015a0a:	b003      	add	sp, #12
 8015a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8015a10:	4b08      	ldr	r3, [pc, #32]	; (8015a34 <xTaskResumeAll.part.0+0x100>)
 8015a12:	f04f 32ff 	mov.w	r2, #4294967295
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	e7d7      	b.n	80159ca <xTaskResumeAll.part.0+0x96>
 8015a1a:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8015a44 <xTaskResumeAll.part.0+0x110>
 8015a1e:	e7d4      	b.n	80159ca <xTaskResumeAll.part.0+0x96>
 8015a20:	20006154 	.word	0x20006154
 8015a24:	20006148 	.word	0x20006148
 8015a28:	2000615c 	.word	0x2000615c
 8015a2c:	200060b0 	.word	0x200060b0
 8015a30:	200060b4 	.word	0x200060b4
 8015a34:	20006188 	.word	0x20006188
 8015a38:	20006150 	.word	0x20006150
 8015a3c:	20006190 	.word	0x20006190
 8015a40:	200060bc 	.word	0x200060bc
 8015a44:	200061d4 	.word	0x200061d4

08015a48 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8015a48:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <xTaskResumeAll+0x20>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	b953      	cbnz	r3, 8015a64 <xTaskResumeAll+0x1c>
 8015a4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a52:	b672      	cpsid	i
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	b662      	cpsie	i
 8015a62:	e7fe      	b.n	8015a62 <xTaskResumeAll+0x1a>
 8015a64:	f7ff bf66 	b.w	8015934 <xTaskResumeAll.part.0>
 8015a68:	20006154 	.word	0x20006154

08015a6c <vTaskDelay>:
	{
 8015a6c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015a6e:	b950      	cbnz	r0, 8015a86 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8015a70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015a7c:	f3bf 8f4f 	dsb	sy
 8015a80:	f3bf 8f6f 	isb	sy
	}
 8015a84:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8015a86:	4c12      	ldr	r4, [pc, #72]	; (8015ad0 <vTaskDelay+0x64>)
 8015a88:	6821      	ldr	r1, [r4, #0]
 8015a8a:	b151      	cbz	r1, 8015aa2 <vTaskDelay+0x36>
 8015a8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a90:	b672      	cpsid	i
 8015a92:	f383 8811 	msr	BASEPRI, r3
 8015a96:	f3bf 8f6f 	isb	sy
 8015a9a:	f3bf 8f4f 	dsb	sy
 8015a9e:	b662      	cpsie	i
 8015aa0:	e7fe      	b.n	8015aa0 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015aa8:	f7ff fc68 	bl	801537c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	b953      	cbnz	r3, 8015ac6 <vTaskDelay+0x5a>
 8015ab0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ab4:	b672      	cpsid	i
 8015ab6:	f383 8811 	msr	BASEPRI, r3
 8015aba:	f3bf 8f6f 	isb	sy
 8015abe:	f3bf 8f4f 	dsb	sy
 8015ac2:	b662      	cpsie	i
 8015ac4:	e7fe      	b.n	8015ac4 <vTaskDelay+0x58>
 8015ac6:	f7ff ff35 	bl	8015934 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8015aca:	2800      	cmp	r0, #0
 8015acc:	d0d0      	beq.n	8015a70 <vTaskDelay+0x4>
	}
 8015ace:	bd10      	pop	{r4, pc}
 8015ad0:	20006154 	.word	0x20006154

08015ad4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ad4:	4b04      	ldr	r3, [pc, #16]	; (8015ae8 <vTaskSwitchContext+0x14>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	b11b      	cbz	r3, 8015ae2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8015ada:	4b04      	ldr	r3, [pc, #16]	; (8015aec <vTaskSwitchContext+0x18>)
 8015adc:	2201      	movs	r2, #1
 8015ade:	601a      	str	r2, [r3, #0]
}
 8015ae0:	4770      	bx	lr
 8015ae2:	f7ff bced 	b.w	80154c0 <vTaskSwitchContext.part.0>
 8015ae6:	bf00      	nop
 8015ae8:	20006154 	.word	0x20006154
 8015aec:	200061d4 	.word	0x200061d4

08015af0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8015af0:	b160      	cbz	r0, 8015b0c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015af2:	4b0c      	ldr	r3, [pc, #48]	; (8015b24 <vTaskPlaceOnEventList+0x34>)
{
 8015af4:	b510      	push	{r4, lr}
 8015af6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015af8:	6819      	ldr	r1, [r3, #0]
 8015afa:	3118      	adds	r1, #24
 8015afc:	f7fe fe0c 	bl	8014718 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015b00:	4620      	mov	r0, r4
 8015b02:	2101      	movs	r1, #1
}
 8015b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015b08:	f7ff bc38 	b.w	801537c <prvAddCurrentTaskToDelayedList>
 8015b0c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b10:	b672      	cpsid	i
 8015b12:	f383 8811 	msr	BASEPRI, r3
 8015b16:	f3bf 8f6f 	isb	sy
 8015b1a:	f3bf 8f4f 	dsb	sy
 8015b1e:	b662      	cpsie	i
	configASSERT( pxEventList );
 8015b20:	e7fe      	b.n	8015b20 <vTaskPlaceOnEventList+0x30>
 8015b22:	bf00      	nop
 8015b24:	200060b0 	.word	0x200060b0

08015b28 <vTaskPlaceOnEventListRestricted>:
	{
 8015b28:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8015b2a:	b180      	cbz	r0, 8015b4e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015b2c:	4b0d      	ldr	r3, [pc, #52]	; (8015b64 <vTaskPlaceOnEventListRestricted+0x3c>)
 8015b2e:	460d      	mov	r5, r1
 8015b30:	4614      	mov	r4, r2
 8015b32:	6819      	ldr	r1, [r3, #0]
 8015b34:	3118      	adds	r1, #24
 8015b36:	f7fe fddf 	bl	80146f8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8015b3a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015b3c:	4621      	mov	r1, r4
 8015b3e:	bf0c      	ite	eq
 8015b40:	4628      	moveq	r0, r5
 8015b42:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8015b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015b4a:	f7ff bc17 	b.w	801537c <prvAddCurrentTaskToDelayedList>
 8015b4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b52:	b672      	cpsid	i
 8015b54:	f383 8811 	msr	BASEPRI, r3
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	f3bf 8f4f 	dsb	sy
 8015b60:	b662      	cpsie	i
		configASSERT( pxEventList );
 8015b62:	e7fe      	b.n	8015b62 <vTaskPlaceOnEventListRestricted+0x3a>
 8015b64:	200060b0 	.word	0x200060b0

08015b68 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b68:	68c3      	ldr	r3, [r0, #12]
{
 8015b6a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b6c:	68dc      	ldr	r4, [r3, #12]
{
 8015b6e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8015b70:	b364      	cbz	r4, 8015bcc <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015b72:	f104 0518 	add.w	r5, r4, #24
 8015b76:	4628      	mov	r0, r5
 8015b78:	f7fe fde6 	bl	8014748 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b7c:	4b1a      	ldr	r3, [pc, #104]	; (8015be8 <xTaskRemoveFromEventList+0x80>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	b17b      	cbz	r3, 8015ba2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015b82:	4629      	mov	r1, r5
 8015b84:	4819      	ldr	r0, [pc, #100]	; (8015bec <xTaskRemoveFromEventList+0x84>)
 8015b86:	f7fe fdb7 	bl	80146f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015b8a:	4b19      	ldr	r3, [pc, #100]	; (8015bf0 <xTaskRemoveFromEventList+0x88>)
 8015b8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d925      	bls.n	8015be2 <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8015b96:	2301      	movs	r3, #1
 8015b98:	4a16      	ldr	r2, [pc, #88]	; (8015bf4 <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8015b9a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8015b9c:	6013      	str	r3, [r2, #0]
}
 8015b9e:	b003      	add	sp, #12
 8015ba0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015ba2:	1d21      	adds	r1, r4, #4
 8015ba4:	4608      	mov	r0, r1
 8015ba6:	9101      	str	r1, [sp, #4]
 8015ba8:	f7fe fdce 	bl	8014748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015bac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015bae:	4a12      	ldr	r2, [pc, #72]	; (8015bf8 <xTaskRemoveFromEventList+0x90>)
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	9901      	ldr	r1, [sp, #4]
 8015bb4:	6815      	ldr	r5, [r2, #0]
 8015bb6:	4083      	lsls	r3, r0
 8015bb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015bbc:	432b      	orrs	r3, r5
 8015bbe:	6013      	str	r3, [r2, #0]
 8015bc0:	4b0e      	ldr	r3, [pc, #56]	; (8015bfc <xTaskRemoveFromEventList+0x94>)
 8015bc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015bc6:	f7fe fd97 	bl	80146f8 <vListInsertEnd>
 8015bca:	e7de      	b.n	8015b8a <xTaskRemoveFromEventList+0x22>
 8015bcc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bd0:	b672      	cpsid	i
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8015be0:	e7fe      	b.n	8015be0 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8015be2:	2000      	movs	r0, #0
}
 8015be4:	b003      	add	sp, #12
 8015be6:	bd30      	pop	{r4, r5, pc}
 8015be8:	20006154 	.word	0x20006154
 8015bec:	20006190 	.word	0x20006190
 8015bf0:	200060b0 	.word	0x200060b0
 8015bf4:	200061d4 	.word	0x200061d4
 8015bf8:	2000615c 	.word	0x2000615c
 8015bfc:	200060bc 	.word	0x200060bc

08015c00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015c00:	4a03      	ldr	r2, [pc, #12]	; (8015c10 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015c02:	4b04      	ldr	r3, [pc, #16]	; (8015c14 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015c04:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	e9c0 2300 	strd	r2, r3, [r0]
}
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop
 8015c10:	2000618c 	.word	0x2000618c
 8015c14:	200061d0 	.word	0x200061d0

08015c18 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8015c18:	b338      	cbz	r0, 8015c6a <xTaskCheckForTimeOut+0x52>
{
 8015c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c1c:	460d      	mov	r5, r1
 8015c1e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8015c20:	b1c1      	cbz	r1, 8015c54 <xTaskCheckForTimeOut+0x3c>
 8015c22:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8015c24:	f000 fd4e 	bl	80166c4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8015c28:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8015c2a:	4a1f      	ldr	r2, [pc, #124]	; (8015ca8 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8015c2c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8015c2e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8015c30:	d034      	beq.n	8015c9c <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015c32:	f8df c078 	ldr.w	ip, [pc, #120]	; 8015cac <xTaskCheckForTimeOut+0x94>
 8015c36:	6826      	ldr	r6, [r4, #0]
 8015c38:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015c3c:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015c3e:	42be      	cmp	r6, r7
 8015c40:	d01e      	beq.n	8015c80 <xTaskCheckForTimeOut+0x68>
 8015c42:	4288      	cmp	r0, r1
 8015c44:	d81c      	bhi.n	8015c80 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8015c46:	2001      	movs	r0, #1
 8015c48:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8015c4a:	f000 fd61 	bl	8016710 <vPortExitCritical>
}
 8015c4e:	9801      	ldr	r0, [sp, #4]
 8015c50:	b003      	add	sp, #12
 8015c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c58:	b672      	cpsid	i
 8015c5a:	f383 8811 	msr	BASEPRI, r3
 8015c5e:	f3bf 8f6f 	isb	sy
 8015c62:	f3bf 8f4f 	dsb	sy
 8015c66:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8015c68:	e7fe      	b.n	8015c68 <xTaskCheckForTimeOut+0x50>
 8015c6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c6e:	b672      	cpsid	i
 8015c70:	f383 8811 	msr	BASEPRI, r3
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	f3bf 8f4f 	dsb	sy
 8015c7c:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8015c7e:	e7fe      	b.n	8015c7e <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015c80:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015c84:	4573      	cmp	r3, lr
 8015c86:	d90b      	bls.n	8015ca0 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8015c88:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015c8a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015c8e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8015c90:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8015c92:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8015c94:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015c96:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8015c9a:	e7d5      	b.n	8015c48 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8015c9c:	2000      	movs	r0, #0
 8015c9e:	e7d3      	b.n	8015c48 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8015ca0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8015ca2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8015ca4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8015ca6:	e7cf      	b.n	8015c48 <xTaskCheckForTimeOut+0x30>
 8015ca8:	200061d0 	.word	0x200061d0
 8015cac:	2000618c 	.word	0x2000618c

08015cb0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8015cb0:	4b01      	ldr	r3, [pc, #4]	; (8015cb8 <vTaskMissedYield+0x8>)
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	601a      	str	r2, [r3, #0]
}
 8015cb6:	4770      	bx	lr
 8015cb8:	200061d4 	.word	0x200061d4

08015cbc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8015cbc:	4b01      	ldr	r3, [pc, #4]	; (8015cc4 <xTaskGetCurrentTaskHandle+0x8>)
 8015cbe:	6818      	ldr	r0, [r3, #0]
	}
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	200060b0 	.word	0x200060b0

08015cc8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8015cc8:	4b05      	ldr	r3, [pc, #20]	; (8015ce0 <xTaskGetSchedulerState+0x18>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	b133      	cbz	r3, 8015cdc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015cce:	4b05      	ldr	r3, [pc, #20]	; (8015ce4 <xTaskGetSchedulerState+0x1c>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	bf0c      	ite	eq
 8015cd6:	2002      	moveq	r0, #2
 8015cd8:	2000      	movne	r0, #0
 8015cda:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015cdc:	2001      	movs	r0, #1
	}
 8015cde:	4770      	bx	lr
 8015ce0:	200061a4 	.word	0x200061a4
 8015ce4:	20006154 	.word	0x20006154

08015ce8 <xTaskPriorityInherit>:
	{
 8015ce8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8015cea:	4604      	mov	r4, r0
	{
 8015cec:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8015cee:	b1c8      	cbz	r0, 8015d24 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015cf0:	4d26      	ldr	r5, [pc, #152]	; (8015d8c <xTaskPriorityInherit+0xa4>)
 8015cf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015cf4:	682a      	ldr	r2, [r5, #0]
 8015cf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d215      	bcs.n	8015d28 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015cfc:	6982      	ldr	r2, [r0, #24]
 8015cfe:	2a00      	cmp	r2, #0
 8015d00:	db04      	blt.n	8015d0c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d02:	682a      	ldr	r2, [r5, #0]
 8015d04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015d06:	f1c2 0207 	rsb	r2, r2, #7
 8015d0a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015d0c:	4e20      	ldr	r6, [pc, #128]	; (8015d90 <xTaskPriorityInherit+0xa8>)
 8015d0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015d12:	6962      	ldr	r2, [r4, #20]
 8015d14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d00e      	beq.n	8015d3a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015d1c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8015d1e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d22:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8015d24:	b002      	add	sp, #8
 8015d26:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015d28:	682b      	ldr	r3, [r5, #0]
 8015d2a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d2e:	4298      	cmp	r0, r3
 8015d30:	bf2c      	ite	cs
 8015d32:	2000      	movcs	r0, #0
 8015d34:	2001      	movcc	r0, #1
	}
 8015d36:	b002      	add	sp, #8
 8015d38:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015d3a:	1d21      	adds	r1, r4, #4
 8015d3c:	4608      	mov	r0, r1
 8015d3e:	9101      	str	r1, [sp, #4]
 8015d40:	f7fe fd02 	bl	8014748 <uxListRemove>
 8015d44:	9901      	ldr	r1, [sp, #4]
 8015d46:	b970      	cbnz	r0, 8015d66 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8015d48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8015d4a:	4a12      	ldr	r2, [pc, #72]	; (8015d94 <xTaskPriorityInherit+0xac>)
 8015d4c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	58f3      	ldr	r3, [r6, r3]
 8015d54:	b943      	cbnz	r3, 8015d68 <xTaskPriorityInherit+0x80>
 8015d56:	2301      	movs	r3, #1
 8015d58:	fa03 f000 	lsl.w	r0, r3, r0
 8015d5c:	6813      	ldr	r3, [r2, #0]
 8015d5e:	ea23 0300 	bic.w	r3, r3, r0
 8015d62:	6013      	str	r3, [r2, #0]
 8015d64:	e000      	b.n	8015d68 <xTaskPriorityInherit+0x80>
 8015d66:	4a0b      	ldr	r2, [pc, #44]	; (8015d94 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015d68:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015d6a:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015d70:	2401      	movs	r4, #1
 8015d72:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8015d76:	fa04 f303 	lsl.w	r3, r4, r3
 8015d7a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8015d7e:	432b      	orrs	r3, r5
 8015d80:	6013      	str	r3, [r2, #0]
 8015d82:	f7fe fcb9 	bl	80146f8 <vListInsertEnd>
				xReturn = pdTRUE;
 8015d86:	4620      	mov	r0, r4
 8015d88:	e7cc      	b.n	8015d24 <xTaskPriorityInherit+0x3c>
 8015d8a:	bf00      	nop
 8015d8c:	200060b0 	.word	0x200060b0
 8015d90:	200060bc 	.word	0x200060bc
 8015d94:	2000615c 	.word	0x2000615c

08015d98 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8015d98:	b340      	cbz	r0, 8015dec <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8015d9a:	4b2c      	ldr	r3, [pc, #176]	; (8015e4c <xTaskPriorityDisinherit+0xb4>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4283      	cmp	r3, r0
	{
 8015da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015da2:	4604      	mov	r4, r0
 8015da4:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8015da6:	d00a      	beq.n	8015dbe <xTaskPriorityDisinherit+0x26>
 8015da8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dac:	b672      	cpsid	i
 8015dae:	f383 8811 	msr	BASEPRI, r3
 8015db2:	f3bf 8f6f 	isb	sy
 8015db6:	f3bf 8f4f 	dsb	sy
 8015dba:	b662      	cpsie	i
 8015dbc:	e7fe      	b.n	8015dbc <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8015dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015dc0:	b14b      	cbz	r3, 8015dd6 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015dc2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8015dc4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015dc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8015dc8:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015dca:	4291      	cmp	r1, r2
 8015dcc:	d000      	beq.n	8015dd0 <xTaskPriorityDisinherit+0x38>
 8015dce:	b17b      	cbz	r3, 8015df0 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8015dd0:	2000      	movs	r0, #0
	}
 8015dd2:	b003      	add	sp, #12
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dda:	b672      	cpsid	i
 8015ddc:	f383 8811 	msr	BASEPRI, r3
 8015de0:	f3bf 8f6f 	isb	sy
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8015dea:	e7fe      	b.n	8015dea <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8015dec:	2000      	movs	r0, #0
	}
 8015dee:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015df0:	1d01      	adds	r1, r0, #4
 8015df2:	4608      	mov	r0, r1
 8015df4:	9101      	str	r1, [sp, #4]
 8015df6:	f7fe fca7 	bl	8014748 <uxListRemove>
 8015dfa:	9901      	ldr	r1, [sp, #4]
 8015dfc:	b1a0      	cbz	r0, 8015e28 <xTaskPriorityDisinherit+0x90>
 8015dfe:	4814      	ldr	r0, [pc, #80]	; (8015e50 <xTaskPriorityDisinherit+0xb8>)
 8015e00:	4a14      	ldr	r2, [pc, #80]	; (8015e54 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015e02:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8015e04:	2501      	movs	r5, #1
 8015e06:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e08:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e0e:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8015e10:	fa05 f403 	lsl.w	r4, r5, r3
 8015e14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015e18:	4334      	orrs	r4, r6
 8015e1a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015e1e:	6014      	str	r4, [r2, #0]
 8015e20:	f7fe fc6a 	bl	80146f8 <vListInsertEnd>
					xReturn = pdTRUE;
 8015e24:	4628      	mov	r0, r5
		return xReturn;
 8015e26:	e7d4      	b.n	8015dd2 <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015e28:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8015e2a:	4809      	ldr	r0, [pc, #36]	; (8015e50 <xTaskPriorityDisinherit+0xb8>)
 8015e2c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8015e30:	4a08      	ldr	r2, [pc, #32]	; (8015e54 <xTaskPriorityDisinherit+0xbc>)
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	58c3      	ldr	r3, [r0, r3]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d1e3      	bne.n	8015e02 <xTaskPriorityDisinherit+0x6a>
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	fa03 f505 	lsl.w	r5, r3, r5
 8015e40:	6813      	ldr	r3, [r2, #0]
 8015e42:	ea23 0305 	bic.w	r3, r3, r5
 8015e46:	6013      	str	r3, [r2, #0]
 8015e48:	e7db      	b.n	8015e02 <xTaskPriorityDisinherit+0x6a>
 8015e4a:	bf00      	nop
 8015e4c:	200060b0 	.word	0x200060b0
 8015e50:	200060bc 	.word	0x200060bc
 8015e54:	2000615c 	.word	0x2000615c

08015e58 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d044      	beq.n	8015ee6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8015e5c:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8015e5e:	b530      	push	{r4, r5, lr}
 8015e60:	4604      	mov	r4, r0
 8015e62:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8015e64:	b153      	cbz	r3, 8015e7c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015e66:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015e68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015e6a:	4281      	cmp	r1, r0
 8015e6c:	bf38      	it	cc
 8015e6e:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015e70:	428a      	cmp	r2, r1
 8015e72:	d001      	beq.n	8015e78 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	d00c      	beq.n	8015e92 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8015e78:	b003      	add	sp, #12
 8015e7a:	bd30      	pop	{r4, r5, pc}
 8015e7c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e80:	b672      	cpsid	i
 8015e82:	f383 8811 	msr	BASEPRI, r3
 8015e86:	f3bf 8f6f 	isb	sy
 8015e8a:	f3bf 8f4f 	dsb	sy
 8015e8e:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8015e90:	e7fe      	b.n	8015e90 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8015e92:	4b25      	ldr	r3, [pc, #148]	; (8015f28 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	42a3      	cmp	r3, r4
 8015e98:	d026      	beq.n	8015ee8 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015e9a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8015e9c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	db02      	blt.n	8015ea8 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ea2:	f1c1 0107 	rsb	r1, r1, #7
 8015ea6:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015ea8:	4d20      	ldr	r5, [pc, #128]	; (8015f2c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8015eaa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8015eae:	6961      	ldr	r1, [r4, #20]
 8015eb0:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8015eb4:	4299      	cmp	r1, r3
 8015eb6:	d1df      	bne.n	8015e78 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015eb8:	1d21      	adds	r1, r4, #4
 8015eba:	4608      	mov	r0, r1
 8015ebc:	9101      	str	r1, [sp, #4]
 8015ebe:	f7fe fc43 	bl	8014748 <uxListRemove>
 8015ec2:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ec6:	b1d0      	cbz	r0, 8015efe <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ec8:	2301      	movs	r3, #1
 8015eca:	0090      	lsls	r0, r2, #2
 8015ecc:	4c18      	ldr	r4, [pc, #96]	; (8015f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015ece:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8015ed0:	4410      	add	r0, r2
 8015ed2:	6822      	ldr	r2, [r4, #0]
 8015ed4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8015ed8:	4313      	orrs	r3, r2
 8015eda:	6023      	str	r3, [r4, #0]
	}
 8015edc:	b003      	add	sp, #12
 8015ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8015ee2:	f7fe bc09 	b.w	80146f8 <vListInsertEnd>
 8015ee6:	4770      	bx	lr
 8015ee8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015eec:	b672      	cpsid	i
 8015eee:	f383 8811 	msr	BASEPRI, r3
 8015ef2:	f3bf 8f6f 	isb	sy
 8015ef6:	f3bf 8f4f 	dsb	sy
 8015efa:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8015efc:	e7fe      	b.n	8015efc <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015efe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8015f02:	0090      	lsls	r0, r2, #2
 8015f04:	009b      	lsls	r3, r3, #2
 8015f06:	58eb      	ldr	r3, [r5, r3]
 8015f08:	b11b      	cbz	r3, 8015f12 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	4c08      	ldr	r4, [pc, #32]	; (8015f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015f0e:	4093      	lsls	r3, r2
 8015f10:	e7de      	b.n	8015ed0 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8015f12:	4c07      	ldr	r4, [pc, #28]	; (8015f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8015f14:	2301      	movs	r3, #1
 8015f16:	f8d4 c000 	ldr.w	ip, [r4]
 8015f1a:	4093      	lsls	r3, r2
 8015f1c:	ea2c 0c03 	bic.w	ip, ip, r3
 8015f20:	f8c4 c000 	str.w	ip, [r4]
 8015f24:	e7d4      	b.n	8015ed0 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8015f26:	bf00      	nop
 8015f28:	200060b0 	.word	0x200060b0
 8015f2c:	200060bc 	.word	0x200060bc
 8015f30:	2000615c 	.word	0x2000615c

08015f34 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8015f34:	4b04      	ldr	r3, [pc, #16]	; (8015f48 <pvTaskIncrementMutexHeldCount+0x14>)
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	b11a      	cbz	r2, 8015f42 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8015f3a:	6819      	ldr	r1, [r3, #0]
 8015f3c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8015f3e:	3201      	adds	r2, #1
 8015f40:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8015f42:	6818      	ldr	r0, [r3, #0]
	}
 8015f44:	4770      	bx	lr
 8015f46:	bf00      	nop
 8015f48:	200060b0 	.word	0x200060b0

08015f4c <ulTaskNotifyTake>:
	{
 8015f4c:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015f4e:	4c1a      	ldr	r4, [pc, #104]	; (8015fb8 <ulTaskNotifyTake+0x6c>)
	{
 8015f50:	4606      	mov	r6, r0
 8015f52:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8015f54:	f000 fbb6 	bl	80166c4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015f5e:	b923      	cbnz	r3, 8015f6a <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015f60:	6823      	ldr	r3, [r4, #0]
 8015f62:	2101      	movs	r1, #1
 8015f64:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8015f68:	b9c5      	cbnz	r5, 8015f9c <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8015f6a:	f000 fbd1 	bl	8016710 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015f6e:	f000 fba9 	bl	80166c4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015f72:	6823      	ldr	r3, [r4, #0]
 8015f74:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8015f78:	b125      	cbz	r5, 8015f84 <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015f7a:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8015f7c:	b156      	cbz	r6, 8015f94 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015f7e:	2200      	movs	r2, #0
 8015f80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015f84:	6823      	ldr	r3, [r4, #0]
 8015f86:	2200      	movs	r2, #0
 8015f88:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8015f8c:	f000 fbc0 	bl	8016710 <vPortExitCritical>
	}
 8015f90:	4628      	mov	r0, r5
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015f94:	1e6a      	subs	r2, r5, #1
 8015f96:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8015f9a:	e7f3      	b.n	8015f84 <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	f7ff f9ed 	bl	801537c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8015fa2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015faa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015fae:	f3bf 8f4f 	dsb	sy
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	e7d8      	b.n	8015f6a <ulTaskNotifyTake+0x1e>
 8015fb8:	200060b0 	.word	0x200060b0

08015fbc <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8015fbc:	b318      	cbz	r0, 8016006 <vTaskNotifyGiveFromISR+0x4a>
	{
 8015fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fc0:	b083      	sub	sp, #12
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fc6:	f000 fc83 	bl	80168d0 <vPortValidateInterruptPriority>
	__asm volatile
 8015fca:	f3ef 8611 	mrs	r6, BASEPRI
 8015fce:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015fd2:	b672      	cpsid	i
 8015fd4:	f383 8811 	msr	BASEPRI, r3
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	f3bf 8f4f 	dsb	sy
 8015fe0:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015fe2:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015fe4:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015fe8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015fec:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8015fee:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015ff2:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8015ff4:	f103 0301 	add.w	r3, r3, #1
 8015ff8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015ffc:	d00e      	beq.n	801601c <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8015ffe:	f386 8811 	msr	BASEPRI, r6
	}
 8016002:	b003      	add	sp, #12
 8016004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8016006:	f04f 0330 	mov.w	r3, #48	; 0x30
 801600a:	b672      	cpsid	i
 801600c:	f383 8811 	msr	BASEPRI, r3
 8016010:	f3bf 8f6f 	isb	sy
 8016014:	f3bf 8f4f 	dsb	sy
 8016018:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 801601a:	e7fe      	b.n	801601a <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801601c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801601e:	b153      	cbz	r3, 8016036 <vTaskNotifyGiveFromISR+0x7a>
 8016020:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016024:	b672      	cpsid	i
 8016026:	f383 8811 	msr	BASEPRI, r3
 801602a:	f3bf 8f6f 	isb	sy
 801602e:	f3bf 8f4f 	dsb	sy
 8016032:	b662      	cpsie	i
 8016034:	e7fe      	b.n	8016034 <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016036:	4b14      	ldr	r3, [pc, #80]	; (8016088 <vTaskNotifyGiveFromISR+0xcc>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	b18b      	cbz	r3, 8016060 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801603c:	f104 0118 	add.w	r1, r4, #24
 8016040:	4812      	ldr	r0, [pc, #72]	; (801608c <vTaskNotifyGiveFromISR+0xd0>)
 8016042:	f7fe fb59 	bl	80146f8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016046:	4b12      	ldr	r3, [pc, #72]	; (8016090 <vTaskNotifyGiveFromISR+0xd4>)
 8016048:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801604e:	429a      	cmp	r2, r3
 8016050:	d9d5      	bls.n	8015ffe <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8016052:	b10d      	cbz	r5, 8016058 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016054:	2301      	movs	r3, #1
 8016056:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8016058:	4b0e      	ldr	r3, [pc, #56]	; (8016094 <vTaskNotifyGiveFromISR+0xd8>)
 801605a:	2201      	movs	r2, #1
 801605c:	601a      	str	r2, [r3, #0]
 801605e:	e7ce      	b.n	8015ffe <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016060:	1d21      	adds	r1, r4, #4
 8016062:	4608      	mov	r0, r1
 8016064:	9101      	str	r1, [sp, #4]
 8016066:	f7fe fb6f 	bl	8014748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801606a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801606c:	4b0a      	ldr	r3, [pc, #40]	; (8016098 <vTaskNotifyGiveFromISR+0xdc>)
 801606e:	4087      	lsls	r7, r0
 8016070:	4a0a      	ldr	r2, [pc, #40]	; (801609c <vTaskNotifyGiveFromISR+0xe0>)
 8016072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016076:	9901      	ldr	r1, [sp, #4]
 8016078:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801607c:	681a      	ldr	r2, [r3, #0]
 801607e:	4317      	orrs	r7, r2
 8016080:	601f      	str	r7, [r3, #0]
 8016082:	f7fe fb39 	bl	80146f8 <vListInsertEnd>
 8016086:	e7de      	b.n	8016046 <vTaskNotifyGiveFromISR+0x8a>
 8016088:	20006154 	.word	0x20006154
 801608c:	20006190 	.word	0x20006190
 8016090:	200060b0 	.word	0x200060b0
 8016094:	200061d4 	.word	0x200061d4
 8016098:	2000615c 	.word	0x2000615c
 801609c:	200060bc 	.word	0x200060bc

080160a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80160a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80160a2:	4c12      	ldr	r4, [pc, #72]	; (80160ec <prvCheckForValidListAndQueue+0x4c>)
{
 80160a4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80160a6:	f000 fb0d 	bl	80166c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80160aa:	6825      	ldr	r5, [r4, #0]
 80160ac:	b125      	cbz	r5, 80160b8 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80160ae:	b003      	add	sp, #12
 80160b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80160b4:	f000 bb2c 	b.w	8016710 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 80160b8:	4f0d      	ldr	r7, [pc, #52]	; (80160f0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 80160ba:	4e0e      	ldr	r6, [pc, #56]	; (80160f4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 80160bc:	4638      	mov	r0, r7
 80160be:	f7fe fb0b 	bl	80146d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80160c2:	4630      	mov	r0, r6
 80160c4:	f7fe fb08 	bl	80146d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80160c8:	4a0b      	ldr	r2, [pc, #44]	; (80160f8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160ca:	9500      	str	r5, [sp, #0]
 80160cc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80160ce:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160d0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80160d2:	4a0a      	ldr	r2, [pc, #40]	; (80160fc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160d4:	4b0a      	ldr	r3, [pc, #40]	; (8016100 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 80160d6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80160d8:	4a0a      	ldr	r2, [pc, #40]	; (8016104 <prvCheckForValidListAndQueue+0x64>)
 80160da:	f7fe fc19 	bl	8014910 <xQueueGenericCreateStatic>
 80160de:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d0e4      	beq.n	80160ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80160e4:	4908      	ldr	r1, [pc, #32]	; (8016108 <prvCheckForValidListAndQueue+0x68>)
 80160e6:	f7ff f881 	bl	80151ec <vQueueAddToRegistry>
 80160ea:	e7e0      	b.n	80160ae <prvCheckForValidListAndQueue+0xe>
 80160ec:	200062f4 	.word	0x200062f4
 80160f0:	20006280 	.word	0x20006280
 80160f4:	20006294 	.word	0x20006294
 80160f8:	200061d8 	.word	0x200061d8
 80160fc:	200061dc 	.word	0x200061dc
 8016100:	200062ac 	.word	0x200062ac
 8016104:	200061e0 	.word	0x200061e0
 8016108:	0802b7a0 	.word	0x0802b7a0

0801610c <xTimerCreateTimerTask>:
{
 801610c:	b530      	push	{r4, r5, lr}
 801610e:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8016110:	f7ff ffc6 	bl	80160a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8016114:	4b13      	ldr	r3, [pc, #76]	; (8016164 <xTimerCreateTimerTask+0x58>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	b1cb      	cbz	r3, 801614e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801611a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801611c:	aa07      	add	r2, sp, #28
 801611e:	a906      	add	r1, sp, #24
 8016120:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016122:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016124:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016128:	f7ea fdba 	bl	8000ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801612c:	4623      	mov	r3, r4
 801612e:	9a07      	ldr	r2, [sp, #28]
 8016130:	9500      	str	r5, [sp, #0]
 8016132:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8016136:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801613a:	490b      	ldr	r1, [pc, #44]	; (8016168 <xTimerCreateTimerTask+0x5c>)
 801613c:	480b      	ldr	r0, [pc, #44]	; (801616c <xTimerCreateTimerTask+0x60>)
 801613e:	f7ff fa61 	bl	8015604 <xTaskCreateStatic>
 8016142:	4b0b      	ldr	r3, [pc, #44]	; (8016170 <xTimerCreateTimerTask+0x64>)
 8016144:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8016146:	b110      	cbz	r0, 801614e <xTimerCreateTimerTask+0x42>
}
 8016148:	2001      	movs	r0, #1
 801614a:	b009      	add	sp, #36	; 0x24
 801614c:	bd30      	pop	{r4, r5, pc}
 801614e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016152:	b672      	cpsid	i
 8016154:	f383 8811 	msr	BASEPRI, r3
 8016158:	f3bf 8f6f 	isb	sy
 801615c:	f3bf 8f4f 	dsb	sy
 8016160:	b662      	cpsie	i
	configASSERT( xReturn );
 8016162:	e7fe      	b.n	8016162 <xTimerCreateTimerTask+0x56>
 8016164:	200062f4 	.word	0x200062f4
 8016168:	0802b7a8 	.word	0x0802b7a8
 801616c:	0801636d 	.word	0x0801636d
 8016170:	200062f8 	.word	0x200062f8

08016174 <xTimerCreate>:
	{
 8016174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016178:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801617a:	2028      	movs	r0, #40	; 0x28
	{
 801617c:	4688      	mov	r8, r1
 801617e:	4615      	mov	r5, r2
 8016180:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016182:	f000 fc09 	bl	8016998 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8016186:	4604      	mov	r4, r0
 8016188:	b1b0      	cbz	r0, 80161b8 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 801618a:	2300      	movs	r3, #0
 801618c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016190:	f1b8 0f00 	cmp.w	r8, #0
 8016194:	d013      	beq.n	80161be <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8016196:	f7ff ff83 	bl	80160a0 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801619a:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801619c:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 801619e:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80161a0:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 80161a2:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80161a6:	f7fe faa3 	bl	80146f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80161aa:	b12d      	cbz	r5, 80161b8 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80161ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80161b0:	f043 0304 	orr.w	r3, r3, #4
 80161b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 80161b8:	4620      	mov	r0, r4
 80161ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161c2:	b672      	cpsid	i
 80161c4:	f383 8811 	msr	BASEPRI, r3
 80161c8:	f3bf 8f6f 	isb	sy
 80161cc:	f3bf 8f4f 	dsb	sy
 80161d0:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80161d2:	e7fe      	b.n	80161d2 <xTimerCreate+0x5e>

080161d4 <xTimerCreateStatic>:
	{
 80161d4:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 80161d6:	2428      	movs	r4, #40	; 0x28
	{
 80161d8:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 80161da:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 80161dc:	9d05      	ldr	r5, [sp, #20]
 80161de:	2d28      	cmp	r5, #40	; 0x28
 80161e0:	d00a      	beq.n	80161f8 <xTimerCreateStatic+0x24>
 80161e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161e6:	b672      	cpsid	i
 80161e8:	f383 8811 	msr	BASEPRI, r3
 80161ec:	f3bf 8f6f 	isb	sy
 80161f0:	f3bf 8f4f 	dsb	sy
 80161f4:	b662      	cpsie	i
 80161f6:	e7fe      	b.n	80161f6 <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80161f8:	4604      	mov	r4, r0
 80161fa:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 80161fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80161fe:	b318      	cbz	r0, 8016248 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8016200:	2002      	movs	r0, #2
 8016202:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016204:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016208:	b349      	cbz	r1, 801625e <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 801620a:	9101      	str	r1, [sp, #4]
 801620c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016210:	f7ff ff46 	bl	80160a0 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016216:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8016218:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 801621a:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801621c:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801621e:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8016220:	9b03      	ldr	r3, [sp, #12]
 8016222:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016224:	4613      	mov	r3, r2
 8016226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016228:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801622a:	f7fe fa61 	bl	80146f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801622e:	9a02      	ldr	r2, [sp, #8]
 8016230:	b13a      	cbz	r2, 8016242 <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801623a:	f043 0304 	orr.w	r3, r3, #4
 801623e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8016242:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016244:	b007      	add	sp, #28
 8016246:	bd30      	pop	{r4, r5, pc}
 8016248:	f04f 0330 	mov.w	r3, #48	; 0x30
 801624c:	b672      	cpsid	i
 801624e:	f383 8811 	msr	BASEPRI, r3
 8016252:	f3bf 8f6f 	isb	sy
 8016256:	f3bf 8f4f 	dsb	sy
 801625a:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 801625c:	e7fe      	b.n	801625c <xTimerCreateStatic+0x88>
 801625e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016262:	b672      	cpsid	i
 8016264:	f383 8811 	msr	BASEPRI, r3
 8016268:	f3bf 8f6f 	isb	sy
 801626c:	f3bf 8f4f 	dsb	sy
 8016270:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016272:	e7fe      	b.n	8016272 <xTimerCreateStatic+0x9e>

08016274 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016274:	b1c8      	cbz	r0, 80162aa <xTimerGenericCommand+0x36>
{
 8016276:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8016278:	4d19      	ldr	r5, [pc, #100]	; (80162e0 <xTimerGenericCommand+0x6c>)
{
 801627a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 801627c:	682c      	ldr	r4, [r5, #0]
 801627e:	b18c      	cbz	r4, 80162a4 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016280:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016282:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8016284:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016288:	dc1a      	bgt.n	80162c0 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801628a:	f7ff fd1d 	bl	8015cc8 <xTaskGetSchedulerState>
 801628e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016290:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016294:	d01d      	beq.n	80162d2 <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016296:	4669      	mov	r1, sp
 8016298:	461a      	mov	r2, r3
 801629a:	6828      	ldr	r0, [r5, #0]
 801629c:	f7fe fbc2 	bl	8014a24 <xQueueGenericSend>
}
 80162a0:	b005      	add	sp, #20
 80162a2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80162a4:	4620      	mov	r0, r4
}
 80162a6:	b005      	add	sp, #20
 80162a8:	bd30      	pop	{r4, r5, pc}
 80162aa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80162ae:	b672      	cpsid	i
 80162b0:	f383 8811 	msr	BASEPRI, r3
 80162b4:	f3bf 8f6f 	isb	sy
 80162b8:	f3bf 8f4f 	dsb	sy
 80162bc:	b662      	cpsie	i
	configASSERT( xTimer );
 80162be:	e7fe      	b.n	80162be <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162c0:	469c      	mov	ip, r3
 80162c2:	4669      	mov	r1, sp
 80162c4:	2300      	movs	r3, #0
 80162c6:	4620      	mov	r0, r4
 80162c8:	4662      	mov	r2, ip
 80162ca:	f7fe fcab 	bl	8014c24 <xQueueGenericSendFromISR>
}
 80162ce:	b005      	add	sp, #20
 80162d0:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80162d2:	9a08      	ldr	r2, [sp, #32]
 80162d4:	4669      	mov	r1, sp
 80162d6:	6828      	ldr	r0, [r5, #0]
 80162d8:	f7fe fba4 	bl	8014a24 <xQueueGenericSend>
 80162dc:	e7e3      	b.n	80162a6 <xTimerGenericCommand+0x32>
 80162de:	bf00      	nop
 80162e0:	200062f4 	.word	0x200062f4

080162e4 <prvSwitchTimerLists>:
{
 80162e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e8:	4e1e      	ldr	r6, [pc, #120]	; (8016364 <prvSwitchTimerLists+0x80>)
 80162ea:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80162ec:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80162f0:	e00d      	b.n	801630e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162f2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162f4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162f6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162f8:	1d25      	adds	r5, r4, #4
 80162fa:	4628      	mov	r0, r5
 80162fc:	f7fe fa24 	bl	8014748 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016300:	6a23      	ldr	r3, [r4, #32]
 8016302:	4620      	mov	r0, r4
 8016304:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016306:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801630a:	075b      	lsls	r3, r3, #29
 801630c:	d40a      	bmi.n	8016324 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801630e:	6833      	ldr	r3, [r6, #0]
 8016310:	681a      	ldr	r2, [r3, #0]
 8016312:	2a00      	cmp	r2, #0
 8016314:	d1ed      	bne.n	80162f2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8016316:	4a14      	ldr	r2, [pc, #80]	; (8016368 <prvSwitchTimerLists+0x84>)
 8016318:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801631a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 801631c:	6031      	str	r1, [r6, #0]
}
 801631e:	b002      	add	sp, #8
 8016320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016324:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016326:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016328:	2300      	movs	r3, #0
 801632a:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801632c:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801632e:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8016330:	42af      	cmp	r7, r5
 8016332:	d205      	bcs.n	8016340 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016334:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016336:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016338:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801633a:	f7fe f9ed 	bl	8014718 <vListInsert>
 801633e:	e7e6      	b.n	801630e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016340:	4619      	mov	r1, r3
 8016342:	f8cd 8000 	str.w	r8, [sp]
 8016346:	f7ff ff95 	bl	8016274 <xTimerGenericCommand>
				configASSERT( xResult );
 801634a:	2800      	cmp	r0, #0
 801634c:	d1df      	bne.n	801630e <prvSwitchTimerLists+0x2a>
 801634e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016352:	b672      	cpsid	i
 8016354:	f383 8811 	msr	BASEPRI, r3
 8016358:	f3bf 8f6f 	isb	sy
 801635c:	f3bf 8f4f 	dsb	sy
 8016360:	b662      	cpsie	i
 8016362:	e7fe      	b.n	8016362 <prvSwitchTimerLists+0x7e>
 8016364:	200061d8 	.word	0x200061d8
 8016368:	200061dc 	.word	0x200061dc

0801636c <prvTimerTask>:
{
 801636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016370:	4e9a      	ldr	r6, [pc, #616]	; (80165dc <prvTimerTask+0x270>)
 8016372:	b087      	sub	sp, #28
 8016374:	4d9a      	ldr	r5, [pc, #616]	; (80165e0 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8016376:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 801637a:	4c9a      	ldr	r4, [pc, #616]	; (80165e4 <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801637c:	6833      	ldr	r3, [r6, #0]
 801637e:	681f      	ldr	r7, [r3, #0]
 8016380:	2f00      	cmp	r7, #0
 8016382:	f000 80ac 	beq.w	80164de <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 801638a:	f7ff fa01 	bl	8015790 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801638e:	f7ff fa07 	bl	80157a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016392:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016394:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8016396:	4290      	cmp	r0, r2
 8016398:	f0c0 80a9 	bcc.w	80164ee <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801639c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 801639e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80163a0:	f200 80ca 	bhi.w	8016538 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 80163a4:	f7ff fb50 	bl	8015a48 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163a8:	6832      	ldr	r2, [r6, #0]
 80163aa:	68d2      	ldr	r2, [r2, #12]
 80163ac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80163b0:	f10b 0804 	add.w	r8, fp, #4
 80163b4:	4640      	mov	r0, r8
 80163b6:	f7fe f9c7 	bl	8014748 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80163ba:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 80163be:	0743      	lsls	r3, r0, #29
 80163c0:	f100 80ca 	bmi.w	8016558 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80163c4:	f020 0001 	bic.w	r0, r0, #1
 80163c8:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80163cc:	f8db 3020 	ldr.w	r3, [fp, #32]
 80163d0:	4658      	mov	r0, fp
 80163d2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80163d4:	2200      	movs	r2, #0
 80163d6:	a902      	add	r1, sp, #8
 80163d8:	6820      	ldr	r0, [r4, #0]
 80163da:	f7fe fcf5 	bl	8014dc8 <xQueueReceive>
 80163de:	2800      	cmp	r0, #0
 80163e0:	d0cc      	beq.n	801637c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80163e2:	9b02      	ldr	r3, [sp, #8]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	db71      	blt.n	80164cc <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80163e8:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	b113      	cbz	r3, 80163f4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80163ee:	1d38      	adds	r0, r7, #4
 80163f0:	f7fe f9aa 	bl	8014748 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80163f4:	f7ff f9d4 	bl	80157a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80163f8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80163fa:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80163fc:	4298      	cmp	r0, r3
 80163fe:	d37d      	bcc.n	80164fc <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8016400:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8016402:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8016406:	2b09      	cmp	r3, #9
 8016408:	d8e4      	bhi.n	80163d4 <prvTimerTask+0x68>
 801640a:	e8df f003 	tbb	[pc, r3]
 801640e:	0505      	.short	0x0505
 8016410:	56394f05 	.word	0x56394f05
 8016414:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016418:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801641c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801641e:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016422:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016424:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016426:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801642a:	185a      	adds	r2, r3, r1
 801642c:	bf2c      	ite	cs
 801642e:	2001      	movcs	r0, #1
 8016430:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8016432:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016434:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016436:	f200 8081 	bhi.w	801653c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801643a:	eba8 0303 	sub.w	r3, r8, r3
 801643e:	4299      	cmp	r1, r3
 8016440:	f200 80b5 	bhi.w	80165ae <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016444:	6a3b      	ldr	r3, [r7, #32]
 8016446:	4638      	mov	r0, r7
 8016448:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801644a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801644e:	0759      	lsls	r1, r3, #29
 8016450:	d5c0      	bpl.n	80163d4 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016452:	2200      	movs	r2, #0
 8016454:	69bb      	ldr	r3, [r7, #24]
 8016456:	4638      	mov	r0, r7
 8016458:	9200      	str	r2, [sp, #0]
 801645a:	9a03      	ldr	r2, [sp, #12]
 801645c:	441a      	add	r2, r3
 801645e:	2300      	movs	r3, #0
 8016460:	4619      	mov	r1, r3
 8016462:	f7ff ff07 	bl	8016274 <xTimerGenericCommand>
							configASSERT( xResult );
 8016466:	2800      	cmp	r0, #0
 8016468:	d1b4      	bne.n	80163d4 <prvTimerTask+0x68>
 801646a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801646e:	b672      	cpsid	i
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	b662      	cpsie	i
 801647e:	e7fe      	b.n	801647e <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016480:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016484:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016486:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801648a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801648c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016490:	2b00      	cmp	r3, #0
 8016492:	f000 8098 	beq.w	80165c6 <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016496:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016498:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801649a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 801649c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801649e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80164a0:	d856      	bhi.n	8016550 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80164a2:	4b51      	ldr	r3, [pc, #324]	; (80165e8 <prvTimerTask+0x27c>)
 80164a4:	6818      	ldr	r0, [r3, #0]
 80164a6:	f7fe f937 	bl	8014718 <vListInsert>
	return xProcessTimerNow;
 80164aa:	e793      	b.n	80163d4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80164ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80164b0:	f023 0301 	bic.w	r3, r3, #1
 80164b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 80164b8:	e78c      	b.n	80163d4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80164ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80164be:	079a      	lsls	r2, r3, #30
 80164c0:	d56c      	bpl.n	801659c <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80164c2:	f023 0301 	bic.w	r3, r3, #1
 80164c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80164ca:	e783      	b.n	80163d4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80164cc:	9b03      	ldr	r3, [sp, #12]
 80164ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80164d2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80164d4:	9b02      	ldr	r3, [sp, #8]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	f6ff af7c 	blt.w	80163d4 <prvTimerTask+0x68>
 80164dc:	e784      	b.n	80163e8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80164de:	f7ff f957 	bl	8015790 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80164e2:	f7ff f95d 	bl	80157a0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80164e6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80164e8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80164ea:	4282      	cmp	r2, r0
 80164ec:	d909      	bls.n	8016502 <prvTimerTask+0x196>
		prvSwitchTimerLists();
 80164ee:	f7ff fef9 	bl	80162e4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80164f2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80164f6:	f7ff faa7 	bl	8015a48 <xTaskResumeAll>
 80164fa:	e76b      	b.n	80163d4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80164fc:	f7ff fef2 	bl	80162e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016500:	e77e      	b.n	8016400 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016502:	4b39      	ldr	r3, [pc, #228]	; (80165e8 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 8016504:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	6812      	ldr	r2, [r2, #0]
 801650c:	fab2 f282 	clz	r2, r2
 8016510:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016512:	eba7 010a 	sub.w	r1, r7, sl
 8016516:	6820      	ldr	r0, [r4, #0]
 8016518:	f7fe fe7e 	bl	8015218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801651c:	f7ff fa94 	bl	8015a48 <xTaskResumeAll>
 8016520:	2800      	cmp	r0, #0
 8016522:	f47f af57 	bne.w	80163d4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8016526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801652a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 801652e:	f3bf 8f4f 	dsb	sy
 8016532:	f3bf 8f6f 	isb	sy
 8016536:	e74d      	b.n	80163d4 <prvTimerTask+0x68>
 8016538:	2200      	movs	r2, #0
 801653a:	e7ea      	b.n	8016512 <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801653c:	4543      	cmp	r3, r8
 801653e:	d902      	bls.n	8016546 <prvTimerTask+0x1da>
 8016540:	2800      	cmp	r0, #0
 8016542:	f43f af7f 	beq.w	8016444 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016546:	1d39      	adds	r1, r7, #4
 8016548:	6830      	ldr	r0, [r6, #0]
 801654a:	f7fe f8e5 	bl	8014718 <vListInsert>
	return xProcessTimerNow;
 801654e:	e741      	b.n	80163d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016550:	6830      	ldr	r0, [r6, #0]
 8016552:	f7fe f8e1 	bl	8014718 <vListInsert>
 8016556:	e73d      	b.n	80163d4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016558:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801655c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016560:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8016562:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016564:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016568:	d31c      	bcc.n	80165a4 <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801656a:	ebaa 0307 	sub.w	r3, sl, r7
 801656e:	429a      	cmp	r2, r3
 8016570:	d823      	bhi.n	80165ba <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016572:	2300      	movs	r3, #0
 8016574:	463a      	mov	r2, r7
 8016576:	4658      	mov	r0, fp
 8016578:	4619      	mov	r1, r3
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	f7ff fe7a 	bl	8016274 <xTimerGenericCommand>
			configASSERT( xResult );
 8016580:	2800      	cmp	r0, #0
 8016582:	f47f af23 	bne.w	80163cc <prvTimerTask+0x60>
 8016586:	f04f 0330 	mov.w	r3, #48	; 0x30
 801658a:	b672      	cpsid	i
 801658c:	f383 8811 	msr	BASEPRI, r3
 8016590:	f3bf 8f6f 	isb	sy
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	b662      	cpsie	i
 801659a:	e7fe      	b.n	801659a <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 801659c:	4638      	mov	r0, r7
 801659e:	f000 fa97 	bl	8016ad0 <vPortFree>
 80165a2:	e717      	b.n	80163d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80165a4:	4641      	mov	r1, r8
 80165a6:	6830      	ldr	r0, [r6, #0]
 80165a8:	f7fe f8b6 	bl	8014718 <vListInsert>
	return xProcessTimerNow;
 80165ac:	e70e      	b.n	80163cc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80165ae:	4b0e      	ldr	r3, [pc, #56]	; (80165e8 <prvTimerTask+0x27c>)
 80165b0:	1d39      	adds	r1, r7, #4
 80165b2:	6818      	ldr	r0, [r3, #0]
 80165b4:	f7fe f8b0 	bl	8014718 <vListInsert>
	return xProcessTimerNow;
 80165b8:	e70c      	b.n	80163d4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80165ba:	4b0b      	ldr	r3, [pc, #44]	; (80165e8 <prvTimerTask+0x27c>)
 80165bc:	4641      	mov	r1, r8
 80165be:	6818      	ldr	r0, [r3, #0]
 80165c0:	f7fe f8aa 	bl	8014718 <vListInsert>
	return xProcessTimerNow;
 80165c4:	e702      	b.n	80163cc <prvTimerTask+0x60>
 80165c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165ca:	b672      	cpsid	i
 80165cc:	f383 8811 	msr	BASEPRI, r3
 80165d0:	f3bf 8f6f 	isb	sy
 80165d4:	f3bf 8f4f 	dsb	sy
 80165d8:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80165da:	e7fe      	b.n	80165da <prvTimerTask+0x26e>
 80165dc:	200061d8 	.word	0x200061d8
 80165e0:	200062a8 	.word	0x200062a8
 80165e4:	200062f4 	.word	0x200062f4
 80165e8:	200061dc 	.word	0x200061dc

080165ec <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80165ec:	4808      	ldr	r0, [pc, #32]	; (8016610 <prvPortStartFirstTask+0x24>)
 80165ee:	6800      	ldr	r0, [r0, #0]
 80165f0:	6800      	ldr	r0, [r0, #0]
 80165f2:	f380 8808 	msr	MSP, r0
 80165f6:	f04f 0000 	mov.w	r0, #0
 80165fa:	f380 8814 	msr	CONTROL, r0
 80165fe:	b662      	cpsie	i
 8016600:	b661      	cpsie	f
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	f3bf 8f6f 	isb	sy
 801660a:	df00      	svc	0
 801660c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801660e:	0000      	.short	0x0000
 8016610:	e000ed08 	.word	0xe000ed08

08016614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016624 <vPortEnableVFP+0x10>
 8016618:	6801      	ldr	r1, [r0, #0]
 801661a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801661e:	6001      	str	r1, [r0, #0]
 8016620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016622:	0000      	.short	0x0000
 8016624:	e000ed88 	.word	0xe000ed88

08016628 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8016628:	4b10      	ldr	r3, [pc, #64]	; (801666c <prvTaskExitError+0x44>)
{
 801662a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801662c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801662e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8016630:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8016632:	3301      	adds	r3, #1
 8016634:	d00a      	beq.n	801664c <prvTaskExitError+0x24>
 8016636:	f04f 0330 	mov.w	r3, #48	; 0x30
 801663a:	b672      	cpsid	i
 801663c:	f383 8811 	msr	BASEPRI, r3
 8016640:	f3bf 8f6f 	isb	sy
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	b662      	cpsie	i
 801664a:	e7fe      	b.n	801664a <prvTaskExitError+0x22>
 801664c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016650:	b672      	cpsid	i
 8016652:	f383 8811 	msr	BASEPRI, r3
 8016656:	f3bf 8f6f 	isb	sy
 801665a:	f3bf 8f4f 	dsb	sy
 801665e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8016660:	9b01      	ldr	r3, [sp, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d0fc      	beq.n	8016660 <prvTaskExitError+0x38>
}
 8016666:	b002      	add	sp, #8
 8016668:	4770      	bx	lr
 801666a:	bf00      	nop
 801666c:	20000408 	.word	0x20000408

08016670 <pxPortInitialiseStack>:
{
 8016670:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016672:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016676:	4809      	ldr	r0, [pc, #36]	; (801669c <pxPortInitialiseStack+0x2c>)
{
 8016678:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801667a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801667e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016682:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8016686:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801668a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801668e:	f06f 0102 	mvn.w	r1, #2
}
 8016692:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016696:	f843 1c24 	str.w	r1, [r3, #-36]
}
 801669a:	4770      	bx	lr
 801669c:	08016629 	.word	0x08016629

080166a0 <SVC_Handler>:
	__asm volatile (
 80166a0:	4b07      	ldr	r3, [pc, #28]	; (80166c0 <pxCurrentTCBConst2>)
 80166a2:	6819      	ldr	r1, [r3, #0]
 80166a4:	6808      	ldr	r0, [r1, #0]
 80166a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166aa:	f380 8809 	msr	PSP, r0
 80166ae:	f3bf 8f6f 	isb	sy
 80166b2:	f04f 0000 	mov.w	r0, #0
 80166b6:	f380 8811 	msr	BASEPRI, r0
 80166ba:	4770      	bx	lr
 80166bc:	f3af 8000 	nop.w

080166c0 <pxCurrentTCBConst2>:
 80166c0:	200060b0 	.word	0x200060b0

080166c4 <vPortEnterCritical>:
 80166c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166c8:	b672      	cpsid	i
 80166ca:	f383 8811 	msr	BASEPRI, r3
 80166ce:	f3bf 8f6f 	isb	sy
 80166d2:	f3bf 8f4f 	dsb	sy
 80166d6:	b662      	cpsie	i
	uxCriticalNesting++;
 80166d8:	4a0c      	ldr	r2, [pc, #48]	; (801670c <vPortEnterCritical+0x48>)
 80166da:	6813      	ldr	r3, [r2, #0]
 80166dc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80166de:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80166e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80166e2:	d000      	beq.n	80166e6 <vPortEnterCritical+0x22>
}
 80166e4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80166ea:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d0f7      	beq.n	80166e4 <vPortEnterCritical+0x20>
 80166f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166f8:	b672      	cpsid	i
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	b662      	cpsie	i
 8016708:	e7fe      	b.n	8016708 <vPortEnterCritical+0x44>
 801670a:	bf00      	nop
 801670c:	20000408 	.word	0x20000408

08016710 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8016710:	4a09      	ldr	r2, [pc, #36]	; (8016738 <vPortExitCritical+0x28>)
 8016712:	6813      	ldr	r3, [r2, #0]
 8016714:	b953      	cbnz	r3, 801672c <vPortExitCritical+0x1c>
 8016716:	f04f 0330 	mov.w	r3, #48	; 0x30
 801671a:	b672      	cpsid	i
 801671c:	f383 8811 	msr	BASEPRI, r3
 8016720:	f3bf 8f6f 	isb	sy
 8016724:	f3bf 8f4f 	dsb	sy
 8016728:	b662      	cpsie	i
 801672a:	e7fe      	b.n	801672a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801672c:	3b01      	subs	r3, #1
 801672e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016730:	b90b      	cbnz	r3, 8016736 <vPortExitCritical+0x26>
	__asm volatile
 8016732:	f383 8811 	msr	BASEPRI, r3
}
 8016736:	4770      	bx	lr
 8016738:	20000408 	.word	0x20000408
 801673c:	ffffffff 	.word	0xffffffff

08016740 <PendSV_Handler>:
	__asm volatile
 8016740:	f3ef 8009 	mrs	r0, PSP
 8016744:	f3bf 8f6f 	isb	sy
 8016748:	4b15      	ldr	r3, [pc, #84]	; (80167a0 <pxCurrentTCBConst>)
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	f01e 0f10 	tst.w	lr, #16
 8016750:	bf08      	it	eq
 8016752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801675a:	6010      	str	r0, [r2, #0]
 801675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016760:	f04f 0030 	mov.w	r0, #48	; 0x30
 8016764:	b672      	cpsid	i
 8016766:	f380 8811 	msr	BASEPRI, r0
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	f3bf 8f6f 	isb	sy
 8016772:	b662      	cpsie	i
 8016774:	f7ff f9ae 	bl	8015ad4 <vTaskSwitchContext>
 8016778:	f04f 0000 	mov.w	r0, #0
 801677c:	f380 8811 	msr	BASEPRI, r0
 8016780:	bc09      	pop	{r0, r3}
 8016782:	6819      	ldr	r1, [r3, #0]
 8016784:	6808      	ldr	r0, [r1, #0]
 8016786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678a:	f01e 0f10 	tst.w	lr, #16
 801678e:	bf08      	it	eq
 8016790:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016794:	f380 8809 	msr	PSP, r0
 8016798:	f3bf 8f6f 	isb	sy
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop

080167a0 <pxCurrentTCBConst>:
 80167a0:	200060b0 	.word	0x200060b0

080167a4 <SysTick_Handler>:
{
 80167a4:	b508      	push	{r3, lr}
	__asm volatile
 80167a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167aa:	b672      	cpsid	i
 80167ac:	f383 8811 	msr	BASEPRI, r3
 80167b0:	f3bf 8f6f 	isb	sy
 80167b4:	f3bf 8f4f 	dsb	sy
 80167b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80167ba:	f7fe ffff 	bl	80157bc <xTaskIncrementTick>
 80167be:	b128      	cbz	r0, 80167cc <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80167c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80167cc:	2300      	movs	r3, #0
 80167ce:	f383 8811 	msr	BASEPRI, r3
}
 80167d2:	bd08      	pop	{r3, pc}

080167d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80167d8:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167da:	4b06      	ldr	r3, [pc, #24]	; (80167f4 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167dc:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167de:	4806      	ldr	r0, [pc, #24]	; (80167f8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167e0:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167e2:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	fba0 0303 	umull	r0, r3, r0, r3
 80167ea:	099b      	lsrs	r3, r3, #6
 80167ec:	3b01      	subs	r3, #1
 80167ee:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167f0:	6111      	str	r1, [r2, #16]
}
 80167f2:	4770      	bx	lr
 80167f4:	2000027c 	.word	0x2000027c
 80167f8:	10624dd3 	.word	0x10624dd3

080167fc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80167fc:	4b30      	ldr	r3, [pc, #192]	; (80168c0 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80167fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016802:	4830      	ldr	r0, [pc, #192]	; (80168c4 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016804:	4930      	ldr	r1, [pc, #192]	; (80168c8 <xPortStartScheduler+0xcc>)
{
 8016806:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016808:	781a      	ldrb	r2, [r3, #0]
{
 801680a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801680c:	b2d2      	uxtb	r2, r2
 801680e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016810:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016812:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016816:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016818:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801681a:	b2db      	uxtb	r3, r3
 801681c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016820:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016824:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016828:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801682c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801682e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016830:	d50f      	bpl.n	8016852 <xPortStartScheduler+0x56>
 8016832:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016834:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016838:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801683a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801683c:	005b      	lsls	r3, r3, #1
 801683e:	b2db      	uxtb	r3, r3
 8016840:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016844:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016848:	061b      	lsls	r3, r3, #24
 801684a:	d4f3      	bmi.n	8016834 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801684c:	2903      	cmp	r1, #3
 801684e:	d00b      	beq.n	8016868 <xPortStartScheduler+0x6c>
 8016850:	6001      	str	r1, [r0, #0]
	__asm volatile
 8016852:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016856:	b672      	cpsid	i
 8016858:	f383 8811 	msr	BASEPRI, r3
 801685c:	f3bf 8f6f 	isb	sy
 8016860:	f3bf 8f4f 	dsb	sy
 8016864:	b662      	cpsie	i
 8016866:	e7fe      	b.n	8016866 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016868:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801686a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801686e:	4a14      	ldr	r2, [pc, #80]	; (80168c0 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016870:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016874:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8016876:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016878:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801687a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801687c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8016880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016884:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016888:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801688c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016890:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8016894:	f7ff ff9e 	bl	80167d4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8016898:	4b0c      	ldr	r3, [pc, #48]	; (80168cc <xPortStartScheduler+0xd0>)
 801689a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801689c:	f7ff feba 	bl	8016614 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80168a0:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80168a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80168a8:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80168ac:	f7ff fe9e 	bl	80165ec <prvPortStartFirstTask>
	vTaskSwitchContext();
 80168b0:	f7ff f910 	bl	8015ad4 <vTaskSwitchContext>
}
 80168b4:	4628      	mov	r0, r5
	prvTaskExitError();
 80168b6:	f7ff feb7 	bl	8016628 <prvTaskExitError>
}
 80168ba:	b003      	add	sp, #12
 80168bc:	bd30      	pop	{r4, r5, pc}
 80168be:	bf00      	nop
 80168c0:	e000e400 	.word	0xe000e400
 80168c4:	20006300 	.word	0x20006300
 80168c8:	200062fc 	.word	0x200062fc
 80168cc:	20000408 	.word	0x20000408

080168d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80168d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80168d4:	2b0f      	cmp	r3, #15
 80168d6:	d910      	bls.n	80168fa <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80168d8:	4913      	ldr	r1, [pc, #76]	; (8016928 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80168da:	4a14      	ldr	r2, [pc, #80]	; (801692c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80168dc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80168de:	7812      	ldrb	r2, [r2, #0]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d90a      	bls.n	80168fa <vPortValidateInterruptPriority+0x2a>
 80168e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80168e8:	b672      	cpsid	i
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	b662      	cpsie	i
 80168f8:	e7fe      	b.n	80168f8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80168fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80168fe:	4a0c      	ldr	r2, [pc, #48]	; (8016930 <vPortValidateInterruptPriority+0x60>)
 8016900:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8016904:	6812      	ldr	r2, [r2, #0]
 8016906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801690a:	4293      	cmp	r3, r2
 801690c:	d90a      	bls.n	8016924 <vPortValidateInterruptPriority+0x54>
 801690e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016912:	b672      	cpsid	i
 8016914:	f383 8811 	msr	BASEPRI, r3
 8016918:	f3bf 8f6f 	isb	sy
 801691c:	f3bf 8f4f 	dsb	sy
 8016920:	b662      	cpsie	i
 8016922:	e7fe      	b.n	8016922 <vPortValidateInterruptPriority+0x52>
	}
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop
 8016928:	e000e3f0 	.word	0xe000e3f0
 801692c:	200062fc 	.word	0x200062fc
 8016930:	20006300 	.word	0x20006300

08016934 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016934:	4b16      	ldr	r3, [pc, #88]	; (8016990 <prvInsertBlockIntoFreeList+0x5c>)
{
 8016936:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016938:	461a      	mov	r2, r3
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	4283      	cmp	r3, r0
 801693e:	d3fb      	bcc.n	8016938 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016940:	6851      	ldr	r1, [r2, #4]
 8016942:	eb02 0c01 	add.w	ip, r2, r1
 8016946:	4560      	cmp	r0, ip
 8016948:	d00b      	beq.n	8016962 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801694a:	6841      	ldr	r1, [r0, #4]
 801694c:	eb00 0c01 	add.w	ip, r0, r1
 8016950:	4563      	cmp	r3, ip
 8016952:	d00e      	beq.n	8016972 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016954:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016956:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016958:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801695c:	bf18      	it	ne
 801695e:	6010      	strne	r0, [r2, #0]
}
 8016960:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016962:	6844      	ldr	r4, [r0, #4]
 8016964:	4610      	mov	r0, r2
 8016966:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016968:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801696c:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801696e:	4563      	cmp	r3, ip
 8016970:	d1f0      	bne.n	8016954 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016972:	4c08      	ldr	r4, [pc, #32]	; (8016994 <prvInsertBlockIntoFreeList+0x60>)
 8016974:	6824      	ldr	r4, [r4, #0]
 8016976:	42a3      	cmp	r3, r4
 8016978:	d0ec      	beq.n	8016954 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 801697a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801697c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016980:	4421      	add	r1, r4
}
 8016982:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016986:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801698a:	bf18      	it	ne
 801698c:	6010      	strne	r0, [r2, #0]
}
 801698e:	4770      	bx	lr
 8016990:	2001e314 	.word	0x2001e314
 8016994:	20006304 	.word	0x20006304

08016998 <pvPortMalloc>:
{
 8016998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801699c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801699e:	f7fe fef7 	bl	8015790 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80169a2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8016acc <pvPortMalloc+0x134>
 80169a6:	f8dc 3000 	ldr.w	r3, [ip]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d05d      	beq.n	8016a6a <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169ae:	4b42      	ldr	r3, [pc, #264]	; (8016ab8 <pvPortMalloc+0x120>)
 80169b0:	681d      	ldr	r5, [r3, #0]
 80169b2:	422c      	tst	r4, r5
 80169b4:	d130      	bne.n	8016a18 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 80169b6:	b37c      	cbz	r4, 8016a18 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169b8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80169ba:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169be:	d002      	beq.n	80169c6 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169c0:	f021 0107 	bic.w	r1, r1, #7
 80169c4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80169c6:	b339      	cbz	r1, 8016a18 <pvPortMalloc+0x80>
 80169c8:	4f3c      	ldr	r7, [pc, #240]	; (8016abc <pvPortMalloc+0x124>)
 80169ca:	683e      	ldr	r6, [r7, #0]
 80169cc:	428e      	cmp	r6, r1
 80169ce:	d323      	bcc.n	8016a18 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 80169d0:	483b      	ldr	r0, [pc, #236]	; (8016ac0 <pvPortMalloc+0x128>)
 80169d2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80169d4:	e003      	b.n	80169de <pvPortMalloc+0x46>
 80169d6:	6823      	ldr	r3, [r4, #0]
 80169d8:	b123      	cbz	r3, 80169e4 <pvPortMalloc+0x4c>
 80169da:	4620      	mov	r0, r4
 80169dc:	461c      	mov	r4, r3
 80169de:	6862      	ldr	r2, [r4, #4]
 80169e0:	428a      	cmp	r2, r1
 80169e2:	d3f8      	bcc.n	80169d6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80169e4:	f8dc 3000 	ldr.w	r3, [ip]
 80169e8:	42a3      	cmp	r3, r4
 80169ea:	d015      	beq.n	8016a18 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80169ec:	6803      	ldr	r3, [r0, #0]
 80169ee:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80169f6:	1a53      	subs	r3, r2, r1
 80169f8:	2b10      	cmp	r3, #16
 80169fa:	d91b      	bls.n	8016a34 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169fc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169fe:	0742      	lsls	r2, r0, #29
 8016a00:	d013      	beq.n	8016a2a <pvPortMalloc+0x92>
 8016a02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a06:	b672      	cpsid	i
 8016a08:	f383 8811 	msr	BASEPRI, r3
 8016a0c:	f3bf 8f6f 	isb	sy
 8016a10:	f3bf 8f4f 	dsb	sy
 8016a14:	b662      	cpsie	i
 8016a16:	e7fe      	b.n	8016a16 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8016a18:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8016a1c:	f7ff f814 	bl	8015a48 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8016a20:	f7ea f92c 	bl	8000c7c <vApplicationMallocFailedHook>
}
 8016a24:	4640      	mov	r0, r8
 8016a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016a2a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016a2c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016a2e:	f7ff ff81 	bl	8016934 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016a32:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a34:	4b23      	ldr	r3, [pc, #140]	; (8016ac4 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016a36:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a38:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a3a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016a3c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a3e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a40:	bf38      	it	cc
 8016a42:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8016a44:	2300      	movs	r3, #0
 8016a46:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8016a4a:	f7fe fffd 	bl	8015a48 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a4e:	f018 0f07 	tst.w	r8, #7
 8016a52:	d0e7      	beq.n	8016a24 <pvPortMalloc+0x8c>
 8016a54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a58:	b672      	cpsid	i
 8016a5a:	f383 8811 	msr	BASEPRI, r3
 8016a5e:	f3bf 8f6f 	isb	sy
 8016a62:	f3bf 8f4f 	dsb	sy
 8016a66:	b662      	cpsie	i
 8016a68:	e7fe      	b.n	8016a68 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8016a6a:	4b17      	ldr	r3, [pc, #92]	; (8016ac8 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016a6c:	075d      	lsls	r5, r3, #29
 8016a6e:	d11b      	bne.n	8016aa8 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016a70:	461a      	mov	r2, r3
 8016a72:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8016a76:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8016a78:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8016a7a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016a7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a80:	f023 0307 	bic.w	r3, r3, #7
}
 8016a84:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016a86:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8016a88:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8016a8c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016a90:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016a94:	4b0a      	ldr	r3, [pc, #40]	; (8016ac0 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8016a96:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a9a:	4b0a      	ldr	r3, [pc, #40]	; (8016ac4 <pvPortMalloc+0x12c>)
 8016a9c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a9e:	4b07      	ldr	r3, [pc, #28]	; (8016abc <pvPortMalloc+0x124>)
 8016aa0:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016aa2:	4b05      	ldr	r3, [pc, #20]	; (8016ab8 <pvPortMalloc+0x120>)
 8016aa4:	601e      	str	r6, [r3, #0]
}
 8016aa6:	e784      	b.n	80169b2 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016aa8:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016aaa:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8016aae:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016ab2:	4610      	mov	r0, r2
 8016ab4:	e7e0      	b.n	8016a78 <pvPortMalloc+0xe0>
 8016ab6:	bf00      	nop
 8016ab8:	2001e308 	.word	0x2001e308
 8016abc:	2001e30c 	.word	0x2001e30c
 8016ac0:	2001e314 	.word	0x2001e314
 8016ac4:	2001e310 	.word	0x2001e310
 8016ac8:	20006308 	.word	0x20006308
 8016acc:	20006304 	.word	0x20006304

08016ad0 <vPortFree>:
	if( pv != NULL )
 8016ad0:	b1f0      	cbz	r0, 8016b10 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016ad2:	4a1c      	ldr	r2, [pc, #112]	; (8016b44 <vPortFree+0x74>)
 8016ad4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016ad8:	6812      	ldr	r2, [r2, #0]
 8016ada:	4213      	tst	r3, r2
 8016adc:	d00d      	beq.n	8016afa <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ade:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8016ae2:	b1b1      	cbz	r1, 8016b12 <vPortFree+0x42>
 8016ae4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ae8:	b672      	cpsid	i
 8016aea:	f383 8811 	msr	BASEPRI, r3
 8016aee:	f3bf 8f6f 	isb	sy
 8016af2:	f3bf 8f4f 	dsb	sy
 8016af6:	b662      	cpsie	i
 8016af8:	e7fe      	b.n	8016af8 <vPortFree+0x28>
 8016afa:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016afe:	b672      	cpsid	i
 8016b00:	f383 8811 	msr	BASEPRI, r3
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	f3bf 8f4f 	dsb	sy
 8016b0c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b0e:	e7fe      	b.n	8016b0e <vPortFree+0x3e>
 8016b10:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016b12:	ea23 0302 	bic.w	r3, r3, r2
{
 8016b16:	b500      	push	{lr}
 8016b18:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016b1a:	f840 3c04 	str.w	r3, [r0, #-4]
 8016b1e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8016b20:	f7fe fe36 	bl	8015790 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b24:	4a08      	ldr	r2, [pc, #32]	; (8016b48 <vPortFree+0x78>)
 8016b26:	9801      	ldr	r0, [sp, #4]
 8016b28:	6811      	ldr	r1, [r2, #0]
 8016b2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b2e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b30:	440b      	add	r3, r1
 8016b32:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b34:	f7ff fefe 	bl	8016934 <prvInsertBlockIntoFreeList>
}
 8016b38:	b003      	add	sp, #12
 8016b3a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8016b3e:	f7fe bf83 	b.w	8015a48 <xTaskResumeAll>
 8016b42:	bf00      	nop
 8016b44:	2001e308 	.word	0x2001e308
 8016b48:	2001e30c 	.word	0x2001e30c

08016b4c <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8016b4c:	f003 bb10 	b.w	801a170 <pbuf_free>

08016b50 <tcpip_thread>:
{
 8016b50:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8016b52:	4839      	ldr	r0, [pc, #228]	; (8016c38 <tcpip_thread+0xe8>)
{
 8016b54:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8016b56:	f00b feff 	bl	8022958 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016b5a:	4b38      	ldr	r3, [pc, #224]	; (8016c3c <tcpip_thread+0xec>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	b113      	cbz	r3, 8016b66 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8016b60:	4a37      	ldr	r2, [pc, #220]	; (8016c40 <tcpip_thread+0xf0>)
 8016b62:	6810      	ldr	r0, [r2, #0]
 8016b64:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8016b66:	4d34      	ldr	r5, [pc, #208]	; (8016c38 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016b68:	4e36      	ldr	r6, [pc, #216]	; (8016c44 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016b6a:	4f37      	ldr	r7, [pc, #220]	; (8016c48 <tcpip_thread+0xf8>)
 8016b6c:	e010      	b.n	8016b90 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8016b6e:	b168      	cbz	r0, 8016b8c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8016b70:	4628      	mov	r0, r5
 8016b72:	f00b fef7 	bl	8022964 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016b76:	4622      	mov	r2, r4
 8016b78:	a901      	add	r1, sp, #4
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	f00b fea8 	bl	80228d0 <sys_arch_mbox_fetch>
 8016b80:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8016b82:	4628      	mov	r0, r5
 8016b84:	f00b fee8 	bl	8022958 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016b88:	3401      	adds	r4, #1
 8016b8a:	d111      	bne.n	8016bb0 <tcpip_thread+0x60>
    sys_check_timeouts();
 8016b8c:	f008 f85c 	bl	801ec48 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8016b90:	f008 f882 	bl	801ec98 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016b94:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8016b96:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016b98:	d1e9      	bne.n	8016b6e <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	f00b fee2 	bl	8022964 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	a901      	add	r1, sp, #4
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f00b fe93 	bl	80228d0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016baa:	4628      	mov	r0, r5
 8016bac:	f00b fed4 	bl	8022958 <sys_mutex_lock>
    if (msg == NULL) {
 8016bb0:	9c01      	ldr	r4, [sp, #4]
 8016bb2:	b37c      	cbz	r4, 8016c14 <tcpip_thread+0xc4>
  switch (msg->type) {
 8016bb4:	7823      	ldrb	r3, [r4, #0]
 8016bb6:	2b04      	cmp	r3, #4
 8016bb8:	d837      	bhi.n	8016c2a <tcpip_thread+0xda>
 8016bba:	e8df f003 	tbb	[pc, r3]
 8016bbe:	1821      	.short	0x1821
 8016bc0:	070f      	.short	0x070f
 8016bc2:	03          	.byte	0x03
 8016bc3:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016bc4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8016bc8:	4798      	blx	r3
      break;
 8016bca:	e7e1      	b.n	8016b90 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016bcc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8016bd0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016bd2:	4621      	mov	r1, r4
 8016bd4:	2009      	movs	r0, #9
 8016bd6:	f002 fdb3 	bl	8019740 <memp_free>
      break;
 8016bda:	e7d9      	b.n	8016b90 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8016bdc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8016be0:	f008 f814 	bl	801ec0c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016be4:	4621      	mov	r1, r4
 8016be6:	2009      	movs	r0, #9
 8016be8:	f002 fdaa 	bl	8019740 <memp_free>
      break;
 8016bec:	e7d0      	b.n	8016b90 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8016bee:	1d20      	adds	r0, r4, #4
 8016bf0:	c807      	ldmia	r0, {r0, r1, r2}
 8016bf2:	f007 ffed 	bl	801ebd0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	2009      	movs	r0, #9
 8016bfa:	f002 fda1 	bl	8019740 <memp_free>
      break;
 8016bfe:	e7c7      	b.n	8016b90 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016c00:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8016c04:	6860      	ldr	r0, [r4, #4]
 8016c06:	4798      	blx	r3
 8016c08:	b958      	cbnz	r0, 8016c22 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	200a      	movs	r0, #10
 8016c0e:	f002 fd97 	bl	8019740 <memp_free>
      break;
 8016c12:	e7bd      	b.n	8016b90 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016c14:	463b      	mov	r3, r7
 8016c16:	2291      	movs	r2, #145	; 0x91
 8016c18:	490c      	ldr	r1, [pc, #48]	; (8016c4c <tcpip_thread+0xfc>)
 8016c1a:	480d      	ldr	r0, [pc, #52]	; (8016c50 <tcpip_thread+0x100>)
 8016c1c:	f00d fb72 	bl	8024304 <iprintf>
      continue;
 8016c20:	e7b6      	b.n	8016b90 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8016c22:	6860      	ldr	r0, [r4, #4]
 8016c24:	f003 faa4 	bl	801a170 <pbuf_free>
 8016c28:	e7ef      	b.n	8016c0a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016c2a:	463b      	mov	r3, r7
 8016c2c:	22cf      	movs	r2, #207	; 0xcf
 8016c2e:	4907      	ldr	r1, [pc, #28]	; (8016c4c <tcpip_thread+0xfc>)
 8016c30:	4807      	ldr	r0, [pc, #28]	; (8016c50 <tcpip_thread+0x100>)
 8016c32:	f00d fb67 	bl	8024304 <iprintf>
      break;
 8016c36:	e7ab      	b.n	8016b90 <tcpip_thread+0x40>
 8016c38:	2001e31c 	.word	0x2001e31c
 8016c3c:	2001e320 	.word	0x2001e320
 8016c40:	2001e324 	.word	0x2001e324
 8016c44:	2001e328 	.word	0x2001e328
 8016c48:	0802b7b0 	.word	0x0802b7b0
 8016c4c:	0802b7e0 	.word	0x0802b7e0
 8016c50:	08028ab4 	.word	0x08028ab4

08016c54 <tcpip_inpkt>:
{
 8016c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c56:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016c58:	4814      	ldr	r0, [pc, #80]	; (8016cac <tcpip_inpkt+0x58>)
{
 8016c5a:	460e      	mov	r6, r1
 8016c5c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016c5e:	f00b fe59 	bl	8022914 <sys_mbox_valid>
 8016c62:	b188      	cbz	r0, 8016c88 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016c64:	22fe      	movs	r2, #254	; 0xfe
 8016c66:	4912      	ldr	r1, [pc, #72]	; (8016cb0 <tcpip_inpkt+0x5c>)
 8016c68:	200a      	movs	r0, #10
 8016c6a:	f002 fd33 	bl	80196d4 <memp_malloc_fn>
  if (msg == NULL) {
 8016c6e:	4604      	mov	r4, r0
 8016c70:	b1c0      	cbz	r0, 8016ca4 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8016c72:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8016c74:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8016c76:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016c78:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8016c7a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016c7c:	480b      	ldr	r0, [pc, #44]	; (8016cac <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 8016c7e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016c80:	f00b fe1c 	bl	80228bc <sys_mbox_trypost>
 8016c84:	b938      	cbnz	r0, 8016c96 <tcpip_inpkt+0x42>
}
 8016c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016c88:	4b09      	ldr	r3, [pc, #36]	; (8016cb0 <tcpip_inpkt+0x5c>)
 8016c8a:	22fc      	movs	r2, #252	; 0xfc
 8016c8c:	4909      	ldr	r1, [pc, #36]	; (8016cb4 <tcpip_inpkt+0x60>)
 8016c8e:	480a      	ldr	r0, [pc, #40]	; (8016cb8 <tcpip_inpkt+0x64>)
 8016c90:	f00d fb38 	bl	8024304 <iprintf>
 8016c94:	e7e6      	b.n	8016c64 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016c96:	4621      	mov	r1, r4
 8016c98:	200a      	movs	r0, #10
 8016c9a:	f002 fd51 	bl	8019740 <memp_free>
    return ERR_MEM;
 8016c9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8016ca4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016caa:	bf00      	nop
 8016cac:	2001e328 	.word	0x2001e328
 8016cb0:	0802b7b0 	.word	0x0802b7b0
 8016cb4:	0802b800 	.word	0x0802b800
 8016cb8:	08028ab4 	.word	0x08028ab4

08016cbc <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016cbc:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8016cc0:	f013 0f18 	tst.w	r3, #24
 8016cc4:	d002      	beq.n	8016ccc <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016cc6:	4a03      	ldr	r2, [pc, #12]	; (8016cd4 <tcpip_input+0x18>)
 8016cc8:	f7ff bfc4 	b.w	8016c54 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8016ccc:	4a02      	ldr	r2, [pc, #8]	; (8016cd8 <tcpip_input+0x1c>)
 8016cce:	f7ff bfc1 	b.w	8016c54 <tcpip_inpkt>
 8016cd2:	bf00      	nop
 8016cd4:	0802277d 	.word	0x0802277d
 8016cd8:	080219d9 	.word	0x080219d9

08016cdc <tcpip_try_callback>:
{
 8016cdc:	b570      	push	{r4, r5, r6, lr}
 8016cde:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ce0:	4814      	ldr	r0, [pc, #80]	; (8016d34 <tcpip_try_callback+0x58>)
{
 8016ce2:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ce4:	f00b fe16 	bl	8022914 <sys_mbox_valid>
 8016ce8:	b188      	cbz	r0, 8016d0e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016cea:	f240 125f 	movw	r2, #351	; 0x15f
 8016cee:	4912      	ldr	r1, [pc, #72]	; (8016d38 <tcpip_try_callback+0x5c>)
 8016cf0:	2009      	movs	r0, #9
 8016cf2:	f002 fcef 	bl	80196d4 <memp_malloc_fn>
  if (msg == NULL) {
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	b1c0      	cbz	r0, 8016d2c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8016cfa:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016cfc:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8016cfe:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016d02:	480c      	ldr	r0, [pc, #48]	; (8016d34 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8016d04:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016d06:	f00b fdd9 	bl	80228bc <sys_mbox_trypost>
 8016d0a:	b940      	cbnz	r0, 8016d1e <tcpip_try_callback+0x42>
}
 8016d0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016d0e:	4b0a      	ldr	r3, [pc, #40]	; (8016d38 <tcpip_try_callback+0x5c>)
 8016d10:	f240 125d 	movw	r2, #349	; 0x15d
 8016d14:	4909      	ldr	r1, [pc, #36]	; (8016d3c <tcpip_try_callback+0x60>)
 8016d16:	480a      	ldr	r0, [pc, #40]	; (8016d40 <tcpip_try_callback+0x64>)
 8016d18:	f00d faf4 	bl	8024304 <iprintf>
 8016d1c:	e7e5      	b.n	8016cea <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016d1e:	4621      	mov	r1, r4
 8016d20:	2009      	movs	r0, #9
 8016d22:	f002 fd0d 	bl	8019740 <memp_free>
    return ERR_MEM;
 8016d26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8016d2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016d30:	bd70      	pop	{r4, r5, r6, pc}
 8016d32:	bf00      	nop
 8016d34:	2001e328 	.word	0x2001e328
 8016d38:	0802b7b0 	.word	0x0802b7b0
 8016d3c:	0802b800 	.word	0x0802b800
 8016d40:	08028ab4 	.word	0x08028ab4

08016d44 <tcpip_init>:
{
 8016d44:	b530      	push	{r4, r5, lr}
 8016d46:	b083      	sub	sp, #12
 8016d48:	4605      	mov	r5, r0
 8016d4a:	460c      	mov	r4, r1
  lwip_init();
 8016d4c:	f001 ffae 	bl	8018cac <lwip_init>
  tcpip_init_done = initfunc;
 8016d50:	4a15      	ldr	r2, [pc, #84]	; (8016da8 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016d52:	2114      	movs	r1, #20
  tcpip_init_done_arg = arg;
 8016d54:	4b15      	ldr	r3, [pc, #84]	; (8016dac <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016d56:	4816      	ldr	r0, [pc, #88]	; (8016db0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8016d58:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8016d5a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016d5c:	f00b fd98 	bl	8022890 <sys_mbox_new>
 8016d60:	b968      	cbnz	r0, 8016d7e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016d62:	4814      	ldr	r0, [pc, #80]	; (8016db4 <tcpip_init+0x70>)
 8016d64:	f00b fde8 	bl	8022938 <sys_mutex_new>
 8016d68:	b9a8      	cbnz	r0, 8016d96 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d70:	4911      	ldr	r1, [pc, #68]	; (8016db8 <tcpip_init+0x74>)
 8016d72:	9200      	str	r2, [sp, #0]
 8016d74:	4811      	ldr	r0, [pc, #68]	; (8016dbc <tcpip_init+0x78>)
 8016d76:	f00b fdf9 	bl	802296c <sys_thread_new>
}
 8016d7a:	b003      	add	sp, #12
 8016d7c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016d7e:	4b10      	ldr	r3, [pc, #64]	; (8016dc0 <tcpip_init+0x7c>)
 8016d80:	f240 2261 	movw	r2, #609	; 0x261
 8016d84:	490f      	ldr	r1, [pc, #60]	; (8016dc4 <tcpip_init+0x80>)
 8016d86:	4810      	ldr	r0, [pc, #64]	; (8016dc8 <tcpip_init+0x84>)
 8016d88:	f00d fabc 	bl	8024304 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016d8c:	4809      	ldr	r0, [pc, #36]	; (8016db4 <tcpip_init+0x70>)
 8016d8e:	f00b fdd3 	bl	8022938 <sys_mutex_new>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d0e9      	beq.n	8016d6a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016d96:	4b0a      	ldr	r3, [pc, #40]	; (8016dc0 <tcpip_init+0x7c>)
 8016d98:	f240 2265 	movw	r2, #613	; 0x265
 8016d9c:	490b      	ldr	r1, [pc, #44]	; (8016dcc <tcpip_init+0x88>)
 8016d9e:	480a      	ldr	r0, [pc, #40]	; (8016dc8 <tcpip_init+0x84>)
 8016da0:	f00d fab0 	bl	8024304 <iprintf>
 8016da4:	e7e1      	b.n	8016d6a <tcpip_init+0x26>
 8016da6:	bf00      	nop
 8016da8:	2001e320 	.word	0x2001e320
 8016dac:	2001e324 	.word	0x2001e324
 8016db0:	2001e328 	.word	0x2001e328
 8016db4:	2001e31c 	.word	0x2001e31c
 8016db8:	08016b51 	.word	0x08016b51
 8016dbc:	0802b858 	.word	0x0802b858
 8016dc0:	0802b7b0 	.word	0x0802b7b0
 8016dc4:	0802b810 	.word	0x0802b810
 8016dc8:	08028ab4 	.word	0x08028ab4
 8016dcc:	0802b834 	.word	0x0802b834

08016dd0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8016dd0:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8016dd2:	4801      	ldr	r0, [pc, #4]	; (8016dd8 <pbuf_free_callback+0x8>)
 8016dd4:	f7ff bf82 	b.w	8016cdc <tcpip_try_callback>
 8016dd8:	08016b4d 	.word	0x08016b4d

08016ddc <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8016ddc:	b1e8      	cbz	r0, 8016e1a <fs_open+0x3e>
{
 8016dde:	b570      	push	{r4, r5, r6, lr}
 8016de0:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8016de2:	b1b9      	cbz	r1, 8016e14 <fs_open+0x38>
 8016de4:	4606      	mov	r6, r0
 8016de6:	490e      	ldr	r1, [pc, #56]	; (8016e20 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016de8:	4c0e      	ldr	r4, [pc, #56]	; (8016e24 <fs_open+0x48>)
 8016dea:	e000      	b.n	8016dee <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8016dec:	6861      	ldr	r1, [r4, #4]
 8016dee:	4628      	mov	r0, r5
 8016df0:	f7e9 fa26 	bl	8000240 <strcmp>
 8016df4:	b128      	cbz	r0, 8016e02 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016df6:	6824      	ldr	r4, [r4, #0]
 8016df8:	2c00      	cmp	r4, #0
 8016dfa:	d1f7      	bne.n	8016dec <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8016dfc:	f06f 0005 	mvn.w	r0, #5
}
 8016e00:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8016e02:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8016e06:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8016e08:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8016e0a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8016e0e:	7c23      	ldrb	r3, [r4, #16]
 8016e10:	7433      	strb	r3, [r6, #16]
}
 8016e12:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8016e14:	f06f 000f 	mvn.w	r0, #15
}
 8016e18:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8016e1a:	f06f 000f 	mvn.w	r0, #15
}
 8016e1e:	4770      	bx	lr
 8016e20:	080366ec 	.word	0x080366ec
 8016e24:	08041858 	.word	0x08041858

08016e28 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop

08016e2c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8016e2c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8016e30:	1a10      	subs	r0, r2, r0
 8016e32:	4770      	bx	lr

08016e34 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8016e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8016e38:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8016e3a:	b374      	cbz	r4, 8016e9a <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8016e3c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8016e40:	4617      	mov	r7, r2
 8016e42:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8016e46:	4605      	mov	r5, r0
 8016e48:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8016e4c:	460e      	mov	r6, r1
 8016e4e:	4698      	mov	r8, r3
 8016e50:	fa1f fc8c 	uxth.w	ip, ip
 8016e54:	4594      	cmp	ip, r2
 8016e56:	bf28      	it	cs
 8016e58:	4694      	movcs	ip, r2
 8016e5a:	4564      	cmp	r4, ip
 8016e5c:	bf28      	it	cs
 8016e5e:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8016e60:	4643      	mov	r3, r8
 8016e62:	4622      	mov	r2, r4
 8016e64:	4631      	mov	r1, r6
 8016e66:	4628      	mov	r0, r5
 8016e68:	f006 fd1a 	bl	801d8a0 <tcp_write>
    if (err == ERR_MEM) {
 8016e6c:	1c43      	adds	r3, r0, #1
 8016e6e:	d007      	beq.n	8016e80 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8016e70:	b970      	cbnz	r0, 8016e90 <http_write+0x5c>
 8016e72:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8016e74:	8b6b      	ldrh	r3, [r5, #26]
 8016e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e7a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8016e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8016e80:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8016e84:	b123      	cbz	r3, 8016e90 <http_write+0x5c>
 8016e86:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8016e8a:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8016e8c:	2b08      	cmp	r3, #8
 8016e8e:	d901      	bls.n	8016e94 <http_write+0x60>
    *length = 0;
 8016e90:	2400      	movs	r4, #0
 8016e92:	e7ee      	b.n	8016e72 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8016e94:	2c01      	cmp	r4, #1
 8016e96:	d8e3      	bhi.n	8016e60 <http_write+0x2c>
 8016e98:	e7fa      	b.n	8016e90 <http_write+0x5c>
    return ERR_OK;
 8016e9a:	4620      	mov	r0, r4
}
 8016e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ea0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8016ea0:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8016ea2:	4b0e      	ldr	r3, [pc, #56]	; (8016edc <http_get_404_file+0x3c>)
{
 8016ea4:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8016ea6:	4604      	mov	r4, r0
 8016ea8:	4619      	mov	r1, r3
  *uri = "/404.html";
 8016eaa:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8016eac:	f7ff ff96 	bl	8016ddc <fs_open>
  if (err != ERR_OK) {
 8016eb0:	b908      	cbnz	r0, 8016eb6 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8016eb6:	490a      	ldr	r1, [pc, #40]	; (8016ee0 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8016eb8:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8016eba:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8016ebc:	f7ff ff8e 	bl	8016ddc <fs_open>
    if (err != ERR_OK) {
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d0f6      	beq.n	8016eb2 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8016ec4:	4907      	ldr	r1, [pc, #28]	; (8016ee4 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8016ec6:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8016ec8:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8016eca:	f7ff ff87 	bl	8016ddc <fs_open>
      if (err != ERR_OK) {
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	d0ef      	beq.n	8016eb2 <http_get_404_file+0x12>
        *uri = NULL;
 8016ed2:	2300      	movs	r3, #0
        return NULL;
 8016ed4:	461c      	mov	r4, r3
        *uri = NULL;
 8016ed6:	602b      	str	r3, [r5, #0]
        return NULL;
 8016ed8:	e7eb      	b.n	8016eb2 <http_get_404_file+0x12>
 8016eda:	bf00      	nop
 8016edc:	0804186c 	.word	0x0804186c
 8016ee0:	08041878 	.word	0x08041878
 8016ee4:	08041884 	.word	0x08041884

08016ee8 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8016ee8:	bb82      	cbnz	r2, 8016f4c <http_accept+0x64>
{
 8016eea:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8016eec:	fab1 f581 	clz	r5, r1
 8016ef0:	460c      	mov	r4, r1
 8016ef2:	096d      	lsrs	r5, r5, #5
 8016ef4:	b339      	cbz	r1, 8016f46 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f003 fec3 	bl	801ac84 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8016efe:	2034      	movs	r0, #52	; 0x34
 8016f00:	f002 fa46 	bl	8019390 <mem_malloc>
  if (ret != NULL) {
 8016f04:	4606      	mov	r6, r0
 8016f06:	b1d8      	cbz	r0, 8016f40 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8016f08:	2234      	movs	r2, #52	; 0x34
 8016f0a:	4629      	mov	r1, r5
 8016f0c:	f00c fa5c 	bl	80233c8 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8016f10:	4631      	mov	r1, r6
 8016f12:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8016f14:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8016f16:	f003 feeb 	bl	801acf0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	490d      	ldr	r1, [pc, #52]	; (8016f54 <http_accept+0x6c>)
 8016f1e:	f003 feeb 	bl	801acf8 <tcp_recv>
  altcp_err(pcb, http_err);
 8016f22:	4620      	mov	r0, r4
 8016f24:	490c      	ldr	r1, [pc, #48]	; (8016f58 <http_accept+0x70>)
 8016f26:	f003 ff1f 	bl	801ad68 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8016f2a:	2204      	movs	r2, #4
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	490b      	ldr	r1, [pc, #44]	; (8016f5c <http_accept+0x74>)
 8016f30:	f003 ff3c 	bl	801adac <tcp_poll>
  altcp_sent(pcb, http_sent);
 8016f34:	4620      	mov	r0, r4
 8016f36:	490a      	ldr	r1, [pc, #40]	; (8016f60 <http_accept+0x78>)
 8016f38:	f003 fefa 	bl	801ad30 <tcp_sent>

  return ERR_OK;
 8016f3c:	4628      	mov	r0, r5
}
 8016f3e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8016f40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8016f46:	f06f 0005 	mvn.w	r0, #5
}
 8016f4a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8016f4c:	f06f 0005 	mvn.w	r0, #5
}
 8016f50:	4770      	bx	lr
 8016f52:	bf00      	nop
 8016f54:	08017bc1 	.word	0x08017bc1
 8016f58:	080174a9 	.word	0x080174a9
 8016f5c:	08017b69 	.word	0x08017b69
 8016f60:	08017b51 	.word	0x08017b51

08016f64 <http_init_file>:
{
 8016f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f68:	b087      	sub	sp, #28
 8016f6a:	4604      	mov	r4, r0
  if (file != NULL) {
 8016f6c:	460e      	mov	r6, r1
{
 8016f6e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8016f72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8016f78:	2900      	cmp	r1, #0
 8016f7a:	f000 80aa 	beq.w	80170d2 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8016f7e:	680b      	ldr	r3, [r1, #0]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	f000 80ac 	beq.w	80170de <http_init_file+0x17a>
    if (tag_check) {
 8016f86:	2f00      	cmp	r7, #0
 8016f88:	d16f      	bne.n	801706a <http_init_file+0x106>
    hs->handle = file;
 8016f8a:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8016f8c:	2d00      	cmp	r5, #0
 8016f8e:	d04f      	beq.n	8017030 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8016f90:	782b      	ldrb	r3, [r5, #0]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	f000 80c0 	beq.w	8017118 <http_init_file+0x1b4>
 8016f98:	4b61      	ldr	r3, [pc, #388]	; (8017120 <http_init_file+0x1bc>)
 8016f9a:	2701      	movs	r7, #1
 8016f9c:	9405      	str	r4, [sp, #20]
 8016f9e:	462c      	mov	r4, r5
 8016fa0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017124 <http_init_file+0x1c0>
 8016fa4:	4698      	mov	r8, r3
 8016fa6:	9304      	str	r3, [sp, #16]
 8016fa8:	e017      	b.n	8016fda <http_init_file+0x76>
 8016faa:	2d0e      	cmp	r5, #14
      *pair = '\0';
 8016fac:	f04f 0300 	mov.w	r3, #0
 8016fb0:	bfcc      	ite	gt
 8016fb2:	2500      	movgt	r5, #0
 8016fb4:	2501      	movle	r5, #1
 8016fb6:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 8016fba:	4620      	mov	r0, r4
 8016fbc:	213d      	movs	r1, #61	; 0x3d
 8016fbe:	f00d fc25 	bl	802480c <strchr>
    if (equals) {
 8016fc2:	b320      	cbz	r0, 801700e <http_init_file+0xaa>
      *equals = '\0';
 8016fc4:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016fc8:	f108 0804 	add.w	r8, r8, #4
 8016fcc:	3701      	adds	r7, #1
 8016fce:	465c      	mov	r4, fp
      *equals = '\0';
 8016fd0:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8016fd4:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016fd8:	b30d      	cbz	r5, 801701e <http_init_file+0xba>
    pair = strchr(pair, '&');
 8016fda:	4620      	mov	r0, r4
 8016fdc:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 8016fde:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8016fe2:	1e7d      	subs	r5, r7, #1
 8016fe4:	f00d fc12 	bl	802480c <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016fe8:	46ba      	mov	sl, r7
    if (pair) {
 8016fea:	4683      	mov	fp, r0
 8016fec:	2800      	cmp	r0, #0
 8016fee:	d1dc      	bne.n	8016faa <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016ff4:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8016ff6:	f00d fc09 	bl	802480c <strchr>
      if (pair) {
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0dd      	beq.n	8016fba <http_init_file+0x56>
        *pair = '\0';
 8016ffe:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8017002:	213d      	movs	r1, #61	; 0x3d
 8017004:	4620      	mov	r0, r4
 8017006:	f00d fc01 	bl	802480c <strchr>
    if (equals) {
 801700a:	2800      	cmp	r0, #0
 801700c:	d1da      	bne.n	8016fc4 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801700e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017012:	3701      	adds	r7, #1
 8017014:	f108 0804 	add.w	r8, r8, #4
 8017018:	465c      	mov	r4, fp
 801701a:	2d00      	cmp	r5, #0
 801701c:	d1dd      	bne.n	8016fda <http_init_file+0x76>
 801701e:	4652      	mov	r2, sl
 8017020:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8017022:	9b04      	ldr	r3, [sp, #16]
 8017024:	4630      	mov	r0, r6
 8017026:	9903      	ldr	r1, [sp, #12]
 8017028:	9300      	str	r3, [sp, #0]
 801702a:	4b3e      	ldr	r3, [pc, #248]	; (8017124 <http_init_file+0x1c0>)
 801702c:	f7f0 f864 	bl	80070f8 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017030:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017034:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8017036:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017038:	db5c      	blt.n	80170f4 <http_init_file+0x190>
    hs->retries = 0;
 801703a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 801703c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 801703e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8017040:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8017044:	7c1b      	ldrb	r3, [r3, #16]
 8017046:	07d9      	lsls	r1, r3, #31
 8017048:	d526      	bpl.n	8017098 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801704a:	9b02      	ldr	r3, [sp, #8]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d132      	bne.n	80170b6 <http_init_file+0x152>
  if (hs->keepalive) {
 8017050:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8017054:	b12b      	cbz	r3, 8017062 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8017056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017058:	2b00      	cmp	r3, #0
 801705a:	d054      	beq.n	8017106 <http_init_file+0x1a2>
      hs->keepalive = 0;
 801705c:	2300      	movs	r3, #0
 801705e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8017062:	2000      	movs	r0, #0
 8017064:	b007      	add	sp, #28
 8017066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 801706a:	f44f 7090 	mov.w	r0, #288	; 0x120
 801706e:	f002 f98f 	bl	8019390 <mem_malloc>
  if (ret != NULL) {
 8017072:	4607      	mov	r7, r0
 8017074:	2800      	cmp	r0, #0
 8017076:	d088      	beq.n	8016f8a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8017078:	f44f 7290 	mov.w	r2, #288	; 0x120
 801707c:	2100      	movs	r1, #0
 801707e:	f00c f9a3 	bl	80233c8 <memset>
        ssi->parsed = file->data;
 8017082:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8017084:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8017086:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8017088:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 801708c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 801708e:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8017090:	2d00      	cmp	r5, #0
 8017092:	f47f af7d 	bne.w	8016f90 <http_init_file+0x2c>
 8017096:	e7cb      	b.n	8017030 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8017098:	4b23      	ldr	r3, [pc, #140]	; (8017128 <http_init_file+0x1c4>)
 801709a:	f640 1243 	movw	r2, #2371	; 0x943
 801709e:	4923      	ldr	r1, [pc, #140]	; (801712c <http_init_file+0x1c8>)
 80170a0:	4823      	ldr	r0, [pc, #140]	; (8017130 <http_init_file+0x1cc>)
 80170a2:	f00d f92f 	bl	8024304 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80170a6:	9b02      	ldr	r3, [sp, #8]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d0d1      	beq.n	8017050 <http_init_file+0xec>
 80170ac:	6963      	ldr	r3, [r4, #20]
 80170ae:	7c1b      	ldrb	r3, [r3, #16]
 80170b0:	07db      	lsls	r3, r3, #31
 80170b2:	d5cd      	bpl.n	8017050 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80170b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80170b6:	491f      	ldr	r1, [pc, #124]	; (8017134 <http_init_file+0x1d0>)
 80170b8:	69a0      	ldr	r0, [r4, #24]
 80170ba:	f001 f823 	bl	8018104 <lwip_strnstr>
      if (file_start != NULL) {
 80170be:	2800      	cmp	r0, #0
 80170c0:	d0c6      	beq.n	8017050 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 80170c2:	3004      	adds	r0, #4
 80170c4:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 80170c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 80170c8:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 80170ca:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 80170cc:	1a9b      	subs	r3, r3, r2
 80170ce:	6263      	str	r3, [r4, #36]	; 0x24
 80170d0:	e7be      	b.n	8017050 <http_init_file+0xec>
    hs->file = NULL;
 80170d2:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 80170d6:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 80170d8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80170dc:	e7b8      	b.n	8017050 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80170de:	4b12      	ldr	r3, [pc, #72]	; (8017128 <http_init_file+0x1c4>)
 80170e0:	f640 120b 	movw	r2, #2315	; 0x90b
 80170e4:	4914      	ldr	r1, [pc, #80]	; (8017138 <http_init_file+0x1d4>)
 80170e6:	4812      	ldr	r0, [pc, #72]	; (8017130 <http_init_file+0x1cc>)
 80170e8:	f00d f90c 	bl	8024304 <iprintf>
    if (tag_check) {
 80170ec:	2f00      	cmp	r7, #0
 80170ee:	f43f af4c 	beq.w	8016f8a <http_init_file+0x26>
 80170f2:	e7ba      	b.n	801706a <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80170f4:	f640 1234 	movw	r2, #2356	; 0x934
 80170f8:	4b0b      	ldr	r3, [pc, #44]	; (8017128 <http_init_file+0x1c4>)
 80170fa:	4910      	ldr	r1, [pc, #64]	; (801713c <http_init_file+0x1d8>)
 80170fc:	480c      	ldr	r0, [pc, #48]	; (8017130 <http_init_file+0x1cc>)
 80170fe:	f00d f901 	bl	8024304 <iprintf>
      hs->left = (u32_t)file->len;
 8017102:	6872      	ldr	r2, [r6, #4]
 8017104:	e799      	b.n	801703a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8017106:	6963      	ldr	r3, [r4, #20]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d0aa      	beq.n	8017062 <http_init_file+0xfe>
 801710c:	7c1b      	ldrb	r3, [r3, #16]
 801710e:	f003 0303 	and.w	r3, r3, #3
 8017112:	2b01      	cmp	r3, #1
 8017114:	d1a5      	bne.n	8017062 <http_init_file+0xfe>
 8017116:	e7a1      	b.n	801705c <http_init_file+0xf8>
    return (0);
 8017118:	461a      	mov	r2, r3
 801711a:	4b01      	ldr	r3, [pc, #4]	; (8017120 <http_init_file+0x1bc>)
 801711c:	9304      	str	r3, [sp, #16]
 801711e:	e780      	b.n	8017022 <http_init_file+0xbe>
 8017120:	2001e32c 	.word	0x2001e32c
 8017124:	2001e36c 	.word	0x2001e36c
 8017128:	08041890 	.word	0x08041890
 801712c:	080418fc 	.word	0x080418fc
 8017130:	08028ab4 	.word	0x08028ab4
 8017134:	08028d48 	.word	0x08028d48
 8017138:	080418c8 	.word	0x080418c8
 801713c:	080418dc 	.word	0x080418dc

08017140 <http_find_file>:
{
 8017140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	ed2d 8b02 	vpush	{d8}
 8017148:	b087      	sub	sp, #28
 801714a:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 801714c:	4608      	mov	r0, r1
 801714e:	460c      	mov	r4, r1
{
 8017150:	4690      	mov	r8, r2
 8017152:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8017154:	f7e9 f87e 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017158:	4606      	mov	r6, r0
 801715a:	b148      	cbz	r0, 8017170 <http_find_file+0x30>
 801715c:	f100 39ff 	add.w	r9, r0, #4294967295
 8017160:	f814 3009 	ldrb.w	r3, [r4, r9]
 8017164:	2b2f      	cmp	r3, #47	; 0x2f
 8017166:	d06a      	beq.n	801723e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8017168:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 801716a:	f04f 0900 	mov.w	r9, #0
 801716e:	e001      	b.n	8017174 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8017170:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8017172:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8017174:	213f      	movs	r1, #63	; 0x3f
 8017176:	4620      	mov	r0, r4
 8017178:	f00d fb48 	bl	802480c <strchr>
    if (params != NULL) {
 801717c:	4606      	mov	r6, r0
 801717e:	b118      	cbz	r0, 8017188 <http_find_file+0x48>
      *params = '\0';
 8017180:	2300      	movs	r3, #0
 8017182:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8017186:	9c05      	ldr	r4, [sp, #20]
 8017188:	4621      	mov	r1, r4
 801718a:	4628      	mov	r0, r5
 801718c:	f7ff fe26 	bl	8016ddc <fs_open>
    if (err == ERR_OK) {
 8017190:	b9b0      	cbnz	r0, 80171c0 <http_find_file+0x80>
    if (file != NULL) {
 8017192:	b1e7      	cbz	r7, 80171ce <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8017194:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017198:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 801719a:	f019 0908 	ands.w	r9, r9, #8
 801719e:	d01d      	beq.n	80171dc <http_find_file+0x9c>
        tag_check = 1;
 80171a0:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80171a4:	4623      	mov	r3, r4
 80171a6:	4642      	mov	r2, r8
 80171a8:	4639      	mov	r1, r7
 80171aa:	4628      	mov	r0, r5
 80171ac:	9601      	str	r6, [sp, #4]
 80171ae:	f8cd 9000 	str.w	r9, [sp]
 80171b2:	f7ff fed7 	bl	8016f64 <http_init_file>
}
 80171b6:	b007      	add	sp, #28
 80171b8:	ecbd 8b02 	vpop	{d8}
 80171bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 80171c0:	a905      	add	r1, sp, #20
 80171c2:	4628      	mov	r0, r5
 80171c4:	f7ff fe6c 	bl	8016ea0 <http_get_404_file>
 80171c8:	4607      	mov	r7, r0
    if (file != NULL) {
 80171ca:	2f00      	cmp	r7, #0
 80171cc:	d1e2      	bne.n	8017194 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 80171ce:	a905      	add	r1, sp, #20
 80171d0:	4628      	mov	r0, r5
 80171d2:	f7ff fe65 	bl	8016ea0 <http_get_404_file>
 80171d6:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80171d8:	9c05      	ldr	r4, [sp, #20]
 80171da:	e7e3      	b.n	80171a4 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 80171dc:	213f      	movs	r1, #63	; 0x3f
 80171de:	4620      	mov	r0, r4
 80171e0:	f00d fb14 	bl	802480c <strchr>
    if (param != NULL) {
 80171e4:	4682      	mov	sl, r0
 80171e6:	b108      	cbz	r0, 80171ec <http_find_file+0xac>
      *param = 0;
 80171e8:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80171ec:	212e      	movs	r1, #46	; 0x2e
 80171ee:	4620      	mov	r0, r4
 80171f0:	f00d fb0c 	bl	802480c <strchr>
 80171f4:	4603      	mov	r3, r0
 80171f6:	b138      	cbz	r0, 8017208 <http_find_file+0xc8>
 80171f8:	1c58      	adds	r0, r3, #1
 80171fa:	212e      	movs	r1, #46	; 0x2e
 80171fc:	461c      	mov	r4, r3
 80171fe:	f00d fb05 	bl	802480c <strchr>
 8017202:	4603      	mov	r3, r0
 8017204:	2800      	cmp	r0, #0
 8017206:	d1f7      	bne.n	80171f8 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8017208:	4940      	ldr	r1, [pc, #256]	; (801730c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801720a:	4620      	mov	r0, r4
 801720c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 801731c <http_find_file+0x1dc>
 8017210:	f000 ffa0 	bl	8018154 <lwip_stricmp>
 8017214:	b148      	cbz	r0, 801722a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8017216:	4b3e      	ldr	r3, [pc, #248]	; (8017310 <http_find_file+0x1d0>)
 8017218:	459b      	cmp	fp, r3
 801721a:	d008      	beq.n	801722e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801721c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8017220:	4620      	mov	r0, r4
 8017222:	f000 ff97 	bl	8018154 <lwip_stricmp>
 8017226:	2800      	cmp	r0, #0
 8017228:	d1f5      	bne.n	8017216 <http_find_file+0xd6>
        tag_check = 1;
 801722a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 801722e:	f1ba 0f00 	cmp.w	sl, #0
 8017232:	d0d1      	beq.n	80171d8 <http_find_file+0x98>
      *param = '?';
 8017234:	233f      	movs	r3, #63	; 0x3f
 8017236:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801723a:	9c05      	ldr	r4, [sp, #20]
 801723c:	e7b2      	b.n	80171a4 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801723e:	4b35      	ldr	r3, [pc, #212]	; (8017314 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017240:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017242:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017244:	d106      	bne.n	8017254 <http_find_file+0x114>
 8017246:	f1a0 0001 	sub.w	r0, r0, #1
 801724a:	fab0 f080 	clz	r0, r0
 801724e:	0940      	lsrs	r0, r0, #5
 8017250:	2800      	cmp	r0, #0
 8017252:	d057      	beq.n	8017304 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8017254:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8017258:	bf28      	it	cs
 801725a:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 801725e:	2e01      	cmp	r6, #1
 8017260:	d008      	beq.n	8017274 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8017262:	464a      	mov	r2, r9
 8017264:	4621      	mov	r1, r4
 8017266:	482b      	ldr	r0, [pc, #172]	; (8017314 <http_find_file+0x1d4>)
 8017268:	f00c f886 	bl	8023378 <memcpy>
      http_uri_buf[copy_len] = 0;
 801726c:	2300      	movs	r3, #0
 801726e:	9a02      	ldr	r2, [sp, #8]
 8017270:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8017274:	462f      	mov	r7, r5
 8017276:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 801727a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8017314 <http_find_file+0x1d4>
 801727e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8017282:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8017284:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8017286:	d012      	beq.n	80172ae <http_find_file+0x16e>
        if (len_left > 0) {
 8017288:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 801728c:	d113      	bne.n	80172b6 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 801728e:	4641      	mov	r1, r8
 8017290:	4628      	mov	r0, r5
 8017292:	f7ff fda3 	bl	8016ddc <fs_open>
      if (err == ERR_OK) {
 8017296:	b338      	cbz	r0, 80172e8 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8017298:	f10b 0b01 	add.w	fp, fp, #1
 801729c:	f1bb 0f05 	cmp.w	fp, #5
 80172a0:	d1ef      	bne.n	8017282 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 80172a2:	ee18 8a10 	vmov	r8, s16
 80172a6:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 80172a8:	f04f 0900 	mov.w	r9, #0
 80172ac:	e762      	b.n	8017174 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 80172ae:	4b1a      	ldr	r3, [pc, #104]	; (8017318 <http_find_file+0x1d8>)
 80172b0:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 80172b4:	e7eb      	b.n	801728e <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80172b6:	4b18      	ldr	r3, [pc, #96]	; (8017318 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80172b8:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80172ba:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 80172be:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80172c0:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80172c2:	4608      	mov	r0, r1
 80172c4:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 80172c6:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80172ca:	f7e8 ffc3 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80172ce:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80172d0:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80172d2:	4282      	cmp	r2, r0
 80172d4:	bf28      	it	cs
 80172d6:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80172d8:	4620      	mov	r0, r4
 80172da:	9203      	str	r2, [sp, #12]
 80172dc:	f00c f84c 	bl	8023378 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	9a03      	ldr	r2, [sp, #12]
 80172e4:	54a3      	strb	r3, [r4, r2]
 80172e6:	e7d2      	b.n	801728e <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 80172e8:	4a0b      	ldr	r2, [pc, #44]	; (8017318 <http_find_file+0x1d8>)
        uri = file_name;
 80172ea:	4644      	mov	r4, r8
 80172ec:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 80172f0:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 80172f4:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 80172f6:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 80172fa:	2d00      	cmp	r5, #0
 80172fc:	f43f af3a 	beq.w	8017174 <http_find_file+0x34>
  char *params = NULL;
 8017300:	4606      	mov	r6, r0
 8017302:	e74f      	b.n	80171a4 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8017304:	462f      	mov	r7, r5
 8017306:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8017308:	4681      	mov	r9, r0
 801730a:	e733      	b.n	8017174 <http_find_file+0x34>
 801730c:	08041950 	.word	0x08041950
 8017310:	08041b9c 	.word	0x08041b9c
 8017314:	2001e3ac 	.word	0x2001e3ac
 8017318:	08041bac 	.word	0x08041bac
 801731c:	08041b8c 	.word	0x08041b8c

08017320 <http_post_rxpbuf>:
{
 8017320:	b538      	push	{r3, r4, r5, lr}
 8017322:	4604      	mov	r4, r0
  if (p != NULL) {
 8017324:	b1c9      	cbz	r1, 801735a <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8017326:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017328:	890a      	ldrh	r2, [r1, #8]
 801732a:	4293      	cmp	r3, r2
 801732c:	d31a      	bcc.n	8017364 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 801732e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8017330:	4620      	mov	r0, r4
 8017332:	6323      	str	r3, [r4, #48]	; 0x30
 8017334:	f7ef ffee 	bl	8007314 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8017338:	b178      	cbz	r0, 801735a <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 801733a:	2300      	movs	r3, #0
 801733c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 801733e:	490a      	ldr	r1, [pc, #40]	; (8017368 <http_post_rxpbuf+0x48>)
 8017340:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017342:	4620      	mov	r0, r4
 8017344:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8017346:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017348:	f7ef fff4 	bl	8007334 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 801734c:	462a      	mov	r2, r5
 801734e:	4620      	mov	r0, r4
 8017350:	4905      	ldr	r1, [pc, #20]	; (8017368 <http_post_rxpbuf+0x48>)
}
 8017352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8017356:	f7ff bef3 	b.w	8017140 <http_find_file>
  if (hs->post_content_len_left == 0) {
 801735a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801735c:	2b00      	cmp	r3, #0
 801735e:	d0ee      	beq.n	801733e <http_post_rxpbuf+0x1e>
}
 8017360:	2000      	movs	r0, #0
 8017362:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8017364:	2300      	movs	r3, #0
 8017366:	e7e3      	b.n	8017330 <http_post_rxpbuf+0x10>
 8017368:	2001e3ac 	.word	0x2001e3ac

0801736c <http_find_error_file>:
  if (error_nr == 501) {
 801736c:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8017370:	4a17      	ldr	r2, [pc, #92]	; (80173d0 <http_find_error_file+0x64>)
 8017372:	4299      	cmp	r1, r3
 8017374:	4b17      	ldr	r3, [pc, #92]	; (80173d4 <http_find_error_file+0x68>)
 8017376:	4918      	ldr	r1, [pc, #96]	; (80173d8 <http_find_error_file+0x6c>)
{
 8017378:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801737a:	4e18      	ldr	r6, [pc, #96]	; (80173dc <http_find_error_file+0x70>)
 801737c:	bf18      	it	ne
 801737e:	461e      	movne	r6, r3
 8017380:	4b17      	ldr	r3, [pc, #92]	; (80173e0 <http_find_error_file+0x74>)
 8017382:	bf18      	it	ne
 8017384:	460b      	movne	r3, r1
{
 8017386:	b084      	sub	sp, #16
 8017388:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801738a:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 801738c:	4d15      	ldr	r5, [pc, #84]	; (80173e4 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801738e:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8017390:	bf08      	it	eq
 8017392:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017394:	f7ff fd22 	bl	8016ddc <fs_open>
 8017398:	9b03      	ldr	r3, [sp, #12]
 801739a:	b128      	cbz	r0, 80173a8 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801739c:	4629      	mov	r1, r5
 801739e:	4620      	mov	r0, r4
 80173a0:	f7ff fd1c 	bl	8016ddc <fs_open>
 80173a4:	b948      	cbnz	r0, 80173ba <http_find_error_file+0x4e>
    uri = uri2;
 80173a6:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 80173a8:	2200      	movs	r2, #0
 80173aa:	4621      	mov	r1, r4
 80173ac:	4620      	mov	r0, r4
 80173ae:	e9cd 2200 	strd	r2, r2, [sp]
 80173b2:	f7ff fdd7 	bl	8016f64 <http_init_file>
}
 80173b6:	b004      	add	sp, #16
 80173b8:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 80173ba:	4631      	mov	r1, r6
 80173bc:	4620      	mov	r0, r4
 80173be:	f7ff fd0d 	bl	8016ddc <fs_open>
 80173c2:	b908      	cbnz	r0, 80173c8 <http_find_error_file+0x5c>
    uri = uri3;
 80173c4:	4633      	mov	r3, r6
 80173c6:	e7ef      	b.n	80173a8 <http_find_error_file+0x3c>
    return ERR_ARG;
 80173c8:	f06f 000f 	mvn.w	r0, #15
 80173cc:	e7f3      	b.n	80173b6 <http_find_error_file+0x4a>
 80173ce:	bf00      	nop
 80173d0:	08041934 	.word	0x08041934
 80173d4:	0804194c 	.word	0x0804194c
 80173d8:	08041964 	.word	0x08041964
 80173dc:	08041928 	.word	0x08041928
 80173e0:	08041940 	.word	0x08041940
 80173e4:	08041958 	.word	0x08041958

080173e8 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	4605      	mov	r5, r0
  if (hs != NULL) {
 80173ec:	460c      	mov	r4, r1
 80173ee:	2900      	cmp	r1, #0
 80173f0:	d041      	beq.n	8017476 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 80173f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80173f4:	bb83      	cbnz	r3, 8017458 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 80173f6:	2100      	movs	r1, #0
 80173f8:	4628      	mov	r0, r5
 80173fa:	f003 fc79 	bl	801acf0 <tcp_arg>
  altcp_recv(pcb, NULL);
 80173fe:	2100      	movs	r1, #0
 8017400:	4628      	mov	r0, r5
 8017402:	f003 fc79 	bl	801acf8 <tcp_recv>
  altcp_err(pcb, NULL);
 8017406:	2100      	movs	r1, #0
 8017408:	4628      	mov	r0, r5
 801740a:	f003 fcad 	bl	801ad68 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801740e:	2200      	movs	r2, #0
 8017410:	4628      	mov	r0, r5
 8017412:	4611      	mov	r1, r2
 8017414:	f003 fcca 	bl	801adac <tcp_poll>
  altcp_sent(pcb, NULL);
 8017418:	4628      	mov	r0, r5
 801741a:	2100      	movs	r1, #0
 801741c:	f003 fc88 	bl	801ad30 <tcp_sent>
  if (hs->handle) {
 8017420:	6960      	ldr	r0, [r4, #20]
 8017422:	b118      	cbz	r0, 801742c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8017424:	f7ff fd00 	bl	8016e28 <fs_close>
    hs->handle = NULL;
 8017428:	2300      	movs	r3, #0
 801742a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801742c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801742e:	b118      	cbz	r0, 8017438 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8017430:	f001 fdf2 	bl	8019018 <mem_free>
    hs->ssi = NULL;
 8017434:	2300      	movs	r3, #0
 8017436:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017438:	6a20      	ldr	r0, [r4, #32]
 801743a:	b118      	cbz	r0, 8017444 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 801743c:	f002 fe98 	bl	801a170 <pbuf_free>
    hs->req = NULL;
 8017440:	2300      	movs	r3, #0
 8017442:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8017444:	4620      	mov	r0, r4
 8017446:	f001 fde7 	bl	8019018 <mem_free>
  err = altcp_close(pcb);
 801744a:	4628      	mov	r0, r5
 801744c:	f004 fb0c 	bl	801ba68 <tcp_close>
  if (err != ERR_OK) {
 8017450:	4604      	mov	r4, r0
 8017452:	b948      	cbnz	r0, 8017468 <http_close_or_abort_conn.constprop.0+0x80>
}
 8017454:	4620      	mov	r0, r4
 8017456:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8017458:	4911      	ldr	r1, [pc, #68]	; (80174a0 <http_close_or_abort_conn.constprop.0+0xb8>)
 801745a:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 801745c:	223f      	movs	r2, #63	; 0x3f
 801745e:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8017460:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017462:	f7ef ff67 	bl	8007334 <httpd_post_finished>
 8017466:	e7c6      	b.n	80173f6 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017468:	4628      	mov	r0, r5
 801746a:	2204      	movs	r2, #4
 801746c:	490d      	ldr	r1, [pc, #52]	; (80174a4 <http_close_or_abort_conn.constprop.0+0xbc>)
 801746e:	f003 fc9d 	bl	801adac <tcp_poll>
}
 8017472:	4620      	mov	r0, r4
 8017474:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8017476:	f003 fc3b 	bl	801acf0 <tcp_arg>
  altcp_recv(pcb, NULL);
 801747a:	4621      	mov	r1, r4
 801747c:	4628      	mov	r0, r5
 801747e:	f003 fc3b 	bl	801acf8 <tcp_recv>
  altcp_err(pcb, NULL);
 8017482:	4621      	mov	r1, r4
 8017484:	4628      	mov	r0, r5
 8017486:	f003 fc6f 	bl	801ad68 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801748a:	4621      	mov	r1, r4
 801748c:	4628      	mov	r0, r5
 801748e:	4622      	mov	r2, r4
 8017490:	f003 fc8c 	bl	801adac <tcp_poll>
  altcp_sent(pcb, NULL);
 8017494:	4621      	mov	r1, r4
 8017496:	4628      	mov	r0, r5
 8017498:	f003 fc4a 	bl	801ad30 <tcp_sent>
  if (hs != NULL) {
 801749c:	e7d5      	b.n	801744a <http_close_or_abort_conn.constprop.0+0x62>
 801749e:	bf00      	nop
 80174a0:	2001e3ac 	.word	0x2001e3ac
 80174a4:	08017b69 	.word	0x08017b69

080174a8 <http_err>:
  if (hs != NULL) {
 80174a8:	b1c0      	cbz	r0, 80174dc <http_err+0x34>
{
 80174aa:	b510      	push	{r4, lr}
 80174ac:	4604      	mov	r4, r0
  if (hs->handle) {
 80174ae:	6940      	ldr	r0, [r0, #20]
 80174b0:	b118      	cbz	r0, 80174ba <http_err+0x12>
    fs_close(hs->handle);
 80174b2:	f7ff fcb9 	bl	8016e28 <fs_close>
    hs->handle = NULL;
 80174b6:	2300      	movs	r3, #0
 80174b8:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80174ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80174bc:	b118      	cbz	r0, 80174c6 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 80174be:	f001 fdab 	bl	8019018 <mem_free>
    hs->ssi = NULL;
 80174c2:	2300      	movs	r3, #0
 80174c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80174c6:	6a20      	ldr	r0, [r4, #32]
 80174c8:	b118      	cbz	r0, 80174d2 <http_err+0x2a>
    pbuf_free(hs->req);
 80174ca:	f002 fe51 	bl	801a170 <pbuf_free>
    hs->req = NULL;
 80174ce:	2300      	movs	r3, #0
 80174d0:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80174d2:	4620      	mov	r0, r4
}
 80174d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80174d8:	f001 bd9e 	b.w	8019018 <mem_free>
 80174dc:	4770      	bx	lr
 80174de:	bf00      	nop

080174e0 <http_eof>:
{
 80174e0:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 80174e2:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80174e6:	b1fb      	cbz	r3, 8017528 <http_eof+0x48>
 80174e8:	4605      	mov	r5, r0
  if (hs->handle) {
 80174ea:	6948      	ldr	r0, [r1, #20]
 80174ec:	460c      	mov	r4, r1
 80174ee:	b118      	cbz	r0, 80174f8 <http_eof+0x18>
    fs_close(hs->handle);
 80174f0:	f7ff fc9a 	bl	8016e28 <fs_close>
    hs->handle = NULL;
 80174f4:	2300      	movs	r3, #0
 80174f6:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80174f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80174fa:	b118      	cbz	r0, 8017504 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 80174fc:	f001 fd8c 	bl	8019018 <mem_free>
    hs->ssi = NULL;
 8017500:	2300      	movs	r3, #0
 8017502:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017504:	6a20      	ldr	r0, [r4, #32]
 8017506:	b108      	cbz	r0, 801750c <http_eof+0x2c>
    pbuf_free(hs->req);
 8017508:	f002 fe32 	bl	801a170 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801750c:	2234      	movs	r2, #52	; 0x34
 801750e:	2100      	movs	r1, #0
 8017510:	4620      	mov	r0, r4
 8017512:	f00b ff59 	bl	80233c8 <memset>
    hs->keepalive = 1;
 8017516:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8017518:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801751a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801751e:	8b6b      	ldrh	r3, [r5, #26]
 8017520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017524:	836b      	strh	r3, [r5, #26]
}
 8017526:	bd38      	pop	{r3, r4, r5, pc}
 8017528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801752c:	f7ff bf5c 	b.w	80173e8 <http_close_or_abort_conn.constprop.0>

08017530 <http_send>:
{
 8017530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8017534:	460d      	mov	r5, r1
{
 8017536:	b087      	sub	sp, #28
  if (hs == NULL) {
 8017538:	2900      	cmp	r1, #0
 801753a:	f000 824b 	beq.w	80179d4 <http_send+0x4a4>
  if (hs->left == 0) {
 801753e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8017540:	4607      	mov	r7, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	f000 818c 	beq.w	8017860 <http_send+0x330>
  if (hs->ssi) {
 8017548:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801754a:	2c00      	cmp	r4, #0
 801754c:	f000 819a 	beq.w	8017884 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 8017550:	6823      	ldr	r3, [r4, #0]
 8017552:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8017554:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8017558:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 801755a:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 801755e:	f200 80c3 	bhi.w	80176e8 <http_send+0x1b8>
  u8_t data_to_send = 0;
 8017562:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 8017566:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017568:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 801756c:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017570:	2b04      	cmp	r3, #4
 8017572:	d003      	beq.n	801757c <http_send+0x4c>
 8017574:	68e1      	ldr	r1, [r4, #12]
 8017576:	2900      	cmp	r1, #0
 8017578:	f000 8091 	beq.w	801769e <http_send+0x16e>
 801757c:	2e00      	cmp	r6, #0
 801757e:	f040 811b 	bne.w	80177b8 <http_send+0x288>
    if (len == 0) {
 8017582:	2a00      	cmp	r2, #0
 8017584:	f000 811b 	beq.w	80177be <http_send+0x28e>
    switch (ssi->tag_state) {
 8017588:	2b04      	cmp	r3, #4
 801758a:	d8f1      	bhi.n	8017570 <http_send+0x40>
 801758c:	e8df f003 	tbb	[pc, r3]
 8017590:	23407466 	.word	0x23407466
 8017594:	03          	.byte	0x03
 8017595:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8017596:	68a3      	ldr	r3, [r4, #8]
 8017598:	69a9      	ldr	r1, [r5, #24]
 801759a:	428b      	cmp	r3, r1
 801759c:	f240 80f1 	bls.w	8017782 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80175a0:	6863      	ldr	r3, [r4, #4]
 80175a2:	4299      	cmp	r1, r3
 80175a4:	f200 81fc 	bhi.w	80179a0 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80175a8:	1a5a      	subs	r2, r3, r1
 80175aa:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80175ae:	4282      	cmp	r2, r0
 80175b0:	f340 8117 	ble.w	80177e2 <http_send+0x2b2>
 80175b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175b8:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80175bc:	2300      	movs	r3, #0
 80175be:	f10d 0216 	add.w	r2, sp, #22
 80175c2:	4638      	mov	r0, r7
 80175c4:	f7ff fc36 	bl	8016e34 <http_write>
          if (err == ERR_OK) {
 80175c8:	2800      	cmp	r0, #0
 80175ca:	f000 81fe 	beq.w	80179ca <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80175ce:	4606      	mov	r6, r0
    if (len == 0) {
 80175d0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80175d4:	e11a      	b.n	801780c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80175d6:	6821      	ldr	r1, [r4, #0]
 80175d8:	8a20      	ldrh	r0, [r4, #16]
 80175da:	f891 e000 	ldrb.w	lr, [r1]
 80175de:	2800      	cmp	r0, #0
 80175e0:	f040 80b9 	bne.w	8017756 <http_send+0x226>
 80175e4:	f1ae 0c09 	sub.w	ip, lr, #9
 80175e8:	fa5f fc8c 	uxtb.w	ip, ip
 80175ec:	f1bc 0f17 	cmp.w	ip, #23
 80175f0:	f200 80b1 	bhi.w	8017756 <http_send+0x226>
 80175f4:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 801799c <http_send+0x46c>
 80175f8:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80175fc:	f01c 0f01 	tst.w	ip, #1
 8017600:	f000 80a9 	beq.w	8017756 <http_send+0x226>
          ssi->parsed++;
 8017604:	3101      	adds	r1, #1
 8017606:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8017608:	68e1      	ldr	r1, [r4, #12]
 801760a:	3901      	subs	r1, #1
 801760c:	60e1      	str	r1, [r4, #12]
          break;
 801760e:	e7af      	b.n	8017570 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8017610:	8a20      	ldrh	r0, [r4, #16]
 8017612:	2800      	cmp	r0, #0
 8017614:	f040 8083 	bne.w	801771e <http_send+0x1ee>
 8017618:	6821      	ldr	r1, [r4, #0]
 801761a:	f891 e000 	ldrb.w	lr, [r1]
 801761e:	f1ae 0c09 	sub.w	ip, lr, #9
 8017622:	fa5f fc8c 	uxtb.w	ip, ip
 8017626:	f1bc 0f17 	cmp.w	ip, #23
 801762a:	f240 8110 	bls.w	801784e <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801762e:	f8df c350 	ldr.w	ip, [pc, #848]	; 8017980 <http_send+0x450>
 8017632:	f894 9014 	ldrb.w	r9, [r4, #20]
 8017636:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 801763a:	f8dc c004 	ldr.w	ip, [ip, #4]
 801763e:	f89c c000 	ldrb.w	ip, [ip]
 8017642:	45f4      	cmp	ip, lr
 8017644:	f000 8083 	beq.w	801774e <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8017648:	f100 0c01 	add.w	ip, r0, #1
 801764c:	4420      	add	r0, r4
 801764e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8017652:	f891 c000 	ldrb.w	ip, [r1]
 8017656:	f880 c016 	strb.w	ip, [r0, #22]
 801765a:	e7d3      	b.n	8017604 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801765c:	6821      	ldr	r1, [r4, #0]
 801765e:	7808      	ldrb	r0, [r1, #0]
 8017660:	283c      	cmp	r0, #60	; 0x3c
 8017662:	d002      	beq.n	801766a <http_send+0x13a>
 8017664:	282f      	cmp	r0, #47	; 0x2f
 8017666:	d1cd      	bne.n	8017604 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8017668:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 801766a:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 801766c:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 801766e:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8017670:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8017674:	8223      	strh	r3, [r4, #16]
            break;
 8017676:	e7c5      	b.n	8017604 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8017678:	49c1      	ldr	r1, [pc, #772]	; (8017980 <http_send+0x450>)
 801767a:	7d20      	ldrb	r0, [r4, #20]
 801767c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017680:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8017684:	f811 100c 	ldrb.w	r1, [r1, ip]
 8017688:	2900      	cmp	r1, #0
 801768a:	f040 8086 	bne.w	801779a <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 801768e:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8017690:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017692:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8017694:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017698:	2900      	cmp	r1, #0
 801769a:	f47f af6f 	bne.w	801757c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801769e:	6823      	ldr	r3, [r4, #0]
 80176a0:	69a9      	ldr	r1, [r5, #24]
 80176a2:	428b      	cmp	r3, r1
 80176a4:	f240 808b 	bls.w	80177be <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176a8:	1a5b      	subs	r3, r3, r1
 80176aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176ae:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176b0:	4293      	cmp	r3, r2
 80176b2:	bfa8      	it	ge
 80176b4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176b6:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176be:	2300      	movs	r3, #0
 80176c0:	f7ff fbb8 	bl	8016e34 <http_write>
    if (err == ERR_OK) {
 80176c4:	2800      	cmp	r0, #0
 80176c6:	d17a      	bne.n	80177be <http_send+0x28e>
    hs->file += len;
 80176c8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 80176cc:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 80176d0:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80176d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80176d4:	440a      	add	r2, r1
    hs->left -= len;
 80176d6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80176d8:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80176da:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d071      	beq.n	80177c4 <http_send+0x294>
}
 80176e0:	4640      	mov	r0, r8
 80176e2:	b007      	add	sp, #28
 80176e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176e8:	1a5b      	subs	r3, r3, r1
 80176ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176ee:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176f0:	4293      	cmp	r3, r2
 80176f2:	bfa8      	it	ge
 80176f4:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176f6:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80176fa:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80176fe:	2300      	movs	r3, #0
 8017700:	f7ff fb98 	bl	8016e34 <http_write>
    if (err == ERR_OK) {
 8017704:	4606      	mov	r6, r0
 8017706:	2800      	cmp	r0, #0
 8017708:	f000 8154 	beq.w	80179b4 <http_send+0x484>
  u8_t data_to_send = 0;
 801770c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8017710:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017714:	2b00      	cmp	r3, #0
 8017716:	d052      	beq.n	80177be <http_send+0x28e>
    if (len == 0) {
 8017718:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801771c:	e724      	b.n	8017568 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801771e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8017980 <http_send+0x450>
 8017722:	7d21      	ldrb	r1, [r4, #20]
 8017724:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8017728:	f8d1 e004 	ldr.w	lr, [r1, #4]
 801772c:	6821      	ldr	r1, [r4, #0]
 801772e:	f89e a000 	ldrb.w	sl, [lr]
 8017732:	f891 c000 	ldrb.w	ip, [r1]
 8017736:	45e2      	cmp	sl, ip
 8017738:	d072      	beq.n	8017820 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 801773a:	f1ac 0c09 	sub.w	ip, ip, #9
 801773e:	fa5f fc8c 	uxtb.w	ip, ip
 8017742:	f1bc 0f17 	cmp.w	ip, #23
 8017746:	d964      	bls.n	8017812 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8017748:	2807      	cmp	r0, #7
 801774a:	f67f af7d 	bls.w	8017648 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 801774e:	2300      	movs	r3, #0
 8017750:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8017754:	e756      	b.n	8017604 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8017756:	f894 9014 	ldrb.w	r9, [r4, #20]
 801775a:	f8df c224 	ldr.w	ip, [pc, #548]	; 8017980 <http_send+0x450>
 801775e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 8017762:	f8dc c004 	ldr.w	ip, [ip, #4]
 8017766:	f81c 9000 	ldrb.w	r9, [ip, r0]
 801776a:	45f1      	cmp	r9, lr
 801776c:	f000 80a1 	beq.w	80178b2 <http_send+0x382>
          ssi->parse_left--;
 8017770:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8017772:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8017774:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8017778:	3b01      	subs	r3, #1
          ssi->parsed++;
 801777a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 801777c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 801777e:	2300      	movs	r3, #0
 8017780:	e6f8      	b.n	8017574 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8017782:	8a21      	ldrh	r1, [r4, #16]
 8017784:	8a60      	ldrh	r0, [r4, #18]
 8017786:	4281      	cmp	r1, r0
 8017788:	f0c0 80e0 	bcc.w	801794c <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8017790:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8017794:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8017798:	e6ec      	b.n	8017574 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 801779a:	6820      	ldr	r0, [r4, #0]
 801779c:	f890 e000 	ldrb.w	lr, [r0]
 80177a0:	458e      	cmp	lr, r1
 80177a2:	f000 80ce 	beq.w	8017942 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 80177a6:	2300      	movs	r3, #0
 80177a8:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80177ac:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 80177ae:	3001      	adds	r0, #1
          ssi->parse_left--;
 80177b0:	3901      	subs	r1, #1
          ssi->parsed++;
 80177b2:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 80177b4:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80177b6:	e6db      	b.n	8017570 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80177b8:	2b04      	cmp	r3, #4
 80177ba:	f47f af70 	bne.w	801769e <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80177be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d18d      	bne.n	80176e0 <http_send+0x1b0>
 80177c4:	6968      	ldr	r0, [r5, #20]
 80177c6:	f7ff fb31 	bl	8016e2c <fs_bytes_left>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	dc88      	bgt.n	80176e0 <http_send+0x1b0>
      return 0;
 80177ce:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 80177d2:	4638      	mov	r0, r7
 80177d4:	4629      	mov	r1, r5
 80177d6:	f7ff fe83 	bl	80174e0 <http_eof>
}
 80177da:	4640      	mov	r0, r8
 80177dc:	b007      	add	sp, #28
 80177de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e2:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80177e4:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 80177e8:	2a00      	cmp	r2, #0
 80177ea:	f47f aee7 	bne.w	80175bc <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 80177ee:	428b      	cmp	r3, r1
 80177f0:	d805      	bhi.n	80177fe <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80177f2:	68a0      	ldr	r0, [r4, #8]
 80177f4:	1ac3      	subs	r3, r0, r3
 80177f6:	441a      	add	r2, r3
 80177f8:	b292      	uxth	r2, r2
 80177fa:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 80177fe:	4411      	add	r1, r2
 8017800:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8017802:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8017804:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8017808:	1a9b      	subs	r3, r3, r2
 801780a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801780c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8017810:	e6ae      	b.n	8017570 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8017812:	f8df a188 	ldr.w	sl, [pc, #392]	; 801799c <http_send+0x46c>
 8017816:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 801781a:	f01c 0f01 	tst.w	ip, #1
 801781e:	d093      	beq.n	8017748 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8017820:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8017822:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8017824:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8017828:	f200 80e0 	bhi.w	80179ec <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801782c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 801782e:	4420      	add	r0, r4
 8017830:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8017834:	f89e 3000 	ldrb.w	r3, [lr]
 8017838:	780a      	ldrb	r2, [r1, #0]
 801783a:	429a      	cmp	r2, r3
 801783c:	f000 80cf 	beq.w	80179de <http_send+0x4ae>
              ssi->tag_index = 0;
 8017840:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017844:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8017848:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801784c:	e6da      	b.n	8017604 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801784e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 801799c <http_send+0x46c>
 8017852:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8017856:	f01c 0f01 	tst.w	ip, #1
 801785a:	f47f aed3 	bne.w	8017604 <http_send+0xd4>
 801785e:	e6e6      	b.n	801762e <http_send+0xfe>
  if (hs->handle == NULL) {
 8017860:	6948      	ldr	r0, [r1, #20]
 8017862:	2800      	cmp	r0, #0
 8017864:	d0b3      	beq.n	80177ce <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 8017866:	f7ff fae1 	bl	8016e2c <fs_bytes_left>
  if (bytes_left <= 0) {
 801786a:	2800      	cmp	r0, #0
 801786c:	ddaf      	ble.n	80177ce <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801786e:	4b45      	ldr	r3, [pc, #276]	; (8017984 <http_send+0x454>)
 8017870:	f240 429d 	movw	r2, #1181	; 0x49d
 8017874:	4944      	ldr	r1, [pc, #272]	; (8017988 <http_send+0x458>)
 8017876:	4845      	ldr	r0, [pc, #276]	; (801798c <http_send+0x45c>)
 8017878:	f00c fd44 	bl	8024304 <iprintf>
  if (hs->ssi) {
 801787c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801787e:	2c00      	cmp	r4, #0
 8017880:	f47f ae66 	bne.w	8017550 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8017884:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801788c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801788e:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8017890:	428a      	cmp	r2, r1
 8017892:	bf88      	it	hi
 8017894:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017896:	4623      	mov	r3, r4
 8017898:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801789a:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801789e:	f10d 0216 	add.w	r2, sp, #22
 80178a2:	f7ff fac7 	bl	8016e34 <http_write>
  if (err == ERR_OK) {
 80178a6:	2800      	cmp	r0, #0
 80178a8:	f43f af0e 	beq.w	80176c8 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80178ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 80178ae:	46a0      	mov	r8, r4
 80178b0:	e714      	b.n	80176dc <http_send+0x1ac>
          ssi->parsed++;
 80178b2:	3101      	adds	r1, #1
          ssi->tag_index++;
 80178b4:	3001      	adds	r0, #1
          ssi->parsed++;
 80178b6:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 80178b8:	b280      	uxth	r0, r0
          ssi->parse_left--;
 80178ba:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 80178bc:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 80178be:	3901      	subs	r1, #1
 80178c0:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80178c2:	f81c 1000 	ldrb.w	r1, [ip, r0]
 80178c6:	2900      	cmp	r1, #0
 80178c8:	f47f ae52 	bne.w	8017570 <http_send+0x40>
  ssi = hs->ssi;
 80178cc:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80178d0:	f1b9 0f00 	cmp.w	r9, #0
 80178d4:	f000 8115 	beq.w	8017b02 <http_send+0x5d2>
  if (httpd_ssi_handler
 80178d8:	4b2d      	ldr	r3, [pc, #180]	; (8017990 <http_send+0x460>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	9300      	str	r3, [sp, #0]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	f000 8093 	beq.w	8017a0a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 80178e4:	4b2b      	ldr	r3, [pc, #172]	; (8017994 <http_send+0x464>)
 80178e6:	681a      	ldr	r2, [r3, #0]
 80178e8:	2a00      	cmp	r2, #0
 80178ea:	f000 808e 	beq.w	8017a0a <http_send+0x4da>
 80178ee:	4b2a      	ldr	r3, [pc, #168]	; (8017998 <http_send+0x468>)
 80178f0:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80178f2:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 80178f4:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80178f6:	f340 8088 	ble.w	8017a0a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80178fa:	f109 0a16 	add.w	sl, r9, #22
 80178fe:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8017900:	2300      	movs	r3, #0
 8017902:	9503      	str	r5, [sp, #12]
 8017904:	460d      	mov	r5, r1
 8017906:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801790a:	4656      	mov	r6, sl
 801790c:	461c      	mov	r4, r3
 801790e:	4692      	mov	sl, r2
 8017910:	e003      	b.n	801791a <http_send+0x3ea>
 8017912:	3401      	adds	r4, #1
 8017914:	42a5      	cmp	r5, r4
 8017916:	f000 8105 	beq.w	8017b24 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801791a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801791e:	4630      	mov	r0, r6
 8017920:	f7e8 fc8e 	bl	8000240 <strcmp>
 8017924:	2800      	cmp	r0, #0
 8017926:	d1f4      	bne.n	8017912 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8017928:	4623      	mov	r3, r4
 801792a:	22fe      	movs	r2, #254	; 0xfe
 801792c:	f109 011f 	add.w	r1, r9, #31
 8017930:	9e02      	ldr	r6, [sp, #8]
 8017932:	4618      	mov	r0, r3
 8017934:	9b00      	ldr	r3, [sp, #0]
 8017936:	9c01      	ldr	r4, [sp, #4]
 8017938:	9d03      	ldr	r5, [sp, #12]
 801793a:	4798      	blx	r3
 801793c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 8017940:	e0a6      	b.n	8017a90 <http_send+0x560>
            ssi->tag_index++;
 8017942:	f10c 0c01 	add.w	ip, ip, #1
 8017946:	f8a4 c010 	strh.w	ip, [r4, #16]
 801794a:	e72f      	b.n	80177ac <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 801794c:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801794e:	311f      	adds	r1, #31
 8017950:	f10d 0216 	add.w	r2, sp, #22
 8017954:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 8017956:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801795a:	4421      	add	r1, r4
 801795c:	4638      	mov	r0, r7
 801795e:	f7ff fa69 	bl	8016e34 <http_write>
              ssi->tag_index += len;
 8017962:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 8017966:	4606      	mov	r6, r0
 8017968:	2800      	cmp	r0, #0
 801796a:	f47f af4f 	bne.w	801780c <http_send+0x2dc>
              ssi->tag_index += len;
 801796e:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8017970:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8017974:	4413      	add	r3, r2
 8017976:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8017978:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 801797c:	e5f8      	b.n	8017570 <http_send+0x40>
 801797e:	bf00      	nop
 8017980:	08041b9c 	.word	0x08041b9c
 8017984:	08041890 	.word	0x08041890
 8017988:	08041970 	.word	0x08041970
 801798c:	08028ab4 	.word	0x08028ab4
 8017990:	2001e7f0 	.word	0x2001e7f0
 8017994:	2001e7f4 	.word	0x2001e7f4
 8017998:	2001e3ec 	.word	0x2001e3ec
 801799c:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80179a0:	4b63      	ldr	r3, [pc, #396]	; (8017b30 <http_send+0x600>)
 80179a2:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80179a6:	4963      	ldr	r1, [pc, #396]	; (8017b34 <http_send+0x604>)
 80179a8:	4863      	ldr	r0, [pc, #396]	; (8017b38 <http_send+0x608>)
 80179aa:	f00c fcab 	bl	8024304 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80179ae:	6863      	ldr	r3, [r4, #4]
 80179b0:	69a9      	ldr	r1, [r5, #24]
 80179b2:	e5f9      	b.n	80175a8 <http_send+0x78>
      hs->file += len;
 80179b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 80179b8:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 80179bc:	69ab      	ldr	r3, [r5, #24]
 80179be:	4413      	add	r3, r2
 80179c0:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 80179c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80179c4:	1a9b      	subs	r3, r3, r2
 80179c6:	626b      	str	r3, [r5, #36]	; 0x24
 80179c8:	e6a2      	b.n	8017710 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 80179ca:	6863      	ldr	r3, [r4, #4]
 80179cc:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80179ce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80179d2:	e70c      	b.n	80177ee <http_send+0x2be>
    return 0;
 80179d4:	4688      	mov	r8, r1
}
 80179d6:	4640      	mov	r0, r8
 80179d8:	b007      	add	sp, #28
 80179da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 80179de:	2301      	movs	r3, #1
 80179e0:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80179e2:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 80179e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80179ea:	e60b      	b.n	8017604 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80179ec:	4b50      	ldr	r3, [pc, #320]	; (8017b30 <http_send+0x600>)
 80179ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80179f2:	4952      	ldr	r1, [pc, #328]	; (8017b3c <http_send+0x60c>)
 80179f4:	4850      	ldr	r0, [pc, #320]	; (8017b38 <http_send+0x608>)
 80179f6:	f00c fc85 	bl	8024304 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80179fa:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80179fc:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80179fe:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8017a02:	6821      	ldr	r1, [r4, #0]
 8017a04:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8017a08:	e710      	b.n	801782c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8017a0a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8017a0e:	4650      	mov	r0, sl
 8017a10:	f7e8 fc20 	bl	8000254 <strlen>
 8017a14:	28e4      	cmp	r0, #228	; 0xe4
 8017a16:	d865      	bhi.n	8017ae4 <http_send+0x5b4>
 8017a18:	2809      	cmp	r0, #9
 8017a1a:	bf28      	it	cs
 8017a1c:	2009      	movcs	r0, #9
 8017a1e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8017a22:	4686      	mov	lr, r0
 8017a24:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8017a26:	f100 0319 	add.w	r3, r0, #25
 8017a2a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017a2c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8017b4c <http_send+0x61c>
 8017a30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017a34:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8017a38:	f8bc 3000 	ldrh.w	r3, [ip]
 8017a3c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017a40:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017a44:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017a48:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017a4a:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017a4e:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8017a50:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8017a54:	f00b fc90 	bl	8023378 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017a58:	4b39      	ldr	r3, [pc, #228]	; (8017b40 <http_send+0x610>)
 8017a5a:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8017a5c:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017a5e:	eb09 0e02 	add.w	lr, r9, r2
 8017a62:	6818      	ldr	r0, [r3, #0]
 8017a64:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8017a68:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017a6a:	799b      	ldrb	r3, [r3, #6]
 8017a6c:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8017a70:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8017a74:	f8ae c004 	strh.w	ip, [lr, #4]
 8017a78:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8017a7c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8017a80:	f7e8 fbe8 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8017a84:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8017a88:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8017a8a:	d232      	bcs.n	8017af2 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8017a8c:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8017a90:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8017a92:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8017a94:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8017a96:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8017a9a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8017a9c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8017aa0:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8017aa2:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8017aa4:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8017aa6:	d802      	bhi.n	8017aae <http_send+0x57e>
    if (len == 0) {
 8017aa8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017aac:	e566      	b.n	801757c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017aae:	1a52      	subs	r2, r2, r1
 8017ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017ab4:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	bfa8      	it	ge
 8017aba:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017abc:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8017abe:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8017ac2:	f10d 0216 	add.w	r2, sp, #22
 8017ac6:	f7ff f9b5 	bl	8016e34 <http_write>
              if (err == ERR_OK) {
 8017aca:	4606      	mov	r6, r0
 8017acc:	2800      	cmp	r0, #0
 8017ace:	f47f ad7f 	bne.w	80175d0 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8017ad2:	6861      	ldr	r1, [r4, #4]
 8017ad4:	69ab      	ldr	r3, [r5, #24]
 8017ad6:	4299      	cmp	r1, r3
 8017ad8:	d91b      	bls.n	8017b12 <http_send+0x5e2>
                hs->file += len;
 8017ada:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017ade:	4413      	add	r3, r2
 8017ae0:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8017ae2:	e68e      	b.n	8017802 <http_send+0x2d2>
 8017ae4:	233a      	movs	r3, #58	; 0x3a
 8017ae6:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8017ae8:	f04f 0e09 	mov.w	lr, #9
 8017aec:	e9cd 3200 	strd	r3, r2, [sp]
 8017af0:	e79c      	b.n	8017a2c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8017af2:	4b0f      	ldr	r3, [pc, #60]	; (8017b30 <http_send+0x600>)
 8017af4:	f240 323f 	movw	r2, #831	; 0x33f
 8017af8:	4912      	ldr	r1, [pc, #72]	; (8017b44 <http_send+0x614>)
 8017afa:	480f      	ldr	r0, [pc, #60]	; (8017b38 <http_send+0x608>)
 8017afc:	f00c fc02 	bl	8024304 <iprintf>
 8017b00:	e7c4      	b.n	8017a8c <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8017b02:	4b0b      	ldr	r3, [pc, #44]	; (8017b30 <http_send+0x600>)
 8017b04:	f240 3206 	movw	r2, #774	; 0x306
 8017b08:	490f      	ldr	r1, [pc, #60]	; (8017b48 <http_send+0x618>)
 8017b0a:	480b      	ldr	r0, [pc, #44]	; (8017b38 <http_send+0x608>)
 8017b0c:	f00c fbfa 	bl	8024304 <iprintf>
 8017b10:	e6e2      	b.n	80178d8 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8017b12:	68a2      	ldr	r2, [r4, #8]
 8017b14:	1a52      	subs	r2, r2, r1
 8017b16:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8017b1a:	440a      	add	r2, r1
 8017b1c:	b292      	uxth	r2, r2
 8017b1e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017b22:	e7dc      	b.n	8017ade <http_send+0x5ae>
 8017b24:	46b2      	mov	sl, r6
 8017b26:	9c01      	ldr	r4, [sp, #4]
 8017b28:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8017b2c:	e76f      	b.n	8017a0e <http_send+0x4de>
 8017b2e:	bf00      	nop
 8017b30:	08041890 	.word	0x08041890
 8017b34:	080419f8 	.word	0x080419f8
 8017b38:	08028ab4 	.word	0x08028ab4
 8017b3c:	080419a8 	.word	0x080419a8
 8017b40:	080419e0 	.word	0x080419e0
 8017b44:	080419e8 	.word	0x080419e8
 8017b48:	080419c0 	.word	0x080419c0
 8017b4c:	080419cc 	.word	0x080419cc

08017b50 <http_sent>:
{
 8017b50:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8017b52:	4603      	mov	r3, r0
 8017b54:	b130      	cbz	r0, 8017b64 <http_sent+0x14>
  hs->retries = 0;
 8017b56:	2200      	movs	r2, #0
 8017b58:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8017b5a:	4619      	mov	r1, r3
  hs->retries = 0;
 8017b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8017b60:	f7ff fce6 	bl	8017530 <http_send>
}
 8017b64:	2000      	movs	r0, #0
 8017b66:	bd08      	pop	{r3, pc}

08017b68 <http_poll>:
{
 8017b68:	b510      	push	{r4, lr}
 8017b6a:	460c      	mov	r4, r1
  if (hs == NULL) {
 8017b6c:	b1a8      	cbz	r0, 8017b9a <http_poll+0x32>
    hs->retries++;
 8017b6e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017b72:	3301      	adds	r3, #1
 8017b74:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8017b76:	2b04      	cmp	r3, #4
    hs->retries++;
 8017b78:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8017b7c:	d019      	beq.n	8017bb2 <http_poll+0x4a>
    if (hs->handle) {
 8017b7e:	6943      	ldr	r3, [r0, #20]
 8017b80:	b123      	cbz	r3, 8017b8c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8017b82:	4601      	mov	r1, r0
 8017b84:	4620      	mov	r0, r4
 8017b86:	f7ff fcd3 	bl	8017530 <http_send>
 8017b8a:	b908      	cbnz	r0, 8017b90 <http_poll+0x28>
  return ERR_OK;
 8017b8c:	2000      	movs	r0, #0
}
 8017b8e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8017b90:	4620      	mov	r0, r4
 8017b92:	f006 fc9f 	bl	801e4d4 <tcp_output>
  return ERR_OK;
 8017b96:	2000      	movs	r0, #0
 8017b98:	e7f9      	b.n	8017b8e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8017b9a:	4601      	mov	r1, r0
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7ff fc23 	bl	80173e8 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8017ba2:	3001      	adds	r0, #1
 8017ba4:	d1f2      	bne.n	8017b8c <http_poll+0x24>
      altcp_abort(pcb);
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f003 fd66 	bl	801b678 <tcp_abort>
      return ERR_ABRT;
 8017bac:	f06f 000c 	mvn.w	r0, #12
}
 8017bb0:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8017bb2:	4601      	mov	r1, r0
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7ff fc17 	bl	80173e8 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8017bba:	2000      	movs	r0, #0
}
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	bf00      	nop

08017bc0 <http_recv>:
{
 8017bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc4:	4605      	mov	r5, r0
 8017bc6:	b08d      	sub	sp, #52	; 0x34
 8017bc8:	460e      	mov	r6, r1
 8017bca:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8017bcc:	b9ab      	cbnz	r3, 8017bfa <http_recv+0x3a>
 8017bce:	fab2 f782 	clz	r7, r2
 8017bd2:	097f      	lsrs	r7, r7, #5
 8017bd4:	b1ca      	cbz	r2, 8017c0a <http_recv+0x4a>
 8017bd6:	b188      	cbz	r0, 8017bfc <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8017bd8:	8911      	ldrh	r1, [r2, #8]
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f002 ff48 	bl	801aa70 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8017be0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	f040 813c 	bne.w	8017e60 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8017be8:	696b      	ldr	r3, [r5, #20]
 8017bea:	b1b3      	cbz	r3, 8017c1a <http_recv+0x5a>
      pbuf_free(p);
 8017bec:	4620      	mov	r0, r4
 8017bee:	f002 fabf 	bl	801a170 <pbuf_free>
}
 8017bf2:	2000      	movs	r0, #0
 8017bf4:	b00d      	add	sp, #52	; 0x34
 8017bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8017bfa:	b132      	cbz	r2, 8017c0a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8017bfc:	4630      	mov	r0, r6
 8017bfe:	8921      	ldrh	r1, [r4, #8]
 8017c00:	f002 ff36 	bl	801aa70 <tcp_recved>
      pbuf_free(p);
 8017c04:	4620      	mov	r0, r4
 8017c06:	f002 fab3 	bl	801a170 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	4630      	mov	r0, r6
 8017c0e:	f7ff fbeb 	bl	80173e8 <http_close_or_abort_conn.constprop.0>
}
 8017c12:	2000      	movs	r0, #0
 8017c14:	b00d      	add	sp, #52	; 0x34
 8017c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8017c1a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8017c1c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f040 8173 	bne.w	8017f0a <http_recv+0x34a>
  if (hs->req == NULL) {
 8017c24:	2800      	cmp	r0, #0
 8017c26:	f000 8136 	beq.w	8017e96 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	f002 fad2 	bl	801a1d4 <pbuf_cat>
  pbuf_ref(p);
 8017c30:	4620      	mov	r0, r4
 8017c32:	f002 fabb 	bl	801a1ac <pbuf_ref>
  if (hs->req->next != NULL) {
 8017c36:	6a28      	ldr	r0, [r5, #32]
 8017c38:	6803      	ldr	r3, [r0, #0]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	f000 812d 	beq.w	8017e9a <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017c40:	8907      	ldrh	r7, [r0, #8]
 8017c42:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8017c46:	49bc      	ldr	r1, [pc, #752]	; (8017f38 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017c48:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 8017c4a:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8017c4c:	bf28      	it	cs
 8017c4e:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8017c50:	2300      	movs	r3, #0
 8017c52:	463a      	mov	r2, r7
 8017c54:	f002 fb30 	bl	801a2b8 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8017c58:	2f06      	cmp	r7, #6
 8017c5a:	f240 80ef 	bls.w	8017e3c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8017c5e:	463a      	mov	r2, r7
 8017c60:	49b6      	ldr	r1, [pc, #728]	; (8017f3c <http_recv+0x37c>)
 8017c62:	4640      	mov	r0, r8
 8017c64:	f000 fa4e 	bl	8018104 <lwip_strnstr>
    if (crlf != NULL) {
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	f000 80e7 	beq.w	8017e3c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8017c6e:	2204      	movs	r2, #4
 8017c70:	49b3      	ldr	r1, [pc, #716]	; (8017f40 <http_recv+0x380>)
 8017c72:	4640      	mov	r0, r8
 8017c74:	f00d fb1a 	bl	80252ac <strncmp>
 8017c78:	4682      	mov	sl, r0
 8017c7a:	2800      	cmp	r0, #0
 8017c7c:	f040 8118 	bne.w	8017eb0 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8017c80:	1f3a      	subs	r2, r7, #4
 8017c82:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8017c86:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017c8a:	49ae      	ldr	r1, [pc, #696]	; (8017f44 <http_recv+0x384>)
 8017c8c:	b292      	uxth	r2, r2
 8017c8e:	4658      	mov	r0, fp
 8017c90:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8017c94:	f000 fa36 	bl	8018104 <lwip_strnstr>
      if (sp2 == NULL) {
 8017c98:	9a05      	ldr	r2, [sp, #20]
 8017c9a:	4681      	mov	r9, r0
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	f000 8123 	beq.w	8017ee8 <http_recv+0x328>
      int is_09 = 0;
 8017ca2:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8017ca4:	9305      	str	r3, [sp, #20]
 8017ca6:	f1b9 0f00 	cmp.w	r9, #0
 8017caa:	f000 80c7 	beq.w	8017e3c <http_recv+0x27c>
 8017cae:	9b04      	ldr	r3, [sp, #16]
 8017cb0:	4599      	cmp	r9, r3
 8017cb2:	f240 80c3 	bls.w	8017e3c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8017cb6:	463a      	mov	r2, r7
 8017cb8:	49a3      	ldr	r1, [pc, #652]	; (8017f48 <http_recv+0x388>)
 8017cba:	4640      	mov	r0, r8
 8017cbc:	f000 fa22 	bl	8018104 <lwip_strnstr>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	f000 80bb 	beq.w	8017e3c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8017cc6:	9b05      	ldr	r3, [sp, #20]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	f000 812b 	beq.w	8017f24 <http_recv+0x364>
            hs->keepalive = 0;
 8017cce:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8017cd0:	eba9 020b 	sub.w	r2, r9, fp
 8017cd4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8017cd8:	2100      	movs	r1, #0
 8017cda:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8017cdc:	b292      	uxth	r2, r2
          *sp1 = 0;
 8017cde:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8017ce0:	f80b 1002 	strb.w	r1, [fp, r2]
 8017ce4:	445a      	add	r2, fp
 8017ce6:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8017ce8:	f1ba 0f00 	cmp.w	sl, #0
 8017cec:	f000 8113 	beq.w	8017f16 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8017cf0:	f109 0301 	add.w	r3, r9, #1
 8017cf4:	4994      	ldr	r1, [pc, #592]	; (8017f48 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8017cf6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8017cfa:	eba3 0208 	sub.w	r2, r3, r8
 8017cfe:	4618      	mov	r0, r3
 8017d00:	9305      	str	r3, [sp, #20]
 8017d02:	1aba      	subs	r2, r7, r2
 8017d04:	f000 f9fe 	bl	8018104 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8017d08:	9008      	str	r0, [sp, #32]
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	f000 8168 	beq.w	8017fe0 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8017d10:	9b05      	ldr	r3, [sp, #20]
 8017d12:	498e      	ldr	r1, [pc, #568]	; (8017f4c <http_recv+0x38c>)
 8017d14:	1ac2      	subs	r2, r0, r3
 8017d16:	4618      	mov	r0, r3
 8017d18:	f000 f9f4 	bl	8018104 <lwip_strnstr>
    if (scontent_len != NULL) {
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	9009      	str	r0, [sp, #36]	; 0x24
 8017d20:	2800      	cmp	r0, #0
 8017d22:	f000 812f 	beq.w	8017f84 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8017d26:	3310      	adds	r3, #16
 8017d28:	220a      	movs	r2, #10
 8017d2a:	4984      	ldr	r1, [pc, #528]	; (8017f3c <http_recv+0x37c>)
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	9307      	str	r3, [sp, #28]
 8017d30:	f000 f9e8 	bl	8018104 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8017d34:	2800      	cmp	r0, #0
 8017d36:	f000 8125 	beq.w	8017f84 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8017d3a:	9b07      	ldr	r3, [sp, #28]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f00b f8bd 	bl	8022ebc <atoi>
        if (content_len == 0) {
 8017d42:	1e02      	subs	r2, r0, #0
 8017d44:	9207      	str	r2, [sp, #28]
 8017d46:	f040 811b 	bne.w	8017f80 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8017d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d4c:	7c1b      	ldrb	r3, [r3, #16]
 8017d4e:	2b30      	cmp	r3, #48	; 0x30
 8017d50:	f040 8118 	bne.w	8017f84 <http_recv+0x3c4>
 8017d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d56:	7c5b      	ldrb	r3, [r3, #17]
 8017d58:	2b0d      	cmp	r3, #13
 8017d5a:	f040 8113 	bne.w	8017f84 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017d5e:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8017d60:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017d62:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017d64:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017d66:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8017d68:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8017f64 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8017d6c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017d70:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017d74:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8017d76:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017d78:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017d7a:	9a05      	ldr	r2, [sp, #20]
 8017d7c:	bfb4      	ite	lt
 8017d7e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8017d80:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8017d84:	429f      	cmp	r7, r3
 8017d86:	bfa8      	it	ge
 8017d88:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017d8a:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8017d8c:	2700      	movs	r7, #0
 8017d8e:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8017d92:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8017d94:	9807      	ldr	r0, [sp, #28]
 8017d96:	f8cd b004 	str.w	fp, [sp, #4]
 8017d9a:	9000      	str	r0, [sp, #0]
 8017d9c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8017da0:	9003      	str	r0, [sp, #12]
 8017da2:	203f      	movs	r0, #63	; 0x3f
 8017da4:	9002      	str	r0, [sp, #8]
 8017da6:	4628      	mov	r0, r5
 8017da8:	f7ef fabc 	bl	8007324 <httpd_post_begin>
          if (err == ERR_OK) {
 8017dac:	2800      	cmp	r0, #0
 8017dae:	f040 80f7 	bne.w	8017fa0 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8017db2:	9807      	ldr	r0, [sp, #28]
 8017db4:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8017db6:	f1ba 0f00 	cmp.w	sl, #0
 8017dba:	f000 80d5 	beq.w	8017f68 <http_recv+0x3a8>
 8017dbe:	4652      	mov	r2, sl
 8017dc0:	e005      	b.n	8017dce <http_recv+0x20e>
              q = q->next;
 8017dc2:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8017dc4:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8017dc8:	2a00      	cmp	r2, #0
 8017dca:	f000 80cd 	beq.w	8017f68 <http_recv+0x3a8>
 8017dce:	8953      	ldrh	r3, [r2, #10]
 8017dd0:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8017dd2:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8017dd6:	d9f4      	bls.n	8017dc2 <http_recv+0x202>
 8017dd8:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8017dda:	4641      	mov	r1, r8
 8017ddc:	4610      	mov	r0, r2
 8017dde:	f002 f93b 	bl	801a058 <pbuf_remove_header>
              pbuf_ref(q);
 8017de2:	4650      	mov	r0, sl
 8017de4:	f002 f9e2 	bl	801a1ac <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8017de8:	4651      	mov	r1, sl
 8017dea:	4628      	mov	r0, r5
 8017dec:	f7ff fa98 	bl	8017320 <http_post_rxpbuf>
 8017df0:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8017df2:	2f00      	cmp	r7, #0
 8017df4:	f000 80ba 	beq.w	8017f6c <http_recv+0x3ac>
              *sp1 = ' ';
 8017df8:	2320      	movs	r3, #32
 8017dfa:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8017dfc:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8017e00:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017e02:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017e04:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017e08:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8017e0a:	d022      	beq.n	8017e52 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8017e0c:	2f00      	cmp	r7, #0
 8017e0e:	d048      	beq.n	8017ea2 <http_recv+0x2e2>
 8017e10:	1d7a      	adds	r2, r7, #5
 8017e12:	f43f aeeb 	beq.w	8017bec <http_recv+0x2c>
 8017e16:	f027 0308 	bic.w	r3, r7, #8
 8017e1a:	b25b      	sxtb	r3, r3
 8017e1c:	3310      	adds	r3, #16
 8017e1e:	d12e      	bne.n	8017e7e <http_recv+0x2be>
        if (hs->req != NULL) {
 8017e20:	6a28      	ldr	r0, [r5, #32]
 8017e22:	b3a0      	cbz	r0, 8017e8e <http_recv+0x2ce>
          pbuf_free(hs->req);
 8017e24:	f002 f9a4 	bl	801a170 <pbuf_free>
          hs->req = NULL;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	f002 f99f 	bl	801a170 <pbuf_free>
      if (parsed == ERR_OK) {
 8017e32:	b1df      	cbz	r7, 8017e6c <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8017e34:	3710      	adds	r7, #16
 8017e36:	f43f aee8 	beq.w	8017c0a <http_recv+0x4a>
 8017e3a:	e6ea      	b.n	8017c12 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8017e3c:	6a28      	ldr	r0, [r5, #32]
 8017e3e:	f002 f9ab 	bl	801a198 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8017e42:	6a2b      	ldr	r3, [r5, #32]
 8017e44:	891b      	ldrh	r3, [r3, #8]
 8017e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e4a:	d202      	bcs.n	8017e52 <http_recv+0x292>
 8017e4c:	2805      	cmp	r0, #5
 8017e4e:	f67f aecd 	bls.w	8017bec <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8017e52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8017e56:	4628      	mov	r0, r5
 8017e58:	f7ff fa88 	bl	801736c <http_find_error_file>
 8017e5c:	4607      	mov	r7, r0
 8017e5e:	e7d5      	b.n	8017e0c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8017e60:	4621      	mov	r1, r4
 8017e62:	4628      	mov	r0, r5
    hs->retries = 0;
 8017e64:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8017e68:	f7ff fa5a 	bl	8017320 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8017e6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	f47f aecf 	bne.w	8017c12 <http_recv+0x52>
      http_send(pcb, hs);
 8017e74:	4629      	mov	r1, r5
 8017e76:	4630      	mov	r0, r6
 8017e78:	f7ff fb5a 	bl	8017530 <http_send>
 8017e7c:	e6c9      	b.n	8017c12 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8017e7e:	4b34      	ldr	r3, [pc, #208]	; (8017f50 <http_recv+0x390>)
 8017e80:	f640 2204 	movw	r2, #2564	; 0xa04
 8017e84:	4933      	ldr	r1, [pc, #204]	; (8017f54 <http_recv+0x394>)
 8017e86:	4834      	ldr	r0, [pc, #208]	; (8017f58 <http_recv+0x398>)
 8017e88:	f00c fa3c 	bl	8024304 <iprintf>
 8017e8c:	e7c8      	b.n	8017e20 <http_recv+0x260>
      pbuf_free(p);
 8017e8e:	4620      	mov	r0, r4
 8017e90:	f002 f96e 	bl	801a170 <pbuf_free>
      if (parsed == ERR_OK) {
 8017e94:	e7ce      	b.n	8017e34 <http_recv+0x274>
    hs->req = p;
 8017e96:	622c      	str	r4, [r5, #32]
 8017e98:	e6ca      	b.n	8017c30 <http_recv+0x70>
    data = (char *)p->payload;
 8017e9a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8017e9e:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8017ea0:	e6da      	b.n	8017c58 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8017ea2:	1d7b      	adds	r3, r7, #5
 8017ea4:	f43f aea2 	beq.w	8017bec <http_recv+0x2c>
        if (hs->req != NULL) {
 8017ea8:	6a28      	ldr	r0, [r5, #32]
 8017eaa:	2800      	cmp	r0, #0
 8017eac:	d0be      	beq.n	8017e2c <http_recv+0x26c>
 8017eae:	e7b9      	b.n	8017e24 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8017eb0:	2205      	movs	r2, #5
 8017eb2:	492a      	ldr	r1, [pc, #168]	; (8017f5c <http_recv+0x39c>)
 8017eb4:	4640      	mov	r0, r8
 8017eb6:	f00d f9f9 	bl	80252ac <strncmp>
 8017eba:	9005      	str	r0, [sp, #20]
 8017ebc:	b9d8      	cbnz	r0, 8017ef6 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8017ebe:	f1a7 0a05 	sub.w	sl, r7, #5
 8017ec2:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8017ec6:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017eca:	491e      	ldr	r1, [pc, #120]	; (8017f44 <http_recv+0x384>)
 8017ecc:	fa1f fa8a 	uxth.w	sl, sl
 8017ed0:	4658      	mov	r0, fp
        sp1 = data + 4;
 8017ed2:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8017ed4:	4652      	mov	r2, sl
 8017ed6:	f000 f915 	bl	8018104 <lwip_strnstr>
      if (sp2 == NULL) {
 8017eda:	4681      	mov	r9, r0
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d059      	beq.n	8017f94 <http_recv+0x3d4>
        is_post = 1;
 8017ee0:	f04f 0a01 	mov.w	sl, #1
 8017ee4:	9b05      	ldr	r3, [sp, #20]
 8017ee6:	e6dd      	b.n	8017ca4 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017ee8:	4914      	ldr	r1, [pc, #80]	; (8017f3c <http_recv+0x37c>)
 8017eea:	4658      	mov	r0, fp
 8017eec:	f000 f90a 	bl	8018104 <lwip_strnstr>
        is_09 = 1;
 8017ef0:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017ef2:	4681      	mov	r9, r0
        if (is_post) {
 8017ef4:	e6d6      	b.n	8017ca4 <http_recv+0xe4>
        data[4] = 0;
 8017ef6:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8017ef8:	f240 11f5 	movw	r1, #501	; 0x1f5
 8017efc:	4628      	mov	r0, r5
        data[4] = 0;
 8017efe:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8017f02:	f7ff fa33 	bl	801736c <http_find_error_file>
 8017f06:	4607      	mov	r7, r0
 8017f08:	e780      	b.n	8017e0c <http_recv+0x24c>
        if (hs->req != NULL) {
 8017f0a:	2800      	cmp	r0, #0
 8017f0c:	f43f ae6e 	beq.w	8017bec <http_recv+0x2c>
 8017f10:	f06f 0707 	mvn.w	r7, #7
 8017f14:	e786      	b.n	8017e24 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8017f16:	461a      	mov	r2, r3
 8017f18:	4659      	mov	r1, fp
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	f7ff f910 	bl	8017140 <http_find_file>
 8017f20:	4607      	mov	r7, r0
 8017f22:	e773      	b.n	8017e0c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8017f24:	463a      	mov	r2, r7
 8017f26:	490e      	ldr	r1, [pc, #56]	; (8017f60 <http_recv+0x3a0>)
 8017f28:	4640      	mov	r0, r8
 8017f2a:	f000 f8eb 	bl	8018104 <lwip_strnstr>
 8017f2e:	9b05      	ldr	r3, [sp, #20]
 8017f30:	2800      	cmp	r0, #0
 8017f32:	d047      	beq.n	8017fc4 <http_recv+0x404>
            hs->keepalive = 1;
 8017f34:	2001      	movs	r0, #1
 8017f36:	e6cb      	b.n	8017cd0 <http_recv+0x110>
 8017f38:	2001e3f0 	.word	0x2001e3f0
 8017f3c:	08028c14 	.word	0x08028c14
 8017f40:	08041a10 	.word	0x08041a10
 8017f44:	0802af5c 	.word	0x0802af5c
 8017f48:	08028d48 	.word	0x08028d48
 8017f4c:	08028d50 	.word	0x08028d50
 8017f50:	08041890 	.word	0x08041890
 8017f54:	08041a50 	.word	0x08041a50
 8017f58:	08028ab4 	.word	0x08028ab4
 8017f5c:	08041a18 	.word	0x08041a18
 8017f60:	08041a20 	.word	0x08041a20
 8017f64:	2001e3ac 	.word	0x2001e3ac
            } else if (hs->post_content_len_left == 0) {
 8017f68:	9b07      	ldr	r3, [sp, #28]
 8017f6a:	b303      	cbz	r3, 8017fae <http_recv+0x3ee>
        if (hs->req != NULL) {
 8017f6c:	6a28      	ldr	r0, [r5, #32]
 8017f6e:	b398      	cbz	r0, 8017fd8 <http_recv+0x418>
          pbuf_free(hs->req);
 8017f70:	f002 f8fe 	bl	801a170 <pbuf_free>
          hs->req = NULL;
 8017f74:	2300      	movs	r3, #0
      pbuf_free(p);
 8017f76:	4620      	mov	r0, r4
          hs->req = NULL;
 8017f78:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8017f7a:	f002 f8f9 	bl	801a170 <pbuf_free>
      if (parsed == ERR_OK) {
 8017f7e:	e775      	b.n	8017e6c <http_recv+0x2ac>
        if (content_len >= 0) {
 8017f80:	f6bf aeed 	bge.w	8017d5e <http_recv+0x19e>
              *sp1 = ' ';
 8017f84:	2320      	movs	r3, #32
 8017f86:	9a04      	ldr	r2, [sp, #16]
 8017f88:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017f8a:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017f8c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017f90:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8017f92:	e75e      	b.n	8017e52 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8017f94:	4652      	mov	r2, sl
 8017f96:	4658      	mov	r0, fp
 8017f98:	4915      	ldr	r1, [pc, #84]	; (8017ff0 <http_recv+0x430>)
 8017f9a:	f000 f8b3 	bl	8018104 <lwip_strnstr>
        if (is_post) {
 8017f9e:	e758      	b.n	8017e52 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8017fa0:	463a      	mov	r2, r7
 8017fa2:	4659      	mov	r1, fp
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	f7ff f8cb 	bl	8017140 <http_find_file>
 8017faa:	4607      	mov	r7, r0
 8017fac:	e721      	b.n	8017df2 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8017fae:	9907      	ldr	r1, [sp, #28]
 8017fb0:	2241      	movs	r2, #65	; 0x41
 8017fb2:	4608      	mov	r0, r1
 8017fb4:	f001 ff0a 	bl	8019dcc <pbuf_alloc>
 8017fb8:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8017fba:	4628      	mov	r0, r5
 8017fbc:	f7ff f9b0 	bl	8017320 <http_post_rxpbuf>
 8017fc0:	4607      	mov	r7, r0
 8017fc2:	e716      	b.n	8017df2 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8017fc4:	463a      	mov	r2, r7
 8017fc6:	490b      	ldr	r1, [pc, #44]	; (8017ff4 <http_recv+0x434>)
 8017fc8:	4640      	mov	r0, r8
 8017fca:	f000 f89b 	bl	8018104 <lwip_strnstr>
            hs->keepalive = 1;
 8017fce:	3800      	subs	r0, #0
 8017fd0:	9b05      	ldr	r3, [sp, #20]
 8017fd2:	bf18      	it	ne
 8017fd4:	2001      	movne	r0, #1
 8017fd6:	e67b      	b.n	8017cd0 <http_recv+0x110>
      pbuf_free(p);
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f002 f8c9 	bl	801a170 <pbuf_free>
      if (parsed == ERR_OK) {
 8017fde:	e745      	b.n	8017e6c <http_recv+0x2ac>
              *sp1 = ' ';
 8017fe0:	2320      	movs	r3, #32
 8017fe2:	9a04      	ldr	r2, [sp, #16]
 8017fe4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017fe6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017fe8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017fec:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 8017fee:	e5fd      	b.n	8017bec <http_recv+0x2c>
 8017ff0:	08028c14 	.word	0x08028c14
 8017ff4:	08041a38 	.word	0x08041a38

08017ff8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8017ff8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8017ffa:	202e      	movs	r0, #46	; 0x2e
 8017ffc:	f003 fc60 	bl	801b8c0 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018000:	b358      	cbz	r0, 801805a <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8018002:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018004:	2101      	movs	r1, #1
 8018006:	f002 fe3d 	bl	801ac84 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801800a:	2250      	movs	r2, #80	; 0x50
 801800c:	4917      	ldr	r1, [pc, #92]	; (801806c <httpd_init+0x74>)
 801800e:	4620      	mov	r0, r4
 8018010:	f002 fc0c 	bl	801a82c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018014:	b958      	cbnz	r0, 801802e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 8018016:	4620      	mov	r0, r4
 8018018:	21ff      	movs	r1, #255	; 0xff
 801801a:	f002 fce9 	bl	801a9f0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801801e:	4604      	mov	r4, r0
 8018020:	b198      	cbz	r0, 801804a <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8018022:	4620      	mov	r0, r4
 8018024:	4912      	ldr	r1, [pc, #72]	; (8018070 <httpd_init+0x78>)
}
 8018026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801802a:	f002 beb9 	b.w	801ada0 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801802e:	4b11      	ldr	r3, [pc, #68]	; (8018074 <httpd_init+0x7c>)
 8018030:	f640 2257 	movw	r2, #2647	; 0xa57
 8018034:	4910      	ldr	r1, [pc, #64]	; (8018078 <httpd_init+0x80>)
 8018036:	4811      	ldr	r0, [pc, #68]	; (801807c <httpd_init+0x84>)
 8018038:	f00c f964 	bl	8024304 <iprintf>
    pcb = altcp_listen(pcb);
 801803c:	4620      	mov	r0, r4
 801803e:	21ff      	movs	r1, #255	; 0xff
 8018040:	f002 fcd6 	bl	801a9f0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018044:	4604      	mov	r4, r0
 8018046:	2800      	cmp	r0, #0
 8018048:	d1eb      	bne.n	8018022 <httpd_init+0x2a>
 801804a:	4b0a      	ldr	r3, [pc, #40]	; (8018074 <httpd_init+0x7c>)
 801804c:	f640 2259 	movw	r2, #2649	; 0xa59
 8018050:	490b      	ldr	r1, [pc, #44]	; (8018080 <httpd_init+0x88>)
 8018052:	480a      	ldr	r0, [pc, #40]	; (801807c <httpd_init+0x84>)
 8018054:	f00c f956 	bl	8024304 <iprintf>
 8018058:	e7e3      	b.n	8018022 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801805a:	4b06      	ldr	r3, [pc, #24]	; (8018074 <httpd_init+0x7c>)
 801805c:	f640 2272 	movw	r2, #2674	; 0xa72
 8018060:	4908      	ldr	r1, [pc, #32]	; (8018084 <httpd_init+0x8c>)
 8018062:	4806      	ldr	r0, [pc, #24]	; (801807c <httpd_init+0x84>)
}
 8018064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018068:	f00c b94c 	b.w	8024304 <iprintf>
 801806c:	080443ac 	.word	0x080443ac
 8018070:	08016ee9 	.word	0x08016ee9
 8018074:	08041890 	.word	0x08041890
 8018078:	08041a98 	.word	0x08041a98
 801807c:	08028ab4 	.word	0x08028ab4
 8018080:	08041ab4 	.word	0x08041ab4
 8018084:	08041a7c 	.word	0x08041a7c

08018088 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8018088:	b570      	push	{r4, r5, r6, lr}
 801808a:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801808c:	4606      	mov	r6, r0
{
 801808e:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018090:	b1c8      	cbz	r0, 80180c6 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8018092:	4b11      	ldr	r3, [pc, #68]	; (80180d8 <http_set_ssi_handler+0x50>)
 8018094:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8018096:	b175      	cbz	r5, 80180b6 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018098:	2c00      	cmp	r4, #0
 801809a:	dd04      	ble.n	80180a6 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801809c:	4a0f      	ldr	r2, [pc, #60]	; (80180dc <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801809e:	4b10      	ldr	r3, [pc, #64]	; (80180e0 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 80180a0:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 80180a2:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80180a4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80180a6:	4b0f      	ldr	r3, [pc, #60]	; (80180e4 <http_set_ssi_handler+0x5c>)
 80180a8:	f640 229f 	movw	r2, #2719	; 0xa9f
 80180ac:	490e      	ldr	r1, [pc, #56]	; (80180e8 <http_set_ssi_handler+0x60>)
 80180ae:	480f      	ldr	r0, [pc, #60]	; (80180ec <http_set_ssi_handler+0x64>)
 80180b0:	f00c f928 	bl	8024304 <iprintf>
 80180b4:	e7f2      	b.n	801809c <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80180b6:	4b0b      	ldr	r3, [pc, #44]	; (80180e4 <http_set_ssi_handler+0x5c>)
 80180b8:	f640 229e 	movw	r2, #2718	; 0xa9e
 80180bc:	490c      	ldr	r1, [pc, #48]	; (80180f0 <http_set_ssi_handler+0x68>)
 80180be:	480b      	ldr	r0, [pc, #44]	; (80180ec <http_set_ssi_handler+0x64>)
 80180c0:	f00c f920 	bl	8024304 <iprintf>
 80180c4:	e7e8      	b.n	8018098 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80180c6:	4b07      	ldr	r3, [pc, #28]	; (80180e4 <http_set_ssi_handler+0x5c>)
 80180c8:	f640 2297 	movw	r2, #2711	; 0xa97
 80180cc:	4909      	ldr	r1, [pc, #36]	; (80180f4 <http_set_ssi_handler+0x6c>)
 80180ce:	4807      	ldr	r0, [pc, #28]	; (80180ec <http_set_ssi_handler+0x64>)
 80180d0:	f00c f918 	bl	8024304 <iprintf>
 80180d4:	e7dd      	b.n	8018092 <http_set_ssi_handler+0xa>
 80180d6:	bf00      	nop
 80180d8:	2001e7f0 	.word	0x2001e7f0
 80180dc:	2001e7f4 	.word	0x2001e7f4
 80180e0:	2001e3ec 	.word	0x2001e3ec
 80180e4:	08041890 	.word	0x08041890
 80180e8:	08041afc 	.word	0x08041afc
 80180ec:	08028ab4 	.word	0x08028ab4
 80180f0:	08041aec 	.word	0x08041aec
 80180f4:	08041ad4 	.word	0x08041ad4

080180f8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80180f8:	ba40      	rev16	r0, r0
}
 80180fa:	b280      	uxth	r0, r0
 80180fc:	4770      	bx	lr
 80180fe:	bf00      	nop

08018100 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8018100:	ba00      	rev	r0, r0
 8018102:	4770      	bx	lr

08018104 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8018104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018108:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801810a:	4608      	mov	r0, r1
{
 801810c:	4688      	mov	r8, r1
 801810e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8018110:	f7e8 f8a0 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8018114:	b1c0      	cbz	r0, 8018148 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018116:	4605      	mov	r5, r0
 8018118:	7820      	ldrb	r0, [r4, #0]
 801811a:	b1b0      	cbz	r0, 801814a <lwip_strnstr+0x46>
 801811c:	4426      	add	r6, r4
 801811e:	1962      	adds	r2, r4, r5
 8018120:	4296      	cmp	r6, r2
 8018122:	d314      	bcc.n	801814e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018124:	f898 7000 	ldrb.w	r7, [r8]
 8018128:	e005      	b.n	8018136 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801812a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801812e:	1962      	adds	r2, r4, r5
 8018130:	b158      	cbz	r0, 801814a <lwip_strnstr+0x46>
 8018132:	4296      	cmp	r6, r2
 8018134:	d30b      	bcc.n	801814e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018136:	4287      	cmp	r7, r0
 8018138:	d1f7      	bne.n	801812a <lwip_strnstr+0x26>
 801813a:	4620      	mov	r0, r4
 801813c:	462a      	mov	r2, r5
 801813e:	4641      	mov	r1, r8
 8018140:	f00d f8b4 	bl	80252ac <strncmp>
 8018144:	2800      	cmp	r0, #0
 8018146:	d1f0      	bne.n	801812a <lwip_strnstr+0x26>
 8018148:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 801814e:	2000      	movs	r0, #0
}
 8018150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018154 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8018154:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018158:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 801815c:	4293      	cmp	r3, r2
 801815e:	d01c      	beq.n	801819a <lwip_stricmp+0x46>
 8018160:	f043 0c20 	orr.w	ip, r3, #32
{
 8018164:	b500      	push	{lr}
 8018166:	f042 0e20 	orr.w	lr, r2, #32
 801816a:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801816e:	2a19      	cmp	r2, #25
 8018170:	d810      	bhi.n	8018194 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8018172:	45f4      	cmp	ip, lr
 8018174:	d10e      	bne.n	8018194 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8018176:	b1a3      	cbz	r3, 80181a2 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8018178:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801817c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8018180:	4293      	cmp	r3, r2
 8018182:	d0f8      	beq.n	8018176 <lwip_stricmp+0x22>
 8018184:	f043 0c20 	orr.w	ip, r3, #32
 8018188:	f042 0e20 	orr.w	lr, r2, #32
 801818c:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018190:	2a19      	cmp	r2, #25
 8018192:	d9ee      	bls.n	8018172 <lwip_stricmp+0x1e>
        return 1;
 8018194:	2001      	movs	r0, #1
  return 0;
}
 8018196:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801819a:	2b00      	cmp	r3, #0
 801819c:	d1da      	bne.n	8018154 <lwip_stricmp>
  return 0;
 801819e:	4618      	mov	r0, r3
}
 80181a0:	4770      	bx	lr
  return 0;
 80181a2:	4618      	mov	r0, r3
}
 80181a4:	f85d fb04 	ldr.w	pc, [sp], #4

080181a8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80181a8:	4684      	mov	ip, r0
 80181aa:	b570      	push	{r4, r5, r6, lr}
 80181ac:	e004      	b.n	80181b8 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80181ae:	42b4      	cmp	r4, r6
 80181b0:	d113      	bne.n	80181da <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80181b2:	42e8      	cmn	r0, r5
 80181b4:	d013      	beq.n	80181de <lwip_strnicmp+0x36>
 80181b6:	b193      	cbz	r3, 80181de <lwip_strnicmp+0x36>
    c1 = *str1++;
 80181b8:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 80181bc:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 80181c0:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80181c4:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 80181c8:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 80181ca:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80181ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 80181d2:	d0ee      	beq.n	80181b2 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80181d4:	f1be 0f19 	cmp.w	lr, #25
 80181d8:	d9e9      	bls.n	80181ae <lwip_strnicmp+0x6>
        return 1;
 80181da:	2001      	movs	r0, #1
  return 0;
}
 80181dc:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 80181de:	2000      	movs	r0, #0
}
 80181e0:	bd70      	pop	{r4, r5, r6, pc}
 80181e2:	bf00      	nop

080181e4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80181e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e8:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80181ea:	4f24      	ldr	r7, [pc, #144]	; (801827c <dns_call_found+0x98>)
 80181ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80181f0:	4c23      	ldr	r4, [pc, #140]	; (8018280 <dns_call_found+0x9c>)
{
 80181f2:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80181f4:	012e      	lsls	r6, r5, #4
 80181f6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 80181fa:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 80181fe:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018202:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	b143      	cbz	r3, 801821c <dns_call_found+0x38>
 801820a:	7a22      	ldrb	r2, [r4, #8]
 801820c:	42aa      	cmp	r2, r5
 801820e:	d105      	bne.n	801821c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018210:	6862      	ldr	r2, [r4, #4]
 8018212:	4651      	mov	r1, sl
 8018214:	4640      	mov	r0, r8
 8018216:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8018218:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801821c:	340c      	adds	r4, #12
 801821e:	454c      	cmp	r4, r9
 8018220:	d1f1      	bne.n	8018206 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018222:	1973      	adds	r3, r6, r5
 8018224:	2400      	movs	r4, #0
 8018226:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801822a:	4f14      	ldr	r7, [pc, #80]	; (801827c <dns_call_found+0x98>)
 801822c:	7bd9      	ldrb	r1, [r3, #15]
 801822e:	463a      	mov	r2, r7
    if (i == idx) {
 8018230:	b2e3      	uxtb	r3, r4
 8018232:	3401      	adds	r4, #1
 8018234:	429d      	cmp	r5, r3
 8018236:	d002      	beq.n	801823e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8018238:	7a93      	ldrb	r3, [r2, #10]
 801823a:	2b02      	cmp	r3, #2
 801823c:	d015      	beq.n	801826a <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 801823e:	2c04      	cmp	r4, #4
 8018240:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8018244:	d1f4      	bne.n	8018230 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018246:	2903      	cmp	r1, #3
 8018248:	d80d      	bhi.n	8018266 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801824a:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 801824c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8018284 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018250:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018254:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8018258:	f007 f860 	bl	801f31c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801825c:	2200      	movs	r2, #0
 801825e:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018260:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018262:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8018266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801826a:	7bd3      	ldrb	r3, [r2, #15]
 801826c:	428b      	cmp	r3, r1
 801826e:	d1e6      	bne.n	801823e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018270:	4435      	add	r5, r6
 8018272:	2304      	movs	r3, #4
 8018274:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8018278:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801827a:	e7f4      	b.n	8018266 <dns_call_found+0x82>
 801827c:	2001e848 	.word	0x2001e848
 8018280:	2001e80c 	.word	0x2001e80c
 8018284:	2001e7fc 	.word	0x2001e7fc

08018288 <dns_send.isra.0>:
dns_send(u8_t idx)
 8018288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801828c:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801828e:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018290:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8018294:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018296:	9301      	str	r3, [sp, #4]
 8018298:	4b56      	ldr	r3, [pc, #344]	; (80183f4 <dns_send.isra.0+0x16c>)
 801829a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801829e:	7ae3      	ldrb	r3, [r4, #11]
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	d907      	bls.n	80182b4 <dns_send.isra.0+0x2c>
 80182a4:	4b54      	ldr	r3, [pc, #336]	; (80183f8 <dns_send.isra.0+0x170>)
 80182a6:	f240 22fa 	movw	r2, #762	; 0x2fa
 80182aa:	4954      	ldr	r1, [pc, #336]	; (80183fc <dns_send.isra.0+0x174>)
 80182ac:	4854      	ldr	r0, [pc, #336]	; (8018400 <dns_send.isra.0+0x178>)
 80182ae:	f00c f829 	bl	8024304 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80182b2:	7ae3      	ldrb	r3, [r4, #11]
 80182b4:	4a53      	ldr	r2, [pc, #332]	; (8018404 <dns_send.isra.0+0x17c>)
 80182b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80182ba:	2c00      	cmp	r4, #0
 80182bc:	f000 808b 	beq.w	80183d6 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80182c0:	9b01      	ldr	r3, [sp, #4]
 80182c2:	4e4c      	ldr	r6, [pc, #304]	; (80183f4 <dns_send.isra.0+0x16c>)
 80182c4:	eb03 0409 	add.w	r4, r3, r9
 80182c8:	0124      	lsls	r4, r4, #4
 80182ca:	f104 0510 	add.w	r5, r4, #16
 80182ce:	4435      	add	r5, r6
 80182d0:	4628      	mov	r0, r5
 80182d2:	f7e7 ffbf 	bl	8000254 <strlen>
 80182d6:	3012      	adds	r0, #18
 80182d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182dc:	b281      	uxth	r1, r0
 80182de:	2036      	movs	r0, #54	; 0x36
 80182e0:	f001 fd74 	bl	8019dcc <pbuf_alloc>
  if (p != NULL) {
 80182e4:	4680      	mov	r8, r0
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d06d      	beq.n	80183c6 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 80182ea:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80182ec:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 80182ee:	260c      	movs	r6, #12
    --hostname;
 80182f0:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 80182f2:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 80182f4:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80182f8:	9305      	str	r3, [sp, #20]
 80182fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80182fe:	f7ff fefb 	bl	80180f8 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8018302:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 8018304:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018308:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801830a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801830e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018312:	4632      	mov	r2, r6
 8018314:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8018316:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801831a:	f002 f81d 	bl	801a358 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801831e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8018320:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018322:	2b2e      	cmp	r3, #46	; 0x2e
 8018324:	d052      	beq.n	80183cc <dns_send.isra.0+0x144>
 8018326:	2b00      	cmp	r3, #0
 8018328:	d050      	beq.n	80183cc <dns_send.isra.0+0x144>
      ++hostname;
 801832a:	463d      	mov	r5, r7
 801832c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8018330:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018332:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8018336:	2b2e      	cmp	r3, #46	; 0x2e
 8018338:	b2e4      	uxtb	r4, r4
 801833a:	d001      	beq.n	8018340 <dns_send.isra.0+0xb8>
 801833c:	2b00      	cmp	r3, #0
 801833e:	d1f7      	bne.n	8018330 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 8018340:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8018344:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 8018346:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 801834a:	4433      	add	r3, r6
 801834c:	4553      	cmp	r3, sl
 801834e:	dc37      	bgt.n	80183c0 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8018350:	4622      	mov	r2, r4
 8018352:	4631      	mov	r1, r6
 8018354:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018356:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8018358:	f002 f8e4 	bl	801a524 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801835c:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 801835e:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018360:	465a      	mov	r2, fp
 8018362:	4639      	mov	r1, r7
 8018364:	b29b      	uxth	r3, r3
 8018366:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018368:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801836a:	f002 f85b 	bl	801a424 <pbuf_take_at>
    } while (*hostname != 0);
 801836e:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8018370:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8018372:	2a00      	cmp	r2, #0
 8018374:	d1d3      	bne.n	801831e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8018376:	4631      	mov	r1, r6
 8018378:	4640      	mov	r0, r8
 801837a:	f002 f8d3 	bl	801a524 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801837e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8018382:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018384:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018386:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801838a:	4640      	mov	r0, r8
 801838c:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801838e:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018392:	2204      	movs	r2, #4
 8018394:	f002 f846 	bl	801a424 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8018398:	9b01      	ldr	r3, [sp, #4]
 801839a:	4a16      	ldr	r2, [pc, #88]	; (80183f4 <dns_send.isra.0+0x16c>)
 801839c:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801839e:	4919      	ldr	r1, [pc, #100]	; (8018404 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 80183a0:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80183a2:	4b19      	ldr	r3, [pc, #100]	; (8018408 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 80183a4:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 80183a8:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80183ac:	f89b 000f 	ldrb.w	r0, [fp, #15]
 80183b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80183b4:	4641      	mov	r1, r8
 80183b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80183ba:	2335      	movs	r3, #53	; 0x35
 80183bc:	f006 ff0c 	bl	801f1d8 <udp_sendto>
    pbuf_free(p);
 80183c0:	4640      	mov	r0, r8
 80183c2:	f001 fed5 	bl	801a170 <pbuf_free>
}
 80183c6:	b007      	add	sp, #28
 80183c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80183cc:	2300      	movs	r3, #0
      ++hostname;
 80183ce:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80183d0:	469b      	mov	fp, r3
 80183d2:	461c      	mov	r4, r3
 80183d4:	e7b9      	b.n	801834a <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 80183d6:	4648      	mov	r0, r9
 80183d8:	4621      	mov	r1, r4
 80183da:	f7ff ff03 	bl	80181e4 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80183de:	9b01      	ldr	r3, [sp, #4]
 80183e0:	444b      	add	r3, r9
 80183e2:	4699      	mov	r9, r3
 80183e4:	4b03      	ldr	r3, [pc, #12]	; (80183f4 <dns_send.isra.0+0x16c>)
 80183e6:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 80183ea:	f88b 400a 	strb.w	r4, [fp, #10]
}
 80183ee:	b007      	add	sp, #28
 80183f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f4:	2001e848 	.word	0x2001e848
 80183f8:	08041bd4 	.word	0x08041bd4
 80183fc:	08041c04 	.word	0x08041c04
 8018400:	08028ab4 	.word	0x08028ab4
 8018404:	2001e840 	.word	0x2001e840
 8018408:	2001e7fc 	.word	0x2001e7fc

0801840c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801840c:	2803      	cmp	r0, #3
{
 801840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018412:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018414:	d846      	bhi.n	80184a4 <dns_check_entry+0x98>

  switch (entry->state) {
 8018416:	4e3a      	ldr	r6, [pc, #232]	; (8018500 <dns_check_entry+0xf4>)
 8018418:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 801841c:	0125      	lsls	r5, r4, #4
 801841e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8018422:	7a9b      	ldrb	r3, [r3, #10]
 8018424:	2b03      	cmp	r3, #3
 8018426:	d861      	bhi.n	80184ec <dns_check_entry+0xe0>
 8018428:	e8df f003 	tbb	[pc, r3]
 801842c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8018430:	192b      	adds	r3, r5, r4
 8018432:	011b      	lsls	r3, r3, #4
 8018434:	58f2      	ldr	r2, [r6, r3]
 8018436:	2a00      	cmp	r2, #0
 8018438:	d140      	bne.n	80184bc <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801843a:	442c      	add	r4, r5
 801843c:	2300      	movs	r3, #0
 801843e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018442:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8018444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018448:	4f2e      	ldr	r7, [pc, #184]	; (8018504 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 801844a:	f00b ffff 	bl	802444c <rand>
 801844e:	4b2c      	ldr	r3, [pc, #176]	; (8018500 <dns_check_entry+0xf4>)
 8018450:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018452:	7a9a      	ldrb	r2, [r3, #10]
 8018454:	2a02      	cmp	r2, #2
 8018456:	d02d      	beq.n	80184b4 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018458:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801845c:	429f      	cmp	r7, r3
 801845e:	d1f8      	bne.n	8018452 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8018460:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8018462:	2202      	movs	r2, #2
      entry->tmr = 1;
 8018464:	2301      	movs	r3, #1
      err = dns_send(i);
 8018466:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8018468:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 801846c:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 801846e:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8018470:	81b3      	strh	r3, [r6, #12]
}
 8018472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8018476:	f7ff bf07 	b.w	8018288 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801847a:	192a      	adds	r2, r5, r4
 801847c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8018480:	7b13      	ldrb	r3, [r2, #12]
 8018482:	3b01      	subs	r3, #1
 8018484:	b2db      	uxtb	r3, r3
 8018486:	7313      	strb	r3, [r2, #12]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d1db      	bne.n	8018444 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801848c:	7b53      	ldrb	r3, [r2, #13]
 801848e:	3301      	adds	r3, #1
 8018490:	b2db      	uxtb	r3, r3
 8018492:	2b04      	cmp	r3, #4
 8018494:	7353      	strb	r3, [r2, #13]
 8018496:	d016      	beq.n	80184c6 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8018498:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801849a:	4620      	mov	r0, r4
}
 801849c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80184a0:	f7ff bef2 	b.w	8018288 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80184a4:	4b18      	ldr	r3, [pc, #96]	; (8018508 <dns_check_entry+0xfc>)
 80184a6:	f240 421c 	movw	r2, #1052	; 0x41c
 80184aa:	4918      	ldr	r1, [pc, #96]	; (801850c <dns_check_entry+0x100>)
 80184ac:	4818      	ldr	r0, [pc, #96]	; (8018510 <dns_check_entry+0x104>)
 80184ae:	f00b ff29 	bl	8024304 <iprintf>
 80184b2:	e7b0      	b.n	8018416 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80184b4:	891a      	ldrh	r2, [r3, #8]
 80184b6:	428a      	cmp	r2, r1
 80184b8:	d1ce      	bne.n	8018458 <dns_check_entry+0x4c>
 80184ba:	e7c6      	b.n	801844a <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80184bc:	3a01      	subs	r2, #1
 80184be:	50f2      	str	r2, [r6, r3]
 80184c0:	2a00      	cmp	r2, #0
 80184c2:	d0ba      	beq.n	801843a <dns_check_entry+0x2e>
 80184c4:	e7be      	b.n	8018444 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80184c6:	7ad3      	ldrb	r3, [r2, #11]
 80184c8:	b913      	cbnz	r3, 80184d0 <dns_check_entry+0xc4>
 80184ca:	4b12      	ldr	r3, [pc, #72]	; (8018514 <dns_check_entry+0x108>)
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	b94b      	cbnz	r3, 80184e4 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 80184d0:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 80184d2:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 80184d4:	2100      	movs	r1, #0
 80184d6:	f7ff fe85 	bl	80181e4 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80184da:	2300      	movs	r3, #0
 80184dc:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80184e0:	72b3      	strb	r3, [r6, #10]
            break;
 80184e2:	e7af      	b.n	8018444 <dns_check_entry+0x38>
            entry->server_idx++;
 80184e4:	2301      	movs	r3, #1
 80184e6:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 80184e8:	8193      	strh	r3, [r2, #12]
 80184ea:	e7d6      	b.n	801849a <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80184ec:	4b06      	ldr	r3, [pc, #24]	; (8018508 <dns_check_entry+0xfc>)
 80184ee:	f240 425b 	movw	r2, #1115	; 0x45b
 80184f2:	4909      	ldr	r1, [pc, #36]	; (8018518 <dns_check_entry+0x10c>)
 80184f4:	4806      	ldr	r0, [pc, #24]	; (8018510 <dns_check_entry+0x104>)
}
 80184f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80184fa:	f00b bf03 	b.w	8024304 <iprintf>
 80184fe:	bf00      	nop
 8018500:	2001e848 	.word	0x2001e848
 8018504:	2001ec88 	.word	0x2001ec88
 8018508:	08041bd4 	.word	0x08041bd4
 801850c:	08041c1c 	.word	0x08041c1c
 8018510:	08028ab4 	.word	0x08028ab4
 8018514:	2001e840 	.word	0x2001e840
 8018518:	08041c38 	.word	0x08041c38

0801851c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018520:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8018522:	8912      	ldrh	r2, [r2, #8]
{
 8018524:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8018526:	2a0f      	cmp	r2, #15
 8018528:	d805      	bhi.n	8018536 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801852a:	4620      	mov	r0, r4
 801852c:	f001 fe20 	bl	801a170 <pbuf_free>
  return;
}
 8018530:	b00d      	add	sp, #52	; 0x34
 8018532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8018536:	4699      	mov	r9, r3
 8018538:	220c      	movs	r2, #12
 801853a:	2300      	movs	r3, #0
 801853c:	a906      	add	r1, sp, #24
 801853e:	4620      	mov	r0, r4
 8018540:	f001 feba 	bl	801a2b8 <pbuf_copy_partial>
 8018544:	280c      	cmp	r0, #12
 8018546:	4605      	mov	r5, r0
 8018548:	d1ef      	bne.n	801852a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 801854a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8018840 <dns_recv+0x324>
 801854e:	2600      	movs	r6, #0
 8018550:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8018554:	f7ff fdd0 	bl	80180f8 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018558:	4643      	mov	r3, r8
 801855a:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 801855c:	7a9a      	ldrb	r2, [r3, #10]
 801855e:	2a02      	cmp	r2, #2
 8018560:	d008      	beq.n	8018574 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018562:	3601      	adds	r6, #1
 8018564:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8018568:	2e04      	cmp	r6, #4
 801856a:	d0de      	beq.n	801852a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 801856c:	7a9a      	ldrb	r2, [r3, #10]
 801856e:	b2f7      	uxtb	r7, r6
 8018570:	2a02      	cmp	r2, #2
 8018572:	d1f6      	bne.n	8018562 <dns_recv+0x46>
 8018574:	891a      	ldrh	r2, [r3, #8]
 8018576:	4282      	cmp	r2, r0
 8018578:	d1f3      	bne.n	8018562 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801857a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801857e:	f7ff fdbb 	bl	80180f8 <lwip_htons>
 8018582:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8018584:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8018588:	f7ff fdb6 	bl	80180f8 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801858c:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8018590:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8018592:	09db      	lsrs	r3, r3, #7
 8018594:	d0c9      	beq.n	801852a <dns_recv+0xe>
 8018596:	f1ba 0f01 	cmp.w	sl, #1
 801859a:	d1c6      	bne.n	801852a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801859c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 80185a0:	49a5      	ldr	r1, [pc, #660]	; (8018838 <dns_recv+0x31c>)
 80185a2:	f8d9 2000 	ldr.w	r2, [r9]
 80185a6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 80185aa:	7adb      	ldrb	r3, [r3, #11]
 80185ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d1ba      	bne.n	801852a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80185b4:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80185b8:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80185bc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8018844 <dns_recv+0x328>
 80185c0:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80185c4:	f103 0210 	add.w	r2, r3, #16
 80185c8:	9301      	str	r3, [sp, #4]
 80185ca:	4442      	add	r2, r8
 80185cc:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80185d0:	462e      	mov	r6, r5
 80185d2:	4627      	mov	r7, r4
 80185d4:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 80185d6:	4631      	mov	r1, r6
 80185d8:	4638      	mov	r0, r7
 80185da:	f001 ff93 	bl	801a504 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80185de:	2800      	cmp	r0, #0
 80185e0:	db2d      	blt.n	801863e <dns_recv+0x122>
 80185e2:	455e      	cmp	r6, fp
 80185e4:	d02b      	beq.n	801863e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 80185e6:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 80185ea:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 80185ec:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 80185ee:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 80185f0:	d025      	beq.n	801863e <dns_recv+0x122>
      while (n > 0) {
 80185f2:	b330      	cbz	r0, 8018642 <dns_recv+0x126>
 80185f4:	46aa      	mov	sl, r5
 80185f6:	182c      	adds	r4, r5, r0
 80185f8:	e01b      	b.n	8018632 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80185fa:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 80185fe:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018600:	f819 2000 	ldrb.w	r2, [r9, r0]
 8018604:	4601      	mov	r1, r0
        ++query;
 8018606:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8018608:	f002 0203 	and.w	r2, r2, #3
 801860c:	2a01      	cmp	r2, #1
 801860e:	f819 2003 	ldrb.w	r2, [r9, r3]
 8018612:	f002 0203 	and.w	r2, r2, #3
 8018616:	bf08      	it	eq
 8018618:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801861c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801861e:	2a01      	cmp	r2, #1
 8018620:	bf08      	it	eq
 8018622:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8018624:	455e      	cmp	r6, fp
        response_offset++;
 8018626:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8018628:	d009      	beq.n	801863e <dns_recv+0x122>
 801862a:	4299      	cmp	r1, r3
 801862c:	d107      	bne.n	801863e <dns_recv+0x122>
      while (n > 0) {
 801862e:	4554      	cmp	r4, sl
 8018630:	d007      	beq.n	8018642 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8018632:	4631      	mov	r1, r6
 8018634:	4638      	mov	r0, r7
 8018636:	f001 ff65 	bl	801a504 <pbuf_try_get_at>
        if (c < 0) {
 801863a:	1e03      	subs	r3, r0, #0
 801863c:	dadd      	bge.n	80185fa <dns_recv+0xde>
 801863e:	463c      	mov	r4, r7
 8018640:	e773      	b.n	801852a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 8018642:	4631      	mov	r1, r6
 8018644:	4638      	mov	r0, r7
 8018646:	f001 ff5d 	bl	801a504 <pbuf_try_get_at>
    if (n < 0) {
 801864a:	2800      	cmp	r0, #0
      ++query;
 801864c:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8018650:	dbf5      	blt.n	801863e <dns_recv+0x122>
  } while (n != 0);
 8018652:	d1c0      	bne.n	80185d6 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 8018654:	4635      	mov	r5, r6
 8018656:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801865a:	463c      	mov	r4, r7
 801865c:	9e03      	ldr	r6, [sp, #12]
 801865e:	454d      	cmp	r5, r9
 8018660:	9f02      	ldr	r7, [sp, #8]
 8018662:	f43f af62 	beq.w	801852a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8018666:	f105 0a01 	add.w	sl, r5, #1
 801866a:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 801866e:	45ca      	cmp	sl, r9
 8018670:	f43f af5b 	beq.w	801852a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8018674:	4653      	mov	r3, sl
 8018676:	2204      	movs	r2, #4
 8018678:	a904      	add	r1, sp, #16
 801867a:	4620      	mov	r0, r4
 801867c:	f001 fe1c 	bl	801a2b8 <pbuf_copy_partial>
 8018680:	2804      	cmp	r0, #4
 8018682:	f47f af52 	bne.w	801852a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8018686:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801868a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801868e:	f47f af4c 	bne.w	801852a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8018692:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8018696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801869a:	f47f af46 	bne.w	801852a <dns_recv+0xe>
 801869e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80186a2:	459a      	cmp	sl, r3
 80186a4:	f63f af41 	bhi.w	801852a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80186a8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80186ac:	071b      	lsls	r3, r3, #28
 80186ae:	d017      	beq.n	80186e0 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80186b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80186b4:	fb03 8306 	mla	r3, r3, r6, r8
 80186b8:	7adb      	ldrb	r3, [r3, #11]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	f040 80ae 	bne.w	801881c <dns_recv+0x300>
 80186c0:	4b5d      	ldr	r3, [pc, #372]	; (8018838 <dns_recv+0x31c>)
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 80a9 	beq.w	801881c <dns_recv+0x300>
            entry->tmr     = 1;
 80186ca:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 80186ce:	4638      	mov	r0, r7
            entry->tmr     = 1;
 80186d0:	fb03 8606 	mla	r6, r3, r6, r8
 80186d4:	f240 3301 	movw	r3, #769	; 0x301
 80186d8:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 80186da:	f7ff fe97 	bl	801840c <dns_check_entry>
            goto ignore_packet;
 80186de:	e724      	b.n	801852a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80186e0:	3505      	adds	r5, #5
 80186e2:	f8dd a000 	ldr.w	sl, [sp]
 80186e6:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80186e8:	f1ba 0f00 	cmp.w	sl, #0
 80186ec:	f000 8096 	beq.w	801881c <dns_recv+0x300>
 80186f0:	8923      	ldrh	r3, [r4, #8]
 80186f2:	42ab      	cmp	r3, r5
 80186f4:	d80b      	bhi.n	801870e <dns_recv+0x1f2>
 80186f6:	e091      	b.n	801881c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 80186f8:	8922      	ldrh	r2, [r4, #8]
 80186fa:	4293      	cmp	r3, r2
 80186fc:	f6bf af15 	bge.w	801852a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 8018700:	4629      	mov	r1, r5
 8018702:	f001 feff 	bl	801a504 <pbuf_try_get_at>
    if (n < 0) {
 8018706:	2800      	cmp	r0, #0
 8018708:	f6ff af0f 	blt.w	801852a <dns_recv+0xe>
  } while (n != 0);
 801870c:	d017      	beq.n	801873e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801870e:	4629      	mov	r1, r5
 8018710:	4620      	mov	r0, r4
 8018712:	f001 fef7 	bl	801a504 <pbuf_try_get_at>
 8018716:	f105 0b01 	add.w	fp, r5, #1
 801871a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801871c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801871e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8018722:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8018724:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8018728:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801872a:	f6ff aefe 	blt.w	801852a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801872e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8018730:	f1bb 0f00 	cmp.w	fp, #0
 8018734:	f43f aef9 	beq.w	801852a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8018738:	2ac0      	cmp	r2, #192	; 0xc0
 801873a:	d1dd      	bne.n	80186f8 <dns_recv+0x1dc>
 801873c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801873e:	454d      	cmp	r5, r9
 8018740:	f43f aef3 	beq.w	801852a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8018744:	f105 0b01 	add.w	fp, r5, #1
 8018748:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 801874c:	45cb      	cmp	fp, r9
 801874e:	f43f aeec 	beq.w	801852a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8018752:	465b      	mov	r3, fp
 8018754:	220a      	movs	r2, #10
 8018756:	a909      	add	r1, sp, #36	; 0x24
 8018758:	4620      	mov	r0, r4
 801875a:	f001 fdad 	bl	801a2b8 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 801875e:	280a      	cmp	r0, #10
 8018760:	f47f aee3 	bne.w	801852a <dns_recv+0xe>
 8018764:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8018768:	459b      	cmp	fp, r3
 801876a:	f63f aede 	bhi.w	801852a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801876e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018772:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8018774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8018778:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801877a:	d013      	beq.n	80187a4 <dns_recv+0x288>
 801877c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8018780:	f7ff fcba 	bl	80180f8 <lwip_htons>
 8018784:	4428      	add	r0, r5
 8018786:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801878a:	f6bf aece 	bge.w	801852a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801878e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8018792:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8018796:	f7ff fcaf 	bl	80180f8 <lwip_htons>
 801879a:	4405      	add	r5, r0
            --nanswers;
 801879c:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80187a0:	b2ad      	uxth	r5, r5
            --nanswers;
 80187a2:	e7a1      	b.n	80186e8 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80187a4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80187a8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80187ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187b0:	d1e6      	bne.n	8018780 <dns_recv+0x264>
 80187b2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80187b6:	d1e3      	bne.n	8018780 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 80187b8:	462b      	mov	r3, r5
 80187ba:	2204      	movs	r2, #4
 80187bc:	a905      	add	r1, sp, #20
 80187be:	4620      	mov	r0, r4
 80187c0:	f001 fd7a 	bl	801a2b8 <pbuf_copy_partial>
 80187c4:	2804      	cmp	r0, #4
 80187c6:	f47f aeb0 	bne.w	801852a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80187ca:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 80187ce:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80187d0:	fb03 f606 	mul.w	r6, r3, r6
 80187d4:	9b05      	ldr	r3, [sp, #20]
 80187d6:	eb08 0406 	add.w	r4, r8, r6
 80187da:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 80187dc:	f001 fcc8 	bl	801a170 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80187e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80187e2:	f7ff fc8d 	bl	8018100 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 80187e6:	4a15      	ldr	r2, [pc, #84]	; (801883c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80187e8:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 80187ea:	9901      	ldr	r1, [sp, #4]
 80187ec:	4638      	mov	r0, r7
  entry->ttl = ttl;
 80187ee:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80187f0:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 80187f4:	bf28      	it	cs
 80187f6:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 80187f8:	4441      	add	r1, r8
  entry->ttl = ttl;
 80187fa:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 80187fe:	2303      	movs	r3, #3
 8018800:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 8018802:	f7ff fcef 	bl	80181e4 <dns_call_found>
  if (entry->ttl == 0) {
 8018806:	f858 3006 	ldr.w	r3, [r8, r6]
 801880a:	2b00      	cmp	r3, #0
 801880c:	f47f ae90 	bne.w	8018530 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8018810:	7aa2      	ldrb	r2, [r4, #10]
 8018812:	2a03      	cmp	r2, #3
 8018814:	f47f ae8c 	bne.w	8018530 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8018818:	72a3      	strb	r3, [r4, #10]
                  return;
 801881a:	e689      	b.n	8018530 <dns_recv+0x14>
        pbuf_free(p);
 801881c:	4620      	mov	r0, r4
 801881e:	f001 fca7 	bl	801a170 <pbuf_free>
        dns_call_found(i, NULL);
 8018822:	2100      	movs	r1, #0
 8018824:	4638      	mov	r0, r7
 8018826:	f7ff fcdd 	bl	80181e4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801882a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801882e:	2200      	movs	r2, #0
 8018830:	fb03 8606 	mla	r6, r3, r6, r8
 8018834:	72b2      	strb	r2, [r6, #10]
        return;
 8018836:	e67b      	b.n	8018530 <dns_recv+0x14>
 8018838:	2001e840 	.word	0x2001e840
 801883c:	00093a80 	.word	0x00093a80
 8018840:	2001e848 	.word	0x2001e848
 8018844:	08044609 	.word	0x08044609

08018848 <dns_init>:
}
 8018848:	4770      	bx	lr
 801884a:	bf00      	nop

0801884c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 801884c:	2801      	cmp	r0, #1
 801884e:	d900      	bls.n	8018852 <dns_setserver+0x6>
}
 8018850:	4770      	bx	lr
    if (dnsserver != NULL) {
 8018852:	b121      	cbz	r1, 801885e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8018854:	4b05      	ldr	r3, [pc, #20]	; (801886c <dns_setserver+0x20>)
 8018856:	680a      	ldr	r2, [r1, #0]
 8018858:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 801885c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 801885e:	4a04      	ldr	r2, [pc, #16]	; (8018870 <dns_setserver+0x24>)
 8018860:	4b02      	ldr	r3, [pc, #8]	; (801886c <dns_setserver+0x20>)
 8018862:	6812      	ldr	r2, [r2, #0]
 8018864:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8018868:	4770      	bx	lr
 801886a:	bf00      	nop
 801886c:	2001e840 	.word	0x2001e840
 8018870:	080443ac 	.word	0x080443ac

08018874 <dns_tmr>:
{
 8018874:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8018876:	2000      	movs	r0, #0
 8018878:	f7ff fdc8 	bl	801840c <dns_check_entry>
 801887c:	2001      	movs	r0, #1
 801887e:	f7ff fdc5 	bl	801840c <dns_check_entry>
 8018882:	2002      	movs	r0, #2
 8018884:	f7ff fdc2 	bl	801840c <dns_check_entry>
 8018888:	2003      	movs	r0, #3
}
 801888a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801888e:	f7ff bdbd 	b.w	801840c <dns_check_entry>
 8018892:	bf00      	nop

08018894 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8018894:	2900      	cmp	r1, #0
 8018896:	f000 812e 	beq.w	8018af6 <dns_gethostbyname_addrtype+0x262>
{
 801889a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801889e:	fab0 f780 	clz	r7, r0
{
 80188a2:	b083      	sub	sp, #12
 80188a4:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 80188a6:	097f      	lsrs	r7, r7, #5
 80188a8:	2800      	cmp	r0, #0
 80188aa:	f000 8103 	beq.w	8018ab4 <dns_gethostbyname_addrtype+0x220>
 80188ae:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 80188b0:	7803      	ldrb	r3, [r0, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	f000 80fe 	beq.w	8018ab4 <dns_gethostbyname_addrtype+0x220>
 80188b8:	4615      	mov	r5, r2
 80188ba:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80188bc:	f7e7 fcca 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80188c0:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 80188c2:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80188c4:	f200 80f6 	bhi.w	8018ab4 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 80188c8:	4641      	mov	r1, r8
 80188ca:	4630      	mov	r0, r6
 80188cc:	f009 fa46 	bl	8021d5c <ip4addr_aton>
 80188d0:	b118      	cbz	r0, 80188da <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 80188d2:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80188d4:	b003      	add	sp, #12
 80188d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188da:	4f88      	ldr	r7, [pc, #544]	; (8018afc <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 80188dc:	4604      	mov	r4, r0
 80188de:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80188e0:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 80188e4:	2b03      	cmp	r3, #3
 80188e6:	d03a      	beq.n	801895e <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80188e8:	3401      	adds	r4, #1
 80188ea:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 80188ee:	2c04      	cmp	r4, #4
 80188f0:	d1f6      	bne.n	80188e0 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 80188f2:	4b83      	ldr	r3, [pc, #524]	; (8018b00 <dns_gethostbyname_addrtype+0x26c>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	f000 80f6 	beq.w	8018ae8 <dns_gethostbyname_addrtype+0x254>
 80188fc:	2400      	movs	r4, #0
 80188fe:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8018b0c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018902:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 8018906:	fa5f f884 	uxtb.w	r8, r4
 801890a:	2b02      	cmp	r3, #2
 801890c:	d040      	beq.n	8018990 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801890e:	3401      	adds	r4, #1
 8018910:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8018914:	2c04      	cmp	r4, #4
 8018916:	d1f4      	bne.n	8018902 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8018918:	4a7a      	ldr	r2, [pc, #488]	; (8018b04 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801891a:	4623      	mov	r3, r4
 801891c:	4f7a      	ldr	r7, [pc, #488]	; (8018b08 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801891e:	2400      	movs	r4, #0
 8018920:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 8018922:	46a4      	mov	ip, r4
 8018924:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 8018926:	7a90      	ldrb	r0, [r2, #10]
 8018928:	fa5f f884 	uxtb.w	r8, r4
 801892c:	2800      	cmp	r0, #0
 801892e:	d041      	beq.n	80189b4 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8018930:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8018932:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 8018936:	d023      	beq.n	8018980 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8018938:	2c04      	cmp	r4, #4
 801893a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801893e:	d1f2      	bne.n	8018926 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8018940:	2b04      	cmp	r3, #4
 8018942:	d007      	beq.n	8018954 <dns_gethostbyname_addrtype+0xc0>
 8018944:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8018948:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 801894c:	7aa2      	ldrb	r2, [r4, #10]
 801894e:	2a03      	cmp	r2, #3
 8018950:	f000 80ae 	beq.w	8018ab0 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 8018954:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018958:	b003      	add	sp, #12
 801895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 801895e:	4651      	mov	r1, sl
 8018960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018964:	4630      	mov	r0, r6
 8018966:	f7ff fc1f 	bl	80181a8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801896a:	2800      	cmp	r0, #0
 801896c:	d1bc      	bne.n	80188e8 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 801896e:	4b66      	ldr	r3, [pc, #408]	; (8018b08 <dns_gethostbyname_addrtype+0x274>)
 8018970:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018974:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8018978:	6863      	ldr	r3, [r4, #4]
 801897a:	f8c8 3000 	str.w	r3, [r8]
 801897e:	e7a9      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8018980:	7b90      	ldrb	r0, [r2, #14]
 8018982:	1a08      	subs	r0, r1, r0
 8018984:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 8018986:	4560      	cmp	r0, ip
 8018988:	d9d6      	bls.n	8018938 <dns_gethostbyname_addrtype+0xa4>
 801898a:	4643      	mov	r3, r8
 801898c:	4684      	mov	ip, r0
 801898e:	e7d3      	b.n	8018938 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8018990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018994:	4639      	mov	r1, r7
 8018996:	4630      	mov	r0, r6
 8018998:	f7ff fc06 	bl	80181a8 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801899c:	2800      	cmp	r0, #0
 801899e:	d1b6      	bne.n	801890e <dns_gethostbyname_addrtype+0x7a>
 80189a0:	4b5a      	ldr	r3, [pc, #360]	; (8018b0c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 80189a2:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80189a4:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 80189a6:	2a00      	cmp	r2, #0
 80189a8:	f000 8091 	beq.w	8018ace <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80189ac:	3001      	adds	r0, #1
 80189ae:	2804      	cmp	r0, #4
 80189b0:	d1f7      	bne.n	80189a2 <dns_gethostbyname_addrtype+0x10e>
 80189b2:	e7ac      	b.n	801890e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 80189b4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80189b8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80189bc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8018b0c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 80189c0:	2700      	movs	r7, #0
 80189c2:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 80189c4:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80189c6:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 80189c8:	b12b      	cbz	r3, 80189d6 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80189ca:	3701      	adds	r7, #1
 80189cc:	2f04      	cmp	r7, #4
 80189ce:	d1f9      	bne.n	80189c4 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 80189d0:	f04f 30ff 	mov.w	r0, #4294967295
 80189d4:	e7c0      	b.n	8018958 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 80189d6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 80189da:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 80189dc:	f104 0010 	add.w	r0, r4, #16
 80189e0:	4631      	mov	r1, r6
  req->found = found;
 80189e2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 80189e6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 80189ea:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 80189ec:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 80189f0:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 80189f4:	2201      	movs	r2, #1
 80189f6:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 80189f8:	464a      	mov	r2, r9
 80189fa:	f00a fcbd 	bl	8023378 <memcpy>
  entry->name[namelen] = 0;
 80189fe:	44a1      	add	r9, r4
 8018a00:	9b01      	ldr	r3, [sp, #4]
 8018a02:	461d      	mov	r5, r3
 8018a04:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8018a08:	007b      	lsls	r3, r7, #1
 8018a0a:	9301      	str	r3, [sp, #4]
 8018a0c:	4b40      	ldr	r3, [pc, #256]	; (8018b10 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8018a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a12:	b2ee      	uxtb	r6, r5
 8018a14:	b30a      	cbz	r2, 8018a5a <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8018a16:	3501      	adds	r5, #1
 8018a18:	2d04      	cmp	r5, #4
 8018a1a:	d1f8      	bne.n	8018a0e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8018a1c:	483d      	ldr	r0, [pc, #244]	; (8018b14 <dns_gethostbyname_addrtype+0x280>)
 8018a1e:	2304      	movs	r3, #4
 8018a20:	7806      	ldrb	r6, [r0, #0]
 8018a22:	3601      	adds	r6, #1
 8018a24:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8018a26:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8018a28:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8018a2a:	d901      	bls.n	8018a30 <dns_gethostbyname_addrtype+0x19c>
 8018a2c:	2600      	movs	r6, #0
      idx = 0;
 8018a2e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8018a30:	4d37      	ldr	r5, [pc, #220]	; (8018b10 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8018a32:	1c71      	adds	r1, r6, #1
 8018a34:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8018a36:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018a3a:	2a00      	cmp	r2, #0
 8018a3c:	d13d      	bne.n	8018aba <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8018a3e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8018a42:	b2ce      	uxtb	r6, r1
 8018a44:	d1ef      	bne.n	8018a26 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8018a46:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8018a48:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8018a4c:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8018a4e:	443a      	add	r2, r7
 8018a50:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8018a54:	2304      	movs	r3, #4
 8018a56:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8018a58:	e73c      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8018a5a:	202e      	movs	r0, #46	; 0x2e
 8018a5c:	f006 fc9c 	bl	801f398 <udp_new_ip_type>
  if (pcb == NULL) {
 8018a60:	4681      	mov	r9, r0
 8018a62:	2800      	cmp	r0, #0
 8018a64:	d043      	beq.n	8018aee <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8018a66:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8018b1c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8018a6a:	f00b fcef 	bl	802444c <rand>
 8018a6e:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8018a70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8018a74:	d3f9      	bcc.n	8018a6a <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8018a76:	4659      	mov	r1, fp
 8018a78:	4648      	mov	r0, r9
 8018a7a:	f006 fa29 	bl	801eed0 <udp_bind>
  } while (err == ERR_USE);
 8018a7e:	f110 0f08 	cmn.w	r0, #8
 8018a82:	d0f2      	beq.n	8018a6a <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 8018a84:	b9d8      	cbnz	r0, 8018abe <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 8018a86:	4602      	mov	r2, r0
 8018a88:	4923      	ldr	r1, [pc, #140]	; (8018b18 <dns_gethostbyname_addrtype+0x284>)
 8018a8a:	4648      	mov	r0, r9
 8018a8c:	f006 fc34 	bl	801f2f8 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 8018a90:	4b1f      	ldr	r3, [pc, #124]	; (8018b10 <dns_gethostbyname_addrtype+0x27c>)
 8018a92:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 8018a96:	4b1f      	ldr	r3, [pc, #124]	; (8018b14 <dns_gethostbyname_addrtype+0x280>)
 8018a98:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 8018a9a:	4a1a      	ldr	r2, [pc, #104]	; (8018b04 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 8018a9c:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 8018a9e:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 8018aa0:	7813      	ldrb	r3, [r2, #0]
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8018aa6:	f7ff fcb1 	bl	801840c <dns_check_entry>
  return ERR_INPROGRESS;
 8018aaa:	f06f 0004 	mvn.w	r0, #4
 8018aae:	e711      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8018ab0:	4698      	mov	r8, r3
 8018ab2:	e783      	b.n	80189bc <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8018ab4:	f06f 000f 	mvn.w	r0, #15
 8018ab8:	e70c      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 8018aba:	7006      	strb	r6, [r0, #0]
      return idx;
 8018abc:	e7ed      	b.n	8018a9a <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 8018abe:	4648      	mov	r0, r9
 8018ac0:	f006 fc2c 	bl	801f31c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	4a12      	ldr	r2, [pc, #72]	; (8018b10 <dns_gethostbyname_addrtype+0x27c>)
 8018ac8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8018acc:	e7a6      	b.n	8018a1c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 8018ace:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ad2:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 8018ad6:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 8018ada:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8018ade:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8018ae2:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8018ae6:	e6f5      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8018ae8:	f06f 0005 	mvn.w	r0, #5
 8018aec:	e6f2      	b.n	80188d4 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 8018aee:	4b08      	ldr	r3, [pc, #32]	; (8018b10 <dns_gethostbyname_addrtype+0x27c>)
 8018af0:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8018af4:	e792      	b.n	8018a1c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8018af6:	f06f 000f 	mvn.w	r0, #15
}
 8018afa:	4770      	bx	lr
 8018afc:	2001e858 	.word	0x2001e858
 8018b00:	2001e840 	.word	0x2001e840
 8018b04:	2001e83c 	.word	0x2001e83c
 8018b08:	2001e848 	.word	0x2001e848
 8018b0c:	2001e80c 	.word	0x2001e80c
 8018b10:	2001e7fc 	.word	0x2001e7fc
 8018b14:	2001e7f8 	.word	0x2001e7f8
 8018b18:	0801851d 	.word	0x0801851d
 8018b1c:	080443ac 	.word	0x080443ac

08018b20 <dns_gethostbyname>:
{
 8018b20:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8018b22:	2400      	movs	r4, #0
{
 8018b24:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8018b26:	9400      	str	r4, [sp, #0]
 8018b28:	f7ff feb4 	bl	8018894 <dns_gethostbyname_addrtype>
}
 8018b2c:	b002      	add	sp, #8
 8018b2e:	bd10      	pop	{r4, pc}

08018b30 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8018b30:	2300      	movs	r3, #0
{
 8018b32:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8018b34:	4299      	cmp	r1, r3
{
 8018b36:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8018b38:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 8018b3c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8018b40:	dd05      	ble.n	8018b4e <lwip_standard_chksum+0x1e>
 8018b42:	b124      	cbz	r4, 8018b4e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8018b44:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8018b48:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8018b4a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8018b4e:	2901      	cmp	r1, #1
 8018b50:	dd28      	ble.n	8018ba4 <lwip_standard_chksum+0x74>
 8018b52:	3902      	subs	r1, #2
  u32_t sum = 0;
 8018b54:	2300      	movs	r3, #0
 8018b56:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8018b5a:	f10e 0c01 	add.w	ip, lr, #1
 8018b5e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8018b62:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8018b66:	4584      	cmp	ip, r0
    sum += *ps++;
 8018b68:	4413      	add	r3, r2
  while (len > 1) {
 8018b6a:	d1fa      	bne.n	8018b62 <lwip_standard_chksum+0x32>
    len -= 2;
 8018b6c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8018b70:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8018b74:	2901      	cmp	r1, #1
 8018b76:	d103      	bne.n	8018b80 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8018b78:	f89c 2000 	ldrb.w	r2, [ip]
 8018b7c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8018b80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018b84:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8018b86:	b298      	uxth	r0, r3
 8018b88:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8018b8c:	b298      	uxth	r0, r3
 8018b8e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8018b92:	b124      	cbz	r4, 8018b9e <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 8018b94:	0203      	lsls	r3, r0, #8
 8018b96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018b9a:	b29b      	uxth	r3, r3
 8018b9c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8018b9e:	b280      	uxth	r0, r0
 8018ba0:	b002      	add	sp, #8
 8018ba2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 8018ba4:	4684      	mov	ip, r0
  u32_t sum = 0;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	e7e4      	b.n	8018b74 <lwip_standard_chksum+0x44>
 8018baa:	bf00      	nop

08018bac <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8018bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb0:	4688      	mov	r8, r1
 8018bb2:	4617      	mov	r7, r2
 8018bb4:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8018bb6:	b1f8      	cbz	r0, 8018bf8 <inet_cksum_pseudo_base+0x4c>
 8018bb8:	4605      	mov	r5, r0
  int swapped = 0;
 8018bba:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018bbc:	8969      	ldrh	r1, [r5, #10]
 8018bbe:	6868      	ldr	r0, [r5, #4]
 8018bc0:	f7ff ffb6 	bl	8018b30 <lwip_standard_chksum>
 8018bc4:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8018bc6:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8018bc8:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 8018bca:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 8018bce:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8018bd2:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8018bd6:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8018bda:	d004      	beq.n	8018be6 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 8018bdc:	b29b      	uxth	r3, r3
 8018bde:	f086 0601 	eor.w	r6, r6, #1
 8018be2:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8018be6:	682d      	ldr	r5, [r5, #0]
 8018be8:	2d00      	cmp	r5, #0
 8018bea:	d1e7      	bne.n	8018bbc <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8018bec:	b126      	cbz	r6, 8018bf8 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018bee:	0222      	lsls	r2, r4, #8
 8018bf0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018bf4:	b292      	uxth	r2, r2
 8018bf6:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8018bf8:	4640      	mov	r0, r8
 8018bfa:	f7ff fa7d 	bl	80180f8 <lwip_htons>
 8018bfe:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8018c00:	4638      	mov	r0, r7
 8018c02:	f7ff fa79 	bl	80180f8 <lwip_htons>
 8018c06:	4428      	add	r0, r5
 8018c08:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8018c0a:	b2a0      	uxth	r0, r4
 8018c0c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8018c10:	b2a0      	uxth	r0, r4
 8018c12:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8018c16:	43c0      	mvns	r0, r0
}
 8018c18:	b280      	uxth	r0, r0
 8018c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c1e:	bf00      	nop

08018c20 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8018c20:	b430      	push	{r4, r5}
 8018c22:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8018c24:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8018c26:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8018c28:	0c23      	lsrs	r3, r4, #16
 8018c2a:	fa13 f384 	uxtah	r3, r3, r4
 8018c2e:	fa13 f385 	uxtah	r3, r3, r5
 8018c32:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8018c36:	b29c      	uxth	r4, r3
 8018c38:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8018c3c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8018c3e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8018c42:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8018c44:	f7ff bfb2 	b.w	8018bac <inet_cksum_pseudo_base>

08018c48 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8018c48:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8018c4a:	f7ff ff71 	bl	8018b30 <lwip_standard_chksum>
 8018c4e:	43c0      	mvns	r0, r0
}
 8018c50:	b280      	uxth	r0, r0
 8018c52:	bd08      	pop	{r3, pc}

08018c54 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8018c54:	b338      	cbz	r0, 8018ca6 <inet_chksum_pbuf+0x52>
{
 8018c56:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8018c58:	2600      	movs	r6, #0
 8018c5a:	4605      	mov	r5, r0
  acc = 0;
 8018c5c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8018c5e:	8969      	ldrh	r1, [r5, #10]
 8018c60:	6868      	ldr	r0, [r5, #4]
 8018c62:	f7ff ff65 	bl	8018b30 <lwip_standard_chksum>
 8018c66:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8018c68:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8018c6a:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 8018c6c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8018c70:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8018c74:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8018c78:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8018c7c:	d004      	beq.n	8018c88 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	f086 0601 	eor.w	r6, r6, #1
 8018c84:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8018c88:	682d      	ldr	r5, [r5, #0]
 8018c8a:	2d00      	cmp	r5, #0
 8018c8c:	d1e7      	bne.n	8018c5e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8018c8e:	b13e      	cbz	r6, 8018ca0 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8018c90:	0220      	lsls	r0, r4, #8
 8018c92:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018c96:	b280      	uxth	r0, r0
 8018c98:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8018c9a:	43c0      	mvns	r0, r0
 8018c9c:	b280      	uxth	r0, r0
}
 8018c9e:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8018ca0:	43e0      	mvns	r0, r4
 8018ca2:	b280      	uxth	r0, r0
}
 8018ca4:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8018ca6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8018caa:	4770      	bx	lr

08018cac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8018cac:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8018cae:	f009 fe37 	bl	8022920 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8018cb2:	f000 f975 	bl	8018fa0 <mem_init>
  memp_init();
 8018cb6:	f000 fcf9 	bl	80196ac <memp_init>
  pbuf_init();
  netif_init();
 8018cba:	f000 fdbd 	bl	8019838 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8018cbe:	f005 fffd 	bl	801ecbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8018cc2:	f001 fd89 	bl	801a7d8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8018cc6:	f7ff fdbf 	bl	8018848 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8018cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8018cce:	f005 bf4d 	b.w	801eb6c <sys_timeouts_init>
 8018cd2:	bf00      	nop

08018cd4 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018cd4:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8018cd8:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 8018cda:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018cde:	4299      	cmp	r1, r3
 8018ce0:	d81b      	bhi.n	8018d1a <mem_link_valid+0x46>
 8018ce2:	459c      	cmp	ip, r3
 8018ce4:	bf94      	ite	ls
 8018ce6:	2200      	movls	r2, #0
 8018ce8:	2201      	movhi	r2, #1
 8018cea:	b9b2      	cbnz	r2, 8018d1a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 8018cec:	4b0f      	ldr	r3, [pc, #60]	; (8018d2c <mem_link_valid+0x58>)
{
 8018cee:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8018cf0:	681c      	ldr	r4, [r3, #0]
 8018cf2:	1b03      	subs	r3, r0, r4
 8018cf4:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018cf6:	4299      	cmp	r1, r3
 8018cf8:	d002      	beq.n	8018d00 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018cfa:	5a61      	ldrh	r1, [r4, r1]
 8018cfc:	4299      	cmp	r1, r3
 8018cfe:	d10e      	bne.n	8018d1e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018d00:	4a0b      	ldr	r2, [pc, #44]	; (8018d30 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8018d02:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018d04:	6812      	ldr	r2, [r2, #0]
 8018d06:	42a2      	cmp	r2, r4
 8018d08:	d00d      	beq.n	8018d26 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018d0a:	8860      	ldrh	r0, [r4, #2]
 8018d0c:	1ac0      	subs	r0, r0, r3
 8018d0e:	fab0 f080 	clz	r0, r0
 8018d12:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8018d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d18:	4770      	bx	lr
    return 0;
 8018d1a:	2000      	movs	r0, #0
}
 8018d1c:	4770      	bx	lr
    return 0;
 8018d1e:	4610      	mov	r0, r2
}
 8018d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d24:	4770      	bx	lr
  return 1;
 8018d26:	2001      	movs	r0, #1
 8018d28:	e7f4      	b.n	8018d14 <mem_link_valid+0x40>
 8018d2a:	bf00      	nop
 8018d2c:	2001ecac 	.word	0x2001ecac
 8018d30:	2001ecb0 	.word	0x2001ecb0

08018d34 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8018d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8018d38:	4f5f      	ldr	r7, [pc, #380]	; (8018eb8 <mem_sanity+0x184>)
 8018d3a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8018d3c:	7935      	ldrb	r5, [r6, #4]
 8018d3e:	2d01      	cmp	r5, #1
 8018d40:	d907      	bls.n	8018d52 <mem_sanity+0x1e>
 8018d42:	4b5e      	ldr	r3, [pc, #376]	; (8018ebc <mem_sanity+0x188>)
 8018d44:	f240 223f 	movw	r2, #575	; 0x23f
 8018d48:	495d      	ldr	r1, [pc, #372]	; (8018ec0 <mem_sanity+0x18c>)
 8018d4a:	485e      	ldr	r0, [pc, #376]	; (8018ec4 <mem_sanity+0x190>)
 8018d4c:	f00b fada 	bl	8024304 <iprintf>
  last_used = mem->used;
 8018d50:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8018d52:	8873      	ldrh	r3, [r6, #2]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f040 80a7 	bne.w	8018ea8 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018d5a:	8834      	ldrh	r4, [r6, #0]
 8018d5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018d60:	429c      	cmp	r4, r3
 8018d62:	f200 8098 	bhi.w	8018e96 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8018d6a:	429c      	cmp	r4, r3
 8018d6c:	d961      	bls.n	8018e32 <mem_sanity+0xfe>
 8018d6e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8018ee0 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8018d72:	f8df a148 	ldr.w	sl, [pc, #328]	; 8018ebc <mem_sanity+0x188>
 8018d76:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8018ee4 <mem_sanity+0x1b0>
 8018d7a:	4e52      	ldr	r6, [pc, #328]	; (8018ec4 <mem_sanity+0x190>)
 8018d7c:	e012      	b.n	8018da4 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8018d7e:	2b01      	cmp	r3, #1
 8018d80:	d006      	beq.n	8018d90 <mem_sanity+0x5c>
 8018d82:	4653      	mov	r3, sl
 8018d84:	f240 2251 	movw	r2, #593	; 0x251
 8018d88:	494f      	ldr	r1, [pc, #316]	; (8018ec8 <mem_sanity+0x194>)
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f00b faba 	bl	8024304 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8018d90:	4620      	mov	r0, r4
 8018d92:	f7ff ff9f 	bl	8018cd4 <mem_link_valid>
 8018d96:	b380      	cbz	r0, 8018dfa <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8018d9c:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8018d9e:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8018da0:	42a3      	cmp	r3, r4
 8018da2:	d246      	bcs.n	8018e32 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8018da4:	f8d8 2000 	ldr.w	r2, [r8]
 8018da8:	42a2      	cmp	r2, r4
 8018daa:	d942      	bls.n	8018e32 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8018dac:	1ce2      	adds	r2, r4, #3
 8018dae:	f022 0203 	bic.w	r2, r2, #3
 8018db2:	4294      	cmp	r4, r2
 8018db4:	d006      	beq.n	8018dc4 <mem_sanity+0x90>
 8018db6:	4653      	mov	r3, sl
 8018db8:	f240 2249 	movw	r2, #585	; 0x249
 8018dbc:	4649      	mov	r1, r9
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	f00b faa0 	bl	8024304 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8018dc4:	8862      	ldrh	r2, [r4, #2]
 8018dc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d81d      	bhi.n	8018e0a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018dce:	8822      	ldrh	r2, [r4, #0]
 8018dd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8018dd4:	429a      	cmp	r2, r3
 8018dd6:	d824      	bhi.n	8018e22 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8018dd8:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8018dda:	2d00      	cmp	r5, #0
 8018ddc:	d0cf      	beq.n	8018d7e <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d9d6      	bls.n	8018d90 <mem_sanity+0x5c>
 8018de2:	4653      	mov	r3, sl
 8018de4:	f240 2253 	movw	r2, #595	; 0x253
 8018de8:	4938      	ldr	r1, [pc, #224]	; (8018ecc <mem_sanity+0x198>)
 8018dea:	4630      	mov	r0, r6
 8018dec:	f00b fa8a 	bl	8024304 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8018df0:	4620      	mov	r0, r4
 8018df2:	f7ff ff6f 	bl	8018cd4 <mem_link_valid>
 8018df6:	2800      	cmp	r0, #0
 8018df8:	d1ce      	bne.n	8018d98 <mem_sanity+0x64>
 8018dfa:	4653      	mov	r3, sl
 8018dfc:	f240 2256 	movw	r2, #598	; 0x256
 8018e00:	4933      	ldr	r1, [pc, #204]	; (8018ed0 <mem_sanity+0x19c>)
 8018e02:	4630      	mov	r0, r6
 8018e04:	f00b fa7e 	bl	8024304 <iprintf>
 8018e08:	e7c6      	b.n	8018d98 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8018e0a:	4653      	mov	r3, sl
 8018e0c:	f240 224a 	movw	r2, #586	; 0x24a
 8018e10:	4930      	ldr	r1, [pc, #192]	; (8018ed4 <mem_sanity+0x1a0>)
 8018e12:	4630      	mov	r0, r6
 8018e14:	f00b fa76 	bl	8024304 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018e18:	8822      	ldrh	r2, [r4, #0]
 8018e1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d9da      	bls.n	8018dd8 <mem_sanity+0xa4>
 8018e22:	4653      	mov	r3, sl
 8018e24:	f240 224b 	movw	r2, #587	; 0x24b
 8018e28:	492b      	ldr	r1, [pc, #172]	; (8018ed8 <mem_sanity+0x1a4>)
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f00b fa6a 	bl	8024304 <iprintf>
 8018e30:	e7d2      	b.n	8018dd8 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8018e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8018e36:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8018e38:	4294      	cmp	r4, r2
 8018e3a:	d006      	beq.n	8018e4a <mem_sanity+0x116>
 8018e3c:	4b1f      	ldr	r3, [pc, #124]	; (8018ebc <mem_sanity+0x188>)
 8018e3e:	f240 225b 	movw	r2, #603	; 0x25b
 8018e42:	4926      	ldr	r1, [pc, #152]	; (8018edc <mem_sanity+0x1a8>)
 8018e44:	481f      	ldr	r0, [pc, #124]	; (8018ec4 <mem_sanity+0x190>)
 8018e46:	f00b fa5d 	bl	8024304 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8018e4a:	7923      	ldrb	r3, [r4, #4]
 8018e4c:	2b01      	cmp	r3, #1
 8018e4e:	d006      	beq.n	8018e5e <mem_sanity+0x12a>
 8018e50:	4b1a      	ldr	r3, [pc, #104]	; (8018ebc <mem_sanity+0x188>)
 8018e52:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8018e56:	491a      	ldr	r1, [pc, #104]	; (8018ec0 <mem_sanity+0x18c>)
 8018e58:	481a      	ldr	r0, [pc, #104]	; (8018ec4 <mem_sanity+0x190>)
 8018e5a:	f00b fa53 	bl	8024304 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8018e5e:	8862      	ldrh	r2, [r4, #2]
 8018e60:	f242 7310 	movw	r3, #10000	; 0x2710
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d006      	beq.n	8018e76 <mem_sanity+0x142>
 8018e68:	4b14      	ldr	r3, [pc, #80]	; (8018ebc <mem_sanity+0x188>)
 8018e6a:	f240 225d 	movw	r2, #605	; 0x25d
 8018e6e:	4919      	ldr	r1, [pc, #100]	; (8018ed4 <mem_sanity+0x1a0>)
 8018e70:	4814      	ldr	r0, [pc, #80]	; (8018ec4 <mem_sanity+0x190>)
 8018e72:	f00b fa47 	bl	8024304 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018e76:	8822      	ldrh	r2, [r4, #0]
 8018e78:	f242 7310 	movw	r3, #10000	; 0x2710
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d101      	bne.n	8018e84 <mem_sanity+0x150>
}
 8018e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018e84:	4b0d      	ldr	r3, [pc, #52]	; (8018ebc <mem_sanity+0x188>)
 8018e86:	f240 225e 	movw	r2, #606	; 0x25e
 8018e8a:	4913      	ldr	r1, [pc, #76]	; (8018ed8 <mem_sanity+0x1a4>)
 8018e8c:	480d      	ldr	r0, [pc, #52]	; (8018ec4 <mem_sanity+0x190>)
}
 8018e8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8018e92:	f00b ba37 	b.w	8024304 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8018e96:	4b09      	ldr	r3, [pc, #36]	; (8018ebc <mem_sanity+0x188>)
 8018e98:	f240 2242 	movw	r2, #578	; 0x242
 8018e9c:	490e      	ldr	r1, [pc, #56]	; (8018ed8 <mem_sanity+0x1a4>)
 8018e9e:	4809      	ldr	r0, [pc, #36]	; (8018ec4 <mem_sanity+0x190>)
 8018ea0:	f00b fa30 	bl	8024304 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8018ea4:	8834      	ldrh	r4, [r6, #0]
 8018ea6:	e75e      	b.n	8018d66 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8018ea8:	4b04      	ldr	r3, [pc, #16]	; (8018ebc <mem_sanity+0x188>)
 8018eaa:	f240 2241 	movw	r2, #577	; 0x241
 8018eae:	4909      	ldr	r1, [pc, #36]	; (8018ed4 <mem_sanity+0x1a0>)
 8018eb0:	4804      	ldr	r0, [pc, #16]	; (8018ec4 <mem_sanity+0x190>)
 8018eb2:	f00b fa27 	bl	8024304 <iprintf>
 8018eb6:	e750      	b.n	8018d5a <mem_sanity+0x26>
 8018eb8:	2001ecac 	.word	0x2001ecac
 8018ebc:	08041c58 	.word	0x08041c58
 8018ec0:	08041c88 	.word	0x08041c88
 8018ec4:	08028ab4 	.word	0x08028ab4
 8018ec8:	08041cf0 	.word	0x08041cf0
 8018ecc:	08041d08 	.word	0x08041d08
 8018ed0:	08041d24 	.word	0x08041d24
 8018ed4:	08041ca0 	.word	0x08041ca0
 8018ed8:	08041cbc 	.word	0x08041cbc
 8018edc:	08041d3c 	.word	0x08041d3c
 8018ee0:	2001ecb0 	.word	0x2001ecb0
 8018ee4:	08041cd8 	.word	0x08041cd8

08018ee8 <mem_overflow_check_raw>:
{
 8018ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eec:	1e4c      	subs	r4, r1, #1
 8018eee:	310f      	adds	r1, #15
 8018ef0:	b0a3      	sub	sp, #140	; 0x8c
 8018ef2:	4606      	mov	r6, r0
 8018ef4:	4615      	mov	r5, r2
 8018ef6:	4698      	mov	r8, r3
 8018ef8:	4404      	add	r4, r0
 8018efa:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018efc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8018f74 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8018f00:	f8df b074 	ldr.w	fp, [pc, #116]	; 8018f78 <mem_overflow_check_raw+0x90>
 8018f04:	f8df a074 	ldr.w	sl, [pc, #116]	; 8018f7c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8018f08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018f0c:	464a      	mov	r2, r9
 8018f0e:	2180      	movs	r1, #128	; 0x80
 8018f10:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018f12:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018f14:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8018f16:	d009      	beq.n	8018f2c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018f18:	f8cd 8000 	str.w	r8, [sp]
 8018f1c:	f00b fba8 	bl	8024670 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8018f20:	465b      	mov	r3, fp
 8018f22:	226d      	movs	r2, #109	; 0x6d
 8018f24:	a902      	add	r1, sp, #8
 8018f26:	4650      	mov	r0, sl
 8018f28:	f00b f9ec 	bl	8024304 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8018f2c:	42bc      	cmp	r4, r7
 8018f2e:	d1eb      	bne.n	8018f08 <mem_overflow_check_raw+0x20>
 8018f30:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018f34:	4f0e      	ldr	r7, [pc, #56]	; (8018f70 <mem_overflow_check_raw+0x88>)
 8018f36:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8018f38:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8018f78 <mem_overflow_check_raw+0x90>
 8018f3c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8018f7c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8018f40:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018f44:	463a      	mov	r2, r7
 8018f46:	2180      	movs	r1, #128	; 0x80
 8018f48:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8018f4a:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018f4c:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018f4e:	d009      	beq.n	8018f64 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018f50:	f8cd 8000 	str.w	r8, [sp]
 8018f54:	f00b fb8c 	bl	8024670 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8018f58:	4653      	mov	r3, sl
 8018f5a:	2278      	movs	r2, #120	; 0x78
 8018f5c:	a902      	add	r1, sp, #8
 8018f5e:	4648      	mov	r0, r9
 8018f60:	f00b f9d0 	bl	8024304 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8018f64:	42b4      	cmp	r4, r6
 8018f66:	d1eb      	bne.n	8018f40 <mem_overflow_check_raw+0x58>
}
 8018f68:	b023      	add	sp, #140	; 0x8c
 8018f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6e:	bf00      	nop
 8018f70:	08041d70 	.word	0x08041d70
 8018f74:	08041d50 	.word	0x08041d50
 8018f78:	08041c58 	.word	0x08041c58
 8018f7c:	08028ab4 	.word	0x08028ab4

08018f80 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8018f80:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8018f84:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8018f86:	f840 3c10 	str.w	r3, [r0, #-16]
 8018f8a:	f840 3c0c 	str.w	r3, [r0, #-12]
 8018f8e:	f840 3c08 	str.w	r3, [r0, #-8]
 8018f92:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8018f96:	5043      	str	r3, [r0, r1]
 8018f98:	6053      	str	r3, [r2, #4]
 8018f9a:	6093      	str	r3, [r2, #8]
 8018f9c:	60d3      	str	r3, [r2, #12]
}
 8018f9e:	4770      	bx	lr

08018fa0 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018fa0:	4b14      	ldr	r3, [pc, #80]	; (8018ff4 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8018fa2:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 8018fa6:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018fa8:	4913      	ldr	r1, [pc, #76]	; (8018ff8 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018faa:	f023 0303 	bic.w	r3, r3, #3
{
 8018fae:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8018fb0:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8018fb2:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018fb4:	4c11      	ldr	r4, [pc, #68]	; (8018ffc <mem_init+0x5c>)
  mem->used = 0;
 8018fb6:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018fb8:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8018fba:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8018fbe:	4910      	ldr	r1, [pc, #64]	; (8019000 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8018fc0:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 8018fc2:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8018fc4:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 8018fc8:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 8018fcc:	f7ff feb2 	bl	8018d34 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8018fd0:	6822      	ldr	r2, [r4, #0]
 8018fd2:	4b0c      	ldr	r3, [pc, #48]	; (8019004 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018fd4:	480c      	ldr	r0, [pc, #48]	; (8019008 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 8018fd6:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018fd8:	f009 fcae 	bl	8022938 <sys_mutex_new>
 8018fdc:	b900      	cbnz	r0, 8018fe0 <mem_init+0x40>
}
 8018fde:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018fe0:	4b0a      	ldr	r3, [pc, #40]	; (801900c <mem_init+0x6c>)
 8018fe2:	f240 221f 	movw	r2, #543	; 0x21f
 8018fe6:	490a      	ldr	r1, [pc, #40]	; (8019010 <mem_init+0x70>)
 8018fe8:	480a      	ldr	r0, [pc, #40]	; (8019014 <mem_init+0x74>)
}
 8018fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018fee:	f00b b989 	b.w	8024304 <iprintf>
 8018ff2:	bf00      	nop
 8018ff4:	2001ecb7 	.word	0x2001ecb7
 8018ff8:	2001ecb0 	.word	0x2001ecb0
 8018ffc:	2001ecac 	.word	0x2001ecac
 8019000:	27102710 	.word	0x27102710
 8019004:	2001eca0 	.word	0x2001eca0
 8019008:	2001eca8 	.word	0x2001eca8
 801900c:	08041c58 	.word	0x08041c58
 8019010:	08041d90 	.word	0x08041d90
 8019014:	08028ab4 	.word	0x08028ab4

08019018 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019018:	2800      	cmp	r0, #0
 801901a:	d07f      	beq.n	801911c <mem_free+0x104>
{
 801901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019020:	f010 0803 	ands.w	r8, r0, #3
 8019024:	4604      	mov	r4, r0
 8019026:	d170      	bne.n	801910a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019028:	4e5c      	ldr	r6, [pc, #368]	; (801919c <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801902a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801902e:	6833      	ldr	r3, [r6, #0]
 8019030:	42ab      	cmp	r3, r5
 8019032:	d805      	bhi.n	8019040 <mem_free+0x28>
 8019034:	4f5a      	ldr	r7, [pc, #360]	; (80191a0 <mem_free+0x188>)
 8019036:	f100 030c 	add.w	r3, r0, #12
 801903a:	683a      	ldr	r2, [r7, #0]
 801903c:	429a      	cmp	r2, r3
 801903e:	d208      	bcs.n	8019052 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019040:	4b58      	ldr	r3, [pc, #352]	; (80191a4 <mem_free+0x18c>)
 8019042:	f240 227f 	movw	r2, #639	; 0x27f
 8019046:	4958      	ldr	r1, [pc, #352]	; (80191a8 <mem_free+0x190>)
 8019048:	4858      	ldr	r0, [pc, #352]	; (80191ac <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801904a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801904e:	f00b b959 	b.w	8024304 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019052:	4b57      	ldr	r3, [pc, #348]	; (80191b0 <mem_free+0x198>)
 8019054:	4a57      	ldr	r2, [pc, #348]	; (80191b4 <mem_free+0x19c>)
 8019056:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801905a:	f7ff ff45 	bl	8018ee8 <mem_overflow_check_raw>
  if (!mem->used) {
 801905e:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019062:	2b00      	cmp	r3, #0
 8019064:	f000 8082 	beq.w	801916c <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 8019068:	4628      	mov	r0, r5
 801906a:	f7ff fe33 	bl	8018cd4 <mem_link_valid>
 801906e:	2800      	cmp	r0, #0
 8019070:	f000 8085 	beq.w	801917e <mem_free+0x166>
  mem->used = 0;
 8019074:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8019078:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80191d8 <mem_free+0x1c0>
 801907c:	f8d8 3000 	ldr.w	r3, [r8]
 8019080:	42ab      	cmp	r3, r5
 8019082:	d901      	bls.n	8019088 <mem_free+0x70>
    lfree = mem;
 8019084:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019088:	6833      	ldr	r3, [r6, #0]
 801908a:	429d      	cmp	r5, r3
 801908c:	d351      	bcc.n	8019132 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	429d      	cmp	r5, r3
 8019092:	d258      	bcs.n	8019146 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019094:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019098:	f242 7210 	movw	r2, #10000	; 0x2710
 801909c:	4293      	cmp	r3, r2
 801909e:	d83e      	bhi.n	801911e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 80190a0:	6832      	ldr	r2, [r6, #0]
 80190a2:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80190a4:	429d      	cmp	r5, r3
 80190a6:	d013      	beq.n	80190d0 <mem_free+0xb8>
 80190a8:	7919      	ldrb	r1, [r3, #4]
 80190aa:	b989      	cbnz	r1, 80190d0 <mem_free+0xb8>
 80190ac:	6839      	ldr	r1, [r7, #0]
 80190ae:	428b      	cmp	r3, r1
 80190b0:	d00e      	beq.n	80190d0 <mem_free+0xb8>
    if (lfree == nmem) {
 80190b2:	f8d8 1000 	ldr.w	r1, [r8]
 80190b6:	428b      	cmp	r3, r1
 80190b8:	d06d      	beq.n	8019196 <mem_free+0x17e>
    mem->next = nmem->next;
 80190ba:	8819      	ldrh	r1, [r3, #0]
 80190bc:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80190c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80190c4:	881b      	ldrh	r3, [r3, #0]
 80190c6:	428b      	cmp	r3, r1
 80190c8:	d002      	beq.n	80190d0 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80190ca:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 80190cc:	1aa9      	subs	r1, r5, r2
 80190ce:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 80190d0:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 80190d4:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 80190d6:	429d      	cmp	r5, r3
 80190d8:	d010      	beq.n	80190fc <mem_free+0xe4>
 80190da:	7918      	ldrb	r0, [r3, #4]
 80190dc:	b970      	cbnz	r0, 80190fc <mem_free+0xe4>
    if (lfree == mem) {
 80190de:	f8d8 0000 	ldr.w	r0, [r8]
 80190e2:	4285      	cmp	r5, r0
 80190e4:	d054      	beq.n	8019190 <mem_free+0x178>
    pmem->next = mem->next;
 80190e6:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80190ea:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 80190ee:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80190f0:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80190f4:	4283      	cmp	r3, r0
 80190f6:	d001      	beq.n	80190fc <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80190f8:	441a      	add	r2, r3
 80190fa:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 80190fc:	f7ff fe1a 	bl	8018d34 <mem_sanity>
  mem_free_count = 1;
 8019100:	4b2d      	ldr	r3, [pc, #180]	; (80191b8 <mem_free+0x1a0>)
 8019102:	2201      	movs	r2, #1
 8019104:	701a      	strb	r2, [r3, #0]
}
 8019106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801910a:	4b26      	ldr	r3, [pc, #152]	; (80191a4 <mem_free+0x18c>)
 801910c:	f240 2273 	movw	r2, #627	; 0x273
 8019110:	492a      	ldr	r1, [pc, #168]	; (80191bc <mem_free+0x1a4>)
 8019112:	4826      	ldr	r0, [pc, #152]	; (80191ac <mem_free+0x194>)
}
 8019114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019118:	f00b b8f4 	b.w	8024304 <iprintf>
 801911c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801911e:	4b21      	ldr	r3, [pc, #132]	; (80191a4 <mem_free+0x18c>)
 8019120:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8019124:	4926      	ldr	r1, [pc, #152]	; (80191c0 <mem_free+0x1a8>)
 8019126:	4821      	ldr	r0, [pc, #132]	; (80191ac <mem_free+0x194>)
 8019128:	f00b f8ec 	bl	8024304 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801912c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019130:	e7b6      	b.n	80190a0 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019132:	4b1c      	ldr	r3, [pc, #112]	; (80191a4 <mem_free+0x18c>)
 8019134:	f240 12df 	movw	r2, #479	; 0x1df
 8019138:	4922      	ldr	r1, [pc, #136]	; (80191c4 <mem_free+0x1ac>)
 801913a:	481c      	ldr	r0, [pc, #112]	; (80191ac <mem_free+0x194>)
 801913c:	f00b f8e2 	bl	8024304 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	429d      	cmp	r5, r3
 8019144:	d306      	bcc.n	8019154 <mem_free+0x13c>
 8019146:	4b17      	ldr	r3, [pc, #92]	; (80191a4 <mem_free+0x18c>)
 8019148:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801914c:	491e      	ldr	r1, [pc, #120]	; (80191c8 <mem_free+0x1b0>)
 801914e:	4817      	ldr	r0, [pc, #92]	; (80191ac <mem_free+0x194>)
 8019150:	f00b f8d8 	bl	8024304 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8019154:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d09b      	beq.n	8019094 <mem_free+0x7c>
 801915c:	4b11      	ldr	r3, [pc, #68]	; (80191a4 <mem_free+0x18c>)
 801915e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019162:	491a      	ldr	r1, [pc, #104]	; (80191cc <mem_free+0x1b4>)
 8019164:	4811      	ldr	r0, [pc, #68]	; (80191ac <mem_free+0x194>)
 8019166:	f00b f8cd 	bl	8024304 <iprintf>
 801916a:	e793      	b.n	8019094 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801916c:	4b0d      	ldr	r3, [pc, #52]	; (80191a4 <mem_free+0x18c>)
 801916e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8019172:	4917      	ldr	r1, [pc, #92]	; (80191d0 <mem_free+0x1b8>)
 8019174:	480d      	ldr	r0, [pc, #52]	; (80191ac <mem_free+0x194>)
}
 8019176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801917a:	f00b b8c3 	b.w	8024304 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801917e:	4b09      	ldr	r3, [pc, #36]	; (80191a4 <mem_free+0x18c>)
 8019180:	f240 2295 	movw	r2, #661	; 0x295
 8019184:	4913      	ldr	r1, [pc, #76]	; (80191d4 <mem_free+0x1bc>)
 8019186:	4809      	ldr	r0, [pc, #36]	; (80191ac <mem_free+0x194>)
}
 8019188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801918c:	f00b b8ba 	b.w	8024304 <iprintf>
      lfree = pmem;
 8019190:	f8c8 3000 	str.w	r3, [r8]
 8019194:	e7a7      	b.n	80190e6 <mem_free+0xce>
      lfree = mem;
 8019196:	f8c8 5000 	str.w	r5, [r8]
 801919a:	e78e      	b.n	80190ba <mem_free+0xa2>
 801919c:	2001ecac 	.word	0x2001ecac
 80191a0:	2001ecb0 	.word	0x2001ecb0
 80191a4:	08041c58 	.word	0x08041c58
 80191a8:	08041dd0 	.word	0x08041dd0
 80191ac:	08028ab4 	.word	0x08028ab4
 80191b0:	08028d4c 	.word	0x08028d4c
 80191b4:	08041dec 	.word	0x08041dec
 80191b8:	2001eca4 	.word	0x2001eca4
 80191bc:	08041dac 	.word	0x08041dac
 80191c0:	08041ea0 	.word	0x08041ea0
 80191c4:	08041e50 	.word	0x08041e50
 80191c8:	08041e68 	.word	0x08041e68
 80191cc:	08041e84 	.word	0x08041e84
 80191d0:	08041df4 	.word	0x08041df4
 80191d4:	08041e1c 	.word	0x08041e1c
 80191d8:	2001eca0 	.word	0x2001eca0

080191dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80191dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80191e0:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80191e2:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80191e6:	f024 0403 	bic.w	r4, r4, #3
 80191ea:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80191ec:	2c0c      	cmp	r4, #12
 80191ee:	bf38      	it	cc
 80191f0:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80191f2:	3420      	adds	r4, #32
 80191f4:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80191f6:	429c      	cmp	r4, r3
 80191f8:	d87a      	bhi.n	80192f0 <mem_trim+0x114>
 80191fa:	42a1      	cmp	r1, r4
 80191fc:	460e      	mov	r6, r1
 80191fe:	d877      	bhi.n	80192f0 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019200:	4f58      	ldr	r7, [pc, #352]	; (8019364 <mem_trim+0x188>)
 8019202:	4605      	mov	r5, r0
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	4283      	cmp	r3, r0
 8019208:	d803      	bhi.n	8019212 <mem_trim+0x36>
 801920a:	4b57      	ldr	r3, [pc, #348]	; (8019368 <mem_trim+0x18c>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4283      	cmp	r3, r0
 8019210:	d810      	bhi.n	8019234 <mem_trim+0x58>
 8019212:	4b56      	ldr	r3, [pc, #344]	; (801936c <mem_trim+0x190>)
 8019214:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019218:	4955      	ldr	r1, [pc, #340]	; (8019370 <mem_trim+0x194>)
 801921a:	4856      	ldr	r0, [pc, #344]	; (8019374 <mem_trim+0x198>)
 801921c:	f00b f872 	bl	8024304 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	42ab      	cmp	r3, r5
 8019224:	d902      	bls.n	801922c <mem_trim+0x50>
{
 8019226:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8019228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801922c:	4b4e      	ldr	r3, [pc, #312]	; (8019368 <mem_trim+0x18c>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	429d      	cmp	r5, r3
 8019232:	d2f8      	bcs.n	8019226 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019234:	4b50      	ldr	r3, [pc, #320]	; (8019378 <mem_trim+0x19c>)
 8019236:	4628      	mov	r0, r5
 8019238:	4a50      	ldr	r2, [pc, #320]	; (801937c <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801923a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801923e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8019242:	f7ff fe51 	bl	8018ee8 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8019246:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019248:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801924c:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019250:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8019254:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019258:	eba3 0308 	sub.w	r3, r3, r8
 801925c:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801925e:	429c      	cmp	r4, r3
 8019260:	d83d      	bhi.n	80192de <mem_trim+0x102>
  if (newsize == size) {
 8019262:	d0e0      	beq.n	8019226 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 8019264:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 8019268:	f899 0004 	ldrb.w	r0, [r9, #4]
 801926c:	2800      	cmp	r0, #0
 801926e:	d142      	bne.n	80192f6 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019270:	f242 7310 	movw	r3, #10000	; 0x2710
 8019274:	4299      	cmp	r1, r3
 8019276:	d061      	beq.n	801933c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019278:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801927c:	4940      	ldr	r1, [pc, #256]	; (8019380 <mem_trim+0x1a4>)
    next = mem2->next;
 801927e:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019282:	441c      	add	r4, r3
    if (lfree == mem2) {
 8019284:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019286:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8019288:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801928a:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801928e:	d053      	beq.n	8019338 <mem_trim+0x15c>
    mem2->used = 0;
 8019290:	2100      	movs	r1, #0
    mem2->next = next;
 8019292:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 8019294:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019298:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801929a:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801929e:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	428b      	cmp	r3, r1
 80192a6:	d001      	beq.n	80192ac <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80192a8:	4413      	add	r3, r2
 80192aa:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80192ac:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80192b0:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 80192b2:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80192b6:	f845 3c10 	str.w	r3, [r5, #-16]
 80192ba:	f845 3c0c 	str.w	r3, [r5, #-12]
 80192be:	f845 3c08 	str.w	r3, [r5, #-8]
 80192c2:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80192c6:	51ab      	str	r3, [r5, r6]
 80192c8:	6053      	str	r3, [r2, #4]
 80192ca:	6093      	str	r3, [r2, #8]
 80192cc:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 80192ce:	f7ff fd31 	bl	8018d34 <mem_sanity>
  mem_free_count = 1;
 80192d2:	4b2c      	ldr	r3, [pc, #176]	; (8019384 <mem_trim+0x1a8>)
 80192d4:	2201      	movs	r2, #1
  return rmem;
 80192d6:	4628      	mov	r0, r5
  mem_free_count = 1;
 80192d8:	701a      	strb	r2, [r3, #0]
}
 80192da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80192de:	4b23      	ldr	r3, [pc, #140]	; (801936c <mem_trim+0x190>)
 80192e0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80192e4:	4928      	ldr	r1, [pc, #160]	; (8019388 <mem_trim+0x1ac>)
 80192e6:	4823      	ldr	r0, [pc, #140]	; (8019374 <mem_trim+0x198>)
 80192e8:	f00b f80c 	bl	8024304 <iprintf>
    return NULL;
 80192ec:	2000      	movs	r0, #0
 80192ee:	e79b      	b.n	8019228 <mem_trim+0x4c>
    return NULL;
 80192f0:	2000      	movs	r0, #0
}
 80192f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80192f6:	f104 0014 	add.w	r0, r4, #20
 80192fa:	4298      	cmp	r0, r3
 80192fc:	d8d6      	bhi.n	80192ac <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80192fe:	f108 0308 	add.w	r3, r8, #8
 8019302:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019304:	f242 7310 	movw	r3, #10000	; 0x2710
 8019308:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801930a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801930c:	d01f      	beq.n	801934e <mem_trim+0x172>
    if (mem2 < lfree) {
 801930e:	481c      	ldr	r0, [pc, #112]	; (8019380 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 8019310:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 8019312:	6807      	ldr	r7, [r0, #0]
 8019314:	429f      	cmp	r7, r3
 8019316:	d900      	bls.n	801931a <mem_trim+0x13e>
      lfree = mem2;
 8019318:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801931a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801931c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801931e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019322:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019324:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019328:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801932c:	881b      	ldrh	r3, [r3, #0]
 801932e:	428b      	cmp	r3, r1
 8019330:	d0bc      	beq.n	80192ac <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019332:	441a      	add	r2, r3
 8019334:	8054      	strh	r4, [r2, #2]
 8019336:	e7b9      	b.n	80192ac <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 8019338:	600b      	str	r3, [r1, #0]
 801933a:	e7a9      	b.n	8019290 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801933c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8019340:	4b0a      	ldr	r3, [pc, #40]	; (801936c <mem_trim+0x190>)
 8019342:	4912      	ldr	r1, [pc, #72]	; (801938c <mem_trim+0x1b0>)
 8019344:	480b      	ldr	r0, [pc, #44]	; (8019374 <mem_trim+0x198>)
 8019346:	f00a ffdd 	bl	8024304 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801934a:	683a      	ldr	r2, [r7, #0]
 801934c:	e794      	b.n	8019278 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801934e:	f240 3216 	movw	r2, #790	; 0x316
 8019352:	490e      	ldr	r1, [pc, #56]	; (801938c <mem_trim+0x1b0>)
 8019354:	4b05      	ldr	r3, [pc, #20]	; (801936c <mem_trim+0x190>)
 8019356:	4807      	ldr	r0, [pc, #28]	; (8019374 <mem_trim+0x198>)
 8019358:	f00a ffd4 	bl	8024304 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801935c:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801935e:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 8019362:	e7d4      	b.n	801930e <mem_trim+0x132>
 8019364:	2001ecac 	.word	0x2001ecac
 8019368:	2001ecb0 	.word	0x2001ecb0
 801936c:	08041c58 	.word	0x08041c58
 8019370:	08041ecc 	.word	0x08041ecc
 8019374:	08028ab4 	.word	0x08028ab4
 8019378:	08028d4c 	.word	0x08028d4c
 801937c:	08041dec 	.word	0x08041dec
 8019380:	2001eca0 	.word	0x2001eca0
 8019384:	2001eca4 	.word	0x2001eca4
 8019388:	08041ee4 	.word	0x08041ee4
 801938c:	08041f04 	.word	0x08041f04

08019390 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019394:	4680      	mov	r8, r0
 8019396:	2800      	cmp	r0, #0
 8019398:	f000 80b2 	beq.w	8019500 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801939c:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80193a0:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80193a4:	f02b 0b03 	bic.w	fp, fp, #3
 80193a8:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 80193ac:	f1bb 0f0c 	cmp.w	fp, #12
 80193b0:	bf38      	it	cc
 80193b2:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 80193b6:	f10b 0720 	add.w	r7, fp, #32
 80193ba:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80193bc:	42a7      	cmp	r7, r4
 80193be:	f200 809f 	bhi.w	8019500 <mem_malloc+0x170>
 80193c2:	42b8      	cmp	r0, r7
 80193c4:	bf94      	ite	ls
 80193c6:	f04f 0a00 	movls.w	sl, #0
 80193ca:	f04f 0a01 	movhi.w	sl, #1
 80193ce:	f1ba 0f00 	cmp.w	sl, #0
 80193d2:	f040 8095 	bne.w	8019500 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80193d6:	4866      	ldr	r0, [pc, #408]	; (8019570 <mem_malloc+0x1e0>)
 80193d8:	f009 fabe 	bl	8022958 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 80193dc:	4b65      	ldr	r3, [pc, #404]	; (8019574 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80193de:	eba4 0c07 	sub.w	ip, r4, r7
 80193e2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801959c <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 80193e6:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80193e8:	f06f 0e07 	mvn.w	lr, #7
 80193ec:	4d62      	ldr	r5, [pc, #392]	; (8019578 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80193ee:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 80193f2:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80193f4:	b2b3      	uxth	r3, r6
 80193f6:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 80193f8:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80193fa:	d97a      	bls.n	80194f2 <mem_malloc+0x162>
      mem_free_count = 0;
 80193fc:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019400:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 8019404:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019406:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8019408:	2900      	cmp	r1, #0
 801940a:	d1f0      	bne.n	80193ee <mem_malloc+0x5e>
      if ((!mem->used) &&
 801940c:	7923      	ldrb	r3, [r4, #4]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d16b      	bne.n	80194ea <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019412:	8821      	ldrh	r1, [r4, #0]
 8019414:	440a      	add	r2, r1
 8019416:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8019418:	42ba      	cmp	r2, r7
 801941a:	d3ec      	bcc.n	80193f6 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801941c:	f107 0314 	add.w	r3, r7, #20
 8019420:	429a      	cmp	r2, r3
 8019422:	d371      	bcc.n	8019508 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019424:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019428:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801942c:	44b2      	add	sl, r6
 801942e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019432:	459a      	cmp	sl, r3
 8019434:	f000 808f 	beq.w	8019556 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 8019438:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801943c:	2200      	movs	r2, #0
 801943e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019440:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 8019444:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8019448:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801944a:	2301      	movs	r3, #1
          mem->next = ptr2;
 801944c:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8019450:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019452:	f830 300a 	ldrh.w	r3, [r0, sl]
 8019456:	4293      	cmp	r3, r2
 8019458:	d002      	beq.n	8019460 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801945a:	4418      	add	r0, r3
 801945c:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8019460:	f8d9 3000 	ldr.w	r3, [r9]
 8019464:	42a3      	cmp	r3, r4
 8019466:	f040 8081 	bne.w	801956c <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801946a:	4b42      	ldr	r3, [pc, #264]	; (8019574 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801946c:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801946e:	4e43      	ldr	r6, [pc, #268]	; (801957c <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 8019470:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 8019474:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 8019476:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801947a:	791a      	ldrb	r2, [r3, #4]
 801947c:	b942      	cbnz	r2, 8019490 <mem_malloc+0x100>
 801947e:	e009      	b.n	8019494 <mem_malloc+0x104>
            mem_free_count = 0;
 8019480:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 8019482:	782a      	ldrb	r2, [r5, #0]
 8019484:	2a00      	cmp	r2, #0
 8019486:	d142      	bne.n	801950e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 8019488:	881b      	ldrh	r3, [r3, #0]
 801948a:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801948c:	791a      	ldrb	r2, [r3, #4]
 801948e:	b10a      	cbz	r2, 8019494 <mem_malloc+0x104>
 8019490:	4299      	cmp	r1, r3
 8019492:	d1f5      	bne.n	8019480 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8019494:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019498:	f8d9 3000 	ldr.w	r3, [r9]
 801949c:	4299      	cmp	r1, r3
 801949e:	d004      	beq.n	80194aa <mem_malloc+0x11a>
 80194a0:	f8d9 3000 	ldr.w	r3, [r9]
 80194a4:	791b      	ldrb	r3, [r3, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d14d      	bne.n	8019546 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80194aa:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 80194ac:	4830      	ldr	r0, [pc, #192]	; (8019570 <mem_malloc+0x1e0>)
 80194ae:	f009 fa59 	bl	8022964 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80194b2:	6833      	ldr	r3, [r6, #0]
 80194b4:	4427      	add	r7, r4
 80194b6:	42bb      	cmp	r3, r7
 80194b8:	d33d      	bcc.n	8019536 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80194ba:	07a3      	lsls	r3, r4, #30
 80194bc:	d12c      	bne.n	8019518 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80194be:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80194c2:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 80194c6:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 80194ca:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80194ce:	60a3      	str	r3, [r4, #8]
 80194d0:	60e3      	str	r3, [r4, #12]
 80194d2:	6123      	str	r3, [r4, #16]
 80194d4:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80194d6:	f845 3008 	str.w	r3, [r5, r8]
 80194da:	6053      	str	r3, [r2, #4]
 80194dc:	6093      	str	r3, [r2, #8]
 80194de:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 80194e0:	f7ff fc28 	bl	8018d34 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 80194e4:	4628      	mov	r0, r5
 80194e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80194ea:	8826      	ldrh	r6, [r4, #0]
 80194ec:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80194ee:	459c      	cmp	ip, r3
 80194f0:	d884      	bhi.n	80193fc <mem_malloc+0x6c>
  return NULL;
 80194f2:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 80194f4:	481e      	ldr	r0, [pc, #120]	; (8019570 <mem_malloc+0x1e0>)
 80194f6:	f009 fa35 	bl	8022964 <sys_mutex_unlock>
}
 80194fa:	4628      	mov	r0, r5
 80194fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 8019500:	2500      	movs	r5, #0
}
 8019502:	4628      	mov	r0, r5
 8019504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 8019508:	2301      	movs	r3, #1
 801950a:	7123      	strb	r3, [r4, #4]
 801950c:	e7a8      	b.n	8019460 <mem_malloc+0xd0>
        if (mem == lfree) {
 801950e:	f8d9 3000 	ldr.w	r3, [r9]
 8019512:	42a3      	cmp	r3, r4
 8019514:	d0af      	beq.n	8019476 <mem_malloc+0xe6>
 8019516:	e7c8      	b.n	80194aa <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8019518:	4b19      	ldr	r3, [pc, #100]	; (8019580 <mem_malloc+0x1f0>)
 801951a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801951e:	4919      	ldr	r1, [pc, #100]	; (8019584 <mem_malloc+0x1f4>)
 8019520:	4819      	ldr	r0, [pc, #100]	; (8019588 <mem_malloc+0x1f8>)
 8019522:	f00a feef 	bl	8024304 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8019526:	4b16      	ldr	r3, [pc, #88]	; (8019580 <mem_malloc+0x1f0>)
 8019528:	f240 32bd 	movw	r2, #957	; 0x3bd
 801952c:	4917      	ldr	r1, [pc, #92]	; (801958c <mem_malloc+0x1fc>)
 801952e:	4816      	ldr	r0, [pc, #88]	; (8019588 <mem_malloc+0x1f8>)
 8019530:	f00a fee8 	bl	8024304 <iprintf>
 8019534:	e7c3      	b.n	80194be <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8019536:	4b12      	ldr	r3, [pc, #72]	; (8019580 <mem_malloc+0x1f0>)
 8019538:	f240 32b9 	movw	r2, #953	; 0x3b9
 801953c:	4914      	ldr	r1, [pc, #80]	; (8019590 <mem_malloc+0x200>)
 801953e:	4812      	ldr	r0, [pc, #72]	; (8019588 <mem_malloc+0x1f8>)
 8019540:	f00a fee0 	bl	8024304 <iprintf>
 8019544:	e7b9      	b.n	80194ba <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019546:	4b0e      	ldr	r3, [pc, #56]	; (8019580 <mem_malloc+0x1f0>)
 8019548:	f240 32b5 	movw	r2, #949	; 0x3b5
 801954c:	4911      	ldr	r1, [pc, #68]	; (8019594 <mem_malloc+0x204>)
 801954e:	480e      	ldr	r0, [pc, #56]	; (8019588 <mem_malloc+0x1f8>)
 8019550:	f00a fed8 	bl	8024304 <iprintf>
 8019554:	e7a9      	b.n	80194aa <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019556:	4b0a      	ldr	r3, [pc, #40]	; (8019580 <mem_malloc+0x1f0>)
 8019558:	f240 3287 	movw	r2, #903	; 0x387
 801955c:	490e      	ldr	r1, [pc, #56]	; (8019598 <mem_malloc+0x208>)
 801955e:	480a      	ldr	r0, [pc, #40]	; (8019588 <mem_malloc+0x1f8>)
 8019560:	f00a fed0 	bl	8024304 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019564:	4b03      	ldr	r3, [pc, #12]	; (8019574 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 8019566:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019568:	6818      	ldr	r0, [r3, #0]
 801956a:	e765      	b.n	8019438 <mem_malloc+0xa8>
 801956c:	4e03      	ldr	r6, [pc, #12]	; (801957c <mem_malloc+0x1ec>)
 801956e:	e79c      	b.n	80194aa <mem_malloc+0x11a>
 8019570:	2001eca8 	.word	0x2001eca8
 8019574:	2001ecac 	.word	0x2001ecac
 8019578:	2001eca4 	.word	0x2001eca4
 801957c:	2001ecb0 	.word	0x2001ecb0
 8019580:	08041c58 	.word	0x08041c58
 8019584:	08041f64 	.word	0x08041f64
 8019588:	08028ab4 	.word	0x08028ab4
 801958c:	08041f94 	.word	0x08041f94
 8019590:	08041f34 	.word	0x08041f34
 8019594:	08041f18 	.word	0x08041f18
 8019598:	08041f04 	.word	0x08041f04
 801959c:	2001eca0 	.word	0x2001eca0

080195a0 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 80195a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195a4:	4f12      	ldr	r7, [pc, #72]	; (80195f0 <memp_overflow_check_all+0x50>)
 80195a6:	2308      	movs	r3, #8
 80195a8:	4c12      	ldr	r4, [pc, #72]	; (80195f4 <memp_overflow_check_all+0x54>)
 80195aa:	4d13      	ldr	r5, [pc, #76]	; (80195f8 <memp_overflow_check_all+0x58>)
 80195ac:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 80195b0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80195fc <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 80195b4:	3403      	adds	r4, #3
 80195b6:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80195ba:	b183      	cbz	r3, 80195de <memp_overflow_check_all+0x3e>
 80195bc:	88a9      	ldrh	r1, [r5, #4]
 80195be:	2600      	movs	r6, #0
 80195c0:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 80195c2:	f104 001c 	add.w	r0, r4, #28
 80195c6:	682b      	ldr	r3, [r5, #0]
 80195c8:	464a      	mov	r2, r9
 80195ca:	f7ff fc8d 	bl	8018ee8 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80195ce:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80195d0:	88e8      	ldrh	r0, [r5, #6]
 80195d2:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80195d4:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80195d8:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 80195da:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80195dc:	d8f0      	bhi.n	80195c0 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 80195de:	45b8      	cmp	r8, r7
 80195e0:	d004      	beq.n	80195ec <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 80195e2:	f857 5b04 	ldr.w	r5, [r7], #4
 80195e6:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 80195e8:	88eb      	ldrh	r3, [r5, #6]
 80195ea:	e7e3      	b.n	80195b4 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 80195ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195f0:	08042248 	.word	0x08042248
 80195f4:	200291d8 	.word	0x200291d8
 80195f8:	080421b4 	.word	0x080421b4
 80195fc:	08041fb8 	.word	0x08041fb8

08019600 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8019600:	078b      	lsls	r3, r1, #30
{
 8019602:	b570      	push	{r4, r5, r6, lr}
 8019604:	460c      	mov	r4, r1
 8019606:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 8019608:	d11f      	bne.n	801964a <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801960a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801960c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 8019610:	6811      	ldr	r1, [r2, #0]
 8019612:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 8019616:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019618:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801961c:	b15a      	cbz	r2, 8019636 <do_memp_free_pool+0x36>
      if (t == h) {
 801961e:	429a      	cmp	r2, r3
 8019620:	d105      	bne.n	801962e <do_memp_free_pool+0x2e>
 8019622:	e009      	b.n	8019638 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019624:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019626:	b133      	cbz	r3, 8019636 <do_memp_free_pool+0x36>
 8019628:	b12a      	cbz	r2, 8019636 <do_memp_free_pool+0x36>
      if (t == h) {
 801962a:	4293      	cmp	r3, r2
 801962c:	d004      	beq.n	8019638 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801962e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8019630:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8019632:	2a00      	cmp	r2, #0
 8019634:	d1f6      	bne.n	8019624 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8019636:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8019638:	4b08      	ldr	r3, [pc, #32]	; (801965c <do_memp_free_pool+0x5c>)
 801963a:	f240 1285 	movw	r2, #389	; 0x185
 801963e:	4908      	ldr	r1, [pc, #32]	; (8019660 <do_memp_free_pool+0x60>)
 8019640:	4808      	ldr	r0, [pc, #32]	; (8019664 <do_memp_free_pool+0x64>)
}
 8019642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8019646:	f00a be5d 	b.w	8024304 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801964a:	4b04      	ldr	r3, [pc, #16]	; (801965c <do_memp_free_pool+0x5c>)
 801964c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8019650:	4905      	ldr	r1, [pc, #20]	; (8019668 <do_memp_free_pool+0x68>)
 8019652:	4804      	ldr	r0, [pc, #16]	; (8019664 <do_memp_free_pool+0x64>)
 8019654:	f00a fe56 	bl	8024304 <iprintf>
 8019658:	e7d7      	b.n	801960a <do_memp_free_pool+0xa>
 801965a:	bf00      	nop
 801965c:	08041fc0 	.word	0x08041fc0
 8019660:	08042010 	.word	0x08042010
 8019664:	08028ab4 	.word	0x08028ab4
 8019668:	08041ff0 	.word	0x08041ff0

0801966c <memp_init_pool>:
{
 801966c:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801966e:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 8019670:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 8019672:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 8019676:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8019678:	b1b1      	cbz	r1, 80196a8 <memp_init_pool+0x3c>
 801967a:	3403      	adds	r4, #3
 801967c:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801967e:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 8019680:	4616      	mov	r6, r2
 8019682:	f024 0403 	bic.w	r4, r4, #3
 8019686:	e001      	b.n	801968c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8019688:	68eb      	ldr	r3, [r5, #12]
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801968e:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 8019692:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8019694:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8019696:	f7ff fc73 	bl	8018f80 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801969a:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801969c:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801969e:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 80196a2:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80196a4:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 80196a6:	dcef      	bgt.n	8019688 <memp_init_pool+0x1c>
}
 80196a8:	bd70      	pop	{r4, r5, r6, pc}
 80196aa:	bf00      	nop

080196ac <memp_init>:
{
 80196ac:	b538      	push	{r3, r4, r5, lr}
 80196ae:	4c07      	ldr	r4, [pc, #28]	; (80196cc <memp_init+0x20>)
 80196b0:	4807      	ldr	r0, [pc, #28]	; (80196d0 <memp_init+0x24>)
 80196b2:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 80196b6:	e001      	b.n	80196bc <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 80196b8:	f854 0b04 	ldr.w	r0, [r4], #4
 80196bc:	f7ff ffd6 	bl	801966c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80196c0:	42ac      	cmp	r4, r5
 80196c2:	d1f9      	bne.n	80196b8 <memp_init+0xc>
}
 80196c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 80196c8:	f7ff bf6a 	b.w	80195a0 <memp_overflow_check_all>
 80196cc:	08042248 	.word	0x08042248
 80196d0:	080421b4 	.word	0x080421b4

080196d4 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80196d4:	280f      	cmp	r0, #15
{
 80196d6:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80196d8:	d81d      	bhi.n	8019716 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 80196da:	4604      	mov	r4, r0
 80196dc:	460e      	mov	r6, r1
 80196de:	4615      	mov	r5, r2
 80196e0:	f7ff ff5e 	bl	80195a0 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 80196e4:	4b11      	ldr	r3, [pc, #68]	; (801972c <memp_malloc_fn+0x58>)
 80196e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80196ea:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 80196ec:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 80196ee:	b144      	cbz	r4, 8019702 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 80196f0:	6822      	ldr	r2, [r4, #0]
 80196f2:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 80196f4:	2300      	movs	r3, #0
 80196f6:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80196f8:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 80196fa:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80196fe:	d102      	bne.n	8019706 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 8019700:	341c      	adds	r4, #28
}
 8019702:	4620      	mov	r0, r4
 8019704:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8019706:	4b0a      	ldr	r3, [pc, #40]	; (8019730 <memp_malloc_fn+0x5c>)
 8019708:	f44f 728c 	mov.w	r2, #280	; 0x118
 801970c:	4909      	ldr	r1, [pc, #36]	; (8019734 <memp_malloc_fn+0x60>)
 801970e:	480a      	ldr	r0, [pc, #40]	; (8019738 <memp_malloc_fn+0x64>)
 8019710:	f00a fdf8 	bl	8024304 <iprintf>
 8019714:	e7f4      	b.n	8019700 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8019716:	2400      	movs	r4, #0
 8019718:	4b05      	ldr	r3, [pc, #20]	; (8019730 <memp_malloc_fn+0x5c>)
 801971a:	f240 1257 	movw	r2, #343	; 0x157
 801971e:	4907      	ldr	r1, [pc, #28]	; (801973c <memp_malloc_fn+0x68>)
 8019720:	4805      	ldr	r0, [pc, #20]	; (8019738 <memp_malloc_fn+0x64>)
 8019722:	f00a fdef 	bl	8024304 <iprintf>
}
 8019726:	4620      	mov	r0, r4
 8019728:	bd70      	pop	{r4, r5, r6, pc}
 801972a:	bf00      	nop
 801972c:	08042244 	.word	0x08042244
 8019730:	08041fc0 	.word	0x08041fc0
 8019734:	08042030 	.word	0x08042030
 8019738:	08028ab4 	.word	0x08028ab4
 801973c:	08042054 	.word	0x08042054

08019740 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019740:	280f      	cmp	r0, #15
 8019742:	d80e      	bhi.n	8019762 <memp_free+0x22>
{
 8019744:	b570      	push	{r4, r5, r6, lr}
 8019746:	460d      	mov	r5, r1

  if (mem == NULL) {
 8019748:	b151      	cbz	r1, 8019760 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801974a:	4604      	mov	r4, r0
 801974c:	f7ff ff28 	bl	80195a0 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8019750:	4b07      	ldr	r3, [pc, #28]	; (8019770 <memp_free+0x30>)
 8019752:	4629      	mov	r1, r5
 8019754:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8019758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801975c:	f7ff bf50 	b.w	8019600 <do_memp_free_pool>
}
 8019760:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8019762:	4b04      	ldr	r3, [pc, #16]	; (8019774 <memp_free+0x34>)
 8019764:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8019768:	4903      	ldr	r1, [pc, #12]	; (8019778 <memp_free+0x38>)
 801976a:	4804      	ldr	r0, [pc, #16]	; (801977c <memp_free+0x3c>)
 801976c:	f00a bdca 	b.w	8024304 <iprintf>
 8019770:	08042244 	.word	0x08042244
 8019774:	08041fc0 	.word	0x08041fc0
 8019778:	08042074 	.word	0x08042074
 801977c:	08028ab4 	.word	0x08028ab4

08019780 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8019780:	f06f 000b 	mvn.w	r0, #11
 8019784:	4770      	bx	lr
 8019786:	bf00      	nop

08019788 <netif_issue_reports>:
{
 8019788:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801978a:	4604      	mov	r4, r0
 801978c:	b150      	cbz	r0, 80197a4 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801978e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8019792:	f003 0205 	and.w	r2, r3, #5
 8019796:	2a05      	cmp	r2, #5
 8019798:	d103      	bne.n	80197a2 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801979a:	6862      	ldr	r2, [r4, #4]
 801979c:	b10a      	cbz	r2, 80197a2 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801979e:	071b      	lsls	r3, r3, #28
 80197a0:	d408      	bmi.n	80197b4 <netif_issue_reports+0x2c>
}
 80197a2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80197a4:	4b06      	ldr	r3, [pc, #24]	; (80197c0 <netif_issue_reports+0x38>)
 80197a6:	f240 326d 	movw	r2, #877	; 0x36d
 80197aa:	4906      	ldr	r1, [pc, #24]	; (80197c4 <netif_issue_reports+0x3c>)
 80197ac:	4806      	ldr	r0, [pc, #24]	; (80197c8 <netif_issue_reports+0x40>)
 80197ae:	f00a fda9 	bl	8024304 <iprintf>
 80197b2:	e7ec      	b.n	801978e <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 80197b4:	1d21      	adds	r1, r4, #4
 80197b6:	4620      	mov	r0, r4
}
 80197b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 80197bc:	f007 bfac 	b.w	8021718 <etharp_request>
 80197c0:	08042284 	.word	0x08042284
 80197c4:	080422b8 	.word	0x080422b8
 80197c8:	08028ab4 	.word	0x08028ab4

080197cc <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80197cc:	b570      	push	{r4, r5, r6, lr}
 80197ce:	4605      	mov	r5, r0
 80197d0:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80197d2:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80197d4:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80197d6:	b301      	cbz	r1, 801981a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80197d8:	686b      	ldr	r3, [r5, #4]
 80197da:	6822      	ldr	r2, [r4, #0]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d101      	bne.n	80197e4 <netif_do_set_ipaddr.isra.0+0x18>
}
 80197e0:	b002      	add	sp, #8
 80197e2:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80197e4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80197e6:	4630      	mov	r0, r6
 80197e8:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80197ea:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80197ec:	f002 fa5a 	bl	801bca4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80197f0:	a901      	add	r1, sp, #4
 80197f2:	4630      	mov	r0, r6
 80197f4:	f005 fde4 	bl	801f3c0 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80197f8:	a901      	add	r1, sp, #4
 80197fa:	4630      	mov	r0, r6
 80197fc:	f000 ff6c 	bl	801a6d8 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019800:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019802:	2101      	movs	r1, #1
 8019804:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8019806:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019808:	f7ff ffbe 	bl	8019788 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801980c:	69eb      	ldr	r3, [r5, #28]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d0e6      	beq.n	80197e0 <netif_do_set_ipaddr.isra.0+0x14>
 8019812:	4628      	mov	r0, r5
 8019814:	4798      	blx	r3
}
 8019816:	b002      	add	sp, #8
 8019818:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801981a:	4b04      	ldr	r3, [pc, #16]	; (801982c <netif_do_set_ipaddr.isra.0+0x60>)
 801981c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8019820:	4903      	ldr	r1, [pc, #12]	; (8019830 <netif_do_set_ipaddr.isra.0+0x64>)
 8019822:	4804      	ldr	r0, [pc, #16]	; (8019834 <netif_do_set_ipaddr.isra.0+0x68>)
 8019824:	f00a fd6e 	bl	8024304 <iprintf>
 8019828:	e7d6      	b.n	80197d8 <netif_do_set_ipaddr.isra.0+0xc>
 801982a:	bf00      	nop
 801982c:	08042284 	.word	0x08042284
 8019830:	080422dc 	.word	0x080422dc
 8019834:	08028ab4 	.word	0x08028ab4

08019838 <netif_init>:
}
 8019838:	4770      	bx	lr
 801983a:	bf00      	nop

0801983c <netif_set_addr>:
{
 801983c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801983e:	2900      	cmp	r1, #0
{
 8019840:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 8019842:	4b16      	ldr	r3, [pc, #88]	; (801989c <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 8019844:	460c      	mov	r4, r1
{
 8019846:	b083      	sub	sp, #12
 8019848:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801984a:	bf14      	ite	ne
 801984c:	460c      	movne	r4, r1
 801984e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 8019850:	b30a      	cbz	r2, 8019896 <netif_set_addr+0x5a>
 8019852:	4616      	mov	r6, r2
  if (gw == NULL) {
 8019854:	b1ef      	cbz	r7, 8019892 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 8019856:	6823      	ldr	r3, [r4, #0]
 8019858:	b993      	cbnz	r3, 8019880 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801985a:	4621      	mov	r1, r4
 801985c:	aa01      	add	r2, sp, #4
 801985e:	4628      	mov	r0, r5
 8019860:	f7ff ffb4 	bl	80197cc <netif_do_set_ipaddr.isra.0>
 8019864:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8019866:	6833      	ldr	r3, [r6, #0]
 8019868:	68aa      	ldr	r2, [r5, #8]
 801986a:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801986c:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801986e:	bf18      	it	ne
 8019870:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019876:	bf18      	it	ne
 8019878:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801987a:	b119      	cbz	r1, 8019884 <netif_set_addr+0x48>
}
 801987c:	b003      	add	sp, #12
 801987e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8019880:	2100      	movs	r1, #0
 8019882:	e7f0      	b.n	8019866 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019884:	aa01      	add	r2, sp, #4
 8019886:	4621      	mov	r1, r4
 8019888:	4628      	mov	r0, r5
 801988a:	f7ff ff9f 	bl	80197cc <netif_do_set_ipaddr.isra.0>
}
 801988e:	b003      	add	sp, #12
 8019890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 8019892:	4f02      	ldr	r7, [pc, #8]	; (801989c <netif_set_addr+0x60>)
 8019894:	e7df      	b.n	8019856 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 8019896:	461e      	mov	r6, r3
 8019898:	e7dc      	b.n	8019854 <netif_set_addr+0x18>
 801989a:	bf00      	nop
 801989c:	080443ac 	.word	0x080443ac

080198a0 <netif_add>:
{
 80198a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80198a6:	4606      	mov	r6, r0
 80198a8:	2800      	cmp	r0, #0
 80198aa:	f000 8081 	beq.w	80199b0 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80198ae:	2d00      	cmp	r5, #0
 80198b0:	f000 8087 	beq.w	80199c2 <netif_add+0x122>
  if (ipaddr == NULL) {
 80198b4:	2900      	cmp	r1, #0
 80198b6:	d06f      	beq.n	8019998 <netif_add+0xf8>
  if (netmask == NULL) {
 80198b8:	2a00      	cmp	r2, #0
 80198ba:	d068      	beq.n	801998e <netif_add+0xee>
  if (gw == NULL) {
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d069      	beq.n	8019994 <netif_add+0xf4>
  netif->state = state;
 80198c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80198c2:	2400      	movs	r4, #0
  netif->num = netif_num;
 80198c4:	f8df a128 	ldr.w	sl, [pc, #296]	; 80199f0 <netif_add+0x150>
  netif->state = state;
 80198c8:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 80198ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 80198cc:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 80198ce:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 80198d0:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 80198d4:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 80198d6:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 80198da:	483e      	ldr	r0, [pc, #248]	; (80199d4 <netif_add+0x134>)
  netif->flags = 0;
 80198dc:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 80198e0:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80198e2:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80198e4:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 80198e6:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 80198ea:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80198ee:	f7ff ffa5 	bl	801983c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80198f2:	4630      	mov	r0, r6
 80198f4:	47a8      	blx	r5
 80198f6:	2800      	cmp	r0, #0
 80198f8:	d157      	bne.n	80199aa <netif_add+0x10a>
      if (netif->num == 255) {
 80198fa:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 80198fe:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80199f4 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019902:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80199e4 <netif_add+0x144>
 8019906:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80199f8 <netif_add+0x158>
 801990a:	4f33      	ldr	r7, [pc, #204]	; (80199d8 <netif_add+0x138>)
      if (netif->num == 255) {
 801990c:	2aff      	cmp	r2, #255	; 0xff
 801990e:	d102      	bne.n	8019916 <netif_add+0x76>
        netif->num = 0;
 8019910:	2300      	movs	r3, #0
 8019912:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019916:	f8d8 4000 	ldr.w	r4, [r8]
 801991a:	2c00      	cmp	r4, #0
 801991c:	d042      	beq.n	80199a4 <netif_add+0x104>
      num_netifs = 0;
 801991e:	2500      	movs	r5, #0
 8019920:	e007      	b.n	8019932 <netif_add+0x92>
        if (netif2->num == netif->num) {
 8019922:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8019926:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801992a:	429a      	cmp	r2, r3
 801992c:	d014      	beq.n	8019958 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801992e:	6824      	ldr	r4, [r4, #0]
 8019930:	b1fc      	cbz	r4, 8019972 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019932:	42a6      	cmp	r6, r4
        num_netifs++;
 8019934:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019938:	d013      	beq.n	8019962 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801993a:	2dff      	cmp	r5, #255	; 0xff
 801993c:	ddf1      	ble.n	8019922 <netif_add+0x82>
 801993e:	465b      	mov	r3, fp
 8019940:	f240 128d 	movw	r2, #397	; 0x18d
 8019944:	4925      	ldr	r1, [pc, #148]	; (80199dc <netif_add+0x13c>)
 8019946:	4638      	mov	r0, r7
 8019948:	f00a fcdc 	bl	8024304 <iprintf>
        if (netif2->num == netif->num) {
 801994c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8019950:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8019954:	429a      	cmp	r2, r3
 8019956:	d1ea      	bne.n	801992e <netif_add+0x8e>
          netif->num++;
 8019958:	3201      	adds	r2, #1
 801995a:	b2d2      	uxtb	r2, r2
 801995c:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 8019960:	e7d4      	b.n	801990c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8019962:	465b      	mov	r3, fp
 8019964:	f240 128b 	movw	r2, #395	; 0x18b
 8019968:	4649      	mov	r1, r9
 801996a:	4638      	mov	r0, r7
 801996c:	f00a fcca 	bl	8024304 <iprintf>
 8019970:	e7e3      	b.n	801993a <netif_add+0x9a>
  netif->next = netif_list;
 8019972:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 8019976:	2bfe      	cmp	r3, #254	; 0xfe
 8019978:	d012      	beq.n	80199a0 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801997a:	3301      	adds	r3, #1
 801997c:	b2db      	uxtb	r3, r3
  return netif;
 801997e:	4630      	mov	r0, r6
  netif->next = netif_list;
 8019980:	6034      	str	r4, [r6, #0]
 8019982:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 8019986:	f8c8 6000 	str.w	r6, [r8]
}
 801998a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801998e:	4a14      	ldr	r2, [pc, #80]	; (80199e0 <netif_add+0x140>)
  if (gw == NULL) {
 8019990:	2b00      	cmp	r3, #0
 8019992:	d195      	bne.n	80198c0 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019994:	4b12      	ldr	r3, [pc, #72]	; (80199e0 <netif_add+0x140>)
 8019996:	e793      	b.n	80198c0 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019998:	4911      	ldr	r1, [pc, #68]	; (80199e0 <netif_add+0x140>)
  if (netmask == NULL) {
 801999a:	2a00      	cmp	r2, #0
 801999c:	d18e      	bne.n	80198bc <netif_add+0x1c>
 801999e:	e7f6      	b.n	801998e <netif_add+0xee>
    netif_num = 0;
 80199a0:	2300      	movs	r3, #0
 80199a2:	e7ec      	b.n	801997e <netif_add+0xde>
  if (netif->num == 254) {
 80199a4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 80199a8:	e7e5      	b.n	8019976 <netif_add+0xd6>
    return NULL;
 80199aa:	4620      	mov	r0, r4
}
 80199ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80199b0:	4b0c      	ldr	r3, [pc, #48]	; (80199e4 <netif_add+0x144>)
 80199b2:	f240 1227 	movw	r2, #295	; 0x127
 80199b6:	490c      	ldr	r1, [pc, #48]	; (80199e8 <netif_add+0x148>)
 80199b8:	4807      	ldr	r0, [pc, #28]	; (80199d8 <netif_add+0x138>)
 80199ba:	f00a fca3 	bl	8024304 <iprintf>
 80199be:	4630      	mov	r0, r6
 80199c0:	e7e3      	b.n	801998a <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80199c2:	4b08      	ldr	r3, [pc, #32]	; (80199e4 <netif_add+0x144>)
 80199c4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80199c8:	4908      	ldr	r1, [pc, #32]	; (80199ec <netif_add+0x14c>)
 80199ca:	4803      	ldr	r0, [pc, #12]	; (80199d8 <netif_add+0x138>)
 80199cc:	f00a fc9a 	bl	8024304 <iprintf>
 80199d0:	4628      	mov	r0, r5
 80199d2:	e7da      	b.n	801998a <netif_add+0xea>
 80199d4:	08019781 	.word	0x08019781
 80199d8:	08028ab4 	.word	0x08028ab4
 80199dc:	08042340 	.word	0x08042340
 80199e0:	080443ac 	.word	0x080443ac
 80199e4:	08042284 	.word	0x08042284
 80199e8:	080422ec 	.word	0x080422ec
 80199ec:	08042308 	.word	0x08042308
 80199f0:	2002dbc4 	.word	0x2002dbc4
 80199f4:	2002dbc0 	.word	0x2002dbc0
 80199f8:	0804232c 	.word	0x0804232c

080199fc <netif_set_default>:
  netif_default = netif;
 80199fc:	4b01      	ldr	r3, [pc, #4]	; (8019a04 <netif_set_default+0x8>)
 80199fe:	6018      	str	r0, [r3, #0]
}
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop
 8019a04:	2002dbbc 	.word	0x2002dbbc

08019a08 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019a08:	b198      	cbz	r0, 8019a32 <netif_set_up+0x2a>
{
 8019a0a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8019a0c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8019a10:	4604      	mov	r4, r0
 8019a12:	07da      	lsls	r2, r3, #31
 8019a14:	d40c      	bmi.n	8019a30 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019a16:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 8019a1a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019a1c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8019a20:	b102      	cbz	r2, 8019a24 <netif_set_up+0x1c>
 8019a22:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019a24:	4620      	mov	r0, r4
 8019a26:	2103      	movs	r1, #3
}
 8019a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019a2c:	f7ff beac 	b.w	8019788 <netif_issue_reports>
}
 8019a30:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019a32:	4b03      	ldr	r3, [pc, #12]	; (8019a40 <netif_set_up+0x38>)
 8019a34:	f44f 7254 	mov.w	r2, #848	; 0x350
 8019a38:	4902      	ldr	r1, [pc, #8]	; (8019a44 <netif_set_up+0x3c>)
 8019a3a:	4803      	ldr	r0, [pc, #12]	; (8019a48 <netif_set_up+0x40>)
 8019a3c:	f00a bc62 	b.w	8024304 <iprintf>
 8019a40:	08042284 	.word	0x08042284
 8019a44:	08042370 	.word	0x08042370
 8019a48:	08028ab4 	.word	0x08028ab4

08019a4c <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019a4c:	b1a8      	cbz	r0, 8019a7a <netif_set_down+0x2e>
{
 8019a4e:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8019a50:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8019a54:	4604      	mov	r4, r0
 8019a56:	07da      	lsls	r2, r3, #31
 8019a58:	d50b      	bpl.n	8019a72 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019a5a:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019a5e:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019a60:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019a64:	d406      	bmi.n	8019a74 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 8019a66:	69e3      	ldr	r3, [r4, #28]
 8019a68:	b11b      	cbz	r3, 8019a72 <netif_set_down+0x26>
 8019a6a:	4620      	mov	r0, r4
}
 8019a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8019a70:	4718      	bx	r3
}
 8019a72:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8019a74:	f007 fbc8 	bl	8021208 <etharp_cleanup_netif>
 8019a78:	e7f5      	b.n	8019a66 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8019a7a:	4b03      	ldr	r3, [pc, #12]	; (8019a88 <netif_set_down+0x3c>)
 8019a7c:	f240 329b 	movw	r2, #923	; 0x39b
 8019a80:	4902      	ldr	r1, [pc, #8]	; (8019a8c <netif_set_down+0x40>)
 8019a82:	4803      	ldr	r0, [pc, #12]	; (8019a90 <netif_set_down+0x44>)
 8019a84:	f00a bc3e 	b.w	8024304 <iprintf>
 8019a88:	08042284 	.word	0x08042284
 8019a8c:	0804238c 	.word	0x0804238c
 8019a90:	08028ab4 	.word	0x08028ab4

08019a94 <netif_set_status_callback>:
  if (netif) {
 8019a94:	b100      	cbz	r0, 8019a98 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 8019a96:	61c1      	str	r1, [r0, #28]
}
 8019a98:	4770      	bx	lr
 8019a9a:	bf00      	nop

08019a9c <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019a9c:	b1b8      	cbz	r0, 8019ace <netif_set_link_up+0x32>
{
 8019a9e:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8019aa0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	075a      	lsls	r2, r3, #29
 8019aa8:	d500      	bpl.n	8019aac <netif_set_link_up+0x10>
}
 8019aaa:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8019aac:	f043 0304 	orr.w	r3, r3, #4
 8019ab0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 8019ab4:	f006 fd96 	bl	80205e4 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8019ab8:	2103      	movs	r1, #3
 8019aba:	4620      	mov	r0, r4
 8019abc:	f7ff fe64 	bl	8019788 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8019ac0:	6a23      	ldr	r3, [r4, #32]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d0f1      	beq.n	8019aaa <netif_set_link_up+0xe>
 8019ac6:	4620      	mov	r0, r4
}
 8019ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8019acc:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8019ace:	4b03      	ldr	r3, [pc, #12]	; (8019adc <netif_set_link_up+0x40>)
 8019ad0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8019ad4:	4902      	ldr	r1, [pc, #8]	; (8019ae0 <netif_set_link_up+0x44>)
 8019ad6:	4803      	ldr	r0, [pc, #12]	; (8019ae4 <netif_set_link_up+0x48>)
 8019ad8:	f00a bc14 	b.w	8024304 <iprintf>
 8019adc:	08042284 	.word	0x08042284
 8019ae0:	080423ac 	.word	0x080423ac
 8019ae4:	08028ab4 	.word	0x08028ab4

08019ae8 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019ae8:	b158      	cbz	r0, 8019b02 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8019aea:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8019aee:	0751      	lsls	r1, r2, #29
 8019af0:	d506      	bpl.n	8019b00 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019af2:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 8019af6:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8019af8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8019afc:	b101      	cbz	r1, 8019b00 <netif_set_link_down+0x18>
 8019afe:	4708      	bx	r1
}
 8019b00:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8019b02:	4b03      	ldr	r3, [pc, #12]	; (8019b10 <netif_set_link_down+0x28>)
 8019b04:	f240 4206 	movw	r2, #1030	; 0x406
 8019b08:	4902      	ldr	r1, [pc, #8]	; (8019b14 <netif_set_link_down+0x2c>)
 8019b0a:	4803      	ldr	r0, [pc, #12]	; (8019b18 <netif_set_link_down+0x30>)
 8019b0c:	f00a bbfa 	b.w	8024304 <iprintf>
 8019b10:	08042284 	.word	0x08042284
 8019b14:	080423d0 	.word	0x080423d0
 8019b18:	08028ab4 	.word	0x08028ab4

08019b1c <netif_set_link_callback>:
  if (netif) {
 8019b1c:	b100      	cbz	r0, 8019b20 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8019b1e:	6201      	str	r1, [r0, #32]
}
 8019b20:	4770      	bx	lr
 8019b22:	bf00      	nop

08019b24 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8019b24:	4602      	mov	r2, r0
 8019b26:	b158      	cbz	r0, 8019b40 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8019b28:	4b06      	ldr	r3, [pc, #24]	; (8019b44 <netif_get_by_index+0x20>)
 8019b2a:	6818      	ldr	r0, [r3, #0]
 8019b2c:	b910      	cbnz	r0, 8019b34 <netif_get_by_index+0x10>
 8019b2e:	e007      	b.n	8019b40 <netif_get_by_index+0x1c>
 8019b30:	6800      	ldr	r0, [r0, #0]
 8019b32:	b130      	cbz	r0, 8019b42 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 8019b34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8019b38:	3301      	adds	r3, #1
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	4293      	cmp	r3, r2
 8019b3e:	d1f7      	bne.n	8019b30 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 8019b40:	4770      	bx	lr
 8019b42:	4770      	bx	lr
 8019b44:	2002dbc0 	.word	0x2002dbc0

08019b48 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019b48:	4907      	ldr	r1, [pc, #28]	; (8019b68 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	4b07      	ldr	r3, [pc, #28]	; (8019b6c <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019b4e:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019b50:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019b52:	b910      	cbnz	r0, 8019b5a <pbuf_free_ooseq_callback+0x12>
 8019b54:	e006      	b.n	8019b64 <pbuf_free_ooseq_callback+0x1c>
 8019b56:	68c0      	ldr	r0, [r0, #12]
 8019b58:	b120      	cbz	r0, 8019b64 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 8019b5a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d0fa      	beq.n	8019b56 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019b60:	f002 b8ca 	b.w	801bcf8 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8019b64:	4770      	bx	lr
 8019b66:	bf00      	nop
 8019b68:	2002dbcc 	.word	0x2002dbcc
 8019b6c:	2002dbc5 	.word	0x2002dbc5

08019b70 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 8019b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8019b74:	4604      	mov	r4, r0
 8019b76:	2800      	cmp	r0, #0
 8019b78:	d052      	beq.n	8019c20 <pbuf_free.part.0+0xb0>
  count = 0;
 8019b7a:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019b7c:	4f29      	ldr	r7, [pc, #164]	; (8019c24 <pbuf_free.part.0+0xb4>)
 8019b7e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8019c34 <pbuf_free.part.0+0xc4>
 8019b82:	4e29      	ldr	r6, [pc, #164]	; (8019c28 <pbuf_free.part.0+0xb8>)
 8019b84:	e00a      	b.n	8019b9c <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019b86:	6923      	ldr	r3, [r4, #16]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d03b      	beq.n	8019c04 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8019b90:	3501      	adds	r5, #1
 8019b92:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8019b94:	f1b9 0f00 	cmp.w	r9, #0
 8019b98:	d01b      	beq.n	8019bd2 <pbuf_free.part.0+0x62>
 8019b9a:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019b9c:	7ba3      	ldrb	r3, [r4, #14]
 8019b9e:	b1db      	cbz	r3, 8019bd8 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8019ba6:	b9a3      	cbnz	r3, 8019bd2 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019ba8:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8019baa:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019bae:	079b      	lsls	r3, r3, #30
 8019bb0:	d4e9      	bmi.n	8019b86 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 8019bb2:	7b23      	ldrb	r3, [r4, #12]
 8019bb4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d01e      	beq.n	8019bfa <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019bbc:	2b01      	cmp	r3, #1
 8019bbe:	d02a      	beq.n	8019c16 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019bc0:	b99b      	cbnz	r3, 8019bea <pbuf_free.part.0+0x7a>
      count++;
 8019bc2:	3501      	adds	r5, #1
          mem_free(p);
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f7ff fa27 	bl	8019018 <mem_free>
      count++;
 8019bca:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8019bcc:	f1b9 0f00 	cmp.w	r9, #0
 8019bd0:	d1e3      	bne.n	8019b9a <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019bd8:	463b      	mov	r3, r7
 8019bda:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019bde:	4641      	mov	r1, r8
 8019be0:	4630      	mov	r0, r6
 8019be2:	f00a fb8f 	bl	8024304 <iprintf>
    ref = --(p->ref);
 8019be6:	7ba3      	ldrb	r3, [r4, #14]
 8019be8:	e7da      	b.n	8019ba0 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 8019bea:	463b      	mov	r3, r7
 8019bec:	f240 320f 	movw	r2, #783	; 0x30f
 8019bf0:	490e      	ldr	r1, [pc, #56]	; (8019c2c <pbuf_free.part.0+0xbc>)
 8019bf2:	4630      	mov	r0, r6
 8019bf4:	f00a fb86 	bl	8024304 <iprintf>
 8019bf8:	e7ca      	b.n	8019b90 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 8019bfa:	4621      	mov	r1, r4
 8019bfc:	200f      	movs	r0, #15
 8019bfe:	f7ff fd9f 	bl	8019740 <memp_free>
 8019c02:	e7c5      	b.n	8019b90 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019c04:	463b      	mov	r3, r7
 8019c06:	f240 22ff 	movw	r2, #767	; 0x2ff
 8019c0a:	4909      	ldr	r1, [pc, #36]	; (8019c30 <pbuf_free.part.0+0xc0>)
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	f00a fb79 	bl	8024304 <iprintf>
        pc->custom_free_function(p);
 8019c12:	6923      	ldr	r3, [r4, #16]
 8019c14:	e7ba      	b.n	8019b8c <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 8019c16:	4621      	mov	r1, r4
 8019c18:	200e      	movs	r0, #14
 8019c1a:	f7ff fd91 	bl	8019740 <memp_free>
 8019c1e:	e7b7      	b.n	8019b90 <pbuf_free.part.0+0x20>
  count = 0;
 8019c20:	4605      	mov	r5, r0
 8019c22:	e7d6      	b.n	8019bd2 <pbuf_free.part.0+0x62>
 8019c24:	080423f4 	.word	0x080423f4
 8019c28:	08028ab4 	.word	0x08028ab4
 8019c2c:	08042460 	.word	0x08042460
 8019c30:	0804243c 	.word	0x0804243c
 8019c34:	08042424 	.word	0x08042424

08019c38 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8019c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8019c3c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019c3e:	f8df a124 	ldr.w	sl, [pc, #292]	; 8019d64 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8019c42:	4605      	mov	r5, r0
 8019c44:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 8019c46:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019c48:	8944      	ldrh	r4, [r0, #10]
 8019c4a:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019c4c:	f8df b128 	ldr.w	fp, [pc, #296]	; 8019d78 <pbuf_copy.part.0+0x140>
 8019c50:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8019d6c <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019c54:	1be4      	subs	r4, r4, r7
 8019c56:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019c58:	6868      	ldr	r0, [r5, #4]
 8019c5a:	4294      	cmp	r4, r2
 8019c5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019c60:	4438      	add	r0, r7
 8019c62:	bf28      	it	cs
 8019c64:	4614      	movcs	r4, r2
 8019c66:	4431      	add	r1, r6
 8019c68:	4622      	mov	r2, r4
    offset_to += len;
 8019c6a:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8019c6c:	f009 fb84 	bl	8023378 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019c70:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8019c72:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019c74:	429f      	cmp	r7, r3
 8019c76:	d837      	bhi.n	8019ce8 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019c78:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019c7c:	4296      	cmp	r6, r2
 8019c7e:	d829      	bhi.n	8019cd4 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 8019c80:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8019c82:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 8019c84:	d317      	bcc.n	8019cb6 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 8019c86:	429f      	cmp	r7, r3
      p_from = p_from->next;
 8019c88:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8019c8c:	d04b      	beq.n	8019d26 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019c8e:	f1b8 0f00 	cmp.w	r8, #0
 8019c92:	d144      	bne.n	8019d1e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019c94:	892a      	ldrh	r2, [r5, #8]
 8019c96:	896b      	ldrh	r3, [r5, #10]
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	d14c      	bne.n	8019d36 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019c9c:	6828      	ldr	r0, [r5, #0]
 8019c9e:	b140      	cbz	r0, 8019cb2 <pbuf_copy.part.0+0x7a>
 8019ca0:	4b30      	ldr	r3, [pc, #192]	; (8019d64 <pbuf_copy.part.0+0x12c>)
 8019ca2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8019ca6:	4930      	ldr	r1, [pc, #192]	; (8019d68 <pbuf_copy.part.0+0x130>)
 8019ca8:	4830      	ldr	r0, [pc, #192]	; (8019d6c <pbuf_copy.part.0+0x134>)
 8019caa:	f00a fb2b 	bl	8024304 <iprintf>
 8019cae:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8019cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8019cb6:	429f      	cmp	r7, r3
 8019cb8:	d040      	beq.n	8019d3c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019cba:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d01a      	beq.n	8019cf8 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019cc2:	896c      	ldrh	r4, [r5, #10]
 8019cc4:	2d00      	cmp	r5, #0
 8019cc6:	d0c5      	beq.n	8019c54 <pbuf_copy.part.0+0x1c>
 8019cc8:	892b      	ldrh	r3, [r5, #8]
 8019cca:	42a3      	cmp	r3, r4
 8019ccc:	d045      	beq.n	8019d5a <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8019cce:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019cd2:	e7bf      	b.n	8019c54 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019cd4:	f240 32da 	movw	r2, #986	; 0x3da
 8019cd8:	4653      	mov	r3, sl
 8019cda:	4925      	ldr	r1, [pc, #148]	; (8019d70 <pbuf_copy.part.0+0x138>)
 8019cdc:	4648      	mov	r0, r9
 8019cde:	f00a fb11 	bl	8024304 <iprintf>
    if (offset_from >= p_from->len) {
 8019ce2:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019ce6:	e7cb      	b.n	8019c80 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019ce8:	4653      	mov	r3, sl
 8019cea:	f240 32d9 	movw	r2, #985	; 0x3d9
 8019cee:	4659      	mov	r1, fp
 8019cf0:	4648      	mov	r0, r9
 8019cf2:	f00a fb07 	bl	8024304 <iprintf>
 8019cf6:	e7bf      	b.n	8019c78 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d0e0      	beq.n	8019cc2 <pbuf_copy.part.0+0x8a>
 8019d00:	4b18      	ldr	r3, [pc, #96]	; (8019d64 <pbuf_copy.part.0+0x12c>)
 8019d02:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8019d06:	4918      	ldr	r1, [pc, #96]	; (8019d68 <pbuf_copy.part.0+0x130>)
 8019d08:	4818      	ldr	r0, [pc, #96]	; (8019d6c <pbuf_copy.part.0+0x134>)
 8019d0a:	f00a fafb 	bl	8024304 <iprintf>
 8019d0e:	f06f 0005 	mvn.w	r0, #5
}
 8019d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019d16:	f1b8 0f00 	cmp.w	r8, #0
 8019d1a:	d00a      	beq.n	8019d32 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 8019d1c:	2700      	movs	r7, #0
 8019d1e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019d20:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8019d24:	e7c9      	b.n	8019cba <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 8019d26:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019d28:	2d00      	cmp	r5, #0
 8019d2a:	d1f4      	bne.n	8019d16 <pbuf_copy.part.0+0xde>
 8019d2c:	f1b8 0f00 	cmp.w	r8, #0
 8019d30:	d108      	bne.n	8019d44 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019d32:	2d00      	cmp	r5, #0
 8019d34:	d1ae      	bne.n	8019c94 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 8019d36:	2000      	movs	r0, #0
}
 8019d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8019d3c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019d3e:	b10d      	cbz	r5, 8019d44 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 8019d40:	2700      	movs	r7, #0
 8019d42:	e7ed      	b.n	8019d20 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019d44:	4b07      	ldr	r3, [pc, #28]	; (8019d64 <pbuf_copy.part.0+0x12c>)
 8019d46:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019d4a:	490a      	ldr	r1, [pc, #40]	; (8019d74 <pbuf_copy.part.0+0x13c>)
 8019d4c:	4807      	ldr	r0, [pc, #28]	; (8019d6c <pbuf_copy.part.0+0x134>)
 8019d4e:	f00a fad9 	bl	8024304 <iprintf>
 8019d52:	f06f 000f 	mvn.w	r0, #15
}
 8019d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019d5a:	682b      	ldr	r3, [r5, #0]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d0b6      	beq.n	8019cce <pbuf_copy.part.0+0x96>
 8019d60:	e79e      	b.n	8019ca0 <pbuf_copy.part.0+0x68>
 8019d62:	bf00      	nop
 8019d64:	080423f4 	.word	0x080423f4
 8019d68:	080424b8 	.word	0x080424b8
 8019d6c:	08028ab4 	.word	0x08028ab4
 8019d70:	0804248c 	.word	0x0804248c
 8019d74:	080424a8 	.word	0x080424a8
 8019d78:	08042474 	.word	0x08042474

08019d7c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019d7c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8019d80:	2b01      	cmp	r3, #1
{
 8019d82:	b570      	push	{r4, r5, r6, lr}
 8019d84:	4614      	mov	r4, r2
 8019d86:	4606      	mov	r6, r0
 8019d88:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019d8a:	d110      	bne.n	8019dae <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019d8c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8019d90:	490b      	ldr	r1, [pc, #44]	; (8019dc0 <pbuf_alloc_reference+0x44>)
 8019d92:	200e      	movs	r0, #14
 8019d94:	f7ff fc9e 	bl	80196d4 <memp_malloc_fn>
  if (p == NULL) {
 8019d98:	b140      	cbz	r0, 8019dac <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8019d9a:	2300      	movs	r3, #0
  p->ref = 1;
 8019d9c:	2201      	movs	r2, #1
  p->payload = payload;
 8019d9e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8019da0:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8019da2:	6003      	str	r3, [r0, #0]
  p->len = len;
 8019da4:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8019da6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8019da8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8019daa:	81c2      	strh	r2, [r0, #14]
}
 8019dac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8019dae:	4b04      	ldr	r3, [pc, #16]	; (8019dc0 <pbuf_alloc_reference+0x44>)
 8019db0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8019db4:	4903      	ldr	r1, [pc, #12]	; (8019dc4 <pbuf_alloc_reference+0x48>)
 8019db6:	4804      	ldr	r0, [pc, #16]	; (8019dc8 <pbuf_alloc_reference+0x4c>)
 8019db8:	f00a faa4 	bl	8024304 <iprintf>
 8019dbc:	e7e6      	b.n	8019d8c <pbuf_alloc_reference+0x10>
 8019dbe:	bf00      	nop
 8019dc0:	080423f4 	.word	0x080423f4
 8019dc4:	080424e4 	.word	0x080424e4
 8019dc8:	08028ab4 	.word	0x08028ab4

08019dcc <pbuf_alloc>:
  switch (type) {
 8019dcc:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8019dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd4:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 8019dd6:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 8019dda:	d03d      	beq.n	8019e58 <pbuf_alloc+0x8c>
 8019ddc:	d80e      	bhi.n	8019dfc <pbuf_alloc+0x30>
 8019dde:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 8019de2:	2c01      	cmp	r4, #1
 8019de4:	d033      	beq.n	8019e4e <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019de6:	4b41      	ldr	r3, [pc, #260]	; (8019eec <pbuf_alloc+0x120>)
 8019de8:	f240 1227 	movw	r2, #295	; 0x127
 8019dec:	4940      	ldr	r1, [pc, #256]	; (8019ef0 <pbuf_alloc+0x124>)
      return NULL;
 8019dee:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8019df0:	4840      	ldr	r0, [pc, #256]	; (8019ef4 <pbuf_alloc+0x128>)
 8019df2:	f00a fa87 	bl	8024304 <iprintf>
}
 8019df6:	4628      	mov	r0, r5
 8019df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 8019dfc:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8019e00:	d1f1      	bne.n	8019de6 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8019e02:	f10a 0303 	add.w	r3, sl, #3
 8019e06:	1cca      	adds	r2, r1, #3
 8019e08:	4606      	mov	r6, r0
 8019e0a:	f022 0203 	bic.w	r2, r2, #3
 8019e0e:	f023 0303 	bic.w	r3, r3, #3
 8019e12:	4413      	add	r3, r2
 8019e14:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019e16:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019e1a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019e1c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019e1e:	d34d      	bcc.n	8019ebc <pbuf_alloc+0xf0>
 8019e20:	4282      	cmp	r2, r0
 8019e22:	d84b      	bhi.n	8019ebc <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8019e24:	f7ff fab4 	bl	8019390 <mem_malloc>
      if (p == NULL) {
 8019e28:	4605      	mov	r5, r0
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	d0e3      	beq.n	8019df6 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019e2e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 8019e30:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8019e32:	4a31      	ldr	r2, [pc, #196]	; (8019ef8 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019e34:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8019e36:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 8019e3a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019e3c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8019e40:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 8019e44:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 8019e46:	6043      	str	r3, [r0, #4]
}
 8019e48:	4628      	mov	r0, r5
 8019e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8019e4e:	2000      	movs	r0, #0
}
 8019e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8019e54:	f7ff bf92 	b.w	8019d7c <pbuf_alloc_reference>
  switch (type) {
 8019e58:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019e5a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8019eec <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 8019e5e:	4f27      	ldr	r7, [pc, #156]	; (8019efc <pbuf_alloc+0x130>)
  switch (type) {
 8019e60:	4625      	mov	r5, r4
 8019e62:	e009      	b.n	8019e78 <pbuf_alloc+0xac>
          last->next = q;
 8019e64:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8019e66:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 8019e6a:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 8019e6e:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 8019e72:	f1b9 0f00 	cmp.w	r9, #0
 8019e76:	d0be      	beq.n	8019df6 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019e78:	22f3      	movs	r2, #243	; 0xf3
 8019e7a:	4641      	mov	r1, r8
 8019e7c:	200f      	movs	r0, #15
 8019e7e:	4626      	mov	r6, r4
 8019e80:	f7ff fc28 	bl	80196d4 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019e84:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 8019e88:	2100      	movs	r1, #0
        if (q == NULL) {
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	b1d0      	cbz	r0, 8019ec4 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019e8e:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019e92:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 8019e96:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019e9a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019e9e:	3213      	adds	r2, #19
  p->next = NULL;
 8019ea0:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019ea2:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019ea4:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8019ea8:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019eaa:	454b      	cmp	r3, r9
  p->payload = payload;
 8019eac:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019eae:	bf28      	it	cs
 8019eb0:	464b      	movcs	r3, r9
  p->len = len;
 8019eb2:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8019eb4:	2d00      	cmp	r5, #0
 8019eb6:	d1d5      	bne.n	8019e64 <pbuf_alloc+0x98>
 8019eb8:	4605      	mov	r5, r0
 8019eba:	e7d4      	b.n	8019e66 <pbuf_alloc+0x9a>
          return NULL;
 8019ebc:	2500      	movs	r5, #0
}
 8019ebe:	4628      	mov	r0, r5
 8019ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 8019ec4:	4e0e      	ldr	r6, [pc, #56]	; (8019f00 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 8019ec6:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 8019ec8:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8019eca:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 8019ecc:	b133      	cbz	r3, 8019edc <pbuf_alloc+0x110>
          if (p) {
 8019ece:	2d00      	cmp	r5, #0
 8019ed0:	d0f4      	beq.n	8019ebc <pbuf_alloc+0xf0>
  if (p == NULL) {
 8019ed2:	4628      	mov	r0, r5
          return NULL;
 8019ed4:	2500      	movs	r5, #0
 8019ed6:	f7ff fe4b 	bl	8019b70 <pbuf_free.part.0>
 8019eda:	e78c      	b.n	8019df6 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019edc:	4601      	mov	r1, r0
 8019ede:	4809      	ldr	r0, [pc, #36]	; (8019f04 <pbuf_alloc+0x138>)
 8019ee0:	f7fc fefc 	bl	8016cdc <tcpip_try_callback>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	d0f2      	beq.n	8019ece <pbuf_alloc+0x102>
 8019ee8:	7034      	strb	r4, [r6, #0]
 8019eea:	e7f0      	b.n	8019ece <pbuf_alloc+0x102>
 8019eec:	080423f4 	.word	0x080423f4
 8019ef0:	080424f8 	.word	0x080424f8
 8019ef4:	08028ab4 	.word	0x08028ab4
 8019ef8:	00010080 	.word	0x00010080
 8019efc:	00010082 	.word	0x00010082
 8019f00:	2002dbc5 	.word	0x2002dbc5
 8019f04:	08019b49 	.word	0x08019b49

08019f08 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019f08:	3003      	adds	r0, #3
 8019f0a:	f020 0003 	bic.w	r0, r0, #3
{
 8019f0e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019f10:	eb01 0e00 	add.w	lr, r1, r0
{
 8019f14:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8019f18:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019f1a:	45e6      	cmp	lr, ip
 8019f1c:	d80d      	bhi.n	8019f3a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8019f1e:	b104      	cbz	r4, 8019f22 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019f20:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8019f22:	4618      	mov	r0, r3
  p->next = NULL;
 8019f24:	2300      	movs	r3, #0
  p->payload = payload;
 8019f26:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 8019f28:	2402      	movs	r4, #2
  p->next = NULL;
 8019f2a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8019f2c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8019f2e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8019f30:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8019f32:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8019f34:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 8019f36:	81c3      	strh	r3, [r0, #14]
}
 8019f38:	bd10      	pop	{r4, pc}
    return NULL;
 8019f3a:	2000      	movs	r0, #0
}
 8019f3c:	bd10      	pop	{r4, pc}
 8019f3e:	bf00      	nop

08019f40 <pbuf_realloc>:
{
 8019f40:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019f42:	4604      	mov	r4, r0
{
 8019f44:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019f46:	2800      	cmp	r0, #0
 8019f48:	d037      	beq.n	8019fba <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 8019f4a:	8922      	ldrh	r2, [r4, #8]
 8019f4c:	42aa      	cmp	r2, r5
 8019f4e:	d91b      	bls.n	8019f88 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 8019f50:	8963      	ldrh	r3, [r4, #10]
 8019f52:	429d      	cmp	r5, r3
 8019f54:	d90d      	bls.n	8019f72 <pbuf_realloc+0x32>
 8019f56:	1aa9      	subs	r1, r5, r2
 8019f58:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019f5a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8019f5c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019f5e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8019f60:	b29d      	uxth	r5, r3
    q = q->next;
 8019f62:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019f64:	2c00      	cmp	r4, #0
 8019f66:	d030      	beq.n	8019fca <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 8019f68:	8963      	ldrh	r3, [r4, #10]
 8019f6a:	42ab      	cmp	r3, r5
 8019f6c:	d201      	bcs.n	8019f72 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019f6e:	8922      	ldrh	r2, [r4, #8]
 8019f70:	e7f3      	b.n	8019f5a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019f72:	7b22      	ldrb	r2, [r4, #12]
 8019f74:	0712      	lsls	r2, r2, #28
 8019f76:	d008      	beq.n	8019f8a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 8019f78:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8019f7a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8019f7c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8019f7e:	b108      	cbz	r0, 8019f84 <pbuf_realloc+0x44>
  if (p == NULL) {
 8019f80:	f7ff fdf6 	bl	8019b70 <pbuf_free.part.0>
  q->next = NULL;
 8019f84:	2300      	movs	r3, #0
 8019f86:	6023      	str	r3, [r4, #0]
}
 8019f88:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019f8a:	429d      	cmp	r5, r3
 8019f8c:	d0f4      	beq.n	8019f78 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019f8e:	7b63      	ldrb	r3, [r4, #13]
 8019f90:	079b      	lsls	r3, r3, #30
 8019f92:	d4f1      	bmi.n	8019f78 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019f94:	6863      	ldr	r3, [r4, #4]
 8019f96:	4620      	mov	r0, r4
 8019f98:	1b1b      	subs	r3, r3, r4
 8019f9a:	18e9      	adds	r1, r5, r3
 8019f9c:	b289      	uxth	r1, r1
 8019f9e:	f7ff f91d 	bl	80191dc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	d1e7      	bne.n	8019f78 <pbuf_realloc+0x38>
 8019fa8:	4b0c      	ldr	r3, [pc, #48]	; (8019fdc <pbuf_realloc+0x9c>)
 8019faa:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019fae:	490c      	ldr	r1, [pc, #48]	; (8019fe0 <pbuf_realloc+0xa0>)
 8019fb0:	480c      	ldr	r0, [pc, #48]	; (8019fe4 <pbuf_realloc+0xa4>)
 8019fb2:	f00a f9a7 	bl	8024304 <iprintf>
  q->len = rem_len;
 8019fb6:	8164      	strh	r4, [r4, #10]
 8019fb8:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019fba:	4b08      	ldr	r3, [pc, #32]	; (8019fdc <pbuf_realloc+0x9c>)
 8019fbc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019fc0:	4909      	ldr	r1, [pc, #36]	; (8019fe8 <pbuf_realloc+0xa8>)
 8019fc2:	4808      	ldr	r0, [pc, #32]	; (8019fe4 <pbuf_realloc+0xa4>)
 8019fc4:	f00a f99e 	bl	8024304 <iprintf>
 8019fc8:	e7bf      	b.n	8019f4a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019fca:	4b04      	ldr	r3, [pc, #16]	; (8019fdc <pbuf_realloc+0x9c>)
 8019fcc:	f240 12af 	movw	r2, #431	; 0x1af
 8019fd0:	4906      	ldr	r1, [pc, #24]	; (8019fec <pbuf_realloc+0xac>)
 8019fd2:	4804      	ldr	r0, [pc, #16]	; (8019fe4 <pbuf_realloc+0xa4>)
 8019fd4:	f00a f996 	bl	8024304 <iprintf>
  while (rem_len > q->len) {
 8019fd8:	8963      	ldrh	r3, [r4, #10]
 8019fda:	deff      	udf	#255	; 0xff
 8019fdc:	080423f4 	.word	0x080423f4
 8019fe0:	08042544 	.word	0x08042544
 8019fe4:	08028ab4 	.word	0x08028ab4
 8019fe8:	08042514 	.word	0x08042514
 8019fec:	0804252c 	.word	0x0804252c

08019ff0 <pbuf_add_header>:
{
 8019ff0:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8019ff2:	b310      	cbz	r0, 801a03a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8019ff4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8019ff8:	d20c      	bcs.n	801a014 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 8019ffa:	b169      	cbz	r1, 801a018 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 8019ffc:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a000:	8902      	ldrh	r2, [r0, #8]
 801a002:	4603      	mov	r3, r0
 801a004:	4462      	add	r2, ip
 801a006:	b292      	uxth	r2, r2
 801a008:	4594      	cmp	ip, r2
 801a00a:	d803      	bhi.n	801a014 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a00c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801a010:	2800      	cmp	r0, #0
 801a012:	db03      	blt.n	801a01c <pbuf_add_header+0x2c>
    return 1;
 801a014:	2001      	movs	r0, #1
}
 801a016:	bd08      	pop	{r3, pc}
    return 0;
 801a018:	4608      	mov	r0, r1
}
 801a01a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801a01c:	6858      	ldr	r0, [r3, #4]
 801a01e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a020:	f103 0010 	add.w	r0, r3, #16
 801a024:	4281      	cmp	r1, r0
 801a026:	d3f5      	bcc.n	801a014 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801a028:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801a02c:	2000      	movs	r0, #0
  p->payload = payload;
 801a02e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a030:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a032:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a034:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801a038:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a03a:	4b04      	ldr	r3, [pc, #16]	; (801a04c <pbuf_add_header+0x5c>)
 801a03c:	f240 12df 	movw	r2, #479	; 0x1df
 801a040:	4903      	ldr	r1, [pc, #12]	; (801a050 <pbuf_add_header+0x60>)
 801a042:	4804      	ldr	r0, [pc, #16]	; (801a054 <pbuf_add_header+0x64>)
 801a044:	f00a f95e 	bl	8024304 <iprintf>
    return 1;
 801a048:	2001      	movs	r0, #1
}
 801a04a:	bd08      	pop	{r3, pc}
 801a04c:	080423f4 	.word	0x080423f4
 801a050:	08043e20 	.word	0x08043e20
 801a054:	08028ab4 	.word	0x08028ab4

0801a058 <pbuf_remove_header>:
{
 801a058:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a05a:	b1c8      	cbz	r0, 801a090 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801a05c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801a060:	d21f      	bcs.n	801a0a2 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801a062:	b199      	cbz	r1, 801a08c <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801a064:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a068:	8942      	ldrh	r2, [r0, #10]
 801a06a:	4603      	mov	r3, r0
 801a06c:	4594      	cmp	ip, r2
 801a06e:	d81a      	bhi.n	801a0a6 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a070:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801a072:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a076:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a07a:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801a07c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a07e:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801a082:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801a084:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801a086:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801a08a:	bd08      	pop	{r3, pc}
    return 0;
 801a08c:	4608      	mov	r0, r1
}
 801a08e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801a090:	4b09      	ldr	r3, [pc, #36]	; (801a0b8 <pbuf_remove_header+0x60>)
 801a092:	f240 224b 	movw	r2, #587	; 0x24b
 801a096:	4909      	ldr	r1, [pc, #36]	; (801a0bc <pbuf_remove_header+0x64>)
 801a098:	4809      	ldr	r0, [pc, #36]	; (801a0c0 <pbuf_remove_header+0x68>)
 801a09a:	f00a f933 	bl	8024304 <iprintf>
    return 1;
 801a09e:	2001      	movs	r0, #1
}
 801a0a0:	bd08      	pop	{r3, pc}
    return 1;
 801a0a2:	2001      	movs	r0, #1
}
 801a0a4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801a0a6:	4b04      	ldr	r3, [pc, #16]	; (801a0b8 <pbuf_remove_header+0x60>)
 801a0a8:	f240 2255 	movw	r2, #597	; 0x255
 801a0ac:	4905      	ldr	r1, [pc, #20]	; (801a0c4 <pbuf_remove_header+0x6c>)
 801a0ae:	4804      	ldr	r0, [pc, #16]	; (801a0c0 <pbuf_remove_header+0x68>)
 801a0b0:	f00a f928 	bl	8024304 <iprintf>
 801a0b4:	2001      	movs	r0, #1
}
 801a0b6:	bd08      	pop	{r3, pc}
 801a0b8:	080423f4 	.word	0x080423f4
 801a0bc:	08043e20 	.word	0x08043e20
 801a0c0:	08028ab4 	.word	0x08028ab4
 801a0c4:	08042560 	.word	0x08042560

0801a0c8 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801a0c8:	2900      	cmp	r1, #0
 801a0ca:	db1a      	blt.n	801a102 <pbuf_header_force+0x3a>
{
 801a0cc:	b508      	push	{r3, lr}
 801a0ce:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801a0d0:	b1d0      	cbz	r0, 801a108 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801a0d2:	b341      	cbz	r1, 801a126 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801a0d4:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801a0d8:	891a      	ldrh	r2, [r3, #8]
 801a0da:	4462      	add	r2, ip
 801a0dc:	b292      	uxth	r2, r2
 801a0de:	4594      	cmp	ip, r2
 801a0e0:	d81f      	bhi.n	801a122 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a0e2:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801a0e6:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801a0e8:	6858      	ldr	r0, [r3, #4]
 801a0ea:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801a0ee:	db14      	blt.n	801a11a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801a0f0:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801a0f4:	2000      	movs	r0, #0
  p->payload = payload;
 801a0f6:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a0f8:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801a0fa:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801a0fc:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801a100:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801a102:	4249      	negs	r1, r1
 801a104:	f7ff bfa8 	b.w	801a058 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801a108:	4b08      	ldr	r3, [pc, #32]	; (801a12c <pbuf_header_force+0x64>)
 801a10a:	f240 12df 	movw	r2, #479	; 0x1df
 801a10e:	4908      	ldr	r1, [pc, #32]	; (801a130 <pbuf_header_force+0x68>)
 801a110:	4808      	ldr	r0, [pc, #32]	; (801a134 <pbuf_header_force+0x6c>)
 801a112:	f00a f8f7 	bl	8024304 <iprintf>
    return 1;
 801a116:	2001      	movs	r0, #1
}
 801a118:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801a11a:	f103 0010 	add.w	r0, r3, #16
 801a11e:	4281      	cmp	r1, r0
 801a120:	d2e6      	bcs.n	801a0f0 <pbuf_header_force+0x28>
    return 1;
 801a122:	2001      	movs	r0, #1
}
 801a124:	bd08      	pop	{r3, pc}
    return 0;
 801a126:	4608      	mov	r0, r1
}
 801a128:	bd08      	pop	{r3, pc}
 801a12a:	bf00      	nop
 801a12c:	080423f4 	.word	0x080423f4
 801a130:	08043e20 	.word	0x08043e20
 801a134:	08028ab4 	.word	0x08028ab4

0801a138 <pbuf_free_header>:
{
 801a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801a13a:	4604      	mov	r4, r0
 801a13c:	b158      	cbz	r0, 801a156 <pbuf_free_header+0x1e>
 801a13e:	460d      	mov	r5, r1
 801a140:	b149      	cbz	r1, 801a156 <pbuf_free_header+0x1e>
      f->next = 0;
 801a142:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801a144:	8963      	ldrh	r3, [r4, #10]
 801a146:	4620      	mov	r0, r4
 801a148:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801a14a:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801a14e:	d904      	bls.n	801a15a <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801a150:	4629      	mov	r1, r5
 801a152:	f7ff ff81 	bl	801a058 <pbuf_remove_header>
}
 801a156:	4620      	mov	r0, r4
 801a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801a15a:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801a15c:	b295      	uxth	r5, r2
      f->next = 0;
 801a15e:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801a160:	4634      	mov	r4, r6
 801a162:	f7ff fd05 	bl	8019b70 <pbuf_free.part.0>
  while (free_left && p) {
 801a166:	b10d      	cbz	r5, 801a16c <pbuf_free_header+0x34>
 801a168:	2e00      	cmp	r6, #0
 801a16a:	d1eb      	bne.n	801a144 <pbuf_free_header+0xc>
      p = p->next;
 801a16c:	4634      	mov	r4, r6
 801a16e:	e7f2      	b.n	801a156 <pbuf_free_header+0x1e>

0801a170 <pbuf_free>:
  if (p == NULL) {
 801a170:	b108      	cbz	r0, 801a176 <pbuf_free+0x6>
 801a172:	f7ff bcfd 	b.w	8019b70 <pbuf_free.part.0>
{
 801a176:	b510      	push	{r4, lr}
 801a178:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801a17a:	4b04      	ldr	r3, [pc, #16]	; (801a18c <pbuf_free+0x1c>)
 801a17c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801a180:	4903      	ldr	r1, [pc, #12]	; (801a190 <pbuf_free+0x20>)
 801a182:	4804      	ldr	r0, [pc, #16]	; (801a194 <pbuf_free+0x24>)
 801a184:	f00a f8be 	bl	8024304 <iprintf>
}
 801a188:	4620      	mov	r0, r4
 801a18a:	bd10      	pop	{r4, pc}
 801a18c:	080423f4 	.word	0x080423f4
 801a190:	08043e20 	.word	0x08043e20
 801a194:	08028ab4 	.word	0x08028ab4

0801a198 <pbuf_clen>:
  while (p != NULL) {
 801a198:	4603      	mov	r3, r0
 801a19a:	b130      	cbz	r0, 801a1aa <pbuf_clen+0x12>
  len = 0;
 801a19c:	2000      	movs	r0, #0
    ++len;
 801a19e:	3001      	adds	r0, #1
    p = p->next;
 801a1a0:	681b      	ldr	r3, [r3, #0]
    ++len;
 801a1a2:	b280      	uxth	r0, r0
  while (p != NULL) {
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d1fa      	bne.n	801a19e <pbuf_clen+0x6>
 801a1a8:	4770      	bx	lr
}
 801a1aa:	4770      	bx	lr

0801a1ac <pbuf_ref>:
  if (p != NULL) {
 801a1ac:	b120      	cbz	r0, 801a1b8 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a1ae:	7b83      	ldrb	r3, [r0, #14]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	b2db      	uxtb	r3, r3
 801a1b4:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a1b6:	b103      	cbz	r3, 801a1ba <pbuf_ref+0xe>
}
 801a1b8:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a1ba:	4b03      	ldr	r3, [pc, #12]	; (801a1c8 <pbuf_ref+0x1c>)
 801a1bc:	f240 3242 	movw	r2, #834	; 0x342
 801a1c0:	4902      	ldr	r1, [pc, #8]	; (801a1cc <pbuf_ref+0x20>)
 801a1c2:	4803      	ldr	r0, [pc, #12]	; (801a1d0 <pbuf_ref+0x24>)
 801a1c4:	f00a b89e 	b.w	8024304 <iprintf>
 801a1c8:	080423f4 	.word	0x080423f4
 801a1cc:	08042580 	.word	0x08042580
 801a1d0:	08028ab4 	.word	0x08028ab4

0801a1d4 <pbuf_cat>:
{
 801a1d4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a1d6:	b330      	cbz	r0, 801a226 <pbuf_cat+0x52>
 801a1d8:	460d      	mov	r5, r1
 801a1da:	b321      	cbz	r1, 801a226 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801a1dc:	6803      	ldr	r3, [r0, #0]
 801a1de:	4604      	mov	r4, r0
 801a1e0:	b13b      	cbz	r3, 801a1f2 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a1e2:	8922      	ldrh	r2, [r4, #8]
 801a1e4:	8928      	ldrh	r0, [r5, #8]
 801a1e6:	4402      	add	r2, r0
 801a1e8:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801a1ea:	461c      	mov	r4, r3
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d1f7      	bne.n	801a1e2 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801a1f2:	8963      	ldrh	r3, [r4, #10]
 801a1f4:	8922      	ldrh	r2, [r4, #8]
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d010      	beq.n	801a21c <pbuf_cat+0x48>
 801a1fa:	4b0f      	ldr	r3, [pc, #60]	; (801a238 <pbuf_cat+0x64>)
 801a1fc:	f240 3262 	movw	r2, #866	; 0x362
 801a200:	490e      	ldr	r1, [pc, #56]	; (801a23c <pbuf_cat+0x68>)
 801a202:	480f      	ldr	r0, [pc, #60]	; (801a240 <pbuf_cat+0x6c>)
 801a204:	f00a f87e 	bl	8024304 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801a208:	6823      	ldr	r3, [r4, #0]
 801a20a:	b133      	cbz	r3, 801a21a <pbuf_cat+0x46>
 801a20c:	4b0a      	ldr	r3, [pc, #40]	; (801a238 <pbuf_cat+0x64>)
 801a20e:	f240 3263 	movw	r2, #867	; 0x363
 801a212:	490c      	ldr	r1, [pc, #48]	; (801a244 <pbuf_cat+0x70>)
 801a214:	480a      	ldr	r0, [pc, #40]	; (801a240 <pbuf_cat+0x6c>)
 801a216:	f00a f875 	bl	8024304 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a21a:	8923      	ldrh	r3, [r4, #8]
 801a21c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801a21e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801a220:	4413      	add	r3, r2
 801a222:	8123      	strh	r3, [r4, #8]
}
 801a224:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a226:	4b04      	ldr	r3, [pc, #16]	; (801a238 <pbuf_cat+0x64>)
 801a228:	f240 3259 	movw	r2, #857	; 0x359
 801a22c:	4906      	ldr	r1, [pc, #24]	; (801a248 <pbuf_cat+0x74>)
 801a22e:	4804      	ldr	r0, [pc, #16]	; (801a240 <pbuf_cat+0x6c>)
}
 801a230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801a234:	f00a b866 	b.w	8024304 <iprintf>
 801a238:	080423f4 	.word	0x080423f4
 801a23c:	080425cc 	.word	0x080425cc
 801a240:	08028ab4 	.word	0x08028ab4
 801a244:	080425fc 	.word	0x080425fc
 801a248:	08042594 	.word	0x08042594

0801a24c <pbuf_chain>:
{
 801a24c:	b510      	push	{r4, lr}
 801a24e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801a250:	f7ff ffc0 	bl	801a1d4 <pbuf_cat>
  if (p != NULL) {
 801a254:	b124      	cbz	r4, 801a260 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801a256:	7ba3      	ldrb	r3, [r4, #14]
 801a258:	3301      	adds	r3, #1
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a25e:	b103      	cbz	r3, 801a262 <pbuf_chain+0x16>
}
 801a260:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a262:	4b04      	ldr	r3, [pc, #16]	; (801a274 <pbuf_chain+0x28>)
 801a264:	f240 3242 	movw	r2, #834	; 0x342
 801a268:	4903      	ldr	r1, [pc, #12]	; (801a278 <pbuf_chain+0x2c>)
 801a26a:	4804      	ldr	r0, [pc, #16]	; (801a27c <pbuf_chain+0x30>)
}
 801a26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801a270:	f00a b848 	b.w	8024304 <iprintf>
 801a274:	080423f4 	.word	0x080423f4
 801a278:	08042580 	.word	0x08042580
 801a27c:	08028ab4 	.word	0x08028ab4

0801a280 <pbuf_copy>:
{
 801a280:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a282:	b140      	cbz	r0, 801a296 <pbuf_copy+0x16>
 801a284:	b139      	cbz	r1, 801a296 <pbuf_copy+0x16>
 801a286:	8902      	ldrh	r2, [r0, #8]
 801a288:	890b      	ldrh	r3, [r1, #8]
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d303      	bcc.n	801a296 <pbuf_copy+0x16>
}
 801a28e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a292:	f7ff bcd1 	b.w	8019c38 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a296:	4b05      	ldr	r3, [pc, #20]	; (801a2ac <pbuf_copy+0x2c>)
 801a298:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a29c:	4904      	ldr	r1, [pc, #16]	; (801a2b0 <pbuf_copy+0x30>)
 801a29e:	4805      	ldr	r0, [pc, #20]	; (801a2b4 <pbuf_copy+0x34>)
 801a2a0:	f00a f830 	bl	8024304 <iprintf>
}
 801a2a4:	f06f 000f 	mvn.w	r0, #15
 801a2a8:	bd08      	pop	{r3, pc}
 801a2aa:	bf00      	nop
 801a2ac:	080423f4 	.word	0x080423f4
 801a2b0:	0804260c 	.word	0x0804260c
 801a2b4:	08028ab4 	.word	0x08028ab4

0801a2b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a2bc:	4605      	mov	r5, r0
 801a2be:	b370      	cbz	r0, 801a31e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a2c0:	460f      	mov	r7, r1
 801a2c2:	2900      	cmp	r1, #0
 801a2c4:	d036      	beq.n	801a334 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a2c6:	4690      	mov	r8, r2
 801a2c8:	b392      	cbz	r2, 801a330 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801a2ca:	2600      	movs	r6, #0
 801a2cc:	e005      	b.n	801a2da <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801a2ce:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a2d0:	682d      	ldr	r5, [r5, #0]
 801a2d2:	f1b8 0f00 	cmp.w	r8, #0
 801a2d6:	d01f      	beq.n	801a318 <pbuf_copy_partial+0x60>
 801a2d8:	b1f5      	cbz	r5, 801a318 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a2da:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801a2dc:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801a2e0:	b11b      	cbz	r3, 801a2ea <pbuf_copy_partial+0x32>
 801a2e2:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801a2e4:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801a2e8:	d2f1      	bcs.n	801a2ce <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801a2ea:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a2ee:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801a2f0:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a2f4:	4419      	add	r1, r3
 801a2f6:	4544      	cmp	r4, r8
 801a2f8:	bf28      	it	cs
 801a2fa:	4644      	movcs	r4, r8
 801a2fc:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a2fe:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801a300:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a304:	f009 f838 	bl	8023378 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a308:	b2b6      	uxth	r6, r6
      offset = 0;
 801a30a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801a30c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a310:	682d      	ldr	r5, [r5, #0]
 801a312:	f1b8 0f00 	cmp.w	r8, #0
 801a316:	d1df      	bne.n	801a2d8 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801a318:	4630      	mov	r0, r6
 801a31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a31e:	4b0a      	ldr	r3, [pc, #40]	; (801a348 <pbuf_copy_partial+0x90>)
 801a320:	f240 420a 	movw	r2, #1034	; 0x40a
 801a324:	4909      	ldr	r1, [pc, #36]	; (801a34c <pbuf_copy_partial+0x94>)
 801a326:	462e      	mov	r6, r5
 801a328:	4809      	ldr	r0, [pc, #36]	; (801a350 <pbuf_copy_partial+0x98>)
 801a32a:	f009 ffeb 	bl	8024304 <iprintf>
 801a32e:	e7f3      	b.n	801a318 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801a330:	4616      	mov	r6, r2
 801a332:	e7f1      	b.n	801a318 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a334:	4b04      	ldr	r3, [pc, #16]	; (801a348 <pbuf_copy_partial+0x90>)
 801a336:	f240 420b 	movw	r2, #1035	; 0x40b
 801a33a:	4906      	ldr	r1, [pc, #24]	; (801a354 <pbuf_copy_partial+0x9c>)
 801a33c:	463e      	mov	r6, r7
 801a33e:	4804      	ldr	r0, [pc, #16]	; (801a350 <pbuf_copy_partial+0x98>)
 801a340:	f009 ffe0 	bl	8024304 <iprintf>
 801a344:	e7e8      	b.n	801a318 <pbuf_copy_partial+0x60>
 801a346:	bf00      	nop
 801a348:	080423f4 	.word	0x080423f4
 801a34c:	0804263c 	.word	0x0804263c
 801a350:	08028ab4 	.word	0x08028ab4
 801a354:	0804265c 	.word	0x0804265c

0801a358 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801a358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801a35c:	2800      	cmp	r0, #0
 801a35e:	d049      	beq.n	801a3f4 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801a360:	460f      	mov	r7, r1
 801a362:	2900      	cmp	r1, #0
 801a364:	d03c      	beq.n	801a3e0 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801a366:	8903      	ldrh	r3, [r0, #8]
 801a368:	4604      	mov	r4, r0
 801a36a:	4690      	mov	r8, r2
 801a36c:	4293      	cmp	r3, r2
 801a36e:	d32d      	bcc.n	801a3cc <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a370:	b34a      	cbz	r2, 801a3c6 <pbuf_take+0x6e>
 801a372:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801a374:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801a376:	f8df b094 	ldr.w	fp, [pc, #148]	; 801a40c <pbuf_take+0xb4>
 801a37a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801a420 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801a37e:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801a380:	19b9      	adds	r1, r7, r6
 801a382:	6860      	ldr	r0, [r4, #4]
 801a384:	42aa      	cmp	r2, r5
 801a386:	bf28      	it	cs
 801a388:	462a      	movcs	r2, r5
 801a38a:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801a38c:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801a38e:	f008 fff3 	bl	8023378 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a392:	6824      	ldr	r4, [r4, #0]
 801a394:	ebb5 0509 	subs.w	r5, r5, r9
 801a398:	d009      	beq.n	801a3ae <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801a39a:	2c00      	cmp	r4, #0
 801a39c:	d1ef      	bne.n	801a37e <pbuf_take+0x26>
 801a39e:	465b      	mov	r3, fp
 801a3a0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801a3a4:	4651      	mov	r1, sl
 801a3a6:	4818      	ldr	r0, [pc, #96]	; (801a408 <pbuf_take+0xb0>)
 801a3a8:	f009 ffac 	bl	8024304 <iprintf>
 801a3ac:	e7e7      	b.n	801a37e <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801a3ae:	45b0      	cmp	r8, r6
 801a3b0:	d009      	beq.n	801a3c6 <pbuf_take+0x6e>
 801a3b2:	4b16      	ldr	r3, [pc, #88]	; (801a40c <pbuf_take+0xb4>)
 801a3b4:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801a3b8:	4915      	ldr	r1, [pc, #84]	; (801a410 <pbuf_take+0xb8>)
 801a3ba:	4813      	ldr	r0, [pc, #76]	; (801a408 <pbuf_take+0xb0>)
 801a3bc:	f009 ffa2 	bl	8024304 <iprintf>
  return ERR_OK;
 801a3c0:	4628      	mov	r0, r5
}
 801a3c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801a3c6:	2000      	movs	r0, #0
}
 801a3c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801a3cc:	4b0f      	ldr	r3, [pc, #60]	; (801a40c <pbuf_take+0xb4>)
 801a3ce:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801a3d2:	4910      	ldr	r1, [pc, #64]	; (801a414 <pbuf_take+0xbc>)
 801a3d4:	480c      	ldr	r0, [pc, #48]	; (801a408 <pbuf_take+0xb0>)
 801a3d6:	f009 ff95 	bl	8024304 <iprintf>
 801a3da:	f04f 30ff 	mov.w	r0, #4294967295
 801a3de:	e7f3      	b.n	801a3c8 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801a3e0:	4b0a      	ldr	r3, [pc, #40]	; (801a40c <pbuf_take+0xb4>)
 801a3e2:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801a3e6:	490c      	ldr	r1, [pc, #48]	; (801a418 <pbuf_take+0xc0>)
 801a3e8:	4807      	ldr	r0, [pc, #28]	; (801a408 <pbuf_take+0xb0>)
 801a3ea:	f009 ff8b 	bl	8024304 <iprintf>
 801a3ee:	f06f 000f 	mvn.w	r0, #15
 801a3f2:	e7e9      	b.n	801a3c8 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801a3f4:	4b05      	ldr	r3, [pc, #20]	; (801a40c <pbuf_take+0xb4>)
 801a3f6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801a3fa:	4908      	ldr	r1, [pc, #32]	; (801a41c <pbuf_take+0xc4>)
 801a3fc:	4802      	ldr	r0, [pc, #8]	; (801a408 <pbuf_take+0xb0>)
 801a3fe:	f009 ff81 	bl	8024304 <iprintf>
 801a402:	f06f 000f 	mvn.w	r0, #15
 801a406:	e7df      	b.n	801a3c8 <pbuf_take+0x70>
 801a408:	08028ab4 	.word	0x08028ab4
 801a40c:	080423f4 	.word	0x080423f4
 801a410:	080426ec 	.word	0x080426ec
 801a414:	080426b4 	.word	0x080426b4
 801a418:	08042698 	.word	0x08042698
 801a41c:	08042680 	.word	0x08042680
 801a420:	080426d4 	.word	0x080426d4

0801a424 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a424:	b390      	cbz	r0, 801a48c <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a42a:	460f      	mov	r7, r1
 801a42c:	4604      	mov	r4, r0
 801a42e:	e002      	b.n	801a436 <pbuf_take_at+0x12>
    q = q->next;
 801a430:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a432:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801a434:	b334      	cbz	r4, 801a484 <pbuf_take_at+0x60>
 801a436:	8965      	ldrh	r5, [r4, #10]
 801a438:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801a43a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801a43e:	d9f7      	bls.n	801a430 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801a440:	8921      	ldrh	r1, [r4, #8]
 801a442:	189e      	adds	r6, r3, r2
 801a444:	42b1      	cmp	r1, r6
 801a446:	db1d      	blt.n	801a484 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801a448:	1ae9      	subs	r1, r5, r3
 801a44a:	428a      	cmp	r2, r1
 801a44c:	dc07      	bgt.n	801a45e <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801a44e:	6860      	ldr	r0, [r4, #4]
 801a450:	4639      	mov	r1, r7
 801a452:	4418      	add	r0, r3
 801a454:	f008 ff90 	bl	8023378 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801a458:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801a45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801a45e:	fa1f f881 	uxth.w	r8, r1
 801a462:	6860      	ldr	r0, [r4, #4]
 801a464:	4639      	mov	r1, r7
 801a466:	4642      	mov	r2, r8
 801a468:	4418      	add	r0, r3
 801a46a:	f008 ff85 	bl	8023378 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801a46e:	1b70      	subs	r0, r6, r5
 801a470:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801a472:	2a00      	cmp	r2, #0
 801a474:	d0f0      	beq.n	801a458 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801a476:	eb07 0108 	add.w	r1, r7, r8
 801a47a:	6820      	ldr	r0, [r4, #0]
}
 801a47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801a480:	f7ff bf6a 	b.w	801a358 <pbuf_take>
  return ERR_MEM;
 801a484:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801a48c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a490:	4770      	bx	lr
 801a492:	bf00      	nop

0801a494 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801a494:	b538      	push	{r3, r4, r5, lr}
 801a496:	4615      	mov	r5, r2
 801a498:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801a49a:	8929      	ldrh	r1, [r5, #8]
 801a49c:	f7ff fc96 	bl	8019dcc <pbuf_alloc>
  if (q == NULL) {
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	b138      	cbz	r0, 801a4b4 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a4a4:	8902      	ldrh	r2, [r0, #8]
 801a4a6:	892b      	ldrh	r3, [r5, #8]
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d305      	bcc.n	801a4b8 <pbuf_clone+0x24>
 801a4ac:	4629      	mov	r1, r5
 801a4ae:	f7ff fbc3 	bl	8019c38 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a4b2:	b940      	cbnz	r0, 801a4c6 <pbuf_clone+0x32>
  return q;
}
 801a4b4:	4620      	mov	r0, r4
 801a4b6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a4b8:	4b07      	ldr	r3, [pc, #28]	; (801a4d8 <pbuf_clone+0x44>)
 801a4ba:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a4be:	4907      	ldr	r1, [pc, #28]	; (801a4dc <pbuf_clone+0x48>)
 801a4c0:	4807      	ldr	r0, [pc, #28]	; (801a4e0 <pbuf_clone+0x4c>)
 801a4c2:	f009 ff1f 	bl	8024304 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a4c6:	4b04      	ldr	r3, [pc, #16]	; (801a4d8 <pbuf_clone+0x44>)
 801a4c8:	f240 5224 	movw	r2, #1316	; 0x524
 801a4cc:	4905      	ldr	r1, [pc, #20]	; (801a4e4 <pbuf_clone+0x50>)
 801a4ce:	4804      	ldr	r0, [pc, #16]	; (801a4e0 <pbuf_clone+0x4c>)
 801a4d0:	f009 ff18 	bl	8024304 <iprintf>
}
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	bd38      	pop	{r3, r4, r5, pc}
 801a4d8:	080423f4 	.word	0x080423f4
 801a4dc:	0804260c 	.word	0x0804260c
 801a4e0:	08028ab4 	.word	0x08028ab4
 801a4e4:	08042704 	.word	0x08042704

0801a4e8 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a4e8:	b918      	cbnz	r0, 801a4f2 <pbuf_get_at+0xa>
 801a4ea:	e00a      	b.n	801a502 <pbuf_get_at+0x1a>
    q = q->next;
 801a4ec:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a4ee:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a4f0:	b130      	cbz	r0, 801a500 <pbuf_get_at+0x18>
 801a4f2:	8943      	ldrh	r3, [r0, #10]
 801a4f4:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801a4f6:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a4fa:	d9f7      	bls.n	801a4ec <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801a4fc:	6843      	ldr	r3, [r0, #4]
 801a4fe:	5c58      	ldrb	r0, [r3, r1]
}
 801a500:	4770      	bx	lr
 801a502:	4770      	bx	lr

0801a504 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a504:	b140      	cbz	r0, 801a518 <pbuf_try_get_at+0x14>
 801a506:	8943      	ldrh	r3, [r0, #10]
 801a508:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801a50a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a50e:	d806      	bhi.n	801a51e <pbuf_try_get_at+0x1a>
    q = q->next;
 801a510:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a512:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a514:	2800      	cmp	r0, #0
 801a516:	d1f6      	bne.n	801a506 <pbuf_try_get_at+0x2>
  }
  return -1;
 801a518:	f04f 30ff 	mov.w	r0, #4294967295
}
 801a51c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801a51e:	6843      	ldr	r3, [r0, #4]
 801a520:	5c58      	ldrb	r0, [r3, r1]
 801a522:	4770      	bx	lr

0801a524 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801a524:	b918      	cbnz	r0, 801a52e <pbuf_put_at+0xa>
 801a526:	e00a      	b.n	801a53e <pbuf_put_at+0x1a>
    q = q->next;
 801a528:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a52a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a52c:	b130      	cbz	r0, 801a53c <pbuf_put_at+0x18>
 801a52e:	8943      	ldrh	r3, [r0, #10]
 801a530:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801a532:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801a536:	d9f7      	bls.n	801a528 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801a538:	6843      	ldr	r3, [r0, #4]
 801a53a:	545a      	strb	r2, [r3, r1]
  }
}
 801a53c:	4770      	bx	lr
 801a53e:	4770      	bx	lr

0801a540 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801a540:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801a542:	8905      	ldrh	r5, [r0, #8]
 801a544:	18cc      	adds	r4, r1, r3
 801a546:	42a5      	cmp	r5, r4
 801a548:	db2e      	blt.n	801a5a8 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801a54a:	8944      	ldrh	r4, [r0, #10]
 801a54c:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801a54e:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801a552:	d803      	bhi.n	801a55c <pbuf_memcmp+0x1c>
    q = q->next;
 801a554:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801a556:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801a558:	2800      	cmp	r0, #0
 801a55a:	d1f6      	bne.n	801a54a <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801a55c:	b1f3      	cbz	r3, 801a59c <pbuf_memcmp+0x5c>
 801a55e:	2500      	movs	r5, #0
 801a560:	1e56      	subs	r6, r2, #1
 801a562:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801a564:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801a568:	4604      	mov	r4, r0
 801a56a:	fa1f fc8c 	uxth.w	ip, ip
 801a56e:	b920      	cbnz	r0, 801a57a <pbuf_memcmp+0x3a>
 801a570:	e00b      	b.n	801a58a <pbuf_memcmp+0x4a>
    q = q->next;
 801a572:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801a574:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801a578:	b13c      	cbz	r4, 801a58a <pbuf_memcmp+0x4a>
 801a57a:	8962      	ldrh	r2, [r4, #10]
 801a57c:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801a57e:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801a582:	d2f6      	bcs.n	801a572 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801a584:	6862      	ldr	r2, [r4, #4]
 801a586:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801a58a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801a58e:	42a2      	cmp	r2, r4
 801a590:	d106      	bne.n	801a5a0 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801a592:	3501      	adds	r5, #1
 801a594:	fa1f fe85 	uxth.w	lr, r5
 801a598:	4573      	cmp	r3, lr
 801a59a:	d8e3      	bhi.n	801a564 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801a59c:	2000      	movs	r0, #0
}
 801a59e:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801a5a0:	f10e 0001 	add.w	r0, lr, #1
 801a5a4:	b280      	uxth	r0, r0
}
 801a5a6:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801a5a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801a5ac:	bd70      	pop	{r4, r5, r6, pc}
 801a5ae:	bf00      	nop

0801a5b0 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5b2:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801a5b4:	8905      	ldrh	r5, [r0, #8]
{
 801a5b6:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801a5b8:	4422      	add	r2, r4
 801a5ba:	4295      	cmp	r5, r2
 801a5bc:	db15      	blt.n	801a5ea <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801a5be:	1aed      	subs	r5, r5, r3
 801a5c0:	4606      	mov	r6, r0
 801a5c2:	460f      	mov	r7, r1
 801a5c4:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801a5c6:	42a5      	cmp	r5, r4
 801a5c8:	d204      	bcs.n	801a5d4 <pbuf_memfind+0x24>
 801a5ca:	e00e      	b.n	801a5ea <pbuf_memfind+0x3a>
 801a5cc:	fa1f f48c 	uxth.w	r4, ip
 801a5d0:	42a5      	cmp	r5, r4
 801a5d2:	d30a      	bcc.n	801a5ea <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801a5d4:	4621      	mov	r1, r4
 801a5d6:	463a      	mov	r2, r7
 801a5d8:	4630      	mov	r0, r6
 801a5da:	f7ff ffb1 	bl	801a540 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801a5de:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801a5e2:	2800      	cmp	r0, #0
 801a5e4:	d1f2      	bne.n	801a5cc <pbuf_memfind+0x1c>
 801a5e6:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801a5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801a5ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a5f0 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801a5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a5f4:	4e33      	ldr	r6, [pc, #204]	; (801a6c4 <raw_input+0xd4>)
{
 801a5f6:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a5f8:	6831      	ldr	r1, [r6, #0]
 801a5fa:	6970      	ldr	r0, [r6, #20]
 801a5fc:	f007 fb90 	bl	8021d20 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801a600:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a604:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801a606:	4b30      	ldr	r3, [pc, #192]	; (801a6c8 <raw_input+0xd8>)
 801a608:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801a60a:	2c00      	cmp	r4, #0
 801a60c:	d056      	beq.n	801a6bc <raw_input+0xcc>
 801a60e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801a610:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a612:	f106 0b10 	add.w	fp, r6, #16
 801a616:	46ca      	mov	sl, r9
  prev = NULL;
 801a618:	4606      	mov	r6, r0
 801a61a:	e004      	b.n	801a626 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801a61c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801a61e:	4626      	mov	r6, r4
 801a620:	2b00      	cmp	r3, #0
 801a622:	d037      	beq.n	801a694 <raw_input+0xa4>
 801a624:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801a626:	7c23      	ldrb	r3, [r4, #16]
 801a628:	42ab      	cmp	r3, r5
 801a62a:	d1f7      	bne.n	801a61c <raw_input+0x2c>
 801a62c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a62e:	b13a      	cbz	r2, 801a640 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a630:	4b24      	ldr	r3, [pc, #144]	; (801a6c4 <raw_input+0xd4>)
 801a632:	685b      	ldr	r3, [r3, #4]
 801a634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a638:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a63a:	b2db      	uxtb	r3, r3
 801a63c:	429a      	cmp	r2, r3
 801a63e:	d1ed      	bne.n	801a61c <raw_input+0x2c>
 801a640:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801a642:	f1ba 0f00 	cmp.w	sl, #0
 801a646:	d027      	beq.n	801a698 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d1e7      	bne.n	801a61c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801a64c:	7c63      	ldrb	r3, [r4, #17]
 801a64e:	07db      	lsls	r3, r3, #31
 801a650:	d504      	bpl.n	801a65c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801a652:	4b1c      	ldr	r3, [pc, #112]	; (801a6c4 <raw_input+0xd4>)
 801a654:	6862      	ldr	r2, [r4, #4]
 801a656:	691b      	ldr	r3, [r3, #16]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d1df      	bne.n	801a61c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801a65c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801a660:	f1b9 0f00 	cmp.w	r9, #0
 801a664:	d0da      	beq.n	801a61c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a666:	465b      	mov	r3, fp
 801a668:	4642      	mov	r2, r8
 801a66a:	4621      	mov	r1, r4
 801a66c:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801a66e:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801a672:	47c8      	blx	r9
        if (eaten != 0) {
 801a674:	b9c8      	cbnz	r0, 801a6aa <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801a676:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a67a:	42bb      	cmp	r3, r7
 801a67c:	d013      	beq.n	801a6a6 <raw_input+0xb6>
 801a67e:	4b13      	ldr	r3, [pc, #76]	; (801a6cc <raw_input+0xdc>)
 801a680:	22c0      	movs	r2, #192	; 0xc0
 801a682:	4913      	ldr	r1, [pc, #76]	; (801a6d0 <raw_input+0xe0>)
 801a684:	4626      	mov	r6, r4
 801a686:	4813      	ldr	r0, [pc, #76]	; (801a6d4 <raw_input+0xe4>)
 801a688:	f009 fe3c 	bl	8024304 <iprintf>
    pcb = pcb->next;
 801a68c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801a68e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801a690:	2b00      	cmp	r3, #0
 801a692:	d1c7      	bne.n	801a624 <raw_input+0x34>
  }
  return ret;
}
 801a694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d0d7      	beq.n	801a64c <raw_input+0x5c>
 801a69c:	4a09      	ldr	r2, [pc, #36]	; (801a6c4 <raw_input+0xd4>)
 801a69e:	6952      	ldr	r2, [r2, #20]
 801a6a0:	4293      	cmp	r3, r2
 801a6a2:	d1bb      	bne.n	801a61c <raw_input+0x2c>
 801a6a4:	e7d2      	b.n	801a64c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801a6a6:	2002      	movs	r0, #2
 801a6a8:	e7b8      	b.n	801a61c <raw_input+0x2c>
          if (prev != NULL) {
 801a6aa:	b14e      	cbz	r6, 801a6c0 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801a6ac:	4906      	ldr	r1, [pc, #24]	; (801a6c8 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801a6ae:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801a6b0:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801a6b2:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801a6b4:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801a6b6:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801a6b8:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801a6ba:	e7eb      	b.n	801a694 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801a6bc:	4620      	mov	r0, r4
 801a6be:	e7e9      	b.n	801a694 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801a6c0:	2001      	movs	r0, #1
 801a6c2:	e7e7      	b.n	801a694 <raw_input+0xa4>
 801a6c4:	2001ec88 	.word	0x2001ec88
 801a6c8:	2002dbc8 	.word	0x2002dbc8
 801a6cc:	08042718 	.word	0x08042718
 801a6d0:	08042748 	.word	0x08042748
 801a6d4:	08028ab4 	.word	0x08028ab4

0801a6d8 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a6d8:	b110      	cbz	r0, 801a6e0 <raw_netif_ip_addr_changed+0x8>
 801a6da:	6802      	ldr	r2, [r0, #0]
 801a6dc:	b101      	cbz	r1, 801a6e0 <raw_netif_ip_addr_changed+0x8>
 801a6de:	b902      	cbnz	r2, 801a6e2 <raw_netif_ip_addr_changed+0xa>
 801a6e0:	4770      	bx	lr
 801a6e2:	680b      	ldr	r3, [r1, #0]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d0fb      	beq.n	801a6e0 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801a6e8:	4b08      	ldr	r3, [pc, #32]	; (801a70c <raw_netif_ip_addr_changed+0x34>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d0f7      	beq.n	801a6e0 <raw_netif_ip_addr_changed+0x8>
{
 801a6f0:	b410      	push	{r4}
 801a6f2:	e000      	b.n	801a6f6 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801a6f4:	6802      	ldr	r2, [r0, #0]
 801a6f6:	681c      	ldr	r4, [r3, #0]
 801a6f8:	4294      	cmp	r4, r2
 801a6fa:	d101      	bne.n	801a700 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801a6fc:	680a      	ldr	r2, [r1, #0]
 801a6fe:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801a700:	68db      	ldr	r3, [r3, #12]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d1f6      	bne.n	801a6f4 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a70a:	4770      	bx	lr
 801a70c:	2002dbc8 	.word	0x2002dbc8

0801a710 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a710:	b4f0      	push	{r4, r5, r6, r7}
 801a712:	4f13      	ldr	r7, [pc, #76]	; (801a760 <tcp_new_port+0x50>)
 801a714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a718:	4e12      	ldr	r6, [pc, #72]	; (801a764 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a71a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801a71e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a720:	4d11      	ldr	r5, [pc, #68]	; (801a768 <tcp_new_port+0x58>)
  tcp_port++;
 801a722:	3001      	adds	r0, #1
 801a724:	4c11      	ldr	r4, [pc, #68]	; (801a76c <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a726:	462b      	mov	r3, r5
  tcp_port++;
 801a728:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a72a:	4560      	cmp	r0, ip
 801a72c:	bf08      	it	eq
 801a72e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	b913      	cbnz	r3, 801a73c <tcp_new_port+0x2c>
 801a736:	e00b      	b.n	801a750 <tcp_new_port+0x40>
 801a738:	68db      	ldr	r3, [r3, #12]
 801a73a:	b14b      	cbz	r3, 801a750 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801a73c:	8ada      	ldrh	r2, [r3, #22]
 801a73e:	4282      	cmp	r2, r0
 801a740:	d1fa      	bne.n	801a738 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a742:	3901      	subs	r1, #1
 801a744:	b289      	uxth	r1, r1
 801a746:	2900      	cmp	r1, #0
 801a748:	d1eb      	bne.n	801a722 <tcp_new_port+0x12>
 801a74a:	8038      	strh	r0, [r7, #0]
          return 0;
 801a74c:	4608      	mov	r0, r1
 801a74e:	e005      	b.n	801a75c <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a750:	42b4      	cmp	r4, r6
 801a752:	d002      	beq.n	801a75a <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a754:	f854 3b04 	ldr.w	r3, [r4], #4
 801a758:	e7eb      	b.n	801a732 <tcp_new_port+0x22>
 801a75a:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801a75c:	bcf0      	pop	{r4, r5, r6, r7}
 801a75e:	4770      	bx	lr
 801a760:	20000410 	.word	0x20000410
 801a764:	08042e88 	.word	0x08042e88
 801a768:	2002dbd8 	.word	0x2002dbd8
 801a76c:	08042e7c 	.word	0x08042e7c

0801a770 <tcp_close_shutdown_fin>:
{
 801a770:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a772:	4604      	mov	r4, r0
 801a774:	b310      	cbz	r0, 801a7bc <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801a776:	7d23      	ldrb	r3, [r4, #20]
 801a778:	2b04      	cmp	r3, #4
 801a77a:	d005      	beq.n	801a788 <tcp_close_shutdown_fin+0x18>
 801a77c:	2b07      	cmp	r3, #7
 801a77e:	d00e      	beq.n	801a79e <tcp_close_shutdown_fin+0x2e>
 801a780:	2b03      	cmp	r3, #3
 801a782:	d001      	beq.n	801a788 <tcp_close_shutdown_fin+0x18>
 801a784:	2000      	movs	r0, #0
}
 801a786:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801a788:	4620      	mov	r0, r4
 801a78a:	f003 fd33 	bl	801e1f4 <tcp_send_fin>
      if (err == ERR_OK) {
 801a78e:	b950      	cbnz	r0, 801a7a6 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801a790:	2305      	movs	r3, #5
 801a792:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801a794:	4620      	mov	r0, r4
 801a796:	f003 fe9d 	bl	801e4d4 <tcp_output>
 801a79a:	2000      	movs	r0, #0
}
 801a79c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801a79e:	4620      	mov	r0, r4
 801a7a0:	f003 fd28 	bl	801e1f4 <tcp_send_fin>
      if (err == ERR_OK) {
 801a7a4:	b138      	cbz	r0, 801a7b6 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801a7a6:	1c43      	adds	r3, r0, #1
 801a7a8:	d1ed      	bne.n	801a786 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a7aa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801a7ac:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801a7ae:	f043 0308 	orr.w	r3, r3, #8
 801a7b2:	8363      	strh	r3, [r4, #26]
}
 801a7b4:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801a7b6:	2309      	movs	r3, #9
 801a7b8:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801a7ba:	e7eb      	b.n	801a794 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801a7bc:	4b03      	ldr	r3, [pc, #12]	; (801a7cc <tcp_close_shutdown_fin+0x5c>)
 801a7be:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801a7c2:	4903      	ldr	r1, [pc, #12]	; (801a7d0 <tcp_close_shutdown_fin+0x60>)
 801a7c4:	4803      	ldr	r0, [pc, #12]	; (801a7d4 <tcp_close_shutdown_fin+0x64>)
 801a7c6:	f009 fd9d 	bl	8024304 <iprintf>
 801a7ca:	e7d4      	b.n	801a776 <tcp_close_shutdown_fin+0x6>
 801a7cc:	08042794 	.word	0x08042794
 801a7d0:	080427c4 	.word	0x080427c4
 801a7d4:	08028ab4 	.word	0x08028ab4

0801a7d8 <tcp_init>:
{
 801a7d8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a7da:	f009 fe37 	bl	802444c <rand>
 801a7de:	4b02      	ldr	r3, [pc, #8]	; (801a7e8 <tcp_init+0x10>)
 801a7e0:	4a02      	ldr	r2, [pc, #8]	; (801a7ec <tcp_init+0x14>)
 801a7e2:	4303      	orrs	r3, r0
 801a7e4:	8013      	strh	r3, [r2, #0]
}
 801a7e6:	bd08      	pop	{r3, pc}
 801a7e8:	ffffc000 	.word	0xffffc000
 801a7ec:	20000410 	.word	0x20000410

0801a7f0 <tcp_free>:
{
 801a7f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a7f2:	7d03      	ldrb	r3, [r0, #20]
{
 801a7f4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a7f6:	2b01      	cmp	r3, #1
 801a7f8:	d005      	beq.n	801a806 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	2002      	movs	r0, #2
}
 801a7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801a802:	f7fe bf9d 	b.w	8019740 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a806:	4906      	ldr	r1, [pc, #24]	; (801a820 <tcp_free+0x30>)
 801a808:	22d4      	movs	r2, #212	; 0xd4
 801a80a:	4b06      	ldr	r3, [pc, #24]	; (801a824 <tcp_free+0x34>)
 801a80c:	4806      	ldr	r0, [pc, #24]	; (801a828 <tcp_free+0x38>)
 801a80e:	f009 fd79 	bl	8024304 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801a812:	4621      	mov	r1, r4
 801a814:	2002      	movs	r0, #2
}
 801a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801a81a:	f7fe bf91 	b.w	8019740 <memp_free>
 801a81e:	bf00      	nop
 801a820:	080427d0 	.word	0x080427d0
 801a824:	08042794 	.word	0x08042794
 801a828:	08028ab4 	.word	0x08028ab4

0801a82c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801a82c:	2900      	cmp	r1, #0
{
 801a82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801a830:	4b26      	ldr	r3, [pc, #152]	; (801a8cc <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801a832:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801a834:	bf14      	ite	ne
 801a836:	460e      	movne	r6, r1
 801a838:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a83a:	2800      	cmp	r0, #0
 801a83c:	d03c      	beq.n	801a8b8 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801a83e:	7d03      	ldrb	r3, [r0, #20]
 801a840:	4607      	mov	r7, r0
 801a842:	bb7b      	cbnz	r3, 801a8a4 <tcp_bind+0x78>
  if (port == 0) {
 801a844:	b31a      	cbz	r2, 801a88e <tcp_bind+0x62>
 801a846:	4922      	ldr	r1, [pc, #136]	; (801a8d0 <tcp_bind+0xa4>)
 801a848:	4b22      	ldr	r3, [pc, #136]	; (801a8d4 <tcp_bind+0xa8>)
 801a84a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	b913      	cbnz	r3, 801a858 <tcp_bind+0x2c>
 801a852:	e00e      	b.n	801a872 <tcp_bind+0x46>
 801a854:	68db      	ldr	r3, [r3, #12]
 801a856:	b163      	cbz	r3, 801a872 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801a858:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801a85c:	4594      	cmp	ip, r2
 801a85e:	d1f9      	bne.n	801a854 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801a860:	681c      	ldr	r4, [r3, #0]
 801a862:	b11c      	cbz	r4, 801a86c <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801a864:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801a866:	b10d      	cbz	r5, 801a86c <tcp_bind+0x40>
 801a868:	42ac      	cmp	r4, r5
 801a86a:	d1f3      	bne.n	801a854 <tcp_bind+0x28>
              return ERR_USE;
 801a86c:	f06f 0007 	mvn.w	r0, #7
}
 801a870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801a872:	4281      	cmp	r1, r0
 801a874:	d113      	bne.n	801a89e <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801a876:	6833      	ldr	r3, [r6, #0]
 801a878:	b103      	cbz	r3, 801a87c <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801a87a:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801a87c:	4b16      	ldr	r3, [pc, #88]	; (801a8d8 <tcp_bind+0xac>)
  pcb->local_port = port;
 801a87e:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	601f      	str	r7, [r3, #0]
 801a884:	60fa      	str	r2, [r7, #12]
 801a886:	f004 f951 	bl	801eb2c <tcp_timer_needed>
  return ERR_OK;
 801a88a:	2000      	movs	r0, #0
}
 801a88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801a88e:	f7ff ff3f 	bl	801a710 <tcp_new_port>
    if (port == 0) {
 801a892:	4602      	mov	r2, r0
 801a894:	2800      	cmp	r0, #0
 801a896:	d1ee      	bne.n	801a876 <tcp_bind+0x4a>
      return ERR_BUF;
 801a898:	f06f 0001 	mvn.w	r0, #1
}
 801a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801a89e:	f851 3b04 	ldr.w	r3, [r1], #4
 801a8a2:	e7d4      	b.n	801a84e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801a8a4:	4b0d      	ldr	r3, [pc, #52]	; (801a8dc <tcp_bind+0xb0>)
 801a8a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a8aa:	490d      	ldr	r1, [pc, #52]	; (801a8e0 <tcp_bind+0xb4>)
 801a8ac:	480d      	ldr	r0, [pc, #52]	; (801a8e4 <tcp_bind+0xb8>)
 801a8ae:	f009 fd29 	bl	8024304 <iprintf>
 801a8b2:	f06f 0005 	mvn.w	r0, #5
}
 801a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a8b8:	4b08      	ldr	r3, [pc, #32]	; (801a8dc <tcp_bind+0xb0>)
 801a8ba:	f240 22a9 	movw	r2, #681	; 0x2a9
 801a8be:	490a      	ldr	r1, [pc, #40]	; (801a8e8 <tcp_bind+0xbc>)
 801a8c0:	4808      	ldr	r0, [pc, #32]	; (801a8e4 <tcp_bind+0xb8>)
 801a8c2:	f009 fd1f 	bl	8024304 <iprintf>
 801a8c6:	f06f 000f 	mvn.w	r0, #15
}
 801a8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8cc:	080443ac 	.word	0x080443ac
 801a8d0:	08042e7c 	.word	0x08042e7c
 801a8d4:	2002dbd8 	.word	0x2002dbd8
 801a8d8:	2002dbd4 	.word	0x2002dbd4
 801a8dc:	08042794 	.word	0x08042794
 801a8e0:	080427fc 	.word	0x080427fc
 801a8e4:	08028ab4 	.word	0x08028ab4
 801a8e8:	080427e4 	.word	0x080427e4

0801a8ec <tcp_listen_with_backlog_and_err>:
{
 801a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a8ee:	4604      	mov	r4, r0
{
 801a8f0:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a8f2:	2800      	cmp	r0, #0
 801a8f4:	d060      	beq.n	801a9b8 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a8f6:	7d05      	ldrb	r5, [r0, #20]
 801a8f8:	2d00      	cmp	r5, #0
 801a8fa:	d14a      	bne.n	801a992 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801a8fc:	f240 3272 	movw	r2, #882	; 0x372
 801a900:	4933      	ldr	r1, [pc, #204]	; (801a9d0 <tcp_listen_with_backlog_and_err+0xe4>)
 801a902:	2003      	movs	r0, #3
 801a904:	f7fe fee6 	bl	80196d4 <memp_malloc_fn>
  if (lpcb == NULL) {
 801a908:	4606      	mov	r6, r0
 801a90a:	2800      	cmp	r0, #0
 801a90c:	d051      	beq.n	801a9b2 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801a90e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801a910:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801a912:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801a914:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801a916:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801a918:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801a91a:	7d62      	ldrb	r2, [r4, #21]
 801a91c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801a91e:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801a920:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801a922:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801a924:	7ae2      	ldrb	r2, [r4, #11]
 801a926:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801a928:	7aa2      	ldrb	r2, [r4, #10]
 801a92a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801a92c:	6822      	ldr	r2, [r4, #0]
 801a92e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801a930:	b99b      	cbnz	r3, 801a95a <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a932:	7d23      	ldrb	r3, [r4, #20]
 801a934:	2b01      	cmp	r3, #1
 801a936:	d020      	beq.n	801a97a <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801a938:	4621      	mov	r1, r4
 801a93a:	2002      	movs	r0, #2
 801a93c:	f7fe ff00 	bl	8019740 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a940:	4b24      	ldr	r3, [pc, #144]	; (801a9d4 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801a942:	4925      	ldr	r1, [pc, #148]	; (801a9d8 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a944:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801a946:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a948:	60f2      	str	r2, [r6, #12]
 801a94a:	601e      	str	r6, [r3, #0]
 801a94c:	f004 f8ee 	bl	801eb2c <tcp_timer_needed>
  res = ERR_OK;
 801a950:	2300      	movs	r3, #0
  if (err != NULL) {
 801a952:	b107      	cbz	r7, 801a956 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801a954:	703b      	strb	r3, [r7, #0]
}
 801a956:	4630      	mov	r0, r6
 801a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a95a:	4a20      	ldr	r2, [pc, #128]	; (801a9dc <tcp_listen_with_backlog_and_err+0xf0>)
 801a95c:	6813      	ldr	r3, [r2, #0]
 801a95e:	42a3      	cmp	r3, r4
 801a960:	d012      	beq.n	801a988 <tcp_listen_with_backlog_and_err+0x9c>
 801a962:	b12b      	cbz	r3, 801a970 <tcp_listen_with_backlog_and_err+0x84>
 801a964:	68d9      	ldr	r1, [r3, #12]
 801a966:	42a1      	cmp	r1, r4
 801a968:	d01e      	beq.n	801a9a8 <tcp_listen_with_backlog_and_err+0xbc>
 801a96a:	460b      	mov	r3, r1
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d1f9      	bne.n	801a964 <tcp_listen_with_backlog_and_err+0x78>
 801a970:	2300      	movs	r3, #0
 801a972:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a974:	7d23      	ldrb	r3, [r4, #20]
 801a976:	2b01      	cmp	r3, #1
 801a978:	d1de      	bne.n	801a938 <tcp_listen_with_backlog_and_err+0x4c>
 801a97a:	4b15      	ldr	r3, [pc, #84]	; (801a9d0 <tcp_listen_with_backlog_and_err+0xe4>)
 801a97c:	22d4      	movs	r2, #212	; 0xd4
 801a97e:	4918      	ldr	r1, [pc, #96]	; (801a9e0 <tcp_listen_with_backlog_and_err+0xf4>)
 801a980:	4818      	ldr	r0, [pc, #96]	; (801a9e4 <tcp_listen_with_backlog_and_err+0xf8>)
 801a982:	f009 fcbf 	bl	8024304 <iprintf>
 801a986:	e7d7      	b.n	801a938 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a988:	68e3      	ldr	r3, [r4, #12]
 801a98a:	6013      	str	r3, [r2, #0]
 801a98c:	2300      	movs	r3, #0
 801a98e:	60e3      	str	r3, [r4, #12]
 801a990:	e7f0      	b.n	801a974 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a992:	4b0f      	ldr	r3, [pc, #60]	; (801a9d0 <tcp_listen_with_backlog_and_err+0xe4>)
 801a994:	f240 325a 	movw	r2, #858	; 0x35a
 801a998:	4913      	ldr	r1, [pc, #76]	; (801a9e8 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801a99a:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801a99c:	4811      	ldr	r0, [pc, #68]	; (801a9e4 <tcp_listen_with_backlog_and_err+0xf8>)
 801a99e:	f009 fcb1 	bl	8024304 <iprintf>
 801a9a2:	f06f 030e 	mvn.w	r3, #14
 801a9a6:	e7d4      	b.n	801a952 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a9a8:	68e2      	ldr	r2, [r4, #12]
 801a9aa:	60da      	str	r2, [r3, #12]
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	60e3      	str	r3, [r4, #12]
 801a9b0:	e7e0      	b.n	801a974 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b6:	e7cc      	b.n	801a952 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a9b8:	4b05      	ldr	r3, [pc, #20]	; (801a9d0 <tcp_listen_with_backlog_and_err+0xe4>)
 801a9ba:	f240 3259 	movw	r2, #857	; 0x359
 801a9be:	490b      	ldr	r1, [pc, #44]	; (801a9ec <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801a9c0:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801a9c2:	4808      	ldr	r0, [pc, #32]	; (801a9e4 <tcp_listen_with_backlog_and_err+0xf8>)
 801a9c4:	f009 fc9e 	bl	8024304 <iprintf>
 801a9c8:	f06f 030f 	mvn.w	r3, #15
 801a9cc:	e7c1      	b.n	801a952 <tcp_listen_with_backlog_and_err+0x66>
 801a9ce:	bf00      	nop
 801a9d0:	08042794 	.word	0x08042794
 801a9d4:	2002dbd8 	.word	0x2002dbd8
 801a9d8:	0801b681 	.word	0x0801b681
 801a9dc:	2002dbd4 	.word	0x2002dbd4
 801a9e0:	080427d0 	.word	0x080427d0
 801a9e4:	08028ab4 	.word	0x08028ab4
 801a9e8:	08042854 	.word	0x08042854
 801a9ec:	08042824 	.word	0x08042824

0801a9f0 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	f7ff bf7b 	b.w	801a8ec <tcp_listen_with_backlog_and_err>
 801a9f6:	bf00      	nop

0801a9f8 <tcp_update_rcv_ann_wnd>:
{
 801a9f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a9fa:	4604      	mov	r4, r0
 801a9fc:	b1c0      	cbz	r0, 801aa30 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a9fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801aa00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801aa02:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801aa06:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801aa08:	1ad0      	subs	r0, r2, r3
 801aa0a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801aa0e:	4428      	add	r0, r5
 801aa10:	bf94      	ite	ls
 801aa12:	eba0 010c 	subls.w	r1, r0, ip
 801aa16:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801aa1a:	2900      	cmp	r1, #0
 801aa1c:	db01      	blt.n	801aa22 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801aa1e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801aa20:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801aa22:	1aea      	subs	r2, r5, r3
 801aa24:	2a00      	cmp	r2, #0
 801aa26:	dd0b      	ble.n	801aa40 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801aa28:	2300      	movs	r3, #0
    return 0;
 801aa2a:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801aa2c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801aa2e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801aa30:	4b0b      	ldr	r3, [pc, #44]	; (801aa60 <tcp_update_rcv_ann_wnd+0x68>)
 801aa32:	f240 32a6 	movw	r2, #934	; 0x3a6
 801aa36:	490b      	ldr	r1, [pc, #44]	; (801aa64 <tcp_update_rcv_ann_wnd+0x6c>)
 801aa38:	480b      	ldr	r0, [pc, #44]	; (801aa68 <tcp_update_rcv_ann_wnd+0x70>)
 801aa3a:	f009 fc63 	bl	8024304 <iprintf>
 801aa3e:	e7de      	b.n	801a9fe <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801aa40:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801aa42:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801aa46:	d202      	bcs.n	801aa4e <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801aa48:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801aa4a:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801aa4c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801aa4e:	4b04      	ldr	r3, [pc, #16]	; (801aa60 <tcp_update_rcv_ann_wnd+0x68>)
 801aa50:	f240 32b6 	movw	r2, #950	; 0x3b6
 801aa54:	4905      	ldr	r1, [pc, #20]	; (801aa6c <tcp_update_rcv_ann_wnd+0x74>)
 801aa56:	4804      	ldr	r0, [pc, #16]	; (801aa68 <tcp_update_rcv_ann_wnd+0x70>)
 801aa58:	f009 fc54 	bl	8024304 <iprintf>
 801aa5c:	e7f4      	b.n	801aa48 <tcp_update_rcv_ann_wnd+0x50>
 801aa5e:	bf00      	nop
 801aa60:	08042794 	.word	0x08042794
 801aa64:	0804288c 	.word	0x0804288c
 801aa68:	08028ab4 	.word	0x08028ab4
 801aa6c:	080428b0 	.word	0x080428b0

0801aa70 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801aa70:	b340      	cbz	r0, 801aac4 <tcp_recved+0x54>
{
 801aa72:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801aa74:	7d03      	ldrb	r3, [r0, #20]
 801aa76:	4605      	mov	r5, r0
 801aa78:	460c      	mov	r4, r1
 801aa7a:	2b01      	cmp	r3, #1
 801aa7c:	d01a      	beq.n	801aab4 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801aa7e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801aa80:	1919      	adds	r1, r3, r4
 801aa82:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801aa84:	428b      	cmp	r3, r1
 801aa86:	d802      	bhi.n	801aa8e <tcp_recved+0x1e>
 801aa88:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801aa8c:	d901      	bls.n	801aa92 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801aa8e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801aa92:	4628      	mov	r0, r5
 801aa94:	8529      	strh	r1, [r5, #40]	; 0x28
 801aa96:	f7ff ffaf 	bl	801a9f8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801aa9a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801aa9e:	d200      	bcs.n	801aaa2 <tcp_recved+0x32>
}
 801aaa0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801aaa2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801aaa4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801aaa6:	f043 0302 	orr.w	r3, r3, #2
 801aaaa:	836b      	strh	r3, [r5, #26]
}
 801aaac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801aab0:	f003 bd10 	b.w	801e4d4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801aab4:	4b07      	ldr	r3, [pc, #28]	; (801aad4 <tcp_recved+0x64>)
 801aab6:	f240 32d2 	movw	r2, #978	; 0x3d2
 801aaba:	4907      	ldr	r1, [pc, #28]	; (801aad8 <tcp_recved+0x68>)
 801aabc:	4807      	ldr	r0, [pc, #28]	; (801aadc <tcp_recved+0x6c>)
 801aabe:	f009 fc21 	bl	8024304 <iprintf>
 801aac2:	e7dc      	b.n	801aa7e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801aac4:	4b03      	ldr	r3, [pc, #12]	; (801aad4 <tcp_recved+0x64>)
 801aac6:	f240 32cf 	movw	r2, #975	; 0x3cf
 801aaca:	4905      	ldr	r1, [pc, #20]	; (801aae0 <tcp_recved+0x70>)
 801aacc:	4803      	ldr	r0, [pc, #12]	; (801aadc <tcp_recved+0x6c>)
 801aace:	f009 bc19 	b.w	8024304 <iprintf>
 801aad2:	bf00      	nop
 801aad4:	08042794 	.word	0x08042794
 801aad8:	080428e4 	.word	0x080428e4
 801aadc:	08028ab4 	.word	0x08028ab4
 801aae0:	080428cc 	.word	0x080428cc

0801aae4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801aae6:	2800      	cmp	r0, #0
 801aae8:	f000 808c 	beq.w	801ac04 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801aaec:	2900      	cmp	r1, #0
 801aaee:	d07f      	beq.n	801abf0 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801aaf0:	461e      	mov	r6, r3
 801aaf2:	7d03      	ldrb	r3, [r0, #20]
 801aaf4:	4604      	mov	r4, r0
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d16a      	bne.n	801abd0 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801aafa:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801aafc:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801aafe:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801ab00:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801ab02:	2800      	cmp	r0, #0
 801ab04:	d049      	beq.n	801ab9a <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801ab06:	f7ff f80d 	bl	8019b24 <netif_get_by_index>
 801ab0a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801ab0c:	2d00      	cmp	r5, #0
 801ab0e:	d06c      	beq.n	801abea <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ab10:	6823      	ldr	r3, [r4, #0]
 801ab12:	b90b      	cbnz	r3, 801ab18 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ab14:	686b      	ldr	r3, [r5, #4]
 801ab16:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801ab18:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801ab1a:	b927      	cbnz	r7, 801ab26 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801ab1c:	f7ff fdf8 	bl	801a710 <tcp_new_port>
 801ab20:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801ab22:	2800      	cmp	r0, #0
 801ab24:	d05e      	beq.n	801abe4 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801ab26:	4b3c      	ldr	r3, [pc, #240]	; (801ac18 <tcp_connect+0x134>)
 801ab28:	4a3c      	ldr	r2, [pc, #240]	; (801ac1c <tcp_connect+0x138>)
 801ab2a:	6811      	ldr	r1, [r2, #0]
 801ab2c:	681a      	ldr	r2, [r3, #0]
 801ab2e:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801ab30:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801ab34:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801ab36:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801ab38:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801ab3a:	4b39      	ldr	r3, [pc, #228]	; (801ac20 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801ab3c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801ab3e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801ab40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801ab42:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801ab46:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801ab4e:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d037      	beq.n	801abc4 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801ab54:	2b28      	cmp	r3, #40	; 0x28
 801ab56:	d907      	bls.n	801ab68 <tcp_connect+0x84>
 801ab58:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801ab5c:	b292      	uxth	r2, r2
 801ab5e:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801ab62:	bf28      	it	cs
 801ab64:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801ab68:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801ab6a:	2102      	movs	r1, #2
 801ab6c:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801ab6e:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801ab70:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801ab74:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801ab78:	f003 fa90 	bl	801e09c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801ab7c:	4605      	mov	r5, r0
 801ab7e:	b9f8      	cbnz	r0, 801abc0 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801ab80:	2302      	movs	r3, #2
 801ab82:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801ab84:	b187      	cbz	r7, 801aba8 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801ab86:	4a27      	ldr	r2, [pc, #156]	; (801ac24 <tcp_connect+0x140>)
 801ab88:	6813      	ldr	r3, [r2, #0]
 801ab8a:	42a3      	cmp	r3, r4
 801ab8c:	d01d      	beq.n	801abca <tcp_connect+0xe6>
 801ab8e:	b15b      	cbz	r3, 801aba8 <tcp_connect+0xc4>
 801ab90:	68da      	ldr	r2, [r3, #12]
 801ab92:	42a2      	cmp	r2, r4
 801ab94:	d006      	beq.n	801aba4 <tcp_connect+0xc0>
 801ab96:	4613      	mov	r3, r2
 801ab98:	e7f9      	b.n	801ab8e <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801ab9a:	1d20      	adds	r0, r4, #4
 801ab9c:	f006 fee4 	bl	8021968 <ip4_route>
 801aba0:	4605      	mov	r5, r0
 801aba2:	e7b3      	b.n	801ab0c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801aba4:	68e2      	ldr	r2, [r4, #12]
 801aba6:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801aba8:	4b1f      	ldr	r3, [pc, #124]	; (801ac28 <tcp_connect+0x144>)
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	601c      	str	r4, [r3, #0]
 801abae:	60e2      	str	r2, [r4, #12]
 801abb0:	f003 ffbc 	bl	801eb2c <tcp_timer_needed>
 801abb4:	4b1d      	ldr	r3, [pc, #116]	; (801ac2c <tcp_connect+0x148>)
 801abb6:	2201      	movs	r2, #1
    tcp_output(pcb);
 801abb8:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801abba:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801abbc:	f003 fc8a 	bl	801e4d4 <tcp_output>
}
 801abc0:	4628      	mov	r0, r5
 801abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc4:	f44f 7206 	mov.w	r2, #536	; 0x218
 801abc8:	e7ce      	b.n	801ab68 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801abca:	68e3      	ldr	r3, [r4, #12]
 801abcc:	6013      	str	r3, [r2, #0]
 801abce:	e7eb      	b.n	801aba8 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801abd0:	4b17      	ldr	r3, [pc, #92]	; (801ac30 <tcp_connect+0x14c>)
 801abd2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801abd6:	4917      	ldr	r1, [pc, #92]	; (801ac34 <tcp_connect+0x150>)
 801abd8:	f06f 0509 	mvn.w	r5, #9
 801abdc:	4816      	ldr	r0, [pc, #88]	; (801ac38 <tcp_connect+0x154>)
 801abde:	f009 fb91 	bl	8024304 <iprintf>
 801abe2:	e7ed      	b.n	801abc0 <tcp_connect+0xdc>
      return ERR_BUF;
 801abe4:	f06f 0501 	mvn.w	r5, #1
 801abe8:	e7ea      	b.n	801abc0 <tcp_connect+0xdc>
    return ERR_RTE;
 801abea:	f06f 0503 	mvn.w	r5, #3
 801abee:	e7e7      	b.n	801abc0 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801abf0:	4b0f      	ldr	r3, [pc, #60]	; (801ac30 <tcp_connect+0x14c>)
 801abf2:	f240 4236 	movw	r2, #1078	; 0x436
 801abf6:	4911      	ldr	r1, [pc, #68]	; (801ac3c <tcp_connect+0x158>)
 801abf8:	f06f 050f 	mvn.w	r5, #15
 801abfc:	480e      	ldr	r0, [pc, #56]	; (801ac38 <tcp_connect+0x154>)
 801abfe:	f009 fb81 	bl	8024304 <iprintf>
 801ac02:	e7dd      	b.n	801abc0 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ac04:	4b0a      	ldr	r3, [pc, #40]	; (801ac30 <tcp_connect+0x14c>)
 801ac06:	f240 4235 	movw	r2, #1077	; 0x435
 801ac0a:	490d      	ldr	r1, [pc, #52]	; (801ac40 <tcp_connect+0x15c>)
 801ac0c:	f06f 050f 	mvn.w	r5, #15
 801ac10:	4809      	ldr	r0, [pc, #36]	; (801ac38 <tcp_connect+0x154>)
 801ac12:	f009 fb77 	bl	8024304 <iprintf>
 801ac16:	e7d3      	b.n	801abc0 <tcp_connect+0xdc>
 801ac18:	2000040c 	.word	0x2000040c
 801ac1c:	2002dbdc 	.word	0x2002dbdc
 801ac20:	08600860 	.word	0x08600860
 801ac24:	2002dbd4 	.word	0x2002dbd4
 801ac28:	2002dbcc 	.word	0x2002dbcc
 801ac2c:	2002dbd0 	.word	0x2002dbd0
 801ac30:	08042794 	.word	0x08042794
 801ac34:	08042944 	.word	0x08042944
 801ac38:	08028ab4 	.word	0x08028ab4
 801ac3c:	08042928 	.word	0x08042928
 801ac40:	0804290c 	.word	0x0804290c

0801ac44 <tcp_segs_free>:
  while (seg != NULL) {
 801ac44:	b170      	cbz	r0, 801ac64 <tcp_segs_free+0x20>
{
 801ac46:	b538      	push	{r3, r4, r5, lr}
 801ac48:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801ac4a:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801ac4c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ac4e:	6868      	ldr	r0, [r5, #4]
 801ac50:	b108      	cbz	r0, 801ac56 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801ac52:	f7ff fa8d 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ac56:	4629      	mov	r1, r5
 801ac58:	2004      	movs	r0, #4
 801ac5a:	f7fe fd71 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801ac5e:	2c00      	cmp	r4, #0
 801ac60:	d1f3      	bne.n	801ac4a <tcp_segs_free+0x6>
}
 801ac62:	bd38      	pop	{r3, r4, r5, pc}
 801ac64:	4770      	bx	lr
 801ac66:	bf00      	nop

0801ac68 <tcp_seg_free>:
  if (seg != NULL) {
 801ac68:	b158      	cbz	r0, 801ac82 <tcp_seg_free+0x1a>
{
 801ac6a:	b510      	push	{r4, lr}
 801ac6c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801ac6e:	6840      	ldr	r0, [r0, #4]
 801ac70:	b108      	cbz	r0, 801ac76 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801ac72:	f7ff fa7d 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ac76:	4621      	mov	r1, r4
 801ac78:	2004      	movs	r0, #4
}
 801ac7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801ac7e:	f7fe bd5f 	b.w	8019740 <memp_free>
 801ac82:	4770      	bx	lr

0801ac84 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801ac84:	b108      	cbz	r0, 801ac8a <tcp_setprio+0x6>
  pcb->prio = prio;
 801ac86:	7541      	strb	r1, [r0, #21]
}
 801ac88:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801ac8a:	4b03      	ldr	r3, [pc, #12]	; (801ac98 <tcp_setprio+0x14>)
 801ac8c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801ac90:	4902      	ldr	r1, [pc, #8]	; (801ac9c <tcp_setprio+0x18>)
 801ac92:	4803      	ldr	r0, [pc, #12]	; (801aca0 <tcp_setprio+0x1c>)
 801ac94:	f009 bb36 	b.w	8024304 <iprintf>
 801ac98:	08042794 	.word	0x08042794
 801ac9c:	08042974 	.word	0x08042974
 801aca0:	08028ab4 	.word	0x08028ab4

0801aca4 <tcp_seg_copy>:
{
 801aca4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801aca6:	4605      	mov	r5, r0
 801aca8:	b1a0      	cbz	r0, 801acd4 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801acaa:	f240 6284 	movw	r2, #1668	; 0x684
 801acae:	490d      	ldr	r1, [pc, #52]	; (801ace4 <tcp_seg_copy+0x40>)
 801acb0:	2004      	movs	r0, #4
 801acb2:	f7fe fd0f 	bl	80196d4 <memp_malloc_fn>
  if (cseg == NULL) {
 801acb6:	4604      	mov	r4, r0
 801acb8:	b150      	cbz	r0, 801acd0 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801acba:	6868      	ldr	r0, [r5, #4]
 801acbc:	6829      	ldr	r1, [r5, #0]
 801acbe:	68aa      	ldr	r2, [r5, #8]
 801acc0:	68eb      	ldr	r3, [r5, #12]
 801acc2:	6060      	str	r0, [r4, #4]
 801acc4:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801acc6:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801acc8:	60a2      	str	r2, [r4, #8]
 801acca:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801accc:	f7ff fa6e 	bl	801a1ac <pbuf_ref>
}
 801acd0:	4620      	mov	r0, r4
 801acd2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801acd4:	4b03      	ldr	r3, [pc, #12]	; (801ace4 <tcp_seg_copy+0x40>)
 801acd6:	f240 6282 	movw	r2, #1666	; 0x682
 801acda:	4903      	ldr	r1, [pc, #12]	; (801ace8 <tcp_seg_copy+0x44>)
 801acdc:	4803      	ldr	r0, [pc, #12]	; (801acec <tcp_seg_copy+0x48>)
 801acde:	f009 fb11 	bl	8024304 <iprintf>
 801ace2:	e7e2      	b.n	801acaa <tcp_seg_copy+0x6>
 801ace4:	08042794 	.word	0x08042794
 801ace8:	08042990 	.word	0x08042990
 801acec:	08028ab4 	.word	0x08028ab4

0801acf0 <tcp_arg>:
  if (pcb != NULL) {
 801acf0:	b100      	cbz	r0, 801acf4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801acf2:	6101      	str	r1, [r0, #16]
}
 801acf4:	4770      	bx	lr
 801acf6:	bf00      	nop

0801acf8 <tcp_recv>:
  if (pcb != NULL) {
 801acf8:	b140      	cbz	r0, 801ad0c <tcp_recv+0x14>
{
 801acfa:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801acfc:	7d03      	ldrb	r3, [r0, #20]
 801acfe:	4604      	mov	r4, r0
 801ad00:	460d      	mov	r5, r1
 801ad02:	2b01      	cmp	r3, #1
 801ad04:	d003      	beq.n	801ad0e <tcp_recv+0x16>
    pcb->recv = recv;
 801ad06:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801ad0a:	bd38      	pop	{r3, r4, r5, pc}
 801ad0c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ad0e:	4b05      	ldr	r3, [pc, #20]	; (801ad24 <tcp_recv+0x2c>)
 801ad10:	f240 72df 	movw	r2, #2015	; 0x7df
 801ad14:	4904      	ldr	r1, [pc, #16]	; (801ad28 <tcp_recv+0x30>)
 801ad16:	4805      	ldr	r0, [pc, #20]	; (801ad2c <tcp_recv+0x34>)
 801ad18:	f009 faf4 	bl	8024304 <iprintf>
    pcb->recv = recv;
 801ad1c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801ad20:	bd38      	pop	{r3, r4, r5, pc}
 801ad22:	bf00      	nop
 801ad24:	08042794 	.word	0x08042794
 801ad28:	080429ac 	.word	0x080429ac
 801ad2c:	08028ab4 	.word	0x08028ab4

0801ad30 <tcp_sent>:
  if (pcb != NULL) {
 801ad30:	b140      	cbz	r0, 801ad44 <tcp_sent+0x14>
{
 801ad32:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ad34:	7d03      	ldrb	r3, [r0, #20]
 801ad36:	4604      	mov	r4, r0
 801ad38:	460d      	mov	r5, r1
 801ad3a:	2b01      	cmp	r3, #1
 801ad3c:	d003      	beq.n	801ad46 <tcp_sent+0x16>
    pcb->sent = sent;
 801ad3e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801ad42:	bd38      	pop	{r3, r4, r5, pc}
 801ad44:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ad46:	4b05      	ldr	r3, [pc, #20]	; (801ad5c <tcp_sent+0x2c>)
 801ad48:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801ad4c:	4904      	ldr	r1, [pc, #16]	; (801ad60 <tcp_sent+0x30>)
 801ad4e:	4805      	ldr	r0, [pc, #20]	; (801ad64 <tcp_sent+0x34>)
 801ad50:	f009 fad8 	bl	8024304 <iprintf>
    pcb->sent = sent;
 801ad54:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801ad58:	bd38      	pop	{r3, r4, r5, pc}
 801ad5a:	bf00      	nop
 801ad5c:	08042794 	.word	0x08042794
 801ad60:	080429d4 	.word	0x080429d4
 801ad64:	08028ab4 	.word	0x08028ab4

0801ad68 <tcp_err>:
  if (pcb != NULL) {
 801ad68:	b140      	cbz	r0, 801ad7c <tcp_err+0x14>
{
 801ad6a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ad6c:	7d03      	ldrb	r3, [r0, #20]
 801ad6e:	4604      	mov	r4, r0
 801ad70:	460d      	mov	r5, r1
 801ad72:	2b01      	cmp	r3, #1
 801ad74:	d003      	beq.n	801ad7e <tcp_err+0x16>
    pcb->errf = err;
 801ad76:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801ad7a:	bd38      	pop	{r3, r4, r5, pc}
 801ad7c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ad7e:	4b05      	ldr	r3, [pc, #20]	; (801ad94 <tcp_err+0x2c>)
 801ad80:	f640 020d 	movw	r2, #2061	; 0x80d
 801ad84:	4904      	ldr	r1, [pc, #16]	; (801ad98 <tcp_err+0x30>)
 801ad86:	4805      	ldr	r0, [pc, #20]	; (801ad9c <tcp_err+0x34>)
 801ad88:	f009 fabc 	bl	8024304 <iprintf>
    pcb->errf = err;
 801ad8c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801ad90:	bd38      	pop	{r3, r4, r5, pc}
 801ad92:	bf00      	nop
 801ad94:	08042794 	.word	0x08042794
 801ad98:	080429fc 	.word	0x080429fc
 801ad9c:	08028ab4 	.word	0x08028ab4

0801ada0 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801ada0:	b118      	cbz	r0, 801adaa <tcp_accept+0xa>
 801ada2:	7d03      	ldrb	r3, [r0, #20]
 801ada4:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801ada6:	bf08      	it	eq
 801ada8:	6181      	streq	r1, [r0, #24]
}
 801adaa:	4770      	bx	lr

0801adac <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801adac:	b1a8      	cbz	r0, 801adda <tcp_poll+0x2e>
{
 801adae:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801adb0:	7d03      	ldrb	r3, [r0, #20]
 801adb2:	460e      	mov	r6, r1
 801adb4:	4604      	mov	r4, r0
 801adb6:	4615      	mov	r5, r2
 801adb8:	2b01      	cmp	r3, #1
 801adba:	d003      	beq.n	801adc4 <tcp_poll+0x18>
  pcb->poll = poll;
 801adbc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801adc0:	7765      	strb	r5, [r4, #29]
}
 801adc2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801adc4:	4b08      	ldr	r3, [pc, #32]	; (801ade8 <tcp_poll+0x3c>)
 801adc6:	f640 023e 	movw	r2, #2110	; 0x83e
 801adca:	4908      	ldr	r1, [pc, #32]	; (801adec <tcp_poll+0x40>)
 801adcc:	4808      	ldr	r0, [pc, #32]	; (801adf0 <tcp_poll+0x44>)
 801adce:	f009 fa99 	bl	8024304 <iprintf>
  pcb->poll = poll;
 801add2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801add6:	7765      	strb	r5, [r4, #29]
}
 801add8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801adda:	4b03      	ldr	r3, [pc, #12]	; (801ade8 <tcp_poll+0x3c>)
 801addc:	f640 023d 	movw	r2, #2109	; 0x83d
 801ade0:	4904      	ldr	r1, [pc, #16]	; (801adf4 <tcp_poll+0x48>)
 801ade2:	4803      	ldr	r0, [pc, #12]	; (801adf0 <tcp_poll+0x44>)
 801ade4:	f009 ba8e 	b.w	8024304 <iprintf>
 801ade8:	08042794 	.word	0x08042794
 801adec:	08042a3c 	.word	0x08042a3c
 801adf0:	08028ab4 	.word	0x08028ab4
 801adf4:	08042a24 	.word	0x08042a24

0801adf8 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801adf8:	2800      	cmp	r0, #0
 801adfa:	d041      	beq.n	801ae80 <tcp_pcb_purge+0x88>
{
 801adfc:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801adfe:	7d03      	ldrb	r3, [r0, #20]
 801ae00:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801ae02:	2b0a      	cmp	r3, #10
 801ae04:	d001      	beq.n	801ae0a <tcp_pcb_purge+0x12>
 801ae06:	2b01      	cmp	r3, #1
 801ae08:	d800      	bhi.n	801ae0c <tcp_pcb_purge+0x14>
}
 801ae0a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801ae0c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801ae0e:	b118      	cbz	r0, 801ae18 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801ae10:	f7ff f9ae 	bl	801a170 <pbuf_free>
      pcb->refused_data = NULL;
 801ae14:	2300      	movs	r3, #0
 801ae16:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801ae18:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801ae1a:	b164      	cbz	r4, 801ae36 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801ae1c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ae1e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ae20:	6870      	ldr	r0, [r6, #4]
 801ae22:	b108      	cbz	r0, 801ae28 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801ae24:	f7ff f9a4 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ae28:	4631      	mov	r1, r6
 801ae2a:	2004      	movs	r0, #4
 801ae2c:	f7fe fc88 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801ae30:	2c00      	cmp	r4, #0
 801ae32:	d1f3      	bne.n	801ae1c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801ae34:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801ae36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801ae3a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801ae3c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801ae3e:	b15c      	cbz	r4, 801ae58 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801ae40:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ae42:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ae44:	6870      	ldr	r0, [r6, #4]
 801ae46:	b108      	cbz	r0, 801ae4c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801ae48:	f7ff f992 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ae4c:	4631      	mov	r1, r6
 801ae4e:	2004      	movs	r0, #4
 801ae50:	f7fe fc76 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801ae54:	2c00      	cmp	r4, #0
 801ae56:	d1f3      	bne.n	801ae40 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801ae58:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801ae5a:	b15c      	cbz	r4, 801ae74 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801ae5c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801ae5e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801ae60:	6870      	ldr	r0, [r6, #4]
 801ae62:	b108      	cbz	r0, 801ae68 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801ae64:	f7ff f984 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801ae68:	4631      	mov	r1, r6
 801ae6a:	2004      	movs	r0, #4
 801ae6c:	f7fe fc68 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801ae70:	2c00      	cmp	r4, #0
 801ae72:	d1f3      	bne.n	801ae5c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801ae74:	2300      	movs	r3, #0
 801ae76:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801ae7a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801ae7e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801ae80:	4b03      	ldr	r3, [pc, #12]	; (801ae90 <tcp_pcb_purge+0x98>)
 801ae82:	f640 0251 	movw	r2, #2129	; 0x851
 801ae86:	4903      	ldr	r1, [pc, #12]	; (801ae94 <tcp_pcb_purge+0x9c>)
 801ae88:	4803      	ldr	r0, [pc, #12]	; (801ae98 <tcp_pcb_purge+0xa0>)
 801ae8a:	f009 ba3b 	b.w	8024304 <iprintf>
 801ae8e:	bf00      	nop
 801ae90:	08042794 	.word	0x08042794
 801ae94:	08042a5c 	.word	0x08042a5c
 801ae98:	08028ab4 	.word	0x08028ab4

0801ae9c <tcp_slowtmr>:
{
 801ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801aea0:	4da9      	ldr	r5, [pc, #676]	; (801b148 <tcp_slowtmr+0x2ac>)
{
 801aea2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801aea4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801b174 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801aea8:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801aeaa:	4fa8      	ldr	r7, [pc, #672]	; (801b14c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801aeac:	3301      	adds	r3, #1
 801aeae:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801aeb0:	f89b 3000 	ldrb.w	r3, [fp]
 801aeb4:	3301      	adds	r3, #1
 801aeb6:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801aeba:	4ba5      	ldr	r3, [pc, #660]	; (801b150 <tcp_slowtmr+0x2b4>)
 801aebc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801aebe:	2c00      	cmp	r4, #0
 801aec0:	f000 808a 	beq.w	801afd8 <tcp_slowtmr+0x13c>
  prev = NULL;
 801aec4:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801aec6:	46b1      	mov	r9, r6
 801aec8:	7d23      	ldrb	r3, [r4, #20]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	f000 80fc 	beq.w	801b0c8 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801aed0:	2b01      	cmp	r3, #1
 801aed2:	f000 8104 	beq.w	801b0de <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801aed6:	2b0a      	cmp	r3, #10
 801aed8:	f000 810c 	beq.w	801b0f4 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801aedc:	f89b 2000 	ldrb.w	r2, [fp]
 801aee0:	7fa3      	ldrb	r3, [r4, #30]
 801aee2:	4293      	cmp	r3, r2
 801aee4:	f000 8113 	beq.w	801b10e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801aee8:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801aeea:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801aeec:	2b02      	cmp	r3, #2
 801aeee:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801aef2:	f000 8112 	beq.w	801b11a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801aef6:	2a0b      	cmp	r2, #11
 801aef8:	f240 80cb 	bls.w	801b092 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801aefc:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801af00:	2b06      	cmp	r3, #6
 801af02:	f000 80b7 	beq.w	801b074 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801af06:	f894 a009 	ldrb.w	sl, [r4, #9]
 801af0a:	f01a 0a08 	ands.w	sl, sl, #8
 801af0e:	d01d      	beq.n	801af4c <tcp_slowtmr+0xb0>
 801af10:	2b04      	cmp	r3, #4
 801af12:	d007      	beq.n	801af24 <tcp_slowtmr+0x88>
 801af14:	f1a3 0307 	sub.w	r3, r3, #7
 801af18:	fab3 f383 	clz	r3, r3
 801af1c:	095b      	lsrs	r3, r3, #5
 801af1e:	2b00      	cmp	r3, #0
 801af20:	f000 80b4 	beq.w	801b08c <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801af24:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801af28:	4b8a      	ldr	r3, [pc, #552]	; (801b154 <tcp_slowtmr+0x2b8>)
 801af2a:	488b      	ldr	r0, [pc, #556]	; (801b158 <tcp_slowtmr+0x2bc>)
 801af2c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801af2e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801af30:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801af34:	6a20      	ldr	r0, [r4, #32]
 801af36:	1a12      	subs	r2, r2, r0
 801af38:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801af3c:	f240 8160 	bls.w	801b200 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801af40:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801af44:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801af48:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801af4c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801af4e:	b156      	cbz	r6, 801af66 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801af50:	682b      	ldr	r3, [r5, #0]
 801af52:	6a22      	ldr	r2, [r4, #32]
 801af54:	1a9a      	subs	r2, r3, r2
 801af56:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801af5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801af5e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801af62:	f080 80e1 	bcs.w	801b128 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801af66:	7d23      	ldrb	r3, [r4, #20]
 801af68:	2b03      	cmp	r3, #3
 801af6a:	d057      	beq.n	801b01c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801af6c:	2b09      	cmp	r3, #9
 801af6e:	d15a      	bne.n	801b026 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801af70:	682b      	ldr	r3, [r5, #0]
 801af72:	6a22      	ldr	r2, [r4, #32]
 801af74:	1a9b      	subs	r3, r3, r2
 801af76:	2bf0      	cmp	r3, #240	; 0xf0
 801af78:	d955      	bls.n	801b026 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801af7a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801af7c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801af80:	f7ff ff3a 	bl	801adf8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801af84:	4b72      	ldr	r3, [pc, #456]	; (801b150 <tcp_slowtmr+0x2b4>)
 801af86:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801af88:	f1b9 0f00 	cmp.w	r9, #0
 801af8c:	f000 817e 	beq.w	801b28c <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801af90:	42a3      	cmp	r3, r4
 801af92:	f000 81df 	beq.w	801b354 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801af96:	68e3      	ldr	r3, [r4, #12]
 801af98:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801af9c:	f1ba 0f00 	cmp.w	sl, #0
 801afa0:	f040 8147 	bne.w	801b232 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801afa4:	7d23      	ldrb	r3, [r4, #20]
 801afa6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801afa8:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801afac:	f000 8153 	beq.w	801b256 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801afb0:	4621      	mov	r1, r4
 801afb2:	2002      	movs	r0, #2
 801afb4:	f7fe fbc4 	bl	8019740 <memp_free>
      tcp_active_pcbs_changed = 0;
 801afb8:	4c68      	ldr	r4, [pc, #416]	; (801b15c <tcp_slowtmr+0x2c0>)
 801afba:	2300      	movs	r3, #0
 801afbc:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801afbe:	b13e      	cbz	r6, 801afd0 <tcp_slowtmr+0x134>
 801afc0:	f06f 010c 	mvn.w	r1, #12
 801afc4:	4650      	mov	r0, sl
 801afc6:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801afc8:	7823      	ldrb	r3, [r4, #0]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	f47f af75 	bne.w	801aeba <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801afd0:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801afd2:	2c00      	cmp	r4, #0
 801afd4:	f47f af78 	bne.w	801aec8 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801afd8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801b178 <tcp_slowtmr+0x2dc>
 801afdc:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801afe0:	b1cc      	cbz	r4, 801b016 <tcp_slowtmr+0x17a>
  prev = NULL;
 801afe2:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801afe4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801b14c <tcp_slowtmr+0x2b0>
 801afe8:	f8df a190 	ldr.w	sl, [pc, #400]	; 801b17c <tcp_slowtmr+0x2e0>
 801afec:	4f5c      	ldr	r7, [pc, #368]	; (801b160 <tcp_slowtmr+0x2c4>)
 801afee:	7d23      	ldrb	r3, [r4, #20]
 801aff0:	2b0a      	cmp	r3, #10
 801aff2:	d006      	beq.n	801b002 <tcp_slowtmr+0x166>
 801aff4:	4643      	mov	r3, r8
 801aff6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801affa:	4651      	mov	r1, sl
 801affc:	4638      	mov	r0, r7
 801affe:	f009 f981 	bl	8024304 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b002:	682b      	ldr	r3, [r5, #0]
 801b004:	6a22      	ldr	r2, [r4, #32]
 801b006:	1a9b      	subs	r3, r3, r2
 801b008:	2bf0      	cmp	r3, #240	; 0xf0
 801b00a:	f200 80d4 	bhi.w	801b1b6 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801b00e:	4626      	mov	r6, r4
 801b010:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b012:	2c00      	cmp	r4, #0
 801b014:	d1eb      	bne.n	801afee <tcp_slowtmr+0x152>
}
 801b016:	b007      	add	sp, #28
 801b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b01c:	682b      	ldr	r3, [r5, #0]
 801b01e:	6a22      	ldr	r2, [r4, #32]
 801b020:	1a9b      	subs	r3, r3, r2
 801b022:	2b28      	cmp	r3, #40	; 0x28
 801b024:	d8a9      	bhi.n	801af7a <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801b026:	f1b8 0f00 	cmp.w	r8, #0
 801b02a:	d1a6      	bne.n	801af7a <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801b02c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b02e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801b030:	3301      	adds	r3, #1
      pcb = pcb->next;
 801b032:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801b034:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801b036:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801b038:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b03a:	d815      	bhi.n	801b068 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801b03c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801b15c <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801b040:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801b044:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801b048:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	f000 80ce 	beq.w	801b1ee <tcp_slowtmr+0x352>
 801b052:	4621      	mov	r1, r4
 801b054:	6920      	ldr	r0, [r4, #16]
 801b056:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801b058:	f899 3000 	ldrb.w	r3, [r9]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	f47f af2c 	bne.w	801aeba <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801b062:	2800      	cmp	r0, #0
 801b064:	f000 80c3 	beq.w	801b1ee <tcp_slowtmr+0x352>
 801b068:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b06a:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801b06c:	2c00      	cmp	r4, #0
 801b06e:	f47f af2b 	bne.w	801aec8 <tcp_slowtmr+0x2c>
 801b072:	e7b1      	b.n	801afd8 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801b074:	8b63      	ldrh	r3, [r4, #26]
 801b076:	06db      	lsls	r3, r3, #27
 801b078:	d508      	bpl.n	801b08c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b07a:	682b      	ldr	r3, [r5, #0]
 801b07c:	6a22      	ldr	r2, [r4, #32]
 801b07e:	1a9b      	subs	r3, r3, r2
 801b080:	2b28      	cmp	r3, #40	; 0x28
 801b082:	d903      	bls.n	801b08c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801b084:	f108 0801 	add.w	r8, r8, #1
 801b088:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801b08c:	f04f 0a00 	mov.w	sl, #0
 801b090:	e75c      	b.n	801af4c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801b092:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801b096:	f1b8 0f00 	cmp.w	r8, #0
 801b09a:	d071      	beq.n	801b180 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b09c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b09e:	b133      	cbz	r3, 801b0ae <tcp_slowtmr+0x212>
 801b0a0:	463b      	mov	r3, r7
 801b0a2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801b0a6:	492f      	ldr	r1, [pc, #188]	; (801b164 <tcp_slowtmr+0x2c8>)
 801b0a8:	482d      	ldr	r0, [pc, #180]	; (801b160 <tcp_slowtmr+0x2c4>)
 801b0aa:	f009 f92b 	bl	8024304 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b0ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	f000 8171 	beq.w	801b398 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b0b6:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801b0ba:	2b0b      	cmp	r3, #11
 801b0bc:	f240 80d2 	bls.w	801b264 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801b0c0:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801b0c2:	f04f 0801 	mov.w	r8, #1
 801b0c6:	e71b      	b.n	801af00 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b0c8:	463b      	mov	r3, r7
 801b0ca:	f240 42be 	movw	r2, #1214	; 0x4be
 801b0ce:	4926      	ldr	r1, [pc, #152]	; (801b168 <tcp_slowtmr+0x2cc>)
 801b0d0:	4823      	ldr	r0, [pc, #140]	; (801b160 <tcp_slowtmr+0x2c4>)
 801b0d2:	f009 f917 	bl	8024304 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b0d6:	7d23      	ldrb	r3, [r4, #20]
 801b0d8:	2b01      	cmp	r3, #1
 801b0da:	f47f aefc 	bne.w	801aed6 <tcp_slowtmr+0x3a>
 801b0de:	463b      	mov	r3, r7
 801b0e0:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801b0e4:	4921      	ldr	r1, [pc, #132]	; (801b16c <tcp_slowtmr+0x2d0>)
 801b0e6:	481e      	ldr	r0, [pc, #120]	; (801b160 <tcp_slowtmr+0x2c4>)
 801b0e8:	f009 f90c 	bl	8024304 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b0ec:	7d23      	ldrb	r3, [r4, #20]
 801b0ee:	2b0a      	cmp	r3, #10
 801b0f0:	f47f aef4 	bne.w	801aedc <tcp_slowtmr+0x40>
 801b0f4:	463b      	mov	r3, r7
 801b0f6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b0fa:	491d      	ldr	r1, [pc, #116]	; (801b170 <tcp_slowtmr+0x2d4>)
 801b0fc:	4818      	ldr	r0, [pc, #96]	; (801b160 <tcp_slowtmr+0x2c4>)
 801b0fe:	f009 f901 	bl	8024304 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b102:	f89b 2000 	ldrb.w	r2, [fp]
 801b106:	7fa3      	ldrb	r3, [r4, #30]
 801b108:	4293      	cmp	r3, r2
 801b10a:	f47f aeed 	bne.w	801aee8 <tcp_slowtmr+0x4c>
      continue;
 801b10e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b110:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b112:	2c00      	cmp	r4, #0
 801b114:	f47f aed8 	bne.w	801aec8 <tcp_slowtmr+0x2c>
 801b118:	e75e      	b.n	801afd8 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b11a:	2a05      	cmp	r2, #5
 801b11c:	d9b9      	bls.n	801b092 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801b11e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801b122:	f04f 0801 	mov.w	r8, #1
 801b126:	e711      	b.n	801af4c <tcp_slowtmr+0xb0>
 801b128:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801b12a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801b12c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801b12e:	6860      	ldr	r0, [r4, #4]
 801b130:	b108      	cbz	r0, 801b136 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801b132:	f7ff f81d 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b136:	4621      	mov	r1, r4
 801b138:	2004      	movs	r0, #4
 801b13a:	f7fe fb01 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801b13e:	2e00      	cmp	r6, #0
 801b140:	d1f3      	bne.n	801b12a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801b142:	9c05      	ldr	r4, [sp, #20]
 801b144:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b146:	e70e      	b.n	801af66 <tcp_slowtmr+0xca>
 801b148:	2002dbdc 	.word	0x2002dbdc
 801b14c:	08042794 	.word	0x08042794
 801b150:	2002dbcc 	.word	0x2002dbcc
 801b154:	000a4cb8 	.word	0x000a4cb8
 801b158:	10624dd3 	.word	0x10624dd3
 801b15c:	2002dbd0 	.word	0x2002dbd0
 801b160:	08028ab4 	.word	0x08028ab4
 801b164:	08042b00 	.word	0x08042b00
 801b168:	08042a78 	.word	0x08042a78
 801b16c:	08042aa4 	.word	0x08042aa4
 801b170:	08042ad0 	.word	0x08042ad0
 801b174:	2002dbe1 	.word	0x2002dbe1
 801b178:	2002dbe4 	.word	0x2002dbe4
 801b17c:	08042bc4 	.word	0x08042bc4
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b180:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801b184:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801b188:	b291      	uxth	r1, r2
 801b18a:	4281      	cmp	r1, r0
 801b18c:	d802      	bhi.n	801b194 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801b18e:	1c4a      	adds	r2, r1, #1
 801b190:	b212      	sxth	r2, r2
 801b192:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801b194:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801b198:	4291      	cmp	r1, r2
 801b19a:	f73f aeb1 	bgt.w	801af00 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b19e:	4620      	mov	r0, r4
 801b1a0:	f003 f85a 	bl	801e258 <tcp_rexmit_rto_prepare>
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	f000 80a0 	beq.w	801b2ea <tcp_slowtmr+0x44e>
 801b1aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	f000 8098 	beq.w	801b2e2 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801b1b2:	7d23      	ldrb	r3, [r4, #20]
 801b1b4:	e6a4      	b.n	801af00 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f7ff fe1e 	bl	801adf8 <tcp_pcb_purge>
      if (prev != NULL) {
 801b1bc:	2e00      	cmp	r6, #0
 801b1be:	f000 80d1 	beq.w	801b364 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b1c2:	f8d9 3000 	ldr.w	r3, [r9]
 801b1c6:	42a3      	cmp	r3, r4
 801b1c8:	f000 80ee 	beq.w	801b3a8 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801b1cc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801b1d0:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b1d4:	7d23      	ldrb	r3, [r4, #20]
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	f000 80d7 	beq.w	801b38a <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801b1dc:	4621      	mov	r1, r4
      pcb = pcb->next;
 801b1de:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801b1e0:	2002      	movs	r0, #2
 801b1e2:	f7fe faad 	bl	8019740 <memp_free>
  while (pcb != NULL) {
 801b1e6:	2c00      	cmp	r4, #0
 801b1e8:	f47f af01 	bne.w	801afee <tcp_slowtmr+0x152>
 801b1ec:	e713      	b.n	801b016 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801b1ee:	4620      	mov	r0, r4
 801b1f0:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801b1f2:	4634      	mov	r4, r6
          tcp_output(prev);
 801b1f4:	f003 f96e 	bl	801e4d4 <tcp_output>
  while (pcb != NULL) {
 801b1f8:	2c00      	cmp	r4, #0
 801b1fa:	f47f ae65 	bne.w	801aec8 <tcp_slowtmr+0x2c>
 801b1fe:	e6eb      	b.n	801afd8 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b200:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801b204:	4870      	ldr	r0, [pc, #448]	; (801b3c8 <tcp_slowtmr+0x52c>)
 801b206:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b20a:	4b70      	ldr	r3, [pc, #448]	; (801b3cc <tcp_slowtmr+0x530>)
 801b20c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b210:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801b214:	f67f af3a 	bls.w	801b08c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801b218:	4620      	mov	r0, r4
 801b21a:	f003 fb91 	bl	801e940 <tcp_keepalive>
        if (err == ERR_OK) {
 801b21e:	2800      	cmp	r0, #0
 801b220:	f47f af34 	bne.w	801b08c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801b224:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801b228:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801b22a:	3301      	adds	r3, #1
 801b22c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801b230:	e68c      	b.n	801af4c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b232:	8b23      	ldrh	r3, [r4, #24]
 801b234:	4620      	mov	r0, r4
 801b236:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b238:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b23a:	9302      	str	r3, [sp, #8]
 801b23c:	8ae3      	ldrh	r3, [r4, #22]
 801b23e:	9301      	str	r3, [sp, #4]
 801b240:	1d23      	adds	r3, r4, #4
 801b242:	9300      	str	r3, [sp, #0]
 801b244:	4623      	mov	r3, r4
 801b246:	f003 f8cb 	bl	801e3e0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b24a:	7d23      	ldrb	r3, [r4, #20]
 801b24c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801b24e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b252:	f47f aead 	bne.w	801afb0 <tcp_slowtmr+0x114>
 801b256:	463b      	mov	r3, r7
 801b258:	22d4      	movs	r2, #212	; 0xd4
 801b25a:	495d      	ldr	r1, [pc, #372]	; (801b3d0 <tcp_slowtmr+0x534>)
 801b25c:	485d      	ldr	r0, [pc, #372]	; (801b3d4 <tcp_slowtmr+0x538>)
 801b25e:	f009 f851 	bl	8024304 <iprintf>
 801b262:	e6a5      	b.n	801afb0 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b264:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801b268:	4a5b      	ldr	r2, [pc, #364]	; (801b3d8 <tcp_slowtmr+0x53c>)
 801b26a:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801b26c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b270:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801b274:	4293      	cmp	r3, r2
 801b276:	d216      	bcs.n	801b2a6 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801b278:	3301      	adds	r3, #1
 801b27a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801b27c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801b27e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801b282:	d210      	bcs.n	801b2a6 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801b284:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801b286:	f04f 0800 	mov.w	r8, #0
 801b28a:	e639      	b.n	801af00 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b28c:	42a3      	cmp	r3, r4
 801b28e:	d006      	beq.n	801b29e <tcp_slowtmr+0x402>
 801b290:	463b      	mov	r3, r7
 801b292:	f240 5271 	movw	r2, #1393	; 0x571
 801b296:	4951      	ldr	r1, [pc, #324]	; (801b3dc <tcp_slowtmr+0x540>)
 801b298:	484e      	ldr	r0, [pc, #312]	; (801b3d4 <tcp_slowtmr+0x538>)
 801b29a:	f009 f833 	bl	8024304 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b29e:	68e3      	ldr	r3, [r4, #12]
 801b2a0:	4a4f      	ldr	r2, [pc, #316]	; (801b3e0 <tcp_slowtmr+0x544>)
 801b2a2:	6013      	str	r3, [r2, #0]
 801b2a4:	e67a      	b.n	801af9c <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801b2a6:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801b2aa:	b936      	cbnz	r6, 801b2ba <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	f003 fb6d 	bl	801e98c <tcp_zero_window_probe>
 801b2b2:	b140      	cbz	r0, 801b2c6 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801b2b4:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801b2b6:	7d23      	ldrb	r3, [r4, #20]
 801b2b8:	e622      	b.n	801af00 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b2ba:	4631      	mov	r1, r6
 801b2bc:	4620      	mov	r0, r4
 801b2be:	f002 fe17 	bl	801def0 <tcp_split_unsent_seg>
 801b2c2:	2800      	cmp	r0, #0
 801b2c4:	d078      	beq.n	801b3b8 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b2c6:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801b2ca:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b2ce:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801b2d0:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b2d4:	f63f af6d 	bhi.w	801b1b2 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801b2d8:	3301      	adds	r3, #1
 801b2da:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801b2de:	7d23      	ldrb	r3, [r4, #20]
 801b2e0:	e60e      	b.n	801af00 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b2e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	f43f af64 	beq.w	801b1b2 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801b2ea:	7d23      	ldrb	r3, [r4, #20]
 801b2ec:	2b02      	cmp	r3, #2
 801b2ee:	d014      	beq.n	801b31a <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b2f0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b2f4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801b2f8:	2a0c      	cmp	r2, #12
 801b2fa:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801b2fe:	bf28      	it	cs
 801b300:	220c      	movcs	r2, #12
 801b302:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801b306:	4937      	ldr	r1, [pc, #220]	; (801b3e4 <tcp_slowtmr+0x548>)
 801b308:	5c8a      	ldrb	r2, [r1, r2]
 801b30a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b30c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b310:	4293      	cmp	r3, r2
 801b312:	bfa8      	it	ge
 801b314:	4613      	movge	r3, r2
 801b316:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b31a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801b31e:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b320:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b324:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801b326:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801b328:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b32c:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801b330:	bf28      	it	cs
 801b332:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b334:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b336:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801b33a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b33e:	bf88      	it	hi
 801b340:	4613      	movhi	r3, r2
 801b342:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801b346:	2300      	movs	r3, #0
 801b348:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801b34a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801b34e:	f003 faab 	bl	801e8a8 <tcp_rexmit_rto_commit>
 801b352:	e72e      	b.n	801b1b2 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b354:	463b      	mov	r3, r7
 801b356:	f240 526d 	movw	r2, #1389	; 0x56d
 801b35a:	4923      	ldr	r1, [pc, #140]	; (801b3e8 <tcp_slowtmr+0x54c>)
 801b35c:	481d      	ldr	r0, [pc, #116]	; (801b3d4 <tcp_slowtmr+0x538>)
 801b35e:	f008 ffd1 	bl	8024304 <iprintf>
 801b362:	e618      	b.n	801af96 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801b364:	f8d9 3000 	ldr.w	r3, [r9]
 801b368:	42a3      	cmp	r3, r4
 801b36a:	d006      	beq.n	801b37a <tcp_slowtmr+0x4de>
 801b36c:	4643      	mov	r3, r8
 801b36e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801b372:	491e      	ldr	r1, [pc, #120]	; (801b3ec <tcp_slowtmr+0x550>)
 801b374:	4638      	mov	r0, r7
 801b376:	f008 ffc5 	bl	8024304 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b37a:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801b37c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b380:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801b382:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b386:	f47f af29 	bne.w	801b1dc <tcp_slowtmr+0x340>
 801b38a:	4643      	mov	r3, r8
 801b38c:	22d4      	movs	r2, #212	; 0xd4
 801b38e:	4910      	ldr	r1, [pc, #64]	; (801b3d0 <tcp_slowtmr+0x534>)
 801b390:	4638      	mov	r0, r7
 801b392:	f008 ffb7 	bl	8024304 <iprintf>
 801b396:	e721      	b.n	801b1dc <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b398:	463b      	mov	r3, r7
 801b39a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801b39e:	4914      	ldr	r1, [pc, #80]	; (801b3f0 <tcp_slowtmr+0x554>)
 801b3a0:	480c      	ldr	r0, [pc, #48]	; (801b3d4 <tcp_slowtmr+0x538>)
 801b3a2:	f008 ffaf 	bl	8024304 <iprintf>
 801b3a6:	e686      	b.n	801b0b6 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801b3a8:	4643      	mov	r3, r8
 801b3aa:	f240 52af 	movw	r2, #1455	; 0x5af
 801b3ae:	4911      	ldr	r1, [pc, #68]	; (801b3f4 <tcp_slowtmr+0x558>)
 801b3b0:	4638      	mov	r0, r7
 801b3b2:	f008 ffa7 	bl	8024304 <iprintf>
 801b3b6:	e709      	b.n	801b1cc <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	f003 f88b 	bl	801e4d4 <tcp_output>
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	d181      	bne.n	801b2c6 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801b3c2:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801b3c4:	7d23      	ldrb	r3, [r4, #20]
 801b3c6:	e59b      	b.n	801af00 <tcp_slowtmr+0x64>
 801b3c8:	000124f8 	.word	0x000124f8
 801b3cc:	10624dd3 	.word	0x10624dd3
 801b3d0:	080427d0 	.word	0x080427d0
 801b3d4:	08028ab4 	.word	0x08028ab4
 801b3d8:	08042e88 	.word	0x08042e88
 801b3dc:	08042b98 	.word	0x08042b98
 801b3e0:	2002dbcc 	.word	0x2002dbcc
 801b3e4:	08042e68 	.word	0x08042e68
 801b3e8:	08042b6c 	.word	0x08042b6c
 801b3ec:	08042c1c 	.word	0x08042c1c
 801b3f0:	08042b34 	.word	0x08042b34
 801b3f4:	08042bf4 	.word	0x08042bf4

0801b3f8 <tcp_pcb_remove>:
{
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b3fc:	460c      	mov	r4, r1
 801b3fe:	2900      	cmp	r1, #0
 801b400:	d04a      	beq.n	801b498 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b402:	2d00      	cmp	r5, #0
 801b404:	d051      	beq.n	801b4aa <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801b406:	682b      	ldr	r3, [r5, #0]
 801b408:	42a3      	cmp	r3, r4
 801b40a:	d032      	beq.n	801b472 <tcp_pcb_remove+0x7a>
 801b40c:	b12b      	cbz	r3, 801b41a <tcp_pcb_remove+0x22>
 801b40e:	68da      	ldr	r2, [r3, #12]
 801b410:	42a2      	cmp	r2, r4
 801b412:	d03e      	beq.n	801b492 <tcp_pcb_remove+0x9a>
 801b414:	4613      	mov	r3, r2
 801b416:	2b00      	cmp	r3, #0
 801b418:	d1f9      	bne.n	801b40e <tcp_pcb_remove+0x16>
 801b41a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801b41c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801b41e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801b420:	f7ff fcea 	bl	801adf8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801b424:	7d23      	ldrb	r3, [r4, #20]
 801b426:	2b0a      	cmp	r3, #10
 801b428:	d02d      	beq.n	801b486 <tcp_pcb_remove+0x8e>
 801b42a:	2b01      	cmp	r3, #1
 801b42c:	d01d      	beq.n	801b46a <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801b42e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801b430:	07da      	lsls	r2, r3, #31
 801b432:	d421      	bmi.n	801b478 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b434:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b436:	b133      	cbz	r3, 801b446 <tcp_pcb_remove+0x4e>
 801b438:	4b20      	ldr	r3, [pc, #128]	; (801b4bc <tcp_pcb_remove+0xc4>)
 801b43a:	f640 0293 	movw	r2, #2195	; 0x893
 801b43e:	4920      	ldr	r1, [pc, #128]	; (801b4c0 <tcp_pcb_remove+0xc8>)
 801b440:	4820      	ldr	r0, [pc, #128]	; (801b4c4 <tcp_pcb_remove+0xcc>)
 801b442:	f008 ff5f 	bl	8024304 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b446:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b448:	b133      	cbz	r3, 801b458 <tcp_pcb_remove+0x60>
 801b44a:	4b1c      	ldr	r3, [pc, #112]	; (801b4bc <tcp_pcb_remove+0xc4>)
 801b44c:	f640 0294 	movw	r2, #2196	; 0x894
 801b450:	491d      	ldr	r1, [pc, #116]	; (801b4c8 <tcp_pcb_remove+0xd0>)
 801b452:	481c      	ldr	r0, [pc, #112]	; (801b4c4 <tcp_pcb_remove+0xcc>)
 801b454:	f008 ff56 	bl	8024304 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b458:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b45a:	b133      	cbz	r3, 801b46a <tcp_pcb_remove+0x72>
 801b45c:	4b17      	ldr	r3, [pc, #92]	; (801b4bc <tcp_pcb_remove+0xc4>)
 801b45e:	f640 0296 	movw	r2, #2198	; 0x896
 801b462:	491a      	ldr	r1, [pc, #104]	; (801b4cc <tcp_pcb_remove+0xd4>)
 801b464:	4817      	ldr	r0, [pc, #92]	; (801b4c4 <tcp_pcb_remove+0xcc>)
 801b466:	f008 ff4d 	bl	8024304 <iprintf>
  pcb->state = CLOSED;
 801b46a:	2300      	movs	r3, #0
 801b46c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801b46e:	82e3      	strh	r3, [r4, #22]
}
 801b470:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801b472:	68e3      	ldr	r3, [r4, #12]
 801b474:	602b      	str	r3, [r5, #0]
 801b476:	e7d0      	b.n	801b41a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801b478:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801b47c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801b47e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801b480:	f003 f828 	bl	801e4d4 <tcp_output>
  if (pcb->state != LISTEN) {
 801b484:	7d23      	ldrb	r3, [r4, #20]
 801b486:	2b01      	cmp	r3, #1
 801b488:	d0ef      	beq.n	801b46a <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b48a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d1d3      	bne.n	801b438 <tcp_pcb_remove+0x40>
 801b490:	e7d9      	b.n	801b446 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801b492:	68e2      	ldr	r2, [r4, #12]
 801b494:	60da      	str	r2, [r3, #12]
 801b496:	e7c0      	b.n	801b41a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b498:	4b08      	ldr	r3, [pc, #32]	; (801b4bc <tcp_pcb_remove+0xc4>)
 801b49a:	f640 0283 	movw	r2, #2179	; 0x883
 801b49e:	490c      	ldr	r1, [pc, #48]	; (801b4d0 <tcp_pcb_remove+0xd8>)
 801b4a0:	4808      	ldr	r0, [pc, #32]	; (801b4c4 <tcp_pcb_remove+0xcc>)
 801b4a2:	f008 ff2f 	bl	8024304 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b4a6:	2d00      	cmp	r5, #0
 801b4a8:	d1ad      	bne.n	801b406 <tcp_pcb_remove+0xe>
 801b4aa:	4b04      	ldr	r3, [pc, #16]	; (801b4bc <tcp_pcb_remove+0xc4>)
 801b4ac:	f640 0284 	movw	r2, #2180	; 0x884
 801b4b0:	4908      	ldr	r1, [pc, #32]	; (801b4d4 <tcp_pcb_remove+0xdc>)
 801b4b2:	4804      	ldr	r0, [pc, #16]	; (801b4c4 <tcp_pcb_remove+0xcc>)
 801b4b4:	f008 ff26 	bl	8024304 <iprintf>
 801b4b8:	e7a5      	b.n	801b406 <tcp_pcb_remove+0xe>
 801b4ba:	bf00      	nop
 801b4bc:	08042794 	.word	0x08042794
 801b4c0:	08042c80 	.word	0x08042c80
 801b4c4:	08028ab4 	.word	0x08028ab4
 801b4c8:	08042c98 	.word	0x08042c98
 801b4cc:	08042cb4 	.word	0x08042cb4
 801b4d0:	08042c44 	.word	0x08042c44
 801b4d4:	08042c60 	.word	0x08042c60

0801b4d8 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b4d8:	2800      	cmp	r0, #0
 801b4da:	f000 80ad 	beq.w	801b638 <tcp_abandon+0x160>
{
 801b4de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b4e2:	7d03      	ldrb	r3, [r0, #20]
{
 801b4e4:	b087      	sub	sp, #28
 801b4e6:	4605      	mov	r5, r0
 801b4e8:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b4ea:	2b01      	cmp	r3, #1
 801b4ec:	f000 808b 	beq.w	801b606 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801b4f0:	2b0a      	cmp	r3, #10
 801b4f2:	f000 8093 	beq.w	801b61c <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801b4f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801b4f8:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801b4fc:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801b500:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801b504:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801b506:	b96b      	cbnz	r3, 801b524 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801b508:	8aef      	ldrh	r7, [r5, #22]
 801b50a:	2f00      	cmp	r7, #0
 801b50c:	d052      	beq.n	801b5b4 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b50e:	4a51      	ldr	r2, [pc, #324]	; (801b654 <tcp_abandon+0x17c>)
 801b510:	6813      	ldr	r3, [r2, #0]
 801b512:	42ab      	cmp	r3, r5
 801b514:	d074      	beq.n	801b600 <tcp_abandon+0x128>
 801b516:	2b00      	cmp	r3, #0
 801b518:	d050      	beq.n	801b5bc <tcp_abandon+0xe4>
 801b51a:	68da      	ldr	r2, [r3, #12]
 801b51c:	42aa      	cmp	r2, r5
 801b51e:	d04b      	beq.n	801b5b8 <tcp_abandon+0xe0>
 801b520:	4613      	mov	r3, r2
 801b522:	e7f8      	b.n	801b516 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b524:	4629      	mov	r1, r5
 801b526:	484c      	ldr	r0, [pc, #304]	; (801b658 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801b528:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b52a:	f7ff ff65 	bl	801b3f8 <tcp_pcb_remove>
 801b52e:	4b4b      	ldr	r3, [pc, #300]	; (801b65c <tcp_abandon+0x184>)
 801b530:	2201      	movs	r2, #1
 801b532:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801b534:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801b536:	b164      	cbz	r4, 801b552 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801b538:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b53a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b53c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b540:	b108      	cbz	r0, 801b546 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801b542:	f7fe fe15 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b546:	4651      	mov	r1, sl
 801b548:	2004      	movs	r0, #4
 801b54a:	f7fe f8f9 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801b54e:	2c00      	cmp	r4, #0
 801b550:	d1f2      	bne.n	801b538 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801b552:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801b554:	b164      	cbz	r4, 801b570 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801b556:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b558:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b55a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b55e:	b108      	cbz	r0, 801b564 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801b560:	f7fe fe06 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b564:	4651      	mov	r1, sl
 801b566:	2004      	movs	r0, #4
 801b568:	f7fe f8ea 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801b56c:	2c00      	cmp	r4, #0
 801b56e:	d1f2      	bne.n	801b556 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801b570:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801b572:	b164      	cbz	r4, 801b58e <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801b574:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801b576:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b578:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b57c:	b108      	cbz	r0, 801b582 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801b57e:	f7fe fdf7 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b582:	4651      	mov	r1, sl
 801b584:	2004      	movs	r0, #4
 801b586:	f7fe f8db 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801b58a:	2c00      	cmp	r4, #0
 801b58c:	d1f2      	bne.n	801b574 <tcp_abandon+0x9c>
    if (send_rst) {
 801b58e:	b9ce      	cbnz	r6, 801b5c4 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b590:	7d2b      	ldrb	r3, [r5, #20]
 801b592:	2b01      	cmp	r3, #1
 801b594:	d024      	beq.n	801b5e0 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801b596:	4629      	mov	r1, r5
 801b598:	2002      	movs	r0, #2
 801b59a:	f7fe f8d1 	bl	8019740 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b59e:	f1b8 0f00 	cmp.w	r8, #0
 801b5a2:	d02a      	beq.n	801b5fa <tcp_abandon+0x122>
 801b5a4:	f06f 010c 	mvn.w	r1, #12
 801b5a8:	4648      	mov	r0, r9
 801b5aa:	4643      	mov	r3, r8
}
 801b5ac:	b007      	add	sp, #28
 801b5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b5b2:	4718      	bx	r3
    int send_rst = 0;
 801b5b4:	461e      	mov	r6, r3
 801b5b6:	e7bd      	b.n	801b534 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b5b8:	68ea      	ldr	r2, [r5, #12]
 801b5ba:	60da      	str	r2, [r3, #12]
 801b5bc:	2700      	movs	r7, #0
    int send_rst = 0;
 801b5be:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b5c0:	60ef      	str	r7, [r5, #12]
 801b5c2:	e7b7      	b.n	801b534 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801b5c4:	9701      	str	r7, [sp, #4]
 801b5c6:	465a      	mov	r2, fp
 801b5c8:	8b2b      	ldrh	r3, [r5, #24]
 801b5ca:	4628      	mov	r0, r5
 801b5cc:	9905      	ldr	r1, [sp, #20]
 801b5ce:	9302      	str	r3, [sp, #8]
 801b5d0:	1d2b      	adds	r3, r5, #4
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	462b      	mov	r3, r5
 801b5d6:	f002 ff03 	bl	801e3e0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b5da:	7d2b      	ldrb	r3, [r5, #20]
 801b5dc:	2b01      	cmp	r3, #1
 801b5de:	d1da      	bne.n	801b596 <tcp_abandon+0xbe>
 801b5e0:	491f      	ldr	r1, [pc, #124]	; (801b660 <tcp_abandon+0x188>)
 801b5e2:	22d4      	movs	r2, #212	; 0xd4
 801b5e4:	4b1f      	ldr	r3, [pc, #124]	; (801b664 <tcp_abandon+0x18c>)
 801b5e6:	4820      	ldr	r0, [pc, #128]	; (801b668 <tcp_abandon+0x190>)
 801b5e8:	f008 fe8c 	bl	8024304 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b5ec:	4629      	mov	r1, r5
 801b5ee:	2002      	movs	r0, #2
 801b5f0:	f7fe f8a6 	bl	8019740 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801b5f4:	f1b8 0f00 	cmp.w	r8, #0
 801b5f8:	d1d4      	bne.n	801b5a4 <tcp_abandon+0xcc>
}
 801b5fa:	b007      	add	sp, #28
 801b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b600:	68eb      	ldr	r3, [r5, #12]
 801b602:	6013      	str	r3, [r2, #0]
 801b604:	e7da      	b.n	801b5bc <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801b606:	4b17      	ldr	r3, [pc, #92]	; (801b664 <tcp_abandon+0x18c>)
 801b608:	f44f 7210 	mov.w	r2, #576	; 0x240
 801b60c:	4917      	ldr	r1, [pc, #92]	; (801b66c <tcp_abandon+0x194>)
 801b60e:	4816      	ldr	r0, [pc, #88]	; (801b668 <tcp_abandon+0x190>)
 801b610:	f008 fe78 	bl	8024304 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801b614:	7d2b      	ldrb	r3, [r5, #20]
 801b616:	2b0a      	cmp	r3, #10
 801b618:	f47f af6d 	bne.w	801b4f6 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801b61c:	4629      	mov	r1, r5
 801b61e:	4814      	ldr	r0, [pc, #80]	; (801b670 <tcp_abandon+0x198>)
 801b620:	f7ff feea 	bl	801b3f8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b624:	7d2b      	ldrb	r3, [r5, #20]
 801b626:	2b01      	cmp	r3, #1
 801b628:	d00d      	beq.n	801b646 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b62a:	4629      	mov	r1, r5
 801b62c:	2002      	movs	r0, #2
}
 801b62e:	b007      	add	sp, #28
 801b630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b634:	f7fe b884 	b.w	8019740 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801b638:	4b0a      	ldr	r3, [pc, #40]	; (801b664 <tcp_abandon+0x18c>)
 801b63a:	f240 223d 	movw	r2, #573	; 0x23d
 801b63e:	490d      	ldr	r1, [pc, #52]	; (801b674 <tcp_abandon+0x19c>)
 801b640:	4809      	ldr	r0, [pc, #36]	; (801b668 <tcp_abandon+0x190>)
 801b642:	f008 be5f 	b.w	8024304 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b646:	4b07      	ldr	r3, [pc, #28]	; (801b664 <tcp_abandon+0x18c>)
 801b648:	22d4      	movs	r2, #212	; 0xd4
 801b64a:	4905      	ldr	r1, [pc, #20]	; (801b660 <tcp_abandon+0x188>)
 801b64c:	4806      	ldr	r0, [pc, #24]	; (801b668 <tcp_abandon+0x190>)
 801b64e:	f008 fe59 	bl	8024304 <iprintf>
 801b652:	e7ea      	b.n	801b62a <tcp_abandon+0x152>
 801b654:	2002dbd4 	.word	0x2002dbd4
 801b658:	2002dbcc 	.word	0x2002dbcc
 801b65c:	2002dbd0 	.word	0x2002dbd0
 801b660:	080427d0 	.word	0x080427d0
 801b664:	08042794 	.word	0x08042794
 801b668:	08028ab4 	.word	0x08028ab4
 801b66c:	08042ce8 	.word	0x08042ce8
 801b670:	2002dbe4 	.word	0x2002dbe4
 801b674:	08042ccc 	.word	0x08042ccc

0801b678 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801b678:	2101      	movs	r1, #1
 801b67a:	f7ff bf2d 	b.w	801b4d8 <tcp_abandon>
 801b67e:	bf00      	nop

0801b680 <tcp_accept_null>:
{
 801b680:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b682:	460c      	mov	r4, r1
 801b684:	b131      	cbz	r1, 801b694 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801b686:	4620      	mov	r0, r4
 801b688:	2101      	movs	r1, #1
 801b68a:	f7ff ff25 	bl	801b4d8 <tcp_abandon>
}
 801b68e:	f06f 000c 	mvn.w	r0, #12
 801b692:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b694:	4b06      	ldr	r3, [pc, #24]	; (801b6b0 <tcp_accept_null+0x30>)
 801b696:	f240 320f 	movw	r2, #783	; 0x30f
 801b69a:	4906      	ldr	r1, [pc, #24]	; (801b6b4 <tcp_accept_null+0x34>)
 801b69c:	4806      	ldr	r0, [pc, #24]	; (801b6b8 <tcp_accept_null+0x38>)
 801b69e:	f008 fe31 	bl	8024304 <iprintf>
  tcp_abandon(pcb, 1);
 801b6a2:	4620      	mov	r0, r4
 801b6a4:	2101      	movs	r1, #1
 801b6a6:	f7ff ff17 	bl	801b4d8 <tcp_abandon>
}
 801b6aa:	f06f 000c 	mvn.w	r0, #12
 801b6ae:	bd10      	pop	{r4, pc}
 801b6b0:	08042794 	.word	0x08042794
 801b6b4:	08042d1c 	.word	0x08042d1c
 801b6b8:	08028ab4 	.word	0x08028ab4

0801b6bc <tcp_netif_ip_addr_changed_pcblist>:
{
 801b6bc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b6be:	4605      	mov	r5, r0
{
 801b6c0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b6c2:	b178      	cbz	r0, 801b6e4 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801b6c4:	b134      	cbz	r4, 801b6d4 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b6c6:	6822      	ldr	r2, [r4, #0]
 801b6c8:	682b      	ldr	r3, [r5, #0]
 801b6ca:	429a      	cmp	r2, r3
 801b6cc:	d003      	beq.n	801b6d6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801b6ce:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801b6d0:	2c00      	cmp	r4, #0
 801b6d2:	d1f8      	bne.n	801b6c6 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801b6d4:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801b6d6:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801b6d8:	4620      	mov	r0, r4
 801b6da:	2101      	movs	r1, #1
      pcb = next;
 801b6dc:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801b6de:	f7ff fefb 	bl	801b4d8 <tcp_abandon>
      pcb = next;
 801b6e2:	e7ef      	b.n	801b6c4 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b6e4:	4b03      	ldr	r3, [pc, #12]	; (801b6f4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801b6e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b6ea:	4903      	ldr	r1, [pc, #12]	; (801b6f8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801b6ec:	4803      	ldr	r0, [pc, #12]	; (801b6fc <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801b6ee:	f008 fe09 	bl	8024304 <iprintf>
 801b6f2:	e7e7      	b.n	801b6c4 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801b6f4:	08042794 	.word	0x08042794
 801b6f8:	08042d3c 	.word	0x08042d3c
 801b6fc:	08028ab4 	.word	0x08028ab4

0801b700 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b700:	4b0f      	ldr	r3, [pc, #60]	; (801b740 <tcp_kill_state+0x40>)
 801b702:	6819      	ldr	r1, [r3, #0]
 801b704:	b1d1      	cbz	r1, 801b73c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b706:	4b0f      	ldr	r3, [pc, #60]	; (801b744 <tcp_kill_state+0x44>)
  inactivity = 0;
 801b708:	2200      	movs	r2, #0
{
 801b70a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b70c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801b70e:	4614      	mov	r4, r2
 801b710:	e001      	b.n	801b716 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b712:	68c9      	ldr	r1, [r1, #12]
 801b714:	b159      	cbz	r1, 801b72e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801b716:	7d0b      	ldrb	r3, [r1, #20]
 801b718:	4283      	cmp	r3, r0
 801b71a:	d1fa      	bne.n	801b712 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b71c:	6a0b      	ldr	r3, [r1, #32]
 801b71e:	1aeb      	subs	r3, r5, r3
 801b720:	4293      	cmp	r3, r2
 801b722:	d3f6      	bcc.n	801b712 <tcp_kill_state+0x12>
 801b724:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b726:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b728:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b72a:	2900      	cmp	r1, #0
 801b72c:	d1f3      	bne.n	801b716 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801b72e:	b11c      	cbz	r4, 801b738 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801b730:	4620      	mov	r0, r4
}
 801b732:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801b734:	f7ff bed0 	b.w	801b4d8 <tcp_abandon>
}
 801b738:	bc30      	pop	{r4, r5}
 801b73a:	4770      	bx	lr
 801b73c:	4770      	bx	lr
 801b73e:	bf00      	nop
 801b740:	2002dbcc 	.word	0x2002dbcc
 801b744:	2002dbdc 	.word	0x2002dbdc

0801b748 <tcp_alloc>:
{
 801b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b74a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801b74e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b750:	494f      	ldr	r1, [pc, #316]	; (801b890 <tcp_alloc+0x148>)
 801b752:	2002      	movs	r0, #2
 801b754:	f7fd ffbe 	bl	80196d4 <memp_malloc_fn>
  if (pcb == NULL) {
 801b758:	4603      	mov	r3, r0
 801b75a:	b320      	cbz	r0, 801b7a6 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b75c:	229c      	movs	r2, #156	; 0x9c
 801b75e:	2100      	movs	r1, #0
 801b760:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801b762:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b766:	f007 fe2f 	bl	80233c8 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801b76a:	494a      	ldr	r1, [pc, #296]	; (801b894 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b76c:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b76e:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801b770:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801b772:	4849      	ldr	r0, [pc, #292]	; (801b898 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801b778:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b77a:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801b77c:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b77e:	4a47      	ldr	r2, [pc, #284]	; (801b89c <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801b780:	4947      	ldr	r1, [pc, #284]	; (801b8a0 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801b782:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801b786:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801b788:	4c46      	ldr	r4, [pc, #280]	; (801b8a4 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801b78a:	4847      	ldr	r0, [pc, #284]	; (801b8a8 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801b78c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b790:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801b794:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b796:	4945      	ldr	r1, [pc, #276]	; (801b8ac <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801b798:	6498      	str	r0, [r3, #72]	; 0x48
}
 801b79a:	4618      	mov	r0, r3
    pcb->prio = prio;
 801b79c:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801b79e:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b7a0:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801b7a2:	72da      	strb	r2, [r3, #11]
}
 801b7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801b7a6:	4e42      	ldr	r6, [pc, #264]	; (801b8b0 <tcp_alloc+0x168>)
 801b7a8:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801b7aa:	b15c      	cbz	r4, 801b7c4 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801b7b0:	8b43      	ldrh	r3, [r0, #26]
 801b7b2:	0719      	lsls	r1, r3, #28
 801b7b4:	d5f9      	bpl.n	801b7aa <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b7b6:	f023 0308 	bic.w	r3, r3, #8
 801b7ba:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801b7bc:	f7fe ffd8 	bl	801a770 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801b7c0:	2c00      	cmp	r4, #0
 801b7c2:	d1f3      	bne.n	801b7ac <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7c4:	4b3b      	ldr	r3, [pc, #236]	; (801b8b4 <tcp_alloc+0x16c>)
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	b193      	cbz	r3, 801b7f0 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b7ca:	4a33      	ldr	r2, [pc, #204]	; (801b898 <tcp_alloc+0x150>)
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	6a19      	ldr	r1, [r3, #32]
 801b7d0:	6814      	ldr	r4, [r2, #0]
 801b7d2:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7d4:	68db      	ldr	r3, [r3, #12]
 801b7d6:	b143      	cbz	r3, 801b7ea <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b7d8:	6a1a      	ldr	r2, [r3, #32]
 801b7da:	1aa2      	subs	r2, r4, r2
 801b7dc:	428a      	cmp	r2, r1
 801b7de:	d3f9      	bcc.n	801b7d4 <tcp_alloc+0x8c>
 801b7e0:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7e2:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b7e4:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d1f6      	bne.n	801b7d8 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801b7ea:	2101      	movs	r1, #1
 801b7ec:	f7ff fe74 	bl	801b4d8 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b7f0:	f240 7239 	movw	r2, #1849	; 0x739
 801b7f4:	4926      	ldr	r1, [pc, #152]	; (801b890 <tcp_alloc+0x148>)
 801b7f6:	2002      	movs	r0, #2
 801b7f8:	f7fd ff6c 	bl	80196d4 <memp_malloc_fn>
    if (pcb == NULL) {
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	2800      	cmp	r0, #0
 801b800:	d1ac      	bne.n	801b75c <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801b802:	2009      	movs	r0, #9
 801b804:	f7ff ff7c 	bl	801b700 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b808:	f240 723f 	movw	r2, #1855	; 0x73f
 801b80c:	4920      	ldr	r1, [pc, #128]	; (801b890 <tcp_alloc+0x148>)
 801b80e:	2002      	movs	r0, #2
 801b810:	f7fd ff60 	bl	80196d4 <memp_malloc_fn>
      if (pcb == NULL) {
 801b814:	4603      	mov	r3, r0
 801b816:	2800      	cmp	r0, #0
 801b818:	d1a0      	bne.n	801b75c <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801b81a:	2008      	movs	r0, #8
 801b81c:	f7ff ff70 	bl	801b700 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b820:	f240 7245 	movw	r2, #1861	; 0x745
 801b824:	491a      	ldr	r1, [pc, #104]	; (801b890 <tcp_alloc+0x148>)
 801b826:	2002      	movs	r0, #2
 801b828:	f7fd ff54 	bl	80196d4 <memp_malloc_fn>
        if (pcb == NULL) {
 801b82c:	4603      	mov	r3, r0
 801b82e:	2800      	cmp	r0, #0
 801b830:	d194      	bne.n	801b75c <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b832:	062a      	lsls	r2, r5, #24
 801b834:	d42a      	bmi.n	801b88c <tcp_alloc+0x144>
  if (mprio == 0) {
 801b836:	b1ed      	cbz	r5, 801b874 <tcp_alloc+0x12c>
 801b838:	462a      	mov	r2, r5
  mprio--;
 801b83a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b83c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801b83e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b840:	b1c2      	cbz	r2, 801b874 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b842:	4815      	ldr	r0, [pc, #84]	; (801b898 <tcp_alloc+0x150>)
  inactivity = 0;
 801b844:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b846:	6807      	ldr	r7, [r0, #0]
 801b848:	e005      	b.n	801b856 <tcp_alloc+0x10e>
 801b84a:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801b84c:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801b84e:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801b850:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b852:	68d2      	ldr	r2, [r2, #12]
 801b854:	b14a      	cbz	r2, 801b86a <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801b856:	7d50      	ldrb	r0, [r2, #21]
 801b858:	4288      	cmp	r0, r1
 801b85a:	d3f6      	bcc.n	801b84a <tcp_alloc+0x102>
 801b85c:	d1f9      	bne.n	801b852 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b85e:	6a14      	ldr	r4, [r2, #32]
 801b860:	eba7 0e04 	sub.w	lr, r7, r4
 801b864:	45b6      	cmp	lr, r6
 801b866:	d3f4      	bcc.n	801b852 <tcp_alloc+0x10a>
 801b868:	e7f0      	b.n	801b84c <tcp_alloc+0x104>
  if (inactive != NULL) {
 801b86a:	b11b      	cbz	r3, 801b874 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801b86c:	2101      	movs	r1, #1
 801b86e:	4618      	mov	r0, r3
 801b870:	f7ff fe32 	bl	801b4d8 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b874:	f240 724b 	movw	r2, #1867	; 0x74b
 801b878:	4905      	ldr	r1, [pc, #20]	; (801b890 <tcp_alloc+0x148>)
 801b87a:	2002      	movs	r0, #2
 801b87c:	f7fd ff2a 	bl	80196d4 <memp_malloc_fn>
  if (pcb != NULL) {
 801b880:	4603      	mov	r3, r0
 801b882:	2800      	cmp	r0, #0
 801b884:	f47f af6a 	bne.w	801b75c <tcp_alloc+0x14>
}
 801b888:	4618      	mov	r0, r3
 801b88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b88c:	227f      	movs	r2, #127	; 0x7f
 801b88e:	e7d4      	b.n	801b83a <tcp_alloc+0xf2>
 801b890:	08042794 	.word	0x08042794
 801b894:	2002dbe1 	.word	0x2002dbe1
 801b898:	2002dbdc 	.word	0x2002dbdc
 801b89c:	006ddd00 	.word	0x006ddd00
 801b8a0:	0801baa5 	.word	0x0801baa5
 801b8a4:	0218ffff 	.word	0x0218ffff
 801b8a8:	04300001 	.word	0x04300001
 801b8ac:	08600860 	.word	0x08600860
 801b8b0:	2002dbcc 	.word	0x2002dbcc
 801b8b4:	2002dbe4 	.word	0x2002dbe4

0801b8b8 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801b8b8:	2040      	movs	r0, #64	; 0x40
 801b8ba:	f7ff bf45 	b.w	801b748 <tcp_alloc>
 801b8be:	bf00      	nop

0801b8c0 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801b8c0:	2040      	movs	r0, #64	; 0x40
 801b8c2:	f7ff bf41 	b.w	801b748 <tcp_alloc>
 801b8c6:	bf00      	nop

0801b8c8 <tcp_close_shutdown>:
{
 801b8c8:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b8ca:	4604      	mov	r4, r0
{
 801b8cc:	b085      	sub	sp, #20
 801b8ce:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b8d0:	2800      	cmp	r0, #0
 801b8d2:	d06a      	beq.n	801b9aa <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801b8d4:	7d23      	ldrb	r3, [r4, #20]
 801b8d6:	b11d      	cbz	r5, 801b8e0 <tcp_close_shutdown+0x18>
 801b8d8:	2b04      	cmp	r3, #4
 801b8da:	d00c      	beq.n	801b8f6 <tcp_close_shutdown+0x2e>
 801b8dc:	2b07      	cmp	r3, #7
 801b8de:	d00a      	beq.n	801b8f6 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801b8e0:	2b01      	cmp	r3, #1
 801b8e2:	d06a      	beq.n	801b9ba <tcp_close_shutdown+0xf2>
 801b8e4:	2b02      	cmp	r3, #2
 801b8e6:	d030      	beq.n	801b94a <tcp_close_shutdown+0x82>
 801b8e8:	b333      	cbz	r3, 801b938 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801b8ea:	4620      	mov	r0, r4
}
 801b8ec:	b005      	add	sp, #20
 801b8ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801b8f2:	f7fe bf3d 	b.w	801a770 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b8f6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801b8f8:	2a00      	cmp	r2, #0
 801b8fa:	d037      	beq.n	801b96c <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801b8fc:	8b63      	ldrh	r3, [r4, #26]
 801b8fe:	06db      	lsls	r3, r3, #27
 801b900:	f140 8084 	bpl.w	801ba0c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b904:	8b21      	ldrh	r1, [r4, #24]
 801b906:	1d20      	adds	r0, r4, #4
 801b908:	8ae2      	ldrh	r2, [r4, #22]
 801b90a:	4623      	mov	r3, r4
 801b90c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801b910:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b912:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b914:	9000      	str	r0, [sp, #0]
 801b916:	4620      	mov	r0, r4
 801b918:	f002 fd62 	bl	801e3e0 <tcp_rst>
      tcp_pcb_purge(pcb);
 801b91c:	4620      	mov	r0, r4
 801b91e:	f7ff fa6b 	bl	801adf8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801b922:	4a45      	ldr	r2, [pc, #276]	; (801ba38 <tcp_close_shutdown+0x170>)
 801b924:	6813      	ldr	r3, [r2, #0]
 801b926:	42a3      	cmp	r3, r4
 801b928:	d030      	beq.n	801b98c <tcp_close_shutdown+0xc4>
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d030      	beq.n	801b990 <tcp_close_shutdown+0xc8>
 801b92e:	68da      	ldr	r2, [r3, #12]
 801b930:	42a2      	cmp	r2, r4
 801b932:	d068      	beq.n	801ba06 <tcp_close_shutdown+0x13e>
 801b934:	4613      	mov	r3, r2
 801b936:	e7f8      	b.n	801b92a <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801b938:	8ae3      	ldrh	r3, [r4, #22]
 801b93a:	b9e3      	cbnz	r3, 801b976 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801b93c:	4621      	mov	r1, r4
 801b93e:	2002      	movs	r0, #2
 801b940:	f7fd fefe 	bl	8019740 <memp_free>
}
 801b944:	2000      	movs	r0, #0
 801b946:	b005      	add	sp, #20
 801b948:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b94a:	4621      	mov	r1, r4
 801b94c:	483a      	ldr	r0, [pc, #232]	; (801ba38 <tcp_close_shutdown+0x170>)
 801b94e:	f7ff fd53 	bl	801b3f8 <tcp_pcb_remove>
 801b952:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b954:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b956:	4a39      	ldr	r2, [pc, #228]	; (801ba3c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b958:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801b95a:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b95c:	d1ee      	bne.n	801b93c <tcp_close_shutdown+0x74>
 801b95e:	4b38      	ldr	r3, [pc, #224]	; (801ba40 <tcp_close_shutdown+0x178>)
 801b960:	22d4      	movs	r2, #212	; 0xd4
 801b962:	4938      	ldr	r1, [pc, #224]	; (801ba44 <tcp_close_shutdown+0x17c>)
 801b964:	4838      	ldr	r0, [pc, #224]	; (801ba48 <tcp_close_shutdown+0x180>)
 801b966:	f008 fccd 	bl	8024304 <iprintf>
 801b96a:	e7e7      	b.n	801b93c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801b96c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801b96e:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801b972:	d0b5      	beq.n	801b8e0 <tcp_close_shutdown+0x18>
 801b974:	e7c2      	b.n	801b8fc <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b976:	4a35      	ldr	r2, [pc, #212]	; (801ba4c <tcp_close_shutdown+0x184>)
 801b978:	6813      	ldr	r3, [r2, #0]
 801b97a:	42a3      	cmp	r3, r4
 801b97c:	d051      	beq.n	801ba22 <tcp_close_shutdown+0x15a>
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d03e      	beq.n	801ba00 <tcp_close_shutdown+0x138>
 801b982:	68da      	ldr	r2, [r3, #12]
 801b984:	42a2      	cmp	r2, r4
 801b986:	d039      	beq.n	801b9fc <tcp_close_shutdown+0x134>
 801b988:	4613      	mov	r3, r2
 801b98a:	e7f8      	b.n	801b97e <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801b98c:	68e3      	ldr	r3, [r4, #12]
 801b98e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801b990:	4b2f      	ldr	r3, [pc, #188]	; (801ba50 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801b992:	2000      	movs	r0, #0
 801b994:	4a29      	ldr	r2, [pc, #164]	; (801ba3c <tcp_close_shutdown+0x174>)
 801b996:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801b998:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801b99a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801b99c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801b99e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801b9a0:	d03c      	beq.n	801ba1c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b9a2:	7d23      	ldrb	r3, [r4, #20]
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	d1c9      	bne.n	801b93c <tcp_close_shutdown+0x74>
 801b9a8:	e7d9      	b.n	801b95e <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801b9aa:	4b25      	ldr	r3, [pc, #148]	; (801ba40 <tcp_close_shutdown+0x178>)
 801b9ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b9b0:	4928      	ldr	r1, [pc, #160]	; (801ba54 <tcp_close_shutdown+0x18c>)
 801b9b2:	4825      	ldr	r0, [pc, #148]	; (801ba48 <tcp_close_shutdown+0x180>)
 801b9b4:	f008 fca6 	bl	8024304 <iprintf>
 801b9b8:	e78c      	b.n	801b8d4 <tcp_close_shutdown+0xc>
 801b9ba:	4927      	ldr	r1, [pc, #156]	; (801ba58 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801b9bc:	2000      	movs	r0, #0
  switch (pcb->state) {
 801b9be:	4b23      	ldr	r3, [pc, #140]	; (801ba4c <tcp_close_shutdown+0x184>)
 801b9c0:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b9c4:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b9c6:	b133      	cbz	r3, 801b9d6 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801b9c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801b9ca:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801b9cc:	bf08      	it	eq
 801b9ce:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b9d0:	68db      	ldr	r3, [r3, #12]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d1f8      	bne.n	801b9c8 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b9d6:	42a9      	cmp	r1, r5
 801b9d8:	d002      	beq.n	801b9e0 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b9da:	f851 3b04 	ldr.w	r3, [r1], #4
 801b9de:	e7f1      	b.n	801b9c4 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801b9e0:	4621      	mov	r1, r4
 801b9e2:	481e      	ldr	r0, [pc, #120]	; (801ba5c <tcp_close_shutdown+0x194>)
 801b9e4:	f7ff fd08 	bl	801b3f8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b9e8:	7d23      	ldrb	r3, [r4, #20]
 801b9ea:	2b01      	cmp	r3, #1
 801b9ec:	d01c      	beq.n	801ba28 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801b9ee:	4621      	mov	r1, r4
 801b9f0:	2003      	movs	r0, #3
 801b9f2:	f7fd fea5 	bl	8019740 <memp_free>
}
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	b005      	add	sp, #20
 801b9fa:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801b9fc:	68e2      	ldr	r2, [r4, #12]
 801b9fe:	60da      	str	r2, [r3, #12]
 801ba00:	2300      	movs	r3, #0
 801ba02:	60e3      	str	r3, [r4, #12]
 801ba04:	e79a      	b.n	801b93c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801ba06:	68e2      	ldr	r2, [r4, #12]
 801ba08:	60da      	str	r2, [r3, #12]
 801ba0a:	e7c1      	b.n	801b990 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801ba0c:	4b0c      	ldr	r3, [pc, #48]	; (801ba40 <tcp_close_shutdown+0x178>)
 801ba0e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801ba12:	4913      	ldr	r1, [pc, #76]	; (801ba60 <tcp_close_shutdown+0x198>)
 801ba14:	480c      	ldr	r0, [pc, #48]	; (801ba48 <tcp_close_shutdown+0x180>)
 801ba16:	f008 fc75 	bl	8024304 <iprintf>
 801ba1a:	e773      	b.n	801b904 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801ba1c:	f001 fd9e 	bl	801d55c <tcp_trigger_input_pcb_close>
 801ba20:	e790      	b.n	801b944 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba22:	68e3      	ldr	r3, [r4, #12]
 801ba24:	6013      	str	r3, [r2, #0]
 801ba26:	e7eb      	b.n	801ba00 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ba28:	4b05      	ldr	r3, [pc, #20]	; (801ba40 <tcp_close_shutdown+0x178>)
 801ba2a:	22df      	movs	r2, #223	; 0xdf
 801ba2c:	490d      	ldr	r1, [pc, #52]	; (801ba64 <tcp_close_shutdown+0x19c>)
 801ba2e:	4806      	ldr	r0, [pc, #24]	; (801ba48 <tcp_close_shutdown+0x180>)
 801ba30:	f008 fc68 	bl	8024304 <iprintf>
 801ba34:	e7db      	b.n	801b9ee <tcp_close_shutdown+0x126>
 801ba36:	bf00      	nop
 801ba38:	2002dbcc 	.word	0x2002dbcc
 801ba3c:	2002dbd0 	.word	0x2002dbd0
 801ba40:	08042794 	.word	0x08042794
 801ba44:	080427d0 	.word	0x080427d0
 801ba48:	08028ab4 	.word	0x08028ab4
 801ba4c:	2002dbd4 	.word	0x2002dbd4
 801ba50:	2002dc10 	.word	0x2002dc10
 801ba54:	08042d70 	.word	0x08042d70
 801ba58:	08042e80 	.word	0x08042e80
 801ba5c:	2002dbd8 	.word	0x2002dbd8
 801ba60:	08042d90 	.word	0x08042d90
 801ba64:	08042dac 	.word	0x08042dac

0801ba68 <tcp_close>:
{
 801ba68:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba6a:	b158      	cbz	r0, 801ba84 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801ba6c:	7d03      	ldrb	r3, [r0, #20]
 801ba6e:	2b01      	cmp	r3, #1
 801ba70:	d003      	beq.n	801ba7a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801ba72:	8b43      	ldrh	r3, [r0, #26]
 801ba74:	f043 0310 	orr.w	r3, r3, #16
 801ba78:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801ba7a:	2101      	movs	r1, #1
}
 801ba7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801ba80:	f7ff bf22 	b.w	801b8c8 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba84:	4b04      	ldr	r3, [pc, #16]	; (801ba98 <tcp_close+0x30>)
 801ba86:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801ba8a:	4904      	ldr	r1, [pc, #16]	; (801ba9c <tcp_close+0x34>)
 801ba8c:	4804      	ldr	r0, [pc, #16]	; (801baa0 <tcp_close+0x38>)
 801ba8e:	f008 fc39 	bl	8024304 <iprintf>
}
 801ba92:	f06f 000f 	mvn.w	r0, #15
 801ba96:	bd08      	pop	{r3, pc}
 801ba98:	08042794 	.word	0x08042794
 801ba9c:	08042dc8 	.word	0x08042dc8
 801baa0:	08028ab4 	.word	0x08028ab4

0801baa4 <tcp_recv_null>:
{
 801baa4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801baa6:	b1c9      	cbz	r1, 801badc <tcp_recv_null+0x38>
  if (p != NULL) {
 801baa8:	4614      	mov	r4, r2
 801baaa:	4608      	mov	r0, r1
 801baac:	b13a      	cbz	r2, 801babe <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801baae:	8911      	ldrh	r1, [r2, #8]
 801bab0:	f7fe ffde 	bl	801aa70 <tcp_recved>
    pbuf_free(p);
 801bab4:	4620      	mov	r0, r4
 801bab6:	f7fe fb5b 	bl	801a170 <pbuf_free>
  return ERR_OK;
 801baba:	2000      	movs	r0, #0
}
 801babc:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801babe:	b10b      	cbz	r3, 801bac4 <tcp_recv_null+0x20>
  return ERR_OK;
 801bac0:	4610      	mov	r0, r2
}
 801bac2:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801bac4:	7d0b      	ldrb	r3, [r1, #20]
 801bac6:	2b01      	cmp	r3, #1
 801bac8:	d003      	beq.n	801bad2 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801baca:	8b4b      	ldrh	r3, [r1, #26]
 801bacc:	f043 0310 	orr.w	r3, r3, #16
 801bad0:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801bad2:	2101      	movs	r1, #1
}
 801bad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801bad8:	f7ff bef6 	b.w	801b8c8 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801badc:	4b04      	ldr	r3, [pc, #16]	; (801baf0 <tcp_recv_null+0x4c>)
 801bade:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bae2:	4904      	ldr	r1, [pc, #16]	; (801baf4 <tcp_recv_null+0x50>)
 801bae4:	4804      	ldr	r0, [pc, #16]	; (801baf8 <tcp_recv_null+0x54>)
 801bae6:	f008 fc0d 	bl	8024304 <iprintf>
 801baea:	f06f 000f 	mvn.w	r0, #15
}
 801baee:	bd10      	pop	{r4, pc}
 801baf0:	08042794 	.word	0x08042794
 801baf4:	08042de0 	.word	0x08042de0
 801baf8:	08028ab4 	.word	0x08028ab4

0801bafc <tcp_process_refused_data>:
{
 801bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801bafe:	b378      	cbz	r0, 801bb60 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801bb00:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801bb02:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801bb04:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801bb08:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801bb0a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801bb0c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801bb0e:	b156      	cbz	r6, 801bb26 <tcp_process_refused_data+0x2a>
 801bb10:	4601      	mov	r1, r0
 801bb12:	462a      	mov	r2, r5
 801bb14:	6900      	ldr	r0, [r0, #16]
 801bb16:	47b0      	blx	r6
    if (err == ERR_OK) {
 801bb18:	b158      	cbz	r0, 801bb32 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801bb1a:	300d      	adds	r0, #13
 801bb1c:	d01d      	beq.n	801bb5a <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801bb1e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801bb22:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801bb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801bb26:	8929      	ldrh	r1, [r5, #8]
 801bb28:	f7fe ffa2 	bl	801aa70 <tcp_recved>
    pbuf_free(p);
 801bb2c:	4628      	mov	r0, r5
 801bb2e:	f7fe fb1f 	bl	801a170 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801bb32:	06bb      	lsls	r3, r7, #26
 801bb34:	d50f      	bpl.n	801bb56 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bb36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801bb38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801bb3c:	d001      	beq.n	801bb42 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801bb3e:	3301      	adds	r3, #1
 801bb40:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801bb42:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801bb46:	b135      	cbz	r5, 801bb56 <tcp_process_refused_data+0x5a>
 801bb48:	2300      	movs	r3, #0
 801bb4a:	4621      	mov	r1, r4
 801bb4c:	6920      	ldr	r0, [r4, #16]
 801bb4e:	461a      	mov	r2, r3
 801bb50:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801bb52:	300d      	adds	r0, #13
 801bb54:	d001      	beq.n	801bb5a <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801bb56:	2000      	movs	r0, #0
}
 801bb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801bb5a:	f06f 000c 	mvn.w	r0, #12
}
 801bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb60:	4b04      	ldr	r3, [pc, #16]	; (801bb74 <tcp_process_refused_data+0x78>)
 801bb62:	f240 6209 	movw	r2, #1545	; 0x609
 801bb66:	4904      	ldr	r1, [pc, #16]	; (801bb78 <tcp_process_refused_data+0x7c>)
 801bb68:	4804      	ldr	r0, [pc, #16]	; (801bb7c <tcp_process_refused_data+0x80>)
 801bb6a:	f008 fbcb 	bl	8024304 <iprintf>
 801bb6e:	f06f 000f 	mvn.w	r0, #15
}
 801bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb74:	08042794 	.word	0x08042794
 801bb78:	08042dfc 	.word	0x08042dfc
 801bb7c:	08028ab4 	.word	0x08028ab4

0801bb80 <tcp_fasttmr>:
{
 801bb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801bb84:	4d1c      	ldr	r5, [pc, #112]	; (801bbf8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801bb86:	2700      	movs	r7, #0
 801bb88:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801bc00 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801bb8c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801bb8e:	4e1b      	ldr	r6, [pc, #108]	; (801bbfc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801bb90:	3301      	adds	r3, #1
 801bb92:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801bb94:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801bb98:	b1bc      	cbz	r4, 801bbca <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801bb9a:	782a      	ldrb	r2, [r5, #0]
 801bb9c:	7fa3      	ldrb	r3, [r4, #30]
 801bb9e:	4293      	cmp	r3, r2
 801bba0:	d015      	beq.n	801bbce <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801bba2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801bba4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801bba6:	07d9      	lsls	r1, r3, #31
 801bba8:	d41a      	bmi.n	801bbe0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801bbaa:	071a      	lsls	r2, r3, #28
 801bbac:	d411      	bmi.n	801bbd2 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801bbae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801bbb0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801bbb4:	b133      	cbz	r3, 801bbc4 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801bbb6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801bbb8:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801bbba:	f7ff ff9f 	bl	801bafc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801bbbe:	7833      	ldrb	r3, [r6, #0]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d1e7      	bne.n	801bb94 <tcp_fasttmr+0x14>
      pcb = next;
 801bbc4:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801bbc6:	2c00      	cmp	r4, #0
 801bbc8:	d1e7      	bne.n	801bb9a <tcp_fasttmr+0x1a>
}
 801bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801bbce:	68e4      	ldr	r4, [r4, #12]
 801bbd0:	e7e2      	b.n	801bb98 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bbd2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801bbd6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bbd8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801bbda:	f7fe fdc9 	bl	801a770 <tcp_close_shutdown_fin>
 801bbde:	e7e6      	b.n	801bbae <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801bbe0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801bbe4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801bbe6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801bbe8:	f002 fc74 	bl	801e4d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bbec:	8b63      	ldrh	r3, [r4, #26]
 801bbee:	f023 0303 	bic.w	r3, r3, #3
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	8363      	strh	r3, [r4, #26]
 801bbf6:	e7d8      	b.n	801bbaa <tcp_fasttmr+0x2a>
 801bbf8:	2002dbe1 	.word	0x2002dbe1
 801bbfc:	2002dbd0 	.word	0x2002dbd0
 801bc00:	2002dbcc 	.word	0x2002dbcc

0801bc04 <tcp_tmr>:
{
 801bc04:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801bc06:	f7ff ffbb 	bl	801bb80 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801bc0a:	4a06      	ldr	r2, [pc, #24]	; (801bc24 <tcp_tmr+0x20>)
 801bc0c:	7813      	ldrb	r3, [r2, #0]
 801bc0e:	3301      	adds	r3, #1
 801bc10:	b2db      	uxtb	r3, r3
 801bc12:	7013      	strb	r3, [r2, #0]
 801bc14:	07db      	lsls	r3, r3, #31
 801bc16:	d400      	bmi.n	801bc1a <tcp_tmr+0x16>
}
 801bc18:	bd08      	pop	{r3, pc}
 801bc1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801bc1e:	f7ff b93d 	b.w	801ae9c <tcp_slowtmr>
 801bc22:	bf00      	nop
 801bc24:	2002dbe0 	.word	0x2002dbe0

0801bc28 <tcp_next_iss>:
{
 801bc28:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801bc2a:	b130      	cbz	r0, 801bc3a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801bc2c:	4b07      	ldr	r3, [pc, #28]	; (801bc4c <tcp_next_iss+0x24>)
 801bc2e:	4a08      	ldr	r2, [pc, #32]	; (801bc50 <tcp_next_iss+0x28>)
 801bc30:	6818      	ldr	r0, [r3, #0]
 801bc32:	6812      	ldr	r2, [r2, #0]
 801bc34:	4410      	add	r0, r2
 801bc36:	6018      	str	r0, [r3, #0]
}
 801bc38:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801bc3a:	4b06      	ldr	r3, [pc, #24]	; (801bc54 <tcp_next_iss+0x2c>)
 801bc3c:	f640 02af 	movw	r2, #2223	; 0x8af
 801bc40:	4905      	ldr	r1, [pc, #20]	; (801bc58 <tcp_next_iss+0x30>)
 801bc42:	4806      	ldr	r0, [pc, #24]	; (801bc5c <tcp_next_iss+0x34>)
 801bc44:	f008 fb5e 	bl	8024304 <iprintf>
 801bc48:	e7f0      	b.n	801bc2c <tcp_next_iss+0x4>
 801bc4a:	bf00      	nop
 801bc4c:	2000040c 	.word	0x2000040c
 801bc50:	2002dbdc 	.word	0x2002dbdc
 801bc54:	08042794 	.word	0x08042794
 801bc58:	08042e24 	.word	0x08042e24
 801bc5c:	08028ab4 	.word	0x08028ab4

0801bc60 <tcp_eff_send_mss_netif>:
{
 801bc60:	b538      	push	{r3, r4, r5, lr}
 801bc62:	4605      	mov	r5, r0
 801bc64:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801bc66:	b172      	cbz	r2, 801bc86 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801bc68:	b144      	cbz	r4, 801bc7c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801bc6a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801bc6c:	b133      	cbz	r3, 801bc7c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801bc6e:	2b28      	cmp	r3, #40	; 0x28
 801bc70:	d906      	bls.n	801bc80 <tcp_eff_send_mss_netif+0x20>
 801bc72:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	429d      	cmp	r5, r3
 801bc78:	bf28      	it	cs
 801bc7a:	461d      	movcs	r5, r3
}
 801bc7c:	4628      	mov	r0, r5
 801bc7e:	bd38      	pop	{r3, r4, r5, pc}
 801bc80:	2500      	movs	r5, #0
 801bc82:	4628      	mov	r0, r5
 801bc84:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801bc86:	4b04      	ldr	r3, [pc, #16]	; (801bc98 <tcp_eff_send_mss_netif+0x38>)
 801bc88:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801bc8c:	4903      	ldr	r1, [pc, #12]	; (801bc9c <tcp_eff_send_mss_netif+0x3c>)
 801bc8e:	4804      	ldr	r0, [pc, #16]	; (801bca0 <tcp_eff_send_mss_netif+0x40>)
 801bc90:	f008 fb38 	bl	8024304 <iprintf>
 801bc94:	e7e8      	b.n	801bc68 <tcp_eff_send_mss_netif+0x8>
 801bc96:	bf00      	nop
 801bc98:	08042794 	.word	0x08042794
 801bc9c:	08042e40 	.word	0x08042e40
 801bca0:	08028ab4 	.word	0x08028ab4

0801bca4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801bca4:	b308      	cbz	r0, 801bcea <tcp_netif_ip_addr_changed+0x46>
{
 801bca6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801bca8:	6803      	ldr	r3, [r0, #0]
 801bcaa:	4604      	mov	r4, r0
 801bcac:	b903      	cbnz	r3, 801bcb0 <tcp_netif_ip_addr_changed+0xc>
}
 801bcae:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801bcb0:	4b0e      	ldr	r3, [pc, #56]	; (801bcec <tcp_netif_ip_addr_changed+0x48>)
 801bcb2:	460d      	mov	r5, r1
 801bcb4:	6819      	ldr	r1, [r3, #0]
 801bcb6:	f7ff fd01 	bl	801b6bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801bcba:	4b0d      	ldr	r3, [pc, #52]	; (801bcf0 <tcp_netif_ip_addr_changed+0x4c>)
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	6819      	ldr	r1, [r3, #0]
 801bcc0:	f7ff fcfc 	bl	801b6bc <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801bcc4:	2d00      	cmp	r5, #0
 801bcc6:	d0f2      	beq.n	801bcae <tcp_netif_ip_addr_changed+0xa>
 801bcc8:	682b      	ldr	r3, [r5, #0]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d0ef      	beq.n	801bcae <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bcce:	4b09      	ldr	r3, [pc, #36]	; (801bcf4 <tcp_netif_ip_addr_changed+0x50>)
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d0eb      	beq.n	801bcae <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801bcd6:	6819      	ldr	r1, [r3, #0]
 801bcd8:	6822      	ldr	r2, [r4, #0]
 801bcda:	4291      	cmp	r1, r2
 801bcdc:	d101      	bne.n	801bce2 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801bcde:	682a      	ldr	r2, [r5, #0]
 801bce0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bce2:	68db      	ldr	r3, [r3, #12]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d1f6      	bne.n	801bcd6 <tcp_netif_ip_addr_changed+0x32>
}
 801bce8:	bd38      	pop	{r3, r4, r5, pc}
 801bcea:	4770      	bx	lr
 801bcec:	2002dbcc 	.word	0x2002dbcc
 801bcf0:	2002dbd4 	.word	0x2002dbd4
 801bcf4:	2002dbd8 	.word	0x2002dbd8

0801bcf8 <tcp_free_ooseq>:
{
 801bcf8:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801bcfa:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801bcfc:	b16c      	cbz	r4, 801bd1a <tcp_free_ooseq+0x22>
 801bcfe:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801bd00:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801bd02:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bd04:	6868      	ldr	r0, [r5, #4]
 801bd06:	b108      	cbz	r0, 801bd0c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801bd08:	f7fe fa32 	bl	801a170 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd0c:	4629      	mov	r1, r5
 801bd0e:	2004      	movs	r0, #4
 801bd10:	f7fd fd16 	bl	8019740 <memp_free>
  while (seg != NULL) {
 801bd14:	2c00      	cmp	r4, #0
 801bd16:	d1f3      	bne.n	801bd00 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801bd18:	6774      	str	r4, [r6, #116]	; 0x74
}
 801bd1a:	bd70      	pop	{r4, r5, r6, pc}

0801bd1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bd1e:	4605      	mov	r5, r0
{
 801bd20:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bd22:	2800      	cmp	r0, #0
 801bd24:	d03e      	beq.n	801bda4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bd26:	68eb      	ldr	r3, [r5, #12]
 801bd28:	8998      	ldrh	r0, [r3, #12]
 801bd2a:	f7fc f9e5 	bl	80180f8 <lwip_htons>
 801bd2e:	07c2      	lsls	r2, r0, #31
 801bd30:	d432      	bmi.n	801bd98 <tcp_oos_insert_segment+0x7c>
 801bd32:	4e20      	ldr	r6, [pc, #128]	; (801bdb4 <tcp_oos_insert_segment+0x98>)
 801bd34:	e005      	b.n	801bd42 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801bd36:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801bd38:	4620      	mov	r0, r4
 801bd3a:	f7fe ff95 	bl	801ac68 <tcp_seg_free>
    while (next &&
 801bd3e:	463c      	mov	r4, r7
 801bd40:	b1ef      	cbz	r7, 801bd7e <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801bd42:	68e1      	ldr	r1, [r4, #12]
 801bd44:	8923      	ldrh	r3, [r4, #8]
 801bd46:	6837      	ldr	r7, [r6, #0]
 801bd48:	892a      	ldrh	r2, [r5, #8]
 801bd4a:	6848      	ldr	r0, [r1, #4]
 801bd4c:	443a      	add	r2, r7
 801bd4e:	4403      	add	r3, r0
 801bd50:	1ad3      	subs	r3, r2, r3
    while (next &&
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	db15      	blt.n	801bd82 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801bd56:	8988      	ldrh	r0, [r1, #12]
 801bd58:	f7fc f9ce 	bl	80180f8 <lwip_htons>
 801bd5c:	07c3      	lsls	r3, r0, #31
 801bd5e:	d5ea      	bpl.n	801bd36 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bd60:	68eb      	ldr	r3, [r5, #12]
 801bd62:	2001      	movs	r0, #1
 801bd64:	899f      	ldrh	r7, [r3, #12]
 801bd66:	f7fc f9c7 	bl	80180f8 <lwip_htons>
 801bd6a:	68eb      	ldr	r3, [r5, #12]
 801bd6c:	4338      	orrs	r0, r7
      next = next->next;
 801bd6e:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bd70:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801bd72:	4620      	mov	r0, r4
 801bd74:	f7fe ff78 	bl	801ac68 <tcp_seg_free>
    while (next &&
 801bd78:	463c      	mov	r4, r7
 801bd7a:	2f00      	cmp	r7, #0
 801bd7c:	d1e1      	bne.n	801bd42 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801bd7e:	602c      	str	r4, [r5, #0]
}
 801bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801bd82:	1a12      	subs	r2, r2, r0
    if (next &&
 801bd84:	2a00      	cmp	r2, #0
 801bd86:	ddfa      	ble.n	801bd7e <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801bd88:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801bd8a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801bd8c:	b289      	uxth	r1, r1
 801bd8e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801bd90:	f7fe f8d6 	bl	8019f40 <pbuf_realloc>
  cseg->next = next;
 801bd94:	602c      	str	r4, [r5, #0]
}
 801bd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801bd98:	4620      	mov	r0, r4
    next = NULL;
 801bd9a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801bd9c:	f7fe ff52 	bl	801ac44 <tcp_segs_free>
  cseg->next = next;
 801bda0:	602c      	str	r4, [r5, #0]
}
 801bda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bda4:	4b04      	ldr	r3, [pc, #16]	; (801bdb8 <tcp_oos_insert_segment+0x9c>)
 801bda6:	f240 421f 	movw	r2, #1055	; 0x41f
 801bdaa:	4904      	ldr	r1, [pc, #16]	; (801bdbc <tcp_oos_insert_segment+0xa0>)
 801bdac:	4804      	ldr	r0, [pc, #16]	; (801bdc0 <tcp_oos_insert_segment+0xa4>)
 801bdae:	f008 faa9 	bl	8024304 <iprintf>
 801bdb2:	e7b8      	b.n	801bd26 <tcp_oos_insert_segment+0xa>
 801bdb4:	2002dc0c 	.word	0x2002dc0c
 801bdb8:	08042e90 	.word	0x08042e90
 801bdbc:	08042ec4 	.word	0x08042ec4
 801bdc0:	08028ab4 	.word	0x08028ab4

0801bdc4 <tcp_input_delayed_close>:
{
 801bdc4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	b1c8      	cbz	r0, 801bdfe <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801bdca:	4b11      	ldr	r3, [pc, #68]	; (801be10 <tcp_input_delayed_close+0x4c>)
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	f013 0310 	ands.w	r3, r3, #16
 801bdd2:	d101      	bne.n	801bdd8 <tcp_input_delayed_close+0x14>
  return 0;
 801bdd4:	4618      	mov	r0, r3
}
 801bdd6:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bdd8:	8b63      	ldrh	r3, [r4, #26]
 801bdda:	06db      	lsls	r3, r3, #27
 801bddc:	d406      	bmi.n	801bdec <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bdde:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801bde2:	b11b      	cbz	r3, 801bdec <tcp_input_delayed_close+0x28>
 801bde4:	f06f 010e 	mvn.w	r1, #14
 801bde8:	6920      	ldr	r0, [r4, #16]
 801bdea:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bdec:	4621      	mov	r1, r4
 801bdee:	4809      	ldr	r0, [pc, #36]	; (801be14 <tcp_input_delayed_close+0x50>)
 801bdf0:	f7ff fb02 	bl	801b3f8 <tcp_pcb_remove>
    tcp_free(pcb);
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	f7fe fcfb 	bl	801a7f0 <tcp_free>
 801bdfa:	2001      	movs	r0, #1
}
 801bdfc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bdfe:	4b06      	ldr	r3, [pc, #24]	; (801be18 <tcp_input_delayed_close+0x54>)
 801be00:	f240 225a 	movw	r2, #602	; 0x25a
 801be04:	4905      	ldr	r1, [pc, #20]	; (801be1c <tcp_input_delayed_close+0x58>)
 801be06:	4806      	ldr	r0, [pc, #24]	; (801be20 <tcp_input_delayed_close+0x5c>)
 801be08:	f008 fa7c 	bl	8024304 <iprintf>
 801be0c:	e7dd      	b.n	801bdca <tcp_input_delayed_close+0x6>
 801be0e:	bf00      	nop
 801be10:	2002dc08 	.word	0x2002dc08
 801be14:	2002dbcc 	.word	0x2002dbcc
 801be18:	08042e90 	.word	0x08042e90
 801be1c:	08042eec 	.word	0x08042eec
 801be20:	08028ab4 	.word	0x08028ab4

0801be24 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be28:	b083      	sub	sp, #12
 801be2a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801be2c:	2900      	cmp	r1, #0
 801be2e:	d03d      	beq.n	801beac <tcp_free_acked_segments.constprop.0+0x88>
 801be30:	4607      	mov	r7, r0
 801be32:	460c      	mov	r4, r1
 801be34:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801befc <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801be38:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801bef0 <tcp_free_acked_segments.constprop.0+0xcc>
 801be3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801bf00 <tcp_free_acked_segments.constprop.0+0xdc>
 801be40:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801bef8 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801be44:	68e3      	ldr	r3, [r4, #12]
 801be46:	6858      	ldr	r0, [r3, #4]
 801be48:	f7fc f95a 	bl	8018100 <lwip_htonl>
 801be4c:	68e3      	ldr	r3, [r4, #12]
 801be4e:	4605      	mov	r5, r0
 801be50:	8926      	ldrh	r6, [r4, #8]
 801be52:	8998      	ldrh	r0, [r3, #12]
 801be54:	f7fc f950 	bl	80180f8 <lwip_htons>
 801be58:	f8d8 3000 	ldr.w	r3, [r8]
 801be5c:	f010 0003 	ands.w	r0, r0, #3
 801be60:	eba5 0503 	sub.w	r5, r5, r3
 801be64:	bf18      	it	ne
 801be66:	2001      	movne	r0, #1
 801be68:	4435      	add	r5, r6
 801be6a:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801be6c:	2800      	cmp	r0, #0
 801be6e:	dc37      	bgt.n	801bee0 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801be70:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801be74:	f7fe f990 	bl	801a198 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801be78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801be7c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801be7e:	4298      	cmp	r0, r3
 801be80:	d824      	bhi.n	801becc <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801be82:	491a      	ldr	r1, [pc, #104]	; (801beec <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801be84:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801be86:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801be88:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801be8a:	880d      	ldrh	r5, [r1, #0]
 801be8c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801be8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801be92:	1953      	adds	r3, r2, r5
 801be94:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801be96:	f7fe fee7 	bl	801ac68 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801be9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801be9e:	b11b      	cbz	r3, 801bea8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801bea0:	9b01      	ldr	r3, [sp, #4]
 801bea2:	ea56 0503 	orrs.w	r5, r6, r3
 801bea6:	d006      	beq.n	801beb6 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801bea8:	2e00      	cmp	r6, #0
 801beaa:	d1cb      	bne.n	801be44 <tcp_free_acked_segments.constprop.0+0x20>
 801beac:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801beae:	4628      	mov	r0, r5
 801beb0:	b003      	add	sp, #12
 801beb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801beb6:	4b0e      	ldr	r3, [pc, #56]	; (801bef0 <tcp_free_acked_segments.constprop.0+0xcc>)
 801beb8:	f240 4261 	movw	r2, #1121	; 0x461
 801bebc:	490d      	ldr	r1, [pc, #52]	; (801bef4 <tcp_free_acked_segments.constprop.0+0xd0>)
 801bebe:	480e      	ldr	r0, [pc, #56]	; (801bef8 <tcp_free_acked_segments.constprop.0+0xd4>)
 801bec0:	f008 fa20 	bl	8024304 <iprintf>
}
 801bec4:	4628      	mov	r0, r5
 801bec6:	b003      	add	sp, #12
 801bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801becc:	465b      	mov	r3, fp
 801bece:	f240 4257 	movw	r2, #1111	; 0x457
 801bed2:	4651      	mov	r1, sl
 801bed4:	4648      	mov	r0, r9
 801bed6:	f008 fa15 	bl	8024304 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801beda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801bede:	e7d0      	b.n	801be82 <tcp_free_acked_segments.constprop.0+0x5e>
 801bee0:	4625      	mov	r5, r4
}
 801bee2:	4628      	mov	r0, r5
 801bee4:	b003      	add	sp, #12
 801bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beea:	bf00      	nop
 801beec:	2002dc00 	.word	0x2002dc00
 801bef0:	08042e90 	.word	0x08042e90
 801bef4:	08042f3c 	.word	0x08042f3c
 801bef8:	08028ab4 	.word	0x08028ab4
 801befc:	2002dbe8 	.word	0x2002dbe8
 801bf00:	08042f14 	.word	0x08042f14

0801bf04 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801bf04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801bf08:	4604      	mov	r4, r0
 801bf0a:	2800      	cmp	r0, #0
 801bf0c:	f000 8200 	beq.w	801c310 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801bf10:	7d23      	ldrb	r3, [r4, #20]
 801bf12:	2b03      	cmp	r3, #3
 801bf14:	f240 811e 	bls.w	801c154 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801bf18:	4bb4      	ldr	r3, [pc, #720]	; (801c1ec <tcp_receive+0x2e8>)
 801bf1a:	781b      	ldrb	r3, [r3, #0]
 801bf1c:	06dd      	lsls	r5, r3, #27
 801bf1e:	f100 8097 	bmi.w	801c050 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bf22:	4fb3      	ldr	r7, [pc, #716]	; (801c1f0 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bf24:	4eb3      	ldr	r6, [pc, #716]	; (801c1f4 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bf26:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bf28:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801bf2a:	2900      	cmp	r1, #0
 801bf2c:	d07f      	beq.n	801c02e <tcp_receive+0x12a>
 801bf2e:	7d22      	ldrb	r2, [r4, #20]
 801bf30:	2a06      	cmp	r2, #6
 801bf32:	d87c      	bhi.n	801c02e <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bf34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bf36:	eba2 0803 	sub.w	r8, r2, r3
 801bf3a:	f1b8 0f01 	cmp.w	r8, #1
 801bf3e:	d405      	bmi.n	801bf4c <tcp_receive+0x48>
 801bf40:	1c50      	adds	r0, r2, #1
 801bf42:	1ac0      	subs	r0, r0, r3
 801bf44:	1a41      	subs	r1, r0, r1
 801bf46:	2900      	cmp	r1, #0
 801bf48:	f340 81f3 	ble.w	801c332 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801bf4c:	1a99      	subs	r1, r3, r2
 801bf4e:	2900      	cmp	r1, #0
 801bf50:	f2c0 81ea 	blt.w	801c328 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bf54:	f103 0c01 	add.w	ip, r3, #1
 801bf58:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801bf5a:	ebac 0102 	sub.w	r1, ip, r2
 801bf5e:	1a09      	subs	r1, r1, r0
 801bf60:	2900      	cmp	r1, #0
 801bf62:	dc39      	bgt.n	801bfd8 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801bf64:	429a      	cmp	r2, r3
 801bf66:	f000 8470 	beq.w	801c84a <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801bf6a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801bf6c:	2d00      	cmp	r5, #0
 801bf6e:	f000 8378 	beq.w	801c662 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801bf72:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801bf74:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801bf78:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801bf7c:	6842      	ldr	r2, [r0, #4]
 801bf7e:	429a      	cmp	r2, r3
 801bf80:	d019      	beq.n	801bfb6 <tcp_receive+0xb2>
              if (prev == NULL) {
 801bf82:	f1b8 0f00 	cmp.w	r8, #0
 801bf86:	f000 815b 	beq.w	801c240 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801bf8a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801bf8e:	6849      	ldr	r1, [r1, #4]
 801bf90:	ebae 0101 	sub.w	r1, lr, r1
 801bf94:	2900      	cmp	r1, #0
 801bf96:	db04      	blt.n	801bfa2 <tcp_receive+0x9e>
 801bf98:	ebac 0102 	sub.w	r1, ip, r2
 801bf9c:	2900      	cmp	r1, #0
 801bf9e:	f340 8369 	ble.w	801c674 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801bfa2:	6829      	ldr	r1, [r5, #0]
 801bfa4:	46a8      	mov	r8, r5
 801bfa6:	2900      	cmp	r1, #0
 801bfa8:	f000 8159 	beq.w	801c25e <tcp_receive+0x35a>
 801bfac:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801bfae:	68e8      	ldr	r0, [r5, #12]
 801bfb0:	6842      	ldr	r2, [r0, #4]
 801bfb2:	429a      	cmp	r2, r3
 801bfb4:	d1e5      	bne.n	801bf82 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801bfb6:	4890      	ldr	r0, [pc, #576]	; (801c1f8 <tcp_receive+0x2f4>)
 801bfb8:	892b      	ldrh	r3, [r5, #8]
 801bfba:	8902      	ldrh	r2, [r0, #8]
 801bfbc:	429a      	cmp	r2, r3
 801bfbe:	d90b      	bls.n	801bfd8 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801bfc0:	f7fe fe70 	bl	801aca4 <tcp_seg_copy>
                if (cseg != NULL) {
 801bfc4:	b140      	cbz	r0, 801bfd8 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801bfc6:	f1b8 0f00 	cmp.w	r8, #0
 801bfca:	f000 8414 	beq.w	801c7f6 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801bfce:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801bfd2:	4629      	mov	r1, r5
 801bfd4:	f7ff fea2 	bl	801bd1c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801bfd8:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801bfda:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801bfde:	f002 ba47 	b.w	801e470 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801bfe2:	4f83      	ldr	r7, [pc, #524]	; (801c1f0 <tcp_receive+0x2ec>)
 801bfe4:	8839      	ldrh	r1, [r7, #0]
 801bfe6:	2900      	cmp	r1, #0
 801bfe8:	f040 8116 	bne.w	801c218 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801bfec:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801bfee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bff0:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801bff4:	4470      	add	r0, lr
 801bff6:	4560      	cmp	r0, ip
 801bff8:	f040 810e 	bne.w	801c218 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801bffc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801bffe:	0400      	lsls	r0, r0, #16
 801c000:	f100 810a 	bmi.w	801c218 <tcp_receive+0x314>
 801c004:	4590      	cmp	r8, r2
 801c006:	f040 8107 	bne.w	801c218 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c00a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801c00e:	28ff      	cmp	r0, #255	; 0xff
 801c010:	f000 8393 	beq.w	801c73a <tcp_receive+0x836>
                ++pcb->dupacks;
 801c014:	3001      	adds	r0, #1
 801c016:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801c018:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801c01a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801c01e:	f200 838c 	bhi.w	801c73a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801c022:	f000 8396 	beq.w	801c752 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c026:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c028:	2800      	cmp	r0, #0
 801c02a:	f040 80b6 	bne.w	801c19a <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c02e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c030:	1a99      	subs	r1, r3, r2
 801c032:	2900      	cmp	r1, #0
 801c034:	db06      	blt.n	801c044 <tcp_receive+0x140>
 801c036:	f1c2 0201 	rsb	r2, r2, #1
 801c03a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801c03c:	1a52      	subs	r2, r2, r1
 801c03e:	4413      	add	r3, r2
 801c040:	2b00      	cmp	r3, #0
 801c042:	dd03      	ble.n	801c04c <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801c044:	8b63      	ldrh	r3, [r4, #26]
 801c046:	f043 0302 	orr.w	r3, r3, #2
 801c04a:	8363      	strh	r3, [r4, #26]
}
 801c04c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c050:	4e68      	ldr	r6, [pc, #416]	; (801c1f4 <tcp_receive+0x2f0>)
 801c052:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801c054:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c056:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c05a:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c05c:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c060:	2900      	cmp	r1, #0
 801c062:	db7f      	blt.n	801c164 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c064:	4d65      	ldr	r5, [pc, #404]	; (801c1fc <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c066:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c068:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c06a:	f000 80d9 	beq.w	801c220 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c06e:	4594      	cmp	ip, r2
 801c070:	f000 80df 	beq.w	801c232 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c074:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801c078:	eba2 0108 	sub.w	r1, r2, r8
 801c07c:	2900      	cmp	r1, #0
 801c07e:	ddb0      	ble.n	801bfe2 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c080:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c082:	1ad3      	subs	r3, r2, r3
 801c084:	2b00      	cmp	r3, #0
 801c086:	dc7d      	bgt.n	801c184 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801c088:	8b63      	ldrh	r3, [r4, #26]
 801c08a:	0758      	lsls	r0, r3, #29
 801c08c:	d509      	bpl.n	801c0a2 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801c08e:	f023 0304 	bic.w	r3, r3, #4
 801c092:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801c094:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801c098:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c09c:	2300      	movs	r3, #0
 801c09e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c0a2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801c0a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801c0a8:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c0aa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801c0ae:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c0b0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801c0b4:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801c0b6:	f04f 0300 	mov.w	r3, #0
 801c0ba:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801c0be:	d913      	bls.n	801c0e8 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801c0c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c0c4:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801c0c6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	f200 81c9 	bhi.w	801c462 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c0d0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801c0d4:	4411      	add	r1, r2
 801c0d6:	b289      	uxth	r1, r1
 801c0d8:	428a      	cmp	r2, r1
 801c0da:	f200 82a9 	bhi.w	801c630 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c0de:	428b      	cmp	r3, r1
 801c0e0:	f240 82a8 	bls.w	801c634 <tcp_receive+0x730>
 801c0e4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c0e8:	4620      	mov	r0, r4
 801c0ea:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801c0ee:	f7ff fe99 	bl	801be24 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c0f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801c0f4:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c0f6:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	f7ff fe93 	bl	801be24 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801c0fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c100:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801c102:	fab2 f382 	clz	r3, r2
 801c106:	095b      	lsrs	r3, r3, #5
 801c108:	425b      	negs	r3, r3
 801c10a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801c10c:	2300      	movs	r3, #0
 801c10e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801c110:	2800      	cmp	r0, #0
 801c112:	f000 81a3 	beq.w	801c45c <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c116:	4b3a      	ldr	r3, [pc, #232]	; (801c200 <tcp_receive+0x2fc>)
 801c118:	8819      	ldrh	r1, [r3, #0]
 801c11a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801c11e:	440b      	add	r3, r1
 801c120:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801c124:	8b63      	ldrh	r3, [r4, #26]
 801c126:	0519      	lsls	r1, r3, #20
 801c128:	f140 80fa 	bpl.w	801c320 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801c12c:	2a00      	cmp	r2, #0
 801c12e:	f000 81af 	beq.w	801c490 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c132:	68d3      	ldr	r3, [r2, #12]
 801c134:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801c136:	6858      	ldr	r0, [r3, #4]
 801c138:	f7fb ffe2 	bl	8018100 <lwip_htonl>
 801c13c:	1a38      	subs	r0, r7, r0
 801c13e:	2800      	cmp	r0, #0
 801c140:	f300 80ee 	bgt.w	801c320 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801c144:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c146:	4f2a      	ldr	r7, [pc, #168]	; (801c1f0 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801c148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c14c:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801c14e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c150:	6833      	ldr	r3, [r6, #0]
 801c152:	e01d      	b.n	801c190 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c154:	4b2b      	ldr	r3, [pc, #172]	; (801c204 <tcp_receive+0x300>)
 801c156:	f240 427c 	movw	r2, #1148	; 0x47c
 801c15a:	492b      	ldr	r1, [pc, #172]	; (801c208 <tcp_receive+0x304>)
 801c15c:	482b      	ldr	r0, [pc, #172]	; (801c20c <tcp_receive+0x308>)
 801c15e:	f008 f8d1 	bl	8024304 <iprintf>
 801c162:	e6d9      	b.n	801bf18 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c164:	4a2a      	ldr	r2, [pc, #168]	; (801c210 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c166:	4d25      	ldr	r5, [pc, #148]	; (801c1fc <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c168:	6812      	ldr	r2, [r2, #0]
 801c16a:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c16c:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c16e:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c172:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c176:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801c178:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c17c:	bf38      	it	cc
 801c17e:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801c182:	e777      	b.n	801c074 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c184:	4f1a      	ldr	r7, [pc, #104]	; (801c1f0 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801c186:	4620      	mov	r0, r4
 801c188:	f002 f972 	bl	801e470 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c18c:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c18e:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c190:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801c192:	2800      	cmp	r0, #0
 801c194:	f43f aec9 	beq.w	801bf2a <tcp_receive+0x26>
 801c198:	682a      	ldr	r2, [r5, #0]
 801c19a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801c19c:	1aaa      	subs	r2, r5, r2
 801c19e:	2a00      	cmp	r2, #0
 801c1a0:	f6bf aec3 	bge.w	801bf2a <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801c1a4:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c1a8:	b280      	uxth	r0, r0
 801c1aa:	4a1a      	ldr	r2, [pc, #104]	; (801c214 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801c1ac:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c1b0:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801c1b4:	ebae 020c 	sub.w	r2, lr, ip
 801c1b8:	1a12      	subs	r2, r2, r0
 801c1ba:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801c1bc:	4415      	add	r5, r2
      if (m < 0) {
 801c1be:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801c1c2:	b22d      	sxth	r5, r5
 801c1c4:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801c1c6:	d003      	beq.n	801c1d0 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801c1c8:	ebac 0c0e 	sub.w	ip, ip, lr
 801c1cc:	4460      	add	r0, ip
 801c1ce:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801c1d0:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c1d4:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801c1d8:	4410      	add	r0, r2
      pcb->rttest = 0;
 801c1da:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801c1dc:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801c1de:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c1e0:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801c1e4:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c1e6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801c1ea:	e69e      	b.n	801bf2a <tcp_receive+0x26>
 801c1ec:	2002dbec 	.word	0x2002dbec
 801c1f0:	2002dc26 	.word	0x2002dc26
 801c1f4:	2002dc0c 	.word	0x2002dc0c
 801c1f8:	2002dbf0 	.word	0x2002dbf0
 801c1fc:	2002dbe8 	.word	0x2002dbe8
 801c200:	2002dc00 	.word	0x2002dc00
 801c204:	08042e90 	.word	0x08042e90
 801c208:	08042f78 	.word	0x08042f78
 801c20c:	08028ab4 	.word	0x08028ab4
 801c210:	2002dc18 	.word	0x2002dc18
 801c214:	2002dbdc 	.word	0x2002dbdc
        pcb->dupacks = 0;
 801c218:	2200      	movs	r2, #0
 801c21a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801c21e:	e7b7      	b.n	801c190 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c220:	ebac 0102 	sub.w	r1, ip, r2
 801c224:	2900      	cmp	r1, #0
 801c226:	f6bf af22 	bge.w	801c06e <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c22a:	49ac      	ldr	r1, [pc, #688]	; (801c4dc <tcp_receive+0x5d8>)
 801c22c:	6809      	ldr	r1, [r1, #0]
 801c22e:	89c9      	ldrh	r1, [r1, #14]
 801c230:	e79d      	b.n	801c16e <tcp_receive+0x26a>
 801c232:	49aa      	ldr	r1, [pc, #680]	; (801c4dc <tcp_receive+0x5d8>)
 801c234:	6809      	ldr	r1, [r1, #0]
 801c236:	89c9      	ldrh	r1, [r1, #14]
 801c238:	458e      	cmp	lr, r1
 801c23a:	f4bf af1b 	bcs.w	801c074 <tcp_receive+0x170>
 801c23e:	e796      	b.n	801c16e <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c240:	1a99      	subs	r1, r3, r2
 801c242:	2900      	cmp	r1, #0
 801c244:	f6bf aead 	bge.w	801bfa2 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c248:	48a5      	ldr	r0, [pc, #660]	; (801c4e0 <tcp_receive+0x5dc>)
 801c24a:	f7fe fd2b 	bl	801aca4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801c24e:	2800      	cmp	r0, #0
 801c250:	f43f aec2 	beq.w	801bfd8 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801c254:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801c256:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c258:	f7ff fd60 	bl	801bd1c <tcp_oos_insert_segment>
 801c25c:	e6bc      	b.n	801bfd8 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c25e:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801c260:	2b00      	cmp	r3, #0
 801c262:	f77f aeb9 	ble.w	801bfd8 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c266:	8980      	ldrh	r0, [r0, #12]
 801c268:	f7fb ff46 	bl	80180f8 <lwip_htons>
 801c26c:	07c1      	lsls	r1, r0, #31
 801c26e:	f53f aeb3 	bmi.w	801bfd8 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801c272:	489b      	ldr	r0, [pc, #620]	; (801c4e0 <tcp_receive+0x5dc>)
 801c274:	f7fe fd16 	bl	801aca4 <tcp_seg_copy>
 801c278:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801c27a:	2800      	cmp	r0, #0
 801c27c:	f43f aeac 	beq.w	801bfd8 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c280:	68eb      	ldr	r3, [r5, #12]
 801c282:	892a      	ldrh	r2, [r5, #8]
 801c284:	6859      	ldr	r1, [r3, #4]
 801c286:	6833      	ldr	r3, [r6, #0]
 801c288:	440a      	add	r2, r1
 801c28a:	1ad2      	subs	r2, r2, r3
 801c28c:	2a00      	cmp	r2, #0
 801c28e:	dd05      	ble.n	801c29c <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c290:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801c292:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c294:	b299      	uxth	r1, r3
 801c296:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801c298:	f7fd fe52 	bl	8019f40 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c29c:	6832      	ldr	r2, [r6, #0]
 801c29e:	883b      	ldrh	r3, [r7, #0]
 801c2a0:	4413      	add	r3, r2
 801c2a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c2a4:	1a9b      	subs	r3, r3, r2
 801c2a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c2a8:	1a9b      	subs	r3, r3, r2
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	f77f ae94 	ble.w	801bfd8 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c2b0:	682b      	ldr	r3, [r5, #0]
 801c2b2:	68db      	ldr	r3, [r3, #12]
 801c2b4:	8998      	ldrh	r0, [r3, #12]
 801c2b6:	f7fb ff1f 	bl	80180f8 <lwip_htons>
 801c2ba:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c2bc:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c2be:	f100 82b1 	bmi.w	801c824 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c2c2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801c2c4:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801c2c6:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c2c8:	1a89      	subs	r1, r1, r2
 801c2ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c2cc:	4411      	add	r1, r2
 801c2ce:	b289      	uxth	r1, r1
 801c2d0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c2d2:	f7fd fe35 	bl	8019f40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c2d6:	682b      	ldr	r3, [r5, #0]
 801c2d8:	891d      	ldrh	r5, [r3, #8]
 801c2da:	68db      	ldr	r3, [r3, #12]
 801c2dc:	8998      	ldrh	r0, [r3, #12]
 801c2de:	f7fb ff0b 	bl	80180f8 <lwip_htons>
 801c2e2:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c2e6:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801c2e8:	bf18      	it	ne
 801c2ea:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c2ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801c2ee:	442b      	add	r3, r5
 801c2f0:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c2f2:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801c2f4:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c2f8:	4413      	add	r3, r2
 801c2fa:	4299      	cmp	r1, r3
 801c2fc:	f43f ae6c 	beq.w	801bfd8 <tcp_receive+0xd4>
 801c300:	4b78      	ldr	r3, [pc, #480]	; (801c4e4 <tcp_receive+0x5e0>)
 801c302:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c306:	4978      	ldr	r1, [pc, #480]	; (801c4e8 <tcp_receive+0x5e4>)
 801c308:	4878      	ldr	r0, [pc, #480]	; (801c4ec <tcp_receive+0x5e8>)
 801c30a:	f007 fffb 	bl	8024304 <iprintf>
 801c30e:	e663      	b.n	801bfd8 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c310:	4b74      	ldr	r3, [pc, #464]	; (801c4e4 <tcp_receive+0x5e0>)
 801c312:	f240 427b 	movw	r2, #1147	; 0x47b
 801c316:	4976      	ldr	r1, [pc, #472]	; (801c4f0 <tcp_receive+0x5ec>)
 801c318:	4874      	ldr	r0, [pc, #464]	; (801c4ec <tcp_receive+0x5e8>)
 801c31a:	f007 fff3 	bl	8024304 <iprintf>
 801c31e:	e5f7      	b.n	801bf10 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c320:	4f74      	ldr	r7, [pc, #464]	; (801c4f4 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c322:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c324:	8839      	ldrh	r1, [r7, #0]
 801c326:	e733      	b.n	801c190 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801c328:	8b63      	ldrh	r3, [r4, #26]
 801c32a:	f043 0302 	orr.w	r3, r3, #2
 801c32e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c330:	e652      	b.n	801bfd8 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801c332:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801c4e0 <tcp_receive+0x5dc>
 801c336:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c33a:	2d00      	cmp	r5, #0
 801c33c:	f000 8170 	beq.w	801c620 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c340:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801c344:	4598      	cmp	r8, r3
 801c346:	f200 80c0 	bhi.w	801c4ca <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c34a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801c34e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c352:	891a      	ldrh	r2, [r3, #8]
 801c354:	4542      	cmp	r2, r8
 801c356:	f0c0 80ad 	bcc.w	801c4b4 <tcp_receive+0x5b0>
      inseg.len -= off;
 801c35a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c35e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801c362:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c366:	b292      	uxth	r2, r2
      inseg.len -= off;
 801c368:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801c36c:	896b      	ldrh	r3, [r5, #10]
 801c36e:	4543      	cmp	r3, r8
 801c370:	d20a      	bcs.n	801c388 <tcp_receive+0x484>
        p->len = 0;
 801c372:	2100      	movs	r1, #0
        off -= p->len;
 801c374:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801c378:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801c37a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801c37c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801c37e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801c382:	896b      	ldrh	r3, [r5, #10]
 801c384:	4543      	cmp	r3, r8
 801c386:	d3f5      	bcc.n	801c374 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801c388:	4641      	mov	r1, r8
 801c38a:	4628      	mov	r0, r5
 801c38c:	f7fd fe64 	bl	801a058 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c392:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c396:	6033      	str	r3, [r6, #0]
 801c398:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c39a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	f43f ae1b 	beq.w	801bfd8 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801c3a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c3a6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801c3aa:	8998      	ldrh	r0, [r3, #12]
 801c3ac:	f7fb fea4 	bl	80180f8 <lwip_htons>
 801c3b0:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801c3b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801c3b6:	bf18      	it	ne
 801c3b8:	2301      	movne	r3, #1
 801c3ba:	442b      	add	r3, r5
 801c3bc:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801c3be:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801c3c0:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801c3c2:	f0c0 8181 	bcc.w	801c6c8 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801c3c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f000 80a0 	beq.w	801c50e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c3ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c3d2:	8998      	ldrh	r0, [r3, #12]
 801c3d4:	f7fb fe90 	bl	80180f8 <lwip_htons>
 801c3d8:	07c2      	lsls	r2, r0, #31
 801c3da:	f100 8095 	bmi.w	801c508 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801c3de:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801c3e0:	b955      	cbnz	r5, 801c3f8 <tcp_receive+0x4f4>
 801c3e2:	e1f4      	b.n	801c7ce <tcp_receive+0x8ca>
              next = next->next;
 801c3e4:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801c3e8:	4628      	mov	r0, r5
 801c3ea:	f7fe fc3d 	bl	801ac68 <tcp_seg_free>
            while (next &&
 801c3ee:	4645      	mov	r5, r8
 801c3f0:	f1b8 0f00 	cmp.w	r8, #0
 801c3f4:	f000 81eb 	beq.w	801c7ce <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801c3f8:	68e8      	ldr	r0, [r5, #12]
 801c3fa:	883a      	ldrh	r2, [r7, #0]
 801c3fc:	f8d6 e000 	ldr.w	lr, [r6]
 801c400:	892b      	ldrh	r3, [r5, #8]
 801c402:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801c406:	eb02 010e 	add.w	r1, r2, lr
 801c40a:	4463      	add	r3, ip
 801c40c:	1acb      	subs	r3, r1, r3
            while (next &&
 801c40e:	2b00      	cmp	r3, #0
 801c410:	f2c0 81a5 	blt.w	801c75e <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c414:	8980      	ldrh	r0, [r0, #12]
 801c416:	f7fb fe6f 	bl	80180f8 <lwip_htons>
 801c41a:	07c3      	lsls	r3, r0, #31
 801c41c:	d5e2      	bpl.n	801c3e4 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c41e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c422:	8998      	ldrh	r0, [r3, #12]
 801c424:	f7fb fe68 	bl	80180f8 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c428:	0780      	lsls	r0, r0, #30
 801c42a:	d4db      	bmi.n	801c3e4 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c42c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c430:	2001      	movs	r0, #1
 801c432:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801c436:	f7fb fe5f 	bl	80180f8 <lwip_htons>
 801c43a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c43e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801c442:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c446:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c448:	b280      	uxth	r0, r0
 801c44a:	f7fb fe55 	bl	80180f8 <lwip_htons>
 801c44e:	f010 0003 	ands.w	r0, r0, #3
 801c452:	bf18      	it	ne
 801c454:	2001      	movne	r0, #1
 801c456:	4440      	add	r0, r8
 801c458:	8038      	strh	r0, [r7, #0]
 801c45a:	e7c3      	b.n	801c3e4 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801c45c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801c460:	e659      	b.n	801c116 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c462:	8b62      	ldrh	r2, [r4, #26]
 801c464:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c468:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c46a:	bf14      	ite	ne
 801c46c:	2001      	movne	r0, #1
 801c46e:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c470:	fb12 f200 	smulbb	r2, r2, r0
 801c474:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801c476:	428a      	cmp	r2, r1
 801c478:	bf94      	ite	ls
 801c47a:	1898      	addls	r0, r3, r2
 801c47c:	1858      	addhi	r0, r3, r1
 801c47e:	b282      	uxth	r2, r0
 801c480:	4293      	cmp	r3, r2
 801c482:	f240 80e0 	bls.w	801c646 <tcp_receive+0x742>
 801c486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c48a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801c48e:	e62b      	b.n	801c0e8 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801c490:	b148      	cbz	r0, 801c4a6 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c492:	68c3      	ldr	r3, [r0, #12]
 801c494:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801c496:	6858      	ldr	r0, [r3, #4]
 801c498:	f7fb fe32 	bl	8018100 <lwip_htonl>
 801c49c:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801c49e:	2800      	cmp	r0, #0
 801c4a0:	f73f af3e 	bgt.w	801c320 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801c4a4:	8b63      	ldrh	r3, [r4, #26]
 801c4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c4aa:	4f12      	ldr	r7, [pc, #72]	; (801c4f4 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801c4ac:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c4ae:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c4b0:	6833      	ldr	r3, [r6, #0]
 801c4b2:	e66d      	b.n	801c190 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c4b4:	4b0b      	ldr	r3, [pc, #44]	; (801c4e4 <tcp_receive+0x5e0>)
 801c4b6:	f240 5297 	movw	r2, #1431	; 0x597
 801c4ba:	490f      	ldr	r1, [pc, #60]	; (801c4f8 <tcp_receive+0x5f4>)
 801c4bc:	480b      	ldr	r0, [pc, #44]	; (801c4ec <tcp_receive+0x5e8>)
 801c4be:	f007 ff21 	bl	8024304 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c4c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c4c6:	891a      	ldrh	r2, [r3, #8]
 801c4c8:	e747      	b.n	801c35a <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c4ca:	4b06      	ldr	r3, [pc, #24]	; (801c4e4 <tcp_receive+0x5e0>)
 801c4cc:	f240 5295 	movw	r2, #1429	; 0x595
 801c4d0:	490a      	ldr	r1, [pc, #40]	; (801c4fc <tcp_receive+0x5f8>)
 801c4d2:	4806      	ldr	r0, [pc, #24]	; (801c4ec <tcp_receive+0x5e8>)
 801c4d4:	f007 ff16 	bl	8024304 <iprintf>
 801c4d8:	e737      	b.n	801c34a <tcp_receive+0x446>
 801c4da:	bf00      	nop
 801c4dc:	2002dc18 	.word	0x2002dc18
 801c4e0:	2002dbf0 	.word	0x2002dbf0
 801c4e4:	08042e90 	.word	0x08042e90
 801c4e8:	08042fc4 	.word	0x08042fc4
 801c4ec:	08028ab4 	.word	0x08028ab4
 801c4f0:	08042f5c 	.word	0x08042f5c
 801c4f4:	2002dc26 	.word	0x2002dc26
 801c4f8:	08042fb4 	.word	0x08042fb4
 801c4fc:	08042fa4 	.word	0x08042fa4
              pcb->ooseq = pcb->ooseq->next;
 801c500:	6803      	ldr	r3, [r0, #0]
 801c502:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c504:	f7fe fbb0 	bl	801ac68 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c508:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801c50a:	2800      	cmp	r0, #0
 801c50c:	d1f8      	bne.n	801c500 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801c50e:	883a      	ldrh	r2, [r7, #0]
 801c510:	6831      	ldr	r1, [r6, #0]
 801c512:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c514:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801c516:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c518:	4293      	cmp	r3, r2
 801c51a:	f0c0 80cb 	bcc.w	801c6b4 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801c51e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801c520:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801c522:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801c524:	f7fe fa68 	bl	801a9f8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801c528:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c52c:	891a      	ldrh	r2, [r3, #8]
 801c52e:	b122      	cbz	r2, 801c53a <tcp_receive+0x636>
          recv_data = inseg.p;
 801c530:	4ab2      	ldr	r2, [pc, #712]	; (801c7fc <tcp_receive+0x8f8>)
 801c532:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801c534:	2300      	movs	r3, #0
 801c536:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c53a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c53e:	8998      	ldrh	r0, [r3, #12]
 801c540:	f7fb fdda 	bl	80180f8 <lwip_htons>
 801c544:	07c2      	lsls	r2, r0, #31
 801c546:	d504      	bpl.n	801c552 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801c548:	4aad      	ldr	r2, [pc, #692]	; (801c800 <tcp_receive+0x8fc>)
 801c54a:	7813      	ldrb	r3, [r2, #0]
 801c54c:	f043 0320 	orr.w	r3, r3, #32
 801c550:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801c552:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801c554:	2d00      	cmp	r5, #0
 801c556:	d07b      	beq.n	801c650 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c558:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801c808 <tcp_receive+0x904>
 801c55c:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801c820 <tcp_receive+0x91c>
 801c560:	4fa8      	ldr	r7, [pc, #672]	; (801c804 <tcp_receive+0x900>)
 801c562:	e033      	b.n	801c5cc <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801c564:	68eb      	ldr	r3, [r5, #12]
 801c566:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801c56a:	8998      	ldrh	r0, [r3, #12]
 801c56c:	f7fb fdc4 	bl	80180f8 <lwip_htons>
 801c570:	f010 0003 	ands.w	r0, r0, #3
 801c574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c576:	bf18      	it	ne
 801c578:	2001      	movne	r0, #1
 801c57a:	4450      	add	r0, sl
 801c57c:	1a18      	subs	r0, r3, r0
 801c57e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801c580:	4620      	mov	r0, r4
 801c582:	f7fe fa39 	bl	801a9f8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801c586:	6869      	ldr	r1, [r5, #4]
 801c588:	890b      	ldrh	r3, [r1, #8]
 801c58a:	b13b      	cbz	r3, 801c59c <tcp_receive+0x698>
            if (recv_data) {
 801c58c:	4b9b      	ldr	r3, [pc, #620]	; (801c7fc <tcp_receive+0x8f8>)
 801c58e:	6818      	ldr	r0, [r3, #0]
 801c590:	2800      	cmp	r0, #0
 801c592:	d05b      	beq.n	801c64c <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801c594:	f7fd fe1e 	bl	801a1d4 <pbuf_cat>
            cseg->p = NULL;
 801c598:	2300      	movs	r3, #0
 801c59a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c59c:	68eb      	ldr	r3, [r5, #12]
 801c59e:	8998      	ldrh	r0, [r3, #12]
 801c5a0:	f7fb fdaa 	bl	80180f8 <lwip_htons>
 801c5a4:	07c3      	lsls	r3, r0, #31
 801c5a6:	d509      	bpl.n	801c5bc <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801c5a8:	4a95      	ldr	r2, [pc, #596]	; (801c800 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c5aa:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801c5ac:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c5ae:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801c5b0:	f043 0320 	orr.w	r3, r3, #32
 801c5b4:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c5b6:	d101      	bne.n	801c5bc <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801c5b8:	2307      	movs	r3, #7
 801c5ba:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801c5bc:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801c5be:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801c5c0:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801c5c2:	f7fe fb51 	bl	801ac68 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c5c6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801c5c8:	2d00      	cmp	r5, #0
 801c5ca:	d041      	beq.n	801c650 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c5cc:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801c5ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c5d0:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801c5d2:	428b      	cmp	r3, r1
 801c5d4:	d13c      	bne.n	801c650 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801c5d6:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c5d8:	8990      	ldrh	r0, [r2, #12]
 801c5da:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801c5de:	f7fb fd8b 	bl	80180f8 <lwip_htons>
 801c5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5e4:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c5e8:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c5ec:	bf18      	it	ne
 801c5ee:	2001      	movne	r0, #1
 801c5f0:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c5f2:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c5f4:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c5f6:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c5fa:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c5fc:	8998      	ldrh	r0, [r3, #12]
 801c5fe:	f7fb fd7b 	bl	80180f8 <lwip_htons>
 801c602:	f010 0003 	ands.w	r0, r0, #3
 801c606:	bf18      	it	ne
 801c608:	2001      	movne	r0, #1
 801c60a:	4458      	add	r0, fp
 801c60c:	4582      	cmp	sl, r0
 801c60e:	d2a9      	bcs.n	801c564 <tcp_receive+0x660>
 801c610:	464b      	mov	r3, r9
 801c612:	f240 622b 	movw	r2, #1579	; 0x62b
 801c616:	4641      	mov	r1, r8
 801c618:	4638      	mov	r0, r7
 801c61a:	f007 fe73 	bl	8024304 <iprintf>
 801c61e:	e7a1      	b.n	801c564 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c620:	4b79      	ldr	r3, [pc, #484]	; (801c808 <tcp_receive+0x904>)
 801c622:	f240 5294 	movw	r2, #1428	; 0x594
 801c626:	4979      	ldr	r1, [pc, #484]	; (801c80c <tcp_receive+0x908>)
 801c628:	4876      	ldr	r0, [pc, #472]	; (801c804 <tcp_receive+0x900>)
 801c62a:	f007 fe6b 	bl	8024304 <iprintf>
 801c62e:	e687      	b.n	801c340 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c630:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c634:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c636:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c638:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c63a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c63e:	b292      	uxth	r2, r2
 801c640:	4293      	cmp	r3, r2
 801c642:	f63f af20 	bhi.w	801c486 <tcp_receive+0x582>
 801c646:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801c64a:	e54d      	b.n	801c0e8 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801c64c:	6019      	str	r1, [r3, #0]
 801c64e:	e7a3      	b.n	801c598 <tcp_receive+0x694>
        tcp_ack(pcb);
 801c650:	8b63      	ldrh	r3, [r4, #26]
 801c652:	07d8      	lsls	r0, r3, #31
 801c654:	d50a      	bpl.n	801c66c <tcp_receive+0x768>
 801c656:	f023 0301 	bic.w	r3, r3, #1
 801c65a:	f043 0302 	orr.w	r3, r3, #2
 801c65e:	8363      	strh	r3, [r4, #26]
 801c660:	e4f4      	b.n	801c04c <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c662:	486b      	ldr	r0, [pc, #428]	; (801c810 <tcp_receive+0x90c>)
 801c664:	f7fe fb1e 	bl	801aca4 <tcp_seg_copy>
 801c668:	6760      	str	r0, [r4, #116]	; 0x74
 801c66a:	e4b5      	b.n	801bfd8 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801c66c:	f043 0301 	orr.w	r3, r3, #1
 801c670:	8363      	strh	r3, [r4, #26]
 801c672:	e4eb      	b.n	801c04c <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c674:	4866      	ldr	r0, [pc, #408]	; (801c810 <tcp_receive+0x90c>)
 801c676:	f7fe fb15 	bl	801aca4 <tcp_seg_copy>
                  if (cseg != NULL) {
 801c67a:	4607      	mov	r7, r0
 801c67c:	2800      	cmp	r0, #0
 801c67e:	f43f acab 	beq.w	801bfd8 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c686:	6832      	ldr	r2, [r6, #0]
 801c688:	6859      	ldr	r1, [r3, #4]
 801c68a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801c68e:	440b      	add	r3, r1
 801c690:	1a9b      	subs	r3, r3, r2
 801c692:	2b00      	cmp	r3, #0
 801c694:	dd07      	ble.n	801c6a6 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c696:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801c698:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c69c:	b291      	uxth	r1, r2
 801c69e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c6a2:	f7fd fc4d 	bl	8019f40 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801c6a6:	4629      	mov	r1, r5
 801c6a8:	4638      	mov	r0, r7
                    prev->next = cseg;
 801c6aa:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801c6ae:	f7ff fb35 	bl	801bd1c <tcp_oos_insert_segment>
 801c6b2:	e491      	b.n	801bfd8 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c6b4:	4b54      	ldr	r3, [pc, #336]	; (801c808 <tcp_receive+0x904>)
 801c6b6:	f240 6207 	movw	r2, #1543	; 0x607
 801c6ba:	4956      	ldr	r1, [pc, #344]	; (801c814 <tcp_receive+0x910>)
 801c6bc:	4851      	ldr	r0, [pc, #324]	; (801c804 <tcp_receive+0x900>)
 801c6be:	f007 fe21 	bl	8024304 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801c6c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c6c4:	883a      	ldrh	r2, [r7, #0]
 801c6c6:	e72a      	b.n	801c51e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c6c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c6cc:	8998      	ldrh	r0, [r3, #12]
 801c6ce:	f7fb fd13 	bl	80180f8 <lwip_htons>
 801c6d2:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c6d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c6d8:	d47d      	bmi.n	801c7d6 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c6da:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c6dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c6de:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c6e2:	f7fb fd09 	bl	80180f8 <lwip_htons>
 801c6e6:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801c6e8:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c6ec:	d503      	bpl.n	801c6f6 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801c6ee:	3901      	subs	r1, #1
 801c6f0:	b289      	uxth	r1, r1
 801c6f2:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801c6f6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801c6fa:	f7fd fc21 	bl	8019f40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c6fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c702:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801c706:	8998      	ldrh	r0, [r3, #12]
 801c708:	f7fb fcf6 	bl	80180f8 <lwip_htons>
 801c70c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c710:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801c712:	bf18      	it	ne
 801c714:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c716:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801c718:	442b      	add	r3, r5
 801c71a:	b29b      	uxth	r3, r3
 801c71c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c71e:	4413      	add	r3, r2
 801c720:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c722:	440a      	add	r2, r1
 801c724:	4293      	cmp	r3, r2
 801c726:	f43f ae4e 	beq.w	801c3c6 <tcp_receive+0x4c2>
 801c72a:	4b37      	ldr	r3, [pc, #220]	; (801c808 <tcp_receive+0x904>)
 801c72c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801c730:	4939      	ldr	r1, [pc, #228]	; (801c818 <tcp_receive+0x914>)
 801c732:	4834      	ldr	r0, [pc, #208]	; (801c804 <tcp_receive+0x900>)
 801c734:	f007 fde6 	bl	8024304 <iprintf>
 801c738:	e645      	b.n	801c3c6 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c73a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801c73e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c742:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c744:	4413      	add	r3, r2
 801c746:	b29b      	uxth	r3, r3
 801c748:	429a      	cmp	r2, r3
 801c74a:	bf88      	it	hi
 801c74c:	460b      	movhi	r3, r1
 801c74e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801c752:	4620      	mov	r0, r4
 801c754:	f001 fe0a 	bl	801e36c <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c758:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c75a:	6833      	ldr	r3, [r6, #0]
 801c75c:	e518      	b.n	801c190 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801c75e:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801c762:	2b00      	cmp	r3, #0
 801c764:	dc01      	bgt.n	801c76a <tcp_receive+0x866>
            pcb->ooseq = next;
 801c766:	6765      	str	r5, [r4, #116]	; 0x74
 801c768:	e6d4      	b.n	801c514 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c76a:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c76e:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c772:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c776:	8998      	ldrh	r0, [r3, #12]
 801c778:	f7fb fcbe 	bl	80180f8 <lwip_htons>
 801c77c:	0781      	lsls	r1, r0, #30
 801c77e:	d504      	bpl.n	801c78a <tcp_receive+0x886>
                inseg.len -= 1;
 801c780:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801c784:	3b01      	subs	r3, #1
 801c786:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801c78a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801c78e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801c792:	f7fd fbd5 	bl	8019f40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801c796:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c79a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801c79e:	8998      	ldrh	r0, [r3, #12]
 801c7a0:	f7fb fcaa 	bl	80180f8 <lwip_htons>
 801c7a4:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c7a8:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801c7aa:	bf18      	it	ne
 801c7ac:	2001      	movne	r0, #1
 801c7ae:	eb08 0200 	add.w	r2, r8, r0
 801c7b2:	b292      	uxth	r2, r2
 801c7b4:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c7b6:	6859      	ldr	r1, [r3, #4]
 801c7b8:	6833      	ldr	r3, [r6, #0]
 801c7ba:	4413      	add	r3, r2
 801c7bc:	428b      	cmp	r3, r1
 801c7be:	d0d2      	beq.n	801c766 <tcp_receive+0x862>
 801c7c0:	4b11      	ldr	r3, [pc, #68]	; (801c808 <tcp_receive+0x904>)
 801c7c2:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801c7c6:	4915      	ldr	r1, [pc, #84]	; (801c81c <tcp_receive+0x918>)
 801c7c8:	480e      	ldr	r0, [pc, #56]	; (801c804 <tcp_receive+0x900>)
 801c7ca:	f007 fd9b 	bl	8024304 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801c7ce:	883a      	ldrh	r2, [r7, #0]
 801c7d0:	6831      	ldr	r1, [r6, #0]
 801c7d2:	4411      	add	r1, r2
 801c7d4:	e7c7      	b.n	801c766 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c7d6:	899d      	ldrh	r5, [r3, #12]
 801c7d8:	4628      	mov	r0, r5
 801c7da:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801c7de:	f7fb fc8b 	bl	80180f8 <lwip_htons>
 801c7e2:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801c7e6:	f7fb fc87 	bl	80180f8 <lwip_htons>
 801c7ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801c7ee:	4328      	orrs	r0, r5
 801c7f0:	8198      	strh	r0, [r3, #12]
 801c7f2:	b280      	uxth	r0, r0
 801c7f4:	e772      	b.n	801c6dc <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801c7f6:	6760      	str	r0, [r4, #116]	; 0x74
 801c7f8:	f7ff bbeb 	b.w	801bfd2 <tcp_receive+0xce>
 801c7fc:	2002dc04 	.word	0x2002dc04
 801c800:	2002dc08 	.word	0x2002dc08
 801c804:	08028ab4 	.word	0x08028ab4
 801c808:	08042e90 	.word	0x08042e90
 801c80c:	08042f94 	.word	0x08042f94
 801c810:	2002dbf0 	.word	0x2002dbf0
 801c814:	08043038 	.word	0x08043038
 801c818:	08042fc4 	.word	0x08042fc4
 801c81c:	08042ffc 	.word	0x08042ffc
 801c820:	08043058 	.word	0x08043058
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c824:	68db      	ldr	r3, [r3, #12]
 801c826:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801c82a:	4640      	mov	r0, r8
 801c82c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801c830:	f7fb fc62 	bl	80180f8 <lwip_htons>
 801c834:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801c838:	f7fb fc5e 	bl	80180f8 <lwip_htons>
 801c83c:	682b      	ldr	r3, [r5, #0]
 801c83e:	ea48 0800 	orr.w	r8, r8, r0
 801c842:	68da      	ldr	r2, [r3, #12]
 801c844:	f8a2 800c 	strh.w	r8, [r2, #12]
 801c848:	e53b      	b.n	801c2c2 <tcp_receive+0x3be>
 801c84a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801c850 <tcp_receive+0x94c>
 801c84e:	e5a8      	b.n	801c3a2 <tcp_receive+0x49e>
 801c850:	2002dbf0 	.word	0x2002dbf0

0801c854 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c854:	494a      	ldr	r1, [pc, #296]	; (801c980 <tcp_parseopt.part.0+0x12c>)
 801c856:	4b4b      	ldr	r3, [pc, #300]	; (801c984 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c858:	4a4b      	ldr	r2, [pc, #300]	; (801c988 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801c85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c85e:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c862:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c864:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c866:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c86a:	4b48      	ldr	r3, [pc, #288]	; (801c98c <tcp_parseopt.part.0+0x138>)
 801c86c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801c990 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c870:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801c872:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c876:	681d      	ldr	r5, [r3, #0]
 801c878:	f8b9 2000 	ldrh.w	r2, [r9]
 801c87c:	f102 0c14 	add.w	ip, r2, #20
 801c880:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c882:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801c884:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c888:	d96d      	bls.n	801c966 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801c88a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c88c:	b1ac      	cbz	r4, 801c8ba <tcp_parseopt.part.0+0x66>
 801c88e:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801c890:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c894:	d811      	bhi.n	801c8ba <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801c896:	b2c9      	uxtb	r1, r1
 801c898:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801c89a:	2901      	cmp	r1, #1
 801c89c:	d011      	beq.n	801c8c2 <tcp_parseopt.part.0+0x6e>
 801c89e:	2902      	cmp	r1, #2
 801c8a0:	d017      	beq.n	801c8d2 <tcp_parseopt.part.0+0x7e>
 801c8a2:	b191      	cbz	r1, 801c8ca <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c8a4:	b10c      	cbz	r4, 801c8aa <tcp_parseopt.part.0+0x56>
 801c8a6:	4573      	cmp	r3, lr
 801c8a8:	d242      	bcs.n	801c930 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801c8aa:	442b      	add	r3, r5
 801c8ac:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801c8ae:	2b01      	cmp	r3, #1
 801c8b0:	d961      	bls.n	801c976 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c8b2:	441a      	add	r2, r3
 801c8b4:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c8b6:	2101      	movs	r1, #1
 801c8b8:	e7e0      	b.n	801c87c <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801c8ba:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801c8be:	2901      	cmp	r1, #1
 801c8c0:	d1ed      	bne.n	801c89e <tcp_parseopt.part.0+0x4a>
 801c8c2:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801c8c6:	461a      	mov	r2, r3
 801c8c8:	e7db      	b.n	801c882 <tcp_parseopt.part.0+0x2e>
 801c8ca:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801c8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801c8d2:	1c91      	adds	r1, r2, #2
 801c8d4:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c8d6:	b10c      	cbz	r4, 801c8dc <tcp_parseopt.part.0+0x88>
 801c8d8:	4573      	cmp	r3, lr
 801c8da:	d224      	bcs.n	801c926 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801c8dc:	442b      	add	r3, r5
 801c8de:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c8e0:	2b04      	cmp	r3, #4
 801c8e2:	d145      	bne.n	801c970 <tcp_parseopt.part.0+0x11c>
 801c8e4:	1c4b      	adds	r3, r1, #1
 801c8e6:	42b3      	cmp	r3, r6
 801c8e8:	da42      	bge.n	801c970 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801c8ea:	1cd3      	adds	r3, r2, #3
 801c8ec:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c8ee:	b384      	cbz	r4, 801c952 <tcp_parseopt.part.0+0xfe>
 801c8f0:	458e      	cmp	lr, r1
 801c8f2:	d822      	bhi.n	801c93a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c8f4:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801c8f8:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c8fa:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801c8fc:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801c8fe:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c900:	f814 c001 	ldrb.w	ip, [r4, r1]
 801c904:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c908:	d820      	bhi.n	801c94c <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c90a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801c90e:	b2c9      	uxtb	r1, r1
 801c910:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801c912:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c916:	1e59      	subs	r1, r3, #1
 801c918:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801c91c:	bf28      	it	cs
 801c91e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801c922:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801c924:	e7c7      	b.n	801c8b6 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c926:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801c92a:	b2db      	uxtb	r3, r3
 801c92c:	5ce3      	ldrb	r3, [r4, r3]
 801c92e:	e7d7      	b.n	801c8e0 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c930:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801c934:	b2db      	uxtb	r3, r3
 801c936:	5ce3      	ldrb	r3, [r4, r3]
 801c938:	e7b9      	b.n	801c8ae <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801c93a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801c93c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c93e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c940:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801c944:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c946:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c94a:	d9de      	bls.n	801c90a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801c94c:	442b      	add	r3, r5
 801c94e:	7d1b      	ldrb	r3, [r3, #20]
 801c950:	e7df      	b.n	801c912 <tcp_parseopt.part.0+0xbe>
 801c952:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801c954:	3204      	adds	r2, #4
    return opts[optidx];
 801c956:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c958:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801c95c:	b292      	uxth	r2, r2
    return opts[optidx];
 801c95e:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c960:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801c964:	e7d5      	b.n	801c912 <tcp_parseopt.part.0+0xbe>
 801c966:	2900      	cmp	r1, #0
 801c968:	d0b1      	beq.n	801c8ce <tcp_parseopt.part.0+0x7a>
 801c96a:	f8a9 2000 	strh.w	r2, [r9]
 801c96e:	e7ae      	b.n	801c8ce <tcp_parseopt.part.0+0x7a>
 801c970:	f8a9 1000 	strh.w	r1, [r9]
 801c974:	e7ab      	b.n	801c8ce <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801c976:	3202      	adds	r2, #2
 801c978:	f8a9 2000 	strh.w	r2, [r9]
 801c97c:	e7a7      	b.n	801c8ce <tcp_parseopt.part.0+0x7a>
 801c97e:	bf00      	nop
 801c980:	2002dc1c 	.word	0x2002dc1c
 801c984:	2002dc20 	.word	0x2002dc20
 801c988:	2002dc24 	.word	0x2002dc24
 801c98c:	2002dc18 	.word	0x2002dc18
 801c990:	2002dc14 	.word	0x2002dc14

0801c994 <tcp_input>:
{
 801c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c998:	4604      	mov	r4, r0
{
 801c99a:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c99c:	2800      	cmp	r0, #0
 801c99e:	f000 80d2 	beq.w	801cb46 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801c9a2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801c9a4:	4e6b      	ldr	r6, [pc, #428]	; (801cb54 <tcp_input+0x1c0>)
 801c9a6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801c9a8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801c9aa:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801c9ac:	d805      	bhi.n	801c9ba <tcp_input+0x26>
  pbuf_free(p);
 801c9ae:	4620      	mov	r0, r4
}
 801c9b0:	b009      	add	sp, #36	; 0x24
 801c9b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801c9b6:	f7fd bbdb 	b.w	801a170 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c9ba:	4f67      	ldr	r7, [pc, #412]	; (801cb58 <tcp_input+0x1c4>)
 801c9bc:	6839      	ldr	r1, [r7, #0]
 801c9be:	6978      	ldr	r0, [r7, #20]
 801c9c0:	f005 f9ae 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 801c9c4:	2800      	cmp	r0, #0
 801c9c6:	d1f2      	bne.n	801c9ae <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c9c8:	697b      	ldr	r3, [r7, #20]
 801c9ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c9ce:	2be0      	cmp	r3, #224	; 0xe0
 801c9d0:	d0ed      	beq.n	801c9ae <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c9d2:	f107 0314 	add.w	r3, r7, #20
 801c9d6:	f107 0910 	add.w	r9, r7, #16
 801c9da:	2106      	movs	r1, #6
 801c9dc:	4620      	mov	r0, r4
 801c9de:	9300      	str	r3, [sp, #0]
 801c9e0:	464b      	mov	r3, r9
 801c9e2:	8922      	ldrh	r2, [r4, #8]
 801c9e4:	f7fc f91c 	bl	8018c20 <ip_chksum_pseudo>
    if (chksum != 0) {
 801c9e8:	4605      	mov	r5, r0
 801c9ea:	2800      	cmp	r0, #0
 801c9ec:	d1df      	bne.n	801c9ae <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c9ee:	6833      	ldr	r3, [r6, #0]
 801c9f0:	8998      	ldrh	r0, [r3, #12]
 801c9f2:	f7fb fb81 	bl	80180f8 <lwip_htons>
 801c9f6:	0a80      	lsrs	r0, r0, #10
 801c9f8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c9fc:	2913      	cmp	r1, #19
 801c9fe:	d9d6      	bls.n	801c9ae <tcp_input+0x1a>
 801ca00:	8923      	ldrh	r3, [r4, #8]
 801ca02:	b28a      	uxth	r2, r1
 801ca04:	428b      	cmp	r3, r1
 801ca06:	d3d2      	bcc.n	801c9ae <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ca08:	f1a2 0314 	sub.w	r3, r2, #20
 801ca0c:	4853      	ldr	r0, [pc, #332]	; (801cb5c <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801ca0e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801cb88 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ca12:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801ca14:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ca18:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801ca1a:	8960      	ldrh	r0, [r4, #10]
 801ca1c:	4290      	cmp	r0, r2
 801ca1e:	f080 819f 	bcs.w	801cd60 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ca22:	6823      	ldr	r3, [r4, #0]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	f000 837b 	beq.w	801d120 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801ca2a:	2114      	movs	r1, #20
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	f7fd fb13 	bl	801a058 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ca32:	4b4a      	ldr	r3, [pc, #296]	; (801cb5c <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801ca34:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ca36:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ca38:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801ca3c:	4b48      	ldr	r3, [pc, #288]	; (801cb60 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801ca3e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ca40:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801ca44:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801ca46:	f7fd fb07 	bl	801a058 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801ca4a:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ca4c:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801ca50:	8943      	ldrh	r3, [r0, #10]
 801ca52:	455b      	cmp	r3, fp
 801ca54:	d3ab      	bcc.n	801c9ae <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ca56:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801ca58:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801ca5a:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801ca5e:	f7fd fafb 	bl	801a058 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ca62:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ca64:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ca66:	442b      	add	r3, r5
 801ca68:	eba3 030a 	sub.w	r3, r3, sl
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ca70:	2a00      	cmp	r2, #0
 801ca72:	f040 835c 	bne.w	801d12e <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ca76:	6822      	ldr	r2, [r4, #0]
 801ca78:	8912      	ldrh	r2, [r2, #8]
 801ca7a:	429a      	cmp	r2, r3
 801ca7c:	d005      	beq.n	801ca8a <tcp_input+0xf6>
 801ca7e:	4b39      	ldr	r3, [pc, #228]	; (801cb64 <tcp_input+0x1d0>)
 801ca80:	22e0      	movs	r2, #224	; 0xe0
 801ca82:	4939      	ldr	r1, [pc, #228]	; (801cb68 <tcp_input+0x1d4>)
 801ca84:	4839      	ldr	r0, [pc, #228]	; (801cb6c <tcp_input+0x1d8>)
 801ca86:	f007 fc3d 	bl	8024304 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ca8a:	6835      	ldr	r5, [r6, #0]
 801ca8c:	8828      	ldrh	r0, [r5, #0]
 801ca8e:	f7fb fb33 	bl	80180f8 <lwip_htons>
 801ca92:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ca94:	6835      	ldr	r5, [r6, #0]
 801ca96:	8868      	ldrh	r0, [r5, #2]
 801ca98:	f7fb fb2e 	bl	80180f8 <lwip_htons>
 801ca9c:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ca9e:	6835      	ldr	r5, [r6, #0]
 801caa0:	6868      	ldr	r0, [r5, #4]
 801caa2:	f7fb fb2d 	bl	8018100 <lwip_htonl>
 801caa6:	4b32      	ldr	r3, [pc, #200]	; (801cb70 <tcp_input+0x1dc>)
 801caa8:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801caaa:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801caac:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801caae:	68a8      	ldr	r0, [r5, #8]
 801cab0:	f7fb fb26 	bl	8018100 <lwip_htonl>
 801cab4:	4b2f      	ldr	r3, [pc, #188]	; (801cb74 <tcp_input+0x1e0>)
 801cab6:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801cab8:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801caba:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801cabc:	89e8      	ldrh	r0, [r5, #14]
 801cabe:	f7fb fb1b 	bl	80180f8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801cac2:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801cac4:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801cac6:	8998      	ldrh	r0, [r3, #12]
 801cac8:	f7fb fb16 	bl	80180f8 <lwip_htons>
 801cacc:	492a      	ldr	r1, [pc, #168]	; (801cb78 <tcp_input+0x1e4>)
 801cace:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801cad2:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801cad4:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801cad6:	0782      	lsls	r2, r0, #30
 801cad8:	f040 8139 	bne.w	801cd4e <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801cadc:	4a27      	ldr	r2, [pc, #156]	; (801cb7c <tcp_input+0x1e8>)
 801cade:	9205      	str	r2, [sp, #20]
 801cae0:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801cae2:	4b27      	ldr	r3, [pc, #156]	; (801cb80 <tcp_input+0x1ec>)
 801cae4:	681d      	ldr	r5, [r3, #0]
 801cae6:	2d00      	cmp	r5, #0
 801cae8:	f000 80e0 	beq.w	801ccac <tcp_input+0x318>
  prev = NULL;
 801caec:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801caf0:	4b1c      	ldr	r3, [pc, #112]	; (801cb64 <tcp_input+0x1d0>)
 801caf2:	f8df b098 	ldr.w	fp, [pc, #152]	; 801cb8c <tcp_input+0x1f8>
 801caf6:	f8df a074 	ldr.w	sl, [pc, #116]	; 801cb6c <tcp_input+0x1d8>
 801cafa:	e019      	b.n	801cb30 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801cafc:	2a0a      	cmp	r2, #10
 801cafe:	f000 80cd 	beq.w	801cc9c <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801cb02:	2a01      	cmp	r2, #1
 801cb04:	f000 80c3 	beq.w	801cc8e <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cb08:	7a29      	ldrb	r1, [r5, #8]
 801cb0a:	b131      	cbz	r1, 801cb1a <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cb0c:	687a      	ldr	r2, [r7, #4]
 801cb0e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801cb12:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cb14:	b2d2      	uxtb	r2, r2
 801cb16:	4291      	cmp	r1, r2
 801cb18:	d104      	bne.n	801cb24 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801cb1a:	6832      	ldr	r2, [r6, #0]
 801cb1c:	8b28      	ldrh	r0, [r5, #24]
 801cb1e:	8811      	ldrh	r1, [r2, #0]
 801cb20:	4288      	cmp	r0, r1
 801cb22:	d035      	beq.n	801cb90 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801cb24:	68ea      	ldr	r2, [r5, #12]
 801cb26:	46a8      	mov	r8, r5
 801cb28:	2a00      	cmp	r2, #0
 801cb2a:	f000 80bf 	beq.w	801ccac <tcp_input+0x318>
 801cb2e:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801cb30:	7d2a      	ldrb	r2, [r5, #20]
 801cb32:	2a00      	cmp	r2, #0
 801cb34:	d1e2      	bne.n	801cafc <tcp_input+0x168>
 801cb36:	22fb      	movs	r2, #251	; 0xfb
 801cb38:	4659      	mov	r1, fp
 801cb3a:	4650      	mov	r0, sl
 801cb3c:	f007 fbe2 	bl	8024304 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801cb40:	7d2a      	ldrb	r2, [r5, #20]
 801cb42:	4b08      	ldr	r3, [pc, #32]	; (801cb64 <tcp_input+0x1d0>)
 801cb44:	e7da      	b.n	801cafc <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801cb46:	4b07      	ldr	r3, [pc, #28]	; (801cb64 <tcp_input+0x1d0>)
 801cb48:	2283      	movs	r2, #131	; 0x83
 801cb4a:	490e      	ldr	r1, [pc, #56]	; (801cb84 <tcp_input+0x1f0>)
 801cb4c:	4807      	ldr	r0, [pc, #28]	; (801cb6c <tcp_input+0x1d8>)
 801cb4e:	f007 fbd9 	bl	8024304 <iprintf>
 801cb52:	e726      	b.n	801c9a2 <tcp_input+0xe>
 801cb54:	2002dc18 	.word	0x2002dc18
 801cb58:	2001ec88 	.word	0x2001ec88
 801cb5c:	2002dc24 	.word	0x2002dc24
 801cb60:	2002dc1c 	.word	0x2002dc1c
 801cb64:	08042e90 	.word	0x08042e90
 801cb68:	080430b4 	.word	0x080430b4
 801cb6c:	08028ab4 	.word	0x08028ab4
 801cb70:	2002dc0c 	.word	0x2002dc0c
 801cb74:	2002dbe8 	.word	0x2002dbe8
 801cb78:	2002dbec 	.word	0x2002dbec
 801cb7c:	2002dc26 	.word	0x2002dc26
 801cb80:	2002dbcc 	.word	0x2002dbcc
 801cb84:	08043080 	.word	0x08043080
 801cb88:	2002dc20 	.word	0x2002dc20
 801cb8c:	080430d4 	.word	0x080430d4
    if (pcb->remote_port == tcphdr->src &&
 801cb90:	8852      	ldrh	r2, [r2, #2]
 801cb92:	8ae9      	ldrh	r1, [r5, #22]
 801cb94:	4291      	cmp	r1, r2
 801cb96:	d1c5      	bne.n	801cb24 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801cb98:	6869      	ldr	r1, [r5, #4]
 801cb9a:	693a      	ldr	r2, [r7, #16]
 801cb9c:	4291      	cmp	r1, r2
 801cb9e:	d1c1      	bne.n	801cb24 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801cba0:	6829      	ldr	r1, [r5, #0]
 801cba2:	697a      	ldr	r2, [r7, #20]
 801cba4:	4291      	cmp	r1, r2
 801cba6:	d1bd      	bne.n	801cb24 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801cba8:	68eb      	ldr	r3, [r5, #12]
 801cbaa:	42ab      	cmp	r3, r5
 801cbac:	f000 846e 	beq.w	801d48c <tcp_input+0xaf8>
      if (prev != NULL) {
 801cbb0:	f1b8 0f00 	cmp.w	r8, #0
 801cbb4:	d009      	beq.n	801cbca <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801cbb6:	4a75      	ldr	r2, [pc, #468]	; (801cd8c <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801cbb8:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801cbbc:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801cbbe:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801cbc0:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801cbc2:	68eb      	ldr	r3, [r5, #12]
 801cbc4:	42ab      	cmp	r3, r5
 801cbc6:	f000 8447 	beq.w	801d458 <tcp_input+0xac4>
    inseg.next = NULL;
 801cbca:	2300      	movs	r3, #0
 801cbcc:	4f70      	ldr	r7, [pc, #448]	; (801cd90 <tcp_input+0x3fc>)
    recv_data = NULL;
 801cbce:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801cdb8 <tcp_input+0x424>
    recv_flags = 0;
 801cbd2:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801cdbc <tcp_input+0x428>
    recv_acked = 0;
 801cbd6:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801cdc0 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801cbda:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801cbdc:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801cbde:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801cbe2:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801cbe6:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801cbea:	4b6a      	ldr	r3, [pc, #424]	; (801cd94 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801cbec:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801cbee:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801cbf0:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801cbf2:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801cbf4:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801cbf6:	071a      	lsls	r2, r3, #28
 801cbf8:	d503      	bpl.n	801cc02 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801cbfa:	7b62      	ldrb	r2, [r4, #13]
 801cbfc:	f042 0201 	orr.w	r2, r2, #1
 801cc00:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801cc02:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801cc04:	b172      	cbz	r2, 801cc24 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cc06:	4628      	mov	r0, r5
 801cc08:	f7fe ff78 	bl	801bafc <tcp_process_refused_data>
 801cc0c:	300d      	adds	r0, #13
 801cc0e:	f000 8296 	beq.w	801d13e <tcp_input+0x7aa>
 801cc12:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801cc14:	b123      	cbz	r3, 801cc20 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cc16:	9b05      	ldr	r3, [sp, #20]
 801cc18:	881b      	ldrh	r3, [r3, #0]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	f040 828f 	bne.w	801d13e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801cc20:	4b5c      	ldr	r3, [pc, #368]	; (801cd94 <tcp_input+0x400>)
 801cc22:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801cc24:	4c5c      	ldr	r4, [pc, #368]	; (801cd98 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801cc26:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801cc28:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801cc2a:	f140 8163 	bpl.w	801cef4 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801cc2e:	7d29      	ldrb	r1, [r5, #20]
 801cc30:	2902      	cmp	r1, #2
 801cc32:	f000 8350 	beq.w	801d2d6 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801cc36:	4b59      	ldr	r3, [pc, #356]	; (801cd9c <tcp_input+0x408>)
 801cc38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	f000 844a 	beq.w	801d4d6 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cc42:	1a9b      	subs	r3, r3, r2
 801cc44:	d404      	bmi.n	801cc50 <tcp_input+0x2bc>
 801cc46:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801cc48:	1a9b      	subs	r3, r3, r2
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	f340 833e 	ble.w	801d2cc <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801cc50:	f89a 3000 	ldrb.w	r3, [sl]
 801cc54:	0718      	lsls	r0, r3, #28
 801cc56:	f140 8278 	bpl.w	801d14a <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801cc5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801cc5e:	b11b      	cbz	r3, 801cc68 <tcp_input+0x2d4>
 801cc60:	f06f 010d 	mvn.w	r1, #13
 801cc64:	6928      	ldr	r0, [r5, #16]
 801cc66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cc68:	4848      	ldr	r0, [pc, #288]	; (801cd8c <tcp_input+0x3f8>)
 801cc6a:	4629      	mov	r1, r5
 801cc6c:	f7fe fbc4 	bl	801b3f8 <tcp_pcb_remove>
        tcp_free(pcb);
 801cc70:	4628      	mov	r0, r5
 801cc72:	f7fd fdbd 	bl	801a7f0 <tcp_free>
    tcp_input_pcb = NULL;
 801cc76:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801cc78:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801cc7a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801cc7c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801cc80:	b110      	cbz	r0, 801cc88 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801cc82:	f7fd fa75 	bl	801a170 <pbuf_free>
      inseg.p = NULL;
 801cc86:	607d      	str	r5, [r7, #4]
}
 801cc88:	b009      	add	sp, #36	; 0x24
 801cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801cc8e:	22fd      	movs	r2, #253	; 0xfd
 801cc90:	4943      	ldr	r1, [pc, #268]	; (801cda0 <tcp_input+0x40c>)
 801cc92:	4650      	mov	r0, sl
 801cc94:	f007 fb36 	bl	8024304 <iprintf>
 801cc98:	4b42      	ldr	r3, [pc, #264]	; (801cda4 <tcp_input+0x410>)
 801cc9a:	e735      	b.n	801cb08 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801cc9c:	22fc      	movs	r2, #252	; 0xfc
 801cc9e:	4942      	ldr	r1, [pc, #264]	; (801cda8 <tcp_input+0x414>)
 801cca0:	4650      	mov	r0, sl
 801cca2:	f007 fb2f 	bl	8024304 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801cca6:	7d2a      	ldrb	r2, [r5, #20]
 801cca8:	4b3e      	ldr	r3, [pc, #248]	; (801cda4 <tcp_input+0x410>)
 801ccaa:	e72a      	b.n	801cb02 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ccac:	4b3f      	ldr	r3, [pc, #252]	; (801cdac <tcp_input+0x418>)
 801ccae:	681d      	ldr	r5, [r3, #0]
 801ccb0:	2d00      	cmp	r5, #0
 801ccb2:	d05b      	beq.n	801cd6c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ccb4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801cda4 <tcp_input+0x410>
 801ccb8:	f8df b108 	ldr.w	fp, [pc, #264]	; 801cdc4 <tcp_input+0x430>
 801ccbc:	f8df a108 	ldr.w	sl, [pc, #264]	; 801cdc8 <tcp_input+0x434>
 801ccc0:	e002      	b.n	801ccc8 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ccc2:	68ed      	ldr	r5, [r5, #12]
 801ccc4:	2d00      	cmp	r5, #0
 801ccc6:	d051      	beq.n	801cd6c <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ccc8:	7d2b      	ldrb	r3, [r5, #20]
 801ccca:	2b0a      	cmp	r3, #10
 801cccc:	4643      	mov	r3, r8
 801ccce:	d005      	beq.n	801ccdc <tcp_input+0x348>
 801ccd0:	f240 121f 	movw	r2, #287	; 0x11f
 801ccd4:	4659      	mov	r1, fp
 801ccd6:	4650      	mov	r0, sl
 801ccd8:	f007 fb14 	bl	8024304 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ccdc:	7a2a      	ldrb	r2, [r5, #8]
 801ccde:	b132      	cbz	r2, 801ccee <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801cce6:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801cce8:	b2db      	uxtb	r3, r3
 801ccea:	429a      	cmp	r2, r3
 801ccec:	d1e9      	bne.n	801ccc2 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801ccee:	6832      	ldr	r2, [r6, #0]
 801ccf0:	8b2b      	ldrh	r3, [r5, #24]
 801ccf2:	8811      	ldrh	r1, [r2, #0]
 801ccf4:	428b      	cmp	r3, r1
 801ccf6:	d1e4      	bne.n	801ccc2 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801ccf8:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801ccfa:	8ae8      	ldrh	r0, [r5, #22]
 801ccfc:	4290      	cmp	r0, r2
 801ccfe:	d1e0      	bne.n	801ccc2 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801cd00:	6869      	ldr	r1, [r5, #4]
 801cd02:	693a      	ldr	r2, [r7, #16]
 801cd04:	4291      	cmp	r1, r2
 801cd06:	d1dc      	bne.n	801ccc2 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801cd08:	6829      	ldr	r1, [r5, #0]
 801cd0a:	697a      	ldr	r2, [r7, #20]
 801cd0c:	4291      	cmp	r1, r2
 801cd0e:	d1d8      	bne.n	801ccc2 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801cd10:	4a20      	ldr	r2, [pc, #128]	; (801cd94 <tcp_input+0x400>)
 801cd12:	7812      	ldrb	r2, [r2, #0]
 801cd14:	0757      	lsls	r7, r2, #29
 801cd16:	f53f ae4a 	bmi.w	801c9ae <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801cd1a:	0796      	lsls	r6, r2, #30
 801cd1c:	f140 8395 	bpl.w	801d44a <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801cd20:	4a1e      	ldr	r2, [pc, #120]	; (801cd9c <tcp_input+0x408>)
 801cd22:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801cd24:	6812      	ldr	r2, [r2, #0]
 801cd26:	1a51      	subs	r1, r2, r1
 801cd28:	d404      	bmi.n	801cd34 <tcp_input+0x3a0>
 801cd2a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801cd2c:	1b89      	subs	r1, r1, r6
 801cd2e:	2900      	cmp	r1, #0
 801cd30:	f340 83ba 	ble.w	801d4a8 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801cd34:	9b05      	ldr	r3, [sp, #20]
 801cd36:	881b      	ldrh	r3, [r3, #0]
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	f43f ae38 	beq.w	801c9ae <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801cd3e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801cd40:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801cd42:	f043 0302 	orr.w	r3, r3, #2
 801cd46:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801cd48:	f001 fbc4 	bl	801e4d4 <tcp_output>
        pbuf_free(p);
 801cd4c:	e62f      	b.n	801c9ae <tcp_input+0x1a>
    tcplen++;
 801cd4e:	1c5a      	adds	r2, r3, #1
 801cd50:	4917      	ldr	r1, [pc, #92]	; (801cdb0 <tcp_input+0x41c>)
 801cd52:	b292      	uxth	r2, r2
 801cd54:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801cd56:	4293      	cmp	r3, r2
    tcplen++;
 801cd58:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801cd5a:	f67f aec2 	bls.w	801cae2 <tcp_input+0x14e>
 801cd5e:	e626      	b.n	801c9ae <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801cd60:	4a14      	ldr	r2, [pc, #80]	; (801cdb4 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cd62:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801cd64:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801cd66:	f7fd f977 	bl	801a058 <pbuf_remove_header>
 801cd6a:	e68e      	b.n	801ca8a <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cd6c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801cdcc <tcp_input+0x438>
 801cd70:	f8da 8000 	ldr.w	r8, [sl]
 801cd74:	f1b8 0f00 	cmp.w	r8, #0
 801cd78:	f000 8237 	beq.w	801d1ea <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cd7c:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cd80:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801cd82:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801cd84:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cd86:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801cd8a:	e027      	b.n	801cddc <tcp_input+0x448>
 801cd8c:	2002dbcc 	.word	0x2002dbcc
 801cd90:	2002dbf0 	.word	0x2002dbf0
 801cd94:	2002dbec 	.word	0x2002dbec
 801cd98:	2002dc10 	.word	0x2002dc10
 801cd9c:	2002dc0c 	.word	0x2002dc0c
 801cda0:	08043128 	.word	0x08043128
 801cda4:	08042e90 	.word	0x08042e90
 801cda8:	080430fc 	.word	0x080430fc
 801cdac:	2002dbe4 	.word	0x2002dbe4
 801cdb0:	2002dc26 	.word	0x2002dc26
 801cdb4:	2002dc1c 	.word	0x2002dc1c
 801cdb8:	2002dc04 	.word	0x2002dc04
 801cdbc:	2002dc08 	.word	0x2002dc08
 801cdc0:	2002dc00 	.word	0x2002dc00
 801cdc4:	080431a8 	.word	0x080431a8
 801cdc8:	08028ab4 	.word	0x08028ab4
 801cdcc:	2002dbd8 	.word	0x2002dbd8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cdd0:	68eb      	ldr	r3, [r5, #12]
 801cdd2:	4629      	mov	r1, r5
 801cdd4:	461d      	mov	r5, r3
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	f000 8208 	beq.w	801d1ec <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801cddc:	7a2a      	ldrb	r2, [r5, #8]
 801cdde:	b12a      	cbz	r2, 801cdec <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801cde0:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801cde4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801cde6:	b2db      	uxtb	r3, r3
 801cde8:	429a      	cmp	r2, r3
 801cdea:	d1f1      	bne.n	801cdd0 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801cdec:	8aea      	ldrh	r2, [r5, #22]
 801cdee:	8843      	ldrh	r3, [r0, #2]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d1ed      	bne.n	801cdd0 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801cdf4:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801cdf6:	b10a      	cbz	r2, 801cdfc <tcp_input+0x468>
 801cdf8:	4572      	cmp	r2, lr
 801cdfa:	d1e9      	bne.n	801cdd0 <tcp_input+0x43c>
      if (prev != NULL) {
 801cdfc:	b129      	cbz	r1, 801ce0a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801cdfe:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ce00:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ce04:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ce06:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801ce0a:	4a9d      	ldr	r2, [pc, #628]	; (801d080 <tcp_input+0x6ec>)
 801ce0c:	7812      	ldrb	r2, [r2, #0]
 801ce0e:	0751      	lsls	r1, r2, #29
 801ce10:	f53f adcd 	bmi.w	801c9ae <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801ce14:	f012 0810 	ands.w	r8, r2, #16
 801ce18:	f040 8273 	bne.w	801d302 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801ce1c:	0791      	lsls	r1, r2, #30
 801ce1e:	f57f adc6 	bpl.w	801c9ae <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801ce22:	7d68      	ldrb	r0, [r5, #21]
 801ce24:	f7fe fc90 	bl	801b748 <tcp_alloc>
    if (npcb == NULL) {
 801ce28:	4681      	mov	r9, r0
 801ce2a:	2800      	cmp	r0, #0
 801ce2c:	f000 82ce 	beq.w	801d3cc <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801ce30:	4b94      	ldr	r3, [pc, #592]	; (801d084 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801ce32:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801ce34:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801ce36:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801ce38:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801ce3a:	7849      	ldrb	r1, [r1, #1]
 801ce3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801ce40:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801ce42:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801ce44:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ce46:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801ce48:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ce4a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ce4c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801ce4e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ce50:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801ce52:	2303      	movs	r3, #3
 801ce54:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801ce56:	f7fe fee7 	bl	801bc28 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ce5a:	4b8a      	ldr	r3, [pc, #552]	; (801d084 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801ce5c:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ce60:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801ce62:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ce66:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801ce68:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801ce6c:	4a86      	ldr	r2, [pc, #536]	; (801d088 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801ce6e:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801ce72:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801ce74:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801ce78:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801ce7c:	7a6b      	ldrb	r3, [r5, #9]
 801ce7e:	f003 030c 	and.w	r3, r3, #12
 801ce82:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801ce86:	7a2b      	ldrb	r3, [r5, #8]
 801ce88:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801ce8c:	6813      	ldr	r3, [r2, #0]
 801ce8e:	f8c2 9000 	str.w	r9, [r2]
 801ce92:	f8c9 300c 	str.w	r3, [r9, #12]
 801ce96:	f001 fe49 	bl	801eb2c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801ce9a:	4b7c      	ldr	r3, [pc, #496]	; (801d08c <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801ce9c:	4a7c      	ldr	r2, [pc, #496]	; (801d090 <tcp_input+0x6fc>)
 801ce9e:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801cea0:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801cea2:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801cea4:	b12b      	cbz	r3, 801ceb2 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801cea6:	4b7b      	ldr	r3, [pc, #492]	; (801d094 <tcp_input+0x700>)
 801cea8:	4648      	mov	r0, r9
 801ceaa:	f8a3 8000 	strh.w	r8, [r3]
 801ceae:	f7ff fcd1 	bl	801c854 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801ceb2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ceb4:	f109 0204 	add.w	r2, r9, #4
 801ceb8:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801cebc:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cebe:	4610      	mov	r0, r2
 801cec0:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801cec2:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801cec6:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801ceca:	f004 fd4d 	bl	8021968 <ip4_route>
 801cece:	9a05      	ldr	r2, [sp, #20]
 801ced0:	4601      	mov	r1, r0
 801ced2:	4628      	mov	r0, r5
 801ced4:	f7fe fec4 	bl	801bc60 <tcp_eff_send_mss_netif>
 801ced8:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801ceda:	2112      	movs	r1, #18
 801cedc:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801cede:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801cee2:	f001 f8db 	bl	801e09c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801cee6:	2800      	cmp	r0, #0
 801cee8:	f040 82ca 	bne.w	801d480 <tcp_input+0xaec>
    tcp_output(npcb);
 801ceec:	4648      	mov	r0, r9
 801ceee:	f001 faf1 	bl	801e4d4 <tcp_output>
 801cef2:	e55c      	b.n	801c9ae <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801cef4:	f013 0102 	ands.w	r1, r3, #2
 801cef8:	d004      	beq.n	801cf04 <tcp_input+0x570>
 801cefa:	7d2a      	ldrb	r2, [r5, #20]
 801cefc:	3a02      	subs	r2, #2
 801cefe:	2a01      	cmp	r2, #1
 801cf00:	f200 81e4 	bhi.w	801d2cc <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801cf04:	8b6a      	ldrh	r2, [r5, #26]
 801cf06:	06d0      	lsls	r0, r2, #27
 801cf08:	d402      	bmi.n	801cf10 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801cf0a:	4a63      	ldr	r2, [pc, #396]	; (801d098 <tcp_input+0x704>)
 801cf0c:	6812      	ldr	r2, [r2, #0]
 801cf0e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801cf10:	4a5e      	ldr	r2, [pc, #376]	; (801d08c <tcp_input+0x6f8>)
 801cf12:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801cf14:	2200      	movs	r2, #0
 801cf16:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801cf1a:	b140      	cbz	r0, 801cf2e <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801cf1c:	485d      	ldr	r0, [pc, #372]	; (801d094 <tcp_input+0x700>)
 801cf1e:	8002      	strh	r2, [r0, #0]
 801cf20:	4628      	mov	r0, r5
 801cf22:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801cf26:	f7ff fc95 	bl	801c854 <tcp_parseopt.part.0>
 801cf2a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801cf2e:	7d2a      	ldrb	r2, [r5, #20]
 801cf30:	3a02      	subs	r2, #2
 801cf32:	2a07      	cmp	r2, #7
 801cf34:	f63f ae8c 	bhi.w	801cc50 <tcp_input+0x2bc>
 801cf38:	e8df f002 	tbb	[pc, r2]
 801cf3c:	89041331 	.word	0x89041331
 801cf40:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801cf44:	4628      	mov	r0, r5
 801cf46:	f7fe ffdd 	bl	801bf04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801cf4a:	f89a 3000 	ldrb.w	r3, [sl]
 801cf4e:	069e      	lsls	r6, r3, #26
 801cf50:	f57f ae7e 	bpl.w	801cc50 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801cf54:	8b6b      	ldrh	r3, [r5, #26]
 801cf56:	f043 0302 	orr.w	r3, r3, #2
 801cf5a:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801cf5c:	2307      	movs	r3, #7
 801cf5e:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801cf60:	e676      	b.n	801cc50 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801cf62:	06da      	lsls	r2, r3, #27
 801cf64:	f140 821c 	bpl.w	801d3a0 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cf68:	4b4c      	ldr	r3, [pc, #304]	; (801d09c <tcp_input+0x708>)
 801cf6a:	6819      	ldr	r1, [r3, #0]
 801cf6c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801cf6e:	43db      	mvns	r3, r3
 801cf70:	42cb      	cmn	r3, r1
 801cf72:	d404      	bmi.n	801cf7e <tcp_input+0x5ea>
 801cf74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801cf76:	1acb      	subs	r3, r1, r3
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	f340 823a 	ble.w	801d3f2 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf7e:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf80:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf82:	8810      	ldrh	r0, [r2, #0]
 801cf84:	4a3f      	ldr	r2, [pc, #252]	; (801d084 <tcp_input+0x6f0>)
 801cf86:	6812      	ldr	r2, [r2, #0]
 801cf88:	4402      	add	r2, r0
 801cf8a:	8818      	ldrh	r0, [r3, #0]
 801cf8c:	9002      	str	r0, [sp, #8]
 801cf8e:	4628      	mov	r0, r5
 801cf90:	885b      	ldrh	r3, [r3, #2]
 801cf92:	e9cd 9300 	strd	r9, r3, [sp]
 801cf96:	4b42      	ldr	r3, [pc, #264]	; (801d0a0 <tcp_input+0x70c>)
 801cf98:	f001 fa22 	bl	801e3e0 <tcp_rst>
    if (err != ERR_ABRT) {
 801cf9c:	e658      	b.n	801cc50 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801cf9e:	f003 0212 	and.w	r2, r3, #18
 801cfa2:	2a12      	cmp	r2, #18
 801cfa4:	f000 813b 	beq.w	801d21e <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801cfa8:	06d9      	lsls	r1, r3, #27
 801cfaa:	f57f ae51 	bpl.w	801cc50 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cfae:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cfb0:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cfb2:	8811      	ldrh	r1, [r2, #0]
 801cfb4:	4a33      	ldr	r2, [pc, #204]	; (801d084 <tcp_input+0x6f0>)
 801cfb6:	8818      	ldrh	r0, [r3, #0]
 801cfb8:	6812      	ldr	r2, [r2, #0]
 801cfba:	440a      	add	r2, r1
 801cfbc:	4937      	ldr	r1, [pc, #220]	; (801d09c <tcp_input+0x708>)
 801cfbe:	6809      	ldr	r1, [r1, #0]
 801cfc0:	9002      	str	r0, [sp, #8]
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	885b      	ldrh	r3, [r3, #2]
 801cfc6:	e9cd 9300 	strd	r9, r3, [sp]
 801cfca:	4b35      	ldr	r3, [pc, #212]	; (801d0a0 <tcp_input+0x70c>)
 801cfcc:	f001 fa08 	bl	801e3e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801cfd0:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801cfd4:	2b05      	cmp	r3, #5
 801cfd6:	f63f ae3b 	bhi.w	801cc50 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801cfda:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801cfdc:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801cfde:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801cfe0:	f001 fc80 	bl	801e8e4 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801cfe4:	e634      	b.n	801cc50 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801cfe6:	4628      	mov	r0, r5
 801cfe8:	f7fe ff8c 	bl	801bf04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801cfec:	4b24      	ldr	r3, [pc, #144]	; (801d080 <tcp_input+0x6ec>)
 801cfee:	781b      	ldrb	r3, [r3, #0]
 801cff0:	06de      	lsls	r6, r3, #27
 801cff2:	f57f ae2d 	bpl.w	801cc50 <tcp_input+0x2bc>
 801cff6:	4b29      	ldr	r3, [pc, #164]	; (801d09c <tcp_input+0x708>)
 801cff8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	429a      	cmp	r2, r3
 801cffe:	f47f ae27 	bne.w	801cc50 <tcp_input+0x2bc>
 801d002:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d004:	2b00      	cmp	r3, #0
 801d006:	f47f ae23 	bne.w	801cc50 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801d00a:	f89a 3000 	ldrb.w	r3, [sl]
 801d00e:	f043 0310 	orr.w	r3, r3, #16
 801d012:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801d016:	e61b      	b.n	801cc50 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801d018:	4628      	mov	r0, r5
 801d01a:	f7fe ff73 	bl	801bf04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d01e:	f89a 3000 	ldrb.w	r3, [sl]
 801d022:	069a      	lsls	r2, r3, #26
 801d024:	f57f ae14 	bpl.w	801cc50 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801d028:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801d02a:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801d02c:	f043 0302 	orr.w	r3, r3, #2
 801d030:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801d032:	f7fd fee1 	bl	801adf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d036:	4b14      	ldr	r3, [pc, #80]	; (801d088 <tcp_input+0x6f4>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	42ab      	cmp	r3, r5
 801d03c:	d061      	beq.n	801d102 <tcp_input+0x76e>
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d062      	beq.n	801d108 <tcp_input+0x774>
 801d042:	68da      	ldr	r2, [r3, #12]
 801d044:	42aa      	cmp	r2, r5
 801d046:	f000 8210 	beq.w	801d46a <tcp_input+0xad6>
 801d04a:	4613      	mov	r3, r2
 801d04c:	e7f7      	b.n	801d03e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801d04e:	4628      	mov	r0, r5
 801d050:	f7fe ff58 	bl	801bf04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d054:	f89a 3000 	ldrb.w	r3, [sl]
 801d058:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d05c:	4b08      	ldr	r3, [pc, #32]	; (801d080 <tcp_input+0x6ec>)
 801d05e:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801d060:	f000 818e 	beq.w	801d380 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d064:	06d8      	lsls	r0, r3, #27
 801d066:	d504      	bpl.n	801d072 <tcp_input+0x6de>
 801d068:	4b0c      	ldr	r3, [pc, #48]	; (801d09c <tcp_input+0x708>)
 801d06a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	429a      	cmp	r2, r3
 801d070:	d038      	beq.n	801d0e4 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801d072:	8b6b      	ldrh	r3, [r5, #26]
 801d074:	f043 0302 	orr.w	r3, r3, #2
 801d078:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801d07a:	2308      	movs	r3, #8
 801d07c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801d07e:	e5e7      	b.n	801cc50 <tcp_input+0x2bc>
 801d080:	2002dbec 	.word	0x2002dbec
 801d084:	2002dc0c 	.word	0x2002dc0c
 801d088:	2002dbcc 	.word	0x2002dbcc
 801d08c:	2002dc24 	.word	0x2002dc24
 801d090:	2002dbd0 	.word	0x2002dbd0
 801d094:	2002dc14 	.word	0x2002dc14
 801d098:	2002dbdc 	.word	0x2002dbdc
 801d09c:	2002dbe8 	.word	0x2002dbe8
 801d0a0:	2001ec9c 	.word	0x2001ec9c
      tcp_receive(pcb);
 801d0a4:	4628      	mov	r0, r5
 801d0a6:	f7fe ff2d 	bl	801bf04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d0aa:	4ba8      	ldr	r3, [pc, #672]	; (801d34c <tcp_input+0x9b8>)
 801d0ac:	781b      	ldrb	r3, [r3, #0]
 801d0ae:	06db      	lsls	r3, r3, #27
 801d0b0:	f57f adce 	bpl.w	801cc50 <tcp_input+0x2bc>
 801d0b4:	4ba6      	ldr	r3, [pc, #664]	; (801d350 <tcp_input+0x9bc>)
 801d0b6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	429a      	cmp	r2, r3
 801d0bc:	f47f adc8 	bne.w	801cc50 <tcp_input+0x2bc>
 801d0c0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	f47f adc4 	bne.w	801cc50 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801d0c8:	4628      	mov	r0, r5
 801d0ca:	f7fd fe95 	bl	801adf8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d0ce:	4ba1      	ldr	r3, [pc, #644]	; (801d354 <tcp_input+0x9c0>)
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	42ab      	cmp	r3, r5
 801d0d4:	d015      	beq.n	801d102 <tcp_input+0x76e>
 801d0d6:	b1bb      	cbz	r3, 801d108 <tcp_input+0x774>
 801d0d8:	68da      	ldr	r2, [r3, #12]
 801d0da:	42aa      	cmp	r2, r5
 801d0dc:	f000 81c5 	beq.w	801d46a <tcp_input+0xad6>
 801d0e0:	4613      	mov	r3, r2
 801d0e2:	e7f8      	b.n	801d0d6 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d0e4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d1c3      	bne.n	801d072 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801d0ea:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801d0ec:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801d0ee:	f043 0302 	orr.w	r3, r3, #2
 801d0f2:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801d0f4:	f7fd fe80 	bl	801adf8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d0f8:	4b96      	ldr	r3, [pc, #600]	; (801d354 <tcp_input+0x9c0>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	42ab      	cmp	r3, r5
 801d0fe:	f040 81b7 	bne.w	801d470 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801d102:	68eb      	ldr	r3, [r5, #12]
 801d104:	4a93      	ldr	r2, [pc, #588]	; (801d354 <tcp_input+0x9c0>)
 801d106:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d108:	4b93      	ldr	r3, [pc, #588]	; (801d358 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801d10a:	220a      	movs	r2, #10
 801d10c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d10e:	681a      	ldr	r2, [r3, #0]
 801d110:	601d      	str	r5, [r3, #0]
 801d112:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801d114:	2201      	movs	r2, #1
 801d116:	4b91      	ldr	r3, [pc, #580]	; (801d35c <tcp_input+0x9c8>)
 801d118:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d11a:	f001 fd07 	bl	801eb2c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801d11e:	e597      	b.n	801cc50 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d120:	4b8f      	ldr	r3, [pc, #572]	; (801d360 <tcp_input+0x9cc>)
 801d122:	22c2      	movs	r2, #194	; 0xc2
 801d124:	498f      	ldr	r1, [pc, #572]	; (801d364 <tcp_input+0x9d0>)
 801d126:	4890      	ldr	r0, [pc, #576]	; (801d368 <tcp_input+0x9d4>)
 801d128:	f007 f8ec 	bl	8024304 <iprintf>
 801d12c:	e47d      	b.n	801ca2a <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d12e:	4b8c      	ldr	r3, [pc, #560]	; (801d360 <tcp_input+0x9cc>)
 801d130:	22df      	movs	r2, #223	; 0xdf
 801d132:	498e      	ldr	r1, [pc, #568]	; (801d36c <tcp_input+0x9d8>)
 801d134:	488c      	ldr	r0, [pc, #560]	; (801d368 <tcp_input+0x9d4>)
 801d136:	f007 f8e5 	bl	8024304 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d13a:	8923      	ldrh	r3, [r4, #8]
 801d13c:	e49b      	b.n	801ca76 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801d13e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801d140:	2b00      	cmp	r3, #0
 801d142:	f000 80d9 	beq.w	801d2f8 <tcp_input+0x964>
 801d146:	4c8a      	ldr	r4, [pc, #552]	; (801d370 <tcp_input+0x9dc>)
 801d148:	e595      	b.n	801cc76 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801d14a:	f8bb 2000 	ldrh.w	r2, [fp]
 801d14e:	b15a      	cbz	r2, 801d168 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801d150:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801d154:	b12b      	cbz	r3, 801d162 <tcp_input+0x7ce>
 801d156:	4629      	mov	r1, r5
 801d158:	6928      	ldr	r0, [r5, #16]
 801d15a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801d15c:	300d      	adds	r0, #13
 801d15e:	f43f ad8a 	beq.w	801cc76 <tcp_input+0x2e2>
          recv_acked = 0;
 801d162:	2300      	movs	r3, #0
 801d164:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801d168:	4628      	mov	r0, r5
 801d16a:	f7fe fe2b 	bl	801bdc4 <tcp_input_delayed_close>
 801d16e:	2800      	cmp	r0, #0
 801d170:	f47f ad81 	bne.w	801cc76 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801d174:	f8d8 3000 	ldr.w	r3, [r8]
 801d178:	b1fb      	cbz	r3, 801d1ba <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801d17a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d17c:	b133      	cbz	r3, 801d18c <tcp_input+0x7f8>
 801d17e:	4b78      	ldr	r3, [pc, #480]	; (801d360 <tcp_input+0x9cc>)
 801d180:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d184:	497b      	ldr	r1, [pc, #492]	; (801d374 <tcp_input+0x9e0>)
 801d186:	4878      	ldr	r0, [pc, #480]	; (801d368 <tcp_input+0x9d4>)
 801d188:	f007 f8bc 	bl	8024304 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801d18c:	8b6b      	ldrh	r3, [r5, #26]
 801d18e:	f013 0310 	ands.w	r3, r3, #16
 801d192:	f040 8113 	bne.w	801d3bc <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d196:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801d19a:	2e00      	cmp	r6, #0
 801d19c:	f000 8121 	beq.w	801d3e2 <tcp_input+0xa4e>
 801d1a0:	f8d8 2000 	ldr.w	r2, [r8]
 801d1a4:	4629      	mov	r1, r5
 801d1a6:	6928      	ldr	r0, [r5, #16]
 801d1a8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801d1aa:	f110 0f0d 	cmn.w	r0, #13
 801d1ae:	f43f ad62 	beq.w	801cc76 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801d1b2:	b110      	cbz	r0, 801d1ba <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801d1b4:	f8d8 3000 	ldr.w	r3, [r8]
 801d1b8:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801d1ba:	f89a 3000 	ldrb.w	r3, [sl]
 801d1be:	0699      	lsls	r1, r3, #26
 801d1c0:	d507      	bpl.n	801d1d2 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801d1c2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	f000 80ad 	beq.w	801d324 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801d1ca:	7b5a      	ldrb	r2, [r3, #13]
 801d1cc:	f042 0220 	orr.w	r2, r2, #32
 801d1d0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801d1d2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801d1d4:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801d1d6:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801d1d8:	f7fe fdf4 	bl	801bdc4 <tcp_input_delayed_close>
 801d1dc:	2800      	cmp	r0, #0
 801d1de:	f47f ad4a 	bne.w	801cc76 <tcp_input+0x2e2>
        tcp_output(pcb);
 801d1e2:	4628      	mov	r0, r5
 801d1e4:	f001 f976 	bl	801e4d4 <tcp_output>
 801d1e8:	e545      	b.n	801cc76 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801d1ea:	6830      	ldr	r0, [r6, #0]
 801d1ec:	8980      	ldrh	r0, [r0, #12]
 801d1ee:	f7fa ff83 	bl	80180f8 <lwip_htons>
 801d1f2:	f010 0004 	ands.w	r0, r0, #4
 801d1f6:	f47f abda 	bne.w	801c9ae <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d1fa:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d1fc:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d1fe:	8811      	ldrh	r1, [r2, #0]
 801d200:	4a5d      	ldr	r2, [pc, #372]	; (801d378 <tcp_input+0x9e4>)
 801d202:	881d      	ldrh	r5, [r3, #0]
 801d204:	6812      	ldr	r2, [r2, #0]
 801d206:	440a      	add	r2, r1
 801d208:	4951      	ldr	r1, [pc, #324]	; (801d350 <tcp_input+0x9bc>)
 801d20a:	6809      	ldr	r1, [r1, #0]
 801d20c:	9502      	str	r5, [sp, #8]
 801d20e:	885b      	ldrh	r3, [r3, #2]
 801d210:	e9cd 9300 	strd	r9, r3, [sp]
 801d214:	4b59      	ldr	r3, [pc, #356]	; (801d37c <tcp_input+0x9e8>)
 801d216:	f001 f8e3 	bl	801e3e0 <tcp_rst>
 801d21a:	f7ff bbc8 	b.w	801c9ae <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801d21e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801d220:	494b      	ldr	r1, [pc, #300]	; (801d350 <tcp_input+0x9bc>)
 801d222:	3201      	adds	r2, #1
 801d224:	6809      	ldr	r1, [r1, #0]
 801d226:	428a      	cmp	r2, r1
 801d228:	f47f aebe 	bne.w	801cfa8 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801d22c:	4b52      	ldr	r3, [pc, #328]	; (801d378 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801d22e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801d230:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801d232:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d234:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801d236:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d238:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d23a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801d23c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d23e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801d240:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d242:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d244:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801d246:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801d248:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801d24c:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d24e:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d252:	9205      	str	r2, [sp, #20]
 801d254:	f004 fb88 	bl	8021968 <ip4_route>
 801d258:	9a05      	ldr	r2, [sp, #20]
 801d25a:	4601      	mov	r1, r0
 801d25c:	4630      	mov	r0, r6
 801d25e:	f7fe fcff 	bl	801bc60 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d262:	f241 131c 	movw	r3, #4380	; 0x111c
 801d266:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d268:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d26a:	0081      	lsls	r1, r0, #2
 801d26c:	429a      	cmp	r2, r3
 801d26e:	4616      	mov	r6, r2
 801d270:	bf38      	it	cc
 801d272:	461e      	movcc	r6, r3
 801d274:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801d278:	f240 814d 	bls.w	801d516 <tcp_input+0xb82>
 801d27c:	b28b      	uxth	r3, r1
 801d27e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d282:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801d286:	2b00      	cmp	r3, #0
 801d288:	f000 813d 	beq.w	801d506 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801d28c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801d290:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801d292:	3b01      	subs	r3, #1
 801d294:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801d298:	2e00      	cmp	r6, #0
 801d29a:	f000 812f 	beq.w	801d4fc <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801d29e:	6833      	ldr	r3, [r6, #0]
 801d2a0:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801d2a2:	4630      	mov	r0, r6
 801d2a4:	f7fd fce0 	bl	801ac68 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801d2a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	f000 8122 	beq.w	801d4f4 <tcp_input+0xb60>
          pcb->rtime = 0;
 801d2b0:	2300      	movs	r3, #0
 801d2b2:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801d2b4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d2b8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801d2bc:	b133      	cbz	r3, 801d2cc <tcp_input+0x938>
 801d2be:	2200      	movs	r2, #0
 801d2c0:	4629      	mov	r1, r5
 801d2c2:	6928      	ldr	r0, [r5, #16]
 801d2c4:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801d2c6:	300d      	adds	r0, #13
 801d2c8:	f43f acd5 	beq.w	801cc76 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801d2cc:	8b6b      	ldrh	r3, [r5, #26]
 801d2ce:	f043 0302 	orr.w	r3, r3, #2
 801d2d2:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801d2d4:	e4bc      	b.n	801cc50 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801d2d6:	4b1e      	ldr	r3, [pc, #120]	; (801d350 <tcp_input+0x9bc>)
 801d2d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	429a      	cmp	r2, r3
 801d2de:	f47f acb7 	bne.w	801cc50 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801d2e2:	f89a 3000 	ldrb.w	r3, [sl]
 801d2e6:	f043 0308 	orr.w	r3, r3, #8
 801d2ea:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d2ee:	8b6b      	ldrh	r3, [r5, #26]
 801d2f0:	f023 0301 	bic.w	r3, r3, #1
 801d2f4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801d2f6:	e4ab      	b.n	801cc50 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801d2f8:	4628      	mov	r0, r5
 801d2fa:	4c1d      	ldr	r4, [pc, #116]	; (801d370 <tcp_input+0x9dc>)
 801d2fc:	f001 f8b8 	bl	801e470 <tcp_send_empty_ack>
 801d300:	e4b9      	b.n	801cc76 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d302:	8802      	ldrh	r2, [r0, #0]
 801d304:	e9cd 9300 	strd	r9, r3, [sp]
 801d308:	9b05      	ldr	r3, [sp, #20]
 801d30a:	9202      	str	r2, [sp, #8]
 801d30c:	881a      	ldrh	r2, [r3, #0]
 801d30e:	4b1a      	ldr	r3, [pc, #104]	; (801d378 <tcp_input+0x9e4>)
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	441a      	add	r2, r3
 801d314:	4b0e      	ldr	r3, [pc, #56]	; (801d350 <tcp_input+0x9bc>)
 801d316:	4628      	mov	r0, r5
 801d318:	6819      	ldr	r1, [r3, #0]
 801d31a:	4b18      	ldr	r3, [pc, #96]	; (801d37c <tcp_input+0x9e8>)
 801d31c:	f001 f860 	bl	801e3e0 <tcp_rst>
 801d320:	f7ff bb45 	b.w	801c9ae <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801d324:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801d326:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801d32a:	d001      	beq.n	801d330 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801d32c:	3301      	adds	r3, #1
 801d32e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801d330:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801d334:	2e00      	cmp	r6, #0
 801d336:	f43f af4c 	beq.w	801d1d2 <tcp_input+0x83e>
 801d33a:	2300      	movs	r3, #0
 801d33c:	4629      	mov	r1, r5
 801d33e:	6928      	ldr	r0, [r5, #16]
 801d340:	461a      	mov	r2, r3
 801d342:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801d344:	300d      	adds	r0, #13
 801d346:	f47f af44 	bne.w	801d1d2 <tcp_input+0x83e>
 801d34a:	e494      	b.n	801cc76 <tcp_input+0x2e2>
 801d34c:	2002dbec 	.word	0x2002dbec
 801d350:	2002dbe8 	.word	0x2002dbe8
 801d354:	2002dbcc 	.word	0x2002dbcc
 801d358:	2002dbe4 	.word	0x2002dbe4
 801d35c:	2002dbd0 	.word	0x2002dbd0
 801d360:	08042e90 	.word	0x08042e90
 801d364:	08043098 	.word	0x08043098
 801d368:	08028ab4 	.word	0x08028ab4
 801d36c:	080430a8 	.word	0x080430a8
 801d370:	2002dc10 	.word	0x2002dc10
 801d374:	08043244 	.word	0x08043244
 801d378:	2002dc0c 	.word	0x2002dc0c
 801d37c:	2001ec9c 	.word	0x2001ec9c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d380:	06d9      	lsls	r1, r3, #27
 801d382:	f57f ac65 	bpl.w	801cc50 <tcp_input+0x2bc>
 801d386:	4b6a      	ldr	r3, [pc, #424]	; (801d530 <tcp_input+0xb9c>)
 801d388:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	429a      	cmp	r2, r3
 801d38e:	f47f ac5f 	bne.w	801cc50 <tcp_input+0x2bc>
 801d392:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801d394:	2b00      	cmp	r3, #0
 801d396:	f47f ac5b 	bne.w	801cc50 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801d39a:	2306      	movs	r3, #6
 801d39c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801d39e:	e457      	b.n	801cc50 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d3a0:	2900      	cmp	r1, #0
 801d3a2:	f43f ac55 	beq.w	801cc50 <tcp_input+0x2bc>
 801d3a6:	4b63      	ldr	r3, [pc, #396]	; (801d534 <tcp_input+0xba0>)
 801d3a8:	681a      	ldr	r2, [r3, #0]
 801d3aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d3ac:	3b01      	subs	r3, #1
 801d3ae:	4293      	cmp	r3, r2
 801d3b0:	f47f ac4e 	bne.w	801cc50 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801d3b4:	4628      	mov	r0, r5
 801d3b6:	f000 ff95 	bl	801e2e4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801d3ba:	e449      	b.n	801cc50 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801d3bc:	f8d8 0000 	ldr.w	r0, [r8]
 801d3c0:	f7fc fed6 	bl	801a170 <pbuf_free>
            tcp_abort(pcb);
 801d3c4:	4628      	mov	r0, r5
 801d3c6:	f7fe f957 	bl	801b678 <tcp_abort>
            goto aborted;
 801d3ca:	e454      	b.n	801cc76 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801d3cc:	69ab      	ldr	r3, [r5, #24]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	f43f aaed 	beq.w	801c9ae <tcp_input+0x1a>
 801d3d4:	4601      	mov	r1, r0
 801d3d6:	f04f 32ff 	mov.w	r2, #4294967295
 801d3da:	6928      	ldr	r0, [r5, #16]
 801d3dc:	4798      	blx	r3
 801d3de:	f7ff bae6 	b.w	801c9ae <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801d3e2:	4633      	mov	r3, r6
 801d3e4:	4630      	mov	r0, r6
 801d3e6:	f8d8 2000 	ldr.w	r2, [r8]
 801d3ea:	4629      	mov	r1, r5
 801d3ec:	f7fe fb5a 	bl	801baa4 <tcp_recv_null>
 801d3f0:	e6db      	b.n	801d1aa <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801d3f2:	2304      	movs	r3, #4
 801d3f4:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801d3f6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d0e3      	beq.n	801d3c4 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d3fc:	699b      	ldr	r3, [r3, #24]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d05d      	beq.n	801d4be <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d402:	2200      	movs	r2, #0
 801d404:	4629      	mov	r1, r5
 801d406:	6928      	ldr	r0, [r5, #16]
 801d408:	4798      	blx	r3
          if (err != ERR_OK) {
 801d40a:	2800      	cmp	r0, #0
 801d40c:	d153      	bne.n	801d4b6 <tcp_input+0xb22>
          tcp_receive(pcb);
 801d40e:	4628      	mov	r0, r5
 801d410:	f7fe fd78 	bl	801bf04 <tcp_receive>
          if (recv_acked != 0) {
 801d414:	f8bb 3000 	ldrh.w	r3, [fp]
 801d418:	b113      	cbz	r3, 801d420 <tcp_input+0xa8c>
            recv_acked--;
 801d41a:	3b01      	subs	r3, #1
 801d41c:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d420:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801d422:	f241 131c 	movw	r3, #4380	; 0x111c
 801d426:	004a      	lsls	r2, r1, #1
 801d428:	0088      	lsls	r0, r1, #2
 801d42a:	429a      	cmp	r2, r3
 801d42c:	4616      	mov	r6, r2
 801d42e:	bf38      	it	cc
 801d430:	461e      	movcc	r6, r3
 801d432:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801d436:	d959      	bls.n	801d4ec <tcp_input+0xb58>
 801d438:	b283      	uxth	r3, r0
 801d43a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801d43e:	f89a 3000 	ldrb.w	r3, [sl]
 801d442:	069b      	lsls	r3, r3, #26
 801d444:	f57f ac04 	bpl.w	801cc50 <tcp_input+0x2bc>
 801d448:	e584      	b.n	801cf54 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801d44a:	07d0      	lsls	r0, r2, #31
 801d44c:	f57f ac72 	bpl.w	801cd34 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801d450:	4b39      	ldr	r3, [pc, #228]	; (801d538 <tcp_input+0xba4>)
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	622b      	str	r3, [r5, #32]
 801d456:	e46d      	b.n	801cd34 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d458:	4b38      	ldr	r3, [pc, #224]	; (801d53c <tcp_input+0xba8>)
 801d45a:	f240 1215 	movw	r2, #277	; 0x115
 801d45e:	4938      	ldr	r1, [pc, #224]	; (801d540 <tcp_input+0xbac>)
 801d460:	4838      	ldr	r0, [pc, #224]	; (801d544 <tcp_input+0xbb0>)
 801d462:	f006 ff4f 	bl	8024304 <iprintf>
 801d466:	f7ff bbb0 	b.w	801cbca <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801d46a:	68ea      	ldr	r2, [r5, #12]
 801d46c:	60da      	str	r2, [r3, #12]
 801d46e:	e64b      	b.n	801d108 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801d470:	2b00      	cmp	r3, #0
 801d472:	f43f ae49 	beq.w	801d108 <tcp_input+0x774>
 801d476:	68da      	ldr	r2, [r3, #12]
 801d478:	42aa      	cmp	r2, r5
 801d47a:	d0f6      	beq.n	801d46a <tcp_input+0xad6>
 801d47c:	4613      	mov	r3, r2
 801d47e:	e7f7      	b.n	801d470 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801d480:	2100      	movs	r1, #0
 801d482:	4648      	mov	r0, r9
 801d484:	f7fe f828 	bl	801b4d8 <tcp_abandon>
      return;
 801d488:	f7ff ba91 	b.w	801c9ae <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d48c:	4b2b      	ldr	r3, [pc, #172]	; (801d53c <tcp_input+0xba8>)
 801d48e:	f240 120d 	movw	r2, #269	; 0x10d
 801d492:	492d      	ldr	r1, [pc, #180]	; (801d548 <tcp_input+0xbb4>)
 801d494:	482b      	ldr	r0, [pc, #172]	; (801d544 <tcp_input+0xbb0>)
 801d496:	f006 ff35 	bl	8024304 <iprintf>
      if (prev != NULL) {
 801d49a:	f1b8 0f00 	cmp.w	r8, #0
 801d49e:	f43f ab90 	beq.w	801cbc2 <tcp_input+0x22e>
 801d4a2:	68eb      	ldr	r3, [r5, #12]
 801d4a4:	f7ff bb87 	b.w	801cbb6 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d4a8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801d4ac:	9b05      	ldr	r3, [sp, #20]
 801d4ae:	f8cd 9000 	str.w	r9, [sp]
 801d4b2:	881b      	ldrh	r3, [r3, #0]
 801d4b4:	e72d      	b.n	801d312 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801d4b6:	300d      	adds	r0, #13
 801d4b8:	f43f abdd 	beq.w	801cc76 <tcp_input+0x2e2>
 801d4bc:	e782      	b.n	801d3c4 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d4be:	4b1f      	ldr	r3, [pc, #124]	; (801d53c <tcp_input+0xba8>)
 801d4c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801d4c4:	4921      	ldr	r1, [pc, #132]	; (801d54c <tcp_input+0xbb8>)
 801d4c6:	481f      	ldr	r0, [pc, #124]	; (801d544 <tcp_input+0xbb0>)
 801d4c8:	f006 ff1c 	bl	8024304 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d4cc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801d4ce:	699b      	ldr	r3, [r3, #24]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d196      	bne.n	801d402 <tcp_input+0xa6e>
 801d4d4:	e776      	b.n	801d3c4 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d4d6:	2900      	cmp	r1, #0
 801d4d8:	f47f af03 	bne.w	801d2e2 <tcp_input+0x94e>
 801d4dc:	4b17      	ldr	r3, [pc, #92]	; (801d53c <tcp_input+0xba8>)
 801d4de:	f44f 724e 	mov.w	r2, #824	; 0x338
 801d4e2:	491b      	ldr	r1, [pc, #108]	; (801d550 <tcp_input+0xbbc>)
 801d4e4:	4817      	ldr	r0, [pc, #92]	; (801d544 <tcp_input+0xbb0>)
 801d4e6:	f006 ff0d 	bl	8024304 <iprintf>
 801d4ea:	e6fa      	b.n	801d2e2 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	bf88      	it	hi
 801d4f0:	b293      	uxthhi	r3, r2
 801d4f2:	e7a2      	b.n	801d43a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801d4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d4f8:	862b      	strh	r3, [r5, #48]	; 0x30
 801d4fa:	e6dd      	b.n	801d2b8 <tcp_input+0x924>
          rseg = pcb->unsent;
 801d4fc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d4fe:	b176      	cbz	r6, 801d51e <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801d500:	6833      	ldr	r3, [r6, #0]
 801d502:	66eb      	str	r3, [r5, #108]	; 0x6c
 801d504:	e6cd      	b.n	801d2a2 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d506:	4b0d      	ldr	r3, [pc, #52]	; (801d53c <tcp_input+0xba8>)
 801d508:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801d50c:	4911      	ldr	r1, [pc, #68]	; (801d554 <tcp_input+0xbc0>)
 801d50e:	480d      	ldr	r0, [pc, #52]	; (801d544 <tcp_input+0xbb0>)
 801d510:	f006 fef8 	bl	8024304 <iprintf>
 801d514:	e6ba      	b.n	801d28c <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d516:	429a      	cmp	r2, r3
 801d518:	bf88      	it	hi
 801d51a:	b293      	uxthhi	r3, r2
 801d51c:	e6af      	b.n	801d27e <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d51e:	4b07      	ldr	r3, [pc, #28]	; (801d53c <tcp_input+0xba8>)
 801d520:	f44f 725d 	mov.w	r2, #884	; 0x374
 801d524:	490c      	ldr	r1, [pc, #48]	; (801d558 <tcp_input+0xbc4>)
 801d526:	4807      	ldr	r0, [pc, #28]	; (801d544 <tcp_input+0xbb0>)
 801d528:	f006 feec 	bl	8024304 <iprintf>
 801d52c:	e7e8      	b.n	801d500 <tcp_input+0xb6c>
 801d52e:	bf00      	nop
 801d530:	2002dbe8 	.word	0x2002dbe8
 801d534:	2002dc0c 	.word	0x2002dc0c
 801d538:	2002dbdc 	.word	0x2002dbdc
 801d53c:	08042e90 	.word	0x08042e90
 801d540:	0804317c 	.word	0x0804317c
 801d544:	08028ab4 	.word	0x08028ab4
 801d548:	08043150 	.word	0x08043150
 801d54c:	08043224 	.word	0x08043224
 801d550:	080431d8 	.word	0x080431d8
 801d554:	080431f8 	.word	0x080431f8
 801d558:	08043210 	.word	0x08043210

0801d55c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801d55c:	4a02      	ldr	r2, [pc, #8]	; (801d568 <tcp_trigger_input_pcb_close+0xc>)
 801d55e:	7813      	ldrb	r3, [r2, #0]
 801d560:	f043 0310 	orr.w	r3, r3, #16
 801d564:	7013      	strb	r3, [r2, #0]
}
 801d566:	4770      	bx	lr
 801d568:	2002dc08 	.word	0x2002dc08

0801d56c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d570:	9f08      	ldr	r7, [sp, #32]
 801d572:	4680      	mov	r8, r0
 801d574:	460d      	mov	r5, r1
 801d576:	4614      	mov	r4, r2
 801d578:	461e      	mov	r6, r3
 801d57a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801d57e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d582:	2f00      	cmp	r7, #0
 801d584:	d033      	beq.n	801d5ee <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d586:	42a5      	cmp	r5, r4
 801d588:	d20e      	bcs.n	801d5a8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d58a:	f019 0f02 	tst.w	r9, #2
 801d58e:	d008      	beq.n	801d5a2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d590:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801d594:	f021 0103 	bic.w	r1, r1, #3
 801d598:	428c      	cmp	r4, r1
 801d59a:	bf28      	it	cs
 801d59c:	460c      	movcs	r4, r1
 801d59e:	b2a1      	uxth	r1, r4
 801d5a0:	e003      	b.n	801d5aa <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d5a2:	8b7b      	ldrh	r3, [r7, #26]
 801d5a4:	065b      	lsls	r3, r3, #25
 801d5a6:	d518      	bpl.n	801d5da <tcp_pbuf_prealloc+0x6e>
 801d5a8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d5aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5ae:	4640      	mov	r0, r8
 801d5b0:	f7fc fc0c 	bl	8019dcc <pbuf_alloc>
  if (p == NULL) {
 801d5b4:	4604      	mov	r4, r0
 801d5b6:	b168      	cbz	r0, 801d5d4 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d5b8:	6803      	ldr	r3, [r0, #0]
 801d5ba:	b133      	cbz	r3, 801d5ca <tcp_pbuf_prealloc+0x5e>
 801d5bc:	4b0f      	ldr	r3, [pc, #60]	; (801d5fc <tcp_pbuf_prealloc+0x90>)
 801d5be:	f240 120b 	movw	r2, #267	; 0x10b
 801d5c2:	490f      	ldr	r1, [pc, #60]	; (801d600 <tcp_pbuf_prealloc+0x94>)
 801d5c4:	480f      	ldr	r0, [pc, #60]	; (801d604 <tcp_pbuf_prealloc+0x98>)
 801d5c6:	f006 fe9d 	bl	8024304 <iprintf>
  *oversize = p->len - length;
 801d5ca:	8963      	ldrh	r3, [r4, #10]
 801d5cc:	1b5b      	subs	r3, r3, r5
 801d5ce:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d5d0:	8125      	strh	r5, [r4, #8]
 801d5d2:	8165      	strh	r5, [r4, #10]
  return p;
}
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801d5da:	f1ba 0f00 	cmp.w	sl, #0
 801d5de:	d0d7      	beq.n	801d590 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801d5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d1d4      	bne.n	801d590 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801d5e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d1d1      	bne.n	801d590 <tcp_pbuf_prealloc+0x24>
 801d5ec:	e7dc      	b.n	801d5a8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d5ee:	4b03      	ldr	r3, [pc, #12]	; (801d5fc <tcp_pbuf_prealloc+0x90>)
 801d5f0:	22e9      	movs	r2, #233	; 0xe9
 801d5f2:	4905      	ldr	r1, [pc, #20]	; (801d608 <tcp_pbuf_prealloc+0x9c>)
 801d5f4:	4803      	ldr	r0, [pc, #12]	; (801d604 <tcp_pbuf_prealloc+0x98>)
 801d5f6:	f006 fe85 	bl	8024304 <iprintf>
 801d5fa:	e7c4      	b.n	801d586 <tcp_pbuf_prealloc+0x1a>
 801d5fc:	08043260 	.word	0x08043260
 801d600:	080432b4 	.word	0x080432b4
 801d604:	08028ab4 	.word	0x08028ab4
 801d608:	08043294 	.word	0x08043294

0801d60c <tcp_create_segment>:
{
 801d60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d610:	460e      	mov	r6, r1
 801d612:	f89d a020 	ldrb.w	sl, [sp, #32]
 801d616:	4690      	mov	r8, r2
 801d618:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d61a:	4607      	mov	r7, r0
 801d61c:	2800      	cmp	r0, #0
 801d61e:	d04c      	beq.n	801d6ba <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d620:	2e00      	cmp	r6, #0
 801d622:	d052      	beq.n	801d6ca <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d624:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d628:	22a8      	movs	r2, #168	; 0xa8
 801d62a:	4931      	ldr	r1, [pc, #196]	; (801d6f0 <tcp_create_segment+0xe4>)
 801d62c:	2004      	movs	r0, #4
 801d62e:	f7fc f851 	bl	80196d4 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d632:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d636:	4604      	mov	r4, r0
 801d638:	2800      	cmp	r0, #0
 801d63a:	d054      	beq.n	801d6e6 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801d63c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801d640:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d642:	8932      	ldrh	r2, [r6, #8]
 801d644:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801d648:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d64a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801d64c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d64e:	d32c      	bcc.n	801d6aa <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801d650:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d654:	4630      	mov	r0, r6
 801d656:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801d658:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d65a:	f7fc fcc9 	bl	8019ff0 <pbuf_add_header>
 801d65e:	4606      	mov	r6, r0
 801d660:	2800      	cmp	r0, #0
 801d662:	d139      	bne.n	801d6d8 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d664:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d666:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d668:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d66a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d66e:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d672:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d676:	f7fa fd3f 	bl	80180f8 <lwip_htons>
 801d67a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d67e:	8b38      	ldrh	r0, [r7, #24]
 801d680:	68e7      	ldr	r7, [r4, #12]
 801d682:	f7fa fd39 	bl	80180f8 <lwip_htons>
 801d686:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d688:	4648      	mov	r0, r9
 801d68a:	68e7      	ldr	r7, [r4, #12]
 801d68c:	f7fa fd38 	bl	8018100 <lwip_htonl>
 801d690:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d692:	ea45 0008 	orr.w	r0, r5, r8
 801d696:	68e7      	ldr	r7, [r4, #12]
 801d698:	f7fa fd2e 	bl	80180f8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801d69c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d69e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801d6a0:	749e      	strb	r6, [r3, #18]
 801d6a2:	74de      	strb	r6, [r3, #19]
}
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d6aa:	22b0      	movs	r2, #176	; 0xb0
 801d6ac:	4b10      	ldr	r3, [pc, #64]	; (801d6f0 <tcp_create_segment+0xe4>)
 801d6ae:	4911      	ldr	r1, [pc, #68]	; (801d6f4 <tcp_create_segment+0xe8>)
 801d6b0:	4811      	ldr	r0, [pc, #68]	; (801d6f8 <tcp_create_segment+0xec>)
 801d6b2:	f006 fe27 	bl	8024304 <iprintf>
  seg->len = p->tot_len - optlen;
 801d6b6:	8932      	ldrh	r2, [r6, #8]
 801d6b8:	e7ca      	b.n	801d650 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d6ba:	4b0d      	ldr	r3, [pc, #52]	; (801d6f0 <tcp_create_segment+0xe4>)
 801d6bc:	22a3      	movs	r2, #163	; 0xa3
 801d6be:	490f      	ldr	r1, [pc, #60]	; (801d6fc <tcp_create_segment+0xf0>)
 801d6c0:	480d      	ldr	r0, [pc, #52]	; (801d6f8 <tcp_create_segment+0xec>)
 801d6c2:	f006 fe1f 	bl	8024304 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d6c6:	2e00      	cmp	r6, #0
 801d6c8:	d1ac      	bne.n	801d624 <tcp_create_segment+0x18>
 801d6ca:	4b09      	ldr	r3, [pc, #36]	; (801d6f0 <tcp_create_segment+0xe4>)
 801d6cc:	22a4      	movs	r2, #164	; 0xa4
 801d6ce:	490c      	ldr	r1, [pc, #48]	; (801d700 <tcp_create_segment+0xf4>)
 801d6d0:	4809      	ldr	r0, [pc, #36]	; (801d6f8 <tcp_create_segment+0xec>)
 801d6d2:	f006 fe17 	bl	8024304 <iprintf>
 801d6d6:	e7a5      	b.n	801d624 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801d6d8:	4620      	mov	r0, r4
    return NULL;
 801d6da:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801d6dc:	f7fd fac4 	bl	801ac68 <tcp_seg_free>
}
 801d6e0:	4620      	mov	r0, r4
 801d6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801d6e6:	4630      	mov	r0, r6
 801d6e8:	f7fc fd42 	bl	801a170 <pbuf_free>
    return NULL;
 801d6ec:	e7da      	b.n	801d6a4 <tcp_create_segment+0x98>
 801d6ee:	bf00      	nop
 801d6f0:	08043260 	.word	0x08043260
 801d6f4:	0804330c 	.word	0x0804330c
 801d6f8:	08028ab4 	.word	0x08028ab4
 801d6fc:	080432c8 	.word	0x080432c8
 801d700:	080432e8 	.word	0x080432e8

0801d704 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d704:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d70a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d70c:	4606      	mov	r6, r0
 801d70e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d710:	2022      	movs	r0, #34	; 0x22
 801d712:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801d716:	461c      	mov	r4, r3
 801d718:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d71c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801d720:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d724:	f7fc fb52 	bl	8019dcc <pbuf_alloc>
  if (p != NULL) {
 801d728:	4605      	mov	r5, r0
 801d72a:	b300      	cbz	r0, 801d76e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d72c:	8943      	ldrh	r3, [r0, #10]
 801d72e:	2b13      	cmp	r3, #19
 801d730:	d920      	bls.n	801d774 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801d732:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801d734:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801d736:	f7fa fcdf 	bl	80180f8 <lwip_htons>
 801d73a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d73c:	4650      	mov	r0, sl
 801d73e:	f7fa fcdb 	bl	80180f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801d742:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801d744:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801d746:	4630      	mov	r0, r6
 801d748:	f7fa fcda 	bl	8018100 <lwip_htonl>
 801d74c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d74e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801d752:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d754:	f7fa fcd0 	bl	80180f8 <lwip_htons>
 801d758:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801d75a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d75c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d75e:	f7fa fccb 	bl	80180f8 <lwip_htons>
    tcphdr->chksum = 0;
 801d762:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801d764:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801d766:	7423      	strb	r3, [r4, #16]
 801d768:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801d76a:	74a3      	strb	r3, [r4, #18]
 801d76c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801d76e:	4628      	mov	r0, r5
 801d770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d774:	4b03      	ldr	r3, [pc, #12]	; (801d784 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801d776:	f240 7223 	movw	r2, #1827	; 0x723
 801d77a:	4903      	ldr	r1, [pc, #12]	; (801d788 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801d77c:	4803      	ldr	r0, [pc, #12]	; (801d78c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801d77e:	f006 fdc1 	bl	8024304 <iprintf>
 801d782:	e7d6      	b.n	801d732 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801d784:	08043260 	.word	0x08043260
 801d788:	08043324 	.word	0x08043324
 801d78c:	08028ab4 	.word	0x08028ab4

0801d790 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801d790:	b570      	push	{r4, r5, r6, lr}
 801d792:	460d      	mov	r5, r1
 801d794:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d796:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801d798:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d79a:	b190      	cbz	r0, 801d7c2 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d79c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801d79e:	2210      	movs	r2, #16
 801d7a0:	8b21      	ldrh	r1, [r4, #24]
 801d7a2:	9302      	str	r3, [sp, #8]
 801d7a4:	e9cd 1200 	strd	r1, r2, [sp]
 801d7a8:	4632      	mov	r2, r6
 801d7aa:	4629      	mov	r1, r5
 801d7ac:	8ae3      	ldrh	r3, [r4, #22]
 801d7ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d7b0:	f7ff ffa8 	bl	801d704 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d7b4:	b118      	cbz	r0, 801d7be <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d7b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801d7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7ba:	4413      	add	r3, r2
 801d7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801d7be:	b004      	add	sp, #16
 801d7c0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d7c2:	4b04      	ldr	r3, [pc, #16]	; (801d7d4 <tcp_output_alloc_header.constprop.0+0x44>)
 801d7c4:	f240 7242 	movw	r2, #1858	; 0x742
 801d7c8:	4903      	ldr	r1, [pc, #12]	; (801d7d8 <tcp_output_alloc_header.constprop.0+0x48>)
 801d7ca:	4804      	ldr	r0, [pc, #16]	; (801d7dc <tcp_output_alloc_header.constprop.0+0x4c>)
 801d7cc:	f006 fd9a 	bl	8024304 <iprintf>
 801d7d0:	e7e4      	b.n	801d79c <tcp_output_alloc_header.constprop.0+0xc>
 801d7d2:	bf00      	nop
 801d7d4:	08043260 	.word	0x08043260
 801d7d8:	08043354 	.word	0x08043354
 801d7dc:	08028ab4 	.word	0x08028ab4

0801d7e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d7e4:	4605      	mov	r5, r0
 801d7e6:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d7e8:	460c      	mov	r4, r1
{
 801d7ea:	4690      	mov	r8, r2
 801d7ec:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d7ee:	2900      	cmp	r1, #0
 801d7f0:	d034      	beq.n	801d85c <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d7f2:	2d00      	cmp	r5, #0
 801d7f4:	d03a      	beq.n	801d86c <tcp_output_control_segment+0x8c>
 801d7f6:	7a28      	ldrb	r0, [r5, #8]
 801d7f8:	bb10      	cbnz	r0, 801d840 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801d7fa:	4630      	mov	r0, r6
 801d7fc:	f004 f8b4 	bl	8021968 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801d800:	4607      	mov	r7, r0
 801d802:	b310      	cbz	r0, 801d84a <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d804:	9600      	str	r6, [sp, #0]
 801d806:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801d808:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d80c:	2106      	movs	r1, #6
 801d80e:	8922      	ldrh	r2, [r4, #8]
 801d810:	4620      	mov	r0, r4
 801d812:	f7fb fa05 	bl	8018c20 <ip_chksum_pseudo>
 801d816:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d81a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801d81c:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d81e:	9500      	str	r5, [sp, #0]
 801d820:	2506      	movs	r5, #6
 801d822:	4632      	mov	r2, r6
 801d824:	4641      	mov	r1, r8
 801d826:	9501      	str	r5, [sp, #4]
 801d828:	4620      	mov	r0, r4
 801d82a:	9702      	str	r7, [sp, #8]
 801d82c:	f004 fa66 	bl	8021cfc <ip4_output_if>
 801d830:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d832:	4620      	mov	r0, r4
 801d834:	f7fc fc9c 	bl	801a170 <pbuf_free>
  return err;
}
 801d838:	4628      	mov	r0, r5
 801d83a:	b005      	add	sp, #20
 801d83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801d840:	f7fc f970 	bl	8019b24 <netif_get_by_index>
  if (netif == NULL) {
 801d844:	4607      	mov	r7, r0
 801d846:	2800      	cmp	r0, #0
 801d848:	d1dc      	bne.n	801d804 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801d84a:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801d84e:	4620      	mov	r0, r4
 801d850:	f7fc fc8e 	bl	801a170 <pbuf_free>
}
 801d854:	4628      	mov	r0, r5
 801d856:	b005      	add	sp, #20
 801d858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d85c:	4b0d      	ldr	r3, [pc, #52]	; (801d894 <tcp_output_control_segment+0xb4>)
 801d85e:	f240 7287 	movw	r2, #1927	; 0x787
 801d862:	490d      	ldr	r1, [pc, #52]	; (801d898 <tcp_output_control_segment+0xb8>)
 801d864:	480d      	ldr	r0, [pc, #52]	; (801d89c <tcp_output_control_segment+0xbc>)
 801d866:	f006 fd4d 	bl	8024304 <iprintf>
 801d86a:	e7c2      	b.n	801d7f2 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801d86c:	4630      	mov	r0, r6
 801d86e:	f004 f87b 	bl	8021968 <ip4_route>
  if (netif == NULL) {
 801d872:	4607      	mov	r7, r0
 801d874:	2800      	cmp	r0, #0
 801d876:	d0e8      	beq.n	801d84a <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d878:	9600      	str	r6, [sp, #0]
 801d87a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801d87c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d880:	2106      	movs	r1, #6
 801d882:	8922      	ldrh	r2, [r4, #8]
 801d884:	4620      	mov	r0, r4
 801d886:	f7fb f9cb 	bl	8018c20 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801d88a:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d88c:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801d890:	e7c5      	b.n	801d81e <tcp_output_control_segment+0x3e>
 801d892:	bf00      	nop
 801d894:	08043260 	.word	0x08043260
 801d898:	0804337c 	.word	0x0804337c
 801d89c:	08028ab4 	.word	0x08028ab4

0801d8a0 <tcp_write>:
{
 801d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801d8a4:	2400      	movs	r4, #0
{
 801d8a6:	b091      	sub	sp, #68	; 0x44
 801d8a8:	9107      	str	r1, [sp, #28]
 801d8aa:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801d8ac:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	f000 82fc 	beq.w	801deae <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d8b6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801d8ba:	4692      	mov	sl, r2
 801d8bc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801d8be:	4681      	mov	r9, r0
 801d8c0:	085b      	lsrs	r3, r3, #1
 801d8c2:	4293      	cmp	r3, r2
 801d8c4:	bf28      	it	cs
 801d8c6:	4613      	movcs	r3, r2
 801d8c8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	bf08      	it	eq
 801d8ce:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d8d0:	9b07      	ldr	r3, [sp, #28]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	f000 82df 	beq.w	801de96 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801d8d8:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d8da:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801d8dc:	2a02      	cmp	r2, #2
 801d8de:	d902      	bls.n	801d8e6 <tcp_write+0x46>
 801d8e0:	2b07      	cmp	r3, #7
 801d8e2:	f040 829c 	bne.w	801de1e <tcp_write+0x57e>
  } else if (len == 0) {
 801d8e6:	f1ba 0f00 	cmp.w	sl, #0
 801d8ea:	f000 80ec 	beq.w	801dac6 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801d8ee:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801d8f2:	4553      	cmp	r3, sl
 801d8f4:	f0c0 82b6 	bcc.w	801de64 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d8f8:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801d8fc:	2e08      	cmp	r6, #8
 801d8fe:	f200 82b1 	bhi.w	801de64 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d902:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801d906:	2e00      	cmp	r6, #0
 801d908:	f000 80d3 	beq.w	801dab2 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	f040 80dc 	bne.w	801daca <tcp_write+0x22a>
 801d912:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801d916:	f1b8 0f00 	cmp.w	r8, #0
 801d91a:	f000 8263 	beq.w	801dde4 <tcp_write+0x544>
 801d91e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d920:	461a      	mov	r2, r3
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d1fb      	bne.n	801d920 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d928:	7a94      	ldrb	r4, [r2, #10]
 801d92a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d92c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d92e:	00a4      	lsls	r4, r4, #2
 801d930:	920b      	str	r2, [sp, #44]	; 0x2c
 801d932:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d936:	191a      	adds	r2, r3, r4
 801d938:	4593      	cmp	fp, r2
 801d93a:	f2c0 81a6 	blt.w	801dc8a <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d93e:	ebab 0404 	sub.w	r4, fp, r4
 801d942:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801d944:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d948:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801d94a:	930a      	str	r3, [sp, #40]	; 0x28
 801d94c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801d950:	2b00      	cmp	r3, #0
 801d952:	f000 80cf 	beq.w	801daf4 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d956:	42a3      	cmp	r3, r4
 801d958:	f200 818a 	bhi.w	801dc70 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d95c:	45a2      	cmp	sl, r4
 801d95e:	4653      	mov	r3, sl
 801d960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d962:	bf28      	it	cs
 801d964:	4623      	movcs	r3, r4
 801d966:	4293      	cmp	r3, r2
 801d968:	bf28      	it	cs
 801d96a:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801d96c:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801d96e:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d970:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801d972:	b292      	uxth	r2, r2
      space -= oversize_used;
 801d974:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801d976:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d97a:	2a00      	cmp	r2, #0
 801d97c:	f000 8183 	beq.w	801dc86 <tcp_write+0x3e6>
 801d980:	459a      	cmp	sl, r3
 801d982:	f000 8180 	beq.w	801dc86 <tcp_write+0x3e6>
 801d986:	4bb2      	ldr	r3, [pc, #712]	; (801dc50 <tcp_write+0x3b0>)
 801d988:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d98c:	49b1      	ldr	r1, [pc, #708]	; (801dc54 <tcp_write+0x3b4>)
 801d98e:	48b2      	ldr	r0, [pc, #712]	; (801dc58 <tcp_write+0x3b8>)
 801d990:	f006 fcb8 	bl	8024304 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d996:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d998:	459a      	cmp	sl, r3
 801d99a:	f200 80b0 	bhi.w	801dafe <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d9a2:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801d9a4:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801d9a6:	45a2      	cmp	sl, r4
 801d9a8:	f240 80ee 	bls.w	801db88 <tcp_write+0x2e8>
 801d9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ae:	f04f 0800 	mov.w	r8, #0
 801d9b2:	f003 0301 	and.w	r3, r3, #1
 801d9b6:	f8cd 8014 	str.w	r8, [sp, #20]
 801d9ba:	9308      	str	r3, [sp, #32]
 801d9bc:	4643      	mov	r3, r8
 801d9be:	46d8      	mov	r8, fp
 801d9c0:	469b      	mov	fp, r3
 801d9c2:	e042      	b.n	801da4a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d9c4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	f040 80f0 	bne.w	801dbae <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d9ce:	2201      	movs	r2, #1
 801d9d0:	4629      	mov	r1, r5
 801d9d2:	2036      	movs	r0, #54	; 0x36
 801d9d4:	f7fc f9fa 	bl	8019dcc <pbuf_alloc>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	f000 8100 	beq.w	801dbde <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d9de:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d9e0:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d9e2:	9006      	str	r0, [sp, #24]
 801d9e4:	4422      	add	r2, r4
 801d9e6:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d9e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9ec:	2036      	movs	r0, #54	; 0x36
 801d9ee:	f7fc f9ed 	bl	8019dcc <pbuf_alloc>
 801d9f2:	9b06      	ldr	r3, [sp, #24]
 801d9f4:	4607      	mov	r7, r0
 801d9f6:	2800      	cmp	r0, #0
 801d9f8:	f000 8195 	beq.w	801dd26 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801d9fc:	4619      	mov	r1, r3
 801d9fe:	f7fc fbe9 	bl	801a1d4 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801da02:	4638      	mov	r0, r7
 801da04:	f7fc fbc8 	bl	801a198 <pbuf_clen>
 801da08:	4430      	add	r0, r6
 801da0a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801da0c:	2e09      	cmp	r6, #9
 801da0e:	d84a      	bhi.n	801daa6 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801da10:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801da14:	2200      	movs	r2, #0
 801da16:	4639      	mov	r1, r7
 801da18:	4648      	mov	r0, r9
 801da1a:	4423      	add	r3, r4
 801da1c:	9200      	str	r2, [sp, #0]
 801da1e:	f7ff fdf5 	bl	801d60c <tcp_create_segment>
 801da22:	4607      	mov	r7, r0
 801da24:	2800      	cmp	r0, #0
 801da26:	f000 80da 	beq.w	801dbde <tcp_write+0x33e>
    if (queue == NULL) {
 801da2a:	9b05      	ldr	r3, [sp, #20]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	f000 80a3 	beq.w	801db78 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801da32:	f1bb 0f00 	cmp.w	fp, #0
 801da36:	f000 80c2 	beq.w	801dbbe <tcp_write+0x31e>
    pos += seglen;
 801da3a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801da3c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801da40:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801da42:	45a2      	cmp	sl, r4
 801da44:	f240 809e 	bls.w	801db84 <tcp_write+0x2e4>
 801da48:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801da4a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da4e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801da50:	b2ad      	uxth	r5, r5
 801da52:	4545      	cmp	r5, r8
 801da54:	bf28      	it	cs
 801da56:	4645      	movcs	r5, r8
 801da58:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d0b2      	beq.n	801d9c4 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da60:	4642      	mov	r2, r8
 801da62:	4629      	mov	r1, r5
 801da64:	2036      	movs	r0, #54	; 0x36
 801da66:	e9cd 9300 	strd	r9, r3, [sp]
 801da6a:	9b05      	ldr	r3, [sp, #20]
 801da6c:	fab3 f383 	clz	r3, r3
 801da70:	095b      	lsrs	r3, r3, #5
 801da72:	9302      	str	r3, [sp, #8]
 801da74:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801da78:	f7ff fd78 	bl	801d56c <tcp_pbuf_prealloc>
 801da7c:	4607      	mov	r7, r0
 801da7e:	2800      	cmp	r0, #0
 801da80:	f000 80ad 	beq.w	801dbde <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801da84:	8943      	ldrh	r3, [r0, #10]
 801da86:	42ab      	cmp	r3, r5
 801da88:	f0c0 80a1 	bcc.w	801dbce <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801da8c:	9b07      	ldr	r3, [sp, #28]
 801da8e:	462a      	mov	r2, r5
 801da90:	6878      	ldr	r0, [r7, #4]
 801da92:	1919      	adds	r1, r3, r4
 801da94:	f005 fc70 	bl	8023378 <memcpy>
    queuelen += pbuf_clen(p);
 801da98:	4638      	mov	r0, r7
 801da9a:	f7fc fb7d 	bl	801a198 <pbuf_clen>
 801da9e:	4430      	add	r0, r6
 801daa0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801daa2:	2e09      	cmp	r6, #9
 801daa4:	d9b4      	bls.n	801da10 <tcp_write+0x170>
      pbuf_free(p);
 801daa6:	4638      	mov	r0, r7
 801daa8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801daac:	f7fc fb60 	bl	801a170 <pbuf_free>
      goto memerr;
 801dab0:	e097      	b.n	801dbe2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	f000 80b6 	beq.w	801dc24 <tcp_write+0x384>
 801dab8:	4b65      	ldr	r3, [pc, #404]	; (801dc50 <tcp_write+0x3b0>)
 801daba:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801dabe:	4967      	ldr	r1, [pc, #412]	; (801dc5c <tcp_write+0x3bc>)
 801dac0:	4865      	ldr	r0, [pc, #404]	; (801dc58 <tcp_write+0x3b8>)
 801dac2:	f006 fc1f 	bl	8024304 <iprintf>
  queuelen = pcb->snd_queuelen;
 801dac6:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801daca:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801dace:	f1b8 0f00 	cmp.w	r8, #0
 801dad2:	f47f af24 	bne.w	801d91e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801dad6:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801dada:	2b00      	cmp	r3, #0
 801dadc:	f040 80ac 	bne.w	801dc38 <tcp_write+0x398>
  while (pos < len) {
 801dae0:	f1ba 0f00 	cmp.w	sl, #0
 801dae4:	f000 81c7 	beq.w	801de76 <tcp_write+0x5d6>
          extendlen = seglen;
 801dae8:	2400      	movs	r4, #0
 801daea:	940d      	str	r4, [sp, #52]	; 0x34
 801daec:	940c      	str	r4, [sp, #48]	; 0x30
 801daee:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801daf2:	e75b      	b.n	801d9ac <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801daf4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801daf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daf8:	459a      	cmp	sl, r3
 801dafa:	f67f af50 	bls.w	801d99e <tcp_write+0xfe>
 801dafe:	2c00      	cmp	r4, #0
 801db00:	f43f af4d 	beq.w	801d99e <tcp_write+0xfe>
 801db04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db06:	8912      	ldrh	r2, [r2, #8]
 801db08:	920d      	str	r2, [sp, #52]	; 0x34
 801db0a:	2a00      	cmp	r2, #0
 801db0c:	f000 809c 	beq.w	801dc48 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801db10:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801db14:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801db16:	42a7      	cmp	r7, r4
 801db18:	bfa8      	it	ge
 801db1a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801db1c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801db1e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801db20:	f100 8187 	bmi.w	801de32 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801db24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db26:	685a      	ldr	r2, [r3, #4]
 801db28:	4613      	mov	r3, r2
 801db2a:	6812      	ldr	r2, [r2, #0]
 801db2c:	2a00      	cmp	r2, #0
 801db2e:	d1fb      	bne.n	801db28 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801db30:	920c      	str	r2, [sp, #48]	; 0x30
 801db32:	7b1a      	ldrb	r2, [r3, #12]
 801db34:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801db38:	d106      	bne.n	801db48 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801db3a:	895a      	ldrh	r2, [r3, #10]
 801db3c:	685b      	ldr	r3, [r3, #4]
 801db3e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801db40:	9a07      	ldr	r2, [sp, #28]
 801db42:	429a      	cmp	r2, r3
 801db44:	f000 8167 	beq.w	801de16 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801db48:	2201      	movs	r2, #1
 801db4a:	4629      	mov	r1, r5
 801db4c:	2000      	movs	r0, #0
 801db4e:	f7fc f93d 	bl	8019dcc <pbuf_alloc>
 801db52:	900c      	str	r0, [sp, #48]	; 0x30
 801db54:	2800      	cmp	r0, #0
 801db56:	f000 813e 	beq.w	801ddd6 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801db5a:	9b07      	ldr	r3, [sp, #28]
 801db5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801db5e:	440b      	add	r3, r1
 801db60:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801db62:	f7fc fb19 	bl	801a198 <pbuf_clen>
 801db66:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801db68:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801db6a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801db6c:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801db6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801db72:	18ec      	adds	r4, r5, r3
 801db74:	b2a4      	uxth	r4, r4
 801db76:	e716      	b.n	801d9a6 <tcp_write+0x106>
    pos += seglen;
 801db78:	442c      	add	r4, r5
 801db7a:	9005      	str	r0, [sp, #20]
 801db7c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801db7e:	45a2      	cmp	sl, r4
 801db80:	f63f af62 	bhi.w	801da48 <tcp_write+0x1a8>
 801db84:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801db88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	f000 80db 	beq.w	801dd46 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801db90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db92:	6854      	ldr	r4, [r2, #4]
 801db94:	2c00      	cmp	r4, #0
 801db96:	f000 8090 	beq.w	801dcba <tcp_write+0x41a>
 801db9a:	469b      	mov	fp, r3
 801db9c:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801db9e:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801dba0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801dba2:	445b      	add	r3, fp
 801dba4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801dba6:	2a00      	cmp	r2, #0
 801dba8:	d079      	beq.n	801dc9e <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801dbaa:	4614      	mov	r4, r2
 801dbac:	e7f7      	b.n	801db9e <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801dbae:	4b28      	ldr	r3, [pc, #160]	; (801dc50 <tcp_write+0x3b0>)
 801dbb0:	f240 2271 	movw	r2, #625	; 0x271
 801dbb4:	492a      	ldr	r1, [pc, #168]	; (801dc60 <tcp_write+0x3c0>)
 801dbb6:	4828      	ldr	r0, [pc, #160]	; (801dc58 <tcp_write+0x3b8>)
 801dbb8:	f006 fba4 	bl	8024304 <iprintf>
 801dbbc:	e707      	b.n	801d9ce <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801dbbe:	4b24      	ldr	r3, [pc, #144]	; (801dc50 <tcp_write+0x3b0>)
 801dbc0:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dbc4:	4927      	ldr	r1, [pc, #156]	; (801dc64 <tcp_write+0x3c4>)
 801dbc6:	4824      	ldr	r0, [pc, #144]	; (801dc58 <tcp_write+0x3b8>)
 801dbc8:	f006 fb9c 	bl	8024304 <iprintf>
 801dbcc:	e735      	b.n	801da3a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801dbce:	4b20      	ldr	r3, [pc, #128]	; (801dc50 <tcp_write+0x3b0>)
 801dbd0:	f240 2266 	movw	r2, #614	; 0x266
 801dbd4:	4924      	ldr	r1, [pc, #144]	; (801dc68 <tcp_write+0x3c8>)
 801dbd6:	4820      	ldr	r0, [pc, #128]	; (801dc58 <tcp_write+0x3b8>)
 801dbd8:	f006 fb94 	bl	8024304 <iprintf>
 801dbdc:	e756      	b.n	801da8c <tcp_write+0x1ec>
 801dbde:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dbe2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801dbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbea:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801dbee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbf0:	b113      	cbz	r3, 801dbf8 <tcp_write+0x358>
    pbuf_free(concat_p);
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f7fc fabc 	bl	801a170 <pbuf_free>
  if (queue != NULL) {
 801dbf8:	f1b8 0f00 	cmp.w	r8, #0
 801dbfc:	d002      	beq.n	801dc04 <tcp_write+0x364>
    tcp_segs_free(queue);
 801dbfe:	4640      	mov	r0, r8
 801dc00:	f7fd f820 	bl	801ac44 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801dc04:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801dc08:	b13b      	cbz	r3, 801dc1a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dc0a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801dc0e:	b923      	cbnz	r3, 801dc1a <tcp_write+0x37a>
 801dc10:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	f000 808c 	beq.w	801dd32 <tcp_write+0x492>
  return ERR_MEM;
 801dc1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801dc1e:	b011      	add	sp, #68	; 0x44
 801dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801dc24:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f47f af45 	bne.w	801dab8 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801dc2e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	f43f af58 	beq.w	801dae8 <tcp_write+0x248>
 801dc38:	4b05      	ldr	r3, [pc, #20]	; (801dc50 <tcp_write+0x3b0>)
 801dc3a:	f240 224a 	movw	r2, #586	; 0x24a
 801dc3e:	490b      	ldr	r1, [pc, #44]	; (801dc6c <tcp_write+0x3cc>)
 801dc40:	4805      	ldr	r0, [pc, #20]	; (801dc58 <tcp_write+0x3b8>)
 801dc42:	f006 fb5f 	bl	8024304 <iprintf>
 801dc46:	e74b      	b.n	801dae0 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801dc48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dc4c:	930c      	str	r3, [sp, #48]	; 0x30
 801dc4e:	e6ad      	b.n	801d9ac <tcp_write+0x10c>
 801dc50:	08043260 	.word	0x08043260
 801dc54:	0804349c 	.word	0x0804349c
 801dc58:	08028ab4 	.word	0x08028ab4
 801dc5c:	08043430 	.word	0x08043430
 801dc60:	08043558 	.word	0x08043558
 801dc64:	08043568 	.word	0x08043568
 801dc68:	08043518 	.word	0x08043518
 801dc6c:	080434e8 	.word	0x080434e8
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801dc70:	4b94      	ldr	r3, [pc, #592]	; (801dec4 <tcp_write+0x624>)
 801dc72:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801dc76:	4994      	ldr	r1, [pc, #592]	; (801dec8 <tcp_write+0x628>)
 801dc78:	4894      	ldr	r0, [pc, #592]	; (801decc <tcp_write+0x62c>)
 801dc7a:	f006 fb43 	bl	8024304 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801dc7e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dc82:	930a      	str	r3, [sp, #40]	; 0x28
 801dc84:	e66a      	b.n	801d95c <tcp_write+0xbc>
 801dc86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dc88:	e735      	b.n	801daf6 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801dc8a:	4b8e      	ldr	r3, [pc, #568]	; (801dec4 <tcp_write+0x624>)
 801dc8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dc90:	498f      	ldr	r1, [pc, #572]	; (801ded0 <tcp_write+0x630>)
 801dc92:	488e      	ldr	r0, [pc, #568]	; (801decc <tcp_write+0x62c>)
 801dc94:	f006 fb36 	bl	8024304 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801dc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc9a:	891b      	ldrh	r3, [r3, #8]
 801dc9c:	e64f      	b.n	801d93e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801dc9e:	8963      	ldrh	r3, [r4, #10]
 801dca0:	465a      	mov	r2, fp
 801dca2:	6860      	ldr	r0, [r4, #4]
 801dca4:	4629      	mov	r1, r5
 801dca6:	4418      	add	r0, r3
 801dca8:	f005 fb66 	bl	8023378 <memcpy>
        p->len += oversize_used;
 801dcac:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dcae:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801dcb0:	445b      	add	r3, fp
 801dcb2:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dcb4:	2a00      	cmp	r2, #0
 801dcb6:	f47f af78 	bne.w	801dbaa <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801dcba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dcbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dcbe:	8913      	ldrh	r3, [r2, #8]
 801dcc0:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801dcc2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801dcc6:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801dcc8:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801dccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d061      	beq.n	801dd96 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801dcd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dcd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dcd6:	6860      	ldr	r0, [r4, #4]
 801dcd8:	4629      	mov	r1, r5
 801dcda:	f7fc fa7b 	bl	801a1d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dcde:	892a      	ldrh	r2, [r5, #8]
 801dce0:	8923      	ldrh	r3, [r4, #8]
 801dce2:	4413      	add	r3, r2
 801dce4:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801dce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dce8:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801dcec:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801dcf0:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801dcf4:	4453      	add	r3, sl
 801dcf6:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801dcfa:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801dcfe:	eba3 0a0a 	sub.w	sl, r3, sl
 801dd02:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801dd06:	b11e      	cbz	r6, 801dd10 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dd08:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d036      	beq.n	801dd7e <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801dd10:	b12f      	cbz	r7, 801dd1e <tcp_write+0x47e>
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	b11b      	cbz	r3, 801dd1e <tcp_write+0x47e>
 801dd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd18:	f012 0502 	ands.w	r5, r2, #2
 801dd1c:	d025      	beq.n	801dd6a <tcp_write+0x4ca>
  return ERR_OK;
 801dd1e:	2000      	movs	r0, #0
}
 801dd20:	b011      	add	sp, #68	; 0x44
 801dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801dd26:	4618      	mov	r0, r3
 801dd28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801dd2c:	f7fc fa20 	bl	801a170 <pbuf_free>
        goto memerr;
 801dd30:	e757      	b.n	801dbe2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dd32:	4b64      	ldr	r3, [pc, #400]	; (801dec4 <tcp_write+0x624>)
 801dd34:	f240 3227 	movw	r2, #807	; 0x327
 801dd38:	4966      	ldr	r1, [pc, #408]	; (801ded4 <tcp_write+0x634>)
 801dd3a:	4864      	ldr	r0, [pc, #400]	; (801decc <tcp_write+0x62c>)
 801dd3c:	f006 fae2 	bl	8024304 <iprintf>
  return ERR_MEM;
 801dd40:	f04f 30ff 	mov.w	r0, #4294967295
 801dd44:	e76b      	b.n	801dc1e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801dd46:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dd4a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801dd4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d051      	beq.n	801ddf8 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dd54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d1bb      	bne.n	801dcd2 <tcp_write+0x432>
 801dd5a:	4b5a      	ldr	r3, [pc, #360]	; (801dec4 <tcp_write+0x624>)
 801dd5c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dd60:	495d      	ldr	r1, [pc, #372]	; (801ded8 <tcp_write+0x638>)
 801dd62:	485a      	ldr	r0, [pc, #360]	; (801decc <tcp_write+0x62c>)
 801dd64:	f006 face 	bl	8024304 <iprintf>
 801dd68:	e7b3      	b.n	801dcd2 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dd6a:	2008      	movs	r0, #8
 801dd6c:	899c      	ldrh	r4, [r3, #12]
 801dd6e:	f7fa f9c3 	bl	80180f8 <lwip_htons>
 801dd72:	4602      	mov	r2, r0
 801dd74:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801dd76:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dd78:	4314      	orrs	r4, r2
 801dd7a:	819c      	strh	r4, [r3, #12]
 801dd7c:	e74f      	b.n	801dc1e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dd7e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d1c4      	bne.n	801dd10 <tcp_write+0x470>
 801dd86:	4b4f      	ldr	r3, [pc, #316]	; (801dec4 <tcp_write+0x624>)
 801dd88:	f240 3212 	movw	r2, #786	; 0x312
 801dd8c:	4951      	ldr	r1, [pc, #324]	; (801ded4 <tcp_write+0x634>)
 801dd8e:	484f      	ldr	r0, [pc, #316]	; (801decc <tcp_write+0x62c>)
 801dd90:	f006 fab8 	bl	8024304 <iprintf>
 801dd94:	e7bc      	b.n	801dd10 <tcp_write+0x470>
  } else if (extendlen > 0) {
 801dd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d0a4      	beq.n	801dce6 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd9e:	6859      	ldr	r1, [r3, #4]
 801dda0:	2900      	cmp	r1, #0
 801dda2:	d02e      	beq.n	801de02 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dda4:	680a      	ldr	r2, [r1, #0]
 801dda6:	2a00      	cmp	r2, #0
 801dda8:	d07f      	beq.n	801deaa <tcp_write+0x60a>
 801ddaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ddac:	e000      	b.n	801ddb0 <tcp_write+0x510>
 801ddae:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801ddb0:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ddb2:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801ddb4:	4423      	add	r3, r4
 801ddb6:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ddb8:	4611      	mov	r1, r2
 801ddba:	2800      	cmp	r0, #0
 801ddbc:	d1f7      	bne.n	801ddae <tcp_write+0x50e>
    p->tot_len += extendlen;
 801ddbe:	8913      	ldrh	r3, [r2, #8]
 801ddc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ddc2:	440b      	add	r3, r1
 801ddc4:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801ddc6:	8953      	ldrh	r3, [r2, #10]
 801ddc8:	440b      	add	r3, r1
 801ddca:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801ddcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ddce:	8913      	ldrh	r3, [r2, #8]
 801ddd0:	440b      	add	r3, r1
 801ddd2:	8113      	strh	r3, [r2, #8]
 801ddd4:	e787      	b.n	801dce6 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddd6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ddda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddde:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801dde2:	e70f      	b.n	801dc04 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801dde4:	4b37      	ldr	r3, [pc, #220]	; (801dec4 <tcp_write+0x624>)
 801dde6:	f240 1255 	movw	r2, #341	; 0x155
 801ddea:	493c      	ldr	r1, [pc, #240]	; (801dedc <tcp_write+0x63c>)
 801ddec:	4837      	ldr	r0, [pc, #220]	; (801decc <tcp_write+0x62c>)
 801ddee:	f006 fa89 	bl	8024304 <iprintf>
  queuelen = pcb->snd_queuelen;
 801ddf2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801ddf6:	e668      	b.n	801daca <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801ddf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddfa:	b19b      	cbz	r3, 801de24 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ddfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d1cc      	bne.n	801dd9c <tcp_write+0x4fc>
 801de02:	4b30      	ldr	r3, [pc, #192]	; (801dec4 <tcp_write+0x624>)
 801de04:	f240 22e6 	movw	r2, #742	; 0x2e6
 801de08:	4935      	ldr	r1, [pc, #212]	; (801dee0 <tcp_write+0x640>)
 801de0a:	4830      	ldr	r0, [pc, #192]	; (801decc <tcp_write+0x62c>)
 801de0c:	f006 fa7a 	bl	8024304 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801de10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de12:	6859      	ldr	r1, [r3, #4]
 801de14:	e7c6      	b.n	801dda4 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801de16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de18:	bba3      	cbnz	r3, 801de84 <tcp_write+0x5e4>
          extendlen = seglen;
 801de1a:	950d      	str	r5, [sp, #52]	; 0x34
 801de1c:	e6a7      	b.n	801db6e <tcp_write+0x2ce>
    return ERR_CONN;
 801de1e:	f06f 000a 	mvn.w	r0, #10
 801de22:	e6fc      	b.n	801dc1e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801de24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de26:	2b00      	cmp	r3, #0
 801de28:	f47f af5d 	bne.w	801dce6 <tcp_write+0x446>
    pcb->unsent = queue;
 801de2c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801de30:	e75c      	b.n	801dcec <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801de32:	e9cd 9300 	strd	r9, r3, [sp]
 801de36:	2301      	movs	r3, #1
 801de38:	4622      	mov	r2, r4
 801de3a:	4629      	mov	r1, r5
 801de3c:	2000      	movs	r0, #0
 801de3e:	9302      	str	r3, [sp, #8]
 801de40:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801de44:	f7ff fb92 	bl	801d56c <tcp_pbuf_prealloc>
 801de48:	4603      	mov	r3, r0
 801de4a:	4604      	mov	r4, r0
 801de4c:	900c      	str	r0, [sp, #48]	; 0x30
 801de4e:	2800      	cmp	r0, #0
 801de50:	d0c1      	beq.n	801ddd6 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801de52:	980a      	ldr	r0, [sp, #40]	; 0x28
 801de54:	462a      	mov	r2, r5
 801de56:	9907      	ldr	r1, [sp, #28]
 801de58:	4401      	add	r1, r0
 801de5a:	6858      	ldr	r0, [r3, #4]
 801de5c:	f005 fa8c 	bl	8023378 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801de60:	4620      	mov	r0, r4
 801de62:	e67e      	b.n	801db62 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801de64:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801de68:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801de6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801de70:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801de74:	e6d3      	b.n	801dc1e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801de76:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801de7a:	46d0      	mov	r8, sl
 801de7c:	4657      	mov	r7, sl
 801de7e:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801de82:	e7d3      	b.n	801de2c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801de84:	4b0f      	ldr	r3, [pc, #60]	; (801dec4 <tcp_write+0x624>)
 801de86:	f240 2231 	movw	r2, #561	; 0x231
 801de8a:	4916      	ldr	r1, [pc, #88]	; (801dee4 <tcp_write+0x644>)
 801de8c:	480f      	ldr	r0, [pc, #60]	; (801decc <tcp_write+0x62c>)
 801de8e:	f006 fa39 	bl	8024304 <iprintf>
          extendlen = seglen;
 801de92:	950d      	str	r5, [sp, #52]	; 0x34
 801de94:	e66b      	b.n	801db6e <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801de96:	4b0b      	ldr	r3, [pc, #44]	; (801dec4 <tcp_write+0x624>)
 801de98:	f240 12ad 	movw	r2, #429	; 0x1ad
 801de9c:	4912      	ldr	r1, [pc, #72]	; (801dee8 <tcp_write+0x648>)
 801de9e:	480b      	ldr	r0, [pc, #44]	; (801decc <tcp_write+0x62c>)
 801dea0:	f006 fa30 	bl	8024304 <iprintf>
 801dea4:	f06f 000f 	mvn.w	r0, #15
 801dea8:	e6b9      	b.n	801dc1e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801deaa:	460a      	mov	r2, r1
 801deac:	e787      	b.n	801ddbe <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801deae:	4b05      	ldr	r3, [pc, #20]	; (801dec4 <tcp_write+0x624>)
 801deb0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801deb4:	490d      	ldr	r1, [pc, #52]	; (801deec <tcp_write+0x64c>)
 801deb6:	4805      	ldr	r0, [pc, #20]	; (801decc <tcp_write+0x62c>)
 801deb8:	f006 fa24 	bl	8024304 <iprintf>
 801debc:	f06f 000f 	mvn.w	r0, #15
 801dec0:	e6ad      	b.n	801dc1e <tcp_write+0x37e>
 801dec2:	bf00      	nop
 801dec4:	08043260 	.word	0x08043260
 801dec8:	0804347c 	.word	0x0804347c
 801decc:	08028ab4 	.word	0x08028ab4
 801ded0:	08043464 	.word	0x08043464
 801ded4:	080435ec 	.word	0x080435ec
 801ded8:	0804357c 	.word	0x0804357c
 801dedc:	080433f4 	.word	0x080433f4
 801dee0:	080435b4 	.word	0x080435b4
 801dee4:	080434bc 	.word	0x080434bc
 801dee8:	080433c0 	.word	0x080433c0
 801deec:	080433a8 	.word	0x080433a8

0801def0 <tcp_split_unsent_seg>:
{
 801def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801def4:	4605      	mov	r5, r0
{
 801def6:	b083      	sub	sp, #12
 801def8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801defa:	2800      	cmp	r0, #0
 801defc:	f000 80a7 	beq.w	801e04e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801df00:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801df02:	b376      	cbz	r6, 801df62 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801df04:	2c00      	cmp	r4, #0
 801df06:	f000 80b3 	beq.w	801e070 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801df0a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801df0e:	45a1      	cmp	r9, r4
 801df10:	f240 8099 	bls.w	801e046 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801df14:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801df16:	42a3      	cmp	r3, r4
 801df18:	d328      	bcc.n	801df6c <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801df1a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801df1e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801df22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801df26:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801df28:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801df2c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801df30:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801df34:	eb08 010b 	add.w	r1, r8, fp
 801df38:	b289      	uxth	r1, r1
 801df3a:	f7fb ff47 	bl	8019dcc <pbuf_alloc>
  if (p == NULL) {
 801df3e:	4607      	mov	r7, r0
 801df40:	b178      	cbz	r0, 801df62 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801df42:	6870      	ldr	r0, [r6, #4]
 801df44:	8932      	ldrh	r2, [r6, #8]
 801df46:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801df48:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801df4a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801df4c:	4642      	mov	r2, r8
 801df4e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801df50:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801df52:	b29b      	uxth	r3, r3
 801df54:	f7fc f9b0 	bl	801a2b8 <pbuf_copy_partial>
 801df58:	4540      	cmp	r0, r8
 801df5a:	d01d      	beq.n	801df98 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801df5c:	4638      	mov	r0, r7
 801df5e:	f7fc f907 	bl	801a170 <pbuf_free>
  return ERR_MEM;
 801df62:	f04f 30ff 	mov.w	r0, #4294967295
}
 801df66:	b003      	add	sp, #12
 801df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801df6c:	4b45      	ldr	r3, [pc, #276]	; (801e084 <tcp_split_unsent_seg+0x194>)
 801df6e:	f240 325b 	movw	r2, #859	; 0x35b
 801df72:	4945      	ldr	r1, [pc, #276]	; (801e088 <tcp_split_unsent_seg+0x198>)
 801df74:	4845      	ldr	r0, [pc, #276]	; (801e08c <tcp_split_unsent_seg+0x19c>)
 801df76:	f006 f9c5 	bl	8024304 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801df7a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801df7e:	f1b9 0f00 	cmp.w	r9, #0
 801df82:	d1ca      	bne.n	801df1a <tcp_split_unsent_seg+0x2a>
 801df84:	4b3f      	ldr	r3, [pc, #252]	; (801e084 <tcp_split_unsent_seg+0x194>)
 801df86:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801df8a:	4941      	ldr	r1, [pc, #260]	; (801e090 <tcp_split_unsent_seg+0x1a0>)
 801df8c:	483f      	ldr	r0, [pc, #252]	; (801e08c <tcp_split_unsent_seg+0x19c>)
 801df8e:	f006 f9b9 	bl	8024304 <iprintf>
  remainder = useg->len - split;
 801df92:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801df96:	e7c0      	b.n	801df1a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801df98:	68f3      	ldr	r3, [r6, #12]
 801df9a:	8998      	ldrh	r0, [r3, #12]
 801df9c:	f7fa f8ac 	bl	80180f8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801dfa0:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801dfa4:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801dfa8:	d159      	bne.n	801e05e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801dfaa:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801dfae:	f018 0f01 	tst.w	r8, #1
 801dfb2:	d003      	beq.n	801dfbc <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801dfb4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801dfb8:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801dfbc:	68f3      	ldr	r3, [r6, #12]
 801dfbe:	6858      	ldr	r0, [r3, #4]
 801dfc0:	f7fa f89e 	bl	8018100 <lwip_htonl>
 801dfc4:	f8cd a000 	str.w	sl, [sp]
 801dfc8:	1823      	adds	r3, r4, r0
 801dfca:	465a      	mov	r2, fp
 801dfcc:	4639      	mov	r1, r7
 801dfce:	4628      	mov	r0, r5
 801dfd0:	f7ff fb1c 	bl	801d60c <tcp_create_segment>
  if (seg == NULL) {
 801dfd4:	4682      	mov	sl, r0
 801dfd6:	2800      	cmp	r0, #0
 801dfd8:	d0c0      	beq.n	801df5c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dfda:	6870      	ldr	r0, [r6, #4]
 801dfdc:	eba4 0409 	sub.w	r4, r4, r9
 801dfe0:	f7fc f8da 	bl	801a198 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dfe4:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dfe6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801dfea:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dfec:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dfee:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dff0:	4610      	mov	r0, r2
 801dff2:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801dff4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dff8:	b289      	uxth	r1, r1
 801dffa:	f7fb ffa1 	bl	8019f40 <pbuf_realloc>
  useg->len -= remainder;
 801dffe:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e000:	4640      	mov	r0, r8
  useg->len -= remainder;
 801e002:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e004:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801e006:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e008:	899c      	ldrh	r4, [r3, #12]
 801e00a:	f7fa f875 	bl	80180f8 <lwip_htons>
 801e00e:	68f3      	ldr	r3, [r6, #12]
 801e010:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e012:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e014:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e016:	f7fc f8bf 	bl	801a198 <pbuf_clen>
 801e01a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e01e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e020:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e024:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e028:	f7fc f8b6 	bl	801a198 <pbuf_clen>
 801e02c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e030:	4418      	add	r0, r3
  seg->next = useg->next;
 801e032:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e034:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801e038:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801e03c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801e040:	f8da 3000 	ldr.w	r3, [sl]
 801e044:	b183      	cbz	r3, 801e068 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801e046:	2000      	movs	r0, #0
}
 801e048:	b003      	add	sp, #12
 801e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e04e:	4b0d      	ldr	r3, [pc, #52]	; (801e084 <tcp_split_unsent_seg+0x194>)
 801e050:	f240 324b 	movw	r2, #843	; 0x34b
 801e054:	490f      	ldr	r1, [pc, #60]	; (801e094 <tcp_split_unsent_seg+0x1a4>)
 801e056:	480d      	ldr	r0, [pc, #52]	; (801e08c <tcp_split_unsent_seg+0x19c>)
 801e058:	f006 f954 	bl	8024304 <iprintf>
 801e05c:	e750      	b.n	801df00 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801e05e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801e062:	f04f 0b08 	mov.w	fp, #8
 801e066:	e7a2      	b.n	801dfae <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801e068:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801e06a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801e06e:	e77a      	b.n	801df66 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e070:	4b04      	ldr	r3, [pc, #16]	; (801e084 <tcp_split_unsent_seg+0x194>)
 801e072:	f240 3253 	movw	r2, #851	; 0x353
 801e076:	4908      	ldr	r1, [pc, #32]	; (801e098 <tcp_split_unsent_seg+0x1a8>)
 801e078:	4804      	ldr	r0, [pc, #16]	; (801e08c <tcp_split_unsent_seg+0x19c>)
 801e07a:	f006 f943 	bl	8024304 <iprintf>
    return ERR_VAL;
 801e07e:	f06f 0005 	mvn.w	r0, #5
 801e082:	e770      	b.n	801df66 <tcp_split_unsent_seg+0x76>
 801e084:	08043260 	.word	0x08043260
 801e088:	08043654 	.word	0x08043654
 801e08c:	08028ab4 	.word	0x08028ab4
 801e090:	08043664 	.word	0x08043664
 801e094:	0804360c 	.word	0x0804360c
 801e098:	08043630 	.word	0x08043630

0801e09c <tcp_enqueue_flags>:
{
 801e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e0a0:	f011 0703 	ands.w	r7, r1, #3
{
 801e0a4:	b082      	sub	sp, #8
 801e0a6:	460d      	mov	r5, r1
 801e0a8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e0aa:	d05e      	beq.n	801e16a <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e0ac:	2c00      	cmp	r4, #0
 801e0ae:	d065      	beq.n	801e17c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801e0b0:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e0b4:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801e0b8:	d049      	beq.n	801e14e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e0ba:	2104      	movs	r1, #4
 801e0bc:	2036      	movs	r0, #54	; 0x36
 801e0be:	f7fb fe85 	bl	8019dcc <pbuf_alloc>
 801e0c2:	4606      	mov	r6, r0
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	d049      	beq.n	801e15c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e0c8:	8943      	ldrh	r3, [r0, #10]
 801e0ca:	2b03      	cmp	r3, #3
 801e0cc:	d872      	bhi.n	801e1b4 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801e0ce:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e0d2:	4b40      	ldr	r3, [pc, #256]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e0d4:	f240 4239 	movw	r2, #1081	; 0x439
 801e0d8:	493f      	ldr	r1, [pc, #252]	; (801e1d8 <tcp_enqueue_flags+0x13c>)
 801e0da:	4840      	ldr	r0, [pc, #256]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e0dc:	f006 f912 	bl	8024304 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e0e0:	4631      	mov	r1, r6
 801e0e2:	f8cd 8000 	str.w	r8, [sp]
 801e0e6:	462a      	mov	r2, r5
 801e0e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	f7ff fa8e 	bl	801d60c <tcp_create_segment>
 801e0f0:	4606      	mov	r6, r0
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	d032      	beq.n	801e15c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e0f6:	68c3      	ldr	r3, [r0, #12]
 801e0f8:	079a      	lsls	r2, r3, #30
 801e0fa:	d153      	bne.n	801e1a4 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e0fc:	8933      	ldrh	r3, [r6, #8]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d144      	bne.n	801e18c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801e102:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e104:	2b00      	cmp	r3, #0
 801e106:	d04b      	beq.n	801e1a0 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e108:	461a      	mov	r2, r3
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d1fb      	bne.n	801e108 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801e110:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801e112:	2300      	movs	r3, #0
 801e114:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e118:	b117      	cbz	r7, 801e120 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801e11a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801e11c:	3301      	adds	r3, #1
 801e11e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801e120:	07eb      	lsls	r3, r5, #31
 801e122:	d503      	bpl.n	801e12c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801e124:	8b63      	ldrh	r3, [r4, #26]
 801e126:	f043 0320 	orr.w	r3, r3, #32
 801e12a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e12c:	6870      	ldr	r0, [r6, #4]
 801e12e:	f7fc f833 	bl	801a198 <pbuf_clen>
 801e132:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801e136:	4418      	add	r0, r3
 801e138:	b280      	uxth	r0, r0
 801e13a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801e13e:	b118      	cbz	r0, 801e148 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e140:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801e142:	2800      	cmp	r0, #0
 801e144:	d039      	beq.n	801e1ba <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801e146:	2000      	movs	r0, #0
}
 801e148:	b002      	add	sp, #8
 801e14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e14e:	4641      	mov	r1, r8
 801e150:	2036      	movs	r0, #54	; 0x36
 801e152:	f7fb fe3b 	bl	8019dcc <pbuf_alloc>
 801e156:	4606      	mov	r6, r0
 801e158:	2800      	cmp	r0, #0
 801e15a:	d1c1      	bne.n	801e0e0 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e15c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801e15e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e166:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801e168:	e7ee      	b.n	801e148 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e16a:	4b1a      	ldr	r3, [pc, #104]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e16c:	f240 4211 	movw	r2, #1041	; 0x411
 801e170:	491b      	ldr	r1, [pc, #108]	; (801e1e0 <tcp_enqueue_flags+0x144>)
 801e172:	481a      	ldr	r0, [pc, #104]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e174:	f006 f8c6 	bl	8024304 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e178:	2c00      	cmp	r4, #0
 801e17a:	d199      	bne.n	801e0b0 <tcp_enqueue_flags+0x14>
 801e17c:	4b15      	ldr	r3, [pc, #84]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e17e:	f240 4213 	movw	r2, #1043	; 0x413
 801e182:	4918      	ldr	r1, [pc, #96]	; (801e1e4 <tcp_enqueue_flags+0x148>)
 801e184:	4815      	ldr	r0, [pc, #84]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e186:	f006 f8bd 	bl	8024304 <iprintf>
 801e18a:	e791      	b.n	801e0b0 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e18c:	4b11      	ldr	r3, [pc, #68]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e18e:	f240 4243 	movw	r2, #1091	; 0x443
 801e192:	4915      	ldr	r1, [pc, #84]	; (801e1e8 <tcp_enqueue_flags+0x14c>)
 801e194:	4811      	ldr	r0, [pc, #68]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e196:	f006 f8b5 	bl	8024304 <iprintf>
  if (pcb->unsent == NULL) {
 801e19a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d1b3      	bne.n	801e108 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801e1a0:	66e6      	str	r6, [r4, #108]	; 0x6c
 801e1a2:	e7b6      	b.n	801e112 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e1a4:	4b0b      	ldr	r3, [pc, #44]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e1a6:	f240 4242 	movw	r2, #1090	; 0x442
 801e1aa:	4910      	ldr	r1, [pc, #64]	; (801e1ec <tcp_enqueue_flags+0x150>)
 801e1ac:	480b      	ldr	r0, [pc, #44]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e1ae:	f006 f8a9 	bl	8024304 <iprintf>
 801e1b2:	e7a3      	b.n	801e0fc <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801e1b4:	f04f 0801 	mov.w	r8, #1
 801e1b8:	e792      	b.n	801e0e0 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e1ba:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801e1bc:	2c00      	cmp	r4, #0
 801e1be:	d1c3      	bne.n	801e148 <tcp_enqueue_flags+0xac>
 801e1c0:	4b04      	ldr	r3, [pc, #16]	; (801e1d4 <tcp_enqueue_flags+0x138>)
 801e1c2:	f240 4265 	movw	r2, #1125	; 0x465
 801e1c6:	490a      	ldr	r1, [pc, #40]	; (801e1f0 <tcp_enqueue_flags+0x154>)
 801e1c8:	4804      	ldr	r0, [pc, #16]	; (801e1dc <tcp_enqueue_flags+0x140>)
 801e1ca:	f006 f89b 	bl	8024304 <iprintf>
  return ERR_OK;
 801e1ce:	4620      	mov	r0, r4
 801e1d0:	e7ba      	b.n	801e148 <tcp_enqueue_flags+0xac>
 801e1d2:	bf00      	nop
 801e1d4:	08043260 	.word	0x08043260
 801e1d8:	080436ec 	.word	0x080436ec
 801e1dc:	08028ab4 	.word	0x08028ab4
 801e1e0:	08043674 	.word	0x08043674
 801e1e4:	080436cc 	.word	0x080436cc
 801e1e8:	08043740 	.word	0x08043740
 801e1ec:	08043728 	.word	0x08043728
 801e1f0:	0804376c 	.word	0x0804376c

0801e1f4 <tcp_send_fin>:
{
 801e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e1f6:	4606      	mov	r6, r0
 801e1f8:	b188      	cbz	r0, 801e21e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801e1fa:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801e1fc:	b14c      	cbz	r4, 801e212 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e1fe:	4625      	mov	r5, r4
 801e200:	6824      	ldr	r4, [r4, #0]
 801e202:	2c00      	cmp	r4, #0
 801e204:	d1fb      	bne.n	801e1fe <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e206:	68eb      	ldr	r3, [r5, #12]
 801e208:	8998      	ldrh	r0, [r3, #12]
 801e20a:	f7f9 ff75 	bl	80180f8 <lwip_htons>
 801e20e:	0743      	lsls	r3, r0, #29
 801e210:	d00d      	beq.n	801e22e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e212:	4630      	mov	r0, r6
 801e214:	2101      	movs	r1, #1
}
 801e216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e21a:	f7ff bf3f 	b.w	801e09c <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e21e:	4b0b      	ldr	r3, [pc, #44]	; (801e24c <tcp_send_fin+0x58>)
 801e220:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e224:	490a      	ldr	r1, [pc, #40]	; (801e250 <tcp_send_fin+0x5c>)
 801e226:	480b      	ldr	r0, [pc, #44]	; (801e254 <tcp_send_fin+0x60>)
 801e228:	f006 f86c 	bl	8024304 <iprintf>
 801e22c:	e7e5      	b.n	801e1fa <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e22e:	68eb      	ldr	r3, [r5, #12]
 801e230:	2001      	movs	r0, #1
 801e232:	899f      	ldrh	r7, [r3, #12]
 801e234:	f7f9 ff60 	bl	80180f8 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801e238:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e23a:	4338      	orrs	r0, r7
 801e23c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e23e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e242:	8190      	strh	r0, [r2, #12]
}
 801e244:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801e246:	8373      	strh	r3, [r6, #26]
}
 801e248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e24a:	bf00      	nop
 801e24c:	08043260 	.word	0x08043260
 801e250:	08043794 	.word	0x08043794
 801e254:	08028ab4 	.word	0x08028ab4

0801e258 <tcp_rexmit_rto_prepare>:
{
 801e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e25a:	4605      	mov	r5, r0
 801e25c:	2800      	cmp	r0, #0
 801e25e:	d032      	beq.n	801e2c6 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801e260:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801e262:	b132      	cbz	r2, 801e272 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e264:	6813      	ldr	r3, [r2, #0]
 801e266:	4614      	mov	r4, r2
 801e268:	b15b      	cbz	r3, 801e282 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801e26a:	6863      	ldr	r3, [r4, #4]
 801e26c:	7b9b      	ldrb	r3, [r3, #14]
 801e26e:	2b01      	cmp	r3, #1
 801e270:	d003      	beq.n	801e27a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801e272:	f06f 0305 	mvn.w	r3, #5
}
 801e276:	4618      	mov	r0, r3
 801e278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e27a:	6824      	ldr	r4, [r4, #0]
 801e27c:	6823      	ldr	r3, [r4, #0]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d1f3      	bne.n	801e26a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801e282:	6863      	ldr	r3, [r4, #4]
 801e284:	7b9b      	ldrb	r3, [r3, #14]
 801e286:	2b01      	cmp	r3, #1
 801e288:	d1f3      	bne.n	801e272 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801e28a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801e28c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801e28e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801e290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801e294:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801e296:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e298:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801e29a:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e29e:	6858      	ldr	r0, [r3, #4]
 801e2a0:	f7f9 ff2e 	bl	8018100 <lwip_htonl>
 801e2a4:	68e3      	ldr	r3, [r4, #12]
 801e2a6:	4606      	mov	r6, r0
 801e2a8:	8924      	ldrh	r4, [r4, #8]
 801e2aa:	8998      	ldrh	r0, [r3, #12]
 801e2ac:	f7f9 ff24 	bl	80180f8 <lwip_htons>
 801e2b0:	f010 0003 	ands.w	r0, r0, #3
 801e2b4:	4426      	add	r6, r4
  return ERR_OK;
 801e2b6:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e2b8:	bf18      	it	ne
 801e2ba:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801e2bc:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e2be:	4430      	add	r0, r6
 801e2c0:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e2c6:	4b04      	ldr	r3, [pc, #16]	; (801e2d8 <tcp_rexmit_rto_prepare+0x80>)
 801e2c8:	f240 6263 	movw	r2, #1635	; 0x663
 801e2cc:	4903      	ldr	r1, [pc, #12]	; (801e2dc <tcp_rexmit_rto_prepare+0x84>)
 801e2ce:	4804      	ldr	r0, [pc, #16]	; (801e2e0 <tcp_rexmit_rto_prepare+0x88>)
 801e2d0:	f006 f818 	bl	8024304 <iprintf>
 801e2d4:	e7c4      	b.n	801e260 <tcp_rexmit_rto_prepare+0x8>
 801e2d6:	bf00      	nop
 801e2d8:	08043260 	.word	0x08043260
 801e2dc:	080437b0 	.word	0x080437b0
 801e2e0:	08028ab4 	.word	0x08028ab4

0801e2e4 <tcp_rexmit>:
{
 801e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e2e6:	4607      	mov	r7, r0
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	d031      	beq.n	801e350 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801e2ec:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801e2ee:	b34e      	cbz	r6, 801e344 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801e2f0:	6873      	ldr	r3, [r6, #4]
 801e2f2:	7b9b      	ldrb	r3, [r3, #14]
 801e2f4:	2b01      	cmp	r3, #1
 801e2f6:	d125      	bne.n	801e344 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801e2f8:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801e2fa:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801e2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801e300:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801e302:	b91b      	cbnz	r3, 801e30c <tcp_rexmit+0x28>
 801e304:	e00f      	b.n	801e326 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801e306:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801e308:	682b      	ldr	r3, [r5, #0]
 801e30a:	b163      	cbz	r3, 801e326 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e30c:	68db      	ldr	r3, [r3, #12]
 801e30e:	6858      	ldr	r0, [r3, #4]
 801e310:	f7f9 fef6 	bl	8018100 <lwip_htonl>
 801e314:	68f3      	ldr	r3, [r6, #12]
 801e316:	4604      	mov	r4, r0
 801e318:	6858      	ldr	r0, [r3, #4]
 801e31a:	f7f9 fef1 	bl	8018100 <lwip_htonl>
 801e31e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801e320:	2c00      	cmp	r4, #0
 801e322:	dbf0      	blt.n	801e306 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801e324:	682b      	ldr	r3, [r5, #0]
 801e326:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801e328:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801e32a:	6833      	ldr	r3, [r6, #0]
 801e32c:	b16b      	cbz	r3, 801e34a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801e32e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801e332:	2bff      	cmp	r3, #255	; 0xff
 801e334:	d002      	beq.n	801e33c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801e336:	3301      	adds	r3, #1
 801e338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801e33c:	2300      	movs	r3, #0
  return ERR_OK;
 801e33e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801e340:	637b      	str	r3, [r7, #52]	; 0x34
}
 801e342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801e344:	f06f 0005 	mvn.w	r0, #5
}
 801e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801e34a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801e34e:	e7ee      	b.n	801e32e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e350:	4b03      	ldr	r3, [pc, #12]	; (801e360 <tcp_rexmit+0x7c>)
 801e352:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e356:	4903      	ldr	r1, [pc, #12]	; (801e364 <tcp_rexmit+0x80>)
 801e358:	4803      	ldr	r0, [pc, #12]	; (801e368 <tcp_rexmit+0x84>)
 801e35a:	f005 ffd3 	bl	8024304 <iprintf>
 801e35e:	e7c5      	b.n	801e2ec <tcp_rexmit+0x8>
 801e360:	08043260 	.word	0x08043260
 801e364:	080437d4 	.word	0x080437d4
 801e368:	08028ab4 	.word	0x08028ab4

0801e36c <tcp_rexmit_fast>:
{
 801e36c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e36e:	4604      	mov	r4, r0
 801e370:	b340      	cbz	r0, 801e3c4 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e374:	b113      	cbz	r3, 801e37c <tcp_rexmit_fast+0x10>
 801e376:	8b63      	ldrh	r3, [r4, #26]
 801e378:	075b      	lsls	r3, r3, #29
 801e37a:	d500      	bpl.n	801e37e <tcp_rexmit_fast+0x12>
}
 801e37c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e37e:	4620      	mov	r0, r4
 801e380:	f7ff ffb0 	bl	801e2e4 <tcp_rexmit>
 801e384:	2800      	cmp	r0, #0
 801e386:	d1f9      	bne.n	801e37c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e388:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801e38c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e390:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e392:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e394:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e398:	bf28      	it	cs
 801e39a:	4619      	movcs	r1, r3
 801e39c:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e39e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e3a2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e3a6:	d902      	bls.n	801e3ae <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801e3a8:	b283      	uxth	r3, r0
 801e3aa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801e3ae:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e3b0:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801e3b2:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e3b6:	4413      	add	r3, r2
      pcb->rtime = 0;
 801e3b8:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e3ba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e3be:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801e3c0:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801e3c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e3c4:	4b03      	ldr	r3, [pc, #12]	; (801e3d4 <tcp_rexmit_fast+0x68>)
 801e3c6:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e3ca:	4903      	ldr	r1, [pc, #12]	; (801e3d8 <tcp_rexmit_fast+0x6c>)
 801e3cc:	4803      	ldr	r0, [pc, #12]	; (801e3dc <tcp_rexmit_fast+0x70>)
 801e3ce:	f005 ff99 	bl	8024304 <iprintf>
 801e3d2:	e7ce      	b.n	801e372 <tcp_rexmit_fast+0x6>
 801e3d4:	08043260 	.word	0x08043260
 801e3d8:	080437ec 	.word	0x080437ec
 801e3dc:	08028ab4 	.word	0x08028ab4

0801e3e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3e4:	b084      	sub	sp, #16
 801e3e6:	4607      	mov	r7, r0
 801e3e8:	460e      	mov	r6, r1
 801e3ea:	4615      	mov	r5, r2
 801e3ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e3f0:	461c      	mov	r4, r3
{
 801e3f2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801e3f6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e3fa:	b1fb      	cbz	r3, 801e43c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e3fc:	f1b8 0f00 	cmp.w	r8, #0
 801e400:	d026      	beq.n	801e450 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e402:	4630      	mov	r0, r6
 801e404:	f7f9 fe7c 	bl	8018100 <lwip_htonl>
 801e408:	2114      	movs	r1, #20
 801e40a:	4602      	mov	r2, r0
 801e40c:	4628      	mov	r0, r5
 801e40e:	f246 0508 	movw	r5, #24584	; 0x6008
 801e412:	464b      	mov	r3, r9
 801e414:	f8cd a000 	str.w	sl, [sp]
 801e418:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801e41c:	2100      	movs	r1, #0
 801e41e:	f7ff f971 	bl	801d704 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e422:	4601      	mov	r1, r0
 801e424:	b138      	cbz	r0, 801e436 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e426:	4643      	mov	r3, r8
 801e428:	4622      	mov	r2, r4
 801e42a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e42c:	b004      	add	sp, #16
 801e42e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e432:	f7ff b9d5 	b.w	801d7e0 <tcp_output_control_segment>
}
 801e436:	b004      	add	sp, #16
 801e438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e43c:	4b08      	ldr	r3, [pc, #32]	; (801e460 <tcp_rst+0x80>)
 801e43e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e442:	4908      	ldr	r1, [pc, #32]	; (801e464 <tcp_rst+0x84>)
 801e444:	4808      	ldr	r0, [pc, #32]	; (801e468 <tcp_rst+0x88>)
 801e446:	f005 ff5d 	bl	8024304 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e44a:	f1b8 0f00 	cmp.w	r8, #0
 801e44e:	d1d8      	bne.n	801e402 <tcp_rst+0x22>
 801e450:	4b03      	ldr	r3, [pc, #12]	; (801e460 <tcp_rst+0x80>)
 801e452:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e456:	4905      	ldr	r1, [pc, #20]	; (801e46c <tcp_rst+0x8c>)
 801e458:	4803      	ldr	r0, [pc, #12]	; (801e468 <tcp_rst+0x88>)
 801e45a:	f005 ff53 	bl	8024304 <iprintf>
 801e45e:	e7d0      	b.n	801e402 <tcp_rst+0x22>
 801e460:	08043260 	.word	0x08043260
 801e464:	0804380c 	.word	0x0804380c
 801e468:	08028ab4 	.word	0x08028ab4
 801e46c:	08043828 	.word	0x08043828

0801e470 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e470:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e472:	4604      	mov	r4, r0
 801e474:	b1c0      	cbz	r0, 801e4a8 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e476:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801e478:	f7f9 fe42 	bl	8018100 <lwip_htonl>
 801e47c:	2100      	movs	r1, #0
 801e47e:	4602      	mov	r2, r0
 801e480:	4620      	mov	r0, r4
 801e482:	f7ff f985 	bl	801d790 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e486:	4601      	mov	r1, r0
 801e488:	b1b0      	cbz	r0, 801e4b8 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e48a:	1d23      	adds	r3, r4, #4
 801e48c:	4622      	mov	r2, r4
 801e48e:	4620      	mov	r0, r4
 801e490:	f7ff f9a6 	bl	801d7e0 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e494:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801e496:	b118      	cbz	r0, 801e4a0 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e498:	f043 0303 	orr.w	r3, r3, #3
 801e49c:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801e49e:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4a0:	f023 0303 	bic.w	r3, r3, #3
 801e4a4:	8363      	strh	r3, [r4, #26]
}
 801e4a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e4a8:	4b07      	ldr	r3, [pc, #28]	; (801e4c8 <tcp_send_empty_ack+0x58>)
 801e4aa:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e4ae:	4907      	ldr	r1, [pc, #28]	; (801e4cc <tcp_send_empty_ack+0x5c>)
 801e4b0:	4807      	ldr	r0, [pc, #28]	; (801e4d0 <tcp_send_empty_ack+0x60>)
 801e4b2:	f005 ff27 	bl	8024304 <iprintf>
 801e4b6:	e7de      	b.n	801e476 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4b8:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801e4ba:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e4be:	f043 0303 	orr.w	r3, r3, #3
 801e4c2:	8363      	strh	r3, [r4, #26]
}
 801e4c4:	bd10      	pop	{r4, pc}
 801e4c6:	bf00      	nop
 801e4c8:	08043260 	.word	0x08043260
 801e4cc:	08043844 	.word	0x08043844
 801e4d0:	08028ab4 	.word	0x08028ab4

0801e4d4 <tcp_output>:
{
 801e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e4d8:	4604      	mov	r4, r0
{
 801e4da:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	f000 81bc 	beq.w	801e85a <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e4e2:	7d23      	ldrb	r3, [r4, #20]
 801e4e4:	2b01      	cmp	r3, #1
 801e4e6:	f000 8173 	beq.w	801e7d0 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801e4ea:	4bb3      	ldr	r3, [pc, #716]	; (801e7b8 <tcp_output+0x2e4>)
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	42a3      	cmp	r3, r4
 801e4f0:	f000 817a 	beq.w	801e7e8 <tcp_output+0x314>
  seg = pcb->unsent;
 801e4f4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801e4f6:	b345      	cbz	r5, 801e54a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e4f8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e4fa:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e4fe:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801e502:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e506:	2800      	cmp	r0, #0
 801e508:	f040 81af 	bne.w	801e86a <tcp_output+0x396>
    return ip_route(src, dst);
 801e50c:	4648      	mov	r0, r9
 801e50e:	f003 fa2b 	bl	8021968 <ip4_route>
 801e512:	4682      	mov	sl, r0
  if (netif == NULL) {
 801e514:	f1ba 0f00 	cmp.w	sl, #0
 801e518:	f000 81b9 	beq.w	801e88e <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801e51c:	6823      	ldr	r3, [r4, #0]
 801e51e:	b913      	cbnz	r3, 801e526 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e520:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e524:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e526:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e528:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e52a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e52c:	bf28      	it	cs
 801e52e:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e530:	f7f9 fde6 	bl	8018100 <lwip_htonl>
 801e534:	892b      	ldrh	r3, [r5, #8]
 801e536:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801e538:	1a9b      	subs	r3, r3, r2
 801e53a:	4418      	add	r0, r3
 801e53c:	42b8      	cmp	r0, r7
 801e53e:	d90f      	bls.n	801e560 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e540:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801e544:	42bb      	cmp	r3, r7
 801e546:	f000 8159 	beq.w	801e7fc <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801e54a:	8b62      	ldrh	r2, [r4, #26]
 801e54c:	0791      	lsls	r1, r2, #30
 801e54e:	f100 814f 	bmi.w	801e7f0 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801e556:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e558:	8362      	strh	r2, [r4, #26]
}
 801e55a:	b005      	add	sp, #20
 801e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801e560:	2300      	movs	r3, #0
 801e562:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801e566:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801e568:	2b00      	cmp	r3, #0
 801e56a:	f000 8157 	beq.w	801e81c <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801e56e:	4698      	mov	r8, r3
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	2b00      	cmp	r3, #0
 801e574:	d1fb      	bne.n	801e56e <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801e576:	464e      	mov	r6, r9
 801e578:	e0b7      	b.n	801e6ea <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e57a:	68eb      	ldr	r3, [r5, #12]
 801e57c:	2010      	movs	r0, #16
 801e57e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801e582:	f7f9 fdb9 	bl	80180f8 <lwip_htons>
 801e586:	ea49 0000 	orr.w	r0, r9, r0
 801e58a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e58e:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801e592:	686b      	ldr	r3, [r5, #4]
 801e594:	7b9b      	ldrb	r3, [r3, #14]
 801e596:	2b01      	cmp	r3, #1
 801e598:	d160      	bne.n	801e65c <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e59a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e59c:	f7f9 fdb0 	bl	8018100 <lwip_htonl>
 801e5a0:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e5a4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801e5a6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e5aa:	f7f9 fda5 	bl	80180f8 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e5ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e5b2:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e5b6:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e5b8:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e5bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e5be:	7aab      	ldrb	r3, [r5, #10]
 801e5c0:	07db      	lsls	r3, r3, #31
 801e5c2:	f100 80d0 	bmi.w	801e766 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e5c6:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801e5ca:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	da01      	bge.n	801e5d6 <tcp_output+0x102>
    pcb->rtime = 0;
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801e5d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	f000 80b9 	beq.w	801e750 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5de:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801e5e0:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5e4:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801e5e6:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5e8:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801e5ec:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801e5ee:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e5f2:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801e5f4:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801e5f6:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801e5f8:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801e5fa:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801e5fc:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801e5fe:	f889 c010 	strb.w	ip, [r9, #16]
 801e602:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e606:	7aab      	ldrb	r3, [r5, #10]
 801e608:	009b      	lsls	r3, r3, #2
 801e60a:	f003 0304 	and.w	r3, r3, #4
 801e60e:	3314      	adds	r3, #20
 801e610:	444b      	add	r3, r9
 801e612:	459b      	cmp	fp, r3
 801e614:	d00a      	beq.n	801e62c <tcp_output+0x158>
 801e616:	f240 621c 	movw	r2, #1564	; 0x61c
 801e61a:	4b68      	ldr	r3, [pc, #416]	; (801e7bc <tcp_output+0x2e8>)
 801e61c:	4968      	ldr	r1, [pc, #416]	; (801e7c0 <tcp_output+0x2ec>)
 801e61e:	4869      	ldr	r0, [pc, #420]	; (801e7c4 <tcp_output+0x2f0>)
 801e620:	f005 fe70 	bl	8024304 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801e624:	6868      	ldr	r0, [r5, #4]
 801e626:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e62a:	8902      	ldrh	r2, [r0, #8]
 801e62c:	4623      	mov	r3, r4
 801e62e:	2106      	movs	r1, #6
 801e630:	9600      	str	r6, [sp, #0]
 801e632:	f7fa faf5 	bl	8018c20 <ip_chksum_pseudo>
 801e636:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e63a:	6868      	ldr	r0, [r5, #4]
 801e63c:	4632      	mov	r2, r6
 801e63e:	f8cd a008 	str.w	sl, [sp, #8]
 801e642:	4621      	mov	r1, r4
 801e644:	7aa3      	ldrb	r3, [r4, #10]
 801e646:	9300      	str	r3, [sp, #0]
 801e648:	2306      	movs	r3, #6
 801e64a:	9301      	str	r3, [sp, #4]
 801e64c:	7ae3      	ldrb	r3, [r4, #11]
 801e64e:	f003 fb55 	bl	8021cfc <ip4_output_if>
    if (err != ERR_OK) {
 801e652:	2800      	cmp	r0, #0
 801e654:	f040 8116 	bne.w	801e884 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e658:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801e65c:	682b      	ldr	r3, [r5, #0]
 801e65e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e660:	7d23      	ldrb	r3, [r4, #20]
 801e662:	2b02      	cmp	r3, #2
 801e664:	d003      	beq.n	801e66e <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e666:	8b63      	ldrh	r3, [r4, #26]
 801e668:	f023 0303 	bic.w	r3, r3, #3
 801e66c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e66e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e672:	f7f9 fd45 	bl	8018100 <lwip_htonl>
 801e676:	68eb      	ldr	r3, [r5, #12]
 801e678:	4681      	mov	r9, r0
 801e67a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801e67e:	8998      	ldrh	r0, [r3, #12]
 801e680:	f7f9 fd3a 	bl	80180f8 <lwip_htons>
 801e684:	f010 0003 	ands.w	r0, r0, #3
 801e688:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e68a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e68c:	bf18      	it	ne
 801e68e:	2001      	movne	r0, #1
 801e690:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801e692:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e696:	1a1b      	subs	r3, r3, r0
 801e698:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801e69a:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801e69c:	bfb8      	it	lt
 801e69e:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801e6a0:	8998      	ldrh	r0, [r3, #12]
 801e6a2:	f7f9 fd29 	bl	80180f8 <lwip_htons>
 801e6a6:	f010 0003 	ands.w	r0, r0, #3
 801e6aa:	bf18      	it	ne
 801e6ac:	2001      	movne	r0, #1
 801e6ae:	eb10 0f09 	cmn.w	r0, r9
 801e6b2:	d046      	beq.n	801e742 <tcp_output+0x26e>
      seg->next = NULL;
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801e6b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d045      	beq.n	801e74a <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e6be:	68eb      	ldr	r3, [r5, #12]
 801e6c0:	6858      	ldr	r0, [r3, #4]
 801e6c2:	f7f9 fd1d 	bl	8018100 <lwip_htonl>
 801e6c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e6ca:	4681      	mov	r9, r0
 801e6cc:	6858      	ldr	r0, [r3, #4]
 801e6ce:	f7f9 fd17 	bl	8018100 <lwip_htonl>
 801e6d2:	eba9 0000 	sub.w	r0, r9, r0
 801e6d6:	2800      	cmp	r0, #0
 801e6d8:	f2c0 80a2 	blt.w	801e820 <tcp_output+0x34c>
          useg->next = seg;
 801e6dc:	f8c8 5000 	str.w	r5, [r8]
 801e6e0:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801e6e2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801e6e4:	2d00      	cmp	r5, #0
 801e6e6:	f000 80c4 	beq.w	801e872 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e6ea:	68eb      	ldr	r3, [r5, #12]
 801e6ec:	6858      	ldr	r0, [r3, #4]
 801e6ee:	f7f9 fd07 	bl	8018100 <lwip_htonl>
 801e6f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e6f4:	1ac0      	subs	r0, r0, r3
 801e6f6:	892b      	ldrh	r3, [r5, #8]
 801e6f8:	4418      	add	r0, r3
  while (seg != NULL &&
 801e6fa:	42b8      	cmp	r0, r7
 801e6fc:	f200 80bb 	bhi.w	801e876 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801e700:	68eb      	ldr	r3, [r5, #12]
 801e702:	8998      	ldrh	r0, [r3, #12]
 801e704:	f7f9 fcf8 	bl	80180f8 <lwip_htons>
 801e708:	0742      	lsls	r2, r0, #29
 801e70a:	d412      	bmi.n	801e732 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e70c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e70e:	b14b      	cbz	r3, 801e724 <tcp_output+0x250>
 801e710:	8b63      	ldrh	r3, [r4, #26]
 801e712:	f013 0f44 	tst.w	r3, #68	; 0x44
 801e716:	461a      	mov	r2, r3
 801e718:	d104      	bne.n	801e724 <tcp_output+0x250>
 801e71a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801e71c:	2900      	cmp	r1, #0
 801e71e:	d038      	beq.n	801e792 <tcp_output+0x2be>
 801e720:	6808      	ldr	r0, [r1, #0]
 801e722:	b388      	cbz	r0, 801e788 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801e724:	7d23      	ldrb	r3, [r4, #20]
 801e726:	2b02      	cmp	r3, #2
 801e728:	f47f af27 	bne.w	801e57a <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e72c:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e730:	e72f      	b.n	801e592 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801e732:	4b22      	ldr	r3, [pc, #136]	; (801e7bc <tcp_output+0x2e8>)
 801e734:	f240 5236 	movw	r2, #1334	; 0x536
 801e738:	4923      	ldr	r1, [pc, #140]	; (801e7c8 <tcp_output+0x2f4>)
 801e73a:	4822      	ldr	r0, [pc, #136]	; (801e7c4 <tcp_output+0x2f0>)
 801e73c:	f005 fde2 	bl	8024304 <iprintf>
 801e740:	e7e4      	b.n	801e70c <tcp_output+0x238>
      tcp_seg_free(seg);
 801e742:	4628      	mov	r0, r5
 801e744:	f7fc fa90 	bl	801ac68 <tcp_seg_free>
 801e748:	e7cb      	b.n	801e6e2 <tcp_output+0x20e>
        pcb->unacked = seg;
 801e74a:	46a8      	mov	r8, r5
 801e74c:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801e74e:	e7c8      	b.n	801e6e2 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801e750:	4b1e      	ldr	r3, [pc, #120]	; (801e7cc <tcp_output+0x2f8>)
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e756:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801e75a:	f7f9 fcd1 	bl	8018100 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e75e:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e762:	63a0      	str	r0, [r4, #56]	; 0x38
 801e764:	e73b      	b.n	801e5de <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e766:	4632      	mov	r2, r6
 801e768:	4651      	mov	r1, sl
 801e76a:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801e76e:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e772:	f7fd fa75 	bl	801bc60 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e776:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801e77a:	f7f9 fcc1 	bl	8018100 <lwip_htonl>
 801e77e:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e782:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801e786:	e720      	b.n	801e5ca <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e788:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e78c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801e78e:	4584      	cmp	ip, r0
 801e790:	d2c8      	bcs.n	801e724 <tcp_output+0x250>
 801e792:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801e796:	2800      	cmp	r0, #0
 801e798:	d0c4      	beq.n	801e724 <tcp_output+0x250>
 801e79a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801e79e:	2808      	cmp	r0, #8
 801e7a0:	d8c0      	bhi.n	801e724 <tcp_output+0x250>
 801e7a2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801e7a6:	d1bd      	bne.n	801e724 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801e7a8:	2900      	cmp	r1, #0
 801e7aa:	f47f aed2 	bne.w	801e552 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801e7ae:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e7b0:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801e7b2:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801e7b6:	e6cc      	b.n	801e552 <tcp_output+0x7e>
 801e7b8:	2002dc10 	.word	0x2002dc10
 801e7bc:	08043260 	.word	0x08043260
 801e7c0:	080438bc 	.word	0x080438bc
 801e7c4:	08028ab4 	.word	0x08028ab4
 801e7c8:	080438a4 	.word	0x080438a4
 801e7cc:	2002dbdc 	.word	0x2002dbdc
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e7d0:	4b30      	ldr	r3, [pc, #192]	; (801e894 <tcp_output+0x3c0>)
 801e7d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e7d6:	4930      	ldr	r1, [pc, #192]	; (801e898 <tcp_output+0x3c4>)
 801e7d8:	4830      	ldr	r0, [pc, #192]	; (801e89c <tcp_output+0x3c8>)
 801e7da:	f005 fd93 	bl	8024304 <iprintf>
  if (tcp_input_pcb == pcb) {
 801e7de:	4b30      	ldr	r3, [pc, #192]	; (801e8a0 <tcp_output+0x3cc>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	42a3      	cmp	r3, r4
 801e7e4:	f47f ae86 	bne.w	801e4f4 <tcp_output+0x20>
    return ERR_OK;
 801e7e8:	2000      	movs	r0, #0
}
 801e7ea:	b005      	add	sp, #20
 801e7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801e7f0:	4620      	mov	r0, r4
}
 801e7f2:	b005      	add	sp, #20
 801e7f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801e7f8:	f7ff be3a 	b.w	801e470 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e7fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f47f aea3 	bne.w	801e54a <tcp_output+0x76>
 801e804:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801e808:	2b00      	cmp	r3, #0
 801e80a:	f47f ae9e 	bne.w	801e54a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801e80e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801e812:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801e816:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801e81a:	e696      	b.n	801e54a <tcp_output+0x76>
 801e81c:	4698      	mov	r8, r3
 801e81e:	e6aa      	b.n	801e576 <tcp_output+0xa2>
          while (*cur_seg &&
 801e820:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e822:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801e826:	b92b      	cbnz	r3, 801e834 <tcp_output+0x360>
 801e828:	e013      	b.n	801e852 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801e82a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801e82e:	f8db 3000 	ldr.w	r3, [fp]
 801e832:	b173      	cbz	r3, 801e852 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e834:	68db      	ldr	r3, [r3, #12]
 801e836:	6858      	ldr	r0, [r3, #4]
 801e838:	f7f9 fc62 	bl	8018100 <lwip_htonl>
 801e83c:	68eb      	ldr	r3, [r5, #12]
 801e83e:	4681      	mov	r9, r0
 801e840:	6858      	ldr	r0, [r3, #4]
 801e842:	f7f9 fc5d 	bl	8018100 <lwip_htonl>
 801e846:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801e84a:	2800      	cmp	r0, #0
 801e84c:	dbed      	blt.n	801e82a <tcp_output+0x356>
          seg->next = (*cur_seg);
 801e84e:	f8db 3000 	ldr.w	r3, [fp]
 801e852:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801e854:	f8cb 5000 	str.w	r5, [fp]
 801e858:	e743      	b.n	801e6e2 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e85a:	4b0e      	ldr	r3, [pc, #56]	; (801e894 <tcp_output+0x3c0>)
 801e85c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e860:	4910      	ldr	r1, [pc, #64]	; (801e8a4 <tcp_output+0x3d0>)
 801e862:	480e      	ldr	r0, [pc, #56]	; (801e89c <tcp_output+0x3c8>)
 801e864:	f005 fd4e 	bl	8024304 <iprintf>
 801e868:	e63b      	b.n	801e4e2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801e86a:	f7fb f95b 	bl	8019b24 <netif_get_by_index>
 801e86e:	4682      	mov	sl, r0
 801e870:	e650      	b.n	801e514 <tcp_output+0x40>
 801e872:	8b63      	ldrh	r3, [r4, #26]
 801e874:	e79b      	b.n	801e7ae <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e876:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801e878:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e87a:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801e87c:	2900      	cmp	r1, #0
 801e87e:	f47f ae68 	bne.w	801e552 <tcp_output+0x7e>
 801e882:	e794      	b.n	801e7ae <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e884:	8b63      	ldrh	r3, [r4, #26]
 801e886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e88a:	8363      	strh	r3, [r4, #26]
      return err;
 801e88c:	e665      	b.n	801e55a <tcp_output+0x86>
    return ERR_RTE;
 801e88e:	f06f 0003 	mvn.w	r0, #3
 801e892:	e662      	b.n	801e55a <tcp_output+0x86>
 801e894:	08043260 	.word	0x08043260
 801e898:	0804387c 	.word	0x0804387c
 801e89c:	08028ab4 	.word	0x08028ab4
 801e8a0:	2002dc10 	.word	0x2002dc10
 801e8a4:	08043864 	.word	0x08043864

0801e8a8 <tcp_rexmit_rto_commit>:
{
 801e8a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e8aa:	4604      	mov	r4, r0
 801e8ac:	b158      	cbz	r0, 801e8c6 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801e8ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801e8b2:	2bff      	cmp	r3, #255	; 0xff
 801e8b4:	d002      	beq.n	801e8bc <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801e8b6:	3301      	adds	r3, #1
 801e8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801e8bc:	4620      	mov	r0, r4
}
 801e8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801e8c2:	f7ff be07 	b.w	801e4d4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e8c6:	4b04      	ldr	r3, [pc, #16]	; (801e8d8 <tcp_rexmit_rto_commit+0x30>)
 801e8c8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e8cc:	4903      	ldr	r1, [pc, #12]	; (801e8dc <tcp_rexmit_rto_commit+0x34>)
 801e8ce:	4804      	ldr	r0, [pc, #16]	; (801e8e0 <tcp_rexmit_rto_commit+0x38>)
 801e8d0:	f005 fd18 	bl	8024304 <iprintf>
 801e8d4:	e7eb      	b.n	801e8ae <tcp_rexmit_rto_commit+0x6>
 801e8d6:	bf00      	nop
 801e8d8:	08043260 	.word	0x08043260
 801e8dc:	080438d0 	.word	0x080438d0
 801e8e0:	08028ab4 	.word	0x08028ab4

0801e8e4 <tcp_rexmit_rto>:
{
 801e8e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e8e6:	4604      	mov	r4, r0
 801e8e8:	b118      	cbz	r0, 801e8f2 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e8ea:	f7ff fcb5 	bl	801e258 <tcp_rexmit_rto_prepare>
 801e8ee:	b198      	cbz	r0, 801e918 <tcp_rexmit_rto+0x34>
}
 801e8f0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e8f2:	4b0f      	ldr	r3, [pc, #60]	; (801e930 <tcp_rexmit_rto+0x4c>)
 801e8f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e8f8:	490e      	ldr	r1, [pc, #56]	; (801e934 <tcp_rexmit_rto+0x50>)
 801e8fa:	480f      	ldr	r0, [pc, #60]	; (801e938 <tcp_rexmit_rto+0x54>)
 801e8fc:	f005 fd02 	bl	8024304 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e900:	4620      	mov	r0, r4
 801e902:	f7ff fca9 	bl	801e258 <tcp_rexmit_rto_prepare>
 801e906:	2800      	cmp	r0, #0
 801e908:	d1f2      	bne.n	801e8f0 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e90a:	4b09      	ldr	r3, [pc, #36]	; (801e930 <tcp_rexmit_rto+0x4c>)
 801e90c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e910:	490a      	ldr	r1, [pc, #40]	; (801e93c <tcp_rexmit_rto+0x58>)
 801e912:	4809      	ldr	r0, [pc, #36]	; (801e938 <tcp_rexmit_rto+0x54>)
 801e914:	f005 fcf6 	bl	8024304 <iprintf>
  if (pcb->nrtx < 0xFF) {
 801e918:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801e91c:	2bff      	cmp	r3, #255	; 0xff
 801e91e:	d002      	beq.n	801e926 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801e920:	3301      	adds	r3, #1
 801e922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801e926:	4620      	mov	r0, r4
}
 801e928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801e92c:	f7ff bdd2 	b.w	801e4d4 <tcp_output>
 801e930:	08043260 	.word	0x08043260
 801e934:	080438f4 	.word	0x080438f4
 801e938:	08028ab4 	.word	0x08028ab4
 801e93c:	080438d0 	.word	0x080438d0

0801e940 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e940:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e942:	4604      	mov	r4, r0
 801e944:	b188      	cbz	r0, 801e96a <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e946:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801e948:	3801      	subs	r0, #1
 801e94a:	f7f9 fbd9 	bl	8018100 <lwip_htonl>
 801e94e:	2100      	movs	r1, #0
 801e950:	4602      	mov	r2, r0
 801e952:	4620      	mov	r0, r4
 801e954:	f7fe ff1c 	bl	801d790 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e958:	4601      	mov	r1, r0
 801e95a:	b170      	cbz	r0, 801e97a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e95c:	1d23      	adds	r3, r4, #4
 801e95e:	4622      	mov	r2, r4
 801e960:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801e962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e966:	f7fe bf3b 	b.w	801d7e0 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e96a:	4b05      	ldr	r3, [pc, #20]	; (801e980 <tcp_keepalive+0x40>)
 801e96c:	f640 0224 	movw	r2, #2084	; 0x824
 801e970:	4904      	ldr	r1, [pc, #16]	; (801e984 <tcp_keepalive+0x44>)
 801e972:	4805      	ldr	r0, [pc, #20]	; (801e988 <tcp_keepalive+0x48>)
 801e974:	f005 fcc6 	bl	8024304 <iprintf>
 801e978:	e7e5      	b.n	801e946 <tcp_keepalive+0x6>
}
 801e97a:	f04f 30ff 	mov.w	r0, #4294967295
 801e97e:	bd10      	pop	{r4, pc}
 801e980:	08043260 	.word	0x08043260
 801e984:	08043910 	.word	0x08043910
 801e988:	08028ab4 	.word	0x08028ab4

0801e98c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e990:	4604      	mov	r4, r0
 801e992:	2800      	cmp	r0, #0
 801e994:	d051      	beq.n	801ea3a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e996:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801e998:	2d00      	cmp	r5, #0
 801e99a:	d04b      	beq.n	801ea34 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e99c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801e9a0:	2bff      	cmp	r3, #255	; 0xff
 801e9a2:	d002      	beq.n	801e9aa <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801e9a4:	3301      	adds	r3, #1
 801e9a6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e9aa:	68eb      	ldr	r3, [r5, #12]
 801e9ac:	8998      	ldrh	r0, [r3, #12]
 801e9ae:	f7f9 fba3 	bl	80180f8 <lwip_htons>
 801e9b2:	07c3      	lsls	r3, r0, #31
 801e9b4:	d527      	bpl.n	801ea06 <tcp_zero_window_probe+0x7a>
 801e9b6:	8929      	ldrh	r1, [r5, #8]
 801e9b8:	bb29      	cbnz	r1, 801ea06 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e9ba:	68eb      	ldr	r3, [r5, #12]
 801e9bc:	4620      	mov	r0, r4
 801e9be:	685a      	ldr	r2, [r3, #4]
 801e9c0:	f7fe fee6 	bl	801d790 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801e9c4:	4606      	mov	r6, r0
 801e9c6:	b388      	cbz	r0, 801ea2c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e9c8:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e9cc:	2011      	movs	r0, #17
 801e9ce:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801e9d2:	f7f9 fb91 	bl	80180f8 <lwip_htons>
 801e9d6:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801e9da:	4338      	orrs	r0, r7
 801e9dc:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e9e0:	68eb      	ldr	r3, [r5, #12]
 801e9e2:	6858      	ldr	r0, [r3, #4]
 801e9e4:	f7f9 fb8c 	bl	8018100 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e9e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e9ea:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9ec:	4622      	mov	r2, r4
 801e9ee:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e9f0:	1a1b      	subs	r3, r3, r0
 801e9f2:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9f4:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801e9f8:	bfb8      	it	lt
 801e9fa:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9fc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801e9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ea02:	f7fe beed 	b.w	801d7e0 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ea06:	68eb      	ldr	r3, [r5, #12]
 801ea08:	2101      	movs	r1, #1
 801ea0a:	4620      	mov	r0, r4
 801ea0c:	685a      	ldr	r2, [r3, #4]
 801ea0e:	f7fe febf 	bl	801d790 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801ea12:	4606      	mov	r6, r0
 801ea14:	b150      	cbz	r0, 801ea2c <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ea16:	6868      	ldr	r0, [r5, #4]
 801ea18:	892a      	ldrh	r2, [r5, #8]
 801ea1a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801ea1c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ea1e:	1a9b      	subs	r3, r3, r2
 801ea20:	2201      	movs	r2, #1
 801ea22:	3114      	adds	r1, #20
 801ea24:	b29b      	uxth	r3, r3
 801ea26:	f7fb fc47 	bl	801a2b8 <pbuf_copy_partial>
 801ea2a:	e7d9      	b.n	801e9e0 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801ea2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801ea34:	4628      	mov	r0, r5
}
 801ea36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ea3a:	4b04      	ldr	r3, [pc, #16]	; (801ea4c <tcp_zero_window_probe+0xc0>)
 801ea3c:	f640 024f 	movw	r2, #2127	; 0x84f
 801ea40:	4903      	ldr	r1, [pc, #12]	; (801ea50 <tcp_zero_window_probe+0xc4>)
 801ea42:	4804      	ldr	r0, [pc, #16]	; (801ea54 <tcp_zero_window_probe+0xc8>)
 801ea44:	f005 fc5e 	bl	8024304 <iprintf>
 801ea48:	e7a5      	b.n	801e996 <tcp_zero_window_probe+0xa>
 801ea4a:	bf00      	nop
 801ea4c:	08043260 	.word	0x08043260
 801ea50:	0804392c 	.word	0x0804392c
 801ea54:	08028ab4 	.word	0x08028ab4

0801ea58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ea58:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea5a:	22bc      	movs	r2, #188	; 0xbc
{
 801ea5c:	b570      	push	{r4, r5, r6, lr}
 801ea5e:	460e      	mov	r6, r1
 801ea60:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea62:	4910      	ldr	r1, [pc, #64]	; (801eaa4 <sys_timeout_abs+0x4c>)
 801ea64:	200c      	movs	r0, #12
{
 801ea66:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ea68:	f7fa fe34 	bl	80196d4 <memp_malloc_fn>
  if (timeout == NULL) {
 801ea6c:	b190      	cbz	r0, 801ea94 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801ea6e:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ea70:	490d      	ldr	r1, [pc, #52]	; (801eaa8 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801ea72:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801ea74:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801ea76:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801ea7a:	680b      	ldr	r3, [r1, #0]
 801ea7c:	b91b      	cbnz	r3, 801ea86 <sys_timeout_abs+0x2e>
 801ea7e:	e007      	b.n	801ea90 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ea80:	4619      	mov	r1, r3
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	b11b      	cbz	r3, 801ea8e <sys_timeout_abs+0x36>
 801ea86:	685a      	ldr	r2, [r3, #4]
 801ea88:	1aa2      	subs	r2, r4, r2
 801ea8a:	2a00      	cmp	r2, #0
 801ea8c:	daf8      	bge.n	801ea80 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801ea8e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801ea90:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801ea92:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ea94:	4b03      	ldr	r3, [pc, #12]	; (801eaa4 <sys_timeout_abs+0x4c>)
 801ea96:	22be      	movs	r2, #190	; 0xbe
 801ea98:	4904      	ldr	r1, [pc, #16]	; (801eaac <sys_timeout_abs+0x54>)
 801ea9a:	4805      	ldr	r0, [pc, #20]	; (801eab0 <sys_timeout_abs+0x58>)
}
 801ea9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801eaa0:	f005 bc30 	b.w	8024304 <iprintf>
 801eaa4:	08043950 	.word	0x08043950
 801eaa8:	2002dc2c 	.word	0x2002dc2c
 801eaac:	08043984 	.word	0x08043984
 801eab0:	08028ab4 	.word	0x08028ab4

0801eab4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801eab4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801eab6:	6843      	ldr	r3, [r0, #4]
{
 801eab8:	4604      	mov	r4, r0
  cyclic->handler();
 801eaba:	4798      	blx	r3

  now = sys_now();
 801eabc:	f7f4 fd74 	bl	80135a8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801eac0:	4b09      	ldr	r3, [pc, #36]	; (801eae8 <lwip_cyclic_timer+0x34>)
 801eac2:	6825      	ldr	r5, [r4, #0]
 801eac4:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eac6:	4909      	ldr	r1, [pc, #36]	; (801eaec <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801eac8:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801eaca:	1a1a      	subs	r2, r3, r0
 801eacc:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eace:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ead0:	da04      	bge.n	801eadc <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ead2:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ead4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ead8:	f7ff bfbe 	b.w	801ea58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801eadc:	4618      	mov	r0, r3
}
 801eade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801eae2:	f7ff bfb9 	b.w	801ea58 <sys_timeout_abs>
 801eae6:	bf00      	nop
 801eae8:	2002dc28 	.word	0x2002dc28
 801eaec:	0801eab5 	.word	0x0801eab5

0801eaf0 <tcpip_tcp_timer>:
{
 801eaf0:	b508      	push	{r3, lr}
  tcp_tmr();
 801eaf2:	f7fd f887 	bl	801bc04 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801eaf6:	4b09      	ldr	r3, [pc, #36]	; (801eb1c <tcpip_tcp_timer+0x2c>)
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	b143      	cbz	r3, 801eb0e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eafc:	f7f4 fd54 	bl	80135a8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb00:	2200      	movs	r2, #0
 801eb02:	4907      	ldr	r1, [pc, #28]	; (801eb20 <tcpip_tcp_timer+0x30>)
 801eb04:	30fa      	adds	r0, #250	; 0xfa
}
 801eb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb0a:	f7ff bfa5 	b.w	801ea58 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801eb0e:	4b05      	ldr	r3, [pc, #20]	; (801eb24 <tcpip_tcp_timer+0x34>)
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d1f2      	bne.n	801eafc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801eb16:	4a04      	ldr	r2, [pc, #16]	; (801eb28 <tcpip_tcp_timer+0x38>)
 801eb18:	6013      	str	r3, [r2, #0]
}
 801eb1a:	bd08      	pop	{r3, pc}
 801eb1c:	2002dbcc 	.word	0x2002dbcc
 801eb20:	0801eaf1 	.word	0x0801eaf1
 801eb24:	2002dbe4 	.word	0x2002dbe4
 801eb28:	2002dc30 	.word	0x2002dc30

0801eb2c <tcp_timer_needed>:
{
 801eb2c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801eb2e:	4b0b      	ldr	r3, [pc, #44]	; (801eb5c <tcp_timer_needed+0x30>)
 801eb30:	681a      	ldr	r2, [r3, #0]
 801eb32:	b98a      	cbnz	r2, 801eb58 <tcp_timer_needed+0x2c>
 801eb34:	4a0a      	ldr	r2, [pc, #40]	; (801eb60 <tcp_timer_needed+0x34>)
 801eb36:	6812      	ldr	r2, [r2, #0]
 801eb38:	b152      	cbz	r2, 801eb50 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801eb3a:	2201      	movs	r2, #1
 801eb3c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eb3e:	f7f4 fd33 	bl	80135a8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb42:	2200      	movs	r2, #0
 801eb44:	4907      	ldr	r1, [pc, #28]	; (801eb64 <tcp_timer_needed+0x38>)
 801eb46:	30fa      	adds	r0, #250	; 0xfa
}
 801eb48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb4c:	f7ff bf84 	b.w	801ea58 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801eb50:	4a05      	ldr	r2, [pc, #20]	; (801eb68 <tcp_timer_needed+0x3c>)
 801eb52:	6812      	ldr	r2, [r2, #0]
 801eb54:	2a00      	cmp	r2, #0
 801eb56:	d1f0      	bne.n	801eb3a <tcp_timer_needed+0xe>
}
 801eb58:	bd08      	pop	{r3, pc}
 801eb5a:	bf00      	nop
 801eb5c:	2002dc30 	.word	0x2002dc30
 801eb60:	2002dbcc 	.word	0x2002dbcc
 801eb64:	0801eaf1 	.word	0x0801eaf1
 801eb68:	2002dbe4 	.word	0x2002dbe4

0801eb6c <sys_timeouts_init>:
{
 801eb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb70:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801eb74:	4c11      	ldr	r4, [pc, #68]	; (801ebbc <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801eb76:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801ebc8 <sys_timeouts_init+0x5c>
 801eb7a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801eb7e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801ebcc <sys_timeouts_init+0x60>
 801eb82:	f104 0620 	add.w	r6, r4, #32
 801eb86:	4f0e      	ldr	r7, [pc, #56]	; (801ebc0 <sys_timeouts_init+0x54>)
 801eb88:	d20d      	bcs.n	801eba6 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801eb8a:	f7f4 fd0d 	bl	80135a8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801eb8e:	4622      	mov	r2, r4
 801eb90:	490c      	ldr	r1, [pc, #48]	; (801ebc4 <sys_timeouts_init+0x58>)
 801eb92:	4428      	add	r0, r5
 801eb94:	f7ff ff60 	bl	801ea58 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801eb98:	42b4      	cmp	r4, r6
 801eb9a:	d00c      	beq.n	801ebb6 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801eb9c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801eba0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801eba4:	d3f1      	bcc.n	801eb8a <sys_timeouts_init+0x1e>
 801eba6:	464b      	mov	r3, r9
 801eba8:	4641      	mov	r1, r8
 801ebaa:	f240 1229 	movw	r2, #297	; 0x129
 801ebae:	4638      	mov	r0, r7
 801ebb0:	f005 fba8 	bl	8024304 <iprintf>
 801ebb4:	e7e9      	b.n	801eb8a <sys_timeouts_init+0x1e>
}
 801ebb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebba:	bf00      	nop
 801ebbc:	08043a04 	.word	0x08043a04
 801ebc0:	08028ab4 	.word	0x08028ab4
 801ebc4:	0801eab5 	.word	0x0801eab5
 801ebc8:	08043950 	.word	0x08043950
 801ebcc:	080439c4 	.word	0x080439c4

0801ebd0 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801ebd4:	b570      	push	{r4, r5, r6, lr}
 801ebd6:	4604      	mov	r4, r0
 801ebd8:	460d      	mov	r5, r1
 801ebda:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebdc:	d208      	bcs.n	801ebf0 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ebde:	f7f4 fce3 	bl	80135a8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ebe2:	4632      	mov	r2, r6
 801ebe4:	4629      	mov	r1, r5
 801ebe6:	4420      	add	r0, r4
#endif
}
 801ebe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ebec:	f7ff bf34 	b.w	801ea58 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ebf0:	4b03      	ldr	r3, [pc, #12]	; (801ec00 <sys_timeout+0x30>)
 801ebf2:	f240 1229 	movw	r2, #297	; 0x129
 801ebf6:	4903      	ldr	r1, [pc, #12]	; (801ec04 <sys_timeout+0x34>)
 801ebf8:	4803      	ldr	r0, [pc, #12]	; (801ec08 <sys_timeout+0x38>)
 801ebfa:	f005 fb83 	bl	8024304 <iprintf>
 801ebfe:	e7ee      	b.n	801ebde <sys_timeout+0xe>
 801ec00:	08043950 	.word	0x08043950
 801ec04:	080439c4 	.word	0x080439c4
 801ec08:	08028ab4 	.word	0x08028ab4

0801ec0c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801ec0c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ec0e:	4d0d      	ldr	r5, [pc, #52]	; (801ec44 <sys_untimeout+0x38>)
 801ec10:	682b      	ldr	r3, [r5, #0]
 801ec12:	b19b      	cbz	r3, 801ec3c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801ec14:	2400      	movs	r4, #0
 801ec16:	e003      	b.n	801ec20 <sys_untimeout+0x14>
 801ec18:	681a      	ldr	r2, [r3, #0]
 801ec1a:	461c      	mov	r4, r3
 801ec1c:	4613      	mov	r3, r2
 801ec1e:	b16a      	cbz	r2, 801ec3c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801ec20:	689a      	ldr	r2, [r3, #8]
 801ec22:	4282      	cmp	r2, r0
 801ec24:	d1f8      	bne.n	801ec18 <sys_untimeout+0xc>
 801ec26:	68da      	ldr	r2, [r3, #12]
 801ec28:	428a      	cmp	r2, r1
 801ec2a:	d1f5      	bne.n	801ec18 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801ec2c:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801ec2e:	b13c      	cbz	r4, 801ec40 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801ec30:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801ec32:	4619      	mov	r1, r3
 801ec34:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801ec36:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801ec38:	f7fa bd82 	b.w	8019740 <memp_free>
}
 801ec3c:	bc30      	pop	{r4, r5}
 801ec3e:	4770      	bx	lr
        next_timeout = t->next;
 801ec40:	602a      	str	r2, [r5, #0]
 801ec42:	e7f6      	b.n	801ec32 <sys_untimeout+0x26>
 801ec44:	2002dc2c 	.word	0x2002dc2c

0801ec48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ec48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ec4c:	f7f4 fcac 	bl	80135a8 <sys_now>
 801ec50:	4c0f      	ldr	r4, [pc, #60]	; (801ec90 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801ec52:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801ec94 <sys_check_timeouts+0x4c>
  now = sys_now();
 801ec56:	4607      	mov	r7, r0
 801ec58:	e00f      	b.n	801ec7a <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ec5a:	685a      	ldr	r2, [r3, #4]
 801ec5c:	eba7 0c02 	sub.w	ip, r7, r2
 801ec60:	f1bc 0f00 	cmp.w	ip, #0
 801ec64:	db0e      	blt.n	801ec84 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801ec66:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801ec68:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801ec6a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801ec6e:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801ec72:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ec74:	f7fa fd64 	bl	8019740 <memp_free>
    if (handler != NULL) {
 801ec78:	b935      	cbnz	r5, 801ec88 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801ec7a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ec7c:	200c      	movs	r0, #12
 801ec7e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d1ea      	bne.n	801ec5a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801ec88:	4648      	mov	r0, r9
 801ec8a:	47a8      	blx	r5
 801ec8c:	e7f5      	b.n	801ec7a <sys_check_timeouts+0x32>
 801ec8e:	bf00      	nop
 801ec90:	2002dc2c 	.word	0x2002dc2c
 801ec94:	2002dc28 	.word	0x2002dc28

0801ec98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ec98:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ec9a:	4c07      	ldr	r4, [pc, #28]	; (801ecb8 <sys_timeouts_sleeptime+0x20>)
 801ec9c:	6823      	ldr	r3, [r4, #0]
 801ec9e:	b13b      	cbz	r3, 801ecb0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801eca0:	f7f4 fc82 	bl	80135a8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801eca4:	6823      	ldr	r3, [r4, #0]
 801eca6:	685b      	ldr	r3, [r3, #4]
    return 0;
 801eca8:	1a18      	subs	r0, r3, r0
 801ecaa:	bf48      	it	mi
 801ecac:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801ecae:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ecb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ecb4:	bd10      	pop	{r4, pc}
 801ecb6:	bf00      	nop
 801ecb8:	2002dc2c 	.word	0x2002dc2c

0801ecbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ecbc:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ecbe:	f005 fbc5 	bl	802444c <rand>
 801ecc2:	4b02      	ldr	r3, [pc, #8]	; (801eccc <udp_init+0x10>)
 801ecc4:	4a02      	ldr	r2, [pc, #8]	; (801ecd0 <udp_init+0x14>)
 801ecc6:	4303      	orrs	r3, r0
 801ecc8:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801ecca:	bd08      	pop	{r3, pc}
 801eccc:	ffffc000 	.word	0xffffc000
 801ecd0:	20000412 	.word	0x20000412

0801ecd4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ecd8:	4680      	mov	r8, r0
{
 801ecda:	b085      	sub	sp, #20
 801ecdc:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ecde:	2800      	cmp	r0, #0
 801ece0:	f000 80af 	beq.w	801ee42 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ece4:	2f00      	cmp	r7, #0
 801ece6:	f000 80b5 	beq.w	801ee54 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ecea:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801ecee:	2b07      	cmp	r3, #7
 801ecf0:	f240 8091 	bls.w	801ee16 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ecf4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801eecc <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801ecf8:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ecfc:	f8d9 1000 	ldr.w	r1, [r9]
 801ed00:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ed04:	f003 f80c 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 801ed08:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ed0a:	8820      	ldrh	r0, [r4, #0]
 801ed0c:	f7f9 f9f4 	bl	80180f8 <lwip_htons>
 801ed10:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801ed12:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801ed14:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801ed16:	f7f9 f9ef 	bl	80180f8 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed1a:	4b64      	ldr	r3, [pc, #400]	; (801eeac <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801ed1c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed1e:	681c      	ldr	r4, [r3, #0]
 801ed20:	2c00      	cmp	r4, #0
 801ed22:	d064      	beq.n	801edee <udp_input+0x11a>
  uncon_pcb = NULL;
 801ed24:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ed28:	f8df c190 	ldr.w	ip, [pc, #400]	; 801eebc <udp_input+0x1e8>
 801ed2c:	4960      	ldr	r1, [pc, #384]	; (801eeb0 <udp_input+0x1dc>)
  prev = NULL;
 801ed2e:	465e      	mov	r6, fp
 801ed30:	e004      	b.n	801ed3c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed32:	68e2      	ldr	r2, [r4, #12]
 801ed34:	4626      	mov	r6, r4
 801ed36:	2a00      	cmp	r2, #0
 801ed38:	d056      	beq.n	801ede8 <udp_input+0x114>
 801ed3a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ed3c:	8a62      	ldrh	r2, [r4, #18]
 801ed3e:	42aa      	cmp	r2, r5
 801ed40:	d1f7      	bne.n	801ed32 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ed42:	2f00      	cmp	r7, #0
 801ed44:	d06d      	beq.n	801ee22 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed46:	7a20      	ldrb	r0, [r4, #8]
 801ed48:	b138      	cbz	r0, 801ed5a <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ed4a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801ed4e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801ed52:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ed54:	b2d2      	uxtb	r2, r2
 801ed56:	4290      	cmp	r0, r2
 801ed58:	d1eb      	bne.n	801ed32 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed5a:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801ed5c:	f1ba 0f00 	cmp.w	sl, #0
 801ed60:	d038      	beq.n	801edd4 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed62:	b13a      	cbz	r2, 801ed74 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ed64:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ed68:	1c43      	adds	r3, r0, #1
 801ed6a:	d003      	beq.n	801ed74 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ed6c:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ed6e:	68bb      	ldr	r3, [r7, #8]
 801ed70:	4218      	tst	r0, r3
 801ed72:	d1de      	bne.n	801ed32 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ed74:	7c20      	ldrb	r0, [r4, #16]
 801ed76:	0743      	lsls	r3, r0, #29
 801ed78:	d409      	bmi.n	801ed8e <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801ed7a:	f1bb 0f00 	cmp.w	fp, #0
 801ed7e:	d059      	beq.n	801ee34 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ed80:	f1ba 0f00 	cmp.w	sl, #0
 801ed84:	d003      	beq.n	801ed8e <udp_input+0xba>
 801ed86:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ed8a:	3001      	adds	r0, #1
 801ed8c:	d069      	beq.n	801ee62 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ed8e:	8aa2      	ldrh	r2, [r4, #20]
 801ed90:	9803      	ldr	r0, [sp, #12]
 801ed92:	4282      	cmp	r2, r0
 801ed94:	d1cd      	bne.n	801ed32 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ed96:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801ed98:	b11a      	cbz	r2, 801eda2 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ed9a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ed9e:	4282      	cmp	r2, r0
 801eda0:	d1c7      	bne.n	801ed32 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801eda2:	b12e      	cbz	r6, 801edb0 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801eda4:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801eda6:	4a41      	ldr	r2, [pc, #260]	; (801eeac <udp_input+0x1d8>)
          prev->next = pcb->next;
 801eda8:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801edaa:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801edac:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801edae:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801edb0:	2108      	movs	r1, #8
 801edb2:	4640      	mov	r0, r8
 801edb4:	f7fb f950 	bl	801a058 <pbuf_remove_header>
 801edb8:	2800      	cmp	r0, #0
 801edba:	d15b      	bne.n	801ee74 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801edbc:	69a5      	ldr	r5, [r4, #24]
 801edbe:	b355      	cbz	r5, 801ee16 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801edc0:	9b03      	ldr	r3, [sp, #12]
 801edc2:	4642      	mov	r2, r8
 801edc4:	69e0      	ldr	r0, [r4, #28]
 801edc6:	4621      	mov	r1, r4
 801edc8:	9300      	str	r3, [sp, #0]
 801edca:	4b3a      	ldr	r3, [pc, #232]	; (801eeb4 <udp_input+0x1e0>)
 801edcc:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801edce:	b005      	add	sp, #20
 801edd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801edd4:	2a00      	cmp	r2, #0
 801edd6:	d0cd      	beq.n	801ed74 <udp_input+0xa0>
 801edd8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801eddc:	4282      	cmp	r2, r0
 801edde:	d0c9      	beq.n	801ed74 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ede0:	68e2      	ldr	r2, [r4, #12]
 801ede2:	4626      	mov	r6, r4
 801ede4:	2a00      	cmp	r2, #0
 801ede6:	d1a8      	bne.n	801ed3a <udp_input+0x66>
  if (pcb != NULL) {
 801ede8:	f1bb 0f00 	cmp.w	fp, #0
 801edec:	d15b      	bne.n	801eea6 <udp_input+0x1d2>
  if (for_us) {
 801edee:	687a      	ldr	r2, [r7, #4]
 801edf0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801edf4:	429a      	cmp	r2, r3
 801edf6:	d10e      	bne.n	801ee16 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801edf8:	2108      	movs	r1, #8
 801edfa:	4640      	mov	r0, r8
 801edfc:	f7fb f92c 	bl	801a058 <pbuf_remove_header>
 801ee00:	2800      	cmp	r0, #0
 801ee02:	d137      	bne.n	801ee74 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ee04:	f1ba 0f00 	cmp.w	sl, #0
 801ee08:	d105      	bne.n	801ee16 <udp_input+0x142>
 801ee0a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ee0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ee12:	2be0      	cmp	r3, #224	; 0xe0
 801ee14:	d13b      	bne.n	801ee8e <udp_input+0x1ba>
      pbuf_free(p);
 801ee16:	4640      	mov	r0, r8
}
 801ee18:	b005      	add	sp, #20
 801ee1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ee1e:	f7fb b9a7 	b.w	801a170 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ee22:	4663      	mov	r3, ip
 801ee24:	2288      	movs	r2, #136	; 0x88
 801ee26:	4824      	ldr	r0, [pc, #144]	; (801eeb8 <udp_input+0x1e4>)
 801ee28:	f005 fa6c 	bl	8024304 <iprintf>
 801ee2c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801eebc <udp_input+0x1e8>
 801ee30:	491f      	ldr	r1, [pc, #124]	; (801eeb0 <udp_input+0x1dc>)
 801ee32:	e788      	b.n	801ed46 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801ee34:	8aa2      	ldrh	r2, [r4, #20]
 801ee36:	46a3      	mov	fp, r4
 801ee38:	9803      	ldr	r0, [sp, #12]
 801ee3a:	4282      	cmp	r2, r0
 801ee3c:	f47f af79 	bne.w	801ed32 <udp_input+0x5e>
 801ee40:	e7a9      	b.n	801ed96 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ee42:	4b1e      	ldr	r3, [pc, #120]	; (801eebc <udp_input+0x1e8>)
 801ee44:	22cf      	movs	r2, #207	; 0xcf
 801ee46:	491e      	ldr	r1, [pc, #120]	; (801eec0 <udp_input+0x1ec>)
 801ee48:	481b      	ldr	r0, [pc, #108]	; (801eeb8 <udp_input+0x1e4>)
 801ee4a:	f005 fa5b 	bl	8024304 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ee4e:	2f00      	cmp	r7, #0
 801ee50:	f47f af4b 	bne.w	801ecea <udp_input+0x16>
 801ee54:	4b19      	ldr	r3, [pc, #100]	; (801eebc <udp_input+0x1e8>)
 801ee56:	22d0      	movs	r2, #208	; 0xd0
 801ee58:	491a      	ldr	r1, [pc, #104]	; (801eec4 <udp_input+0x1f0>)
 801ee5a:	4817      	ldr	r0, [pc, #92]	; (801eeb8 <udp_input+0x1e4>)
 801ee5c:	f005 fa52 	bl	8024304 <iprintf>
 801ee60:	e743      	b.n	801ecea <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ee62:	6878      	ldr	r0, [r7, #4]
 801ee64:	f8db 3000 	ldr.w	r3, [fp]
 801ee68:	4283      	cmp	r3, r0
 801ee6a:	d090      	beq.n	801ed8e <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ee6c:	4290      	cmp	r0, r2
 801ee6e:	bf08      	it	eq
 801ee70:	46a3      	moveq	fp, r4
 801ee72:	e78c      	b.n	801ed8e <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ee74:	4b11      	ldr	r3, [pc, #68]	; (801eebc <udp_input+0x1e8>)
 801ee76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ee7a:	4913      	ldr	r1, [pc, #76]	; (801eec8 <udp_input+0x1f4>)
 801ee7c:	480e      	ldr	r0, [pc, #56]	; (801eeb8 <udp_input+0x1e4>)
 801ee7e:	f005 fa41 	bl	8024304 <iprintf>
      pbuf_free(p);
 801ee82:	4640      	mov	r0, r8
}
 801ee84:	b005      	add	sp, #20
 801ee86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ee8a:	f7fb b971 	b.w	801a170 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ee8e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801ee92:	4640      	mov	r0, r8
 801ee94:	3108      	adds	r1, #8
 801ee96:	b209      	sxth	r1, r1
 801ee98:	f7fb f916 	bl	801a0c8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ee9c:	2103      	movs	r1, #3
 801ee9e:	4640      	mov	r0, r8
 801eea0:	f002 fd5a 	bl	8021958 <icmp_dest_unreach>
 801eea4:	e7b7      	b.n	801ee16 <udp_input+0x142>
 801eea6:	465c      	mov	r4, fp
 801eea8:	e782      	b.n	801edb0 <udp_input+0xdc>
 801eeaa:	bf00      	nop
 801eeac:	2002dc34 	.word	0x2002dc34
 801eeb0:	08043a90 	.word	0x08043a90
 801eeb4:	2001ec98 	.word	0x2001ec98
 801eeb8:	08028ab4 	.word	0x08028ab4
 801eebc:	08043a2c 	.word	0x08043a2c
 801eec0:	08043a5c 	.word	0x08043a5c
 801eec4:	08043a74 	.word	0x08043a74
 801eec8:	08043ab8 	.word	0x08043ab8
 801eecc:	2001ec88 	.word	0x2001ec88

0801eed0 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801eed0:	4b38      	ldr	r3, [pc, #224]	; (801efb4 <udp_bind+0xe4>)
 801eed2:	2900      	cmp	r1, #0
{
 801eed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801eed8:	bf08      	it	eq
 801eeda:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801eedc:	2800      	cmp	r0, #0
 801eede:	d05e      	beq.n	801ef9e <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eee0:	4f35      	ldr	r7, [pc, #212]	; (801efb8 <udp_bind+0xe8>)
 801eee2:	683e      	ldr	r6, [r7, #0]
 801eee4:	b34e      	cbz	r6, 801ef3a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801eee6:	42b0      	cmp	r0, r6
 801eee8:	d031      	beq.n	801ef4e <udp_bind+0x7e>
 801eeea:	4634      	mov	r4, r6
 801eeec:	e001      	b.n	801eef2 <udp_bind+0x22>
 801eeee:	42a0      	cmp	r0, r4
 801eef0:	d02d      	beq.n	801ef4e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eef2:	68e4      	ldr	r4, [r4, #12]
 801eef4:	2c00      	cmp	r4, #0
 801eef6:	d1fa      	bne.n	801eeee <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801eef8:	b362      	cbz	r2, 801ef54 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801eefa:	680d      	ldr	r5, [r1, #0]
 801eefc:	4633      	mov	r3, r6
 801eefe:	e001      	b.n	801ef04 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ef00:	68db      	ldr	r3, [r3, #12]
 801ef02:	b19b      	cbz	r3, 801ef2c <udp_bind+0x5c>
      if (pcb != ipcb) {
 801ef04:	4298      	cmp	r0, r3
 801ef06:	d0fb      	beq.n	801ef00 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801ef08:	8a59      	ldrh	r1, [r3, #18]
 801ef0a:	4291      	cmp	r1, r2
 801ef0c:	d1f8      	bne.n	801ef00 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef0e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801ef10:	2900      	cmp	r1, #0
 801ef12:	bf18      	it	ne
 801ef14:	42a9      	cmpne	r1, r5
 801ef16:	d001      	beq.n	801ef1c <udp_bind+0x4c>
 801ef18:	2d00      	cmp	r5, #0
 801ef1a:	d1f1      	bne.n	801ef00 <udp_bind+0x30>
      return ERR_USE;
 801ef1c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801ef20:	4618      	mov	r0, r3
 801ef22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef26:	680d      	ldr	r5, [r1, #0]
 801ef28:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ef2c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801ef2e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801ef30:	b13c      	cbz	r4, 801ef42 <udp_bind+0x72>
  return ERR_OK;
 801ef32:	2300      	movs	r3, #0
}
 801ef34:	4618      	mov	r0, r3
 801ef36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801ef3a:	b372      	cbz	r2, 801ef9a <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ef3c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801ef3e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ef40:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801ef42:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801ef44:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801ef46:	6038      	str	r0, [r7, #0]
}
 801ef48:	4618      	mov	r0, r3
 801ef4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801ef4e:	2401      	movs	r4, #1
  if (port == 0) {
 801ef50:	2a00      	cmp	r2, #0
 801ef52:	d1d2      	bne.n	801eefa <udp_bind+0x2a>
 801ef54:	f8df e070 	ldr.w	lr, [pc, #112]	; 801efc8 <udp_bind+0xf8>
  rebind = 0;
 801ef58:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ef5c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801ef60:	f8be 2000 	ldrh.w	r2, [lr]
 801ef64:	4542      	cmp	r2, r8
 801ef66:	d015      	beq.n	801ef94 <udp_bind+0xc4>
 801ef68:	3201      	adds	r2, #1
 801ef6a:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef6c:	2e00      	cmp	r6, #0
 801ef6e:	d0da      	beq.n	801ef26 <udp_bind+0x56>
 801ef70:	4633      	mov	r3, r6
 801ef72:	e002      	b.n	801ef7a <udp_bind+0xaa>
 801ef74:	68db      	ldr	r3, [r3, #12]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d0d5      	beq.n	801ef26 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801ef7a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801ef7e:	4594      	cmp	ip, r2
 801ef80:	d1f8      	bne.n	801ef74 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ef82:	3d01      	subs	r5, #1
 801ef84:	b2ad      	uxth	r5, r5
 801ef86:	2d00      	cmp	r5, #0
 801ef88:	d1ec      	bne.n	801ef64 <udp_bind+0x94>
      return ERR_USE;
 801ef8a:	f06f 0307 	mvn.w	r3, #7
 801ef8e:	f8ae 2000 	strh.w	r2, [lr]
 801ef92:	e7cf      	b.n	801ef34 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ef94:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ef98:	e7e8      	b.n	801ef6c <udp_bind+0x9c>
  rebind = 0;
 801ef9a:	4634      	mov	r4, r6
 801ef9c:	e7da      	b.n	801ef54 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ef9e:	4b07      	ldr	r3, [pc, #28]	; (801efbc <udp_bind+0xec>)
 801efa0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801efa4:	4906      	ldr	r1, [pc, #24]	; (801efc0 <udp_bind+0xf0>)
 801efa6:	4807      	ldr	r0, [pc, #28]	; (801efc4 <udp_bind+0xf4>)
 801efa8:	f005 f9ac 	bl	8024304 <iprintf>
 801efac:	f06f 030f 	mvn.w	r3, #15
 801efb0:	e7c0      	b.n	801ef34 <udp_bind+0x64>
 801efb2:	bf00      	nop
 801efb4:	080443ac 	.word	0x080443ac
 801efb8:	2002dc34 	.word	0x2002dc34
 801efbc:	08043a2c 	.word	0x08043a2c
 801efc0:	08043ad4 	.word	0x08043ad4
 801efc4:	08028ab4 	.word	0x08028ab4
 801efc8:	20000412 	.word	0x20000412

0801efcc <udp_sendto_if_src>:
{
 801efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd0:	b085      	sub	sp, #20
 801efd2:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801efd6:	2800      	cmp	r0, #0
 801efd8:	f000 8087 	beq.w	801f0ea <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801efdc:	460d      	mov	r5, r1
 801efde:	2900      	cmp	r1, #0
 801efe0:	d079      	beq.n	801f0d6 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801efe2:	4690      	mov	r8, r2
 801efe4:	2a00      	cmp	r2, #0
 801efe6:	d06c      	beq.n	801f0c2 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801efe8:	f1ba 0f00 	cmp.w	sl, #0
 801efec:	d05f      	beq.n	801f0ae <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801efee:	f1bb 0f00 	cmp.w	fp, #0
 801eff2:	f000 8084 	beq.w	801f0fe <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 801eff6:	8a42      	ldrh	r2, [r0, #18]
 801eff8:	4699      	mov	r9, r3
 801effa:	4604      	mov	r4, r0
 801effc:	b39a      	cbz	r2, 801f066 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801effe:	892a      	ldrh	r2, [r5, #8]
 801f000:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801f004:	429a      	cmp	r2, r3
 801f006:	d84f      	bhi.n	801f0a8 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f008:	2108      	movs	r1, #8
 801f00a:	4628      	mov	r0, r5
 801f00c:	f7fa fff0 	bl	8019ff0 <pbuf_add_header>
 801f010:	bb98      	cbnz	r0, 801f07a <udp_sendto_if_src+0xae>
 801f012:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f014:	8973      	ldrh	r3, [r6, #10]
 801f016:	2b07      	cmp	r3, #7
 801f018:	d93e      	bls.n	801f098 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 801f01a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801f01c:	8a60      	ldrh	r0, [r4, #18]
 801f01e:	f7f9 f86b 	bl	80180f8 <lwip_htons>
 801f022:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f024:	4648      	mov	r0, r9
 801f026:	f7f9 f867 	bl	80180f8 <lwip_htons>
  udphdr->chksum = 0x0000;
 801f02a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801f02c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 801f02e:	71bb      	strb	r3, [r7, #6]
 801f030:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801f032:	8930      	ldrh	r0, [r6, #8]
 801f034:	f7f9 f860 	bl	80180f8 <lwip_htons>
 801f038:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f03a:	f8cd b008 	str.w	fp, [sp, #8]
 801f03e:	2011      	movs	r0, #17
 801f040:	7aa3      	ldrb	r3, [r4, #10]
 801f042:	4642      	mov	r2, r8
 801f044:	4651      	mov	r1, sl
 801f046:	9300      	str	r3, [sp, #0]
 801f048:	7ae3      	ldrb	r3, [r4, #11]
 801f04a:	9001      	str	r0, [sp, #4]
 801f04c:	4630      	mov	r0, r6
 801f04e:	f002 fdb9 	bl	8021bc4 <ip4_output_if_src>
  if (q != p) {
 801f052:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f054:	4607      	mov	r7, r0
  if (q != p) {
 801f056:	d002      	beq.n	801f05e <udp_sendto_if_src+0x92>
    pbuf_free(q);
 801f058:	4630      	mov	r0, r6
 801f05a:	f7fb f889 	bl	801a170 <pbuf_free>
}
 801f05e:	4638      	mov	r0, r7
 801f060:	b005      	add	sp, #20
 801f062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f066:	4601      	mov	r1, r0
 801f068:	f7ff ff32 	bl	801eed0 <udp_bind>
    if (err != ERR_OK) {
 801f06c:	4607      	mov	r7, r0
 801f06e:	2800      	cmp	r0, #0
 801f070:	d0c5      	beq.n	801effe <udp_sendto_if_src+0x32>
}
 801f072:	4638      	mov	r0, r7
 801f074:	b005      	add	sp, #20
 801f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f07a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f07e:	2108      	movs	r1, #8
 801f080:	2022      	movs	r0, #34	; 0x22
 801f082:	f7fa fea3 	bl	8019dcc <pbuf_alloc>
    if (q == NULL) {
 801f086:	4606      	mov	r6, r0
 801f088:	b170      	cbz	r0, 801f0a8 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 801f08a:	892b      	ldrh	r3, [r5, #8]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d0c1      	beq.n	801f014 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 801f090:	4629      	mov	r1, r5
 801f092:	f7fb f8db 	bl	801a24c <pbuf_chain>
 801f096:	e7bd      	b.n	801f014 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f098:	4b1e      	ldr	r3, [pc, #120]	; (801f114 <udp_sendto_if_src+0x148>)
 801f09a:	f240 320d 	movw	r2, #781	; 0x30d
 801f09e:	491e      	ldr	r1, [pc, #120]	; (801f118 <udp_sendto_if_src+0x14c>)
 801f0a0:	481e      	ldr	r0, [pc, #120]	; (801f11c <udp_sendto_if_src+0x150>)
 801f0a2:	f005 f92f 	bl	8024304 <iprintf>
 801f0a6:	e7b8      	b.n	801f01a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 801f0a8:	f04f 37ff 	mov.w	r7, #4294967295
 801f0ac:	e7d7      	b.n	801f05e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f0ae:	4b19      	ldr	r3, [pc, #100]	; (801f114 <udp_sendto_if_src+0x148>)
 801f0b0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f0b4:	491a      	ldr	r1, [pc, #104]	; (801f120 <udp_sendto_if_src+0x154>)
 801f0b6:	f06f 070f 	mvn.w	r7, #15
 801f0ba:	4818      	ldr	r0, [pc, #96]	; (801f11c <udp_sendto_if_src+0x150>)
 801f0bc:	f005 f922 	bl	8024304 <iprintf>
 801f0c0:	e7cd      	b.n	801f05e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f0c2:	4b14      	ldr	r3, [pc, #80]	; (801f114 <udp_sendto_if_src+0x148>)
 801f0c4:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f0c8:	4916      	ldr	r1, [pc, #88]	; (801f124 <udp_sendto_if_src+0x158>)
 801f0ca:	f06f 070f 	mvn.w	r7, #15
 801f0ce:	4813      	ldr	r0, [pc, #76]	; (801f11c <udp_sendto_if_src+0x150>)
 801f0d0:	f005 f918 	bl	8024304 <iprintf>
 801f0d4:	e7c3      	b.n	801f05e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f0d6:	4b0f      	ldr	r3, [pc, #60]	; (801f114 <udp_sendto_if_src+0x148>)
 801f0d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f0dc:	4912      	ldr	r1, [pc, #72]	; (801f128 <udp_sendto_if_src+0x15c>)
 801f0de:	f06f 070f 	mvn.w	r7, #15
 801f0e2:	480e      	ldr	r0, [pc, #56]	; (801f11c <udp_sendto_if_src+0x150>)
 801f0e4:	f005 f90e 	bl	8024304 <iprintf>
 801f0e8:	e7b9      	b.n	801f05e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f0ea:	4b0a      	ldr	r3, [pc, #40]	; (801f114 <udp_sendto_if_src+0x148>)
 801f0ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f0f0:	490e      	ldr	r1, [pc, #56]	; (801f12c <udp_sendto_if_src+0x160>)
 801f0f2:	f06f 070f 	mvn.w	r7, #15
 801f0f6:	4809      	ldr	r0, [pc, #36]	; (801f11c <udp_sendto_if_src+0x150>)
 801f0f8:	f005 f904 	bl	8024304 <iprintf>
 801f0fc:	e7af      	b.n	801f05e <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f0fe:	4b05      	ldr	r3, [pc, #20]	; (801f114 <udp_sendto_if_src+0x148>)
 801f100:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f104:	490a      	ldr	r1, [pc, #40]	; (801f130 <udp_sendto_if_src+0x164>)
 801f106:	f06f 070f 	mvn.w	r7, #15
 801f10a:	4804      	ldr	r0, [pc, #16]	; (801f11c <udp_sendto_if_src+0x150>)
 801f10c:	f005 f8fa 	bl	8024304 <iprintf>
 801f110:	e7a5      	b.n	801f05e <udp_sendto_if_src+0x92>
 801f112:	bf00      	nop
 801f114:	08043a2c 	.word	0x08043a2c
 801f118:	08043b98 	.word	0x08043b98
 801f11c:	08028ab4 	.word	0x08028ab4
 801f120:	08043b50 	.word	0x08043b50
 801f124:	08043b2c 	.word	0x08043b2c
 801f128:	08043b0c 	.word	0x08043b0c
 801f12c:	08043aec 	.word	0x08043aec
 801f130:	08043b74 	.word	0x08043b74

0801f134 <udp_sendto_if>:
{
 801f134:	b570      	push	{r4, r5, r6, lr}
 801f136:	b082      	sub	sp, #8
 801f138:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f13a:	2800      	cmp	r0, #0
 801f13c:	d036      	beq.n	801f1ac <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f13e:	b359      	cbz	r1, 801f198 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f140:	b302      	cbz	r2, 801f184 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f142:	b1ac      	cbz	r4, 801f170 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f144:	6805      	ldr	r5, [r0, #0]
 801f146:	b935      	cbnz	r5, 801f156 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801f148:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f14a:	e9cd 4500 	strd	r4, r5, [sp]
 801f14e:	f7ff ff3d 	bl	801efcc <udp_sendto_if_src>
}
 801f152:	b002      	add	sp, #8
 801f154:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f156:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f15a:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 801f15e:	d0f3      	beq.n	801f148 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f160:	6866      	ldr	r6, [r4, #4]
 801f162:	42b5      	cmp	r5, r6
 801f164:	d101      	bne.n	801f16a <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f166:	4605      	mov	r5, r0
 801f168:	e7ef      	b.n	801f14a <udp_sendto_if+0x16>
        return ERR_RTE;
 801f16a:	f06f 0003 	mvn.w	r0, #3
 801f16e:	e7f0      	b.n	801f152 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f170:	4b13      	ldr	r3, [pc, #76]	; (801f1c0 <udp_sendto_if+0x8c>)
 801f172:	f240 2283 	movw	r2, #643	; 0x283
 801f176:	4913      	ldr	r1, [pc, #76]	; (801f1c4 <udp_sendto_if+0x90>)
 801f178:	4813      	ldr	r0, [pc, #76]	; (801f1c8 <udp_sendto_if+0x94>)
 801f17a:	f005 f8c3 	bl	8024304 <iprintf>
 801f17e:	f06f 000f 	mvn.w	r0, #15
 801f182:	e7e6      	b.n	801f152 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f184:	4b0e      	ldr	r3, [pc, #56]	; (801f1c0 <udp_sendto_if+0x8c>)
 801f186:	f240 2282 	movw	r2, #642	; 0x282
 801f18a:	4910      	ldr	r1, [pc, #64]	; (801f1cc <udp_sendto_if+0x98>)
 801f18c:	480e      	ldr	r0, [pc, #56]	; (801f1c8 <udp_sendto_if+0x94>)
 801f18e:	f005 f8b9 	bl	8024304 <iprintf>
 801f192:	f06f 000f 	mvn.w	r0, #15
 801f196:	e7dc      	b.n	801f152 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f198:	4b09      	ldr	r3, [pc, #36]	; (801f1c0 <udp_sendto_if+0x8c>)
 801f19a:	f240 2281 	movw	r2, #641	; 0x281
 801f19e:	490c      	ldr	r1, [pc, #48]	; (801f1d0 <udp_sendto_if+0x9c>)
 801f1a0:	4809      	ldr	r0, [pc, #36]	; (801f1c8 <udp_sendto_if+0x94>)
 801f1a2:	f005 f8af 	bl	8024304 <iprintf>
 801f1a6:	f06f 000f 	mvn.w	r0, #15
 801f1aa:	e7d2      	b.n	801f152 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f1ac:	4b04      	ldr	r3, [pc, #16]	; (801f1c0 <udp_sendto_if+0x8c>)
 801f1ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f1b2:	4908      	ldr	r1, [pc, #32]	; (801f1d4 <udp_sendto_if+0xa0>)
 801f1b4:	4804      	ldr	r0, [pc, #16]	; (801f1c8 <udp_sendto_if+0x94>)
 801f1b6:	f005 f8a5 	bl	8024304 <iprintf>
 801f1ba:	f06f 000f 	mvn.w	r0, #15
 801f1be:	e7c8      	b.n	801f152 <udp_sendto_if+0x1e>
 801f1c0:	08043a2c 	.word	0x08043a2c
 801f1c4:	08043c20 	.word	0x08043c20
 801f1c8:	08028ab4 	.word	0x08028ab4
 801f1cc:	08043c00 	.word	0x08043c00
 801f1d0:	08043be4 	.word	0x08043be4
 801f1d4:	08043bc8 	.word	0x08043bc8

0801f1d8 <udp_sendto>:
{
 801f1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1dc:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f1de:	b388      	cbz	r0, 801f244 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f1e0:	460e      	mov	r6, r1
 801f1e2:	b329      	cbz	r1, 801f230 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f1e4:	4615      	mov	r5, r2
 801f1e6:	b1ca      	cbz	r2, 801f21c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f1e8:	4604      	mov	r4, r0
 801f1ea:	7a00      	ldrb	r0, [r0, #8]
 801f1ec:	4698      	mov	r8, r3
 801f1ee:	b168      	cbz	r0, 801f20c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 801f1f0:	f7fa fc98 	bl	8019b24 <netif_get_by_index>
 801f1f4:	4607      	mov	r7, r0
  if (netif == NULL) {
 801f1f6:	b177      	cbz	r7, 801f216 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f1f8:	4643      	mov	r3, r8
 801f1fa:	462a      	mov	r2, r5
 801f1fc:	4631      	mov	r1, r6
 801f1fe:	4620      	mov	r0, r4
 801f200:	9700      	str	r7, [sp, #0]
 801f202:	f7ff ff97 	bl	801f134 <udp_sendto_if>
}
 801f206:	b002      	add	sp, #8
 801f208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f20c:	4610      	mov	r0, r2
 801f20e:	f002 fbab 	bl	8021968 <ip4_route>
 801f212:	4607      	mov	r7, r0
 801f214:	e7ef      	b.n	801f1f6 <udp_sendto+0x1e>
    return ERR_RTE;
 801f216:	f06f 0003 	mvn.w	r0, #3
 801f21a:	e7f4      	b.n	801f206 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f21c:	4b0e      	ldr	r3, [pc, #56]	; (801f258 <udp_sendto+0x80>)
 801f21e:	f240 221a 	movw	r2, #538	; 0x21a
 801f222:	490e      	ldr	r1, [pc, #56]	; (801f25c <udp_sendto+0x84>)
 801f224:	480e      	ldr	r0, [pc, #56]	; (801f260 <udp_sendto+0x88>)
 801f226:	f005 f86d 	bl	8024304 <iprintf>
 801f22a:	f06f 000f 	mvn.w	r0, #15
 801f22e:	e7ea      	b.n	801f206 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f230:	4b09      	ldr	r3, [pc, #36]	; (801f258 <udp_sendto+0x80>)
 801f232:	f240 2219 	movw	r2, #537	; 0x219
 801f236:	490b      	ldr	r1, [pc, #44]	; (801f264 <udp_sendto+0x8c>)
 801f238:	4809      	ldr	r0, [pc, #36]	; (801f260 <udp_sendto+0x88>)
 801f23a:	f005 f863 	bl	8024304 <iprintf>
 801f23e:	f06f 000f 	mvn.w	r0, #15
 801f242:	e7e0      	b.n	801f206 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f244:	4b04      	ldr	r3, [pc, #16]	; (801f258 <udp_sendto+0x80>)
 801f246:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f24a:	4907      	ldr	r1, [pc, #28]	; (801f268 <udp_sendto+0x90>)
 801f24c:	4804      	ldr	r0, [pc, #16]	; (801f260 <udp_sendto+0x88>)
 801f24e:	f005 f859 	bl	8024304 <iprintf>
 801f252:	f06f 000f 	mvn.w	r0, #15
 801f256:	e7d6      	b.n	801f206 <udp_sendto+0x2e>
 801f258:	08043a2c 	.word	0x08043a2c
 801f25c:	08043c74 	.word	0x08043c74
 801f260:	08028ab4 	.word	0x08028ab4
 801f264:	08043c58 	.word	0x08043c58
 801f268:	08043c40 	.word	0x08043c40

0801f26c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f26c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801f26e:	b320      	cbz	r0, 801f2ba <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801f270:	460d      	mov	r5, r1
 801f272:	b361      	cbz	r1, 801f2ce <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801f274:	4616      	mov	r6, r2
 801f276:	8a42      	ldrh	r2, [r0, #18]
 801f278:	4604      	mov	r4, r0
 801f27a:	b1c2      	cbz	r2, 801f2ae <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801f27c:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f27e:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f280:	4918      	ldr	r1, [pc, #96]	; (801f2e4 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f282:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801f286:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f288:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801f28a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801f28c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f28e:	b142      	cbz	r2, 801f2a2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801f290:	4294      	cmp	r4, r2
 801f292:	d00a      	beq.n	801f2aa <udp_connect+0x3e>
 801f294:	4613      	mov	r3, r2
 801f296:	e001      	b.n	801f29c <udp_connect+0x30>
 801f298:	429c      	cmp	r4, r3
 801f29a:	d006      	beq.n	801f2aa <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f29c:	68db      	ldr	r3, [r3, #12]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d1fa      	bne.n	801f298 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801f2a2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801f2a4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801f2a6:	600c      	str	r4, [r1, #0]
}
 801f2a8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801f2aa:	2000      	movs	r0, #0
}
 801f2ac:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f2ae:	4601      	mov	r1, r0
 801f2b0:	f7ff fe0e 	bl	801eed0 <udp_bind>
    if (err != ERR_OK) {
 801f2b4:	2800      	cmp	r0, #0
 801f2b6:	d0e1      	beq.n	801f27c <udp_connect+0x10>
}
 801f2b8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801f2ba:	4b0b      	ldr	r3, [pc, #44]	; (801f2e8 <udp_connect+0x7c>)
 801f2bc:	f240 4235 	movw	r2, #1077	; 0x435
 801f2c0:	490a      	ldr	r1, [pc, #40]	; (801f2ec <udp_connect+0x80>)
 801f2c2:	480b      	ldr	r0, [pc, #44]	; (801f2f0 <udp_connect+0x84>)
 801f2c4:	f005 f81e 	bl	8024304 <iprintf>
 801f2c8:	f06f 000f 	mvn.w	r0, #15
}
 801f2cc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801f2ce:	4b06      	ldr	r3, [pc, #24]	; (801f2e8 <udp_connect+0x7c>)
 801f2d0:	f240 4236 	movw	r2, #1078	; 0x436
 801f2d4:	4907      	ldr	r1, [pc, #28]	; (801f2f4 <udp_connect+0x88>)
 801f2d6:	4806      	ldr	r0, [pc, #24]	; (801f2f0 <udp_connect+0x84>)
 801f2d8:	f005 f814 	bl	8024304 <iprintf>
 801f2dc:	f06f 000f 	mvn.w	r0, #15
}
 801f2e0:	bd70      	pop	{r4, r5, r6, pc}
 801f2e2:	bf00      	nop
 801f2e4:	2002dc34 	.word	0x2002dc34
 801f2e8:	08043a2c 	.word	0x08043a2c
 801f2ec:	08043c90 	.word	0x08043c90
 801f2f0:	08028ab4 	.word	0x08028ab4
 801f2f4:	08043cac 	.word	0x08043cac

0801f2f8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f2f8:	b110      	cbz	r0, 801f300 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801f2fa:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801f2fe:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f300:	4b03      	ldr	r3, [pc, #12]	; (801f310 <udp_recv+0x18>)
 801f302:	f240 428a 	movw	r2, #1162	; 0x48a
 801f306:	4903      	ldr	r1, [pc, #12]	; (801f314 <udp_recv+0x1c>)
 801f308:	4803      	ldr	r0, [pc, #12]	; (801f318 <udp_recv+0x20>)
 801f30a:	f004 bffb 	b.w	8024304 <iprintf>
 801f30e:	bf00      	nop
 801f310:	08043a2c 	.word	0x08043a2c
 801f314:	08043cc8 	.word	0x08043cc8
 801f318:	08028ab4 	.word	0x08028ab4

0801f31c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f31c:	4601      	mov	r1, r0
 801f31e:	b1c0      	cbz	r0, 801f352 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f320:	4b0f      	ldr	r3, [pc, #60]	; (801f360 <udp_remove+0x44>)
 801f322:	681a      	ldr	r2, [r3, #0]
 801f324:	4282      	cmp	r2, r0
 801f326:	d00a      	beq.n	801f33e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f328:	b132      	cbz	r2, 801f338 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f32a:	68d3      	ldr	r3, [r2, #12]
 801f32c:	428b      	cmp	r3, r1
 801f32e:	d100      	bne.n	801f332 <udp_remove+0x16>
 801f330:	b953      	cbnz	r3, 801f348 <udp_remove+0x2c>
 801f332:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f334:	2a00      	cmp	r2, #0
 801f336:	d1f8      	bne.n	801f32a <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f338:	2001      	movs	r0, #1
 801f33a:	f7fa ba01 	b.w	8019740 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801f33e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f340:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801f342:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801f344:	f7fa b9fc 	b.w	8019740 <memp_free>
        pcb2->next = pcb->next;
 801f348:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f34a:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801f34c:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801f34e:	f7fa b9f7 	b.w	8019740 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f352:	4b04      	ldr	r3, [pc, #16]	; (801f364 <udp_remove+0x48>)
 801f354:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f358:	4903      	ldr	r1, [pc, #12]	; (801f368 <udp_remove+0x4c>)
 801f35a:	4804      	ldr	r0, [pc, #16]	; (801f36c <udp_remove+0x50>)
 801f35c:	f004 bfd2 	b.w	8024304 <iprintf>
 801f360:	2002dc34 	.word	0x2002dc34
 801f364:	08043a2c 	.word	0x08043a2c
 801f368:	08043ce0 	.word	0x08043ce0
 801f36c:	08028ab4 	.word	0x08028ab4

0801f370 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f370:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f372:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f376:	4907      	ldr	r1, [pc, #28]	; (801f394 <udp_new+0x24>)
 801f378:	2001      	movs	r0, #1
 801f37a:	f7fa f9ab 	bl	80196d4 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f37e:	4604      	mov	r4, r0
 801f380:	b128      	cbz	r0, 801f38e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f382:	2220      	movs	r2, #32
 801f384:	2100      	movs	r1, #0
 801f386:	f004 f81f 	bl	80233c8 <memset>
    pcb->ttl = UDP_TTL;
 801f38a:	23ff      	movs	r3, #255	; 0xff
 801f38c:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801f38e:	4620      	mov	r0, r4
 801f390:	bd10      	pop	{r4, pc}
 801f392:	bf00      	nop
 801f394:	08043a2c 	.word	0x08043a2c

0801f398 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801f398:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f39a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f39e:	4907      	ldr	r1, [pc, #28]	; (801f3bc <udp_new_ip_type+0x24>)
 801f3a0:	2001      	movs	r0, #1
 801f3a2:	f7fa f997 	bl	80196d4 <memp_malloc_fn>
  if (pcb != NULL) {
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	b128      	cbz	r0, 801f3b6 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f3aa:	2220      	movs	r2, #32
 801f3ac:	2100      	movs	r1, #0
 801f3ae:	f004 f80b 	bl	80233c8 <memset>
    pcb->ttl = UDP_TTL;
 801f3b2:	23ff      	movs	r3, #255	; 0xff
 801f3b4:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 801f3b6:	4620      	mov	r0, r4
 801f3b8:	bd10      	pop	{r4, pc}
 801f3ba:	bf00      	nop
 801f3bc:	08043a2c 	.word	0x08043a2c

0801f3c0 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f3c0:	b110      	cbz	r0, 801f3c8 <udp_netif_ip_addr_changed+0x8>
 801f3c2:	6802      	ldr	r2, [r0, #0]
 801f3c4:	b101      	cbz	r1, 801f3c8 <udp_netif_ip_addr_changed+0x8>
 801f3c6:	b902      	cbnz	r2, 801f3ca <udp_netif_ip_addr_changed+0xa>
 801f3c8:	4770      	bx	lr
 801f3ca:	680b      	ldr	r3, [r1, #0]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d0fb      	beq.n	801f3c8 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f3d0:	4b08      	ldr	r3, [pc, #32]	; (801f3f4 <udp_netif_ip_addr_changed+0x34>)
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d0f7      	beq.n	801f3c8 <udp_netif_ip_addr_changed+0x8>
{
 801f3d8:	b410      	push	{r4}
 801f3da:	e000      	b.n	801f3de <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f3dc:	6802      	ldr	r2, [r0, #0]
 801f3de:	681c      	ldr	r4, [r3, #0]
 801f3e0:	4294      	cmp	r4, r2
 801f3e2:	d101      	bne.n	801f3e8 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f3e4:	680a      	ldr	r2, [r1, #0]
 801f3e6:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f3e8:	68db      	ldr	r3, [r3, #12]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d1f6      	bne.n	801f3dc <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801f3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3f2:	4770      	bx	lr
 801f3f4:	2002dc34 	.word	0x2002dc34

0801f3f8 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f3fa:	1d07      	adds	r7, r0, #4
{
 801f3fc:	4604      	mov	r4, r0
 801f3fe:	460d      	mov	r5, r1
 801f400:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f402:	2f44      	cmp	r7, #68	; 0x44
 801f404:	d80e      	bhi.n	801f424 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801f406:	0e33      	lsrs	r3, r6, #24
 801f408:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f40a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801f40c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f40e:	b292      	uxth	r2, r2
 801f410:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f412:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801f414:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f416:	0a32      	lsrs	r2, r6, #8
 801f418:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801f41a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801f41c:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 801f41e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801f420:	552e      	strb	r6, [r5, r4]
}
 801f422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801f424:	4b03      	ldr	r3, [pc, #12]	; (801f434 <dhcp_option_long+0x3c>)
 801f426:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801f42a:	4903      	ldr	r1, [pc, #12]	; (801f438 <dhcp_option_long+0x40>)
 801f42c:	4803      	ldr	r0, [pc, #12]	; (801f43c <dhcp_option_long+0x44>)
 801f42e:	f004 ff69 	bl	8024304 <iprintf>
 801f432:	e7e8      	b.n	801f406 <dhcp_option_long+0xe>
 801f434:	08043cf8 	.word	0x08043cf8
 801f438:	08043d30 	.word	0x08043d30
 801f43c:	08028ab4 	.word	0x08028ab4

0801f440 <dhcp_check>:
{
 801f440:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f442:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801f444:	7963      	ldrb	r3, [r4, #5]
 801f446:	2b08      	cmp	r3, #8
 801f448:	d004      	beq.n	801f454 <dhcp_check+0x14>
    dhcp->tries = 0;
 801f44a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f44c:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801f44e:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801f450:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801f452:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801f454:	2200      	movs	r2, #0
 801f456:	f104 011c 	add.w	r1, r4, #28
 801f45a:	f001 ffab 	bl	80213b4 <etharp_query>
  if (dhcp->tries < 255) {
 801f45e:	79a3      	ldrb	r3, [r4, #6]
 801f460:	2bff      	cmp	r3, #255	; 0xff
 801f462:	d001      	beq.n	801f468 <dhcp_check+0x28>
    dhcp->tries++;
 801f464:	3301      	adds	r3, #1
 801f466:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f468:	2301      	movs	r3, #1
 801f46a:	8123      	strh	r3, [r4, #8]
}
 801f46c:	bd10      	pop	{r4, pc}
 801f46e:	bf00      	nop

0801f470 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801f470:	2800      	cmp	r0, #0
 801f472:	f000 808e 	beq.w	801f592 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 801f476:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801f478:	2900      	cmp	r1, #0
 801f47a:	f000 8091 	beq.w	801f5a0 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f47e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801f480:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f482:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 801f486:	b500      	push	{lr}
  dhcp->lease_used = 0;
 801f488:	824a      	strh	r2, [r1, #18]
{
 801f48a:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801f48c:	d00e      	beq.n	801f4ac <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f48e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801f490:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801f494:	d258      	bcs.n	801f548 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f496:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801f49a:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f49c:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801f4a0:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801f4a4:	f200 8083 	bhi.w	801f5ae <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801f4ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801f4ae:	1c5a      	adds	r2, r3, #1
 801f4b0:	d050      	beq.n	801f554 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4b2:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801f4b4:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801f4b8:	d241      	bcs.n	801f53e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4ba:	4a40      	ldr	r2, [pc, #256]	; (801f5bc <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 801f4bc:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4be:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801f4c2:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 801f4c6:	d874      	bhi.n	801f5b2 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 801f4c8:	2301      	movs	r3, #1
 801f4ca:	469c      	mov	ip, r3
 801f4cc:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f4ce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801f4d0:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f4d4:	1c53      	adds	r3, r2, #1
 801f4d6:	d042      	beq.n	801f55e <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4d8:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 801f4da:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 801f4de:	d24b      	bcs.n	801f578 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4e0:	4b36      	ldr	r3, [pc, #216]	; (801f5bc <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 801f4e2:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801f4e4:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 801f4e8:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801f4ec:	d864      	bhi.n	801f5b8 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 801f4ee:	2201      	movs	r2, #1
 801f4f0:	4613      	mov	r3, r2
 801f4f2:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801f4f4:	2201      	movs	r2, #1
 801f4f6:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f4f8:	459c      	cmp	ip, r3
 801f4fa:	d302      	bcc.n	801f502 <dhcp_bind+0x92>
 801f4fc:	b10a      	cbz	r2, 801f502 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 801f4fe:	2300      	movs	r3, #0
 801f500:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801f502:	79cb      	ldrb	r3, [r1, #7]
 801f504:	2b00      	cmp	r3, #0
 801f506:	d02f      	beq.n	801f568 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801f508:	6a0b      	ldr	r3, [r1, #32]
 801f50a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801f50c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801f50e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801f510:	b92b      	cbnz	r3, 801f51e <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801f512:	69cb      	ldr	r3, [r1, #28]
 801f514:	9a00      	ldr	r2, [sp, #0]
 801f516:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801f518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801f51c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801f51e:	794b      	ldrb	r3, [r1, #5]
 801f520:	2b0a      	cmp	r3, #10
 801f522:	d004      	beq.n	801f52e <dhcp_bind+0xbe>
    dhcp->tries = 0;
 801f524:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f526:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801f528:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801f52a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801f52c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801f52e:	ab01      	add	r3, sp, #4
 801f530:	466a      	mov	r2, sp
 801f532:	311c      	adds	r1, #28
 801f534:	f7fa f982 	bl	801983c <netif_set_addr>
}
 801f538:	b003      	add	sp, #12
 801f53a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 801f53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f542:	469c      	mov	ip, r3
 801f544:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801f546:	e7c2      	b.n	801f4ce <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 801f548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f54c:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801f54e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801f550:	1c5a      	adds	r2, r3, #1
 801f552:	d1ae      	bne.n	801f4b2 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f554:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f556:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801f55a:	1c53      	adds	r3, r2, #1
 801f55c:	d1bc      	bne.n	801f4d8 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801f55e:	898b      	ldrh	r3, [r1, #12]
 801f560:	1e1a      	subs	r2, r3, #0
 801f562:	bf18      	it	ne
 801f564:	2201      	movne	r2, #1
 801f566:	e7c7      	b.n	801f4f8 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 801f568:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801f56c:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801f56e:	2b00      	cmp	r3, #0
 801f570:	db07      	blt.n	801f582 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801f572:	23ff      	movs	r3, #255	; 0xff
 801f574:	9300      	str	r3, [sp, #0]
 801f576:	e7c9      	b.n	801f50c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 801f578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f57c:	4613      	mov	r3, r2
 801f57e:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801f580:	e7b8      	b.n	801f4f4 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 801f582:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801f584:	bf8c      	ite	hi
 801f586:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801f58a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801f58e:	9300      	str	r3, [sp, #0]
 801f590:	e7bc      	b.n	801f50c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801f592:	4b0b      	ldr	r3, [pc, #44]	; (801f5c0 <dhcp_bind+0x150>)
 801f594:	f240 4215 	movw	r2, #1045	; 0x415
 801f598:	490a      	ldr	r1, [pc, #40]	; (801f5c4 <dhcp_bind+0x154>)
 801f59a:	480b      	ldr	r0, [pc, #44]	; (801f5c8 <dhcp_bind+0x158>)
 801f59c:	f004 beb2 	b.w	8024304 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801f5a0:	4b07      	ldr	r3, [pc, #28]	; (801f5c0 <dhcp_bind+0x150>)
 801f5a2:	f240 4217 	movw	r2, #1047	; 0x417
 801f5a6:	4909      	ldr	r1, [pc, #36]	; (801f5cc <dhcp_bind+0x15c>)
 801f5a8:	4807      	ldr	r0, [pc, #28]	; (801f5c8 <dhcp_bind+0x158>)
 801f5aa:	f004 beab 	b.w	8024304 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 801f5ae:	828a      	strh	r2, [r1, #20]
 801f5b0:	e77c      	b.n	801f4ac <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 801f5b2:	f8a1 c00a 	strh.w	ip, [r1, #10]
 801f5b6:	e78a      	b.n	801f4ce <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 801f5b8:	818b      	strh	r3, [r1, #12]
 801f5ba:	e79b      	b.n	801f4f4 <dhcp_bind+0x84>
 801f5bc:	88888889 	.word	0x88888889
 801f5c0:	08043cf8 	.word	0x08043cf8
 801f5c4:	08043d6c 	.word	0x08043d6c
 801f5c8:	08028ab4 	.word	0x08028ab4
 801f5cc:	08043d88 	.word	0x08043d88

0801f5d0 <dhcp_inc_pcb_refcount>:
{
 801f5d0:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 801f5d2:	4c15      	ldr	r4, [pc, #84]	; (801f628 <dhcp_inc_pcb_refcount+0x58>)
 801f5d4:	7823      	ldrb	r3, [r4, #0]
 801f5d6:	b9fb      	cbnz	r3, 801f618 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801f5d8:	4d14      	ldr	r5, [pc, #80]	; (801f62c <dhcp_inc_pcb_refcount+0x5c>)
 801f5da:	682b      	ldr	r3, [r5, #0]
 801f5dc:	b12b      	cbz	r3, 801f5ea <dhcp_inc_pcb_refcount+0x1a>
 801f5de:	4b14      	ldr	r3, [pc, #80]	; (801f630 <dhcp_inc_pcb_refcount+0x60>)
 801f5e0:	22e5      	movs	r2, #229	; 0xe5
 801f5e2:	4914      	ldr	r1, [pc, #80]	; (801f634 <dhcp_inc_pcb_refcount+0x64>)
 801f5e4:	4814      	ldr	r0, [pc, #80]	; (801f638 <dhcp_inc_pcb_refcount+0x68>)
 801f5e6:	f004 fe8d 	bl	8024304 <iprintf>
    dhcp_pcb = udp_new();
 801f5ea:	f7ff fec1 	bl	801f370 <udp_new>
 801f5ee:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801f5f0:	b1b0      	cbz	r0, 801f620 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801f5f2:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801f5f4:	4911      	ldr	r1, [pc, #68]	; (801f63c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801f5f6:	f042 0220 	orr.w	r2, r2, #32
 801f5fa:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801f5fc:	2244      	movs	r2, #68	; 0x44
 801f5fe:	f7ff fc67 	bl	801eed0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801f602:	2243      	movs	r2, #67	; 0x43
 801f604:	490d      	ldr	r1, [pc, #52]	; (801f63c <dhcp_inc_pcb_refcount+0x6c>)
 801f606:	6828      	ldr	r0, [r5, #0]
 801f608:	f7ff fe30 	bl	801f26c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801f60c:	2200      	movs	r2, #0
 801f60e:	490c      	ldr	r1, [pc, #48]	; (801f640 <dhcp_inc_pcb_refcount+0x70>)
 801f610:	6828      	ldr	r0, [r5, #0]
 801f612:	f7ff fe71 	bl	801f2f8 <udp_recv>
  dhcp_pcb_refcount++;
 801f616:	7823      	ldrb	r3, [r4, #0]
 801f618:	3301      	adds	r3, #1
  return ERR_OK;
 801f61a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801f61c:	7023      	strb	r3, [r4, #0]
}
 801f61e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 801f620:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f624:	bd38      	pop	{r3, r4, r5, pc}
 801f626:	bf00      	nop
 801f628:	2002dc3c 	.word	0x2002dc3c
 801f62c:	2002dc38 	.word	0x2002dc38
 801f630:	08043cf8 	.word	0x08043cf8
 801f634:	08043da0 	.word	0x08043da0
 801f638:	08028ab4 	.word	0x08028ab4
 801f63c:	080443ac 	.word	0x080443ac
 801f640:	0801fee9 	.word	0x0801fee9

0801f644 <dhcp_dec_pcb_refcount>:
{
 801f644:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801f646:	4d0b      	ldr	r5, [pc, #44]	; (801f674 <dhcp_dec_pcb_refcount+0x30>)
 801f648:	782c      	ldrb	r4, [r5, #0]
 801f64a:	b154      	cbz	r4, 801f662 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801f64c:	3c01      	subs	r4, #1
 801f64e:	b2e4      	uxtb	r4, r4
 801f650:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801f652:	b104      	cbz	r4, 801f656 <dhcp_dec_pcb_refcount+0x12>
}
 801f654:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801f656:	4d08      	ldr	r5, [pc, #32]	; (801f678 <dhcp_dec_pcb_refcount+0x34>)
 801f658:	6828      	ldr	r0, [r5, #0]
 801f65a:	f7ff fe5f 	bl	801f31c <udp_remove>
    dhcp_pcb = NULL;
 801f65e:	602c      	str	r4, [r5, #0]
}
 801f660:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801f662:	4b06      	ldr	r3, [pc, #24]	; (801f67c <dhcp_dec_pcb_refcount+0x38>)
 801f664:	22ff      	movs	r2, #255	; 0xff
 801f666:	4906      	ldr	r1, [pc, #24]	; (801f680 <dhcp_dec_pcb_refcount+0x3c>)
 801f668:	4806      	ldr	r0, [pc, #24]	; (801f684 <dhcp_dec_pcb_refcount+0x40>)
 801f66a:	f004 fe4b 	bl	8024304 <iprintf>
  dhcp_pcb_refcount--;
 801f66e:	782c      	ldrb	r4, [r5, #0]
 801f670:	e7ec      	b.n	801f64c <dhcp_dec_pcb_refcount+0x8>
 801f672:	bf00      	nop
 801f674:	2002dc3c 	.word	0x2002dc3c
 801f678:	2002dc38 	.word	0x2002dc38
 801f67c:	08043cf8 	.word	0x08043cf8
 801f680:	08043dc8 	.word	0x08043dc8
 801f684:	08028ab4 	.word	0x08028ab4

0801f688 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801f688:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f68a:	4d29      	ldr	r5, [pc, #164]	; (801f730 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801f68c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801f68e:	b083      	sub	sp, #12
 801f690:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f692:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801f694:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801f698:	b112      	cbz	r2, 801f6a0 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801f69a:	4b26      	ldr	r3, [pc, #152]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f69c:	68db      	ldr	r3, [r3, #12]
 801f69e:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801f6a0:	792b      	ldrb	r3, [r5, #4]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d041      	beq.n	801f72a <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801f6a6:	4b23      	ldr	r3, [pc, #140]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f6a8:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801f6aa:	796a      	ldrb	r2, [r5, #5]
 801f6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f6ae:	b312      	cbz	r2, 801f6f6 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801f6b0:	4b20      	ldr	r3, [pc, #128]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f6b2:	695b      	ldr	r3, [r3, #20]
 801f6b4:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f6b6:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f6b8:	690a      	ldr	r2, [r1, #16]
 801f6ba:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f6bc:	bb2b      	cbnz	r3, 801f70a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 801f6be:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801f6c0:	79eb      	ldrb	r3, [r5, #7]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d12b      	bne.n	801f71e <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801f6c6:	7a2b      	ldrb	r3, [r5, #8]
 801f6c8:	b19b      	cbz	r3, 801f6f2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f6ca:	4c1a      	ldr	r4, [pc, #104]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f6cc:	6a20      	ldr	r0, [r4, #32]
 801f6ce:	f7f8 fd17 	bl	8018100 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 801f6d2:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f6d4:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 801f6d6:	2000      	movs	r0, #0
 801f6d8:	f7f9 f8b8 	bl	801884c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801f6dc:	7a6b      	ldrb	r3, [r5, #9]
 801f6de:	b143      	cbz	r3, 801f6f2 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f6e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f6e2:	f7f8 fd0d 	bl	8018100 <lwip_htonl>
 801f6e6:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801f6e8:	a901      	add	r1, sp, #4
 801f6ea:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801f6ec:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801f6ee:	f7f9 f8ad 	bl	801884c <dns_setserver>
}
 801f6f2:	b003      	add	sp, #12
 801f6f4:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801f6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f6f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f6fc:	08db      	lsrs	r3, r3, #3
 801f6fe:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f700:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f702:	690a      	ldr	r2, [r1, #16]
 801f704:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801f706:	2b00      	cmp	r3, #0
 801f708:	d0d9      	beq.n	801f6be <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801f70a:	4b0a      	ldr	r3, [pc, #40]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f70c:	6998      	ldr	r0, [r3, #24]
 801f70e:	f7f8 fcf7 	bl	8018100 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801f712:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801f714:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801f716:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801f718:	79eb      	ldrb	r3, [r5, #7]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d0d3      	beq.n	801f6c6 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801f71e:	4b05      	ldr	r3, [pc, #20]	; (801f734 <dhcp_handle_ack.isra.0+0xac>)
 801f720:	69d8      	ldr	r0, [r3, #28]
 801f722:	f7f8 fced 	bl	8018100 <lwip_htonl>
 801f726:	6260      	str	r0, [r4, #36]	; 0x24
 801f728:	e7cd      	b.n	801f6c6 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801f72a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f72c:	085b      	lsrs	r3, r3, #1
 801f72e:	e7bc      	b.n	801f6aa <dhcp_handle_ack.isra.0+0x22>
 801f730:	2002dc40 	.word	0x2002dc40
 801f734:	2002dc4c 	.word	0x2002dc4c

0801f738 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801f738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f73c:	4681      	mov	r9, r0
 801f73e:	2800      	cmp	r0, #0
 801f740:	f000 8097 	beq.w	801f872 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f744:	460c      	mov	r4, r1
 801f746:	2900      	cmp	r1, #0
 801f748:	f000 808a 	beq.w	801f860 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801f74c:	4616      	mov	r6, r2
 801f74e:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f752:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f756:	2036      	movs	r0, #54	; 0x36
 801f758:	461f      	mov	r7, r3
 801f75a:	f7fa fb37 	bl	8019dcc <pbuf_alloc>
  if (p_out == NULL) {
 801f75e:	4605      	mov	r5, r0
 801f760:	2800      	cmp	r0, #0
 801f762:	d049      	beq.n	801f7f8 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f764:	8943      	ldrh	r3, [r0, #10]
 801f766:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801f76a:	d371      	bcc.n	801f850 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f76c:	2e03      	cmp	r6, #3
 801f76e:	d051      	beq.n	801f814 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801f770:	79a3      	ldrb	r3, [r4, #6]
 801f772:	2b00      	cmp	r3, #0
 801f774:	d043      	beq.n	801f7fe <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801f776:	4b43      	ldr	r3, [pc, #268]	; (801f884 <dhcp_create_msg+0x14c>)
 801f778:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801f77a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f77e:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f782:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801f784:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f786:	4640      	mov	r0, r8
 801f788:	f003 fe1e 	bl	80233c8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801f78c:	2301      	movs	r3, #1
 801f78e:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f792:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f796:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 801f79a:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f79e:	6820      	ldr	r0, [r4, #0]
 801f7a0:	f7f8 fcae 	bl	8018100 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f7a4:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f7a6:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f7aa:	d12d      	bne.n	801f808 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801f7ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f7b0:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f7b4:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 801f7b8:	f109 0434 	add.w	r4, r9, #52	; 0x34
 801f7bc:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f7c0:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f7c4:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801f7c6:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801f7ca:	d1f9      	bne.n	801f7c0 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f7cc:	2363      	movs	r3, #99	; 0x63
 801f7ce:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 801f7d2:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f7d6:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 801f7da:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 801f7de:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f7e0:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 801f7e4:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 801f7e6:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801f7ea:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801f7ec:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 801f7f0:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801f7f4:	2303      	movs	r3, #3
 801f7f6:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 801f7f8:	4628      	mov	r0, r5
 801f7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 801f7fe:	f004 fe25 	bl	802444c <rand>
 801f802:	4b20      	ldr	r3, [pc, #128]	; (801f884 <dhcp_create_msg+0x14c>)
 801f804:	6018      	str	r0, [r3, #0]
 801f806:	e7b8      	b.n	801f77a <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801f808:	1ff3      	subs	r3, r6, #7
 801f80a:	2b01      	cmp	r3, #1
 801f80c:	d9ce      	bls.n	801f7ac <dhcp_create_msg+0x74>
 801f80e:	2e03      	cmp	r6, #3
 801f810:	d1d0      	bne.n	801f7b4 <dhcp_create_msg+0x7c>
 801f812:	e018      	b.n	801f846 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801f814:	7963      	ldrb	r3, [r4, #5]
 801f816:	2b03      	cmp	r3, #3
 801f818:	d0aa      	beq.n	801f770 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801f81a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801f81e:	f44f 729a 	mov.w	r2, #308	; 0x134
 801f822:	2100      	movs	r1, #0
 801f824:	4640      	mov	r0, r8
 801f826:	f003 fdcf 	bl	80233c8 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801f82a:	2301      	movs	r3, #1
 801f82c:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801f830:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 801f834:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 801f838:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801f83c:	6820      	ldr	r0, [r4, #0]
 801f83e:	f7f8 fc5f 	bl	8018100 <lwip_htonl>
 801f842:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801f846:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801f848:	3b04      	subs	r3, #4
 801f84a:	2b01      	cmp	r3, #1
 801f84c:	d8b2      	bhi.n	801f7b4 <dhcp_create_msg+0x7c>
 801f84e:	e7ad      	b.n	801f7ac <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801f850:	4b0d      	ldr	r3, [pc, #52]	; (801f888 <dhcp_create_msg+0x150>)
 801f852:	f240 7271 	movw	r2, #1905	; 0x771
 801f856:	490d      	ldr	r1, [pc, #52]	; (801f88c <dhcp_create_msg+0x154>)
 801f858:	480d      	ldr	r0, [pc, #52]	; (801f890 <dhcp_create_msg+0x158>)
 801f85a:	f004 fd53 	bl	8024304 <iprintf>
 801f85e:	e785      	b.n	801f76c <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801f860:	4b09      	ldr	r3, [pc, #36]	; (801f888 <dhcp_create_msg+0x150>)
 801f862:	f240 726a 	movw	r2, #1898	; 0x76a
 801f866:	490b      	ldr	r1, [pc, #44]	; (801f894 <dhcp_create_msg+0x15c>)
 801f868:	4625      	mov	r5, r4
 801f86a:	4809      	ldr	r0, [pc, #36]	; (801f890 <dhcp_create_msg+0x158>)
 801f86c:	f004 fd4a 	bl	8024304 <iprintf>
 801f870:	e7c2      	b.n	801f7f8 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801f872:	4b05      	ldr	r3, [pc, #20]	; (801f888 <dhcp_create_msg+0x150>)
 801f874:	f240 7269 	movw	r2, #1897	; 0x769
 801f878:	4907      	ldr	r1, [pc, #28]	; (801f898 <dhcp_create_msg+0x160>)
 801f87a:	464d      	mov	r5, r9
 801f87c:	4804      	ldr	r0, [pc, #16]	; (801f890 <dhcp_create_msg+0x158>)
 801f87e:	f004 fd41 	bl	8024304 <iprintf>
 801f882:	e7b9      	b.n	801f7f8 <dhcp_create_msg+0xc0>
 801f884:	2002dc74 	.word	0x2002dc74
 801f888:	08043cf8 	.word	0x08043cf8
 801f88c:	08043e2c 	.word	0x08043e2c
 801f890:	08028ab4 	.word	0x08028ab4
 801f894:	08043e0c 	.word	0x08043e0c
 801f898:	08043dec 	.word	0x08043dec

0801f89c <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 801f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f8a0:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 801f8a4:	b087      	sub	sp, #28
 801f8a6:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 801f8a8:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801f8ac:	2b03      	cmp	r3, #3
 801f8ae:	d007      	beq.n	801f8c0 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 801f8b0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f8b2:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801f8b4:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 801f8b8:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 801f8bc:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801f8c0:	f10d 0316 	add.w	r3, sp, #22
 801f8c4:	2203      	movs	r2, #3
 801f8c6:	4651      	mov	r1, sl
 801f8c8:	4648      	mov	r0, r9
 801f8ca:	f7ff ff35 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 801f8ce:	4607      	mov	r7, r0
 801f8d0:	2800      	cmp	r0, #0
 801f8d2:	f000 808d 	beq.w	801f9f0 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f8d6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f8da:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f8dc:	f104 0804 	add.w	r8, r4, #4
 801f8e0:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f8e2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f8e4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801f8e8:	f200 80a3 	bhi.w	801fa32 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 801f8ec:	2239      	movs	r2, #57	; 0x39
 801f8ee:	1c63      	adds	r3, r4, #1
 801f8f0:	fa1f fb85 	uxth.w	fp, r5
 801f8f4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 801f8f6:	b29b      	uxth	r3, r3
 801f8f8:	2202      	movs	r2, #2
 801f8fa:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801f8fc:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f900:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801f904:	2b44      	cmp	r3, #68	; 0x44
 801f906:	f200 80ac 	bhi.w	801fa62 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801f90a:	2202      	movs	r2, #2
 801f90c:	1ce3      	adds	r3, r4, #3
 801f90e:	fa1f f588 	uxth.w	r5, r8
 801f912:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801f916:	b29b      	uxth	r3, r3
 801f918:	2240      	movs	r2, #64	; 0x40
 801f91a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f91c:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801f91e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f922:	2b44      	cmp	r3, #68	; 0x44
 801f924:	f200 8095 	bhi.w	801fa52 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 801f928:	1d63      	adds	r3, r4, #5
 801f92a:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 801f92c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 801f92e:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 801f930:	b29b      	uxth	r3, r3
 801f932:	2204      	movs	r2, #4
 801f934:	b2a4      	uxth	r4, r4
 801f936:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f938:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801f93c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f940:	f7f8 fbde 	bl	8018100 <lwip_htonl>
 801f944:	4631      	mov	r1, r6
 801f946:	4602      	mov	r2, r0
 801f948:	4620      	mov	r0, r4
 801f94a:	f7ff fd55 	bl	801f3f8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f94e:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f950:	4605      	mov	r5, r0
 801f952:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801f956:	2b44      	cmp	r3, #68	; 0x44
 801f958:	9303      	str	r3, [sp, #12]
 801f95a:	d872      	bhi.n	801fa42 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 801f95c:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 801f95e:	2237      	movs	r2, #55	; 0x37
 801f960:	1c6b      	adds	r3, r5, #1
 801f962:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801fa98 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 801f966:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 801f968:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 801f96a:	b29b      	uxth	r3, r3
 801f96c:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f96e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f970:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 801f974:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f976:	493f      	ldr	r1, [pc, #252]	; (801fa74 <dhcp_reboot.isra.0+0x1d8>)
 801f978:	4b3f      	ldr	r3, [pc, #252]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f97a:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f97e:	d80c      	bhi.n	801f99a <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 801f980:	1c62      	adds	r2, r4, #1
 801f982:	f806 b004 	strb.w	fp, [r6, r4]
 801f986:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f988:	4a3c      	ldr	r2, [pc, #240]	; (801fa7c <dhcp_reboot.isra.0+0x1e0>)
 801f98a:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f98c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f990:	d00b      	beq.n	801f9aa <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f992:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f994:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f998:	d9f2      	bls.n	801f980 <dhcp_reboot.isra.0+0xe4>
 801f99a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801f99e:	4838      	ldr	r0, [pc, #224]	; (801fa80 <dhcp_reboot.isra.0+0x1e4>)
 801f9a0:	f004 fcb0 	bl	8024304 <iprintf>
 801f9a4:	4b34      	ldr	r3, [pc, #208]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
 801f9a6:	4933      	ldr	r1, [pc, #204]	; (801fa74 <dhcp_reboot.isra.0+0x1d8>)
 801f9a8:	e7ea      	b.n	801f980 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 801f9aa:	1de8      	adds	r0, r5, #7
 801f9ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f9b0:	22ff      	movs	r2, #255	; 0xff
 801f9b2:	b280      	uxth	r0, r0
 801f9b4:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801f9b6:	2843      	cmp	r0, #67	; 0x43
 801f9b8:	d808      	bhi.n	801f9cc <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801f9ba:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 801f9be:	4430      	add	r0, r6
 801f9c0:	2100      	movs	r1, #0
 801f9c2:	b2ad      	uxth	r5, r5
 801f9c4:	1c6a      	adds	r2, r5, #1
 801f9c6:	f003 fcff 	bl	80233c8 <memset>
 801f9ca:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801f9cc:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801f9d0:	4638      	mov	r0, r7
 801f9d2:	b289      	uxth	r1, r1
 801f9d4:	f7fa fab4 	bl	8019f40 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801f9d8:	482a      	ldr	r0, [pc, #168]	; (801fa84 <dhcp_reboot.isra.0+0x1e8>)
 801f9da:	2343      	movs	r3, #67	; 0x43
 801f9dc:	4a2a      	ldr	r2, [pc, #168]	; (801fa88 <dhcp_reboot.isra.0+0x1ec>)
 801f9de:	6800      	ldr	r0, [r0, #0]
 801f9e0:	4639      	mov	r1, r7
 801f9e2:	f8cd 9000 	str.w	r9, [sp]
 801f9e6:	f7ff fba5 	bl	801f134 <udp_sendto_if>
    pbuf_free(p_out);
 801f9ea:	4638      	mov	r0, r7
 801f9ec:	f7fa fbc0 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 801f9f0:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801f9f4:	2bff      	cmp	r3, #255	; 0xff
 801f9f6:	d016      	beq.n	801fa26 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801f9fc:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801f9fe:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa02:	d810      	bhi.n	801fa26 <dhcp_reboot.isra.0+0x18a>
 801fa04:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa08:	4a20      	ldr	r2, [pc, #128]	; (801fa8c <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa0a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801fa0e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fa14:	b29b      	uxth	r3, r3
 801fa16:	fba2 2303 	umull	r2, r3, r2, r3
 801fa1a:	095b      	lsrs	r3, r3, #5
 801fa1c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 801fa20:	b007      	add	sp, #28
 801fa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fa26:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa28:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 801fa2c:	b007      	add	sp, #28
 801fa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fa32:	4b11      	ldr	r3, [pc, #68]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
 801fa34:	f240 529a 	movw	r2, #1434	; 0x59a
 801fa38:	4915      	ldr	r1, [pc, #84]	; (801fa90 <dhcp_reboot.isra.0+0x1f4>)
 801fa3a:	4811      	ldr	r0, [pc, #68]	; (801fa80 <dhcp_reboot.isra.0+0x1e4>)
 801fa3c:	f004 fc62 	bl	8024304 <iprintf>
 801fa40:	e754      	b.n	801f8ec <dhcp_reboot.isra.0+0x50>
 801fa42:	4b0d      	ldr	r3, [pc, #52]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
 801fa44:	f240 529a 	movw	r2, #1434	; 0x59a
 801fa48:	4911      	ldr	r1, [pc, #68]	; (801fa90 <dhcp_reboot.isra.0+0x1f4>)
 801fa4a:	480d      	ldr	r0, [pc, #52]	; (801fa80 <dhcp_reboot.isra.0+0x1e4>)
 801fa4c:	f004 fc5a 	bl	8024304 <iprintf>
 801fa50:	e784      	b.n	801f95c <dhcp_reboot.isra.0+0xc0>
 801fa52:	4b09      	ldr	r3, [pc, #36]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
 801fa54:	f240 529a 	movw	r2, #1434	; 0x59a
 801fa58:	490d      	ldr	r1, [pc, #52]	; (801fa90 <dhcp_reboot.isra.0+0x1f4>)
 801fa5a:	4809      	ldr	r0, [pc, #36]	; (801fa80 <dhcp_reboot.isra.0+0x1e4>)
 801fa5c:	f004 fc52 	bl	8024304 <iprintf>
 801fa60:	e762      	b.n	801f928 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fa62:	4b05      	ldr	r3, [pc, #20]	; (801fa78 <dhcp_reboot.isra.0+0x1dc>)
 801fa64:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801fa68:	490a      	ldr	r1, [pc, #40]	; (801fa94 <dhcp_reboot.isra.0+0x1f8>)
 801fa6a:	4805      	ldr	r0, [pc, #20]	; (801fa80 <dhcp_reboot.isra.0+0x1e4>)
 801fa6c:	f004 fc4a 	bl	8024304 <iprintf>
 801fa70:	e74b      	b.n	801f90a <dhcp_reboot.isra.0+0x6e>
 801fa72:	bf00      	nop
 801fa74:	08043eec 	.word	0x08043eec
 801fa78:	08043cf8 	.word	0x08043cf8
 801fa7c:	08044074 	.word	0x08044074
 801fa80:	08028ab4 	.word	0x08028ab4
 801fa84:	2002dc38 	.word	0x2002dc38
 801fa88:	080443b0 	.word	0x080443b0
 801fa8c:	10624dd3 	.word	0x10624dd3
 801fa90:	08043e6c 	.word	0x08043e6c
 801fa94:	08043eb0 	.word	0x08043eb0
 801fa98:	08044071 	.word	0x08044071

0801fa9c <dhcp_discover>:
{
 801fa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801faa0:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801faa2:	2300      	movs	r3, #0
{
 801faa4:	b087      	sub	sp, #28
 801faa6:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 801faa8:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801faaa:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 801faac:	2a06      	cmp	r2, #6
 801faae:	d003      	beq.n	801fab8 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801fab0:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801fab2:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 801fab4:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 801fab6:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801fab8:	f10d 0316 	add.w	r3, sp, #22
 801fabc:	2201      	movs	r2, #1
 801fabe:	4639      	mov	r1, r7
 801fac0:	4658      	mov	r0, fp
 801fac2:	f7ff fe39 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 801fac6:	4605      	mov	r5, r0
 801fac8:	2800      	cmp	r0, #0
 801faca:	f000 8081 	beq.w	801fbd0 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801face:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fad2:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fad4:	f104 0804 	add.w	r8, r4, #4
 801fad8:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fadc:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fade:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801fae2:	f200 809a 	bhi.w	801fc1a <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 801fae6:	2239      	movs	r2, #57	; 0x39
 801fae8:	1c63      	adds	r3, r4, #1
 801faea:	fa1f f189 	uxth.w	r1, r9
 801faee:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 801faf0:	b29b      	uxth	r3, r3
 801faf2:	2202      	movs	r2, #2
 801faf4:	9103      	str	r1, [sp, #12]
 801faf6:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801faf8:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fafa:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fafe:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fb00:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fb04:	f200 8091 	bhi.w	801fc2a <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fb08:	1ce3      	adds	r3, r4, #3
 801fb0a:	fa1f f988 	uxth.w	r9, r8
 801fb0e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fb12:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fb14:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fb16:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fb18:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb1c:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fb20:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fb24:	2b44      	cmp	r3, #68	; 0x44
 801fb26:	d870      	bhi.n	801fc0a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 801fb28:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 801fb2c:	2237      	movs	r2, #55	; 0x37
 801fb2e:	1d63      	adds	r3, r4, #5
 801fb30:	f8df a130 	ldr.w	sl, [pc, #304]	; 801fc64 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 801fb34:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 801fb38:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fb40:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fb44:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 801fb48:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fb4a:	493c      	ldr	r1, [pc, #240]	; (801fc3c <dhcp_discover+0x1a0>)
 801fb4c:	4b3c      	ldr	r3, [pc, #240]	; (801fc40 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fb4e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fb52:	d80f      	bhi.n	801fb74 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 801fb54:	f108 0201 	add.w	r2, r8, #1
 801fb58:	f806 9008 	strb.w	r9, [r6, r8]
 801fb5c:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fb60:	4a38      	ldr	r2, [pc, #224]	; (801fc44 <dhcp_discover+0x1a8>)
 801fb62:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fb64:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fb68:	d00c      	beq.n	801fb84 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fb6a:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fb6e:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fb72:	d9ef      	bls.n	801fb54 <dhcp_discover+0xb8>
 801fb74:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801fb78:	4833      	ldr	r0, [pc, #204]	; (801fc48 <dhcp_discover+0x1ac>)
 801fb7a:	f004 fbc3 	bl	8024304 <iprintf>
 801fb7e:	4b30      	ldr	r3, [pc, #192]	; (801fc40 <dhcp_discover+0x1a4>)
 801fb80:	492e      	ldr	r1, [pc, #184]	; (801fc3c <dhcp_discover+0x1a0>)
 801fb82:	e7e7      	b.n	801fb54 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 801fb84:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 801fb88:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 801fb8c:	22ff      	movs	r2, #255	; 0xff
 801fb8e:	b280      	uxth	r0, r0
 801fb90:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fb92:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 801fb94:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fb96:	d808      	bhi.n	801fbaa <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 801fb98:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 801fb9c:	4430      	add	r0, r6
 801fb9e:	2100      	movs	r1, #0
 801fba0:	b2a4      	uxth	r4, r4
 801fba2:	1c62      	adds	r2, r4, #1
 801fba4:	f003 fc10 	bl	80233c8 <memset>
 801fba8:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fbaa:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801fbae:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fbb0:	4c26      	ldr	r4, [pc, #152]	; (801fc4c <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fbb2:	b289      	uxth	r1, r1
 801fbb4:	f7fa f9c4 	bl	8019f40 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fbb8:	4825      	ldr	r0, [pc, #148]	; (801fc50 <dhcp_discover+0x1b4>)
 801fbba:	2343      	movs	r3, #67	; 0x43
 801fbbc:	4a25      	ldr	r2, [pc, #148]	; (801fc54 <dhcp_discover+0x1b8>)
 801fbbe:	6800      	ldr	r0, [r0, #0]
 801fbc0:	4629      	mov	r1, r5
 801fbc2:	e9cd b400 	strd	fp, r4, [sp]
 801fbc6:	f7ff fa01 	bl	801efcc <udp_sendto_if_src>
    pbuf_free(p_out);
 801fbca:	4628      	mov	r0, r5
 801fbcc:	f7fa fad0 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 801fbd0:	79bb      	ldrb	r3, [r7, #6]
 801fbd2:	2bff      	cmp	r3, #255	; 0xff
 801fbd4:	d013      	beq.n	801fbfe <dhcp_discover+0x162>
    dhcp->tries++;
 801fbd6:	3301      	adds	r3, #1
 801fbd8:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fbda:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801fbdc:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fbde:	d80e      	bhi.n	801fbfe <dhcp_discover+0x162>
 801fbe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fbe4:	491c      	ldr	r1, [pc, #112]	; (801fc58 <dhcp_discover+0x1bc>)
}
 801fbe6:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fbe8:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fbea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fbee:	b29b      	uxth	r3, r3
 801fbf0:	fba1 2303 	umull	r2, r3, r1, r3
 801fbf4:	095b      	lsrs	r3, r3, #5
 801fbf6:	813b      	strh	r3, [r7, #8]
}
 801fbf8:	b007      	add	sp, #28
 801fbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fbfe:	2378      	movs	r3, #120	; 0x78
}
 801fc00:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fc02:	813b      	strh	r3, [r7, #8]
}
 801fc04:	b007      	add	sp, #28
 801fc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fc0a:	4b0d      	ldr	r3, [pc, #52]	; (801fc40 <dhcp_discover+0x1a4>)
 801fc0c:	f240 529a 	movw	r2, #1434	; 0x59a
 801fc10:	4912      	ldr	r1, [pc, #72]	; (801fc5c <dhcp_discover+0x1c0>)
 801fc12:	480d      	ldr	r0, [pc, #52]	; (801fc48 <dhcp_discover+0x1ac>)
 801fc14:	f004 fb76 	bl	8024304 <iprintf>
 801fc18:	e786      	b.n	801fb28 <dhcp_discover+0x8c>
 801fc1a:	4b09      	ldr	r3, [pc, #36]	; (801fc40 <dhcp_discover+0x1a4>)
 801fc1c:	f240 529a 	movw	r2, #1434	; 0x59a
 801fc20:	490e      	ldr	r1, [pc, #56]	; (801fc5c <dhcp_discover+0x1c0>)
 801fc22:	4809      	ldr	r0, [pc, #36]	; (801fc48 <dhcp_discover+0x1ac>)
 801fc24:	f004 fb6e 	bl	8024304 <iprintf>
 801fc28:	e75d      	b.n	801fae6 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fc2a:	4b05      	ldr	r3, [pc, #20]	; (801fc40 <dhcp_discover+0x1a4>)
 801fc2c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801fc30:	490b      	ldr	r1, [pc, #44]	; (801fc60 <dhcp_discover+0x1c4>)
 801fc32:	4805      	ldr	r0, [pc, #20]	; (801fc48 <dhcp_discover+0x1ac>)
 801fc34:	f004 fb66 	bl	8024304 <iprintf>
 801fc38:	e766      	b.n	801fb08 <dhcp_discover+0x6c>
 801fc3a:	bf00      	nop
 801fc3c:	08043eec 	.word	0x08043eec
 801fc40:	08043cf8 	.word	0x08043cf8
 801fc44:	08044074 	.word	0x08044074
 801fc48:	08028ab4 	.word	0x08028ab4
 801fc4c:	080443ac 	.word	0x080443ac
 801fc50:	2002dc38 	.word	0x2002dc38
 801fc54:	080443b0 	.word	0x080443b0
 801fc58:	10624dd3 	.word	0x10624dd3
 801fc5c:	08043e6c 	.word	0x08043e6c
 801fc60:	08043eb0 	.word	0x08043eb0
 801fc64:	08044071 	.word	0x08044071

0801fc68 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801fc68:	2800      	cmp	r0, #0
 801fc6a:	f000 8112 	beq.w	801fe92 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 801fc6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 801fc72:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 801fc74:	b087      	sub	sp, #28
 801fc76:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801fc78:	2e00      	cmp	r6, #0
 801fc7a:	f000 8111 	beq.w	801fea0 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 801fc7e:	7973      	ldrb	r3, [r6, #5]
 801fc80:	2b01      	cmp	r3, #1
 801fc82:	d004      	beq.n	801fc8e <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 801fc84:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801fc86:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801fc88:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 801fc8a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 801fc8c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801fc8e:	f10d 0316 	add.w	r3, sp, #22
 801fc92:	2203      	movs	r2, #3
 801fc94:	4631      	mov	r1, r6
 801fc96:	4658      	mov	r0, fp
 801fc98:	f7ff fd4e 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 801fc9c:	4605      	mov	r5, r0
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	f000 80b4 	beq.w	801fe0c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fca4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801fca8:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fcaa:	f107 0804 	add.w	r8, r7, #4
 801fcae:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fcb2:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fcb4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 801fcb8:	f200 80cb 	bhi.w	801fe52 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 801fcbc:	2239      	movs	r2, #57	; 0x39
 801fcbe:	1c7b      	adds	r3, r7, #1
 801fcc0:	fa1f f189 	uxth.w	r1, r9
 801fcc4:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 801fcc6:	b29b      	uxth	r3, r3
 801fcc8:	2202      	movs	r2, #2
 801fcca:	9103      	str	r1, [sp, #12]
 801fccc:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fcce:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fcd0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fcd4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801fcd6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fcda:	f200 80c2 	bhi.w	801fe62 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fcde:	1cfb      	adds	r3, r7, #3
 801fce0:	fa1f f988 	uxth.w	r9, r8
 801fce4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fce8:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fcea:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801fcec:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801fcee:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fcf2:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801fcf6:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fcfa:	2b44      	cmp	r3, #68	; 0x44
 801fcfc:	f200 80b9 	bhi.w	801fe72 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 801fd00:	1d7b      	adds	r3, r7, #5
 801fd02:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 801fd04:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 801fd06:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 801fd0a:	b29b      	uxth	r3, r3
 801fd0c:	2204      	movs	r2, #4
 801fd0e:	b2bf      	uxth	r7, r7
 801fd10:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd12:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801fd14:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd18:	f7f8 f9f2 	bl	8018100 <lwip_htonl>
 801fd1c:	4621      	mov	r1, r4
 801fd1e:	4602      	mov	r2, r0
 801fd20:	4638      	mov	r0, r7
 801fd22:	f7ff fb69 	bl	801f3f8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd26:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801fd28:	4607      	mov	r7, r0
 801fd2a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd2e:	2b44      	cmp	r3, #68	; 0x44
 801fd30:	f200 80a7 	bhi.w	801fe82 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 801fd34:	2236      	movs	r2, #54	; 0x36
 801fd36:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 801fd38:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 801fd3c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 801fd3e:	b29b      	uxth	r3, r3
 801fd40:	2204      	movs	r2, #4
 801fd42:	fa1f f888 	uxth.w	r8, r8
 801fd46:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fd48:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801fd4a:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fd4e:	f7f8 f9d7 	bl	8018100 <lwip_htonl>
 801fd52:	4621      	mov	r1, r4
 801fd54:	4602      	mov	r2, r0
 801fd56:	4640      	mov	r0, r8
 801fd58:	f7ff fb4e 	bl	801f3f8 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd5c:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801fd5e:	4680      	mov	r8, r0
 801fd60:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fd64:	2b44      	cmp	r3, #68	; 0x44
 801fd66:	9303      	str	r3, [sp, #12]
 801fd68:	d86b      	bhi.n	801fe42 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 801fd6a:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 801fd6e:	2237      	movs	r2, #55	; 0x37
 801fd70:	f108 0301 	add.w	r3, r8, #1
 801fd74:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801fee4 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 801fd78:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 801fd7a:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 801fd7e:	b29b      	uxth	r3, r3
 801fd80:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fd82:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fd84:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 801fd88:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fd8a:	494a      	ldr	r1, [pc, #296]	; (801feb4 <dhcp_select.isra.0+0x24c>)
 801fd8c:	4b4a      	ldr	r3, [pc, #296]	; (801feb8 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801fd8e:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fd92:	d80c      	bhi.n	801fdae <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 801fd94:	1c7a      	adds	r2, r7, #1
 801fd96:	f804 a007 	strb.w	sl, [r4, r7]
 801fd9a:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fd9c:	4a47      	ldr	r2, [pc, #284]	; (801febc <dhcp_select.isra.0+0x254>)
 801fd9e:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fda0:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801fda4:	d00b      	beq.n	801fdbe <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fda6:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801fda8:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801fdac:	d9f2      	bls.n	801fd94 <dhcp_select.isra.0+0x12c>
 801fdae:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801fdb2:	4843      	ldr	r0, [pc, #268]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fdb4:	f004 faa6 	bl	8024304 <iprintf>
 801fdb8:	4b3f      	ldr	r3, [pc, #252]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fdba:	493e      	ldr	r1, [pc, #248]	; (801feb4 <dhcp_select.isra.0+0x24c>)
 801fdbc:	e7ea      	b.n	801fd94 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 801fdbe:	f108 0007 	add.w	r0, r8, #7
 801fdc2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801fdc6:	22ff      	movs	r2, #255	; 0xff
 801fdc8:	b280      	uxth	r0, r0
 801fdca:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801fdcc:	2843      	cmp	r0, #67	; 0x43
 801fdce:	d80a      	bhi.n	801fde6 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 801fdd0:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 801fdd4:	4420      	add	r0, r4
 801fdd6:	2100      	movs	r1, #0
 801fdd8:	fa1f f888 	uxth.w	r8, r8
 801fddc:	f108 0201 	add.w	r2, r8, #1
 801fde0:	f003 faf2 	bl	80233c8 <memset>
 801fde4:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fde6:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 801fdea:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fdec:	4c35      	ldr	r4, [pc, #212]	; (801fec4 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801fdee:	b289      	uxth	r1, r1
 801fdf0:	f7fa f8a6 	bl	8019f40 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801fdf4:	4834      	ldr	r0, [pc, #208]	; (801fec8 <dhcp_select.isra.0+0x260>)
 801fdf6:	2343      	movs	r3, #67	; 0x43
 801fdf8:	4a34      	ldr	r2, [pc, #208]	; (801fecc <dhcp_select.isra.0+0x264>)
 801fdfa:	6800      	ldr	r0, [r0, #0]
 801fdfc:	4629      	mov	r1, r5
 801fdfe:	e9cd b400 	strd	fp, r4, [sp]
 801fe02:	f7ff f8e3 	bl	801efcc <udp_sendto_if_src>
    pbuf_free(p_out);
 801fe06:	4628      	mov	r0, r5
 801fe08:	f7fa f9b2 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 801fe0c:	79b3      	ldrb	r3, [r6, #6]
 801fe0e:	2bff      	cmp	r3, #255	; 0xff
 801fe10:	d012      	beq.n	801fe38 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 801fe12:	3301      	adds	r3, #1
 801fe14:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe16:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801fe18:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe1a:	d80d      	bhi.n	801fe38 <dhcp_select.isra.0+0x1d0>
 801fe1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe20:	492b      	ldr	r1, [pc, #172]	; (801fed0 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801fe22:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fe28:	b29b      	uxth	r3, r3
 801fe2a:	fba1 2303 	umull	r2, r3, r1, r3
 801fe2e:	095b      	lsrs	r3, r3, #5
 801fe30:	8133      	strh	r3, [r6, #8]
}
 801fe32:	b007      	add	sp, #28
 801fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 801fe38:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fe3a:	8133      	strh	r3, [r6, #8]
}
 801fe3c:	b007      	add	sp, #28
 801fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fe42:	4b1d      	ldr	r3, [pc, #116]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe44:	f240 529a 	movw	r2, #1434	; 0x59a
 801fe48:	4922      	ldr	r1, [pc, #136]	; (801fed4 <dhcp_select.isra.0+0x26c>)
 801fe4a:	481d      	ldr	r0, [pc, #116]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe4c:	f004 fa5a 	bl	8024304 <iprintf>
 801fe50:	e78b      	b.n	801fd6a <dhcp_select.isra.0+0x102>
 801fe52:	4b19      	ldr	r3, [pc, #100]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe54:	f240 529a 	movw	r2, #1434	; 0x59a
 801fe58:	491e      	ldr	r1, [pc, #120]	; (801fed4 <dhcp_select.isra.0+0x26c>)
 801fe5a:	4819      	ldr	r0, [pc, #100]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe5c:	f004 fa52 	bl	8024304 <iprintf>
 801fe60:	e72c      	b.n	801fcbc <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801fe62:	4b15      	ldr	r3, [pc, #84]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe64:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801fe68:	491b      	ldr	r1, [pc, #108]	; (801fed8 <dhcp_select.isra.0+0x270>)
 801fe6a:	4815      	ldr	r0, [pc, #84]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe6c:	f004 fa4a 	bl	8024304 <iprintf>
 801fe70:	e735      	b.n	801fcde <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801fe72:	4b11      	ldr	r3, [pc, #68]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe74:	f240 529a 	movw	r2, #1434	; 0x59a
 801fe78:	4916      	ldr	r1, [pc, #88]	; (801fed4 <dhcp_select.isra.0+0x26c>)
 801fe7a:	4811      	ldr	r0, [pc, #68]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe7c:	f004 fa42 	bl	8024304 <iprintf>
 801fe80:	e73e      	b.n	801fd00 <dhcp_select.isra.0+0x98>
 801fe82:	4b0d      	ldr	r3, [pc, #52]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe84:	f240 529a 	movw	r2, #1434	; 0x59a
 801fe88:	4912      	ldr	r1, [pc, #72]	; (801fed4 <dhcp_select.isra.0+0x26c>)
 801fe8a:	480d      	ldr	r0, [pc, #52]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe8c:	f004 fa3a 	bl	8024304 <iprintf>
 801fe90:	e750      	b.n	801fd34 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801fe92:	4b09      	ldr	r3, [pc, #36]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fe94:	f240 1277 	movw	r2, #375	; 0x177
 801fe98:	4910      	ldr	r1, [pc, #64]	; (801fedc <dhcp_select.isra.0+0x274>)
 801fe9a:	4809      	ldr	r0, [pc, #36]	; (801fec0 <dhcp_select.isra.0+0x258>)
 801fe9c:	f004 ba32 	b.w	8024304 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801fea0:	4b05      	ldr	r3, [pc, #20]	; (801feb8 <dhcp_select.isra.0+0x250>)
 801fea2:	f240 1279 	movw	r2, #377	; 0x179
 801fea6:	490e      	ldr	r1, [pc, #56]	; (801fee0 <dhcp_select.isra.0+0x278>)
 801fea8:	4805      	ldr	r0, [pc, #20]	; (801fec0 <dhcp_select.isra.0+0x258>)
}
 801feaa:	b007      	add	sp, #28
 801feac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801feb0:	f004 ba28 	b.w	8024304 <iprintf>
 801feb4:	08043eec 	.word	0x08043eec
 801feb8:	08043cf8 	.word	0x08043cf8
 801febc:	08044074 	.word	0x08044074
 801fec0:	08028ab4 	.word	0x08028ab4
 801fec4:	080443ac 	.word	0x080443ac
 801fec8:	2002dc38 	.word	0x2002dc38
 801fecc:	080443b0 	.word	0x080443b0
 801fed0:	10624dd3 	.word	0x10624dd3
 801fed4:	08043e6c 	.word	0x08043e6c
 801fed8:	08043eb0 	.word	0x08043eb0
 801fedc:	08043f24 	.word	0x08043f24
 801fee0:	08043f40 	.word	0x08043f40
 801fee4:	08044071 	.word	0x08044071

0801fee8 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801fee8:	4ba5      	ldr	r3, [pc, #660]	; (8020180 <dhcp_recv+0x298>)
{
 801feea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801feee:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801fef2:	b08b      	sub	sp, #44	; 0x2c
 801fef4:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801fef6:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801fefa:	f1b9 0f00 	cmp.w	r9, #0
 801fefe:	d04b      	beq.n	801ff98 <dhcp_recv+0xb0>
 801ff00:	f899 3004 	ldrb.w	r3, [r9, #4]
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d047      	beq.n	801ff98 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ff08:	8953      	ldrh	r3, [r2, #10]
 801ff0a:	2b2b      	cmp	r3, #43	; 0x2b
 801ff0c:	d944      	bls.n	801ff98 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ff0e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ff10:	782b      	ldrb	r3, [r5, #0]
 801ff12:	2b02      	cmp	r3, #2
 801ff14:	d140      	bne.n	801ff98 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff16:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801ff1a:	b186      	cbz	r6, 801ff3e <dhcp_recv+0x56>
 801ff1c:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 801ff20:	f105 021c 	add.w	r2, r5, #28
 801ff24:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff26:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff2a:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff2c:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff30:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ff32:	4284      	cmp	r4, r0
 801ff34:	d130      	bne.n	801ff98 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ff36:	2b06      	cmp	r3, #6
 801ff38:	d001      	beq.n	801ff3e <dhcp_recv+0x56>
 801ff3a:	42b3      	cmp	r3, r6
 801ff3c:	d3f3      	bcc.n	801ff26 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ff3e:	6868      	ldr	r0, [r5, #4]
 801ff40:	f7f8 f8de 	bl	8018100 <lwip_htonl>
 801ff44:	f8d9 3000 	ldr.w	r3, [r9]
 801ff48:	4298      	cmp	r0, r3
 801ff4a:	d125      	bne.n	801ff98 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 801ff4c:	4b8d      	ldr	r3, [pc, #564]	; (8020184 <dhcp_recv+0x29c>)
 801ff4e:	2200      	movs	r2, #0
 801ff50:	605a      	str	r2, [r3, #4]
 801ff52:	811a      	strh	r2, [r3, #8]
 801ff54:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801ff56:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801ff5a:	2b2b      	cmp	r3, #43	; 0x2b
 801ff5c:	d91c      	bls.n	801ff98 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 801ff5e:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 801ff62:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 801ff64:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801ff68:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 801ff6c:	4693      	mov	fp, r2
 801ff6e:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 801ff72:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 801ff76:	e000      	b.n	801ff7a <dhcp_recv+0x92>
 801ff78:	896b      	ldrh	r3, [r5, #10]
 801ff7a:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 801ff7c:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ff80:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801ff84:	d80e      	bhi.n	801ffa4 <dhcp_recv+0xbc>
    q = q->next;
 801ff86:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801ff88:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ff8c:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801ff90:	2d00      	cmp	r5, #0
 801ff92:	d1f1      	bne.n	801ff78 <dhcp_recv+0x90>
 801ff94:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 801ff98:	4658      	mov	r0, fp
}
 801ff9a:	b00b      	add	sp, #44	; 0x2c
 801ff9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801ffa0:	f7fa b8e6 	b.w	801a170 <pbuf_free>
  options = (u8_t *)q->payload;
 801ffa4:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ffa6:	45d8      	cmp	r8, fp
 801ffa8:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 801ffac:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ffae:	f080 8140 	bcs.w	8020232 <dhcp_recv+0x34a>
 801ffb2:	9c02      	ldr	r4, [sp, #8]
 801ffb4:	9b01      	ldr	r3, [sp, #4]
 801ffb6:	5d1a      	ldrb	r2, [r3, r4]
 801ffb8:	2aff      	cmp	r2, #255	; 0xff
 801ffba:	f000 813a 	beq.w	8020232 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 801ffbe:	1ca7      	adds	r7, r4, #2
 801ffc0:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 801ffc2:	42bc      	cmp	r4, r7
 801ffc4:	d8e6      	bhi.n	801ff94 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 801ffc6:	1c61      	adds	r1, r4, #1
 801ffc8:	896b      	ldrh	r3, [r5, #10]
 801ffca:	4299      	cmp	r1, r3
 801ffcc:	f280 8129 	bge.w	8020222 <dhcp_recv+0x33a>
      len = options[offset + 1];
 801ffd0:	9801      	ldr	r0, [sp, #4]
 801ffd2:	4420      	add	r0, r4
 801ffd4:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 801ffd6:	2a3b      	cmp	r2, #59	; 0x3b
 801ffd8:	d83e      	bhi.n	8020058 <dhcp_recv+0x170>
 801ffda:	e8df f012 	tbh	[pc, r2, lsl #1]
 801ffde:	0040      	.short	0x0040
 801ffe0:	003d0053 	.word	0x003d0053
 801ffe4:	003d00b4 	.word	0x003d00b4
 801ffe8:	009f003d 	.word	0x009f003d
 801ffec:	003d003d 	.word	0x003d003d
 801fff0:	003d003d 	.word	0x003d003d
 801fff4:	003d003d 	.word	0x003d003d
 801fff8:	003d003d 	.word	0x003d003d
 801fffc:	003d003d 	.word	0x003d003d
 8020000:	003d003d 	.word	0x003d003d
 8020004:	003d003d 	.word	0x003d003d
 8020008:	003d003d 	.word	0x003d003d
 802000c:	003d003d 	.word	0x003d003d
 8020010:	003d003d 	.word	0x003d003d
 8020014:	003d003d 	.word	0x003d003d
 8020018:	003d003d 	.word	0x003d003d
 802001c:	003d003d 	.word	0x003d003d
 8020020:	003d003d 	.word	0x003d003d
 8020024:	003d003d 	.word	0x003d003d
 8020028:	003d003d 	.word	0x003d003d
 802002c:	003d003d 	.word	0x003d003d
 8020030:	003d003d 	.word	0x003d003d
 8020034:	003d003d 	.word	0x003d003d
 8020038:	003d003d 	.word	0x003d003d
 802003c:	003d003d 	.word	0x003d003d
 8020040:	003d003d 	.word	0x003d003d
 8020044:	00f80115 	.word	0x00f80115
 8020048:	00df0109 	.word	0x00df0109
 802004c:	003d003d 	.word	0x003d003d
 8020050:	00ec003d 	.word	0x00ec003d
 8020054:	00c3      	.short	0x00c3
 8020056:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8020058:	2a00      	cmp	r2, #0
 802005a:	f040 82a2 	bne.w	80205a2 <dhcp_recv+0x6ba>
      offset++;
 802005e:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8020060:	429c      	cmp	r4, r3
 8020062:	f0c0 80e3 	bcc.w	802022c <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8020066:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8020068:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 802006c:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 802006e:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8020072:	455c      	cmp	r4, fp
 8020074:	d28e      	bcs.n	801ff94 <dhcp_recv+0xac>
        q = q->next;
 8020076:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020078:	2d00      	cmp	r5, #0
 802007a:	f000 81e1 	beq.w	8020440 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 802007e:	686b      	ldr	r3, [r5, #4]
 8020080:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020082:	e797      	b.n	801ffb4 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020084:	2e04      	cmp	r6, #4
 8020086:	f040 81b5 	bne.w	80203f4 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 802008a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802008e:	429c      	cmp	r4, r3
 8020090:	dc80      	bgt.n	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020092:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8020094:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8020098:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 802009a:	2300      	movs	r3, #0
 802009c:	9405      	str	r4, [sp, #20]
 802009e:	9309      	str	r3, [sp, #36]	; 0x24
 80200a0:	4b38      	ldr	r3, [pc, #224]	; (8020184 <dhcp_recv+0x29c>)
 80200a2:	eb03 0908 	add.w	r9, r3, r8
 80200a6:	4b38      	ldr	r3, [pc, #224]	; (8020188 <dhcp_recv+0x2a0>)
 80200a8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80200ac:	e02b      	b.n	8020106 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80200ae:	f899 3000 	ldrb.w	r3, [r9]
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	f040 81a8 	bne.w	8020408 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 80200b8:	2e04      	cmp	r6, #4
 80200ba:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80200bc:	463b      	mov	r3, r7
 80200be:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 80200c0:	bf28      	it	cs
 80200c2:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80200c4:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 80200c6:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80200c8:	4622      	mov	r2, r4
 80200ca:	f7fa f8f5 	bl	801a2b8 <pbuf_copy_partial>
 80200ce:	4284      	cmp	r4, r0
 80200d0:	f47f af60 	bne.w	801ff94 <dhcp_recv+0xac>
          if (decode_len > 4) {
 80200d4:	2e04      	cmp	r6, #4
 80200d6:	f240 819a 	bls.w	802040e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80200da:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 80200de:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80200e2:	f040 81a3 	bne.w	802042c <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 80200e6:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80200e8:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 80200ea:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 80200ec:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80200f0:	f7f8 f806 	bl	8018100 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 80200f4:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 80200f6:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80200f8:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 80200fc:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 80200fe:	429f      	cmp	r7, r3
            goto decode_next;
 8020100:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8020102:	f63f af47 	bhi.w	801ff94 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8020106:	f1b8 0f09 	cmp.w	r8, #9
 802010a:	d9d0      	bls.n	80200ae <dhcp_recv+0x1c6>
 802010c:	4b1f      	ldr	r3, [pc, #124]	; (802018c <dhcp_recv+0x2a4>)
 802010e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8020112:	491f      	ldr	r1, [pc, #124]	; (8020190 <dhcp_recv+0x2a8>)
 8020114:	481f      	ldr	r0, [pc, #124]	; (8020194 <dhcp_recv+0x2ac>)
 8020116:	f004 f8f5 	bl	8024304 <iprintf>
 802011a:	e7c8      	b.n	80200ae <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802011c:	07b2      	lsls	r2, r6, #30
 802011e:	f040 81ae 	bne.w	802047e <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8020122:	2e08      	cmp	r6, #8
 8020124:	4632      	mov	r2, r6
 8020126:	bf28      	it	cs
 8020128:	2208      	movcs	r2, #8
 802012a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802012c:	42b2      	cmp	r2, r6
 802012e:	f240 8241 	bls.w	80205b4 <dhcp_recv+0x6cc>
 8020132:	4b16      	ldr	r3, [pc, #88]	; (802018c <dhcp_recv+0x2a4>)
 8020134:	f240 623c 	movw	r2, #1596	; 0x63c
 8020138:	4917      	ldr	r1, [pc, #92]	; (8020198 <dhcp_recv+0x2b0>)
 802013a:	4816      	ldr	r0, [pc, #88]	; (8020194 <dhcp_recv+0x2ac>)
 802013c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020140:	f004 f8e0 	bl	8024304 <iprintf>
 8020144:	e728      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020146:	2e03      	cmp	r6, #3
 8020148:	f240 814a 	bls.w	80203e0 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 802014c:	4434      	add	r4, r6
 802014e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020152:	429c      	cmp	r4, r3
 8020154:	f73f af1e 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020158:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 802015a:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 802015e:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 8020160:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020162:	e79a      	b.n	802009a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020164:	2e04      	cmp	r6, #4
 8020166:	f040 8131 	bne.w	80203cc <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 802016a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802016e:	429c      	cmp	r4, r3
 8020170:	f73f af10 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020174:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8020176:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 802017a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802017c:	e78d      	b.n	802009a <dhcp_recv+0x1b2>
 802017e:	bf00      	nop
 8020180:	2001ec88 	.word	0x2001ec88
 8020184:	2002dc40 	.word	0x2002dc40
 8020188:	2002dc4c 	.word	0x2002dc4c
 802018c:	08043cf8 	.word	0x08043cf8
 8020190:	08043fb0 	.word	0x08043fb0
 8020194:	08028ab4 	.word	0x08028ab4
 8020198:	08043f68 	.word	0x08043f68
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802019c:	2e04      	cmp	r6, #4
 802019e:	f040 80ed 	bne.w	802037c <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 80201a2:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80201a6:	429c      	cmp	r4, r3
 80201a8:	f73f aef4 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80201ac:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80201ae:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 80201b2:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80201b4:	e771      	b.n	802009a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80201b6:	2e04      	cmp	r6, #4
 80201b8:	f040 80d6 	bne.w	8020368 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 80201bc:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80201c0:	429c      	cmp	r4, r3
 80201c2:	f73f aee7 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80201c6:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 80201c8:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 80201ca:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80201cc:	e765      	b.n	802009a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80201ce:	2e01      	cmp	r6, #1
 80201d0:	f040 80e8 	bne.w	80203a4 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80201d4:	9b02      	ldr	r3, [sp, #8]
 80201d6:	2bf0      	cmp	r3, #240	; 0xf0
 80201d8:	f040 8147 	bne.w	802046a <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 80201dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80201e0:	4299      	cmp	r1, r3
 80201e2:	f43f aed7 	beq.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80201e6:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80201e8:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 80201ec:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80201ee:	e754      	b.n	802009a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80201f0:	2e01      	cmp	r6, #1
 80201f2:	f040 80cd 	bne.w	8020390 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 80201f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80201fa:	4299      	cmp	r1, r3
 80201fc:	f43f aeca 	beq.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020200:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8020202:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020204:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020206:	e748      	b.n	802009a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020208:	2e04      	cmp	r6, #4
 802020a:	f040 80d5 	bne.w	80203b8 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 802020e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020212:	429c      	cmp	r4, r3
 8020214:	f73f aebe 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020218:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 802021a:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 802021e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020220:	e73b      	b.n	802009a <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020222:	6828      	ldr	r0, [r5, #0]
 8020224:	b310      	cbz	r0, 802026c <dhcp_recv+0x384>
 8020226:	6840      	ldr	r0, [r0, #4]
 8020228:	7806      	ldrb	r6, [r0, #0]
 802022a:	e6d4      	b.n	801ffd6 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802022c:	455c      	cmp	r4, fp
 802022e:	f4ff aec1 	bcc.w	801ffb4 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020232:	4bb7      	ldr	r3, [pc, #732]	; (8020510 <dhcp_recv+0x628>)
 8020234:	781b      	ldrb	r3, [r3, #0]
 8020236:	b163      	cbz	r3, 8020252 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020238:	2300      	movs	r3, #0
 802023a:	4ab5      	ldr	r2, [pc, #724]	; (8020510 <dhcp_recv+0x628>)
 802023c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802023e:	4bb5      	ldr	r3, [pc, #724]	; (8020514 <dhcp_recv+0x62c>)
 8020240:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8020242:	2b01      	cmp	r3, #1
 8020244:	f000 8108 	beq.w	8020458 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8020248:	2b02      	cmp	r3, #2
 802024a:	d006      	beq.n	802025a <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 802024c:	2b03      	cmp	r3, #3
 802024e:	f000 8101 	beq.w	8020454 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8020252:	9b04      	ldr	r3, [sp, #16]
 8020254:	2b00      	cmp	r3, #0
 8020256:	f000 811c 	beq.w	8020492 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 802025a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 802025c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8020260:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8020262:	232c      	movs	r3, #44	; 0x2c
 8020264:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020266:	9b03      	ldr	r3, [sp, #12]
 8020268:	895b      	ldrh	r3, [r3, #10]
 802026a:	e682      	b.n	801ff72 <dhcp_recv+0x8a>
    switch (op) {
 802026c:	1e50      	subs	r0, r2, #1
 802026e:	283a      	cmp	r0, #58	; 0x3a
 8020270:	f63f aef1 	bhi.w	8020056 <dhcp_recv+0x16e>
 8020274:	a601      	add	r6, pc, #4	; (adr r6, 802027c <dhcp_recv+0x394>)
 8020276:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 802027a:	bf00      	nop
 802027c:	080203f5 	.word	0x080203f5
 8020280:	08020057 	.word	0x08020057
 8020284:	080203e1 	.word	0x080203e1
 8020288:	08020057 	.word	0x08020057
 802028c:	08020057 	.word	0x08020057
 8020290:	08020057 	.word	0x08020057
 8020294:	08020057 	.word	0x08020057
 8020298:	08020057 	.word	0x08020057
 802029c:	08020057 	.word	0x08020057
 80202a0:	08020057 	.word	0x08020057
 80202a4:	08020057 	.word	0x08020057
 80202a8:	08020057 	.word	0x08020057
 80202ac:	08020057 	.word	0x08020057
 80202b0:	08020057 	.word	0x08020057
 80202b4:	08020057 	.word	0x08020057
 80202b8:	08020057 	.word	0x08020057
 80202bc:	08020057 	.word	0x08020057
 80202c0:	08020057 	.word	0x08020057
 80202c4:	08020057 	.word	0x08020057
 80202c8:	08020057 	.word	0x08020057
 80202cc:	08020057 	.word	0x08020057
 80202d0:	08020057 	.word	0x08020057
 80202d4:	08020057 	.word	0x08020057
 80202d8:	08020057 	.word	0x08020057
 80202dc:	08020057 	.word	0x08020057
 80202e0:	08020057 	.word	0x08020057
 80202e4:	08020057 	.word	0x08020057
 80202e8:	08020057 	.word	0x08020057
 80202ec:	08020057 	.word	0x08020057
 80202f0:	08020057 	.word	0x08020057
 80202f4:	08020057 	.word	0x08020057
 80202f8:	08020057 	.word	0x08020057
 80202fc:	08020057 	.word	0x08020057
 8020300:	08020057 	.word	0x08020057
 8020304:	08020057 	.word	0x08020057
 8020308:	08020057 	.word	0x08020057
 802030c:	08020057 	.word	0x08020057
 8020310:	08020057 	.word	0x08020057
 8020314:	08020057 	.word	0x08020057
 8020318:	08020057 	.word	0x08020057
 802031c:	08020057 	.word	0x08020057
 8020320:	08020057 	.word	0x08020057
 8020324:	08020057 	.word	0x08020057
 8020328:	08020057 	.word	0x08020057
 802032c:	08020057 	.word	0x08020057
 8020330:	08020057 	.word	0x08020057
 8020334:	08020057 	.word	0x08020057
 8020338:	08020057 	.word	0x08020057
 802033c:	08020057 	.word	0x08020057
 8020340:	08020057 	.word	0x08020057
 8020344:	080203b9 	.word	0x080203b9
 8020348:	080203a5 	.word	0x080203a5
 802034c:	08020391 	.word	0x08020391
 8020350:	0802037d 	.word	0x0802037d
 8020354:	08020057 	.word	0x08020057
 8020358:	08020057 	.word	0x08020057
 802035c:	08020057 	.word	0x08020057
 8020360:	08020369 	.word	0x08020369
 8020364:	080203cd 	.word	0x080203cd
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020368:	4b6b      	ldr	r3, [pc, #428]	; (8020518 <dhcp_recv+0x630>)
 802036a:	f240 625d 	movw	r2, #1629	; 0x65d
 802036e:	496b      	ldr	r1, [pc, #428]	; (802051c <dhcp_recv+0x634>)
 8020370:	486b      	ldr	r0, [pc, #428]	; (8020520 <dhcp_recv+0x638>)
 8020372:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020376:	f003 ffc5 	bl	8024304 <iprintf>
 802037a:	e60d      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802037c:	4b66      	ldr	r3, [pc, #408]	; (8020518 <dhcp_recv+0x630>)
 802037e:	f240 6259 	movw	r2, #1625	; 0x659
 8020382:	4966      	ldr	r1, [pc, #408]	; (802051c <dhcp_recv+0x634>)
 8020384:	4866      	ldr	r0, [pc, #408]	; (8020520 <dhcp_recv+0x638>)
 8020386:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802038a:	f003 ffbb 	bl	8024304 <iprintf>
 802038e:	e603      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020390:	4b61      	ldr	r3, [pc, #388]	; (8020518 <dhcp_recv+0x630>)
 8020392:	f240 6255 	movw	r2, #1621	; 0x655
 8020396:	4963      	ldr	r1, [pc, #396]	; (8020524 <dhcp_recv+0x63c>)
 8020398:	4861      	ldr	r0, [pc, #388]	; (8020520 <dhcp_recv+0x638>)
 802039a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802039e:	f003 ffb1 	bl	8024304 <iprintf>
 80203a2:	e5f9      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80203a4:	4b5c      	ldr	r3, [pc, #368]	; (8020518 <dhcp_recv+0x630>)
 80203a6:	f240 624f 	movw	r2, #1615	; 0x64f
 80203aa:	495e      	ldr	r1, [pc, #376]	; (8020524 <dhcp_recv+0x63c>)
 80203ac:	485c      	ldr	r0, [pc, #368]	; (8020520 <dhcp_recv+0x638>)
 80203ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203b2:	f003 ffa7 	bl	8024304 <iprintf>
 80203b6:	e5ef      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80203b8:	4b57      	ldr	r3, [pc, #348]	; (8020518 <dhcp_recv+0x630>)
 80203ba:	f240 6241 	movw	r2, #1601	; 0x641
 80203be:	4957      	ldr	r1, [pc, #348]	; (802051c <dhcp_recv+0x634>)
 80203c0:	4857      	ldr	r0, [pc, #348]	; (8020520 <dhcp_recv+0x638>)
 80203c2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203c6:	f003 ff9d 	bl	8024304 <iprintf>
 80203ca:	e5e5      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80203cc:	4b52      	ldr	r3, [pc, #328]	; (8020518 <dhcp_recv+0x630>)
 80203ce:	f240 6261 	movw	r2, #1633	; 0x661
 80203d2:	4952      	ldr	r1, [pc, #328]	; (802051c <dhcp_recv+0x634>)
 80203d4:	4852      	ldr	r0, [pc, #328]	; (8020520 <dhcp_recv+0x638>)
 80203d6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203da:	f003 ff93 	bl	8024304 <iprintf>
 80203de:	e5db      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80203e0:	4b4d      	ldr	r3, [pc, #308]	; (8020518 <dhcp_recv+0x630>)
 80203e2:	f240 6233 	movw	r2, #1587	; 0x633
 80203e6:	4950      	ldr	r1, [pc, #320]	; (8020528 <dhcp_recv+0x640>)
 80203e8:	484d      	ldr	r0, [pc, #308]	; (8020520 <dhcp_recv+0x638>)
 80203ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80203ee:	f003 ff89 	bl	8024304 <iprintf>
 80203f2:	e5d1      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80203f4:	4b48      	ldr	r3, [pc, #288]	; (8020518 <dhcp_recv+0x630>)
 80203f6:	f240 622e 	movw	r2, #1582	; 0x62e
 80203fa:	4948      	ldr	r1, [pc, #288]	; (802051c <dhcp_recv+0x634>)
 80203fc:	4848      	ldr	r0, [pc, #288]	; (8020520 <dhcp_recv+0x638>)
 80203fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020402:	f003 ff7f 	bl	8024304 <iprintf>
 8020406:	e5c7      	b.n	801ff98 <dhcp_recv+0xb0>
 8020408:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802040a:	896b      	ldrh	r3, [r5, #10]
 802040c:	e628      	b.n	8020060 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 802040e:	9c05      	ldr	r4, [sp, #20]
 8020410:	d027      	beq.n	8020462 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020412:	2e01      	cmp	r6, #1
 8020414:	f040 80bb 	bne.w	802058e <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8020418:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 802041c:	4b3d      	ldr	r3, [pc, #244]	; (8020514 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 802041e:	4a3c      	ldr	r2, [pc, #240]	; (8020510 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020420:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8020424:	2301      	movs	r3, #1
 8020426:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 802042a:	e7ee      	b.n	802040a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802042c:	4b3a      	ldr	r3, [pc, #232]	; (8020518 <dhcp_recv+0x630>)
 802042e:	f240 6281 	movw	r2, #1665	; 0x681
 8020432:	493e      	ldr	r1, [pc, #248]	; (802052c <dhcp_recv+0x644>)
 8020434:	483a      	ldr	r0, [pc, #232]	; (8020520 <dhcp_recv+0x638>)
 8020436:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802043a:	f003 ff63 	bl	8024304 <iprintf>
 802043e:	e5ab      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020440:	4b35      	ldr	r3, [pc, #212]	; (8020518 <dhcp_recv+0x630>)
 8020442:	f240 629d 	movw	r2, #1693	; 0x69d
 8020446:	493a      	ldr	r1, [pc, #232]	; (8020530 <dhcp_recv+0x648>)
 8020448:	4835      	ldr	r0, [pc, #212]	; (8020520 <dhcp_recv+0x638>)
 802044a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802044e:	f003 ff59 	bl	8024304 <iprintf>
 8020452:	e5a1      	b.n	801ff98 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8020454:	2301      	movs	r3, #1
 8020456:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8020458:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 802045a:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 802045e:	9302      	str	r3, [sp, #8]
 8020460:	e701      	b.n	8020266 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 8020462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020464:	f7f7 fe4c 	bl	8018100 <lwip_htonl>
 8020468:	e7d8      	b.n	802041c <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 802046a:	4b2b      	ldr	r3, [pc, #172]	; (8020518 <dhcp_recv+0x630>)
 802046c:	f240 6251 	movw	r2, #1617	; 0x651
 8020470:	4930      	ldr	r1, [pc, #192]	; (8020534 <dhcp_recv+0x64c>)
 8020472:	482b      	ldr	r0, [pc, #172]	; (8020520 <dhcp_recv+0x638>)
 8020474:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020478:	f003 ff44 	bl	8024304 <iprintf>
 802047c:	e58c      	b.n	801ff98 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802047e:	4b26      	ldr	r3, [pc, #152]	; (8020518 <dhcp_recv+0x630>)
 8020480:	f240 6239 	movw	r2, #1593	; 0x639
 8020484:	492c      	ldr	r1, [pc, #176]	; (8020538 <dhcp_recv+0x650>)
 8020486:	4826      	ldr	r0, [pc, #152]	; (8020520 <dhcp_recv+0x638>)
 8020488:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802048c:	f003 ff3a 	bl	8024304 <iprintf>
 8020490:	e582      	b.n	801ff98 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8020492:	4b1f      	ldr	r3, [pc, #124]	; (8020510 <dhcp_recv+0x628>)
 8020494:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020498:	785b      	ldrb	r3, [r3, #1]
 802049a:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	f43f ad7a 	beq.w	801ff98 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80204a4:	4a1b      	ldr	r2, [pc, #108]	; (8020514 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 80204a6:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80204aa:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80204ac:	2b05      	cmp	r3, #5
 80204ae:	d01d      	beq.n	80204ec <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 80204b0:	2b06      	cmp	r3, #6
 80204b2:	d043      	beq.n	802053c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80204b4:	2b02      	cmp	r3, #2
 80204b6:	f47f ad6f 	bne.w	801ff98 <dhcp_recv+0xb0>
 80204ba:	f899 3005 	ldrb.w	r3, [r9, #5]
 80204be:	2b06      	cmp	r3, #6
 80204c0:	f47f ad6a 	bne.w	801ff98 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80204c4:	4b12      	ldr	r3, [pc, #72]	; (8020510 <dhcp_recv+0x628>)
 80204c6:	789b      	ldrb	r3, [r3, #2]
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	f43f ad65 	beq.w	801ff98 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80204ce:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 80204d2:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80204d4:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80204d6:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80204d8:	f7f7 fe12 	bl	8018100 <lwip_htonl>
 80204dc:	4603      	mov	r3, r0
    dhcp_select(netif);
 80204de:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80204e0:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80204e2:	6923      	ldr	r3, [r4, #16]
 80204e4:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 80204e6:	f7ff fbbf 	bl	801fc68 <dhcp_select.isra.0>
 80204ea:	e555      	b.n	801ff98 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80204ec:	f899 3005 	ldrb.w	r3, [r9, #5]
 80204f0:	2b01      	cmp	r3, #1
 80204f2:	d03f      	beq.n	8020574 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80204f4:	3b03      	subs	r3, #3
 80204f6:	2b02      	cmp	r3, #2
 80204f8:	f63f ad4e 	bhi.w	801ff98 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80204fc:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8020500:	4621      	mov	r1, r4
 8020502:	f7ff f8c1 	bl	801f688 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8020506:	4650      	mov	r0, sl
 8020508:	f7fe ffb2 	bl	801f470 <dhcp_bind>
 802050c:	e544      	b.n	801ff98 <dhcp_recv+0xb0>
 802050e:	bf00      	nop
 8020510:	2002dc40 	.word	0x2002dc40
 8020514:	2002dc4c 	.word	0x2002dc4c
 8020518:	08043cf8 	.word	0x08043cf8
 802051c:	08043f5c 	.word	0x08043f5c
 8020520:	08028ab4 	.word	0x08028ab4
 8020524:	08043f8c 	.word	0x08043f8c
 8020528:	08043f68 	.word	0x08043f68
 802052c:	08043fc4 	.word	0x08043fc4
 8020530:	08043ff0 	.word	0x08043ff0
 8020534:	08043f98 	.word	0x08043f98
 8020538:	08043f7c 	.word	0x08043f7c
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802053c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8020540:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8020542:	2a02      	cmp	r2, #2
 8020544:	d902      	bls.n	802054c <dhcp_recv+0x664>
 8020546:	2b01      	cmp	r3, #1
 8020548:	f47f ad26 	bne.w	801ff98 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802054c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 8020550:	795a      	ldrb	r2, [r3, #5]
 8020552:	2a0c      	cmp	r2, #12
 8020554:	d004      	beq.n	8020560 <dhcp_recv+0x678>
    dhcp->tries = 0;
 8020556:	2200      	movs	r2, #0
    dhcp->state = new_state;
 8020558:	210c      	movs	r1, #12
    dhcp->tries = 0;
 802055a:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 802055c:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 802055e:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020560:	4b1c      	ldr	r3, [pc, #112]	; (80205d4 <dhcp_recv+0x6ec>)
 8020562:	4650      	mov	r0, sl
 8020564:	461a      	mov	r2, r3
 8020566:	4619      	mov	r1, r3
 8020568:	f7f9 f968 	bl	801983c <netif_set_addr>
  dhcp_discover(netif);
 802056c:	4650      	mov	r0, sl
 802056e:	f7ff fa95 	bl	801fa9c <dhcp_discover>
}
 8020572:	e511      	b.n	801ff98 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8020574:	4621      	mov	r1, r4
 8020576:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 802057a:	f7ff f885 	bl	801f688 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 802057e:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 8020582:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8020584:	0719      	lsls	r1, r3, #28
 8020586:	d5bf      	bpl.n	8020508 <dhcp_recv+0x620>
        dhcp_check(netif);
 8020588:	f7fe ff5a 	bl	801f440 <dhcp_check>
 802058c:	e504      	b.n	801ff98 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802058e:	4b12      	ldr	r3, [pc, #72]	; (80205d8 <dhcp_recv+0x6f0>)
 8020590:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8020594:	4911      	ldr	r1, [pc, #68]	; (80205dc <dhcp_recv+0x6f4>)
 8020596:	4812      	ldr	r0, [pc, #72]	; (80205e0 <dhcp_recv+0x6f8>)
 8020598:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802059c:	f003 feb2 	bl	8024304 <iprintf>
 80205a0:	e4fa      	b.n	801ff98 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 80205a2:	4434      	add	r4, r6
 80205a4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80205a8:	4294      	cmp	r4, r2
 80205aa:	f73f acf3 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80205ae:	19bc      	adds	r4, r7, r6
 80205b0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80205b2:	e555      	b.n	8020060 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 80205b4:	4434      	add	r4, r6
 80205b6:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80205ba:	428c      	cmp	r4, r1
 80205bc:	f73f acea 	bgt.w	801ff94 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80205c0:	19bc      	adds	r4, r7, r6
 80205c2:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80205c4:	2e00      	cmp	r6, #0
 80205c6:	f43f ad4b 	beq.w	8020060 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80205ca:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80205cc:	f04f 0808 	mov.w	r8, #8
 80205d0:	e563      	b.n	802009a <dhcp_recv+0x1b2>
 80205d2:	bf00      	nop
 80205d4:	080443ac 	.word	0x080443ac
 80205d8:	08043cf8 	.word	0x08043cf8
 80205dc:	08043fdc 	.word	0x08043fdc
 80205e0:	08028ab4 	.word	0x08028ab4

080205e4 <dhcp_network_changed>:
{
 80205e4:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80205e6:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 80205e8:	b135      	cbz	r5, 80205f8 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 80205ea:	796b      	ldrb	r3, [r5, #5]
 80205ec:	4604      	mov	r4, r0
 80205ee:	2b05      	cmp	r3, #5
 80205f0:	d803      	bhi.n	80205fa <dhcp_network_changed+0x16>
 80205f2:	2b02      	cmp	r3, #2
 80205f4:	d813      	bhi.n	802061e <dhcp_network_changed+0x3a>
 80205f6:	b95b      	cbnz	r3, 8020610 <dhcp_network_changed+0x2c>
}
 80205f8:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 80205fa:	2b0a      	cmp	r3, #10
 80205fc:	d00f      	beq.n	802061e <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80205fe:	2b0c      	cmp	r3, #12
 8020600:	d906      	bls.n	8020610 <dhcp_network_changed+0x2c>
 8020602:	4b0a      	ldr	r3, [pc, #40]	; (802062c <dhcp_network_changed+0x48>)
 8020604:	f240 326d 	movw	r2, #877	; 0x36d
 8020608:	4909      	ldr	r1, [pc, #36]	; (8020630 <dhcp_network_changed+0x4c>)
 802060a:	480a      	ldr	r0, [pc, #40]	; (8020634 <dhcp_network_changed+0x50>)
 802060c:	f003 fe7a 	bl	8024304 <iprintf>
      dhcp->tries = 0;
 8020610:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8020612:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020614:	71ab      	strb	r3, [r5, #6]
}
 8020616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 802061a:	f7ff ba3f 	b.w	801fa9c <dhcp_discover>
      dhcp->tries = 0;
 802061e:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8020620:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8020622:	71ab      	strb	r3, [r5, #6]
}
 8020624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8020628:	f7ff b938 	b.w	801f89c <dhcp_reboot.isra.0>
 802062c:	08043cf8 	.word	0x08043cf8
 8020630:	08044038 	.word	0x08044038
 8020634:	08028ab4 	.word	0x08028ab4

08020638 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020638:	2800      	cmp	r0, #0
 802063a:	d066      	beq.n	802070a <dhcp_arp_reply+0xd2>
{
 802063c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 8020640:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8020642:	b085      	sub	sp, #20
 8020644:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8020646:	b115      	cbz	r5, 802064e <dhcp_arp_reply+0x16>
 8020648:	796b      	ldrb	r3, [r5, #5]
 802064a:	2b08      	cmp	r3, #8
 802064c:	d002      	beq.n	8020654 <dhcp_arp_reply+0x1c>
}
 802064e:	b005      	add	sp, #20
 8020650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8020654:	680a      	ldr	r2, [r1, #0]
 8020656:	69eb      	ldr	r3, [r5, #28]
 8020658:	429a      	cmp	r2, r3
 802065a:	d1f8      	bne.n	802064e <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 802065c:	2200      	movs	r2, #0
    dhcp->state = new_state;
 802065e:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020660:	4629      	mov	r1, r5
    dhcp->tries = 0;
 8020662:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 8020664:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020666:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 802066a:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 802066c:	2204      	movs	r2, #4
 802066e:	f7ff f863 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 8020672:	4606      	mov	r6, r0
 8020674:	2800      	cmp	r0, #0
 8020676:	d040      	beq.n	80206fa <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020678:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 802067c:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802067e:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020682:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020684:	2b44      	cmp	r3, #68	; 0x44
 8020686:	d847      	bhi.n	8020718 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8020688:	2232      	movs	r2, #50	; 0x32
 802068a:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 802068e:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8020692:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8020696:	b29b      	uxth	r3, r3
 8020698:	2204      	movs	r2, #4
 802069a:	fa1f f888 	uxth.w	r8, r8
 802069e:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206a0:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80206a2:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206a6:	f7f7 fd2b 	bl	8018100 <lwip_htonl>
 80206aa:	4639      	mov	r1, r7
 80206ac:	4602      	mov	r2, r0
 80206ae:	4640      	mov	r0, r8
 80206b0:	f7fe fea2 	bl	801f3f8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 80206b4:	1c41      	adds	r1, r0, #1
 80206b6:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206b8:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80206bc:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206be:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 80206c0:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80206c2:	2943      	cmp	r1, #67	; 0x43
 80206c4:	d807      	bhi.n	80206d6 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 80206c6:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 80206ca:	1878      	adds	r0, r7, r1
 80206cc:	2100      	movs	r1, #0
 80206ce:	b292      	uxth	r2, r2
 80206d0:	f002 fe7a 	bl	80233c8 <memset>
 80206d4:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80206d6:	31f0      	adds	r1, #240	; 0xf0
 80206d8:	4630      	mov	r0, r6
 80206da:	b289      	uxth	r1, r1
 80206dc:	f7f9 fc30 	bl	8019f40 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80206e0:	4911      	ldr	r1, [pc, #68]	; (8020728 <dhcp_arp_reply+0xf0>)
 80206e2:	4a12      	ldr	r2, [pc, #72]	; (802072c <dhcp_arp_reply+0xf4>)
 80206e4:	2343      	movs	r3, #67	; 0x43
 80206e6:	9400      	str	r4, [sp, #0]
 80206e8:	6808      	ldr	r0, [r1, #0]
 80206ea:	4631      	mov	r1, r6
 80206ec:	9201      	str	r2, [sp, #4]
 80206ee:	4a10      	ldr	r2, [pc, #64]	; (8020730 <dhcp_arp_reply+0xf8>)
 80206f0:	f7fe fc6c 	bl	801efcc <udp_sendto_if_src>
    pbuf_free(p_out);
 80206f4:	4630      	mov	r0, r6
 80206f6:	f7f9 fd3b 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 80206fa:	79ab      	ldrb	r3, [r5, #6]
 80206fc:	2bff      	cmp	r3, #255	; 0xff
 80206fe:	d001      	beq.n	8020704 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8020700:	3301      	adds	r3, #1
 8020702:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020704:	2314      	movs	r3, #20
 8020706:	812b      	strh	r3, [r5, #8]
  return result;
 8020708:	e7a1      	b.n	802064e <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802070a:	4b0a      	ldr	r3, [pc, #40]	; (8020734 <dhcp_arp_reply+0xfc>)
 802070c:	f240 328b 	movw	r2, #907	; 0x38b
 8020710:	4909      	ldr	r1, [pc, #36]	; (8020738 <dhcp_arp_reply+0x100>)
 8020712:	480a      	ldr	r0, [pc, #40]	; (802073c <dhcp_arp_reply+0x104>)
 8020714:	f003 bdf6 	b.w	8024304 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020718:	4b06      	ldr	r3, [pc, #24]	; (8020734 <dhcp_arp_reply+0xfc>)
 802071a:	f240 529a 	movw	r2, #1434	; 0x59a
 802071e:	4908      	ldr	r1, [pc, #32]	; (8020740 <dhcp_arp_reply+0x108>)
 8020720:	4806      	ldr	r0, [pc, #24]	; (802073c <dhcp_arp_reply+0x104>)
 8020722:	f003 fdef 	bl	8024304 <iprintf>
 8020726:	e7af      	b.n	8020688 <dhcp_arp_reply+0x50>
 8020728:	2002dc38 	.word	0x2002dc38
 802072c:	080443ac 	.word	0x080443ac
 8020730:	080443b0 	.word	0x080443b0
 8020734:	08043cf8 	.word	0x08043cf8
 8020738:	0802b788 	.word	0x0802b788
 802073c:	08028ab4 	.word	0x08028ab4
 8020740:	08043e6c 	.word	0x08043e6c

08020744 <dhcp_renew>:
{
 8020744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020748:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 802074a:	b087      	sub	sp, #28
 802074c:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 802074e:	797b      	ldrb	r3, [r7, #5]
 8020750:	2b05      	cmp	r3, #5
 8020752:	d004      	beq.n	802075e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 8020754:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020756:	2205      	movs	r2, #5
    dhcp->tries = 0;
 8020758:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 802075a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 802075c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802075e:	f10d 0316 	add.w	r3, sp, #22
 8020762:	2203      	movs	r2, #3
 8020764:	4639      	mov	r1, r7
 8020766:	4658      	mov	r0, fp
 8020768:	f7fe ffe6 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 802076c:	4605      	mov	r5, r0
 802076e:	2800      	cmp	r0, #0
 8020770:	f000 80b9 	beq.w	80208e6 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020774:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020778:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802077a:	f104 0804 	add.w	r8, r4, #4
 802077e:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020782:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020784:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020788:	f200 8095 	bhi.w	80208b6 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 802078c:	2239      	movs	r2, #57	; 0x39
 802078e:	1c63      	adds	r3, r4, #1
 8020790:	fa1f f189 	uxth.w	r1, r9
 8020794:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020796:	b29b      	uxth	r3, r3
 8020798:	2202      	movs	r2, #2
 802079a:	9103      	str	r1, [sp, #12]
 802079c:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802079e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80207a0:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80207a4:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207a6:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80207aa:	f200 8094 	bhi.w	80208d6 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80207ae:	1ce3      	adds	r3, r4, #3
 80207b0:	fa1f f988 	uxth.w	r9, r8
 80207b4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80207b8:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80207ba:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80207bc:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80207be:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207c2:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80207c6:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80207ca:	2b44      	cmp	r3, #68	; 0x44
 80207cc:	d87b      	bhi.n	80208c6 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 80207ce:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 80207d2:	2237      	movs	r2, #55	; 0x37
 80207d4:	1d63      	adds	r3, r4, #5
 80207d6:	f8df a134 	ldr.w	sl, [pc, #308]	; 802090c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 80207da:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 80207de:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 80207e2:	b29b      	uxth	r3, r3
 80207e4:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80207e6:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80207ea:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 80207ee:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80207f0:	493e      	ldr	r1, [pc, #248]	; (80208ec <dhcp_renew+0x1a8>)
 80207f2:	4b3f      	ldr	r3, [pc, #252]	; (80208f0 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80207f4:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80207f8:	d80f      	bhi.n	802081a <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 80207fa:	f108 0201 	add.w	r2, r8, #1
 80207fe:	f806 9008 	strb.w	r9, [r6, r8]
 8020802:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020806:	4a3b      	ldr	r2, [pc, #236]	; (80208f4 <dhcp_renew+0x1b0>)
 8020808:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802080a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802080e:	d00c      	beq.n	802082a <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020810:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020814:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020818:	d9ef      	bls.n	80207fa <dhcp_renew+0xb6>
 802081a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802081e:	4836      	ldr	r0, [pc, #216]	; (80208f8 <dhcp_renew+0x1b4>)
 8020820:	f003 fd70 	bl	8024304 <iprintf>
 8020824:	4b32      	ldr	r3, [pc, #200]	; (80208f0 <dhcp_renew+0x1ac>)
 8020826:	4931      	ldr	r1, [pc, #196]	; (80208ec <dhcp_renew+0x1a8>)
 8020828:	e7e7      	b.n	80207fa <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 802082a:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 802082e:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020832:	22ff      	movs	r2, #255	; 0xff
 8020834:	b280      	uxth	r0, r0
 8020836:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020838:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 802083a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802083c:	d808      	bhi.n	8020850 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 802083e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8020842:	4430      	add	r0, r6
 8020844:	2100      	movs	r1, #0
 8020846:	b2a4      	uxth	r4, r4
 8020848:	1c62      	adds	r2, r4, #1
 802084a:	f002 fdbd 	bl	80233c8 <memset>
 802084e:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020850:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020854:	4628      	mov	r0, r5
 8020856:	b289      	uxth	r1, r1
 8020858:	f7f9 fb72 	bl	8019f40 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 802085c:	4827      	ldr	r0, [pc, #156]	; (80208fc <dhcp_renew+0x1b8>)
 802085e:	2343      	movs	r3, #67	; 0x43
 8020860:	f107 0218 	add.w	r2, r7, #24
 8020864:	6800      	ldr	r0, [r0, #0]
 8020866:	4629      	mov	r1, r5
 8020868:	f8cd b000 	str.w	fp, [sp]
 802086c:	f7fe fc62 	bl	801f134 <udp_sendto_if>
 8020870:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8020872:	4628      	mov	r0, r5
 8020874:	f7f9 fc7c 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 8020878:	79bb      	ldrb	r3, [r7, #6]
 802087a:	2bff      	cmp	r3, #255	; 0xff
 802087c:	d015      	beq.n	80208aa <dhcp_renew+0x166>
    dhcp->tries++;
 802087e:	3301      	adds	r3, #1
 8020880:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8020882:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8020884:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8020886:	d810      	bhi.n	80208aa <dhcp_renew+0x166>
 8020888:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802088c:	4a1c      	ldr	r2, [pc, #112]	; (8020900 <dhcp_renew+0x1bc>)
}
 802088e:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8020890:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8020894:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020896:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802089a:	b29b      	uxth	r3, r3
 802089c:	fba2 2303 	umull	r2, r3, r2, r3
 80208a0:	095b      	lsrs	r3, r3, #5
 80208a2:	813b      	strh	r3, [r7, #8]
}
 80208a4:	b007      	add	sp, #28
 80208a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 80208aa:	2328      	movs	r3, #40	; 0x28
}
 80208ac:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80208ae:	813b      	strh	r3, [r7, #8]
}
 80208b0:	b007      	add	sp, #28
 80208b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80208b6:	4b0e      	ldr	r3, [pc, #56]	; (80208f0 <dhcp_renew+0x1ac>)
 80208b8:	f240 529a 	movw	r2, #1434	; 0x59a
 80208bc:	4911      	ldr	r1, [pc, #68]	; (8020904 <dhcp_renew+0x1c0>)
 80208be:	480e      	ldr	r0, [pc, #56]	; (80208f8 <dhcp_renew+0x1b4>)
 80208c0:	f003 fd20 	bl	8024304 <iprintf>
 80208c4:	e762      	b.n	802078c <dhcp_renew+0x48>
 80208c6:	4b0a      	ldr	r3, [pc, #40]	; (80208f0 <dhcp_renew+0x1ac>)
 80208c8:	f240 529a 	movw	r2, #1434	; 0x59a
 80208cc:	490d      	ldr	r1, [pc, #52]	; (8020904 <dhcp_renew+0x1c0>)
 80208ce:	480a      	ldr	r0, [pc, #40]	; (80208f8 <dhcp_renew+0x1b4>)
 80208d0:	f003 fd18 	bl	8024304 <iprintf>
 80208d4:	e77b      	b.n	80207ce <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80208d6:	4b06      	ldr	r3, [pc, #24]	; (80208f0 <dhcp_renew+0x1ac>)
 80208d8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80208dc:	490a      	ldr	r1, [pc, #40]	; (8020908 <dhcp_renew+0x1c4>)
 80208de:	4806      	ldr	r0, [pc, #24]	; (80208f8 <dhcp_renew+0x1b4>)
 80208e0:	f003 fd10 	bl	8024304 <iprintf>
 80208e4:	e763      	b.n	80207ae <dhcp_renew+0x6a>
    result = ERR_MEM;
 80208e6:	f04f 34ff 	mov.w	r4, #4294967295
 80208ea:	e7c5      	b.n	8020878 <dhcp_renew+0x134>
 80208ec:	08043eec 	.word	0x08043eec
 80208f0:	08043cf8 	.word	0x08043cf8
 80208f4:	08044074 	.word	0x08044074
 80208f8:	08028ab4 	.word	0x08028ab4
 80208fc:	2002dc38 	.word	0x2002dc38
 8020900:	10624dd3 	.word	0x10624dd3
 8020904:	08043e6c 	.word	0x08043e6c
 8020908:	08043eb0 	.word	0x08043eb0
 802090c:	08044071 	.word	0x08044071

08020910 <dhcp_release_and_stop>:
{
 8020910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020914:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8020916:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8020918:	2c00      	cmp	r4, #0
 802091a:	d06c      	beq.n	80209f6 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 802091c:	7962      	ldrb	r2, [r4, #5]
 802091e:	2a00      	cmp	r2, #0
 8020920:	d069      	beq.n	80209f6 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8020922:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020924:	2300      	movs	r3, #0
 8020926:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8020928:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802092a:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 802092c:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802092e:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020930:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8020932:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8020934:	81e3      	strh	r3, [r4, #14]
 8020936:	6123      	str	r3, [r4, #16]
 8020938:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 802093a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802093e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8020942:	d901      	bls.n	8020948 <dhcp_release_and_stop+0x38>
 8020944:	2a0a      	cmp	r2, #10
 8020946:	d148      	bne.n	80209da <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8020948:	f10d 030a 	add.w	r3, sp, #10
 802094c:	2207      	movs	r2, #7
 802094e:	4621      	mov	r1, r4
 8020950:	4628      	mov	r0, r5
 8020952:	f7fe fef1 	bl	801f738 <dhcp_create_msg>
    if (p_out != NULL) {
 8020956:	4606      	mov	r6, r0
 8020958:	2800      	cmp	r0, #0
 802095a:	d03e      	beq.n	80209da <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 802095c:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8020960:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020962:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020966:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020968:	2b44      	cmp	r3, #68	; 0x44
 802096a:	d84e      	bhi.n	8020a0a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 802096c:	f108 0301 	add.w	r3, r8, #1
 8020970:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8020972:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8020974:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8020978:	2204      	movs	r2, #4
 802097a:	f108 0802 	add.w	r8, r8, #2
 802097e:	54fa      	strb	r2, [r7, r3]
 8020980:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8020984:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020986:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802098a:	f7f7 fbb9 	bl	8018100 <lwip_htonl>
 802098e:	4639      	mov	r1, r7
 8020990:	4602      	mov	r2, r0
 8020992:	4640      	mov	r0, r8
 8020994:	f7fe fd30 	bl	801f3f8 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8020998:	1c43      	adds	r3, r0, #1
 802099a:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802099c:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 80209a0:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80209a2:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 80209a4:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80209a6:	2b43      	cmp	r3, #67	; 0x43
 80209a8:	d807      	bhi.n	80209ba <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 80209aa:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 80209ae:	18f8      	adds	r0, r7, r3
 80209b0:	2100      	movs	r1, #0
 80209b2:	b292      	uxth	r2, r2
 80209b4:	f002 fd08 	bl	80233c8 <memset>
 80209b8:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80209ba:	33f0      	adds	r3, #240	; 0xf0
 80209bc:	4630      	mov	r0, r6
 80209be:	b299      	uxth	r1, r3
 80209c0:	f7f9 fabe 	bl	8019f40 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80209c4:	4a15      	ldr	r2, [pc, #84]	; (8020a1c <dhcp_release_and_stop+0x10c>)
 80209c6:	9500      	str	r5, [sp, #0]
 80209c8:	2343      	movs	r3, #67	; 0x43
 80209ca:	6810      	ldr	r0, [r2, #0]
 80209cc:	4631      	mov	r1, r6
 80209ce:	aa03      	add	r2, sp, #12
 80209d0:	f7fe fbb0 	bl	801f134 <udp_sendto_if>
      pbuf_free(p_out);
 80209d4:	4630      	mov	r0, r6
 80209d6:	f7f9 fbcb 	bl	801a170 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80209da:	4b11      	ldr	r3, [pc, #68]	; (8020a20 <dhcp_release_and_stop+0x110>)
 80209dc:	4628      	mov	r0, r5
 80209de:	461a      	mov	r2, r3
 80209e0:	4619      	mov	r1, r3
 80209e2:	f7f8 ff2b 	bl	801983c <netif_set_addr>
  if (new_state != dhcp->state) {
 80209e6:	7963      	ldrb	r3, [r4, #5]
 80209e8:	b11b      	cbz	r3, 80209f2 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 80209ea:	2300      	movs	r3, #0
 80209ec:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 80209ee:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 80209f0:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 80209f2:	7923      	ldrb	r3, [r4, #4]
 80209f4:	b913      	cbnz	r3, 80209fc <dhcp_release_and_stop+0xec>
}
 80209f6:	b004      	add	sp, #16
 80209f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80209fc:	f7fe fe22 	bl	801f644 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8020a00:	2300      	movs	r3, #0
 8020a02:	7123      	strb	r3, [r4, #4]
}
 8020a04:	b004      	add	sp, #16
 8020a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020a0a:	4b06      	ldr	r3, [pc, #24]	; (8020a24 <dhcp_release_and_stop+0x114>)
 8020a0c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020a10:	4905      	ldr	r1, [pc, #20]	; (8020a28 <dhcp_release_and_stop+0x118>)
 8020a12:	4806      	ldr	r0, [pc, #24]	; (8020a2c <dhcp_release_and_stop+0x11c>)
 8020a14:	f003 fc76 	bl	8024304 <iprintf>
 8020a18:	e7a8      	b.n	802096c <dhcp_release_and_stop+0x5c>
 8020a1a:	bf00      	nop
 8020a1c:	2002dc38 	.word	0x2002dc38
 8020a20:	080443ac 	.word	0x080443ac
 8020a24:	08043cf8 	.word	0x08043cf8
 8020a28:	08043e6c 	.word	0x08043e6c
 8020a2c:	08028ab4 	.word	0x08028ab4

08020a30 <dhcp_start>:
{
 8020a30:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020a32:	2800      	cmp	r0, #0
 8020a34:	d046      	beq.n	8020ac4 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8020a36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8020a3a:	4604      	mov	r4, r0
 8020a3c:	07da      	lsls	r2, r3, #31
 8020a3e:	d537      	bpl.n	8020ab0 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020a40:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8020a42:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020a44:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8020a48:	d32f      	bcc.n	8020aaa <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8020a4a:	b33d      	cbz	r5, 8020a9c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8020a4c:	792b      	ldrb	r3, [r5, #4]
 8020a4e:	bb13      	cbnz	r3, 8020a96 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8020a50:	2234      	movs	r2, #52	; 0x34
 8020a52:	2100      	movs	r1, #0
 8020a54:	4628      	mov	r0, r5
 8020a56:	f002 fcb7 	bl	80233c8 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8020a5a:	f7fe fdb9 	bl	801f5d0 <dhcp_inc_pcb_refcount>
 8020a5e:	4606      	mov	r6, r0
 8020a60:	bb18      	cbnz	r0, 8020aaa <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8020a62:	2301      	movs	r3, #1
 8020a64:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8020a66:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8020a6a:	075b      	lsls	r3, r3, #29
 8020a6c:	d408      	bmi.n	8020a80 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8020a6e:	796b      	ldrb	r3, [r5, #5]
 8020a70:	2b02      	cmp	r3, #2
 8020a72:	d003      	beq.n	8020a7c <dhcp_start+0x4c>
    dhcp->state = new_state;
 8020a74:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8020a76:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8020a78:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8020a7a:	716b      	strb	r3, [r5, #5]
}
 8020a7c:	4630      	mov	r0, r6
 8020a7e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8020a80:	4620      	mov	r0, r4
 8020a82:	f7ff f80b 	bl	801fa9c <dhcp_discover>
  if (result != ERR_OK) {
 8020a86:	2800      	cmp	r0, #0
 8020a88:	d0f8      	beq.n	8020a7c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8020a8a:	4620      	mov	r0, r4
    return ERR_MEM;
 8020a8c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8020a90:	f7ff ff3e 	bl	8020910 <dhcp_release_and_stop>
    return ERR_MEM;
 8020a94:	e7f2      	b.n	8020a7c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020a96:	f7fe fdd5 	bl	801f644 <dhcp_dec_pcb_refcount>
 8020a9a:	e7d9      	b.n	8020a50 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8020a9c:	2034      	movs	r0, #52	; 0x34
 8020a9e:	f7f8 fc77 	bl	8019390 <mem_malloc>
    if (dhcp == NULL) {
 8020aa2:	4605      	mov	r5, r0
 8020aa4:	b108      	cbz	r0, 8020aaa <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8020aa6:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8020aa8:	e7d2      	b.n	8020a50 <dhcp_start+0x20>
    return ERR_MEM;
 8020aaa:	f04f 36ff 	mov.w	r6, #4294967295
 8020aae:	e7e5      	b.n	8020a7c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8020ab0:	4b09      	ldr	r3, [pc, #36]	; (8020ad8 <dhcp_start+0xa8>)
 8020ab2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8020ab6:	4909      	ldr	r1, [pc, #36]	; (8020adc <dhcp_start+0xac>)
 8020ab8:	f06f 060f 	mvn.w	r6, #15
 8020abc:	4808      	ldr	r0, [pc, #32]	; (8020ae0 <dhcp_start+0xb0>)
 8020abe:	f003 fc21 	bl	8024304 <iprintf>
 8020ac2:	e7db      	b.n	8020a7c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020ac4:	4b04      	ldr	r3, [pc, #16]	; (8020ad8 <dhcp_start+0xa8>)
 8020ac6:	f240 22e7 	movw	r2, #743	; 0x2e7
 8020aca:	4906      	ldr	r1, [pc, #24]	; (8020ae4 <dhcp_start+0xb4>)
 8020acc:	f06f 060f 	mvn.w	r6, #15
 8020ad0:	4803      	ldr	r0, [pc, #12]	; (8020ae0 <dhcp_start+0xb0>)
 8020ad2:	f003 fc17 	bl	8024304 <iprintf>
 8020ad6:	e7d1      	b.n	8020a7c <dhcp_start+0x4c>
 8020ad8:	08043cf8 	.word	0x08043cf8
 8020adc:	0804404c 	.word	0x0804404c
 8020ae0:	08028ab4 	.word	0x08028ab4
 8020ae4:	0802b788 	.word	0x0802b788

08020ae8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8020ae8:	4b8a      	ldr	r3, [pc, #552]	; (8020d14 <dhcp_coarse_tmr+0x22c>)
{
 8020aea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8020aee:	681d      	ldr	r5, [r3, #0]
{
 8020af0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8020af2:	b1dd      	cbz	r5, 8020b2c <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020af4:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8020af6:	b1b4      	cbz	r4, 8020b26 <dhcp_coarse_tmr+0x3e>
 8020af8:	7963      	ldrb	r3, [r4, #5]
 8020afa:	b1a3      	cbz	r3, 8020b26 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8020afc:	8aa1      	ldrh	r1, [r4, #20]
 8020afe:	b129      	cbz	r1, 8020b0c <dhcp_coarse_tmr+0x24>
 8020b00:	8a62      	ldrh	r2, [r4, #18]
 8020b02:	3201      	adds	r2, #1
 8020b04:	b292      	uxth	r2, r2
 8020b06:	4291      	cmp	r1, r2
 8020b08:	8262      	strh	r2, [r4, #18]
 8020b0a:	d012      	beq.n	8020b32 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8020b0c:	8a22      	ldrh	r2, [r4, #16]
 8020b0e:	b11a      	cbz	r2, 8020b18 <dhcp_coarse_tmr+0x30>
 8020b10:	1e51      	subs	r1, r2, #1
 8020b12:	2a01      	cmp	r2, #1
 8020b14:	8221      	strh	r1, [r4, #16]
 8020b16:	d013      	beq.n	8020b40 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8020b18:	89e2      	ldrh	r2, [r4, #14]
 8020b1a:	b122      	cbz	r2, 8020b26 <dhcp_coarse_tmr+0x3e>
 8020b1c:	1e51      	subs	r1, r2, #1
 8020b1e:	2a01      	cmp	r2, #1
 8020b20:	81e1      	strh	r1, [r4, #14]
 8020b22:	f000 8087 	beq.w	8020c34 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8020b26:	682d      	ldr	r5, [r5, #0]
 8020b28:	2d00      	cmp	r5, #0
 8020b2a:	d1e3      	bne.n	8020af4 <dhcp_coarse_tmr+0xc>
}
 8020b2c:	b007      	add	sp, #28
 8020b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8020b32:	4628      	mov	r0, r5
 8020b34:	f7ff feec 	bl	8020910 <dhcp_release_and_stop>
        dhcp_start(netif);
 8020b38:	4628      	mov	r0, r5
 8020b3a:	f7ff ff79 	bl	8020a30 <dhcp_start>
 8020b3e:	e7f2      	b.n	8020b26 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020b40:	1e5a      	subs	r2, r3, #1
 8020b42:	b2d1      	uxtb	r1, r2
 8020b44:	2909      	cmp	r1, #9
 8020b46:	d8ee      	bhi.n	8020b26 <dhcp_coarse_tmr+0x3e>
 8020b48:	f240 2219 	movw	r2, #537	; 0x219
 8020b4c:	40ca      	lsrs	r2, r1
 8020b4e:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8020b50:	f012 0201 	ands.w	r2, r2, #1
 8020b54:	d1e7      	bne.n	8020b26 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8020b56:	2b04      	cmp	r3, #4
 8020b58:	d003      	beq.n	8020b62 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8020b5a:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8020b5c:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8020b5e:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8020b60:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020b62:	f10d 0316 	add.w	r3, sp, #22
 8020b66:	2203      	movs	r2, #3
 8020b68:	4621      	mov	r1, r4
 8020b6a:	4628      	mov	r0, r5
 8020b6c:	f7fe fde4 	bl	801f738 <dhcp_create_msg>
  if (p_out != NULL) {
 8020b70:	4607      	mov	r7, r0
 8020b72:	2800      	cmp	r0, #0
 8020b74:	f000 8096 	beq.w	8020ca4 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b78:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8020b7c:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b7e:	f106 0904 	add.w	r9, r6, #4
 8020b82:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b86:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b8a:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8020b8e:	f200 80b9 	bhi.w	8020d04 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8020b92:	2239      	movs	r2, #57	; 0x39
 8020b94:	1c73      	adds	r3, r6, #1
 8020b96:	fa1f fb8a 	uxth.w	fp, sl
 8020b9a:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8020b9e:	b29b      	uxth	r3, r3
 8020ba0:	2202      	movs	r2, #2
 8020ba2:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020ba6:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020baa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020bac:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020bae:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020bb2:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020bb4:	f200 809e 	bhi.w	8020cf4 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020bb8:	9903      	ldr	r1, [sp, #12]
 8020bba:	1cf3      	adds	r3, r6, #3
 8020bbc:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020bc0:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020bc2:	0a0a      	lsrs	r2, r1, #8
 8020bc4:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020bc8:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bcc:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020bd0:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bd4:	2b44      	cmp	r3, #68	; 0x44
 8020bd6:	f200 8085 	bhi.w	8020ce4 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8020bda:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8020bde:	2237      	movs	r2, #55	; 0x37
 8020be0:	1d73      	adds	r3, r6, #5
 8020be2:	f8df b158 	ldr.w	fp, [pc, #344]	; 8020d3c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8020be6:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8020bea:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8020bee:	b29b      	uxth	r3, r3
 8020bf0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bf2:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bf6:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020bfa:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bfe:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c02:	d80f      	bhi.n	8020c24 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8020c04:	f808 a009 	strb.w	sl, [r8, r9]
 8020c08:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c0c:	4b42      	ldr	r3, [pc, #264]	; (8020d18 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8020c0e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c12:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c14:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c18:	d01f      	beq.n	8020c5a <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c1a:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c1e:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c22:	d9ef      	bls.n	8020c04 <dhcp_coarse_tmr+0x11c>
 8020c24:	4b3d      	ldr	r3, [pc, #244]	; (8020d1c <dhcp_coarse_tmr+0x234>)
 8020c26:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020c2a:	493d      	ldr	r1, [pc, #244]	; (8020d20 <dhcp_coarse_tmr+0x238>)
 8020c2c:	483d      	ldr	r0, [pc, #244]	; (8020d24 <dhcp_coarse_tmr+0x23c>)
 8020c2e:	f003 fb69 	bl	8024304 <iprintf>
 8020c32:	e7e7      	b.n	8020c04 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020c34:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8020c38:	2a01      	cmp	r2, #1
 8020c3a:	d002      	beq.n	8020c42 <dhcp_coarse_tmr+0x15a>
 8020c3c:	2b0a      	cmp	r3, #10
 8020c3e:	f47f af72 	bne.w	8020b26 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8020c42:	4628      	mov	r0, r5
 8020c44:	f7ff fd7e 	bl	8020744 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020c48:	89a3      	ldrh	r3, [r4, #12]
 8020c4a:	8a62      	ldrh	r2, [r4, #18]
 8020c4c:	1a9b      	subs	r3, r3, r2
 8020c4e:	2b01      	cmp	r3, #1
 8020c50:	f77f af69 	ble.w	8020b26 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8020c54:	105b      	asrs	r3, r3, #1
 8020c56:	81e3      	strh	r3, [r4, #14]
 8020c58:	e765      	b.n	8020b26 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8020c5a:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 8020c5e:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020c62:	22ff      	movs	r2, #255	; 0xff
 8020c64:	b280      	uxth	r0, r0
 8020c66:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c68:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020c6a:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c6e:	d808      	bhi.n	8020c82 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8020c70:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8020c74:	4440      	add	r0, r8
 8020c76:	2100      	movs	r1, #0
 8020c78:	b292      	uxth	r2, r2
 8020c7a:	3201      	adds	r2, #1
 8020c7c:	f002 fba4 	bl	80233c8 <memset>
 8020c80:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020c82:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020c86:	4638      	mov	r0, r7
 8020c88:	b289      	uxth	r1, r1
 8020c8a:	f7f9 f959 	bl	8019f40 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020c8e:	4b26      	ldr	r3, [pc, #152]	; (8020d28 <dhcp_coarse_tmr+0x240>)
 8020c90:	9500      	str	r5, [sp, #0]
 8020c92:	4639      	mov	r1, r7
 8020c94:	6818      	ldr	r0, [r3, #0]
 8020c96:	2343      	movs	r3, #67	; 0x43
 8020c98:	4a24      	ldr	r2, [pc, #144]	; (8020d2c <dhcp_coarse_tmr+0x244>)
 8020c9a:	f7fe fa4b 	bl	801f134 <udp_sendto_if>
    pbuf_free(p_out);
 8020c9e:	4638      	mov	r0, r7
 8020ca0:	f7f9 fa66 	bl	801a170 <pbuf_free>
  if (dhcp->tries < 255) {
 8020ca4:	79a3      	ldrb	r3, [r4, #6]
 8020ca6:	2bff      	cmp	r3, #255	; 0xff
 8020ca8:	d01a      	beq.n	8020ce0 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8020caa:	3301      	adds	r3, #1
 8020cac:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020cae:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8020cb0:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020cb2:	d815      	bhi.n	8020ce0 <dhcp_coarse_tmr+0x1f8>
 8020cb4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8020cb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020cbc:	4a1c      	ldr	r2, [pc, #112]	; (8020d30 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020cbe:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020cc0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020cc4:	b29b      	uxth	r3, r3
 8020cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8020cca:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020ccc:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020cce:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8020cd0:	8aa3      	ldrh	r3, [r4, #20]
 8020cd2:	1a9b      	subs	r3, r3, r2
 8020cd4:	2b01      	cmp	r3, #1
 8020cd6:	f77f af26 	ble.w	8020b26 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8020cda:	105b      	asrs	r3, r3, #1
 8020cdc:	8223      	strh	r3, [r4, #16]
 8020cde:	e722      	b.n	8020b26 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8020ce0:	2314      	movs	r3, #20
 8020ce2:	e7f3      	b.n	8020ccc <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ce4:	4b0d      	ldr	r3, [pc, #52]	; (8020d1c <dhcp_coarse_tmr+0x234>)
 8020ce6:	f240 529a 	movw	r2, #1434	; 0x59a
 8020cea:	4912      	ldr	r1, [pc, #72]	; (8020d34 <dhcp_coarse_tmr+0x24c>)
 8020cec:	480d      	ldr	r0, [pc, #52]	; (8020d24 <dhcp_coarse_tmr+0x23c>)
 8020cee:	f003 fb09 	bl	8024304 <iprintf>
 8020cf2:	e772      	b.n	8020bda <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020cf4:	4b09      	ldr	r3, [pc, #36]	; (8020d1c <dhcp_coarse_tmr+0x234>)
 8020cf6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020cfa:	490f      	ldr	r1, [pc, #60]	; (8020d38 <dhcp_coarse_tmr+0x250>)
 8020cfc:	4809      	ldr	r0, [pc, #36]	; (8020d24 <dhcp_coarse_tmr+0x23c>)
 8020cfe:	f003 fb01 	bl	8024304 <iprintf>
 8020d02:	e759      	b.n	8020bb8 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d04:	4b05      	ldr	r3, [pc, #20]	; (8020d1c <dhcp_coarse_tmr+0x234>)
 8020d06:	f240 529a 	movw	r2, #1434	; 0x59a
 8020d0a:	490a      	ldr	r1, [pc, #40]	; (8020d34 <dhcp_coarse_tmr+0x24c>)
 8020d0c:	4805      	ldr	r0, [pc, #20]	; (8020d24 <dhcp_coarse_tmr+0x23c>)
 8020d0e:	f003 faf9 	bl	8024304 <iprintf>
 8020d12:	e73e      	b.n	8020b92 <dhcp_coarse_tmr+0xaa>
 8020d14:	2002dbc0 	.word	0x2002dbc0
 8020d18:	08044074 	.word	0x08044074
 8020d1c:	08043cf8 	.word	0x08043cf8
 8020d20:	08043eec 	.word	0x08043eec
 8020d24:	08028ab4 	.word	0x08028ab4
 8020d28:	2002dc38 	.word	0x2002dc38
 8020d2c:	080443b0 	.word	0x080443b0
 8020d30:	10624dd3 	.word	0x10624dd3
 8020d34:	08043e6c 	.word	0x08043e6c
 8020d38:	08043eb0 	.word	0x08043eb0
 8020d3c:	08044071 	.word	0x08044071

08020d40 <dhcp_fine_tmr>:
{
 8020d40:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8020d42:	4b21      	ldr	r3, [pc, #132]	; (8020dc8 <dhcp_fine_tmr+0x88>)
 8020d44:	681c      	ldr	r4, [r3, #0]
 8020d46:	b1fc      	cbz	r4, 8020d88 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8020d48:	2500      	movs	r5, #0
 8020d4a:	e003      	b.n	8020d54 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8020d4c:	3a01      	subs	r2, #1
 8020d4e:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8020d50:	6824      	ldr	r4, [r4, #0]
 8020d52:	b1cc      	cbz	r4, 8020d88 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8020d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	d0fa      	beq.n	8020d50 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8020d5a:	891a      	ldrh	r2, [r3, #8]
 8020d5c:	2a01      	cmp	r2, #1
 8020d5e:	d8f5      	bhi.n	8020d4c <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8020d60:	d1f6      	bne.n	8020d50 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020d62:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8020d64:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020d66:	2a0c      	cmp	r2, #12
 8020d68:	d016      	beq.n	8020d98 <dhcp_fine_tmr+0x58>
 8020d6a:	2a06      	cmp	r2, #6
 8020d6c:	d014      	beq.n	8020d98 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8020d6e:	2a01      	cmp	r2, #1
 8020d70:	d016      	beq.n	8020da0 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8020d72:	2a08      	cmp	r2, #8
 8020d74:	d009      	beq.n	8020d8a <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8020d76:	2a03      	cmp	r2, #3
 8020d78:	d1ea      	bne.n	8020d50 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8020d7a:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8020d7c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8020d7e:	2b01      	cmp	r3, #1
 8020d80:	d91e      	bls.n	8020dc0 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8020d82:	f7fe fe8b 	bl	801fa9c <dhcp_discover>
 8020d86:	e7e3      	b.n	8020d50 <dhcp_fine_tmr+0x10>
}
 8020d88:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8020d8a:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8020d8c:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8020d8e:	2b01      	cmp	r3, #1
 8020d90:	d913      	bls.n	8020dba <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8020d92:	f7fe fb6d 	bl	801f470 <dhcp_bind>
 8020d96:	e7db      	b.n	8020d50 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8020d98:	4620      	mov	r0, r4
 8020d9a:	f7fe fe7f 	bl	801fa9c <dhcp_discover>
 8020d9e:	e7d7      	b.n	8020d50 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8020da0:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8020da2:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8020da4:	2b05      	cmp	r3, #5
 8020da6:	d802      	bhi.n	8020dae <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8020da8:	f7fe ff5e 	bl	801fc68 <dhcp_select.isra.0>
 8020dac:	e7d0      	b.n	8020d50 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8020dae:	f7ff fdaf 	bl	8020910 <dhcp_release_and_stop>
      dhcp_start(netif);
 8020db2:	4620      	mov	r0, r4
 8020db4:	f7ff fe3c 	bl	8020a30 <dhcp_start>
 8020db8:	e7ca      	b.n	8020d50 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8020dba:	f7fe fb41 	bl	801f440 <dhcp_check>
 8020dbe:	e7c7      	b.n	8020d50 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8020dc0:	f7fe fd6c 	bl	801f89c <dhcp_reboot.isra.0>
 8020dc4:	e7c4      	b.n	8020d50 <dhcp_fine_tmr+0x10>
 8020dc6:	bf00      	nop
 8020dc8:	2002dbc0 	.word	0x2002dbc0

08020dcc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8020dd0:	4f1a      	ldr	r7, [pc, #104]	; (8020e3c <etharp_free_entry+0x70>)
 8020dd2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8020dd6:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8020dd8:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8020ddc:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8020de0:	b32c      	cbz	r4, 8020e2e <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8020de2:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8020e40 <etharp_free_entry+0x74>
 8020de6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8020e44 <etharp_free_entry+0x78>
 8020dea:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8020e48 <etharp_free_entry+0x7c>
 8020dee:	e006      	b.n	8020dfe <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8020df0:	f7f9 f9be 	bl	801a170 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8020df4:	4629      	mov	r1, r5
 8020df6:	200b      	movs	r0, #11
 8020df8:	f7f8 fca2 	bl	8019740 <memp_free>
  while (q) {
 8020dfc:	b19c      	cbz	r4, 8020e26 <etharp_free_entry+0x5a>
    q = q->next;
 8020dfe:	4625      	mov	r5, r4
 8020e00:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8020e02:	6868      	ldr	r0, [r5, #4]
 8020e04:	2800      	cmp	r0, #0
 8020e06:	d1f3      	bne.n	8020df0 <etharp_free_entry+0x24>
 8020e08:	4651      	mov	r1, sl
 8020e0a:	465b      	mov	r3, fp
 8020e0c:	229a      	movs	r2, #154	; 0x9a
 8020e0e:	4648      	mov	r0, r9
 8020e10:	f003 fa78 	bl	8024304 <iprintf>
    pbuf_free(r->p);
 8020e14:	6868      	ldr	r0, [r5, #4]
 8020e16:	f7f9 f9ab 	bl	801a170 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8020e1a:	4629      	mov	r1, r5
 8020e1c:	200b      	movs	r0, #11
 8020e1e:	f7f8 fc8f 	bl	8019740 <memp_free>
  while (q) {
 8020e22:	2c00      	cmp	r4, #0
 8020e24:	d1eb      	bne.n	8020dfe <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8020e26:	eb08 0306 	add.w	r3, r8, r6
 8020e2a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020e2e:	4446      	add	r6, r8
 8020e30:	2300      	movs	r3, #0
 8020e32:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8020e36:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8020e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e3c:	2002dc78 	.word	0x2002dc78
 8020e40:	08044074 	.word	0x08044074
 8020e44:	080440ac 	.word	0x080440ac
 8020e48:	08028ab4 	.word	0x08028ab4

08020e4c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e50:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020e52:	f04f 0820 	mov.w	r8, #32
{
 8020e56:	b083      	sub	sp, #12
 8020e58:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020e5a:	469e      	mov	lr, r3
 8020e5c:	469b      	mov	fp, r3
{
 8020e5e:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020e60:	469a      	mov	sl, r3
 8020e62:	4948      	ldr	r1, [pc, #288]	; (8020f84 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8020e64:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020e66:	46c4      	mov	ip, r8
 8020e68:	4691      	mov	r9, r2
 8020e6a:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e6e:	e004      	b.n	8020e7a <etharp_find_entry+0x2e>
 8020e70:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020e72:	3301      	adds	r3, #1
 8020e74:	3118      	adds	r1, #24
 8020e76:	2b20      	cmp	r3, #32
 8020e78:	d015      	beq.n	8020ea6 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020e7a:	2c20      	cmp	r4, #32
 8020e7c:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8020e7e:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020e80:	d134      	bne.n	8020eec <etharp_find_entry+0xa0>
 8020e82:	2800      	cmp	r0, #0
 8020e84:	d0f4      	beq.n	8020e70 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020e86:	b11d      	cbz	r5, 8020e90 <etharp_find_entry+0x44>
 8020e88:	682f      	ldr	r7, [r5, #0]
 8020e8a:	684e      	ldr	r6, [r1, #4]
 8020e8c:	42b7      	cmp	r7, r6
 8020e8e:	d038      	beq.n	8020f02 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020e90:	2801      	cmp	r0, #1
 8020e92:	d02e      	beq.n	8020ef2 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8020e94:	8a48      	ldrh	r0, [r1, #18]
 8020e96:	4570      	cmp	r0, lr
 8020e98:	d3eb      	bcc.n	8020e72 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020e9a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8020e9c:	4686      	mov	lr, r0
 8020e9e:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020ea0:	3118      	adds	r1, #24
 8020ea2:	2b20      	cmp	r3, #32
 8020ea4:	d1e9      	bne.n	8020e7a <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020ea6:	9b00      	ldr	r3, [sp, #0]
 8020ea8:	464e      	mov	r6, r9
 8020eaa:	2b01      	cmp	r3, #1
 8020eac:	d166      	bne.n	8020f7c <etharp_find_entry+0x130>
 8020eae:	2c20      	cmp	r4, #32
 8020eb0:	d040      	beq.n	8020f34 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020eb2:	46a1      	mov	r9, r4
 8020eb4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8020eb8:	4a32      	ldr	r2, [pc, #200]	; (8020f84 <etharp_find_entry+0x138>)
 8020eba:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8020ebe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020ec2:	7d1b      	ldrb	r3, [r3, #20]
 8020ec4:	bb73      	cbnz	r3, 8020f24 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020ec6:	b135      	cbz	r5, 8020ed6 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020ec8:	eb08 0309 	add.w	r3, r8, r9
 8020ecc:	492d      	ldr	r1, [pc, #180]	; (8020f84 <etharp_find_entry+0x138>)
 8020ece:	682a      	ldr	r2, [r5, #0]
 8020ed0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8020ed4:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8020ed6:	44c8      	add	r8, r9
 8020ed8:	4a2a      	ldr	r2, [pc, #168]	; (8020f84 <etharp_find_entry+0x138>)
 8020eda:	2300      	movs	r3, #0
 8020edc:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8020ee0:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020ee2:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8020ee4:	4620      	mov	r0, r4
 8020ee6:	b003      	add	sp, #12
 8020ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8020eec:	2800      	cmp	r0, #0
 8020eee:	d0c0      	beq.n	8020e72 <etharp_find_entry+0x26>
 8020ef0:	e7c9      	b.n	8020e86 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8020ef2:	6808      	ldr	r0, [r1, #0]
 8020ef4:	b180      	cbz	r0, 8020f18 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8020ef6:	8a48      	ldrh	r0, [r1, #18]
 8020ef8:	4550      	cmp	r0, sl
 8020efa:	d3ba      	bcc.n	8020e72 <etharp_find_entry+0x26>
 8020efc:	4682      	mov	sl, r0
 8020efe:	4690      	mov	r8, r2
 8020f00:	e7b7      	b.n	8020e72 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020f02:	f1b9 0f00 	cmp.w	r9, #0
 8020f06:	d002      	beq.n	8020f0e <etharp_find_entry+0xc2>
 8020f08:	688e      	ldr	r6, [r1, #8]
 8020f0a:	454e      	cmp	r6, r9
 8020f0c:	d1c0      	bne.n	8020e90 <etharp_find_entry+0x44>
 8020f0e:	4614      	mov	r4, r2
}
 8020f10:	4620      	mov	r0, r4
 8020f12:	b003      	add	sp, #12
 8020f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8020f18:	8a48      	ldrh	r0, [r1, #18]
 8020f1a:	4558      	cmp	r0, fp
 8020f1c:	d3a9      	bcc.n	8020e72 <etharp_find_entry+0x26>
 8020f1e:	4683      	mov	fp, r0
 8020f20:	9201      	str	r2, [sp, #4]
 8020f22:	e7a6      	b.n	8020e72 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020f24:	4b18      	ldr	r3, [pc, #96]	; (8020f88 <etharp_find_entry+0x13c>)
 8020f26:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020f2a:	4918      	ldr	r1, [pc, #96]	; (8020f8c <etharp_find_entry+0x140>)
 8020f2c:	4818      	ldr	r0, [pc, #96]	; (8020f90 <etharp_find_entry+0x144>)
 8020f2e:	f003 f9e9 	bl	8024304 <iprintf>
 8020f32:	e7c8      	b.n	8020ec6 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8020f34:	f1bc 0f20 	cmp.w	ip, #32
 8020f38:	d012      	beq.n	8020f60 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020f3a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8020f3e:	4a11      	ldr	r2, [pc, #68]	; (8020f84 <etharp_find_entry+0x138>)
 8020f40:	46e1      	mov	r9, ip
 8020f42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8020f46:	b1bb      	cbz	r3, 8020f78 <etharp_find_entry+0x12c>
 8020f48:	464c      	mov	r4, r9
 8020f4a:	4b0f      	ldr	r3, [pc, #60]	; (8020f88 <etharp_find_entry+0x13c>)
 8020f4c:	f240 126d 	movw	r2, #365	; 0x16d
 8020f50:	4910      	ldr	r1, [pc, #64]	; (8020f94 <etharp_find_entry+0x148>)
 8020f52:	480f      	ldr	r0, [pc, #60]	; (8020f90 <etharp_find_entry+0x144>)
 8020f54:	f003 f9d6 	bl	8024304 <iprintf>
    etharp_free_entry(i);
 8020f58:	4648      	mov	r0, r9
 8020f5a:	f7ff ff37 	bl	8020dcc <etharp_free_entry>
 8020f5e:	e7a9      	b.n	8020eb4 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020f60:	9b01      	ldr	r3, [sp, #4]
 8020f62:	2b20      	cmp	r3, #32
 8020f64:	d105      	bne.n	8020f72 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020f66:	f1b8 0f20 	cmp.w	r8, #32
 8020f6a:	d007      	beq.n	8020f7c <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8020f6c:	4644      	mov	r4, r8
 8020f6e:	46c1      	mov	r9, r8
 8020f70:	e7f2      	b.n	8020f58 <etharp_find_entry+0x10c>
 8020f72:	461c      	mov	r4, r3
 8020f74:	4699      	mov	r9, r3
 8020f76:	e7ef      	b.n	8020f58 <etharp_find_entry+0x10c>
 8020f78:	4664      	mov	r4, ip
 8020f7a:	e7ed      	b.n	8020f58 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8020f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8020f80:	e7b0      	b.n	8020ee4 <etharp_find_entry+0x98>
 8020f82:	bf00      	nop
 8020f84:	2002dc78 	.word	0x2002dc78
 8020f88:	08044074 	.word	0x08044074
 8020f8c:	080440d4 	.word	0x080440d4
 8020f90:	08028ab4 	.word	0x08028ab4
 8020f94:	080440bc 	.word	0x080440bc

08020f98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f9c:	b082      	sub	sp, #8
 8020f9e:	4688      	mov	r8, r1
 8020fa0:	4691      	mov	r9, r2
 8020fa2:	461f      	mov	r7, r3
 8020fa4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020fa8:	4606      	mov	r6, r0
{
 8020faa:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020fae:	2800      	cmp	r0, #0
 8020fb0:	d050      	beq.n	8021054 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020fb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020fb6:	211c      	movs	r1, #28
 8020fb8:	200e      	movs	r0, #14
 8020fba:	f7f8 ff07 	bl	8019dcc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020fbe:	4605      	mov	r5, r0
 8020fc0:	2800      	cmp	r0, #0
 8020fc2:	d04f      	beq.n	8021064 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020fc4:	8943      	ldrh	r3, [r0, #10]
 8020fc6:	2b1b      	cmp	r3, #27
 8020fc8:	d93c      	bls.n	8021044 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020fca:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8020fcc:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8020fce:	f7f7 f893 	bl	80180f8 <lwip_htons>
 8020fd2:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020fd4:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8020fd8:	2b06      	cmp	r3, #6
 8020fda:	d006      	beq.n	8020fea <etharp_raw+0x52>
 8020fdc:	4b23      	ldr	r3, [pc, #140]	; (802106c <etharp_raw+0xd4>)
 8020fde:	f240 4269 	movw	r2, #1129	; 0x469
 8020fe2:	4923      	ldr	r1, [pc, #140]	; (8021070 <etharp_raw+0xd8>)
 8020fe4:	4823      	ldr	r0, [pc, #140]	; (8021074 <etharp_raw+0xdc>)
 8020fe6:	f003 f98d 	bl	8024304 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020fea:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020fec:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020fee:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020ff0:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020ff2:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020ff4:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020ff6:	88b9      	ldrh	r1, [r7, #4]
 8020ff8:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020ffa:	f8da 1000 	ldr.w	r1, [sl]
 8020ffe:	f8c4 1012 	str.w	r1, [r4, #18]
 8021002:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8021006:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021008:	990a      	ldr	r1, [sp, #40]	; 0x28
 802100a:	6809      	ldr	r1, [r1, #0]
 802100c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021010:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021012:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021014:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021016:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021018:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802101a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802101c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802101e:	2108      	movs	r1, #8
 8021020:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8021022:	2106      	movs	r1, #6
 8021024:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021026:	2104      	movs	r1, #4
 8021028:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802102a:	f640 0106 	movw	r1, #2054	; 0x806
 802102e:	9100      	str	r1, [sp, #0]
 8021030:	4629      	mov	r1, r5
 8021032:	f001 fbf5 	bl	8022820 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8021036:	4628      	mov	r0, r5
 8021038:	f7f9 f89a 	bl	801a170 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 802103c:	4630      	mov	r0, r6
}
 802103e:	b002      	add	sp, #8
 8021040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021044:	4b09      	ldr	r3, [pc, #36]	; (802106c <etharp_raw+0xd4>)
 8021046:	f240 4262 	movw	r2, #1122	; 0x462
 802104a:	490b      	ldr	r1, [pc, #44]	; (8021078 <etharp_raw+0xe0>)
 802104c:	4809      	ldr	r0, [pc, #36]	; (8021074 <etharp_raw+0xdc>)
 802104e:	f003 f959 	bl	8024304 <iprintf>
 8021052:	e7ba      	b.n	8020fca <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021054:	4b05      	ldr	r3, [pc, #20]	; (802106c <etharp_raw+0xd4>)
 8021056:	f240 4257 	movw	r2, #1111	; 0x457
 802105a:	4908      	ldr	r1, [pc, #32]	; (802107c <etharp_raw+0xe4>)
 802105c:	4805      	ldr	r0, [pc, #20]	; (8021074 <etharp_raw+0xdc>)
 802105e:	f003 f951 	bl	8024304 <iprintf>
 8021062:	e7a6      	b.n	8020fb2 <etharp_raw+0x1a>
    return ERR_MEM;
 8021064:	f04f 30ff 	mov.w	r0, #4294967295
 8021068:	e7e9      	b.n	802103e <etharp_raw+0xa6>
 802106a:	bf00      	nop
 802106c:	08044074 	.word	0x08044074
 8021070:	08044134 	.word	0x08044134
 8021074:	08028ab4 	.word	0x08028ab4
 8021078:	08044100 	.word	0x08044100
 802107c:	0802b788 	.word	0x0802b788

08021080 <etharp_output_to_arp_index>:
{
 8021080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021084:	4f37      	ldr	r7, [pc, #220]	; (8021164 <etharp_output_to_arp_index+0xe4>)
 8021086:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 802108a:	b085      	sub	sp, #20
 802108c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802108e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8021092:	4605      	mov	r5, r0
 8021094:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021096:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802109a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802109e:	2b01      	cmp	r3, #1
 80210a0:	d93c      	bls.n	802111c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80210a2:	2b02      	cmp	r3, #2
 80210a4:	d011      	beq.n	80210ca <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80210a6:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80210a8:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80210ac:	fb02 7404 	mla	r4, r2, r4, r7
 80210b0:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80210b2:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80210b6:	4623      	mov	r3, r4
 80210b8:	464a      	mov	r2, r9
 80210ba:	4631      	mov	r1, r6
 80210bc:	4628      	mov	r0, r5
 80210be:	9700      	str	r7, [sp, #0]
 80210c0:	f001 fbae 	bl	8022820 <ethernet_output>
}
 80210c4:	b005      	add	sp, #20
 80210c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80210ca:	44a0      	add	r8, r4
 80210cc:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 80210d0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80210d4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80210d8:	d82a      	bhi.n	8021130 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80210da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80210de:	d3e2      	bcc.n	80210a6 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80210e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80210e4:	2301      	movs	r3, #1
 80210e6:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80210ea:	4628      	mov	r0, r5
 80210ec:	00e4      	lsls	r4, r4, #3
 80210ee:	9303      	str	r3, [sp, #12]
 80210f0:	4b1d      	ldr	r3, [pc, #116]	; (8021168 <etharp_output_to_arp_index+0xe8>)
 80210f2:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80210f4:	f104 020c 	add.w	r2, r4, #12
 80210f8:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80210fc:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80210fe:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021100:	18bc      	adds	r4, r7, r2
 8021102:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021104:	9300      	str	r3, [sp, #0]
 8021106:	464b      	mov	r3, r9
 8021108:	4622      	mov	r2, r4
 802110a:	9702      	str	r7, [sp, #8]
 802110c:	f7ff ff44 	bl	8020f98 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021110:	2800      	cmp	r0, #0
 8021112:	d1ce      	bne.n	80210b2 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021114:	2303      	movs	r3, #3
 8021116:	f888 3014 	strb.w	r3, [r8, #20]
 802111a:	e7ca      	b.n	80210b2 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802111c:	4b13      	ldr	r3, [pc, #76]	; (802116c <etharp_output_to_arp_index+0xec>)
 802111e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8021122:	4913      	ldr	r1, [pc, #76]	; (8021170 <etharp_output_to_arp_index+0xf0>)
 8021124:	4813      	ldr	r0, [pc, #76]	; (8021174 <etharp_output_to_arp_index+0xf4>)
 8021126:	f003 f8ed 	bl	8024304 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802112a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802112e:	e7b8      	b.n	80210a2 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021130:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021134:	2301      	movs	r3, #1
 8021136:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802113a:	4a0f      	ldr	r2, [pc, #60]	; (8021178 <etharp_output_to_arp_index+0xf8>)
 802113c:	00e4      	lsls	r4, r4, #3
 802113e:	9303      	str	r3, [sp, #12]
 8021140:	4649      	mov	r1, r9
 8021142:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021144:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021146:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021148:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802114a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802114c:	9302      	str	r3, [sp, #8]
 802114e:	4b06      	ldr	r3, [pc, #24]	; (8021168 <etharp_output_to_arp_index+0xe8>)
 8021150:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021152:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021154:	9300      	str	r3, [sp, #0]
 8021156:	464b      	mov	r3, r9
 8021158:	f7ff ff1e 	bl	8020f98 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802115c:	2800      	cmp	r0, #0
 802115e:	d0d9      	beq.n	8021114 <etharp_output_to_arp_index+0x94>
 8021160:	e7a7      	b.n	80210b2 <etharp_output_to_arp_index+0x32>
 8021162:	bf00      	nop
 8021164:	2002dc78 	.word	0x2002dc78
 8021168:	080445ac 	.word	0x080445ac
 802116c:	08044074 	.word	0x08044074
 8021170:	08044178 	.word	0x08044178
 8021174:	08028ab4 	.word	0x08028ab4
 8021178:	080445a4 	.word	0x080445a4

0802117c <etharp_tmr>:
{
 802117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021180:	4c1e      	ldr	r4, [pc, #120]	; (80211fc <etharp_tmr+0x80>)
 8021182:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021184:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021186:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8021204 <etharp_tmr+0x88>
 802118a:	4f1d      	ldr	r7, [pc, #116]	; (8021200 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 802118c:	2602      	movs	r6, #2
 802118e:	e00d      	b.n	80211ac <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021190:	2a01      	cmp	r2, #1
 8021192:	d101      	bne.n	8021198 <etharp_tmr+0x1c>
 8021194:	2b04      	cmp	r3, #4
 8021196:	d813      	bhi.n	80211c0 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021198:	2a03      	cmp	r2, #3
 802119a:	d01b      	beq.n	80211d4 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802119c:	2a04      	cmp	r2, #4
 802119e:	d01c      	beq.n	80211da <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80211a0:	2a01      	cmp	r2, #1
 80211a2:	d01c      	beq.n	80211de <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80211a4:	3501      	adds	r5, #1
 80211a6:	3418      	adds	r4, #24
 80211a8:	2d20      	cmp	r5, #32
 80211aa:	d010      	beq.n	80211ce <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 80211ac:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 80211ae:	2a00      	cmp	r2, #0
 80211b0:	d0f8      	beq.n	80211a4 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 80211b2:	89e3      	ldrh	r3, [r4, #14]
 80211b4:	3301      	adds	r3, #1
 80211b6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80211b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80211bc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80211be:	d3e7      	bcc.n	8021190 <etharp_tmr+0x14>
        etharp_free_entry(i);
 80211c0:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80211c2:	3501      	adds	r5, #1
        etharp_free_entry(i);
 80211c4:	f7ff fe02 	bl	8020dcc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80211c8:	3418      	adds	r4, #24
 80211ca:	2d20      	cmp	r5, #32
 80211cc:	d1ee      	bne.n	80211ac <etharp_tmr+0x30>
}
 80211ce:	b004      	add	sp, #16
 80211d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80211d4:	2304      	movs	r3, #4
 80211d6:	7423      	strb	r3, [r4, #16]
 80211d8:	e7e4      	b.n	80211a4 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80211da:	7426      	strb	r6, [r4, #16]
 80211dc:	e7e2      	b.n	80211a4 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80211de:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80211e4:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80211e8:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80211ea:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80211ee:	9100      	str	r1, [sp, #0]
 80211f0:	463a      	mov	r2, r7
 80211f2:	4619      	mov	r1, r3
 80211f4:	f7ff fed0 	bl	8020f98 <etharp_raw>
 80211f8:	e7d4      	b.n	80211a4 <etharp_tmr+0x28>
 80211fa:	bf00      	nop
 80211fc:	2002dc7c 	.word	0x2002dc7c
 8021200:	080445a4 	.word	0x080445a4
 8021204:	080445ac 	.word	0x080445ac

08021208 <etharp_cleanup_netif>:
{
 8021208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802120a:	4c0c      	ldr	r4, [pc, #48]	; (802123c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802120c:	2500      	movs	r5, #0
{
 802120e:	4607      	mov	r7, r0
 8021210:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8021214:	e003      	b.n	802121e <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021216:	3418      	adds	r4, #24
 8021218:	3501      	adds	r5, #1
 802121a:	42b4      	cmp	r4, r6
 802121c:	d00c      	beq.n	8021238 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802121e:	7d23      	ldrb	r3, [r4, #20]
 8021220:	2b00      	cmp	r3, #0
 8021222:	d0f8      	beq.n	8021216 <etharp_cleanup_netif+0xe>
 8021224:	68a3      	ldr	r3, [r4, #8]
 8021226:	42bb      	cmp	r3, r7
 8021228:	d1f5      	bne.n	8021216 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802122a:	3418      	adds	r4, #24
      etharp_free_entry(i);
 802122c:	4628      	mov	r0, r5
 802122e:	f7ff fdcd 	bl	8020dcc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021232:	3501      	adds	r5, #1
 8021234:	42b4      	cmp	r4, r6
 8021236:	d1f2      	bne.n	802121e <etharp_cleanup_netif+0x16>
}
 8021238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802123a:	bf00      	nop
 802123c:	2002dc78 	.word	0x2002dc78

08021240 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021240:	2900      	cmp	r1, #0
 8021242:	f000 808e 	beq.w	8021362 <etharp_input+0x122>
{
 8021246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 802124a:	6846      	ldr	r6, [r0, #4]
{
 802124c:	b087      	sub	sp, #28
 802124e:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021250:	8833      	ldrh	r3, [r6, #0]
 8021252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021256:	d102      	bne.n	802125e <etharp_input+0x1e>
 8021258:	7933      	ldrb	r3, [r6, #4]
 802125a:	2b06      	cmp	r3, #6
 802125c:	d005      	beq.n	802126a <etharp_input+0x2a>
    pbuf_free(p);
 802125e:	4620      	mov	r0, r4
}
 8021260:	b007      	add	sp, #28
 8021262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8021266:	f7f8 bf83 	b.w	801a170 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802126a:	7973      	ldrb	r3, [r6, #5]
 802126c:	2b04      	cmp	r3, #4
 802126e:	d1f6      	bne.n	802125e <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021270:	8873      	ldrh	r3, [r6, #2]
 8021272:	2b08      	cmp	r3, #8
 8021274:	d1f3      	bne.n	802125e <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021276:	f8d6 000e 	ldr.w	r0, [r6, #14]
 802127a:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802127c:	684b      	ldr	r3, [r1, #4]
 802127e:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021282:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021284:	2b00      	cmp	r3, #0
 8021286:	d073      	beq.n	8021370 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021288:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802128c:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021290:	faba fa8a 	clz	sl, sl
 8021294:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021298:	f1ca 0702 	rsb	r7, sl, #2
 802129c:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802129e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80212a2:	2b06      	cmp	r3, #6
 80212a4:	d007      	beq.n	80212b6 <etharp_input+0x76>
 80212a6:	4b3e      	ldr	r3, [pc, #248]	; (80213a0 <etharp_input+0x160>)
 80212a8:	f240 12a9 	movw	r2, #425	; 0x1a9
 80212ac:	493d      	ldr	r1, [pc, #244]	; (80213a4 <etharp_input+0x164>)
 80212ae:	483e      	ldr	r0, [pc, #248]	; (80213a8 <etharp_input+0x168>)
 80212b0:	f003 f828 	bl	8024304 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80212b4:	9805      	ldr	r0, [sp, #20]
 80212b6:	2800      	cmp	r0, #0
 80212b8:	d042      	beq.n	8021340 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80212ba:	4629      	mov	r1, r5
 80212bc:	f000 fd30 	bl	8021d20 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80212c0:	4681      	mov	r9, r0
 80212c2:	2800      	cmp	r0, #0
 80212c4:	d13c      	bne.n	8021340 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 80212c6:	9b05      	ldr	r3, [sp, #20]
 80212c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80212cc:	2be0      	cmp	r3, #224	; 0xe0
 80212ce:	d037      	beq.n	8021340 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 80212d0:	4639      	mov	r1, r7
 80212d2:	462a      	mov	r2, r5
 80212d4:	a805      	add	r0, sp, #20
 80212d6:	f7ff fdb9 	bl	8020e4c <etharp_find_entry>
  if (i < 0) {
 80212da:	2800      	cmp	r0, #0
 80212dc:	db30      	blt.n	8021340 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80212de:	4a33      	ldr	r2, [pc, #204]	; (80213ac <etharp_input+0x16c>)
 80212e0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80212e4:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80212e6:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 80212ea:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 80212ee:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80212f0:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 80212f2:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80212f4:	fb10 330c 	smlabb	r3, r0, ip, r3
 80212f8:	f8d8 0000 	ldr.w	r0, [r8]
 80212fc:	50d0      	str	r0, [r2, r3]
 80212fe:	18d0      	adds	r0, r2, r3
 8021300:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8021304:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8021306:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 802130a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 802130e:	b1b9      	cbz	r1, 8021340 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021310:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8021314:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021316:	200b      	movs	r0, #11
    p = q->p;
 8021318:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 802131c:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 802131e:	f7f8 fa0f 	bl	8019740 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021326:	4659      	mov	r1, fp
 8021328:	464a      	mov	r2, r9
 802132a:	9300      	str	r3, [sp, #0]
 802132c:	4628      	mov	r0, r5
 802132e:	4643      	mov	r3, r8
 8021330:	f001 fa76 	bl	8022820 <ethernet_output>
    pbuf_free(p);
 8021334:	4658      	mov	r0, fp
 8021336:	f7f8 ff1b 	bl	801a170 <pbuf_free>
  while (arp_table[i].q != NULL) {
 802133a:	6839      	ldr	r1, [r7, #0]
 802133c:	2900      	cmp	r1, #0
 802133e:	d1e9      	bne.n	8021314 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8021340:	88f3      	ldrh	r3, [r6, #6]
 8021342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021346:	d018      	beq.n	802137a <etharp_input+0x13a>
 8021348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802134c:	d103      	bne.n	8021356 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 802134e:	a905      	add	r1, sp, #20
 8021350:	4628      	mov	r0, r5
 8021352:	f7ff f971 	bl	8020638 <dhcp_arp_reply>
  pbuf_free(p);
 8021356:	4620      	mov	r0, r4
 8021358:	f7f8 ff0a 	bl	801a170 <pbuf_free>
}
 802135c:	b007      	add	sp, #28
 802135e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021362:	4b0f      	ldr	r3, [pc, #60]	; (80213a0 <etharp_input+0x160>)
 8021364:	f240 228a 	movw	r2, #650	; 0x28a
 8021368:	4911      	ldr	r1, [pc, #68]	; (80213b0 <etharp_input+0x170>)
 802136a:	480f      	ldr	r0, [pc, #60]	; (80213a8 <etharp_input+0x168>)
 802136c:	f002 bfca 	b.w	8024304 <iprintf>
    for_us = 0;
 8021370:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021372:	f106 0808 	add.w	r8, r6, #8
 8021376:	2702      	movs	r7, #2
 8021378:	e791      	b.n	802129e <etharp_input+0x5e>
      if (for_us) {
 802137a:	f1ba 0f00 	cmp.w	sl, #0
 802137e:	d0ea      	beq.n	8021356 <etharp_input+0x116>
        etharp_raw(netif,
 8021380:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021382:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8021386:	4642      	mov	r2, r8
 8021388:	4628      	mov	r0, r5
 802138a:	9103      	str	r1, [sp, #12]
 802138c:	a905      	add	r1, sp, #20
 802138e:	f8cd 8004 	str.w	r8, [sp, #4]
 8021392:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021394:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8021396:	9100      	str	r1, [sp, #0]
 8021398:	4619      	mov	r1, r3
 802139a:	f7ff fdfd 	bl	8020f98 <etharp_raw>
 802139e:	e7da      	b.n	8021356 <etharp_input+0x116>
 80213a0:	08044074 	.word	0x08044074
 80213a4:	080441c8 	.word	0x080441c8
 80213a8:	08028ab4 	.word	0x08028ab4
 80213ac:	2002dc78 	.word	0x2002dc78
 80213b0:	0802b788 	.word	0x0802b788

080213b4 <etharp_query>:
{
 80213b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213b8:	468a      	mov	sl, r1
 80213ba:	b085      	sub	sp, #20
 80213bc:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80213be:	4601      	mov	r1, r0
 80213c0:	f8da 0000 	ldr.w	r0, [sl]
{
 80213c4:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80213c6:	f000 fcab 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 80213ca:	2800      	cmp	r0, #0
 80213cc:	f040 80d1 	bne.w	8021572 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 80213d0:	f8da 3000 	ldr.w	r3, [sl]
 80213d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 80213d8:	2ae0      	cmp	r2, #224	; 0xe0
 80213da:	f000 80ca 	beq.w	8021572 <etharp_query+0x1be>
 80213de:	2b00      	cmp	r3, #0
 80213e0:	f000 80c7 	beq.w	8021572 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80213e4:	462a      	mov	r2, r5
 80213e6:	2101      	movs	r1, #1
 80213e8:	4650      	mov	r0, sl
 80213ea:	f7ff fd2f 	bl	8020e4c <etharp_find_entry>
  if (i_err < 0) {
 80213ee:	1e07      	subs	r7, r0, #0
 80213f0:	db52      	blt.n	8021498 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80213f2:	2f7e      	cmp	r7, #126	; 0x7e
 80213f4:	dc48      	bgt.n	8021488 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 80213f6:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80213f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80215a8 <etharp_query+0x1f4>
 80213fc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8021400:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8021404:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8021408:	7d1a      	ldrb	r2, [r3, #20]
 802140a:	b18a      	cbz	r2, 8021430 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802140c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8021410:	2e00      	cmp	r6, #0
 8021412:	f000 80a0 	beq.w	8021556 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021416:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 802141a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802141e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021422:	7d13      	ldrb	r3, [r2, #20]
 8021424:	2b01      	cmp	r3, #1
 8021426:	d81e      	bhi.n	8021466 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021428:	d03a      	beq.n	80214a0 <etharp_query+0xec>
}
 802142a:	b005      	add	sp, #20
 802142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021430:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021432:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8021436:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021438:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 802143c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802143e:	4628      	mov	r0, r5
 8021440:	4b53      	ldr	r3, [pc, #332]	; (8021590 <etharp_query+0x1dc>)
 8021442:	4659      	mov	r1, fp
 8021444:	9203      	str	r2, [sp, #12]
 8021446:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021448:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802144a:	4a52      	ldr	r2, [pc, #328]	; (8021594 <etharp_query+0x1e0>)
 802144c:	9300      	str	r3, [sp, #0]
 802144e:	465b      	mov	r3, fp
 8021450:	f7ff fda2 	bl	8020f98 <etharp_raw>
    if (q == NULL) {
 8021454:	2e00      	cmp	r6, #0
 8021456:	d0e8      	beq.n	802142a <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021458:	eb09 0207 	add.w	r2, r9, r7
 802145c:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021460:	7d13      	ldrb	r3, [r2, #20]
 8021462:	2b01      	cmp	r3, #1
 8021464:	d9e0      	bls.n	8021428 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021466:	2318      	movs	r3, #24
 8021468:	f44f 6400 	mov.w	r4, #2048	; 0x800
 802146c:	465a      	mov	r2, fp
 802146e:	4631      	mov	r1, r6
 8021470:	fb03 8307 	mla	r3, r3, r7, r8
 8021474:	4628      	mov	r0, r5
 8021476:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8021478:	4c47      	ldr	r4, [pc, #284]	; (8021598 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802147a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 802147c:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802147e:	f001 f9cf 	bl	8022820 <ethernet_output>
}
 8021482:	b005      	add	sp, #20
 8021484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021488:	4b44      	ldr	r3, [pc, #272]	; (802159c <etharp_query+0x1e8>)
 802148a:	f240 32c1 	movw	r2, #961	; 0x3c1
 802148e:	4944      	ldr	r1, [pc, #272]	; (80215a0 <etharp_query+0x1ec>)
 8021490:	4844      	ldr	r0, [pc, #272]	; (80215a4 <etharp_query+0x1f0>)
 8021492:	f002 ff37 	bl	8024304 <iprintf>
 8021496:	e7ae      	b.n	80213f6 <etharp_query+0x42>
    return (err_t)i_err;
 8021498:	b278      	sxtb	r0, r7
}
 802149a:	b005      	add	sp, #20
 802149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214a0:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80214a2:	4d3e      	ldr	r5, [pc, #248]	; (802159c <etharp_query+0x1e8>)
 80214a4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80215ac <etharp_query+0x1f8>
 80214a8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80215a4 <etharp_query+0x1f0>
 80214ac:	e005      	b.n	80214ba <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 80214ae:	7b23      	ldrb	r3, [r4, #12]
 80214b0:	065a      	lsls	r2, r3, #25
 80214b2:	d413      	bmi.n	80214dc <etharp_query+0x128>
      p = p->next;
 80214b4:	6824      	ldr	r4, [r4, #0]
    while (p) {
 80214b6:	2c00      	cmp	r4, #0
 80214b8:	d038      	beq.n	802152c <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80214ba:	8962      	ldrh	r2, [r4, #10]
 80214bc:	8923      	ldrh	r3, [r4, #8]
 80214be:	429a      	cmp	r2, r3
 80214c0:	d1f5      	bne.n	80214ae <etharp_query+0xfa>
 80214c2:	6822      	ldr	r2, [r4, #0]
 80214c4:	462b      	mov	r3, r5
 80214c6:	b132      	cbz	r2, 80214d6 <etharp_query+0x122>
 80214c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80214cc:	4659      	mov	r1, fp
 80214ce:	4650      	mov	r0, sl
 80214d0:	f002 ff18 	bl	8024304 <iprintf>
 80214d4:	e7eb      	b.n	80214ae <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 80214d6:	7b23      	ldrb	r3, [r4, #12]
 80214d8:	065b      	lsls	r3, r3, #25
 80214da:	d527      	bpl.n	802152c <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80214dc:	4632      	mov	r2, r6
 80214de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80214e2:	200e      	movs	r0, #14
 80214e4:	f7f8 ffd6 	bl	801a494 <pbuf_clone>
    if (p != NULL) {
 80214e8:	4606      	mov	r6, r0
 80214ea:	2800      	cmp	r0, #0
 80214ec:	d047      	beq.n	802157e <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 80214ee:	f240 4206 	movw	r2, #1030	; 0x406
 80214f2:	492a      	ldr	r1, [pc, #168]	; (802159c <etharp_query+0x1e8>)
 80214f4:	200b      	movs	r0, #11
 80214f6:	f7f8 f8ed 	bl	80196d4 <memp_malloc_fn>
      if (new_entry != NULL) {
 80214fa:	4602      	mov	r2, r0
 80214fc:	2800      	cmp	r0, #0
 80214fe:	d041      	beq.n	8021584 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8021500:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8021504:	2100      	movs	r1, #0
        new_entry->p = p;
 8021506:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8021508:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802150a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802150c:	f858 5003 	ldr.w	r5, [r8, r3]
 8021510:	b1ed      	cbz	r5, 802154e <etharp_query+0x19a>
          while (r->next != NULL) {
 8021512:	682c      	ldr	r4, [r5, #0]
 8021514:	b384      	cbz	r4, 8021578 <etharp_query+0x1c4>
          qlen++;
 8021516:	2301      	movs	r3, #1
            qlen++;
 8021518:	4620      	mov	r0, r4
          while (r->next != NULL) {
 802151a:	6824      	ldr	r4, [r4, #0]
            qlen++;
 802151c:	3301      	adds	r3, #1
          while (r->next != NULL) {
 802151e:	2c00      	cmp	r4, #0
 8021520:	d1fa      	bne.n	8021518 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8021522:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8021524:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8021526:	d805      	bhi.n	8021534 <etharp_query+0x180>
        result = ERR_OK;
 8021528:	4620      	mov	r0, r4
 802152a:	e77e      	b.n	802142a <etharp_query+0x76>
      pbuf_ref(p);
 802152c:	4630      	mov	r0, r6
 802152e:	f7f8 fe3d 	bl	801a1ac <pbuf_ref>
    if (p != NULL) {
 8021532:	e7dc      	b.n	80214ee <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8021534:	682b      	ldr	r3, [r5, #0]
 8021536:	444f      	add	r7, r9
          pbuf_free(old->p);
 8021538:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802153a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802153e:	f7f8 fe17 	bl	801a170 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8021542:	200b      	movs	r0, #11
 8021544:	4629      	mov	r1, r5
 8021546:	f7f8 f8fb 	bl	8019740 <memp_free>
        result = ERR_OK;
 802154a:	4620      	mov	r0, r4
 802154c:	e76d      	b.n	802142a <etharp_query+0x76>
 802154e:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 8021550:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 8021554:	e769      	b.n	802142a <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021556:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021558:	2301      	movs	r3, #1
 802155a:	4c0d      	ldr	r4, [pc, #52]	; (8021590 <etharp_query+0x1dc>)
 802155c:	4659      	mov	r1, fp
 802155e:	4628      	mov	r0, r5
 8021560:	e9cd a302 	strd	sl, r3, [sp, #8]
 8021564:	e9cd 2400 	strd	r2, r4, [sp]
 8021568:	465b      	mov	r3, fp
 802156a:	4a0a      	ldr	r2, [pc, #40]	; (8021594 <etharp_query+0x1e0>)
 802156c:	f7ff fd14 	bl	8020f98 <etharp_raw>
    if (q == NULL) {
 8021570:	e75b      	b.n	802142a <etharp_query+0x76>
    return ERR_ARG;
 8021572:	f06f 000f 	mvn.w	r0, #15
 8021576:	e758      	b.n	802142a <etharp_query+0x76>
        result = ERR_OK;
 8021578:	4620      	mov	r0, r4
          r->next = new_entry;
 802157a:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 802157c:	e755      	b.n	802142a <etharp_query+0x76>
      result = ERR_MEM;
 802157e:	f04f 30ff 	mov.w	r0, #4294967295
 8021582:	e752      	b.n	802142a <etharp_query+0x76>
        pbuf_free(p);
 8021584:	4630      	mov	r0, r6
 8021586:	f7f8 fdf3 	bl	801a170 <pbuf_free>
        result = ERR_MEM;
 802158a:	f04f 30ff 	mov.w	r0, #4294967295
 802158e:	e74c      	b.n	802142a <etharp_query+0x76>
 8021590:	080445ac 	.word	0x080445ac
 8021594:	080445a4 	.word	0x080445a4
 8021598:	2002df78 	.word	0x2002df78
 802159c:	08044074 	.word	0x08044074
 80215a0:	080441ec 	.word	0x080441ec
 80215a4:	08028ab4 	.word	0x08028ab4
 80215a8:	2002dc78 	.word	0x2002dc78
 80215ac:	080441fc 	.word	0x080441fc

080215b0 <etharp_output>:
{
 80215b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215b4:	460f      	mov	r7, r1
 80215b6:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80215b8:	4605      	mov	r5, r0
{
 80215ba:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80215bc:	2800      	cmp	r0, #0
 80215be:	f000 8086 	beq.w	80216ce <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 80215c2:	2f00      	cmp	r7, #0
 80215c4:	d072      	beq.n	80216ac <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80215c6:	2e00      	cmp	r6, #0
 80215c8:	d079      	beq.n	80216be <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80215ca:	4629      	mov	r1, r5
 80215cc:	6830      	ldr	r0, [r6, #0]
 80215ce:	f000 fba7 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 80215d2:	2800      	cmp	r0, #0
 80215d4:	d160      	bne.n	8021698 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80215d6:	6833      	ldr	r3, [r6, #0]
 80215d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80215dc:	2ae0      	cmp	r2, #224	; 0xe0
 80215de:	d03b      	beq.n	8021658 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80215e0:	686a      	ldr	r2, [r5, #4]
 80215e2:	68a9      	ldr	r1, [r5, #8]
 80215e4:	405a      	eors	r2, r3
 80215e6:	420a      	tst	r2, r1
 80215e8:	d009      	beq.n	80215fe <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 80215ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80215ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80215f0:	4293      	cmp	r3, r2
 80215f2:	d004      	beq.n	80215fe <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80215f4:	68eb      	ldr	r3, [r5, #12]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d07b      	beq.n	80216f2 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 80215fa:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80215fe:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8021714 <etharp_output+0x164>
 8021602:	4b3d      	ldr	r3, [pc, #244]	; (80216f8 <etharp_output+0x148>)
 8021604:	f898 2000 	ldrb.w	r2, [r8]
 8021608:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802160c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8021610:	7d19      	ldrb	r1, [r3, #20]
 8021612:	2901      	cmp	r1, #1
 8021614:	d902      	bls.n	802161c <etharp_output+0x6c>
 8021616:	6899      	ldr	r1, [r3, #8]
 8021618:	42a9      	cmp	r1, r5
 802161a:	d063      	beq.n	80216e4 <etharp_output+0x134>
 802161c:	4c36      	ldr	r4, [pc, #216]	; (80216f8 <etharp_output+0x148>)
{
 802161e:	2300      	movs	r3, #0
 8021620:	e003      	b.n	802162a <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021622:	2b20      	cmp	r3, #32
 8021624:	f104 0418 	add.w	r4, r4, #24
 8021628:	d038      	beq.n	802169c <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802162a:	f894 c014 	ldrb.w	ip, [r4, #20]
 802162e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021630:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021632:	f1bc 0f01 	cmp.w	ip, #1
 8021636:	d9f4      	bls.n	8021622 <etharp_output+0x72>
 8021638:	68a0      	ldr	r0, [r4, #8]
 802163a:	42a8      	cmp	r0, r5
 802163c:	d1f1      	bne.n	8021622 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 802163e:	6860      	ldr	r0, [r4, #4]
 8021640:	6831      	ldr	r1, [r6, #0]
 8021642:	4281      	cmp	r1, r0
 8021644:	d1ed      	bne.n	8021622 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 8021646:	4639      	mov	r1, r7
 8021648:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 802164a:	f888 2000 	strb.w	r2, [r8]
}
 802164e:	b004      	add	sp, #16
 8021650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8021654:	f7ff bd14 	b.w	8021080 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021658:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802165a:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802165c:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802165e:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8021662:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021666:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021668:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802166a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802166e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8021672:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8021676:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021678:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802167c:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021680:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021684:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8021688:	4639      	mov	r1, r7
 802168a:	4628      	mov	r0, r5
 802168c:	9400      	str	r4, [sp, #0]
 802168e:	f001 f8c7 	bl	8022820 <ethernet_output>
}
 8021692:	b004      	add	sp, #16
 8021694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8021698:	4b18      	ldr	r3, [pc, #96]	; (80216fc <etharp_output+0x14c>)
 802169a:	e7f1      	b.n	8021680 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 802169c:	463a      	mov	r2, r7
 802169e:	4631      	mov	r1, r6
 80216a0:	4628      	mov	r0, r5
}
 80216a2:	b004      	add	sp, #16
 80216a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 80216a8:	f7ff be84 	b.w	80213b4 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 80216ac:	4b14      	ldr	r3, [pc, #80]	; (8021700 <etharp_output+0x150>)
 80216ae:	f240 321f 	movw	r2, #799	; 0x31f
 80216b2:	4914      	ldr	r1, [pc, #80]	; (8021704 <etharp_output+0x154>)
 80216b4:	4814      	ldr	r0, [pc, #80]	; (8021708 <etharp_output+0x158>)
 80216b6:	f002 fe25 	bl	8024304 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80216ba:	2e00      	cmp	r6, #0
 80216bc:	d185      	bne.n	80215ca <etharp_output+0x1a>
 80216be:	4b10      	ldr	r3, [pc, #64]	; (8021700 <etharp_output+0x150>)
 80216c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80216c4:	4911      	ldr	r1, [pc, #68]	; (802170c <etharp_output+0x15c>)
 80216c6:	4810      	ldr	r0, [pc, #64]	; (8021708 <etharp_output+0x158>)
 80216c8:	f002 fe1c 	bl	8024304 <iprintf>
 80216cc:	e77d      	b.n	80215ca <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80216ce:	4b0c      	ldr	r3, [pc, #48]	; (8021700 <etharp_output+0x150>)
 80216d0:	f240 321e 	movw	r2, #798	; 0x31e
 80216d4:	490e      	ldr	r1, [pc, #56]	; (8021710 <etharp_output+0x160>)
 80216d6:	480c      	ldr	r0, [pc, #48]	; (8021708 <etharp_output+0x158>)
 80216d8:	f002 fe14 	bl	8024304 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80216dc:	2f00      	cmp	r7, #0
 80216de:	f47f af72 	bne.w	80215c6 <etharp_output+0x16>
 80216e2:	e7e3      	b.n	80216ac <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 80216e4:	685b      	ldr	r3, [r3, #4]
 80216e6:	6831      	ldr	r1, [r6, #0]
 80216e8:	4299      	cmp	r1, r3
 80216ea:	d197      	bne.n	802161c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80216ec:	4639      	mov	r1, r7
 80216ee:	4628      	mov	r0, r5
 80216f0:	e7ad      	b.n	802164e <etharp_output+0x9e>
            return ERR_RTE;
 80216f2:	f06f 0003 	mvn.w	r0, #3
 80216f6:	e7cc      	b.n	8021692 <etharp_output+0xe2>
 80216f8:	2002dc78 	.word	0x2002dc78
 80216fc:	080445a4 	.word	0x080445a4
 8021700:	08044074 	.word	0x08044074
 8021704:	08044218 	.word	0x08044218
 8021708:	08028ab4 	.word	0x08028ab4
 802170c:	080441a8 	.word	0x080441a8
 8021710:	0802b788 	.word	0x0802b788
 8021714:	2002df78 	.word	0x2002df78

08021718 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8021718:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802171a:	2301      	movs	r3, #1
{
 802171c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802171e:	4c07      	ldr	r4, [pc, #28]	; (802173c <etharp_request+0x24>)
 8021720:	4a07      	ldr	r2, [pc, #28]	; (8021740 <etharp_request+0x28>)
 8021722:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021724:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021726:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802172a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 802172e:	9400      	str	r4, [sp, #0]
 8021730:	4619      	mov	r1, r3
 8021732:	f7ff fc31 	bl	8020f98 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8021736:	b004      	add	sp, #16
 8021738:	bd10      	pop	{r4, pc}
 802173a:	bf00      	nop
 802173c:	080445ac 	.word	0x080445ac
 8021740:	080445a4 	.word	0x080445a4

08021744 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021746:	460e      	mov	r6, r1
 8021748:	b087      	sub	sp, #28
 802174a:	4617      	mov	r7, r2
 802174c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802174e:	2124      	movs	r1, #36	; 0x24
 8021750:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021754:	2022      	movs	r0, #34	; 0x22
 8021756:	f7f8 fb39 	bl	8019dcc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 802175a:	b3a8      	cbz	r0, 80217c8 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802175c:	8943      	ldrh	r3, [r0, #10]
 802175e:	4605      	mov	r5, r0
 8021760:	2b23      	cmp	r3, #35	; 0x23
 8021762:	d933      	bls.n	80217cc <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8021764:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021766:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8021768:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 802176a:	2600      	movs	r6, #0
  icmphdr->code = code;
 802176c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 802176e:	7126      	strb	r6, [r4, #4]
 8021770:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8021772:	71a6      	strb	r6, [r4, #6]
 8021774:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021776:	6818      	ldr	r0, [r3, #0]
 8021778:	6859      	ldr	r1, [r3, #4]
 802177a:	689a      	ldr	r2, [r3, #8]
 802177c:	68df      	ldr	r7, [r3, #12]
 802177e:	60a0      	str	r0, [r4, #8]
 8021780:	6167      	str	r7, [r4, #20]
 8021782:	60e1      	str	r1, [r4, #12]
 8021784:	6122      	str	r2, [r4, #16]
 8021786:	6918      	ldr	r0, [r3, #16]
 8021788:	6959      	ldr	r1, [r3, #20]
 802178a:	699a      	ldr	r2, [r3, #24]
 802178c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802178e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021790:	61e1      	str	r1, [r4, #28]
 8021792:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8021794:	68db      	ldr	r3, [r3, #12]
 8021796:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8021798:	f000 f8e6 	bl	8021968 <ip4_route>
#endif
  if (netif != NULL) {
 802179c:	4607      	mov	r7, r0
 802179e:	b180      	cbz	r0, 80217c2 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80217a0:	8969      	ldrh	r1, [r5, #10]
 80217a2:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 80217a4:	70a6      	strb	r6, [r4, #2]
 80217a6:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80217a8:	f7f7 fa4e 	bl	8018c48 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80217ac:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80217ae:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80217b0:	aa05      	add	r2, sp, #20
 80217b2:	4631      	mov	r1, r6
 80217b4:	4628      	mov	r0, r5
 80217b6:	9600      	str	r6, [sp, #0]
 80217b8:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80217bc:	23ff      	movs	r3, #255	; 0xff
 80217be:	f000 fa9d 	bl	8021cfc <ip4_output_if>
  }
  pbuf_free(q);
 80217c2:	4628      	mov	r0, r5
 80217c4:	f7f8 fcd4 	bl	801a170 <pbuf_free>
}
 80217c8:	b007      	add	sp, #28
 80217ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80217cc:	4b03      	ldr	r3, [pc, #12]	; (80217dc <icmp_send_response+0x98>)
 80217ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80217d2:	4903      	ldr	r1, [pc, #12]	; (80217e0 <icmp_send_response+0x9c>)
 80217d4:	4803      	ldr	r0, [pc, #12]	; (80217e4 <icmp_send_response+0xa0>)
 80217d6:	f002 fd95 	bl	8024304 <iprintf>
 80217da:	e7c3      	b.n	8021764 <icmp_send_response+0x20>
 80217dc:	08044224 	.word	0x08044224
 80217e0:	0804425c 	.word	0x0804425c
 80217e4:	08028ab4 	.word	0x08028ab4

080217e8 <icmp_input>:
{
 80217e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 80217ec:	4f54      	ldr	r7, [pc, #336]	; (8021940 <icmp_input+0x158>)
{
 80217ee:	b086      	sub	sp, #24
 80217f0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 80217f2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80217f6:	f898 4000 	ldrb.w	r4, [r8]
 80217fa:	f004 040f 	and.w	r4, r4, #15
 80217fe:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8021800:	2c13      	cmp	r4, #19
 8021802:	d913      	bls.n	802182c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8021804:	8943      	ldrh	r3, [r0, #10]
 8021806:	2b03      	cmp	r3, #3
 8021808:	d910      	bls.n	802182c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 802180a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 802180c:	781b      	ldrb	r3, [r3, #0]
 802180e:	2b08      	cmp	r3, #8
 8021810:	d10c      	bne.n	802182c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021812:	6978      	ldr	r0, [r7, #20]
 8021814:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8021818:	2be0      	cmp	r3, #224	; 0xe0
 802181a:	d007      	beq.n	802182c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802181c:	460e      	mov	r6, r1
 802181e:	6839      	ldr	r1, [r7, #0]
 8021820:	f000 fa7e 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 8021824:	b910      	cbnz	r0, 802182c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8021826:	892b      	ldrh	r3, [r5, #8]
 8021828:	2b07      	cmp	r3, #7
 802182a:	d805      	bhi.n	8021838 <icmp_input+0x50>
  pbuf_free(p);
 802182c:	4628      	mov	r0, r5
}
 802182e:	b006      	add	sp, #24
 8021830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8021834:	f7f8 bc9c 	b.w	801a170 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8021838:	4628      	mov	r0, r5
 802183a:	f7f7 fa0b 	bl	8018c54 <inet_chksum_pbuf>
 802183e:	2800      	cmp	r0, #0
 8021840:	d1f4      	bne.n	802182c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021842:	f104 010e 	add.w	r1, r4, #14
 8021846:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 8021848:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802184c:	9105      	str	r1, [sp, #20]
 802184e:	f7f8 fbcf 	bl	8019ff0 <pbuf_add_header>
 8021852:	9905      	ldr	r1, [sp, #20]
 8021854:	2800      	cmp	r0, #0
 8021856:	d058      	beq.n	802190a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8021858:	892b      	ldrh	r3, [r5, #8]
 802185a:	eb03 0109 	add.w	r1, r3, r9
 802185e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8021860:	428b      	cmp	r3, r1
 8021862:	d8e3      	bhi.n	802182c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8021864:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021868:	200e      	movs	r0, #14
 802186a:	f7f8 faaf 	bl	8019dcc <pbuf_alloc>
        if (r == NULL) {
 802186e:	4682      	mov	sl, r0
 8021870:	2800      	cmp	r0, #0
 8021872:	d0db      	beq.n	802182c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8021874:	8942      	ldrh	r2, [r0, #10]
 8021876:	f104 0308 	add.w	r3, r4, #8
 802187a:	429a      	cmp	r2, r3
 802187c:	d351      	bcc.n	8021922 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 802187e:	4641      	mov	r1, r8
 8021880:	4622      	mov	r2, r4
 8021882:	6840      	ldr	r0, [r0, #4]
 8021884:	f001 fd78 	bl	8023378 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8021888:	4621      	mov	r1, r4
 802188a:	4650      	mov	r0, sl
 802188c:	f7f8 fbe4 	bl	801a058 <pbuf_remove_header>
 8021890:	2800      	cmp	r0, #0
 8021892:	d14a      	bne.n	802192a <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8021894:	4629      	mov	r1, r5
 8021896:	4650      	mov	r0, sl
 8021898:	f7f8 fcf2 	bl	801a280 <pbuf_copy>
 802189c:	2800      	cmp	r0, #0
 802189e:	d140      	bne.n	8021922 <icmp_input+0x13a>
        pbuf_free(p);
 80218a0:	4628      	mov	r0, r5
 80218a2:	4655      	mov	r5, sl
 80218a4:	f7f8 fc64 	bl	801a170 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80218a8:	4621      	mov	r1, r4
 80218aa:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 80218ac:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80218b0:	f7f8 fb9e 	bl	8019ff0 <pbuf_add_header>
 80218b4:	2800      	cmp	r0, #0
 80218b6:	d1b9      	bne.n	802182c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80218b8:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80218ba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 80218be:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80218c0:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 80218c2:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80218c4:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 80218c6:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80218c8:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80218ca:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80218ce:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80218d2:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80218d4:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80218d6:	bf8c      	ite	hi
 80218d8:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80218da:	3308      	addls	r3, #8
 80218dc:	b29b      	uxth	r3, r3
 80218de:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80218e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 80218e6:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80218e8:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80218ec:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80218ee:	f7f7 f9ab 	bl	8018c48 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80218f2:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80218f4:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80218f6:	4643      	mov	r3, r8
 80218f8:	4912      	ldr	r1, [pc, #72]	; (8021944 <icmp_input+0x15c>)
 80218fa:	4628      	mov	r0, r5
 80218fc:	9700      	str	r7, [sp, #0]
 80218fe:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8021902:	463a      	mov	r2, r7
 8021904:	f000 f9fa 	bl	8021cfc <ip4_output_if>
  pbuf_free(p);
 8021908:	e790      	b.n	802182c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802190a:	4628      	mov	r0, r5
 802190c:	f7f8 fba4 	bl	801a058 <pbuf_remove_header>
 8021910:	2800      	cmp	r0, #0
 8021912:	d0c9      	beq.n	80218a8 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021914:	4b0c      	ldr	r3, [pc, #48]	; (8021948 <icmp_input+0x160>)
 8021916:	22c7      	movs	r2, #199	; 0xc7
 8021918:	490c      	ldr	r1, [pc, #48]	; (802194c <icmp_input+0x164>)
 802191a:	480d      	ldr	r0, [pc, #52]	; (8021950 <icmp_input+0x168>)
 802191c:	f002 fcf2 	bl	8024304 <iprintf>
          goto icmperr;
 8021920:	e784      	b.n	802182c <icmp_input+0x44>
          pbuf_free(r);
 8021922:	4650      	mov	r0, sl
 8021924:	f7f8 fc24 	bl	801a170 <pbuf_free>
          goto icmperr;
 8021928:	e780      	b.n	802182c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802192a:	4b07      	ldr	r3, [pc, #28]	; (8021948 <icmp_input+0x160>)
 802192c:	22b6      	movs	r2, #182	; 0xb6
 802192e:	4909      	ldr	r1, [pc, #36]	; (8021954 <icmp_input+0x16c>)
 8021930:	4807      	ldr	r0, [pc, #28]	; (8021950 <icmp_input+0x168>)
 8021932:	f002 fce7 	bl	8024304 <iprintf>
          pbuf_free(r);
 8021936:	4650      	mov	r0, sl
 8021938:	f7f8 fc1a 	bl	801a170 <pbuf_free>
          goto icmperr;
 802193c:	e776      	b.n	802182c <icmp_input+0x44>
 802193e:	bf00      	nop
 8021940:	2001ec88 	.word	0x2001ec88
 8021944:	2001ec9c 	.word	0x2001ec9c
 8021948:	08044224 	.word	0x08044224
 802194c:	080442c0 	.word	0x080442c0
 8021950:	08028ab4 	.word	0x08028ab4
 8021954:	08044288 	.word	0x08044288

08021958 <icmp_dest_unreach>:
{
 8021958:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 802195a:	2103      	movs	r1, #3
 802195c:	f7ff bef2 	b.w	8021744 <icmp_send_response>

08021960 <icmp_time_exceeded>:
{
 8021960:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8021962:	210b      	movs	r1, #11
 8021964:	f7ff beee 	b.w	8021744 <icmp_send_response>

08021968 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021968:	4b19      	ldr	r3, [pc, #100]	; (80219d0 <ip4_route+0x68>)
{
 802196a:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 802196c:	681b      	ldr	r3, [r3, #0]
 802196e:	b1ab      	cbz	r3, 802199c <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021970:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8021974:	07d4      	lsls	r4, r2, #31
 8021976:	d5f9      	bpl.n	802196c <ip4_route+0x4>
 8021978:	0751      	lsls	r1, r2, #29
 802197a:	d5f7      	bpl.n	802196c <ip4_route+0x4>
 802197c:	6859      	ldr	r1, [r3, #4]
 802197e:	2900      	cmp	r1, #0
 8021980:	d0f4      	beq.n	802196c <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021982:	6804      	ldr	r4, [r0, #0]
 8021984:	689d      	ldr	r5, [r3, #8]
 8021986:	4061      	eors	r1, r4
 8021988:	4229      	tst	r1, r5
 802198a:	d004      	beq.n	8021996 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802198c:	0792      	lsls	r2, r2, #30
 802198e:	d4ed      	bmi.n	802196c <ip4_route+0x4>
 8021990:	68da      	ldr	r2, [r3, #12]
 8021992:	4294      	cmp	r4, r2
 8021994:	d1ea      	bne.n	802196c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8021996:	4618      	mov	r0, r3
 8021998:	bc30      	pop	{r4, r5}
 802199a:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802199c:	4b0d      	ldr	r3, [pc, #52]	; (80219d4 <ip4_route+0x6c>)
 802199e:	681b      	ldr	r3, [r3, #0]
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d0f8      	beq.n	8021996 <ip4_route+0x2e>
 80219a4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80219a8:	f002 0205 	and.w	r2, r2, #5
 80219ac:	2a05      	cmp	r2, #5
 80219ae:	d108      	bne.n	80219c2 <ip4_route+0x5a>
 80219b0:	685a      	ldr	r2, [r3, #4]
 80219b2:	b152      	cbz	r2, 80219ca <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80219b4:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 80219b6:	2a7f      	cmp	r2, #127	; 0x7f
 80219b8:	bf08      	it	eq
 80219ba:	2300      	moveq	r3, #0
}
 80219bc:	bc30      	pop	{r4, r5}
 80219be:	4618      	mov	r0, r3
 80219c0:	4770      	bx	lr
    return NULL;
 80219c2:	2300      	movs	r3, #0
}
 80219c4:	bc30      	pop	{r4, r5}
 80219c6:	4618      	mov	r0, r3
 80219c8:	4770      	bx	lr
    return NULL;
 80219ca:	4613      	mov	r3, r2
 80219cc:	e7e3      	b.n	8021996 <ip4_route+0x2e>
 80219ce:	bf00      	nop
 80219d0:	2002dbc0 	.word	0x2002dbc0
 80219d4:	2002dbbc 	.word	0x2002dbbc

080219d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80219d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80219dc:	6847      	ldr	r7, [r0, #4]
{
 80219de:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 80219e0:	783b      	ldrb	r3, [r7, #0]
 80219e2:	091a      	lsrs	r2, r3, #4
 80219e4:	2a04      	cmp	r2, #4
 80219e6:	f040 80a8 	bne.w	8021b3a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80219ea:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80219ee:	8878      	ldrh	r0, [r7, #2]
 80219f0:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80219f2:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80219f6:	f7f6 fb7f 	bl	80180f8 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80219fa:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80219fc:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80219fe:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8021a00:	4283      	cmp	r3, r0
 8021a02:	f200 80a0 	bhi.w	8021b46 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021a06:	8963      	ldrh	r3, [r4, #10]
 8021a08:	42ab      	cmp	r3, r5
 8021a0a:	f0c0 8096 	bcc.w	8021b3a <ip4_input+0x162>
 8021a0e:	8923      	ldrh	r3, [r4, #8]
 8021a10:	4543      	cmp	r3, r8
 8021a12:	f0c0 8092 	bcc.w	8021b3a <ip4_input+0x162>
 8021a16:	2d13      	cmp	r5, #19
 8021a18:	f240 808f 	bls.w	8021b3a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021a1c:	693b      	ldr	r3, [r7, #16]
 8021a1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8021bc0 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021a22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021a26:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021a2a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8021a2c:	68f8      	ldr	r0, [r7, #12]
 8021a2e:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021a32:	d073      	beq.n	8021b1c <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021a34:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8021a38:	07d2      	lsls	r2, r2, #31
 8021a3a:	d503      	bpl.n	8021a44 <ip4_input+0x6c>
 8021a3c:	6872      	ldr	r2, [r6, #4]
 8021a3e:	2a00      	cmp	r2, #0
 8021a40:	f040 8094 	bne.w	8021b6c <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021a44:	b2db      	uxtb	r3, r3
 8021a46:	2b7f      	cmp	r3, #127	; 0x7f
 8021a48:	d06c      	beq.n	8021b24 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021a4a:	4b5c      	ldr	r3, [pc, #368]	; (8021bbc <ip4_input+0x1e4>)
 8021a4c:	681d      	ldr	r5, [r3, #0]
 8021a4e:	b935      	cbnz	r5, 8021a5e <ip4_input+0x86>
 8021a50:	e068      	b.n	8021b24 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021a52:	f000 f965 	bl	8021d20 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021a56:	b980      	cbnz	r0, 8021a7a <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8021a58:	682d      	ldr	r5, [r5, #0]
 8021a5a:	2d00      	cmp	r5, #0
 8021a5c:	d062      	beq.n	8021b24 <ip4_input+0x14c>
          if (netif == inp) {
 8021a5e:	42ae      	cmp	r6, r5
 8021a60:	d0fa      	beq.n	8021a58 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021a62:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8021a66:	07db      	lsls	r3, r3, #31
 8021a68:	d5f6      	bpl.n	8021a58 <ip4_input+0x80>
 8021a6a:	686b      	ldr	r3, [r5, #4]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d0f3      	beq.n	8021a58 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021a70:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021a74:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021a76:	4283      	cmp	r3, r0
 8021a78:	d1eb      	bne.n	8021a52 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021a7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8021a7e:	2800      	cmp	r0, #0
 8021a80:	d157      	bne.n	8021b32 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021a82:	88fb      	ldrh	r3, [r7, #6]
 8021a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8021a88:	b133      	cbz	r3, 8021a98 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021a8a:	4620      	mov	r0, r4
 8021a8c:	f000 fb1c 	bl	80220c8 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8021a90:	4604      	mov	r4, r0
 8021a92:	2800      	cmp	r0, #0
 8021a94:	d054      	beq.n	8021b40 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021a96:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8021a98:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8021a9c:	4631      	mov	r1, r6
 8021a9e:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8021aa0:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021aa4:	783b      	ldrb	r3, [r7, #0]
 8021aa6:	f003 030f 	and.w	r3, r3, #15
 8021aaa:	009b      	lsls	r3, r3, #2
 8021aac:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8021ab0:	f7f8 fd9e 	bl	801a5f0 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8021ab4:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8021ab6:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8021ab8:	d024      	beq.n	8021b04 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021aba:	4649      	mov	r1, r9
 8021abc:	4620      	mov	r0, r4
 8021abe:	f7f8 facb 	bl	801a058 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8021ac2:	7a7b      	ldrb	r3, [r7, #9]
 8021ac4:	2b06      	cmp	r3, #6
 8021ac6:	d065      	beq.n	8021b94 <ip4_input+0x1bc>
 8021ac8:	2b11      	cmp	r3, #17
 8021aca:	d05e      	beq.n	8021b8a <ip4_input+0x1b2>
 8021acc:	2b01      	cmp	r3, #1
 8021ace:	d057      	beq.n	8021b80 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8021ad0:	f1ba 0f02 	cmp.w	sl, #2
 8021ad4:	d013      	beq.n	8021afe <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021ad6:	4629      	mov	r1, r5
 8021ad8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8021adc:	f000 f920 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 8021ae0:	b968      	cbnz	r0, 8021afe <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021ae2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8021ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021aea:	2be0      	cmp	r3, #224	; 0xe0
 8021aec:	d007      	beq.n	8021afe <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021aee:	4649      	mov	r1, r9
 8021af0:	4620      	mov	r0, r4
 8021af2:	f7f8 fae9 	bl	801a0c8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021af6:	2102      	movs	r1, #2
 8021af8:	4620      	mov	r0, r4
 8021afa:	f7ff ff2d 	bl	8021958 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021afe:	4620      	mov	r0, r4
 8021b00:	f7f8 fb36 	bl	801a170 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021b04:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8021b06:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8021b08:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8021b0c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8021b10:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021b14:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8021b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021b1c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8021b20:	07d9      	lsls	r1, r3, #31
 8021b22:	d41e      	bmi.n	8021b62 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8021b24:	7a7b      	ldrb	r3, [r7, #9]
 8021b26:	2b11      	cmp	r3, #17
 8021b28:	d039      	beq.n	8021b9e <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021b2a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8021b2e:	b120      	cbz	r0, 8021b3a <ip4_input+0x162>
 8021b30:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021b32:	4631      	mov	r1, r6
 8021b34:	f000 f8f4 	bl	8021d20 <ip4_addr_isbroadcast_u32>
 8021b38:	b150      	cbz	r0, 8021b50 <ip4_input+0x178>
    pbuf_free(p);
 8021b3a:	4620      	mov	r0, r4
 8021b3c:	f7f8 fb18 	bl	801a170 <pbuf_free>
}
 8021b40:	2000      	movs	r0, #0
 8021b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8021b46:	4601      	mov	r1, r0
 8021b48:	4620      	mov	r0, r4
 8021b4a:	f7f8 f9f9 	bl	8019f40 <pbuf_realloc>
 8021b4e:	e75a      	b.n	8021a06 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8021b50:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8021b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021b58:	2be0      	cmp	r3, #224	; 0xe0
 8021b5a:	d0ee      	beq.n	8021b3a <ip4_input+0x162>
  if (netif == NULL) {
 8021b5c:	2d00      	cmp	r5, #0
 8021b5e:	d190      	bne.n	8021a82 <ip4_input+0xaa>
 8021b60:	e7eb      	b.n	8021b3a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021b62:	6873      	ldr	r3, [r6, #4]
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d0dd      	beq.n	8021b24 <ip4_input+0x14c>
 8021b68:	4635      	mov	r5, r6
 8021b6a:	e788      	b.n	8021a7e <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021b6c:	4293      	cmp	r3, r2
 8021b6e:	d0fb      	beq.n	8021b68 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021b70:	4618      	mov	r0, r3
 8021b72:	4631      	mov	r1, r6
 8021b74:	f000 f8d4 	bl	8021d20 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021b78:	b9e0      	cbnz	r0, 8021bb4 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021b7a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8021b7e:	e761      	b.n	8021a44 <ip4_input+0x6c>
        icmp_input(p, inp);
 8021b80:	4631      	mov	r1, r6
 8021b82:	4620      	mov	r0, r4
 8021b84:	f7ff fe30 	bl	80217e8 <icmp_input>
        break;
 8021b88:	e7bc      	b.n	8021b04 <ip4_input+0x12c>
        udp_input(p, inp);
 8021b8a:	4631      	mov	r1, r6
 8021b8c:	4620      	mov	r0, r4
 8021b8e:	f7fd f8a1 	bl	801ecd4 <udp_input>
        break;
 8021b92:	e7b7      	b.n	8021b04 <ip4_input+0x12c>
        tcp_input(p, inp);
 8021b94:	4631      	mov	r1, r6
 8021b96:	4620      	mov	r0, r4
 8021b98:	f7fa fefc 	bl	801c994 <tcp_input>
        break;
 8021b9c:	e7b2      	b.n	8021b04 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8021b9e:	eb07 0309 	add.w	r3, r7, r9
 8021ba2:	885b      	ldrh	r3, [r3, #2]
 8021ba4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8021ba8:	d1bf      	bne.n	8021b2a <ip4_input+0x152>
 8021baa:	4635      	mov	r5, r6
  if (netif == NULL) {
 8021bac:	2d00      	cmp	r5, #0
 8021bae:	f47f af68 	bne.w	8021a82 <ip4_input+0xaa>
 8021bb2:	e7c2      	b.n	8021b3a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8021bb4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8021bb8:	4635      	mov	r5, r6
 8021bba:	e760      	b.n	8021a7e <ip4_input+0xa6>
 8021bbc:	2002dbc0 	.word	0x2002dbc0
 8021bc0:	2001ec88 	.word	0x2001ec88

08021bc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc8:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021bca:	7b83      	ldrb	r3, [r0, #14]
{
 8021bcc:	b083      	sub	sp, #12
 8021bce:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021bd0:	2b01      	cmp	r3, #1
{
 8021bd2:	4689      	mov	r9, r1
 8021bd4:	4617      	mov	r7, r2
 8021bd6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8021bda:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8021bde:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021be2:	d158      	bne.n	8021c96 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021be4:	2f00      	cmp	r7, #0
 8021be6:	d05f      	beq.n	8021ca8 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021be8:	2114      	movs	r1, #20
 8021bea:	4620      	mov	r0, r4
 8021bec:	f7f8 fa00 	bl	8019ff0 <pbuf_add_header>
 8021bf0:	2800      	cmp	r0, #0
 8021bf2:	d174      	bne.n	8021cde <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021bf4:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8021bf6:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021bf8:	2b13      	cmp	r3, #19
 8021bfa:	d95d      	bls.n	8021cb8 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021bfc:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8021c00:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8021c04:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021c08:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8021c0a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021c0c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8021c0e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8021c10:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021c12:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8021c16:	fa10 f383 	uxtah	r3, r0, r3
 8021c1a:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8021c1c:	ea4f 252a 	mov.w	r5, sl, asr #8
 8021c20:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8021c24:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021c28:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021c2a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8021cf8 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021c2e:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021c30:	8920      	ldrh	r0, [r4, #8]
 8021c32:	f7f6 fa61 	bl	80180f8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8021c36:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8021c38:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021c3a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8021c3c:	71b3      	strb	r3, [r6, #6]
 8021c3e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021c40:	f8ba 0000 	ldrh.w	r0, [sl]
 8021c44:	f7f6 fa58 	bl	80180f8 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021c48:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8021c4c:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021c4e:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8021c50:	3201      	adds	r2, #1
 8021c52:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8021c56:	f1b9 0f00 	cmp.w	r9, #0
 8021c5a:	d035      	beq.n	8021cc8 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021c5c:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8021c60:	fa13 f382 	uxtah	r3, r3, r2
 8021c64:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8021c66:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8021c6a:	b29a      	uxth	r2, r3
 8021c6c:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8021c70:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8021c74:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8021c76:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021c78:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8021c7c:	b113      	cbz	r3, 8021c84 <ip4_output_if_src+0xc0>
 8021c7e:	8922      	ldrh	r2, [r4, #8]
 8021c80:	429a      	cmp	r2, r3
 8021c82:	d824      	bhi.n	8021cce <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021c84:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8021c88:	463a      	mov	r2, r7
 8021c8a:	4621      	mov	r1, r4
 8021c8c:	4640      	mov	r0, r8
 8021c8e:	4798      	blx	r3
}
 8021c90:	b003      	add	sp, #12
 8021c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021c96:	4b13      	ldr	r3, [pc, #76]	; (8021ce4 <ip4_output_if_src+0x120>)
 8021c98:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021c9c:	4912      	ldr	r1, [pc, #72]	; (8021ce8 <ip4_output_if_src+0x124>)
 8021c9e:	4813      	ldr	r0, [pc, #76]	; (8021cec <ip4_output_if_src+0x128>)
 8021ca0:	f002 fb30 	bl	8024304 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8021ca4:	2f00      	cmp	r7, #0
 8021ca6:	d19f      	bne.n	8021be8 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8021ca8:	8963      	ldrh	r3, [r4, #10]
 8021caa:	2b13      	cmp	r3, #19
 8021cac:	d917      	bls.n	8021cde <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021cae:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8021cb0:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021cb2:	691b      	ldr	r3, [r3, #16]
 8021cb4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8021cb6:	e7df      	b.n	8021c78 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021cb8:	4b0a      	ldr	r3, [pc, #40]	; (8021ce4 <ip4_output_if_src+0x120>)
 8021cba:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021cbe:	490c      	ldr	r1, [pc, #48]	; (8021cf0 <ip4_output_if_src+0x12c>)
 8021cc0:	480a      	ldr	r0, [pc, #40]	; (8021cec <ip4_output_if_src+0x128>)
 8021cc2:	f002 fb1f 	bl	8024304 <iprintf>
 8021cc6:	e799      	b.n	8021bfc <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021cc8:	4a0a      	ldr	r2, [pc, #40]	; (8021cf4 <ip4_output_if_src+0x130>)
 8021cca:	6812      	ldr	r2, [r2, #0]
 8021ccc:	e7c8      	b.n	8021c60 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 8021cce:	463a      	mov	r2, r7
 8021cd0:	4641      	mov	r1, r8
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	f000 fc36 	bl	8022544 <ip4_frag>
}
 8021cd8:	b003      	add	sp, #12
 8021cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8021cde:	f06f 0001 	mvn.w	r0, #1
 8021ce2:	e7d5      	b.n	8021c90 <ip4_output_if_src+0xcc>
 8021ce4:	080442f4 	.word	0x080442f4
 8021ce8:	08044328 	.word	0x08044328
 8021cec:	08028ab4 	.word	0x08028ab4
 8021cf0:	08044334 	.word	0x08044334
 8021cf4:	080443ac 	.word	0x080443ac
 8021cf8:	2002df7a 	.word	0x2002df7a

08021cfc <ip4_output_if>:
{
 8021cfc:	b4f0      	push	{r4, r5, r6, r7}
 8021cfe:	9c06      	ldr	r4, [sp, #24]
 8021d00:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8021d04:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021d08:	b11a      	cbz	r2, 8021d12 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8021d0a:	b109      	cbz	r1, 8021d10 <ip4_output_if+0x14>
 8021d0c:	680f      	ldr	r7, [r1, #0]
 8021d0e:	b907      	cbnz	r7, 8021d12 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8021d10:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021d12:	9504      	str	r5, [sp, #16]
 8021d14:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8021d18:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021d1a:	f7ff bf53 	b.w	8021bc4 <ip4_output_if_src>
 8021d1e:	bf00      	nop

08021d20 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021d20:	1e43      	subs	r3, r0, #1
 8021d22:	3303      	adds	r3, #3
 8021d24:	d814      	bhi.n	8021d50 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021d26:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8021d2a:	f013 0302 	ands.w	r3, r3, #2
 8021d2e:	d00d      	beq.n	8021d4c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021d30:	684b      	ldr	r3, [r1, #4]
 8021d32:	4283      	cmp	r3, r0
 8021d34:	d00f      	beq.n	8021d56 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021d36:	688a      	ldr	r2, [r1, #8]
 8021d38:	4043      	eors	r3, r0
 8021d3a:	4213      	tst	r3, r2
 8021d3c:	d10b      	bne.n	8021d56 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021d3e:	43d3      	mvns	r3, r2
 8021d40:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8021d44:	1ac3      	subs	r3, r0, r3
 8021d46:	fab3 f383 	clz	r3, r3
 8021d4a:	095b      	lsrs	r3, r3, #5
  }
}
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	4770      	bx	lr
    return 1;
 8021d50:	2301      	movs	r3, #1
}
 8021d52:	4618      	mov	r0, r3
 8021d54:	4770      	bx	lr
    return 0;
 8021d56:	2300      	movs	r3, #0
}
 8021d58:	4618      	mov	r0, r3
 8021d5a:	4770      	bx	lr

08021d5c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8021d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8021d60:	4e4f      	ldr	r6, [pc, #316]	; (8021ea0 <ip4addr_aton+0x144>)
{
 8021d62:	b085      	sub	sp, #20
  c = *cp;
 8021d64:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8021d66:	5cf2      	ldrb	r2, [r6, r3]
 8021d68:	0754      	lsls	r4, r2, #29
 8021d6a:	d538      	bpl.n	8021dde <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8021d6c:	46e9      	mov	r9, sp
 8021d6e:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8021d70:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8021d74:	464f      	mov	r7, r9
    if (c == '0') {
 8021d76:	2b30      	cmp	r3, #48	; 0x30
 8021d78:	d035      	beq.n	8021de6 <ip4addr_aton+0x8a>
    base = 10;
 8021d7a:	210a      	movs	r1, #10
 8021d7c:	1c42      	adds	r2, r0, #1
 8021d7e:	2400      	movs	r4, #0
 8021d80:	e003      	b.n	8021d8a <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8021d82:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8021d86:	7813      	ldrb	r3, [r2, #0]
 8021d88:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8021d8a:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021d8e:	f103 0e0a 	add.w	lr, r3, #10
 8021d92:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8021d96:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8021d9a:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021d9e:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8021da2:	d1ee      	bne.n	8021d82 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8021da4:	2910      	cmp	r1, #16
 8021da6:	d10d      	bne.n	8021dc4 <ip4addr_aton+0x68>
 8021da8:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8021dac:	d00a      	beq.n	8021dc4 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021dae:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8021db2:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021db4:	bf0c      	ite	eq
 8021db6:	2061      	moveq	r0, #97	; 0x61
 8021db8:	2041      	movne	r0, #65	; 0x41
 8021dba:	ebae 0e00 	sub.w	lr, lr, r0
 8021dbe:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8021dc2:	e7e1      	b.n	8021d88 <ip4addr_aton+0x2c>
    if (c == '.') {
 8021dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8021dc6:	d11a      	bne.n	8021dfe <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8021dc8:	4547      	cmp	r7, r8
 8021dca:	d008      	beq.n	8021dde <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8021dcc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021dd0:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8021dd4:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8021dd8:	5cf2      	ldrb	r2, [r6, r3]
 8021dda:	0752      	lsls	r2, r2, #29
 8021ddc:	d4cb      	bmi.n	8021d76 <ip4addr_aton+0x1a>
      return 0;
 8021dde:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8021de0:	b005      	add	sp, #20
 8021de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8021de6:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8021de8:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8021dec:	2a58      	cmp	r2, #88	; 0x58
 8021dee:	d002      	beq.n	8021df6 <ip4addr_aton+0x9a>
      c = *++cp;
 8021df0:	3001      	adds	r0, #1
        base = 8;
 8021df2:	2108      	movs	r1, #8
 8021df4:	e7c2      	b.n	8021d7c <ip4addr_aton+0x20>
        c = *++cp;
 8021df6:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8021df8:	2110      	movs	r1, #16
        c = *++cp;
 8021dfa:	3002      	adds	r0, #2
 8021dfc:	e7be      	b.n	8021d7c <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8021dfe:	b113      	cbz	r3, 8021e06 <ip4addr_aton+0xaa>
 8021e00:	f01c 0f08 	tst.w	ip, #8
 8021e04:	d0eb      	beq.n	8021dde <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8021e06:	eba7 0009 	sub.w	r0, r7, r9
 8021e0a:	1080      	asrs	r0, r0, #2
 8021e0c:	3001      	adds	r0, #1
 8021e0e:	2804      	cmp	r0, #4
 8021e10:	d83e      	bhi.n	8021e90 <ip4addr_aton+0x134>
 8021e12:	a301      	add	r3, pc, #4	; (adr r3, 8021e18 <ip4addr_aton+0xbc>)
 8021e14:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8021e18:	08021de1 	.word	0x08021de1
 8021e1c:	08021e3d 	.word	0x08021e3d
 8021e20:	08021e2d 	.word	0x08021e2d
 8021e24:	08021e71 	.word	0x08021e71
 8021e28:	08021e4d 	.word	0x08021e4d
      if (val > 0xffffffUL) {
 8021e2c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8021e30:	d2d5      	bcs.n	8021dde <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8021e32:	9b00      	ldr	r3, [sp, #0]
 8021e34:	2bff      	cmp	r3, #255	; 0xff
 8021e36:	d8d2      	bhi.n	8021dde <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8021e38:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8021e3c:	b335      	cbz	r5, 8021e8c <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8021e3e:	4620      	mov	r0, r4
 8021e40:	f7f6 f95e 	bl	8018100 <lwip_htonl>
 8021e44:	4603      	mov	r3, r0
  return 1;
 8021e46:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8021e48:	602b      	str	r3, [r5, #0]
 8021e4a:	e7c9      	b.n	8021de0 <ip4addr_aton+0x84>
      if (val > 0xff) {
 8021e4c:	2cff      	cmp	r4, #255	; 0xff
 8021e4e:	d8c6      	bhi.n	8021dde <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8021e50:	9900      	ldr	r1, [sp, #0]
 8021e52:	29ff      	cmp	r1, #255	; 0xff
 8021e54:	d8c3      	bhi.n	8021dde <ip4addr_aton+0x82>
 8021e56:	9b01      	ldr	r3, [sp, #4]
 8021e58:	2bff      	cmp	r3, #255	; 0xff
 8021e5a:	d8c0      	bhi.n	8021dde <ip4addr_aton+0x82>
 8021e5c:	9a02      	ldr	r2, [sp, #8]
 8021e5e:	2aff      	cmp	r2, #255	; 0xff
 8021e60:	d8bd      	bhi.n	8021dde <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8021e62:	041b      	lsls	r3, r3, #16
 8021e64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8021e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021e6c:	431c      	orrs	r4, r3
      break;
 8021e6e:	e7e5      	b.n	8021e3c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8021e70:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8021e74:	d2b3      	bcs.n	8021dde <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8021e76:	9a00      	ldr	r2, [sp, #0]
 8021e78:	2aff      	cmp	r2, #255	; 0xff
 8021e7a:	d8b0      	bhi.n	8021dde <ip4addr_aton+0x82>
 8021e7c:	9b01      	ldr	r3, [sp, #4]
 8021e7e:	2bff      	cmp	r3, #255	; 0xff
 8021e80:	d8ad      	bhi.n	8021dde <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8021e82:	041b      	lsls	r3, r3, #16
 8021e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021e88:	431c      	orrs	r4, r3
      break;
 8021e8a:	e7d7      	b.n	8021e3c <ip4addr_aton+0xe0>
  return 1;
 8021e8c:	2001      	movs	r0, #1
 8021e8e:	e7a7      	b.n	8021de0 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8021e90:	4b04      	ldr	r3, [pc, #16]	; (8021ea4 <ip4addr_aton+0x148>)
 8021e92:	22f9      	movs	r2, #249	; 0xf9
 8021e94:	4904      	ldr	r1, [pc, #16]	; (8021ea8 <ip4addr_aton+0x14c>)
 8021e96:	4805      	ldr	r0, [pc, #20]	; (8021eac <ip4addr_aton+0x150>)
 8021e98:	f002 fa34 	bl	8024304 <iprintf>
      break;
 8021e9c:	e7ce      	b.n	8021e3c <ip4addr_aton+0xe0>
 8021e9e:	bf00      	nop
 8021ea0:	08044609 	.word	0x08044609
 8021ea4:	08044364 	.word	0x08044364
 8021ea8:	080443a0 	.word	0x080443a0
 8021eac:	08028ab4 	.word	0x08028ab4

08021eb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021eb0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021eb2:	4604      	mov	r4, r0
 8021eb4:	b148      	cbz	r0, 8021eca <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8021eb6:	6960      	ldr	r0, [r4, #20]
 8021eb8:	b108      	cbz	r0, 8021ebe <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8021eba:	f7f8 f959 	bl	801a170 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8021ebe:	4621      	mov	r1, r4
 8021ec0:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8021ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8021ec6:	f7f7 bc3b 	b.w	8019740 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021eca:	4b04      	ldr	r3, [pc, #16]	; (8021edc <ipfrag_free_pbuf_custom+0x2c>)
 8021ecc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021ed0:	4903      	ldr	r1, [pc, #12]	; (8021ee0 <ipfrag_free_pbuf_custom+0x30>)
 8021ed2:	4804      	ldr	r0, [pc, #16]	; (8021ee4 <ipfrag_free_pbuf_custom+0x34>)
 8021ed4:	f002 fa16 	bl	8024304 <iprintf>
 8021ed8:	e7ed      	b.n	8021eb6 <ipfrag_free_pbuf_custom+0x6>
 8021eda:	bf00      	nop
 8021edc:	080443b4 	.word	0x080443b4
 8021ee0:	080443f0 	.word	0x080443f0
 8021ee4:	08028ab4 	.word	0x08028ab4

08021ee8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021ee8:	4281      	cmp	r1, r0
{
 8021eea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eee:	4606      	mov	r6, r0
 8021ef0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021ef2:	d075      	beq.n	8021fe0 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8021ef4:	b147      	cbz	r7, 8021f08 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021ef6:	683b      	ldr	r3, [r7, #0]
 8021ef8:	42b3      	cmp	r3, r6
 8021efa:	d005      	beq.n	8021f08 <ip_reass_free_complete_datagram+0x20>
 8021efc:	4b40      	ldr	r3, [pc, #256]	; (8022000 <ip_reass_free_complete_datagram+0x118>)
 8021efe:	22ad      	movs	r2, #173	; 0xad
 8021f00:	4940      	ldr	r1, [pc, #256]	; (8022004 <ip_reass_free_complete_datagram+0x11c>)
 8021f02:	4841      	ldr	r0, [pc, #260]	; (8022008 <ip_reass_free_complete_datagram+0x120>)
 8021f04:	f002 f9fe 	bl	8024304 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021f08:	6875      	ldr	r5, [r6, #4]
 8021f0a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8021f0c:	889a      	ldrh	r2, [r3, #4]
 8021f0e:	2a00      	cmp	r2, #0
 8021f10:	d047      	beq.n	8021fa2 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8021f12:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021f16:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8022000 <ip_reass_free_complete_datagram+0x118>
 8021f1a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8022020 <ip_reass_free_complete_datagram+0x138>
 8021f1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8022008 <ip_reass_free_complete_datagram+0x120>
 8021f22:	e005      	b.n	8021f30 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8021f24:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8021f26:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8021f28:	f7f8 f922 	bl	801a170 <pbuf_free>
  while (p != NULL) {
 8021f2c:	b1b4      	cbz	r4, 8021f5c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8021f2e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8021f30:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8021f32:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8021f34:	f7f8 f930 	bl	801a198 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021f38:	4458      	add	r0, fp
 8021f3a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021f3e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021f42:	dbef      	blt.n	8021f24 <ip_reass_free_complete_datagram+0x3c>
 8021f44:	4653      	mov	r3, sl
 8021f46:	22cc      	movs	r2, #204	; 0xcc
 8021f48:	4649      	mov	r1, r9
 8021f4a:	4640      	mov	r0, r8
 8021f4c:	f002 f9da 	bl	8024304 <iprintf>
    pbuf_free(pcur);
 8021f50:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8021f52:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8021f54:	f7f8 f90c 	bl	801a170 <pbuf_free>
  while (p != NULL) {
 8021f58:	2c00      	cmp	r4, #0
 8021f5a:	d1e8      	bne.n	8021f2e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8021f5c:	4b2b      	ldr	r3, [pc, #172]	; (802200c <ip_reass_free_complete_datagram+0x124>)
 8021f5e:	681a      	ldr	r2, [r3, #0]
 8021f60:	4296      	cmp	r6, r2
 8021f62:	d03a      	beq.n	8021fda <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021f64:	2f00      	cmp	r7, #0
 8021f66:	d042      	beq.n	8021fee <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8021f68:	6833      	ldr	r3, [r6, #0]
 8021f6a:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021f6c:	4c28      	ldr	r4, [pc, #160]	; (8022010 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8021f6e:	4631      	mov	r1, r6
 8021f70:	2005      	movs	r0, #5
 8021f72:	f7f7 fbe5 	bl	8019740 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021f76:	8823      	ldrh	r3, [r4, #0]
 8021f78:	455b      	cmp	r3, fp
 8021f7a:	d305      	bcc.n	8021f88 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021f7c:	eba3 030b 	sub.w	r3, r3, fp
}
 8021f80:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021f82:	8023      	strh	r3, [r4, #0]
}
 8021f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021f88:	4b1d      	ldr	r3, [pc, #116]	; (8022000 <ip_reass_free_complete_datagram+0x118>)
 8021f8a:	22d2      	movs	r2, #210	; 0xd2
 8021f8c:	4921      	ldr	r1, [pc, #132]	; (8022014 <ip_reass_free_complete_datagram+0x12c>)
 8021f8e:	481e      	ldr	r0, [pc, #120]	; (8022008 <ip_reass_free_complete_datagram+0x120>)
 8021f90:	f002 f9b8 	bl	8024304 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021f94:	8823      	ldrh	r3, [r4, #0]
}
 8021f96:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021f98:	eba3 030b 	sub.w	r3, r3, fp
 8021f9c:	8023      	strh	r3, [r4, #0]
}
 8021f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8021fa2:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021fa4:	6930      	ldr	r0, [r6, #16]
 8021fa6:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8021fa8:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021faa:	68f4      	ldr	r4, [r6, #12]
 8021fac:	68b2      	ldr	r2, [r6, #8]
 8021fae:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021fb0:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021fb2:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021fb4:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021fb6:	601a      	str	r2, [r3, #0]
 8021fb8:	605c      	str	r4, [r3, #4]
 8021fba:	69b2      	ldr	r2, [r6, #24]
 8021fbc:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021fbe:	f7ff fccf 	bl	8021960 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021fc2:	4628      	mov	r0, r5
 8021fc4:	f7f8 f8e8 	bl	801a198 <pbuf_clen>
 8021fc8:	4683      	mov	fp, r0
    pbuf_free(p);
 8021fca:	4628      	mov	r0, r5
 8021fcc:	f7f8 f8d0 	bl	801a170 <pbuf_free>
  p = ipr->p;
 8021fd0:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8021fd2:	2d00      	cmp	r5, #0
 8021fd4:	d0c2      	beq.n	8021f5c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8021fd6:	686b      	ldr	r3, [r5, #4]
 8021fd8:	e79d      	b.n	8021f16 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 8021fda:	6832      	ldr	r2, [r6, #0]
 8021fdc:	601a      	str	r2, [r3, #0]
 8021fde:	e7c5      	b.n	8021f6c <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021fe0:	4b07      	ldr	r3, [pc, #28]	; (8022000 <ip_reass_free_complete_datagram+0x118>)
 8021fe2:	22ab      	movs	r2, #171	; 0xab
 8021fe4:	490c      	ldr	r1, [pc, #48]	; (8022018 <ip_reass_free_complete_datagram+0x130>)
 8021fe6:	4808      	ldr	r0, [pc, #32]	; (8022008 <ip_reass_free_complete_datagram+0x120>)
 8021fe8:	f002 f98c 	bl	8024304 <iprintf>
 8021fec:	e782      	b.n	8021ef4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021fee:	4b04      	ldr	r3, [pc, #16]	; (8022000 <ip_reass_free_complete_datagram+0x118>)
 8021ff0:	f240 1245 	movw	r2, #325	; 0x145
 8021ff4:	4909      	ldr	r1, [pc, #36]	; (802201c <ip_reass_free_complete_datagram+0x134>)
 8021ff6:	4804      	ldr	r0, [pc, #16]	; (8022008 <ip_reass_free_complete_datagram+0x120>)
 8021ff8:	f002 f984 	bl	8024304 <iprintf>
 8021ffc:	e7b4      	b.n	8021f68 <ip_reass_free_complete_datagram+0x80>
 8021ffe:	bf00      	nop
 8022000:	080443b4 	.word	0x080443b4
 8022004:	08044408 	.word	0x08044408
 8022008:	08028ab4 	.word	0x08028ab4
 802200c:	2002df80 	.word	0x2002df80
 8022010:	2002df7c 	.word	0x2002df7c
 8022014:	08044458 	.word	0x08044458
 8022018:	080443fc 	.word	0x080443fc
 802201c:	0804443c 	.word	0x0804443c
 8022020:	0804441c 	.word	0x0804441c

08022024 <ip_reass_remove_oldest_datagram>:
{
 8022024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8022028:	2700      	movs	r7, #0
 802202a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8022094 <ip_reass_remove_oldest_datagram+0x70>
{
 802202e:	4605      	mov	r5, r0
 8022030:	460e      	mov	r6, r1
    r = reassdatagrams;
 8022032:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8022036:	b1f3      	cbz	r3, 8022076 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8022038:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802203a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 802203e:	4621      	mov	r1, r4
    prev = NULL;
 8022040:	46a4      	mov	ip, r4
    oldest = NULL;
 8022042:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022044:	695a      	ldr	r2, [r3, #20]
 8022046:	4572      	cmp	r2, lr
 8022048:	d018      	beq.n	802207c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 802204a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 802204c:	b120      	cbz	r0, 8022058 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 802204e:	f893 901f 	ldrb.w	r9, [r3, #31]
 8022052:	7fc2      	ldrb	r2, [r0, #31]
 8022054:	4591      	cmp	r9, r2
 8022056:	d801      	bhi.n	802205c <ip_reass_remove_oldest_datagram+0x38>
 8022058:	4661      	mov	r1, ip
 802205a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 802205c:	681a      	ldr	r2, [r3, #0]
 802205e:	469c      	mov	ip, r3
 8022060:	4613      	mov	r3, r2
 8022062:	2a00      	cmp	r2, #0
 8022064:	d1ee      	bne.n	8022044 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8022066:	b110      	cbz	r0, 802206e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022068:	f7ff ff3e 	bl	8021ee8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 802206c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802206e:	42b7      	cmp	r7, r6
 8022070:	da01      	bge.n	8022076 <ip_reass_remove_oldest_datagram+0x52>
 8022072:	2c01      	cmp	r4, #1
 8022074:	dcdd      	bgt.n	8022032 <ip_reass_remove_oldest_datagram+0xe>
}
 8022076:	4638      	mov	r0, r7
 8022078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802207c:	699a      	ldr	r2, [r3, #24]
 802207e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8022082:	454a      	cmp	r2, r9
 8022084:	d1e1      	bne.n	802204a <ip_reass_remove_oldest_datagram+0x26>
 8022086:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 802208a:	88aa      	ldrh	r2, [r5, #4]
 802208c:	4591      	cmp	r9, r2
 802208e:	d1dc      	bne.n	802204a <ip_reass_remove_oldest_datagram+0x26>
 8022090:	e7e4      	b.n	802205c <ip_reass_remove_oldest_datagram+0x38>
 8022092:	bf00      	nop
 8022094:	2002df80 	.word	0x2002df80

08022098 <ip_reass_tmr>:
{
 8022098:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 802209a:	4b0a      	ldr	r3, [pc, #40]	; (80220c4 <ip_reass_tmr+0x2c>)
 802209c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 802209e:	b140      	cbz	r0, 80220b2 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80220a0:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80220a2:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80220a4:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80220a6:	b12b      	cbz	r3, 80220b4 <ip_reass_tmr+0x1c>
 80220a8:	4604      	mov	r4, r0
      r->timer--;
 80220aa:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80220ac:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80220ae:	2800      	cmp	r0, #0
 80220b0:	d1f7      	bne.n	80220a2 <ip_reass_tmr+0xa>
}
 80220b2:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80220b4:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80220b6:	4621      	mov	r1, r4
 80220b8:	f7ff ff16 	bl	8021ee8 <ip_reass_free_complete_datagram>
      r = r->next;
 80220bc:	4628      	mov	r0, r5
  while (r != NULL) {
 80220be:	2800      	cmp	r0, #0
 80220c0:	d1ef      	bne.n	80220a2 <ip_reass_tmr+0xa>
 80220c2:	e7f6      	b.n	80220b2 <ip_reass_tmr+0x1a>
 80220c4:	2002df80 	.word	0x2002df80

080220c8 <ip4_reass>:
{
 80220c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80220cc:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80220d0:	b085      	sub	sp, #20
 80220d2:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80220d4:	f89a 3000 	ldrb.w	r3, [sl]
 80220d8:	f003 030f 	and.w	r3, r3, #15
 80220dc:	2b05      	cmp	r3, #5
 80220de:	f040 8089 	bne.w	80221f4 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80220e2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80220e6:	f7f6 f807 	bl	80180f8 <lwip_htons>
 80220ea:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80220ec:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80220f0:	f7f6 f802 	bl	80180f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80220f4:	f89a 2000 	ldrb.w	r2, [sl]
 80220f8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80220fc:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022100:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8022104:	d376      	bcc.n	80221f4 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8022106:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022108:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8022400 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 802210c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 802210e:	b29b      	uxth	r3, r3
 8022110:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8022112:	f7f8 f841 	bl	801a198 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022116:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 802211a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802211c:	4403      	add	r3, r0
 802211e:	2b14      	cmp	r3, #20
 8022120:	f300 80e5 	bgt.w	80222ee <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022124:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8022404 <ip4_reass+0x33c>
 8022128:	f8d9 4000 	ldr.w	r4, [r9]
 802212c:	2c00      	cmp	r4, #0
 802212e:	f000 80ec 	beq.w	802230a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022132:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022136:	e003      	b.n	8022140 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022138:	6824      	ldr	r4, [r4, #0]
 802213a:	2c00      	cmp	r4, #0
 802213c:	f000 80e5 	beq.w	802230a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022140:	6963      	ldr	r3, [r4, #20]
 8022142:	4293      	cmp	r3, r2
 8022144:	d1f8      	bne.n	8022138 <ip4_reass+0x70>
 8022146:	f8da 3010 	ldr.w	r3, [sl, #16]
 802214a:	69a1      	ldr	r1, [r4, #24]
 802214c:	4299      	cmp	r1, r3
 802214e:	d1f3      	bne.n	8022138 <ip4_reass+0x70>
 8022150:	89a1      	ldrh	r1, [r4, #12]
 8022152:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8022156:	4299      	cmp	r1, r3
 8022158:	d1ee      	bne.n	8022138 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802215a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 802215e:	f7f5 ffcb 	bl	80180f8 <lwip_htons>
 8022162:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022166:	2800      	cmp	r0, #0
 8022168:	f000 80a9 	beq.w	80222be <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802216c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022170:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8022174:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022178:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 802217c:	9301      	str	r3, [sp, #4]
 802217e:	d108      	bne.n	8022192 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8022180:	9b00      	ldr	r3, [sp, #0]
 8022182:	18f3      	adds	r3, r6, r3
 8022184:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022186:	429e      	cmp	r6, r3
 8022188:	d812      	bhi.n	80221b0 <ip4_reass+0xe8>
 802218a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802218e:	4293      	cmp	r3, r2
 8022190:	d80e      	bhi.n	80221b0 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8022192:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022196:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 802219a:	f7f5 ffad 	bl	80180f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802219e:	f89a 2000 	ldrb.w	r2, [sl]
 80221a2:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80221a6:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80221aa:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80221ae:	d229      	bcs.n	8022204 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 80221b0:	6866      	ldr	r6, [r4, #4]
 80221b2:	b9fe      	cbnz	r6, 80221f4 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80221b4:	f8d9 3000 	ldr.w	r3, [r9]
 80221b8:	42a3      	cmp	r3, r4
 80221ba:	d014      	beq.n	80221e6 <ip4_reass+0x11e>
 80221bc:	4b8c      	ldr	r3, [pc, #560]	; (80223f0 <ip4_reass+0x328>)
 80221be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80221c2:	498c      	ldr	r1, [pc, #560]	; (80223f4 <ip4_reass+0x32c>)
 80221c4:	488c      	ldr	r0, [pc, #560]	; (80223f8 <ip4_reass+0x330>)
 80221c6:	f002 f89d 	bl	8024304 <iprintf>
  if (reassdatagrams == ipr) {
 80221ca:	f8d9 3000 	ldr.w	r3, [r9]
 80221ce:	429c      	cmp	r4, r3
 80221d0:	d009      	beq.n	80221e6 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80221d2:	4b87      	ldr	r3, [pc, #540]	; (80223f0 <ip4_reass+0x328>)
 80221d4:	f240 1245 	movw	r2, #325	; 0x145
 80221d8:	4988      	ldr	r1, [pc, #544]	; (80223fc <ip4_reass+0x334>)
 80221da:	4887      	ldr	r0, [pc, #540]	; (80223f8 <ip4_reass+0x330>)
 80221dc:	f002 f892 	bl	8024304 <iprintf>
    prev->next = ipr->next;
 80221e0:	6823      	ldr	r3, [r4, #0]
 80221e2:	6033      	str	r3, [r6, #0]
 80221e4:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 80221e6:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80221e8:	4621      	mov	r1, r4
 80221ea:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 80221ec:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80221f0:	f7f7 faa6 	bl	8019740 <memp_free>
  pbuf_free(p);
 80221f4:	4628      	mov	r0, r5
  return NULL;
 80221f6:	2600      	movs	r6, #0
  pbuf_free(p);
 80221f8:	f7f7 ffba 	bl	801a170 <pbuf_free>
}
 80221fc:	4630      	mov	r0, r6
 80221fe:	b005      	add	sp, #20
 8022200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8022204:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022206:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802220a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 802220e:	f7f5 ff73 	bl	80180f8 <lwip_htons>
 8022212:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022216:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802221a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 802221c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8022220:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8022224:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8022228:	f8ab 3006 	strh.w	r3, [fp, #6]
 802222c:	b29b      	uxth	r3, r3
 802222e:	4619      	mov	r1, r3
 8022230:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8022232:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8022234:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8022236:	f88b 3000 	strb.w	r3, [fp]
 802223a:	f88b 3001 	strb.w	r3, [fp, #1]
 802223e:	f88b 3002 	strb.w	r3, [fp, #2]
 8022242:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8022246:	d8b3      	bhi.n	80221b0 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8022248:	6861      	ldr	r1, [r4, #4]
 802224a:	2900      	cmp	r1, #0
 802224c:	f000 80c4 	beq.w	80223d8 <ip4_reass+0x310>
  int valid = 1;
 8022250:	f04f 0a01 	mov.w	sl, #1
 8022254:	4694      	mov	ip, r2
 8022256:	e00e      	b.n	8022276 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8022258:	d0cc      	beq.n	80221f4 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 802225a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 802225e:	45f4      	cmp	ip, lr
 8022260:	d3c8      	bcc.n	80221f4 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8022262:	b122      	cbz	r2, 802226e <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8022264:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8022266:	4282      	cmp	r2, r0
 8022268:	bf18      	it	ne
 802226a:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 802226e:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8022270:	2900      	cmp	r1, #0
 8022272:	f000 808a 	beq.w	802238a <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022276:	461a      	mov	r2, r3
 8022278:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 802227a:	8898      	ldrh	r0, [r3, #4]
 802227c:	4584      	cmp	ip, r0
 802227e:	d2eb      	bcs.n	8022258 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8022280:	4613      	mov	r3, r2
 8022282:	f8cb 1000 	str.w	r1, [fp]
 8022286:	4662      	mov	r2, ip
 8022288:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 802228a:	2b00      	cmp	r3, #0
 802228c:	d066      	beq.n	802235c <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802228e:	88db      	ldrh	r3, [r3, #6]
 8022290:	429a      	cmp	r2, r3
 8022292:	d3af      	bcc.n	80221f4 <ip4_reass+0x12c>
 8022294:	9903      	ldr	r1, [sp, #12]
 8022296:	4281      	cmp	r1, r0
 8022298:	d8ac      	bhi.n	80221f4 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 802229a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 802229c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80222a0:	d061      	beq.n	8022366 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80222a2:	9b01      	ldr	r3, [sp, #4]
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	f000 808a 	beq.w	80223be <ip4_reass+0x2f6>
 80222aa:	7fa3      	ldrb	r3, [r4, #30]
 80222ac:	07db      	lsls	r3, r3, #31
 80222ae:	d462      	bmi.n	8022376 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80222b0:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 80222b4:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80222b6:	441f      	add	r7, r3
 80222b8:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80222bc:	e79e      	b.n	80221fc <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80222be:	89e0      	ldrh	r0, [r4, #14]
 80222c0:	f7f5 ff1a 	bl	80180f8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80222c4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80222c8:	2800      	cmp	r0, #0
 80222ca:	f43f af4f 	beq.w	802216c <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80222ce:	f8da 3000 	ldr.w	r3, [sl]
 80222d2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80222d6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80222da:	f8da 200c 	ldr.w	r2, [sl, #12]
 80222de:	60a3      	str	r3, [r4, #8]
 80222e0:	60e0      	str	r0, [r4, #12]
 80222e2:	6121      	str	r1, [r4, #16]
 80222e4:	6162      	str	r2, [r4, #20]
 80222e6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80222ea:	61a3      	str	r3, [r4, #24]
 80222ec:	e73e      	b.n	802216c <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80222ee:	4601      	mov	r1, r0
 80222f0:	4650      	mov	r0, sl
 80222f2:	f7ff fe97 	bl	8022024 <ip_reass_remove_oldest_datagram>
 80222f6:	2800      	cmp	r0, #0
 80222f8:	f43f af7c 	beq.w	80221f4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80222fc:	f8b8 3000 	ldrh.w	r3, [r8]
 8022300:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022302:	2b14      	cmp	r3, #20
 8022304:	f77f af0e 	ble.w	8022124 <ip4_reass+0x5c>
 8022308:	e774      	b.n	80221f4 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802230a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 802230e:	4938      	ldr	r1, [pc, #224]	; (80223f0 <ip4_reass+0x328>)
 8022310:	2005      	movs	r0, #5
 8022312:	f7f7 f9df 	bl	80196d4 <memp_malloc_fn>
  if (ipr == NULL) {
 8022316:	4604      	mov	r4, r0
 8022318:	b178      	cbz	r0, 802233a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802231a:	2300      	movs	r3, #0
 802231c:	61e3      	str	r3, [r4, #28]
 802231e:	60a3      	str	r3, [r4, #8]
 8022320:	60e3      	str	r3, [r4, #12]
 8022322:	6123      	str	r3, [r4, #16]
 8022324:	6163      	str	r3, [r4, #20]
 8022326:	61a3      	str	r3, [r4, #24]
 8022328:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 802232a:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 802232e:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8022332:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8022334:	230f      	movs	r3, #15
 8022336:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8022338:	e7c9      	b.n	80222ce <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802233a:	4639      	mov	r1, r7
 802233c:	4650      	mov	r0, sl
 802233e:	f7ff fe71 	bl	8022024 <ip_reass_remove_oldest_datagram>
 8022342:	4287      	cmp	r7, r0
 8022344:	f73f af56 	bgt.w	80221f4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022348:	f44f 7291 	mov.w	r2, #290	; 0x122
 802234c:	4928      	ldr	r1, [pc, #160]	; (80223f0 <ip4_reass+0x328>)
 802234e:	2005      	movs	r0, #5
 8022350:	f7f7 f9c0 	bl	80196d4 <memp_malloc_fn>
    if (ipr == NULL)
 8022354:	4604      	mov	r4, r0
 8022356:	2800      	cmp	r0, #0
 8022358:	d1df      	bne.n	802231a <ip4_reass+0x252>
 802235a:	e74b      	b.n	80221f4 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 802235c:	9b03      	ldr	r3, [sp, #12]
 802235e:	4283      	cmp	r3, r0
 8022360:	f63f af48 	bhi.w	80221f4 <ip4_reass+0x12c>
        ipr->p = new_p;
 8022364:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022366:	9b01      	ldr	r3, [sp, #4]
 8022368:	b19b      	cbz	r3, 8022392 <ip4_reass+0x2ca>
 802236a:	7fa3      	ldrb	r3, [r4, #30]
 802236c:	07d9      	lsls	r1, r3, #31
 802236e:	d59f      	bpl.n	80222b0 <ip4_reass+0x1e8>
    if (valid) {
 8022370:	f1ba 0f00 	cmp.w	sl, #0
 8022374:	d138      	bne.n	80223e8 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022376:	f8b8 3000 	ldrh.w	r3, [r8]
 802237a:	441f      	add	r7, r3
 802237c:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8022380:	2600      	movs	r6, #0
}
 8022382:	4630      	mov	r0, r6
 8022384:	b005      	add	sp, #20
 8022386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802238a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802238c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802238e:	d188      	bne.n	80222a2 <ip4_reass+0x1da>
 8022390:	e7e9      	b.n	8022366 <ip4_reass+0x29e>
    if (valid) {
 8022392:	f1ba 0f00 	cmp.w	sl, #0
 8022396:	d012      	beq.n	80223be <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022398:	6863      	ldr	r3, [r4, #4]
 802239a:	b183      	cbz	r3, 80223be <ip4_reass+0x2f6>
 802239c:	6859      	ldr	r1, [r3, #4]
 802239e:	888b      	ldrh	r3, [r1, #4]
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d031      	beq.n	8022408 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80223a4:	f8b8 3000 	ldrh.w	r3, [r8]
 80223a8:	441f      	add	r7, r3
  if (is_last) {
 80223aa:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80223ac:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	d1e5      	bne.n	8022380 <ip4_reass+0x2b8>
 80223b4:	e008      	b.n	80223c8 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80223b6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80223ba:	4659      	mov	r1, fp
 80223bc:	b323      	cbz	r3, 8022408 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80223be:	f8b8 3000 	ldrh.w	r3, [r8]
 80223c2:	441f      	add	r7, r3
 80223c4:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80223c8:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80223ca:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80223cc:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80223d0:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80223d2:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80223d4:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80223d6:	e7d3      	b.n	8022380 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80223d8:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80223da:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d0ea      	beq.n	80223b6 <ip4_reass+0x2ee>
 80223e0:	7fa3      	ldrb	r3, [r4, #30]
 80223e2:	07da      	lsls	r2, r3, #31
 80223e4:	f57f af64 	bpl.w	80222b0 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80223e8:	6863      	ldr	r3, [r4, #4]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	d0c3      	beq.n	8022376 <ip4_reass+0x2ae>
 80223ee:	e7d5      	b.n	802239c <ip4_reass+0x2d4>
 80223f0:	080443b4 	.word	0x080443b4
 80223f4:	080444cc 	.word	0x080444cc
 80223f8:	08028ab4 	.word	0x08028ab4
 80223fc:	0804443c 	.word	0x0804443c
 8022400:	2002df7c 	.word	0x2002df7c
 8022404:	2002df80 	.word	0x2002df80
        q = iprh->next_pbuf;
 8022408:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 802240c:	b153      	cbz	r3, 8022424 <ip4_reass+0x35c>
 802240e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8022410:	4610      	mov	r0, r2
 8022412:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8022414:	88c0      	ldrh	r0, [r0, #6]
 8022416:	8893      	ldrh	r3, [r2, #4]
 8022418:	4298      	cmp	r0, r3
 802241a:	d1c3      	bne.n	80223a4 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 802241c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 802241e:	2b00      	cmp	r3, #0
 8022420:	d1f6      	bne.n	8022410 <ip4_reass+0x348>
 8022422:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8022424:	9b02      	ldr	r3, [sp, #8]
 8022426:	428b      	cmp	r3, r1
 8022428:	d110      	bne.n	802244c <ip4_reass+0x384>
 802242a:	4b40      	ldr	r3, [pc, #256]	; (802252c <ip4_reass+0x464>)
 802242c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022430:	493f      	ldr	r1, [pc, #252]	; (8022530 <ip4_reass+0x468>)
 8022432:	4840      	ldr	r0, [pc, #256]	; (8022534 <ip4_reass+0x46c>)
 8022434:	f001 ff66 	bl	8024304 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8022438:	9b02      	ldr	r3, [sp, #8]
 802243a:	681b      	ldr	r3, [r3, #0]
 802243c:	b133      	cbz	r3, 802244c <ip4_reass+0x384>
 802243e:	4b3b      	ldr	r3, [pc, #236]	; (802252c <ip4_reass+0x464>)
 8022440:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8022444:	493c      	ldr	r1, [pc, #240]	; (8022538 <ip4_reass+0x470>)
 8022446:	483b      	ldr	r0, [pc, #236]	; (8022534 <ip4_reass+0x46c>)
 8022448:	f001 ff5c 	bl	8024304 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802244c:	f8b8 3000 	ldrh.w	r3, [r8]
 8022450:	441f      	add	r7, r3
  if (is_last) {
 8022452:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022454:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8022458:	2b00      	cmp	r3, #0
 802245a:	d15b      	bne.n	8022514 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 802245c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802245e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022460:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022462:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8022466:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022468:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 802246a:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802246c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802246e:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022470:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022472:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022474:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022476:	68a3      	ldr	r3, [r4, #8]
 8022478:	6921      	ldr	r1, [r4, #16]
 802247a:	6962      	ldr	r2, [r4, #20]
 802247c:	6075      	str	r5, [r6, #4]
 802247e:	60b1      	str	r1, [r6, #8]
 8022480:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022482:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022484:	6033      	str	r3, [r6, #0]
 8022486:	69a3      	ldr	r3, [r4, #24]
 8022488:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802248a:	f7f5 fe35 	bl	80180f8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802248e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022490:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8022492:	2114      	movs	r1, #20
 8022494:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8022496:	71b3      	strb	r3, [r6, #6]
 8022498:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802249a:	72b3      	strb	r3, [r6, #10]
 802249c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802249e:	f7f6 fbd3 	bl	8018c48 <inet_chksum>
 80224a2:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 80224a4:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80224a6:	b15d      	cbz	r5, 80224c0 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 80224a8:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80224aa:	4628      	mov	r0, r5
 80224ac:	2114      	movs	r1, #20
 80224ae:	f7f7 fdd3 	bl	801a058 <pbuf_remove_header>
      pbuf_cat(p, r);
 80224b2:	4629      	mov	r1, r5
 80224b4:	4630      	mov	r0, r6
 80224b6:	f7f7 fe8d 	bl	801a1d4 <pbuf_cat>
      r = iprh->next_pbuf;
 80224ba:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80224bc:	2d00      	cmp	r5, #0
 80224be:	d1f3      	bne.n	80224a8 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 80224c0:	f8d9 5000 	ldr.w	r5, [r9]
 80224c4:	42a5      	cmp	r5, r4
 80224c6:	d005      	beq.n	80224d4 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80224c8:	b335      	cbz	r5, 8022518 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 80224ca:	682b      	ldr	r3, [r5, #0]
 80224cc:	42a3      	cmp	r3, r4
 80224ce:	d014      	beq.n	80224fa <ip4_reass+0x432>
 80224d0:	461d      	mov	r5, r3
 80224d2:	e7f9      	b.n	80224c8 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 80224d4:	6823      	ldr	r3, [r4, #0]
 80224d6:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80224da:	4621      	mov	r1, r4
 80224dc:	2005      	movs	r0, #5
 80224de:	f7f7 f92f 	bl	8019740 <memp_free>
    clen = pbuf_clen(p);
 80224e2:	4630      	mov	r0, r6
 80224e4:	f7f7 fe58 	bl	801a198 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80224e8:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 80224ec:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80224ee:	4283      	cmp	r3, r0
 80224f0:	d306      	bcc.n	8022500 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80224f2:	1b1b      	subs	r3, r3, r4
 80224f4:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80224f8:	e680      	b.n	80221fc <ip4_reass+0x134>
    prev->next = ipr->next;
 80224fa:	6823      	ldr	r3, [r4, #0]
 80224fc:	602b      	str	r3, [r5, #0]
 80224fe:	e7ec      	b.n	80224da <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022500:	4b0a      	ldr	r3, [pc, #40]	; (802252c <ip4_reass+0x464>)
 8022502:	f240 229b 	movw	r2, #667	; 0x29b
 8022506:	490d      	ldr	r1, [pc, #52]	; (802253c <ip4_reass+0x474>)
 8022508:	480a      	ldr	r0, [pc, #40]	; (8022534 <ip4_reass+0x46c>)
 802250a:	f001 fefb 	bl	8024304 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802250e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022512:	e7ee      	b.n	80224f2 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022514:	8ba0      	ldrh	r0, [r4, #28]
 8022516:	e7a9      	b.n	802246c <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022518:	4b04      	ldr	r3, [pc, #16]	; (802252c <ip4_reass+0x464>)
 802251a:	f240 1245 	movw	r2, #325	; 0x145
 802251e:	4908      	ldr	r1, [pc, #32]	; (8022540 <ip4_reass+0x478>)
 8022520:	4804      	ldr	r0, [pc, #16]	; (8022534 <ip4_reass+0x46c>)
 8022522:	f001 feef 	bl	8024304 <iprintf>
    prev->next = ipr->next;
 8022526:	6823      	ldr	r3, [r4, #0]
 8022528:	602b      	str	r3, [r5, #0]
 802252a:	deff      	udf	#255	; 0xff
 802252c:	080443b4 	.word	0x080443b4
 8022530:	0804447c 	.word	0x0804447c
 8022534:	08028ab4 	.word	0x08028ab4
 8022538:	0804448c 	.word	0x0804448c
 802253c:	080444b0 	.word	0x080444b0
 8022540:	0804443c 	.word	0x0804443c

08022544 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022548:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 802254a:	b08f      	sub	sp, #60	; 0x3c
 802254c:	4605      	mov	r5, r0
 802254e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022550:	f1b3 0214 	subs.w	r2, r3, #20
{
 8022554:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022556:	bf48      	it	mi
 8022558:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802255c:	6843      	ldr	r3, [r0, #4]
 802255e:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022560:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022564:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022566:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022568:	f003 030f 	and.w	r3, r3, #15
 802256c:	2b05      	cmp	r3, #5
 802256e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8022572:	f040 80ea 	bne.w	802274a <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022576:	8943      	ldrh	r3, [r0, #10]
 8022578:	2b13      	cmp	r3, #19
 802257a:	f240 80e9 	bls.w	8022750 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802257e:	9b04      	ldr	r3, [sp, #16]
 8022580:	88d8      	ldrh	r0, [r3, #6]
 8022582:	f7f5 fdb9 	bl	80180f8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8022586:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8022588:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 802258c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802258e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8022590:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8022594:	b29b      	uxth	r3, r3
 8022596:	920d      	str	r2, [sp, #52]	; 0x34
 8022598:	9305      	str	r3, [sp, #20]

  while (left) {
 802259a:	2b00      	cmp	r3, #0
 802259c:	f000 809d 	beq.w	80226da <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80225a0:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80225a2:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80225a4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022770 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80225a8:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80225aa:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8022778 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80225ae:	b29b      	uxth	r3, r3
 80225b0:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80225b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80225b6:	2114      	movs	r1, #20
 80225b8:	200e      	movs	r0, #14
 80225ba:	f7f7 fc07 	bl	8019dcc <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80225be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225c0:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 80225c2:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80225c4:	4293      	cmp	r3, r2
 80225c6:	bf28      	it	cs
 80225c8:	4613      	movcs	r3, r2
 80225ca:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 80225cc:	2800      	cmp	r0, #0
 80225ce:	f000 80b9 	beq.w	8022744 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80225d2:	8943      	ldrh	r3, [r0, #10]
 80225d4:	2b13      	cmp	r3, #19
 80225d6:	f240 8091 	bls.w	80226fc <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80225da:	9904      	ldr	r1, [sp, #16]
 80225dc:	9b03      	ldr	r3, [sp, #12]
 80225de:	680a      	ldr	r2, [r1, #0]
 80225e0:	685b      	ldr	r3, [r3, #4]
 80225e2:	684f      	ldr	r7, [r1, #4]
 80225e4:	6888      	ldr	r0, [r1, #8]
 80225e6:	68c9      	ldr	r1, [r1, #12]
 80225e8:	605f      	str	r7, [r3, #4]
 80225ea:	60d9      	str	r1, [r3, #12]
 80225ec:	9904      	ldr	r1, [sp, #16]
 80225ee:	601a      	str	r2, [r3, #0]
 80225f0:	6098      	str	r0, [r3, #8]
 80225f2:	690a      	ldr	r2, [r1, #16]
 80225f4:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80225f6:	9b03      	ldr	r3, [sp, #12]
 80225f8:	685b      	ldr	r3, [r3, #4]
 80225fa:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 80225fc:	9b06      	ldr	r3, [sp, #24]
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d034      	beq.n	802266c <ip4_frag+0x128>
 8022602:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022604:	896b      	ldrh	r3, [r5, #10]
 8022606:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022608:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 802260a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802260c:	d36e      	bcc.n	80226ec <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802260e:	454c      	cmp	r4, r9
 8022610:	bf28      	it	cs
 8022612:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022614:	2c00      	cmp	r4, #0
 8022616:	d062      	beq.n	80226de <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022618:	4641      	mov	r1, r8
 802261a:	f240 22bd 	movw	r2, #701	; 0x2bd
 802261e:	2006      	movs	r0, #6
 8022620:	f7f7 f858 	bl	80196d4 <memp_malloc_fn>
 8022624:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022626:	2241      	movs	r2, #65	; 0x41
 8022628:	4621      	mov	r1, r4
 802262a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 802262c:	f1bb 0f00 	cmp.w	fp, #0
 8022630:	d06f      	beq.n	8022712 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022632:	9401      	str	r4, [sp, #4]
 8022634:	465b      	mov	r3, fp
 8022636:	686f      	ldr	r7, [r5, #4]
 8022638:	4437      	add	r7, r6
 802263a:	9700      	str	r7, [sp, #0]
 802263c:	f7f7 fc64 	bl	8019f08 <pbuf_alloced_custom>
 8022640:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8022642:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8022644:	2f00      	cmp	r7, #0
 8022646:	d06e      	beq.n	8022726 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022648:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 802264c:	f7f7 fdae 	bl	801a1ac <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022650:	4a44      	ldr	r2, [pc, #272]	; (8022764 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 8022652:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022654:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8022658:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 802265a:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802265e:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 8022662:	f7f7 fdb7 	bl	801a1d4 <pbuf_cat>
      if (left_to_copy) {
 8022666:	f1b9 0f00 	cmp.w	r9, #0
 802266a:	d138      	bne.n	80226de <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802266c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 802266e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022670:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8022672:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8022674:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8022676:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 802267a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 802267c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 802267e:	4293      	cmp	r3, r2
 8022680:	dd44      	ble.n	802270c <ip4_frag+0x1c8>
 8022682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022684:	2b00      	cmp	r3, #0
 8022686:	d141      	bne.n	802270c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022688:	f7f5 fd36 	bl	80180f8 <lwip_htons>
 802268c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802268e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022690:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022692:	f103 0014 	add.w	r0, r3, #20
 8022696:	b280      	uxth	r0, r0
 8022698:	f7f5 fd2e 	bl	80180f8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 802269c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802269e:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80226a0:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 80226a2:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80226a4:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 80226a6:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80226a8:	f7f6 face 	bl	8018c48 <inet_chksum>
 80226ac:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80226ae:	9f03      	ldr	r7, [sp, #12]
 80226b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80226b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80226b4:	4639      	mov	r1, r7
 80226b6:	6943      	ldr	r3, [r0, #20]
 80226b8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80226ba:	4638      	mov	r0, r7
 80226bc:	f7f7 fd58 	bl	801a170 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80226c0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80226c4:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 80226c6:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 80226ca:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 80226cc:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 80226ce:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 80226d0:	b292      	uxth	r2, r2
 80226d2:	9207      	str	r2, [sp, #28]
  while (left) {
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	f47f af6c 	bne.w	80225b2 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80226da:	2000      	movs	r0, #0
 80226dc:	e020      	b.n	8022720 <ip4_frag+0x1dc>
        p = p->next;
 80226de:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 80226e0:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 80226e2:	896b      	ldrh	r3, [r5, #10]
 80226e4:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80226e6:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80226e8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80226ea:	d290      	bcs.n	802260e <ip4_frag+0xca>
 80226ec:	4643      	mov	r3, r8
 80226ee:	f240 322d 	movw	r2, #813	; 0x32d
 80226f2:	491d      	ldr	r1, [pc, #116]	; (8022768 <ip4_frag+0x224>)
 80226f4:	4650      	mov	r0, sl
 80226f6:	f001 fe05 	bl	8024304 <iprintf>
 80226fa:	e788      	b.n	802260e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80226fc:	4643      	mov	r3, r8
 80226fe:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022702:	491a      	ldr	r1, [pc, #104]	; (802276c <ip4_frag+0x228>)
 8022704:	4650      	mov	r0, sl
 8022706:	f001 fdfd 	bl	8024304 <iprintf>
 802270a:	e766      	b.n	80225da <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 802270c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8022710:	e7ba      	b.n	8022688 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8022712:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022716:	4658      	mov	r0, fp
 8022718:	f7f7 fd2a 	bl	801a170 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802271c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8022720:	b00f      	add	sp, #60	; 0x3c
 8022722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8022726:	46d9      	mov	r9, fp
 8022728:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802272c:	2006      	movs	r0, #6
 802272e:	4649      	mov	r1, r9
 8022730:	f7f7 f806 	bl	8019740 <memp_free>
        pbuf_free(rambuf);
 8022734:	4658      	mov	r0, fp
 8022736:	f7f7 fd1b 	bl	801a170 <pbuf_free>
  return ERR_MEM;
 802273a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802273e:	b00f      	add	sp, #60	; 0x3c
 8022740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8022744:	f04f 30ff 	mov.w	r0, #4294967295
 8022748:	e7ea      	b.n	8022720 <ip4_frag+0x1dc>
    return ERR_VAL;
 802274a:	f06f 0005 	mvn.w	r0, #5
 802274e:	e7e7      	b.n	8022720 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022750:	4b07      	ldr	r3, [pc, #28]	; (8022770 <ip4_frag+0x22c>)
 8022752:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8022756:	4907      	ldr	r1, [pc, #28]	; (8022774 <ip4_frag+0x230>)
 8022758:	4807      	ldr	r0, [pc, #28]	; (8022778 <ip4_frag+0x234>)
 802275a:	f001 fdd3 	bl	8024304 <iprintf>
 802275e:	f06f 0005 	mvn.w	r0, #5
 8022762:	e7dd      	b.n	8022720 <ip4_frag+0x1dc>
 8022764:	08021eb1 	.word	0x08021eb1
 8022768:	08044528 	.word	0x08044528
 802276c:	08044508 	.word	0x08044508
 8022770:	080443b4 	.word	0x080443b4
 8022774:	080444ec 	.word	0x080444ec
 8022778:	08028ab4 	.word	0x08028ab4

0802277c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802277c:	8943      	ldrh	r3, [r0, #10]
 802277e:	2b0e      	cmp	r3, #14
{
 8022780:	b570      	push	{r4, r5, r6, lr}
 8022782:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8022784:	d91b      	bls.n	80227be <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022786:	7bc3      	ldrb	r3, [r0, #15]
 8022788:	460d      	mov	r5, r1
 802278a:	b91b      	cbnz	r3, 8022794 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 802278c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8022790:	3301      	adds	r3, #1
 8022792:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022794:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022796:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8022798:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 802279a:	07d9      	lsls	r1, r3, #31
 802279c:	d50a      	bpl.n	80227b4 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802279e:	2b01      	cmp	r3, #1
 80227a0:	d030      	beq.n	8022804 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80227a2:	2206      	movs	r2, #6
 80227a4:	491d      	ldr	r1, [pc, #116]	; (802281c <ethernet_input+0xa0>)
 80227a6:	f000 fdd7 	bl	8023358 <memcmp>
 80227aa:	b918      	cbnz	r0, 80227b4 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80227ac:	7b63      	ldrb	r3, [r4, #13]
 80227ae:	f043 0308 	orr.w	r3, r3, #8
 80227b2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80227b4:	2e08      	cmp	r6, #8
 80227b6:	d016      	beq.n	80227e6 <ethernet_input+0x6a>
 80227b8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80227bc:	d004      	beq.n	80227c8 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80227be:	4620      	mov	r0, r4
 80227c0:	f7f7 fcd6 	bl	801a170 <pbuf_free>
  return ERR_OK;
}
 80227c4:	2000      	movs	r0, #0
 80227c6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80227c8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80227cc:	071b      	lsls	r3, r3, #28
 80227ce:	d5f6      	bpl.n	80227be <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80227d0:	210e      	movs	r1, #14
 80227d2:	4620      	mov	r0, r4
 80227d4:	f7f7 fc40 	bl	801a058 <pbuf_remove_header>
 80227d8:	2800      	cmp	r0, #0
 80227da:	d1f0      	bne.n	80227be <ethernet_input+0x42>
        etharp_input(p, netif);
 80227dc:	4629      	mov	r1, r5
 80227de:	4620      	mov	r0, r4
 80227e0:	f7fe fd2e 	bl	8021240 <etharp_input>
      break;
 80227e4:	e7ee      	b.n	80227c4 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80227e6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80227ea:	071a      	lsls	r2, r3, #28
 80227ec:	d5e7      	bpl.n	80227be <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80227ee:	210e      	movs	r1, #14
 80227f0:	4620      	mov	r0, r4
 80227f2:	f7f7 fc31 	bl	801a058 <pbuf_remove_header>
 80227f6:	2800      	cmp	r0, #0
 80227f8:	d1e1      	bne.n	80227be <ethernet_input+0x42>
        ip4_input(p, netif);
 80227fa:	4629      	mov	r1, r5
 80227fc:	4620      	mov	r0, r4
 80227fe:	f7ff f8eb 	bl	80219d8 <ip4_input>
      break;
 8022802:	e7df      	b.n	80227c4 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022804:	7843      	ldrb	r3, [r0, #1]
 8022806:	2b00      	cmp	r3, #0
 8022808:	d1d4      	bne.n	80227b4 <ethernet_input+0x38>
 802280a:	7883      	ldrb	r3, [r0, #2]
 802280c:	2b5e      	cmp	r3, #94	; 0x5e
 802280e:	d1d1      	bne.n	80227b4 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8022810:	7b63      	ldrb	r3, [r4, #13]
 8022812:	f043 0310 	orr.w	r3, r3, #16
 8022816:	7363      	strb	r3, [r4, #13]
 8022818:	e7cc      	b.n	80227b4 <ethernet_input+0x38>
 802281a:	bf00      	nop
 802281c:	080445a4 	.word	0x080445a4

08022820 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022824:	460c      	mov	r4, r1
 8022826:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022828:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 802282c:	4616      	mov	r6, r2
 802282e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8022830:	f7f5 fc62 	bl	80180f8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022834:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8022836:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022838:	4620      	mov	r0, r4
 802283a:	f7f7 fbd9 	bl	8019ff0 <pbuf_add_header>
 802283e:	b9e0      	cbnz	r0, 802287a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022840:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8022842:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022846:	683b      	ldr	r3, [r7, #0]
 8022848:	600b      	str	r3, [r1, #0]
 802284a:	88bb      	ldrh	r3, [r7, #4]
 802284c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802284e:	6833      	ldr	r3, [r6, #0]
 8022850:	f8c1 3006 	str.w	r3, [r1, #6]
 8022854:	88b3      	ldrh	r3, [r6, #4]
 8022856:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022858:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 802285c:	2b06      	cmp	r3, #6
 802285e:	d006      	beq.n	802286e <ethernet_output+0x4e>
 8022860:	4b08      	ldr	r3, [pc, #32]	; (8022884 <ethernet_output+0x64>)
 8022862:	f44f 7299 	mov.w	r2, #306	; 0x132
 8022866:	4908      	ldr	r1, [pc, #32]	; (8022888 <ethernet_output+0x68>)
 8022868:	4808      	ldr	r0, [pc, #32]	; (802288c <ethernet_output+0x6c>)
 802286a:	f001 fd4b 	bl	8024304 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802286e:	69ab      	ldr	r3, [r5, #24]
 8022870:	4621      	mov	r1, r4
 8022872:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8022874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8022878:	4718      	bx	r3
}
 802287a:	f06f 0001 	mvn.w	r0, #1
 802287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022882:	bf00      	nop
 8022884:	08044538 	.word	0x08044538
 8022888:	08044570 	.word	0x08044570
 802288c:	08028ab4 	.word	0x08028ab4

08022890 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022890:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8022892:	2300      	movs	r3, #0
{
 8022894:	b085      	sub	sp, #20
 8022896:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8022898:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802289a:	4619      	mov	r1, r3
{
 802289c:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802289e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 80228a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80228a4:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80228a8:	f7f1 fe92 	bl	80145d0 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80228ac:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80228b0:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 80228b2:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 80228b4:	4258      	negs	r0, r3
 80228b6:	b005      	add	sp, #20
 80228b8:	bd30      	pop	{r4, r5, pc}
 80228ba:	bf00      	nop

080228bc <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80228bc:	2200      	movs	r2, #0
 80228be:	6800      	ldr	r0, [r0, #0]
{
 80228c0:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80228c2:	f7f1 fe99 	bl	80145f8 <osMessagePut>
 80228c6:	3800      	subs	r0, #0
 80228c8:	bf18      	it	ne
 80228ca:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80228cc:	4240      	negs	r0, r0
 80228ce:	bd08      	pop	{r3, pc}

080228d0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80228d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228d2:	4614      	mov	r4, r2
 80228d4:	b085      	sub	sp, #20
 80228d6:	4605      	mov	r5, r0
 80228d8:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80228da:	f7f1 fd3f 	bl	801435c <osKernelSysTick>
 80228de:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80228e0:	b15c      	cbz	r4, 80228fa <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80228e2:	4622      	mov	r2, r4
 80228e4:	6829      	ldr	r1, [r5, #0]
 80228e6:	a801      	add	r0, sp, #4
 80228e8:	f7f1 feb2 	bl	8014650 <osMessageGet>

    if(event.status == osEventMessage)
 80228ec:	9b01      	ldr	r3, [sp, #4]
 80228ee:	2b10      	cmp	r3, #16
 80228f0:	d009      	beq.n	8022906 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80228f2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80228f6:	b005      	add	sp, #20
 80228f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 80228fa:	f04f 32ff 	mov.w	r2, #4294967295
 80228fe:	6829      	ldr	r1, [r5, #0]
 8022900:	a801      	add	r0, sp, #4
 8022902:	f7f1 fea5 	bl	8014650 <osMessageGet>
    *msg = (void *)event.value.v;
 8022906:	9b02      	ldr	r3, [sp, #8]
 8022908:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 802290a:	f7f1 fd27 	bl	801435c <osKernelSysTick>
 802290e:	1b80      	subs	r0, r0, r6
}
 8022910:	b005      	add	sp, #20
 8022912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022914 <sys_mbox_valid>:
 8022914:	6800      	ldr	r0, [r0, #0]
 8022916:	3800      	subs	r0, #0
 8022918:	bf18      	it	ne
 802291a:	2001      	movne	r0, #1
 802291c:	4770      	bx	lr
 802291e:	bf00      	nop

08022920 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022920:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022922:	4803      	ldr	r0, [pc, #12]	; (8022930 <sys_init+0x10>)
 8022924:	f7f1 fd7e 	bl	8014424 <osMutexCreate>
 8022928:	4b02      	ldr	r3, [pc, #8]	; (8022934 <sys_init+0x14>)
 802292a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 802292c:	bd08      	pop	{r3, pc}
 802292e:	bf00      	nop
 8022930:	080445b4 	.word	0x080445b4
 8022934:	2002df84 	.word	0x2002df84

08022938 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022938:	b510      	push	{r4, lr}
 802293a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802293c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802293e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022940:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8022942:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022946:	f7f1 fd6d 	bl	8014424 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 802294a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802294e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8022950:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8022952:	4258      	negs	r0, r3
 8022954:	b002      	add	sp, #8
 8022956:	bd10      	pop	{r4, pc}

08022958 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022958:	f04f 31ff 	mov.w	r1, #4294967295
 802295c:	6800      	ldr	r0, [r0, #0]
 802295e:	f7f1 bd69 	b.w	8014434 <osMutexWait>
 8022962:	bf00      	nop

08022964 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8022964:	6800      	ldr	r0, [r0, #0]
 8022966:	f7f1 bd91 	b.w	801448c <osMutexRelease>
 802296a:	bf00      	nop

0802296c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802296c:	b510      	push	{r4, lr}
 802296e:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022970:	2400      	movs	r4, #0
 8022972:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8022976:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8022978:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802297a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 802297c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802297e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8022982:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8022986:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 802298a:	f7f1 fcef 	bl	801436c <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802298e:	b008      	add	sp, #32
 8022990:	bd10      	pop	{r4, pc}
 8022992:	bf00      	nop

08022994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022996:	2200      	movs	r2, #0
 8022998:	4917      	ldr	r1, [pc, #92]	; (80229f8 <MX_USB_DEVICE_Init+0x64>)
 802299a:	4818      	ldr	r0, [pc, #96]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 802299c:	f7f1 f850 	bl	8013a40 <USBD_Init>
 80229a0:	b970      	cbnz	r0, 80229c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80229a2:	4917      	ldr	r1, [pc, #92]	; (8022a00 <MX_USB_DEVICE_Init+0x6c>)
 80229a4:	4815      	ldr	r0, [pc, #84]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229a6:	f7f1 f863 	bl	8013a70 <USBD_RegisterClass>
 80229aa:	b988      	cbnz	r0, 80229d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80229ac:	4915      	ldr	r1, [pc, #84]	; (8022a04 <MX_USB_DEVICE_Init+0x70>)
 80229ae:	4813      	ldr	r0, [pc, #76]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229b0:	f7f1 f810 	bl	80139d4 <USBD_CDC_RegisterInterface>
 80229b4:	b9a0      	cbnz	r0, 80229e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80229b6:	4811      	ldr	r0, [pc, #68]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229b8:	f7f1 f870 	bl	8013a9c <USBD_Start>
 80229bc:	b9b8      	cbnz	r0, 80229ee <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80229be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80229c0:	f7e0 fe24 	bl	800360c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80229c4:	490e      	ldr	r1, [pc, #56]	; (8022a00 <MX_USB_DEVICE_Init+0x6c>)
 80229c6:	480d      	ldr	r0, [pc, #52]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229c8:	f7f1 f852 	bl	8013a70 <USBD_RegisterClass>
 80229cc:	2800      	cmp	r0, #0
 80229ce:	d0ed      	beq.n	80229ac <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80229d0:	f7e0 fe1c 	bl	800360c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80229d4:	490b      	ldr	r1, [pc, #44]	; (8022a04 <MX_USB_DEVICE_Init+0x70>)
 80229d6:	4809      	ldr	r0, [pc, #36]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229d8:	f7f0 fffc 	bl	80139d4 <USBD_CDC_RegisterInterface>
 80229dc:	2800      	cmp	r0, #0
 80229de:	d0ea      	beq.n	80229b6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80229e0:	f7e0 fe14 	bl	800360c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80229e4:	4805      	ldr	r0, [pc, #20]	; (80229fc <MX_USB_DEVICE_Init+0x68>)
 80229e6:	f7f1 f859 	bl	8013a9c <USBD_Start>
 80229ea:	2800      	cmp	r0, #0
 80229ec:	d0e7      	beq.n	80229be <MX_USB_DEVICE_Init+0x2a>
}
 80229ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80229f2:	f7e0 be0b 	b.w	800360c <Error_Handler>
 80229f6:	bf00      	nop
 80229f8:	20000428 	.word	0x20000428
 80229fc:	2002df88 	.word	0x2002df88
 8022a00:	200002f8 	.word	0x200002f8
 8022a04:	20000414 	.word	0x20000414

08022a08 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8022a08:	2000      	movs	r0, #0
 8022a0a:	4770      	bx	lr

08022a0c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8022a0c:	2000      	movs	r0, #0
 8022a0e:	4770      	bx	lr

08022a10 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8022a10:	2000      	movs	r0, #0
 8022a12:	4770      	bx	lr

08022a14 <CDC_Receive_FS>:
{
 8022a14:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022a16:	4c05      	ldr	r4, [pc, #20]	; (8022a2c <CDC_Receive_FS+0x18>)
{
 8022a18:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022a1a:	4620      	mov	r0, r4
 8022a1c:	f7f0 ffec 	bl	80139f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022a20:	4620      	mov	r0, r4
 8022a22:	f7f0 fff1 	bl	8013a08 <USBD_CDC_ReceivePacket>
}
 8022a26:	2000      	movs	r0, #0
 8022a28:	bd10      	pop	{r4, pc}
 8022a2a:	bf00      	nop
 8022a2c:	2002df88 	.word	0x2002df88

08022a30 <CDC_Init_FS>:
{
 8022a30:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8022a32:	4c06      	ldr	r4, [pc, #24]	; (8022a4c <CDC_Init_FS+0x1c>)
 8022a34:	2200      	movs	r2, #0
 8022a36:	4906      	ldr	r1, [pc, #24]	; (8022a50 <CDC_Init_FS+0x20>)
 8022a38:	4620      	mov	r0, r4
 8022a3a:	f7f0 ffd3 	bl	80139e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022a3e:	4905      	ldr	r1, [pc, #20]	; (8022a54 <CDC_Init_FS+0x24>)
 8022a40:	4620      	mov	r0, r4
 8022a42:	f7f0 ffd9 	bl	80139f8 <USBD_CDC_SetRxBuffer>
}
 8022a46:	2000      	movs	r0, #0
 8022a48:	bd10      	pop	{r4, pc}
 8022a4a:	bf00      	nop
 8022a4c:	2002df88 	.word	0x2002df88
 8022a50:	2002ea58 	.word	0x2002ea58
 8022a54:	2002e258 	.word	0x2002e258

08022a58 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022a58:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8022a5a:	4801      	ldr	r0, [pc, #4]	; (8022a60 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8022a5c:	800b      	strh	r3, [r1, #0]
}
 8022a5e:	4770      	bx	lr
 8022a60:	20000454 	.word	0x20000454

08022a64 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8022a64:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8022a66:	4801      	ldr	r0, [pc, #4]	; (8022a6c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8022a68:	800b      	strh	r3, [r1, #0]
}
 8022a6a:	4770      	bx	lr
 8022a6c:	20000468 	.word	0x20000468

08022a70 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022a70:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8022a72:	4801      	ldr	r0, [pc, #4]	; (8022a78 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8022a74:	800b      	strh	r3, [r1, #0]
}
 8022a76:	4770      	bx	lr
 8022a78:	20000448 	.word	0x20000448

08022a7c <USBD_FS_ManufacturerStrDescriptor>:
{
 8022a7c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022a7e:	4c04      	ldr	r4, [pc, #16]	; (8022a90 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8022a80:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022a82:	4804      	ldr	r0, [pc, #16]	; (8022a94 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8022a84:	4621      	mov	r1, r4
 8022a86:	f7f1 fbcd 	bl	8014224 <USBD_GetString>
}
 8022a8a:	4620      	mov	r0, r4
 8022a8c:	bd10      	pop	{r4, pc}
 8022a8e:	bf00      	nop
 8022a90:	2002f258 	.word	0x2002f258
 8022a94:	080445bc 	.word	0x080445bc

08022a98 <USBD_FS_ProductStrDescriptor>:
{
 8022a98:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022a9a:	4c04      	ldr	r4, [pc, #16]	; (8022aac <USBD_FS_ProductStrDescriptor+0x14>)
{
 8022a9c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022a9e:	4804      	ldr	r0, [pc, #16]	; (8022ab0 <USBD_FS_ProductStrDescriptor+0x18>)
 8022aa0:	4621      	mov	r1, r4
 8022aa2:	f7f1 fbbf 	bl	8014224 <USBD_GetString>
}
 8022aa6:	4620      	mov	r0, r4
 8022aa8:	bd10      	pop	{r4, pc}
 8022aaa:	bf00      	nop
 8022aac:	2002f258 	.word	0x2002f258
 8022ab0:	080445d0 	.word	0x080445d0

08022ab4 <USBD_FS_ConfigStrDescriptor>:
{
 8022ab4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022ab6:	4c04      	ldr	r4, [pc, #16]	; (8022ac8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8022ab8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022aba:	4804      	ldr	r0, [pc, #16]	; (8022acc <USBD_FS_ConfigStrDescriptor+0x18>)
 8022abc:	4621      	mov	r1, r4
 8022abe:	f7f1 fbb1 	bl	8014224 <USBD_GetString>
}
 8022ac2:	4620      	mov	r0, r4
 8022ac4:	bd10      	pop	{r4, pc}
 8022ac6:	bf00      	nop
 8022ac8:	2002f258 	.word	0x2002f258
 8022acc:	080445e8 	.word	0x080445e8

08022ad0 <USBD_FS_InterfaceStrDescriptor>:
{
 8022ad0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022ad2:	4c04      	ldr	r4, [pc, #16]	; (8022ae4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8022ad4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022ad6:	4804      	ldr	r0, [pc, #16]	; (8022ae8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8022ad8:	4621      	mov	r1, r4
 8022ada:	f7f1 fba3 	bl	8014224 <USBD_GetString>
}
 8022ade:	4620      	mov	r0, r4
 8022ae0:	bd10      	pop	{r4, pc}
 8022ae2:	bf00      	nop
 8022ae4:	2002f258 	.word	0x2002f258
 8022ae8:	080445f4 	.word	0x080445f4

08022aec <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022aec:	4b21      	ldr	r3, [pc, #132]	; (8022b74 <USBD_FS_SerialStrDescriptor+0x88>)
 8022aee:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8022af2:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8022af6:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8022af8:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8022afa:	f04f 041a 	mov.w	r4, #26
 8022afe:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8022b00:	d101      	bne.n	8022b06 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8022b02:	481d      	ldr	r0, [pc, #116]	; (8022b78 <USBD_FS_SerialStrDescriptor+0x8c>)
 8022b04:	bd30      	pop	{r4, r5, pc}
 8022b06:	491c      	ldr	r1, [pc, #112]	; (8022b78 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022b08:	f04f 0e00 	mov.w	lr, #0
 8022b0c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8022b10:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8022b12:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8022b14:	0f13      	lsrs	r3, r2, #28
 8022b16:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8022b1a:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8022b1e:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8022b22:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022b26:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8022b2a:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8022b2e:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8022b32:	bf34      	ite	cc
 8022b34:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022b38:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8022b3c:	f1be 0f10 	cmp.w	lr, #16
 8022b40:	d1e8      	bne.n	8022b14 <USBD_FS_SerialStrDescriptor+0x28>
 8022b42:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8022b44:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8022b46:	0f03      	lsrs	r3, r0, #28
 8022b48:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8022b4c:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8022b50:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8022b52:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022b56:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8022b5a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8022b5e:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8022b62:	bf34      	ite	cc
 8022b64:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022b68:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8022b6a:	2a08      	cmp	r2, #8
 8022b6c:	d1eb      	bne.n	8022b46 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8022b6e:	4802      	ldr	r0, [pc, #8]	; (8022b78 <USBD_FS_SerialStrDescriptor+0x8c>)
 8022b70:	bd30      	pop	{r4, r5, pc}
 8022b72:	bf00      	nop
 8022b74:	1ff0f000 	.word	0x1ff0f000
 8022b78:	2000046c 	.word	0x2000046c

08022b7c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8022b7c:	6803      	ldr	r3, [r0, #0]
{
 8022b7e:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8022b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8022b84:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022b86:	f04f 0400 	mov.w	r4, #0
 8022b8a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8022b8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8022b92:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8022b94:	d001      	beq.n	8022b9a <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022b96:	b009      	add	sp, #36	; 0x24
 8022b98:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022b9a:	4d1e      	ldr	r5, [pc, #120]	; (8022c14 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8022b9c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022ba0:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022ba2:	481d      	ldr	r0, [pc, #116]	; (8022c18 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8022ba6:	f043 0301 	orr.w	r3, r3, #1
 8022baa:	632b      	str	r3, [r5, #48]	; 0x30
 8022bac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8022bae:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022bb2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022bb6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022bb8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022bba:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022bbc:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022bbe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022bc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022bc4:	f7e7 fd72 	bl	800a6ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8022bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8022bcc:	a903      	add	r1, sp, #12
 8022bce:	4812      	ldr	r0, [pc, #72]	; (8022c18 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022bd0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022bd2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8022bd6:	f7e7 fd69 	bl	800a6ac <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022bda:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022bdc:	4622      	mov	r2, r4
 8022bde:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022be4:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022be6:	636b      	str	r3, [r5, #52]	; 0x34
 8022be8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8022bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022bee:	9301      	str	r3, [sp, #4]
 8022bf0:	9b01      	ldr	r3, [sp, #4]
 8022bf2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8022bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022bf8:	646b      	str	r3, [r5, #68]	; 0x44
 8022bfa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8022bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022c00:	9302      	str	r3, [sp, #8]
 8022c02:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8022c04:	f7e5 f8de 	bl	8007dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022c08:	2043      	movs	r0, #67	; 0x43
 8022c0a:	f7e5 f925 	bl	8007e58 <HAL_NVIC_EnableIRQ>
}
 8022c0e:	b009      	add	sp, #36	; 0x24
 8022c10:	bd30      	pop	{r4, r5, pc}
 8022c12:	bf00      	nop
 8022c14:	40023800 	.word	0x40023800
 8022c18:	40020000 	.word	0x40020000

08022c1c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022c1c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8022c20:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022c24:	f7f0 bf4c 	b.w	8013ac0 <USBD_LL_SetupStage>

08022c28 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022c28:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8022c2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022c30:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022c34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8022c38:	f7f0 bf70 	b.w	8013b1c <USBD_LL_DataOutStage>

08022c3c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8022c3c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8022c40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022c44:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8022c4a:	f7f0 bf9d 	b.w	8013b88 <USBD_LL_DataInStage>
 8022c4e:	bf00      	nop

08022c50 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022c50:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022c54:	f7f1 b834 	b.w	8013cc0 <USBD_LL_SOF>

08022c58 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022c58:	68c1      	ldr	r1, [r0, #12]
{
 8022c5a:	b510      	push	{r4, lr}
 8022c5c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8022c5e:	b111      	cbz	r1, 8022c66 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022c60:	2902      	cmp	r1, #2
 8022c62:	d10a      	bne.n	8022c7a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8022c64:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022c66:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8022c6a:	f7f1 f811 	bl	8013c90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022c6e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8022c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022c76:	f7f0 bfe3 	b.w	8013c40 <USBD_LL_Reset>
    Error_Handler();
 8022c7a:	f7e0 fcc7 	bl	800360c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022c7e:	2101      	movs	r1, #1
 8022c80:	e7f1      	b.n	8022c66 <HAL_PCD_ResetCallback+0xe>
 8022c82:	bf00      	nop

08022c84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022c84:	b510      	push	{r4, lr}
 8022c86:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022c88:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022c8c:	f7f1 f804 	bl	8013c98 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022c90:	6822      	ldr	r2, [r4, #0]
 8022c92:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022c96:	f043 0301 	orr.w	r3, r3, #1
 8022c9a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022c9e:	6a23      	ldr	r3, [r4, #32]
 8022ca0:	b123      	cbz	r3, 8022cac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022ca2:	4a03      	ldr	r2, [pc, #12]	; (8022cb0 <HAL_PCD_SuspendCallback+0x2c>)
 8022ca4:	6913      	ldr	r3, [r2, #16]
 8022ca6:	f043 0306 	orr.w	r3, r3, #6
 8022caa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022cac:	bd10      	pop	{r4, pc}
 8022cae:	bf00      	nop
 8022cb0:	e000ed00 	.word	0xe000ed00

08022cb4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022cb4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022cb8:	f7f0 bff8 	b.w	8013cac <USBD_LL_Resume>

08022cbc <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022cbc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022cc0:	f7f1 b80e 	b.w	8013ce0 <USBD_LL_IsoOUTIncomplete>

08022cc4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022cc4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022cc8:	f7f1 b808 	b.w	8013cdc <USBD_LL_IsoINIncomplete>

08022ccc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022ccc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022cd0:	f7f1 b808 	b.w	8013ce4 <USBD_LL_DevConnected>

08022cd4 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022cd4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8022cd8:	f7f1 b806 	b.w	8013ce8 <USBD_LL_DevDisconnected>

08022cdc <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022cdc:	7802      	ldrb	r2, [r0, #0]
 8022cde:	b10a      	cbz	r2, 8022ce4 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8022ce0:	2000      	movs	r0, #0
 8022ce2:	4770      	bx	lr
{
 8022ce4:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8022ce6:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8022ce8:	4b14      	ldr	r3, [pc, #80]	; (8022d3c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022cea:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022cec:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8022cf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8022cf4:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8022cf8:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022cfc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022cfe:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8022d00:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022d02:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8022d04:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022d08:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8022d0c:	2206      	movs	r2, #6
 8022d0e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022d10:	f7e8 fe04 	bl	800b91c <HAL_PCD_Init>
 8022d14:	b978      	cbnz	r0, 8022d36 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022d16:	2180      	movs	r1, #128	; 0x80
 8022d18:	4808      	ldr	r0, [pc, #32]	; (8022d3c <USBD_LL_Init+0x60>)
 8022d1a:	f7e9 fb69 	bl	800c3f0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8022d1e:	2240      	movs	r2, #64	; 0x40
 8022d20:	2100      	movs	r1, #0
 8022d22:	4806      	ldr	r0, [pc, #24]	; (8022d3c <USBD_LL_Init+0x60>)
 8022d24:	f7e9 fb3a 	bl	800c39c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022d28:	2280      	movs	r2, #128	; 0x80
 8022d2a:	2101      	movs	r1, #1
 8022d2c:	4803      	ldr	r0, [pc, #12]	; (8022d3c <USBD_LL_Init+0x60>)
 8022d2e:	f7e9 fb35 	bl	800c39c <HAL_PCDEx_SetTxFiFo>
}
 8022d32:	2000      	movs	r0, #0
 8022d34:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8022d36:	f7e0 fc69 	bl	800360c <Error_Handler>
 8022d3a:	e7ec      	b.n	8022d16 <USBD_LL_Init+0x3a>
 8022d3c:	2002f458 	.word	0x2002f458

08022d40 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8022d40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022d44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8022d46:	f7e8 fe97 	bl	800ba78 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8022d4a:	2803      	cmp	r0, #3
 8022d4c:	d802      	bhi.n	8022d54 <USBD_LL_Start+0x14>
 8022d4e:	4b02      	ldr	r3, [pc, #8]	; (8022d58 <USBD_LL_Start+0x18>)
 8022d50:	5c18      	ldrb	r0, [r3, r0]
}
 8022d52:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8022d54:	2003      	movs	r0, #3
}
 8022d56:	bd08      	pop	{r3, pc}
 8022d58:	08044604 	.word	0x08044604

08022d5c <USBD_LL_OpenEP>:
{
 8022d5c:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022d5e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022d62:	461a      	mov	r2, r3
 8022d64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022d66:	4663      	mov	r3, ip
 8022d68:	f7e9 f9ca 	bl	800c100 <HAL_PCD_EP_Open>
  switch (hal_status)
 8022d6c:	2803      	cmp	r0, #3
 8022d6e:	d802      	bhi.n	8022d76 <USBD_LL_OpenEP+0x1a>
 8022d70:	4b02      	ldr	r3, [pc, #8]	; (8022d7c <USBD_LL_OpenEP+0x20>)
 8022d72:	5c18      	ldrb	r0, [r3, r0]
}
 8022d74:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022d76:	2003      	movs	r0, #3
}
 8022d78:	bd08      	pop	{r3, pc}
 8022d7a:	bf00      	nop
 8022d7c:	08044604 	.word	0x08044604

08022d80 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022d80:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022d84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022d86:	f7e9 f9f9 	bl	800c17c <HAL_PCD_EP_Close>
  switch (hal_status)
 8022d8a:	2803      	cmp	r0, #3
 8022d8c:	d802      	bhi.n	8022d94 <USBD_LL_CloseEP+0x14>
 8022d8e:	4b02      	ldr	r3, [pc, #8]	; (8022d98 <USBD_LL_CloseEP+0x18>)
 8022d90:	5c18      	ldrb	r0, [r3, r0]
}
 8022d92:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022d94:	2003      	movs	r0, #3
}
 8022d96:	bd08      	pop	{r3, pc}
 8022d98:	08044604 	.word	0x08044604

08022d9c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022d9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022da0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022da2:	f7e9 fa7b 	bl	800c29c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8022da6:	2803      	cmp	r0, #3
 8022da8:	d802      	bhi.n	8022db0 <USBD_LL_StallEP+0x14>
 8022daa:	4b02      	ldr	r3, [pc, #8]	; (8022db4 <USBD_LL_StallEP+0x18>)
 8022dac:	5c18      	ldrb	r0, [r3, r0]
}
 8022dae:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022db0:	2003      	movs	r0, #3
}
 8022db2:	bd08      	pop	{r3, pc}
 8022db4:	08044604 	.word	0x08044604

08022db8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022db8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022dbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022dbe:	f7e9 fab1 	bl	800c324 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8022dc2:	2803      	cmp	r0, #3
 8022dc4:	d802      	bhi.n	8022dcc <USBD_LL_ClearStallEP+0x14>
 8022dc6:	4b02      	ldr	r3, [pc, #8]	; (8022dd0 <USBD_LL_ClearStallEP+0x18>)
 8022dc8:	5c18      	ldrb	r0, [r3, r0]
}
 8022dca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022dcc:	2003      	movs	r0, #3
}
 8022dce:	bd08      	pop	{r3, pc}
 8022dd0:	08044604 	.word	0x08044604

08022dd4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8022dd4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022dd6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8022dda:	d406      	bmi.n	8022dea <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022ddc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8022de0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8022de4:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8022de8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022dea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8022dee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8022df2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8022df6:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8022dfa:	4770      	bx	lr

08022dfc <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022dfc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022e00:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022e02:	f7e9 f967 	bl	800c0d4 <HAL_PCD_SetAddress>
  switch (hal_status)
 8022e06:	2803      	cmp	r0, #3
 8022e08:	d802      	bhi.n	8022e10 <USBD_LL_SetUSBAddress+0x14>
 8022e0a:	4b02      	ldr	r3, [pc, #8]	; (8022e14 <USBD_LL_SetUSBAddress+0x18>)
 8022e0c:	5c18      	ldrb	r0, [r3, r0]
}
 8022e0e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022e10:	2003      	movs	r0, #3
}
 8022e12:	bd08      	pop	{r3, pc}
 8022e14:	08044604 	.word	0x08044604

08022e18 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022e18:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022e1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022e1e:	f7e9 fa15 	bl	800c24c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8022e22:	2803      	cmp	r0, #3
 8022e24:	d802      	bhi.n	8022e2c <USBD_LL_Transmit+0x14>
 8022e26:	4b02      	ldr	r3, [pc, #8]	; (8022e30 <USBD_LL_Transmit+0x18>)
 8022e28:	5c18      	ldrb	r0, [r3, r0]
}
 8022e2a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022e2c:	2003      	movs	r0, #3
}
 8022e2e:	bd08      	pop	{r3, pc}
 8022e30:	08044604 	.word	0x08044604

08022e34 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022e34:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8022e38:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022e3a:	f7e9 f9d5 	bl	800c1e8 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8022e3e:	2803      	cmp	r0, #3
 8022e40:	d802      	bhi.n	8022e48 <USBD_LL_PrepareReceive+0x14>
 8022e42:	4b02      	ldr	r3, [pc, #8]	; (8022e4c <USBD_LL_PrepareReceive+0x18>)
 8022e44:	5c18      	ldrb	r0, [r3, r0]
}
 8022e46:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022e48:	2003      	movs	r0, #3
}
 8022e4a:	bd08      	pop	{r3, pc}
 8022e4c:	08044604 	.word	0x08044604

08022e50 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022e50:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8022e54:	f7e9 b9f0 	b.w	800c238 <HAL_PCD_EP_GetRxCount>

08022e58 <HAL_PCDEx_LPM_Callback>:
{
 8022e58:	b510      	push	{r4, lr}
 8022e5a:	4604      	mov	r4, r0
  switch (msg)
 8022e5c:	b1a1      	cbz	r1, 8022e88 <HAL_PCDEx_LPM_Callback+0x30>
 8022e5e:	2901      	cmp	r1, #1
 8022e60:	d111      	bne.n	8022e86 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022e62:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022e64:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022e68:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022e6c:	f043 0301 	orr.w	r3, r3, #1
 8022e70:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8022e74:	f7f0 ff10 	bl	8013c98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022e78:	6a23      	ldr	r3, [r4, #32]
 8022e7a:	b123      	cbz	r3, 8022e86 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022e7c:	4a0e      	ldr	r2, [pc, #56]	; (8022eb8 <HAL_PCDEx_LPM_Callback+0x60>)
 8022e7e:	6913      	ldr	r3, [r2, #16]
 8022e80:	f043 0306 	orr.w	r3, r3, #6
 8022e84:	6113      	str	r3, [r2, #16]
}
 8022e86:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8022e88:	6a03      	ldr	r3, [r0, #32]
 8022e8a:	b963      	cbnz	r3, 8022ea6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022e8c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8022e8e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022e92:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8022e96:	f023 0301 	bic.w	r3, r3, #1
}
 8022e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022e9e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8022ea2:	f7f0 bf03 	b.w	8013cac <USBD_LL_Resume>
  SystemClock_Config();
 8022ea6:	f7e0 fbb9 	bl	800361c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022eaa:	4a03      	ldr	r2, [pc, #12]	; (8022eb8 <HAL_PCDEx_LPM_Callback+0x60>)
 8022eac:	6913      	ldr	r3, [r2, #16]
 8022eae:	f023 0306 	bic.w	r3, r3, #6
 8022eb2:	6113      	str	r3, [r2, #16]
 8022eb4:	e7ea      	b.n	8022e8c <HAL_PCDEx_LPM_Callback+0x34>
 8022eb6:	bf00      	nop
 8022eb8:	e000ed00 	.word	0xe000ed00

08022ebc <atoi>:
 8022ebc:	220a      	movs	r2, #10
 8022ebe:	2100      	movs	r1, #0
 8022ec0:	f002 ba8c 	b.w	80253dc <strtol>

08022ec4 <ctime>:
 8022ec4:	b508      	push	{r3, lr}
 8022ec6:	f000 f91f 	bl	8023108 <localtime>
 8022eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8022ece:	f002 be1f 	b.w	8025b10 <asctime>
 8022ed2:	Address 0x0000000008022ed2 is out of bounds.


08022ed4 <std>:
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	b510      	push	{r4, lr}
 8022ed8:	4604      	mov	r4, r0
 8022eda:	e9c0 3300 	strd	r3, r3, [r0]
 8022ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022ee2:	6083      	str	r3, [r0, #8]
 8022ee4:	8181      	strh	r1, [r0, #12]
 8022ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8022ee8:	81c2      	strh	r2, [r0, #14]
 8022eea:	6183      	str	r3, [r0, #24]
 8022eec:	4619      	mov	r1, r3
 8022eee:	2208      	movs	r2, #8
 8022ef0:	305c      	adds	r0, #92	; 0x5c
 8022ef2:	f000 fa69 	bl	80233c8 <memset>
 8022ef6:	4b05      	ldr	r3, [pc, #20]	; (8022f0c <std+0x38>)
 8022ef8:	6263      	str	r3, [r4, #36]	; 0x24
 8022efa:	4b05      	ldr	r3, [pc, #20]	; (8022f10 <std+0x3c>)
 8022efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8022efe:	4b05      	ldr	r3, [pc, #20]	; (8022f14 <std+0x40>)
 8022f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022f02:	4b05      	ldr	r3, [pc, #20]	; (8022f18 <std+0x44>)
 8022f04:	6224      	str	r4, [r4, #32]
 8022f06:	6323      	str	r3, [r4, #48]	; 0x30
 8022f08:	bd10      	pop	{r4, pc}
 8022f0a:	bf00      	nop
 8022f0c:	08024771 	.word	0x08024771
 8022f10:	08024797 	.word	0x08024797
 8022f14:	080247cf 	.word	0x080247cf
 8022f18:	080247f3 	.word	0x080247f3

08022f1c <_cleanup_r>:
 8022f1c:	4901      	ldr	r1, [pc, #4]	; (8022f24 <_cleanup_r+0x8>)
 8022f1e:	f000 b8af 	b.w	8023080 <_fwalk_reent>
 8022f22:	bf00      	nop
 8022f24:	08026935 	.word	0x08026935

08022f28 <__sfmoreglue>:
 8022f28:	b570      	push	{r4, r5, r6, lr}
 8022f2a:	2268      	movs	r2, #104	; 0x68
 8022f2c:	1e4d      	subs	r5, r1, #1
 8022f2e:	4355      	muls	r5, r2
 8022f30:	460e      	mov	r6, r1
 8022f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022f36:	f000 fd2d 	bl	8023994 <_malloc_r>
 8022f3a:	4604      	mov	r4, r0
 8022f3c:	b140      	cbz	r0, 8022f50 <__sfmoreglue+0x28>
 8022f3e:	2100      	movs	r1, #0
 8022f40:	e9c0 1600 	strd	r1, r6, [r0]
 8022f44:	300c      	adds	r0, #12
 8022f46:	60a0      	str	r0, [r4, #8]
 8022f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022f4c:	f000 fa3c 	bl	80233c8 <memset>
 8022f50:	4620      	mov	r0, r4
 8022f52:	bd70      	pop	{r4, r5, r6, pc}

08022f54 <__sfp_lock_acquire>:
 8022f54:	4801      	ldr	r0, [pc, #4]	; (8022f5c <__sfp_lock_acquire+0x8>)
 8022f56:	f000 b9eb 	b.w	8023330 <__retarget_lock_acquire_recursive>
 8022f5a:	bf00      	nop
 8022f5c:	2002f85e 	.word	0x2002f85e

08022f60 <__sfp_lock_release>:
 8022f60:	4801      	ldr	r0, [pc, #4]	; (8022f68 <__sfp_lock_release+0x8>)
 8022f62:	f000 b9e7 	b.w	8023334 <__retarget_lock_release_recursive>
 8022f66:	bf00      	nop
 8022f68:	2002f85e 	.word	0x2002f85e

08022f6c <__sinit_lock_acquire>:
 8022f6c:	4801      	ldr	r0, [pc, #4]	; (8022f74 <__sinit_lock_acquire+0x8>)
 8022f6e:	f000 b9df 	b.w	8023330 <__retarget_lock_acquire_recursive>
 8022f72:	bf00      	nop
 8022f74:	2002f85f 	.word	0x2002f85f

08022f78 <__sinit_lock_release>:
 8022f78:	4801      	ldr	r0, [pc, #4]	; (8022f80 <__sinit_lock_release+0x8>)
 8022f7a:	f000 b9db 	b.w	8023334 <__retarget_lock_release_recursive>
 8022f7e:	bf00      	nop
 8022f80:	2002f85f 	.word	0x2002f85f

08022f84 <__sinit>:
 8022f84:	b510      	push	{r4, lr}
 8022f86:	4604      	mov	r4, r0
 8022f88:	f7ff fff0 	bl	8022f6c <__sinit_lock_acquire>
 8022f8c:	69a3      	ldr	r3, [r4, #24]
 8022f8e:	b11b      	cbz	r3, 8022f98 <__sinit+0x14>
 8022f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f94:	f7ff bff0 	b.w	8022f78 <__sinit_lock_release>
 8022f98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8022f9e:	4b13      	ldr	r3, [pc, #76]	; (8022fec <__sinit+0x68>)
 8022fa0:	4a13      	ldr	r2, [pc, #76]	; (8022ff0 <__sinit+0x6c>)
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8022fa6:	42a3      	cmp	r3, r4
 8022fa8:	bf04      	itt	eq
 8022faa:	2301      	moveq	r3, #1
 8022fac:	61a3      	streq	r3, [r4, #24]
 8022fae:	4620      	mov	r0, r4
 8022fb0:	f000 f820 	bl	8022ff4 <__sfp>
 8022fb4:	6060      	str	r0, [r4, #4]
 8022fb6:	4620      	mov	r0, r4
 8022fb8:	f000 f81c 	bl	8022ff4 <__sfp>
 8022fbc:	60a0      	str	r0, [r4, #8]
 8022fbe:	4620      	mov	r0, r4
 8022fc0:	f000 f818 	bl	8022ff4 <__sfp>
 8022fc4:	2200      	movs	r2, #0
 8022fc6:	60e0      	str	r0, [r4, #12]
 8022fc8:	2104      	movs	r1, #4
 8022fca:	6860      	ldr	r0, [r4, #4]
 8022fcc:	f7ff ff82 	bl	8022ed4 <std>
 8022fd0:	68a0      	ldr	r0, [r4, #8]
 8022fd2:	2201      	movs	r2, #1
 8022fd4:	2109      	movs	r1, #9
 8022fd6:	f7ff ff7d 	bl	8022ed4 <std>
 8022fda:	68e0      	ldr	r0, [r4, #12]
 8022fdc:	2202      	movs	r2, #2
 8022fde:	2112      	movs	r1, #18
 8022fe0:	f7ff ff78 	bl	8022ed4 <std>
 8022fe4:	2301      	movs	r3, #1
 8022fe6:	61a3      	str	r3, [r4, #24]
 8022fe8:	e7d2      	b.n	8022f90 <__sinit+0xc>
 8022fea:	bf00      	nop
 8022fec:	0804476c 	.word	0x0804476c
 8022ff0:	08022f1d 	.word	0x08022f1d

08022ff4 <__sfp>:
 8022ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ff6:	4607      	mov	r7, r0
 8022ff8:	f7ff ffac 	bl	8022f54 <__sfp_lock_acquire>
 8022ffc:	4b1e      	ldr	r3, [pc, #120]	; (8023078 <__sfp+0x84>)
 8022ffe:	681e      	ldr	r6, [r3, #0]
 8023000:	69b3      	ldr	r3, [r6, #24]
 8023002:	b913      	cbnz	r3, 802300a <__sfp+0x16>
 8023004:	4630      	mov	r0, r6
 8023006:	f7ff ffbd 	bl	8022f84 <__sinit>
 802300a:	3648      	adds	r6, #72	; 0x48
 802300c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023010:	3b01      	subs	r3, #1
 8023012:	d503      	bpl.n	802301c <__sfp+0x28>
 8023014:	6833      	ldr	r3, [r6, #0]
 8023016:	b30b      	cbz	r3, 802305c <__sfp+0x68>
 8023018:	6836      	ldr	r6, [r6, #0]
 802301a:	e7f7      	b.n	802300c <__sfp+0x18>
 802301c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023020:	b9d5      	cbnz	r5, 8023058 <__sfp+0x64>
 8023022:	4b16      	ldr	r3, [pc, #88]	; (802307c <__sfp+0x88>)
 8023024:	60e3      	str	r3, [r4, #12]
 8023026:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802302a:	6665      	str	r5, [r4, #100]	; 0x64
 802302c:	f000 f97e 	bl	802332c <__retarget_lock_init_recursive>
 8023030:	f7ff ff96 	bl	8022f60 <__sfp_lock_release>
 8023034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802303c:	6025      	str	r5, [r4, #0]
 802303e:	61a5      	str	r5, [r4, #24]
 8023040:	2208      	movs	r2, #8
 8023042:	4629      	mov	r1, r5
 8023044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023048:	f000 f9be 	bl	80233c8 <memset>
 802304c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023054:	4620      	mov	r0, r4
 8023056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023058:	3468      	adds	r4, #104	; 0x68
 802305a:	e7d9      	b.n	8023010 <__sfp+0x1c>
 802305c:	2104      	movs	r1, #4
 802305e:	4638      	mov	r0, r7
 8023060:	f7ff ff62 	bl	8022f28 <__sfmoreglue>
 8023064:	4604      	mov	r4, r0
 8023066:	6030      	str	r0, [r6, #0]
 8023068:	2800      	cmp	r0, #0
 802306a:	d1d5      	bne.n	8023018 <__sfp+0x24>
 802306c:	f7ff ff78 	bl	8022f60 <__sfp_lock_release>
 8023070:	230c      	movs	r3, #12
 8023072:	603b      	str	r3, [r7, #0]
 8023074:	e7ee      	b.n	8023054 <__sfp+0x60>
 8023076:	bf00      	nop
 8023078:	0804476c 	.word	0x0804476c
 802307c:	ffff0001 	.word	0xffff0001

08023080 <_fwalk_reent>:
 8023080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023084:	4606      	mov	r6, r0
 8023086:	4688      	mov	r8, r1
 8023088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802308c:	2700      	movs	r7, #0
 802308e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023092:	f1b9 0901 	subs.w	r9, r9, #1
 8023096:	d505      	bpl.n	80230a4 <_fwalk_reent+0x24>
 8023098:	6824      	ldr	r4, [r4, #0]
 802309a:	2c00      	cmp	r4, #0
 802309c:	d1f7      	bne.n	802308e <_fwalk_reent+0xe>
 802309e:	4638      	mov	r0, r7
 80230a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80230a4:	89ab      	ldrh	r3, [r5, #12]
 80230a6:	2b01      	cmp	r3, #1
 80230a8:	d907      	bls.n	80230ba <_fwalk_reent+0x3a>
 80230aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80230ae:	3301      	adds	r3, #1
 80230b0:	d003      	beq.n	80230ba <_fwalk_reent+0x3a>
 80230b2:	4629      	mov	r1, r5
 80230b4:	4630      	mov	r0, r6
 80230b6:	47c0      	blx	r8
 80230b8:	4307      	orrs	r7, r0
 80230ba:	3568      	adds	r5, #104	; 0x68
 80230bc:	e7e9      	b.n	8023092 <_fwalk_reent+0x12>
 80230be:	Address 0x00000000080230be is out of bounds.


080230c0 <__libc_init_array>:
 80230c0:	b570      	push	{r4, r5, r6, lr}
 80230c2:	4d0d      	ldr	r5, [pc, #52]	; (80230f8 <__libc_init_array+0x38>)
 80230c4:	4c0d      	ldr	r4, [pc, #52]	; (80230fc <__libc_init_array+0x3c>)
 80230c6:	1b64      	subs	r4, r4, r5
 80230c8:	10a4      	asrs	r4, r4, #2
 80230ca:	2600      	movs	r6, #0
 80230cc:	42a6      	cmp	r6, r4
 80230ce:	d109      	bne.n	80230e4 <__libc_init_array+0x24>
 80230d0:	4d0b      	ldr	r5, [pc, #44]	; (8023100 <__libc_init_array+0x40>)
 80230d2:	4c0c      	ldr	r4, [pc, #48]	; (8023104 <__libc_init_array+0x44>)
 80230d4:	f005 f938 	bl	8028348 <_init>
 80230d8:	1b64      	subs	r4, r4, r5
 80230da:	10a4      	asrs	r4, r4, #2
 80230dc:	2600      	movs	r6, #0
 80230de:	42a6      	cmp	r6, r4
 80230e0:	d105      	bne.n	80230ee <__libc_init_array+0x2e>
 80230e2:	bd70      	pop	{r4, r5, r6, pc}
 80230e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80230e8:	4798      	blx	r3
 80230ea:	3601      	adds	r6, #1
 80230ec:	e7ee      	b.n	80230cc <__libc_init_array+0xc>
 80230ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80230f2:	4798      	blx	r3
 80230f4:	3601      	adds	r6, #1
 80230f6:	e7f2      	b.n	80230de <__libc_init_array+0x1e>
 80230f8:	08044ef4 	.word	0x08044ef4
 80230fc:	08044ef4 	.word	0x08044ef4
 8023100:	08044ef4 	.word	0x08044ef4
 8023104:	08044ef8 	.word	0x08044ef8

08023108 <localtime>:
 8023108:	b538      	push	{r3, r4, r5, lr}
 802310a:	4b0b      	ldr	r3, [pc, #44]	; (8023138 <localtime+0x30>)
 802310c:	681d      	ldr	r5, [r3, #0]
 802310e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8023110:	4604      	mov	r4, r0
 8023112:	b953      	cbnz	r3, 802312a <localtime+0x22>
 8023114:	2024      	movs	r0, #36	; 0x24
 8023116:	f000 f90f 	bl	8023338 <malloc>
 802311a:	4602      	mov	r2, r0
 802311c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802311e:	b920      	cbnz	r0, 802312a <localtime+0x22>
 8023120:	4b06      	ldr	r3, [pc, #24]	; (802313c <localtime+0x34>)
 8023122:	4807      	ldr	r0, [pc, #28]	; (8023140 <localtime+0x38>)
 8023124:	2132      	movs	r1, #50	; 0x32
 8023126:	f002 fd3b 	bl	8025ba0 <__assert_func>
 802312a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802312c:	4620      	mov	r0, r4
 802312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023132:	f000 b807 	b.w	8023144 <localtime_r>
 8023136:	bf00      	nop
 8023138:	20000488 	.word	0x20000488
 802313c:	08044770 	.word	0x08044770
 8023140:	08044787 	.word	0x08044787

08023144 <localtime_r>:
 8023144:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023148:	4680      	mov	r8, r0
 802314a:	9101      	str	r1, [sp, #4]
 802314c:	f003 fc84 	bl	8026a58 <__gettzinfo>
 8023150:	9901      	ldr	r1, [sp, #4]
 8023152:	4605      	mov	r5, r0
 8023154:	4640      	mov	r0, r8
 8023156:	f003 fc83 	bl	8026a60 <gmtime_r>
 802315a:	6943      	ldr	r3, [r0, #20]
 802315c:	0799      	lsls	r1, r3, #30
 802315e:	4604      	mov	r4, r0
 8023160:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8023164:	d105      	bne.n	8023172 <localtime_r+0x2e>
 8023166:	2264      	movs	r2, #100	; 0x64
 8023168:	fb97 f3f2 	sdiv	r3, r7, r2
 802316c:	fb02 7313 	mls	r3, r2, r3, r7
 8023170:	bb73      	cbnz	r3, 80231d0 <localtime_r+0x8c>
 8023172:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023176:	fb97 f6f3 	sdiv	r6, r7, r3
 802317a:	fb03 7616 	mls	r6, r3, r6, r7
 802317e:	fab6 f386 	clz	r3, r6
 8023182:	095b      	lsrs	r3, r3, #5
 8023184:	4e67      	ldr	r6, [pc, #412]	; (8023324 <localtime_r+0x1e0>)
 8023186:	2230      	movs	r2, #48	; 0x30
 8023188:	fb02 6603 	mla	r6, r2, r3, r6
 802318c:	f002 fa58 	bl	8025640 <__tz_lock>
 8023190:	f002 fa62 	bl	8025658 <_tzset_unlocked>
 8023194:	4b64      	ldr	r3, [pc, #400]	; (8023328 <localtime_r+0x1e4>)
 8023196:	681b      	ldr	r3, [r3, #0]
 8023198:	b34b      	cbz	r3, 80231ee <localtime_r+0xaa>
 802319a:	686b      	ldr	r3, [r5, #4]
 802319c:	42bb      	cmp	r3, r7
 802319e:	d119      	bne.n	80231d4 <localtime_r+0x90>
 80231a0:	682f      	ldr	r7, [r5, #0]
 80231a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80231a6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80231aa:	b9df      	cbnz	r7, 80231e4 <localtime_r+0xa0>
 80231ac:	4282      	cmp	r2, r0
 80231ae:	eb73 0101 	sbcs.w	r1, r3, r1
 80231b2:	da23      	bge.n	80231fc <localtime_r+0xb8>
 80231b4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80231b8:	4282      	cmp	r2, r0
 80231ba:	eb73 0701 	sbcs.w	r7, r3, r1
 80231be:	bfb4      	ite	lt
 80231c0:	2701      	movlt	r7, #1
 80231c2:	2700      	movge	r7, #0
 80231c4:	4282      	cmp	r2, r0
 80231c6:	418b      	sbcs	r3, r1
 80231c8:	6227      	str	r7, [r4, #32]
 80231ca:	db19      	blt.n	8023200 <localtime_r+0xbc>
 80231cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80231ce:	e018      	b.n	8023202 <localtime_r+0xbe>
 80231d0:	2301      	movs	r3, #1
 80231d2:	e7d7      	b.n	8023184 <localtime_r+0x40>
 80231d4:	4638      	mov	r0, r7
 80231d6:	f002 f989 	bl	80254ec <__tzcalc_limits>
 80231da:	2800      	cmp	r0, #0
 80231dc:	d1e0      	bne.n	80231a0 <localtime_r+0x5c>
 80231de:	f04f 33ff 	mov.w	r3, #4294967295
 80231e2:	e004      	b.n	80231ee <localtime_r+0xaa>
 80231e4:	4282      	cmp	r2, r0
 80231e6:	eb73 0101 	sbcs.w	r1, r3, r1
 80231ea:	da02      	bge.n	80231f2 <localtime_r+0xae>
 80231ec:	2300      	movs	r3, #0
 80231ee:	6223      	str	r3, [r4, #32]
 80231f0:	e7ec      	b.n	80231cc <localtime_r+0x88>
 80231f2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80231f6:	4282      	cmp	r2, r0
 80231f8:	418b      	sbcs	r3, r1
 80231fa:	daf7      	bge.n	80231ec <localtime_r+0xa8>
 80231fc:	2301      	movs	r3, #1
 80231fe:	6223      	str	r3, [r4, #32]
 8023200:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8023202:	6861      	ldr	r1, [r4, #4]
 8023204:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8023208:	203c      	movs	r0, #60	; 0x3c
 802320a:	fb93 f5f2 	sdiv	r5, r3, r2
 802320e:	fb02 3315 	mls	r3, r2, r5, r3
 8023212:	fb93 f2f0 	sdiv	r2, r3, r0
 8023216:	fb00 3012 	mls	r0, r0, r2, r3
 802321a:	6823      	ldr	r3, [r4, #0]
 802321c:	1a89      	subs	r1, r1, r2
 802321e:	68a2      	ldr	r2, [r4, #8]
 8023220:	6061      	str	r1, [r4, #4]
 8023222:	1a1b      	subs	r3, r3, r0
 8023224:	1b52      	subs	r2, r2, r5
 8023226:	2b3b      	cmp	r3, #59	; 0x3b
 8023228:	6023      	str	r3, [r4, #0]
 802322a:	60a2      	str	r2, [r4, #8]
 802322c:	dd35      	ble.n	802329a <localtime_r+0x156>
 802322e:	3101      	adds	r1, #1
 8023230:	6061      	str	r1, [r4, #4]
 8023232:	3b3c      	subs	r3, #60	; 0x3c
 8023234:	6023      	str	r3, [r4, #0]
 8023236:	6863      	ldr	r3, [r4, #4]
 8023238:	2b3b      	cmp	r3, #59	; 0x3b
 802323a:	dd34      	ble.n	80232a6 <localtime_r+0x162>
 802323c:	3201      	adds	r2, #1
 802323e:	60a2      	str	r2, [r4, #8]
 8023240:	3b3c      	subs	r3, #60	; 0x3c
 8023242:	6063      	str	r3, [r4, #4]
 8023244:	68a3      	ldr	r3, [r4, #8]
 8023246:	2b17      	cmp	r3, #23
 8023248:	dd33      	ble.n	80232b2 <localtime_r+0x16e>
 802324a:	69e2      	ldr	r2, [r4, #28]
 802324c:	3201      	adds	r2, #1
 802324e:	61e2      	str	r2, [r4, #28]
 8023250:	69a2      	ldr	r2, [r4, #24]
 8023252:	3201      	adds	r2, #1
 8023254:	2a06      	cmp	r2, #6
 8023256:	bfc8      	it	gt
 8023258:	2200      	movgt	r2, #0
 802325a:	61a2      	str	r2, [r4, #24]
 802325c:	68e2      	ldr	r2, [r4, #12]
 802325e:	3b18      	subs	r3, #24
 8023260:	3201      	adds	r2, #1
 8023262:	60a3      	str	r3, [r4, #8]
 8023264:	6923      	ldr	r3, [r4, #16]
 8023266:	60e2      	str	r2, [r4, #12]
 8023268:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802326c:	428a      	cmp	r2, r1
 802326e:	dd0e      	ble.n	802328e <localtime_r+0x14a>
 8023270:	2b0b      	cmp	r3, #11
 8023272:	eba2 0201 	sub.w	r2, r2, r1
 8023276:	60e2      	str	r2, [r4, #12]
 8023278:	f103 0201 	add.w	r2, r3, #1
 802327c:	bf09      	itett	eq
 802327e:	6963      	ldreq	r3, [r4, #20]
 8023280:	6122      	strne	r2, [r4, #16]
 8023282:	2200      	moveq	r2, #0
 8023284:	3301      	addeq	r3, #1
 8023286:	bf02      	ittt	eq
 8023288:	6122      	streq	r2, [r4, #16]
 802328a:	6163      	streq	r3, [r4, #20]
 802328c:	61e2      	streq	r2, [r4, #28]
 802328e:	f002 f9dd 	bl	802564c <__tz_unlock>
 8023292:	4620      	mov	r0, r4
 8023294:	b002      	add	sp, #8
 8023296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802329a:	2b00      	cmp	r3, #0
 802329c:	dacb      	bge.n	8023236 <localtime_r+0xf2>
 802329e:	3901      	subs	r1, #1
 80232a0:	6061      	str	r1, [r4, #4]
 80232a2:	333c      	adds	r3, #60	; 0x3c
 80232a4:	e7c6      	b.n	8023234 <localtime_r+0xf0>
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	dacc      	bge.n	8023244 <localtime_r+0x100>
 80232aa:	3a01      	subs	r2, #1
 80232ac:	60a2      	str	r2, [r4, #8]
 80232ae:	333c      	adds	r3, #60	; 0x3c
 80232b0:	e7c7      	b.n	8023242 <localtime_r+0xfe>
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	daeb      	bge.n	802328e <localtime_r+0x14a>
 80232b6:	69e2      	ldr	r2, [r4, #28]
 80232b8:	3a01      	subs	r2, #1
 80232ba:	61e2      	str	r2, [r4, #28]
 80232bc:	69a2      	ldr	r2, [r4, #24]
 80232be:	3a01      	subs	r2, #1
 80232c0:	bf48      	it	mi
 80232c2:	2206      	movmi	r2, #6
 80232c4:	61a2      	str	r2, [r4, #24]
 80232c6:	68e2      	ldr	r2, [r4, #12]
 80232c8:	3318      	adds	r3, #24
 80232ca:	3a01      	subs	r2, #1
 80232cc:	60e2      	str	r2, [r4, #12]
 80232ce:	60a3      	str	r3, [r4, #8]
 80232d0:	2a00      	cmp	r2, #0
 80232d2:	d1dc      	bne.n	802328e <localtime_r+0x14a>
 80232d4:	6923      	ldr	r3, [r4, #16]
 80232d6:	3b01      	subs	r3, #1
 80232d8:	d405      	bmi.n	80232e6 <localtime_r+0x1a2>
 80232da:	6123      	str	r3, [r4, #16]
 80232dc:	6923      	ldr	r3, [r4, #16]
 80232de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80232e2:	60e3      	str	r3, [r4, #12]
 80232e4:	e7d3      	b.n	802328e <localtime_r+0x14a>
 80232e6:	230b      	movs	r3, #11
 80232e8:	6123      	str	r3, [r4, #16]
 80232ea:	6963      	ldr	r3, [r4, #20]
 80232ec:	1e5a      	subs	r2, r3, #1
 80232ee:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80232f2:	6162      	str	r2, [r4, #20]
 80232f4:	079a      	lsls	r2, r3, #30
 80232f6:	d105      	bne.n	8023304 <localtime_r+0x1c0>
 80232f8:	2164      	movs	r1, #100	; 0x64
 80232fa:	fb93 f2f1 	sdiv	r2, r3, r1
 80232fe:	fb01 3212 	mls	r2, r1, r2, r3
 8023302:	b962      	cbnz	r2, 802331e <localtime_r+0x1da>
 8023304:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023308:	fb93 f1f2 	sdiv	r1, r3, r2
 802330c:	fb02 3311 	mls	r3, r2, r1, r3
 8023310:	fab3 f383 	clz	r3, r3
 8023314:	095b      	lsrs	r3, r3, #5
 8023316:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802331a:	61e3      	str	r3, [r4, #28]
 802331c:	e7de      	b.n	80232dc <localtime_r+0x198>
 802331e:	2301      	movs	r3, #1
 8023320:	e7f9      	b.n	8023316 <localtime_r+0x1d2>
 8023322:	bf00      	nop
 8023324:	08044844 	.word	0x08044844
 8023328:	2002f88c 	.word	0x2002f88c

0802332c <__retarget_lock_init_recursive>:
 802332c:	4770      	bx	lr

0802332e <__retarget_lock_acquire>:
 802332e:	4770      	bx	lr

08023330 <__retarget_lock_acquire_recursive>:
 8023330:	4770      	bx	lr

08023332 <__retarget_lock_release>:
 8023332:	4770      	bx	lr

08023334 <__retarget_lock_release_recursive>:
 8023334:	4770      	bx	lr
 8023336:	Address 0x0000000008023336 is out of bounds.


08023338 <malloc>:
 8023338:	4b02      	ldr	r3, [pc, #8]	; (8023344 <malloc+0xc>)
 802333a:	4601      	mov	r1, r0
 802333c:	6818      	ldr	r0, [r3, #0]
 802333e:	f000 bb29 	b.w	8023994 <_malloc_r>
 8023342:	bf00      	nop
 8023344:	20000488 	.word	0x20000488

08023348 <free>:
 8023348:	4b02      	ldr	r3, [pc, #8]	; (8023354 <free+0xc>)
 802334a:	4601      	mov	r1, r0
 802334c:	6818      	ldr	r0, [r3, #0]
 802334e:	f000 bab5 	b.w	80238bc <_free_r>
 8023352:	bf00      	nop
 8023354:	20000488 	.word	0x20000488

08023358 <memcmp>:
 8023358:	b510      	push	{r4, lr}
 802335a:	3901      	subs	r1, #1
 802335c:	4402      	add	r2, r0
 802335e:	4290      	cmp	r0, r2
 8023360:	d101      	bne.n	8023366 <memcmp+0xe>
 8023362:	2000      	movs	r0, #0
 8023364:	e005      	b.n	8023372 <memcmp+0x1a>
 8023366:	7803      	ldrb	r3, [r0, #0]
 8023368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802336c:	42a3      	cmp	r3, r4
 802336e:	d001      	beq.n	8023374 <memcmp+0x1c>
 8023370:	1b18      	subs	r0, r3, r4
 8023372:	bd10      	pop	{r4, pc}
 8023374:	3001      	adds	r0, #1
 8023376:	e7f2      	b.n	802335e <memcmp+0x6>

08023378 <memcpy>:
 8023378:	440a      	add	r2, r1
 802337a:	4291      	cmp	r1, r2
 802337c:	f100 33ff 	add.w	r3, r0, #4294967295
 8023380:	d100      	bne.n	8023384 <memcpy+0xc>
 8023382:	4770      	bx	lr
 8023384:	b510      	push	{r4, lr}
 8023386:	f811 4b01 	ldrb.w	r4, [r1], #1
 802338a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802338e:	4291      	cmp	r1, r2
 8023390:	d1f9      	bne.n	8023386 <memcpy+0xe>
 8023392:	bd10      	pop	{r4, pc}

08023394 <memmove>:
 8023394:	4288      	cmp	r0, r1
 8023396:	b510      	push	{r4, lr}
 8023398:	eb01 0402 	add.w	r4, r1, r2
 802339c:	d902      	bls.n	80233a4 <memmove+0x10>
 802339e:	4284      	cmp	r4, r0
 80233a0:	4623      	mov	r3, r4
 80233a2:	d807      	bhi.n	80233b4 <memmove+0x20>
 80233a4:	1e43      	subs	r3, r0, #1
 80233a6:	42a1      	cmp	r1, r4
 80233a8:	d008      	beq.n	80233bc <memmove+0x28>
 80233aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80233ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80233b2:	e7f8      	b.n	80233a6 <memmove+0x12>
 80233b4:	4402      	add	r2, r0
 80233b6:	4601      	mov	r1, r0
 80233b8:	428a      	cmp	r2, r1
 80233ba:	d100      	bne.n	80233be <memmove+0x2a>
 80233bc:	bd10      	pop	{r4, pc}
 80233be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80233c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80233c6:	e7f7      	b.n	80233b8 <memmove+0x24>

080233c8 <memset>:
 80233c8:	4402      	add	r2, r0
 80233ca:	4603      	mov	r3, r0
 80233cc:	4293      	cmp	r3, r2
 80233ce:	d100      	bne.n	80233d2 <memset+0xa>
 80233d0:	4770      	bx	lr
 80233d2:	f803 1b01 	strb.w	r1, [r3], #1
 80233d6:	e7f9      	b.n	80233cc <memset+0x4>

080233d8 <validate_structure>:
 80233d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80233da:	6801      	ldr	r1, [r0, #0]
 80233dc:	293b      	cmp	r1, #59	; 0x3b
 80233de:	4604      	mov	r4, r0
 80233e0:	d911      	bls.n	8023406 <validate_structure+0x2e>
 80233e2:	223c      	movs	r2, #60	; 0x3c
 80233e4:	4668      	mov	r0, sp
 80233e6:	f002 fc09 	bl	8025bfc <div>
 80233ea:	9a01      	ldr	r2, [sp, #4]
 80233ec:	6863      	ldr	r3, [r4, #4]
 80233ee:	9900      	ldr	r1, [sp, #0]
 80233f0:	2a00      	cmp	r2, #0
 80233f2:	440b      	add	r3, r1
 80233f4:	6063      	str	r3, [r4, #4]
 80233f6:	bfbb      	ittet	lt
 80233f8:	323c      	addlt	r2, #60	; 0x3c
 80233fa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80233fe:	6022      	strge	r2, [r4, #0]
 8023400:	6022      	strlt	r2, [r4, #0]
 8023402:	bfb8      	it	lt
 8023404:	6063      	strlt	r3, [r4, #4]
 8023406:	6861      	ldr	r1, [r4, #4]
 8023408:	293b      	cmp	r1, #59	; 0x3b
 802340a:	d911      	bls.n	8023430 <validate_structure+0x58>
 802340c:	223c      	movs	r2, #60	; 0x3c
 802340e:	4668      	mov	r0, sp
 8023410:	f002 fbf4 	bl	8025bfc <div>
 8023414:	9a01      	ldr	r2, [sp, #4]
 8023416:	68a3      	ldr	r3, [r4, #8]
 8023418:	9900      	ldr	r1, [sp, #0]
 802341a:	2a00      	cmp	r2, #0
 802341c:	440b      	add	r3, r1
 802341e:	60a3      	str	r3, [r4, #8]
 8023420:	bfbb      	ittet	lt
 8023422:	323c      	addlt	r2, #60	; 0x3c
 8023424:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023428:	6062      	strge	r2, [r4, #4]
 802342a:	6062      	strlt	r2, [r4, #4]
 802342c:	bfb8      	it	lt
 802342e:	60a3      	strlt	r3, [r4, #8]
 8023430:	68a1      	ldr	r1, [r4, #8]
 8023432:	2917      	cmp	r1, #23
 8023434:	d911      	bls.n	802345a <validate_structure+0x82>
 8023436:	2218      	movs	r2, #24
 8023438:	4668      	mov	r0, sp
 802343a:	f002 fbdf 	bl	8025bfc <div>
 802343e:	9a01      	ldr	r2, [sp, #4]
 8023440:	68e3      	ldr	r3, [r4, #12]
 8023442:	9900      	ldr	r1, [sp, #0]
 8023444:	2a00      	cmp	r2, #0
 8023446:	440b      	add	r3, r1
 8023448:	60e3      	str	r3, [r4, #12]
 802344a:	bfbb      	ittet	lt
 802344c:	3218      	addlt	r2, #24
 802344e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023452:	60a2      	strge	r2, [r4, #8]
 8023454:	60a2      	strlt	r2, [r4, #8]
 8023456:	bfb8      	it	lt
 8023458:	60e3      	strlt	r3, [r4, #12]
 802345a:	6921      	ldr	r1, [r4, #16]
 802345c:	290b      	cmp	r1, #11
 802345e:	d911      	bls.n	8023484 <validate_structure+0xac>
 8023460:	220c      	movs	r2, #12
 8023462:	4668      	mov	r0, sp
 8023464:	f002 fbca 	bl	8025bfc <div>
 8023468:	9a01      	ldr	r2, [sp, #4]
 802346a:	6963      	ldr	r3, [r4, #20]
 802346c:	9900      	ldr	r1, [sp, #0]
 802346e:	2a00      	cmp	r2, #0
 8023470:	440b      	add	r3, r1
 8023472:	6163      	str	r3, [r4, #20]
 8023474:	bfbb      	ittet	lt
 8023476:	320c      	addlt	r2, #12
 8023478:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802347c:	6122      	strge	r2, [r4, #16]
 802347e:	6122      	strlt	r2, [r4, #16]
 8023480:	bfb8      	it	lt
 8023482:	6163      	strlt	r3, [r4, #20]
 8023484:	6963      	ldr	r3, [r4, #20]
 8023486:	0798      	lsls	r0, r3, #30
 8023488:	d120      	bne.n	80234cc <validate_structure+0xf4>
 802348a:	2164      	movs	r1, #100	; 0x64
 802348c:	fb93 f2f1 	sdiv	r2, r3, r1
 8023490:	fb01 3212 	mls	r2, r1, r2, r3
 8023494:	b9e2      	cbnz	r2, 80234d0 <validate_structure+0xf8>
 8023496:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802349a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802349e:	fb93 f1f2 	sdiv	r1, r3, r2
 80234a2:	fb02 3311 	mls	r3, r2, r1, r3
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	bf14      	ite	ne
 80234aa:	231c      	movne	r3, #28
 80234ac:	231d      	moveq	r3, #29
 80234ae:	68e2      	ldr	r2, [r4, #12]
 80234b0:	2a00      	cmp	r2, #0
 80234b2:	dc0f      	bgt.n	80234d4 <validate_structure+0xfc>
 80234b4:	4f33      	ldr	r7, [pc, #204]	; (8023584 <validate_structure+0x1ac>)
 80234b6:	260b      	movs	r6, #11
 80234b8:	2064      	movs	r0, #100	; 0x64
 80234ba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80234be:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80234c2:	f1bc 0f00 	cmp.w	ip, #0
 80234c6:	dd31      	ble.n	802352c <validate_structure+0x154>
 80234c8:	b003      	add	sp, #12
 80234ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234cc:	231c      	movs	r3, #28
 80234ce:	e7ee      	b.n	80234ae <validate_structure+0xd6>
 80234d0:	231d      	movs	r3, #29
 80234d2:	e7ec      	b.n	80234ae <validate_structure+0xd6>
 80234d4:	4e2b      	ldr	r6, [pc, #172]	; (8023584 <validate_structure+0x1ac>)
 80234d6:	2700      	movs	r7, #0
 80234d8:	2064      	movs	r0, #100	; 0x64
 80234da:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80234de:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80234e2:	2a01      	cmp	r2, #1
 80234e4:	bf14      	ite	ne
 80234e6:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80234ea:	469c      	moveq	ip, r3
 80234ec:	4561      	cmp	r1, ip
 80234ee:	ddeb      	ble.n	80234c8 <validate_structure+0xf0>
 80234f0:	3201      	adds	r2, #1
 80234f2:	eba1 010c 	sub.w	r1, r1, ip
 80234f6:	2a0c      	cmp	r2, #12
 80234f8:	60e1      	str	r1, [r4, #12]
 80234fa:	6122      	str	r2, [r4, #16]
 80234fc:	d1ef      	bne.n	80234de <validate_structure+0x106>
 80234fe:	6963      	ldr	r3, [r4, #20]
 8023500:	1c5a      	adds	r2, r3, #1
 8023502:	0791      	lsls	r1, r2, #30
 8023504:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8023508:	d137      	bne.n	802357a <validate_structure+0x1a2>
 802350a:	fb92 f1f0 	sdiv	r1, r2, r0
 802350e:	fb00 2211 	mls	r2, r0, r1, r2
 8023512:	2a00      	cmp	r2, #0
 8023514:	d133      	bne.n	802357e <validate_structure+0x1a6>
 8023516:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802351a:	fb93 f2f5 	sdiv	r2, r3, r5
 802351e:	fb05 3312 	mls	r3, r5, r2, r3
 8023522:	2b00      	cmp	r3, #0
 8023524:	bf14      	ite	ne
 8023526:	231c      	movne	r3, #28
 8023528:	231d      	moveq	r3, #29
 802352a:	e7d8      	b.n	80234de <validate_structure+0x106>
 802352c:	6921      	ldr	r1, [r4, #16]
 802352e:	3901      	subs	r1, #1
 8023530:	6121      	str	r1, [r4, #16]
 8023532:	3101      	adds	r1, #1
 8023534:	d114      	bne.n	8023560 <validate_structure+0x188>
 8023536:	6963      	ldr	r3, [r4, #20]
 8023538:	1e5a      	subs	r2, r3, #1
 802353a:	0791      	lsls	r1, r2, #30
 802353c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8023540:	d117      	bne.n	8023572 <validate_structure+0x19a>
 8023542:	fb92 f1f0 	sdiv	r1, r2, r0
 8023546:	fb00 2211 	mls	r2, r0, r1, r2
 802354a:	b9a2      	cbnz	r2, 8023576 <validate_structure+0x19e>
 802354c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8023550:	fb93 f2f5 	sdiv	r2, r3, r5
 8023554:	fb05 3312 	mls	r3, r5, r2, r3
 8023558:	2b00      	cmp	r3, #0
 802355a:	bf14      	ite	ne
 802355c:	231c      	movne	r3, #28
 802355e:	231d      	moveq	r3, #29
 8023560:	6922      	ldr	r2, [r4, #16]
 8023562:	2a01      	cmp	r2, #1
 8023564:	bf14      	ite	ne
 8023566:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802356a:	461a      	moveq	r2, r3
 802356c:	4462      	add	r2, ip
 802356e:	60e2      	str	r2, [r4, #12]
 8023570:	e7a5      	b.n	80234be <validate_structure+0xe6>
 8023572:	231c      	movs	r3, #28
 8023574:	e7f4      	b.n	8023560 <validate_structure+0x188>
 8023576:	231d      	movs	r3, #29
 8023578:	e7f2      	b.n	8023560 <validate_structure+0x188>
 802357a:	231c      	movs	r3, #28
 802357c:	e7af      	b.n	80234de <validate_structure+0x106>
 802357e:	231d      	movs	r3, #29
 8023580:	e7ad      	b.n	80234de <validate_structure+0x106>
 8023582:	bf00      	nop
 8023584:	080447e4 	.word	0x080447e4

08023588 <mktime>:
 8023588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802358c:	b085      	sub	sp, #20
 802358e:	4607      	mov	r7, r0
 8023590:	f003 fa62 	bl	8026a58 <__gettzinfo>
 8023594:	4681      	mov	r9, r0
 8023596:	4638      	mov	r0, r7
 8023598:	f7ff ff1e 	bl	80233d8 <validate_structure>
 802359c:	e9d7 4000 	ldrd	r4, r0, [r7]
 80235a0:	233c      	movs	r3, #60	; 0x3c
 80235a2:	fb03 4400 	mla	r4, r3, r0, r4
 80235a6:	68b8      	ldr	r0, [r7, #8]
 80235a8:	4abc      	ldr	r2, [pc, #752]	; (802389c <mktime+0x314>)
 80235aa:	697e      	ldr	r6, [r7, #20]
 80235ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80235b0:	fb03 4400 	mla	r4, r3, r0, r4
 80235b4:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80235b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80235bc:	3d01      	subs	r5, #1
 80235be:	2b01      	cmp	r3, #1
 80235c0:	4415      	add	r5, r2
 80235c2:	dd11      	ble.n	80235e8 <mktime+0x60>
 80235c4:	07b1      	lsls	r1, r6, #30
 80235c6:	d10f      	bne.n	80235e8 <mktime+0x60>
 80235c8:	2264      	movs	r2, #100	; 0x64
 80235ca:	fb96 f3f2 	sdiv	r3, r6, r2
 80235ce:	fb02 6313 	mls	r3, r2, r3, r6
 80235d2:	b943      	cbnz	r3, 80235e6 <mktime+0x5e>
 80235d4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80235d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80235dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80235e0:	fb02 3311 	mls	r3, r2, r1, r3
 80235e4:	b903      	cbnz	r3, 80235e8 <mktime+0x60>
 80235e6:	3501      	adds	r5, #1
 80235e8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80235ec:	3310      	adds	r3, #16
 80235ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 80235f2:	4293      	cmp	r3, r2
 80235f4:	61fd      	str	r5, [r7, #28]
 80235f6:	f200 815d 	bhi.w	80238b4 <mktime+0x32c>
 80235fa:	2e46      	cmp	r6, #70	; 0x46
 80235fc:	dd71      	ble.n	80236e2 <mktime+0x15a>
 80235fe:	2346      	movs	r3, #70	; 0x46
 8023600:	f240 1c6d 	movw	ip, #365	; 0x16d
 8023604:	2164      	movs	r1, #100	; 0x64
 8023606:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802360a:	079a      	lsls	r2, r3, #30
 802360c:	d163      	bne.n	80236d6 <mktime+0x14e>
 802360e:	fb93 f2f1 	sdiv	r2, r3, r1
 8023612:	fb01 3212 	mls	r2, r1, r2, r3
 8023616:	2a00      	cmp	r2, #0
 8023618:	d160      	bne.n	80236dc <mktime+0x154>
 802361a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802361e:	fb92 fef0 	sdiv	lr, r2, r0
 8023622:	fb00 221e 	mls	r2, r0, lr, r2
 8023626:	2a00      	cmp	r2, #0
 8023628:	bf14      	ite	ne
 802362a:	4662      	movne	r2, ip
 802362c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023630:	3301      	adds	r3, #1
 8023632:	429e      	cmp	r6, r3
 8023634:	4415      	add	r5, r2
 8023636:	d1e8      	bne.n	802360a <mktime+0x82>
 8023638:	4b99      	ldr	r3, [pc, #612]	; (80238a0 <mktime+0x318>)
 802363a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802363e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8023642:	f001 fffd 	bl	8025640 <__tz_lock>
 8023646:	f002 f807 	bl	8025658 <_tzset_unlocked>
 802364a:	4b96      	ldr	r3, [pc, #600]	; (80238a4 <mktime+0x31c>)
 802364c:	f8d3 b000 	ldr.w	fp, [r3]
 8023650:	f1bb 0f00 	cmp.w	fp, #0
 8023654:	d039      	beq.n	80236ca <mktime+0x142>
 8023656:	f8d7 b020 	ldr.w	fp, [r7, #32]
 802365a:	6978      	ldr	r0, [r7, #20]
 802365c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8023660:	f1bb 0f01 	cmp.w	fp, #1
 8023664:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023668:	46da      	mov	sl, fp
 802366a:	bfa8      	it	ge
 802366c:	f04f 0a01 	movge.w	sl, #1
 8023670:	4283      	cmp	r3, r0
 8023672:	d178      	bne.n	8023766 <mktime+0x1de>
 8023674:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8023678:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802367c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8023680:	1a5b      	subs	r3, r3, r1
 8023682:	9302      	str	r3, [sp, #8]
 8023684:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8023688:	9303      	str	r3, [sp, #12]
 802368a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802368e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8023692:	9301      	str	r3, [sp, #4]
 8023694:	ebb3 0c02 	subs.w	ip, r3, r2
 8023698:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 802369c:	4564      	cmp	r4, ip
 802369e:	eb78 0300 	sbcs.w	r3, r8, r0
 80236a2:	da66      	bge.n	8023772 <mktime+0x1ea>
 80236a4:	f8d9 3000 	ldr.w	r3, [r9]
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d06f      	beq.n	802378c <mktime+0x204>
 80236ac:	9b02      	ldr	r3, [sp, #8]
 80236ae:	429c      	cmp	r4, r3
 80236b0:	9b03      	ldr	r3, [sp, #12]
 80236b2:	eb78 0303 	sbcs.w	r3, r8, r3
 80236b6:	db03      	blt.n	80236c0 <mktime+0x138>
 80236b8:	4564      	cmp	r4, ip
 80236ba:	eb78 0300 	sbcs.w	r3, r8, r0
 80236be:	db6b      	blt.n	8023798 <mktime+0x210>
 80236c0:	f1bb 0f00 	cmp.w	fp, #0
 80236c4:	f04f 0b00 	mov.w	fp, #0
 80236c8:	da6b      	bge.n	80237a2 <mktime+0x21a>
 80236ca:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80236ce:	190c      	adds	r4, r1, r4
 80236d0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80236d4:	e0a9      	b.n	802382a <mktime+0x2a2>
 80236d6:	f240 126d 	movw	r2, #365	; 0x16d
 80236da:	e7a9      	b.n	8023630 <mktime+0xa8>
 80236dc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80236e0:	e7a6      	b.n	8023630 <mktime+0xa8>
 80236e2:	d0a9      	beq.n	8023638 <mktime+0xb0>
 80236e4:	2345      	movs	r3, #69	; 0x45
 80236e6:	f240 1c6d 	movw	ip, #365	; 0x16d
 80236ea:	2164      	movs	r1, #100	; 0x64
 80236ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80236f0:	e012      	b.n	8023718 <mktime+0x190>
 80236f2:	bb62      	cbnz	r2, 802374e <mktime+0x1c6>
 80236f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80236f8:	fb01 3212 	mls	r2, r1, r2, r3
 80236fc:	bb52      	cbnz	r2, 8023754 <mktime+0x1cc>
 80236fe:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8023702:	fb92 fef0 	sdiv	lr, r2, r0
 8023706:	fb00 221e 	mls	r2, r0, lr, r2
 802370a:	2a00      	cmp	r2, #0
 802370c:	bf14      	ite	ne
 802370e:	4662      	movne	r2, ip
 8023710:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023714:	1aad      	subs	r5, r5, r2
 8023716:	3b01      	subs	r3, #1
 8023718:	429e      	cmp	r6, r3
 802371a:	f003 0203 	and.w	r2, r3, #3
 802371e:	dbe8      	blt.n	80236f2 <mktime+0x16a>
 8023720:	b9da      	cbnz	r2, 802375a <mktime+0x1d2>
 8023722:	2264      	movs	r2, #100	; 0x64
 8023724:	fb96 f3f2 	sdiv	r3, r6, r2
 8023728:	fb02 6313 	mls	r3, r2, r3, r6
 802372c:	b9c3      	cbnz	r3, 8023760 <mktime+0x1d8>
 802372e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8023732:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023736:	fb93 f1f2 	sdiv	r1, r3, r2
 802373a:	fb02 3311 	mls	r3, r2, r1, r3
 802373e:	2b00      	cmp	r3, #0
 8023740:	f240 136d 	movw	r3, #365	; 0x16d
 8023744:	bf08      	it	eq
 8023746:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802374a:	1aed      	subs	r5, r5, r3
 802374c:	e774      	b.n	8023638 <mktime+0xb0>
 802374e:	f240 126d 	movw	r2, #365	; 0x16d
 8023752:	e7df      	b.n	8023714 <mktime+0x18c>
 8023754:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8023758:	e7dc      	b.n	8023714 <mktime+0x18c>
 802375a:	f240 136d 	movw	r3, #365	; 0x16d
 802375e:	e7f4      	b.n	802374a <mktime+0x1c2>
 8023760:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8023764:	e7f1      	b.n	802374a <mktime+0x1c2>
 8023766:	f001 fec1 	bl	80254ec <__tzcalc_limits>
 802376a:	2800      	cmp	r0, #0
 802376c:	d182      	bne.n	8023674 <mktime+0xec>
 802376e:	46d3      	mov	fp, sl
 8023770:	e050      	b.n	8023814 <mktime+0x28c>
 8023772:	9b01      	ldr	r3, [sp, #4]
 8023774:	1a5b      	subs	r3, r3, r1
 8023776:	9301      	str	r3, [sp, #4]
 8023778:	ea4f 73e1 	mov.w	r3, r1, asr #31
 802377c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8023780:	9b01      	ldr	r3, [sp, #4]
 8023782:	429c      	cmp	r4, r3
 8023784:	eb78 030e 	sbcs.w	r3, r8, lr
 8023788:	dbf1      	blt.n	802376e <mktime+0x1e6>
 802378a:	e78b      	b.n	80236a4 <mktime+0x11c>
 802378c:	9b02      	ldr	r3, [sp, #8]
 802378e:	429c      	cmp	r4, r3
 8023790:	9b03      	ldr	r3, [sp, #12]
 8023792:	eb78 0303 	sbcs.w	r3, r8, r3
 8023796:	db8f      	blt.n	80236b8 <mktime+0x130>
 8023798:	f1bb 0f00 	cmp.w	fp, #0
 802379c:	db3e      	blt.n	802381c <mktime+0x294>
 802379e:	f04f 0b01 	mov.w	fp, #1
 80237a2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80237a6:	f1ba 0f01 	cmp.w	sl, #1
 80237aa:	d133      	bne.n	8023814 <mktime+0x28c>
 80237ac:	f1bb 0f00 	cmp.w	fp, #0
 80237b0:	d04e      	beq.n	8023850 <mktime+0x2c8>
 80237b2:	1a52      	subs	r2, r2, r1
 80237b4:	683b      	ldr	r3, [r7, #0]
 80237b6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80237ba:	4413      	add	r3, r2
 80237bc:	1914      	adds	r4, r2, r4
 80237be:	603b      	str	r3, [r7, #0]
 80237c0:	4638      	mov	r0, r7
 80237c2:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80237c6:	f7ff fe07 	bl	80233d8 <validate_structure>
 80237ca:	68fa      	ldr	r2, [r7, #12]
 80237cc:	ebb2 020a 	subs.w	r2, r2, sl
 80237d0:	d020      	beq.n	8023814 <mktime+0x28c>
 80237d2:	2a01      	cmp	r2, #1
 80237d4:	dc3e      	bgt.n	8023854 <mktime+0x2cc>
 80237d6:	1c90      	adds	r0, r2, #2
 80237d8:	bfd8      	it	le
 80237da:	2201      	movle	r2, #1
 80237dc:	69fb      	ldr	r3, [r7, #28]
 80237de:	18d3      	adds	r3, r2, r3
 80237e0:	4415      	add	r5, r2
 80237e2:	d540      	bpl.n	8023866 <mktime+0x2de>
 80237e4:	1e73      	subs	r3, r6, #1
 80237e6:	0799      	lsls	r1, r3, #30
 80237e8:	d137      	bne.n	802385a <mktime+0x2d2>
 80237ea:	2264      	movs	r2, #100	; 0x64
 80237ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80237f0:	fb02 3311 	mls	r3, r2, r1, r3
 80237f4:	bba3      	cbnz	r3, 8023860 <mktime+0x2d8>
 80237f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80237fa:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80237fe:	fb96 f2f3 	sdiv	r2, r6, r3
 8023802:	fb03 6612 	mls	r6, r3, r2, r6
 8023806:	2e00      	cmp	r6, #0
 8023808:	f240 136d 	movw	r3, #365	; 0x16d
 802380c:	bf18      	it	ne
 802380e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8023812:	61fb      	str	r3, [r7, #28]
 8023814:	f1bb 0f01 	cmp.w	fp, #1
 8023818:	f47f af57 	bne.w	80236ca <mktime+0x142>
 802381c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8023820:	190c      	adds	r4, r1, r4
 8023822:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8023826:	f04f 0b01 	mov.w	fp, #1
 802382a:	f001 ff0f 	bl	802564c <__tz_unlock>
 802382e:	3504      	adds	r5, #4
 8023830:	2307      	movs	r3, #7
 8023832:	fb95 f3f3 	sdiv	r3, r5, r3
 8023836:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802383a:	1aed      	subs	r5, r5, r3
 802383c:	bf48      	it	mi
 802383e:	3507      	addmi	r5, #7
 8023840:	f8c7 b020 	str.w	fp, [r7, #32]
 8023844:	61bd      	str	r5, [r7, #24]
 8023846:	4620      	mov	r0, r4
 8023848:	4641      	mov	r1, r8
 802384a:	b005      	add	sp, #20
 802384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023850:	1a8a      	subs	r2, r1, r2
 8023852:	e7af      	b.n	80237b4 <mktime+0x22c>
 8023854:	f04f 32ff 	mov.w	r2, #4294967295
 8023858:	e7c0      	b.n	80237dc <mktime+0x254>
 802385a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802385e:	e7d8      	b.n	8023812 <mktime+0x28a>
 8023860:	f240 136d 	movw	r3, #365	; 0x16d
 8023864:	e7d5      	b.n	8023812 <mktime+0x28a>
 8023866:	07b2      	lsls	r2, r6, #30
 8023868:	d11e      	bne.n	80238a8 <mktime+0x320>
 802386a:	2164      	movs	r1, #100	; 0x64
 802386c:	fb96 f2f1 	sdiv	r2, r6, r1
 8023870:	fb01 6212 	mls	r2, r1, r2, r6
 8023874:	b9da      	cbnz	r2, 80238ae <mktime+0x326>
 8023876:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802387a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802387e:	fb96 f1f2 	sdiv	r1, r6, r2
 8023882:	fb02 6611 	mls	r6, r2, r1, r6
 8023886:	2e00      	cmp	r6, #0
 8023888:	f240 126d 	movw	r2, #365	; 0x16d
 802388c:	bf08      	it	eq
 802388e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8023892:	4293      	cmp	r3, r2
 8023894:	bfa8      	it	ge
 8023896:	1a9b      	subge	r3, r3, r2
 8023898:	e7bb      	b.n	8023812 <mktime+0x28a>
 802389a:	bf00      	nop
 802389c:	08044814 	.word	0x08044814
 80238a0:	00015180 	.word	0x00015180
 80238a4:	2002f88c 	.word	0x2002f88c
 80238a8:	f240 126d 	movw	r2, #365	; 0x16d
 80238ac:	e7f1      	b.n	8023892 <mktime+0x30a>
 80238ae:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80238b2:	e7ee      	b.n	8023892 <mktime+0x30a>
 80238b4:	f04f 34ff 	mov.w	r4, #4294967295
 80238b8:	46a0      	mov	r8, r4
 80238ba:	e7c4      	b.n	8023846 <mktime+0x2be>

080238bc <_free_r>:
 80238bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80238be:	2900      	cmp	r1, #0
 80238c0:	d044      	beq.n	802394c <_free_r+0x90>
 80238c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80238c6:	9001      	str	r0, [sp, #4]
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	f1a1 0404 	sub.w	r4, r1, #4
 80238ce:	bfb8      	it	lt
 80238d0:	18e4      	addlt	r4, r4, r3
 80238d2:	f003 f9f1 	bl	8026cb8 <__malloc_lock>
 80238d6:	4a1e      	ldr	r2, [pc, #120]	; (8023950 <_free_r+0x94>)
 80238d8:	9801      	ldr	r0, [sp, #4]
 80238da:	6813      	ldr	r3, [r2, #0]
 80238dc:	b933      	cbnz	r3, 80238ec <_free_r+0x30>
 80238de:	6063      	str	r3, [r4, #4]
 80238e0:	6014      	str	r4, [r2, #0]
 80238e2:	b003      	add	sp, #12
 80238e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80238e8:	f003 b9ec 	b.w	8026cc4 <__malloc_unlock>
 80238ec:	42a3      	cmp	r3, r4
 80238ee:	d908      	bls.n	8023902 <_free_r+0x46>
 80238f0:	6825      	ldr	r5, [r4, #0]
 80238f2:	1961      	adds	r1, r4, r5
 80238f4:	428b      	cmp	r3, r1
 80238f6:	bf01      	itttt	eq
 80238f8:	6819      	ldreq	r1, [r3, #0]
 80238fa:	685b      	ldreq	r3, [r3, #4]
 80238fc:	1949      	addeq	r1, r1, r5
 80238fe:	6021      	streq	r1, [r4, #0]
 8023900:	e7ed      	b.n	80238de <_free_r+0x22>
 8023902:	461a      	mov	r2, r3
 8023904:	685b      	ldr	r3, [r3, #4]
 8023906:	b10b      	cbz	r3, 802390c <_free_r+0x50>
 8023908:	42a3      	cmp	r3, r4
 802390a:	d9fa      	bls.n	8023902 <_free_r+0x46>
 802390c:	6811      	ldr	r1, [r2, #0]
 802390e:	1855      	adds	r5, r2, r1
 8023910:	42a5      	cmp	r5, r4
 8023912:	d10b      	bne.n	802392c <_free_r+0x70>
 8023914:	6824      	ldr	r4, [r4, #0]
 8023916:	4421      	add	r1, r4
 8023918:	1854      	adds	r4, r2, r1
 802391a:	42a3      	cmp	r3, r4
 802391c:	6011      	str	r1, [r2, #0]
 802391e:	d1e0      	bne.n	80238e2 <_free_r+0x26>
 8023920:	681c      	ldr	r4, [r3, #0]
 8023922:	685b      	ldr	r3, [r3, #4]
 8023924:	6053      	str	r3, [r2, #4]
 8023926:	4421      	add	r1, r4
 8023928:	6011      	str	r1, [r2, #0]
 802392a:	e7da      	b.n	80238e2 <_free_r+0x26>
 802392c:	d902      	bls.n	8023934 <_free_r+0x78>
 802392e:	230c      	movs	r3, #12
 8023930:	6003      	str	r3, [r0, #0]
 8023932:	e7d6      	b.n	80238e2 <_free_r+0x26>
 8023934:	6825      	ldr	r5, [r4, #0]
 8023936:	1961      	adds	r1, r4, r5
 8023938:	428b      	cmp	r3, r1
 802393a:	bf04      	itt	eq
 802393c:	6819      	ldreq	r1, [r3, #0]
 802393e:	685b      	ldreq	r3, [r3, #4]
 8023940:	6063      	str	r3, [r4, #4]
 8023942:	bf04      	itt	eq
 8023944:	1949      	addeq	r1, r1, r5
 8023946:	6021      	streq	r1, [r4, #0]
 8023948:	6054      	str	r4, [r2, #4]
 802394a:	e7ca      	b.n	80238e2 <_free_r+0x26>
 802394c:	b003      	add	sp, #12
 802394e:	bd30      	pop	{r4, r5, pc}
 8023950:	2002f864 	.word	0x2002f864

08023954 <sbrk_aligned>:
 8023954:	b570      	push	{r4, r5, r6, lr}
 8023956:	4e0e      	ldr	r6, [pc, #56]	; (8023990 <sbrk_aligned+0x3c>)
 8023958:	460c      	mov	r4, r1
 802395a:	6831      	ldr	r1, [r6, #0]
 802395c:	4605      	mov	r5, r0
 802395e:	b911      	cbnz	r1, 8023966 <sbrk_aligned+0x12>
 8023960:	f000 fe76 	bl	8024650 <_sbrk_r>
 8023964:	6030      	str	r0, [r6, #0]
 8023966:	4621      	mov	r1, r4
 8023968:	4628      	mov	r0, r5
 802396a:	f000 fe71 	bl	8024650 <_sbrk_r>
 802396e:	1c43      	adds	r3, r0, #1
 8023970:	d00a      	beq.n	8023988 <sbrk_aligned+0x34>
 8023972:	1cc4      	adds	r4, r0, #3
 8023974:	f024 0403 	bic.w	r4, r4, #3
 8023978:	42a0      	cmp	r0, r4
 802397a:	d007      	beq.n	802398c <sbrk_aligned+0x38>
 802397c:	1a21      	subs	r1, r4, r0
 802397e:	4628      	mov	r0, r5
 8023980:	f000 fe66 	bl	8024650 <_sbrk_r>
 8023984:	3001      	adds	r0, #1
 8023986:	d101      	bne.n	802398c <sbrk_aligned+0x38>
 8023988:	f04f 34ff 	mov.w	r4, #4294967295
 802398c:	4620      	mov	r0, r4
 802398e:	bd70      	pop	{r4, r5, r6, pc}
 8023990:	2002f868 	.word	0x2002f868

08023994 <_malloc_r>:
 8023994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023998:	1ccd      	adds	r5, r1, #3
 802399a:	f025 0503 	bic.w	r5, r5, #3
 802399e:	3508      	adds	r5, #8
 80239a0:	2d0c      	cmp	r5, #12
 80239a2:	bf38      	it	cc
 80239a4:	250c      	movcc	r5, #12
 80239a6:	2d00      	cmp	r5, #0
 80239a8:	4607      	mov	r7, r0
 80239aa:	db01      	blt.n	80239b0 <_malloc_r+0x1c>
 80239ac:	42a9      	cmp	r1, r5
 80239ae:	d905      	bls.n	80239bc <_malloc_r+0x28>
 80239b0:	230c      	movs	r3, #12
 80239b2:	603b      	str	r3, [r7, #0]
 80239b4:	2600      	movs	r6, #0
 80239b6:	4630      	mov	r0, r6
 80239b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239bc:	4e2e      	ldr	r6, [pc, #184]	; (8023a78 <_malloc_r+0xe4>)
 80239be:	f003 f97b 	bl	8026cb8 <__malloc_lock>
 80239c2:	6833      	ldr	r3, [r6, #0]
 80239c4:	461c      	mov	r4, r3
 80239c6:	bb34      	cbnz	r4, 8023a16 <_malloc_r+0x82>
 80239c8:	4629      	mov	r1, r5
 80239ca:	4638      	mov	r0, r7
 80239cc:	f7ff ffc2 	bl	8023954 <sbrk_aligned>
 80239d0:	1c43      	adds	r3, r0, #1
 80239d2:	4604      	mov	r4, r0
 80239d4:	d14d      	bne.n	8023a72 <_malloc_r+0xde>
 80239d6:	6834      	ldr	r4, [r6, #0]
 80239d8:	4626      	mov	r6, r4
 80239da:	2e00      	cmp	r6, #0
 80239dc:	d140      	bne.n	8023a60 <_malloc_r+0xcc>
 80239de:	6823      	ldr	r3, [r4, #0]
 80239e0:	4631      	mov	r1, r6
 80239e2:	4638      	mov	r0, r7
 80239e4:	eb04 0803 	add.w	r8, r4, r3
 80239e8:	f000 fe32 	bl	8024650 <_sbrk_r>
 80239ec:	4580      	cmp	r8, r0
 80239ee:	d13a      	bne.n	8023a66 <_malloc_r+0xd2>
 80239f0:	6821      	ldr	r1, [r4, #0]
 80239f2:	3503      	adds	r5, #3
 80239f4:	1a6d      	subs	r5, r5, r1
 80239f6:	f025 0503 	bic.w	r5, r5, #3
 80239fa:	3508      	adds	r5, #8
 80239fc:	2d0c      	cmp	r5, #12
 80239fe:	bf38      	it	cc
 8023a00:	250c      	movcc	r5, #12
 8023a02:	4629      	mov	r1, r5
 8023a04:	4638      	mov	r0, r7
 8023a06:	f7ff ffa5 	bl	8023954 <sbrk_aligned>
 8023a0a:	3001      	adds	r0, #1
 8023a0c:	d02b      	beq.n	8023a66 <_malloc_r+0xd2>
 8023a0e:	6823      	ldr	r3, [r4, #0]
 8023a10:	442b      	add	r3, r5
 8023a12:	6023      	str	r3, [r4, #0]
 8023a14:	e00e      	b.n	8023a34 <_malloc_r+0xa0>
 8023a16:	6822      	ldr	r2, [r4, #0]
 8023a18:	1b52      	subs	r2, r2, r5
 8023a1a:	d41e      	bmi.n	8023a5a <_malloc_r+0xc6>
 8023a1c:	2a0b      	cmp	r2, #11
 8023a1e:	d916      	bls.n	8023a4e <_malloc_r+0xba>
 8023a20:	1961      	adds	r1, r4, r5
 8023a22:	42a3      	cmp	r3, r4
 8023a24:	6025      	str	r5, [r4, #0]
 8023a26:	bf18      	it	ne
 8023a28:	6059      	strne	r1, [r3, #4]
 8023a2a:	6863      	ldr	r3, [r4, #4]
 8023a2c:	bf08      	it	eq
 8023a2e:	6031      	streq	r1, [r6, #0]
 8023a30:	5162      	str	r2, [r4, r5]
 8023a32:	604b      	str	r3, [r1, #4]
 8023a34:	4638      	mov	r0, r7
 8023a36:	f104 060b 	add.w	r6, r4, #11
 8023a3a:	f003 f943 	bl	8026cc4 <__malloc_unlock>
 8023a3e:	f026 0607 	bic.w	r6, r6, #7
 8023a42:	1d23      	adds	r3, r4, #4
 8023a44:	1af2      	subs	r2, r6, r3
 8023a46:	d0b6      	beq.n	80239b6 <_malloc_r+0x22>
 8023a48:	1b9b      	subs	r3, r3, r6
 8023a4a:	50a3      	str	r3, [r4, r2]
 8023a4c:	e7b3      	b.n	80239b6 <_malloc_r+0x22>
 8023a4e:	6862      	ldr	r2, [r4, #4]
 8023a50:	42a3      	cmp	r3, r4
 8023a52:	bf0c      	ite	eq
 8023a54:	6032      	streq	r2, [r6, #0]
 8023a56:	605a      	strne	r2, [r3, #4]
 8023a58:	e7ec      	b.n	8023a34 <_malloc_r+0xa0>
 8023a5a:	4623      	mov	r3, r4
 8023a5c:	6864      	ldr	r4, [r4, #4]
 8023a5e:	e7b2      	b.n	80239c6 <_malloc_r+0x32>
 8023a60:	4634      	mov	r4, r6
 8023a62:	6876      	ldr	r6, [r6, #4]
 8023a64:	e7b9      	b.n	80239da <_malloc_r+0x46>
 8023a66:	230c      	movs	r3, #12
 8023a68:	603b      	str	r3, [r7, #0]
 8023a6a:	4638      	mov	r0, r7
 8023a6c:	f003 f92a 	bl	8026cc4 <__malloc_unlock>
 8023a70:	e7a1      	b.n	80239b6 <_malloc_r+0x22>
 8023a72:	6025      	str	r5, [r4, #0]
 8023a74:	e7de      	b.n	8023a34 <_malloc_r+0xa0>
 8023a76:	bf00      	nop
 8023a78:	2002f864 	.word	0x2002f864

08023a7c <__cvt>:
 8023a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a7e:	ed2d 8b02 	vpush	{d8}
 8023a82:	eeb0 8b40 	vmov.f64	d8, d0
 8023a86:	b085      	sub	sp, #20
 8023a88:	4617      	mov	r7, r2
 8023a8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023a8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023a8e:	ee18 2a90 	vmov	r2, s17
 8023a92:	f025 0520 	bic.w	r5, r5, #32
 8023a96:	2a00      	cmp	r2, #0
 8023a98:	bfb6      	itet	lt
 8023a9a:	222d      	movlt	r2, #45	; 0x2d
 8023a9c:	2200      	movge	r2, #0
 8023a9e:	eeb1 8b40 	vneglt.f64	d8, d0
 8023aa2:	2d46      	cmp	r5, #70	; 0x46
 8023aa4:	460c      	mov	r4, r1
 8023aa6:	701a      	strb	r2, [r3, #0]
 8023aa8:	d004      	beq.n	8023ab4 <__cvt+0x38>
 8023aaa:	2d45      	cmp	r5, #69	; 0x45
 8023aac:	d100      	bne.n	8023ab0 <__cvt+0x34>
 8023aae:	3401      	adds	r4, #1
 8023ab0:	2102      	movs	r1, #2
 8023ab2:	e000      	b.n	8023ab6 <__cvt+0x3a>
 8023ab4:	2103      	movs	r1, #3
 8023ab6:	ab03      	add	r3, sp, #12
 8023ab8:	9301      	str	r3, [sp, #4]
 8023aba:	ab02      	add	r3, sp, #8
 8023abc:	9300      	str	r3, [sp, #0]
 8023abe:	4622      	mov	r2, r4
 8023ac0:	4633      	mov	r3, r6
 8023ac2:	eeb0 0b48 	vmov.f64	d0, d8
 8023ac6:	f002 f93b 	bl	8025d40 <_dtoa_r>
 8023aca:	2d47      	cmp	r5, #71	; 0x47
 8023acc:	d101      	bne.n	8023ad2 <__cvt+0x56>
 8023ace:	07fb      	lsls	r3, r7, #31
 8023ad0:	d51a      	bpl.n	8023b08 <__cvt+0x8c>
 8023ad2:	2d46      	cmp	r5, #70	; 0x46
 8023ad4:	eb00 0204 	add.w	r2, r0, r4
 8023ad8:	d10c      	bne.n	8023af4 <__cvt+0x78>
 8023ada:	7803      	ldrb	r3, [r0, #0]
 8023adc:	2b30      	cmp	r3, #48	; 0x30
 8023ade:	d107      	bne.n	8023af0 <__cvt+0x74>
 8023ae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ae8:	bf1c      	itt	ne
 8023aea:	f1c4 0401 	rsbne	r4, r4, #1
 8023aee:	6034      	strne	r4, [r6, #0]
 8023af0:	6833      	ldr	r3, [r6, #0]
 8023af2:	441a      	add	r2, r3
 8023af4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8023af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023afc:	bf08      	it	eq
 8023afe:	9203      	streq	r2, [sp, #12]
 8023b00:	2130      	movs	r1, #48	; 0x30
 8023b02:	9b03      	ldr	r3, [sp, #12]
 8023b04:	4293      	cmp	r3, r2
 8023b06:	d307      	bcc.n	8023b18 <__cvt+0x9c>
 8023b08:	9b03      	ldr	r3, [sp, #12]
 8023b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b0c:	1a1b      	subs	r3, r3, r0
 8023b0e:	6013      	str	r3, [r2, #0]
 8023b10:	b005      	add	sp, #20
 8023b12:	ecbd 8b02 	vpop	{d8}
 8023b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b18:	1c5c      	adds	r4, r3, #1
 8023b1a:	9403      	str	r4, [sp, #12]
 8023b1c:	7019      	strb	r1, [r3, #0]
 8023b1e:	e7f0      	b.n	8023b02 <__cvt+0x86>

08023b20 <__exponent>:
 8023b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023b22:	4603      	mov	r3, r0
 8023b24:	2900      	cmp	r1, #0
 8023b26:	bfb8      	it	lt
 8023b28:	4249      	neglt	r1, r1
 8023b2a:	f803 2b02 	strb.w	r2, [r3], #2
 8023b2e:	bfb4      	ite	lt
 8023b30:	222d      	movlt	r2, #45	; 0x2d
 8023b32:	222b      	movge	r2, #43	; 0x2b
 8023b34:	2909      	cmp	r1, #9
 8023b36:	7042      	strb	r2, [r0, #1]
 8023b38:	dd2a      	ble.n	8023b90 <__exponent+0x70>
 8023b3a:	f10d 0407 	add.w	r4, sp, #7
 8023b3e:	46a4      	mov	ip, r4
 8023b40:	270a      	movs	r7, #10
 8023b42:	46a6      	mov	lr, r4
 8023b44:	460a      	mov	r2, r1
 8023b46:	fb91 f6f7 	sdiv	r6, r1, r7
 8023b4a:	fb07 1516 	mls	r5, r7, r6, r1
 8023b4e:	3530      	adds	r5, #48	; 0x30
 8023b50:	2a63      	cmp	r2, #99	; 0x63
 8023b52:	f104 34ff 	add.w	r4, r4, #4294967295
 8023b56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023b5a:	4631      	mov	r1, r6
 8023b5c:	dcf1      	bgt.n	8023b42 <__exponent+0x22>
 8023b5e:	3130      	adds	r1, #48	; 0x30
 8023b60:	f1ae 0502 	sub.w	r5, lr, #2
 8023b64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023b68:	1c44      	adds	r4, r0, #1
 8023b6a:	4629      	mov	r1, r5
 8023b6c:	4561      	cmp	r1, ip
 8023b6e:	d30a      	bcc.n	8023b86 <__exponent+0x66>
 8023b70:	f10d 0209 	add.w	r2, sp, #9
 8023b74:	eba2 020e 	sub.w	r2, r2, lr
 8023b78:	4565      	cmp	r5, ip
 8023b7a:	bf88      	it	hi
 8023b7c:	2200      	movhi	r2, #0
 8023b7e:	4413      	add	r3, r2
 8023b80:	1a18      	subs	r0, r3, r0
 8023b82:	b003      	add	sp, #12
 8023b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023b8e:	e7ed      	b.n	8023b6c <__exponent+0x4c>
 8023b90:	2330      	movs	r3, #48	; 0x30
 8023b92:	3130      	adds	r1, #48	; 0x30
 8023b94:	7083      	strb	r3, [r0, #2]
 8023b96:	70c1      	strb	r1, [r0, #3]
 8023b98:	1d03      	adds	r3, r0, #4
 8023b9a:	e7f1      	b.n	8023b80 <__exponent+0x60>
 8023b9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08023ba0 <_printf_float>:
 8023ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ba4:	b08b      	sub	sp, #44	; 0x2c
 8023ba6:	460c      	mov	r4, r1
 8023ba8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8023bac:	4616      	mov	r6, r2
 8023bae:	461f      	mov	r7, r3
 8023bb0:	4605      	mov	r5, r0
 8023bb2:	f003 f805 	bl	8026bc0 <_localeconv_r>
 8023bb6:	f8d0 b000 	ldr.w	fp, [r0]
 8023bba:	4658      	mov	r0, fp
 8023bbc:	f7dc fb4a 	bl	8000254 <strlen>
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	9308      	str	r3, [sp, #32]
 8023bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8023bc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8023bcc:	6822      	ldr	r2, [r4, #0]
 8023bce:	3307      	adds	r3, #7
 8023bd0:	f023 0307 	bic.w	r3, r3, #7
 8023bd4:	f103 0108 	add.w	r1, r3, #8
 8023bd8:	f8c8 1000 	str.w	r1, [r8]
 8023bdc:	4682      	mov	sl, r0
 8023bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023be2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8023be6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8023e48 <_printf_float+0x2a8>
 8023bea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8023bee:	eeb0 6bc0 	vabs.f64	d6, d0
 8023bf2:	eeb4 6b47 	vcmp.f64	d6, d7
 8023bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bfa:	dd24      	ble.n	8023c46 <_printf_float+0xa6>
 8023bfc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c04:	d502      	bpl.n	8023c0c <_printf_float+0x6c>
 8023c06:	232d      	movs	r3, #45	; 0x2d
 8023c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023c0c:	4b90      	ldr	r3, [pc, #576]	; (8023e50 <_printf_float+0x2b0>)
 8023c0e:	4891      	ldr	r0, [pc, #580]	; (8023e54 <_printf_float+0x2b4>)
 8023c10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8023c14:	bf94      	ite	ls
 8023c16:	4698      	movls	r8, r3
 8023c18:	4680      	movhi	r8, r0
 8023c1a:	2303      	movs	r3, #3
 8023c1c:	6123      	str	r3, [r4, #16]
 8023c1e:	f022 0204 	bic.w	r2, r2, #4
 8023c22:	2300      	movs	r3, #0
 8023c24:	6022      	str	r2, [r4, #0]
 8023c26:	9304      	str	r3, [sp, #16]
 8023c28:	9700      	str	r7, [sp, #0]
 8023c2a:	4633      	mov	r3, r6
 8023c2c:	aa09      	add	r2, sp, #36	; 0x24
 8023c2e:	4621      	mov	r1, r4
 8023c30:	4628      	mov	r0, r5
 8023c32:	f000 f9d3 	bl	8023fdc <_printf_common>
 8023c36:	3001      	adds	r0, #1
 8023c38:	f040 808a 	bne.w	8023d50 <_printf_float+0x1b0>
 8023c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8023c40:	b00b      	add	sp, #44	; 0x2c
 8023c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c46:	eeb4 0b40 	vcmp.f64	d0, d0
 8023c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c4e:	d709      	bvc.n	8023c64 <_printf_float+0xc4>
 8023c50:	ee10 3a90 	vmov	r3, s1
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	bfbc      	itt	lt
 8023c58:	232d      	movlt	r3, #45	; 0x2d
 8023c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023c5e:	487e      	ldr	r0, [pc, #504]	; (8023e58 <_printf_float+0x2b8>)
 8023c60:	4b7e      	ldr	r3, [pc, #504]	; (8023e5c <_printf_float+0x2bc>)
 8023c62:	e7d5      	b.n	8023c10 <_printf_float+0x70>
 8023c64:	6863      	ldr	r3, [r4, #4]
 8023c66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8023c6a:	9104      	str	r1, [sp, #16]
 8023c6c:	1c59      	adds	r1, r3, #1
 8023c6e:	d13c      	bne.n	8023cea <_printf_float+0x14a>
 8023c70:	2306      	movs	r3, #6
 8023c72:	6063      	str	r3, [r4, #4]
 8023c74:	2300      	movs	r3, #0
 8023c76:	9303      	str	r3, [sp, #12]
 8023c78:	ab08      	add	r3, sp, #32
 8023c7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8023c82:	ab07      	add	r3, sp, #28
 8023c84:	6861      	ldr	r1, [r4, #4]
 8023c86:	9300      	str	r3, [sp, #0]
 8023c88:	6022      	str	r2, [r4, #0]
 8023c8a:	f10d 031b 	add.w	r3, sp, #27
 8023c8e:	4628      	mov	r0, r5
 8023c90:	f7ff fef4 	bl	8023a7c <__cvt>
 8023c94:	9b04      	ldr	r3, [sp, #16]
 8023c96:	9907      	ldr	r1, [sp, #28]
 8023c98:	2b47      	cmp	r3, #71	; 0x47
 8023c9a:	4680      	mov	r8, r0
 8023c9c:	d108      	bne.n	8023cb0 <_printf_float+0x110>
 8023c9e:	1cc8      	adds	r0, r1, #3
 8023ca0:	db02      	blt.n	8023ca8 <_printf_float+0x108>
 8023ca2:	6863      	ldr	r3, [r4, #4]
 8023ca4:	4299      	cmp	r1, r3
 8023ca6:	dd41      	ble.n	8023d2c <_printf_float+0x18c>
 8023ca8:	f1a9 0902 	sub.w	r9, r9, #2
 8023cac:	fa5f f989 	uxtb.w	r9, r9
 8023cb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8023cb4:	d820      	bhi.n	8023cf8 <_printf_float+0x158>
 8023cb6:	3901      	subs	r1, #1
 8023cb8:	464a      	mov	r2, r9
 8023cba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023cbe:	9107      	str	r1, [sp, #28]
 8023cc0:	f7ff ff2e 	bl	8023b20 <__exponent>
 8023cc4:	9a08      	ldr	r2, [sp, #32]
 8023cc6:	9004      	str	r0, [sp, #16]
 8023cc8:	1813      	adds	r3, r2, r0
 8023cca:	2a01      	cmp	r2, #1
 8023ccc:	6123      	str	r3, [r4, #16]
 8023cce:	dc02      	bgt.n	8023cd6 <_printf_float+0x136>
 8023cd0:	6822      	ldr	r2, [r4, #0]
 8023cd2:	07d2      	lsls	r2, r2, #31
 8023cd4:	d501      	bpl.n	8023cda <_printf_float+0x13a>
 8023cd6:	3301      	adds	r3, #1
 8023cd8:	6123      	str	r3, [r4, #16]
 8023cda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	d0a2      	beq.n	8023c28 <_printf_float+0x88>
 8023ce2:	232d      	movs	r3, #45	; 0x2d
 8023ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023ce8:	e79e      	b.n	8023c28 <_printf_float+0x88>
 8023cea:	9904      	ldr	r1, [sp, #16]
 8023cec:	2947      	cmp	r1, #71	; 0x47
 8023cee:	d1c1      	bne.n	8023c74 <_printf_float+0xd4>
 8023cf0:	2b00      	cmp	r3, #0
 8023cf2:	d1bf      	bne.n	8023c74 <_printf_float+0xd4>
 8023cf4:	2301      	movs	r3, #1
 8023cf6:	e7bc      	b.n	8023c72 <_printf_float+0xd2>
 8023cf8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8023cfc:	d118      	bne.n	8023d30 <_printf_float+0x190>
 8023cfe:	2900      	cmp	r1, #0
 8023d00:	6863      	ldr	r3, [r4, #4]
 8023d02:	dd0b      	ble.n	8023d1c <_printf_float+0x17c>
 8023d04:	6121      	str	r1, [r4, #16]
 8023d06:	b913      	cbnz	r3, 8023d0e <_printf_float+0x16e>
 8023d08:	6822      	ldr	r2, [r4, #0]
 8023d0a:	07d0      	lsls	r0, r2, #31
 8023d0c:	d502      	bpl.n	8023d14 <_printf_float+0x174>
 8023d0e:	3301      	adds	r3, #1
 8023d10:	440b      	add	r3, r1
 8023d12:	6123      	str	r3, [r4, #16]
 8023d14:	2300      	movs	r3, #0
 8023d16:	65a1      	str	r1, [r4, #88]	; 0x58
 8023d18:	9304      	str	r3, [sp, #16]
 8023d1a:	e7de      	b.n	8023cda <_printf_float+0x13a>
 8023d1c:	b913      	cbnz	r3, 8023d24 <_printf_float+0x184>
 8023d1e:	6822      	ldr	r2, [r4, #0]
 8023d20:	07d2      	lsls	r2, r2, #31
 8023d22:	d501      	bpl.n	8023d28 <_printf_float+0x188>
 8023d24:	3302      	adds	r3, #2
 8023d26:	e7f4      	b.n	8023d12 <_printf_float+0x172>
 8023d28:	2301      	movs	r3, #1
 8023d2a:	e7f2      	b.n	8023d12 <_printf_float+0x172>
 8023d2c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8023d30:	9b08      	ldr	r3, [sp, #32]
 8023d32:	4299      	cmp	r1, r3
 8023d34:	db05      	blt.n	8023d42 <_printf_float+0x1a2>
 8023d36:	6823      	ldr	r3, [r4, #0]
 8023d38:	6121      	str	r1, [r4, #16]
 8023d3a:	07d8      	lsls	r0, r3, #31
 8023d3c:	d5ea      	bpl.n	8023d14 <_printf_float+0x174>
 8023d3e:	1c4b      	adds	r3, r1, #1
 8023d40:	e7e7      	b.n	8023d12 <_printf_float+0x172>
 8023d42:	2900      	cmp	r1, #0
 8023d44:	bfd4      	ite	le
 8023d46:	f1c1 0202 	rsble	r2, r1, #2
 8023d4a:	2201      	movgt	r2, #1
 8023d4c:	4413      	add	r3, r2
 8023d4e:	e7e0      	b.n	8023d12 <_printf_float+0x172>
 8023d50:	6823      	ldr	r3, [r4, #0]
 8023d52:	055a      	lsls	r2, r3, #21
 8023d54:	d407      	bmi.n	8023d66 <_printf_float+0x1c6>
 8023d56:	6923      	ldr	r3, [r4, #16]
 8023d58:	4642      	mov	r2, r8
 8023d5a:	4631      	mov	r1, r6
 8023d5c:	4628      	mov	r0, r5
 8023d5e:	47b8      	blx	r7
 8023d60:	3001      	adds	r0, #1
 8023d62:	d12a      	bne.n	8023dba <_printf_float+0x21a>
 8023d64:	e76a      	b.n	8023c3c <_printf_float+0x9c>
 8023d66:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8023d6a:	f240 80e2 	bls.w	8023f32 <_printf_float+0x392>
 8023d6e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8023d72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d7a:	d133      	bne.n	8023de4 <_printf_float+0x244>
 8023d7c:	4a38      	ldr	r2, [pc, #224]	; (8023e60 <_printf_float+0x2c0>)
 8023d7e:	2301      	movs	r3, #1
 8023d80:	4631      	mov	r1, r6
 8023d82:	4628      	mov	r0, r5
 8023d84:	47b8      	blx	r7
 8023d86:	3001      	adds	r0, #1
 8023d88:	f43f af58 	beq.w	8023c3c <_printf_float+0x9c>
 8023d8c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023d90:	429a      	cmp	r2, r3
 8023d92:	db02      	blt.n	8023d9a <_printf_float+0x1fa>
 8023d94:	6823      	ldr	r3, [r4, #0]
 8023d96:	07d8      	lsls	r0, r3, #31
 8023d98:	d50f      	bpl.n	8023dba <_printf_float+0x21a>
 8023d9a:	4653      	mov	r3, sl
 8023d9c:	465a      	mov	r2, fp
 8023d9e:	4631      	mov	r1, r6
 8023da0:	4628      	mov	r0, r5
 8023da2:	47b8      	blx	r7
 8023da4:	3001      	adds	r0, #1
 8023da6:	f43f af49 	beq.w	8023c3c <_printf_float+0x9c>
 8023daa:	f04f 0800 	mov.w	r8, #0
 8023dae:	f104 091a 	add.w	r9, r4, #26
 8023db2:	9b08      	ldr	r3, [sp, #32]
 8023db4:	3b01      	subs	r3, #1
 8023db6:	4543      	cmp	r3, r8
 8023db8:	dc09      	bgt.n	8023dce <_printf_float+0x22e>
 8023dba:	6823      	ldr	r3, [r4, #0]
 8023dbc:	079b      	lsls	r3, r3, #30
 8023dbe:	f100 8108 	bmi.w	8023fd2 <_printf_float+0x432>
 8023dc2:	68e0      	ldr	r0, [r4, #12]
 8023dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dc6:	4298      	cmp	r0, r3
 8023dc8:	bfb8      	it	lt
 8023dca:	4618      	movlt	r0, r3
 8023dcc:	e738      	b.n	8023c40 <_printf_float+0xa0>
 8023dce:	2301      	movs	r3, #1
 8023dd0:	464a      	mov	r2, r9
 8023dd2:	4631      	mov	r1, r6
 8023dd4:	4628      	mov	r0, r5
 8023dd6:	47b8      	blx	r7
 8023dd8:	3001      	adds	r0, #1
 8023dda:	f43f af2f 	beq.w	8023c3c <_printf_float+0x9c>
 8023dde:	f108 0801 	add.w	r8, r8, #1
 8023de2:	e7e6      	b.n	8023db2 <_printf_float+0x212>
 8023de4:	9b07      	ldr	r3, [sp, #28]
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	dc3c      	bgt.n	8023e64 <_printf_float+0x2c4>
 8023dea:	4a1d      	ldr	r2, [pc, #116]	; (8023e60 <_printf_float+0x2c0>)
 8023dec:	2301      	movs	r3, #1
 8023dee:	4631      	mov	r1, r6
 8023df0:	4628      	mov	r0, r5
 8023df2:	47b8      	blx	r7
 8023df4:	3001      	adds	r0, #1
 8023df6:	f43f af21 	beq.w	8023c3c <_printf_float+0x9c>
 8023dfa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023dfe:	4313      	orrs	r3, r2
 8023e00:	d102      	bne.n	8023e08 <_printf_float+0x268>
 8023e02:	6823      	ldr	r3, [r4, #0]
 8023e04:	07d9      	lsls	r1, r3, #31
 8023e06:	d5d8      	bpl.n	8023dba <_printf_float+0x21a>
 8023e08:	4653      	mov	r3, sl
 8023e0a:	465a      	mov	r2, fp
 8023e0c:	4631      	mov	r1, r6
 8023e0e:	4628      	mov	r0, r5
 8023e10:	47b8      	blx	r7
 8023e12:	3001      	adds	r0, #1
 8023e14:	f43f af12 	beq.w	8023c3c <_printf_float+0x9c>
 8023e18:	f04f 0900 	mov.w	r9, #0
 8023e1c:	f104 0a1a 	add.w	sl, r4, #26
 8023e20:	9b07      	ldr	r3, [sp, #28]
 8023e22:	425b      	negs	r3, r3
 8023e24:	454b      	cmp	r3, r9
 8023e26:	dc01      	bgt.n	8023e2c <_printf_float+0x28c>
 8023e28:	9b08      	ldr	r3, [sp, #32]
 8023e2a:	e795      	b.n	8023d58 <_printf_float+0x1b8>
 8023e2c:	2301      	movs	r3, #1
 8023e2e:	4652      	mov	r2, sl
 8023e30:	4631      	mov	r1, r6
 8023e32:	4628      	mov	r0, r5
 8023e34:	47b8      	blx	r7
 8023e36:	3001      	adds	r0, #1
 8023e38:	f43f af00 	beq.w	8023c3c <_printf_float+0x9c>
 8023e3c:	f109 0901 	add.w	r9, r9, #1
 8023e40:	e7ee      	b.n	8023e20 <_printf_float+0x280>
 8023e42:	bf00      	nop
 8023e44:	f3af 8000 	nop.w
 8023e48:	ffffffff 	.word	0xffffffff
 8023e4c:	7fefffff 	.word	0x7fefffff
 8023e50:	080448a4 	.word	0x080448a4
 8023e54:	080448a8 	.word	0x080448a8
 8023e58:	080448b0 	.word	0x080448b0
 8023e5c:	080448ac 	.word	0x080448ac
 8023e60:	08044ec9 	.word	0x08044ec9
 8023e64:	9a08      	ldr	r2, [sp, #32]
 8023e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023e68:	429a      	cmp	r2, r3
 8023e6a:	bfa8      	it	ge
 8023e6c:	461a      	movge	r2, r3
 8023e6e:	2a00      	cmp	r2, #0
 8023e70:	4691      	mov	r9, r2
 8023e72:	dc38      	bgt.n	8023ee6 <_printf_float+0x346>
 8023e74:	2300      	movs	r3, #0
 8023e76:	9305      	str	r3, [sp, #20]
 8023e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023e7c:	f104 021a 	add.w	r2, r4, #26
 8023e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023e82:	9905      	ldr	r1, [sp, #20]
 8023e84:	9304      	str	r3, [sp, #16]
 8023e86:	eba3 0309 	sub.w	r3, r3, r9
 8023e8a:	428b      	cmp	r3, r1
 8023e8c:	dc33      	bgt.n	8023ef6 <_printf_float+0x356>
 8023e8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023e92:	429a      	cmp	r2, r3
 8023e94:	db3c      	blt.n	8023f10 <_printf_float+0x370>
 8023e96:	6823      	ldr	r3, [r4, #0]
 8023e98:	07da      	lsls	r2, r3, #31
 8023e9a:	d439      	bmi.n	8023f10 <_printf_float+0x370>
 8023e9c:	9b08      	ldr	r3, [sp, #32]
 8023e9e:	9a04      	ldr	r2, [sp, #16]
 8023ea0:	9907      	ldr	r1, [sp, #28]
 8023ea2:	1a9a      	subs	r2, r3, r2
 8023ea4:	eba3 0901 	sub.w	r9, r3, r1
 8023ea8:	4591      	cmp	r9, r2
 8023eaa:	bfa8      	it	ge
 8023eac:	4691      	movge	r9, r2
 8023eae:	f1b9 0f00 	cmp.w	r9, #0
 8023eb2:	dc35      	bgt.n	8023f20 <_printf_float+0x380>
 8023eb4:	f04f 0800 	mov.w	r8, #0
 8023eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023ebc:	f104 0a1a 	add.w	sl, r4, #26
 8023ec0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8023ec4:	1a9b      	subs	r3, r3, r2
 8023ec6:	eba3 0309 	sub.w	r3, r3, r9
 8023eca:	4543      	cmp	r3, r8
 8023ecc:	f77f af75 	ble.w	8023dba <_printf_float+0x21a>
 8023ed0:	2301      	movs	r3, #1
 8023ed2:	4652      	mov	r2, sl
 8023ed4:	4631      	mov	r1, r6
 8023ed6:	4628      	mov	r0, r5
 8023ed8:	47b8      	blx	r7
 8023eda:	3001      	adds	r0, #1
 8023edc:	f43f aeae 	beq.w	8023c3c <_printf_float+0x9c>
 8023ee0:	f108 0801 	add.w	r8, r8, #1
 8023ee4:	e7ec      	b.n	8023ec0 <_printf_float+0x320>
 8023ee6:	4613      	mov	r3, r2
 8023ee8:	4631      	mov	r1, r6
 8023eea:	4642      	mov	r2, r8
 8023eec:	4628      	mov	r0, r5
 8023eee:	47b8      	blx	r7
 8023ef0:	3001      	adds	r0, #1
 8023ef2:	d1bf      	bne.n	8023e74 <_printf_float+0x2d4>
 8023ef4:	e6a2      	b.n	8023c3c <_printf_float+0x9c>
 8023ef6:	2301      	movs	r3, #1
 8023ef8:	4631      	mov	r1, r6
 8023efa:	4628      	mov	r0, r5
 8023efc:	9204      	str	r2, [sp, #16]
 8023efe:	47b8      	blx	r7
 8023f00:	3001      	adds	r0, #1
 8023f02:	f43f ae9b 	beq.w	8023c3c <_printf_float+0x9c>
 8023f06:	9b05      	ldr	r3, [sp, #20]
 8023f08:	9a04      	ldr	r2, [sp, #16]
 8023f0a:	3301      	adds	r3, #1
 8023f0c:	9305      	str	r3, [sp, #20]
 8023f0e:	e7b7      	b.n	8023e80 <_printf_float+0x2e0>
 8023f10:	4653      	mov	r3, sl
 8023f12:	465a      	mov	r2, fp
 8023f14:	4631      	mov	r1, r6
 8023f16:	4628      	mov	r0, r5
 8023f18:	47b8      	blx	r7
 8023f1a:	3001      	adds	r0, #1
 8023f1c:	d1be      	bne.n	8023e9c <_printf_float+0x2fc>
 8023f1e:	e68d      	b.n	8023c3c <_printf_float+0x9c>
 8023f20:	9a04      	ldr	r2, [sp, #16]
 8023f22:	464b      	mov	r3, r9
 8023f24:	4442      	add	r2, r8
 8023f26:	4631      	mov	r1, r6
 8023f28:	4628      	mov	r0, r5
 8023f2a:	47b8      	blx	r7
 8023f2c:	3001      	adds	r0, #1
 8023f2e:	d1c1      	bne.n	8023eb4 <_printf_float+0x314>
 8023f30:	e684      	b.n	8023c3c <_printf_float+0x9c>
 8023f32:	9a08      	ldr	r2, [sp, #32]
 8023f34:	2a01      	cmp	r2, #1
 8023f36:	dc01      	bgt.n	8023f3c <_printf_float+0x39c>
 8023f38:	07db      	lsls	r3, r3, #31
 8023f3a:	d537      	bpl.n	8023fac <_printf_float+0x40c>
 8023f3c:	2301      	movs	r3, #1
 8023f3e:	4642      	mov	r2, r8
 8023f40:	4631      	mov	r1, r6
 8023f42:	4628      	mov	r0, r5
 8023f44:	47b8      	blx	r7
 8023f46:	3001      	adds	r0, #1
 8023f48:	f43f ae78 	beq.w	8023c3c <_printf_float+0x9c>
 8023f4c:	4653      	mov	r3, sl
 8023f4e:	465a      	mov	r2, fp
 8023f50:	4631      	mov	r1, r6
 8023f52:	4628      	mov	r0, r5
 8023f54:	47b8      	blx	r7
 8023f56:	3001      	adds	r0, #1
 8023f58:	f43f ae70 	beq.w	8023c3c <_printf_float+0x9c>
 8023f5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8023f60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f68:	d01b      	beq.n	8023fa2 <_printf_float+0x402>
 8023f6a:	9b08      	ldr	r3, [sp, #32]
 8023f6c:	f108 0201 	add.w	r2, r8, #1
 8023f70:	3b01      	subs	r3, #1
 8023f72:	4631      	mov	r1, r6
 8023f74:	4628      	mov	r0, r5
 8023f76:	47b8      	blx	r7
 8023f78:	3001      	adds	r0, #1
 8023f7a:	d10e      	bne.n	8023f9a <_printf_float+0x3fa>
 8023f7c:	e65e      	b.n	8023c3c <_printf_float+0x9c>
 8023f7e:	2301      	movs	r3, #1
 8023f80:	464a      	mov	r2, r9
 8023f82:	4631      	mov	r1, r6
 8023f84:	4628      	mov	r0, r5
 8023f86:	47b8      	blx	r7
 8023f88:	3001      	adds	r0, #1
 8023f8a:	f43f ae57 	beq.w	8023c3c <_printf_float+0x9c>
 8023f8e:	f108 0801 	add.w	r8, r8, #1
 8023f92:	9b08      	ldr	r3, [sp, #32]
 8023f94:	3b01      	subs	r3, #1
 8023f96:	4543      	cmp	r3, r8
 8023f98:	dcf1      	bgt.n	8023f7e <_printf_float+0x3de>
 8023f9a:	9b04      	ldr	r3, [sp, #16]
 8023f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023fa0:	e6db      	b.n	8023d5a <_printf_float+0x1ba>
 8023fa2:	f04f 0800 	mov.w	r8, #0
 8023fa6:	f104 091a 	add.w	r9, r4, #26
 8023faa:	e7f2      	b.n	8023f92 <_printf_float+0x3f2>
 8023fac:	2301      	movs	r3, #1
 8023fae:	4642      	mov	r2, r8
 8023fb0:	e7df      	b.n	8023f72 <_printf_float+0x3d2>
 8023fb2:	2301      	movs	r3, #1
 8023fb4:	464a      	mov	r2, r9
 8023fb6:	4631      	mov	r1, r6
 8023fb8:	4628      	mov	r0, r5
 8023fba:	47b8      	blx	r7
 8023fbc:	3001      	adds	r0, #1
 8023fbe:	f43f ae3d 	beq.w	8023c3c <_printf_float+0x9c>
 8023fc2:	f108 0801 	add.w	r8, r8, #1
 8023fc6:	68e3      	ldr	r3, [r4, #12]
 8023fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fca:	1a5b      	subs	r3, r3, r1
 8023fcc:	4543      	cmp	r3, r8
 8023fce:	dcf0      	bgt.n	8023fb2 <_printf_float+0x412>
 8023fd0:	e6f7      	b.n	8023dc2 <_printf_float+0x222>
 8023fd2:	f04f 0800 	mov.w	r8, #0
 8023fd6:	f104 0919 	add.w	r9, r4, #25
 8023fda:	e7f4      	b.n	8023fc6 <_printf_float+0x426>

08023fdc <_printf_common>:
 8023fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023fe0:	4616      	mov	r6, r2
 8023fe2:	4699      	mov	r9, r3
 8023fe4:	688a      	ldr	r2, [r1, #8]
 8023fe6:	690b      	ldr	r3, [r1, #16]
 8023fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023fec:	4293      	cmp	r3, r2
 8023fee:	bfb8      	it	lt
 8023ff0:	4613      	movlt	r3, r2
 8023ff2:	6033      	str	r3, [r6, #0]
 8023ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023ff8:	4607      	mov	r7, r0
 8023ffa:	460c      	mov	r4, r1
 8023ffc:	b10a      	cbz	r2, 8024002 <_printf_common+0x26>
 8023ffe:	3301      	adds	r3, #1
 8024000:	6033      	str	r3, [r6, #0]
 8024002:	6823      	ldr	r3, [r4, #0]
 8024004:	0699      	lsls	r1, r3, #26
 8024006:	bf42      	ittt	mi
 8024008:	6833      	ldrmi	r3, [r6, #0]
 802400a:	3302      	addmi	r3, #2
 802400c:	6033      	strmi	r3, [r6, #0]
 802400e:	6825      	ldr	r5, [r4, #0]
 8024010:	f015 0506 	ands.w	r5, r5, #6
 8024014:	d106      	bne.n	8024024 <_printf_common+0x48>
 8024016:	f104 0a19 	add.w	sl, r4, #25
 802401a:	68e3      	ldr	r3, [r4, #12]
 802401c:	6832      	ldr	r2, [r6, #0]
 802401e:	1a9b      	subs	r3, r3, r2
 8024020:	42ab      	cmp	r3, r5
 8024022:	dc26      	bgt.n	8024072 <_printf_common+0x96>
 8024024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024028:	1e13      	subs	r3, r2, #0
 802402a:	6822      	ldr	r2, [r4, #0]
 802402c:	bf18      	it	ne
 802402e:	2301      	movne	r3, #1
 8024030:	0692      	lsls	r2, r2, #26
 8024032:	d42b      	bmi.n	802408c <_printf_common+0xb0>
 8024034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024038:	4649      	mov	r1, r9
 802403a:	4638      	mov	r0, r7
 802403c:	47c0      	blx	r8
 802403e:	3001      	adds	r0, #1
 8024040:	d01e      	beq.n	8024080 <_printf_common+0xa4>
 8024042:	6823      	ldr	r3, [r4, #0]
 8024044:	68e5      	ldr	r5, [r4, #12]
 8024046:	6832      	ldr	r2, [r6, #0]
 8024048:	f003 0306 	and.w	r3, r3, #6
 802404c:	2b04      	cmp	r3, #4
 802404e:	bf08      	it	eq
 8024050:	1aad      	subeq	r5, r5, r2
 8024052:	68a3      	ldr	r3, [r4, #8]
 8024054:	6922      	ldr	r2, [r4, #16]
 8024056:	bf0c      	ite	eq
 8024058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802405c:	2500      	movne	r5, #0
 802405e:	4293      	cmp	r3, r2
 8024060:	bfc4      	itt	gt
 8024062:	1a9b      	subgt	r3, r3, r2
 8024064:	18ed      	addgt	r5, r5, r3
 8024066:	2600      	movs	r6, #0
 8024068:	341a      	adds	r4, #26
 802406a:	42b5      	cmp	r5, r6
 802406c:	d11a      	bne.n	80240a4 <_printf_common+0xc8>
 802406e:	2000      	movs	r0, #0
 8024070:	e008      	b.n	8024084 <_printf_common+0xa8>
 8024072:	2301      	movs	r3, #1
 8024074:	4652      	mov	r2, sl
 8024076:	4649      	mov	r1, r9
 8024078:	4638      	mov	r0, r7
 802407a:	47c0      	blx	r8
 802407c:	3001      	adds	r0, #1
 802407e:	d103      	bne.n	8024088 <_printf_common+0xac>
 8024080:	f04f 30ff 	mov.w	r0, #4294967295
 8024084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024088:	3501      	adds	r5, #1
 802408a:	e7c6      	b.n	802401a <_printf_common+0x3e>
 802408c:	18e1      	adds	r1, r4, r3
 802408e:	1c5a      	adds	r2, r3, #1
 8024090:	2030      	movs	r0, #48	; 0x30
 8024092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024096:	4422      	add	r2, r4
 8024098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802409c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80240a0:	3302      	adds	r3, #2
 80240a2:	e7c7      	b.n	8024034 <_printf_common+0x58>
 80240a4:	2301      	movs	r3, #1
 80240a6:	4622      	mov	r2, r4
 80240a8:	4649      	mov	r1, r9
 80240aa:	4638      	mov	r0, r7
 80240ac:	47c0      	blx	r8
 80240ae:	3001      	adds	r0, #1
 80240b0:	d0e6      	beq.n	8024080 <_printf_common+0xa4>
 80240b2:	3601      	adds	r6, #1
 80240b4:	e7d9      	b.n	802406a <_printf_common+0x8e>
 80240b6:	Address 0x00000000080240b6 is out of bounds.


080240b8 <_printf_i>:
 80240b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80240bc:	7e0f      	ldrb	r7, [r1, #24]
 80240be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80240c0:	2f78      	cmp	r7, #120	; 0x78
 80240c2:	4691      	mov	r9, r2
 80240c4:	4680      	mov	r8, r0
 80240c6:	460c      	mov	r4, r1
 80240c8:	469a      	mov	sl, r3
 80240ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80240ce:	d807      	bhi.n	80240e0 <_printf_i+0x28>
 80240d0:	2f62      	cmp	r7, #98	; 0x62
 80240d2:	d80a      	bhi.n	80240ea <_printf_i+0x32>
 80240d4:	2f00      	cmp	r7, #0
 80240d6:	f000 80d8 	beq.w	802428a <_printf_i+0x1d2>
 80240da:	2f58      	cmp	r7, #88	; 0x58
 80240dc:	f000 80a3 	beq.w	8024226 <_printf_i+0x16e>
 80240e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80240e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80240e8:	e03a      	b.n	8024160 <_printf_i+0xa8>
 80240ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80240ee:	2b15      	cmp	r3, #21
 80240f0:	d8f6      	bhi.n	80240e0 <_printf_i+0x28>
 80240f2:	a101      	add	r1, pc, #4	; (adr r1, 80240f8 <_printf_i+0x40>)
 80240f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80240f8:	08024151 	.word	0x08024151
 80240fc:	08024165 	.word	0x08024165
 8024100:	080240e1 	.word	0x080240e1
 8024104:	080240e1 	.word	0x080240e1
 8024108:	080240e1 	.word	0x080240e1
 802410c:	080240e1 	.word	0x080240e1
 8024110:	08024165 	.word	0x08024165
 8024114:	080240e1 	.word	0x080240e1
 8024118:	080240e1 	.word	0x080240e1
 802411c:	080240e1 	.word	0x080240e1
 8024120:	080240e1 	.word	0x080240e1
 8024124:	08024271 	.word	0x08024271
 8024128:	08024195 	.word	0x08024195
 802412c:	08024253 	.word	0x08024253
 8024130:	080240e1 	.word	0x080240e1
 8024134:	080240e1 	.word	0x080240e1
 8024138:	08024293 	.word	0x08024293
 802413c:	080240e1 	.word	0x080240e1
 8024140:	08024195 	.word	0x08024195
 8024144:	080240e1 	.word	0x080240e1
 8024148:	080240e1 	.word	0x080240e1
 802414c:	0802425b 	.word	0x0802425b
 8024150:	682b      	ldr	r3, [r5, #0]
 8024152:	1d1a      	adds	r2, r3, #4
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	602a      	str	r2, [r5, #0]
 8024158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802415c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024160:	2301      	movs	r3, #1
 8024162:	e0a3      	b.n	80242ac <_printf_i+0x1f4>
 8024164:	6820      	ldr	r0, [r4, #0]
 8024166:	6829      	ldr	r1, [r5, #0]
 8024168:	0606      	lsls	r6, r0, #24
 802416a:	f101 0304 	add.w	r3, r1, #4
 802416e:	d50a      	bpl.n	8024186 <_printf_i+0xce>
 8024170:	680e      	ldr	r6, [r1, #0]
 8024172:	602b      	str	r3, [r5, #0]
 8024174:	2e00      	cmp	r6, #0
 8024176:	da03      	bge.n	8024180 <_printf_i+0xc8>
 8024178:	232d      	movs	r3, #45	; 0x2d
 802417a:	4276      	negs	r6, r6
 802417c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024180:	485e      	ldr	r0, [pc, #376]	; (80242fc <_printf_i+0x244>)
 8024182:	230a      	movs	r3, #10
 8024184:	e019      	b.n	80241ba <_printf_i+0x102>
 8024186:	680e      	ldr	r6, [r1, #0]
 8024188:	602b      	str	r3, [r5, #0]
 802418a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802418e:	bf18      	it	ne
 8024190:	b236      	sxthne	r6, r6
 8024192:	e7ef      	b.n	8024174 <_printf_i+0xbc>
 8024194:	682b      	ldr	r3, [r5, #0]
 8024196:	6820      	ldr	r0, [r4, #0]
 8024198:	1d19      	adds	r1, r3, #4
 802419a:	6029      	str	r1, [r5, #0]
 802419c:	0601      	lsls	r1, r0, #24
 802419e:	d501      	bpl.n	80241a4 <_printf_i+0xec>
 80241a0:	681e      	ldr	r6, [r3, #0]
 80241a2:	e002      	b.n	80241aa <_printf_i+0xf2>
 80241a4:	0646      	lsls	r6, r0, #25
 80241a6:	d5fb      	bpl.n	80241a0 <_printf_i+0xe8>
 80241a8:	881e      	ldrh	r6, [r3, #0]
 80241aa:	4854      	ldr	r0, [pc, #336]	; (80242fc <_printf_i+0x244>)
 80241ac:	2f6f      	cmp	r7, #111	; 0x6f
 80241ae:	bf0c      	ite	eq
 80241b0:	2308      	moveq	r3, #8
 80241b2:	230a      	movne	r3, #10
 80241b4:	2100      	movs	r1, #0
 80241b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80241ba:	6865      	ldr	r5, [r4, #4]
 80241bc:	60a5      	str	r5, [r4, #8]
 80241be:	2d00      	cmp	r5, #0
 80241c0:	bfa2      	ittt	ge
 80241c2:	6821      	ldrge	r1, [r4, #0]
 80241c4:	f021 0104 	bicge.w	r1, r1, #4
 80241c8:	6021      	strge	r1, [r4, #0]
 80241ca:	b90e      	cbnz	r6, 80241d0 <_printf_i+0x118>
 80241cc:	2d00      	cmp	r5, #0
 80241ce:	d04d      	beq.n	802426c <_printf_i+0x1b4>
 80241d0:	4615      	mov	r5, r2
 80241d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80241d6:	fb03 6711 	mls	r7, r3, r1, r6
 80241da:	5dc7      	ldrb	r7, [r0, r7]
 80241dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80241e0:	4637      	mov	r7, r6
 80241e2:	42bb      	cmp	r3, r7
 80241e4:	460e      	mov	r6, r1
 80241e6:	d9f4      	bls.n	80241d2 <_printf_i+0x11a>
 80241e8:	2b08      	cmp	r3, #8
 80241ea:	d10b      	bne.n	8024204 <_printf_i+0x14c>
 80241ec:	6823      	ldr	r3, [r4, #0]
 80241ee:	07de      	lsls	r6, r3, #31
 80241f0:	d508      	bpl.n	8024204 <_printf_i+0x14c>
 80241f2:	6923      	ldr	r3, [r4, #16]
 80241f4:	6861      	ldr	r1, [r4, #4]
 80241f6:	4299      	cmp	r1, r3
 80241f8:	bfde      	ittt	le
 80241fa:	2330      	movle	r3, #48	; 0x30
 80241fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024200:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024204:	1b52      	subs	r2, r2, r5
 8024206:	6122      	str	r2, [r4, #16]
 8024208:	f8cd a000 	str.w	sl, [sp]
 802420c:	464b      	mov	r3, r9
 802420e:	aa03      	add	r2, sp, #12
 8024210:	4621      	mov	r1, r4
 8024212:	4640      	mov	r0, r8
 8024214:	f7ff fee2 	bl	8023fdc <_printf_common>
 8024218:	3001      	adds	r0, #1
 802421a:	d14c      	bne.n	80242b6 <_printf_i+0x1fe>
 802421c:	f04f 30ff 	mov.w	r0, #4294967295
 8024220:	b004      	add	sp, #16
 8024222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024226:	4835      	ldr	r0, [pc, #212]	; (80242fc <_printf_i+0x244>)
 8024228:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802422c:	6829      	ldr	r1, [r5, #0]
 802422e:	6823      	ldr	r3, [r4, #0]
 8024230:	f851 6b04 	ldr.w	r6, [r1], #4
 8024234:	6029      	str	r1, [r5, #0]
 8024236:	061d      	lsls	r5, r3, #24
 8024238:	d514      	bpl.n	8024264 <_printf_i+0x1ac>
 802423a:	07df      	lsls	r7, r3, #31
 802423c:	bf44      	itt	mi
 802423e:	f043 0320 	orrmi.w	r3, r3, #32
 8024242:	6023      	strmi	r3, [r4, #0]
 8024244:	b91e      	cbnz	r6, 802424e <_printf_i+0x196>
 8024246:	6823      	ldr	r3, [r4, #0]
 8024248:	f023 0320 	bic.w	r3, r3, #32
 802424c:	6023      	str	r3, [r4, #0]
 802424e:	2310      	movs	r3, #16
 8024250:	e7b0      	b.n	80241b4 <_printf_i+0xfc>
 8024252:	6823      	ldr	r3, [r4, #0]
 8024254:	f043 0320 	orr.w	r3, r3, #32
 8024258:	6023      	str	r3, [r4, #0]
 802425a:	2378      	movs	r3, #120	; 0x78
 802425c:	4828      	ldr	r0, [pc, #160]	; (8024300 <_printf_i+0x248>)
 802425e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024262:	e7e3      	b.n	802422c <_printf_i+0x174>
 8024264:	0659      	lsls	r1, r3, #25
 8024266:	bf48      	it	mi
 8024268:	b2b6      	uxthmi	r6, r6
 802426a:	e7e6      	b.n	802423a <_printf_i+0x182>
 802426c:	4615      	mov	r5, r2
 802426e:	e7bb      	b.n	80241e8 <_printf_i+0x130>
 8024270:	682b      	ldr	r3, [r5, #0]
 8024272:	6826      	ldr	r6, [r4, #0]
 8024274:	6961      	ldr	r1, [r4, #20]
 8024276:	1d18      	adds	r0, r3, #4
 8024278:	6028      	str	r0, [r5, #0]
 802427a:	0635      	lsls	r5, r6, #24
 802427c:	681b      	ldr	r3, [r3, #0]
 802427e:	d501      	bpl.n	8024284 <_printf_i+0x1cc>
 8024280:	6019      	str	r1, [r3, #0]
 8024282:	e002      	b.n	802428a <_printf_i+0x1d2>
 8024284:	0670      	lsls	r0, r6, #25
 8024286:	d5fb      	bpl.n	8024280 <_printf_i+0x1c8>
 8024288:	8019      	strh	r1, [r3, #0]
 802428a:	2300      	movs	r3, #0
 802428c:	6123      	str	r3, [r4, #16]
 802428e:	4615      	mov	r5, r2
 8024290:	e7ba      	b.n	8024208 <_printf_i+0x150>
 8024292:	682b      	ldr	r3, [r5, #0]
 8024294:	1d1a      	adds	r2, r3, #4
 8024296:	602a      	str	r2, [r5, #0]
 8024298:	681d      	ldr	r5, [r3, #0]
 802429a:	6862      	ldr	r2, [r4, #4]
 802429c:	2100      	movs	r1, #0
 802429e:	4628      	mov	r0, r5
 80242a0:	f7db ffe6 	bl	8000270 <memchr>
 80242a4:	b108      	cbz	r0, 80242aa <_printf_i+0x1f2>
 80242a6:	1b40      	subs	r0, r0, r5
 80242a8:	6060      	str	r0, [r4, #4]
 80242aa:	6863      	ldr	r3, [r4, #4]
 80242ac:	6123      	str	r3, [r4, #16]
 80242ae:	2300      	movs	r3, #0
 80242b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80242b4:	e7a8      	b.n	8024208 <_printf_i+0x150>
 80242b6:	6923      	ldr	r3, [r4, #16]
 80242b8:	462a      	mov	r2, r5
 80242ba:	4649      	mov	r1, r9
 80242bc:	4640      	mov	r0, r8
 80242be:	47d0      	blx	sl
 80242c0:	3001      	adds	r0, #1
 80242c2:	d0ab      	beq.n	802421c <_printf_i+0x164>
 80242c4:	6823      	ldr	r3, [r4, #0]
 80242c6:	079b      	lsls	r3, r3, #30
 80242c8:	d413      	bmi.n	80242f2 <_printf_i+0x23a>
 80242ca:	68e0      	ldr	r0, [r4, #12]
 80242cc:	9b03      	ldr	r3, [sp, #12]
 80242ce:	4298      	cmp	r0, r3
 80242d0:	bfb8      	it	lt
 80242d2:	4618      	movlt	r0, r3
 80242d4:	e7a4      	b.n	8024220 <_printf_i+0x168>
 80242d6:	2301      	movs	r3, #1
 80242d8:	4632      	mov	r2, r6
 80242da:	4649      	mov	r1, r9
 80242dc:	4640      	mov	r0, r8
 80242de:	47d0      	blx	sl
 80242e0:	3001      	adds	r0, #1
 80242e2:	d09b      	beq.n	802421c <_printf_i+0x164>
 80242e4:	3501      	adds	r5, #1
 80242e6:	68e3      	ldr	r3, [r4, #12]
 80242e8:	9903      	ldr	r1, [sp, #12]
 80242ea:	1a5b      	subs	r3, r3, r1
 80242ec:	42ab      	cmp	r3, r5
 80242ee:	dcf2      	bgt.n	80242d6 <_printf_i+0x21e>
 80242f0:	e7eb      	b.n	80242ca <_printf_i+0x212>
 80242f2:	2500      	movs	r5, #0
 80242f4:	f104 0619 	add.w	r6, r4, #25
 80242f8:	e7f5      	b.n	80242e6 <_printf_i+0x22e>
 80242fa:	bf00      	nop
 80242fc:	080448b4 	.word	0x080448b4
 8024300:	080448c5 	.word	0x080448c5

08024304 <iprintf>:
 8024304:	b40f      	push	{r0, r1, r2, r3}
 8024306:	4b0a      	ldr	r3, [pc, #40]	; (8024330 <iprintf+0x2c>)
 8024308:	b513      	push	{r0, r1, r4, lr}
 802430a:	681c      	ldr	r4, [r3, #0]
 802430c:	b124      	cbz	r4, 8024318 <iprintf+0x14>
 802430e:	69a3      	ldr	r3, [r4, #24]
 8024310:	b913      	cbnz	r3, 8024318 <iprintf+0x14>
 8024312:	4620      	mov	r0, r4
 8024314:	f7fe fe36 	bl	8022f84 <__sinit>
 8024318:	ab05      	add	r3, sp, #20
 802431a:	9a04      	ldr	r2, [sp, #16]
 802431c:	68a1      	ldr	r1, [r4, #8]
 802431e:	9301      	str	r3, [sp, #4]
 8024320:	4620      	mov	r0, r4
 8024322:	f003 fbc7 	bl	8027ab4 <_vfiprintf_r>
 8024326:	b002      	add	sp, #8
 8024328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802432c:	b004      	add	sp, #16
 802432e:	4770      	bx	lr
 8024330:	20000488 	.word	0x20000488

08024334 <putchar>:
 8024334:	4b09      	ldr	r3, [pc, #36]	; (802435c <putchar+0x28>)
 8024336:	b513      	push	{r0, r1, r4, lr}
 8024338:	681c      	ldr	r4, [r3, #0]
 802433a:	4601      	mov	r1, r0
 802433c:	b134      	cbz	r4, 802434c <putchar+0x18>
 802433e:	69a3      	ldr	r3, [r4, #24]
 8024340:	b923      	cbnz	r3, 802434c <putchar+0x18>
 8024342:	9001      	str	r0, [sp, #4]
 8024344:	4620      	mov	r0, r4
 8024346:	f7fe fe1d 	bl	8022f84 <__sinit>
 802434a:	9901      	ldr	r1, [sp, #4]
 802434c:	68a2      	ldr	r2, [r4, #8]
 802434e:	4620      	mov	r0, r4
 8024350:	b002      	add	sp, #8
 8024352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024356:	f003 be2f 	b.w	8027fb8 <_putc_r>
 802435a:	bf00      	nop
 802435c:	20000488 	.word	0x20000488

08024360 <_puts_r>:
 8024360:	b570      	push	{r4, r5, r6, lr}
 8024362:	460e      	mov	r6, r1
 8024364:	4605      	mov	r5, r0
 8024366:	b118      	cbz	r0, 8024370 <_puts_r+0x10>
 8024368:	6983      	ldr	r3, [r0, #24]
 802436a:	b90b      	cbnz	r3, 8024370 <_puts_r+0x10>
 802436c:	f7fe fe0a 	bl	8022f84 <__sinit>
 8024370:	69ab      	ldr	r3, [r5, #24]
 8024372:	68ac      	ldr	r4, [r5, #8]
 8024374:	b913      	cbnz	r3, 802437c <_puts_r+0x1c>
 8024376:	4628      	mov	r0, r5
 8024378:	f7fe fe04 	bl	8022f84 <__sinit>
 802437c:	4b2c      	ldr	r3, [pc, #176]	; (8024430 <_puts_r+0xd0>)
 802437e:	429c      	cmp	r4, r3
 8024380:	d120      	bne.n	80243c4 <_puts_r+0x64>
 8024382:	686c      	ldr	r4, [r5, #4]
 8024384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024386:	07db      	lsls	r3, r3, #31
 8024388:	d405      	bmi.n	8024396 <_puts_r+0x36>
 802438a:	89a3      	ldrh	r3, [r4, #12]
 802438c:	0598      	lsls	r0, r3, #22
 802438e:	d402      	bmi.n	8024396 <_puts_r+0x36>
 8024390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024392:	f7fe ffcd 	bl	8023330 <__retarget_lock_acquire_recursive>
 8024396:	89a3      	ldrh	r3, [r4, #12]
 8024398:	0719      	lsls	r1, r3, #28
 802439a:	d51d      	bpl.n	80243d8 <_puts_r+0x78>
 802439c:	6923      	ldr	r3, [r4, #16]
 802439e:	b1db      	cbz	r3, 80243d8 <_puts_r+0x78>
 80243a0:	3e01      	subs	r6, #1
 80243a2:	68a3      	ldr	r3, [r4, #8]
 80243a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80243a8:	3b01      	subs	r3, #1
 80243aa:	60a3      	str	r3, [r4, #8]
 80243ac:	bb39      	cbnz	r1, 80243fe <_puts_r+0x9e>
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	da38      	bge.n	8024424 <_puts_r+0xc4>
 80243b2:	4622      	mov	r2, r4
 80243b4:	210a      	movs	r1, #10
 80243b6:	4628      	mov	r0, r5
 80243b8:	f001 fad4 	bl	8025964 <__swbuf_r>
 80243bc:	3001      	adds	r0, #1
 80243be:	d011      	beq.n	80243e4 <_puts_r+0x84>
 80243c0:	250a      	movs	r5, #10
 80243c2:	e011      	b.n	80243e8 <_puts_r+0x88>
 80243c4:	4b1b      	ldr	r3, [pc, #108]	; (8024434 <_puts_r+0xd4>)
 80243c6:	429c      	cmp	r4, r3
 80243c8:	d101      	bne.n	80243ce <_puts_r+0x6e>
 80243ca:	68ac      	ldr	r4, [r5, #8]
 80243cc:	e7da      	b.n	8024384 <_puts_r+0x24>
 80243ce:	4b1a      	ldr	r3, [pc, #104]	; (8024438 <_puts_r+0xd8>)
 80243d0:	429c      	cmp	r4, r3
 80243d2:	bf08      	it	eq
 80243d4:	68ec      	ldreq	r4, [r5, #12]
 80243d6:	e7d5      	b.n	8024384 <_puts_r+0x24>
 80243d8:	4621      	mov	r1, r4
 80243da:	4628      	mov	r0, r5
 80243dc:	f001 fb26 	bl	8025a2c <__swsetup_r>
 80243e0:	2800      	cmp	r0, #0
 80243e2:	d0dd      	beq.n	80243a0 <_puts_r+0x40>
 80243e4:	f04f 35ff 	mov.w	r5, #4294967295
 80243e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80243ea:	07da      	lsls	r2, r3, #31
 80243ec:	d405      	bmi.n	80243fa <_puts_r+0x9a>
 80243ee:	89a3      	ldrh	r3, [r4, #12]
 80243f0:	059b      	lsls	r3, r3, #22
 80243f2:	d402      	bmi.n	80243fa <_puts_r+0x9a>
 80243f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80243f6:	f7fe ff9d 	bl	8023334 <__retarget_lock_release_recursive>
 80243fa:	4628      	mov	r0, r5
 80243fc:	bd70      	pop	{r4, r5, r6, pc}
 80243fe:	2b00      	cmp	r3, #0
 8024400:	da04      	bge.n	802440c <_puts_r+0xac>
 8024402:	69a2      	ldr	r2, [r4, #24]
 8024404:	429a      	cmp	r2, r3
 8024406:	dc06      	bgt.n	8024416 <_puts_r+0xb6>
 8024408:	290a      	cmp	r1, #10
 802440a:	d004      	beq.n	8024416 <_puts_r+0xb6>
 802440c:	6823      	ldr	r3, [r4, #0]
 802440e:	1c5a      	adds	r2, r3, #1
 8024410:	6022      	str	r2, [r4, #0]
 8024412:	7019      	strb	r1, [r3, #0]
 8024414:	e7c5      	b.n	80243a2 <_puts_r+0x42>
 8024416:	4622      	mov	r2, r4
 8024418:	4628      	mov	r0, r5
 802441a:	f001 faa3 	bl	8025964 <__swbuf_r>
 802441e:	3001      	adds	r0, #1
 8024420:	d1bf      	bne.n	80243a2 <_puts_r+0x42>
 8024422:	e7df      	b.n	80243e4 <_puts_r+0x84>
 8024424:	6823      	ldr	r3, [r4, #0]
 8024426:	250a      	movs	r5, #10
 8024428:	1c5a      	adds	r2, r3, #1
 802442a:	6022      	str	r2, [r4, #0]
 802442c:	701d      	strb	r5, [r3, #0]
 802442e:	e7db      	b.n	80243e8 <_puts_r+0x88>
 8024430:	0804472c 	.word	0x0804472c
 8024434:	0804474c 	.word	0x0804474c
 8024438:	0804470c 	.word	0x0804470c

0802443c <puts>:
 802443c:	4b02      	ldr	r3, [pc, #8]	; (8024448 <puts+0xc>)
 802443e:	4601      	mov	r1, r0
 8024440:	6818      	ldr	r0, [r3, #0]
 8024442:	f7ff bf8d 	b.w	8024360 <_puts_r>
 8024446:	bf00      	nop
 8024448:	20000488 	.word	0x20000488

0802444c <rand>:
 802444c:	4b16      	ldr	r3, [pc, #88]	; (80244a8 <rand+0x5c>)
 802444e:	b510      	push	{r4, lr}
 8024450:	681c      	ldr	r4, [r3, #0]
 8024452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024454:	b9b3      	cbnz	r3, 8024484 <rand+0x38>
 8024456:	2018      	movs	r0, #24
 8024458:	f7fe ff6e 	bl	8023338 <malloc>
 802445c:	63a0      	str	r0, [r4, #56]	; 0x38
 802445e:	b928      	cbnz	r0, 802446c <rand+0x20>
 8024460:	4602      	mov	r2, r0
 8024462:	4b12      	ldr	r3, [pc, #72]	; (80244ac <rand+0x60>)
 8024464:	4812      	ldr	r0, [pc, #72]	; (80244b0 <rand+0x64>)
 8024466:	214e      	movs	r1, #78	; 0x4e
 8024468:	f001 fb9a 	bl	8025ba0 <__assert_func>
 802446c:	4a11      	ldr	r2, [pc, #68]	; (80244b4 <rand+0x68>)
 802446e:	4b12      	ldr	r3, [pc, #72]	; (80244b8 <rand+0x6c>)
 8024470:	e9c0 2300 	strd	r2, r3, [r0]
 8024474:	4b11      	ldr	r3, [pc, #68]	; (80244bc <rand+0x70>)
 8024476:	6083      	str	r3, [r0, #8]
 8024478:	230b      	movs	r3, #11
 802447a:	8183      	strh	r3, [r0, #12]
 802447c:	2201      	movs	r2, #1
 802447e:	2300      	movs	r3, #0
 8024480:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024484:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8024486:	4a0e      	ldr	r2, [pc, #56]	; (80244c0 <rand+0x74>)
 8024488:	6920      	ldr	r0, [r4, #16]
 802448a:	6963      	ldr	r3, [r4, #20]
 802448c:	490d      	ldr	r1, [pc, #52]	; (80244c4 <rand+0x78>)
 802448e:	4342      	muls	r2, r0
 8024490:	fb01 2203 	mla	r2, r1, r3, r2
 8024494:	fba0 0101 	umull	r0, r1, r0, r1
 8024498:	1c43      	adds	r3, r0, #1
 802449a:	eb42 0001 	adc.w	r0, r2, r1
 802449e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80244a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80244a6:	bd10      	pop	{r4, pc}
 80244a8:	20000488 	.word	0x20000488
 80244ac:	08044770 	.word	0x08044770
 80244b0:	080448d6 	.word	0x080448d6
 80244b4:	abcd330e 	.word	0xabcd330e
 80244b8:	e66d1234 	.word	0xe66d1234
 80244bc:	0005deec 	.word	0x0005deec
 80244c0:	5851f42d 	.word	0x5851f42d
 80244c4:	4c957f2d 	.word	0x4c957f2d

080244c8 <cleanup_glue>:
 80244c8:	b538      	push	{r3, r4, r5, lr}
 80244ca:	460c      	mov	r4, r1
 80244cc:	6809      	ldr	r1, [r1, #0]
 80244ce:	4605      	mov	r5, r0
 80244d0:	b109      	cbz	r1, 80244d6 <cleanup_glue+0xe>
 80244d2:	f7ff fff9 	bl	80244c8 <cleanup_glue>
 80244d6:	4621      	mov	r1, r4
 80244d8:	4628      	mov	r0, r5
 80244da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80244de:	f7ff b9ed 	b.w	80238bc <_free_r>
 80244e2:	Address 0x00000000080244e2 is out of bounds.


080244e4 <_reclaim_reent>:
 80244e4:	4b2c      	ldr	r3, [pc, #176]	; (8024598 <_reclaim_reent+0xb4>)
 80244e6:	681b      	ldr	r3, [r3, #0]
 80244e8:	4283      	cmp	r3, r0
 80244ea:	b570      	push	{r4, r5, r6, lr}
 80244ec:	4604      	mov	r4, r0
 80244ee:	d051      	beq.n	8024594 <_reclaim_reent+0xb0>
 80244f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80244f2:	b143      	cbz	r3, 8024506 <_reclaim_reent+0x22>
 80244f4:	68db      	ldr	r3, [r3, #12]
 80244f6:	2b00      	cmp	r3, #0
 80244f8:	d14a      	bne.n	8024590 <_reclaim_reent+0xac>
 80244fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80244fc:	6819      	ldr	r1, [r3, #0]
 80244fe:	b111      	cbz	r1, 8024506 <_reclaim_reent+0x22>
 8024500:	4620      	mov	r0, r4
 8024502:	f7ff f9db 	bl	80238bc <_free_r>
 8024506:	6961      	ldr	r1, [r4, #20]
 8024508:	b111      	cbz	r1, 8024510 <_reclaim_reent+0x2c>
 802450a:	4620      	mov	r0, r4
 802450c:	f7ff f9d6 	bl	80238bc <_free_r>
 8024510:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8024512:	b111      	cbz	r1, 802451a <_reclaim_reent+0x36>
 8024514:	4620      	mov	r0, r4
 8024516:	f7ff f9d1 	bl	80238bc <_free_r>
 802451a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802451c:	b111      	cbz	r1, 8024524 <_reclaim_reent+0x40>
 802451e:	4620      	mov	r0, r4
 8024520:	f7ff f9cc 	bl	80238bc <_free_r>
 8024524:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8024526:	b111      	cbz	r1, 802452e <_reclaim_reent+0x4a>
 8024528:	4620      	mov	r0, r4
 802452a:	f7ff f9c7 	bl	80238bc <_free_r>
 802452e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024530:	b111      	cbz	r1, 8024538 <_reclaim_reent+0x54>
 8024532:	4620      	mov	r0, r4
 8024534:	f7ff f9c2 	bl	80238bc <_free_r>
 8024538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802453a:	b111      	cbz	r1, 8024542 <_reclaim_reent+0x5e>
 802453c:	4620      	mov	r0, r4
 802453e:	f7ff f9bd 	bl	80238bc <_free_r>
 8024542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024544:	b111      	cbz	r1, 802454c <_reclaim_reent+0x68>
 8024546:	4620      	mov	r0, r4
 8024548:	f7ff f9b8 	bl	80238bc <_free_r>
 802454c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802454e:	b111      	cbz	r1, 8024556 <_reclaim_reent+0x72>
 8024550:	4620      	mov	r0, r4
 8024552:	f7ff f9b3 	bl	80238bc <_free_r>
 8024556:	69a3      	ldr	r3, [r4, #24]
 8024558:	b1e3      	cbz	r3, 8024594 <_reclaim_reent+0xb0>
 802455a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802455c:	4620      	mov	r0, r4
 802455e:	4798      	blx	r3
 8024560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024562:	b1b9      	cbz	r1, 8024594 <_reclaim_reent+0xb0>
 8024564:	4620      	mov	r0, r4
 8024566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802456a:	f7ff bfad 	b.w	80244c8 <cleanup_glue>
 802456e:	5949      	ldr	r1, [r1, r5]
 8024570:	b941      	cbnz	r1, 8024584 <_reclaim_reent+0xa0>
 8024572:	3504      	adds	r5, #4
 8024574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024576:	2d80      	cmp	r5, #128	; 0x80
 8024578:	68d9      	ldr	r1, [r3, #12]
 802457a:	d1f8      	bne.n	802456e <_reclaim_reent+0x8a>
 802457c:	4620      	mov	r0, r4
 802457e:	f7ff f99d 	bl	80238bc <_free_r>
 8024582:	e7ba      	b.n	80244fa <_reclaim_reent+0x16>
 8024584:	680e      	ldr	r6, [r1, #0]
 8024586:	4620      	mov	r0, r4
 8024588:	f7ff f998 	bl	80238bc <_free_r>
 802458c:	4631      	mov	r1, r6
 802458e:	e7ef      	b.n	8024570 <_reclaim_reent+0x8c>
 8024590:	2500      	movs	r5, #0
 8024592:	e7ef      	b.n	8024574 <_reclaim_reent+0x90>
 8024594:	bd70      	pop	{r4, r5, r6, pc}
 8024596:	bf00      	nop
 8024598:	20000488 	.word	0x20000488

0802459c <modf>:
 802459c:	b570      	push	{r4, r5, r6, lr}
 802459e:	ed2d 8b02 	vpush	{d8}
 80245a2:	eeb0 8b40 	vmov.f64	d8, d0
 80245a6:	ee18 5a90 	vmov	r5, s17
 80245aa:	4604      	mov	r4, r0
 80245ac:	f3c5 500a 	ubfx	r0, r5, #20, #11
 80245b0:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 80245b4:	2b13      	cmp	r3, #19
 80245b6:	ee10 1a10 	vmov	r1, s0
 80245ba:	dc23      	bgt.n	8024604 <modf+0x68>
 80245bc:	2b00      	cmp	r3, #0
 80245be:	da09      	bge.n	80245d4 <modf+0x38>
 80245c0:	2200      	movs	r2, #0
 80245c2:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80245c6:	e9c4 2300 	strd	r2, r3, [r4]
 80245ca:	eeb0 0b48 	vmov.f64	d0, d8
 80245ce:	ecbd 8b02 	vpop	{d8}
 80245d2:	bd70      	pop	{r4, r5, r6, pc}
 80245d4:	481d      	ldr	r0, [pc, #116]	; (802464c <modf+0xb0>)
 80245d6:	4118      	asrs	r0, r3
 80245d8:	ea05 0300 	and.w	r3, r5, r0
 80245dc:	4319      	orrs	r1, r3
 80245de:	d107      	bne.n	80245f0 <modf+0x54>
 80245e0:	ed84 0b00 	vstr	d0, [r4]
 80245e4:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80245e8:	460a      	mov	r2, r1
 80245ea:	ec43 2b18 	vmov	d8, r2, r3
 80245ee:	e7ec      	b.n	80245ca <modf+0x2e>
 80245f0:	2200      	movs	r2, #0
 80245f2:	ea25 0300 	bic.w	r3, r5, r0
 80245f6:	ec43 2b17 	vmov	d7, r2, r3
 80245fa:	e9c4 2300 	strd	r2, r3, [r4]
 80245fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8024602:	e7e2      	b.n	80245ca <modf+0x2e>
 8024604:	2b33      	cmp	r3, #51	; 0x33
 8024606:	dd0d      	ble.n	8024624 <modf+0x88>
 8024608:	ed84 0b00 	vstr	d0, [r4]
 802460c:	f003 fd2e 	bl	802806c <__fpclassifyd>
 8024610:	b920      	cbnz	r0, 802461c <modf+0x80>
 8024612:	ee38 8b08 	vadd.f64	d8, d8, d8
 8024616:	ed84 8b00 	vstr	d8, [r4]
 802461a:	e7d6      	b.n	80245ca <modf+0x2e>
 802461c:	2200      	movs	r2, #0
 802461e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024622:	e7e2      	b.n	80245ea <modf+0x4e>
 8024624:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8024628:	f04f 30ff 	mov.w	r0, #4294967295
 802462c:	40d8      	lsrs	r0, r3
 802462e:	ea11 0600 	ands.w	r6, r1, r0
 8024632:	d105      	bne.n	8024640 <modf+0xa4>
 8024634:	ed84 0b00 	vstr	d0, [r4]
 8024638:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802463c:	4632      	mov	r2, r6
 802463e:	e7d4      	b.n	80245ea <modf+0x4e>
 8024640:	ee18 3a90 	vmov	r3, s17
 8024644:	ea21 0200 	bic.w	r2, r1, r0
 8024648:	e7d5      	b.n	80245f6 <modf+0x5a>
 802464a:	bf00      	nop
 802464c:	000fffff 	.word	0x000fffff

08024650 <_sbrk_r>:
 8024650:	b538      	push	{r3, r4, r5, lr}
 8024652:	4d06      	ldr	r5, [pc, #24]	; (802466c <_sbrk_r+0x1c>)
 8024654:	2300      	movs	r3, #0
 8024656:	4604      	mov	r4, r0
 8024658:	4608      	mov	r0, r1
 802465a:	602b      	str	r3, [r5, #0]
 802465c:	f7e2 f9d2 	bl	8006a04 <_sbrk>
 8024660:	1c43      	adds	r3, r0, #1
 8024662:	d102      	bne.n	802466a <_sbrk_r+0x1a>
 8024664:	682b      	ldr	r3, [r5, #0]
 8024666:	b103      	cbz	r3, 802466a <_sbrk_r+0x1a>
 8024668:	6023      	str	r3, [r4, #0]
 802466a:	bd38      	pop	{r3, r4, r5, pc}
 802466c:	2002f86c 	.word	0x2002f86c

08024670 <sniprintf>:
 8024670:	b40c      	push	{r2, r3}
 8024672:	b530      	push	{r4, r5, lr}
 8024674:	4b17      	ldr	r3, [pc, #92]	; (80246d4 <sniprintf+0x64>)
 8024676:	1e0c      	subs	r4, r1, #0
 8024678:	681d      	ldr	r5, [r3, #0]
 802467a:	b09d      	sub	sp, #116	; 0x74
 802467c:	da08      	bge.n	8024690 <sniprintf+0x20>
 802467e:	238b      	movs	r3, #139	; 0x8b
 8024680:	602b      	str	r3, [r5, #0]
 8024682:	f04f 30ff 	mov.w	r0, #4294967295
 8024686:	b01d      	add	sp, #116	; 0x74
 8024688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802468c:	b002      	add	sp, #8
 802468e:	4770      	bx	lr
 8024690:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024694:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024698:	bf14      	ite	ne
 802469a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802469e:	4623      	moveq	r3, r4
 80246a0:	9304      	str	r3, [sp, #16]
 80246a2:	9307      	str	r3, [sp, #28]
 80246a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80246a8:	9002      	str	r0, [sp, #8]
 80246aa:	9006      	str	r0, [sp, #24]
 80246ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80246b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80246b2:	ab21      	add	r3, sp, #132	; 0x84
 80246b4:	a902      	add	r1, sp, #8
 80246b6:	4628      	mov	r0, r5
 80246b8:	9301      	str	r3, [sp, #4]
 80246ba:	f002 feff 	bl	80274bc <_svfiprintf_r>
 80246be:	1c43      	adds	r3, r0, #1
 80246c0:	bfbc      	itt	lt
 80246c2:	238b      	movlt	r3, #139	; 0x8b
 80246c4:	602b      	strlt	r3, [r5, #0]
 80246c6:	2c00      	cmp	r4, #0
 80246c8:	d0dd      	beq.n	8024686 <sniprintf+0x16>
 80246ca:	9b02      	ldr	r3, [sp, #8]
 80246cc:	2200      	movs	r2, #0
 80246ce:	701a      	strb	r2, [r3, #0]
 80246d0:	e7d9      	b.n	8024686 <sniprintf+0x16>
 80246d2:	bf00      	nop
 80246d4:	20000488 	.word	0x20000488

080246d8 <siprintf>:
 80246d8:	b40e      	push	{r1, r2, r3}
 80246da:	b500      	push	{lr}
 80246dc:	b09c      	sub	sp, #112	; 0x70
 80246de:	ab1d      	add	r3, sp, #116	; 0x74
 80246e0:	9002      	str	r0, [sp, #8]
 80246e2:	9006      	str	r0, [sp, #24]
 80246e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80246e8:	4809      	ldr	r0, [pc, #36]	; (8024710 <siprintf+0x38>)
 80246ea:	9107      	str	r1, [sp, #28]
 80246ec:	9104      	str	r1, [sp, #16]
 80246ee:	4909      	ldr	r1, [pc, #36]	; (8024714 <siprintf+0x3c>)
 80246f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80246f4:	9105      	str	r1, [sp, #20]
 80246f6:	6800      	ldr	r0, [r0, #0]
 80246f8:	9301      	str	r3, [sp, #4]
 80246fa:	a902      	add	r1, sp, #8
 80246fc:	f002 fede 	bl	80274bc <_svfiprintf_r>
 8024700:	9b02      	ldr	r3, [sp, #8]
 8024702:	2200      	movs	r2, #0
 8024704:	701a      	strb	r2, [r3, #0]
 8024706:	b01c      	add	sp, #112	; 0x70
 8024708:	f85d eb04 	ldr.w	lr, [sp], #4
 802470c:	b003      	add	sp, #12
 802470e:	4770      	bx	lr
 8024710:	20000488 	.word	0x20000488
 8024714:	ffff0208 	.word	0xffff0208

08024718 <siscanf>:
 8024718:	b40e      	push	{r1, r2, r3}
 802471a:	b510      	push	{r4, lr}
 802471c:	b09f      	sub	sp, #124	; 0x7c
 802471e:	ac21      	add	r4, sp, #132	; 0x84
 8024720:	f44f 7101 	mov.w	r1, #516	; 0x204
 8024724:	f854 2b04 	ldr.w	r2, [r4], #4
 8024728:	9201      	str	r2, [sp, #4]
 802472a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802472e:	9004      	str	r0, [sp, #16]
 8024730:	9008      	str	r0, [sp, #32]
 8024732:	f7db fd8f 	bl	8000254 <strlen>
 8024736:	4b0c      	ldr	r3, [pc, #48]	; (8024768 <siscanf+0x50>)
 8024738:	9005      	str	r0, [sp, #20]
 802473a:	9009      	str	r0, [sp, #36]	; 0x24
 802473c:	930d      	str	r3, [sp, #52]	; 0x34
 802473e:	480b      	ldr	r0, [pc, #44]	; (802476c <siscanf+0x54>)
 8024740:	9a01      	ldr	r2, [sp, #4]
 8024742:	6800      	ldr	r0, [r0, #0]
 8024744:	9403      	str	r4, [sp, #12]
 8024746:	2300      	movs	r3, #0
 8024748:	9311      	str	r3, [sp, #68]	; 0x44
 802474a:	9316      	str	r3, [sp, #88]	; 0x58
 802474c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024750:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024754:	a904      	add	r1, sp, #16
 8024756:	4623      	mov	r3, r4
 8024758:	f003 f80a 	bl	8027770 <__ssvfiscanf_r>
 802475c:	b01f      	add	sp, #124	; 0x7c
 802475e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024762:	b003      	add	sp, #12
 8024764:	4770      	bx	lr
 8024766:	bf00      	nop
 8024768:	08024793 	.word	0x08024793
 802476c:	20000488 	.word	0x20000488

08024770 <__sread>:
 8024770:	b510      	push	{r4, lr}
 8024772:	460c      	mov	r4, r1
 8024774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024778:	f003 fc66 	bl	8028048 <_read_r>
 802477c:	2800      	cmp	r0, #0
 802477e:	bfab      	itete	ge
 8024780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024782:	89a3      	ldrhlt	r3, [r4, #12]
 8024784:	181b      	addge	r3, r3, r0
 8024786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802478a:	bfac      	ite	ge
 802478c:	6563      	strge	r3, [r4, #84]	; 0x54
 802478e:	81a3      	strhlt	r3, [r4, #12]
 8024790:	bd10      	pop	{r4, pc}

08024792 <__seofread>:
 8024792:	2000      	movs	r0, #0
 8024794:	4770      	bx	lr

08024796 <__swrite>:
 8024796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802479a:	461f      	mov	r7, r3
 802479c:	898b      	ldrh	r3, [r1, #12]
 802479e:	05db      	lsls	r3, r3, #23
 80247a0:	4605      	mov	r5, r0
 80247a2:	460c      	mov	r4, r1
 80247a4:	4616      	mov	r6, r2
 80247a6:	d505      	bpl.n	80247b4 <__swrite+0x1e>
 80247a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247ac:	2302      	movs	r3, #2
 80247ae:	2200      	movs	r2, #0
 80247b0:	f002 fa0a 	bl	8026bc8 <_lseek_r>
 80247b4:	89a3      	ldrh	r3, [r4, #12]
 80247b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80247ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80247be:	81a3      	strh	r3, [r4, #12]
 80247c0:	4632      	mov	r2, r6
 80247c2:	463b      	mov	r3, r7
 80247c4:	4628      	mov	r0, r5
 80247c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80247ca:	f001 b91d 	b.w	8025a08 <_write_r>

080247ce <__sseek>:
 80247ce:	b510      	push	{r4, lr}
 80247d0:	460c      	mov	r4, r1
 80247d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247d6:	f002 f9f7 	bl	8026bc8 <_lseek_r>
 80247da:	1c43      	adds	r3, r0, #1
 80247dc:	89a3      	ldrh	r3, [r4, #12]
 80247de:	bf15      	itete	ne
 80247e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80247e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80247e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80247ea:	81a3      	strheq	r3, [r4, #12]
 80247ec:	bf18      	it	ne
 80247ee:	81a3      	strhne	r3, [r4, #12]
 80247f0:	bd10      	pop	{r4, pc}

080247f2 <__sclose>:
 80247f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247f6:	f001 b9f1 	b.w	8025bdc <_close_r>

080247fa <stpcpy>:
 80247fa:	4603      	mov	r3, r0
 80247fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024800:	4618      	mov	r0, r3
 8024802:	f803 2b01 	strb.w	r2, [r3], #1
 8024806:	2a00      	cmp	r2, #0
 8024808:	d1f8      	bne.n	80247fc <stpcpy+0x2>
 802480a:	4770      	bx	lr

0802480c <strchr>:
 802480c:	b2c9      	uxtb	r1, r1
 802480e:	4603      	mov	r3, r0
 8024810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024814:	b11a      	cbz	r2, 802481e <strchr+0x12>
 8024816:	428a      	cmp	r2, r1
 8024818:	d1f9      	bne.n	802480e <strchr+0x2>
 802481a:	4618      	mov	r0, r3
 802481c:	4770      	bx	lr
 802481e:	2900      	cmp	r1, #0
 8024820:	bf18      	it	ne
 8024822:	2300      	movne	r3, #0
 8024824:	e7f9      	b.n	802481a <strchr+0xe>

08024826 <strcpy>:
 8024826:	4603      	mov	r3, r0
 8024828:	f811 2b01 	ldrb.w	r2, [r1], #1
 802482c:	f803 2b01 	strb.w	r2, [r3], #1
 8024830:	2a00      	cmp	r2, #0
 8024832:	d1f9      	bne.n	8024828 <strcpy+0x2>
 8024834:	4770      	bx	lr
 8024836:	Address 0x0000000008024836 is out of bounds.


08024838 <iso_year_adjust>:
 8024838:	6942      	ldr	r2, [r0, #20]
 802483a:	2a00      	cmp	r2, #0
 802483c:	f240 736c 	movw	r3, #1900	; 0x76c
 8024840:	bfa8      	it	ge
 8024842:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8024846:	4413      	add	r3, r2
 8024848:	0792      	lsls	r2, r2, #30
 802484a:	d105      	bne.n	8024858 <iso_year_adjust+0x20>
 802484c:	2164      	movs	r1, #100	; 0x64
 802484e:	fb93 f2f1 	sdiv	r2, r3, r1
 8024852:	fb01 3212 	mls	r2, r1, r2, r3
 8024856:	b9da      	cbnz	r2, 8024890 <iso_year_adjust+0x58>
 8024858:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802485c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024860:	fb02 3311 	mls	r3, r2, r1, r3
 8024864:	fab3 f383 	clz	r3, r3
 8024868:	095b      	lsrs	r3, r3, #5
 802486a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802486e:	0040      	lsls	r0, r0, #1
 8024870:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8024874:	4418      	add	r0, r3
 8024876:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802487a:	4298      	cmp	r0, r3
 802487c:	d03a      	beq.n	80248f4 <iso_year_adjust+0xbc>
 802487e:	dc21      	bgt.n	80248c4 <iso_year_adjust+0x8c>
 8024880:	2801      	cmp	r0, #1
 8024882:	dc1a      	bgt.n	80248ba <iso_year_adjust+0x82>
 8024884:	2800      	cmp	r0, #0
 8024886:	bfb4      	ite	lt
 8024888:	2000      	movlt	r0, #0
 802488a:	f04f 30ff 	movge.w	r0, #4294967295
 802488e:	4770      	bx	lr
 8024890:	2301      	movs	r3, #1
 8024892:	e7ea      	b.n	802486a <iso_year_adjust+0x32>
 8024894:	2817      	cmp	r0, #23
 8024896:	d813      	bhi.n	80248c0 <iso_year_adjust+0x88>
 8024898:	e8df f000 	tbb	[pc, r0]
 802489c:	0c0c0c0c 	.word	0x0c0c0c0c
 80248a0:	0c0c1212 	.word	0x0c0c1212
 80248a4:	12121212 	.word	0x12121212
 80248a8:	12121212 	.word	0x12121212
 80248ac:	0c0c1212 	.word	0x0c0c1212
 80248b0:	0c0c1212 	.word	0x0c0c1212
 80248b4:	f04f 30ff 	mov.w	r0, #4294967295
 80248b8:	4770      	bx	lr
 80248ba:	380a      	subs	r0, #10
 80248bc:	2817      	cmp	r0, #23
 80248be:	d9e9      	bls.n	8024894 <iso_year_adjust+0x5c>
 80248c0:	2000      	movs	r0, #0
 80248c2:	4770      	bx	lr
 80248c4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80248c8:	4298      	cmp	r0, r3
 80248ca:	dc06      	bgt.n	80248da <iso_year_adjust+0xa2>
 80248cc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80248d0:	4298      	cmp	r0, r3
 80248d2:	bfd4      	ite	le
 80248d4:	2000      	movle	r0, #0
 80248d6:	2001      	movgt	r0, #1
 80248d8:	4770      	bx	lr
 80248da:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80248de:	3802      	subs	r0, #2
 80248e0:	2815      	cmp	r0, #21
 80248e2:	d8ed      	bhi.n	80248c0 <iso_year_adjust+0x88>
 80248e4:	2301      	movs	r3, #1
 80248e6:	4083      	lsls	r3, r0
 80248e8:	4803      	ldr	r0, [pc, #12]	; (80248f8 <iso_year_adjust+0xc0>)
 80248ea:	4018      	ands	r0, r3
 80248ec:	3800      	subs	r0, #0
 80248ee:	bf18      	it	ne
 80248f0:	2001      	movne	r0, #1
 80248f2:	4770      	bx	lr
 80248f4:	2001      	movs	r0, #1
 80248f6:	4770      	bx	lr
 80248f8:	002a001f 	.word	0x002a001f

080248fc <__strftime.isra.0>:
 80248fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024900:	b08f      	sub	sp, #60	; 0x3c
 8024902:	461e      	mov	r6, r3
 8024904:	2300      	movs	r3, #0
 8024906:	4607      	mov	r7, r0
 8024908:	460d      	mov	r5, r1
 802490a:	9302      	str	r3, [sp, #8]
 802490c:	461c      	mov	r4, r3
 802490e:	7813      	ldrb	r3, [r2, #0]
 8024910:	2b00      	cmp	r3, #0
 8024912:	f000 84ba 	beq.w	802528a <__strftime.isra.0+0x98e>
 8024916:	2b25      	cmp	r3, #37	; 0x25
 8024918:	d11f      	bne.n	802495a <__strftime.isra.0+0x5e>
 802491a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802491e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8024922:	d024      	beq.n	802496e <__strftime.isra.0+0x72>
 8024924:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024928:	d021      	beq.n	802496e <__strftime.isra.0+0x72>
 802492a:	f102 0801 	add.w	r8, r2, #1
 802492e:	f04f 0b00 	mov.w	fp, #0
 8024932:	f898 2000 	ldrb.w	r2, [r8]
 8024936:	3a31      	subs	r2, #49	; 0x31
 8024938:	2a08      	cmp	r2, #8
 802493a:	d81b      	bhi.n	8024974 <__strftime.isra.0+0x78>
 802493c:	4640      	mov	r0, r8
 802493e:	220a      	movs	r2, #10
 8024940:	a906      	add	r1, sp, #24
 8024942:	f000 fdc9 	bl	80254d8 <strtoul>
 8024946:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802494a:	4681      	mov	r9, r0
 802494c:	f898 2000 	ldrb.w	r2, [r8]
 8024950:	2a45      	cmp	r2, #69	; 0x45
 8024952:	d112      	bne.n	802497a <__strftime.isra.0+0x7e>
 8024954:	f108 0801 	add.w	r8, r8, #1
 8024958:	e011      	b.n	802497e <__strftime.isra.0+0x82>
 802495a:	1e69      	subs	r1, r5, #1
 802495c:	42a1      	cmp	r1, r4
 802495e:	d802      	bhi.n	8024966 <__strftime.isra.0+0x6a>
 8024960:	2400      	movs	r4, #0
 8024962:	f000 bc95 	b.w	8025290 <__strftime.isra.0+0x994>
 8024966:	553b      	strb	r3, [r7, r4]
 8024968:	3201      	adds	r2, #1
 802496a:	3401      	adds	r4, #1
 802496c:	e7cf      	b.n	802490e <__strftime.isra.0+0x12>
 802496e:	f102 0802 	add.w	r8, r2, #2
 8024972:	e7de      	b.n	8024932 <__strftime.isra.0+0x36>
 8024974:	f04f 0900 	mov.w	r9, #0
 8024978:	e7e8      	b.n	802494c <__strftime.isra.0+0x50>
 802497a:	2a4f      	cmp	r2, #79	; 0x4f
 802497c:	d0ea      	beq.n	8024954 <__strftime.isra.0+0x58>
 802497e:	f898 0000 	ldrb.w	r0, [r8]
 8024982:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8024986:	2a55      	cmp	r2, #85	; 0x55
 8024988:	d8ea      	bhi.n	8024960 <__strftime.isra.0+0x64>
 802498a:	a301      	add	r3, pc, #4	; (adr r3, 8024990 <__strftime.isra.0+0x94>)
 802498c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8024990:	0802527f 	.word	0x0802527f
 8024994:	08024961 	.word	0x08024961
 8024998:	08024961 	.word	0x08024961
 802499c:	08024961 	.word	0x08024961
 80249a0:	08024961 	.word	0x08024961
 80249a4:	08024961 	.word	0x08024961
 80249a8:	08024961 	.word	0x08024961
 80249ac:	08024961 	.word	0x08024961
 80249b0:	08024961 	.word	0x08024961
 80249b4:	08024961 	.word	0x08024961
 80249b8:	08024961 	.word	0x08024961
 80249bc:	08024961 	.word	0x08024961
 80249c0:	08024961 	.word	0x08024961
 80249c4:	08024961 	.word	0x08024961
 80249c8:	08024961 	.word	0x08024961
 80249cc:	08024961 	.word	0x08024961
 80249d0:	08024961 	.word	0x08024961
 80249d4:	08024961 	.word	0x08024961
 80249d8:	08024961 	.word	0x08024961
 80249dc:	08024961 	.word	0x08024961
 80249e0:	08024961 	.word	0x08024961
 80249e4:	08024961 	.word	0x08024961
 80249e8:	08024961 	.word	0x08024961
 80249ec:	08024961 	.word	0x08024961
 80249f0:	08024961 	.word	0x08024961
 80249f4:	08024961 	.word	0x08024961
 80249f8:	08024961 	.word	0x08024961
 80249fc:	08024961 	.word	0x08024961
 8024a00:	08024b25 	.word	0x08024b25
 8024a04:	08024b7d 	.word	0x08024b7d
 8024a08:	08024beb 	.word	0x08024beb
 8024a0c:	08024c89 	.word	0x08024c89
 8024a10:	08024961 	.word	0x08024961
 8024a14:	08024cd5 	.word	0x08024cd5
 8024a18:	08024dc1 	.word	0x08024dc1
 8024a1c:	08024e9b 	.word	0x08024e9b
 8024a20:	08024ea9 	.word	0x08024ea9
 8024a24:	08024961 	.word	0x08024961
 8024a28:	08024961 	.word	0x08024961
 8024a2c:	08024961 	.word	0x08024961
 8024a30:	08024ed9 	.word	0x08024ed9
 8024a34:	08024961 	.word	0x08024961
 8024a38:	08024961 	.word	0x08024961
 8024a3c:	08024eed 	.word	0x08024eed
 8024a40:	08024961 	.word	0x08024961
 8024a44:	08024f3f 	.word	0x08024f3f
 8024a48:	08025053 	.word	0x08025053
 8024a4c:	08025063 	.word	0x08025063
 8024a50:	0802508b 	.word	0x0802508b
 8024a54:	080250c5 	.word	0x080250c5
 8024a58:	08025139 	.word	0x08025139
 8024a5c:	08024be3 	.word	0x08024be3
 8024a60:	08025165 	.word	0x08025165
 8024a64:	0802522d 	.word	0x0802522d
 8024a68:	08024961 	.word	0x08024961
 8024a6c:	08024961 	.word	0x08024961
 8024a70:	08024961 	.word	0x08024961
 8024a74:	08024961 	.word	0x08024961
 8024a78:	08024961 	.word	0x08024961
 8024a7c:	08024961 	.word	0x08024961
 8024a80:	08024ae9 	.word	0x08024ae9
 8024a84:	08024b53 	.word	0x08024b53
 8024a88:	08024ba9 	.word	0x08024ba9
 8024a8c:	08024c65 	.word	0x08024c65
 8024a90:	08024c65 	.word	0x08024c65
 8024a94:	08024961 	.word	0x08024961
 8024a98:	08024d27 	.word	0x08024d27
 8024a9c:	08024b53 	.word	0x08024b53
 8024aa0:	08024961 	.word	0x08024961
 8024aa4:	08024ecb 	.word	0x08024ecb
 8024aa8:	08024e9b 	.word	0x08024e9b
 8024aac:	08024ea9 	.word	0x08024ea9
 8024ab0:	08024ed3 	.word	0x08024ed3
 8024ab4:	08024edd 	.word	0x08024edd
 8024ab8:	08024961 	.word	0x08024961
 8024abc:	08024eed 	.word	0x08024eed
 8024ac0:	08024961 	.word	0x08024961
 8024ac4:	08024bd3 	.word	0x08024bd3
 8024ac8:	08024f51 	.word	0x08024f51
 8024acc:	08025057 	.word	0x08025057
 8024ad0:	08025071 	.word	0x08025071
 8024ad4:	08024961 	.word	0x08024961
 8024ad8:	0802512b 	.word	0x0802512b
 8024adc:	08024bdb 	.word	0x08024bdb
 8024ae0:	08025149 	.word	0x08025149
 8024ae4:	080251b7 	.word	0x080251b7
 8024ae8:	69b3      	ldr	r3, [r6, #24]
 8024aea:	4aa9      	ldr	r2, [pc, #676]	; (8024d90 <__strftime.isra.0+0x494>)
 8024aec:	3318      	adds	r3, #24
 8024aee:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8024af2:	4648      	mov	r0, r9
 8024af4:	f7db fbae 	bl	8000254 <strlen>
 8024af8:	f109 39ff 	add.w	r9, r9, #4294967295
 8024afc:	4420      	add	r0, r4
 8024afe:	1e6b      	subs	r3, r5, #1
 8024b00:	42a0      	cmp	r0, r4
 8024b02:	d107      	bne.n	8024b14 <__strftime.isra.0+0x218>
 8024b04:	f898 3000 	ldrb.w	r3, [r8]
 8024b08:	2b00      	cmp	r3, #0
 8024b0a:	f000 83be 	beq.w	802528a <__strftime.isra.0+0x98e>
 8024b0e:	f108 0201 	add.w	r2, r8, #1
 8024b12:	e6fc      	b.n	802490e <__strftime.isra.0+0x12>
 8024b14:	42a3      	cmp	r3, r4
 8024b16:	f67f af23 	bls.w	8024960 <__strftime.isra.0+0x64>
 8024b1a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024b1e:	553a      	strb	r2, [r7, r4]
 8024b20:	3401      	adds	r4, #1
 8024b22:	e7ed      	b.n	8024b00 <__strftime.isra.0+0x204>
 8024b24:	69b2      	ldr	r2, [r6, #24]
 8024b26:	4b9a      	ldr	r3, [pc, #616]	; (8024d90 <__strftime.isra.0+0x494>)
 8024b28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024b2c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8024b30:	4648      	mov	r0, r9
 8024b32:	f7db fb8f 	bl	8000254 <strlen>
 8024b36:	f109 39ff 	add.w	r9, r9, #4294967295
 8024b3a:	4420      	add	r0, r4
 8024b3c:	1e6b      	subs	r3, r5, #1
 8024b3e:	42a0      	cmp	r0, r4
 8024b40:	d0e0      	beq.n	8024b04 <__strftime.isra.0+0x208>
 8024b42:	42a3      	cmp	r3, r4
 8024b44:	f67f af0c 	bls.w	8024960 <__strftime.isra.0+0x64>
 8024b48:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024b4c:	553a      	strb	r2, [r7, r4]
 8024b4e:	3401      	adds	r4, #1
 8024b50:	e7f5      	b.n	8024b3e <__strftime.isra.0+0x242>
 8024b52:	4b8f      	ldr	r3, [pc, #572]	; (8024d90 <__strftime.isra.0+0x494>)
 8024b54:	6932      	ldr	r2, [r6, #16]
 8024b56:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8024b5a:	4648      	mov	r0, r9
 8024b5c:	f7db fb7a 	bl	8000254 <strlen>
 8024b60:	f109 39ff 	add.w	r9, r9, #4294967295
 8024b64:	4420      	add	r0, r4
 8024b66:	1e6b      	subs	r3, r5, #1
 8024b68:	42a0      	cmp	r0, r4
 8024b6a:	d0cb      	beq.n	8024b04 <__strftime.isra.0+0x208>
 8024b6c:	42a3      	cmp	r3, r4
 8024b6e:	f67f aef7 	bls.w	8024960 <__strftime.isra.0+0x64>
 8024b72:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024b76:	553a      	strb	r2, [r7, r4]
 8024b78:	3401      	adds	r4, #1
 8024b7a:	e7f5      	b.n	8024b68 <__strftime.isra.0+0x26c>
 8024b7c:	6933      	ldr	r3, [r6, #16]
 8024b7e:	4a84      	ldr	r2, [pc, #528]	; (8024d90 <__strftime.isra.0+0x494>)
 8024b80:	330c      	adds	r3, #12
 8024b82:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8024b86:	4648      	mov	r0, r9
 8024b88:	f7db fb64 	bl	8000254 <strlen>
 8024b8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8024b90:	4420      	add	r0, r4
 8024b92:	1e6b      	subs	r3, r5, #1
 8024b94:	42a0      	cmp	r0, r4
 8024b96:	d0b5      	beq.n	8024b04 <__strftime.isra.0+0x208>
 8024b98:	42a3      	cmp	r3, r4
 8024b9a:	f67f aee1 	bls.w	8024960 <__strftime.isra.0+0x64>
 8024b9e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8024ba2:	553a      	strb	r2, [r7, r4]
 8024ba4:	3401      	adds	r4, #1
 8024ba6:	e7f5      	b.n	8024b94 <__strftime.isra.0+0x298>
 8024ba8:	4b79      	ldr	r3, [pc, #484]	; (8024d90 <__strftime.isra.0+0x494>)
 8024baa:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8024bae:	4648      	mov	r0, r9
 8024bb0:	f7db fb50 	bl	8000254 <strlen>
 8024bb4:	f899 3000 	ldrb.w	r3, [r9]
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d0a3      	beq.n	8024b04 <__strftime.isra.0+0x208>
 8024bbc:	4633      	mov	r3, r6
 8024bbe:	464a      	mov	r2, r9
 8024bc0:	1b29      	subs	r1, r5, r4
 8024bc2:	1938      	adds	r0, r7, r4
 8024bc4:	f7ff fe9a 	bl	80248fc <__strftime.isra.0>
 8024bc8:	2800      	cmp	r0, #0
 8024bca:	f77f aec9 	ble.w	8024960 <__strftime.isra.0+0x64>
 8024bce:	4404      	add	r4, r0
 8024bd0:	e798      	b.n	8024b04 <__strftime.isra.0+0x208>
 8024bd2:	4b6f      	ldr	r3, [pc, #444]	; (8024d90 <__strftime.isra.0+0x494>)
 8024bd4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8024bd8:	e7e9      	b.n	8024bae <__strftime.isra.0+0x2b2>
 8024bda:	4b6d      	ldr	r3, [pc, #436]	; (8024d90 <__strftime.isra.0+0x494>)
 8024bdc:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8024be0:	e7e5      	b.n	8024bae <__strftime.isra.0+0x2b2>
 8024be2:	4b6b      	ldr	r3, [pc, #428]	; (8024d90 <__strftime.isra.0+0x494>)
 8024be4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8024be8:	e7e1      	b.n	8024bae <__strftime.isra.0+0x2b2>
 8024bea:	496a      	ldr	r1, [pc, #424]	; (8024d94 <__strftime.isra.0+0x498>)
 8024bec:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8024bf0:	458a      	cmp	sl, r1
 8024bf2:	bfac      	ite	ge
 8024bf4:	2100      	movge	r1, #0
 8024bf6:	2101      	movlt	r1, #1
 8024bf8:	f1ba 0f00 	cmp.w	sl, #0
 8024bfc:	db11      	blt.n	8024c22 <__strftime.isra.0+0x326>
 8024bfe:	2064      	movs	r0, #100	; 0x64
 8024c00:	fb9a f0f0 	sdiv	r0, sl, r0
 8024c04:	3013      	adds	r0, #19
 8024c06:	f1bb 0f00 	cmp.w	fp, #0
 8024c0a:	d014      	beq.n	8024c36 <__strftime.isra.0+0x33a>
 8024c0c:	2863      	cmp	r0, #99	; 0x63
 8024c0e:	dd27      	ble.n	8024c60 <__strftime.isra.0+0x364>
 8024c10:	4b61      	ldr	r3, [pc, #388]	; (8024d98 <__strftime.isra.0+0x49c>)
 8024c12:	4a62      	ldr	r2, [pc, #392]	; (8024d9c <__strftime.isra.0+0x4a0>)
 8024c14:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024c18:	bf18      	it	ne
 8024c1a:	461a      	movne	r2, r3
 8024c1c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8024db8 <__strftime.isra.0+0x4bc>
 8024c20:	e00c      	b.n	8024c3c <__strftime.isra.0+0x340>
 8024c22:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8024c26:	9103      	str	r1, [sp, #12]
 8024c28:	f000 ff6e 	bl	8025b08 <abs>
 8024c2c:	2264      	movs	r2, #100	; 0x64
 8024c2e:	9903      	ldr	r1, [sp, #12]
 8024c30:	fb90 f0f2 	sdiv	r0, r0, r2
 8024c34:	e7e7      	b.n	8024c06 <__strftime.isra.0+0x30a>
 8024c36:	4a58      	ldr	r2, [pc, #352]	; (8024d98 <__strftime.isra.0+0x49c>)
 8024c38:	f8df c180 	ldr.w	ip, [pc, #384]	; 8024dbc <__strftime.isra.0+0x4c0>
 8024c3c:	4b58      	ldr	r3, [pc, #352]	; (8024da0 <__strftime.isra.0+0x4a4>)
 8024c3e:	9001      	str	r0, [sp, #4]
 8024c40:	f1b9 0f02 	cmp.w	r9, #2
 8024c44:	bf2c      	ite	cs
 8024c46:	ebc1 0109 	rsbcs	r1, r1, r9
 8024c4a:	f1c1 0102 	rsbcc	r1, r1, #2
 8024c4e:	9100      	str	r1, [sp, #0]
 8024c50:	4950      	ldr	r1, [pc, #320]	; (8024d94 <__strftime.isra.0+0x498>)
 8024c52:	458a      	cmp	sl, r1
 8024c54:	bfa8      	it	ge
 8024c56:	4613      	movge	r3, r2
 8024c58:	4662      	mov	r2, ip
 8024c5a:	1b29      	subs	r1, r5, r4
 8024c5c:	1938      	adds	r0, r7, r4
 8024c5e:	e028      	b.n	8024cb2 <__strftime.isra.0+0x3b6>
 8024c60:	4a4d      	ldr	r2, [pc, #308]	; (8024d98 <__strftime.isra.0+0x49c>)
 8024c62:	e7db      	b.n	8024c1c <__strftime.isra.0+0x320>
 8024c64:	494f      	ldr	r1, [pc, #316]	; (8024da4 <__strftime.isra.0+0x4a8>)
 8024c66:	4a50      	ldr	r2, [pc, #320]	; (8024da8 <__strftime.isra.0+0x4ac>)
 8024c68:	68f3      	ldr	r3, [r6, #12]
 8024c6a:	2864      	cmp	r0, #100	; 0x64
 8024c6c:	bf08      	it	eq
 8024c6e:	460a      	moveq	r2, r1
 8024c70:	1b29      	subs	r1, r5, r4
 8024c72:	1938      	adds	r0, r7, r4
 8024c74:	f7ff fcfc 	bl	8024670 <sniprintf>
 8024c78:	2800      	cmp	r0, #0
 8024c7a:	f6ff ae71 	blt.w	8024960 <__strftime.isra.0+0x64>
 8024c7e:	4404      	add	r4, r0
 8024c80:	42a5      	cmp	r5, r4
 8024c82:	f63f af3f 	bhi.w	8024b04 <__strftime.isra.0+0x208>
 8024c86:	e66b      	b.n	8024960 <__strftime.isra.0+0x64>
 8024c88:	6970      	ldr	r0, [r6, #20]
 8024c8a:	6933      	ldr	r3, [r6, #16]
 8024c8c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8024c90:	2800      	cmp	r0, #0
 8024c92:	eb07 0904 	add.w	r9, r7, r4
 8024c96:	eba5 0104 	sub.w	r1, r5, r4
 8024c9a:	f103 0301 	add.w	r3, r3, #1
 8024c9e:	db0b      	blt.n	8024cb8 <__strftime.isra.0+0x3bc>
 8024ca0:	2264      	movs	r2, #100	; 0x64
 8024ca2:	fb90 fcf2 	sdiv	ip, r0, r2
 8024ca6:	fb02 001c 	mls	r0, r2, ip, r0
 8024caa:	4a40      	ldr	r2, [pc, #256]	; (8024dac <__strftime.isra.0+0x4b0>)
 8024cac:	e9cd a000 	strd	sl, r0, [sp]
 8024cb0:	4648      	mov	r0, r9
 8024cb2:	f7ff fcdd 	bl	8024670 <sniprintf>
 8024cb6:	e7df      	b.n	8024c78 <__strftime.isra.0+0x37c>
 8024cb8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024cbc:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8024cc0:	f000 ff22 	bl	8025b08 <abs>
 8024cc4:	2264      	movs	r2, #100	; 0x64
 8024cc6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8024cca:	fb90 fcf2 	sdiv	ip, r0, r2
 8024cce:	fb0c 0012 	mls	r0, ip, r2, r0
 8024cd2:	e7ea      	b.n	8024caa <__strftime.isra.0+0x3ae>
 8024cd4:	2225      	movs	r2, #37	; 0x25
 8024cd6:	f88d 2018 	strb.w	r2, [sp, #24]
 8024cda:	f1bb 0f00 	cmp.w	fp, #0
 8024cde:	d011      	beq.n	8024d04 <__strftime.isra.0+0x408>
 8024ce0:	f1b9 0f06 	cmp.w	r9, #6
 8024ce4:	bf38      	it	cc
 8024ce6:	f04f 0906 	movcc.w	r9, #6
 8024cea:	f1b9 0306 	subs.w	r3, r9, #6
 8024cee:	f88d b019 	strb.w	fp, [sp, #25]
 8024cf2:	d10c      	bne.n	8024d0e <__strftime.isra.0+0x412>
 8024cf4:	f10d 001a 	add.w	r0, sp, #26
 8024cf8:	492d      	ldr	r1, [pc, #180]	; (8024db0 <__strftime.isra.0+0x4b4>)
 8024cfa:	f7ff fd94 	bl	8024826 <strcpy>
 8024cfe:	4633      	mov	r3, r6
 8024d00:	aa06      	add	r2, sp, #24
 8024d02:	e75d      	b.n	8024bc0 <__strftime.isra.0+0x2c4>
 8024d04:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8024d08:	f04f 090a 	mov.w	r9, #10
 8024d0c:	e7ed      	b.n	8024cea <__strftime.isra.0+0x3ee>
 8024d0e:	4a29      	ldr	r2, [pc, #164]	; (8024db4 <__strftime.isra.0+0x4b8>)
 8024d10:	211e      	movs	r1, #30
 8024d12:	f10d 001a 	add.w	r0, sp, #26
 8024d16:	f7ff fcab 	bl	8024670 <sniprintf>
 8024d1a:	2800      	cmp	r0, #0
 8024d1c:	ddea      	ble.n	8024cf4 <__strftime.isra.0+0x3f8>
 8024d1e:	f10d 031a 	add.w	r3, sp, #26
 8024d22:	4418      	add	r0, r3
 8024d24:	e7e8      	b.n	8024cf8 <__strftime.isra.0+0x3fc>
 8024d26:	4630      	mov	r0, r6
 8024d28:	f7ff fd86 	bl	8024838 <iso_year_adjust>
 8024d2c:	4681      	mov	r9, r0
 8024d2e:	6970      	ldr	r0, [r6, #20]
 8024d30:	2800      	cmp	r0, #0
 8024d32:	db11      	blt.n	8024d58 <__strftime.isra.0+0x45c>
 8024d34:	2364      	movs	r3, #100	; 0x64
 8024d36:	fb90 f2f3 	sdiv	r2, r0, r3
 8024d3a:	fb03 0012 	mls	r0, r3, r2, r0
 8024d3e:	2264      	movs	r2, #100	; 0x64
 8024d40:	4481      	add	r9, r0
 8024d42:	fb99 f3f2 	sdiv	r3, r9, r2
 8024d46:	fb02 9913 	mls	r9, r2, r3, r9
 8024d4a:	4491      	add	r9, r2
 8024d4c:	fbb9 f3f2 	udiv	r3, r9, r2
 8024d50:	fb02 9313 	mls	r3, r2, r3, r9
 8024d54:	4a13      	ldr	r2, [pc, #76]	; (8024da4 <__strftime.isra.0+0x4a8>)
 8024d56:	e78b      	b.n	8024c70 <__strftime.isra.0+0x374>
 8024d58:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024d5c:	f000 fed4 	bl	8025b08 <abs>
 8024d60:	2364      	movs	r3, #100	; 0x64
 8024d62:	f1b9 0f00 	cmp.w	r9, #0
 8024d66:	fb90 f2f3 	sdiv	r2, r0, r3
 8024d6a:	fb02 0013 	mls	r0, r2, r3, r0
 8024d6e:	da07      	bge.n	8024d80 <__strftime.isra.0+0x484>
 8024d70:	6972      	ldr	r2, [r6, #20]
 8024d72:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8024d76:	429a      	cmp	r2, r3
 8024d78:	bfb8      	it	lt
 8024d7a:	f04f 0901 	movlt.w	r9, #1
 8024d7e:	e7de      	b.n	8024d3e <__strftime.isra.0+0x442>
 8024d80:	d0dd      	beq.n	8024d3e <__strftime.isra.0+0x442>
 8024d82:	6972      	ldr	r2, [r6, #20]
 8024d84:	4b03      	ldr	r3, [pc, #12]	; (8024d94 <__strftime.isra.0+0x498>)
 8024d86:	429a      	cmp	r2, r3
 8024d88:	bfb8      	it	lt
 8024d8a:	f04f 39ff 	movlt.w	r9, #4294967295
 8024d8e:	e7d6      	b.n	8024d3e <__strftime.isra.0+0x442>
 8024d90:	08044ab8 	.word	0x08044ab8
 8024d94:	fffff894 	.word	0xfffff894
 8024d98:	08044c6b 	.word	0x08044c6b
 8024d9c:	08044940 	.word	0x08044940
 8024da0:	08044ec6 	.word	0x08044ec6
 8024da4:	08044950 	.word	0x08044950
 8024da8:	08044942 	.word	0x08044942
 8024dac:	08044946 	.word	0x08044946
 8024db0:	08044959 	.word	0x08044959
 8024db4:	08044955 	.word	0x08044955
 8024db8:	08044938 	.word	0x08044938
 8024dbc:	08044931 	.word	0x08044931
 8024dc0:	6971      	ldr	r1, [r6, #20]
 8024dc2:	4ab6      	ldr	r2, [pc, #728]	; (802509c <__strftime.isra.0+0x7a0>)
 8024dc4:	4291      	cmp	r1, r2
 8024dc6:	bfac      	ite	ge
 8024dc8:	2300      	movge	r3, #0
 8024dca:	2301      	movlt	r3, #1
 8024dcc:	4630      	mov	r0, r6
 8024dce:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8024dd2:	f7ff fd31 	bl	8024838 <iso_year_adjust>
 8024dd6:	9904      	ldr	r1, [sp, #16]
 8024dd8:	2900      	cmp	r1, #0
 8024dda:	4682      	mov	sl, r0
 8024ddc:	db2c      	blt.n	8024e38 <__strftime.isra.0+0x53c>
 8024dde:	2264      	movs	r2, #100	; 0x64
 8024de0:	fb91 f2f2 	sdiv	r2, r1, r2
 8024de4:	3213      	adds	r2, #19
 8024de6:	6970      	ldr	r0, [r6, #20]
 8024de8:	2800      	cmp	r0, #0
 8024dea:	db30      	blt.n	8024e4e <__strftime.isra.0+0x552>
 8024dec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024df0:	fb90 fefc 	sdiv	lr, r0, ip
 8024df4:	fb0c 001e 	mls	r0, ip, lr, r0
 8024df8:	f1ba 0f00 	cmp.w	sl, #0
 8024dfc:	da36      	bge.n	8024e6c <__strftime.isra.0+0x570>
 8024dfe:	6971      	ldr	r1, [r6, #20]
 8024e00:	4ba7      	ldr	r3, [pc, #668]	; (80250a0 <__strftime.isra.0+0x7a4>)
 8024e02:	4299      	cmp	r1, r3
 8024e04:	db3d      	blt.n	8024e82 <__strftime.isra.0+0x586>
 8024e06:	4482      	add	sl, r0
 8024e08:	f1ba 3fff 	cmp.w	sl, #4294967295
 8024e0c:	d13e      	bne.n	8024e8c <__strftime.isra.0+0x590>
 8024e0e:	3a01      	subs	r2, #1
 8024e10:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8024e14:	9b03      	ldr	r3, [sp, #12]
 8024e16:	2064      	movs	r0, #100	; 0x64
 8024e18:	fb00 aa02 	mla	sl, r0, r2, sl
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	f000 81ad 	beq.w	802517c <__strftime.isra.0+0x880>
 8024e22:	222d      	movs	r2, #45	; 0x2d
 8024e24:	f88d 2018 	strb.w	r2, [sp, #24]
 8024e28:	f1b9 0f00 	cmp.w	r9, #0
 8024e2c:	d001      	beq.n	8024e32 <__strftime.isra.0+0x536>
 8024e2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024e32:	f10d 0219 	add.w	r2, sp, #25
 8024e36:	e1ac      	b.n	8025192 <__strftime.isra.0+0x896>
 8024e38:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8024e3c:	9104      	str	r1, [sp, #16]
 8024e3e:	f000 fe63 	bl	8025b08 <abs>
 8024e42:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024e46:	9904      	ldr	r1, [sp, #16]
 8024e48:	fb90 f2fc 	sdiv	r2, r0, ip
 8024e4c:	e7cb      	b.n	8024de6 <__strftime.isra.0+0x4ea>
 8024e4e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024e52:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8024e56:	f000 fe57 	bl	8025b08 <abs>
 8024e5a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8024e5e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8024e62:	fb90 fefc 	sdiv	lr, r0, ip
 8024e66:	fb0e 001c 	mls	r0, lr, ip, r0
 8024e6a:	e7c5      	b.n	8024df8 <__strftime.isra.0+0x4fc>
 8024e6c:	d0cb      	beq.n	8024e06 <__strftime.isra.0+0x50a>
 8024e6e:	4b8b      	ldr	r3, [pc, #556]	; (802509c <__strftime.isra.0+0x7a0>)
 8024e70:	4299      	cmp	r1, r3
 8024e72:	bfb4      	ite	lt
 8024e74:	2301      	movlt	r3, #1
 8024e76:	2300      	movge	r3, #0
 8024e78:	9303      	str	r3, [sp, #12]
 8024e7a:	bfb8      	it	lt
 8024e7c:	f04f 3aff 	movlt.w	sl, #4294967295
 8024e80:	e7c1      	b.n	8024e06 <__strftime.isra.0+0x50a>
 8024e82:	f04f 0a01 	mov.w	sl, #1
 8024e86:	f8cd a00c 	str.w	sl, [sp, #12]
 8024e8a:	e7bc      	b.n	8024e06 <__strftime.isra.0+0x50a>
 8024e8c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8024e90:	bf04      	itt	eq
 8024e92:	3201      	addeq	r2, #1
 8024e94:	f04f 0a00 	moveq.w	sl, #0
 8024e98:	e7bc      	b.n	8024e14 <__strftime.isra.0+0x518>
 8024e9a:	4982      	ldr	r1, [pc, #520]	; (80250a4 <__strftime.isra.0+0x7a8>)
 8024e9c:	4a82      	ldr	r2, [pc, #520]	; (80250a8 <__strftime.isra.0+0x7ac>)
 8024e9e:	68b3      	ldr	r3, [r6, #8]
 8024ea0:	286b      	cmp	r0, #107	; 0x6b
 8024ea2:	bf08      	it	eq
 8024ea4:	460a      	moveq	r2, r1
 8024ea6:	e6e3      	b.n	8024c70 <__strftime.isra.0+0x374>
 8024ea8:	68b3      	ldr	r3, [r6, #8]
 8024eaa:	b163      	cbz	r3, 8024ec6 <__strftime.isra.0+0x5ca>
 8024eac:	2b0c      	cmp	r3, #12
 8024eae:	d004      	beq.n	8024eba <__strftime.isra.0+0x5be>
 8024eb0:	210c      	movs	r1, #12
 8024eb2:	fb93 f2f1 	sdiv	r2, r3, r1
 8024eb6:	fb01 3312 	mls	r3, r1, r2, r3
 8024eba:	497b      	ldr	r1, [pc, #492]	; (80250a8 <__strftime.isra.0+0x7ac>)
 8024ebc:	4a79      	ldr	r2, [pc, #484]	; (80250a4 <__strftime.isra.0+0x7a8>)
 8024ebe:	2849      	cmp	r0, #73	; 0x49
 8024ec0:	bf08      	it	eq
 8024ec2:	460a      	moveq	r2, r1
 8024ec4:	e6d4      	b.n	8024c70 <__strftime.isra.0+0x374>
 8024ec6:	230c      	movs	r3, #12
 8024ec8:	e7f7      	b.n	8024eba <__strftime.isra.0+0x5be>
 8024eca:	69f3      	ldr	r3, [r6, #28]
 8024ecc:	4a77      	ldr	r2, [pc, #476]	; (80250ac <__strftime.isra.0+0x7b0>)
 8024ece:	3301      	adds	r3, #1
 8024ed0:	e6ce      	b.n	8024c70 <__strftime.isra.0+0x374>
 8024ed2:	6933      	ldr	r3, [r6, #16]
 8024ed4:	3301      	adds	r3, #1
 8024ed6:	e73d      	b.n	8024d54 <__strftime.isra.0+0x458>
 8024ed8:	6873      	ldr	r3, [r6, #4]
 8024eda:	e73b      	b.n	8024d54 <__strftime.isra.0+0x458>
 8024edc:	1e6b      	subs	r3, r5, #1
 8024ede:	429c      	cmp	r4, r3
 8024ee0:	f4bf ad3e 	bcs.w	8024960 <__strftime.isra.0+0x64>
 8024ee4:	230a      	movs	r3, #10
 8024ee6:	553b      	strb	r3, [r7, r4]
 8024ee8:	3401      	adds	r4, #1
 8024eea:	e60b      	b.n	8024b04 <__strftime.isra.0+0x208>
 8024eec:	68b3      	ldr	r3, [r6, #8]
 8024eee:	2b0b      	cmp	r3, #11
 8024ef0:	4b6f      	ldr	r3, [pc, #444]	; (80250b0 <__strftime.isra.0+0x7b4>)
 8024ef2:	bfd4      	ite	le
 8024ef4:	2200      	movle	r2, #0
 8024ef6:	2201      	movgt	r2, #1
 8024ef8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024efc:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8024f00:	4648      	mov	r0, r9
 8024f02:	f7db f9a7 	bl	8000254 <strlen>
 8024f06:	f109 32ff 	add.w	r2, r9, #4294967295
 8024f0a:	4420      	add	r0, r4
 8024f0c:	f105 3cff 	add.w	ip, r5, #4294967295
 8024f10:	42a0      	cmp	r0, r4
 8024f12:	f43f adf7 	beq.w	8024b04 <__strftime.isra.0+0x208>
 8024f16:	45a4      	cmp	ip, r4
 8024f18:	f67f ad22 	bls.w	8024960 <__strftime.isra.0+0x64>
 8024f1c:	f898 1000 	ldrb.w	r1, [r8]
 8024f20:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8024f24:	2950      	cmp	r1, #80	; 0x50
 8024f26:	d107      	bne.n	8024f38 <__strftime.isra.0+0x63c>
 8024f28:	4962      	ldr	r1, [pc, #392]	; (80250b4 <__strftime.isra.0+0x7b8>)
 8024f2a:	5cc9      	ldrb	r1, [r1, r3]
 8024f2c:	f001 0103 	and.w	r1, r1, #3
 8024f30:	2901      	cmp	r1, #1
 8024f32:	bf08      	it	eq
 8024f34:	3320      	addeq	r3, #32
 8024f36:	b2db      	uxtb	r3, r3
 8024f38:	553b      	strb	r3, [r7, r4]
 8024f3a:	3401      	adds	r4, #1
 8024f3c:	e7e8      	b.n	8024f10 <__strftime.isra.0+0x614>
 8024f3e:	6873      	ldr	r3, [r6, #4]
 8024f40:	9300      	str	r3, [sp, #0]
 8024f42:	4a5d      	ldr	r2, [pc, #372]	; (80250b8 <__strftime.isra.0+0x7bc>)
 8024f44:	68b3      	ldr	r3, [r6, #8]
 8024f46:	1b29      	subs	r1, r5, r4
 8024f48:	1938      	adds	r0, r7, r4
 8024f4a:	f7ff fb91 	bl	8024670 <sniprintf>
 8024f4e:	e693      	b.n	8024c78 <__strftime.isra.0+0x37c>
 8024f50:	6a33      	ldr	r3, [r6, #32]
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	db7a      	blt.n	802504c <__strftime.isra.0+0x750>
 8024f56:	f000 fb73 	bl	8025640 <__tz_lock>
 8024f5a:	9b02      	ldr	r3, [sp, #8]
 8024f5c:	b90b      	cbnz	r3, 8024f62 <__strftime.isra.0+0x666>
 8024f5e:	f000 fb7b 	bl	8025658 <_tzset_unlocked>
 8024f62:	f001 fd79 	bl	8026a58 <__gettzinfo>
 8024f66:	6a33      	ldr	r3, [r6, #32]
 8024f68:	2b00      	cmp	r3, #0
 8024f6a:	bfd4      	ite	le
 8024f6c:	2200      	movle	r2, #0
 8024f6e:	2201      	movgt	r2, #1
 8024f70:	2328      	movs	r3, #40	; 0x28
 8024f72:	fb02 3303 	mla	r3, r2, r3, r3
 8024f76:	58c3      	ldr	r3, [r0, r3]
 8024f78:	f1c3 0900 	rsb	r9, r3, #0
 8024f7c:	f000 fb66 	bl	802564c <__tz_unlock>
 8024f80:	2301      	movs	r3, #1
 8024f82:	9302      	str	r3, [sp, #8]
 8024f84:	6972      	ldr	r2, [r6, #20]
 8024f86:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8024f8a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8024f8e:	f16c 0c00 	sbc.w	ip, ip, #0
 8024f92:	f1bc 0f00 	cmp.w	ip, #0
 8024f96:	eba5 0104 	sub.w	r1, r5, r4
 8024f9a:	eb07 0004 	add.w	r0, r7, r4
 8024f9e:	da02      	bge.n	8024fa6 <__strftime.isra.0+0x6aa>
 8024fa0:	3303      	adds	r3, #3
 8024fa2:	f14c 0c00 	adc.w	ip, ip, #0
 8024fa6:	089b      	lsrs	r3, r3, #2
 8024fa8:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8024fac:	f102 3aff 	add.w	sl, r2, #4294967295
 8024fb0:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8024fb4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8024fb8:	fb9a fefe 	sdiv	lr, sl, lr
 8024fbc:	ebb3 030e 	subs.w	r3, r3, lr
 8024fc0:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8024fc4:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8024fc8:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8024fcc:	fb9a fefe 	sdiv	lr, sl, lr
 8024fd0:	eb13 030e 	adds.w	r3, r3, lr
 8024fd4:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8024fd8:	3a46      	subs	r2, #70	; 0x46
 8024fda:	f240 1c6d 	movw	ip, #365	; 0x16d
 8024fde:	fb0c f202 	mul.w	r2, ip, r2
 8024fe2:	189b      	adds	r3, r3, r2
 8024fe4:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8024fe8:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8024fec:	f04f 0c18 	mov.w	ip, #24
 8024ff0:	eb13 030e 	adds.w	r3, r3, lr
 8024ff4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8024ff8:	fba3 3e0c 	umull	r3, lr, r3, ip
 8024ffc:	fb0c e202 	mla	r2, ip, r2, lr
 8025000:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8025004:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8025008:	eb13 030e 	adds.w	r3, r3, lr
 802500c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8025010:	fba3 320c 	umull	r3, r2, r3, ip
 8025014:	fb0c 220e 	mla	r2, ip, lr, r2
 8025018:	f8d6 e004 	ldr.w	lr, [r6, #4]
 802501c:	eb13 030e 	adds.w	r3, r3, lr
 8025020:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025024:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025028:	fb0c e202 	mla	r2, ip, r2, lr
 802502c:	f8d6 e000 	ldr.w	lr, [r6]
 8025030:	eb13 030e 	adds.w	r3, r3, lr
 8025034:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025038:	ebb3 0309 	subs.w	r3, r3, r9
 802503c:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8025040:	e9cd 3200 	strd	r3, r2, [sp]
 8025044:	4a1d      	ldr	r2, [pc, #116]	; (80250bc <__strftime.isra.0+0x7c0>)
 8025046:	f7ff fb13 	bl	8024670 <sniprintf>
 802504a:	e615      	b.n	8024c78 <__strftime.isra.0+0x37c>
 802504c:	f04f 0900 	mov.w	r9, #0
 8025050:	e798      	b.n	8024f84 <__strftime.isra.0+0x688>
 8025052:	6833      	ldr	r3, [r6, #0]
 8025054:	e67e      	b.n	8024d54 <__strftime.isra.0+0x458>
 8025056:	1e6b      	subs	r3, r5, #1
 8025058:	429c      	cmp	r4, r3
 802505a:	f4bf ac81 	bcs.w	8024960 <__strftime.isra.0+0x64>
 802505e:	2309      	movs	r3, #9
 8025060:	e741      	b.n	8024ee6 <__strftime.isra.0+0x5ea>
 8025062:	6833      	ldr	r3, [r6, #0]
 8025064:	9301      	str	r3, [sp, #4]
 8025066:	6873      	ldr	r3, [r6, #4]
 8025068:	9300      	str	r3, [sp, #0]
 802506a:	4a15      	ldr	r2, [pc, #84]	; (80250c0 <__strftime.isra.0+0x7c4>)
 802506c:	68b3      	ldr	r3, [r6, #8]
 802506e:	e5f4      	b.n	8024c5a <__strftime.isra.0+0x35e>
 8025070:	1e6b      	subs	r3, r5, #1
 8025072:	429c      	cmp	r4, r3
 8025074:	f4bf ac74 	bcs.w	8024960 <__strftime.isra.0+0x64>
 8025078:	69b3      	ldr	r3, [r6, #24]
 802507a:	1c62      	adds	r2, r4, #1
 802507c:	b91b      	cbnz	r3, 8025086 <__strftime.isra.0+0x78a>
 802507e:	2337      	movs	r3, #55	; 0x37
 8025080:	553b      	strb	r3, [r7, r4]
 8025082:	4614      	mov	r4, r2
 8025084:	e53e      	b.n	8024b04 <__strftime.isra.0+0x208>
 8025086:	3330      	adds	r3, #48	; 0x30
 8025088:	e7fa      	b.n	8025080 <__strftime.isra.0+0x784>
 802508a:	69f3      	ldr	r3, [r6, #28]
 802508c:	69b2      	ldr	r2, [r6, #24]
 802508e:	3307      	adds	r3, #7
 8025090:	1a9b      	subs	r3, r3, r2
 8025092:	2207      	movs	r2, #7
 8025094:	fb93 f3f2 	sdiv	r3, r3, r2
 8025098:	e65c      	b.n	8024d54 <__strftime.isra.0+0x458>
 802509a:	bf00      	nop
 802509c:	fffff894 	.word	0xfffff894
 80250a0:	fffff895 	.word	0xfffff895
 80250a4:	08044942 	.word	0x08044942
 80250a8:	08044950 	.word	0x08044950
 80250ac:	08044965 	.word	0x08044965
 80250b0:	08044ab8 	.word	0x08044ab8
 80250b4:	08044609 	.word	0x08044609
 80250b8:	08044974 	.word	0x08044974
 80250bc:	0804496a 	.word	0x0804496a
 80250c0:	0804496f 	.word	0x0804496f
 80250c4:	4630      	mov	r0, r6
 80250c6:	f7ff fbb7 	bl	8024838 <iso_year_adjust>
 80250ca:	69b2      	ldr	r2, [r6, #24]
 80250cc:	b132      	cbz	r2, 80250dc <__strftime.isra.0+0x7e0>
 80250ce:	3a01      	subs	r2, #1
 80250d0:	2800      	cmp	r0, #0
 80250d2:	dc28      	bgt.n	8025126 <__strftime.isra.0+0x82a>
 80250d4:	69f3      	ldr	r3, [r6, #28]
 80250d6:	d103      	bne.n	80250e0 <__strftime.isra.0+0x7e4>
 80250d8:	330a      	adds	r3, #10
 80250da:	e7d9      	b.n	8025090 <__strftime.isra.0+0x794>
 80250dc:	2206      	movs	r2, #6
 80250de:	e7f7      	b.n	80250d0 <__strftime.isra.0+0x7d4>
 80250e0:	6971      	ldr	r1, [r6, #20]
 80250e2:	2900      	cmp	r1, #0
 80250e4:	eba2 0203 	sub.w	r2, r2, r3
 80250e8:	f240 736b 	movw	r3, #1899	; 0x76b
 80250ec:	bfa8      	it	ge
 80250ee:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80250f2:	440b      	add	r3, r1
 80250f4:	0799      	lsls	r1, r3, #30
 80250f6:	d105      	bne.n	8025104 <__strftime.isra.0+0x808>
 80250f8:	2064      	movs	r0, #100	; 0x64
 80250fa:	fb93 f1f0 	sdiv	r1, r3, r0
 80250fe:	fb00 3111 	mls	r1, r0, r1, r3
 8025102:	b971      	cbnz	r1, 8025122 <__strftime.isra.0+0x826>
 8025104:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8025108:	fb93 f0f1 	sdiv	r0, r3, r1
 802510c:	fb01 3310 	mls	r3, r1, r0, r3
 8025110:	fab3 f383 	clz	r3, r3
 8025114:	095b      	lsrs	r3, r3, #5
 8025116:	1ad3      	subs	r3, r2, r3
 8025118:	2b05      	cmp	r3, #5
 802511a:	bfb4      	ite	lt
 802511c:	2335      	movlt	r3, #53	; 0x35
 802511e:	2334      	movge	r3, #52	; 0x34
 8025120:	e618      	b.n	8024d54 <__strftime.isra.0+0x458>
 8025122:	2301      	movs	r3, #1
 8025124:	e7f7      	b.n	8025116 <__strftime.isra.0+0x81a>
 8025126:	2301      	movs	r3, #1
 8025128:	e614      	b.n	8024d54 <__strftime.isra.0+0x458>
 802512a:	1e6b      	subs	r3, r5, #1
 802512c:	429c      	cmp	r4, r3
 802512e:	f4bf ac17 	bcs.w	8024960 <__strftime.isra.0+0x64>
 8025132:	69b3      	ldr	r3, [r6, #24]
 8025134:	3330      	adds	r3, #48	; 0x30
 8025136:	e6d6      	b.n	8024ee6 <__strftime.isra.0+0x5ea>
 8025138:	69b2      	ldr	r2, [r6, #24]
 802513a:	b11a      	cbz	r2, 8025144 <__strftime.isra.0+0x848>
 802513c:	3a01      	subs	r2, #1
 802513e:	69f3      	ldr	r3, [r6, #28]
 8025140:	3307      	adds	r3, #7
 8025142:	e7a5      	b.n	8025090 <__strftime.isra.0+0x794>
 8025144:	2206      	movs	r2, #6
 8025146:	e7fa      	b.n	802513e <__strftime.isra.0+0x842>
 8025148:	6970      	ldr	r0, [r6, #20]
 802514a:	2800      	cmp	r0, #0
 802514c:	db05      	blt.n	802515a <__strftime.isra.0+0x85e>
 802514e:	2364      	movs	r3, #100	; 0x64
 8025150:	fb90 f2f3 	sdiv	r2, r0, r3
 8025154:	fb02 0313 	mls	r3, r2, r3, r0
 8025158:	e5fc      	b.n	8024d54 <__strftime.isra.0+0x458>
 802515a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802515e:	f000 fcd3 	bl	8025b08 <abs>
 8025162:	e7f4      	b.n	802514e <__strftime.isra.0+0x852>
 8025164:	6972      	ldr	r2, [r6, #20]
 8025166:	494c      	ldr	r1, [pc, #304]	; (8025298 <__strftime.isra.0+0x99c>)
 8025168:	428a      	cmp	r2, r1
 802516a:	da05      	bge.n	8025178 <__strftime.isra.0+0x87c>
 802516c:	202d      	movs	r0, #45	; 0x2d
 802516e:	f88d 0018 	strb.w	r0, [sp, #24]
 8025172:	eba1 0a02 	sub.w	sl, r1, r2
 8025176:	e657      	b.n	8024e28 <__strftime.isra.0+0x52c>
 8025178:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 802517c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025180:	d106      	bne.n	8025190 <__strftime.isra.0+0x894>
 8025182:	f242 720f 	movw	r2, #9999	; 0x270f
 8025186:	4592      	cmp	sl, r2
 8025188:	d902      	bls.n	8025190 <__strftime.isra.0+0x894>
 802518a:	f88d b018 	strb.w	fp, [sp, #24]
 802518e:	e64b      	b.n	8024e28 <__strftime.isra.0+0x52c>
 8025190:	aa06      	add	r2, sp, #24
 8025192:	2125      	movs	r1, #37	; 0x25
 8025194:	7011      	strb	r1, [r2, #0]
 8025196:	f1bb 0f00 	cmp.w	fp, #0
 802519a:	d108      	bne.n	80251ae <__strftime.isra.0+0x8b2>
 802519c:	1c50      	adds	r0, r2, #1
 802519e:	493f      	ldr	r1, [pc, #252]	; (802529c <__strftime.isra.0+0x9a0>)
 80251a0:	f7ff fb41 	bl	8024826 <strcpy>
 80251a4:	f8cd a000 	str.w	sl, [sp]
 80251a8:	464b      	mov	r3, r9
 80251aa:	aa06      	add	r2, sp, #24
 80251ac:	e6cb      	b.n	8024f46 <__strftime.isra.0+0x64a>
 80251ae:	2330      	movs	r3, #48	; 0x30
 80251b0:	1c90      	adds	r0, r2, #2
 80251b2:	7053      	strb	r3, [r2, #1]
 80251b4:	e7f3      	b.n	802519e <__strftime.isra.0+0x8a2>
 80251b6:	6a33      	ldr	r3, [r6, #32]
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	f6ff aca3 	blt.w	8024b04 <__strftime.isra.0+0x208>
 80251be:	f000 fa3f 	bl	8025640 <__tz_lock>
 80251c2:	9b02      	ldr	r3, [sp, #8]
 80251c4:	b90b      	cbnz	r3, 80251ca <__strftime.isra.0+0x8ce>
 80251c6:	f000 fa47 	bl	8025658 <_tzset_unlocked>
 80251ca:	f001 fc45 	bl	8026a58 <__gettzinfo>
 80251ce:	6a33      	ldr	r3, [r6, #32]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	bfd4      	ite	le
 80251d4:	2200      	movle	r2, #0
 80251d6:	2201      	movgt	r2, #1
 80251d8:	2328      	movs	r3, #40	; 0x28
 80251da:	fb02 3303 	mla	r3, r2, r3, r3
 80251de:	eb07 0a04 	add.w	sl, r7, r4
 80251e2:	58c3      	ldr	r3, [r0, r3]
 80251e4:	f1c3 0900 	rsb	r9, r3, #0
 80251e8:	f000 fa30 	bl	802564c <__tz_unlock>
 80251ec:	233c      	movs	r3, #60	; 0x3c
 80251ee:	fb99 f0f3 	sdiv	r0, r9, r3
 80251f2:	f001 fce1 	bl	8026bb8 <labs>
 80251f6:	233c      	movs	r3, #60	; 0x3c
 80251f8:	eba5 0b04 	sub.w	fp, r5, r4
 80251fc:	fb90 f2f3 	sdiv	r2, r0, r3
 8025200:	fb02 0013 	mls	r0, r2, r3, r0
 8025204:	9000      	str	r0, [sp, #0]
 8025206:	4a26      	ldr	r2, [pc, #152]	; (80252a0 <__strftime.isra.0+0x9a4>)
 8025208:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802520c:	4659      	mov	r1, fp
 802520e:	4650      	mov	r0, sl
 8025210:	fb99 f3f3 	sdiv	r3, r9, r3
 8025214:	f7ff fa2c 	bl	8024670 <sniprintf>
 8025218:	2800      	cmp	r0, #0
 802521a:	f6ff aba1 	blt.w	8024960 <__strftime.isra.0+0x64>
 802521e:	4404      	add	r4, r0
 8025220:	42a5      	cmp	r5, r4
 8025222:	f67f ab9d 	bls.w	8024960 <__strftime.isra.0+0x64>
 8025226:	2301      	movs	r3, #1
 8025228:	9302      	str	r3, [sp, #8]
 802522a:	e46b      	b.n	8024b04 <__strftime.isra.0+0x208>
 802522c:	6a33      	ldr	r3, [r6, #32]
 802522e:	2b00      	cmp	r3, #0
 8025230:	f6ff ac68 	blt.w	8024b04 <__strftime.isra.0+0x208>
 8025234:	f000 fa04 	bl	8025640 <__tz_lock>
 8025238:	9b02      	ldr	r3, [sp, #8]
 802523a:	b90b      	cbnz	r3, 8025240 <__strftime.isra.0+0x944>
 802523c:	f000 fa0c 	bl	8025658 <_tzset_unlocked>
 8025240:	6a33      	ldr	r3, [r6, #32]
 8025242:	4a18      	ldr	r2, [pc, #96]	; (80252a4 <__strftime.isra.0+0x9a8>)
 8025244:	2b00      	cmp	r3, #0
 8025246:	bfd4      	ite	le
 8025248:	2300      	movle	r3, #0
 802524a:	2301      	movgt	r3, #1
 802524c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025250:	4648      	mov	r0, r9
 8025252:	f7da ffff 	bl	8000254 <strlen>
 8025256:	f109 39ff 	add.w	r9, r9, #4294967295
 802525a:	4420      	add	r0, r4
 802525c:	1e6b      	subs	r3, r5, #1
 802525e:	42a0      	cmp	r0, r4
 8025260:	d102      	bne.n	8025268 <__strftime.isra.0+0x96c>
 8025262:	f000 f9f3 	bl	802564c <__tz_unlock>
 8025266:	e7de      	b.n	8025226 <__strftime.isra.0+0x92a>
 8025268:	42a3      	cmp	r3, r4
 802526a:	d904      	bls.n	8025276 <__strftime.isra.0+0x97a>
 802526c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025270:	553a      	strb	r2, [r7, r4]
 8025272:	3401      	adds	r4, #1
 8025274:	e7f3      	b.n	802525e <__strftime.isra.0+0x962>
 8025276:	f000 f9e9 	bl	802564c <__tz_unlock>
 802527a:	f7ff bb71 	b.w	8024960 <__strftime.isra.0+0x64>
 802527e:	1e6b      	subs	r3, r5, #1
 8025280:	429c      	cmp	r4, r3
 8025282:	f4bf ab6d 	bcs.w	8024960 <__strftime.isra.0+0x64>
 8025286:	2325      	movs	r3, #37	; 0x25
 8025288:	e62d      	b.n	8024ee6 <__strftime.isra.0+0x5ea>
 802528a:	b10d      	cbz	r5, 8025290 <__strftime.isra.0+0x994>
 802528c:	2300      	movs	r3, #0
 802528e:	553b      	strb	r3, [r7, r4]
 8025290:	4620      	mov	r0, r4
 8025292:	b00f      	add	sp, #60	; 0x3c
 8025294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025298:	fffff894 	.word	0xfffff894
 802529c:	08044961 	.word	0x08044961
 80252a0:	0804497e 	.word	0x0804497e
 80252a4:	200004ec 	.word	0x200004ec

080252a8 <strftime>:
 80252a8:	f7ff bb28 	b.w	80248fc <__strftime.isra.0>

080252ac <strncmp>:
 80252ac:	b510      	push	{r4, lr}
 80252ae:	b17a      	cbz	r2, 80252d0 <strncmp+0x24>
 80252b0:	4603      	mov	r3, r0
 80252b2:	3901      	subs	r1, #1
 80252b4:	1884      	adds	r4, r0, r2
 80252b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80252ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80252be:	4290      	cmp	r0, r2
 80252c0:	d101      	bne.n	80252c6 <strncmp+0x1a>
 80252c2:	42a3      	cmp	r3, r4
 80252c4:	d101      	bne.n	80252ca <strncmp+0x1e>
 80252c6:	1a80      	subs	r0, r0, r2
 80252c8:	bd10      	pop	{r4, pc}
 80252ca:	2800      	cmp	r0, #0
 80252cc:	d1f3      	bne.n	80252b6 <strncmp+0xa>
 80252ce:	e7fa      	b.n	80252c6 <strncmp+0x1a>
 80252d0:	4610      	mov	r0, r2
 80252d2:	e7f9      	b.n	80252c8 <strncmp+0x1c>

080252d4 <_strtol_l.constprop.0>:
 80252d4:	2b01      	cmp	r3, #1
 80252d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80252da:	d001      	beq.n	80252e0 <_strtol_l.constprop.0+0xc>
 80252dc:	2b24      	cmp	r3, #36	; 0x24
 80252de:	d906      	bls.n	80252ee <_strtol_l.constprop.0+0x1a>
 80252e0:	f001 fa9c 	bl	802681c <__errno>
 80252e4:	2316      	movs	r3, #22
 80252e6:	6003      	str	r3, [r0, #0]
 80252e8:	2000      	movs	r0, #0
 80252ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80252ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80253d4 <_strtol_l.constprop.0+0x100>
 80252f2:	460d      	mov	r5, r1
 80252f4:	462e      	mov	r6, r5
 80252f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80252fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80252fe:	f017 0708 	ands.w	r7, r7, #8
 8025302:	d1f7      	bne.n	80252f4 <_strtol_l.constprop.0+0x20>
 8025304:	2c2d      	cmp	r4, #45	; 0x2d
 8025306:	d132      	bne.n	802536e <_strtol_l.constprop.0+0x9a>
 8025308:	782c      	ldrb	r4, [r5, #0]
 802530a:	2701      	movs	r7, #1
 802530c:	1cb5      	adds	r5, r6, #2
 802530e:	2b00      	cmp	r3, #0
 8025310:	d05b      	beq.n	80253ca <_strtol_l.constprop.0+0xf6>
 8025312:	2b10      	cmp	r3, #16
 8025314:	d109      	bne.n	802532a <_strtol_l.constprop.0+0x56>
 8025316:	2c30      	cmp	r4, #48	; 0x30
 8025318:	d107      	bne.n	802532a <_strtol_l.constprop.0+0x56>
 802531a:	782c      	ldrb	r4, [r5, #0]
 802531c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025320:	2c58      	cmp	r4, #88	; 0x58
 8025322:	d14d      	bne.n	80253c0 <_strtol_l.constprop.0+0xec>
 8025324:	786c      	ldrb	r4, [r5, #1]
 8025326:	2310      	movs	r3, #16
 8025328:	3502      	adds	r5, #2
 802532a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802532e:	f108 38ff 	add.w	r8, r8, #4294967295
 8025332:	f04f 0c00 	mov.w	ip, #0
 8025336:	fbb8 f9f3 	udiv	r9, r8, r3
 802533a:	4666      	mov	r6, ip
 802533c:	fb03 8a19 	mls	sl, r3, r9, r8
 8025340:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8025344:	f1be 0f09 	cmp.w	lr, #9
 8025348:	d816      	bhi.n	8025378 <_strtol_l.constprop.0+0xa4>
 802534a:	4674      	mov	r4, lr
 802534c:	42a3      	cmp	r3, r4
 802534e:	dd24      	ble.n	802539a <_strtol_l.constprop.0+0xc6>
 8025350:	f1bc 0f00 	cmp.w	ip, #0
 8025354:	db1e      	blt.n	8025394 <_strtol_l.constprop.0+0xc0>
 8025356:	45b1      	cmp	r9, r6
 8025358:	d31c      	bcc.n	8025394 <_strtol_l.constprop.0+0xc0>
 802535a:	d101      	bne.n	8025360 <_strtol_l.constprop.0+0x8c>
 802535c:	45a2      	cmp	sl, r4
 802535e:	db19      	blt.n	8025394 <_strtol_l.constprop.0+0xc0>
 8025360:	fb06 4603 	mla	r6, r6, r3, r4
 8025364:	f04f 0c01 	mov.w	ip, #1
 8025368:	f815 4b01 	ldrb.w	r4, [r5], #1
 802536c:	e7e8      	b.n	8025340 <_strtol_l.constprop.0+0x6c>
 802536e:	2c2b      	cmp	r4, #43	; 0x2b
 8025370:	bf04      	itt	eq
 8025372:	782c      	ldrbeq	r4, [r5, #0]
 8025374:	1cb5      	addeq	r5, r6, #2
 8025376:	e7ca      	b.n	802530e <_strtol_l.constprop.0+0x3a>
 8025378:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802537c:	f1be 0f19 	cmp.w	lr, #25
 8025380:	d801      	bhi.n	8025386 <_strtol_l.constprop.0+0xb2>
 8025382:	3c37      	subs	r4, #55	; 0x37
 8025384:	e7e2      	b.n	802534c <_strtol_l.constprop.0+0x78>
 8025386:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802538a:	f1be 0f19 	cmp.w	lr, #25
 802538e:	d804      	bhi.n	802539a <_strtol_l.constprop.0+0xc6>
 8025390:	3c57      	subs	r4, #87	; 0x57
 8025392:	e7db      	b.n	802534c <_strtol_l.constprop.0+0x78>
 8025394:	f04f 3cff 	mov.w	ip, #4294967295
 8025398:	e7e6      	b.n	8025368 <_strtol_l.constprop.0+0x94>
 802539a:	f1bc 0f00 	cmp.w	ip, #0
 802539e:	da05      	bge.n	80253ac <_strtol_l.constprop.0+0xd8>
 80253a0:	2322      	movs	r3, #34	; 0x22
 80253a2:	6003      	str	r3, [r0, #0]
 80253a4:	4646      	mov	r6, r8
 80253a6:	b942      	cbnz	r2, 80253ba <_strtol_l.constprop.0+0xe6>
 80253a8:	4630      	mov	r0, r6
 80253aa:	e79e      	b.n	80252ea <_strtol_l.constprop.0+0x16>
 80253ac:	b107      	cbz	r7, 80253b0 <_strtol_l.constprop.0+0xdc>
 80253ae:	4276      	negs	r6, r6
 80253b0:	2a00      	cmp	r2, #0
 80253b2:	d0f9      	beq.n	80253a8 <_strtol_l.constprop.0+0xd4>
 80253b4:	f1bc 0f00 	cmp.w	ip, #0
 80253b8:	d000      	beq.n	80253bc <_strtol_l.constprop.0+0xe8>
 80253ba:	1e69      	subs	r1, r5, #1
 80253bc:	6011      	str	r1, [r2, #0]
 80253be:	e7f3      	b.n	80253a8 <_strtol_l.constprop.0+0xd4>
 80253c0:	2430      	movs	r4, #48	; 0x30
 80253c2:	2b00      	cmp	r3, #0
 80253c4:	d1b1      	bne.n	802532a <_strtol_l.constprop.0+0x56>
 80253c6:	2308      	movs	r3, #8
 80253c8:	e7af      	b.n	802532a <_strtol_l.constprop.0+0x56>
 80253ca:	2c30      	cmp	r4, #48	; 0x30
 80253cc:	d0a5      	beq.n	802531a <_strtol_l.constprop.0+0x46>
 80253ce:	230a      	movs	r3, #10
 80253d0:	e7ab      	b.n	802532a <_strtol_l.constprop.0+0x56>
 80253d2:	bf00      	nop
 80253d4:	08044609 	.word	0x08044609

080253d8 <_strtol_r>:
 80253d8:	f7ff bf7c 	b.w	80252d4 <_strtol_l.constprop.0>

080253dc <strtol>:
 80253dc:	4613      	mov	r3, r2
 80253de:	460a      	mov	r2, r1
 80253e0:	4601      	mov	r1, r0
 80253e2:	4802      	ldr	r0, [pc, #8]	; (80253ec <strtol+0x10>)
 80253e4:	6800      	ldr	r0, [r0, #0]
 80253e6:	f7ff bf75 	b.w	80252d4 <_strtol_l.constprop.0>
 80253ea:	bf00      	nop
 80253ec:	20000488 	.word	0x20000488

080253f0 <_strtoul_l.constprop.0>:
 80253f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80253f4:	4f36      	ldr	r7, [pc, #216]	; (80254d0 <_strtoul_l.constprop.0+0xe0>)
 80253f6:	4686      	mov	lr, r0
 80253f8:	460d      	mov	r5, r1
 80253fa:	4628      	mov	r0, r5
 80253fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025400:	5de6      	ldrb	r6, [r4, r7]
 8025402:	f016 0608 	ands.w	r6, r6, #8
 8025406:	d1f8      	bne.n	80253fa <_strtoul_l.constprop.0+0xa>
 8025408:	2c2d      	cmp	r4, #45	; 0x2d
 802540a:	d12f      	bne.n	802546c <_strtoul_l.constprop.0+0x7c>
 802540c:	782c      	ldrb	r4, [r5, #0]
 802540e:	2601      	movs	r6, #1
 8025410:	1c85      	adds	r5, r0, #2
 8025412:	2b00      	cmp	r3, #0
 8025414:	d057      	beq.n	80254c6 <_strtoul_l.constprop.0+0xd6>
 8025416:	2b10      	cmp	r3, #16
 8025418:	d109      	bne.n	802542e <_strtoul_l.constprop.0+0x3e>
 802541a:	2c30      	cmp	r4, #48	; 0x30
 802541c:	d107      	bne.n	802542e <_strtoul_l.constprop.0+0x3e>
 802541e:	7828      	ldrb	r0, [r5, #0]
 8025420:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025424:	2858      	cmp	r0, #88	; 0x58
 8025426:	d149      	bne.n	80254bc <_strtoul_l.constprop.0+0xcc>
 8025428:	786c      	ldrb	r4, [r5, #1]
 802542a:	2310      	movs	r3, #16
 802542c:	3502      	adds	r5, #2
 802542e:	f04f 38ff 	mov.w	r8, #4294967295
 8025432:	2700      	movs	r7, #0
 8025434:	fbb8 f8f3 	udiv	r8, r8, r3
 8025438:	fb03 f908 	mul.w	r9, r3, r8
 802543c:	ea6f 0909 	mvn.w	r9, r9
 8025440:	4638      	mov	r0, r7
 8025442:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025446:	f1bc 0f09 	cmp.w	ip, #9
 802544a:	d814      	bhi.n	8025476 <_strtoul_l.constprop.0+0x86>
 802544c:	4664      	mov	r4, ip
 802544e:	42a3      	cmp	r3, r4
 8025450:	dd22      	ble.n	8025498 <_strtoul_l.constprop.0+0xa8>
 8025452:	2f00      	cmp	r7, #0
 8025454:	db1d      	blt.n	8025492 <_strtoul_l.constprop.0+0xa2>
 8025456:	4580      	cmp	r8, r0
 8025458:	d31b      	bcc.n	8025492 <_strtoul_l.constprop.0+0xa2>
 802545a:	d101      	bne.n	8025460 <_strtoul_l.constprop.0+0x70>
 802545c:	45a1      	cmp	r9, r4
 802545e:	db18      	blt.n	8025492 <_strtoul_l.constprop.0+0xa2>
 8025460:	fb00 4003 	mla	r0, r0, r3, r4
 8025464:	2701      	movs	r7, #1
 8025466:	f815 4b01 	ldrb.w	r4, [r5], #1
 802546a:	e7ea      	b.n	8025442 <_strtoul_l.constprop.0+0x52>
 802546c:	2c2b      	cmp	r4, #43	; 0x2b
 802546e:	bf04      	itt	eq
 8025470:	782c      	ldrbeq	r4, [r5, #0]
 8025472:	1c85      	addeq	r5, r0, #2
 8025474:	e7cd      	b.n	8025412 <_strtoul_l.constprop.0+0x22>
 8025476:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802547a:	f1bc 0f19 	cmp.w	ip, #25
 802547e:	d801      	bhi.n	8025484 <_strtoul_l.constprop.0+0x94>
 8025480:	3c37      	subs	r4, #55	; 0x37
 8025482:	e7e4      	b.n	802544e <_strtoul_l.constprop.0+0x5e>
 8025484:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8025488:	f1bc 0f19 	cmp.w	ip, #25
 802548c:	d804      	bhi.n	8025498 <_strtoul_l.constprop.0+0xa8>
 802548e:	3c57      	subs	r4, #87	; 0x57
 8025490:	e7dd      	b.n	802544e <_strtoul_l.constprop.0+0x5e>
 8025492:	f04f 37ff 	mov.w	r7, #4294967295
 8025496:	e7e6      	b.n	8025466 <_strtoul_l.constprop.0+0x76>
 8025498:	2f00      	cmp	r7, #0
 802549a:	da07      	bge.n	80254ac <_strtoul_l.constprop.0+0xbc>
 802549c:	2322      	movs	r3, #34	; 0x22
 802549e:	f8ce 3000 	str.w	r3, [lr]
 80254a2:	f04f 30ff 	mov.w	r0, #4294967295
 80254a6:	b932      	cbnz	r2, 80254b6 <_strtoul_l.constprop.0+0xc6>
 80254a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80254ac:	b106      	cbz	r6, 80254b0 <_strtoul_l.constprop.0+0xc0>
 80254ae:	4240      	negs	r0, r0
 80254b0:	2a00      	cmp	r2, #0
 80254b2:	d0f9      	beq.n	80254a8 <_strtoul_l.constprop.0+0xb8>
 80254b4:	b107      	cbz	r7, 80254b8 <_strtoul_l.constprop.0+0xc8>
 80254b6:	1e69      	subs	r1, r5, #1
 80254b8:	6011      	str	r1, [r2, #0]
 80254ba:	e7f5      	b.n	80254a8 <_strtoul_l.constprop.0+0xb8>
 80254bc:	2430      	movs	r4, #48	; 0x30
 80254be:	2b00      	cmp	r3, #0
 80254c0:	d1b5      	bne.n	802542e <_strtoul_l.constprop.0+0x3e>
 80254c2:	2308      	movs	r3, #8
 80254c4:	e7b3      	b.n	802542e <_strtoul_l.constprop.0+0x3e>
 80254c6:	2c30      	cmp	r4, #48	; 0x30
 80254c8:	d0a9      	beq.n	802541e <_strtoul_l.constprop.0+0x2e>
 80254ca:	230a      	movs	r3, #10
 80254cc:	e7af      	b.n	802542e <_strtoul_l.constprop.0+0x3e>
 80254ce:	bf00      	nop
 80254d0:	08044609 	.word	0x08044609

080254d4 <_strtoul_r>:
 80254d4:	f7ff bf8c 	b.w	80253f0 <_strtoul_l.constprop.0>

080254d8 <strtoul>:
 80254d8:	4613      	mov	r3, r2
 80254da:	460a      	mov	r2, r1
 80254dc:	4601      	mov	r1, r0
 80254de:	4802      	ldr	r0, [pc, #8]	; (80254e8 <strtoul+0x10>)
 80254e0:	6800      	ldr	r0, [r0, #0]
 80254e2:	f7ff bf85 	b.w	80253f0 <_strtoul_l.constprop.0>
 80254e6:	bf00      	nop
 80254e8:	20000488 	.word	0x20000488

080254ec <__tzcalc_limits>:
 80254ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254f0:	4605      	mov	r5, r0
 80254f2:	f001 fab1 	bl	8026a58 <__gettzinfo>
 80254f6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80254fa:	429d      	cmp	r5, r3
 80254fc:	f340 8099 	ble.w	8025632 <__tzcalc_limits+0x146>
 8025500:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8025504:	18ac      	adds	r4, r5, r2
 8025506:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802550a:	f240 126d 	movw	r2, #365	; 0x16d
 802550e:	10a4      	asrs	r4, r4, #2
 8025510:	fb02 4403 	mla	r4, r2, r3, r4
 8025514:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8025518:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802551c:	fb93 f3f2 	sdiv	r3, r3, r2
 8025520:	441c      	add	r4, r3
 8025522:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025526:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802552a:	fb95 fcf3 	sdiv	ip, r5, r3
 802552e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8025532:	186a      	adds	r2, r5, r1
 8025534:	fabc f68c 	clz	r6, ip
 8025538:	fbb2 f2f3 	udiv	r2, r2, r3
 802553c:	f005 0303 	and.w	r3, r5, #3
 8025540:	4414      	add	r4, r2
 8025542:	2264      	movs	r2, #100	; 0x64
 8025544:	6045      	str	r5, [r0, #4]
 8025546:	fb95 f7f2 	sdiv	r7, r5, r2
 802554a:	0976      	lsrs	r6, r6, #5
 802554c:	fb02 5717 	mls	r7, r2, r7, r5
 8025550:	4601      	mov	r1, r0
 8025552:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8025556:	9300      	str	r3, [sp, #0]
 8025558:	f04f 0a07 	mov.w	sl, #7
 802555c:	7a0d      	ldrb	r5, [r1, #8]
 802555e:	694b      	ldr	r3, [r1, #20]
 8025560:	2d4a      	cmp	r5, #74	; 0x4a
 8025562:	d12d      	bne.n	80255c0 <__tzcalc_limits+0xd4>
 8025564:	9a00      	ldr	r2, [sp, #0]
 8025566:	eb04 0e03 	add.w	lr, r4, r3
 802556a:	b902      	cbnz	r2, 802556e <__tzcalc_limits+0x82>
 802556c:	b917      	cbnz	r7, 8025574 <__tzcalc_limits+0x88>
 802556e:	f1bc 0f00 	cmp.w	ip, #0
 8025572:	d123      	bne.n	80255bc <__tzcalc_limits+0xd0>
 8025574:	2b3b      	cmp	r3, #59	; 0x3b
 8025576:	bfd4      	ite	le
 8025578:	2300      	movle	r3, #0
 802557a:	2301      	movgt	r3, #1
 802557c:	4473      	add	r3, lr
 802557e:	3b01      	subs	r3, #1
 8025580:	698d      	ldr	r5, [r1, #24]
 8025582:	4a2d      	ldr	r2, [pc, #180]	; (8025638 <__tzcalc_limits+0x14c>)
 8025584:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8025588:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802558c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802558e:	18ed      	adds	r5, r5, r3
 8025590:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8025594:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8025598:	3128      	adds	r1, #40	; 0x28
 802559a:	458b      	cmp	fp, r1
 802559c:	d1de      	bne.n	802555c <__tzcalc_limits+0x70>
 802559e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80255a2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80255a6:	428c      	cmp	r4, r1
 80255a8:	eb72 0303 	sbcs.w	r3, r2, r3
 80255ac:	bfb4      	ite	lt
 80255ae:	2301      	movlt	r3, #1
 80255b0:	2300      	movge	r3, #0
 80255b2:	6003      	str	r3, [r0, #0]
 80255b4:	2001      	movs	r0, #1
 80255b6:	b003      	add	sp, #12
 80255b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255bc:	2300      	movs	r3, #0
 80255be:	e7dd      	b.n	802557c <__tzcalc_limits+0x90>
 80255c0:	2d44      	cmp	r5, #68	; 0x44
 80255c2:	d101      	bne.n	80255c8 <__tzcalc_limits+0xdc>
 80255c4:	4423      	add	r3, r4
 80255c6:	e7db      	b.n	8025580 <__tzcalc_limits+0x94>
 80255c8:	9a00      	ldr	r2, [sp, #0]
 80255ca:	bb62      	cbnz	r2, 8025626 <__tzcalc_limits+0x13a>
 80255cc:	2f00      	cmp	r7, #0
 80255ce:	bf0c      	ite	eq
 80255d0:	4635      	moveq	r5, r6
 80255d2:	2501      	movne	r5, #1
 80255d4:	68ca      	ldr	r2, [r1, #12]
 80255d6:	9201      	str	r2, [sp, #4]
 80255d8:	4a18      	ldr	r2, [pc, #96]	; (802563c <__tzcalc_limits+0x150>)
 80255da:	f04f 0930 	mov.w	r9, #48	; 0x30
 80255de:	fb09 2505 	mla	r5, r9, r5, r2
 80255e2:	46a6      	mov	lr, r4
 80255e4:	f04f 0800 	mov.w	r8, #0
 80255e8:	3d04      	subs	r5, #4
 80255ea:	9a01      	ldr	r2, [sp, #4]
 80255ec:	f108 0801 	add.w	r8, r8, #1
 80255f0:	4542      	cmp	r2, r8
 80255f2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80255f6:	dc18      	bgt.n	802562a <__tzcalc_limits+0x13e>
 80255f8:	f10e 0504 	add.w	r5, lr, #4
 80255fc:	fb95 f8fa 	sdiv	r8, r5, sl
 8025600:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8025604:	eba5 0808 	sub.w	r8, r5, r8
 8025608:	ebb3 0808 	subs.w	r8, r3, r8
 802560c:	690b      	ldr	r3, [r1, #16]
 802560e:	f103 33ff 	add.w	r3, r3, #4294967295
 8025612:	bf48      	it	mi
 8025614:	f108 0807 	addmi.w	r8, r8, #7
 8025618:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802561c:	4443      	add	r3, r8
 802561e:	454b      	cmp	r3, r9
 8025620:	da05      	bge.n	802562e <__tzcalc_limits+0x142>
 8025622:	4473      	add	r3, lr
 8025624:	e7ac      	b.n	8025580 <__tzcalc_limits+0x94>
 8025626:	4635      	mov	r5, r6
 8025628:	e7d4      	b.n	80255d4 <__tzcalc_limits+0xe8>
 802562a:	44ce      	add	lr, r9
 802562c:	e7dd      	b.n	80255ea <__tzcalc_limits+0xfe>
 802562e:	3b07      	subs	r3, #7
 8025630:	e7f5      	b.n	802561e <__tzcalc_limits+0x132>
 8025632:	2000      	movs	r0, #0
 8025634:	e7bf      	b.n	80255b6 <__tzcalc_limits+0xca>
 8025636:	bf00      	nop
 8025638:	00015180 	.word	0x00015180
 802563c:	08044844 	.word	0x08044844

08025640 <__tz_lock>:
 8025640:	4801      	ldr	r0, [pc, #4]	; (8025648 <__tz_lock+0x8>)
 8025642:	f7fd be74 	b.w	802332e <__retarget_lock_acquire>
 8025646:	bf00      	nop
 8025648:	2002f860 	.word	0x2002f860

0802564c <__tz_unlock>:
 802564c:	4801      	ldr	r0, [pc, #4]	; (8025654 <__tz_unlock+0x8>)
 802564e:	f7fd be70 	b.w	8023332 <__retarget_lock_release>
 8025652:	bf00      	nop
 8025654:	2002f860 	.word	0x2002f860

08025658 <_tzset_unlocked>:
 8025658:	4b01      	ldr	r3, [pc, #4]	; (8025660 <_tzset_unlocked+0x8>)
 802565a:	6818      	ldr	r0, [r3, #0]
 802565c:	f000 b802 	b.w	8025664 <_tzset_unlocked_r>
 8025660:	20000488 	.word	0x20000488

08025664 <_tzset_unlocked_r>:
 8025664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025668:	b08d      	sub	sp, #52	; 0x34
 802566a:	4607      	mov	r7, r0
 802566c:	f001 f9f4 	bl	8026a58 <__gettzinfo>
 8025670:	49b0      	ldr	r1, [pc, #704]	; (8025934 <_tzset_unlocked_r+0x2d0>)
 8025672:	4eb1      	ldr	r6, [pc, #708]	; (8025938 <_tzset_unlocked_r+0x2d4>)
 8025674:	4605      	mov	r5, r0
 8025676:	4638      	mov	r0, r7
 8025678:	f001 f9e6 	bl	8026a48 <_getenv_r>
 802567c:	4604      	mov	r4, r0
 802567e:	b970      	cbnz	r0, 802569e <_tzset_unlocked_r+0x3a>
 8025680:	4bae      	ldr	r3, [pc, #696]	; (802593c <_tzset_unlocked_r+0x2d8>)
 8025682:	4aaf      	ldr	r2, [pc, #700]	; (8025940 <_tzset_unlocked_r+0x2dc>)
 8025684:	6018      	str	r0, [r3, #0]
 8025686:	4baf      	ldr	r3, [pc, #700]	; (8025944 <_tzset_unlocked_r+0x2e0>)
 8025688:	6018      	str	r0, [r3, #0]
 802568a:	4baf      	ldr	r3, [pc, #700]	; (8025948 <_tzset_unlocked_r+0x2e4>)
 802568c:	6830      	ldr	r0, [r6, #0]
 802568e:	e9c3 2200 	strd	r2, r2, [r3]
 8025692:	f7fd fe59 	bl	8023348 <free>
 8025696:	6034      	str	r4, [r6, #0]
 8025698:	b00d      	add	sp, #52	; 0x34
 802569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802569e:	6831      	ldr	r1, [r6, #0]
 80256a0:	2900      	cmp	r1, #0
 80256a2:	d162      	bne.n	802576a <_tzset_unlocked_r+0x106>
 80256a4:	6830      	ldr	r0, [r6, #0]
 80256a6:	f7fd fe4f 	bl	8023348 <free>
 80256aa:	4620      	mov	r0, r4
 80256ac:	f7da fdd2 	bl	8000254 <strlen>
 80256b0:	1c41      	adds	r1, r0, #1
 80256b2:	4638      	mov	r0, r7
 80256b4:	f7fe f96e 	bl	8023994 <_malloc_r>
 80256b8:	6030      	str	r0, [r6, #0]
 80256ba:	2800      	cmp	r0, #0
 80256bc:	d15a      	bne.n	8025774 <_tzset_unlocked_r+0x110>
 80256be:	7823      	ldrb	r3, [r4, #0]
 80256c0:	4aa2      	ldr	r2, [pc, #648]	; (802594c <_tzset_unlocked_r+0x2e8>)
 80256c2:	49a3      	ldr	r1, [pc, #652]	; (8025950 <_tzset_unlocked_r+0x2ec>)
 80256c4:	2b3a      	cmp	r3, #58	; 0x3a
 80256c6:	bf08      	it	eq
 80256c8:	3401      	addeq	r4, #1
 80256ca:	ae0a      	add	r6, sp, #40	; 0x28
 80256cc:	4633      	mov	r3, r6
 80256ce:	4620      	mov	r0, r4
 80256d0:	f7ff f822 	bl	8024718 <siscanf>
 80256d4:	2800      	cmp	r0, #0
 80256d6:	dddf      	ble.n	8025698 <_tzset_unlocked_r+0x34>
 80256d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256da:	18e7      	adds	r7, r4, r3
 80256dc:	5ce3      	ldrb	r3, [r4, r3]
 80256de:	2b2d      	cmp	r3, #45	; 0x2d
 80256e0:	d14c      	bne.n	802577c <_tzset_unlocked_r+0x118>
 80256e2:	3701      	adds	r7, #1
 80256e4:	f04f 38ff 	mov.w	r8, #4294967295
 80256e8:	f10d 0a20 	add.w	sl, sp, #32
 80256ec:	f10d 0b1e 	add.w	fp, sp, #30
 80256f0:	2400      	movs	r4, #0
 80256f2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80256f6:	4997      	ldr	r1, [pc, #604]	; (8025954 <_tzset_unlocked_r+0x2f0>)
 80256f8:	9603      	str	r6, [sp, #12]
 80256fa:	f8cd b000 	str.w	fp, [sp]
 80256fe:	4633      	mov	r3, r6
 8025700:	aa07      	add	r2, sp, #28
 8025702:	4638      	mov	r0, r7
 8025704:	f8ad 401e 	strh.w	r4, [sp, #30]
 8025708:	f8ad 4020 	strh.w	r4, [sp, #32]
 802570c:	f7ff f804 	bl	8024718 <siscanf>
 8025710:	42a0      	cmp	r0, r4
 8025712:	ddc1      	ble.n	8025698 <_tzset_unlocked_r+0x34>
 8025714:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8025718:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802571c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8025960 <_tzset_unlocked_r+0x2fc>
 8025720:	213c      	movs	r1, #60	; 0x3c
 8025722:	fb01 3302 	mla	r3, r1, r2, r3
 8025726:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802572a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802572e:	fb01 3302 	mla	r3, r1, r2, r3
 8025732:	fb08 f303 	mul.w	r3, r8, r3
 8025736:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8025948 <_tzset_unlocked_r+0x2e4>
 802573a:	62ab      	str	r3, [r5, #40]	; 0x28
 802573c:	4b83      	ldr	r3, [pc, #524]	; (802594c <_tzset_unlocked_r+0x2e8>)
 802573e:	f8c8 3000 	str.w	r3, [r8]
 8025742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025744:	4982      	ldr	r1, [pc, #520]	; (8025950 <_tzset_unlocked_r+0x2ec>)
 8025746:	441f      	add	r7, r3
 8025748:	464a      	mov	r2, r9
 802574a:	4633      	mov	r3, r6
 802574c:	4638      	mov	r0, r7
 802574e:	f7fe ffe3 	bl	8024718 <siscanf>
 8025752:	42a0      	cmp	r0, r4
 8025754:	dc18      	bgt.n	8025788 <_tzset_unlocked_r+0x124>
 8025756:	f8d8 3000 	ldr.w	r3, [r8]
 802575a:	f8c8 3004 	str.w	r3, [r8, #4]
 802575e:	4b77      	ldr	r3, [pc, #476]	; (802593c <_tzset_unlocked_r+0x2d8>)
 8025760:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8025762:	601a      	str	r2, [r3, #0]
 8025764:	4b77      	ldr	r3, [pc, #476]	; (8025944 <_tzset_unlocked_r+0x2e0>)
 8025766:	601c      	str	r4, [r3, #0]
 8025768:	e796      	b.n	8025698 <_tzset_unlocked_r+0x34>
 802576a:	f7da fd69 	bl	8000240 <strcmp>
 802576e:	2800      	cmp	r0, #0
 8025770:	d198      	bne.n	80256a4 <_tzset_unlocked_r+0x40>
 8025772:	e791      	b.n	8025698 <_tzset_unlocked_r+0x34>
 8025774:	4621      	mov	r1, r4
 8025776:	f7ff f856 	bl	8024826 <strcpy>
 802577a:	e7a0      	b.n	80256be <_tzset_unlocked_r+0x5a>
 802577c:	2b2b      	cmp	r3, #43	; 0x2b
 802577e:	bf08      	it	eq
 8025780:	3701      	addeq	r7, #1
 8025782:	f04f 0801 	mov.w	r8, #1
 8025786:	e7af      	b.n	80256e8 <_tzset_unlocked_r+0x84>
 8025788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802578a:	f8c8 9004 	str.w	r9, [r8, #4]
 802578e:	18fc      	adds	r4, r7, r3
 8025790:	5cfb      	ldrb	r3, [r7, r3]
 8025792:	2b2d      	cmp	r3, #45	; 0x2d
 8025794:	f040 808b 	bne.w	80258ae <_tzset_unlocked_r+0x24a>
 8025798:	3401      	adds	r4, #1
 802579a:	f04f 37ff 	mov.w	r7, #4294967295
 802579e:	2300      	movs	r3, #0
 80257a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80257a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80257a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80257ac:	930a      	str	r3, [sp, #40]	; 0x28
 80257ae:	e9cd a602 	strd	sl, r6, [sp, #8]
 80257b2:	e9cd b600 	strd	fp, r6, [sp]
 80257b6:	4967      	ldr	r1, [pc, #412]	; (8025954 <_tzset_unlocked_r+0x2f0>)
 80257b8:	4633      	mov	r3, r6
 80257ba:	aa07      	add	r2, sp, #28
 80257bc:	4620      	mov	r0, r4
 80257be:	f7fe ffab 	bl	8024718 <siscanf>
 80257c2:	2800      	cmp	r0, #0
 80257c4:	dc78      	bgt.n	80258b8 <_tzset_unlocked_r+0x254>
 80257c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80257c8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80257cc:	652b      	str	r3, [r5, #80]	; 0x50
 80257ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257d0:	462f      	mov	r7, r5
 80257d2:	441c      	add	r4, r3
 80257d4:	f04f 0900 	mov.w	r9, #0
 80257d8:	7823      	ldrb	r3, [r4, #0]
 80257da:	2b2c      	cmp	r3, #44	; 0x2c
 80257dc:	bf08      	it	eq
 80257de:	3401      	addeq	r4, #1
 80257e0:	f894 8000 	ldrb.w	r8, [r4]
 80257e4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80257e8:	d178      	bne.n	80258dc <_tzset_unlocked_r+0x278>
 80257ea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80257ee:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80257f2:	ab09      	add	r3, sp, #36	; 0x24
 80257f4:	9300      	str	r3, [sp, #0]
 80257f6:	4958      	ldr	r1, [pc, #352]	; (8025958 <_tzset_unlocked_r+0x2f4>)
 80257f8:	9603      	str	r6, [sp, #12]
 80257fa:	4633      	mov	r3, r6
 80257fc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8025800:	4620      	mov	r0, r4
 8025802:	f7fe ff89 	bl	8024718 <siscanf>
 8025806:	2803      	cmp	r0, #3
 8025808:	f47f af46 	bne.w	8025698 <_tzset_unlocked_r+0x34>
 802580c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8025810:	1e4b      	subs	r3, r1, #1
 8025812:	2b0b      	cmp	r3, #11
 8025814:	f63f af40 	bhi.w	8025698 <_tzset_unlocked_r+0x34>
 8025818:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802581c:	1e53      	subs	r3, r2, #1
 802581e:	2b04      	cmp	r3, #4
 8025820:	f63f af3a 	bhi.w	8025698 <_tzset_unlocked_r+0x34>
 8025824:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8025828:	2b06      	cmp	r3, #6
 802582a:	f63f af35 	bhi.w	8025698 <_tzset_unlocked_r+0x34>
 802582e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8025832:	f887 8008 	strb.w	r8, [r7, #8]
 8025836:	617b      	str	r3, [r7, #20]
 8025838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802583a:	eb04 0803 	add.w	r8, r4, r3
 802583e:	2302      	movs	r3, #2
 8025840:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025844:	2300      	movs	r3, #0
 8025846:	f8ad 301e 	strh.w	r3, [sp, #30]
 802584a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802584e:	930a      	str	r3, [sp, #40]	; 0x28
 8025850:	f898 3000 	ldrb.w	r3, [r8]
 8025854:	2b2f      	cmp	r3, #47	; 0x2f
 8025856:	d109      	bne.n	802586c <_tzset_unlocked_r+0x208>
 8025858:	e9cd a602 	strd	sl, r6, [sp, #8]
 802585c:	e9cd b600 	strd	fp, r6, [sp]
 8025860:	493e      	ldr	r1, [pc, #248]	; (802595c <_tzset_unlocked_r+0x2f8>)
 8025862:	4633      	mov	r3, r6
 8025864:	aa07      	add	r2, sp, #28
 8025866:	4640      	mov	r0, r8
 8025868:	f7fe ff56 	bl	8024718 <siscanf>
 802586c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8025870:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8025874:	213c      	movs	r1, #60	; 0x3c
 8025876:	fb01 3302 	mla	r3, r1, r2, r3
 802587a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802587e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8025882:	fb01 3302 	mla	r3, r1, r2, r3
 8025886:	61bb      	str	r3, [r7, #24]
 8025888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802588a:	3728      	adds	r7, #40	; 0x28
 802588c:	4444      	add	r4, r8
 802588e:	f1b9 0f00 	cmp.w	r9, #0
 8025892:	d020      	beq.n	80258d6 <_tzset_unlocked_r+0x272>
 8025894:	6868      	ldr	r0, [r5, #4]
 8025896:	f7ff fe29 	bl	80254ec <__tzcalc_limits>
 802589a:	4b28      	ldr	r3, [pc, #160]	; (802593c <_tzset_unlocked_r+0x2d8>)
 802589c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802589e:	601a      	str	r2, [r3, #0]
 80258a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80258a2:	1a9b      	subs	r3, r3, r2
 80258a4:	4a27      	ldr	r2, [pc, #156]	; (8025944 <_tzset_unlocked_r+0x2e0>)
 80258a6:	bf18      	it	ne
 80258a8:	2301      	movne	r3, #1
 80258aa:	6013      	str	r3, [r2, #0]
 80258ac:	e6f4      	b.n	8025698 <_tzset_unlocked_r+0x34>
 80258ae:	2b2b      	cmp	r3, #43	; 0x2b
 80258b0:	bf08      	it	eq
 80258b2:	3401      	addeq	r4, #1
 80258b4:	2701      	movs	r7, #1
 80258b6:	e772      	b.n	802579e <_tzset_unlocked_r+0x13a>
 80258b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80258bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80258c0:	213c      	movs	r1, #60	; 0x3c
 80258c2:	fb01 3302 	mla	r3, r1, r2, r3
 80258c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80258ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80258ce:	fb01 3302 	mla	r3, r1, r2, r3
 80258d2:	437b      	muls	r3, r7
 80258d4:	e77a      	b.n	80257cc <_tzset_unlocked_r+0x168>
 80258d6:	f04f 0901 	mov.w	r9, #1
 80258da:	e77d      	b.n	80257d8 <_tzset_unlocked_r+0x174>
 80258dc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80258e0:	bf06      	itte	eq
 80258e2:	3401      	addeq	r4, #1
 80258e4:	4643      	moveq	r3, r8
 80258e6:	2344      	movne	r3, #68	; 0x44
 80258e8:	220a      	movs	r2, #10
 80258ea:	a90b      	add	r1, sp, #44	; 0x2c
 80258ec:	4620      	mov	r0, r4
 80258ee:	9305      	str	r3, [sp, #20]
 80258f0:	f7ff fdf2 	bl	80254d8 <strtoul>
 80258f4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80258f8:	9b05      	ldr	r3, [sp, #20]
 80258fa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80258fe:	45a0      	cmp	r8, r4
 8025900:	d114      	bne.n	802592c <_tzset_unlocked_r+0x2c8>
 8025902:	234d      	movs	r3, #77	; 0x4d
 8025904:	f1b9 0f00 	cmp.w	r9, #0
 8025908:	d107      	bne.n	802591a <_tzset_unlocked_r+0x2b6>
 802590a:	722b      	strb	r3, [r5, #8]
 802590c:	2103      	movs	r1, #3
 802590e:	2302      	movs	r3, #2
 8025910:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8025914:	f8c5 9014 	str.w	r9, [r5, #20]
 8025918:	e791      	b.n	802583e <_tzset_unlocked_r+0x1da>
 802591a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802591e:	220b      	movs	r2, #11
 8025920:	2301      	movs	r3, #1
 8025922:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8025926:	2300      	movs	r3, #0
 8025928:	63eb      	str	r3, [r5, #60]	; 0x3c
 802592a:	e788      	b.n	802583e <_tzset_unlocked_r+0x1da>
 802592c:	b280      	uxth	r0, r0
 802592e:	723b      	strb	r3, [r7, #8]
 8025930:	6178      	str	r0, [r7, #20]
 8025932:	e784      	b.n	802583e <_tzset_unlocked_r+0x1da>
 8025934:	08044bb4 	.word	0x08044bb4
 8025938:	2002f888 	.word	0x2002f888
 802593c:	2002f890 	.word	0x2002f890
 8025940:	08044bb7 	.word	0x08044bb7
 8025944:	2002f88c 	.word	0x2002f88c
 8025948:	200004ec 	.word	0x200004ec
 802594c:	2002f87b 	.word	0x2002f87b
 8025950:	08044bbb 	.word	0x08044bbb
 8025954:	08044bde 	.word	0x08044bde
 8025958:	08044bca 	.word	0x08044bca
 802595c:	08044bdd 	.word	0x08044bdd
 8025960:	2002f870 	.word	0x2002f870

08025964 <__swbuf_r>:
 8025964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025966:	460e      	mov	r6, r1
 8025968:	4614      	mov	r4, r2
 802596a:	4605      	mov	r5, r0
 802596c:	b118      	cbz	r0, 8025976 <__swbuf_r+0x12>
 802596e:	6983      	ldr	r3, [r0, #24]
 8025970:	b90b      	cbnz	r3, 8025976 <__swbuf_r+0x12>
 8025972:	f7fd fb07 	bl	8022f84 <__sinit>
 8025976:	4b21      	ldr	r3, [pc, #132]	; (80259fc <__swbuf_r+0x98>)
 8025978:	429c      	cmp	r4, r3
 802597a:	d12b      	bne.n	80259d4 <__swbuf_r+0x70>
 802597c:	686c      	ldr	r4, [r5, #4]
 802597e:	69a3      	ldr	r3, [r4, #24]
 8025980:	60a3      	str	r3, [r4, #8]
 8025982:	89a3      	ldrh	r3, [r4, #12]
 8025984:	071a      	lsls	r2, r3, #28
 8025986:	d52f      	bpl.n	80259e8 <__swbuf_r+0x84>
 8025988:	6923      	ldr	r3, [r4, #16]
 802598a:	b36b      	cbz	r3, 80259e8 <__swbuf_r+0x84>
 802598c:	6923      	ldr	r3, [r4, #16]
 802598e:	6820      	ldr	r0, [r4, #0]
 8025990:	1ac0      	subs	r0, r0, r3
 8025992:	6963      	ldr	r3, [r4, #20]
 8025994:	b2f6      	uxtb	r6, r6
 8025996:	4283      	cmp	r3, r0
 8025998:	4637      	mov	r7, r6
 802599a:	dc04      	bgt.n	80259a6 <__swbuf_r+0x42>
 802599c:	4621      	mov	r1, r4
 802599e:	4628      	mov	r0, r5
 80259a0:	f000 ffc8 	bl	8026934 <_fflush_r>
 80259a4:	bb30      	cbnz	r0, 80259f4 <__swbuf_r+0x90>
 80259a6:	68a3      	ldr	r3, [r4, #8]
 80259a8:	3b01      	subs	r3, #1
 80259aa:	60a3      	str	r3, [r4, #8]
 80259ac:	6823      	ldr	r3, [r4, #0]
 80259ae:	1c5a      	adds	r2, r3, #1
 80259b0:	6022      	str	r2, [r4, #0]
 80259b2:	701e      	strb	r6, [r3, #0]
 80259b4:	6963      	ldr	r3, [r4, #20]
 80259b6:	3001      	adds	r0, #1
 80259b8:	4283      	cmp	r3, r0
 80259ba:	d004      	beq.n	80259c6 <__swbuf_r+0x62>
 80259bc:	89a3      	ldrh	r3, [r4, #12]
 80259be:	07db      	lsls	r3, r3, #31
 80259c0:	d506      	bpl.n	80259d0 <__swbuf_r+0x6c>
 80259c2:	2e0a      	cmp	r6, #10
 80259c4:	d104      	bne.n	80259d0 <__swbuf_r+0x6c>
 80259c6:	4621      	mov	r1, r4
 80259c8:	4628      	mov	r0, r5
 80259ca:	f000 ffb3 	bl	8026934 <_fflush_r>
 80259ce:	b988      	cbnz	r0, 80259f4 <__swbuf_r+0x90>
 80259d0:	4638      	mov	r0, r7
 80259d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80259d4:	4b0a      	ldr	r3, [pc, #40]	; (8025a00 <__swbuf_r+0x9c>)
 80259d6:	429c      	cmp	r4, r3
 80259d8:	d101      	bne.n	80259de <__swbuf_r+0x7a>
 80259da:	68ac      	ldr	r4, [r5, #8]
 80259dc:	e7cf      	b.n	802597e <__swbuf_r+0x1a>
 80259de:	4b09      	ldr	r3, [pc, #36]	; (8025a04 <__swbuf_r+0xa0>)
 80259e0:	429c      	cmp	r4, r3
 80259e2:	bf08      	it	eq
 80259e4:	68ec      	ldreq	r4, [r5, #12]
 80259e6:	e7ca      	b.n	802597e <__swbuf_r+0x1a>
 80259e8:	4621      	mov	r1, r4
 80259ea:	4628      	mov	r0, r5
 80259ec:	f000 f81e 	bl	8025a2c <__swsetup_r>
 80259f0:	2800      	cmp	r0, #0
 80259f2:	d0cb      	beq.n	802598c <__swbuf_r+0x28>
 80259f4:	f04f 37ff 	mov.w	r7, #4294967295
 80259f8:	e7ea      	b.n	80259d0 <__swbuf_r+0x6c>
 80259fa:	bf00      	nop
 80259fc:	0804472c 	.word	0x0804472c
 8025a00:	0804474c 	.word	0x0804474c
 8025a04:	0804470c 	.word	0x0804470c

08025a08 <_write_r>:
 8025a08:	b538      	push	{r3, r4, r5, lr}
 8025a0a:	4d07      	ldr	r5, [pc, #28]	; (8025a28 <_write_r+0x20>)
 8025a0c:	4604      	mov	r4, r0
 8025a0e:	4608      	mov	r0, r1
 8025a10:	4611      	mov	r1, r2
 8025a12:	2200      	movs	r2, #0
 8025a14:	602a      	str	r2, [r5, #0]
 8025a16:	461a      	mov	r2, r3
 8025a18:	f7dc ff60 	bl	80028dc <_write>
 8025a1c:	1c43      	adds	r3, r0, #1
 8025a1e:	d102      	bne.n	8025a26 <_write_r+0x1e>
 8025a20:	682b      	ldr	r3, [r5, #0]
 8025a22:	b103      	cbz	r3, 8025a26 <_write_r+0x1e>
 8025a24:	6023      	str	r3, [r4, #0]
 8025a26:	bd38      	pop	{r3, r4, r5, pc}
 8025a28:	2002f86c 	.word	0x2002f86c

08025a2c <__swsetup_r>:
 8025a2c:	4b32      	ldr	r3, [pc, #200]	; (8025af8 <__swsetup_r+0xcc>)
 8025a2e:	b570      	push	{r4, r5, r6, lr}
 8025a30:	681d      	ldr	r5, [r3, #0]
 8025a32:	4606      	mov	r6, r0
 8025a34:	460c      	mov	r4, r1
 8025a36:	b125      	cbz	r5, 8025a42 <__swsetup_r+0x16>
 8025a38:	69ab      	ldr	r3, [r5, #24]
 8025a3a:	b913      	cbnz	r3, 8025a42 <__swsetup_r+0x16>
 8025a3c:	4628      	mov	r0, r5
 8025a3e:	f7fd faa1 	bl	8022f84 <__sinit>
 8025a42:	4b2e      	ldr	r3, [pc, #184]	; (8025afc <__swsetup_r+0xd0>)
 8025a44:	429c      	cmp	r4, r3
 8025a46:	d10f      	bne.n	8025a68 <__swsetup_r+0x3c>
 8025a48:	686c      	ldr	r4, [r5, #4]
 8025a4a:	89a3      	ldrh	r3, [r4, #12]
 8025a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025a50:	0719      	lsls	r1, r3, #28
 8025a52:	d42c      	bmi.n	8025aae <__swsetup_r+0x82>
 8025a54:	06dd      	lsls	r5, r3, #27
 8025a56:	d411      	bmi.n	8025a7c <__swsetup_r+0x50>
 8025a58:	2309      	movs	r3, #9
 8025a5a:	6033      	str	r3, [r6, #0]
 8025a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025a60:	81a3      	strh	r3, [r4, #12]
 8025a62:	f04f 30ff 	mov.w	r0, #4294967295
 8025a66:	e03e      	b.n	8025ae6 <__swsetup_r+0xba>
 8025a68:	4b25      	ldr	r3, [pc, #148]	; (8025b00 <__swsetup_r+0xd4>)
 8025a6a:	429c      	cmp	r4, r3
 8025a6c:	d101      	bne.n	8025a72 <__swsetup_r+0x46>
 8025a6e:	68ac      	ldr	r4, [r5, #8]
 8025a70:	e7eb      	b.n	8025a4a <__swsetup_r+0x1e>
 8025a72:	4b24      	ldr	r3, [pc, #144]	; (8025b04 <__swsetup_r+0xd8>)
 8025a74:	429c      	cmp	r4, r3
 8025a76:	bf08      	it	eq
 8025a78:	68ec      	ldreq	r4, [r5, #12]
 8025a7a:	e7e6      	b.n	8025a4a <__swsetup_r+0x1e>
 8025a7c:	0758      	lsls	r0, r3, #29
 8025a7e:	d512      	bpl.n	8025aa6 <__swsetup_r+0x7a>
 8025a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025a82:	b141      	cbz	r1, 8025a96 <__swsetup_r+0x6a>
 8025a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025a88:	4299      	cmp	r1, r3
 8025a8a:	d002      	beq.n	8025a92 <__swsetup_r+0x66>
 8025a8c:	4630      	mov	r0, r6
 8025a8e:	f7fd ff15 	bl	80238bc <_free_r>
 8025a92:	2300      	movs	r3, #0
 8025a94:	6363      	str	r3, [r4, #52]	; 0x34
 8025a96:	89a3      	ldrh	r3, [r4, #12]
 8025a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025a9c:	81a3      	strh	r3, [r4, #12]
 8025a9e:	2300      	movs	r3, #0
 8025aa0:	6063      	str	r3, [r4, #4]
 8025aa2:	6923      	ldr	r3, [r4, #16]
 8025aa4:	6023      	str	r3, [r4, #0]
 8025aa6:	89a3      	ldrh	r3, [r4, #12]
 8025aa8:	f043 0308 	orr.w	r3, r3, #8
 8025aac:	81a3      	strh	r3, [r4, #12]
 8025aae:	6923      	ldr	r3, [r4, #16]
 8025ab0:	b94b      	cbnz	r3, 8025ac6 <__swsetup_r+0x9a>
 8025ab2:	89a3      	ldrh	r3, [r4, #12]
 8025ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025abc:	d003      	beq.n	8025ac6 <__swsetup_r+0x9a>
 8025abe:	4621      	mov	r1, r4
 8025ac0:	4630      	mov	r0, r6
 8025ac2:	f001 f8b9 	bl	8026c38 <__smakebuf_r>
 8025ac6:	89a0      	ldrh	r0, [r4, #12]
 8025ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025acc:	f010 0301 	ands.w	r3, r0, #1
 8025ad0:	d00a      	beq.n	8025ae8 <__swsetup_r+0xbc>
 8025ad2:	2300      	movs	r3, #0
 8025ad4:	60a3      	str	r3, [r4, #8]
 8025ad6:	6963      	ldr	r3, [r4, #20]
 8025ad8:	425b      	negs	r3, r3
 8025ada:	61a3      	str	r3, [r4, #24]
 8025adc:	6923      	ldr	r3, [r4, #16]
 8025ade:	b943      	cbnz	r3, 8025af2 <__swsetup_r+0xc6>
 8025ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025ae4:	d1ba      	bne.n	8025a5c <__swsetup_r+0x30>
 8025ae6:	bd70      	pop	{r4, r5, r6, pc}
 8025ae8:	0781      	lsls	r1, r0, #30
 8025aea:	bf58      	it	pl
 8025aec:	6963      	ldrpl	r3, [r4, #20]
 8025aee:	60a3      	str	r3, [r4, #8]
 8025af0:	e7f4      	b.n	8025adc <__swsetup_r+0xb0>
 8025af2:	2000      	movs	r0, #0
 8025af4:	e7f7      	b.n	8025ae6 <__swsetup_r+0xba>
 8025af6:	bf00      	nop
 8025af8:	20000488 	.word	0x20000488
 8025afc:	0804472c 	.word	0x0804472c
 8025b00:	0804474c 	.word	0x0804474c
 8025b04:	0804470c 	.word	0x0804470c

08025b08 <abs>:
 8025b08:	2800      	cmp	r0, #0
 8025b0a:	bfb8      	it	lt
 8025b0c:	4240      	neglt	r0, r0
 8025b0e:	4770      	bx	lr

08025b10 <asctime>:
 8025b10:	4b0d      	ldr	r3, [pc, #52]	; (8025b48 <asctime+0x38>)
 8025b12:	b570      	push	{r4, r5, r6, lr}
 8025b14:	681d      	ldr	r5, [r3, #0]
 8025b16:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8025b18:	4604      	mov	r4, r0
 8025b1a:	b976      	cbnz	r6, 8025b3a <asctime+0x2a>
 8025b1c:	201a      	movs	r0, #26
 8025b1e:	f7fd fc0b 	bl	8023338 <malloc>
 8025b22:	4602      	mov	r2, r0
 8025b24:	6428      	str	r0, [r5, #64]	; 0x40
 8025b26:	b920      	cbnz	r0, 8025b32 <asctime+0x22>
 8025b28:	4b08      	ldr	r3, [pc, #32]	; (8025b4c <asctime+0x3c>)
 8025b2a:	4809      	ldr	r0, [pc, #36]	; (8025b50 <asctime+0x40>)
 8025b2c:	2137      	movs	r1, #55	; 0x37
 8025b2e:	f000 f837 	bl	8025ba0 <__assert_func>
 8025b32:	221a      	movs	r2, #26
 8025b34:	4631      	mov	r1, r6
 8025b36:	f7fd fc47 	bl	80233c8 <memset>
 8025b3a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8025b3c:	4620      	mov	r0, r4
 8025b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025b42:	f000 b807 	b.w	8025b54 <asctime_r>
 8025b46:	bf00      	nop
 8025b48:	20000488 	.word	0x20000488
 8025b4c:	08044770 	.word	0x08044770
 8025b50:	08044bf0 	.word	0x08044bf0

08025b54 <asctime_r>:
 8025b54:	b510      	push	{r4, lr}
 8025b56:	460c      	mov	r4, r1
 8025b58:	6941      	ldr	r1, [r0, #20]
 8025b5a:	6903      	ldr	r3, [r0, #16]
 8025b5c:	6982      	ldr	r2, [r0, #24]
 8025b5e:	b086      	sub	sp, #24
 8025b60:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8025b64:	9104      	str	r1, [sp, #16]
 8025b66:	6801      	ldr	r1, [r0, #0]
 8025b68:	9103      	str	r1, [sp, #12]
 8025b6a:	6841      	ldr	r1, [r0, #4]
 8025b6c:	9102      	str	r1, [sp, #8]
 8025b6e:	6881      	ldr	r1, [r0, #8]
 8025b70:	9101      	str	r1, [sp, #4]
 8025b72:	68c1      	ldr	r1, [r0, #12]
 8025b74:	9100      	str	r1, [sp, #0]
 8025b76:	4907      	ldr	r1, [pc, #28]	; (8025b94 <asctime_r+0x40>)
 8025b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025b7c:	440b      	add	r3, r1
 8025b7e:	4906      	ldr	r1, [pc, #24]	; (8025b98 <asctime_r+0x44>)
 8025b80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b84:	440a      	add	r2, r1
 8025b86:	4620      	mov	r0, r4
 8025b88:	4904      	ldr	r1, [pc, #16]	; (8025b9c <asctime_r+0x48>)
 8025b8a:	f7fe fda5 	bl	80246d8 <siprintf>
 8025b8e:	4620      	mov	r0, r4
 8025b90:	b006      	add	sp, #24
 8025b92:	bd10      	pop	{r4, pc}
 8025b94:	08044c81 	.word	0x08044c81
 8025b98:	08044c6c 	.word	0x08044c6c
 8025b9c:	08044c4c 	.word	0x08044c4c

08025ba0 <__assert_func>:
 8025ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025ba2:	4614      	mov	r4, r2
 8025ba4:	461a      	mov	r2, r3
 8025ba6:	4b09      	ldr	r3, [pc, #36]	; (8025bcc <__assert_func+0x2c>)
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	4605      	mov	r5, r0
 8025bac:	68d8      	ldr	r0, [r3, #12]
 8025bae:	b14c      	cbz	r4, 8025bc4 <__assert_func+0x24>
 8025bb0:	4b07      	ldr	r3, [pc, #28]	; (8025bd0 <__assert_func+0x30>)
 8025bb2:	9100      	str	r1, [sp, #0]
 8025bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025bb8:	4906      	ldr	r1, [pc, #24]	; (8025bd4 <__assert_func+0x34>)
 8025bba:	462b      	mov	r3, r5
 8025bbc:	f000 fef6 	bl	80269ac <fiprintf>
 8025bc0:	f002 faf0 	bl	80281a4 <abort>
 8025bc4:	4b04      	ldr	r3, [pc, #16]	; (8025bd8 <__assert_func+0x38>)
 8025bc6:	461c      	mov	r4, r3
 8025bc8:	e7f3      	b.n	8025bb2 <__assert_func+0x12>
 8025bca:	bf00      	nop
 8025bcc:	20000488 	.word	0x20000488
 8025bd0:	08044ca5 	.word	0x08044ca5
 8025bd4:	08044cb2 	.word	0x08044cb2
 8025bd8:	08044c6b 	.word	0x08044c6b

08025bdc <_close_r>:
 8025bdc:	b538      	push	{r3, r4, r5, lr}
 8025bde:	4d06      	ldr	r5, [pc, #24]	; (8025bf8 <_close_r+0x1c>)
 8025be0:	2300      	movs	r3, #0
 8025be2:	4604      	mov	r4, r0
 8025be4:	4608      	mov	r0, r1
 8025be6:	602b      	str	r3, [r5, #0]
 8025be8:	f7e0 fefe 	bl	80069e8 <_close>
 8025bec:	1c43      	adds	r3, r0, #1
 8025bee:	d102      	bne.n	8025bf6 <_close_r+0x1a>
 8025bf0:	682b      	ldr	r3, [r5, #0]
 8025bf2:	b103      	cbz	r3, 8025bf6 <_close_r+0x1a>
 8025bf4:	6023      	str	r3, [r4, #0]
 8025bf6:	bd38      	pop	{r3, r4, r5, pc}
 8025bf8:	2002f86c 	.word	0x2002f86c

08025bfc <div>:
 8025bfc:	2900      	cmp	r1, #0
 8025bfe:	b510      	push	{r4, lr}
 8025c00:	fb91 f4f2 	sdiv	r4, r1, r2
 8025c04:	fb02 1314 	mls	r3, r2, r4, r1
 8025c08:	db06      	blt.n	8025c18 <div+0x1c>
 8025c0a:	2b00      	cmp	r3, #0
 8025c0c:	da01      	bge.n	8025c12 <div+0x16>
 8025c0e:	3401      	adds	r4, #1
 8025c10:	1a9b      	subs	r3, r3, r2
 8025c12:	e9c0 4300 	strd	r4, r3, [r0]
 8025c16:	bd10      	pop	{r4, pc}
 8025c18:	2b00      	cmp	r3, #0
 8025c1a:	bfc4      	itt	gt
 8025c1c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8025c20:	189b      	addgt	r3, r3, r2
 8025c22:	e7f6      	b.n	8025c12 <div+0x16>

08025c24 <quorem>:
 8025c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c28:	6903      	ldr	r3, [r0, #16]
 8025c2a:	690c      	ldr	r4, [r1, #16]
 8025c2c:	42a3      	cmp	r3, r4
 8025c2e:	4607      	mov	r7, r0
 8025c30:	f2c0 8081 	blt.w	8025d36 <quorem+0x112>
 8025c34:	3c01      	subs	r4, #1
 8025c36:	f101 0814 	add.w	r8, r1, #20
 8025c3a:	f100 0514 	add.w	r5, r0, #20
 8025c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025c42:	9301      	str	r3, [sp, #4]
 8025c44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025c48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025c4c:	3301      	adds	r3, #1
 8025c4e:	429a      	cmp	r2, r3
 8025c50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025c58:	fbb2 f6f3 	udiv	r6, r2, r3
 8025c5c:	d331      	bcc.n	8025cc2 <quorem+0x9e>
 8025c5e:	f04f 0e00 	mov.w	lr, #0
 8025c62:	4640      	mov	r0, r8
 8025c64:	46ac      	mov	ip, r5
 8025c66:	46f2      	mov	sl, lr
 8025c68:	f850 2b04 	ldr.w	r2, [r0], #4
 8025c6c:	b293      	uxth	r3, r2
 8025c6e:	fb06 e303 	mla	r3, r6, r3, lr
 8025c72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025c76:	b29b      	uxth	r3, r3
 8025c78:	ebaa 0303 	sub.w	r3, sl, r3
 8025c7c:	f8dc a000 	ldr.w	sl, [ip]
 8025c80:	0c12      	lsrs	r2, r2, #16
 8025c82:	fa13 f38a 	uxtah	r3, r3, sl
 8025c86:	fb06 e202 	mla	r2, r6, r2, lr
 8025c8a:	9300      	str	r3, [sp, #0]
 8025c8c:	9b00      	ldr	r3, [sp, #0]
 8025c8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025c92:	b292      	uxth	r2, r2
 8025c94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025c9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8025ca0:	4581      	cmp	r9, r0
 8025ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025ca6:	f84c 3b04 	str.w	r3, [ip], #4
 8025caa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025cae:	d2db      	bcs.n	8025c68 <quorem+0x44>
 8025cb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8025cb4:	b92b      	cbnz	r3, 8025cc2 <quorem+0x9e>
 8025cb6:	9b01      	ldr	r3, [sp, #4]
 8025cb8:	3b04      	subs	r3, #4
 8025cba:	429d      	cmp	r5, r3
 8025cbc:	461a      	mov	r2, r3
 8025cbe:	d32e      	bcc.n	8025d1e <quorem+0xfa>
 8025cc0:	613c      	str	r4, [r7, #16]
 8025cc2:	4638      	mov	r0, r7
 8025cc4:	f001 fa86 	bl	80271d4 <__mcmp>
 8025cc8:	2800      	cmp	r0, #0
 8025cca:	db24      	blt.n	8025d16 <quorem+0xf2>
 8025ccc:	3601      	adds	r6, #1
 8025cce:	4628      	mov	r0, r5
 8025cd0:	f04f 0c00 	mov.w	ip, #0
 8025cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8025cd8:	f8d0 e000 	ldr.w	lr, [r0]
 8025cdc:	b293      	uxth	r3, r2
 8025cde:	ebac 0303 	sub.w	r3, ip, r3
 8025ce2:	0c12      	lsrs	r2, r2, #16
 8025ce4:	fa13 f38e 	uxtah	r3, r3, lr
 8025ce8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8025cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025cf0:	b29b      	uxth	r3, r3
 8025cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025cf6:	45c1      	cmp	r9, r8
 8025cf8:	f840 3b04 	str.w	r3, [r0], #4
 8025cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025d00:	d2e8      	bcs.n	8025cd4 <quorem+0xb0>
 8025d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025d0a:	b922      	cbnz	r2, 8025d16 <quorem+0xf2>
 8025d0c:	3b04      	subs	r3, #4
 8025d0e:	429d      	cmp	r5, r3
 8025d10:	461a      	mov	r2, r3
 8025d12:	d30a      	bcc.n	8025d2a <quorem+0x106>
 8025d14:	613c      	str	r4, [r7, #16]
 8025d16:	4630      	mov	r0, r6
 8025d18:	b003      	add	sp, #12
 8025d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d1e:	6812      	ldr	r2, [r2, #0]
 8025d20:	3b04      	subs	r3, #4
 8025d22:	2a00      	cmp	r2, #0
 8025d24:	d1cc      	bne.n	8025cc0 <quorem+0x9c>
 8025d26:	3c01      	subs	r4, #1
 8025d28:	e7c7      	b.n	8025cba <quorem+0x96>
 8025d2a:	6812      	ldr	r2, [r2, #0]
 8025d2c:	3b04      	subs	r3, #4
 8025d2e:	2a00      	cmp	r2, #0
 8025d30:	d1f0      	bne.n	8025d14 <quorem+0xf0>
 8025d32:	3c01      	subs	r4, #1
 8025d34:	e7eb      	b.n	8025d0e <quorem+0xea>
 8025d36:	2000      	movs	r0, #0
 8025d38:	e7ee      	b.n	8025d18 <quorem+0xf4>
 8025d3a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8025d3e:	Address 0x0000000008025d3e is out of bounds.


08025d40 <_dtoa_r>:
 8025d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d44:	ed2d 8b02 	vpush	{d8}
 8025d48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025d4a:	b091      	sub	sp, #68	; 0x44
 8025d4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025d50:	ec59 8b10 	vmov	r8, r9, d0
 8025d54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025d56:	9106      	str	r1, [sp, #24]
 8025d58:	4606      	mov	r6, r0
 8025d5a:	9208      	str	r2, [sp, #32]
 8025d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8025d5e:	b975      	cbnz	r5, 8025d7e <_dtoa_r+0x3e>
 8025d60:	2010      	movs	r0, #16
 8025d62:	f7fd fae9 	bl	8023338 <malloc>
 8025d66:	4602      	mov	r2, r0
 8025d68:	6270      	str	r0, [r6, #36]	; 0x24
 8025d6a:	b920      	cbnz	r0, 8025d76 <_dtoa_r+0x36>
 8025d6c:	4baa      	ldr	r3, [pc, #680]	; (8026018 <_dtoa_r+0x2d8>)
 8025d6e:	21ea      	movs	r1, #234	; 0xea
 8025d70:	48aa      	ldr	r0, [pc, #680]	; (802601c <_dtoa_r+0x2dc>)
 8025d72:	f7ff ff15 	bl	8025ba0 <__assert_func>
 8025d76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025d7a:	6005      	str	r5, [r0, #0]
 8025d7c:	60c5      	str	r5, [r0, #12]
 8025d7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025d80:	6819      	ldr	r1, [r3, #0]
 8025d82:	b151      	cbz	r1, 8025d9a <_dtoa_r+0x5a>
 8025d84:	685a      	ldr	r2, [r3, #4]
 8025d86:	604a      	str	r2, [r1, #4]
 8025d88:	2301      	movs	r3, #1
 8025d8a:	4093      	lsls	r3, r2
 8025d8c:	608b      	str	r3, [r1, #8]
 8025d8e:	4630      	mov	r0, r6
 8025d90:	f000 ffde 	bl	8026d50 <_Bfree>
 8025d94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025d96:	2200      	movs	r2, #0
 8025d98:	601a      	str	r2, [r3, #0]
 8025d9a:	f1b9 0300 	subs.w	r3, r9, #0
 8025d9e:	bfbb      	ittet	lt
 8025da0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8025da4:	9303      	strlt	r3, [sp, #12]
 8025da6:	2300      	movge	r3, #0
 8025da8:	2201      	movlt	r2, #1
 8025daa:	bfac      	ite	ge
 8025dac:	6023      	strge	r3, [r4, #0]
 8025dae:	6022      	strlt	r2, [r4, #0]
 8025db0:	4b9b      	ldr	r3, [pc, #620]	; (8026020 <_dtoa_r+0x2e0>)
 8025db2:	9c03      	ldr	r4, [sp, #12]
 8025db4:	43a3      	bics	r3, r4
 8025db6:	d11c      	bne.n	8025df2 <_dtoa_r+0xb2>
 8025db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8025dbe:	6013      	str	r3, [r2, #0]
 8025dc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8025dc4:	ea53 0308 	orrs.w	r3, r3, r8
 8025dc8:	f000 84fd 	beq.w	80267c6 <_dtoa_r+0xa86>
 8025dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025dce:	b963      	cbnz	r3, 8025dea <_dtoa_r+0xaa>
 8025dd0:	4b94      	ldr	r3, [pc, #592]	; (8026024 <_dtoa_r+0x2e4>)
 8025dd2:	e01f      	b.n	8025e14 <_dtoa_r+0xd4>
 8025dd4:	4b94      	ldr	r3, [pc, #592]	; (8026028 <_dtoa_r+0x2e8>)
 8025dd6:	9301      	str	r3, [sp, #4]
 8025dd8:	3308      	adds	r3, #8
 8025dda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025ddc:	6013      	str	r3, [r2, #0]
 8025dde:	9801      	ldr	r0, [sp, #4]
 8025de0:	b011      	add	sp, #68	; 0x44
 8025de2:	ecbd 8b02 	vpop	{d8}
 8025de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dea:	4b8e      	ldr	r3, [pc, #568]	; (8026024 <_dtoa_r+0x2e4>)
 8025dec:	9301      	str	r3, [sp, #4]
 8025dee:	3303      	adds	r3, #3
 8025df0:	e7f3      	b.n	8025dda <_dtoa_r+0x9a>
 8025df2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8025df6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025dfe:	d10b      	bne.n	8025e18 <_dtoa_r+0xd8>
 8025e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025e02:	2301      	movs	r3, #1
 8025e04:	6013      	str	r3, [r2, #0]
 8025e06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	f000 84d9 	beq.w	80267c0 <_dtoa_r+0xa80>
 8025e0e:	4887      	ldr	r0, [pc, #540]	; (802602c <_dtoa_r+0x2ec>)
 8025e10:	6018      	str	r0, [r3, #0]
 8025e12:	1e43      	subs	r3, r0, #1
 8025e14:	9301      	str	r3, [sp, #4]
 8025e16:	e7e2      	b.n	8025dde <_dtoa_r+0x9e>
 8025e18:	a90f      	add	r1, sp, #60	; 0x3c
 8025e1a:	aa0e      	add	r2, sp, #56	; 0x38
 8025e1c:	4630      	mov	r0, r6
 8025e1e:	eeb0 0b48 	vmov.f64	d0, d8
 8025e22:	f001 fa7d 	bl	8027320 <__d2b>
 8025e26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8025e2a:	4605      	mov	r5, r0
 8025e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025e2e:	2900      	cmp	r1, #0
 8025e30:	d046      	beq.n	8025ec0 <_dtoa_r+0x180>
 8025e32:	ee18 4a90 	vmov	r4, s17
 8025e36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8025e3a:	ec53 2b18 	vmov	r2, r3, d8
 8025e3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8025e42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025e46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8025e4a:	2400      	movs	r4, #0
 8025e4c:	ec43 2b16 	vmov	d6, r2, r3
 8025e50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8025e54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026000 <_dtoa_r+0x2c0>
 8025e58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8025e5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026008 <_dtoa_r+0x2c8>
 8025e60:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025e64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026010 <_dtoa_r+0x2d0>
 8025e68:	ee07 1a90 	vmov	s15, r1
 8025e6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8025e70:	eeb0 7b46 	vmov.f64	d7, d6
 8025e74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8025e78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025e7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e84:	ee16 ba90 	vmov	fp, s13
 8025e88:	940a      	str	r4, [sp, #40]	; 0x28
 8025e8a:	d508      	bpl.n	8025e9e <_dtoa_r+0x15e>
 8025e8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025e90:	eeb4 6b47 	vcmp.f64	d6, d7
 8025e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e98:	bf18      	it	ne
 8025e9a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8025e9e:	f1bb 0f16 	cmp.w	fp, #22
 8025ea2:	d82f      	bhi.n	8025f04 <_dtoa_r+0x1c4>
 8025ea4:	4b62      	ldr	r3, [pc, #392]	; (8026030 <_dtoa_r+0x2f0>)
 8025ea6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025eaa:	ed93 7b00 	vldr	d7, [r3]
 8025eae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8025eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025eb6:	d501      	bpl.n	8025ebc <_dtoa_r+0x17c>
 8025eb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025ebc:	2300      	movs	r3, #0
 8025ebe:	e022      	b.n	8025f06 <_dtoa_r+0x1c6>
 8025ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025ec2:	4401      	add	r1, r0
 8025ec4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8025ec8:	2b20      	cmp	r3, #32
 8025eca:	bfc1      	itttt	gt
 8025ecc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025ed0:	fa04 f303 	lslgt.w	r3, r4, r3
 8025ed4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8025ed8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8025edc:	bfd6      	itet	le
 8025ede:	f1c3 0320 	rsble	r3, r3, #32
 8025ee2:	ea43 0808 	orrgt.w	r8, r3, r8
 8025ee6:	fa08 f803 	lslle.w	r8, r8, r3
 8025eea:	ee07 8a90 	vmov	s15, r8
 8025eee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025ef2:	3901      	subs	r1, #1
 8025ef4:	ee17 4a90 	vmov	r4, s15
 8025ef8:	ec53 2b17 	vmov	r2, r3, d7
 8025efc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8025f00:	2401      	movs	r4, #1
 8025f02:	e7a3      	b.n	8025e4c <_dtoa_r+0x10c>
 8025f04:	2301      	movs	r3, #1
 8025f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8025f08:	1a43      	subs	r3, r0, r1
 8025f0a:	1e5a      	subs	r2, r3, #1
 8025f0c:	bf45      	ittet	mi
 8025f0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8025f12:	9304      	strmi	r3, [sp, #16]
 8025f14:	2300      	movpl	r3, #0
 8025f16:	2300      	movmi	r3, #0
 8025f18:	9205      	str	r2, [sp, #20]
 8025f1a:	bf54      	ite	pl
 8025f1c:	9304      	strpl	r3, [sp, #16]
 8025f1e:	9305      	strmi	r3, [sp, #20]
 8025f20:	f1bb 0f00 	cmp.w	fp, #0
 8025f24:	db18      	blt.n	8025f58 <_dtoa_r+0x218>
 8025f26:	9b05      	ldr	r3, [sp, #20]
 8025f28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8025f2c:	445b      	add	r3, fp
 8025f2e:	9305      	str	r3, [sp, #20]
 8025f30:	2300      	movs	r3, #0
 8025f32:	9a06      	ldr	r2, [sp, #24]
 8025f34:	2a09      	cmp	r2, #9
 8025f36:	d849      	bhi.n	8025fcc <_dtoa_r+0x28c>
 8025f38:	2a05      	cmp	r2, #5
 8025f3a:	bfc4      	itt	gt
 8025f3c:	3a04      	subgt	r2, #4
 8025f3e:	9206      	strgt	r2, [sp, #24]
 8025f40:	9a06      	ldr	r2, [sp, #24]
 8025f42:	f1a2 0202 	sub.w	r2, r2, #2
 8025f46:	bfcc      	ite	gt
 8025f48:	2400      	movgt	r4, #0
 8025f4a:	2401      	movle	r4, #1
 8025f4c:	2a03      	cmp	r2, #3
 8025f4e:	d848      	bhi.n	8025fe2 <_dtoa_r+0x2a2>
 8025f50:	e8df f002 	tbb	[pc, r2]
 8025f54:	3a2c2e0b 	.word	0x3a2c2e0b
 8025f58:	9b04      	ldr	r3, [sp, #16]
 8025f5a:	2200      	movs	r2, #0
 8025f5c:	eba3 030b 	sub.w	r3, r3, fp
 8025f60:	9304      	str	r3, [sp, #16]
 8025f62:	9209      	str	r2, [sp, #36]	; 0x24
 8025f64:	f1cb 0300 	rsb	r3, fp, #0
 8025f68:	e7e3      	b.n	8025f32 <_dtoa_r+0x1f2>
 8025f6a:	2200      	movs	r2, #0
 8025f6c:	9207      	str	r2, [sp, #28]
 8025f6e:	9a08      	ldr	r2, [sp, #32]
 8025f70:	2a00      	cmp	r2, #0
 8025f72:	dc39      	bgt.n	8025fe8 <_dtoa_r+0x2a8>
 8025f74:	f04f 0a01 	mov.w	sl, #1
 8025f78:	46d1      	mov	r9, sl
 8025f7a:	4652      	mov	r2, sl
 8025f7c:	f8cd a020 	str.w	sl, [sp, #32]
 8025f80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8025f82:	2100      	movs	r1, #0
 8025f84:	6079      	str	r1, [r7, #4]
 8025f86:	2004      	movs	r0, #4
 8025f88:	f100 0c14 	add.w	ip, r0, #20
 8025f8c:	4594      	cmp	ip, r2
 8025f8e:	6879      	ldr	r1, [r7, #4]
 8025f90:	d92f      	bls.n	8025ff2 <_dtoa_r+0x2b2>
 8025f92:	4630      	mov	r0, r6
 8025f94:	930d      	str	r3, [sp, #52]	; 0x34
 8025f96:	f000 fe9b 	bl	8026cd0 <_Balloc>
 8025f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f9c:	9001      	str	r0, [sp, #4]
 8025f9e:	4602      	mov	r2, r0
 8025fa0:	2800      	cmp	r0, #0
 8025fa2:	d149      	bne.n	8026038 <_dtoa_r+0x2f8>
 8025fa4:	4b23      	ldr	r3, [pc, #140]	; (8026034 <_dtoa_r+0x2f4>)
 8025fa6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8025faa:	e6e1      	b.n	8025d70 <_dtoa_r+0x30>
 8025fac:	2201      	movs	r2, #1
 8025fae:	e7dd      	b.n	8025f6c <_dtoa_r+0x22c>
 8025fb0:	2200      	movs	r2, #0
 8025fb2:	9207      	str	r2, [sp, #28]
 8025fb4:	9a08      	ldr	r2, [sp, #32]
 8025fb6:	eb0b 0a02 	add.w	sl, fp, r2
 8025fba:	f10a 0901 	add.w	r9, sl, #1
 8025fbe:	464a      	mov	r2, r9
 8025fc0:	2a01      	cmp	r2, #1
 8025fc2:	bfb8      	it	lt
 8025fc4:	2201      	movlt	r2, #1
 8025fc6:	e7db      	b.n	8025f80 <_dtoa_r+0x240>
 8025fc8:	2201      	movs	r2, #1
 8025fca:	e7f2      	b.n	8025fb2 <_dtoa_r+0x272>
 8025fcc:	2401      	movs	r4, #1
 8025fce:	2200      	movs	r2, #0
 8025fd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8025fd4:	f04f 3aff 	mov.w	sl, #4294967295
 8025fd8:	2100      	movs	r1, #0
 8025fda:	46d1      	mov	r9, sl
 8025fdc:	2212      	movs	r2, #18
 8025fde:	9108      	str	r1, [sp, #32]
 8025fe0:	e7ce      	b.n	8025f80 <_dtoa_r+0x240>
 8025fe2:	2201      	movs	r2, #1
 8025fe4:	9207      	str	r2, [sp, #28]
 8025fe6:	e7f5      	b.n	8025fd4 <_dtoa_r+0x294>
 8025fe8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8025fec:	46d1      	mov	r9, sl
 8025fee:	4652      	mov	r2, sl
 8025ff0:	e7c6      	b.n	8025f80 <_dtoa_r+0x240>
 8025ff2:	3101      	adds	r1, #1
 8025ff4:	6079      	str	r1, [r7, #4]
 8025ff6:	0040      	lsls	r0, r0, #1
 8025ff8:	e7c6      	b.n	8025f88 <_dtoa_r+0x248>
 8025ffa:	bf00      	nop
 8025ffc:	f3af 8000 	nop.w
 8026000:	636f4361 	.word	0x636f4361
 8026004:	3fd287a7 	.word	0x3fd287a7
 8026008:	8b60c8b3 	.word	0x8b60c8b3
 802600c:	3fc68a28 	.word	0x3fc68a28
 8026010:	509f79fb 	.word	0x509f79fb
 8026014:	3fd34413 	.word	0x3fd34413
 8026018:	08044770 	.word	0x08044770
 802601c:	08044cee 	.word	0x08044cee
 8026020:	7ff00000 	.word	0x7ff00000
 8026024:	08044cea 	.word	0x08044cea
 8026028:	08044ce1 	.word	0x08044ce1
 802602c:	08044eca 	.word	0x08044eca
 8026030:	08044de0 	.word	0x08044de0
 8026034:	08044d49 	.word	0x08044d49
 8026038:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802603a:	9901      	ldr	r1, [sp, #4]
 802603c:	6011      	str	r1, [r2, #0]
 802603e:	f1b9 0f0e 	cmp.w	r9, #14
 8026042:	d86c      	bhi.n	802611e <_dtoa_r+0x3de>
 8026044:	2c00      	cmp	r4, #0
 8026046:	d06a      	beq.n	802611e <_dtoa_r+0x3de>
 8026048:	f1bb 0f00 	cmp.w	fp, #0
 802604c:	f340 80a0 	ble.w	8026190 <_dtoa_r+0x450>
 8026050:	49c1      	ldr	r1, [pc, #772]	; (8026358 <_dtoa_r+0x618>)
 8026052:	f00b 020f 	and.w	r2, fp, #15
 8026056:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802605a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802605e:	ed92 7b00 	vldr	d7, [r2]
 8026062:	ea4f 112b 	mov.w	r1, fp, asr #4
 8026066:	f000 8087 	beq.w	8026178 <_dtoa_r+0x438>
 802606a:	4abc      	ldr	r2, [pc, #752]	; (802635c <_dtoa_r+0x61c>)
 802606c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026070:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026074:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026078:	f001 010f 	and.w	r1, r1, #15
 802607c:	2203      	movs	r2, #3
 802607e:	48b7      	ldr	r0, [pc, #732]	; (802635c <_dtoa_r+0x61c>)
 8026080:	2900      	cmp	r1, #0
 8026082:	d17b      	bne.n	802617c <_dtoa_r+0x43c>
 8026084:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026088:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802608c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026092:	2900      	cmp	r1, #0
 8026094:	f000 80a2 	beq.w	80261dc <_dtoa_r+0x49c>
 8026098:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802609c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80260a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80260a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80260a8:	f140 8098 	bpl.w	80261dc <_dtoa_r+0x49c>
 80260ac:	f1b9 0f00 	cmp.w	r9, #0
 80260b0:	f000 8094 	beq.w	80261dc <_dtoa_r+0x49c>
 80260b4:	f1ba 0f00 	cmp.w	sl, #0
 80260b8:	dd2f      	ble.n	802611a <_dtoa_r+0x3da>
 80260ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80260be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80260c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80260c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80260ca:	3201      	adds	r2, #1
 80260cc:	4650      	mov	r0, sl
 80260ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80260d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80260d6:	ee07 2a90 	vmov	s15, r2
 80260da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80260de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80260e2:	ee15 4a90 	vmov	r4, s11
 80260e6:	ec52 1b15 	vmov	r1, r2, d5
 80260ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80260ee:	2800      	cmp	r0, #0
 80260f0:	d177      	bne.n	80261e2 <_dtoa_r+0x4a2>
 80260f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80260f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80260fa:	ec42 1b17 	vmov	d7, r1, r2
 80260fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026106:	f300 8263 	bgt.w	80265d0 <_dtoa_r+0x890>
 802610a:	eeb1 7b47 	vneg.f64	d7, d7
 802610e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026116:	f100 8258 	bmi.w	80265ca <_dtoa_r+0x88a>
 802611a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802611e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026120:	2a00      	cmp	r2, #0
 8026122:	f2c0 811d 	blt.w	8026360 <_dtoa_r+0x620>
 8026126:	f1bb 0f0e 	cmp.w	fp, #14
 802612a:	f300 8119 	bgt.w	8026360 <_dtoa_r+0x620>
 802612e:	4b8a      	ldr	r3, [pc, #552]	; (8026358 <_dtoa_r+0x618>)
 8026130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026134:	ed93 6b00 	vldr	d6, [r3]
 8026138:	9b08      	ldr	r3, [sp, #32]
 802613a:	2b00      	cmp	r3, #0
 802613c:	f280 80b7 	bge.w	80262ae <_dtoa_r+0x56e>
 8026140:	f1b9 0f00 	cmp.w	r9, #0
 8026144:	f300 80b3 	bgt.w	80262ae <_dtoa_r+0x56e>
 8026148:	f040 823f 	bne.w	80265ca <_dtoa_r+0x88a>
 802614c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026150:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026154:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026160:	464c      	mov	r4, r9
 8026162:	464f      	mov	r7, r9
 8026164:	f280 8215 	bge.w	8026592 <_dtoa_r+0x852>
 8026168:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802616c:	2331      	movs	r3, #49	; 0x31
 802616e:	f808 3b01 	strb.w	r3, [r8], #1
 8026172:	f10b 0b01 	add.w	fp, fp, #1
 8026176:	e211      	b.n	802659c <_dtoa_r+0x85c>
 8026178:	2202      	movs	r2, #2
 802617a:	e780      	b.n	802607e <_dtoa_r+0x33e>
 802617c:	07cc      	lsls	r4, r1, #31
 802617e:	d504      	bpl.n	802618a <_dtoa_r+0x44a>
 8026180:	ed90 6b00 	vldr	d6, [r0]
 8026184:	3201      	adds	r2, #1
 8026186:	ee27 7b06 	vmul.f64	d7, d7, d6
 802618a:	1049      	asrs	r1, r1, #1
 802618c:	3008      	adds	r0, #8
 802618e:	e777      	b.n	8026080 <_dtoa_r+0x340>
 8026190:	d022      	beq.n	80261d8 <_dtoa_r+0x498>
 8026192:	f1cb 0100 	rsb	r1, fp, #0
 8026196:	4a70      	ldr	r2, [pc, #448]	; (8026358 <_dtoa_r+0x618>)
 8026198:	f001 000f 	and.w	r0, r1, #15
 802619c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80261a0:	ed92 7b00 	vldr	d7, [r2]
 80261a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80261a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80261ac:	486b      	ldr	r0, [pc, #428]	; (802635c <_dtoa_r+0x61c>)
 80261ae:	1109      	asrs	r1, r1, #4
 80261b0:	2400      	movs	r4, #0
 80261b2:	2202      	movs	r2, #2
 80261b4:	b929      	cbnz	r1, 80261c2 <_dtoa_r+0x482>
 80261b6:	2c00      	cmp	r4, #0
 80261b8:	f43f af6a 	beq.w	8026090 <_dtoa_r+0x350>
 80261bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80261c0:	e766      	b.n	8026090 <_dtoa_r+0x350>
 80261c2:	07cf      	lsls	r7, r1, #31
 80261c4:	d505      	bpl.n	80261d2 <_dtoa_r+0x492>
 80261c6:	ed90 6b00 	vldr	d6, [r0]
 80261ca:	3201      	adds	r2, #1
 80261cc:	2401      	movs	r4, #1
 80261ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80261d2:	1049      	asrs	r1, r1, #1
 80261d4:	3008      	adds	r0, #8
 80261d6:	e7ed      	b.n	80261b4 <_dtoa_r+0x474>
 80261d8:	2202      	movs	r2, #2
 80261da:	e759      	b.n	8026090 <_dtoa_r+0x350>
 80261dc:	465f      	mov	r7, fp
 80261de:	4648      	mov	r0, r9
 80261e0:	e775      	b.n	80260ce <_dtoa_r+0x38e>
 80261e2:	ec42 1b17 	vmov	d7, r1, r2
 80261e6:	4a5c      	ldr	r2, [pc, #368]	; (8026358 <_dtoa_r+0x618>)
 80261e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80261ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 80261f0:	9a01      	ldr	r2, [sp, #4]
 80261f2:	1814      	adds	r4, r2, r0
 80261f4:	9a07      	ldr	r2, [sp, #28]
 80261f6:	b352      	cbz	r2, 802624e <_dtoa_r+0x50e>
 80261f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80261fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026200:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026204:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802620c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026210:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026214:	ee14 2a90 	vmov	r2, s9
 8026218:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802621c:	3230      	adds	r2, #48	; 0x30
 802621e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026222:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802622a:	f808 2b01 	strb.w	r2, [r8], #1
 802622e:	d439      	bmi.n	80262a4 <_dtoa_r+0x564>
 8026230:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026234:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802623c:	d472      	bmi.n	8026324 <_dtoa_r+0x5e4>
 802623e:	45a0      	cmp	r8, r4
 8026240:	f43f af6b 	beq.w	802611a <_dtoa_r+0x3da>
 8026244:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026248:	ee26 6b03 	vmul.f64	d6, d6, d3
 802624c:	e7e0      	b.n	8026210 <_dtoa_r+0x4d0>
 802624e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026252:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026256:	4621      	mov	r1, r4
 8026258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802625c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026260:	ee14 2a90 	vmov	r2, s9
 8026264:	3230      	adds	r2, #48	; 0x30
 8026266:	f808 2b01 	strb.w	r2, [r8], #1
 802626a:	45a0      	cmp	r8, r4
 802626c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026270:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026274:	d118      	bne.n	80262a8 <_dtoa_r+0x568>
 8026276:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802627a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802627e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8026282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026286:	dc4d      	bgt.n	8026324 <_dtoa_r+0x5e4>
 8026288:	ee35 7b47 	vsub.f64	d7, d5, d7
 802628c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026294:	f57f af41 	bpl.w	802611a <_dtoa_r+0x3da>
 8026298:	4688      	mov	r8, r1
 802629a:	3901      	subs	r1, #1
 802629c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80262a0:	2b30      	cmp	r3, #48	; 0x30
 80262a2:	d0f9      	beq.n	8026298 <_dtoa_r+0x558>
 80262a4:	46bb      	mov	fp, r7
 80262a6:	e02a      	b.n	80262fe <_dtoa_r+0x5be>
 80262a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80262ac:	e7d6      	b.n	802625c <_dtoa_r+0x51c>
 80262ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80262b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80262b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80262ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80262be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80262c2:	ee15 3a10 	vmov	r3, s10
 80262c6:	3330      	adds	r3, #48	; 0x30
 80262c8:	f808 3b01 	strb.w	r3, [r8], #1
 80262cc:	9b01      	ldr	r3, [sp, #4]
 80262ce:	eba8 0303 	sub.w	r3, r8, r3
 80262d2:	4599      	cmp	r9, r3
 80262d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80262d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80262dc:	d133      	bne.n	8026346 <_dtoa_r+0x606>
 80262de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80262e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80262e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262ea:	dc1a      	bgt.n	8026322 <_dtoa_r+0x5e2>
 80262ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80262f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262f4:	d103      	bne.n	80262fe <_dtoa_r+0x5be>
 80262f6:	ee15 3a10 	vmov	r3, s10
 80262fa:	07d9      	lsls	r1, r3, #31
 80262fc:	d411      	bmi.n	8026322 <_dtoa_r+0x5e2>
 80262fe:	4629      	mov	r1, r5
 8026300:	4630      	mov	r0, r6
 8026302:	f000 fd25 	bl	8026d50 <_Bfree>
 8026306:	2300      	movs	r3, #0
 8026308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802630a:	f888 3000 	strb.w	r3, [r8]
 802630e:	f10b 0301 	add.w	r3, fp, #1
 8026312:	6013      	str	r3, [r2, #0]
 8026314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026316:	2b00      	cmp	r3, #0
 8026318:	f43f ad61 	beq.w	8025dde <_dtoa_r+0x9e>
 802631c:	f8c3 8000 	str.w	r8, [r3]
 8026320:	e55d      	b.n	8025dde <_dtoa_r+0x9e>
 8026322:	465f      	mov	r7, fp
 8026324:	4643      	mov	r3, r8
 8026326:	4698      	mov	r8, r3
 8026328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802632c:	2a39      	cmp	r2, #57	; 0x39
 802632e:	d106      	bne.n	802633e <_dtoa_r+0x5fe>
 8026330:	9a01      	ldr	r2, [sp, #4]
 8026332:	429a      	cmp	r2, r3
 8026334:	d1f7      	bne.n	8026326 <_dtoa_r+0x5e6>
 8026336:	9901      	ldr	r1, [sp, #4]
 8026338:	2230      	movs	r2, #48	; 0x30
 802633a:	3701      	adds	r7, #1
 802633c:	700a      	strb	r2, [r1, #0]
 802633e:	781a      	ldrb	r2, [r3, #0]
 8026340:	3201      	adds	r2, #1
 8026342:	701a      	strb	r2, [r3, #0]
 8026344:	e7ae      	b.n	80262a4 <_dtoa_r+0x564>
 8026346:	ee27 7b04 	vmul.f64	d7, d7, d4
 802634a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026352:	d1b2      	bne.n	80262ba <_dtoa_r+0x57a>
 8026354:	e7d3      	b.n	80262fe <_dtoa_r+0x5be>
 8026356:	bf00      	nop
 8026358:	08044de0 	.word	0x08044de0
 802635c:	08044db8 	.word	0x08044db8
 8026360:	9907      	ldr	r1, [sp, #28]
 8026362:	2900      	cmp	r1, #0
 8026364:	f000 80d0 	beq.w	8026508 <_dtoa_r+0x7c8>
 8026368:	9906      	ldr	r1, [sp, #24]
 802636a:	2901      	cmp	r1, #1
 802636c:	f300 80b4 	bgt.w	80264d8 <_dtoa_r+0x798>
 8026370:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026372:	2900      	cmp	r1, #0
 8026374:	f000 80ac 	beq.w	80264d0 <_dtoa_r+0x790>
 8026378:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802637c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026380:	461c      	mov	r4, r3
 8026382:	930a      	str	r3, [sp, #40]	; 0x28
 8026384:	9b04      	ldr	r3, [sp, #16]
 8026386:	4413      	add	r3, r2
 8026388:	9304      	str	r3, [sp, #16]
 802638a:	9b05      	ldr	r3, [sp, #20]
 802638c:	2101      	movs	r1, #1
 802638e:	4413      	add	r3, r2
 8026390:	4630      	mov	r0, r6
 8026392:	9305      	str	r3, [sp, #20]
 8026394:	f000 fd94 	bl	8026ec0 <__i2b>
 8026398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802639a:	4607      	mov	r7, r0
 802639c:	f1b8 0f00 	cmp.w	r8, #0
 80263a0:	dd0d      	ble.n	80263be <_dtoa_r+0x67e>
 80263a2:	9a05      	ldr	r2, [sp, #20]
 80263a4:	2a00      	cmp	r2, #0
 80263a6:	dd0a      	ble.n	80263be <_dtoa_r+0x67e>
 80263a8:	4542      	cmp	r2, r8
 80263aa:	9904      	ldr	r1, [sp, #16]
 80263ac:	bfa8      	it	ge
 80263ae:	4642      	movge	r2, r8
 80263b0:	1a89      	subs	r1, r1, r2
 80263b2:	9104      	str	r1, [sp, #16]
 80263b4:	9905      	ldr	r1, [sp, #20]
 80263b6:	eba8 0802 	sub.w	r8, r8, r2
 80263ba:	1a8a      	subs	r2, r1, r2
 80263bc:	9205      	str	r2, [sp, #20]
 80263be:	b303      	cbz	r3, 8026402 <_dtoa_r+0x6c2>
 80263c0:	9a07      	ldr	r2, [sp, #28]
 80263c2:	2a00      	cmp	r2, #0
 80263c4:	f000 80a5 	beq.w	8026512 <_dtoa_r+0x7d2>
 80263c8:	2c00      	cmp	r4, #0
 80263ca:	dd13      	ble.n	80263f4 <_dtoa_r+0x6b4>
 80263cc:	4639      	mov	r1, r7
 80263ce:	4622      	mov	r2, r4
 80263d0:	4630      	mov	r0, r6
 80263d2:	930d      	str	r3, [sp, #52]	; 0x34
 80263d4:	f000 fe34 	bl	8027040 <__pow5mult>
 80263d8:	462a      	mov	r2, r5
 80263da:	4601      	mov	r1, r0
 80263dc:	4607      	mov	r7, r0
 80263de:	4630      	mov	r0, r6
 80263e0:	f000 fd84 	bl	8026eec <__multiply>
 80263e4:	4629      	mov	r1, r5
 80263e6:	900a      	str	r0, [sp, #40]	; 0x28
 80263e8:	4630      	mov	r0, r6
 80263ea:	f000 fcb1 	bl	8026d50 <_Bfree>
 80263ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80263f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80263f2:	4615      	mov	r5, r2
 80263f4:	1b1a      	subs	r2, r3, r4
 80263f6:	d004      	beq.n	8026402 <_dtoa_r+0x6c2>
 80263f8:	4629      	mov	r1, r5
 80263fa:	4630      	mov	r0, r6
 80263fc:	f000 fe20 	bl	8027040 <__pow5mult>
 8026400:	4605      	mov	r5, r0
 8026402:	2101      	movs	r1, #1
 8026404:	4630      	mov	r0, r6
 8026406:	f000 fd5b 	bl	8026ec0 <__i2b>
 802640a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802640c:	2b00      	cmp	r3, #0
 802640e:	4604      	mov	r4, r0
 8026410:	f340 8081 	ble.w	8026516 <_dtoa_r+0x7d6>
 8026414:	461a      	mov	r2, r3
 8026416:	4601      	mov	r1, r0
 8026418:	4630      	mov	r0, r6
 802641a:	f000 fe11 	bl	8027040 <__pow5mult>
 802641e:	9b06      	ldr	r3, [sp, #24]
 8026420:	2b01      	cmp	r3, #1
 8026422:	4604      	mov	r4, r0
 8026424:	dd7a      	ble.n	802651c <_dtoa_r+0x7dc>
 8026426:	2300      	movs	r3, #0
 8026428:	930a      	str	r3, [sp, #40]	; 0x28
 802642a:	6922      	ldr	r2, [r4, #16]
 802642c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026430:	6910      	ldr	r0, [r2, #16]
 8026432:	f000 fcf5 	bl	8026e20 <__hi0bits>
 8026436:	f1c0 0020 	rsb	r0, r0, #32
 802643a:	9b05      	ldr	r3, [sp, #20]
 802643c:	4418      	add	r0, r3
 802643e:	f010 001f 	ands.w	r0, r0, #31
 8026442:	f000 808c 	beq.w	802655e <_dtoa_r+0x81e>
 8026446:	f1c0 0220 	rsb	r2, r0, #32
 802644a:	2a04      	cmp	r2, #4
 802644c:	f340 8085 	ble.w	802655a <_dtoa_r+0x81a>
 8026450:	f1c0 001c 	rsb	r0, r0, #28
 8026454:	9b04      	ldr	r3, [sp, #16]
 8026456:	4403      	add	r3, r0
 8026458:	9304      	str	r3, [sp, #16]
 802645a:	9b05      	ldr	r3, [sp, #20]
 802645c:	4403      	add	r3, r0
 802645e:	4480      	add	r8, r0
 8026460:	9305      	str	r3, [sp, #20]
 8026462:	9b04      	ldr	r3, [sp, #16]
 8026464:	2b00      	cmp	r3, #0
 8026466:	dd05      	ble.n	8026474 <_dtoa_r+0x734>
 8026468:	4629      	mov	r1, r5
 802646a:	461a      	mov	r2, r3
 802646c:	4630      	mov	r0, r6
 802646e:	f000 fe41 	bl	80270f4 <__lshift>
 8026472:	4605      	mov	r5, r0
 8026474:	9b05      	ldr	r3, [sp, #20]
 8026476:	2b00      	cmp	r3, #0
 8026478:	dd05      	ble.n	8026486 <_dtoa_r+0x746>
 802647a:	4621      	mov	r1, r4
 802647c:	461a      	mov	r2, r3
 802647e:	4630      	mov	r0, r6
 8026480:	f000 fe38 	bl	80270f4 <__lshift>
 8026484:	4604      	mov	r4, r0
 8026486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026488:	2b00      	cmp	r3, #0
 802648a:	d06a      	beq.n	8026562 <_dtoa_r+0x822>
 802648c:	4621      	mov	r1, r4
 802648e:	4628      	mov	r0, r5
 8026490:	f000 fea0 	bl	80271d4 <__mcmp>
 8026494:	2800      	cmp	r0, #0
 8026496:	da64      	bge.n	8026562 <_dtoa_r+0x822>
 8026498:	2300      	movs	r3, #0
 802649a:	4629      	mov	r1, r5
 802649c:	220a      	movs	r2, #10
 802649e:	4630      	mov	r0, r6
 80264a0:	f000 fc78 	bl	8026d94 <__multadd>
 80264a4:	9b07      	ldr	r3, [sp, #28]
 80264a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80264aa:	4605      	mov	r5, r0
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	f000 8191 	beq.w	80267d4 <_dtoa_r+0xa94>
 80264b2:	4639      	mov	r1, r7
 80264b4:	2300      	movs	r3, #0
 80264b6:	220a      	movs	r2, #10
 80264b8:	4630      	mov	r0, r6
 80264ba:	f000 fc6b 	bl	8026d94 <__multadd>
 80264be:	f1ba 0f00 	cmp.w	sl, #0
 80264c2:	4607      	mov	r7, r0
 80264c4:	f300 808d 	bgt.w	80265e2 <_dtoa_r+0x8a2>
 80264c8:	9b06      	ldr	r3, [sp, #24]
 80264ca:	2b02      	cmp	r3, #2
 80264cc:	dc50      	bgt.n	8026570 <_dtoa_r+0x830>
 80264ce:	e088      	b.n	80265e2 <_dtoa_r+0x8a2>
 80264d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80264d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80264d6:	e751      	b.n	802637c <_dtoa_r+0x63c>
 80264d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80264dc:	42a3      	cmp	r3, r4
 80264de:	bfbf      	itttt	lt
 80264e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80264e2:	1ae3      	sublt	r3, r4, r3
 80264e4:	18d2      	addlt	r2, r2, r3
 80264e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80264e8:	bfb6      	itet	lt
 80264ea:	4623      	movlt	r3, r4
 80264ec:	1b1c      	subge	r4, r3, r4
 80264ee:	2400      	movlt	r4, #0
 80264f0:	f1b9 0f00 	cmp.w	r9, #0
 80264f4:	bfb5      	itete	lt
 80264f6:	9a04      	ldrlt	r2, [sp, #16]
 80264f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80264fc:	eba2 0809 	sublt.w	r8, r2, r9
 8026500:	464a      	movge	r2, r9
 8026502:	bfb8      	it	lt
 8026504:	2200      	movlt	r2, #0
 8026506:	e73c      	b.n	8026382 <_dtoa_r+0x642>
 8026508:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802650c:	9f07      	ldr	r7, [sp, #28]
 802650e:	461c      	mov	r4, r3
 8026510:	e744      	b.n	802639c <_dtoa_r+0x65c>
 8026512:	461a      	mov	r2, r3
 8026514:	e770      	b.n	80263f8 <_dtoa_r+0x6b8>
 8026516:	9b06      	ldr	r3, [sp, #24]
 8026518:	2b01      	cmp	r3, #1
 802651a:	dc18      	bgt.n	802654e <_dtoa_r+0x80e>
 802651c:	9b02      	ldr	r3, [sp, #8]
 802651e:	b9b3      	cbnz	r3, 802654e <_dtoa_r+0x80e>
 8026520:	9b03      	ldr	r3, [sp, #12]
 8026522:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026526:	b9a2      	cbnz	r2, 8026552 <_dtoa_r+0x812>
 8026528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802652c:	0d12      	lsrs	r2, r2, #20
 802652e:	0512      	lsls	r2, r2, #20
 8026530:	b18a      	cbz	r2, 8026556 <_dtoa_r+0x816>
 8026532:	9b04      	ldr	r3, [sp, #16]
 8026534:	3301      	adds	r3, #1
 8026536:	9304      	str	r3, [sp, #16]
 8026538:	9b05      	ldr	r3, [sp, #20]
 802653a:	3301      	adds	r3, #1
 802653c:	9305      	str	r3, [sp, #20]
 802653e:	2301      	movs	r3, #1
 8026540:	930a      	str	r3, [sp, #40]	; 0x28
 8026542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026544:	2b00      	cmp	r3, #0
 8026546:	f47f af70 	bne.w	802642a <_dtoa_r+0x6ea>
 802654a:	2001      	movs	r0, #1
 802654c:	e775      	b.n	802643a <_dtoa_r+0x6fa>
 802654e:	2300      	movs	r3, #0
 8026550:	e7f6      	b.n	8026540 <_dtoa_r+0x800>
 8026552:	9b02      	ldr	r3, [sp, #8]
 8026554:	e7f4      	b.n	8026540 <_dtoa_r+0x800>
 8026556:	920a      	str	r2, [sp, #40]	; 0x28
 8026558:	e7f3      	b.n	8026542 <_dtoa_r+0x802>
 802655a:	d082      	beq.n	8026462 <_dtoa_r+0x722>
 802655c:	4610      	mov	r0, r2
 802655e:	301c      	adds	r0, #28
 8026560:	e778      	b.n	8026454 <_dtoa_r+0x714>
 8026562:	f1b9 0f00 	cmp.w	r9, #0
 8026566:	dc37      	bgt.n	80265d8 <_dtoa_r+0x898>
 8026568:	9b06      	ldr	r3, [sp, #24]
 802656a:	2b02      	cmp	r3, #2
 802656c:	dd34      	ble.n	80265d8 <_dtoa_r+0x898>
 802656e:	46ca      	mov	sl, r9
 8026570:	f1ba 0f00 	cmp.w	sl, #0
 8026574:	d10d      	bne.n	8026592 <_dtoa_r+0x852>
 8026576:	4621      	mov	r1, r4
 8026578:	4653      	mov	r3, sl
 802657a:	2205      	movs	r2, #5
 802657c:	4630      	mov	r0, r6
 802657e:	f000 fc09 	bl	8026d94 <__multadd>
 8026582:	4601      	mov	r1, r0
 8026584:	4604      	mov	r4, r0
 8026586:	4628      	mov	r0, r5
 8026588:	f000 fe24 	bl	80271d4 <__mcmp>
 802658c:	2800      	cmp	r0, #0
 802658e:	f73f adeb 	bgt.w	8026168 <_dtoa_r+0x428>
 8026592:	9b08      	ldr	r3, [sp, #32]
 8026594:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026598:	ea6f 0b03 	mvn.w	fp, r3
 802659c:	f04f 0900 	mov.w	r9, #0
 80265a0:	4621      	mov	r1, r4
 80265a2:	4630      	mov	r0, r6
 80265a4:	f000 fbd4 	bl	8026d50 <_Bfree>
 80265a8:	2f00      	cmp	r7, #0
 80265aa:	f43f aea8 	beq.w	80262fe <_dtoa_r+0x5be>
 80265ae:	f1b9 0f00 	cmp.w	r9, #0
 80265b2:	d005      	beq.n	80265c0 <_dtoa_r+0x880>
 80265b4:	45b9      	cmp	r9, r7
 80265b6:	d003      	beq.n	80265c0 <_dtoa_r+0x880>
 80265b8:	4649      	mov	r1, r9
 80265ba:	4630      	mov	r0, r6
 80265bc:	f000 fbc8 	bl	8026d50 <_Bfree>
 80265c0:	4639      	mov	r1, r7
 80265c2:	4630      	mov	r0, r6
 80265c4:	f000 fbc4 	bl	8026d50 <_Bfree>
 80265c8:	e699      	b.n	80262fe <_dtoa_r+0x5be>
 80265ca:	2400      	movs	r4, #0
 80265cc:	4627      	mov	r7, r4
 80265ce:	e7e0      	b.n	8026592 <_dtoa_r+0x852>
 80265d0:	46bb      	mov	fp, r7
 80265d2:	4604      	mov	r4, r0
 80265d4:	4607      	mov	r7, r0
 80265d6:	e5c7      	b.n	8026168 <_dtoa_r+0x428>
 80265d8:	9b07      	ldr	r3, [sp, #28]
 80265da:	46ca      	mov	sl, r9
 80265dc:	2b00      	cmp	r3, #0
 80265de:	f000 8100 	beq.w	80267e2 <_dtoa_r+0xaa2>
 80265e2:	f1b8 0f00 	cmp.w	r8, #0
 80265e6:	dd05      	ble.n	80265f4 <_dtoa_r+0x8b4>
 80265e8:	4639      	mov	r1, r7
 80265ea:	4642      	mov	r2, r8
 80265ec:	4630      	mov	r0, r6
 80265ee:	f000 fd81 	bl	80270f4 <__lshift>
 80265f2:	4607      	mov	r7, r0
 80265f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d05d      	beq.n	80266b6 <_dtoa_r+0x976>
 80265fa:	6879      	ldr	r1, [r7, #4]
 80265fc:	4630      	mov	r0, r6
 80265fe:	f000 fb67 	bl	8026cd0 <_Balloc>
 8026602:	4680      	mov	r8, r0
 8026604:	b928      	cbnz	r0, 8026612 <_dtoa_r+0x8d2>
 8026606:	4b82      	ldr	r3, [pc, #520]	; (8026810 <_dtoa_r+0xad0>)
 8026608:	4602      	mov	r2, r0
 802660a:	f240 21ea 	movw	r1, #746	; 0x2ea
 802660e:	f7ff bbaf 	b.w	8025d70 <_dtoa_r+0x30>
 8026612:	693a      	ldr	r2, [r7, #16]
 8026614:	3202      	adds	r2, #2
 8026616:	0092      	lsls	r2, r2, #2
 8026618:	f107 010c 	add.w	r1, r7, #12
 802661c:	300c      	adds	r0, #12
 802661e:	f7fc feab 	bl	8023378 <memcpy>
 8026622:	2201      	movs	r2, #1
 8026624:	4641      	mov	r1, r8
 8026626:	4630      	mov	r0, r6
 8026628:	f000 fd64 	bl	80270f4 <__lshift>
 802662c:	9b01      	ldr	r3, [sp, #4]
 802662e:	3301      	adds	r3, #1
 8026630:	9304      	str	r3, [sp, #16]
 8026632:	9b01      	ldr	r3, [sp, #4]
 8026634:	4453      	add	r3, sl
 8026636:	9308      	str	r3, [sp, #32]
 8026638:	9b02      	ldr	r3, [sp, #8]
 802663a:	f003 0301 	and.w	r3, r3, #1
 802663e:	46b9      	mov	r9, r7
 8026640:	9307      	str	r3, [sp, #28]
 8026642:	4607      	mov	r7, r0
 8026644:	9b04      	ldr	r3, [sp, #16]
 8026646:	4621      	mov	r1, r4
 8026648:	3b01      	subs	r3, #1
 802664a:	4628      	mov	r0, r5
 802664c:	9302      	str	r3, [sp, #8]
 802664e:	f7ff fae9 	bl	8025c24 <quorem>
 8026652:	4603      	mov	r3, r0
 8026654:	3330      	adds	r3, #48	; 0x30
 8026656:	9005      	str	r0, [sp, #20]
 8026658:	4649      	mov	r1, r9
 802665a:	4628      	mov	r0, r5
 802665c:	9309      	str	r3, [sp, #36]	; 0x24
 802665e:	f000 fdb9 	bl	80271d4 <__mcmp>
 8026662:	463a      	mov	r2, r7
 8026664:	4682      	mov	sl, r0
 8026666:	4621      	mov	r1, r4
 8026668:	4630      	mov	r0, r6
 802666a:	f000 fdcf 	bl	802720c <__mdiff>
 802666e:	68c2      	ldr	r2, [r0, #12]
 8026670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026672:	4680      	mov	r8, r0
 8026674:	bb0a      	cbnz	r2, 80266ba <_dtoa_r+0x97a>
 8026676:	4601      	mov	r1, r0
 8026678:	4628      	mov	r0, r5
 802667a:	f000 fdab 	bl	80271d4 <__mcmp>
 802667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026680:	4602      	mov	r2, r0
 8026682:	4641      	mov	r1, r8
 8026684:	4630      	mov	r0, r6
 8026686:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802668a:	f000 fb61 	bl	8026d50 <_Bfree>
 802668e:	9b06      	ldr	r3, [sp, #24]
 8026690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026692:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026696:	ea43 0102 	orr.w	r1, r3, r2
 802669a:	9b07      	ldr	r3, [sp, #28]
 802669c:	430b      	orrs	r3, r1
 802669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80266a0:	d10d      	bne.n	80266be <_dtoa_r+0x97e>
 80266a2:	2b39      	cmp	r3, #57	; 0x39
 80266a4:	d029      	beq.n	80266fa <_dtoa_r+0x9ba>
 80266a6:	f1ba 0f00 	cmp.w	sl, #0
 80266aa:	dd01      	ble.n	80266b0 <_dtoa_r+0x970>
 80266ac:	9b05      	ldr	r3, [sp, #20]
 80266ae:	3331      	adds	r3, #49	; 0x31
 80266b0:	9a02      	ldr	r2, [sp, #8]
 80266b2:	7013      	strb	r3, [r2, #0]
 80266b4:	e774      	b.n	80265a0 <_dtoa_r+0x860>
 80266b6:	4638      	mov	r0, r7
 80266b8:	e7b8      	b.n	802662c <_dtoa_r+0x8ec>
 80266ba:	2201      	movs	r2, #1
 80266bc:	e7e1      	b.n	8026682 <_dtoa_r+0x942>
 80266be:	f1ba 0f00 	cmp.w	sl, #0
 80266c2:	db06      	blt.n	80266d2 <_dtoa_r+0x992>
 80266c4:	9906      	ldr	r1, [sp, #24]
 80266c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80266ca:	9907      	ldr	r1, [sp, #28]
 80266cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80266d0:	d120      	bne.n	8026714 <_dtoa_r+0x9d4>
 80266d2:	2a00      	cmp	r2, #0
 80266d4:	ddec      	ble.n	80266b0 <_dtoa_r+0x970>
 80266d6:	4629      	mov	r1, r5
 80266d8:	2201      	movs	r2, #1
 80266da:	4630      	mov	r0, r6
 80266dc:	9304      	str	r3, [sp, #16]
 80266de:	f000 fd09 	bl	80270f4 <__lshift>
 80266e2:	4621      	mov	r1, r4
 80266e4:	4605      	mov	r5, r0
 80266e6:	f000 fd75 	bl	80271d4 <__mcmp>
 80266ea:	2800      	cmp	r0, #0
 80266ec:	9b04      	ldr	r3, [sp, #16]
 80266ee:	dc02      	bgt.n	80266f6 <_dtoa_r+0x9b6>
 80266f0:	d1de      	bne.n	80266b0 <_dtoa_r+0x970>
 80266f2:	07da      	lsls	r2, r3, #31
 80266f4:	d5dc      	bpl.n	80266b0 <_dtoa_r+0x970>
 80266f6:	2b39      	cmp	r3, #57	; 0x39
 80266f8:	d1d8      	bne.n	80266ac <_dtoa_r+0x96c>
 80266fa:	9a02      	ldr	r2, [sp, #8]
 80266fc:	2339      	movs	r3, #57	; 0x39
 80266fe:	7013      	strb	r3, [r2, #0]
 8026700:	4643      	mov	r3, r8
 8026702:	4698      	mov	r8, r3
 8026704:	3b01      	subs	r3, #1
 8026706:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802670a:	2a39      	cmp	r2, #57	; 0x39
 802670c:	d051      	beq.n	80267b2 <_dtoa_r+0xa72>
 802670e:	3201      	adds	r2, #1
 8026710:	701a      	strb	r2, [r3, #0]
 8026712:	e745      	b.n	80265a0 <_dtoa_r+0x860>
 8026714:	2a00      	cmp	r2, #0
 8026716:	dd03      	ble.n	8026720 <_dtoa_r+0x9e0>
 8026718:	2b39      	cmp	r3, #57	; 0x39
 802671a:	d0ee      	beq.n	80266fa <_dtoa_r+0x9ba>
 802671c:	3301      	adds	r3, #1
 802671e:	e7c7      	b.n	80266b0 <_dtoa_r+0x970>
 8026720:	9a04      	ldr	r2, [sp, #16]
 8026722:	9908      	ldr	r1, [sp, #32]
 8026724:	f802 3c01 	strb.w	r3, [r2, #-1]
 8026728:	428a      	cmp	r2, r1
 802672a:	d02b      	beq.n	8026784 <_dtoa_r+0xa44>
 802672c:	4629      	mov	r1, r5
 802672e:	2300      	movs	r3, #0
 8026730:	220a      	movs	r2, #10
 8026732:	4630      	mov	r0, r6
 8026734:	f000 fb2e 	bl	8026d94 <__multadd>
 8026738:	45b9      	cmp	r9, r7
 802673a:	4605      	mov	r5, r0
 802673c:	f04f 0300 	mov.w	r3, #0
 8026740:	f04f 020a 	mov.w	r2, #10
 8026744:	4649      	mov	r1, r9
 8026746:	4630      	mov	r0, r6
 8026748:	d107      	bne.n	802675a <_dtoa_r+0xa1a>
 802674a:	f000 fb23 	bl	8026d94 <__multadd>
 802674e:	4681      	mov	r9, r0
 8026750:	4607      	mov	r7, r0
 8026752:	9b04      	ldr	r3, [sp, #16]
 8026754:	3301      	adds	r3, #1
 8026756:	9304      	str	r3, [sp, #16]
 8026758:	e774      	b.n	8026644 <_dtoa_r+0x904>
 802675a:	f000 fb1b 	bl	8026d94 <__multadd>
 802675e:	4639      	mov	r1, r7
 8026760:	4681      	mov	r9, r0
 8026762:	2300      	movs	r3, #0
 8026764:	220a      	movs	r2, #10
 8026766:	4630      	mov	r0, r6
 8026768:	f000 fb14 	bl	8026d94 <__multadd>
 802676c:	4607      	mov	r7, r0
 802676e:	e7f0      	b.n	8026752 <_dtoa_r+0xa12>
 8026770:	f1ba 0f00 	cmp.w	sl, #0
 8026774:	9a01      	ldr	r2, [sp, #4]
 8026776:	bfcc      	ite	gt
 8026778:	46d0      	movgt	r8, sl
 802677a:	f04f 0801 	movle.w	r8, #1
 802677e:	4490      	add	r8, r2
 8026780:	f04f 0900 	mov.w	r9, #0
 8026784:	4629      	mov	r1, r5
 8026786:	2201      	movs	r2, #1
 8026788:	4630      	mov	r0, r6
 802678a:	9302      	str	r3, [sp, #8]
 802678c:	f000 fcb2 	bl	80270f4 <__lshift>
 8026790:	4621      	mov	r1, r4
 8026792:	4605      	mov	r5, r0
 8026794:	f000 fd1e 	bl	80271d4 <__mcmp>
 8026798:	2800      	cmp	r0, #0
 802679a:	dcb1      	bgt.n	8026700 <_dtoa_r+0x9c0>
 802679c:	d102      	bne.n	80267a4 <_dtoa_r+0xa64>
 802679e:	9b02      	ldr	r3, [sp, #8]
 80267a0:	07db      	lsls	r3, r3, #31
 80267a2:	d4ad      	bmi.n	8026700 <_dtoa_r+0x9c0>
 80267a4:	4643      	mov	r3, r8
 80267a6:	4698      	mov	r8, r3
 80267a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80267ac:	2a30      	cmp	r2, #48	; 0x30
 80267ae:	d0fa      	beq.n	80267a6 <_dtoa_r+0xa66>
 80267b0:	e6f6      	b.n	80265a0 <_dtoa_r+0x860>
 80267b2:	9a01      	ldr	r2, [sp, #4]
 80267b4:	429a      	cmp	r2, r3
 80267b6:	d1a4      	bne.n	8026702 <_dtoa_r+0x9c2>
 80267b8:	f10b 0b01 	add.w	fp, fp, #1
 80267bc:	2331      	movs	r3, #49	; 0x31
 80267be:	e778      	b.n	80266b2 <_dtoa_r+0x972>
 80267c0:	4b14      	ldr	r3, [pc, #80]	; (8026814 <_dtoa_r+0xad4>)
 80267c2:	f7ff bb27 	b.w	8025e14 <_dtoa_r+0xd4>
 80267c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80267c8:	2b00      	cmp	r3, #0
 80267ca:	f47f ab03 	bne.w	8025dd4 <_dtoa_r+0x94>
 80267ce:	4b12      	ldr	r3, [pc, #72]	; (8026818 <_dtoa_r+0xad8>)
 80267d0:	f7ff bb20 	b.w	8025e14 <_dtoa_r+0xd4>
 80267d4:	f1ba 0f00 	cmp.w	sl, #0
 80267d8:	dc03      	bgt.n	80267e2 <_dtoa_r+0xaa2>
 80267da:	9b06      	ldr	r3, [sp, #24]
 80267dc:	2b02      	cmp	r3, #2
 80267de:	f73f aec7 	bgt.w	8026570 <_dtoa_r+0x830>
 80267e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80267e6:	4621      	mov	r1, r4
 80267e8:	4628      	mov	r0, r5
 80267ea:	f7ff fa1b 	bl	8025c24 <quorem>
 80267ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80267f2:	f808 3b01 	strb.w	r3, [r8], #1
 80267f6:	9a01      	ldr	r2, [sp, #4]
 80267f8:	eba8 0202 	sub.w	r2, r8, r2
 80267fc:	4592      	cmp	sl, r2
 80267fe:	ddb7      	ble.n	8026770 <_dtoa_r+0xa30>
 8026800:	4629      	mov	r1, r5
 8026802:	2300      	movs	r3, #0
 8026804:	220a      	movs	r2, #10
 8026806:	4630      	mov	r0, r6
 8026808:	f000 fac4 	bl	8026d94 <__multadd>
 802680c:	4605      	mov	r5, r0
 802680e:	e7ea      	b.n	80267e6 <_dtoa_r+0xaa6>
 8026810:	08044d49 	.word	0x08044d49
 8026814:	08044ec9 	.word	0x08044ec9
 8026818:	08044ce1 	.word	0x08044ce1

0802681c <__errno>:
 802681c:	4b01      	ldr	r3, [pc, #4]	; (8026824 <__errno+0x8>)
 802681e:	6818      	ldr	r0, [r3, #0]
 8026820:	4770      	bx	lr
 8026822:	bf00      	nop
 8026824:	20000488 	.word	0x20000488

08026828 <__sflush_r>:
 8026828:	898a      	ldrh	r2, [r1, #12]
 802682a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802682e:	4605      	mov	r5, r0
 8026830:	0710      	lsls	r0, r2, #28
 8026832:	460c      	mov	r4, r1
 8026834:	d458      	bmi.n	80268e8 <__sflush_r+0xc0>
 8026836:	684b      	ldr	r3, [r1, #4]
 8026838:	2b00      	cmp	r3, #0
 802683a:	dc05      	bgt.n	8026848 <__sflush_r+0x20>
 802683c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802683e:	2b00      	cmp	r3, #0
 8026840:	dc02      	bgt.n	8026848 <__sflush_r+0x20>
 8026842:	2000      	movs	r0, #0
 8026844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802684a:	2e00      	cmp	r6, #0
 802684c:	d0f9      	beq.n	8026842 <__sflush_r+0x1a>
 802684e:	2300      	movs	r3, #0
 8026850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026854:	682f      	ldr	r7, [r5, #0]
 8026856:	602b      	str	r3, [r5, #0]
 8026858:	d032      	beq.n	80268c0 <__sflush_r+0x98>
 802685a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802685c:	89a3      	ldrh	r3, [r4, #12]
 802685e:	075a      	lsls	r2, r3, #29
 8026860:	d505      	bpl.n	802686e <__sflush_r+0x46>
 8026862:	6863      	ldr	r3, [r4, #4]
 8026864:	1ac0      	subs	r0, r0, r3
 8026866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026868:	b10b      	cbz	r3, 802686e <__sflush_r+0x46>
 802686a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802686c:	1ac0      	subs	r0, r0, r3
 802686e:	2300      	movs	r3, #0
 8026870:	4602      	mov	r2, r0
 8026872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026874:	6a21      	ldr	r1, [r4, #32]
 8026876:	4628      	mov	r0, r5
 8026878:	47b0      	blx	r6
 802687a:	1c43      	adds	r3, r0, #1
 802687c:	89a3      	ldrh	r3, [r4, #12]
 802687e:	d106      	bne.n	802688e <__sflush_r+0x66>
 8026880:	6829      	ldr	r1, [r5, #0]
 8026882:	291d      	cmp	r1, #29
 8026884:	d82c      	bhi.n	80268e0 <__sflush_r+0xb8>
 8026886:	4a2a      	ldr	r2, [pc, #168]	; (8026930 <__sflush_r+0x108>)
 8026888:	40ca      	lsrs	r2, r1
 802688a:	07d6      	lsls	r6, r2, #31
 802688c:	d528      	bpl.n	80268e0 <__sflush_r+0xb8>
 802688e:	2200      	movs	r2, #0
 8026890:	6062      	str	r2, [r4, #4]
 8026892:	04d9      	lsls	r1, r3, #19
 8026894:	6922      	ldr	r2, [r4, #16]
 8026896:	6022      	str	r2, [r4, #0]
 8026898:	d504      	bpl.n	80268a4 <__sflush_r+0x7c>
 802689a:	1c42      	adds	r2, r0, #1
 802689c:	d101      	bne.n	80268a2 <__sflush_r+0x7a>
 802689e:	682b      	ldr	r3, [r5, #0]
 80268a0:	b903      	cbnz	r3, 80268a4 <__sflush_r+0x7c>
 80268a2:	6560      	str	r0, [r4, #84]	; 0x54
 80268a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80268a6:	602f      	str	r7, [r5, #0]
 80268a8:	2900      	cmp	r1, #0
 80268aa:	d0ca      	beq.n	8026842 <__sflush_r+0x1a>
 80268ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80268b0:	4299      	cmp	r1, r3
 80268b2:	d002      	beq.n	80268ba <__sflush_r+0x92>
 80268b4:	4628      	mov	r0, r5
 80268b6:	f7fd f801 	bl	80238bc <_free_r>
 80268ba:	2000      	movs	r0, #0
 80268bc:	6360      	str	r0, [r4, #52]	; 0x34
 80268be:	e7c1      	b.n	8026844 <__sflush_r+0x1c>
 80268c0:	6a21      	ldr	r1, [r4, #32]
 80268c2:	2301      	movs	r3, #1
 80268c4:	4628      	mov	r0, r5
 80268c6:	47b0      	blx	r6
 80268c8:	1c41      	adds	r1, r0, #1
 80268ca:	d1c7      	bne.n	802685c <__sflush_r+0x34>
 80268cc:	682b      	ldr	r3, [r5, #0]
 80268ce:	2b00      	cmp	r3, #0
 80268d0:	d0c4      	beq.n	802685c <__sflush_r+0x34>
 80268d2:	2b1d      	cmp	r3, #29
 80268d4:	d001      	beq.n	80268da <__sflush_r+0xb2>
 80268d6:	2b16      	cmp	r3, #22
 80268d8:	d101      	bne.n	80268de <__sflush_r+0xb6>
 80268da:	602f      	str	r7, [r5, #0]
 80268dc:	e7b1      	b.n	8026842 <__sflush_r+0x1a>
 80268de:	89a3      	ldrh	r3, [r4, #12]
 80268e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80268e4:	81a3      	strh	r3, [r4, #12]
 80268e6:	e7ad      	b.n	8026844 <__sflush_r+0x1c>
 80268e8:	690f      	ldr	r7, [r1, #16]
 80268ea:	2f00      	cmp	r7, #0
 80268ec:	d0a9      	beq.n	8026842 <__sflush_r+0x1a>
 80268ee:	0793      	lsls	r3, r2, #30
 80268f0:	680e      	ldr	r6, [r1, #0]
 80268f2:	bf08      	it	eq
 80268f4:	694b      	ldreq	r3, [r1, #20]
 80268f6:	600f      	str	r7, [r1, #0]
 80268f8:	bf18      	it	ne
 80268fa:	2300      	movne	r3, #0
 80268fc:	eba6 0807 	sub.w	r8, r6, r7
 8026900:	608b      	str	r3, [r1, #8]
 8026902:	f1b8 0f00 	cmp.w	r8, #0
 8026906:	dd9c      	ble.n	8026842 <__sflush_r+0x1a>
 8026908:	6a21      	ldr	r1, [r4, #32]
 802690a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802690c:	4643      	mov	r3, r8
 802690e:	463a      	mov	r2, r7
 8026910:	4628      	mov	r0, r5
 8026912:	47b0      	blx	r6
 8026914:	2800      	cmp	r0, #0
 8026916:	dc06      	bgt.n	8026926 <__sflush_r+0xfe>
 8026918:	89a3      	ldrh	r3, [r4, #12]
 802691a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802691e:	81a3      	strh	r3, [r4, #12]
 8026920:	f04f 30ff 	mov.w	r0, #4294967295
 8026924:	e78e      	b.n	8026844 <__sflush_r+0x1c>
 8026926:	4407      	add	r7, r0
 8026928:	eba8 0800 	sub.w	r8, r8, r0
 802692c:	e7e9      	b.n	8026902 <__sflush_r+0xda>
 802692e:	bf00      	nop
 8026930:	20400001 	.word	0x20400001

08026934 <_fflush_r>:
 8026934:	b538      	push	{r3, r4, r5, lr}
 8026936:	690b      	ldr	r3, [r1, #16]
 8026938:	4605      	mov	r5, r0
 802693a:	460c      	mov	r4, r1
 802693c:	b913      	cbnz	r3, 8026944 <_fflush_r+0x10>
 802693e:	2500      	movs	r5, #0
 8026940:	4628      	mov	r0, r5
 8026942:	bd38      	pop	{r3, r4, r5, pc}
 8026944:	b118      	cbz	r0, 802694e <_fflush_r+0x1a>
 8026946:	6983      	ldr	r3, [r0, #24]
 8026948:	b90b      	cbnz	r3, 802694e <_fflush_r+0x1a>
 802694a:	f7fc fb1b 	bl	8022f84 <__sinit>
 802694e:	4b14      	ldr	r3, [pc, #80]	; (80269a0 <_fflush_r+0x6c>)
 8026950:	429c      	cmp	r4, r3
 8026952:	d11b      	bne.n	802698c <_fflush_r+0x58>
 8026954:	686c      	ldr	r4, [r5, #4]
 8026956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802695a:	2b00      	cmp	r3, #0
 802695c:	d0ef      	beq.n	802693e <_fflush_r+0xa>
 802695e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026960:	07d0      	lsls	r0, r2, #31
 8026962:	d404      	bmi.n	802696e <_fflush_r+0x3a>
 8026964:	0599      	lsls	r1, r3, #22
 8026966:	d402      	bmi.n	802696e <_fflush_r+0x3a>
 8026968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802696a:	f7fc fce1 	bl	8023330 <__retarget_lock_acquire_recursive>
 802696e:	4628      	mov	r0, r5
 8026970:	4621      	mov	r1, r4
 8026972:	f7ff ff59 	bl	8026828 <__sflush_r>
 8026976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026978:	07da      	lsls	r2, r3, #31
 802697a:	4605      	mov	r5, r0
 802697c:	d4e0      	bmi.n	8026940 <_fflush_r+0xc>
 802697e:	89a3      	ldrh	r3, [r4, #12]
 8026980:	059b      	lsls	r3, r3, #22
 8026982:	d4dd      	bmi.n	8026940 <_fflush_r+0xc>
 8026984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026986:	f7fc fcd5 	bl	8023334 <__retarget_lock_release_recursive>
 802698a:	e7d9      	b.n	8026940 <_fflush_r+0xc>
 802698c:	4b05      	ldr	r3, [pc, #20]	; (80269a4 <_fflush_r+0x70>)
 802698e:	429c      	cmp	r4, r3
 8026990:	d101      	bne.n	8026996 <_fflush_r+0x62>
 8026992:	68ac      	ldr	r4, [r5, #8]
 8026994:	e7df      	b.n	8026956 <_fflush_r+0x22>
 8026996:	4b04      	ldr	r3, [pc, #16]	; (80269a8 <_fflush_r+0x74>)
 8026998:	429c      	cmp	r4, r3
 802699a:	bf08      	it	eq
 802699c:	68ec      	ldreq	r4, [r5, #12]
 802699e:	e7da      	b.n	8026956 <_fflush_r+0x22>
 80269a0:	0804472c 	.word	0x0804472c
 80269a4:	0804474c 	.word	0x0804474c
 80269a8:	0804470c 	.word	0x0804470c

080269ac <fiprintf>:
 80269ac:	b40e      	push	{r1, r2, r3}
 80269ae:	b503      	push	{r0, r1, lr}
 80269b0:	4601      	mov	r1, r0
 80269b2:	ab03      	add	r3, sp, #12
 80269b4:	4805      	ldr	r0, [pc, #20]	; (80269cc <fiprintf+0x20>)
 80269b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80269ba:	6800      	ldr	r0, [r0, #0]
 80269bc:	9301      	str	r3, [sp, #4]
 80269be:	f001 f879 	bl	8027ab4 <_vfiprintf_r>
 80269c2:	b002      	add	sp, #8
 80269c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80269c8:	b003      	add	sp, #12
 80269ca:	4770      	bx	lr
 80269cc:	20000488 	.word	0x20000488

080269d0 <_findenv_r>:
 80269d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269d4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8026a44 <_findenv_r+0x74>
 80269d8:	4607      	mov	r7, r0
 80269da:	4689      	mov	r9, r1
 80269dc:	4616      	mov	r6, r2
 80269de:	f001 fbe9 	bl	80281b4 <__env_lock>
 80269e2:	f8da 4000 	ldr.w	r4, [sl]
 80269e6:	b134      	cbz	r4, 80269f6 <_findenv_r+0x26>
 80269e8:	464b      	mov	r3, r9
 80269ea:	4698      	mov	r8, r3
 80269ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80269f0:	b13a      	cbz	r2, 8026a02 <_findenv_r+0x32>
 80269f2:	2a3d      	cmp	r2, #61	; 0x3d
 80269f4:	d1f9      	bne.n	80269ea <_findenv_r+0x1a>
 80269f6:	4638      	mov	r0, r7
 80269f8:	f001 fbe2 	bl	80281c0 <__env_unlock>
 80269fc:	2000      	movs	r0, #0
 80269fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a02:	eba8 0809 	sub.w	r8, r8, r9
 8026a06:	46a3      	mov	fp, r4
 8026a08:	f854 0b04 	ldr.w	r0, [r4], #4
 8026a0c:	2800      	cmp	r0, #0
 8026a0e:	d0f2      	beq.n	80269f6 <_findenv_r+0x26>
 8026a10:	4642      	mov	r2, r8
 8026a12:	4649      	mov	r1, r9
 8026a14:	f7fe fc4a 	bl	80252ac <strncmp>
 8026a18:	2800      	cmp	r0, #0
 8026a1a:	d1f4      	bne.n	8026a06 <_findenv_r+0x36>
 8026a1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8026a20:	eb03 0508 	add.w	r5, r3, r8
 8026a24:	f813 3008 	ldrb.w	r3, [r3, r8]
 8026a28:	2b3d      	cmp	r3, #61	; 0x3d
 8026a2a:	d1ec      	bne.n	8026a06 <_findenv_r+0x36>
 8026a2c:	f8da 3000 	ldr.w	r3, [sl]
 8026a30:	ebab 0303 	sub.w	r3, fp, r3
 8026a34:	109b      	asrs	r3, r3, #2
 8026a36:	4638      	mov	r0, r7
 8026a38:	6033      	str	r3, [r6, #0]
 8026a3a:	f001 fbc1 	bl	80281c0 <__env_unlock>
 8026a3e:	1c68      	adds	r0, r5, #1
 8026a40:	e7dd      	b.n	80269fe <_findenv_r+0x2e>
 8026a42:	bf00      	nop
 8026a44:	20000278 	.word	0x20000278

08026a48 <_getenv_r>:
 8026a48:	b507      	push	{r0, r1, r2, lr}
 8026a4a:	aa01      	add	r2, sp, #4
 8026a4c:	f7ff ffc0 	bl	80269d0 <_findenv_r>
 8026a50:	b003      	add	sp, #12
 8026a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8026a56:	Address 0x0000000008026a56 is out of bounds.


08026a58 <__gettzinfo>:
 8026a58:	4800      	ldr	r0, [pc, #0]	; (8026a5c <__gettzinfo+0x4>)
 8026a5a:	4770      	bx	lr
 8026a5c:	200004f8 	.word	0x200004f8

08026a60 <gmtime_r>:
 8026a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a64:	e9d0 6700 	ldrd	r6, r7, [r0]
 8026a68:	460c      	mov	r4, r1
 8026a6a:	4a4f      	ldr	r2, [pc, #316]	; (8026ba8 <gmtime_r+0x148>)
 8026a6c:	2300      	movs	r3, #0
 8026a6e:	4630      	mov	r0, r6
 8026a70:	4639      	mov	r1, r7
 8026a72:	f7d9 fc4d 	bl	8000310 <__aeabi_ldivmod>
 8026a76:	4639      	mov	r1, r7
 8026a78:	4605      	mov	r5, r0
 8026a7a:	4a4b      	ldr	r2, [pc, #300]	; (8026ba8 <gmtime_r+0x148>)
 8026a7c:	4630      	mov	r0, r6
 8026a7e:	2300      	movs	r3, #0
 8026a80:	f7d9 fc46 	bl	8000310 <__aeabi_ldivmod>
 8026a84:	2a00      	cmp	r2, #0
 8026a86:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8026a8a:	bfb7      	itett	lt
 8026a8c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8026a90:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8026a94:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8026a98:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8026a9c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8026aa0:	fbb2 f1f0 	udiv	r1, r2, r0
 8026aa4:	fb00 2211 	mls	r2, r0, r1, r2
 8026aa8:	203c      	movs	r0, #60	; 0x3c
 8026aaa:	60a1      	str	r1, [r4, #8]
 8026aac:	fbb2 f1f0 	udiv	r1, r2, r0
 8026ab0:	fb00 2211 	mls	r2, r0, r1, r2
 8026ab4:	6061      	str	r1, [r4, #4]
 8026ab6:	6022      	str	r2, [r4, #0]
 8026ab8:	2107      	movs	r1, #7
 8026aba:	1cda      	adds	r2, r3, #3
 8026abc:	fb92 f1f1 	sdiv	r1, r2, r1
 8026ac0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8026ac4:	1a52      	subs	r2, r2, r1
 8026ac6:	bf48      	it	mi
 8026ac8:	3207      	addmi	r2, #7
 8026aca:	4d38      	ldr	r5, [pc, #224]	; (8026bac <gmtime_r+0x14c>)
 8026acc:	4838      	ldr	r0, [pc, #224]	; (8026bb0 <gmtime_r+0x150>)
 8026ace:	61a2      	str	r2, [r4, #24]
 8026ad0:	2b00      	cmp	r3, #0
 8026ad2:	bfb7      	itett	lt
 8026ad4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8026ad8:	fb93 f5f5 	sdivge	r5, r3, r5
 8026adc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8026ae0:	fb92 f5f5 	sdivlt	r5, r2, r5
 8026ae4:	fb00 3005 	mla	r0, r0, r5, r3
 8026ae8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8026aec:	fbb0 f2f2 	udiv	r2, r0, r2
 8026af0:	4402      	add	r2, r0
 8026af2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8026af6:	fbb0 f1f3 	udiv	r1, r0, r3
 8026afa:	1a52      	subs	r2, r2, r1
 8026afc:	f240 1c6d 	movw	ip, #365	; 0x16d
 8026b00:	492c      	ldr	r1, [pc, #176]	; (8026bb4 <gmtime_r+0x154>)
 8026b02:	fbb0 f1f1 	udiv	r1, r0, r1
 8026b06:	2764      	movs	r7, #100	; 0x64
 8026b08:	1a52      	subs	r2, r2, r1
 8026b0a:	fbb2 f1fc 	udiv	r1, r2, ip
 8026b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8026b12:	fbb1 f6f7 	udiv	r6, r1, r7
 8026b16:	1af3      	subs	r3, r6, r3
 8026b18:	4403      	add	r3, r0
 8026b1a:	fb0c 3311 	mls	r3, ip, r1, r3
 8026b1e:	2299      	movs	r2, #153	; 0x99
 8026b20:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8026b24:	f10e 0e02 	add.w	lr, lr, #2
 8026b28:	f103 0c01 	add.w	ip, r3, #1
 8026b2c:	fbbe f0f2 	udiv	r0, lr, r2
 8026b30:	4342      	muls	r2, r0
 8026b32:	3202      	adds	r2, #2
 8026b34:	f04f 0805 	mov.w	r8, #5
 8026b38:	fbb2 f2f8 	udiv	r2, r2, r8
 8026b3c:	ebac 0c02 	sub.w	ip, ip, r2
 8026b40:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8026b44:	4596      	cmp	lr, r2
 8026b46:	bf94      	ite	ls
 8026b48:	2202      	movls	r2, #2
 8026b4a:	f06f 0209 	mvnhi.w	r2, #9
 8026b4e:	4410      	add	r0, r2
 8026b50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026b54:	fb02 1505 	mla	r5, r2, r5, r1
 8026b58:	2801      	cmp	r0, #1
 8026b5a:	bf98      	it	ls
 8026b5c:	3501      	addls	r5, #1
 8026b5e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8026b62:	d30d      	bcc.n	8026b80 <gmtime_r+0x120>
 8026b64:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8026b68:	61e3      	str	r3, [r4, #28]
 8026b6a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8026b6e:	2300      	movs	r3, #0
 8026b70:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8026b74:	f8c4 c00c 	str.w	ip, [r4, #12]
 8026b78:	6223      	str	r3, [r4, #32]
 8026b7a:	4620      	mov	r0, r4
 8026b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b80:	078a      	lsls	r2, r1, #30
 8026b82:	d102      	bne.n	8026b8a <gmtime_r+0x12a>
 8026b84:	fb07 1616 	mls	r6, r7, r6, r1
 8026b88:	b95e      	cbnz	r6, 8026ba2 <gmtime_r+0x142>
 8026b8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8026b8e:	fbb1 f6f2 	udiv	r6, r1, r2
 8026b92:	fb02 1216 	mls	r2, r2, r6, r1
 8026b96:	fab2 f282 	clz	r2, r2
 8026b9a:	0952      	lsrs	r2, r2, #5
 8026b9c:	333b      	adds	r3, #59	; 0x3b
 8026b9e:	4413      	add	r3, r2
 8026ba0:	e7e2      	b.n	8026b68 <gmtime_r+0x108>
 8026ba2:	2201      	movs	r2, #1
 8026ba4:	e7fa      	b.n	8026b9c <gmtime_r+0x13c>
 8026ba6:	bf00      	nop
 8026ba8:	00015180 	.word	0x00015180
 8026bac:	00023ab1 	.word	0x00023ab1
 8026bb0:	fffdc54f 	.word	0xfffdc54f
 8026bb4:	00023ab0 	.word	0x00023ab0

08026bb8 <labs>:
 8026bb8:	2800      	cmp	r0, #0
 8026bba:	bfb8      	it	lt
 8026bbc:	4240      	neglt	r0, r0
 8026bbe:	4770      	bx	lr

08026bc0 <_localeconv_r>:
 8026bc0:	4800      	ldr	r0, [pc, #0]	; (8026bc4 <_localeconv_r+0x4>)
 8026bc2:	4770      	bx	lr
 8026bc4:	20000640 	.word	0x20000640

08026bc8 <_lseek_r>:
 8026bc8:	b538      	push	{r3, r4, r5, lr}
 8026bca:	4d07      	ldr	r5, [pc, #28]	; (8026be8 <_lseek_r+0x20>)
 8026bcc:	4604      	mov	r4, r0
 8026bce:	4608      	mov	r0, r1
 8026bd0:	4611      	mov	r1, r2
 8026bd2:	2200      	movs	r2, #0
 8026bd4:	602a      	str	r2, [r5, #0]
 8026bd6:	461a      	mov	r2, r3
 8026bd8:	f7df ff12 	bl	8006a00 <_lseek>
 8026bdc:	1c43      	adds	r3, r0, #1
 8026bde:	d102      	bne.n	8026be6 <_lseek_r+0x1e>
 8026be0:	682b      	ldr	r3, [r5, #0]
 8026be2:	b103      	cbz	r3, 8026be6 <_lseek_r+0x1e>
 8026be4:	6023      	str	r3, [r4, #0]
 8026be6:	bd38      	pop	{r3, r4, r5, pc}
 8026be8:	2002f86c 	.word	0x2002f86c

08026bec <__swhatbuf_r>:
 8026bec:	b570      	push	{r4, r5, r6, lr}
 8026bee:	460e      	mov	r6, r1
 8026bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bf4:	2900      	cmp	r1, #0
 8026bf6:	b096      	sub	sp, #88	; 0x58
 8026bf8:	4614      	mov	r4, r2
 8026bfa:	461d      	mov	r5, r3
 8026bfc:	da08      	bge.n	8026c10 <__swhatbuf_r+0x24>
 8026bfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026c02:	2200      	movs	r2, #0
 8026c04:	602a      	str	r2, [r5, #0]
 8026c06:	061a      	lsls	r2, r3, #24
 8026c08:	d410      	bmi.n	8026c2c <__swhatbuf_r+0x40>
 8026c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026c0e:	e00e      	b.n	8026c2e <__swhatbuf_r+0x42>
 8026c10:	466a      	mov	r2, sp
 8026c12:	f001 fadb 	bl	80281cc <_fstat_r>
 8026c16:	2800      	cmp	r0, #0
 8026c18:	dbf1      	blt.n	8026bfe <__swhatbuf_r+0x12>
 8026c1a:	9a01      	ldr	r2, [sp, #4]
 8026c1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026c20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026c24:	425a      	negs	r2, r3
 8026c26:	415a      	adcs	r2, r3
 8026c28:	602a      	str	r2, [r5, #0]
 8026c2a:	e7ee      	b.n	8026c0a <__swhatbuf_r+0x1e>
 8026c2c:	2340      	movs	r3, #64	; 0x40
 8026c2e:	2000      	movs	r0, #0
 8026c30:	6023      	str	r3, [r4, #0]
 8026c32:	b016      	add	sp, #88	; 0x58
 8026c34:	bd70      	pop	{r4, r5, r6, pc}
 8026c36:	Address 0x0000000008026c36 is out of bounds.


08026c38 <__smakebuf_r>:
 8026c38:	898b      	ldrh	r3, [r1, #12]
 8026c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026c3c:	079d      	lsls	r5, r3, #30
 8026c3e:	4606      	mov	r6, r0
 8026c40:	460c      	mov	r4, r1
 8026c42:	d507      	bpl.n	8026c54 <__smakebuf_r+0x1c>
 8026c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026c48:	6023      	str	r3, [r4, #0]
 8026c4a:	6123      	str	r3, [r4, #16]
 8026c4c:	2301      	movs	r3, #1
 8026c4e:	6163      	str	r3, [r4, #20]
 8026c50:	b002      	add	sp, #8
 8026c52:	bd70      	pop	{r4, r5, r6, pc}
 8026c54:	ab01      	add	r3, sp, #4
 8026c56:	466a      	mov	r2, sp
 8026c58:	f7ff ffc8 	bl	8026bec <__swhatbuf_r>
 8026c5c:	9900      	ldr	r1, [sp, #0]
 8026c5e:	4605      	mov	r5, r0
 8026c60:	4630      	mov	r0, r6
 8026c62:	f7fc fe97 	bl	8023994 <_malloc_r>
 8026c66:	b948      	cbnz	r0, 8026c7c <__smakebuf_r+0x44>
 8026c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c6c:	059a      	lsls	r2, r3, #22
 8026c6e:	d4ef      	bmi.n	8026c50 <__smakebuf_r+0x18>
 8026c70:	f023 0303 	bic.w	r3, r3, #3
 8026c74:	f043 0302 	orr.w	r3, r3, #2
 8026c78:	81a3      	strh	r3, [r4, #12]
 8026c7a:	e7e3      	b.n	8026c44 <__smakebuf_r+0xc>
 8026c7c:	4b0d      	ldr	r3, [pc, #52]	; (8026cb4 <__smakebuf_r+0x7c>)
 8026c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8026c80:	89a3      	ldrh	r3, [r4, #12]
 8026c82:	6020      	str	r0, [r4, #0]
 8026c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026c88:	81a3      	strh	r3, [r4, #12]
 8026c8a:	9b00      	ldr	r3, [sp, #0]
 8026c8c:	6163      	str	r3, [r4, #20]
 8026c8e:	9b01      	ldr	r3, [sp, #4]
 8026c90:	6120      	str	r0, [r4, #16]
 8026c92:	b15b      	cbz	r3, 8026cac <__smakebuf_r+0x74>
 8026c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c98:	4630      	mov	r0, r6
 8026c9a:	f001 faa9 	bl	80281f0 <_isatty_r>
 8026c9e:	b128      	cbz	r0, 8026cac <__smakebuf_r+0x74>
 8026ca0:	89a3      	ldrh	r3, [r4, #12]
 8026ca2:	f023 0303 	bic.w	r3, r3, #3
 8026ca6:	f043 0301 	orr.w	r3, r3, #1
 8026caa:	81a3      	strh	r3, [r4, #12]
 8026cac:	89a0      	ldrh	r0, [r4, #12]
 8026cae:	4305      	orrs	r5, r0
 8026cb0:	81a5      	strh	r5, [r4, #12]
 8026cb2:	e7cd      	b.n	8026c50 <__smakebuf_r+0x18>
 8026cb4:	08022f1d 	.word	0x08022f1d

08026cb8 <__malloc_lock>:
 8026cb8:	4801      	ldr	r0, [pc, #4]	; (8026cc0 <__malloc_lock+0x8>)
 8026cba:	f7fc bb39 	b.w	8023330 <__retarget_lock_acquire_recursive>
 8026cbe:	bf00      	nop
 8026cc0:	2002f85d 	.word	0x2002f85d

08026cc4 <__malloc_unlock>:
 8026cc4:	4801      	ldr	r0, [pc, #4]	; (8026ccc <__malloc_unlock+0x8>)
 8026cc6:	f7fc bb35 	b.w	8023334 <__retarget_lock_release_recursive>
 8026cca:	bf00      	nop
 8026ccc:	2002f85d 	.word	0x2002f85d

08026cd0 <_Balloc>:
 8026cd0:	b570      	push	{r4, r5, r6, lr}
 8026cd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026cd4:	4604      	mov	r4, r0
 8026cd6:	460d      	mov	r5, r1
 8026cd8:	b976      	cbnz	r6, 8026cf8 <_Balloc+0x28>
 8026cda:	2010      	movs	r0, #16
 8026cdc:	f7fc fb2c 	bl	8023338 <malloc>
 8026ce0:	4602      	mov	r2, r0
 8026ce2:	6260      	str	r0, [r4, #36]	; 0x24
 8026ce4:	b920      	cbnz	r0, 8026cf0 <_Balloc+0x20>
 8026ce6:	4b18      	ldr	r3, [pc, #96]	; (8026d48 <_Balloc+0x78>)
 8026ce8:	4818      	ldr	r0, [pc, #96]	; (8026d4c <_Balloc+0x7c>)
 8026cea:	2166      	movs	r1, #102	; 0x66
 8026cec:	f7fe ff58 	bl	8025ba0 <__assert_func>
 8026cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026cf4:	6006      	str	r6, [r0, #0]
 8026cf6:	60c6      	str	r6, [r0, #12]
 8026cf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026cfa:	68f3      	ldr	r3, [r6, #12]
 8026cfc:	b183      	cbz	r3, 8026d20 <_Balloc+0x50>
 8026cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026d00:	68db      	ldr	r3, [r3, #12]
 8026d02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026d06:	b9b8      	cbnz	r0, 8026d38 <_Balloc+0x68>
 8026d08:	2101      	movs	r1, #1
 8026d0a:	fa01 f605 	lsl.w	r6, r1, r5
 8026d0e:	1d72      	adds	r2, r6, #5
 8026d10:	0092      	lsls	r2, r2, #2
 8026d12:	4620      	mov	r0, r4
 8026d14:	f000 fb60 	bl	80273d8 <_calloc_r>
 8026d18:	b160      	cbz	r0, 8026d34 <_Balloc+0x64>
 8026d1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026d1e:	e00e      	b.n	8026d3e <_Balloc+0x6e>
 8026d20:	2221      	movs	r2, #33	; 0x21
 8026d22:	2104      	movs	r1, #4
 8026d24:	4620      	mov	r0, r4
 8026d26:	f000 fb57 	bl	80273d8 <_calloc_r>
 8026d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026d2c:	60f0      	str	r0, [r6, #12]
 8026d2e:	68db      	ldr	r3, [r3, #12]
 8026d30:	2b00      	cmp	r3, #0
 8026d32:	d1e4      	bne.n	8026cfe <_Balloc+0x2e>
 8026d34:	2000      	movs	r0, #0
 8026d36:	bd70      	pop	{r4, r5, r6, pc}
 8026d38:	6802      	ldr	r2, [r0, #0]
 8026d3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026d3e:	2300      	movs	r3, #0
 8026d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026d44:	e7f7      	b.n	8026d36 <_Balloc+0x66>
 8026d46:	bf00      	nop
 8026d48:	08044770 	.word	0x08044770
 8026d4c:	08044d5a 	.word	0x08044d5a

08026d50 <_Bfree>:
 8026d50:	b570      	push	{r4, r5, r6, lr}
 8026d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026d54:	4605      	mov	r5, r0
 8026d56:	460c      	mov	r4, r1
 8026d58:	b976      	cbnz	r6, 8026d78 <_Bfree+0x28>
 8026d5a:	2010      	movs	r0, #16
 8026d5c:	f7fc faec 	bl	8023338 <malloc>
 8026d60:	4602      	mov	r2, r0
 8026d62:	6268      	str	r0, [r5, #36]	; 0x24
 8026d64:	b920      	cbnz	r0, 8026d70 <_Bfree+0x20>
 8026d66:	4b09      	ldr	r3, [pc, #36]	; (8026d8c <_Bfree+0x3c>)
 8026d68:	4809      	ldr	r0, [pc, #36]	; (8026d90 <_Bfree+0x40>)
 8026d6a:	218a      	movs	r1, #138	; 0x8a
 8026d6c:	f7fe ff18 	bl	8025ba0 <__assert_func>
 8026d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026d74:	6006      	str	r6, [r0, #0]
 8026d76:	60c6      	str	r6, [r0, #12]
 8026d78:	b13c      	cbz	r4, 8026d8a <_Bfree+0x3a>
 8026d7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026d7c:	6862      	ldr	r2, [r4, #4]
 8026d7e:	68db      	ldr	r3, [r3, #12]
 8026d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026d84:	6021      	str	r1, [r4, #0]
 8026d86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026d8a:	bd70      	pop	{r4, r5, r6, pc}
 8026d8c:	08044770 	.word	0x08044770
 8026d90:	08044d5a 	.word	0x08044d5a

08026d94 <__multadd>:
 8026d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d98:	690d      	ldr	r5, [r1, #16]
 8026d9a:	4607      	mov	r7, r0
 8026d9c:	460c      	mov	r4, r1
 8026d9e:	461e      	mov	r6, r3
 8026da0:	f101 0c14 	add.w	ip, r1, #20
 8026da4:	2000      	movs	r0, #0
 8026da6:	f8dc 3000 	ldr.w	r3, [ip]
 8026daa:	b299      	uxth	r1, r3
 8026dac:	fb02 6101 	mla	r1, r2, r1, r6
 8026db0:	0c1e      	lsrs	r6, r3, #16
 8026db2:	0c0b      	lsrs	r3, r1, #16
 8026db4:	fb02 3306 	mla	r3, r2, r6, r3
 8026db8:	b289      	uxth	r1, r1
 8026dba:	3001      	adds	r0, #1
 8026dbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026dc0:	4285      	cmp	r5, r0
 8026dc2:	f84c 1b04 	str.w	r1, [ip], #4
 8026dc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026dca:	dcec      	bgt.n	8026da6 <__multadd+0x12>
 8026dcc:	b30e      	cbz	r6, 8026e12 <__multadd+0x7e>
 8026dce:	68a3      	ldr	r3, [r4, #8]
 8026dd0:	42ab      	cmp	r3, r5
 8026dd2:	dc19      	bgt.n	8026e08 <__multadd+0x74>
 8026dd4:	6861      	ldr	r1, [r4, #4]
 8026dd6:	4638      	mov	r0, r7
 8026dd8:	3101      	adds	r1, #1
 8026dda:	f7ff ff79 	bl	8026cd0 <_Balloc>
 8026dde:	4680      	mov	r8, r0
 8026de0:	b928      	cbnz	r0, 8026dee <__multadd+0x5a>
 8026de2:	4602      	mov	r2, r0
 8026de4:	4b0c      	ldr	r3, [pc, #48]	; (8026e18 <__multadd+0x84>)
 8026de6:	480d      	ldr	r0, [pc, #52]	; (8026e1c <__multadd+0x88>)
 8026de8:	21b5      	movs	r1, #181	; 0xb5
 8026dea:	f7fe fed9 	bl	8025ba0 <__assert_func>
 8026dee:	6922      	ldr	r2, [r4, #16]
 8026df0:	3202      	adds	r2, #2
 8026df2:	f104 010c 	add.w	r1, r4, #12
 8026df6:	0092      	lsls	r2, r2, #2
 8026df8:	300c      	adds	r0, #12
 8026dfa:	f7fc fabd 	bl	8023378 <memcpy>
 8026dfe:	4621      	mov	r1, r4
 8026e00:	4638      	mov	r0, r7
 8026e02:	f7ff ffa5 	bl	8026d50 <_Bfree>
 8026e06:	4644      	mov	r4, r8
 8026e08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026e0c:	3501      	adds	r5, #1
 8026e0e:	615e      	str	r6, [r3, #20]
 8026e10:	6125      	str	r5, [r4, #16]
 8026e12:	4620      	mov	r0, r4
 8026e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026e18:	08044d49 	.word	0x08044d49
 8026e1c:	08044d5a 	.word	0x08044d5a

08026e20 <__hi0bits>:
 8026e20:	0c03      	lsrs	r3, r0, #16
 8026e22:	041b      	lsls	r3, r3, #16
 8026e24:	b9d3      	cbnz	r3, 8026e5c <__hi0bits+0x3c>
 8026e26:	0400      	lsls	r0, r0, #16
 8026e28:	2310      	movs	r3, #16
 8026e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026e2e:	bf04      	itt	eq
 8026e30:	0200      	lsleq	r0, r0, #8
 8026e32:	3308      	addeq	r3, #8
 8026e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026e38:	bf04      	itt	eq
 8026e3a:	0100      	lsleq	r0, r0, #4
 8026e3c:	3304      	addeq	r3, #4
 8026e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026e42:	bf04      	itt	eq
 8026e44:	0080      	lsleq	r0, r0, #2
 8026e46:	3302      	addeq	r3, #2
 8026e48:	2800      	cmp	r0, #0
 8026e4a:	db05      	blt.n	8026e58 <__hi0bits+0x38>
 8026e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026e50:	f103 0301 	add.w	r3, r3, #1
 8026e54:	bf08      	it	eq
 8026e56:	2320      	moveq	r3, #32
 8026e58:	4618      	mov	r0, r3
 8026e5a:	4770      	bx	lr
 8026e5c:	2300      	movs	r3, #0
 8026e5e:	e7e4      	b.n	8026e2a <__hi0bits+0xa>

08026e60 <__lo0bits>:
 8026e60:	6803      	ldr	r3, [r0, #0]
 8026e62:	f013 0207 	ands.w	r2, r3, #7
 8026e66:	4601      	mov	r1, r0
 8026e68:	d00b      	beq.n	8026e82 <__lo0bits+0x22>
 8026e6a:	07da      	lsls	r2, r3, #31
 8026e6c:	d423      	bmi.n	8026eb6 <__lo0bits+0x56>
 8026e6e:	0798      	lsls	r0, r3, #30
 8026e70:	bf49      	itett	mi
 8026e72:	085b      	lsrmi	r3, r3, #1
 8026e74:	089b      	lsrpl	r3, r3, #2
 8026e76:	2001      	movmi	r0, #1
 8026e78:	600b      	strmi	r3, [r1, #0]
 8026e7a:	bf5c      	itt	pl
 8026e7c:	600b      	strpl	r3, [r1, #0]
 8026e7e:	2002      	movpl	r0, #2
 8026e80:	4770      	bx	lr
 8026e82:	b298      	uxth	r0, r3
 8026e84:	b9a8      	cbnz	r0, 8026eb2 <__lo0bits+0x52>
 8026e86:	0c1b      	lsrs	r3, r3, #16
 8026e88:	2010      	movs	r0, #16
 8026e8a:	b2da      	uxtb	r2, r3
 8026e8c:	b90a      	cbnz	r2, 8026e92 <__lo0bits+0x32>
 8026e8e:	3008      	adds	r0, #8
 8026e90:	0a1b      	lsrs	r3, r3, #8
 8026e92:	071a      	lsls	r2, r3, #28
 8026e94:	bf04      	itt	eq
 8026e96:	091b      	lsreq	r3, r3, #4
 8026e98:	3004      	addeq	r0, #4
 8026e9a:	079a      	lsls	r2, r3, #30
 8026e9c:	bf04      	itt	eq
 8026e9e:	089b      	lsreq	r3, r3, #2
 8026ea0:	3002      	addeq	r0, #2
 8026ea2:	07da      	lsls	r2, r3, #31
 8026ea4:	d403      	bmi.n	8026eae <__lo0bits+0x4e>
 8026ea6:	085b      	lsrs	r3, r3, #1
 8026ea8:	f100 0001 	add.w	r0, r0, #1
 8026eac:	d005      	beq.n	8026eba <__lo0bits+0x5a>
 8026eae:	600b      	str	r3, [r1, #0]
 8026eb0:	4770      	bx	lr
 8026eb2:	4610      	mov	r0, r2
 8026eb4:	e7e9      	b.n	8026e8a <__lo0bits+0x2a>
 8026eb6:	2000      	movs	r0, #0
 8026eb8:	4770      	bx	lr
 8026eba:	2020      	movs	r0, #32
 8026ebc:	4770      	bx	lr
 8026ebe:	Address 0x0000000008026ebe is out of bounds.


08026ec0 <__i2b>:
 8026ec0:	b510      	push	{r4, lr}
 8026ec2:	460c      	mov	r4, r1
 8026ec4:	2101      	movs	r1, #1
 8026ec6:	f7ff ff03 	bl	8026cd0 <_Balloc>
 8026eca:	4602      	mov	r2, r0
 8026ecc:	b928      	cbnz	r0, 8026eda <__i2b+0x1a>
 8026ece:	4b05      	ldr	r3, [pc, #20]	; (8026ee4 <__i2b+0x24>)
 8026ed0:	4805      	ldr	r0, [pc, #20]	; (8026ee8 <__i2b+0x28>)
 8026ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8026ed6:	f7fe fe63 	bl	8025ba0 <__assert_func>
 8026eda:	2301      	movs	r3, #1
 8026edc:	6144      	str	r4, [r0, #20]
 8026ede:	6103      	str	r3, [r0, #16]
 8026ee0:	bd10      	pop	{r4, pc}
 8026ee2:	bf00      	nop
 8026ee4:	08044d49 	.word	0x08044d49
 8026ee8:	08044d5a 	.word	0x08044d5a

08026eec <__multiply>:
 8026eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ef0:	4691      	mov	r9, r2
 8026ef2:	690a      	ldr	r2, [r1, #16]
 8026ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026ef8:	429a      	cmp	r2, r3
 8026efa:	bfb8      	it	lt
 8026efc:	460b      	movlt	r3, r1
 8026efe:	460c      	mov	r4, r1
 8026f00:	bfbc      	itt	lt
 8026f02:	464c      	movlt	r4, r9
 8026f04:	4699      	movlt	r9, r3
 8026f06:	6927      	ldr	r7, [r4, #16]
 8026f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8026f0c:	68a3      	ldr	r3, [r4, #8]
 8026f0e:	6861      	ldr	r1, [r4, #4]
 8026f10:	eb07 060a 	add.w	r6, r7, sl
 8026f14:	42b3      	cmp	r3, r6
 8026f16:	b085      	sub	sp, #20
 8026f18:	bfb8      	it	lt
 8026f1a:	3101      	addlt	r1, #1
 8026f1c:	f7ff fed8 	bl	8026cd0 <_Balloc>
 8026f20:	b930      	cbnz	r0, 8026f30 <__multiply+0x44>
 8026f22:	4602      	mov	r2, r0
 8026f24:	4b44      	ldr	r3, [pc, #272]	; (8027038 <__multiply+0x14c>)
 8026f26:	4845      	ldr	r0, [pc, #276]	; (802703c <__multiply+0x150>)
 8026f28:	f240 115d 	movw	r1, #349	; 0x15d
 8026f2c:	f7fe fe38 	bl	8025ba0 <__assert_func>
 8026f30:	f100 0514 	add.w	r5, r0, #20
 8026f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026f38:	462b      	mov	r3, r5
 8026f3a:	2200      	movs	r2, #0
 8026f3c:	4543      	cmp	r3, r8
 8026f3e:	d321      	bcc.n	8026f84 <__multiply+0x98>
 8026f40:	f104 0314 	add.w	r3, r4, #20
 8026f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026f48:	f109 0314 	add.w	r3, r9, #20
 8026f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8026f50:	9202      	str	r2, [sp, #8]
 8026f52:	1b3a      	subs	r2, r7, r4
 8026f54:	3a15      	subs	r2, #21
 8026f56:	f022 0203 	bic.w	r2, r2, #3
 8026f5a:	3204      	adds	r2, #4
 8026f5c:	f104 0115 	add.w	r1, r4, #21
 8026f60:	428f      	cmp	r7, r1
 8026f62:	bf38      	it	cc
 8026f64:	2204      	movcc	r2, #4
 8026f66:	9201      	str	r2, [sp, #4]
 8026f68:	9a02      	ldr	r2, [sp, #8]
 8026f6a:	9303      	str	r3, [sp, #12]
 8026f6c:	429a      	cmp	r2, r3
 8026f6e:	d80c      	bhi.n	8026f8a <__multiply+0x9e>
 8026f70:	2e00      	cmp	r6, #0
 8026f72:	dd03      	ble.n	8026f7c <__multiply+0x90>
 8026f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026f78:	2b00      	cmp	r3, #0
 8026f7a:	d05a      	beq.n	8027032 <__multiply+0x146>
 8026f7c:	6106      	str	r6, [r0, #16]
 8026f7e:	b005      	add	sp, #20
 8026f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f84:	f843 2b04 	str.w	r2, [r3], #4
 8026f88:	e7d8      	b.n	8026f3c <__multiply+0x50>
 8026f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8026f8e:	f1ba 0f00 	cmp.w	sl, #0
 8026f92:	d024      	beq.n	8026fde <__multiply+0xf2>
 8026f94:	f104 0e14 	add.w	lr, r4, #20
 8026f98:	46a9      	mov	r9, r5
 8026f9a:	f04f 0c00 	mov.w	ip, #0
 8026f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8026fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8026fa6:	fa1f fb82 	uxth.w	fp, r2
 8026faa:	b289      	uxth	r1, r1
 8026fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8026fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8026fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8026fb8:	4461      	add	r1, ip
 8026fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8026fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8026fc6:	b289      	uxth	r1, r1
 8026fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026fcc:	4577      	cmp	r7, lr
 8026fce:	f849 1b04 	str.w	r1, [r9], #4
 8026fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026fd6:	d8e2      	bhi.n	8026f9e <__multiply+0xb2>
 8026fd8:	9a01      	ldr	r2, [sp, #4]
 8026fda:	f845 c002 	str.w	ip, [r5, r2]
 8026fde:	9a03      	ldr	r2, [sp, #12]
 8026fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026fe4:	3304      	adds	r3, #4
 8026fe6:	f1b9 0f00 	cmp.w	r9, #0
 8026fea:	d020      	beq.n	802702e <__multiply+0x142>
 8026fec:	6829      	ldr	r1, [r5, #0]
 8026fee:	f104 0c14 	add.w	ip, r4, #20
 8026ff2:	46ae      	mov	lr, r5
 8026ff4:	f04f 0a00 	mov.w	sl, #0
 8026ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8026ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027000:	fb09 220b 	mla	r2, r9, fp, r2
 8027004:	4492      	add	sl, r2
 8027006:	b289      	uxth	r1, r1
 8027008:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802700c:	f84e 1b04 	str.w	r1, [lr], #4
 8027010:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027014:	f8be 1000 	ldrh.w	r1, [lr]
 8027018:	0c12      	lsrs	r2, r2, #16
 802701a:	fb09 1102 	mla	r1, r9, r2, r1
 802701e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8027022:	4567      	cmp	r7, ip
 8027024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027028:	d8e6      	bhi.n	8026ff8 <__multiply+0x10c>
 802702a:	9a01      	ldr	r2, [sp, #4]
 802702c:	50a9      	str	r1, [r5, r2]
 802702e:	3504      	adds	r5, #4
 8027030:	e79a      	b.n	8026f68 <__multiply+0x7c>
 8027032:	3e01      	subs	r6, #1
 8027034:	e79c      	b.n	8026f70 <__multiply+0x84>
 8027036:	bf00      	nop
 8027038:	08044d49 	.word	0x08044d49
 802703c:	08044d5a 	.word	0x08044d5a

08027040 <__pow5mult>:
 8027040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027044:	4615      	mov	r5, r2
 8027046:	f012 0203 	ands.w	r2, r2, #3
 802704a:	4606      	mov	r6, r0
 802704c:	460f      	mov	r7, r1
 802704e:	d007      	beq.n	8027060 <__pow5mult+0x20>
 8027050:	4c25      	ldr	r4, [pc, #148]	; (80270e8 <__pow5mult+0xa8>)
 8027052:	3a01      	subs	r2, #1
 8027054:	2300      	movs	r3, #0
 8027056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802705a:	f7ff fe9b 	bl	8026d94 <__multadd>
 802705e:	4607      	mov	r7, r0
 8027060:	10ad      	asrs	r5, r5, #2
 8027062:	d03d      	beq.n	80270e0 <__pow5mult+0xa0>
 8027064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027066:	b97c      	cbnz	r4, 8027088 <__pow5mult+0x48>
 8027068:	2010      	movs	r0, #16
 802706a:	f7fc f965 	bl	8023338 <malloc>
 802706e:	4602      	mov	r2, r0
 8027070:	6270      	str	r0, [r6, #36]	; 0x24
 8027072:	b928      	cbnz	r0, 8027080 <__pow5mult+0x40>
 8027074:	4b1d      	ldr	r3, [pc, #116]	; (80270ec <__pow5mult+0xac>)
 8027076:	481e      	ldr	r0, [pc, #120]	; (80270f0 <__pow5mult+0xb0>)
 8027078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802707c:	f7fe fd90 	bl	8025ba0 <__assert_func>
 8027080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027084:	6004      	str	r4, [r0, #0]
 8027086:	60c4      	str	r4, [r0, #12]
 8027088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802708c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027090:	b94c      	cbnz	r4, 80270a6 <__pow5mult+0x66>
 8027092:	f240 2171 	movw	r1, #625	; 0x271
 8027096:	4630      	mov	r0, r6
 8027098:	f7ff ff12 	bl	8026ec0 <__i2b>
 802709c:	2300      	movs	r3, #0
 802709e:	f8c8 0008 	str.w	r0, [r8, #8]
 80270a2:	4604      	mov	r4, r0
 80270a4:	6003      	str	r3, [r0, #0]
 80270a6:	f04f 0900 	mov.w	r9, #0
 80270aa:	07eb      	lsls	r3, r5, #31
 80270ac:	d50a      	bpl.n	80270c4 <__pow5mult+0x84>
 80270ae:	4639      	mov	r1, r7
 80270b0:	4622      	mov	r2, r4
 80270b2:	4630      	mov	r0, r6
 80270b4:	f7ff ff1a 	bl	8026eec <__multiply>
 80270b8:	4639      	mov	r1, r7
 80270ba:	4680      	mov	r8, r0
 80270bc:	4630      	mov	r0, r6
 80270be:	f7ff fe47 	bl	8026d50 <_Bfree>
 80270c2:	4647      	mov	r7, r8
 80270c4:	106d      	asrs	r5, r5, #1
 80270c6:	d00b      	beq.n	80270e0 <__pow5mult+0xa0>
 80270c8:	6820      	ldr	r0, [r4, #0]
 80270ca:	b938      	cbnz	r0, 80270dc <__pow5mult+0x9c>
 80270cc:	4622      	mov	r2, r4
 80270ce:	4621      	mov	r1, r4
 80270d0:	4630      	mov	r0, r6
 80270d2:	f7ff ff0b 	bl	8026eec <__multiply>
 80270d6:	6020      	str	r0, [r4, #0]
 80270d8:	f8c0 9000 	str.w	r9, [r0]
 80270dc:	4604      	mov	r4, r0
 80270de:	e7e4      	b.n	80270aa <__pow5mult+0x6a>
 80270e0:	4638      	mov	r0, r7
 80270e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80270e6:	bf00      	nop
 80270e8:	08044ea8 	.word	0x08044ea8
 80270ec:	08044770 	.word	0x08044770
 80270f0:	08044d5a 	.word	0x08044d5a

080270f4 <__lshift>:
 80270f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80270f8:	460c      	mov	r4, r1
 80270fa:	6849      	ldr	r1, [r1, #4]
 80270fc:	6923      	ldr	r3, [r4, #16]
 80270fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027102:	68a3      	ldr	r3, [r4, #8]
 8027104:	4607      	mov	r7, r0
 8027106:	4691      	mov	r9, r2
 8027108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802710c:	f108 0601 	add.w	r6, r8, #1
 8027110:	42b3      	cmp	r3, r6
 8027112:	db0b      	blt.n	802712c <__lshift+0x38>
 8027114:	4638      	mov	r0, r7
 8027116:	f7ff fddb 	bl	8026cd0 <_Balloc>
 802711a:	4605      	mov	r5, r0
 802711c:	b948      	cbnz	r0, 8027132 <__lshift+0x3e>
 802711e:	4602      	mov	r2, r0
 8027120:	4b2a      	ldr	r3, [pc, #168]	; (80271cc <__lshift+0xd8>)
 8027122:	482b      	ldr	r0, [pc, #172]	; (80271d0 <__lshift+0xdc>)
 8027124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027128:	f7fe fd3a 	bl	8025ba0 <__assert_func>
 802712c:	3101      	adds	r1, #1
 802712e:	005b      	lsls	r3, r3, #1
 8027130:	e7ee      	b.n	8027110 <__lshift+0x1c>
 8027132:	2300      	movs	r3, #0
 8027134:	f100 0114 	add.w	r1, r0, #20
 8027138:	f100 0210 	add.w	r2, r0, #16
 802713c:	4618      	mov	r0, r3
 802713e:	4553      	cmp	r3, sl
 8027140:	db37      	blt.n	80271b2 <__lshift+0xbe>
 8027142:	6920      	ldr	r0, [r4, #16]
 8027144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027148:	f104 0314 	add.w	r3, r4, #20
 802714c:	f019 091f 	ands.w	r9, r9, #31
 8027150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027158:	d02f      	beq.n	80271ba <__lshift+0xc6>
 802715a:	f1c9 0e20 	rsb	lr, r9, #32
 802715e:	468a      	mov	sl, r1
 8027160:	f04f 0c00 	mov.w	ip, #0
 8027164:	681a      	ldr	r2, [r3, #0]
 8027166:	fa02 f209 	lsl.w	r2, r2, r9
 802716a:	ea42 020c 	orr.w	r2, r2, ip
 802716e:	f84a 2b04 	str.w	r2, [sl], #4
 8027172:	f853 2b04 	ldr.w	r2, [r3], #4
 8027176:	4298      	cmp	r0, r3
 8027178:	fa22 fc0e 	lsr.w	ip, r2, lr
 802717c:	d8f2      	bhi.n	8027164 <__lshift+0x70>
 802717e:	1b03      	subs	r3, r0, r4
 8027180:	3b15      	subs	r3, #21
 8027182:	f023 0303 	bic.w	r3, r3, #3
 8027186:	3304      	adds	r3, #4
 8027188:	f104 0215 	add.w	r2, r4, #21
 802718c:	4290      	cmp	r0, r2
 802718e:	bf38      	it	cc
 8027190:	2304      	movcc	r3, #4
 8027192:	f841 c003 	str.w	ip, [r1, r3]
 8027196:	f1bc 0f00 	cmp.w	ip, #0
 802719a:	d001      	beq.n	80271a0 <__lshift+0xac>
 802719c:	f108 0602 	add.w	r6, r8, #2
 80271a0:	3e01      	subs	r6, #1
 80271a2:	4638      	mov	r0, r7
 80271a4:	612e      	str	r6, [r5, #16]
 80271a6:	4621      	mov	r1, r4
 80271a8:	f7ff fdd2 	bl	8026d50 <_Bfree>
 80271ac:	4628      	mov	r0, r5
 80271ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80271b6:	3301      	adds	r3, #1
 80271b8:	e7c1      	b.n	802713e <__lshift+0x4a>
 80271ba:	3904      	subs	r1, #4
 80271bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80271c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80271c4:	4298      	cmp	r0, r3
 80271c6:	d8f9      	bhi.n	80271bc <__lshift+0xc8>
 80271c8:	e7ea      	b.n	80271a0 <__lshift+0xac>
 80271ca:	bf00      	nop
 80271cc:	08044d49 	.word	0x08044d49
 80271d0:	08044d5a 	.word	0x08044d5a

080271d4 <__mcmp>:
 80271d4:	b530      	push	{r4, r5, lr}
 80271d6:	6902      	ldr	r2, [r0, #16]
 80271d8:	690c      	ldr	r4, [r1, #16]
 80271da:	1b12      	subs	r2, r2, r4
 80271dc:	d10e      	bne.n	80271fc <__mcmp+0x28>
 80271de:	f100 0314 	add.w	r3, r0, #20
 80271e2:	3114      	adds	r1, #20
 80271e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80271e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80271ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80271f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80271f4:	42a5      	cmp	r5, r4
 80271f6:	d003      	beq.n	8027200 <__mcmp+0x2c>
 80271f8:	d305      	bcc.n	8027206 <__mcmp+0x32>
 80271fa:	2201      	movs	r2, #1
 80271fc:	4610      	mov	r0, r2
 80271fe:	bd30      	pop	{r4, r5, pc}
 8027200:	4283      	cmp	r3, r0
 8027202:	d3f3      	bcc.n	80271ec <__mcmp+0x18>
 8027204:	e7fa      	b.n	80271fc <__mcmp+0x28>
 8027206:	f04f 32ff 	mov.w	r2, #4294967295
 802720a:	e7f7      	b.n	80271fc <__mcmp+0x28>

0802720c <__mdiff>:
 802720c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027210:	460c      	mov	r4, r1
 8027212:	4606      	mov	r6, r0
 8027214:	4611      	mov	r1, r2
 8027216:	4620      	mov	r0, r4
 8027218:	4690      	mov	r8, r2
 802721a:	f7ff ffdb 	bl	80271d4 <__mcmp>
 802721e:	1e05      	subs	r5, r0, #0
 8027220:	d110      	bne.n	8027244 <__mdiff+0x38>
 8027222:	4629      	mov	r1, r5
 8027224:	4630      	mov	r0, r6
 8027226:	f7ff fd53 	bl	8026cd0 <_Balloc>
 802722a:	b930      	cbnz	r0, 802723a <__mdiff+0x2e>
 802722c:	4b3a      	ldr	r3, [pc, #232]	; (8027318 <__mdiff+0x10c>)
 802722e:	4602      	mov	r2, r0
 8027230:	f240 2132 	movw	r1, #562	; 0x232
 8027234:	4839      	ldr	r0, [pc, #228]	; (802731c <__mdiff+0x110>)
 8027236:	f7fe fcb3 	bl	8025ba0 <__assert_func>
 802723a:	2301      	movs	r3, #1
 802723c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027244:	bfa4      	itt	ge
 8027246:	4643      	movge	r3, r8
 8027248:	46a0      	movge	r8, r4
 802724a:	4630      	mov	r0, r6
 802724c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027250:	bfa6      	itte	ge
 8027252:	461c      	movge	r4, r3
 8027254:	2500      	movge	r5, #0
 8027256:	2501      	movlt	r5, #1
 8027258:	f7ff fd3a 	bl	8026cd0 <_Balloc>
 802725c:	b920      	cbnz	r0, 8027268 <__mdiff+0x5c>
 802725e:	4b2e      	ldr	r3, [pc, #184]	; (8027318 <__mdiff+0x10c>)
 8027260:	4602      	mov	r2, r0
 8027262:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027266:	e7e5      	b.n	8027234 <__mdiff+0x28>
 8027268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802726c:	6926      	ldr	r6, [r4, #16]
 802726e:	60c5      	str	r5, [r0, #12]
 8027270:	f104 0914 	add.w	r9, r4, #20
 8027274:	f108 0514 	add.w	r5, r8, #20
 8027278:	f100 0e14 	add.w	lr, r0, #20
 802727c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027284:	f108 0210 	add.w	r2, r8, #16
 8027288:	46f2      	mov	sl, lr
 802728a:	2100      	movs	r1, #0
 802728c:	f859 3b04 	ldr.w	r3, [r9], #4
 8027290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027294:	fa1f f883 	uxth.w	r8, r3
 8027298:	fa11 f18b 	uxtah	r1, r1, fp
 802729c:	0c1b      	lsrs	r3, r3, #16
 802729e:	eba1 0808 	sub.w	r8, r1, r8
 80272a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80272a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80272aa:	fa1f f888 	uxth.w	r8, r8
 80272ae:	1419      	asrs	r1, r3, #16
 80272b0:	454e      	cmp	r6, r9
 80272b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80272b6:	f84a 3b04 	str.w	r3, [sl], #4
 80272ba:	d8e7      	bhi.n	802728c <__mdiff+0x80>
 80272bc:	1b33      	subs	r3, r6, r4
 80272be:	3b15      	subs	r3, #21
 80272c0:	f023 0303 	bic.w	r3, r3, #3
 80272c4:	3304      	adds	r3, #4
 80272c6:	3415      	adds	r4, #21
 80272c8:	42a6      	cmp	r6, r4
 80272ca:	bf38      	it	cc
 80272cc:	2304      	movcc	r3, #4
 80272ce:	441d      	add	r5, r3
 80272d0:	4473      	add	r3, lr
 80272d2:	469e      	mov	lr, r3
 80272d4:	462e      	mov	r6, r5
 80272d6:	4566      	cmp	r6, ip
 80272d8:	d30e      	bcc.n	80272f8 <__mdiff+0xec>
 80272da:	f10c 0203 	add.w	r2, ip, #3
 80272de:	1b52      	subs	r2, r2, r5
 80272e0:	f022 0203 	bic.w	r2, r2, #3
 80272e4:	3d03      	subs	r5, #3
 80272e6:	45ac      	cmp	ip, r5
 80272e8:	bf38      	it	cc
 80272ea:	2200      	movcc	r2, #0
 80272ec:	441a      	add	r2, r3
 80272ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80272f2:	b17b      	cbz	r3, 8027314 <__mdiff+0x108>
 80272f4:	6107      	str	r7, [r0, #16]
 80272f6:	e7a3      	b.n	8027240 <__mdiff+0x34>
 80272f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80272fc:	fa11 f288 	uxtah	r2, r1, r8
 8027300:	1414      	asrs	r4, r2, #16
 8027302:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027306:	b292      	uxth	r2, r2
 8027308:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802730c:	f84e 2b04 	str.w	r2, [lr], #4
 8027310:	1421      	asrs	r1, r4, #16
 8027312:	e7e0      	b.n	80272d6 <__mdiff+0xca>
 8027314:	3f01      	subs	r7, #1
 8027316:	e7ea      	b.n	80272ee <__mdiff+0xe2>
 8027318:	08044d49 	.word	0x08044d49
 802731c:	08044d5a 	.word	0x08044d5a

08027320 <__d2b>:
 8027320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027324:	4689      	mov	r9, r1
 8027326:	2101      	movs	r1, #1
 8027328:	ec57 6b10 	vmov	r6, r7, d0
 802732c:	4690      	mov	r8, r2
 802732e:	f7ff fccf 	bl	8026cd0 <_Balloc>
 8027332:	4604      	mov	r4, r0
 8027334:	b930      	cbnz	r0, 8027344 <__d2b+0x24>
 8027336:	4602      	mov	r2, r0
 8027338:	4b25      	ldr	r3, [pc, #148]	; (80273d0 <__d2b+0xb0>)
 802733a:	4826      	ldr	r0, [pc, #152]	; (80273d4 <__d2b+0xb4>)
 802733c:	f240 310a 	movw	r1, #778	; 0x30a
 8027340:	f7fe fc2e 	bl	8025ba0 <__assert_func>
 8027344:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802734c:	bb35      	cbnz	r5, 802739c <__d2b+0x7c>
 802734e:	2e00      	cmp	r6, #0
 8027350:	9301      	str	r3, [sp, #4]
 8027352:	d028      	beq.n	80273a6 <__d2b+0x86>
 8027354:	4668      	mov	r0, sp
 8027356:	9600      	str	r6, [sp, #0]
 8027358:	f7ff fd82 	bl	8026e60 <__lo0bits>
 802735c:	9900      	ldr	r1, [sp, #0]
 802735e:	b300      	cbz	r0, 80273a2 <__d2b+0x82>
 8027360:	9a01      	ldr	r2, [sp, #4]
 8027362:	f1c0 0320 	rsb	r3, r0, #32
 8027366:	fa02 f303 	lsl.w	r3, r2, r3
 802736a:	430b      	orrs	r3, r1
 802736c:	40c2      	lsrs	r2, r0
 802736e:	6163      	str	r3, [r4, #20]
 8027370:	9201      	str	r2, [sp, #4]
 8027372:	9b01      	ldr	r3, [sp, #4]
 8027374:	61a3      	str	r3, [r4, #24]
 8027376:	2b00      	cmp	r3, #0
 8027378:	bf14      	ite	ne
 802737a:	2202      	movne	r2, #2
 802737c:	2201      	moveq	r2, #1
 802737e:	6122      	str	r2, [r4, #16]
 8027380:	b1d5      	cbz	r5, 80273b8 <__d2b+0x98>
 8027382:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027386:	4405      	add	r5, r0
 8027388:	f8c9 5000 	str.w	r5, [r9]
 802738c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027390:	f8c8 0000 	str.w	r0, [r8]
 8027394:	4620      	mov	r0, r4
 8027396:	b003      	add	sp, #12
 8027398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802739c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80273a0:	e7d5      	b.n	802734e <__d2b+0x2e>
 80273a2:	6161      	str	r1, [r4, #20]
 80273a4:	e7e5      	b.n	8027372 <__d2b+0x52>
 80273a6:	a801      	add	r0, sp, #4
 80273a8:	f7ff fd5a 	bl	8026e60 <__lo0bits>
 80273ac:	9b01      	ldr	r3, [sp, #4]
 80273ae:	6163      	str	r3, [r4, #20]
 80273b0:	2201      	movs	r2, #1
 80273b2:	6122      	str	r2, [r4, #16]
 80273b4:	3020      	adds	r0, #32
 80273b6:	e7e3      	b.n	8027380 <__d2b+0x60>
 80273b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80273bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80273c0:	f8c9 0000 	str.w	r0, [r9]
 80273c4:	6918      	ldr	r0, [r3, #16]
 80273c6:	f7ff fd2b 	bl	8026e20 <__hi0bits>
 80273ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80273ce:	e7df      	b.n	8027390 <__d2b+0x70>
 80273d0:	08044d49 	.word	0x08044d49
 80273d4:	08044d5a 	.word	0x08044d5a

080273d8 <_calloc_r>:
 80273d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80273da:	fba1 2402 	umull	r2, r4, r1, r2
 80273de:	b94c      	cbnz	r4, 80273f4 <_calloc_r+0x1c>
 80273e0:	4611      	mov	r1, r2
 80273e2:	9201      	str	r2, [sp, #4]
 80273e4:	f7fc fad6 	bl	8023994 <_malloc_r>
 80273e8:	9a01      	ldr	r2, [sp, #4]
 80273ea:	4605      	mov	r5, r0
 80273ec:	b930      	cbnz	r0, 80273fc <_calloc_r+0x24>
 80273ee:	4628      	mov	r0, r5
 80273f0:	b003      	add	sp, #12
 80273f2:	bd30      	pop	{r4, r5, pc}
 80273f4:	220c      	movs	r2, #12
 80273f6:	6002      	str	r2, [r0, #0]
 80273f8:	2500      	movs	r5, #0
 80273fa:	e7f8      	b.n	80273ee <_calloc_r+0x16>
 80273fc:	4621      	mov	r1, r4
 80273fe:	f7fb ffe3 	bl	80233c8 <memset>
 8027402:	e7f4      	b.n	80273ee <_calloc_r+0x16>

08027404 <__ssputs_r>:
 8027404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027408:	688e      	ldr	r6, [r1, #8]
 802740a:	429e      	cmp	r6, r3
 802740c:	4682      	mov	sl, r0
 802740e:	460c      	mov	r4, r1
 8027410:	4690      	mov	r8, r2
 8027412:	461f      	mov	r7, r3
 8027414:	d838      	bhi.n	8027488 <__ssputs_r+0x84>
 8027416:	898a      	ldrh	r2, [r1, #12]
 8027418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802741c:	d032      	beq.n	8027484 <__ssputs_r+0x80>
 802741e:	6825      	ldr	r5, [r4, #0]
 8027420:	6909      	ldr	r1, [r1, #16]
 8027422:	eba5 0901 	sub.w	r9, r5, r1
 8027426:	6965      	ldr	r5, [r4, #20]
 8027428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802742c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027430:	3301      	adds	r3, #1
 8027432:	444b      	add	r3, r9
 8027434:	106d      	asrs	r5, r5, #1
 8027436:	429d      	cmp	r5, r3
 8027438:	bf38      	it	cc
 802743a:	461d      	movcc	r5, r3
 802743c:	0553      	lsls	r3, r2, #21
 802743e:	d531      	bpl.n	80274a4 <__ssputs_r+0xa0>
 8027440:	4629      	mov	r1, r5
 8027442:	f7fc faa7 	bl	8023994 <_malloc_r>
 8027446:	4606      	mov	r6, r0
 8027448:	b950      	cbnz	r0, 8027460 <__ssputs_r+0x5c>
 802744a:	230c      	movs	r3, #12
 802744c:	f8ca 3000 	str.w	r3, [sl]
 8027450:	89a3      	ldrh	r3, [r4, #12]
 8027452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027456:	81a3      	strh	r3, [r4, #12]
 8027458:	f04f 30ff 	mov.w	r0, #4294967295
 802745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027460:	6921      	ldr	r1, [r4, #16]
 8027462:	464a      	mov	r2, r9
 8027464:	f7fb ff88 	bl	8023378 <memcpy>
 8027468:	89a3      	ldrh	r3, [r4, #12]
 802746a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802746e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027472:	81a3      	strh	r3, [r4, #12]
 8027474:	6126      	str	r6, [r4, #16]
 8027476:	6165      	str	r5, [r4, #20]
 8027478:	444e      	add	r6, r9
 802747a:	eba5 0509 	sub.w	r5, r5, r9
 802747e:	6026      	str	r6, [r4, #0]
 8027480:	60a5      	str	r5, [r4, #8]
 8027482:	463e      	mov	r6, r7
 8027484:	42be      	cmp	r6, r7
 8027486:	d900      	bls.n	802748a <__ssputs_r+0x86>
 8027488:	463e      	mov	r6, r7
 802748a:	6820      	ldr	r0, [r4, #0]
 802748c:	4632      	mov	r2, r6
 802748e:	4641      	mov	r1, r8
 8027490:	f7fb ff80 	bl	8023394 <memmove>
 8027494:	68a3      	ldr	r3, [r4, #8]
 8027496:	1b9b      	subs	r3, r3, r6
 8027498:	60a3      	str	r3, [r4, #8]
 802749a:	6823      	ldr	r3, [r4, #0]
 802749c:	4433      	add	r3, r6
 802749e:	6023      	str	r3, [r4, #0]
 80274a0:	2000      	movs	r0, #0
 80274a2:	e7db      	b.n	802745c <__ssputs_r+0x58>
 80274a4:	462a      	mov	r2, r5
 80274a6:	f000 fec5 	bl	8028234 <_realloc_r>
 80274aa:	4606      	mov	r6, r0
 80274ac:	2800      	cmp	r0, #0
 80274ae:	d1e1      	bne.n	8027474 <__ssputs_r+0x70>
 80274b0:	6921      	ldr	r1, [r4, #16]
 80274b2:	4650      	mov	r0, sl
 80274b4:	f7fc fa02 	bl	80238bc <_free_r>
 80274b8:	e7c7      	b.n	802744a <__ssputs_r+0x46>
 80274ba:	Address 0x00000000080274ba is out of bounds.


080274bc <_svfiprintf_r>:
 80274bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274c0:	4698      	mov	r8, r3
 80274c2:	898b      	ldrh	r3, [r1, #12]
 80274c4:	061b      	lsls	r3, r3, #24
 80274c6:	b09d      	sub	sp, #116	; 0x74
 80274c8:	4607      	mov	r7, r0
 80274ca:	460d      	mov	r5, r1
 80274cc:	4614      	mov	r4, r2
 80274ce:	d50e      	bpl.n	80274ee <_svfiprintf_r+0x32>
 80274d0:	690b      	ldr	r3, [r1, #16]
 80274d2:	b963      	cbnz	r3, 80274ee <_svfiprintf_r+0x32>
 80274d4:	2140      	movs	r1, #64	; 0x40
 80274d6:	f7fc fa5d 	bl	8023994 <_malloc_r>
 80274da:	6028      	str	r0, [r5, #0]
 80274dc:	6128      	str	r0, [r5, #16]
 80274de:	b920      	cbnz	r0, 80274ea <_svfiprintf_r+0x2e>
 80274e0:	230c      	movs	r3, #12
 80274e2:	603b      	str	r3, [r7, #0]
 80274e4:	f04f 30ff 	mov.w	r0, #4294967295
 80274e8:	e0d1      	b.n	802768e <_svfiprintf_r+0x1d2>
 80274ea:	2340      	movs	r3, #64	; 0x40
 80274ec:	616b      	str	r3, [r5, #20]
 80274ee:	2300      	movs	r3, #0
 80274f0:	9309      	str	r3, [sp, #36]	; 0x24
 80274f2:	2320      	movs	r3, #32
 80274f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80274f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80274fc:	2330      	movs	r3, #48	; 0x30
 80274fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80276a8 <_svfiprintf_r+0x1ec>
 8027502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027506:	f04f 0901 	mov.w	r9, #1
 802750a:	4623      	mov	r3, r4
 802750c:	469a      	mov	sl, r3
 802750e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027512:	b10a      	cbz	r2, 8027518 <_svfiprintf_r+0x5c>
 8027514:	2a25      	cmp	r2, #37	; 0x25
 8027516:	d1f9      	bne.n	802750c <_svfiprintf_r+0x50>
 8027518:	ebba 0b04 	subs.w	fp, sl, r4
 802751c:	d00b      	beq.n	8027536 <_svfiprintf_r+0x7a>
 802751e:	465b      	mov	r3, fp
 8027520:	4622      	mov	r2, r4
 8027522:	4629      	mov	r1, r5
 8027524:	4638      	mov	r0, r7
 8027526:	f7ff ff6d 	bl	8027404 <__ssputs_r>
 802752a:	3001      	adds	r0, #1
 802752c:	f000 80aa 	beq.w	8027684 <_svfiprintf_r+0x1c8>
 8027530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027532:	445a      	add	r2, fp
 8027534:	9209      	str	r2, [sp, #36]	; 0x24
 8027536:	f89a 3000 	ldrb.w	r3, [sl]
 802753a:	2b00      	cmp	r3, #0
 802753c:	f000 80a2 	beq.w	8027684 <_svfiprintf_r+0x1c8>
 8027540:	2300      	movs	r3, #0
 8027542:	f04f 32ff 	mov.w	r2, #4294967295
 8027546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802754a:	f10a 0a01 	add.w	sl, sl, #1
 802754e:	9304      	str	r3, [sp, #16]
 8027550:	9307      	str	r3, [sp, #28]
 8027552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027556:	931a      	str	r3, [sp, #104]	; 0x68
 8027558:	4654      	mov	r4, sl
 802755a:	2205      	movs	r2, #5
 802755c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027560:	4851      	ldr	r0, [pc, #324]	; (80276a8 <_svfiprintf_r+0x1ec>)
 8027562:	f7d8 fe85 	bl	8000270 <memchr>
 8027566:	9a04      	ldr	r2, [sp, #16]
 8027568:	b9d8      	cbnz	r0, 80275a2 <_svfiprintf_r+0xe6>
 802756a:	06d0      	lsls	r0, r2, #27
 802756c:	bf44      	itt	mi
 802756e:	2320      	movmi	r3, #32
 8027570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027574:	0711      	lsls	r1, r2, #28
 8027576:	bf44      	itt	mi
 8027578:	232b      	movmi	r3, #43	; 0x2b
 802757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802757e:	f89a 3000 	ldrb.w	r3, [sl]
 8027582:	2b2a      	cmp	r3, #42	; 0x2a
 8027584:	d015      	beq.n	80275b2 <_svfiprintf_r+0xf6>
 8027586:	9a07      	ldr	r2, [sp, #28]
 8027588:	4654      	mov	r4, sl
 802758a:	2000      	movs	r0, #0
 802758c:	f04f 0c0a 	mov.w	ip, #10
 8027590:	4621      	mov	r1, r4
 8027592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027596:	3b30      	subs	r3, #48	; 0x30
 8027598:	2b09      	cmp	r3, #9
 802759a:	d94e      	bls.n	802763a <_svfiprintf_r+0x17e>
 802759c:	b1b0      	cbz	r0, 80275cc <_svfiprintf_r+0x110>
 802759e:	9207      	str	r2, [sp, #28]
 80275a0:	e014      	b.n	80275cc <_svfiprintf_r+0x110>
 80275a2:	eba0 0308 	sub.w	r3, r0, r8
 80275a6:	fa09 f303 	lsl.w	r3, r9, r3
 80275aa:	4313      	orrs	r3, r2
 80275ac:	9304      	str	r3, [sp, #16]
 80275ae:	46a2      	mov	sl, r4
 80275b0:	e7d2      	b.n	8027558 <_svfiprintf_r+0x9c>
 80275b2:	9b03      	ldr	r3, [sp, #12]
 80275b4:	1d19      	adds	r1, r3, #4
 80275b6:	681b      	ldr	r3, [r3, #0]
 80275b8:	9103      	str	r1, [sp, #12]
 80275ba:	2b00      	cmp	r3, #0
 80275bc:	bfbb      	ittet	lt
 80275be:	425b      	neglt	r3, r3
 80275c0:	f042 0202 	orrlt.w	r2, r2, #2
 80275c4:	9307      	strge	r3, [sp, #28]
 80275c6:	9307      	strlt	r3, [sp, #28]
 80275c8:	bfb8      	it	lt
 80275ca:	9204      	strlt	r2, [sp, #16]
 80275cc:	7823      	ldrb	r3, [r4, #0]
 80275ce:	2b2e      	cmp	r3, #46	; 0x2e
 80275d0:	d10c      	bne.n	80275ec <_svfiprintf_r+0x130>
 80275d2:	7863      	ldrb	r3, [r4, #1]
 80275d4:	2b2a      	cmp	r3, #42	; 0x2a
 80275d6:	d135      	bne.n	8027644 <_svfiprintf_r+0x188>
 80275d8:	9b03      	ldr	r3, [sp, #12]
 80275da:	1d1a      	adds	r2, r3, #4
 80275dc:	681b      	ldr	r3, [r3, #0]
 80275de:	9203      	str	r2, [sp, #12]
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	bfb8      	it	lt
 80275e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80275e8:	3402      	adds	r4, #2
 80275ea:	9305      	str	r3, [sp, #20]
 80275ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80276b8 <_svfiprintf_r+0x1fc>
 80275f0:	7821      	ldrb	r1, [r4, #0]
 80275f2:	2203      	movs	r2, #3
 80275f4:	4650      	mov	r0, sl
 80275f6:	f7d8 fe3b 	bl	8000270 <memchr>
 80275fa:	b140      	cbz	r0, 802760e <_svfiprintf_r+0x152>
 80275fc:	2340      	movs	r3, #64	; 0x40
 80275fe:	eba0 000a 	sub.w	r0, r0, sl
 8027602:	fa03 f000 	lsl.w	r0, r3, r0
 8027606:	9b04      	ldr	r3, [sp, #16]
 8027608:	4303      	orrs	r3, r0
 802760a:	3401      	adds	r4, #1
 802760c:	9304      	str	r3, [sp, #16]
 802760e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027612:	4826      	ldr	r0, [pc, #152]	; (80276ac <_svfiprintf_r+0x1f0>)
 8027614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027618:	2206      	movs	r2, #6
 802761a:	f7d8 fe29 	bl	8000270 <memchr>
 802761e:	2800      	cmp	r0, #0
 8027620:	d038      	beq.n	8027694 <_svfiprintf_r+0x1d8>
 8027622:	4b23      	ldr	r3, [pc, #140]	; (80276b0 <_svfiprintf_r+0x1f4>)
 8027624:	bb1b      	cbnz	r3, 802766e <_svfiprintf_r+0x1b2>
 8027626:	9b03      	ldr	r3, [sp, #12]
 8027628:	3307      	adds	r3, #7
 802762a:	f023 0307 	bic.w	r3, r3, #7
 802762e:	3308      	adds	r3, #8
 8027630:	9303      	str	r3, [sp, #12]
 8027632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027634:	4433      	add	r3, r6
 8027636:	9309      	str	r3, [sp, #36]	; 0x24
 8027638:	e767      	b.n	802750a <_svfiprintf_r+0x4e>
 802763a:	fb0c 3202 	mla	r2, ip, r2, r3
 802763e:	460c      	mov	r4, r1
 8027640:	2001      	movs	r0, #1
 8027642:	e7a5      	b.n	8027590 <_svfiprintf_r+0xd4>
 8027644:	2300      	movs	r3, #0
 8027646:	3401      	adds	r4, #1
 8027648:	9305      	str	r3, [sp, #20]
 802764a:	4619      	mov	r1, r3
 802764c:	f04f 0c0a 	mov.w	ip, #10
 8027650:	4620      	mov	r0, r4
 8027652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027656:	3a30      	subs	r2, #48	; 0x30
 8027658:	2a09      	cmp	r2, #9
 802765a:	d903      	bls.n	8027664 <_svfiprintf_r+0x1a8>
 802765c:	2b00      	cmp	r3, #0
 802765e:	d0c5      	beq.n	80275ec <_svfiprintf_r+0x130>
 8027660:	9105      	str	r1, [sp, #20]
 8027662:	e7c3      	b.n	80275ec <_svfiprintf_r+0x130>
 8027664:	fb0c 2101 	mla	r1, ip, r1, r2
 8027668:	4604      	mov	r4, r0
 802766a:	2301      	movs	r3, #1
 802766c:	e7f0      	b.n	8027650 <_svfiprintf_r+0x194>
 802766e:	ab03      	add	r3, sp, #12
 8027670:	9300      	str	r3, [sp, #0]
 8027672:	462a      	mov	r2, r5
 8027674:	4b0f      	ldr	r3, [pc, #60]	; (80276b4 <_svfiprintf_r+0x1f8>)
 8027676:	a904      	add	r1, sp, #16
 8027678:	4638      	mov	r0, r7
 802767a:	f7fc fa91 	bl	8023ba0 <_printf_float>
 802767e:	1c42      	adds	r2, r0, #1
 8027680:	4606      	mov	r6, r0
 8027682:	d1d6      	bne.n	8027632 <_svfiprintf_r+0x176>
 8027684:	89ab      	ldrh	r3, [r5, #12]
 8027686:	065b      	lsls	r3, r3, #25
 8027688:	f53f af2c 	bmi.w	80274e4 <_svfiprintf_r+0x28>
 802768c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802768e:	b01d      	add	sp, #116	; 0x74
 8027690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027694:	ab03      	add	r3, sp, #12
 8027696:	9300      	str	r3, [sp, #0]
 8027698:	462a      	mov	r2, r5
 802769a:	4b06      	ldr	r3, [pc, #24]	; (80276b4 <_svfiprintf_r+0x1f8>)
 802769c:	a904      	add	r1, sp, #16
 802769e:	4638      	mov	r0, r7
 80276a0:	f7fc fd0a 	bl	80240b8 <_printf_i>
 80276a4:	e7eb      	b.n	802767e <_svfiprintf_r+0x1c2>
 80276a6:	bf00      	nop
 80276a8:	08044eb4 	.word	0x08044eb4
 80276ac:	08044ebe 	.word	0x08044ebe
 80276b0:	08023ba1 	.word	0x08023ba1
 80276b4:	08027405 	.word	0x08027405
 80276b8:	08044eba 	.word	0x08044eba

080276bc <_sungetc_r>:
 80276bc:	b538      	push	{r3, r4, r5, lr}
 80276be:	1c4b      	adds	r3, r1, #1
 80276c0:	4614      	mov	r4, r2
 80276c2:	d103      	bne.n	80276cc <_sungetc_r+0x10>
 80276c4:	f04f 35ff 	mov.w	r5, #4294967295
 80276c8:	4628      	mov	r0, r5
 80276ca:	bd38      	pop	{r3, r4, r5, pc}
 80276cc:	8993      	ldrh	r3, [r2, #12]
 80276ce:	f023 0320 	bic.w	r3, r3, #32
 80276d2:	8193      	strh	r3, [r2, #12]
 80276d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80276d6:	6852      	ldr	r2, [r2, #4]
 80276d8:	b2cd      	uxtb	r5, r1
 80276da:	b18b      	cbz	r3, 8027700 <_sungetc_r+0x44>
 80276dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80276de:	4293      	cmp	r3, r2
 80276e0:	dd08      	ble.n	80276f4 <_sungetc_r+0x38>
 80276e2:	6823      	ldr	r3, [r4, #0]
 80276e4:	1e5a      	subs	r2, r3, #1
 80276e6:	6022      	str	r2, [r4, #0]
 80276e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80276ec:	6863      	ldr	r3, [r4, #4]
 80276ee:	3301      	adds	r3, #1
 80276f0:	6063      	str	r3, [r4, #4]
 80276f2:	e7e9      	b.n	80276c8 <_sungetc_r+0xc>
 80276f4:	4621      	mov	r1, r4
 80276f6:	f000 fd1b 	bl	8028130 <__submore>
 80276fa:	2800      	cmp	r0, #0
 80276fc:	d0f1      	beq.n	80276e2 <_sungetc_r+0x26>
 80276fe:	e7e1      	b.n	80276c4 <_sungetc_r+0x8>
 8027700:	6921      	ldr	r1, [r4, #16]
 8027702:	6823      	ldr	r3, [r4, #0]
 8027704:	b151      	cbz	r1, 802771c <_sungetc_r+0x60>
 8027706:	4299      	cmp	r1, r3
 8027708:	d208      	bcs.n	802771c <_sungetc_r+0x60>
 802770a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802770e:	42a9      	cmp	r1, r5
 8027710:	d104      	bne.n	802771c <_sungetc_r+0x60>
 8027712:	3b01      	subs	r3, #1
 8027714:	3201      	adds	r2, #1
 8027716:	6023      	str	r3, [r4, #0]
 8027718:	6062      	str	r2, [r4, #4]
 802771a:	e7d5      	b.n	80276c8 <_sungetc_r+0xc>
 802771c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027724:	6363      	str	r3, [r4, #52]	; 0x34
 8027726:	2303      	movs	r3, #3
 8027728:	63a3      	str	r3, [r4, #56]	; 0x38
 802772a:	4623      	mov	r3, r4
 802772c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027730:	6023      	str	r3, [r4, #0]
 8027732:	2301      	movs	r3, #1
 8027734:	e7dc      	b.n	80276f0 <_sungetc_r+0x34>

08027736 <__ssrefill_r>:
 8027736:	b510      	push	{r4, lr}
 8027738:	460c      	mov	r4, r1
 802773a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802773c:	b169      	cbz	r1, 802775a <__ssrefill_r+0x24>
 802773e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027742:	4299      	cmp	r1, r3
 8027744:	d001      	beq.n	802774a <__ssrefill_r+0x14>
 8027746:	f7fc f8b9 	bl	80238bc <_free_r>
 802774a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802774c:	6063      	str	r3, [r4, #4]
 802774e:	2000      	movs	r0, #0
 8027750:	6360      	str	r0, [r4, #52]	; 0x34
 8027752:	b113      	cbz	r3, 802775a <__ssrefill_r+0x24>
 8027754:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027756:	6023      	str	r3, [r4, #0]
 8027758:	bd10      	pop	{r4, pc}
 802775a:	6923      	ldr	r3, [r4, #16]
 802775c:	6023      	str	r3, [r4, #0]
 802775e:	2300      	movs	r3, #0
 8027760:	6063      	str	r3, [r4, #4]
 8027762:	89a3      	ldrh	r3, [r4, #12]
 8027764:	f043 0320 	orr.w	r3, r3, #32
 8027768:	81a3      	strh	r3, [r4, #12]
 802776a:	f04f 30ff 	mov.w	r0, #4294967295
 802776e:	e7f3      	b.n	8027758 <__ssrefill_r+0x22>

08027770 <__ssvfiscanf_r>:
 8027770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027774:	460c      	mov	r4, r1
 8027776:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802777a:	2100      	movs	r1, #0
 802777c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8027780:	49a6      	ldr	r1, [pc, #664]	; (8027a1c <__ssvfiscanf_r+0x2ac>)
 8027782:	91a0      	str	r1, [sp, #640]	; 0x280
 8027784:	f10d 0804 	add.w	r8, sp, #4
 8027788:	49a5      	ldr	r1, [pc, #660]	; (8027a20 <__ssvfiscanf_r+0x2b0>)
 802778a:	4fa6      	ldr	r7, [pc, #664]	; (8027a24 <__ssvfiscanf_r+0x2b4>)
 802778c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8027a28 <__ssvfiscanf_r+0x2b8>
 8027790:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8027794:	4606      	mov	r6, r0
 8027796:	91a1      	str	r1, [sp, #644]	; 0x284
 8027798:	9300      	str	r3, [sp, #0]
 802779a:	7813      	ldrb	r3, [r2, #0]
 802779c:	2b00      	cmp	r3, #0
 802779e:	f000 815a 	beq.w	8027a56 <__ssvfiscanf_r+0x2e6>
 80277a2:	5dd9      	ldrb	r1, [r3, r7]
 80277a4:	f011 0108 	ands.w	r1, r1, #8
 80277a8:	f102 0501 	add.w	r5, r2, #1
 80277ac:	d019      	beq.n	80277e2 <__ssvfiscanf_r+0x72>
 80277ae:	6863      	ldr	r3, [r4, #4]
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	dd0f      	ble.n	80277d4 <__ssvfiscanf_r+0x64>
 80277b4:	6823      	ldr	r3, [r4, #0]
 80277b6:	781a      	ldrb	r2, [r3, #0]
 80277b8:	5cba      	ldrb	r2, [r7, r2]
 80277ba:	0712      	lsls	r2, r2, #28
 80277bc:	d401      	bmi.n	80277c2 <__ssvfiscanf_r+0x52>
 80277be:	462a      	mov	r2, r5
 80277c0:	e7eb      	b.n	802779a <__ssvfiscanf_r+0x2a>
 80277c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80277c4:	3201      	adds	r2, #1
 80277c6:	9245      	str	r2, [sp, #276]	; 0x114
 80277c8:	6862      	ldr	r2, [r4, #4]
 80277ca:	3301      	adds	r3, #1
 80277cc:	3a01      	subs	r2, #1
 80277ce:	6062      	str	r2, [r4, #4]
 80277d0:	6023      	str	r3, [r4, #0]
 80277d2:	e7ec      	b.n	80277ae <__ssvfiscanf_r+0x3e>
 80277d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80277d6:	4621      	mov	r1, r4
 80277d8:	4630      	mov	r0, r6
 80277da:	4798      	blx	r3
 80277dc:	2800      	cmp	r0, #0
 80277de:	d0e9      	beq.n	80277b4 <__ssvfiscanf_r+0x44>
 80277e0:	e7ed      	b.n	80277be <__ssvfiscanf_r+0x4e>
 80277e2:	2b25      	cmp	r3, #37	; 0x25
 80277e4:	d012      	beq.n	802780c <__ssvfiscanf_r+0x9c>
 80277e6:	469a      	mov	sl, r3
 80277e8:	6863      	ldr	r3, [r4, #4]
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	f340 8091 	ble.w	8027912 <__ssvfiscanf_r+0x1a2>
 80277f0:	6822      	ldr	r2, [r4, #0]
 80277f2:	7813      	ldrb	r3, [r2, #0]
 80277f4:	4553      	cmp	r3, sl
 80277f6:	f040 812e 	bne.w	8027a56 <__ssvfiscanf_r+0x2e6>
 80277fa:	6863      	ldr	r3, [r4, #4]
 80277fc:	3b01      	subs	r3, #1
 80277fe:	6063      	str	r3, [r4, #4]
 8027800:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8027802:	3201      	adds	r2, #1
 8027804:	3301      	adds	r3, #1
 8027806:	6022      	str	r2, [r4, #0]
 8027808:	9345      	str	r3, [sp, #276]	; 0x114
 802780a:	e7d8      	b.n	80277be <__ssvfiscanf_r+0x4e>
 802780c:	9141      	str	r1, [sp, #260]	; 0x104
 802780e:	9143      	str	r1, [sp, #268]	; 0x10c
 8027810:	7853      	ldrb	r3, [r2, #1]
 8027812:	2b2a      	cmp	r3, #42	; 0x2a
 8027814:	bf02      	ittt	eq
 8027816:	2310      	moveq	r3, #16
 8027818:	1c95      	addeq	r5, r2, #2
 802781a:	9341      	streq	r3, [sp, #260]	; 0x104
 802781c:	220a      	movs	r2, #10
 802781e:	46aa      	mov	sl, r5
 8027820:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8027824:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8027828:	2b09      	cmp	r3, #9
 802782a:	d91d      	bls.n	8027868 <__ssvfiscanf_r+0xf8>
 802782c:	487e      	ldr	r0, [pc, #504]	; (8027a28 <__ssvfiscanf_r+0x2b8>)
 802782e:	2203      	movs	r2, #3
 8027830:	f7d8 fd1e 	bl	8000270 <memchr>
 8027834:	b140      	cbz	r0, 8027848 <__ssvfiscanf_r+0xd8>
 8027836:	2301      	movs	r3, #1
 8027838:	eba0 0009 	sub.w	r0, r0, r9
 802783c:	fa03 f000 	lsl.w	r0, r3, r0
 8027840:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027842:	4318      	orrs	r0, r3
 8027844:	9041      	str	r0, [sp, #260]	; 0x104
 8027846:	4655      	mov	r5, sl
 8027848:	f815 3b01 	ldrb.w	r3, [r5], #1
 802784c:	2b78      	cmp	r3, #120	; 0x78
 802784e:	d806      	bhi.n	802785e <__ssvfiscanf_r+0xee>
 8027850:	2b57      	cmp	r3, #87	; 0x57
 8027852:	d810      	bhi.n	8027876 <__ssvfiscanf_r+0x106>
 8027854:	2b25      	cmp	r3, #37	; 0x25
 8027856:	d0c6      	beq.n	80277e6 <__ssvfiscanf_r+0x76>
 8027858:	d856      	bhi.n	8027908 <__ssvfiscanf_r+0x198>
 802785a:	2b00      	cmp	r3, #0
 802785c:	d064      	beq.n	8027928 <__ssvfiscanf_r+0x1b8>
 802785e:	2303      	movs	r3, #3
 8027860:	9347      	str	r3, [sp, #284]	; 0x11c
 8027862:	230a      	movs	r3, #10
 8027864:	9342      	str	r3, [sp, #264]	; 0x108
 8027866:	e071      	b.n	802794c <__ssvfiscanf_r+0x1dc>
 8027868:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802786a:	fb02 1103 	mla	r1, r2, r3, r1
 802786e:	3930      	subs	r1, #48	; 0x30
 8027870:	9143      	str	r1, [sp, #268]	; 0x10c
 8027872:	4655      	mov	r5, sl
 8027874:	e7d3      	b.n	802781e <__ssvfiscanf_r+0xae>
 8027876:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802787a:	2a20      	cmp	r2, #32
 802787c:	d8ef      	bhi.n	802785e <__ssvfiscanf_r+0xee>
 802787e:	a101      	add	r1, pc, #4	; (adr r1, 8027884 <__ssvfiscanf_r+0x114>)
 8027880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027884:	08027937 	.word	0x08027937
 8027888:	0802785f 	.word	0x0802785f
 802788c:	0802785f 	.word	0x0802785f
 8027890:	08027995 	.word	0x08027995
 8027894:	0802785f 	.word	0x0802785f
 8027898:	0802785f 	.word	0x0802785f
 802789c:	0802785f 	.word	0x0802785f
 80278a0:	0802785f 	.word	0x0802785f
 80278a4:	0802785f 	.word	0x0802785f
 80278a8:	0802785f 	.word	0x0802785f
 80278ac:	0802785f 	.word	0x0802785f
 80278b0:	080279ab 	.word	0x080279ab
 80278b4:	08027981 	.word	0x08027981
 80278b8:	0802790f 	.word	0x0802790f
 80278bc:	0802790f 	.word	0x0802790f
 80278c0:	0802790f 	.word	0x0802790f
 80278c4:	0802785f 	.word	0x0802785f
 80278c8:	08027985 	.word	0x08027985
 80278cc:	0802785f 	.word	0x0802785f
 80278d0:	0802785f 	.word	0x0802785f
 80278d4:	0802785f 	.word	0x0802785f
 80278d8:	0802785f 	.word	0x0802785f
 80278dc:	080279bb 	.word	0x080279bb
 80278e0:	0802798d 	.word	0x0802798d
 80278e4:	0802792f 	.word	0x0802792f
 80278e8:	0802785f 	.word	0x0802785f
 80278ec:	0802785f 	.word	0x0802785f
 80278f0:	080279b7 	.word	0x080279b7
 80278f4:	0802785f 	.word	0x0802785f
 80278f8:	08027981 	.word	0x08027981
 80278fc:	0802785f 	.word	0x0802785f
 8027900:	0802785f 	.word	0x0802785f
 8027904:	08027937 	.word	0x08027937
 8027908:	3b45      	subs	r3, #69	; 0x45
 802790a:	2b02      	cmp	r3, #2
 802790c:	d8a7      	bhi.n	802785e <__ssvfiscanf_r+0xee>
 802790e:	2305      	movs	r3, #5
 8027910:	e01b      	b.n	802794a <__ssvfiscanf_r+0x1da>
 8027912:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027914:	4621      	mov	r1, r4
 8027916:	4630      	mov	r0, r6
 8027918:	4798      	blx	r3
 802791a:	2800      	cmp	r0, #0
 802791c:	f43f af68 	beq.w	80277f0 <__ssvfiscanf_r+0x80>
 8027920:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027922:	2800      	cmp	r0, #0
 8027924:	f040 808d 	bne.w	8027a42 <__ssvfiscanf_r+0x2d2>
 8027928:	f04f 30ff 	mov.w	r0, #4294967295
 802792c:	e08f      	b.n	8027a4e <__ssvfiscanf_r+0x2de>
 802792e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027930:	f042 0220 	orr.w	r2, r2, #32
 8027934:	9241      	str	r2, [sp, #260]	; 0x104
 8027936:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802793c:	9241      	str	r2, [sp, #260]	; 0x104
 802793e:	2210      	movs	r2, #16
 8027940:	2b6f      	cmp	r3, #111	; 0x6f
 8027942:	9242      	str	r2, [sp, #264]	; 0x108
 8027944:	bf34      	ite	cc
 8027946:	2303      	movcc	r3, #3
 8027948:	2304      	movcs	r3, #4
 802794a:	9347      	str	r3, [sp, #284]	; 0x11c
 802794c:	6863      	ldr	r3, [r4, #4]
 802794e:	2b00      	cmp	r3, #0
 8027950:	dd42      	ble.n	80279d8 <__ssvfiscanf_r+0x268>
 8027952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027954:	0659      	lsls	r1, r3, #25
 8027956:	d404      	bmi.n	8027962 <__ssvfiscanf_r+0x1f2>
 8027958:	6823      	ldr	r3, [r4, #0]
 802795a:	781a      	ldrb	r2, [r3, #0]
 802795c:	5cba      	ldrb	r2, [r7, r2]
 802795e:	0712      	lsls	r2, r2, #28
 8027960:	d441      	bmi.n	80279e6 <__ssvfiscanf_r+0x276>
 8027962:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027964:	2b02      	cmp	r3, #2
 8027966:	dc50      	bgt.n	8027a0a <__ssvfiscanf_r+0x29a>
 8027968:	466b      	mov	r3, sp
 802796a:	4622      	mov	r2, r4
 802796c:	a941      	add	r1, sp, #260	; 0x104
 802796e:	4630      	mov	r0, r6
 8027970:	f000 f9d0 	bl	8027d14 <_scanf_chars>
 8027974:	2801      	cmp	r0, #1
 8027976:	d06e      	beq.n	8027a56 <__ssvfiscanf_r+0x2e6>
 8027978:	2802      	cmp	r0, #2
 802797a:	f47f af20 	bne.w	80277be <__ssvfiscanf_r+0x4e>
 802797e:	e7cf      	b.n	8027920 <__ssvfiscanf_r+0x1b0>
 8027980:	220a      	movs	r2, #10
 8027982:	e7dd      	b.n	8027940 <__ssvfiscanf_r+0x1d0>
 8027984:	2300      	movs	r3, #0
 8027986:	9342      	str	r3, [sp, #264]	; 0x108
 8027988:	2303      	movs	r3, #3
 802798a:	e7de      	b.n	802794a <__ssvfiscanf_r+0x1da>
 802798c:	2308      	movs	r3, #8
 802798e:	9342      	str	r3, [sp, #264]	; 0x108
 8027990:	2304      	movs	r3, #4
 8027992:	e7da      	b.n	802794a <__ssvfiscanf_r+0x1da>
 8027994:	4629      	mov	r1, r5
 8027996:	4640      	mov	r0, r8
 8027998:	f000 fb92 	bl	80280c0 <__sccl>
 802799c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802799e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80279a2:	9341      	str	r3, [sp, #260]	; 0x104
 80279a4:	4605      	mov	r5, r0
 80279a6:	2301      	movs	r3, #1
 80279a8:	e7cf      	b.n	802794a <__ssvfiscanf_r+0x1da>
 80279aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80279ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80279b0:	9341      	str	r3, [sp, #260]	; 0x104
 80279b2:	2300      	movs	r3, #0
 80279b4:	e7c9      	b.n	802794a <__ssvfiscanf_r+0x1da>
 80279b6:	2302      	movs	r3, #2
 80279b8:	e7c7      	b.n	802794a <__ssvfiscanf_r+0x1da>
 80279ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80279bc:	06c3      	lsls	r3, r0, #27
 80279be:	f53f aefe 	bmi.w	80277be <__ssvfiscanf_r+0x4e>
 80279c2:	9b00      	ldr	r3, [sp, #0]
 80279c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80279c6:	1d19      	adds	r1, r3, #4
 80279c8:	9100      	str	r1, [sp, #0]
 80279ca:	681b      	ldr	r3, [r3, #0]
 80279cc:	f010 0f01 	tst.w	r0, #1
 80279d0:	bf14      	ite	ne
 80279d2:	801a      	strhne	r2, [r3, #0]
 80279d4:	601a      	streq	r2, [r3, #0]
 80279d6:	e6f2      	b.n	80277be <__ssvfiscanf_r+0x4e>
 80279d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80279da:	4621      	mov	r1, r4
 80279dc:	4630      	mov	r0, r6
 80279de:	4798      	blx	r3
 80279e0:	2800      	cmp	r0, #0
 80279e2:	d0b6      	beq.n	8027952 <__ssvfiscanf_r+0x1e2>
 80279e4:	e79c      	b.n	8027920 <__ssvfiscanf_r+0x1b0>
 80279e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80279e8:	3201      	adds	r2, #1
 80279ea:	9245      	str	r2, [sp, #276]	; 0x114
 80279ec:	6862      	ldr	r2, [r4, #4]
 80279ee:	3a01      	subs	r2, #1
 80279f0:	2a00      	cmp	r2, #0
 80279f2:	6062      	str	r2, [r4, #4]
 80279f4:	dd02      	ble.n	80279fc <__ssvfiscanf_r+0x28c>
 80279f6:	3301      	adds	r3, #1
 80279f8:	6023      	str	r3, [r4, #0]
 80279fa:	e7ad      	b.n	8027958 <__ssvfiscanf_r+0x1e8>
 80279fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80279fe:	4621      	mov	r1, r4
 8027a00:	4630      	mov	r0, r6
 8027a02:	4798      	blx	r3
 8027a04:	2800      	cmp	r0, #0
 8027a06:	d0a7      	beq.n	8027958 <__ssvfiscanf_r+0x1e8>
 8027a08:	e78a      	b.n	8027920 <__ssvfiscanf_r+0x1b0>
 8027a0a:	2b04      	cmp	r3, #4
 8027a0c:	dc0e      	bgt.n	8027a2c <__ssvfiscanf_r+0x2bc>
 8027a0e:	466b      	mov	r3, sp
 8027a10:	4622      	mov	r2, r4
 8027a12:	a941      	add	r1, sp, #260	; 0x104
 8027a14:	4630      	mov	r0, r6
 8027a16:	f000 f9d7 	bl	8027dc8 <_scanf_i>
 8027a1a:	e7ab      	b.n	8027974 <__ssvfiscanf_r+0x204>
 8027a1c:	080276bd 	.word	0x080276bd
 8027a20:	08027737 	.word	0x08027737
 8027a24:	08044609 	.word	0x08044609
 8027a28:	08044eba 	.word	0x08044eba
 8027a2c:	4b0b      	ldr	r3, [pc, #44]	; (8027a5c <__ssvfiscanf_r+0x2ec>)
 8027a2e:	2b00      	cmp	r3, #0
 8027a30:	f43f aec5 	beq.w	80277be <__ssvfiscanf_r+0x4e>
 8027a34:	466b      	mov	r3, sp
 8027a36:	4622      	mov	r2, r4
 8027a38:	a941      	add	r1, sp, #260	; 0x104
 8027a3a:	4630      	mov	r0, r6
 8027a3c:	f3af 8000 	nop.w
 8027a40:	e798      	b.n	8027974 <__ssvfiscanf_r+0x204>
 8027a42:	89a3      	ldrh	r3, [r4, #12]
 8027a44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8027a48:	bf18      	it	ne
 8027a4a:	f04f 30ff 	movne.w	r0, #4294967295
 8027a4e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8027a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a56:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027a58:	e7f9      	b.n	8027a4e <__ssvfiscanf_r+0x2de>
 8027a5a:	bf00      	nop
 8027a5c:	00000000 	.word	0x00000000

08027a60 <__sfputc_r>:
 8027a60:	6893      	ldr	r3, [r2, #8]
 8027a62:	3b01      	subs	r3, #1
 8027a64:	2b00      	cmp	r3, #0
 8027a66:	b410      	push	{r4}
 8027a68:	6093      	str	r3, [r2, #8]
 8027a6a:	da08      	bge.n	8027a7e <__sfputc_r+0x1e>
 8027a6c:	6994      	ldr	r4, [r2, #24]
 8027a6e:	42a3      	cmp	r3, r4
 8027a70:	db01      	blt.n	8027a76 <__sfputc_r+0x16>
 8027a72:	290a      	cmp	r1, #10
 8027a74:	d103      	bne.n	8027a7e <__sfputc_r+0x1e>
 8027a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027a7a:	f7fd bf73 	b.w	8025964 <__swbuf_r>
 8027a7e:	6813      	ldr	r3, [r2, #0]
 8027a80:	1c58      	adds	r0, r3, #1
 8027a82:	6010      	str	r0, [r2, #0]
 8027a84:	7019      	strb	r1, [r3, #0]
 8027a86:	4608      	mov	r0, r1
 8027a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027a8c:	4770      	bx	lr

08027a8e <__sfputs_r>:
 8027a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a90:	4606      	mov	r6, r0
 8027a92:	460f      	mov	r7, r1
 8027a94:	4614      	mov	r4, r2
 8027a96:	18d5      	adds	r5, r2, r3
 8027a98:	42ac      	cmp	r4, r5
 8027a9a:	d101      	bne.n	8027aa0 <__sfputs_r+0x12>
 8027a9c:	2000      	movs	r0, #0
 8027a9e:	e007      	b.n	8027ab0 <__sfputs_r+0x22>
 8027aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027aa4:	463a      	mov	r2, r7
 8027aa6:	4630      	mov	r0, r6
 8027aa8:	f7ff ffda 	bl	8027a60 <__sfputc_r>
 8027aac:	1c43      	adds	r3, r0, #1
 8027aae:	d1f3      	bne.n	8027a98 <__sfputs_r+0xa>
 8027ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ab2:	Address 0x0000000008027ab2 is out of bounds.


08027ab4 <_vfiprintf_r>:
 8027ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ab8:	460d      	mov	r5, r1
 8027aba:	b09d      	sub	sp, #116	; 0x74
 8027abc:	4614      	mov	r4, r2
 8027abe:	4698      	mov	r8, r3
 8027ac0:	4606      	mov	r6, r0
 8027ac2:	b118      	cbz	r0, 8027acc <_vfiprintf_r+0x18>
 8027ac4:	6983      	ldr	r3, [r0, #24]
 8027ac6:	b90b      	cbnz	r3, 8027acc <_vfiprintf_r+0x18>
 8027ac8:	f7fb fa5c 	bl	8022f84 <__sinit>
 8027acc:	4b89      	ldr	r3, [pc, #548]	; (8027cf4 <_vfiprintf_r+0x240>)
 8027ace:	429d      	cmp	r5, r3
 8027ad0:	d11b      	bne.n	8027b0a <_vfiprintf_r+0x56>
 8027ad2:	6875      	ldr	r5, [r6, #4]
 8027ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027ad6:	07d9      	lsls	r1, r3, #31
 8027ad8:	d405      	bmi.n	8027ae6 <_vfiprintf_r+0x32>
 8027ada:	89ab      	ldrh	r3, [r5, #12]
 8027adc:	059a      	lsls	r2, r3, #22
 8027ade:	d402      	bmi.n	8027ae6 <_vfiprintf_r+0x32>
 8027ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027ae2:	f7fb fc25 	bl	8023330 <__retarget_lock_acquire_recursive>
 8027ae6:	89ab      	ldrh	r3, [r5, #12]
 8027ae8:	071b      	lsls	r3, r3, #28
 8027aea:	d501      	bpl.n	8027af0 <_vfiprintf_r+0x3c>
 8027aec:	692b      	ldr	r3, [r5, #16]
 8027aee:	b9eb      	cbnz	r3, 8027b2c <_vfiprintf_r+0x78>
 8027af0:	4629      	mov	r1, r5
 8027af2:	4630      	mov	r0, r6
 8027af4:	f7fd ff9a 	bl	8025a2c <__swsetup_r>
 8027af8:	b1c0      	cbz	r0, 8027b2c <_vfiprintf_r+0x78>
 8027afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027afc:	07dc      	lsls	r4, r3, #31
 8027afe:	d50e      	bpl.n	8027b1e <_vfiprintf_r+0x6a>
 8027b00:	f04f 30ff 	mov.w	r0, #4294967295
 8027b04:	b01d      	add	sp, #116	; 0x74
 8027b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b0a:	4b7b      	ldr	r3, [pc, #492]	; (8027cf8 <_vfiprintf_r+0x244>)
 8027b0c:	429d      	cmp	r5, r3
 8027b0e:	d101      	bne.n	8027b14 <_vfiprintf_r+0x60>
 8027b10:	68b5      	ldr	r5, [r6, #8]
 8027b12:	e7df      	b.n	8027ad4 <_vfiprintf_r+0x20>
 8027b14:	4b79      	ldr	r3, [pc, #484]	; (8027cfc <_vfiprintf_r+0x248>)
 8027b16:	429d      	cmp	r5, r3
 8027b18:	bf08      	it	eq
 8027b1a:	68f5      	ldreq	r5, [r6, #12]
 8027b1c:	e7da      	b.n	8027ad4 <_vfiprintf_r+0x20>
 8027b1e:	89ab      	ldrh	r3, [r5, #12]
 8027b20:	0598      	lsls	r0, r3, #22
 8027b22:	d4ed      	bmi.n	8027b00 <_vfiprintf_r+0x4c>
 8027b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027b26:	f7fb fc05 	bl	8023334 <__retarget_lock_release_recursive>
 8027b2a:	e7e9      	b.n	8027b00 <_vfiprintf_r+0x4c>
 8027b2c:	2300      	movs	r3, #0
 8027b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8027b30:	2320      	movs	r3, #32
 8027b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8027b3a:	2330      	movs	r3, #48	; 0x30
 8027b3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027d00 <_vfiprintf_r+0x24c>
 8027b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027b44:	f04f 0901 	mov.w	r9, #1
 8027b48:	4623      	mov	r3, r4
 8027b4a:	469a      	mov	sl, r3
 8027b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027b50:	b10a      	cbz	r2, 8027b56 <_vfiprintf_r+0xa2>
 8027b52:	2a25      	cmp	r2, #37	; 0x25
 8027b54:	d1f9      	bne.n	8027b4a <_vfiprintf_r+0x96>
 8027b56:	ebba 0b04 	subs.w	fp, sl, r4
 8027b5a:	d00b      	beq.n	8027b74 <_vfiprintf_r+0xc0>
 8027b5c:	465b      	mov	r3, fp
 8027b5e:	4622      	mov	r2, r4
 8027b60:	4629      	mov	r1, r5
 8027b62:	4630      	mov	r0, r6
 8027b64:	f7ff ff93 	bl	8027a8e <__sfputs_r>
 8027b68:	3001      	adds	r0, #1
 8027b6a:	f000 80aa 	beq.w	8027cc2 <_vfiprintf_r+0x20e>
 8027b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027b70:	445a      	add	r2, fp
 8027b72:	9209      	str	r2, [sp, #36]	; 0x24
 8027b74:	f89a 3000 	ldrb.w	r3, [sl]
 8027b78:	2b00      	cmp	r3, #0
 8027b7a:	f000 80a2 	beq.w	8027cc2 <_vfiprintf_r+0x20e>
 8027b7e:	2300      	movs	r3, #0
 8027b80:	f04f 32ff 	mov.w	r2, #4294967295
 8027b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027b88:	f10a 0a01 	add.w	sl, sl, #1
 8027b8c:	9304      	str	r3, [sp, #16]
 8027b8e:	9307      	str	r3, [sp, #28]
 8027b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027b94:	931a      	str	r3, [sp, #104]	; 0x68
 8027b96:	4654      	mov	r4, sl
 8027b98:	2205      	movs	r2, #5
 8027b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b9e:	4858      	ldr	r0, [pc, #352]	; (8027d00 <_vfiprintf_r+0x24c>)
 8027ba0:	f7d8 fb66 	bl	8000270 <memchr>
 8027ba4:	9a04      	ldr	r2, [sp, #16]
 8027ba6:	b9d8      	cbnz	r0, 8027be0 <_vfiprintf_r+0x12c>
 8027ba8:	06d1      	lsls	r1, r2, #27
 8027baa:	bf44      	itt	mi
 8027bac:	2320      	movmi	r3, #32
 8027bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027bb2:	0713      	lsls	r3, r2, #28
 8027bb4:	bf44      	itt	mi
 8027bb6:	232b      	movmi	r3, #43	; 0x2b
 8027bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8027bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8027bc2:	d015      	beq.n	8027bf0 <_vfiprintf_r+0x13c>
 8027bc4:	9a07      	ldr	r2, [sp, #28]
 8027bc6:	4654      	mov	r4, sl
 8027bc8:	2000      	movs	r0, #0
 8027bca:	f04f 0c0a 	mov.w	ip, #10
 8027bce:	4621      	mov	r1, r4
 8027bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027bd4:	3b30      	subs	r3, #48	; 0x30
 8027bd6:	2b09      	cmp	r3, #9
 8027bd8:	d94e      	bls.n	8027c78 <_vfiprintf_r+0x1c4>
 8027bda:	b1b0      	cbz	r0, 8027c0a <_vfiprintf_r+0x156>
 8027bdc:	9207      	str	r2, [sp, #28]
 8027bde:	e014      	b.n	8027c0a <_vfiprintf_r+0x156>
 8027be0:	eba0 0308 	sub.w	r3, r0, r8
 8027be4:	fa09 f303 	lsl.w	r3, r9, r3
 8027be8:	4313      	orrs	r3, r2
 8027bea:	9304      	str	r3, [sp, #16]
 8027bec:	46a2      	mov	sl, r4
 8027bee:	e7d2      	b.n	8027b96 <_vfiprintf_r+0xe2>
 8027bf0:	9b03      	ldr	r3, [sp, #12]
 8027bf2:	1d19      	adds	r1, r3, #4
 8027bf4:	681b      	ldr	r3, [r3, #0]
 8027bf6:	9103      	str	r1, [sp, #12]
 8027bf8:	2b00      	cmp	r3, #0
 8027bfa:	bfbb      	ittet	lt
 8027bfc:	425b      	neglt	r3, r3
 8027bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8027c02:	9307      	strge	r3, [sp, #28]
 8027c04:	9307      	strlt	r3, [sp, #28]
 8027c06:	bfb8      	it	lt
 8027c08:	9204      	strlt	r2, [sp, #16]
 8027c0a:	7823      	ldrb	r3, [r4, #0]
 8027c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8027c0e:	d10c      	bne.n	8027c2a <_vfiprintf_r+0x176>
 8027c10:	7863      	ldrb	r3, [r4, #1]
 8027c12:	2b2a      	cmp	r3, #42	; 0x2a
 8027c14:	d135      	bne.n	8027c82 <_vfiprintf_r+0x1ce>
 8027c16:	9b03      	ldr	r3, [sp, #12]
 8027c18:	1d1a      	adds	r2, r3, #4
 8027c1a:	681b      	ldr	r3, [r3, #0]
 8027c1c:	9203      	str	r2, [sp, #12]
 8027c1e:	2b00      	cmp	r3, #0
 8027c20:	bfb8      	it	lt
 8027c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8027c26:	3402      	adds	r4, #2
 8027c28:	9305      	str	r3, [sp, #20]
 8027c2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027d10 <_vfiprintf_r+0x25c>
 8027c2e:	7821      	ldrb	r1, [r4, #0]
 8027c30:	2203      	movs	r2, #3
 8027c32:	4650      	mov	r0, sl
 8027c34:	f7d8 fb1c 	bl	8000270 <memchr>
 8027c38:	b140      	cbz	r0, 8027c4c <_vfiprintf_r+0x198>
 8027c3a:	2340      	movs	r3, #64	; 0x40
 8027c3c:	eba0 000a 	sub.w	r0, r0, sl
 8027c40:	fa03 f000 	lsl.w	r0, r3, r0
 8027c44:	9b04      	ldr	r3, [sp, #16]
 8027c46:	4303      	orrs	r3, r0
 8027c48:	3401      	adds	r4, #1
 8027c4a:	9304      	str	r3, [sp, #16]
 8027c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027c50:	482c      	ldr	r0, [pc, #176]	; (8027d04 <_vfiprintf_r+0x250>)
 8027c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027c56:	2206      	movs	r2, #6
 8027c58:	f7d8 fb0a 	bl	8000270 <memchr>
 8027c5c:	2800      	cmp	r0, #0
 8027c5e:	d03f      	beq.n	8027ce0 <_vfiprintf_r+0x22c>
 8027c60:	4b29      	ldr	r3, [pc, #164]	; (8027d08 <_vfiprintf_r+0x254>)
 8027c62:	bb1b      	cbnz	r3, 8027cac <_vfiprintf_r+0x1f8>
 8027c64:	9b03      	ldr	r3, [sp, #12]
 8027c66:	3307      	adds	r3, #7
 8027c68:	f023 0307 	bic.w	r3, r3, #7
 8027c6c:	3308      	adds	r3, #8
 8027c6e:	9303      	str	r3, [sp, #12]
 8027c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c72:	443b      	add	r3, r7
 8027c74:	9309      	str	r3, [sp, #36]	; 0x24
 8027c76:	e767      	b.n	8027b48 <_vfiprintf_r+0x94>
 8027c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8027c7c:	460c      	mov	r4, r1
 8027c7e:	2001      	movs	r0, #1
 8027c80:	e7a5      	b.n	8027bce <_vfiprintf_r+0x11a>
 8027c82:	2300      	movs	r3, #0
 8027c84:	3401      	adds	r4, #1
 8027c86:	9305      	str	r3, [sp, #20]
 8027c88:	4619      	mov	r1, r3
 8027c8a:	f04f 0c0a 	mov.w	ip, #10
 8027c8e:	4620      	mov	r0, r4
 8027c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027c94:	3a30      	subs	r2, #48	; 0x30
 8027c96:	2a09      	cmp	r2, #9
 8027c98:	d903      	bls.n	8027ca2 <_vfiprintf_r+0x1ee>
 8027c9a:	2b00      	cmp	r3, #0
 8027c9c:	d0c5      	beq.n	8027c2a <_vfiprintf_r+0x176>
 8027c9e:	9105      	str	r1, [sp, #20]
 8027ca0:	e7c3      	b.n	8027c2a <_vfiprintf_r+0x176>
 8027ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8027ca6:	4604      	mov	r4, r0
 8027ca8:	2301      	movs	r3, #1
 8027caa:	e7f0      	b.n	8027c8e <_vfiprintf_r+0x1da>
 8027cac:	ab03      	add	r3, sp, #12
 8027cae:	9300      	str	r3, [sp, #0]
 8027cb0:	462a      	mov	r2, r5
 8027cb2:	4b16      	ldr	r3, [pc, #88]	; (8027d0c <_vfiprintf_r+0x258>)
 8027cb4:	a904      	add	r1, sp, #16
 8027cb6:	4630      	mov	r0, r6
 8027cb8:	f7fb ff72 	bl	8023ba0 <_printf_float>
 8027cbc:	4607      	mov	r7, r0
 8027cbe:	1c78      	adds	r0, r7, #1
 8027cc0:	d1d6      	bne.n	8027c70 <_vfiprintf_r+0x1bc>
 8027cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027cc4:	07d9      	lsls	r1, r3, #31
 8027cc6:	d405      	bmi.n	8027cd4 <_vfiprintf_r+0x220>
 8027cc8:	89ab      	ldrh	r3, [r5, #12]
 8027cca:	059a      	lsls	r2, r3, #22
 8027ccc:	d402      	bmi.n	8027cd4 <_vfiprintf_r+0x220>
 8027cce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027cd0:	f7fb fb30 	bl	8023334 <__retarget_lock_release_recursive>
 8027cd4:	89ab      	ldrh	r3, [r5, #12]
 8027cd6:	065b      	lsls	r3, r3, #25
 8027cd8:	f53f af12 	bmi.w	8027b00 <_vfiprintf_r+0x4c>
 8027cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027cde:	e711      	b.n	8027b04 <_vfiprintf_r+0x50>
 8027ce0:	ab03      	add	r3, sp, #12
 8027ce2:	9300      	str	r3, [sp, #0]
 8027ce4:	462a      	mov	r2, r5
 8027ce6:	4b09      	ldr	r3, [pc, #36]	; (8027d0c <_vfiprintf_r+0x258>)
 8027ce8:	a904      	add	r1, sp, #16
 8027cea:	4630      	mov	r0, r6
 8027cec:	f7fc f9e4 	bl	80240b8 <_printf_i>
 8027cf0:	e7e4      	b.n	8027cbc <_vfiprintf_r+0x208>
 8027cf2:	bf00      	nop
 8027cf4:	0804472c 	.word	0x0804472c
 8027cf8:	0804474c 	.word	0x0804474c
 8027cfc:	0804470c 	.word	0x0804470c
 8027d00:	08044eb4 	.word	0x08044eb4
 8027d04:	08044ebe 	.word	0x08044ebe
 8027d08:	08023ba1 	.word	0x08023ba1
 8027d0c:	08027a8f 	.word	0x08027a8f
 8027d10:	08044eba 	.word	0x08044eba

08027d14 <_scanf_chars>:
 8027d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027d18:	4615      	mov	r5, r2
 8027d1a:	688a      	ldr	r2, [r1, #8]
 8027d1c:	4680      	mov	r8, r0
 8027d1e:	460c      	mov	r4, r1
 8027d20:	b932      	cbnz	r2, 8027d30 <_scanf_chars+0x1c>
 8027d22:	698a      	ldr	r2, [r1, #24]
 8027d24:	2a00      	cmp	r2, #0
 8027d26:	bf0c      	ite	eq
 8027d28:	2201      	moveq	r2, #1
 8027d2a:	f04f 32ff 	movne.w	r2, #4294967295
 8027d2e:	608a      	str	r2, [r1, #8]
 8027d30:	6822      	ldr	r2, [r4, #0]
 8027d32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8027dc4 <_scanf_chars+0xb0>
 8027d36:	06d1      	lsls	r1, r2, #27
 8027d38:	bf5f      	itttt	pl
 8027d3a:	681a      	ldrpl	r2, [r3, #0]
 8027d3c:	1d11      	addpl	r1, r2, #4
 8027d3e:	6019      	strpl	r1, [r3, #0]
 8027d40:	6816      	ldrpl	r6, [r2, #0]
 8027d42:	2700      	movs	r7, #0
 8027d44:	69a0      	ldr	r0, [r4, #24]
 8027d46:	b188      	cbz	r0, 8027d6c <_scanf_chars+0x58>
 8027d48:	2801      	cmp	r0, #1
 8027d4a:	d107      	bne.n	8027d5c <_scanf_chars+0x48>
 8027d4c:	682a      	ldr	r2, [r5, #0]
 8027d4e:	7811      	ldrb	r1, [r2, #0]
 8027d50:	6962      	ldr	r2, [r4, #20]
 8027d52:	5c52      	ldrb	r2, [r2, r1]
 8027d54:	b952      	cbnz	r2, 8027d6c <_scanf_chars+0x58>
 8027d56:	2f00      	cmp	r7, #0
 8027d58:	d031      	beq.n	8027dbe <_scanf_chars+0xaa>
 8027d5a:	e022      	b.n	8027da2 <_scanf_chars+0x8e>
 8027d5c:	2802      	cmp	r0, #2
 8027d5e:	d120      	bne.n	8027da2 <_scanf_chars+0x8e>
 8027d60:	682b      	ldr	r3, [r5, #0]
 8027d62:	781b      	ldrb	r3, [r3, #0]
 8027d64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8027d68:	071b      	lsls	r3, r3, #28
 8027d6a:	d41a      	bmi.n	8027da2 <_scanf_chars+0x8e>
 8027d6c:	6823      	ldr	r3, [r4, #0]
 8027d6e:	06da      	lsls	r2, r3, #27
 8027d70:	bf5e      	ittt	pl
 8027d72:	682b      	ldrpl	r3, [r5, #0]
 8027d74:	781b      	ldrbpl	r3, [r3, #0]
 8027d76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8027d7a:	682a      	ldr	r2, [r5, #0]
 8027d7c:	686b      	ldr	r3, [r5, #4]
 8027d7e:	3201      	adds	r2, #1
 8027d80:	602a      	str	r2, [r5, #0]
 8027d82:	68a2      	ldr	r2, [r4, #8]
 8027d84:	3b01      	subs	r3, #1
 8027d86:	3a01      	subs	r2, #1
 8027d88:	606b      	str	r3, [r5, #4]
 8027d8a:	3701      	adds	r7, #1
 8027d8c:	60a2      	str	r2, [r4, #8]
 8027d8e:	b142      	cbz	r2, 8027da2 <_scanf_chars+0x8e>
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	dcd7      	bgt.n	8027d44 <_scanf_chars+0x30>
 8027d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027d98:	4629      	mov	r1, r5
 8027d9a:	4640      	mov	r0, r8
 8027d9c:	4798      	blx	r3
 8027d9e:	2800      	cmp	r0, #0
 8027da0:	d0d0      	beq.n	8027d44 <_scanf_chars+0x30>
 8027da2:	6823      	ldr	r3, [r4, #0]
 8027da4:	f013 0310 	ands.w	r3, r3, #16
 8027da8:	d105      	bne.n	8027db6 <_scanf_chars+0xa2>
 8027daa:	68e2      	ldr	r2, [r4, #12]
 8027dac:	3201      	adds	r2, #1
 8027dae:	60e2      	str	r2, [r4, #12]
 8027db0:	69a2      	ldr	r2, [r4, #24]
 8027db2:	b102      	cbz	r2, 8027db6 <_scanf_chars+0xa2>
 8027db4:	7033      	strb	r3, [r6, #0]
 8027db6:	6923      	ldr	r3, [r4, #16]
 8027db8:	443b      	add	r3, r7
 8027dba:	6123      	str	r3, [r4, #16]
 8027dbc:	2000      	movs	r0, #0
 8027dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027dc2:	bf00      	nop
 8027dc4:	08044609 	.word	0x08044609

08027dc8 <_scanf_i>:
 8027dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027dcc:	4698      	mov	r8, r3
 8027dce:	4b76      	ldr	r3, [pc, #472]	; (8027fa8 <_scanf_i+0x1e0>)
 8027dd0:	460c      	mov	r4, r1
 8027dd2:	4682      	mov	sl, r0
 8027dd4:	4616      	mov	r6, r2
 8027dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027dda:	b087      	sub	sp, #28
 8027ddc:	ab03      	add	r3, sp, #12
 8027dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027de2:	4b72      	ldr	r3, [pc, #456]	; (8027fac <_scanf_i+0x1e4>)
 8027de4:	69a1      	ldr	r1, [r4, #24]
 8027de6:	4a72      	ldr	r2, [pc, #456]	; (8027fb0 <_scanf_i+0x1e8>)
 8027de8:	2903      	cmp	r1, #3
 8027dea:	bf18      	it	ne
 8027dec:	461a      	movne	r2, r3
 8027dee:	68a3      	ldr	r3, [r4, #8]
 8027df0:	9201      	str	r2, [sp, #4]
 8027df2:	1e5a      	subs	r2, r3, #1
 8027df4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027df8:	bf88      	it	hi
 8027dfa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027dfe:	4627      	mov	r7, r4
 8027e00:	bf82      	ittt	hi
 8027e02:	eb03 0905 	addhi.w	r9, r3, r5
 8027e06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027e0a:	60a3      	strhi	r3, [r4, #8]
 8027e0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8027e10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8027e14:	bf98      	it	ls
 8027e16:	f04f 0900 	movls.w	r9, #0
 8027e1a:	6023      	str	r3, [r4, #0]
 8027e1c:	463d      	mov	r5, r7
 8027e1e:	f04f 0b00 	mov.w	fp, #0
 8027e22:	6831      	ldr	r1, [r6, #0]
 8027e24:	ab03      	add	r3, sp, #12
 8027e26:	7809      	ldrb	r1, [r1, #0]
 8027e28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8027e2c:	2202      	movs	r2, #2
 8027e2e:	f7d8 fa1f 	bl	8000270 <memchr>
 8027e32:	b328      	cbz	r0, 8027e80 <_scanf_i+0xb8>
 8027e34:	f1bb 0f01 	cmp.w	fp, #1
 8027e38:	d159      	bne.n	8027eee <_scanf_i+0x126>
 8027e3a:	6862      	ldr	r2, [r4, #4]
 8027e3c:	b92a      	cbnz	r2, 8027e4a <_scanf_i+0x82>
 8027e3e:	6822      	ldr	r2, [r4, #0]
 8027e40:	2308      	movs	r3, #8
 8027e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027e46:	6063      	str	r3, [r4, #4]
 8027e48:	6022      	str	r2, [r4, #0]
 8027e4a:	6822      	ldr	r2, [r4, #0]
 8027e4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027e50:	6022      	str	r2, [r4, #0]
 8027e52:	68a2      	ldr	r2, [r4, #8]
 8027e54:	1e51      	subs	r1, r2, #1
 8027e56:	60a1      	str	r1, [r4, #8]
 8027e58:	b192      	cbz	r2, 8027e80 <_scanf_i+0xb8>
 8027e5a:	6832      	ldr	r2, [r6, #0]
 8027e5c:	1c51      	adds	r1, r2, #1
 8027e5e:	6031      	str	r1, [r6, #0]
 8027e60:	7812      	ldrb	r2, [r2, #0]
 8027e62:	f805 2b01 	strb.w	r2, [r5], #1
 8027e66:	6872      	ldr	r2, [r6, #4]
 8027e68:	3a01      	subs	r2, #1
 8027e6a:	2a00      	cmp	r2, #0
 8027e6c:	6072      	str	r2, [r6, #4]
 8027e6e:	dc07      	bgt.n	8027e80 <_scanf_i+0xb8>
 8027e70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8027e74:	4631      	mov	r1, r6
 8027e76:	4650      	mov	r0, sl
 8027e78:	4790      	blx	r2
 8027e7a:	2800      	cmp	r0, #0
 8027e7c:	f040 8085 	bne.w	8027f8a <_scanf_i+0x1c2>
 8027e80:	f10b 0b01 	add.w	fp, fp, #1
 8027e84:	f1bb 0f03 	cmp.w	fp, #3
 8027e88:	d1cb      	bne.n	8027e22 <_scanf_i+0x5a>
 8027e8a:	6863      	ldr	r3, [r4, #4]
 8027e8c:	b90b      	cbnz	r3, 8027e92 <_scanf_i+0xca>
 8027e8e:	230a      	movs	r3, #10
 8027e90:	6063      	str	r3, [r4, #4]
 8027e92:	6863      	ldr	r3, [r4, #4]
 8027e94:	4947      	ldr	r1, [pc, #284]	; (8027fb4 <_scanf_i+0x1ec>)
 8027e96:	6960      	ldr	r0, [r4, #20]
 8027e98:	1ac9      	subs	r1, r1, r3
 8027e9a:	f000 f911 	bl	80280c0 <__sccl>
 8027e9e:	f04f 0b00 	mov.w	fp, #0
 8027ea2:	68a3      	ldr	r3, [r4, #8]
 8027ea4:	6822      	ldr	r2, [r4, #0]
 8027ea6:	2b00      	cmp	r3, #0
 8027ea8:	d03d      	beq.n	8027f26 <_scanf_i+0x15e>
 8027eaa:	6831      	ldr	r1, [r6, #0]
 8027eac:	6960      	ldr	r0, [r4, #20]
 8027eae:	f891 c000 	ldrb.w	ip, [r1]
 8027eb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8027eb6:	2800      	cmp	r0, #0
 8027eb8:	d035      	beq.n	8027f26 <_scanf_i+0x15e>
 8027eba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8027ebe:	d124      	bne.n	8027f0a <_scanf_i+0x142>
 8027ec0:	0510      	lsls	r0, r2, #20
 8027ec2:	d522      	bpl.n	8027f0a <_scanf_i+0x142>
 8027ec4:	f10b 0b01 	add.w	fp, fp, #1
 8027ec8:	f1b9 0f00 	cmp.w	r9, #0
 8027ecc:	d003      	beq.n	8027ed6 <_scanf_i+0x10e>
 8027ece:	3301      	adds	r3, #1
 8027ed0:	f109 39ff 	add.w	r9, r9, #4294967295
 8027ed4:	60a3      	str	r3, [r4, #8]
 8027ed6:	6873      	ldr	r3, [r6, #4]
 8027ed8:	3b01      	subs	r3, #1
 8027eda:	2b00      	cmp	r3, #0
 8027edc:	6073      	str	r3, [r6, #4]
 8027ede:	dd1b      	ble.n	8027f18 <_scanf_i+0x150>
 8027ee0:	6833      	ldr	r3, [r6, #0]
 8027ee2:	3301      	adds	r3, #1
 8027ee4:	6033      	str	r3, [r6, #0]
 8027ee6:	68a3      	ldr	r3, [r4, #8]
 8027ee8:	3b01      	subs	r3, #1
 8027eea:	60a3      	str	r3, [r4, #8]
 8027eec:	e7d9      	b.n	8027ea2 <_scanf_i+0xda>
 8027eee:	f1bb 0f02 	cmp.w	fp, #2
 8027ef2:	d1ae      	bne.n	8027e52 <_scanf_i+0x8a>
 8027ef4:	6822      	ldr	r2, [r4, #0]
 8027ef6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027efa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027efe:	d1bf      	bne.n	8027e80 <_scanf_i+0xb8>
 8027f00:	2310      	movs	r3, #16
 8027f02:	6063      	str	r3, [r4, #4]
 8027f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027f08:	e7a2      	b.n	8027e50 <_scanf_i+0x88>
 8027f0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027f0e:	6022      	str	r2, [r4, #0]
 8027f10:	780b      	ldrb	r3, [r1, #0]
 8027f12:	f805 3b01 	strb.w	r3, [r5], #1
 8027f16:	e7de      	b.n	8027ed6 <_scanf_i+0x10e>
 8027f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027f1c:	4631      	mov	r1, r6
 8027f1e:	4650      	mov	r0, sl
 8027f20:	4798      	blx	r3
 8027f22:	2800      	cmp	r0, #0
 8027f24:	d0df      	beq.n	8027ee6 <_scanf_i+0x11e>
 8027f26:	6823      	ldr	r3, [r4, #0]
 8027f28:	05db      	lsls	r3, r3, #23
 8027f2a:	d50d      	bpl.n	8027f48 <_scanf_i+0x180>
 8027f2c:	42bd      	cmp	r5, r7
 8027f2e:	d909      	bls.n	8027f44 <_scanf_i+0x17c>
 8027f30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8027f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027f38:	4632      	mov	r2, r6
 8027f3a:	4650      	mov	r0, sl
 8027f3c:	4798      	blx	r3
 8027f3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8027f42:	464d      	mov	r5, r9
 8027f44:	42bd      	cmp	r5, r7
 8027f46:	d02d      	beq.n	8027fa4 <_scanf_i+0x1dc>
 8027f48:	6822      	ldr	r2, [r4, #0]
 8027f4a:	f012 0210 	ands.w	r2, r2, #16
 8027f4e:	d113      	bne.n	8027f78 <_scanf_i+0x1b0>
 8027f50:	702a      	strb	r2, [r5, #0]
 8027f52:	6863      	ldr	r3, [r4, #4]
 8027f54:	9e01      	ldr	r6, [sp, #4]
 8027f56:	4639      	mov	r1, r7
 8027f58:	4650      	mov	r0, sl
 8027f5a:	47b0      	blx	r6
 8027f5c:	6821      	ldr	r1, [r4, #0]
 8027f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8027f62:	f011 0f20 	tst.w	r1, #32
 8027f66:	d013      	beq.n	8027f90 <_scanf_i+0x1c8>
 8027f68:	1d1a      	adds	r2, r3, #4
 8027f6a:	f8c8 2000 	str.w	r2, [r8]
 8027f6e:	681b      	ldr	r3, [r3, #0]
 8027f70:	6018      	str	r0, [r3, #0]
 8027f72:	68e3      	ldr	r3, [r4, #12]
 8027f74:	3301      	adds	r3, #1
 8027f76:	60e3      	str	r3, [r4, #12]
 8027f78:	1bed      	subs	r5, r5, r7
 8027f7a:	44ab      	add	fp, r5
 8027f7c:	6925      	ldr	r5, [r4, #16]
 8027f7e:	445d      	add	r5, fp
 8027f80:	6125      	str	r5, [r4, #16]
 8027f82:	2000      	movs	r0, #0
 8027f84:	b007      	add	sp, #28
 8027f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f8a:	f04f 0b00 	mov.w	fp, #0
 8027f8e:	e7ca      	b.n	8027f26 <_scanf_i+0x15e>
 8027f90:	1d1a      	adds	r2, r3, #4
 8027f92:	f8c8 2000 	str.w	r2, [r8]
 8027f96:	681b      	ldr	r3, [r3, #0]
 8027f98:	f011 0f01 	tst.w	r1, #1
 8027f9c:	bf14      	ite	ne
 8027f9e:	8018      	strhne	r0, [r3, #0]
 8027fa0:	6018      	streq	r0, [r3, #0]
 8027fa2:	e7e6      	b.n	8027f72 <_scanf_i+0x1aa>
 8027fa4:	2001      	movs	r0, #1
 8027fa6:	e7ed      	b.n	8027f84 <_scanf_i+0x1bc>
 8027fa8:	0802852c 	.word	0x0802852c
 8027fac:	080254d5 	.word	0x080254d5
 8027fb0:	080253d9 	.word	0x080253d9
 8027fb4:	08044ede 	.word	0x08044ede

08027fb8 <_putc_r>:
 8027fb8:	b570      	push	{r4, r5, r6, lr}
 8027fba:	460d      	mov	r5, r1
 8027fbc:	4614      	mov	r4, r2
 8027fbe:	4606      	mov	r6, r0
 8027fc0:	b118      	cbz	r0, 8027fca <_putc_r+0x12>
 8027fc2:	6983      	ldr	r3, [r0, #24]
 8027fc4:	b90b      	cbnz	r3, 8027fca <_putc_r+0x12>
 8027fc6:	f7fa ffdd 	bl	8022f84 <__sinit>
 8027fca:	4b1c      	ldr	r3, [pc, #112]	; (802803c <_putc_r+0x84>)
 8027fcc:	429c      	cmp	r4, r3
 8027fce:	d124      	bne.n	802801a <_putc_r+0x62>
 8027fd0:	6874      	ldr	r4, [r6, #4]
 8027fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027fd4:	07d8      	lsls	r0, r3, #31
 8027fd6:	d405      	bmi.n	8027fe4 <_putc_r+0x2c>
 8027fd8:	89a3      	ldrh	r3, [r4, #12]
 8027fda:	0599      	lsls	r1, r3, #22
 8027fdc:	d402      	bmi.n	8027fe4 <_putc_r+0x2c>
 8027fde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027fe0:	f7fb f9a6 	bl	8023330 <__retarget_lock_acquire_recursive>
 8027fe4:	68a3      	ldr	r3, [r4, #8]
 8027fe6:	3b01      	subs	r3, #1
 8027fe8:	2b00      	cmp	r3, #0
 8027fea:	60a3      	str	r3, [r4, #8]
 8027fec:	da05      	bge.n	8027ffa <_putc_r+0x42>
 8027fee:	69a2      	ldr	r2, [r4, #24]
 8027ff0:	4293      	cmp	r3, r2
 8027ff2:	db1c      	blt.n	802802e <_putc_r+0x76>
 8027ff4:	b2eb      	uxtb	r3, r5
 8027ff6:	2b0a      	cmp	r3, #10
 8027ff8:	d019      	beq.n	802802e <_putc_r+0x76>
 8027ffa:	6823      	ldr	r3, [r4, #0]
 8027ffc:	1c5a      	adds	r2, r3, #1
 8027ffe:	6022      	str	r2, [r4, #0]
 8028000:	701d      	strb	r5, [r3, #0]
 8028002:	b2ed      	uxtb	r5, r5
 8028004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028006:	07da      	lsls	r2, r3, #31
 8028008:	d405      	bmi.n	8028016 <_putc_r+0x5e>
 802800a:	89a3      	ldrh	r3, [r4, #12]
 802800c:	059b      	lsls	r3, r3, #22
 802800e:	d402      	bmi.n	8028016 <_putc_r+0x5e>
 8028010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028012:	f7fb f98f 	bl	8023334 <__retarget_lock_release_recursive>
 8028016:	4628      	mov	r0, r5
 8028018:	bd70      	pop	{r4, r5, r6, pc}
 802801a:	4b09      	ldr	r3, [pc, #36]	; (8028040 <_putc_r+0x88>)
 802801c:	429c      	cmp	r4, r3
 802801e:	d101      	bne.n	8028024 <_putc_r+0x6c>
 8028020:	68b4      	ldr	r4, [r6, #8]
 8028022:	e7d6      	b.n	8027fd2 <_putc_r+0x1a>
 8028024:	4b07      	ldr	r3, [pc, #28]	; (8028044 <_putc_r+0x8c>)
 8028026:	429c      	cmp	r4, r3
 8028028:	bf08      	it	eq
 802802a:	68f4      	ldreq	r4, [r6, #12]
 802802c:	e7d1      	b.n	8027fd2 <_putc_r+0x1a>
 802802e:	4629      	mov	r1, r5
 8028030:	4622      	mov	r2, r4
 8028032:	4630      	mov	r0, r6
 8028034:	f7fd fc96 	bl	8025964 <__swbuf_r>
 8028038:	4605      	mov	r5, r0
 802803a:	e7e3      	b.n	8028004 <_putc_r+0x4c>
 802803c:	0804472c 	.word	0x0804472c
 8028040:	0804474c 	.word	0x0804474c
 8028044:	0804470c 	.word	0x0804470c

08028048 <_read_r>:
 8028048:	b538      	push	{r3, r4, r5, lr}
 802804a:	4d07      	ldr	r5, [pc, #28]	; (8028068 <_read_r+0x20>)
 802804c:	4604      	mov	r4, r0
 802804e:	4608      	mov	r0, r1
 8028050:	4611      	mov	r1, r2
 8028052:	2200      	movs	r2, #0
 8028054:	602a      	str	r2, [r5, #0]
 8028056:	461a      	mov	r2, r3
 8028058:	f7de fcb8 	bl	80069cc <_read>
 802805c:	1c43      	adds	r3, r0, #1
 802805e:	d102      	bne.n	8028066 <_read_r+0x1e>
 8028060:	682b      	ldr	r3, [r5, #0]
 8028062:	b103      	cbz	r3, 8028066 <_read_r+0x1e>
 8028064:	6023      	str	r3, [r4, #0]
 8028066:	bd38      	pop	{r3, r4, r5, pc}
 8028068:	2002f86c 	.word	0x2002f86c

0802806c <__fpclassifyd>:
 802806c:	ec51 0b10 	vmov	r0, r1, d0
 8028070:	b510      	push	{r4, lr}
 8028072:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8028076:	460b      	mov	r3, r1
 8028078:	d019      	beq.n	80280ae <__fpclassifyd+0x42>
 802807a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802807e:	490e      	ldr	r1, [pc, #56]	; (80280b8 <__fpclassifyd+0x4c>)
 8028080:	428a      	cmp	r2, r1
 8028082:	d90e      	bls.n	80280a2 <__fpclassifyd+0x36>
 8028084:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8028088:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802808c:	428a      	cmp	r2, r1
 802808e:	d908      	bls.n	80280a2 <__fpclassifyd+0x36>
 8028090:	4a0a      	ldr	r2, [pc, #40]	; (80280bc <__fpclassifyd+0x50>)
 8028092:	4213      	tst	r3, r2
 8028094:	d007      	beq.n	80280a6 <__fpclassifyd+0x3a>
 8028096:	4294      	cmp	r4, r2
 8028098:	d107      	bne.n	80280aa <__fpclassifyd+0x3e>
 802809a:	fab0 f080 	clz	r0, r0
 802809e:	0940      	lsrs	r0, r0, #5
 80280a0:	bd10      	pop	{r4, pc}
 80280a2:	2004      	movs	r0, #4
 80280a4:	e7fc      	b.n	80280a0 <__fpclassifyd+0x34>
 80280a6:	2003      	movs	r0, #3
 80280a8:	e7fa      	b.n	80280a0 <__fpclassifyd+0x34>
 80280aa:	2000      	movs	r0, #0
 80280ac:	e7f8      	b.n	80280a0 <__fpclassifyd+0x34>
 80280ae:	2800      	cmp	r0, #0
 80280b0:	d1ee      	bne.n	8028090 <__fpclassifyd+0x24>
 80280b2:	2002      	movs	r0, #2
 80280b4:	e7f4      	b.n	80280a0 <__fpclassifyd+0x34>
 80280b6:	bf00      	nop
 80280b8:	7fdfffff 	.word	0x7fdfffff
 80280bc:	7ff00000 	.word	0x7ff00000

080280c0 <__sccl>:
 80280c0:	b570      	push	{r4, r5, r6, lr}
 80280c2:	780b      	ldrb	r3, [r1, #0]
 80280c4:	4604      	mov	r4, r0
 80280c6:	2b5e      	cmp	r3, #94	; 0x5e
 80280c8:	bf0b      	itete	eq
 80280ca:	784b      	ldrbeq	r3, [r1, #1]
 80280cc:	1c48      	addne	r0, r1, #1
 80280ce:	1c88      	addeq	r0, r1, #2
 80280d0:	2200      	movne	r2, #0
 80280d2:	bf08      	it	eq
 80280d4:	2201      	moveq	r2, #1
 80280d6:	1e61      	subs	r1, r4, #1
 80280d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80280dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80280e0:	42a9      	cmp	r1, r5
 80280e2:	d1fb      	bne.n	80280dc <__sccl+0x1c>
 80280e4:	b90b      	cbnz	r3, 80280ea <__sccl+0x2a>
 80280e6:	3801      	subs	r0, #1
 80280e8:	bd70      	pop	{r4, r5, r6, pc}
 80280ea:	f082 0201 	eor.w	r2, r2, #1
 80280ee:	54e2      	strb	r2, [r4, r3]
 80280f0:	4605      	mov	r5, r0
 80280f2:	4628      	mov	r0, r5
 80280f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80280f8:	292d      	cmp	r1, #45	; 0x2d
 80280fa:	d006      	beq.n	802810a <__sccl+0x4a>
 80280fc:	295d      	cmp	r1, #93	; 0x5d
 80280fe:	d0f3      	beq.n	80280e8 <__sccl+0x28>
 8028100:	b909      	cbnz	r1, 8028106 <__sccl+0x46>
 8028102:	4628      	mov	r0, r5
 8028104:	e7f0      	b.n	80280e8 <__sccl+0x28>
 8028106:	460b      	mov	r3, r1
 8028108:	e7f1      	b.n	80280ee <__sccl+0x2e>
 802810a:	786e      	ldrb	r6, [r5, #1]
 802810c:	2e5d      	cmp	r6, #93	; 0x5d
 802810e:	d0fa      	beq.n	8028106 <__sccl+0x46>
 8028110:	42b3      	cmp	r3, r6
 8028112:	dcf8      	bgt.n	8028106 <__sccl+0x46>
 8028114:	3502      	adds	r5, #2
 8028116:	4619      	mov	r1, r3
 8028118:	3101      	adds	r1, #1
 802811a:	428e      	cmp	r6, r1
 802811c:	5462      	strb	r2, [r4, r1]
 802811e:	dcfb      	bgt.n	8028118 <__sccl+0x58>
 8028120:	1af1      	subs	r1, r6, r3
 8028122:	3901      	subs	r1, #1
 8028124:	1c58      	adds	r0, r3, #1
 8028126:	42b3      	cmp	r3, r6
 8028128:	bfa8      	it	ge
 802812a:	2100      	movge	r1, #0
 802812c:	1843      	adds	r3, r0, r1
 802812e:	e7e0      	b.n	80280f2 <__sccl+0x32>

08028130 <__submore>:
 8028130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028134:	460c      	mov	r4, r1
 8028136:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802813c:	4299      	cmp	r1, r3
 802813e:	d11d      	bne.n	802817c <__submore+0x4c>
 8028140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028144:	f7fb fc26 	bl	8023994 <_malloc_r>
 8028148:	b918      	cbnz	r0, 8028152 <__submore+0x22>
 802814a:	f04f 30ff 	mov.w	r0, #4294967295
 802814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028156:	63a3      	str	r3, [r4, #56]	; 0x38
 8028158:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802815c:	6360      	str	r0, [r4, #52]	; 0x34
 802815e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028162:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028166:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802816a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802816e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028172:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028176:	6020      	str	r0, [r4, #0]
 8028178:	2000      	movs	r0, #0
 802817a:	e7e8      	b.n	802814e <__submore+0x1e>
 802817c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802817e:	0077      	lsls	r7, r6, #1
 8028180:	463a      	mov	r2, r7
 8028182:	f000 f857 	bl	8028234 <_realloc_r>
 8028186:	4605      	mov	r5, r0
 8028188:	2800      	cmp	r0, #0
 802818a:	d0de      	beq.n	802814a <__submore+0x1a>
 802818c:	eb00 0806 	add.w	r8, r0, r6
 8028190:	4601      	mov	r1, r0
 8028192:	4632      	mov	r2, r6
 8028194:	4640      	mov	r0, r8
 8028196:	f7fb f8ef 	bl	8023378 <memcpy>
 802819a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802819e:	f8c4 8000 	str.w	r8, [r4]
 80281a2:	e7e9      	b.n	8028178 <__submore+0x48>

080281a4 <abort>:
 80281a4:	b508      	push	{r3, lr}
 80281a6:	2006      	movs	r0, #6
 80281a8:	f000 f89c 	bl	80282e4 <raise>
 80281ac:	2001      	movs	r0, #1
 80281ae:	f7de fc07 	bl	80069c0 <_exit>
 80281b2:	Address 0x00000000080281b2 is out of bounds.


080281b4 <__env_lock>:
 80281b4:	4801      	ldr	r0, [pc, #4]	; (80281bc <__env_lock+0x8>)
 80281b6:	f7fb b8bb 	b.w	8023330 <__retarget_lock_acquire_recursive>
 80281ba:	bf00      	nop
 80281bc:	2002f85c 	.word	0x2002f85c

080281c0 <__env_unlock>:
 80281c0:	4801      	ldr	r0, [pc, #4]	; (80281c8 <__env_unlock+0x8>)
 80281c2:	f7fb b8b7 	b.w	8023334 <__retarget_lock_release_recursive>
 80281c6:	bf00      	nop
 80281c8:	2002f85c 	.word	0x2002f85c

080281cc <_fstat_r>:
 80281cc:	b538      	push	{r3, r4, r5, lr}
 80281ce:	4d07      	ldr	r5, [pc, #28]	; (80281ec <_fstat_r+0x20>)
 80281d0:	2300      	movs	r3, #0
 80281d2:	4604      	mov	r4, r0
 80281d4:	4608      	mov	r0, r1
 80281d6:	4611      	mov	r1, r2
 80281d8:	602b      	str	r3, [r5, #0]
 80281da:	f7de fc09 	bl	80069f0 <_fstat>
 80281de:	1c43      	adds	r3, r0, #1
 80281e0:	d102      	bne.n	80281e8 <_fstat_r+0x1c>
 80281e2:	682b      	ldr	r3, [r5, #0]
 80281e4:	b103      	cbz	r3, 80281e8 <_fstat_r+0x1c>
 80281e6:	6023      	str	r3, [r4, #0]
 80281e8:	bd38      	pop	{r3, r4, r5, pc}
 80281ea:	bf00      	nop
 80281ec:	2002f86c 	.word	0x2002f86c

080281f0 <_isatty_r>:
 80281f0:	b538      	push	{r3, r4, r5, lr}
 80281f2:	4d06      	ldr	r5, [pc, #24]	; (802820c <_isatty_r+0x1c>)
 80281f4:	2300      	movs	r3, #0
 80281f6:	4604      	mov	r4, r0
 80281f8:	4608      	mov	r0, r1
 80281fa:	602b      	str	r3, [r5, #0]
 80281fc:	f7de fbfe 	bl	80069fc <_isatty>
 8028200:	1c43      	adds	r3, r0, #1
 8028202:	d102      	bne.n	802820a <_isatty_r+0x1a>
 8028204:	682b      	ldr	r3, [r5, #0]
 8028206:	b103      	cbz	r3, 802820a <_isatty_r+0x1a>
 8028208:	6023      	str	r3, [r4, #0]
 802820a:	bd38      	pop	{r3, r4, r5, pc}
 802820c:	2002f86c 	.word	0x2002f86c

08028210 <__ascii_mbtowc>:
 8028210:	b082      	sub	sp, #8
 8028212:	b901      	cbnz	r1, 8028216 <__ascii_mbtowc+0x6>
 8028214:	a901      	add	r1, sp, #4
 8028216:	b142      	cbz	r2, 802822a <__ascii_mbtowc+0x1a>
 8028218:	b14b      	cbz	r3, 802822e <__ascii_mbtowc+0x1e>
 802821a:	7813      	ldrb	r3, [r2, #0]
 802821c:	600b      	str	r3, [r1, #0]
 802821e:	7812      	ldrb	r2, [r2, #0]
 8028220:	1e10      	subs	r0, r2, #0
 8028222:	bf18      	it	ne
 8028224:	2001      	movne	r0, #1
 8028226:	b002      	add	sp, #8
 8028228:	4770      	bx	lr
 802822a:	4610      	mov	r0, r2
 802822c:	e7fb      	b.n	8028226 <__ascii_mbtowc+0x16>
 802822e:	f06f 0001 	mvn.w	r0, #1
 8028232:	e7f8      	b.n	8028226 <__ascii_mbtowc+0x16>

08028234 <_realloc_r>:
 8028234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028238:	4680      	mov	r8, r0
 802823a:	4614      	mov	r4, r2
 802823c:	460e      	mov	r6, r1
 802823e:	b921      	cbnz	r1, 802824a <_realloc_r+0x16>
 8028240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028244:	4611      	mov	r1, r2
 8028246:	f7fb bba5 	b.w	8023994 <_malloc_r>
 802824a:	b92a      	cbnz	r2, 8028258 <_realloc_r+0x24>
 802824c:	f7fb fb36 	bl	80238bc <_free_r>
 8028250:	4625      	mov	r5, r4
 8028252:	4628      	mov	r0, r5
 8028254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028258:	f000 f86d 	bl	8028336 <_malloc_usable_size_r>
 802825c:	4284      	cmp	r4, r0
 802825e:	4607      	mov	r7, r0
 8028260:	d802      	bhi.n	8028268 <_realloc_r+0x34>
 8028262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028266:	d812      	bhi.n	802828e <_realloc_r+0x5a>
 8028268:	4621      	mov	r1, r4
 802826a:	4640      	mov	r0, r8
 802826c:	f7fb fb92 	bl	8023994 <_malloc_r>
 8028270:	4605      	mov	r5, r0
 8028272:	2800      	cmp	r0, #0
 8028274:	d0ed      	beq.n	8028252 <_realloc_r+0x1e>
 8028276:	42bc      	cmp	r4, r7
 8028278:	4622      	mov	r2, r4
 802827a:	4631      	mov	r1, r6
 802827c:	bf28      	it	cs
 802827e:	463a      	movcs	r2, r7
 8028280:	f7fb f87a 	bl	8023378 <memcpy>
 8028284:	4631      	mov	r1, r6
 8028286:	4640      	mov	r0, r8
 8028288:	f7fb fb18 	bl	80238bc <_free_r>
 802828c:	e7e1      	b.n	8028252 <_realloc_r+0x1e>
 802828e:	4635      	mov	r5, r6
 8028290:	e7df      	b.n	8028252 <_realloc_r+0x1e>

08028292 <_raise_r>:
 8028292:	291f      	cmp	r1, #31
 8028294:	b538      	push	{r3, r4, r5, lr}
 8028296:	4604      	mov	r4, r0
 8028298:	460d      	mov	r5, r1
 802829a:	d904      	bls.n	80282a6 <_raise_r+0x14>
 802829c:	2316      	movs	r3, #22
 802829e:	6003      	str	r3, [r0, #0]
 80282a0:	f04f 30ff 	mov.w	r0, #4294967295
 80282a4:	bd38      	pop	{r3, r4, r5, pc}
 80282a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80282a8:	b112      	cbz	r2, 80282b0 <_raise_r+0x1e>
 80282aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80282ae:	b94b      	cbnz	r3, 80282c4 <_raise_r+0x32>
 80282b0:	4620      	mov	r0, r4
 80282b2:	f000 f831 	bl	8028318 <_getpid_r>
 80282b6:	462a      	mov	r2, r5
 80282b8:	4601      	mov	r1, r0
 80282ba:	4620      	mov	r0, r4
 80282bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80282c0:	f000 b818 	b.w	80282f4 <_kill_r>
 80282c4:	2b01      	cmp	r3, #1
 80282c6:	d00a      	beq.n	80282de <_raise_r+0x4c>
 80282c8:	1c59      	adds	r1, r3, #1
 80282ca:	d103      	bne.n	80282d4 <_raise_r+0x42>
 80282cc:	2316      	movs	r3, #22
 80282ce:	6003      	str	r3, [r0, #0]
 80282d0:	2001      	movs	r0, #1
 80282d2:	e7e7      	b.n	80282a4 <_raise_r+0x12>
 80282d4:	2400      	movs	r4, #0
 80282d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80282da:	4628      	mov	r0, r5
 80282dc:	4798      	blx	r3
 80282de:	2000      	movs	r0, #0
 80282e0:	e7e0      	b.n	80282a4 <_raise_r+0x12>
 80282e2:	Address 0x00000000080282e2 is out of bounds.


080282e4 <raise>:
 80282e4:	4b02      	ldr	r3, [pc, #8]	; (80282f0 <raise+0xc>)
 80282e6:	4601      	mov	r1, r0
 80282e8:	6818      	ldr	r0, [r3, #0]
 80282ea:	f7ff bfd2 	b.w	8028292 <_raise_r>
 80282ee:	bf00      	nop
 80282f0:	20000488 	.word	0x20000488

080282f4 <_kill_r>:
 80282f4:	b538      	push	{r3, r4, r5, lr}
 80282f6:	4d07      	ldr	r5, [pc, #28]	; (8028314 <_kill_r+0x20>)
 80282f8:	2300      	movs	r3, #0
 80282fa:	4604      	mov	r4, r0
 80282fc:	4608      	mov	r0, r1
 80282fe:	4611      	mov	r1, r2
 8028300:	602b      	str	r3, [r5, #0]
 8028302:	f7de fb55 	bl	80069b0 <_kill>
 8028306:	1c43      	adds	r3, r0, #1
 8028308:	d102      	bne.n	8028310 <_kill_r+0x1c>
 802830a:	682b      	ldr	r3, [r5, #0]
 802830c:	b103      	cbz	r3, 8028310 <_kill_r+0x1c>
 802830e:	6023      	str	r3, [r4, #0]
 8028310:	bd38      	pop	{r3, r4, r5, pc}
 8028312:	bf00      	nop
 8028314:	2002f86c 	.word	0x2002f86c

08028318 <_getpid_r>:
 8028318:	f7de bb48 	b.w	80069ac <_getpid>

0802831c <__ascii_wctomb>:
 802831c:	b149      	cbz	r1, 8028332 <__ascii_wctomb+0x16>
 802831e:	2aff      	cmp	r2, #255	; 0xff
 8028320:	bf85      	ittet	hi
 8028322:	238a      	movhi	r3, #138	; 0x8a
 8028324:	6003      	strhi	r3, [r0, #0]
 8028326:	700a      	strbls	r2, [r1, #0]
 8028328:	f04f 30ff 	movhi.w	r0, #4294967295
 802832c:	bf98      	it	ls
 802832e:	2001      	movls	r0, #1
 8028330:	4770      	bx	lr
 8028332:	4608      	mov	r0, r1
 8028334:	4770      	bx	lr

08028336 <_malloc_usable_size_r>:
 8028336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802833a:	1f18      	subs	r0, r3, #4
 802833c:	2b00      	cmp	r3, #0
 802833e:	bfbc      	itt	lt
 8028340:	580b      	ldrlt	r3, [r1, r0]
 8028342:	18c0      	addlt	r0, r0, r3
 8028344:	4770      	bx	lr
 8028346:	Address 0x0000000008028346 is out of bounds.


08028348 <_init>:
 8028348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802834a:	bf00      	nop
 802834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802834e:	bc08      	pop	{r3}
 8028350:	469e      	mov	lr, r3
 8028352:	4770      	bx	lr

08028354 <_fini>:
 8028354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028356:	bf00      	nop
 8028358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802835a:	bc08      	pop	{r3}
 802835c:	469e      	mov	lr, r3
 802835e:	4770      	bx	lr
